[{"title":"本周看什么丨最近值得一看的 9 部作品","date":"2022-05-27 10:02:58","description":"☕️TL;DR近期佳作推荐：[美剧]怪奇物语第四季、[美剧]欧比旺、[电影]奇奇与蒂蒂：救难小福星、[纪录片]人生第二次、[瑞典剧]克拉克、[纪录片]文学的日常第二季、[美剧]林肯律师、[动画]攻壳机 ...<a href=\"https://sspai.com/post/73467\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73467"},{"title":"无需 Root，一键分辨手机自带系统应用用途或卸载：Universal Android Debloater","date":"2022-05-27 08:00:00","description":"不用往前追溯多久，就在好几年前，我们买到一台安卓手机激活之后进入桌面，打眼望去就是厂商给我们「贴心」准备好的各类预装应用——某些厂商预装应用数量甚至高达几十个，真是360度无死角希望用户能把智能手机用 ...<a href=\"https://sspai.com/post/73328\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73328"},{"title":"从盲目崇拜到理性使用，谈谈我眼中的「双向链接」","date":"2022-05-27 06:31:27","description":"有关双向链接的话题，不少朋友都已经深入讨论辨析过，尤其是王树义老师、和燕燕、吕立青、空谷、yuchen_lea 等朋友的相关文章给了我许多启发。即便如此，我还是想用自己的思维框架再聊聊「双向链接」。<a href=\"https://sspai.com/post/73407\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73407"},{"title":"游戏开发工具的真正价值是什么？是在于激发创意吗？","date":"2022-05-27 06:01:15","description":"\n<p data-pid=\"yeY7BNNP\"><b>先上结论，个人认为游戏开发工具的目的主要应该是帮助创意实现，解放生产力，而非激发创意本身。</b></p>\n<p data-pid=\"yQk339My\">针对这个问题首先我们可以来看下游戏开发过程中具体会用到哪些工具。</p>\n<p data-pid=\"zcIagG9Y\">从游戏开发流程出发，一般可以分为以下几个环节的工具链：DCC工具链，引擎工具链，研发效率工具链。</p>\n<h2>DCC工具链</h2>\n<p data-pid=\"txiWIN5N\"><b>DCC工具链</b>一般直接面向美术制作，从功能上划分一般可以简单分成两个大的方向。</p>\n<p data-pid=\"QAkuLQiq\"><b>一类是用于标准检测</b>，类似于质检，例如检查资产命名是否规范，模型的面数是否超标，权重骨骼数量是否过多，贴图尺寸是否过大等等。这类工具避免了手动检查的疏漏，是保证资产在游戏中有效性的基础。一般上一点规模的游戏都会根据游戏资产的制作规范开发相应的此类工具。</p>\n<p data-pid=\"9cev29lE\"><b>另一类则是加速美术制作效率</b>，从美术关注的角度，又可以细化为两类。</p>\n<p data-pid=\"zW1V7og-\"><b>第一种与美术资产制作和效果相关性不大</b>，一般这类工具都是自动化处理一些资产的固定流程，比如批量针对一批资产进行模型，材质合并，贴图的自动扩边，骨骼 Retargeting，模型各级 LOD 自动减面等，针对这些重复性的操作，由工具来执行，可以节省大量美术工作量，从而让美术有更多的精力投入到效果相关的工作中去。</p>\n<p data-pid=\"JbRE1IvU\"><b>第二种则与美术资产的制作相关性较高</b>，一般此类工具都与美术资产生产过程紧密结合，例如角色表情 Controller，《极限竞速 地平线4（Forza Horizon 4）》开发团队应用的车漆材质矫正流程工具，Epic Games 的 Metahuman 角色生成器，都属于这一类，这些工具的存在可以快速地帮助美术实现最终想要的资产效果。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-300c8bd15828fe31cfd914bf0dc2f454_720w.jpg?source=b1748391?rss\" data-caption=\"Forza Horizon 4 中使用的车漆矫正工具，图源 2019 GDC[1]\" data-size=\"normal\" data-rawwidth=\"997\" data-rawheight=\"496\" data-watermark=\"watermark\" data-original-src=\"v2-300c8bd15828fe31cfd914bf0dc2f454\" data-watermark-src=\"v2-ca771ed9499f1404f3863b20526a9e56\" data-private-watermark-src=\"v2-8372105736cbc1b6eb29cae9ead56db5\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-1f37a7c0b66efb977b8ea94ca537f10c_720w.jpg?source=b1748391?rss\" data-caption=\"Metahuman Creator，图源网络\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"713\" data-watermark=\"watermark\" data-original-src=\"v2-1f37a7c0b66efb977b8ea94ca537f10c\" data-watermark-src=\"v2-27729e70c423313fbbf6aec60738a2e9\" data-private-watermark-src=\"v2-1271adba6943fd4d48081253469574e7\"></p>\n<h2>引擎工具链</h2>\n<p data-pid=\"iZOlKYTn\">引擎工具链相对比较复杂，因为引擎本身就是一个工具集，大致来说，引擎工具我们大致可以将其分为四个方向：</p>\n<p data-pid=\"nCkmDMtX\"><b>第一类主要针对引擎资产管理</b>，比如资产浏览器，可以对不同类型的资产进行过滤查找，导入导出，还有具体的资产预览器，可以对相关的资产的属性编辑进行修改，以及对资产之间的关联引用关系进行编辑。</p>\n<p data-pid=\"e7sWsLzg\">这是引擎的基础功能之一，如果没有这块，就无法对引擎内的资产进行有效地调用，Unreal 的Content Browser，Unity 的 Asset 浏览窗口，以及相应的各类资产的预览界面都属于此类。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6f80544126e807ba722fd686d7e08400_720w.jpg?source=b1748391?rss\" data-caption=\"Unity Project Window，图源网络\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"171\" data-watermark=\"watermark\" data-original-src=\"v2-6f80544126e807ba722fd686d7e08400\" data-watermark-src=\"v2-30e369902ab385ac2f2d92f3261e03a5\" data-private-watermark-src=\"v2-f3bd7d26d71d7ac866022f2a4c03c6d4\"></p>\n<p data-pid=\"lMXvimZF\"><b>第二类主要是游戏逻辑所需针对各类资源的整合工具</b>，比如场景编辑器，包含了场景美术资产组装，光照调整，寻路数据生成等这些功能；音效编辑器则是由游戏逻辑驱动，对相关音源资产进行组合调用，以满足游戏需求，比如比较著名的 Wwise；动画状态机通过对一系列动作的组合拼接，可以实现各种不同游戏动作之间的平滑过渡与混合调用；AI行为树则直接驱动游戏 NPC 或者 Enemy 调用角色动作状态机，做出合理的动作与行为反馈。</p>\n<p data-pid=\"B4iIHZBU\">通过这类工具，可以直接将原始资源通过一定的规则，整合成最终游戏运行时所需的数据形式。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-bdfbb35b8579430c93b599704da41390_720w.jpg?source=b1748391?rss\" data-caption=\"Wwise 界面，图源网络\" data-size=\"normal\" data-rawwidth=\"1141\" data-rawheight=\"633\" data-watermark=\"watermark\" data-original-src=\"v2-bdfbb35b8579430c93b599704da41390\" data-watermark-src=\"v2-4492a75734f4a600fb333a3c83227ed0\" data-private-watermark-src=\"v2-c3f382bbcbe87386d6d928264bd53f53\"></p>\n<p data-pid=\"cvgUm4Dr\"><b>第三类主要是面向策划配置相关工具</b>，比如各类用于游戏运行时服务器端与本地的数据配置的相关工具，像玩家全身 Avatar 道具，武器 id 配置表，不同场景的 id 配置表，还有任务系统，包括任务编辑模块，以及上层的任务配置工具，这类工具一般都需要能够进行逻辑编辑，通常都会接入轻量级的脚本语言。</p>\n<p data-pid=\"F-pjrDie\"><b>第四类主要包括了性能 Profiling 工具以及各类静态资源统计工具</b>，Profiling 工具主要是用于游戏运行时的性能分析，比如 Draw Calls，同屏面数，物理，AI 等分项每帧针对 CPU，GPU 的消耗，进而定位运行时性能瓶颈，目的是保证游戏能够在目标平台上稳定流畅运行。例如 Unity 的 Profiler，Unreal 的 Timing Insights 都是典型的 Profiling 工具。</p>\n<p><img src=\"https://pica.zhimg.com/v2-b27d0f3472edc40450d37c22ee706486_720w.jpg?source=b1748391?rss\" data-caption=\"Unity Profiler，图源网络\" data-size=\"normal\" data-rawwidth=\"1693\" data-rawheight=\"816\" data-watermark=\"watermark\" data-original-src=\"v2-b27d0f3472edc40450d37c22ee706486\" data-watermark-src=\"v2-efb665ebf288ec9903242204ee9aaf1f\" data-private-watermark-src=\"v2-36e79a0aec715c348e6640cf1f1b8408\"></p>\n<p data-pid=\"viu-L4Ip\">静态资源统计工具主要在非运行时编辑器下对各类静态资产的容量以及规格进行批量统计，一般来说主要目的是限制单体资源内存占用，和控制游戏安装包容量。</p>\n<h2>研发效率工具链</h2>\n<p data-pid=\"8fpxOqN2\"><b>研发效率工具链一般指提供团队协同工作，敏捷开发管理以及快速版本构建发布相关的工具</b>，这块大致分三块。</p>\n<p data-pid=\"m383A_tA\"><b>第一类是用于游戏数据版本管理与多分支开发管理的版本管理工具</b>，例如 svn，perforce，git等，这类工具主要用于支持多人以及多团队的协同开发，避免多方对共同数据内容操作而引起的数据冲突，并支持分线多特性并行开发与多线合并，可以方便团队更加稳定地针对独立特性进行迭代，避免了多特性在同一版本环境中互相干扰造成的研发效率折损。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e5427396b52f213b9a316e3e2a150da3_720w.jpg?source=b1748391?rss\" data-caption=\"P4v 界面，图源网络\" data-size=\"normal\" data-rawwidth=\"1100\" data-rawheight=\"674\" data-watermark=\"watermark\" data-original-src=\"v2-e5427396b52f213b9a316e3e2a150da3\" data-watermark-src=\"v2-8aa88390dea4a2c3d8d92ed2f118b4a3\" data-private-watermark-src=\"v2-b5f0fcec4ff944ebe7b0cefcef6d4ed7\"></p>\n<p data-pid=\"1dQ8w0Ui\"><b>第二类则是方便项目管理的工具</b>，例如 TAPD，Jira，这类工具主要用于项目日常任务管理，进度统计，能够清晰地让项目成员知道目前的制作任务以及上下游任务的依赖关系，也能够让项目进度管理者清晰地知道当前整个项目各个模块的进度。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b84971ccff0845d2f75e5e3b9a81f212_720w.jpg?source=b1748391?rss\" data-caption=\"Jira 界面，图源网络\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"402\" data-watermark=\"watermark\" data-original-src=\"v2-b84971ccff0845d2f75e5e3b9a81f212\" data-watermark-src=\"v2-16b4f975c9c79256af4d252d2bd3a025\" data-private-watermark-src=\"v2-96384df6bc5e79a4f66c833fcd5694c1\"></p>\n<p data-pid=\"3U34cLNQ\"><b>第三类则是关于项目快速构建各类版本的相关流程工具</b>，这类工具的主要作用就是自动化快速构建不同平台，用于不同目的游戏安装包，比如 iOS，Android，Windows 等不同平台体验包，或者 development 版本用于真机调试，或者性能分析的测试包，以及各种分线分特性体验的快速体验包等。</p>\n<p data-pid=\"VO2WNy6K\">一套高效的自动构建流水线可以快速地让开发团队能够在最终目标平台上进行最终的版本验证，从而提早发现一些在开发环境中无法出现的真机问题。</p>\n<p data-pid=\"8jski9R9\">当然还有很多针对前两类工具开发的相关 DCC 工具与引擎工具，以减少不同软件之间切换使用的摩擦成本。</p>\n<h2>总结</h2>\n<p data-pid=\"WzoHnuSa\"><b>从以上这些工具分类与作用来看，在整个游戏开发过程中，真正与游戏内容生产或者游戏玩法设计相关的工具只是占到了其中一部分，其他更多的工具设计则是从增效，维护研发品质的角度为出发点， 这类工具的本质并不是为了激发创意。</b></p>\n<p data-pid=\"afR5vJ0E\">而在正常的游戏开发过程中，一般都是先提出想法，然后再去针对这个想法来开发对应的功能或者工具。而不是先做一套工具，再在这个工具的基础上去想创意。</p>\n<p data-pid=\"VUir4D-3\"><b>工具存在的目的是辅助创意的实现。</b></p>\n<p data-pid=\"EjBiUdbo\">当然辩证来看，高效率的工具，能够节省开发者大量的精力与时间，可以让他们投入更多的精力在创意相关的设计工作上。从这方面来说，高效的工具对创意的实现与产生还是有正向的推动作用的。</p>\n<p data-pid=\"53Wg1Rhz\">还有，一套强大的工具往往本身就包含了工具设计者自身丰富的经验与思想，使用者在应用这些工具的过程中，有时候也可能从工具设计的机制层面受到一定的灵感激发。</p>\n<p data-pid=\"JySYgPiW\">综上所述，虽然高效强大的开发工具在开发过程中也许会激发开发者的灵感，但游戏开发工具的目的主要应该是<b>帮助创意实现，解放生产力</b>，而非激发创意本身。</p>\n<h2>参考:</h2>\n<p data-pid=\"nIFgaf0s\">[1]<a href=\"http://link.zhihu.com/?target=https%3A//ubm-twvideo01.s3.amazonaws.com/o1/vault/gdc2019/presentations/Liu_Yibo_Physically_Based_Calibration.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">ubm-twvideo01.s3.amazonaws.com</span><span class=\"invisible\">/o1/vault/gdc2019/presentations/Liu_Yibo_Physically_Based_Calibration.pdf</span><span class=\"ellipsis\"></span></a></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bi-xiao-xian-41?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">keggame</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/534519807/answer/2501596051?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">23 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/513042337?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">初探游戏开发，使用什么引擎？</a><br><a href=\"http://www.zhihu.com/question/521856343?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏引擎开发的学习路线是怎么样？</a><br>\n","link":"http://www.zhihu.com/question/534519807/answer/2501596051?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"从标准与参数配置出发，讲讲如何为电动汽车挑选「随车充」","date":"2022-05-27 03:36:29","description":"我之前关于充电体验的分享中，有不少评论对于随车充比较感兴趣，我个人和身边车主也都有不同随车充产品是使用经历，关于固定充电桩和第三方充电桩可以看我已经发布的分享，本篇来专门聊聊随车充！<a href=\"https://sspai.com/post/73424\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73424"},{"title":"记一个平平无奇的春天：「春日发声」活动回顾","date":"2022-05-27 02:33:26","description":"「春日发声」是一个抓住 2022 年春天的尾巴办下来的活动，趁我还记得大部分的过程，和大家分享一下这些值得被记录的幕后过程。<a href=\"https://sspai.com/post/73431\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73431"},{"title":"派早报：深圳推出一系列促进消费新规、宜家推出支持 Matter","date":"2022-05-27 01:01:04","description":"雷克沙发布新款游戏移动 SSD，realme 真我平板 X 正式发布等<a href=\"https://sspai.com/post/73461\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73461"},{"title":"《巫师 3：狂猎》中有哪些隐藏较深或难以发现的细节？","date":"2022-05-26 16:22:02","description":"\n<p data-pid=\"PeSvRKiv\">《巫师3》对话里面隐藏了许多小细节，在人物的对话中，我们可以补全对游戏世界背景的认知——实际上，这就是巫师3里面隐藏较深或难以发现的细节。</p>\n<p data-pid=\"1xAv6nX-\">1.关于扑克牌，在白果园的小酒馆：</p>\n<blockquote data-pid=\"jcOKWPZJ\">\n<b>农民A</b>：四组，就是四种、四样！就像黑桃和梅花是不同组那样，只是每组还有各自的人脸图案。另外还有所谓的特别牌。<br><b>农民B</b>：我们还是玩战争牌吧？等我学会你这个新游戏，天都要亮啦。</blockquote>\n<p data-pid=\"uC9Id9qv\">《巫师3》里面流行的当然是昆特牌，有人戏称为昆曲，为了昆特牌杰洛特连寻女都忘记了。然而白果园这里小酒馆的农民对话其实暗示的是现实里面的扑克牌。</p>\n<p data-pid=\"LCVVXtZ1\">波兰蠢驴实际上在玩梗。这个梗是什么呢，实际上农民最为贴近生活，故而也最容易创新。实际上扑克牌扣掉大小王牌，52张象征全年52个星期。黑桃♠、红心♥、梅花♣、方块♦与四季有关。每季13张，代表一季13星期。每种图案13张之点（1-13）加起来是91点，而每季也是91天。大小王牌则代表多出的日子（以最多日子数的年份计算，即闰年，闰年有366天，即52星期再加上2天，再加上的2天就是代表2张大小王牌）。此外，全牌只有两种颜色，红色代表白天，黑色代表夜晚。</p>\n<p data-pid=\"dp-q1V3F\">其中黑桃代表橄榄叶，象征和平；梅花为三叶草，意味著幸运；方块呈钻石形状，象征财富；而红桃为红心型，象征智慧和爱情。</p>\n<p data-pid=\"fNB-qZ9b\">此外也有研究指出，黑桃、红心、方块、梅花的图案与中世纪的阶级有关：黑桃♠（spade）是由意大利语的“剑”Spada而来，即是贵族的象徴；红心♥则是由“圣杯”变形而来，象征圣职者；方块♦由“货币”变形而成，象征商人；最后，梅花♣是由象征农夫的“棍棒”变形而成，以前的纸牌上会在农夫的棍棒印上梅花，随著后代传承省略棍棒而只剩下梅花。</p>\n<p data-pid=\"V4E4IYpV\">比较有意思的是，巫师3世界里面其实主要就是这四个阶层，类似于陶森特或蔷薇的骑士、矮人为代表的商人、永恒之火或者其他德鲁伊这样的神职人员、随处可见的农民组成。</p>\n<p data-pid=\"iDhPTJT0\">这里农民所说的“四组，就是四种、四样！就像黑桃和梅花是不同组那样，只是每组还有各自的人脸图案。另外还有所谓的特别牌。”实际上就是扑克牌。有意思的是人们在现实流行扑克牌，巫师3游戏中大家却流行昆特牌。</p>\n<p data-pid=\"ge5cfv9k\">2.白果园蛇派猎魔人的“莫须有”，太冤了，白果园村民谈话：</p>\n<blockquote data-pid=\"Rz0UMGca\">\n<b>农民A</b>：我奶奶把铁匠儿子的事情告诉我了。他失踪了一天，所以大家把附近猎怪物的狩魔男抓了起来，开始戳他、拷问他。他开始动来动去，扭曲身体，然后'砰'的一声，他们把他的头打了下来。哎，事情都发生了。不过抓那个孩子的是水鬼，跟狩魔猎人没关系。<br><b>农民B</b>：那他们怎么办？<br><b>农民A</b>：他们又不能把他的头缝上去！听说他们安葬了他的尸体，让他在土窖里安息……</blockquote>\n<p data-pid=\"9vTLOaPG\">白果园的蛇派猎魔人实际上遭受了无妄之灾，“吃着火锅唱着歌”明明在猎魔，结果就被当成抓孩子的怪物了——实际上除了陶森特，各国民众对猎魔人都有很深的偏见，这个偏见过去是杰洛特被草叉弄死，后面是猫派猎魔人的悲哀（狼与猫玩耍的地方）。蛇派更惨，直接被当地民众当成怪物弄死了，实际上大家也知道是冤枉的——莫须有，实在是令人悲叹。</p>\n<p data-pid=\"-LZHKs0J\">或许玩家在白果园收集资料的时候可以看到，更为悲哀的是，这个蛇派猎魔人实际上被屈打成招，换言之在法律上依照程序被处死，“迟到的正义并非正义”。</p>\n<p data-pid=\"JkJYr_Q9\">3.地域歧视和争执，白果园村民谈话：</p>\n<blockquote data-pid=\"Ew5L05tA\">\n<b>农民A</b>：苟伊德玛！来跟我干一杯吧。<br><b>农民B</b>：现在我叫德尔文了，不叫苟伊德玛。<br><b>农民A</b>：怎么，什么意思？你命名时就是这个名字的啊！怎么会取“德尔文”这种奇怪的名字？<br><b>农民B</b>：是尼弗迦德语，我奶奶是奈泽尔来的。<br><b>农民A</b>：哼，这样是吧。好哇，德尔文先生，我先走一步了，愿太阳引领你——滚出这里！</blockquote>\n<p data-pid=\"bgtQLjfM\">尼弗伽德的标志当然是太阳，泰莫利亚（Temeria） 的标志却是鸢尾花，感觉波兰蠢驴其实在内涵乳法——希特勒入侵法国。但是这个只是第一个层面的理解，实际上就像电影《沃伦》或者卢旺达种族大屠杀一样，明明是积年累月生活的邻居，或许因为种族、意识形态、信仰不同就导致分歧，这个分歧其实会导致进一步的纷争。当然德尔文先生其实也是为了趋利避害，某种意义上的趋炎附势其实是为了更好的“活着”罢了。</p>\n<p data-pid=\"ZYvWdE3f\">4.尼弗伽德人民的勤劳，善于改造自然，白果园军营：</p>\n<blockquote data-pid=\"y9Rzcodj\">\n<b>尼弗迦德士兵A</b>：听说狮鹫兽又在树林里出现了。<br><b>尼弗迦德士兵B</b>：不，是在路上，这次是攻击了商人的马车。<br><b>尼弗迦德士兵A</b>：家乡的人说得果然没错，北方什么都没有，沼泽和怪物最多。<br><b>尼弗迦德士兵B</b>：放心，只要我们把沼泽的水抽干，把那些怪物都杀死，跟你说，不用十年，这里就会变得和我们家乡一样。</blockquote>\n<p data-pid=\"ztSWYuQB\">比较有意思的是，尼弗伽德士兵身上隐含了文明的象征，更多意义上像秦国、罗马，也像西汉——装备精良，更有正义感，纪律严明，喜欢耕战。在笔者看来，似乎白果园的尼弗伽德士兵会诚心诚意的绞杀怪兽，他们建设和维护秩序，不仅仅出于侵略战争，也在于想要改变自然，他们不太信多种神灵。相比而言，北方诸国似乎就喜欢“淫祀”，尼弗伽德和北方其实文化程度完全不同。</p>\n<p data-pid=\"Mp_pfUJ1\">5.威伦实际上在爆发鼠疫，以及类似战争宣传上的“套路”古今中外都有啊，白果园军营：</p>\n<blockquote data-pid=\"mkFHWC_p\">\n<b>尼弗迦德士兵A</b>：你听说了吗？杰里德下士死了。<br><b>尼弗迦德士兵B</b>：杰里德？是那个铁血教头杰里德？我以为北方人没一个能打的赢他。<br><b>尼弗迦德士兵A</b>：他不是被北方人杀死的。听说他是生病死的，除了发烧，腋下还长了一些黑色的沸泡。不过可别四处宣扬，那些政治官员对这种事很敏感。</blockquote>\n<p data-pid=\"XWYYwdXF\">“腋下还长了一些黑色的沸泡”明显是一种传染病（这个病是什么呢，我后面说），官方为了避免军队恐慌，所以才会对这种事很敏感，但是士兵其实都不是傻子。颇为有意思的是，在威伦一些聚集点，我们经常可以听到尼弗伽德士兵有痰或咳嗽的声音，有合理理由认为军队内部在传播一种上呼吸道传染病。</p>\n<p data-pid=\"79XGFpXi\">一个佐证就是威伦尼弗迦德军营附近，会有三个士兵闲聊，大体意思是现在军营内有瘟疫，感染会可以被送至后方，一个士兵说有个队长在卖病人的床单，另一个人问能确保得病么，看到主角来了会说小声点有人来了。</p>\n<p data-pid=\"0dVpSvc4\">这一点还可以在威伦其他村民对话得到验证，威伦：</p>\n<blockquote data-pid=\"GDQSc7ph\">\n<b>农民A</b>：黑衣人很邪恶没错，可是他们经过的时候，有人丢了一块面包给我的弗威提...<br><b>农民B</b>：小心他发高烧。<br><b>农民A</b>：你讲什么？<br><b>农民B</b>：他们在某个村庄送猪肉，结果那个村子现在通通死光了。<br><b>农民A</b>（惊恐）：弗威提，快来！</blockquote>\n<p data-pid=\"z8ZGWcVj\">尼弗伽德人并非那样邪恶，但是这里面发高烧，恐怕就是跟上呼吸道传染有关系，军中有瘟疫。</p>\n<p data-pid=\"_ae9HXan\">另外，大家可能不会忘掉费克岛的老鼠之塔，凯拉梅兹指引杰洛特跟她一起去，这背后隐藏了什么呢？请看对话，实际上凯拉梅兹是知道当地在流传瘟疫的，老鼠之塔其实是一个隐喻。</p>\n<p data-pid=\"mqdPRQ-m\">与此同时，人们应该不会忘却安娜贝的灵魂早已变成了专门散布疾病和瘟疫的瘟疫女妖——散播的什么瘟疫，结合老鼠之塔的经历，有心人现在已经明白的七七八八了。</p>\n<p data-pid=\"CtiO8WG6\">值得提到的是，历史是由幸存者书写的，历史未必真的如宣传或者书本上的那样。游戏攻略里面一般说“一位叫亚历山大的术士在费克岛上研究瘟疫术，战乱期间领主维瑟拉德和他的女儿安娜贝以及家人在这里避难。但是逃难到此的暴民，不仅将塔楼里一洗而空，杀害了安娜贝的家人，并要对她施暴。安娜贝喝下术士给他的药水后倒下。他的爱人葛拉汉以为他死掉了，便逃离了塔楼，并诅咒这里的人统统下地狱。”</p>\n<p data-pid=\"TZ-2YJiN\">注意，游戏里面，杰洛特解决了费克岛上的诅咒事件，回去见凯拉，说起岛上的亚历山大在研究瘟疫的事情，凯拉表现出极大的兴趣——我们往下看。</p>\n<p data-pid=\"P-CKM9Kz\">威伦：</p>\n<blockquote data-pid=\"91yM_BZ8\">\n<b>农民A</b>：那女巫说我应该...教育你们。现在我努力。你们要避免瘟疫，就要注意...注意...卫生什么的。而且水井的水不要直接喝...<br><b>农民B</b>：反正每星期洗一次澡，水烧开再喝就对了！</blockquote>\n<p data-pid=\"BJNKhaOg\">“那女巫（凯拉）说我应该...教育你们。现在我努力。你们要避免瘟疫，就要注意...注意...卫生什么的。而且水井的水不要直接喝”——这里的要避免瘟疫，实际上已经暗示在流行瘟疫了，只是瘟疫应该是由南向北传播的。不知细心的玩家是否发现，经常有一些南边的村庄鸡犬不闻，毫无人烟。我推断这不仅仅是战争的结果，实际上还有瘟疫传播的结果。</p>\n<p data-pid=\"zO_Gy2hm\">更有意思的是，可以看到奥森福特和诺维格瑞有很多带着鸟嘴面具（防护罩）的医生，以及尼弗伽德和北方军队不约而同地用火焚烧尸体，这里其实点点滴滴都在暗示：真相呼之欲出。</p>\n<p data-pid=\"5-4ZiTk_\">推理到这个地步，要求搞好卫生，喝开水，然后病情症状是发高烧，“腋下还长了一些黑色的沸泡”——其实这个就是历史上令人闻风丧胆的鼠疫，也叫黑死病。略微科普一下，鼠疫分为腺鼠疫、肺鼠疫、败血症型鼠疫和一些少见类型。</p>\n<p data-pid=\"qLvUfIoE\">看看典型的腺鼠疫最为常见，除具有鼠疫的全身表现外，受侵部位所属淋巴结肿大为其主要特点。好发部位依次为腹股沟淋巴结，腋下、颈部及颌下淋巴结，多为单侧。淋巴结肿大与发热同时出现，表现为迅速的弥漫性淋巴结肿胀，典型表现为淋巴结明显触痛而坚硬，与皮下组织粘连，失去移动性，周围组织显著水肿，可有充血和出血。由于疼痛剧烈，患者常呈被动体位。这个也就是所谓“杰里德下士的症状是除了发烧，腋下还长了一些黑色的沸泡。不过可别四处宣扬，那些政治官员对这种事很敏感”。</p>\n<p data-pid=\"fcLF2LnA\">至于尼弗伽德士兵有痰或咳嗽的声音，则是肺鼠疫，这种类型起病急骤，寒战高热，在起病24～36小时内可发生剧烈胸痛、咳嗽，咯大量泡沫粉红色或鲜红色血痰；呼吸急促并呼吸困难；肺部仅可闻及少量散在湿啰音或轻微的胸膜摩擦音，较少的肺部体征与严重的全身症状常不相称。胸部X线片可见多叶段分布的斑片状边缘模糊的高密度阴影。若不及时给予有效治疗，患者多于发病2～3天后死于中毒性休克、呼吸衰竭和心力衰竭。</p>\n<p data-pid=\"rKonE3Hx\">这正好佐证了对话：</p>\n<blockquote data-pid=\"OSMZJlFe\">\n<b>农民A</b>：黑衣人很邪恶没错，可是他们经过的时候，有人丢了一块面包给我的弗威提...  <br><b>农民B</b>：小心他发高烧。 （起病急骤，寒战高热） <br><b>农民A</b>：你讲什么？  <br><b>农民B</b>：他们在某个村庄送猪肉，结果那个村子现在通通死光了。  （若不及时给予有效治疗，患者多于发病2～3天后死于中毒性休克、呼吸衰竭和心力衰竭。）<br><b>农民A</b>（惊恐）：弗威提，快来！</blockquote>\n<p data-pid=\"9N2w_nYv\">回到老鼠之塔问题上，我猜想游戏背景中的“费克岛上的亚历山大在研究瘟疫”其实并不是在研究如何传染鼠疫，而是在思索如何治疗鼠疫，这从其中用于隔离的玻璃和牢笼可以看到，凯拉为什么会对这个研究感兴趣呢，回到她提示村民要避免瘟疫，实际上是对鼠疫产生了兴趣。当然这个鼠疫也可以作为击败尼弗伽德的工具，所以她从政治角度上有给北方国王的动机（在杰罗特与凯拉对话完之后，凯拉会到灯塔处得到瘟疫研究笔记。她想拿这份笔记回到北方，妄想与北方国王和解。实际上无论选择如何，凯拉都会研制出瘟疫的解药，从这一点来看无论亚历山大还是凯拉都在致力于研究疾病的原理，从而治疗疾病）——不过我们要知道，医疗科学可以治病也可以害人，为恶为善都在一念之间。</p>\n<p data-pid=\"qmM2ITPf\">6.宣传为了政治服务，白果园村民谈话：</p>\n<blockquote data-pid=\"5vXWlS7m\">\n<b>小男孩</b>：大雨大雨一直下，恩希尔皇帝鼾声大。睡前碰到头没在怕，早上尿床湿答答。<br><b>农妇</b>：什么？你在唱什么？谁教你这首歌的？！<br><b>小男孩</b>：查提。<br><b>农妇</b>：你给我听清楚，以后绝对不准唱那首歌，永远不行！以后也不准再去和查提玩。<br><b>小男孩</b>：可是我跟查提最要好了！<br><b>农妇</b>：查提是个小傻瓜，他的不小心会害我们通通丢了小命，敢给我看到你和他玩你就给我当心点！</blockquote>\n<p data-pid=\"BQzrBtrp\">实际上政治性的童谣来自于什么地方呢？我猜测来自于罗契他们的游击队。现实中也不罕见，且看一段蔡楚《民间童谣和政治化的儿歌》节选：上世纪五十年代初期，我（蔡楚）就读于成都市龙江路小学。当时朝鲜战争爆发，音乐老师教我们一首儿歌：“有个人是大坏蛋，他的名字叫李承晚，坐飞机、丢炸弹，炸死人民千千万。人民叫他陪血汗，陪不起就敲沙罐，第二天，我来看，沙罐敲得稀巴烂。” 不久就传遍成都，风靡一时，大街小巷的女同学跳橡筋绳都在唱。 </p>\n<p data-pid=\"DBzk7e7k\">笔者不由想起还有一个流行在97年到2003年的东北童谣，“运输大队长（名讳）他妈，稀里哗啦，洗脚的水，扑地瓜，被窝里吃，被窝里拉，被窝里放屁崩爆花”，这亦然其实是政治童谣化。</p>\n<p data-pid=\"8B87nlsu\">白果园的农妇其实很聪明，当妈妈的都很聪明“政策时时变”，很多时候当权者将人民视作愚民，其实自己何尝不是愚民呢？一些愚弄措施其实愚弄的只是小孩子罢了——当然通过小孩子去影响家庭，当真是当局好算计。</p>\n<p data-pid=\"DX1M9Dm2\">7.维瑟米尔不白给，其实是个智谋人物，比杰洛特想的多，反过来杰洛特不是很聪明的样子。白果园小酒馆：</p>\n<blockquote data-pid=\"5dMd03jO\">\n<b>维瑟米尔</b>：那片麦田是谁的？<br><b>农民</b>：树林旁的那片吗？是伯彦·克林米尔的。狩魔大师，他是个好人，不过……<br><b>维瑟米尔</b>：好、好，这位伯彦先生短时间内会出来巡视他的麦田吗？<br><b>农民</b>：没必要吧？因为离收割的时候还很久……</blockquote>\n<p data-pid=\"XulZFPUz\">当爹的不容易啊，总要给孩子擦屁股。从维瑟米尔身上，大家是否可以找到老父亲的感觉呢？名义上让孩子自己去办事，放孩子去飞，实际上却早就考虑好很多孩子会想不到的细节了。《巫师3》这里面其实有个值得关注的地方是，白果园最后猎杀狮鹫的诱饵田地（杰洛特去采集鼠李草包装假羊）实际上是伯彦·克林米尔的，这个正好呼应了维瑟米尔跟村民对话的事前设计。</p>\n<p data-pid=\"1dvXVMwD\">8.前作的雅妲公主，以及杰洛特“打桩机”之名全大陆都知道了，维吉玛宫殿：</p>\n<blockquote data-pid=\"LpIrcseM\">\n<b>尼弗迦德贵族A</b>：百分之百确定，像猫一般锐利的眼睛，带着两把剑……就是狩魔猎人。<br><b>尼弗迦德贵族B</b>：或许他要去解决地下墓窖的怪物。从弗尔泰斯特时代起，那里就一直有吸血妖鸟。<br><b>尼弗迦德贵族A</b>：可能吧。谁知道他究竟播了多少种……大家都说他好色至极。真是典型的北方人。<br><b>尼弗迦德贵族B</b>：净是些野蛮人！</blockquote>\n<p data-pid=\"vDWMmd4N\">“从弗尔泰斯特时代起，那里就一直有吸血妖鸟”，弗尔泰斯特的女儿是怪兽，细心的朋友在维吉玛花园里面可以找到暗室，并找到相关骷髅和线索，不知道大家是否想到一个昆特牌的名言“<u><a href=\"http://link.zhihu.com/?target=https%3A//zhidao.baidu.com/question/2142432330032898308.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">男人喜欢自己的妹妹是件自然而美好的事</a></u>”，实际上吸血妖鸟雅妲公主就是悲剧故事的结果。至于杰洛特打桩机，还需要展开么？人所尽知。从背面其实看到另一个事情，似乎尼弗伽德对礼节和名声更在意，或许尼弗伽德是一夫一妻制？</p>\n<p data-pid=\"vhOAH5Mk\">9.实际上尼弗伽德很擅长于明谋和阴谋，维吉玛宫殿：</p>\n<blockquote data-pid=\"yBphetaA\">\n<b>大使</b>：……诺维格瑞真正的当权者不是市议会、也不是商人公会，而是永恒之火教会和黑社会。有时候两者很难区分，因为双方都无情残酷，愤世嫉俗到……<br><b>抄写员</b>：请慢一点，大使……我跟不上了。<br><b>大使</b>：我自己来写报告好了。这样你只要准备一式三份的草稿就好了。</blockquote>\n<p data-pid=\"xXQEhE6B\">宗教和黑社会一样无情残酷。如何搞定一个城市，如何劝降这个城市的当权者，要从情报入手。偏偏这个还是明面的谋略。其实从刻画中可以看到尼弗伽德大使馆在大桥附近，大桥附近可是有一个高级销金窟的，金钱和美色之下，你说尼弗伽德的情报来自于什么地方？</p>\n<p data-pid=\"MJIUv8Re\">10.不要想歪了，其实是便秘，乌鸦窝：</p>\n<blockquote data-pid=\"4691g32t\">\n<b>男爵的手下A</b>：他在里面搞了有一个小时了吧？<br><b>男爵的手下B</b>：看来这次积的分量不少。</blockquote>\n<p data-pid=\"T_lrhig6\">好像是一语双关，对话地点发生在乌鸦窝一个类似厕所边上，尤其是参军的男子，容易口无遮拦，接触过就知道了，他们言必称什么呢？人类自然的欲望罢了。</p>\n<p data-pid=\"lw5WThii\">评论区说这些士兵其实还去巫医家里讨药，确实如此，这个士兵在军队里人缘还不错，故而有不少朋友去帮助他解决病痛，只是很有意思的是巫医似乎给了这个士兵猛烈的泻药。</p>\n<p data-pid=\"3kFWyYif\">11.侧面看血腥男爵是个非常正义的好汉，但是可惜了，酗酒成命，对下属没有进一步的约束，乌鸦窝：</p>\n<blockquote data-pid=\"ccev5x3H\">\n<b>男爵的手下A</b>：我们去村子里收保护费，那家伙上了一个姑娘。<br><b>男爵的手下B</b>：所以血腥男爵把他杀了。<br><b>男爵的手下A</b>：你说你从哪儿听来的？</blockquote>\n<p data-pid=\"gd-LhnID\">乌鸦窝：</p>\n<blockquote data-pid=\"VbBEtNf_\">\n<b>男爵的护卫A</b>：伙伴，想去找找看那个女妖吗？<br><b>男爵的护卫B</b>：你是说铁匠的女儿？缺颗牙的那个？好主意，她的奶子还蛮大的。<br><b>男爵的护卫A</b>：我是说最近破坏农妇鸡舍的那个尖叫怪啦！<br><b>男爵的护卫B</b>：你疯了不成？还想装英雄拯救世人咧。</blockquote>\n<p data-pid=\"BXP4IcWs\">乱世很难维持军纪，溃兵如匪，这些人曾经都是好男儿，可是溃败之后，都失去了心气。许多逃兵或许良心未泯，但是这样的人太少了，一群没有军纪只会欺负百姓的军队和土匪差不多。 乌鸦窝里面，其实血腥男爵也管不了那么多。</p>\n<p data-pid=\"htXRemAz\">12.贿赂是人间常态？会说话的人总能找到一条路，威伦通向诺维格瑞的路：</p>\n<blockquote data-pid=\"hxCdsYoe\">\n<b>旅行家</b>：这些税真是有够贵……<br><b>瑞达尼亚士兵</b>：这是国王设的，不是我。<br><b>旅行家</b>：但决定谁能通行的是你，不是拉多维德。或许我们能讨论出个共识。<br><b>瑞达尼亚士兵</b>：我们可以讨论讨论……但现在喉咙好像有点渴……<br><b>旅行家</b>：这可不行，艾科！拿个杯子来给下士。<br><b>瑞达尼亚士兵</b>：下士……？不对，我只是低阶大兵啊。<br><b>旅行家</b>：很快就要升官了！你的举止就像个军官，头脑还很聪明！</blockquote>\n<p data-pid=\"NmzjS1fq\">这里的士兵其实是个雏，旅行家能说会道，不仅在在中国的社会文化中，“阎王好见，小鬼难缠；穷人好帮，懒人难扶”已经成为了每个人都可能遇到的困扰难题。其实西方也如此，尤其是在这人心不古的现代社会，确实是又常见、又实用，不禁令人唏嘘。</p>\n<p data-pid=\"ErIz2ruh\">不妨想想电视剧《西游记》里面的情节：孙悟空去那阎王殿找阎王，刚开始会遭到门口的小鬼小妖的阻挡，说他既没有令牌，也没有名帖，绝对不能见阎王。这种情况下倒逼民众行贿，你说这是什么世道呢？</p>\n<p data-pid=\"liwJTdDL\">这个旅行家比较会恭维，实际上在古代中国动辄称呼“军爷”“将军”，都是恭维，为了方便行走，总要有一些人情世故。</p>\n<p data-pid=\"DS6Oik8c\">与此对比的是不懂人情世故的（旅行家遵纪守法，但是没有向士兵行贿，看到这里大家有没有想到什么？），诺维格瑞城外路边：</p>\n<blockquote data-pid=\"hsp1vulS\">\n<b>旅行家A</b>：你的那圈熊猫眼是谁的杰作？<br><b>旅行家B</b>：瑞达尼亚士兵，那些该死的小偷，全都去死吧。<br><b>旅行家A</b>：嘘……别让别人听到了……<br><b>旅行家B</b>：我去了酿酒厂，正想骑马回城里。东西都带好了，通行证、许可证、关税也付了。那些该死的士兵拦住我，说他们要征收我的伏特加。说是要慰劳士兵用。我问他们，‘哪时候找麻烦也是士兵的工作了？’他们把我打下马，把东西都抢走了。</blockquote>\n<p data-pid=\"GMlx_CtT\">13.求人的时候卑躬屈膝，实际上背后则喜欢说三道四，人性的劣根不改，凯拉的小屋前：</p>\n<blockquote data-pid=\"5BohHWvM\">\n<b>农民A</b>：她心情很差，我们最好明天再回来。<br><b>农民B</b>：小心你的嘴唷！她动不动就发脾气，就连人家不小心得罪了一点点，她也要报复呢。<br><b>农民A</b>：贱人就是爱发火，一定是缺男人啦！</blockquote>\n<p data-pid=\"v1-GytT-\">这里面其实是农民们想要求药物，然而没有得到满足，就开始背后诋毁凯拉，人性实在难以琢磨，人心险恶。</p>\n<p data-pid=\"Q74cOMcf\">有这样一则寓言故事：有一个老人和一个小孩，用一匹驴子驮着货物去赶集，孩子骑着驴，老人跟在后面，路上的人见了都说这孩子不懂事，让老年人徒步，而自己骑驴享福。孩子连忙下来，让老人骑上。路上的人又说，老人怎么忍心自己骑驴，让小孩走路，老人听了又把孩子抱上来一同骑。骑了一段路，别人都说他们残酷，两个人骑一头小毛驴，不怕把毛驴压死了。两个人就只好都下去，可是路人又笑他们是呆子，有驴子不骑却走路，老人听了叹息道：“这下没法子了，看来我们只剩下一条路，两个人抬着驴子走吧。”</p>\n<p data-pid=\"vYzjDMls\">这个故事说明人言可畏啊，类似的一句话说的也是如此，当初求种贱如狗，如今撸完嫌人丑。</p>\n<p data-pid=\"YSmpAa5t\">14.无形幽默，类似世说新语，护身符的确解渴了，用护身符换酒喝，威伦：</p>\n<blockquote data-pid=\"9kXvGTR5\">\n<b>农民A</b>：我问她，“要怎样让我那酒鬼老公别再喝那么多酒？”她给了我一个护身符，还说那会解他的渴。<br><b>农民B</b>：结果呢？成功了吗？<br><b>农民A</b>：隔天他竟然把护身符拿去换酒喝！</blockquote>\n<p data-pid=\"Btb13ekK\">威伦进入民宅搜刮的时候，碰到最多的就是各种酒，什么尼弗伽德柠檬酒，黑啤酒，樱桃啤酒，马哈坎烈酒之类的：实际上乱世人们总是买醉，不由想起一些史实。</p>\n<p data-pid=\"67WfLNl-\">伶曰：“善！吾不能自禁，惟当祝鬼神自誓耳。便可具酒肉。”妻从之。伶跪祝曰：“天生刘伶，以酒为名。一饮一斛，五斗解酲。妇儿之言，慎不可听。”仍引酒御肉，隗然复醉。——《晋书》</p>\n<p data-pid=\"2bTHIKuA\">刘伶喜欢喝酒，每次喝很多。当他再一次跟妻子要酒喝时，刘伶的妻子实在无法忍受，果断倒掉了美酒，把酒具也给砸了，哭着劝他一定要戒酒。对妻子的话，刘伶还是给了点面子。他爽快地答应了，但同时提出了一点小要求，说自己自制力比较差，控制不了饮酒的念头，要求妻子准备点儿酒肉，得向上天发誓戒酒，以此为证。刘伶的妻子信以为真，赶忙准备了美酒佳肴。结果刘伶跪下来祈祷说，自己天生就是喜欢喝酒，一次就得喝一斛，喝五斗才能消除酒瘾，上天您可千万别听信妇人之言啊！说完，刘伶又一次大口吃肉、大碗喝酒，一会儿就又醉倒了，弄得妻子哭笑不得。</p>\n<p data-pid=\"cwmfpDRv\">至于用护身符换酒喝，这令人想起好酒的唐代，贺知章金龟换酒。唐代孟棨《本事诗》记：“李太白初至京师，舍于逆旅，贺监知章闻其名，首访之。既奇其姿，复请所为文，出《蜀道难》以示之，读未竟，称赏者数四，号为谪仙。”从此李白被称为“谪仙人”，人称诗仙。两人相见恨晚，遂成莫逆。贺知章即邀李白对酒共饮，但不巧，这一天贺知章没带酒钱，于是便毫不犹豫地解下佩带的金龟(当时官员的佩饰物)换酒，与李白开怀畅饮，一醉方休。这就是著名的“金龟换酒”的故事。</p>\n<p data-pid=\"dVs6nEkY\">唐天宝三年(744)，贺知章告老还乡，李白深情难舍。 作《送贺宾客归越》诗道：“镜湖流水漾清波，狂客归舟逸兴多。山阴道士如相见，应写黄庭换白鹅。”表达了他对贺知章的情谊和后会有期的愿望。不幸，贺知章回到家乡不到一年，便仙逝道山。对此，李白十分悲痛，他写下了《对酒忆贺监二首》，其序曰：“太子宾客贺公于长安紫极宫一见余，呼余为‘谪仙人’，因解金龟换酒为乐。怅然有怀，而作是诗。”其一：“四明有狂客，风流贺季真。长安一相见，呼我谪仙人。昔好杯中物，今为松下尘。金龟换酒处，却忆泪沾巾。”其二：“狂客归四明，山阴道士迎。敕赐镜湖水，为君台沼荣。人亡余故宅，空有荷花生。念此杳如梦，凄然伤我情。”可见“金龟换酒”一事，给李白留下了多么深刻的印象，产生了多么深厚的挚情。</p>\n<p data-pid=\"2OhPWYwA\">15.欺骗和被欺骗，拜维斯尼弗伽德巡逻队的真相：</p>\n<p data-pid=\"SpiZJBwq\">杰洛特前往奥瑞登，从告示板上接受本委托任务。发现驻军的指挥官米兰正招募熟悉本地的人，前去帮忙寻找失踪的巡逻队。按照指示前去和驻军指挥官米兰（一个光头）交谈，得知他派遣的巡逻队在温达梅尔湖南岸失踪。据说有个村落叫拜维斯，那里有怪物在杀人，整个村庄都空了。</p>\n<p data-pid=\"gBbgiAHZ\">这时候会有周边的士兵在议论：</p>\n<blockquote data-pid=\"mRPf3dui\">\n<b>尼弗迦德士兵A</b>：去拜维斯的巡逻队有消息吗？<br><b>尼弗迦德士兵B</b>：没有，我有预感即使收到了也是坏消息。<br><b>尼弗迦德士兵A</b>：我们应该派搜救队去搜索。<br><b>尼弗迦德士兵B</b>：指挥官不准，他说我们不能再冒折损人力的险。<br><b>尼弗迦德士兵A</b>：他给了一笔赏金，赏金给提供巡逻队消息的人！<br><b>尼弗迦德士兵B</b>：......我最讨厌这片沼泽了....等着瞧吧，我们肯定没有人会活着回去。</blockquote>\n<p data-pid=\"-fsfriud\">从士兵闲聊和小队指挥官的话语里面可以得出事实：军官爱惜自己的士兵，但同时也在致力于维护地方秩序，故而得知拜维斯有怪物在杀人，米兰派遣了巡逻队。</p>\n<p data-pid=\"KG8Ej6ze\">这一支巡逻小队的结局如何呢，到底发生了什么？</p>\n<p data-pid=\"HeJy6nPT\">杰洛特来到南方的拜维斯村，遇到成群的食尸鬼，将它们全部斩杀后，幸存的村民说尼弗迦德人烧杀抢掠，到处抢劫值钱的东西，然后那些食尸鬼出现虐杀了那些士兵。</p>\n<p data-pid=\"8AZpIf0n\">真相就是如此么？绝非如此。调查完地上的狗尸、猪尸、两具巡逻队士兵的尸体后，可以触发血腥的气味，循着气味找到一幢屋子。这时候说来奇怪，村民过来阻止杰洛特，说屋底有个精灵遗迹，他们经常在里面捡些东西和尼弗迦德人换钱，不想引来祸事。他们还在遗迹里找到一间密室，里面睡着一只怪兽。</p>\n<p data-pid=\"kxusVSVN\">注意，此时村民的叙述就有了逻辑瑕疵，一方面说“尼弗迦德人烧杀抢掠，到处抢劫值钱的东西，食尸鬼出现虐杀了那些士兵”，另一方面说“屋底有个精灵遗迹，他们经常在里面捡些东西和尼弗迦德人换钱······里面睡着一只怪兽”。</p>\n<p data-pid=\"-E2nMUD7\">从法律上来说，这姑且属于当事人陈述或者证人证言。我们基于尸体和血腥气味这些物证，其实可以组成一个证据链，这个证据链则指向一个事实：虐杀士兵的并非食尸鬼，而是地底的怪物（尸体的气味追寻就可以推理出）。</p>\n<p data-pid=\"JgXKLMrP\">那么这些士兵为什么会被杀呢？答案就隐藏在幸存村民的话语之中和在这等人行为之中，要过钥匙进入屋子（这些幸存的村民为什么会有钥匙），调查地板发现血魔的气息。打开盖板进入地穴，一路前行。在一座地下大殿里看到悬吊很多的尸体，在这里遭遇血魔沙拉斯提，击杀这个怪物之后，由此真相大白。</p>\n<p data-pid=\"hIlkpijB\">当地村民日常喜欢进入精灵遗迹盗墓，结果不小心惊动了血魔，导致村民被杀，被抓进地下大殿——当地派出村民向奥瑞登的米兰指挥官求救——派出巡逻队——巡逻队得知情况后进入地下遭遇血魔——血魔虐杀尼弗伽德巡逻队士兵，一部分逃出，但依旧被追出来的血魔杀掉——血魔不喜欢在外面待着，回归地下——幸存村民锁住盖板和屋子，并躲藏起来——此时路过的食尸鬼进食尸体。</p>\n<p data-pid=\"vrTjNJPL\">由此我们知道“尼弗迦德人烧杀抢掠，到处抢劫值钱的东西，食尸鬼出现虐杀了那些士兵”是谎言，为什么当地幸存村民要这么叙述呢？当地村民有恃无恐，我们知道村民是不知道杰洛特的身份的（万一是派来调查的），假如说士兵是因为保护当地村民而死，尼弗伽德未免会迁怒于当地村民（情报不实），但是如果说这小队军纪有问题，则尼弗伽德自知理亏，不会追究。</p>\n<p data-pid=\"-3eAdR4T\">与白果园和威伦当地人民对尼弗伽德的污蔑不同，从游戏里我们可以看到尼弗伽德的军队军纪优良，实际接触则没干什么坏事。</p>\n<p data-pid=\"CF6RNhND\">这里从诺维格瑞港口难民的对话可以得到佐证：</p>\n<blockquote data-pid=\"yRBTlEM5\">\n<b>难民A</b>：你是哪座村子来的？<br><b>难民B</b>：威洛斯。是在泰莫利亚，离维吉玛要走两天的路。尼弗迦德人在冬天前攻到那里了。<b>黑衣者一开始没怎么样</b>...直到游击队攻击了他们的要塞，然后他们就把我们的小屋全烧了。<br><b>难民A</b>：为什么？你们又没对他们做什么事！<br><b>难民B</b>：尼弗迦德人遵守严刑峻法，所有罪都有惩罚，就算抓不到罪犯也一样。</blockquote>\n<p data-pid=\"-Rm4XGNT\">当然这个对话其中真真假假，需要甄别。关键的信息是，尼弗伽德对“对他们做了什么事”才会惩罚，那么难民B所在村庄的事情很有可能是给游击队提供了情报。</p>\n<p data-pid=\"rJCQPctb\">16.奥森福特大学被封闭后，高校教师失业后的去向：</p>\n<p data-pid=\"wc9YcGli\">杰洛特所熟知的夏妮自然是去前线做战地医生了，由此留下夏妮担任教职时常引用米洛·范德贝克的话“红的跟红的缝在一起，黄的跟黄的，白的跟白的，这样就一定不会错的”；</p>\n<p data-pid=\"crFCPOmJ\">著名游吟诗人丹德里恩继承家业，开了个小酒馆；</p>\n<p data-pid=\"LsTQq_xJ\">看看这个情侣吵架，香草酒馆：</p>\n<blockquote data-pid=\"9LRNuST0\">\n<b>普西拉</b>：这真的是你要的吗？你就想当个老鸨，灌水卖酒给嫖客？<br><b>丹德里恩</b>：嘿！我又不能选择我要继承什么？<br><b>普西拉</b>：但你可以选择别的处理方式啊！<br><b>丹德里恩</b>：我知道，所以我正在考虑……<br><b>普西拉</b>：你就只会考虑！整天考虑东考虑西！下定决心之后再告诉我吧。</blockquote>\n<p data-pid=\"zKV3Wjk1\">香草酒馆外：</p>\n<blockquote data-pid=\"hMmivJjl\">（丹德里恩和普西拉正在酒馆内讨论香草酒馆的装修事宜）<br><b>半身人</b>：都准备好了吗？<br><b>工人</b>：不，我只是出来抽根烟。<br><b>半身人</b>：他们还在吵？<br><b>工人</b>：看来他们决定不了颜色。<br><b>半身人</b>：我真搞不懂问题到底出在哪。颜色不是好看就是丑，又没什么深奥的。<br><b>工人</b>：嘿嘿，嘿呵。</blockquote>\n<p data-pid=\"EuFw5gsT\">其他教师呢？</p>\n<p data-pid=\"5dnWXT14\">卖草药的，植物学老师，诺维格瑞市场：</p>\n<blockquote data-pid=\"h6alkZP5\">\n<b>商人</b>：大家来吧，我的东西可不够所有人买！<br><b>老妇人</b>：有肚子痛的药吗？我肚子下面从昨天开始就痛得不得了。<br><b>商人</b>：我建议你买些金丝桃叶，又叫藿香蓟，它们可以缓和腹痛，清理胆汁道。<br><b>老妇人</b>：就个小贩来说你还真是聪明。<br><b>商人</b>：我战前在学院里教植物学...这样够了吗？</blockquote>\n<p data-pid=\"MrlBWXj7\">这里金丝桃叶是藤黄科植物金丝桃的叶子，“多情夏雨润新枝，灿若娇娘起舞姿，风月无边关不住，金丝万缕吐相思。”如此风雅的诗句形容的就是金丝桃。商人说的“缓和腹痛，清理胆汁道”其实是真的，按《中华本草》：清热解毒；散瘀止痛；祛风湿。有个《中药大辞典》药方，治风湿性腰痛：金丝桃根一两，鸡蛋两只，水煎二小时。吃蛋和汤，一天二次分服。</p>\n<p data-pid=\"-qkTEN8m\">卖指南针和直角器的，估计是数学老师，诺维格瑞街边：</p>\n<blockquote data-pid=\"mhHSfXZR\">\n<b>瑞达尼亚人A</b>：女士，有什么需要吗？指南针？直角器？现在是限时特价喔。<br><b>妇人</b>：我要这些奇怪的东西干嘛？<br><b>瑞达尼亚人A</b>：嗯……说不定你想量个东西……画个圆……<br><b>瑞达尼亚人B</b>：别听他胡言乱语，女士。这些是学生留下来的垃圾，他现在逢人就推销。</blockquote>\n<p data-pid=\"-lTbixT4\">教人乞讨的，估计是文学院的老师，诺维格瑞街边：</p>\n<blockquote data-pid=\"Tep5PcqC\">\n<b>教授</b>：不对，不是这样。声音要拉长点，‘面——包——’。<br><b>镇民</b>：有差吗？<br><b>教授</b>：差多了。把声音拉长，像小朋友哭一样。可以刺激潜意识。<br><b>镇民</b>：你还真聪明，教授！</blockquote>\n<p data-pid=\"Tc8rH0Zy\">17.威伦和诺维格瑞不仅流传鼠疫，同时也在爆发天花，诺维格瑞小酒馆：</p>\n<blockquote data-pid=\"nYNcc703\">\n<b>贫穷的镇民A</b>：大家老爱说永恒之火会赐予奇迹……<br><b>贫穷的镇民B</b>：奇迹个屁啦！我儿子快死了，知道吗？得天花病死啦！<br><b>贫穷的镇民A</b>：小声点，被其他人听到的话我们就惨了……<br><b>贫穷的镇民B</b>：为什么？我儿子死了，你不懂吗？我祷告到膝盖都流血了……</blockquote>\n<p data-pid=\"tsYqu27y\">这一点可以在威伦一个任务得到佐证，其他网友说道遇到一个用车拉尸体的人，车上都是感染瘟疫的死人。他车翻了，差点被食尸鬼吃了，杰洛特救下了他，有一个选项是提醒他离尸体远一点。还有一个是告辞，当时赶任务就告辞了。然后后来做任务路上偶遇，满脸的疮···我问他我们见过吗，他说见过，他就是那个拉车的人，感染了瘟疫，想来沼泽寻死，但食尸鬼都躲着他——“满脸的疮”，记得猴痘么，这里其实就是天花。</p>\n<p data-pid=\"Sq8mMYzf\">与此对比的是，宗教给人带来的讽刺，广场：</p>\n<blockquote data-pid=\"k9p5ynzC\">\n<b>永恒之火祭司</b>：有一天，一个母亲发现身边的婴儿生命垂危。她绝望至极，找了个医官。幸好她的丈夫跟她说医官救不了孩子。他把婴儿接了下来，带到永恒之火的面前。孩子隔天马上痊愈，到今天还活得好好的，备受父母疼爱。</blockquote>\n<p data-pid=\"9ATE4zjk\">宗教利用恐吓和编造案例来传教，其实这个都是套路。</p>\n<p data-pid=\"hFGbjD-F\">18.战争下中世纪的欲望，人间百态，车速很快。</p>\n<p data-pid=\"dwsJaKfk\">诺维格瑞偏僻小巷：</p>\n<blockquote data-pid=\"zyTgninf\">\n<b>女巫：</b>听说你是最厉害的扒手？介意向我示范一下你的双手有多灵巧吗？<br><b>小偷：</b>宝贝，我正要去市集广场，想看就跟来吧。<br><b>女巫：</b>（尴尬）……我可不是这意思。本来至少想在被他们烧死之前找点乐子的。</blockquote>\n<p data-pid=\"IbYDxiMh\">诺维格瑞街边：</p>\n<blockquote data-pid=\"BVnQ1Rtc\">\n<b>小偷：</b>干嘛在街上乱晃？想勾引男人犯错是吧？<br><b>年轻女性：</b>我……我要去水井……<br><b>小偷：</b>要去给井水下毒，是吧？<br><b>年轻女性：</b>……</blockquote>\n<p data-pid=\"HE4fqoL4\">诺维格瑞桥边：</p>\n<blockquote data-pid=\"LkmWYqLY\">\n<b>妓女：</b>你身上有汗吗？<br><b>守卫：</b>干你什么事？<br><b>妓女：</b>把汗洒在我身上不是比较开心吗？</blockquote>\n<p data-pid=\"o2b_LR8u\">诺维格瑞小巷路边：</p>\n<blockquote data-pid=\"cWxAGkrL\">\n<b>镇民：</b>军官大人！今天休假吗？您好，大人，很高兴再次见到您。<br><b>女巫猎人：</b>老样子。<br><b>镇民：</b>没问题，如果您一直光顾的话，之后还可以打折呢。<br><b>女巫猎人：</b>很好，我就爱嫖怪胎。普通妓院才没有身上有三个奶子的货。</blockquote>\n<p data-pid=\"84CQbFgY\">诺维格瑞妓院附近：</p>\n<blockquote data-pid=\"LJ9EqZqA\">\n<b>小男孩A：</b>嘿，杰克，你最大，我问你喔。妓女到底是做什么的？<br><b>小男孩B：</b>嗯……我爸爸说她们会做妈妈不会做的事。<br><b>小男孩C：</b>嗯……我妈妈不喜欢洗衣服。所以那些先生都是去帕西弗罗拉洗衣服的吗？<br><b>小男孩B：</b>可能吧，我有一次偷看窗户，他们穿着内裤跳来跳去……<br><b>小男孩A：</b>那我爸为什么说帕西弗罗拉的妓女最脏，所以最棒？<br><b>小男孩C：</b>谁知道……大人好奇怪。</blockquote>\n<p data-pid=\"4esRtCpc\">19.资本家的秉性：压榨和白嫖，而且擅长站在道德高地指责和批评他人。</p>\n<p data-pid=\"4fQMT-JB\">诺维格瑞市场附近：</p>\n<blockquote data-pid=\"hgOmHVab\">\n<b>富有镇民：</b>听着，是碧翠斯，我爱上她了。帮我写首十四行诗好吗？你不愿意免费帮我写吗？但这是个无价的经验啊——可以让你加到公会资料上。<br><b>吟游诗人：</b>我可以免费给你这首对句——一毛不拔的铁公鸡，全都给我去死光吧！<br><b>富有镇民：</b>无礼！大家说的都没错，吟游诗人全是懒惰的贪心鬼！</blockquote>\n<p data-pid=\"PFRphIBY\">诺维格瑞价格稍贵的那家妓院：</p>\n<blockquote data-pid=\"HE8GKMRt\">\n<b>富有镇民A：</b>还跳舞咧，我的眼睛——不知道她（妓女）扭得这么尴尬可以拿到多少钱？<br><b>富有镇民B：</b>不管怎么样都比我们给员工的还多。而且他们的工作还很老实咧，才不会在别人面前扭屁股。<br><b>富有镇民A：</b>她再扭几下，胸部就要从裙子里蹦出来了。她一点道德感都没有吗？</blockquote>\n<p data-pid=\"0paz_VHP\">20.射箭的姿势，实际上这个应该是射法撒放问题，希里到过的史凯利格村庄：</p>\n<blockquote data-pid=\"EFOizaaJ\">（一个父亲在教孩子练习射箭）<br><b>史凯利杰男性</b>：不是那样子，把手肘抬高，不然箭会射歪。<br><b>小男孩</b>：我知道，但是手臂好痛。<br><b>史凯利杰男性</b>：很好，这代表你用对了肌肉。注意别让弦打到鼻子。<br><b>小男孩</b>：爸，我知道啦！<br>（一段时间过后，开始下雨。）<br><b>史凯利杰男性</b>：暴风雨要来了，我得叫你妈把刚晾的衣服收了，你继续练习。要是手指酸了，换个方式抓弦·····<br><b>小男孩</b>：不必，不会酸的。</blockquote>\n<p data-pid=\"7KTqihdV\">注意这个父亲说的“不是那样子，把手肘抬高，不然箭会射歪”和“注意别让弦打到鼻子”，前者是撒放错误的拉弓臂手肘下垂（主要表现为撒放后手肘的位置比瞄准时的位置更低，非常容易被射手本身所忽视），故而需要拉弦一侧的手把手肘抬高，不妨看下图。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ad729ceaf68c95893dbe1b4beea4bf0b_720w.jpg?source=b1748391?rss\" data-caption=\"虚线是对的，实线就是这个父亲批评的状态\" data-size=\"normal\" data-rawwidth=\"619\" data-rawheight=\"379\" data-watermark=\"watermark\" data-original-src=\"v2-ad729ceaf68c95893dbe1b4beea4bf0b\" data-watermark-src=\"v2-25282734db7db68c27dd1c043432383d\" data-private-watermark-src=\"v2-84721a17acf2126b79f17cba6e102329\" data-tags=\"porn\"></p>\n<p data-pid=\"n9WLb28x\">而后面说的“我得叫你妈把刚晾的衣服收了，你继续练习。要是手指酸了，换个方式抓弦”，我猜测是蒙古式换地中海，或者地中海换蒙古式——有骑射和步射经验的人，估计对此会心一笑，抓弦在游戏里面得到了复原。</p>\n<p data-pid=\"5D7giCZn\">笔者按：蒙古式射法，适合在移动的马背上使用，以短弓为主，通常用于骑射；地中海式射法，适合地面站立的弓手，因为上手简单，成为现代广泛使用的射箭方式。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8c3e65ac5fb3639a7b4452eb4ef2d7f4_720w.jpg?source=b1748391?rss\" data-caption=\"这里可以看出抓弦方式的不同\" data-size=\"normal\" data-rawwidth=\"539\" data-rawheight=\"579\" data-watermark=\"watermark\" data-original-src=\"v2-8c3e65ac5fb3639a7b4452eb4ef2d7f4\" data-watermark-src=\"v2-b1345f373e8d4a8ee3ad44b41bdc344a\" data-private-watermark-src=\"v2-a0b46a889f58a451d2158304020ca9d2\" data-tags=\"porn\"></p>\n<p data-pid=\"BS7Rl8_I\"><br></p>\n<p data-pid=\"59l3lYHt\">未完待续，持续更新，不要慌。</p>\n<p><br></p>\n<p data-pid=\"A7es7fe0\">注意，本文《巫师3》的对话来自于知友 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/d7fe12f700f692a2595405bc8a9e8598\" data-hash=\"d7fe12f700f692a2595405bc8a9e8598\" data-hovercard=\"p$b$d7fe12f700f692a2595405bc8a9e8598\">@哆啦酱</a> 的耐心收集，虽然她已经不再上知乎，但是必须要提到，因为巫师3无法读取文件提取文本，其收集的精彩对话都是她游玩的时候一句一句搜集的，笔者在此篇实际上是对哆啦酱收集的对话做背景注解（就好像注疏一般，对原文错别字和细节做了修订，同时加入 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/08da7c2e8b45a9c56cbe23b0178d299b\" data-hash=\"08da7c2e8b45a9c56cbe23b0178d299b\" data-hovercard=\"p$b$08da7c2e8b45a9c56cbe23b0178d299b\">@Legal诗睿</a> 笔者个人的理解），看到这里觉得颇有意趣的人们，一定不要忘记关注这个有趣的女孩子。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/threeshi-rui?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Legal诗睿</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/31119815/answer/2503137916?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">401 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/534105843?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《巫师 3 ：狂猎》中有哪些隐藏较深的细节？</a><br><a href=\"http://www.zhihu.com/question/528209855?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《巫师 3：狂猎》游戏的哪些剧情设计的很有趣？</a><br>\n","link":"http://www.zhihu.com/question/31119815/answer/2503137916?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价动画《新秦时明月》第28集？","date":"2022-05-26 12:59:58","description":"\n<p data-pid=\"Xv9Vmc7t\">大家好，《新秦时明月》已经播出第二十八集。</p>\n<p data-pid=\"if05IJ3A\">首先回答一下留言区提到的，关于端木蓉眼睛的问题。这个问题的确需要优化，因为老模型的结构并不完全适用于新技术，所以需要对眼球四周的结构进行较大的改动。但考虑到改变眼睛结构会对人物的形象和气质产生比较明显的影响—因此我们时常把眼睛比喻为心灵的窗口，所以团队经过慎重的考虑，准备把对端木蓉眼睛的优化提升应用到秦时第六部的后续制作中，避免人物在同一部作品里前后差异过大所带来的割裂感。</p>\n<p><img src=\"https://pica.zhimg.com/v2-a2e1c5028f8bcdc2042e4b3188642489_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1090\" data-rawheight=\"614\" data-watermark=\"watermark\" data-original-src=\"v2-a2e1c5028f8bcdc2042e4b3188642489\" data-watermark-src=\"v2-a746389b58ff3ac0faa0046d2ce68f44\" data-private-watermark-src=\"v2-3f9e27ad95910fce67356cf0b80553af\"></p>\n<p data-pid=\"hN0Sa02N\"> 这一集的剧情，是围绕着三位主角在“龙喉”机关中的冒险展开的。老观众都知道，在“侠道”、“王道”试炼中，天明和少羽分别获得了对自己的未来非常重要的本命兵器，而“龙喉”则可谓是专门为月儿量身定制的机关。破解“龙喉”的剧情是月儿的高光时刻，画面和情节都以月儿为主。大家有没有发现这一集里的月儿，漂亮的镜头密集了很多？不仅有映着星辰大海的大眼睛，还有在燕国雪景中仰望夜空的倩影。可惜这么灵动可爱的小公主，很快就要被抓走了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ff29e9764f5063bef5966c38506bcb4a_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1269\" data-rawheight=\"709\" data-watermark=\"watermark\" data-original-src=\"v2-ff29e9764f5063bef5966c38506bcb4a\" data-watermark-src=\"v2-dd6134167a48347530b402160024ab27\" data-private-watermark-src=\"v2-b23560bfd624d7dea53f541ecd8c86f1\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c4a121f7cfa0306aea40526c05eb9d13_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1269\" data-rawheight=\"711\" data-watermark=\"watermark\" data-original-src=\"v2-c4a121f7cfa0306aea40526c05eb9d13\" data-watermark-src=\"v2-964d7cb948a082ab5fa6efb706494156\" data-private-watermark-src=\"v2-22d5b88009a3242f6cd37654ab47a352\"></p>\n<p data-pid=\"IUwqTjsp\">虽说“龙喉”是月儿的高光时刻，但毕竟三位主角身陷机关，随时都有性命之虞。所以除了美感，危机感也是剧情中必不可少的要素。为了表现这种紧迫的危机感，我们对这一集里机关的声效进行了比较精细的处理。例如环绕着三位主角并不断迫近的刀片阵—我们希望刀片的声音要能够体现出它的锋利，但又不能显得过于嘈杂。因此对于这段声效，团队进行了反复的调整和尝试。调试完成后的声效其实已经达到了比较满意的效果，但做完混音后再听，却又觉得不够完美；所以我们又重新去再次修改、调试音效，在此非常感谢声效方的耐心和支持。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7d2218b786e26cae5c4a856d9992c441_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1269\" data-rawheight=\"711\" data-watermark=\"watermark\" data-original-src=\"v2-7d2218b786e26cae5c4a856d9992c441\" data-watermark-src=\"v2-32fadf7881a7551e6976d6aea6002aac\" data-private-watermark-src=\"v2-65f9b1378bb054677f50679d5e19dcda\"></p>\n<p data-pid=\"g4vV0rQl\">值得注意的是，公输仇已经靠秘密武器“破土七郎”成功破解了班大师的“绝天锁”，开启了新世界的大门。在三位主角潜心破解“龙喉”之时，狡猾的公输老头也进入了墨家禁地，成为了这场大型探险活动的第四位玩家。</p>\n<p data-pid=\"q1p1LTan\">不要小看了公输老头，他不仅是个拥有高超开锁技术的工具人，还是个搞笑担当。这次整个攻陷墨家机关城的行动，如果没有了公输仇，恐怕会少了很多乐趣。进入禁地后的公输老头可以说是承包了这段剧情的笑点，没少被三个小家伙修理。让我们一起期待他们在禁地中的相遇吧！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fa8f37751e48cb2baa18142eee9554ce_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1269\" data-rawheight=\"719\" data-watermark=\"watermark\" data-original-src=\"v2-fa8f37751e48cb2baa18142eee9554ce\" data-watermark-src=\"v2-d7bfbd669b2a78f96cf3f5765374c5df\" data-private-watermark-src=\"v2-e5e682412481c5fd41c82751406496e1\"></p>\n<p data-pid=\"YVBG7AM9\">至于疫情形势，这周也有了更明显的好转。上海的商超、餐饮开始逐渐复苏，如果不出意外，玄机应该可以在6月做到复工复产。对于一直居家办公的我们来说，最直观的感受是可以叫到外卖了。封控了近3个月，终于可以叫叫外卖解解馋喽！久违的烧烤、汉堡、披萨和火锅，现在都可以送了。团队里很多年轻的同事大学吃食堂、毕业吃外卖，基本也不会准备烧菜所需的柴米油盐，当然很多人也不会烧菜，这段时间可是苦惨了。等到复工见面的那天，不知多少人瘦了，又有多少人胖了。</p>\n<p data-pid=\"2LFFOGo-\">看到了恢复常态的希望，还是很开心的。感谢大家一直以来的理解和支持，期待复工以后，可以更加自如地推进制作，让更多、更好的内容尽快与大家见面。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xie-xiao-ming-98-74?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">薛小明</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/534703801/answer/2502927214?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">5 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/523022725?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价动画《新秦时明月》第18集？</a><br><a href=\"http://www.zhihu.com/question/526543239?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价动画《新秦时明月》第21集？</a><br>\n","link":"http://www.zhihu.com/question/534703801/answer/2502927214?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"试播集 06 | 少数派作者们最近读完了啥（下）","date":"2022-05-26 09:23:32","description":"关于栏目不少读者表示希望能够见到更多关于文化与书籍的内容，充实书单、丰富精神。机器人特地邀请了Matrix社区作者们来聊聊自己近期阅读的有意思的书籍。喜欢本栏目的话，欢迎充电或评论文章来表达自己的喜爱 ...<a href=\"https://sspai.com/post/73425\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73425"},{"title":"普通人有必要进行力量训练吗？","date":"2022-05-26 08:15:19","description":"《中国人群身体活动指南（2021）》中，推荐18-64岁的成年人除了每周需要进行150-300分钟的中等强度或者75-150分钟高强度的有氧运动外，还需进行每周至少两次的肌肉力量练习。肌肉力量训练是什 ...<a href=\"https://sspai.com/post/73440\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73440"},{"title":"电动汽车驱动电机的类型都有哪些？有哪些优缺点？","date":"2022-05-26 08:12:57","description":"\n<p data-pid=\"xdXlqyq3\">先说下啥叫电机。</p>\n<p data-pid=\"GGqL5A-y\">顾名思义就是<b>电能和机械能相互转换的机器。</b></p>\n<p data-pid=\"ZLGCLrVX\">可以将电能转化为机械能，驱动车辆。也可以将机械能转为电能，输送到蓄电池里面存储。</p>\n<p data-pid=\"jaqBe0HF\">电机的原理，就是<b>电磁装置，磁场对电流受力使得电机转动。</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-7607ef463c18e2b0c91dca969290c953_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"436\" data-rawheight=\"342\" data-watermark=\"watermark\" data-original-src=\"v2-7607ef463c18e2b0c91dca969290c953\" data-watermark-src=\"v2-a142263c0baa175635978f97fb5325d0\" data-private-watermark-src=\"v2-10572d3552e2ad7bfcc823fab41660f6\"></p>\n<p data-pid=\"xTaI9_d1\">比如最常见，最早市场化的直流有刷电机。</p>\n<h3>直流有刷电机：</h3>\n<p data-pid=\"9WRMinXW\">由定子、转子、电刷、壳体组成，通过旋转的磁场获得转动力矩，由电能转化为动能。</p>\n<p><img src=\"https://pica.zhimg.com/v2-bda149c5e91ccfb181bdd3094b3ef5a4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"456\" data-rawheight=\"384\" data-watermark=\"watermark\" data-original-src=\"v2-bda149c5e91ccfb181bdd3094b3ef5a4\" data-watermark-src=\"v2-9072fa67d8b71fa80a98074c51e9a383\" data-private-watermark-src=\"v2-dd4ac2c6ef80bafeafc70e817fdd2ebb\"></p>\n<blockquote data-pid=\"VuZWQ_xF\">\n<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%259C%2589%25E5%2588%25B7%25E7%2594%25B5%25E6%259C%25BA/9206383\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">有刷电机</a>的<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%25AE%259A%25E5%25AD%2590/9205822\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">定子</a>上安装有固定的主磁极和<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%2594%25B5%25E5%2588%25B7/6018829\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电刷</a>，<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E8%25BD%25AC%25E5%25AD%2590/1993958\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">转子</a>上安装有<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%2594%25B5%25E6%259E%25A2%25E7%25BB%2595%25E7%25BB%2584/4417217\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电枢绕组</a>和<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%258D%25A2%25E5%2590%2591%25E5%2599%25A8/117883\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">换向器</a>。直流电源的电能通过电刷和换向器进入电枢绕组，产生<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%2594%25B5%25E6%259E%25A2%25E7%2594%25B5%25E6%25B5%2581/686491\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电枢电流</a>，电枢电流产生的磁场与主磁场相互作用产生<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%2594%25B5%25E7%25A3%2581%25E8%25BD%25AC%25E7%259F%25A9/5556828\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电磁转矩</a>，使电机旋转带动负载。</blockquote>\n<p data-pid=\"RNzxaScf\">直流有刷电动机是最早出现的电机，因为工艺成熟，所以成本较低。常用于启动（启动大扭矩）和调速要求较高（速度范围宽）的场合，电动自行车、电梯、城市电车和一些大型生产机械中。</p>\n<p data-pid=\"1eXNPN5s\">做了一个思维导图，可以更清晰知道市面上常见的电机分类。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-aee6198d4e2377be2fb5b2a9494253ad_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1015\" data-rawheight=\"552\" data-watermark=\"watermark\" data-original-src=\"v2-aee6198d4e2377be2fb5b2a9494253ad\" data-watermark-src=\"v2-e41b82097b29bf31fa458b59e5d48c8a\" data-private-watermark-src=\"v2-be8e1a56b6bf6501ffb64911991f8bf0\"></p>\n<p data-pid=\"5ZOx6oC3\">综合起来说，直流电动机的启动转矩大（低转速大扭矩），工艺成熟但是效率不高，且体积、质量较大，电刷发热难以解决，且因为有电刷和换向器，结构比较复杂，后期维护成本高。所以现在电机很多都是采用的无刷电机，也就是利用电流方向的切换来进行驱动。</p>\n<p data-pid=\"CnP7dGXv\">说回到电动汽车的驱动电机上面来。</p>\n<p data-pid=\"8PzQoYmr\">针对汽车的性能，其搭载的驱动电机要具有以下几点：</p>\n<p data-pid=\"P4EwqtWt\"><b>1、能频繁启动、加速、减速、制动，也就是要耐用，质量可靠。</b></p>\n<p data-pid=\"KrCngbJd\"><b>2、性能上要启动扭矩大，也就是低速扭矩大，高速时能恒功率、低转矩。</b></p>\n<p data-pid=\"nz_RSGUy\"><b>3、质量轻、体积小、集成度高，效能高。</b></p>\n<p data-pid=\"rXfl--YP\"><b>4、调速灵活，响应快，速度可调范围广，适应市区中低速工况和高速工况。</b></p>\n<p data-pid=\"oWYrPzhE\"><b>5、适应恶劣环境，如高湿度、低温、高温，颠簸的外界环境。</b></p>\n<p data-pid=\"76WqDv7q\">接下来说现在电动汽车驱动电机的异步电机。</p>\n<h3>异步电机：</h3>\n<p data-pid=\"uCNWuvc0\">异步电机分为三相异步电机和单相异步电机，三相异步电机运用较多。</p>\n<p data-pid=\"3z7-22Ty\">比如特斯拉的Model S，国产的Model 3等 ,奥迪 E-tron采用的驱动电机都是<b>三相异步电机</b>。</p>\n<p data-pid=\"MzM5V58C\">交流异步电机没有电刷，利用交流波形来改变电动机中的磁场来生成转矩。</p>\n<p data-pid=\"6DZEUr1m\">驱动逆变器将来自电池组的直流电转化为电机定子的三个交流电（DC转AC）。电流波形彼此异相120°，在定子中产生旋转的磁场，磁场在转子中感应出电流，感应电流产生与定子磁场相反的第二磁场。</p>\n<p><img src=\"https://pica.zhimg.com/v2-591e2f7dadb4ab19ce60d9757d3cfab6_720w.jpg?source=b1748391?rss\" data-caption=\"三相交流电在转子空间产生的磁场\" data-size=\"normal\" data-rawwidth=\"1049\" data-rawheight=\"436\" data-watermark=\"watermark\" data-original-src=\"v2-591e2f7dadb4ab19ce60d9757d3cfab6\" data-watermark-src=\"v2-f2a33ec551afacc80970f488a561a47f\" data-private-watermark-src=\"v2-7660b936701f0470e7710775bd76b7c4\"></p>\n<p data-pid=\"nQLE0l2t\">互相作用的两个磁场产生了电动机的转矩。这里电动机的速度是取决于驱动变频器能承受的交流电频率，而电动机的转矩则取决于交流电的幅度。</p>\n<p data-pid=\"e_1vdpQM\">以特斯拉为例，其驱动单元主要是三部分：<b>三相交流感应电机、单机变速箱、逆变器组成。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-e636be34805802726af215cc0c03a5cb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1148\" data-rawheight=\"662\" data-watermark=\"watermark\" data-original-src=\"v2-e636be34805802726af215cc0c03a5cb\" data-watermark-src=\"v2-c66b3d914217d5f1aa39def3740315f5\" data-private-watermark-src=\"v2-692984a131a5f317deb1f36047e6e67a\"></p>\n<p data-pid=\"xptM05sx\">定子、转子容纳在铝制件内，和变速箱的一半共享，这种高度集成使得电机和变速箱的整体体积缩小，也减少了制造成本，但这种也带来了后期的维修困难（因为不好拆分）。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-16dd28d865b391aad6c604b0168354d4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"353\" data-watermark=\"watermark\" data-original-src=\"v2-16dd28d865b391aad6c604b0168354d4\" data-watermark-src=\"v2-fda9c76de5e6b817046691cefd8b3d9a\" data-private-watermark-src=\"v2-d3e94accd04cae09be87d6a8bf6daed3\"></p>\n<p data-pid=\"OH6QFVRQ\">接下来说下特斯拉的驱动电机内部的具体构造，这也是其核心技术之一，申请了相关专利。</p>\n<p data-pid=\"onsgxNwF\">定子是由一叠钢叠片组成。定子内的温度传感器藏在绕组内部。特斯拉把定子直接连接到变频器，不适用电动机电缆和连接器，这种做法有效降低了系统成本、故障率、辐射排放和总成质量。</p>\n<p data-pid=\"BY-3g0nX\">转子也是由一叠刚叠片组成，在圆周上均匀分布铜导体条，转子安装在中心轴上，中心轴的两端均有轴承支撑。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-307ab4b0375380fce03ad07ffbca61ba_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"399\" data-rawheight=\"406\" data-watermark=\"watermark\" data-original-src=\"v2-307ab4b0375380fce03ad07ffbca61ba\" data-watermark-src=\"v2-9e2c37e42e20b118bf7e747cec245b34\" data-private-watermark-src=\"v2-564a70fbeeb72a3cfcf1fa421053496b\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d95ce76a2b132240f0d0f1ed6bc7904d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"400\" data-watermark=\"watermark\" data-original-src=\"v2-d95ce76a2b132240f0d0f1ed6bc7904d\" data-watermark-src=\"v2-018f751aa5bbbdecc5931265054b33ed\" data-private-watermark-src=\"v2-b9a1acde7a0d97cc48eb59eb7c393e43\"></p>\n<p data-pid=\"wuub6nLl\">驱动系统使用两通道霍尔效应传感器测量电机速度。传感器监视安装在转子轴上的编码器轮齿的旋转。驱动逆变器控制板使用编码器信号的频率来确定电机速度，并使用两个信号的相位来确定电机方向。</p>\n<p data-pid=\"KuDHPIHE\">异步电机的结构简单，后期维护方便。广泛应用于机床、水泵等工、农业生产机械和家用电器，如电扇、电冰箱、空调等。</p>\n<p data-pid=\"W-MXliTf\">国外的相当部分的电动、混动车型实际采用的都是异步电机。而国内则和国外相反，电动汽车上最常用的电机是同步电机，这个原因后面再说。</p>\n<h3>同步电机：</h3>\n<p data-pid=\"vNJ1Oejo\">国内的电动车之王比亚迪旗下多款新能源，都是用的同步电机。新老电动车势力，如吉利、奇瑞、小鹏、理想也是用的同步电机。</p>\n<p data-pid=\"EE5tNhDi\">同步电机根据产生磁场方式可以分为电励磁同步电机（转子绕组在外接电流下产生磁场）和永磁同步电机（转子直接加上永磁体）。</p>\n<p data-pid=\"Y1x1xKBQ\">以最常用的永磁同步电机举例。</p>\n<p data-pid=\"e6xCNZBp\"><b>永磁</b>指的是电机的转子上安装了永磁体，采用稀土材料（钕铁硼等）制造，在非高温环境下能够永久保持磁力。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0d8866e36dd1390de1518f7f4bbb6908_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"630\" data-rawheight=\"393\" data-watermark=\"watermark\" data-original-src=\"v2-0d8866e36dd1390de1518f7f4bbb6908\" data-watermark-src=\"v2-5b40fb26a272a2a942a814201f43c0c4\" data-private-watermark-src=\"v2-139f041c597a8bdc482310f4c55f08d8\"></p>\n<p data-pid=\"fqGPaXNZ\">而<b>同步</b>则表示转子的转速和定子绕组产生的旋转磁场始终保持同步，意味着只要控制输入的电流频率就能控制电动机转子的转速。</p>\n<p data-pid=\"LgiqKUPe\">具体原理为定子的三相绕组中通过三相对称电流，将会产生定子旋转磁场。定子旋转磁场对于转子旋转在笼型绕组内产生电流，产生转子旋转磁场。定子旋转磁场和转子旋转磁场相互作用产生的异步转矩使得转子由静止到转动。启动完成后，转子绕组不在起作用，由永磁体和定子绕组产生的磁场相互作用产生驱动转矩。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e25c5e828d349aba3b77d3ac9aeaad86_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"677\" data-rawheight=\"337\" data-watermark=\"watermark\" data-original-src=\"v2-e25c5e828d349aba3b77d3ac9aeaad86\" data-watermark-src=\"v2-28d2bae89abedd4f801a50fde6f2a4de\" data-private-watermark-src=\"v2-6a3201a896f8fafe2fc17ca2b2d08206\"></p>\n<p data-pid=\"yJ0DYRi-\">以宝马i3为例，其驱动的永磁同步电机只有49公斤，峰值功率为125KW(可持续30秒），最大转矩为250NM。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9e76c4fa06778c8750edb18300f73fe1_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"379\" data-watermark=\"watermark\" data-original-src=\"v2-9e76c4fa06778c8750edb18300f73fe1\" data-watermark-src=\"v2-a882cd615ed6e5ae9893326bb64ac6c8\" data-private-watermark-src=\"v2-bc832d07601d60bc82d3cf6833b0e778\"></p>\n<p data-pid=\"AZU_K2Mg\">永磁同步电动机对比同功率的异步电机来说，体积小，质量轻，输出转矩大，相应速度快，极限转速和制动性能比较好，而且永磁体替代了激磁线圈后也省了电能，所以现阶段国内大部分电动车型实际都采用的永磁同步电机（虽然这个细节基本很难在企业宣传中看到）。</p>\n<p data-pid=\"1Q0NHTou\">但永磁同步电机的缺点就是在高温，频繁震动等恶劣环境下容易消磁，如电机高温，环境高温，热量集聚的状况，如何在使用中避免磁性衰退，需要提升抗磁化的技术来应对。比如增设负载检测，调低最高负载，增加散热措施，避免频繁启动等。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2d25b0053e1438f168b1b2f9462c7448_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"523\" data-rawheight=\"415\" data-watermark=\"watermark\" data-original-src=\"v2-2d25b0053e1438f168b1b2f9462c7448\" data-watermark-src=\"v2-87fbbb3b5c13c341f562e83cad9d1292\" data-private-watermark-src=\"v2-391d89bca27b47c567fb006b50e3a343\"></p>\n<p data-pid=\"cP9IrmqC\">宝马i3为避免电机内部温度过高，在运行模式下，温度上限为200℃，在定子绕组内设置了两个温度传感器（NTC型热敏电阻，通过测量电压、电流来计算温度）来监控，对于转子的温度则是通过热量模型进行预估。在高于180℃的时候，宝马就会降低电动机功率。</p>\n<p data-pid=\"q61hoEGg\">另外永磁同步电机一个缺点就是永磁材料的昂贵，经常占据到整体材料的50%成本以上。永磁材料需要稀土资源，而在国外稀土属于极为稀缺的资源，价高难得。但中国拥有全球70%以上的易开采稀土资源，所以这一个缺点在国内也不存在了。这也是国外车企宁愿上大体积，大重量的异步电机，也不愿意上永磁同步电机的主要原因之一了。</p>\n<p data-pid=\"b1fFU7Ur\">而三相异步电机则结构相对简单，后期维护成本低，但尺寸大，重量重，同体积同重量的异步电机的输出功率赶不上永磁同步电机，调速的范围也没有永磁同步电机大，但成本较低，且高速性能不差。</p>\n<p data-pid=\"EgaGf1Uf\">最后说下最近比较热门的开关磁阻电机，因为其结构简单，宽转速和宽转矩范围内高效运行，可四象限运行，响应速度快且能耐高温的特点，也被视为电动汽车电机的一个发展方向。</p>\n<h3>开关磁阻电机</h3>\n<p data-pid=\"nin_WuUj\">开关磁阻电机的定子双凸极上绕有集中绕组，转子凸极上没有绕组，根据磁路磁阻最小原理产生电磁转矩。当绕组通交流电后，会在气隙形成交流磁场，该磁场从定子流到转子后回流定子形成回路，该回路始终从最小磁阻的路径流过。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a179d4ab0ab799e383c42323661c747e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"471\" data-rawheight=\"430\" data-watermark=\"watermark\" data-original-src=\"v2-a179d4ab0ab799e383c42323661c747e\" data-watermark-src=\"v2-548e0cb90870d6ac63306e00d6a82e92\" data-private-watermark-src=\"v2-eb98edabf6ddb8f04ac29cb95a43b196\"></p>\n<blockquote data-pid=\"hELRU8X5\">当各<u><a href=\"http://link.zhihu.com/?target=https%3A//www.hqchip.com/nav.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电子</a></u>开关依次控制A、B、C、D四个定子绕组通电时，转子就会不断受电磁力的作用而持续转动。如果定子绕组按D-A-B-C的顺序通电，则转子就会逆着励磁顺序以逆时针方向连续旋转。反之，若按B-A-D-C的顺序通电，则电动汽车电机转子就会沿顺时针方向转动。</blockquote>\n<p data-pid=\"0gPcdBSe\">根据定子、转子凸极对数的配比，开关磁阻电机可以设计成不同的结构，如图所示。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bbc2e7121561a728c7578d53777475cb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"642\" data-rawheight=\"271\" data-watermark=\"watermark\" data-original-src=\"v2-bbc2e7121561a728c7578d53777475cb\" data-watermark-src=\"v2-9bd38cc179c6757fa1110c17de658e52\" data-private-watermark-src=\"v2-2d0119038ecb21da367de8efc32f2442\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-40ef06622b45e656c2a486ea239541a7_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"696\" data-rawheight=\"407\" data-watermark=\"watermark\" data-original-src=\"v2-40ef06622b45e656c2a486ea239541a7\" data-watermark-src=\"v2-6272045f366eec18983694ef404f7082\" data-private-watermark-src=\"v2-264c0bdd069f2cc27fd4c4141120b5a2\"></p>\n<p data-pid=\"N4eqgsJi\">但开关磁阻电机也有着很明显的缺点，那就是定子和转子都有齿槽，气隙磁场畸变严重，导致转矩波动大、噪声大、需要精密的位置检测器，另外也没有永磁体，需要额外耗电来产生磁力。现阶段开关磁阻电机还主要运用在木材、五金、玻璃、等行业生产加工中，并没有批量运用在电动汽车上。</p>\n<p><br></p>\n<p data-pid=\"Rad0cHaP\">（图片来源网络，侵删！）</p>\n<p><br></p>\n<p data-pid=\"n1i5kLZT\">参考资料：</p>\n<p data-pid=\"gQT-cj4z\">1、电动汽车电池、电机与电动控制/瑞佩尔主编  北京：化学工业出版社， 2022.1</p>\n<p data-pid=\"dg5L8GnZ\">2、“<a href=\"http://link.zhihu.com/?target=https%3A//www.elecfans.com/d/1553984.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">elecfans.com/d/1553984.</span><span class=\"invisible\">html</span><span class=\"ellipsis\"></span></a>”</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/532024680/answer/2500508875?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/528984332?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">电动汽车 驱动电机的拆解步骤总结?</a><br><a href=\"http://www.zhihu.com/question/519598995?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">电动汽车的电机主要有哪些性能指标?</a><br>\n","link":"http://www.zhihu.com/question/532024680/answer/2500508875?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"车企扎堆押注固态电池，这条技术路线胜算有多大？","date":"2022-05-26 08:12:21","description":"\n<p data-pid=\"BzAi7XWs\">先说结论，后面咱们细聊。固态电池由于技术路线充满各种分支不确定因素较大，但是国内固态电池发展正在走向中国特色的快速发展方向。</p>\n<p data-pid=\"ViCyJtnd\">什么是固态电池</p>\n<p><img src=\"https://pic1.zhimg.com/v2-16b25eeb9f17f79725c7017d40b25770_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1792\" data-rawheight=\"828\" data-watermark=\"watermark\" data-original-src=\"v2-16b25eeb9f17f79725c7017d40b25770\" data-watermark-src=\"v2-153573504acf183b5ad14bb29d319175\" data-private-watermark-src=\"v2-5761fb0788fceb55acbda9ab6ae07cea\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"xxO-d9kK\">↑电动汽车动力电池组成</p>\n<p data-pid=\"ntRi8ebH\">说到什么是固态电池，我们就要先来讲讲电动汽车动力电池组成。目前电动汽车使用的锂离子动力电池主要由正极材料、负极材料、隔膜和电解质构成。其中正极材料主要决定电池的成本和续航里程。而负极材料主要决定电池的充电速度。与此同时，正负极和隔膜材料都浸泡在液态的电解质之中。</p>\n<p data-pid=\"9OoOeNh2\">相应地顾名思义，固态电池就是使用固体电极和固体电解质的电池。</p>\n<p data-pid=\"wUQ9LiOM\">下面我们就从目前主流的动力电池化学材料来分析一下固态电池实现的难点。</p>\n<p data-pid=\"CdGzC-3O\">正极材料</p>\n<p><img src=\"https://pic3.zhimg.com/v2-cdd5c521cc951b1100c89967be6d8d4b_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1785\" data-rawheight=\"1824\" data-watermark=\"watermark\" data-original-src=\"v2-cdd5c521cc951b1100c89967be6d8d4b\" data-watermark-src=\"v2-6222aa17d4338eea1e9d7ba840cb0d5a\" data-private-watermark-src=\"v2-782be6023dc524ffef28919bfd405526\"></p>\n<p data-pid=\"crs4bryk\">↑动力电池正极材料</p>\n<p data-pid=\"ZVr5khYr\">前面提到正极材料主要决定电池的成本和续航里程。我们就基于大众集团电池日公布的细节来聊聊目前主流的正极材料。业绩普遍在长续航里程的电动汽车中使用的镍锰钴NMC三元锂电正极，它占到了锂电池电芯多达40%的成本，并且续航里程90%受制于正极材料的性能。相应的在中短续航里程的电动汽车中，磷酸铁锂LFP正极得以应用，它能够将锂电池电芯成本降至原来的80%，而续航里程则相应缩短至原来的80%左右。随着技术的演进，业界正在研究高镍低锰无钴正极材料，它能够将锂电池电芯成本降至原来的80%，而续航里程则保持基本不变。</p>\n<p data-pid=\"APmxzNrT\">负极材料</p>\n<p><img src=\"https://pica.zhimg.com/v2-349c5fe3f59bac7f4724223b2b04cda3_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1784\" data-rawheight=\"1368\" data-watermark=\"watermark\" data-original-src=\"v2-349c5fe3f59bac7f4724223b2b04cda3\" data-watermark-src=\"v2-3c42bf468c324976b0d387888f4d5b43\" data-private-watermark-src=\"v2-6992982910c4f9486771f54b8d2957f9\"></p>\n<p data-pid=\"nCF9S0FJ\">↑动力电池负极材料</p>\n<p data-pid=\"7XfiulEP\">对应正极材料主要决定电池的成本和续航里程，而负极材料主要决定电池的充电速度。业绩普遍在电动汽车中使用石墨烯碳材料正极，它几乎完全决定了充电速度。因为负极材料包容锂离子的能力决定了其充电速度，因此石墨烯是快充技术的关键。并且续航里程小幅大约10%受制于负极材料的性能。相应的随着技术的演进，业界正在研究石墨烯参杂硅负极材料，它能够将锂电池充电时间降至原来的70%，而续航里程则可增加10%。因为石墨烯参杂硅以后能够达到约20倍于原来的锂离子包容能力，可以大幅提升充电速度。</p>\n<p data-pid=\"p_kOe37G\">固态电池组成和工作原理</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a04dc96dbac5a91c2cd4c3d802cf22c8_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1496\" data-rawheight=\"703\" data-watermark=\"watermark\" data-original-src=\"v2-a04dc96dbac5a91c2cd4c3d802cf22c8\" data-watermark-src=\"v2-9efbd8240fe50484054b3e7b8cecab2d\" data-private-watermark-src=\"v2-858cef647b3fd1453e84d52768b3c566\"></p>\n<p data-pid=\"heuoWylO\">↑电动汽车固态电池组成</p>\n<p data-pid=\"g-kdkcpx\">左侧的传统锂电池由于使用液态电解液因此隔膜采用多孔渗透结构Porous，石墨烯和铜板组成电池负极，镍锰钴NMC和铝板组成电池正极，正负极和隔膜均浸泡在液态电解液中。由右侧的固态锂电池组成可以看到，隔膜更新成了固态的锂离子导电陶瓷，锂金属和铜板组成新的电池负极，全新的固态电解质和铝板组成电池正极。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5209eb013b42ae3d7f59c3d505385c21_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"626\" data-watermark=\"watermark\" data-original-src=\"v2-5209eb013b42ae3d7f59c3d505385c21\" data-watermark-src=\"v2-df7c3a1e66facacfb56d5840b403b7ac\" data-private-watermark-src=\"v2-637a67288a1563f111c6de8d19849f48\"></p>\n<p data-pid=\"AbVmwE8L\">↑电动汽车固态电池优缺点</p>\n<p data-pid=\"2wSdgOAi\">固态电池优势包括：</p>\n<p data-pid=\"5TXkDyie\">1. 能力密度高-电解质和电极均为固态构成紧凑的结构</p>\n<p data-pid=\"7ef8DAW-\">2. 更长续航里程</p>\n<p data-pid=\"l2RCWN8-\">3. 更快充电速度-400公里续航充电时间有望从25分钟缩减至12分钟</p>\n<p data-pid=\"eQ1N1Siq\">固态电池劣势包括：</p>\n<p data-pid=\"s6UEeDp0\">1. 高温下离子导电率低</p>\n<p data-pid=\"lS-8OmNk\">2. 化学界面稳定性欠缺</p>\n<p data-pid=\"VwoOSzbA\">3. 大规模量产能力不足</p>\n<p data-pid=\"jBnqlvR-\">4. 电芯厚度不均匀</p>\n<p data-pid=\"GlPPLQ-Y\">总体来说，固态电池的优点使电动汽车性能趋向完美，但它的劣势明显受限于稳定性还未达到真正量产的标准。</p>\n<p data-pid=\"R65JlQhE\">固态电池的应用实例</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2bc92a6f27c8e5bbe26508c717d6faf6_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3753\" data-rawheight=\"2478\" data-watermark=\"watermark\" data-original-src=\"v2-2bc92a6f27c8e5bbe26508c717d6faf6\" data-watermark-src=\"v2-70add19c98bb532c390674630a543c20\" data-private-watermark-src=\"v2-fb9434a8854a9717f44c296e60eca2a0\"></p>\n<p data-pid=\"btQMDmC3\">↑电动汽车固态电池制造商</p>\n<p data-pid=\"tbbsDet_\">按照LUX研究机构报告，电动汽车固态电池制造商可谓为数众多，而且变化飞快。大众汽车投资的Quantumscape在此次大众电池日中被多次提及，而宝马和福特则投资SolidPower，通用汽车投资的Sakti3和SolidEnergy，博世收购美国加州初创公司SEEO。可以说电动汽车固态电池制造商各有技术路线，潜力还未明确有待挖掘。那么为什么电动汽车固态电池有这么多制造商呢？那么就要来看一下固态电池的类型了。</p>\n<p data-pid=\"hx7Y6ABV\">固态电池按固态电解质分类：</p>\n<p data-pid=\"JJnoNWAF\">1. 硫化物-业界主流，又称锂硫电池，导电率高，制造条件苛刻</p>\n<p data-pid=\"ilKeJ7kP\">2. 氧化物-包括石榴石型和LiPON薄膜型等， 稳定性好，界面接触差</p>\n<p data-pid=\"Jd4VSnAx\">3. 聚合物-灵活性好，聚合物薄膜便于大规模生产，导电率低</p>\n<p data-pid=\"Mi5RVZTD\">很多制造商选择多重押宝，比如Quantumscape就同时手握硫化物和石榴石固态电解质专利。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ab1cde3c052958c8b98e5080fc6529ac_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"533\" data-watermark=\"watermark\" data-original-src=\"v2-ab1cde3c052958c8b98e5080fc6529ac\" data-watermark-src=\"v2-04d75ba75c4b3bc675a122e74fd66eba\" data-private-watermark-src=\"v2-cda15a9a33905dd09035abbcbab7827a\"></p>\n<p data-pid=\"ZdOTRv2i\">↑博世投资固态电池制造商SEEO</p>\n<p data-pid=\"DauQj_gz\">比如博世收购美国加州电池公司SEEO，SEEO脱胎于美国加州伯克利实验室Berkeley Lab，专注于固态锂电池的开发。SEEO的固态锂电池采用聚合物Polymer材质，结构更加紧密。它的固态锂电池的具有体积小，能量密度大，碰撞后不会燃烧的优点。SEEO所采用的聚合物Polymer卷对卷生产概念。电池的正极，电解质和负极等材料都被一层层的卷进一个100微米厚的薄膜中，提高了生产效率。SEEO坚持使用的固态电解质则为干聚合物Dry Polymer薄膜。聚合物电解质的组成与有机电解液比较接近，它们均由电解质锂盐和“溶剂”组成。其实博世和SEEO的合作始于2015年，但至今仍未量产。可见固态电池技术何时能量产仍然是业界关心的重中之重。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7cac981fe967c0d9b0557188e624cbb0_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1110\" data-rawheight=\"770\" data-watermark=\"watermark\" data-original-src=\"v2-7cac981fe967c0d9b0557188e624cbb0\" data-watermark-src=\"v2-c92f19f6ebebbe7aa52a250bcc056127\" data-private-watermark-src=\"v2-f5c9954b2f5d04d7381dbd76fd2d6a6f\"></p>\n<p data-pid=\"C02TaPoh\">↑锂空气固态电池</p>\n<p data-pid=\"y_0pbKB2\">除了上述固态电池，业界还提出了锂空气电池让原来就鱼龙混杂的固态电池市场变得更加错综复杂。传统的锂电池正负极都是固体材料封闭在电池包中进行化学反应，通过锂离子的迁移放电。对应的锂空气电池却是靠锂离子在正极中与空气中的氧气进行氧化反应进行发电的。因此电池的结构更简单重量更轻，但是同时需要保证在正极中锂离子可以和氧气有充分稳定的接触。剑桥大学2015年发表于核心期刊《科学》中的论文《锂空气电池，更好的高能量密度电源》，创新地将化学反应产物从氧化锂变成了更易处理的氢氧化锂。其中一项关键调整就是使用了还原态氧化石墨烯作为渗透性极好的多孔蓬松电极。这样的电极保证了前文提到的正极中锂离子和氧气的充分稳定接触。锂空气电池的内部结构为了提高空气的接触面积而设计的和人体肺部结构非常类似。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e2a3375d5862f65cab2a38b20e31de97_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-e2a3375d5862f65cab2a38b20e31de97\" data-watermark-src=\"v2-21418daa86194e3b975ddb23d7f72343\" data-private-watermark-src=\"v2-93430a732c5c1ec4fcc9688970c305e3\"></p>\n<p data-pid=\"SuhBF5x5\">↑蔚来汽车投资固态电池</p>\n<p data-pid=\"wOou2PQ_\">而最近国内车企也陆续揭露了投资固态电池的动向。比如广汽新能源宣布投资清陶能源的固态电池，而蔚来汽车则在投资宁德时代和卫蓝新能源等多家潜在固态电池制造商。国内车企相对务实，着眼短期内更有希望短期量产的固液混合电解质固态电池，附加无机预锂化硅碳负极和纳米级包裹超高镍正极等材料技术增加汽车动力电池的性能。</p>\n<p data-pid=\"_TrMqwAG\">综上，今天我们介绍了电动汽车固态电池的化学组成、工作原理和应用实例。固态电池包含硫化物、氧化物、聚合物和锂空气等多种技术路线。最终哪个方向能够成熟量产还未可知。国内车企则转向更有希望短期量产的固液混合电解质固态电池。让我们期待固态电池技术的逐渐完善，随着大量应用并走向量产从而完成电动汽车的终局之战。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/labixiaoxing?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">辣笔小星</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/504141889/answer/2501649348?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">8 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/511007634?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">性价比左右动力电池路线之争，LG 新能源生产磷酸铁锂电池，这意味着什么？</a><br><a href=\"http://www.zhihu.com/question/533531919?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">磷酸铁锂电池全面反超三元锂电池，该电池都有哪些优势？</a><br>\n","link":"http://www.zhihu.com/question/504141889/answer/2501649348?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"为什么三电技术中，电池、电机技术受到很大关注，反而电控技术却很少被提及？","date":"2022-05-26 08:05:44","description":"\n<p data-pid=\"JYzoIXB0\">大体上说，有4方面原因：</p>\n<h2>一、部分电控技术，被电机、电池技术涵盖</h2>\n<p data-pid=\"mTuaQ7Pg\">现在电动车常用的永磁同步电机和异步交流电机，都属于三相交流电机。</p>\n<p><img src=\"https://pica.zhimg.com/v2-ff04f8be2425a5c327811e839281531d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1227\" data-rawheight=\"813\" data-watermark=\"original\" data-original-src=\"v2-ff04f8be2425a5c327811e839281531d\" data-watermark-src=\"v2-93b44ebe48732412cddf5f4347c14c7b\" data-private-watermark-src=\"v2-a331ea335db1c84528238f921e2ca27e\"></p>\n<p data-pid=\"CtGMeeME\">它们的电控算法都采用了<b><a href=\"https://www.zhihu.com/search?q=%E7%9F%A2%E9%87%8F%E6%8E%A7%E5%88%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A776186562%7D\" class=\"internal\">矢量控制</a></b>(Vector sensorless control)。也就是说，当一辆电动车在说自己采用了永磁同步或异步交流电机的时候，就默认公布了自己采用了什么样的电控算法。</p>\n<p data-pid=\"leGf1QHo\">这是蕴含着人类智慧结晶、体现着化繁为简精神的一种控制方法。讲起来很难，有兴趣可以参考这篇文章：</p>\n<a href=\"https://www.zhihu.com/question/23567707/answer/104257795\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pica.zhimg.com/5784eb3a2bc48dc7c9568bac8daa1b65_l.jpg?source=b1748391\" data-image-width=\"1160\" data-image-height=\"1160\" class=\"internal\">三相对称电流通过向dq坐标轴上投影得到的Id、Iq与通过park变换得到的Id、Iq有什么区别和联系么？</a><p data-pid=\"E50CZW4J\">简单来说：</p>\n<ol>\n<li data-pid=\"VrNrcv4E\">定子有个磁场，转子也有个磁场；</li>\n<li data-pid=\"5x-F6n8b\">电机要想转起来，就是控制电场控制磁场的变化，吸引另外一个磁场，链条就是<b>电流 → 磁场 → 力 → 转矩 → 速度</b>；</li>\n<li data-pid=\"mXwSyQdN\">难度在于，就像追女生一样，俩磁场靠太近了没吸引力，离太远了没吸引力，再加上转速这么快真的很难控制……</li>\n<li data-pid=\"3YkqxLNI\">1970年左右<a href=\"https://www.zhihu.com/search?q=%E8%BE%BE%E5%A7%86%E6%96%BD%E5%A1%94%E7%89%B9%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A776186562%7D\" class=\"internal\">达姆施塔特工业大学</a>与西门子提出了Park变换，一下子化繁为简了，世界清净啦！</li>\n</ol>\n<p><img src=\"https://pic1.zhimg.com/v2-434444b568bc3eac2d95056edb7eddea_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"585\" data-watermark=\"original\" data-original-src=\"v2-434444b568bc3eac2d95056edb7eddea\" data-watermark-src=\"v2-6344916a47fcd38addc4bc469664f7b9\" data-private-watermark-src=\"v2-19d39e3bc2140c6c5f61d6b13cfb0421\"></p>\n<p data-pid=\"Tq4xvFzG\"><b>三相交流电机与矢量控制算法是严格绑定的，你用我用他也用。提与不提，都改变不了这一事实。提的话，还占用了宝贵的广告、海报空间，不如不提。</b></p>\n<h2>二、核心电控算法已经成熟，难创新</h2>\n<p data-pid=\"IkK4o45k\">交流电机的发展高峰期在20世纪60至80年代，主要推动力是：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-45236baf9050ce94d12055df620f7809_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1001\" data-rawheight=\"613\" data-watermark=\"original\" data-original-src=\"v2-45236baf9050ce94d12055df620f7809\" data-watermark-src=\"v2-517ff498cb96770376697a5e2debb947\" data-private-watermark-src=\"v2-43c675d237f66a39f2b5c7a3701d459a\"></p>\n<ul>\n<li data-pid=\"wYaxXI8h\">\n<b>算法：</b>空间矢量调制控制技术(SVPWM, Space Vector PWM)。</li>\n<li data-pid=\"mpGXD_Ty\">\n<b>信号硬件：</b>先进处理器的发明使用，承载算法。</li>\n<li data-pid=\"esMjKh7r\">\n<b>功率硬件：</b>IGBT的发明与商业推广，执行算法。</li>\n</ul>\n<p data-pid=\"Iga_hbMb\"><b>这三者都属于电控范畴，但是算法已经成熟，几乎不可能再改进；承载算法的信号硬件早就够用了，也没啥好提的。</b>这就像不发售新的游戏，那么Nvidia显卡也就没有用武之地一样。</p>\n<p data-pid=\"IpdwlrIy\">功率硬件也就是功率半导体，倒还有进步的空间，只不过大家似乎没意识到这属于电控。这就涉及到下一个方面了：</p>\n<h2>三、提及了，但没意识到这属于电控技术</h2>\n<p data-pid=\"I_cOXzWW\"><b>碳化硅(SiC)技术，大家都听过吧？ 这两年不是经常提吗？</b>特斯拉、比亚迪的电机能耗之所以低，就因为率先用上了SiC半导体技术。</p>\n<p data-pid=\"2d8FMd-8\">你可能会质疑：<b>SiC MOSFET、IGBT都是看得见、摸得着的硬件，怎么能说是电控技术呢？</b></p>\n<p data-pid=\"Qu5PhmyO\"><b>那就容我解读一下这个问题。</b></p>\n<p data-pid=\"JBx8LH81\">无论是永磁同步电机(PMSM, Permanent-Magnet Synchronous Motor)，还是异步交流电机(IM, Inductor Motor )，要想旋转起来都离不开正弦波的交流电：</p>\n<p><img src=\"https://pica.zhimg.com/v2-37131d45262d696fb3833ed6c54f0200_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"450\" data-watermark=\"original\" data-original-src=\"v2-37131d45262d696fb3833ed6c54f0200\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<ul>\n<li data-pid=\"KirnrWOs\">\n<b>算法</b>：这个正弦波的时刻、周期、相位，就是由SVPWM算法来决定的，也就是一行行代码组成的算法。</li>\n<li data-pid=\"otboh23P\">\n<b>算法 → 信号</b>：算法转化成信号，就是依赖处理器，也就是芯片。</li>\n<li data-pid=\"mJk6Hk5t\">\n<b>信号 → 功率</b>：信号转化成功率，就是依赖开关器件，也就是功率半导体器件。</li>\n</ul>\n<p data-pid=\"AkYEimwO\">只需要给<b>“开关器件”输入一个小功率的控制信号</b>(例如1毛钱发个短信)，<b>它就可以输出/断开高功率电流</b>——<b>这种以小搏大的开关器件，就是传说中的双极型晶体管(简称BJT，Bipolar Junction Transistor)，又称三极管</b>。</p>\n<p data-pid=\"L8Q6UsWI\">可以看到，BJT能以<a href=\"https://www.zhihu.com/search?q=%E5%B0%8F%E7%94%B5%E6%B5%81&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2112013489%7D\" class=\"internal\">小电流</a>控制大电流、能以1美分杠杆撬动100美元，因此又被称为<b>“放大器“</b><sup data-text=\"\" data-url=\"https://www.zhihu.com/question/23894327/answer/168299698\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d5a092a421dc392ccf93538eeef04909_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"751\" data-watermark=\"original\" data-original-src=\"v2-d5a092a421dc392ccf93538eeef04909\" data-watermark-src=\"v2-a5924d5e579a27858c433e456992e73c\" data-private-watermark-src=\"v2-8a8088dec6d95a734551548cbbed2256\"></p>\n<p data-pid=\"Ge9Ye8CH\">BJT能完成“开关器件“的基本功能，但它也有开关频率较慢、开关损耗较高、驱动功耗高等缺点，更重要是：<b>它要撬动100块钱，至少要花费1毛钱，如果我1毛钱也不想花呢？</b></p>\n<p data-pid=\"RHlPFg4U\"><b>那就要把“流控器件”换为“压控器件”，也就是MOSFET</b>(Metal-Oxide-Semiconductor Field-Effect Transistor金属-氧化物半导体场效应晶体管)<sup data-text=\"\" data-url=\"https://en.wikipedia.org/wiki/MOSFET\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\">[2]</sup>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-67e7b0070f1803a20d3343c518f12d61_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"670\" data-watermark=\"original\" data-original-src=\"v2-67e7b0070f1803a20d3343c518f12d61\" data-watermark-src=\"v2-14c0221a1da7b5fcb4c5bc69c39ac5fd\" data-private-watermark-src=\"v2-17336d062840dff869973c918c937fef\"></p>\n<p data-pid=\"rOx-MPaM\">上面的MOSFET截面图是不是看着头大？ 不要紧，我们只需要记得：MOSFET也有三个极，<b>只需要在Gate极上施压(施加一个电压信号)但不用付钱，我们就可以另外两极上输出/断开功率电流</b>。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0eccce5eaf621e8f15c5ac0b908097c7_720w.gif?source=b1748391?rss\" data-caption=\"横坐标为电压信号，纵坐标为功率电流 —— 无电压时，功率电流断开；电压足够大的时候，功率电流导通。图片来源[3]\" data-size=\"normal\" data-rawwidth=\"722\" data-rawheight=\"328\" data-watermark=\"original\" data-original-src=\"v2-0eccce5eaf621e8f15c5ac0b908097c7\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"G7SHOpJy\">如此看来，MOSFET比BJT好得多，但它应用到汽车领域有一个致命问题：<b>耐压较弱、做不了高功率</b>。大体上来说，600V10A就基本到头了 —— <b>400V勉强可以用一下，但功率只有6kW，造个电动自行车还行；至于即将到来的800V系统，那铁定没戏</b>！</p>\n<p data-pid=\"NUcuSMH5\">电动汽车的应用场景太苛刻，MOSFET的小身板扛不住，那咋办？<b>有两条思路，一是从外部找帮手，二是从内部提高自身属性，打铁还需自身硬</b>。</p>\n<p data-pid=\"uIa6TR_k\">俗话说得好，严以待人，宽以律己 —— <b>提升自身属性的路总是很难的，还是先去找找帮手吧</b>！于是，MOSFET找到了刚被它痛打过的BJT，二者组成了<b>耐压范围600-6500V的大功率开关器件，也就是MOSFET + BJT = IGBT</b> (Insulated Gate Bipolar Transistor，绝缘栅双极型晶体管)<sup data-text=\"\" data-url=\"http://guba.eastmoney.com/news,688396,925916159.html\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"3\">[3]</sup>。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a336fcea348d7423dd9020873dff488c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1077\" data-rawheight=\"605\" data-watermark=\"original\" data-original-src=\"v2-a336fcea348d7423dd9020873dff488c\" data-watermark-src=\"v2-fe7b3938548f5cb3eaff5145e7e6e12c\" data-private-watermark-src=\"v2-d821a59b7d447f23109ae098ae9e6964\"></p>\n<p data-pid=\"ni772-Xp\">咱们刚才提到的BJT、MOSFET、IGBT指的都是半导体“结构“，默认都基于<b>Si(硅) “材料“</b>。因此，它们的<b>全称应该“材料+结构”的组合，比如Si MOSFET、Si IGBT。</b>只不过在很长一段时间里，除了Si别无选择，所以也就把材料符号给省略了。</p>\n<p data-pid=\"0bKJLhQJ\">SiC(碳化硅)则是近年来兴起的<b>第三代半导体材料</b><sup data-text=\"宽禁带半导体行业深度：SiC与GaN的兴起与未来. 中泰证券. 2019年.\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"4\">[4]</sup><b>，它是一种宽禁带半导体材料，可以做到很高的耐压下芯片还很薄 —— 高耐压、高功率、高效率、小体积</b>。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8710454a08c18b6842e5130ab3834b22_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1103\" data-rawheight=\"550\" data-watermark=\"original\" data-original-src=\"v2-8710454a08c18b6842e5130ab3834b22\" data-watermark-src=\"v2-2f9fb92ae43502982cd968bd5fc1ae29\" data-private-watermark-src=\"v2-657900bab96a6f6f6b803d2879a14781\"></p>\n<p data-pid=\"mtlwIXUd\">材料属性的提升，意味着用它们制成的半导体器件应用范围更广<sup data-text=\"\" data-url=\"https://www.infineon.com/cms/en/product/wide-band-gap-semiconductors-sic-gan/\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"5\">[5]</sup>：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4280b7f13b21a9b7761e276d8df87612_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1093\" data-rawheight=\"847\" data-watermark=\"original\" data-original-src=\"v2-4280b7f13b21a9b7761e276d8df87612\" data-watermark-src=\"v2-1940264c199d7ac02066cc07ede835b4\" data-private-watermark-src=\"v2-7db36c8c48e68b89e12dc32fb34642fe\"></p>\n<p data-pid=\"JdpbWK5y\">这也意味着，我们没必要用给Si MOSFET找帮手升级为Si IGBT的方式来提高能力了，可以按照打铁还需自身硬的思路，<b>以提升材料属性的方式升级为SiC MOSFET就可以了</b><sup data-text=\"\" data-url=\"https://www.onelectrontech.com/applications-of-wide-band-gap-wbg-devices-in-energy-infrastructure/\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"6\">[6]</sup>！</p>\n<p data-pid=\"zTUTJNJG\"><b>所以说，从算法→信号→功率这个链条上来看，SiC MOSFET与IGBT应该归为电控技术吧</b>！咱们平时买车时会留意SiC这个概念，但没意识到它属于电控。</p>\n<h2>四、理解门槛高，不易传播</h2>\n<p data-pid=\"r3WHRGQE\">这一点，我同意 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/24bf5527e6b1903c69d6e10dd44dea59\" data-hash=\"24bf5527e6b1903c69d6e10dd44dea59\" data-hovercard=\"p$b$24bf5527e6b1903c69d6e10dd44dea59\">@Mr.Zhang</a> 的观点：有些电控算法理解门槛高，不易传播。</p>\n<p data-pid=\"zvsA4u22\">电控有一个核心的安全概念：功能安全(Function Safety)。</p>\n<a href=\"https://www.zhihu.com/question/27719391/answer/39337648\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/e7dc7cba9241fb13768be81e971c73f1_qhd.jpg?source=b1748391\" data-image-width=\"687\" data-image-height=\"289\" class=\"internal\">ISO26262 中 ASIL 与 DFMEA 有什么区别？</a><p data-pid=\"ZBSphdop\">功能安全这个概念非常复杂，难以理解。别说讲给消费者了，就算说给工程师听，要没有相关经验也很难讲清楚。</p>\n<p data-pid=\"z8z-2kQr\">有时候，别说讲不清楚了，甚至会讲错。<b>就比如说，李斌曾说单电机都是耍流氓，因为双电机多个冗余更安全</b>。</p>\n<p data-pid=\"H0xG3jVA\">他在表达这个观点的时候，涉及的就是电控功能安全的概念。好不容易大佬提及一次电控，还说错了。<b>大佬都能说错、消费者也分辨不出来对错，可见电控概念多难传播了 —— 如果你是车企的市场总监，你觉得重点宣传电控是一个好主意吗？</b></p>\n<a href=\"https://www.zhihu.com/question/409995251/answer/1369203176\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-f38cbe8f692981bb802d12a8a3f1a0ad_l.jpg?source=b1748391\" data-image-width=\"463\" data-image-height=\"393\" class=\"internal\">如何看待蔚来汽车李斌说：单电机都是耍流氓？</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhangkangkang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">张抗抗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/533112992/answer/2501854761?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/531779213?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何理解电动汽车的电机控制器的安全状态？</a><br><a href=\"http://www.zhihu.com/question/504174624?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">中国新能源汽车控制软件与国外有多大差距？</a><br>\n","link":"http://www.zhihu.com/question/533112992/answer/2501854761?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"Figma 的核心概念：Frame","date":"2022-05-26 06:00:00","description":"Frame 和 Group 该用哪个？<p>[......]</p>\n<a href=\"https://sspai.com/prime/story/SR-05-Figma-03\" target=\"_blank\">查看全文</a><p>本文为会员文章，出自<a href=\"https://sspai.com/prime/precog/SR-05-Figma\" target=\"_blank\">《Figma 的奇妙漫游》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/prime/story/SR-05-Figma-03"},{"title":"网页语言选单背后也有大学问，设计师是这样看待语言选单的","date":"2022-05-26 03:30:12","description":"国家和语言选单看起来好像是一个相当微不足道的设计挑战，但是有很多小细节决定了体验的好坏.<a href=\"https://sspai.com/post/73349\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73349"},{"title":"如何评价如龙工作室新作《审判之眼:死神的遗言》？","date":"2022-05-25 09:05:27","description":"\n<p data-pid=\"us13qbHc\">最近在趁着会免和居家，终于断断续续地打通了这个游戏..</p>\n<p><br></p>\n<p data-pid=\"jmg1s9G7\">《审判之眼:死神的遗言》故事的舞台主要还在神室町，恰好之前我刚刚在PC上重新打完《如龙0》，所以感慨万千...</p>\n<p data-pid=\"y2wdJaab\">同一个地区，不同的时代，这种时代交错的体验特别奇妙。</p>\n<p data-pid=\"H2atmS86\">同样的街头斗殴，在最早的80年代纸醉金迷街头暴揍打的钞票乱飞，技能升级最后能花上亿；然后到了2018年的《审判之眼》里，打了半天才有几率掉一点钱，还不够买几盒泡面的，以至于去下水道医生那里买医疗包都有点肉疼，由于又不想打麻将赚钱，只能每次大战前多买点包子凑数，另外少挨点致命打击——让人深感时光荏苒，日本经济不复当年。</p>\n<p data-pid=\"624b4Lz0\">另外，更多是一种物是人非的感觉，毕竟《如龙》系列里桐生的故事都发生在同样的地方，有的时候走过一些已经被封起来或者早就被改造的地方，比如亚细亚街，忍不住驻足回望，想起在多少年前，也是在这里，自己遭遇了什么，自己所熟悉的那些人在这里的爱恨情仇。</p>\n<p><br></p>\n<p data-pid=\"30XBMfRt\">但这些对这些毫无记忆，屏幕里的《审判之眼》的主角八神则就没这么多眷念了，曾经为律师的他因为卷入了一场巨大的阴谋中，最终转职成为了侦探。当然时代在进步，主题不完全再是传统黑道话题了，更多掺和了一些社会性和现实性。</p>\n<p data-pid=\"E4TU6ak8\">虽然这个故事厚重感个人认为达不到双线叙事的《如龙0》的水平，但连环的悬念设置也足够精彩，从一桩桩案件委托开始，最终让主角重返了让自己几乎身败名裂的开端，就是最后有点太快了。</p>\n<p data-pid=\"S66u2Ma5\"><b>不过，《审判之眼》并不是一款以推理和解谜为驱动的游戏，实际上只是使用了侦探的身份</b>，主线故事更多的重点还是花在了“承接委托，到达地点，（观察/跟踪）打架，看动画”的循环里——在这里就不得不提一下游戏里塞满了大量追逐、跟踪、观察、举证的桥段，虽然很符合侦探的定位，但在如此高强度的填充下，乏善可陈的变化可能会让人觉得有些厌烦。</p>\n<p data-pid=\"ryuukLuU\">作为侦探，八神还要搞好各路路人角色的关系，甚至包括各路店员的羁绊（而且很一般），才能进一步获得道具（比如CD碟）或者触发新的委托和功能，也算是这个游戏支线拓展的一部分，获得的经验可以解锁更多的能力，而不是钱。</p>\n<p data-pid=\"FV0ozUmM\">其中包括大量鸡毛蒜皮的案件，比如帮人追假发系列，炸弹警报系列，算命系列，充斥着自《如龙》系列以来一贯的日式幽默。</p>\n<p data-pid=\"eFVx_ayT\">尤其是当主角有个可以吐槽的同事搭档的时候。</p>\n<p data-pid=\"3c53MDZ_\">与《如龙》不那么相同的地方，就是主角更文明了。指不能用什么过于凶狠像黑帮的武器了，倒还是可以抓起路边设施比如自行车就是一顿猛砸，可惜自行车质量一如既往的差，经常在乱斗中还没捡起来就碎了。</p>\n<p data-pid=\"JI6YU0Wg\">相较于之前的作品，其实还是加入了一些比较神秘的小系统，比如开锁系统，比如记住钥匙的技能，可能加入这些东西更符合侦探的设定吧（偷偷开锁真的算侦探吗）。</p>\n<p><br></p>\n<p data-pid=\"p-nk0PPK\">《审判之眼》中八神的战斗上其实更像《如龙0》里的真岛吾朗，可以切换多种适应不同战斗环境的战斗风格，与场景的交互相较于之前的作品也更加丝滑，尤其是在纵向上的拓展相较于前作有了不小的提升。</p>\n<p data-pid=\"hG95zKBS\">而唯一比较头疼的部分大概就是无处不在的京滨同盟了，没事就在街道上搞突袭，剧情吧也没啥剧情，总是拦着玩家要打一架。</p>\n<p data-pid=\"weS2os95\">至于特色小游戏，仍然多到爆炸，什么VR馆啦，无人机大赛（无人机手感烂到爆炸，梦回GTA 遥控飞机）啦，赌场啦，都是有的，但比前作都少了一些，此外还有几个支线任务里可以偶遇并达成特殊羁绊的红颜知己。</p>\n<p><br></p>\n<p data-pid=\"DTgse3xO\">其实在我个人看来，八神干更像《看门狗》里的艾登·皮尔斯，一个是有着律师理想的暴力侦探，一个是假装自己是黑客的收尾人。</p>\n<p data-pid=\"W6JalO7X\">区别就是后者是真的下杀手，而前者只是把人打服。二者多少都有点苦大仇深，只不过八神这边有了活宝队友和合理的桥段安插之后，最后还是很积极向上的。</p>\n<p><br></p>\n<p data-pid=\"ycldtg3X\">总的来说，《审判之眼》的重点还是叙事本身，剧情安排的其实不算完整但发挥还算在线，延续了《如龙》系列的诸多特色和系统传统，所以看上去新意有些不足。真硬要说推荐与否的话，那还是推荐在如今这个没什么大作的空窗期玩一下吧。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/305570613/answer/2499211785?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/305570613/answer/2499211785?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">8 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/505051844?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《审判之眼：死神的遗言》是一款怎样的游戏？</a><br><a href=\"http://www.zhihu.com/question/504244941?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《审判之眼:死神的遗言》麻将有哪些打法？</a><br>\n","link":"http://www.zhihu.com/question/305570613/answer/2499211785?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"【041】机器学习驱动的基本面量化投资","date":"2022-05-23 11:40:50","description":"\n<p data-pid=\"D9zevbmE\">本文是<b>因子选择</b>专题的第 <i>001 </i>篇，也是因子动物园的第 <i>041</i> 篇独立原创研究。</p>\n<p data-pid=\"DJpXvA8g\">【<b>未经授权，禁止转载！</b>】欢迎私信公众号后台或动物园园长获取转载授权。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"GA-VC7FZ\">【30 秒速览】李斌, 邵新月和李玥阳（2019）第一次基于 A 股的大量异象，对机器学习和深度学习算法选择因子和预测股票收益的能力进行了深入的探究，并利用分析结果，反过来对因子的重要进行了考察。他们发现，<b>新的算法的确在某种程度上可以更好地挖掘因子与股票未来收益间的线性与非线性关系</b>。他们也指出，<b>交易摩擦类因子在 A 股最为重要</b>，但价值因子不重要，这一点似乎与已有研究不符。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"K5eq924y\">目录：</p>\n<p data-pid=\"sf6srlyf\">01. 简介</p>\n<p data-pid=\"KYHsKpJM\">02. 基本目标和方法</p>\n<p data-pid=\"mGWYlHn3\">03. 方法比较的实证结果</p>\n<p data-pid=\"Vn20gndV\">04. 因子重要性检验</p>\n<p data-pid=\"XQCYxThI\">05. 一点评论</p>\n<p data-pid=\"5unzJMaF\">06. 结语</p>\n<hr>\n<h2>1. 简介</h2>\n<p data-pid=\"ElJ1icZV\">近年来，随着机器学习和深度学习的快速发展，机器学习在金融，包括因子研究领域，也得到了日益广泛的应用。例如，周国富和 Rapach 教授也在多篇文献中用到了以 forecast combination 为代表的机器学习方法（见 Rapach, Strauss, and Zhou (2010), Kong, Rapach, Strauss, and Zhou (2011), Rapach and Zhou (2010) 以及 Han, He, Rapach, and Zhou (2019).）。</p>\n<p data-pid=\"wrs6i3LZ\">更重要的自然是 Macos Lopez Prado ，仅 2018 年一年，他撰写了至少 3 篇相关论文以及一部专著（见 Prado (2018 a,b,c,d)）。此外，他还同 Frank Fabozzi 和 Joseph Simonian 一同作为主编，参与创办了新的期刊 Journal of Financial Data Science ，在第一期中，三位大佬 Rob Arnott、Campbell Harvey 和投资组合理论奠基人 Harry Markowitz 联合发表了一篇题为《A Backtesting Protocol in the Era of Machine Learning》的文章，宣告投资策略和因子研究正式步入机器学习时代。</p>\n<p data-pid=\"SL0zdBri\">但过去的相关研究往往仍集中于利用机器学习算法构建新的因子，鲜少涉及利用机器学习算法来进行大规模的因子及预测模型筛选。此外，已有研究主要关注机器学习算法，对近年日益兴起的深度学习则关注较少。最后，这些研究大多基于美股进行，较少关注 A 股市场。</p>\n<p data-pid=\"JQivS2gk\">因此，今天难得地着重介绍一篇中文文章——《机器学习驱动的基本面量化投资》，由武汉大学李斌教授及两位硕士生发表于《中国工业经济》。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>2. 基本目标和方法</h2>\n<p data-pid=\"gV-BgNT3\">作者们以 1997 年 1 月至 2018 年 10 月间 A 股市场的 96 个重要投资异象为基础，比较了经典的 OLS 模型和多种机器学习和深度学习模型，以回答下述 3 个依次递进的主要问题：</p>\n<ul>\n<li data-pid=\"-tB6lWxL\"> 是否有线性机器学习模型可以超越 OLS ？<br>\n</li>\n<li data-pid=\"Kf-FHbk3\"> 是否有非线性机器学习模型可以超越线性机器学习模型？<br>\n</li>\n<li data-pid=\"wUx2x8Q0\"> 如果非线性模型的确表现更好，那么，是否有深度学习算法可以超越机器学习模型？<br>\n</li>\n</ul>\n<p data-pid=\"7ThsgyCG\">特别地，作者们共选取了 5 种线性机器学习算法、4 种非线性机器学习算法和 3 种深度学习方法。其中，考虑到股票收益预测问题的性质，机器学习算法都为监督学习方法。具体算法如下表所示：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-73ca112828c2c9b7b1b640db562ed67b_b.jpg\" data-size=\"normal\" data-rawwidth=\"1004\" data-rawheight=\"533\" class=\"origin_image zh-lightbox-thumb\" width=\"1004\" data-original=\"https://pic4.zhimg.com/v2-73ca112828c2c9b7b1b640db562ed67b_r.jpg\"><figcaption>表 1 ：文章所用算法列表.数据来源：因子动物园，李斌, 邵新月和李玥阳（2019）.</figcaption></figure><p data-pid=\"XEdd6ezN\">对于每一个因子/模型，作者使用 12 个月的滚动窗宽进行建模并对下月收益率进行预测，根据预测收益率将股票分为 10 组，构建多空因子组合。理论上，最优参数也是时变的，但基于计算量和稳健性的考虑，作者在整个分析期间，都沿用第一期选择的最优参数。</p>\n<p data-pid=\"QI3IqIff\">此外，考虑到不同因子取值可能有数量级的差异，为了控制其对建模结果的影响，作者在每次建模前，对训练集的因子进行了标准化处理。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>3. 算法比较的实证结果</h2>\n<p data-pid=\"6iU_s9Js\">表 2 展示了不同模型下的多头、空头及多空组合表现。从该表可以发现：</p>\n<ul>\n<li data-pid=\"9v3dGoEx\">\n<b>线性机器学习模型表现均略优于 OLS</b>，显示机器学习算法确实可以更好地识别因子与股票未来收益之间的相关性，虽然提升幅度并不是非常大。<br>\n</li>\n<li data-pid=\"HOuPn1pW\">\n<b>非线性模型表现显著优于线性模型</b>，其中以 XGBoost 为甚。XGBoost 近年在数据挖掘界非常流行（有玩笑称其为 Kaggle 竞赛标配），此处在因子研究中同样也有非常出色的表现，不仅多空组合平均收益提升超过 30%，t 统计量更是超过 9，异常得显著。<br>\n</li>\n<li data-pid=\"39oTJK5S\">\n<b>深度学习算法普遍表现出色，总体上优于机器学习算法</b>，其中 DFN 表现最好，平均收益最高（2.78%），t 统计量同样也接近 9 。<br>\n</li>\n<li data-pid=\"H7HAxKoh\">\n<b>所有机器学习模型都高度显著，且显著优于经典的规模因子（SIZE)</b>。要知道，规模因子是众所周知的 A 股市场表现最好的单因子。由此可见机器学习模型的确尤其重要价值。<br>\n</li>\n</ul>\n<p data-pid=\"A5ipe_zJ\">此外，由于 A 股做空约束较多，多头组合的表现也应给予较多关注。结果也是类似的，深度学习和非线性机器学习算法，尤其是 DFN 和 XGBoost ，表现非常出色，此外，LSTM 也表现优异。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4cc1148c199f613bb623d8650e50231e_b.jpg\" data-size=\"normal\" data-rawwidth=\"496\" data-rawheight=\"632\" class=\"origin_image zh-lightbox-thumb\" width=\"496\" data-original=\"https://pic3.zhimg.com/v2-4cc1148c199f613bb623d8650e50231e_r.jpg\"><figcaption>表 2 ：不同模型表现概览. 数据来源：李斌, 邵新月和李玥阳（2019），表 1.</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"sKIaILes\">进一步的收益差分析表明，所有机器学习算法的绩效相对 OLS 都有显著提升，而 DFN 能显著超越线性机器学习算法。</p>\n<p data-pid=\"_wEF2NvK\">在此基础上，利用除 FC （因 FC 为单变量 OLS 的算术平均）之外的 11 类算法，构建集成预测：</p>\n<p data-pid=\"Lgb0nfDa\"><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bequation%7D+++++R_%7Bt%2Ci%7D%5E%7BEnsemble%7D+%3D+%5Cfrac+%7B1%7D+%7B11%7D+%5Csum%5Climits_%7Bj%3D1%7D%5E%7B11%7D+R_%7Bt%2Ci%7D%5E%7Bj%7D+++%5Cend%7Bequation%7D\" alt=\"\\begin{equation}     R_{t,i}^{Ensemble} = \\frac {1} {11} \\sum\\limits_{j=1}^{11} R_{t,i}^{j}   \\end{equation}\" eeimg=\"1\"></p>\n<p data-pid=\"bF7Cvwga\">再根据集成预测来构建因子。结果显示，在不同的窗宽下，多空组合和多头组合的表现都显著优于 OLS 下的表现。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9cc9fbcda45628a8ac733c6b3c0c653d_b.jpg\" data-size=\"normal\" data-rawwidth=\"611\" data-rawheight=\"558\" class=\"origin_image zh-lightbox-thumb\" width=\"611\" data-original=\"https://pic2.zhimg.com/v2-9cc9fbcda45628a8ac733c6b3c0c653d_r.jpg\"><figcaption>表 3 ：集成预测因子表现概览. 数据来源：李斌, 邵新月和李玥阳（2019），表 3 和 表 4.</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<h2>4. 因子重要性检验</h2>\n<p data-pid=\"5x_-qm-_\">在肯定了机器学习算法对于因子模型的重要性后，作者们并未就此止步。他们试图据此对不同异象的重要性进行探讨。具体而言，已知机器学习算法有良好表现，那么，一个因子越重要，理论上，它就应该被越多的机器学习模型选入最终的模型。因此，作者们统计了每个因子被不同模型选中的次数，来分析因子的相对重要性。</p>\n<p data-pid=\"kQXKMpty\">表 4 展示了单因子、线性和非线性算法中被选中次数较多的因子。可见，交易摩擦类因子非常多，成长、盈利和动量因子等也有上榜。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1442005883669994ee6b2a30a47895d6_b.jpg\" data-size=\"normal\" data-rawwidth=\"639\" data-rawheight=\"546\" class=\"origin_image zh-lightbox-thumb\" width=\"639\" data-original=\"https://pic3.zhimg.com/v2-1442005883669994ee6b2a30a47895d6_r.jpg\"><figcaption>表 4 ：重要因子列表. 数据来源：李斌, 邵新月和李玥阳（2019），表 6.</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"NC43uQh4\">表 5 则直接给出了不同类别因子被所有 14 个模型选中次数不低于 5 次的情况。与表 4 一致，交易摩擦类因子以 52% 的上榜率遥遥领先，流动性因子和动量因子表现也不错，价值因子则无一入围。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-57158fac598a22bfed907d7f61065e6d_b.jpg\" data-size=\"normal\" data-rawwidth=\"1015\" data-rawheight=\"283\" class=\"origin_image zh-lightbox-thumb\" width=\"1015\" data-original=\"https://pic2.zhimg.com/v2-57158fac598a22bfed907d7f61065e6d_r.jpg\"><figcaption>表 5 ：分类别重要因子统计表. 数据来源：李斌, 邵新月和李玥阳（2019），表 8.</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>5. 一点评论</h2>\n<p data-pid=\"N4J7YSqF\">首先，这篇文章的思路非常清晰，循着提出的几个主要问题而有序地推进研究，且实证工作毫无疑问也非常详尽而扎实（据说作者光 coding 前前后后就花了一年多时间），非常令人钦佩，值得好好学习。</p>\n<p data-pid=\"2n-LhVlJ\">其次，该文最后关于因子重要性的发现是非常有趣的，也有一定争议。大部分关于 A 股的研究都认可交易摩擦类因子在 A 股当仁不让的重要地位，但已有研究普遍认为 A 股价值因子显著而动量不显著，例如 Qiao (2018) 在研究了 231 个因子后指出，交易摩擦和价值因子在 A 股较为显著，其他因子则普遍不显著。这篇文章则发现基于机器学习的视角，价值因子不重要，动量反而更重要一些。这方面，未来值得更深入的讨论。</p>\n<p data-pid=\"paNjzJyR\">再者，作者们未进行动态参数选择，这固然降低了过度拟合的风险。但一直使用第一期选择的参数，似乎也不是非常恰当。也许某些线性算法在其他的参数下有着显著优异的表现且同样稳健，那么，本文的结论就要打问号了。</p>\n<p data-pid=\"Vc0VDv4n\">最后，这篇文章基于已有因子进行整合和筛选，固然有更好的表现，但其内部的 blackbox 仍然难以让投资者对其表现真正信服，因而在实际应用中会有不少障碍。这同此前我们梳理关于 trend factor 的研究时的疑虑是相同的。未来，也许可以更进一步，对投资组合的持仓进行深入分析和比较，基于持仓和收益率分解，将新算法下的业绩提升进行量化拆解，以让投资者更好地理解策略。</p>\n<h2>6. 结语</h2>\n<p data-pid=\"-cw4ifJt\">机器学习和深度学习的时代已然来临，因子研究也不可避免步入机器学习时代。虽然已有不少相关研究，但李斌, 邵新月和李玥阳（2019）这篇文章还是有不少新意，作者们第一次基于 A 股的大量异象，对机器学习和深度学习算法选择因子和预测股票收益的能力进行了深入的探究，并利用分析结果，反过来对因子的重要进行了考察。</p>\n<p data-pid=\"K3LqLVZn\">他们发现，机器学习模型优于单因子（包括 SIZE），而非线性模型优于线性模型，深度学习算法总体上优于机器学习算法。这表明，新的算法的确在某种程度上可以更好地挖掘因子与股票未来收益间的线性与非线性关系。</p>\n<p data-pid=\"xg7njMpG\">与此同时，他们的部分发现和观点也有待进一步探究。例如，他们发现 A 股市场上价值因子不重要，但已有研究和投资者的直观感受，都支持价值因子很显著。</p>\n<p data-pid=\"DCpDglpQ\">此外，更为重要的，<b>如何拆解机器学习和深度学习算法的 blackbox ，让投资者更好地理解算法超额收益的来源，从而更好地据此指导投资实践。也许，这也是这个机器学习新时代的核心课题</b>。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"zsMQQj5_\">全文完。</p>\n<p data-pid=\"qHxeNVqZ\"><b>本文仅为分享，不代表任何投资建议。文章图表来自于相应论文，仅为介绍之用，版权归原作者和期刊所有。</b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"Ztq0KZkG\">另：点击下述公众号文章文末的阅读原文，可跳转至期刊的文章链接，下载文章原文及附件。该文附件包含作者提供的相关数据。</p>\n<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/P2CZlNngFOsUKHUAr5FC7Q\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-8009d4546a55e63b2c27eb3756d78959_180x120.jpg\" data-image-width=\"867\" data-image-height=\"370\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【041】机器学习驱动的基本面量化投资</a><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"QbgKKRHQ\"><b>历史推荐：</b></p>\n<p data-pid=\"6A6Kvnip\">文章索引：</p>\n<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUxNzY0NjU3Mw%3D%3D%26mid%3D2247484177%26idx%3D1%26sn%3D974752cfa8284d111eb9a4affa067532%26chksm%3Df995b293cee23b85d1d3ba89dc58136f684efa0d51ac5e8a2c299ce036165d6f82f391331997%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-683cec67ef807dcb038909511ecf1e37_180x120.jpg\" data-image-width=\"635\" data-image-height=\"270\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">因子投资小册子</a><p data-pid=\"z-qpS01T\">因子体系：</p>\n<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUxNzY0NjU3Mw%3D%3D%26mid%3D2247484154%26idx%3D1%26sn%3De8bbc417df2e0dcfd01999b545eed3a5%26chksm%3Df995b378cee23a6ee62b176a6f14d81a6c3ce608717a46dcc5abe723404e00341ac06d329428%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-8e92d116e5742ccd9be3491097682782_180x120.jpg\" data-image-width=\"1000\" data-image-height=\"427\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">FF 和 Barra 体系，谁是你的菜？</a><p data-pid=\"Nm5y6HJk\">实践方法论：</p>\n<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/574CqLn3eEYqWsy4lCrCow\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-f5a5a8956bc4b4d0dfc0972de69856fe_180x120.jpg\" data-image-width=\"1280\" data-image-height=\"545\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【037】资产配置与因子配置：可以团圆吗？</a><p data-pid=\"2bFcD8Aa\">投资因子：</p>\n<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUxNzY0NjU3Mw%3D%3D%26mid%3D2247484082%26idx%3D1%26sn%3D5e928ca55b3f594af640783f728bbfdf%26chksm%3Df995b330cee23a2662956624514e3baae8490658650302bb6727c4962f4fc12f996d1a63d605%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-c23d38f108a512739a88fb2c06943ffe_180x120.jpg\" data-image-width=\"1280\" data-image-height=\"545\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【031】投资效应：Factor War 前传</a><p data-pid=\"ZWrkdgWx\">研究方法论：</p>\n<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUxNzY0NjU3Mw%3D%3D%26mid%3D2247484028%26idx%3D1%26sn%3D6f23422ddf7c0e75173397beb7189a29%26chksm%3Df995b3fecee23ae8d07889c467a5a592f6c805447e560e8a5dfd62422e17161cabe723fd7e7e%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-3957928d9240707d682ee2a2f5f11c1b_180x120.jpg\" data-image-width=\"1280\" data-image-height=\"543\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【027】追寻因子的足迹：分类、构造与检验</a><p data-pid=\"mXbTJV2Q\">搞事情小组：</p>\n<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUxNzY0NjU3Mw%3D%3D%26mid%3D2247484138%26idx%3D2%26sn%3D50214e7728c99d7ee5641a5b670a70a2%26chksm%3Df995b368cee23a7e043a1e8059199b041f26c02b09c42750c1ff751d0d09dcc396145677b8e7%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-0e4372849323c0b8afd2360d57a1b17b_180x120.jpg\" data-image-width=\"1010\" data-image-height=\"431\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">搞事情深度研究| 异质波动率之谜</a><p data-pid=\"K-rDAseu\">实证研究：</p>\n<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUxNzY0NjU3Mw%3D%3D%26mid%3D2247484000%26idx%3D1%26sn%3D9017c6526ba8754d35cd436ac18cd89d%26chksm%3Df995b3e2cee23af4c3a7d810052ba5f938941f3fb750de86161f0aa5eb78712951d74abc7564%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-a0b4bd562ca104e4141033bb1806998d_180x120.jpg\" data-image-width=\"1200\" data-image-height=\"510\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【026】低 Beta 在 A 股：证券市场线是平坦的吗？</a><p data-pid=\"fMuhv5fe\">技术因子：</p>\n<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/AKrS-Qyait1UJ0gctS9x0A\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-8cbf1c8649151b1f9716f01ddc96c38c_180x120.jpg\" data-image-width=\"1280\" data-image-height=\"546\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【040】Trend Factor in China ：中国版定价模型？</a><p data-pid=\"yJVp95gL\">低风险因子：</p>\n<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUxNzY0NjU3Mw%3D%3D%26mid%3D2247483884%26idx%3D1%26sn%3D9effd3f5b77c9b5479ae0db1d7b8f80d%26chksm%3Df995b06ecee2397806a201d29314f737349ef11b0e30deb925a60b15d0c5648eee55625953a2%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-f9b311eaafec7b0d4321deed9126e1fe_180x120.jpg\" data-image-width=\"1024\" data-image-height=\"436\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【018】低风险异象靠谱吗？解释与批判</a><p data-pid=\"euDRVkJL\">动量因子：</p>\n<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUxNzY0NjU3Mw%3D%3D%26mid%3D2247483796%26idx%3D1%26sn%3Df657141b69c2f4d8b319ac8f41ca45b5%26chksm%3Df995b016cee239001303e7e7bdf569c4d50ae8cf4b98f095f08a9308dfc399aeaee928502cb3%26scene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-4408df1004f7861fdbdf13d6e0205980_180x120.jpg\" data-image-width=\"1280\" data-image-height=\"543\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【010】横截面动量那些事</a><p data-pid=\"W2Lyy41X\">基本面动量因子：</p>\n<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/1LafMHLQdbdQsB35TkNoDw\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-3eebaec4e5742067173ff44a91fdef8e_180x120.jpg\" data-image-width=\"1040\" data-image-height=\"443\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【038】不止于价格动量：基本面动量也很酷</a><hr>\n<p data-pid=\"6zvQX7U4\">References:</p>\n<ul>\n<li data-pid=\"rKrSfdpD\"> Arnott, Rob, Campbell R. Harvey, and Harry Markowitz. \"A Backtesting Protocol in the Era of Machine Learning.\" <i>Journal of Financial Data Science</i> 1.1 (2019): 64-74.<br>\n</li>\n<li data-pid=\"jEgFAGLN\"> Bali, Turan G., Robert F. Engle, and Scott Murray. \"Empirical Asset Pricing: The Cross Section of Stock Returns.\" John Wiley &amp; Sons, 2016.<br>\n</li>\n<li data-pid=\"m9L5KdSh\"> De Prado, Marcos Lopez. \"Advances in Financial Machine Learning.\" John Wiley &amp; Sons, 2018.<br>\n</li>\n<li data-pid=\"anttIoXO\"> De Prado, Marcos Lopez. \"Beyond Econometrics: A Roadmap Towards Financial Machine Learning.\" Available at SSRN 3365282 (2018).<br>\n</li>\n<li data-pid=\"UaiRcIzk\"> De Prado, Marcos Lopez. \"Ten Applications of Financial Machine Learning.\" Available at SSRN 3365271 (2018).<br>\n</li>\n<li data-pid=\"jrZrc1W5\"> De Prado, Marcos Lopez. \"The 10 Reasons Most Machine Learning Funds Fail.\" <i>Journal of Portfolio Management</i> 44.6 (2018): 120-133.<br>\n</li>\n<li data-pid=\"8BjWDpOS\"> Han, Yufeng, Ai He, David E. Rapach, and Guofu Zhou. \"What Firm Characteristics Drive US Stock Returns?.\" Available at SSRN 3185335 (2018).<br>\n</li>\n<li data-pid=\"O_XIu7Ji\"> Kong, Aiguo, David E. Rapach, Jack K. Strauss, and Guofu Zhou. \"Predicting Market Components Out of Sample: Asset Allocation Implications.\" <i>Journal of Portfolio Management</i> 37.4 (2011): 29-41.<br>\n</li>\n<li data-pid=\"IlUY1mQk\"> Qiao, Fang. \"Replicating Anomalies in China.\" Available at SSRN 3263990 (2018).<br>\n</li>\n<li data-pid=\"pKcC8Mz9\"> Rapach, David, and Guofu Zhou. \"Forecasting Stock Returns.\" <i>Handbook of Economic Forecasting</i>. Vol. 2. Elsevier, 2013. 328-383.<br>\n</li>\n<li data-pid=\"ZjzRYJrX\"> Rapach, David E., Jack K. Strauss, and Guofu Zhou. \"Out-of-sample Equity Premium Prediction: Combination Forecasts and Links to the Real Economy.\" <i>Review of Financial Studies</i> 23.2 (2010): 821-862.<br>\n</li>\n<li data-pid=\"G-RH8aQV\"> 李斌, 邵新月 和 李玥阳. \"机器学习驱动的基本面量化投资研究.\" 中国工业经济 8 (2019): 61-79.<br>\n</li>\n</ul>\n<p data-pid=\"H04IpeJO\">题图：Abstract Wallpaper, from www.pexels.com.</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/llanglli?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">llanglli</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/88233451?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"01-经济思想的源与流-经济哲学的主要争论","date":"2022-05-23 11:38:30","description":"\n<p data-pid=\"30qz0Psl\">我想要梳理一下经济思想的流变。</p>\n<p data-pid=\"PcmKmk3u\">为了完成这个学习计划</p>\n<p data-pid=\"ApJNlpNw\">我将指定以下几本书自己阅读。</p>\n<p data-pid=\"GIwhvJT4\"><b>经济思想</b>：</p>\n<blockquote data-pid=\"YkesTNUM\">Stanley Brue, Randy Grant.<i>The Evolution of Economic Thought.</i> <br>Davis. <i>Companion to the History of Economic Thought</i>.</blockquote>\n<p data-pid=\"ursp-eIw\"><b>经济哲学</b>：</p>\n<blockquote data-pid=\"8MTghLDe\">Alexander Rosenberg. <i>Philosophy of Social Science.</i><br>Barry Hindess. <i>Philosophy and Methodology in the Social Sciences.</i>\n</blockquote>\n<a href=\"https://link.zhihu.com/?target=https%3A//plato.stanford.edu/entries/economics/%23Bib\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Philosophy of Economics</a><p data-pid=\"KWxTuA3i\">本次学习这自然会涉及到各个经济学派的思想内容。</p>\n<p data-pid=\"RveXjhYR\"> 什么是经济学派？<b>经济学流派或经济思想流派是对人类社会基本经济 问题或某个时期重要的经济问题持有相对一致的立场、观点和政策主张的经济学家所形成的松散团体</b>，或者是指一些经济学家在追随某个先驱者和理论领袖的基础上发展出来的一种经济学理论体系。 </p>\n<p data-pid=\"4tOGqWbs\">为什么要研究经济思想起源和流变？</p>\n<p data-pid=\"u-AWA6-F\"><b>它们的历史是依赖象征体系和个人的记忆而维持着的社会共同经验。这样说来，每个现代学派的“当前”，不但包括他本身“过去”的投影，而且是整个整个经济思想的“过去”的投影。</b></p>\n<p data-pid=\"DDZDOgvP\">接下来想说说方法论的问题。</p>\n<p data-pid=\"fUPPiNgX\">尽管不同学派对于经济有着自己的方法论和认知论，但是都会在方法论上涉及到这7个问题。</p>\n<p data-pid=\"s-Bynrm6\">（Although the different branches and schools of economics raise a wide variety of epistemological and ontological issues concerning economics, seven problems have been central to methodological reflection (in this philosophical sense) concerning economics.）</p>\n<hr>\n<h2><b>目录</b></h2>\n<p data-pid=\"h3iZ3oNR\"><b>1.实证性vs规范性</b></p>\n<p data-pid=\"hpTgDY5C\"><b>2.理由与原因</b></p>\n<p data-pid=\"VWOKt621\"><b>3.社会科学自然主义</b></p>\n<p data-pid=\"jMxRKo-j\"><b>4.抽象化，观念化与CP问题</b></p>\n<p data-pid=\"ugaCUGU0\"><b>5.因果关系之于实证经济学和计量经济学</b></p>\n<p data-pid=\"Z6sRPg1X\"><b>6.经济学的结构与策略：范式与研究纲领</b></p>\n<p data-pid=\"33uV4A7J\"><b>7.模型论</b></p>\n<hr>\n<h2>1.实证性vs规范性（Positive versus normative economics）</h2>\n<p data-pid=\"cau__nQC\">首先引用两位知友的回答</p>\n<p data-pid=\"f_UwWVmW\"><a class=\"member_mention\" href=\"https://www.zhihu.com/people/497f941a42c565b3787f2cec5d3f3572\" data-hash=\"497f941a42c565b3787f2cec5d3f3572\" data-hovercard=\"p$b$497f941a42c565b3787f2cec5d3f3572\">@文石</a> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/61aec83cec749621fd3736854ba8e2f0\" data-hash=\"61aec83cec749621fd3736854ba8e2f0\" data-hovercard=\"p$b$61aec83cec749621fd3736854ba8e2f0\">@冯晗</a> </p>\n<a href=\"https://www.zhihu.com/question/29612395/answer/45619841\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/169bc7f56632204203c92cdf16a24c3a_bh.jpg\" data-image-width=\"627\" data-image-height=\"549\" class=\"internal\">什么是经济学的「规范分析」？</a><p class=\"ztext-empty-paragraph\"><br></p>\n<a href=\"https://www.zhihu.com/question/22574460/answer/21832680\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">实证分析（Positive Analysis）在经济学中的地位是怎样的？</a><p class=\"ztext-empty-paragraph\"><br></p>\n<a href=\"https://www.zhihu.com/question/22574460/answer/21845954\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">实证分析（Positive Analysis）在经济学中的地位是怎样的？</a><p class=\"ztext-empty-paragraph\"><br></p>\n<a href=\"https://www.zhihu.com/question/30436087/answer/152875022\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">为什么现代西方经济学抛弃了劳动价值论？</a><p data-pid=\"YsOvT4bh\">经济学作为社会“科学”，就像德尔干提出的研究social fact一样，经济学也应该是研究fact的实证科学。但是经济学多少会涉及到规范性的问题，比如经济学也研究价值。但是也有人认为经济学不研究价值，它是帮助决策者选择实现目标的手段，但它并应该作为某种价值观念不影响agent如何去做选择。</p>\n<p data-pid=\"dejDEYl4\">尽管许多经济学家不愿意将规范性问题视为经济学帝国的一部分，规范性经济学现在自成一家形成了一个令人印象深刻的理论和文献体系。</p>\n<p data-pid=\"HDJCft4p\">20世纪上半叶，大多数主要的经济学家（庀古、希克斯、卡尔多、萨缪尔森、阿罗等）将大量的研究工作投入到规范性问题上的研究上，特别是公共政策评价标准的定义上。但是对于规范性命题在经济学中的地位一直都很模糊，经济学研究的主题和它与公共政策咨询的紧密联系，使得经济学与价值判断无法分割。值得一提的是，许多规范经济学的结果都是主要具有分析功能的数学化定理，赋予他们一个规范性的概念可能是有争议的，因为他们在阐明伦理价值上最有用，但是并不是它的理论本身说明这些价值必须被认知</p>\n<p data-pid=\"1gOFwaGm\">规范经济学与政治哲学之间存在着诸多相互影响。特别是，罗尔斯的差异原则对再分配政策关注最大化原则进行经济分析有重大影响。这是把处境最坏的人放在优先地位来考虑，而不是仅仅是简单功利主义的加总。</p>\n<p data-pid=\"6sMOTzAY\">比如罗尔斯提出差别原则和纳什议价博弈就有千丝万缕的联系。详见 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/3f80935cc58187fa3efe67d4cc16aede\" data-hash=\"3f80935cc58187fa3efe67d4cc16aede\" data-hovercard=\"p$b$3f80935cc58187fa3efe67d4cc16aede\">@米哈伊</a> 老师这个答案</p>\n<p data-pid=\"SfUNi8Ur\">在《作为公平的正义》中，罗尔斯在阐释差别原则时提到的“纳什点”和“边沁点”是什么意思？ - 米哈伊的回答 - 知乎 <a href=\"https://www.zhihu.com/question/67416858/answer/252607160\" class=\"internal\"><span class=\"invisible\">https://www.</span><span class=\"visible\">zhihu.com/question/6741</span><span class=\"invisible\">6858/answer/252607160</span><span class=\"ellipsis\"></span></a></p>\n<p data-pid=\"y-UKN7Eu\">反对没有规范性问题，原因有大概三个层面：</p>\n<p data-pid=\"6i_jblhJ\">1）经济活动和任何人类活动一样，受到价值观念的支配，这就涉及到每个大经济学家都需要构建自己的value theory。每个开山立派的大经济学派大概都对人性和指导人们如何选择的价值观有自己的洞见，究竟什么是理性，人性到底是如何的，什么是有限理性？亚当斯密为什么要写到的情操论？</p>\n<p data-pid=\"OxwMsYdn\">2）经济学家必须为决策阐明或科学解释目标和约束条件（Machlup 1969b）。可目标因何处而来呢？我们在宏观经济学探讨政策制定方向的时候究竟应该以什么为目标？是否应该在保护人的自由、平等权利和理想的条件下去追求财富和经济的增长，资本深化和资本广化的问题。agent-based model是有意义的吗？</p>\n<p data-pid=\"BA8JfS8e\">3）人的利己主义到底如何影响了人的经济行为？为什么会产生外部性？为什么会产生寻租问题？</p>\n<p data-pid=\"YIXiNNuH\">每个社会学理论都需要想清楚的最核心的两个问题就是<b>Problem of order</b>和<b>Problem of action</b>: <b>社会秩序的根基是什么？人类行为的根基是什么？</b>经济学作为社会科学，是否也要思考，<b>经济社会秩序的根基和机制是什么？人们经济行为根基是什么？</b></p>\n<p data-pid=\"Ws4x4J6e\">所以经济学是既涉及到实证性又涉及到规范性的问题。</p>\n<h2>2.理由与原因（Reasons versus causes）</h2>\n<p data-pid=\"sBzyqrMz\">我们在做科学解释（scientific explanation）的时候必定要涉及到理由与原因的解释，同时经济学还涉及到预测的问题，经济学家需要去做预测，比如宏观经济学的DSGE模型在考虑我们政策决定的跨期影响是什么？计量经济学运用回归分析，统计推断，识别变量与变量的依存关系，识别因果问题。这也是社会学常在定量分析中所做的事情。就像科学解释的经典模型Deductive-Nomological (<i>DN</i>) model所说，每个经济学派在构建解释的时候是如何解释项中普遍成立的定律，我们是否能称之为经济规律。探讨经济学现象产生的背后的机制又是什么？</p>\n<p data-pid=\"CGxWjXZA\">经济学家通常关心的是个人选择的总体结果，也有个人的行为，理论上提供了个人选择的因果解释和他们选择的原因，系统建模一个人在做选择时候的：理由、动机、解释。</p>\n<p data-pid=\"EhRgYrbG\">偏好的本质是什么？偏好和欲望什么关系？偏好是否影响了选择？什么是偏好关系？什么是显示偏好公理？应该依据什么建模人的选择结构？人的某些信念是否影响和经济现象（流动偏好根源是什么）</p>\n<p data-pid=\"dLd8KLbD\">关于agent偏好是否叠加的问题，在传统经济学教育中根据经典帕累托最优原则，个人偏好的aggregation就是社会偏好。也就是整体主义和个人主义不矛盾。  这种总效用效用计算问题，我觉得和经典utilitarianism是一样的。当然我仅指aggregate原则，前者更强调不使得任何一个变坏，后者更强调敢于牺牲小我。</p>\n<p data-pid=\"-LKkztDJ\">Kahneman认为：行为人的行动受到直觉和推理两个系统的影响。人眼界有限，个人仅仅由狭隘的自我关注所驱动。人的认知能力有限，以及决策喜欢依赖直觉。Expected Utility Theory中von Neumann-Morgenstern utility function失去保序性。 </p>\n<p data-pid=\"-F3tFa8k\">许多哲学家质疑人类行为的解释是否可以作因果解释(von Wright 1971, Winch 1958)。Donald Davidson在他的作品\"Actions, Reasons, and Causes,\" 中提出的概念，比如一个行为A，它由一个本源理由-primary reason所解释，而这个理由包括了行动者对于特定行为基于一个目标G 的pro-attitude以及一个instrumental belief 做出行为A可以达到目标G。</p>\n<h2>3.社会科学自然主义（Social scientific naturalism）</h2>\n<p data-pid=\"6YoEIOs8\">在所有的社会科学中，经济学与自然科学最为相似。经济理论已经公理化。</p>\n<p data-pid=\"DrF0QO8w\">可是</p>\n<p data-pid=\"kdeAYM8B\">1）自然科学和社会科学的理论和解释的结构或概念是否有根本的区别？</p>\n<p data-pid=\"pe-ZVA8D\">2）哲学家和经济学家认为，除了自然科学的预测性和解释性目标之外，社会科学的目标应该是为我们提供理解。就像马克思韦伯所说的社会科学应该“从内部”为我们提供一种理解，即我们应该能够同情代理人的反应，并找到“可以理解”的结果。社会科学的首要目标就是对个人的社会行动进行<b>解释性的理解</b>（erklärendes Verstehen）。</p>\n<p data-pid=\"k7IzkKyX\">就像新教伦理和资本主义之间的“选择亲和性”（ Wahlverwandtschaft/elective affinity，或“内在亲和性”）的关系，不是简单的因果关系。</p>\n<p data-pid=\"MJqvOSHe\">韦伯受到当时<b>新康德主义</b>的影响，认为人文科学和自然科学存在本质上的差异，因此自然科学的方法无法贯彻于社会科学领域。经济学也是如此吗？</p>\n<p data-pid=\"Lfpf8so6\">经济学应该坚持：<b>methodological individualism？methodological holism？</b></p>\n<p data-pid=\"5H-LNGXg\"><b>在社会选择中个人利益和集体利益矛盾吗？</b>经济学有经典的Kaplow-Shavell定理：<b>如果一个社会的评价标准里，除了每个人的效用之外，还包含其它东西，那么，一定存在这么一个情形——两个状况A和B，社会中每个人都认为在A这个状况下效用更高，但社会的评价标准认为B更好</b>。</p>\n<p data-pid=\"1Cdjr6aM\">见 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/1d1c9784aab4f00964215f435e479924\" data-hash=\"1d1c9784aab4f00964215f435e479924\" data-hovercard=\"p$b$1d1c9784aab4f00964215f435e479924\">@Manolo</a> 回答</p>\n<p data-pid=\"84BwYfSp\">3）由于人类选择（或自由意志）的重要性，社会现象是否太不规则，无法在法律和理论框架内加以捕捉？鉴于人类的自由意志，也许人类的行为在本质上是不可预测的。经济学家试图预测是否是徒劳？</p>\n<p data-pid=\"TrzlVnHC\">4）还原论问题（Scientific Reduction），宏观经济学是否需要微观基础，有一个最直观的感受是Philips 曲线了。计量经济学家发现失业率与通货膨胀率 之间有负的相关关系。于是政府可以似乎可以利用这种统计上的关系，通过高通货膨胀率来 压低失业率。但是一旦政府真正实行这样的政策时，它会改变居民的行为，使 Philips 曲线 不再成立。从而也就使高通胀的政策无效。实际的结果正是如此，高通胀的政策最后带来的不是低失业，而是滞胀。</p>\n<p data-pid=\"TzPW--Zn\">我们会探讨到卢卡斯批判问题、</p>\n<p data-pid=\"8isJz5sR\">“The Philosophy of Economics: An Anthology”中的一个章节“What Macroeconomics Needs Microfoundations”中的，我看陈老师 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/efdd5ebd2eafbbe8570f81078908cc34\" data-hash=\"efdd5ebd2eafbbe8570f81078908cc34\" data-hovercard=\"p$b$efdd5ebd2eafbbe8570f81078908cc34\">@陈茁</a> 推荐过。</p>\n<p data-pid=\"fBu5I9pe\">为什么宏观经济学强调微观基础？ - chen Victory的回答 - 知乎 <a href=\"https://www.zhihu.com/question/40095872/answer/84861536\" class=\"internal\"><span class=\"invisible\">https://www.</span><span class=\"visible\">zhihu.com/question/4009</span><span class=\"invisible\">5872/answer/84861536</span><span class=\"ellipsis\"></span></a></p>\n<h2>4.抽象化，观念化与CP问题（Abstraction, idealization, and <i>ceteris paribus</i> clauses in economics）</h2>\n<p data-pid=\"2Mc_bZRg\">比如完全理性人假设，完全竞争市场假设，完全信息对称，商品是无限可分割的。这些过于观念化抽象的理论在实证中是否真正的有解释力？</p>\n<p data-pid=\"s4_upihz\">Other schools of economics may not employ idealizations that are this extreme, but there is no way to do economics if one is not willing to simplify drastically and abstract from many complications. How much simplification, idealization, abstraction or “isolation” (Mäki 2006) is legitimate?</p>\n<p data-pid=\"0XFStDdd\">模型是事实的简化，但是现象后的系统过于复杂，过度的简化噪声和外生干扰因素的模型真的有意义吗？</p>\n<h2><b>5.因果关系与实证经济学和计量经济学（Causation in economics and econometrics）</b></h2>\n<p data-pid=\"M95CRx-g\">经济学中许多重要的原则都是因果关系。例如，需求定律认为，价格上涨将减少需求量，但这个因果又受到吉芬商品商品这样的例外干扰。计量经济学回归分析推断因果问题。</p>\n<p data-pid=\"Ymz7fDx6\">在20世纪30年代之前，经济学家们普遍愿意明确地、字面地使用因果语言，尽管有人担心，对经济变化的因果分析与对均衡状态的“比较静态”处理之间可能存在冲突。</p>\n<p data-pid=\"RsDhjSpL\">在20世纪30年代和40年代的反形而上学的知识环境中（逻辑实证主义至少），对因果关系的任何提及都变得可疑，经济学家通常假装回避因果概念。其结果是，他们不再仔细思考他们继续隐式引用的因果概念（Hausman 1983, 1990, Helm 1984, Runde 1998)。</p>\n<p data-pid=\"G71mARpl\">例如，经济学家们并没有根据价格变化对需求量的因果关系来制定需求规律，而是试图将自己局限于讨论价格和需求量之间的数学函数。而不是直接说变量之间是因果关系。</p>\n<p data-pid=\"UFm-lrh4\">kevin hoover在其《宏观经济学因果关系》（2001b）一书中提出了调查大规模因果问题的可行方法，例如货币供应量（m）的变化是导致通货膨胀率p的变化，还是适应以其他方式引起的p的变化。</p>\n<p data-pid=\"Hu2w_fu2\">一种相对安全的确定因果关系的方法是通过随机对照实验。如果实验者将受试者随机分为实验组和对照组，并且只改变一个因素，那么，除非运气不好，这两个组以某种未知的方式不同，考虑到对照组和治疗组的共同特点，结果的变化应该是由于一个因素。实际上，在数量变量的情况下，可以计算平均因果效应（Deaton 2010）。</p>\n<p data-pid=\"3aaYA08t\">计量经济学者对因果关系概念的哲学研究热重燃做出了重要贡献。见 Geweke (1982), Granger (1969, 1980), Cartwright (1989), Sims (1977), Zellner and Aigner (1988), Pearl (2000), Spirtes, Glymour and Scheines (2001).</p>\n<p data-pid=\"CqouosEW\">尤其是在处理模型内生性问题上，工具变量这个思想的发明，格外令人欣赏，这种思想非常精髓。</p>\n<p data-pid=\"d2m3_E8z\">由知识论上对于趋势律与使用其他状况不变条件的讨论我们可以进一步探究本体论的议题：理论或模型的真实性为何？广义的科学实在论 (scientific realism) 要求设定的理论存有物真的存在、科学理论提供真实的说明。但是若理论或模型中使用趋势陈述与其他状况条件，则表示没有完全包含真实世界的所有因素，与真实世界有所差距。换言之，模型将非主要因素隔绝于外，是一种与真实世界不同的孤立世界(isolation)。若理论模型或所描述的是经过简化、抽象、或理想化的孤立世界，它是否是真实的？ 大多数经济学家的看法以诺贝尔经济学奖得主傅利曼 (Milton Friedman) 的〈实证经济学方法论〉 (Friedman 1953) 为代表。该文在 1980 年代被称为是「每一位现代经济学家都曾经读过的方法论论文」，隐含地认为这篇论文的必读性。虽然现今大多数经济学者或只闻其名，或以讹传讹地引用，但该文所主张经济学作为一种实证科学 (positive science)，应忽略理论的假设的真实性，并以预测能力作为理论的判准。〈实证经济学方法论〉为许多学者接受为经济学研究方法的主流观点，其中两个最重要的论点是经济理论的实证面与理论假设的真值问题。</p>\n<p data-pid=\"NmqXhont\">　　〈实证经济学方法论〉由经济学的「规范」与「实证」面的区别谈起，重申经济分析应以事实问题为导向，不应涉及价值判断。接着他提出实证科学的「终极目标」(ultimate goal) 为「提出理论或假说以对尚未观察到的现象提出有意义的（也就是非『不证自明』的）预测。」 (p.7) 而傅利曼接着以带有逻辑实证论的观点，认为理论包含两个部分，一为无实质内涵但助于推理的「语言」，另一为关于复杂现象的实质假说 (substantive hypothesis)。「语言」的部分可作为经验事物的档案系统 (filing system) 以利分类，实质假设则代表理论证成的部分。傅利曼认为检证理论是以其预测力为准，只有事实证据可以据之判别理论之对错，与理论的接受和拒绝，也就是认为检证假说的「唯一」方式为经验与预测的比较。在此傅利曼的说法带有的意涵，但他接续以 Popper 否证论的观点表示事实从不证明假说，仅能反证假说 (pp. 8-9)。</p>\n<p data-pid=\"dloWJ3DF\">　　傅利曼主张假说的检证与其假设的真值无关，完全取决于预测能力，造就他的方法论被评论者称为相似于哲学上的「工具主义」(instrumentalism)。傅利曼认为理论中的假设可以是不真实的，甚至强烈地表示「理论越显着，其假设越不真实」(p.14)，「一假说的假设必然在描述上为假 (descriptive false)」。在此必须理解傅利曼撰写此论文的目的在于替马歇尔的部分均衡分析、完全竞争厂商假设作辩解。时值不完全竞争学说于 1950 年代兴起，欲替代被批评为不切实际、不符事实的完全竞争厂商假设，故傅利曼欲在方法论上的制高点上以攻代守地维护理性经济人、完全竞争厂商等抽象假设的合理性。他的策略与哲学家 Hans Vaihinger (1924) 的「拟似」或「彷彿」(as if) 方法论几乎相似，但更强调在理论中使用「<i>A</i> 拟似 <i>B</i>」(<i>A</i> as if <i>B</i>) 的语句以虚构的<i>B</i>取代实际的事物 <i>A</i>，忽略 <i>A </i> 是否真为 <i>B</i> 的问题，并且以理论的检证结果支持使用「<i>A</i> 拟似 <i>B</i>」语句的合理性。傅利曼提出数例，如「在高处同时释放的不同质量的物体会『彷彿』处在真空状态下同时落地」、「树木的树叶在日照较多处比较茂密『彷彿』是树叶追求阳光极大化的结果」、「职业撞球选手轻易地将球击入球带『彷彿』是他熟知物理运动定律并且计算得出击球的力道与角度」。自然在经济分析中假设人的行为彷彿是理性地追求效用极大，厂商的行为有如是完全竞争厂商，并无不妥之处。理论假设的真实性与理论的合理性无关，甚至理论假设必然为伪，不真实的假设使得理论变得简单明瞭，所以在只考量理论预测的准确性下，当理论的预测力相似时，理论越简单，其有效性越强。</p>\n<p data-pid=\"0JuJ5XQx\">　　综观傅利曼的实证经济学方法论，他主张理论为预测事实的工具，故预测能力为检定理论的标准。至于因果关係或科学说明的追求，则非实证经济学方法论的重点。对傅利曼而言，追求阳光极大化的树叶当然不是真实树叶密度现象的合理解释，遑论它是否提供因果说明。</p>\n<p data-pid=\"3E4lS7Fo\">　　傅利曼的实证经济学方法论在经济学界并非没有批评，而且自该文发表以来便有许多着名经济与哲学学者表示不同意见，特别是反对经济理论假设的不真实性的看法，认为假设虽然是抽象化和理想化，但是依然须保持某种程度的真实性，并非可以任意设置。不真实的假设与由抽象事实所得到的理想化假设有本质上的不同 (Simon 1963)，若经济学家可任意地作假设，他首先所要回答的问题是在该假设在起始时如何得到，若该假设是先验的，他是否有事实的基础，还是凭空想像。若理论的假设是虚假的，当理论的预测不正确，不符合经验资料时，要如何验证与修改理论 (Machlup, 1955; Koopmans, 1957; Klappholz &amp; Agassi, 1959; Rotwein, 1959; Nagel, 1963; Samuelson, 1963)。更甚者，科学的重点之一是在于提出因果说明，虽说学者已指出傅利曼本人的货币理论与消费理论研究中有不少因果研究 (Chao, 2003; Hoover, 2009)，故学者将他诠释为实作上的「因果实在主义者」(causal realist) (Hoover, 2009)，但实证经济学方法论既不关心因果关係，也不在乎科学说明，而且对于上述的方法论问题并没有合理的解答。</p>\n<p data-pid=\"JmSXjlw4\">　　但是值得注意的是，即便是抱持实证经济学方法论的工具主义立场，并不表示经济学家是全然的反实在论者。<a href=\"https://link.zhihu.com/?target=http%3A//mephilosophy.ccu.edu.tw/entry.php%3Fentry_name%3D%25E7%25BB%258F%25E6%25B5%258E%25E7%2590%2586%25E8%25AE%25BA%25E4%25B8%258E%25E6%25A8%25A1%25E5%259E%258B%23_ftn8\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[8]</a> 经济哲学中的关于实在论的讨论在 1990 年代至 21 世纪初期的时期相当的热门（如 Usali Mäki 的一系列着作），但是皆体认到经济学家至少不否认经济现象与问题是真实存在的实在论立场，这似乎表示经济学家一方面为反理论实在论者（基于虚假的假设的理论是不真实的），另一方面为经济事物的实在论者（欲分析的经济现象的确存在）。不过由于经济理论与现象都是透过模型操作而为之，由模型实作来讨论经济绝佳的实在论也许更为恰当。</p>\n<p data-pid=\"xsNhK0on\">理论与模型的探讨，围绕在科学理论结构的讨论下时，在于「理论——模型——真实世界」三者之间的关係，由文献和实作观之，三者的关係并非是单向的。Morgan and Morrison (1999) 的论文集对于对物理学与经济学模型的研究极具代表性，他们并指出「理论——模型——真实世界」三者之间的关係是多元的，其中科学模型具有其自主性 (autonomy)，表现于其建构 (construction) 的方式、与表征、检证、说明、预测、建构、启发、推理等不同的作用 (functioning)、并且可从模型中学习 (learning)，表示模型并非依附于理论或真实世界，而是积极地作为探究理论与世界的推理工具。就经济模型而言，Morgan (2013) 的钜着以经济学发展史中的众多实例详细地提供经济模型的哲学意涵，说明在经济学的实作中以模型作为推理工具的多重面貌。在此我们就部分「自主模型」的的重要议题稍做讨论。</p>\n<p data-pid=\"IC44z-0w\">就理论模型而言，在哲学讨论中有两种观点。Hausman (1992) 认为模型的作用为透过模型分析去探讨理论的特徵，也就是在给定的前提假设下使用数学或逻辑运算来探究会得到何种结果。这是演绎式的「概念探索」(conceptual exploration)，这个「模型世界」表徵的是理论的经济世界， 不需要求模型与真实世界有任何连结。另一观点是 Sudgen (2000, 2009) 认为理论模型是「可信的世界」(credible world)，与真实世界适切的连结。他的模型配适的的归纳逻辑可以如下表示：若证据 <i>ei</i>  与模型 <i>M</i> 的某一因素 <i>mi</i>  相符，则我们可归纳得出 <i>M</i> 就此层面真实地表徵了真实世界，故我们可以推论至模型与现实世界具有相同的起因结构。</p>\n<p data-pid=\"NC3e7OLv\"><b>「概念探索」和「可信世界」</b>恰分别代表 Morgan (2013) 所细緻区分的两种不同层次模型探究：探究模型以了解模型世界，和探究模型以了解真实世界。问题是经济学家是活在模型世界，或是活在真实世界？若是仅专注在概念探索则迴避不了与真实世界对应的问题，但是就算是「可信的世界」是为真实世界提出说明，该学说不仅在方法上不能避免归纳法的谬误：为何模型与现象相符就可以认为理论模型为真（虽然 Sugden 使用「可信度」一词，避免本体论的真值讨论），而且不能说服实证学者为何不用资料分析便能到与经验世界配适的结果：如果理论模型是可性的世界，那么实证模型岂非是更可信的世界？要避免这些方法论的谬误，理论经济学家必须建立「表徵定理」(representation theorems) 来证明表徵是可行的 (Chao 2014)。建立表徵定理在哲学与科学实作上都已经有相当的研究，如 Suppes 早期 (Suppes, 1960, 1962, 1967)、晚期 (Suppes, 2002) 的研究与 van Fraassen (2008) 近期的哲学论述，和 Suppes 等人在心理测量学说的贡献 (Krantz et al., 1971; Suppes et al., 1989; Luce et al., 1990)。</p>\n<p data-pid=\"m7gEnDFn\">　　实证模型虽然为作为处理资料的工具，但是在模型选择 (model selection)（在众多的模型中选择最适合的模型）和模型认定 (model identification)（确定模型的结构）也会受对理论的考量影响，这些经济学者的考量混合本体论和知识论的考虑，如傅利曼的实证研究代表二十世纪初期「NBER 取向」，指私人机构美国国家经济研究局 (National Bureau of Economic Research; NBER) 学者的资料优先的计量模型化取向，不承认先验经济理论的真实性，故经济理论无助于模型选择和认定。相反的，同时期在芝加哥大学的 Cowles 委员会 (Cowles Commission，现改名为 Cowles Foundation 并为在耶鲁大学) 所赞助的计量经济研究取向明显地以两个理论为模型的基石：凯因斯主义的总体理论与瓦拉斯式的一般均衡分析 (Walrasian general equilibrium)。他们相信凯因斯理论的真实性，亦就是理论真实地描绘了实际经济世界的运作。相反地，NBER 取向所代表的经验主义观点认为Cowles 取向根据理论所建构的模型不具有经验上的支持，是不可信的。这种反真实主义的经验主义态度同时也反映在现在的主流的应用个体研究中（如第一节所提到「通常无害的计量经济学」所代表）。应用个体研究认为资料为证据，故实证研究为证据导向，由证据推论，真正符合实情的研究，特别是现在主流总体经济学者和机构所采用的 DSGE 模型因无法预测 2007-2008 所发生的全球性金融危机现象，而遭到质疑，应用个体学者甚至倡议他们的实证模型方法是屏弃不可信的先验理论资讯的「可信度革命」(credibility revolution) (Angrist &amp; Pischke, 2010)，应推广至经济学所有的领域，包含自然实验 (natural experiments) （指以非人所控制的事件当作是自然界的介入，形成类似随机控制实验的设计，以寻找因果关係的实证方法）与在田野进行的随机控制实验。但是数据不等同于证据，不同种类的开放空间实验的证据力不但与封闭实验室下的随机控制实验不同，甚至他们之间的效力也不同。但学界中有不同的拥护者，且似沦为各说各话的争论（如Imbens (2010) 与 Deaton (2010) 的辩论）。在科学研究与哲学探讨中对于证据的定义和有效性有相当多的讨论，目前经济学中尚未有像生医领域中的实证医学 (evidence-based medicine) 对于证据强度由随机对照实验到世代研究、病例对照研究、个案报告、专家意见的等级 (level of evidence) 的界定。 </p>\n<h2>6.经济学的结构与策略：范式与研究纲领（Structure and strategy of economics: paradigms and research programmes）</h2>\n<p data-pid=\"KwdbcEzf\">在Kuhn (1970) and Lakatos (1970)之后，哲学家们对统一和指导特定研究传统内的研究的更大理论结构有了更多的认识和兴趣。由于经济学中的许多理论项目或方法是系统统一的，它们提出了关于什么指导研究的问题，许多经济学家运用Kuhn  and Lakatos的方法，揭示经济学的整体结构(Baumberg 1977, Blaug 1976, de Marchi and Blaug 1991, Bronfenbrenner 1971, Coats 1969, Dillard 1978, Hands 1985b, Hausman 1992, ch. 6, Hutchison 1978, Latsis 1976, Jalladeau 1978, Kunin and Weaver 1971, Stanfield 1974, Weintraub 1985, Worland 1972)</p>\n<p data-pid=\"Eu6ERjO9\">Kuhn 的范式标准和科学共同体概念主要是针对自然科学的发展而言的。但是，如果我们把经济学看作是社会科学中的一个学科的话，可以借用库恩的范式标准和科学共同体概念来划分经济学流派。经济学中的“流派”相当于库恩所说 的“科学共同体”。当然，经济学中的流派和自然科学中的科学共同体有一点不 同，这就是，某个经济学流派的成员除了遵从共同的范式以外，还具有某种共同 的意识形态，对某种制度(社会制度和经济制度)持有基本相同的见解或立场。 例如，西方经济学中的主流派对资本主义制度或社会主义制度都持有基本一致的 信念;西方经济学中的新自由主义各流派都认为资本主义市场经济制度具有自我稳定的特性。 </p>\n<p data-pid=\"u3kXOOyO\"><b>根据Kuhn 的范式标准和科学共同体概念，可以按照“信念”、“方法论 “、假设 、接受或拒绝某个命题的“准 则 ” 的不同来划分经济学流派。</b></p>\n<p data-pid=\"8cjjUAaP\"><br>Lakatos主张用“科学研究纲领” （SRPs）作为标准来划分不同的理论体系， 评价科学的进步。 他所说的科学研究纲领实际上就是一个具有严密内在结构、 处在不断发展变化状态的理论体系。这种理论体系由一组相互联系、有内在逻辑关系的理论构成。所以，Lakatos有时候又把科学研究纲领称作“理论的星座” 。<b>   Lakatos所说的科学研究纲领由“硬核” “保护带” “反面启示法” 和“正面启示法” 这四个相互联系的部分构成。</b>或者说，<b>一个完整的或成熟的理论体系 通常有三个特征:有一个共有的“硬核”，有一组保护硬核的“保护带”和引导 理论体系不断发展完善的“启示法”。 </b><br>    所谓硬核，是指不可证伪的理论或无法加以拒绝的公理，它一般由若干个最 能反映这种理论体系特征的核心概念组成。 <br>    所谓保护带，是指一组附属性假说或假设，这些假说或假设可以通过科学研 究或经验证据来加以检验、证伪或拒绝。保护带是保卫硬核不受经验事实的反驳 或否定。保护带本身可以被修改、调整和替换。 <br>    所谓反面启示法，是指禁止人们把经验反驳的矛头指向硬核;当硬核遭到攻 击时，要尽力把攻击的矛头由硬核转向保护带，通过修改、调整和替换保护带来 保卫硬核。 <br>    所谓正面启示法，是指如何改进和发展科学研究纲领中的“可反驳”部分， 通过调整和完善保护带来发展科学研究纲领。 <br><br><b> 在微观经济学中，“最大化”(经济当事人在一组约束条件下追求自身利益最 大化)假设是一个硬核假设，相应的反面启示法就是“不要构建那些非理性行为 在其中发挥重要作用的经济理论”，相应的正面启示法就是“以市场缺陷来解释 资源配置的帕累托无效率”。 </b></p>\n<p data-pid=\"DqWzQtcM\"><b> 弗里德曼在谈到什么是宏观经济学中的芝加哥学派时说:“在讨论经济政策时，‘芝加哥’学派相信自由市场 作为一种调配资源的手段的有效性，对政府干预经济事务持怀疑态度，强调货币 数量是产生通货膨胀的一个关键因素。在讨论经济学时，‘芝加哥’学派的研究 视角是，严格地把经济理论作为一种工具来分析大量的具体问题， 而不是把它作为一种徒有其表但并无多少说服力的抽象的数理结构;坚持对理论概括进行经验检验，既反对有事实而无理论，也反对有理论而无事实。” </b><br></p>\n<p data-pid=\"PYys0OBJ\">在硬核和保护带的基础上，每一个科学研究纲领都提出自己的<b>研究主题</b>和<b>特殊的论据</b>来形成自己的<b>理论结论</b>。 <br><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c4147ef9f9955b372406fa73309e7cce_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"830\" class=\"origin_image zh-lightbox-thumb\" width=\"752\" data-original=\"https://pic3.zhimg.com/v2-c4147ef9f9955b372406fa73309e7cce_r.jpg\"></figure><h2>\n<b>7.模型论（</b>Model Theory<b>）</b>\n</h2>\n<a href=\"https://link.zhihu.com/?target=https%3A//plato.stanford.edu/entries/model-theory/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Model Theory (Stanford Encyclopedia of Philosophy)</a><p data-pid=\"KF0WTHH_\">经济学家喜欢用“principles,” “laws,”, and “theories.”这些词语，比如“principles,” “laws,”, and “theories.”</p>\n<p data-pid=\"0boEgkM6\">经济学家更愿意把有关理性选择的公理描述为构成理性选择模型，而不是描述理性选择理论。详见MGW高级微观第一章节。计量经济学家更喜欢用模型了。</p>\n<p data-pid=\"G7MHNRE5\">许多最杰出的模型建构者将它们视为虚构的世界，他们的研究为我们了解实际现象提供了信息（Frig，2010）“创造模型就是‘创造世界’”(Morgan 2012, pp. 95, 405)在他们看来，经济学家能够通过构建模型来研究在没有干扰的情况下因果因素的运作方式——即没有干扰的虚构经济体。Dani Rodrik（2015）认为，经济学由一系列模型组成，而做经济学则是从这些模型中选择或定制一个模型。</p>\n<p data-pid=\"wmKqthsc\">在哲学上，将模型视为谓词或谓词的定义要容易理解得多（Hausman 1992）。例如，当经济学家写下一个只有一个产出和两个投入的企业模型时，他们定义了一个概念，可以用来描述实际的企业。</p>\n<p data-pid=\"z5gwo0jO\">那么我们不禁要问什么是好的模型？经济学好的模型应该具有哪些要素呢？</p>\n<p data-pid=\"gHQck2iX\">The view of models to which economists are most attracted is philosophically problematic, because it is apparently committed to the existence of fictional entities whose properties and causal propensities economists can investigate. In experiments, whether carried out in a laboratory or in the field, experimenters interact causally with flesh and blood experimental subjects, and the outcome may contradict the economist’s predictions. In investigating a model, in contrast, the economist “interacts” with fictional entities, which are arguably nothing other than his or her own thoughts, and the logical implications of the axioms that define the model are never disappointed. This is not to say that the logical investigation of models never results in surprises. Humans are not logically omniscient, and discovering the implications of a set of axioms may be an arduous task. But it is a different task than carrying out an experiment in the laboratory or the field, and ontology of the “worlds” that economists allegedly “create” and then study is deeply puzzling. </p>\n<p data-pid=\"rLepA7OR\">关于科学理论与模型主要有两种科哲观点：<b>语法观点 (the syntactic view) 与语意观点 (the semantic view)。</b>语法观点为逻辑实证论与 Karl Popper 思想影响下产物，语意观点之源流虽然可追溯至形式逻辑中模型论 (model theory)，讨论语句的结构的真值。二十世纪中期身兼行为科学家与科学哲学家等数职的 Patrick Suppes 开始首</p>\n<p data-pid=\"dgChxM9Q\">先认为数学与经验科学中的模型实具有相同的意义，故可以应用相同的方法论探讨科学模型与理论之间的关係 (Suppes 1960)，他更以身作则，以集合论的方式呈现经验科学（包含物理学、心理学、经济学）理论的形式化结构。自 1970 年代后由 Frederick Suppe、Bas van Fraassen、Ronald Giere 等学哲学家所倡议以模型为中心所建构的新观点之后才逐渐形成并为学界所接受。由于但在今日以科学实作为导向的潮流下，科学哲学的对于科学理论和模型的讨论少以理论结构的形式为重点，而由实际上理论与模型在科学研究应用发掘哲学议题。简言之，在科学实作中模型扮演独立亦积极的多元角色，当代模型论者认为模型是独立的「行动体」(autonomous agent)，其在建构之始便非依附于理论 (如理论模型) 或经验资料 (如经验模型)。模型也是一种媒介 (mediator) 工具，不仅是理论与真实世界的媒介工具，而且在科学研究过程中融合各种研究活动，使研究者可以从建模的过程中得到科学知识，强调模型自有的知识力，故传统的科哲中围绕在科学理论的讨论，如与发现与证成的脉络 (contexts of discovery and justification) 的相关议题，皆需在基于科学实作的基础上重新检视模型在其中所扮演的角色 (Morgan &amp; Morrison, 1999; Chao &amp; Reiss 2017)。</p>\n<p data-pid=\"NYEiGqMD\">　　二十世纪早期维也纳学圈代表的逻辑实证论，认为理论有着严谨的逻辑演绎结构，与具有语言结构的「语法物」(syntactic object)，故其学说又称为语法观点。在逻辑实证论的观点下，理论由一组语句所构成，这组语句包含了由指涉理论存在物的「理论词汇」(theoretical vocabularies) 所构成的「理论语句」(theoretical sentences) 而制作的理论陈述 (theoretical statements)，代表数学和逻辑所组成的为先验的知识和分析性的真理 (analytical truth)。与由经验面相对应的观察词汇与语句构成的观察陈述 (observational statements)，代表事实的、综合的真理 (factual and synthetic truth)。理论陈述与观察陈述以「对应原则」(correspondence rules) 连结，并以观察陈述给予理论陈述解释 (interpretation)。<a href=\"https://link.zhihu.com/?target=http%3A//mephilosophy.ccu.edu.tw/entry.php%3Fentry_name%3D%25E7%25BB%258F%25E6%25B5%258E%25E7%2590%2586%25E8%25AE%25BA%25E4%25B8%258E%25E6%25A8%25A1%25E5%259E%258B%23_ftn5\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[5]</a>二次大战后英美科哲界的逻辑经验论 (logical empiricism) 继承逻辑实证论的传统，不尽强调理论与经验的全然区分，方法论上也由注重归纳法转向至「假设—演绎」 (hypothetico-deductive) 法，与「演绎—规律」(deductive-nomological) 或涵盖律 (covering laws) 的科学说明模式 (Hempel and Oppenheim 1948)，在其中全称式的科学律则在理论的组成，与理论的说明功能中皆扮演相当重要的角色。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-341b7d5a3f27faed7a11d72b14229f31_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"614\" data-rawheight=\"294\" class=\"origin_image zh-lightbox-thumb\" width=\"614\" data-original=\"https://pic2.zhimg.com/v2-341b7d5a3f27faed7a11d72b14229f31_r.jpg\"></figure><p data-pid=\"_EZcNC-S\">其中 <i>L</i>i 代表普遍律则，<i>C</i>i 代表先行条件的叙述，两者组成说明项 (explanans)。<i>E</i> 表示被说明的经验现象之描述，也就是被说明项 (explanandum)。举例而言，若今欲说明某厂商提高产品价格之行为，我们首先找出适用的经济律则「在其他状况不变下，边际成本增加会使得独佔厂商其高价格」(<i>L</i>1)，并列举各项先行条件，包含「在其他状况不变下」(<i>C</i>1)「此厂商为独佔厂商」(<i>C</i>2)，「该厂商的边际成本增加」(<i>C</i>3)，最后演绎得出实际上该厂商在边际成本增加时会提高价格的说明 (Hands 2001 p. 86)。</p>\n<p data-pid=\"uzXYFaXP\">　　同时，演绎—规律说明模式隐含「对称论题」(symmetry thesis)，认为说明与预测这是以同样的演绎模式进行，其实是相同的科学活动，不同者仅为说明为事后，预测为事前。故当理论为事实所证实时，同理可以推论出未来事物也会依着相同的科学律则而发生。</p>\n<p data-pid=\"okoSh5fK\">　　在这种「律则先行」的原则之下，语法观点认为理论是科学的重心，提出严谨的语法结构，模型为满足理论的语法结构的实体，一个模型是理论结构中的一则对应原则，或至多代表一组对应原则。各个模型仅为语法结构一项解释 (interpretation)，故模型仅被视为理论的附属物，故不可能自外于理论本身。二十世纪前半叶的科哲学者受逻辑实证论与经验论的影响，多抱持这种模型附属在理论之下的观点，如 Richard Braithwaite (1953)、Ernest Nagel (1961)，甚至提出模型作为类比的 Norman Campbell (1920) 与将其发扬的 Mary Hesse (1966) 虽然在他们的学说中强调模型的重要性，但是模型与理论仍然有强烈的依存关係。</p>\n<p data-pid=\"U8mUb-Wn\">　　自 1950 至 60 年代起逻辑实证论的学说受到不同面向的挑战，其中主要的问题之一为理论与观察陈述的区分。逻辑实证论的理论结构学说建立在理论与观察（经验）陈述间绝对的区分，但是学者质疑理论与观察的独立性，并指出实际上两者可以是互相依附 (ladenness)。同时，语法观点下的科学理论由「定律式陈述」(lawlike statements) 所组成，表示定律为科学理论的主要因素。但是随着对于特殊科学 (special sciences) 的哲学研究的兴起，学者反思科学定律的角色，而将重心转向至科学实作中更常见、更常用的研究工具，如科学模型。</p>\n<p data-pid=\"G2OaSN4D\">语意观点则由不同的角度探讨理论的结构，一般而言语意观点学者借用数学中的「模型」与「结构」的概念将科学理论表示为集合论物件 (set-theoretical entities)，也就是将理论表示为包含相关元素与关係等成员的数学物件，但是语意观点放弃语法观点的语言结构，与其中律则演绎法，改以提供明确的理论组成的方式表现其结构，并据之提供公理化的基础，故其要旨不在于语法结构中的「律则」与「演绎」的规则，而在于结构的「满足」与「实现」。简言之，一理论可表示为:</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-528d7b708466a6e809cfd219c84e783c_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"586\" data-rawheight=\"78\" class=\"origin_image zh-lightbox-thumb\" width=\"586\" data-original=\"https://pic1.zhimg.com/v2-528d7b708466a6e809cfd219c84e783c_r.jpg\"></figure><p data-pid=\"e48Oii4C\">其中<i>x</i>i为理论变数，<i>r</i>i为理论变数间的关係，接下来提供一组必须符合的理论公理，这两者构成理论的「表征定理」(representation theorem)，符合表徵定理的物件则可以被视为理论的一个模型，一方面此模型具有理论的结构，我们称此模型为理论的表徵，或说模型呈现 (represent) 理论，与模型是理论的实现 (realization) 因以集合表现理论的成员与特征皆于模型中实现，故理论实由模型来理解与呈现。</p>\n<p data-pid=\"YX5OKLdd\">以经济学消费者需求的偏好理论为例，消费者对于商品的偏好行为可表示为 <i>R</i>=〈<i>x</i>,<i>y</i>,<i>r</i>〉的集合，其中 <i>x </i>与 <i>y </i>为两种商品，<i>r </i>为偏好关系。消费者遵循合乎「理性」的行为公理，一般包含完备性公理 (completeness) 指消费者能够按照他的偏好程度大小排列出可供选择的商品组合，如给定 <i>x </i>与 <i>y </i>两种商品组合，消费者的可以指出其偏好为下列三者其中之一：<i>x </i>比 <i>y </i>好、<i>y </i>比 <i>x </i>好、两者一样好。递移性公理 (transitivity) 表示消费者的偏好可以合理的传递，如消费者对 <i>x </i>的偏好大于 <i>y</i>，而对 <i>y </i>的偏好又大于 <i>z</i>，则消费者对于 <i>x </i>的偏好必然大于对 <i>z</i>，也就是不会有 <i>z </i>比 <i>x </i>好的矛盾发生。自返性公理 (reflexivity) 表示消费者会认为 <i>x </i>至少与它自己一样好。当某一模型满足所有的公理时，消费者的偏好为该模型所呈现，如一偏好函数或一组无异曲线。换言之，理论以集合与公理表示其形式结构，任何满足形式结构即可视为该理论的模型，故不但个别模型呈现理论，理论是被一组模型满足公理并具有共同结构的模型所呈现 (van Fraassen 1980, 1989; Weisberg 2007; Chao 2009)。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zjyzmysj-sleep?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">最近一直忙于睡觉</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/82175350?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"由 SE 发行的悬疑推理游戏《春逝百年抄》已上线，游戏质量如何？","date":"2022-05-20 09:15:56","description":"\n<p data-pid=\"W68SaDM5\">最初是在任天堂直面会看到这款游戏，虽然最近几年我对所谓悬疑推理游戏的信心丧失殆尽：高价位高时间损耗，却不能获得等价的解谜快感，但其高调用“新本格”宣传的方式还是吸引了我。更有甚者开发组在采访中要成为新本格的旗手<a href=\"https://zhuanlan.zhihu.com/p/469196391\" class=\"internal\">《春逝百年抄》开发团队访谈：高举「新本格」大旗的真人实拍推理作品</a>。</p>\n<p data-pid=\"E4ed7nFE\">不过吸引我的不是作为推理小说的读者看到新本格就起了什么奇怪的反应。而是我觉得把新本格作为本作的宣传重点，难称妙手，因为时至今日已经有相当多的读者们（包含影视剧观众、电子游戏玩家）认为新本格推理就是怪力乱神、胡说八道。（至少新本格运动起步时，读者们只会把标签限定在叙述性诡计和“馆”系。）这一方面说明很多读者无法接受设定系推理，另一方面也是新本格日趋极端的证明。</p>\n<p data-pid=\"9jD9_6GK\">事实上，新本格和本格究竟是什么，其实很简单：</p>\n<p data-pid=\"_eoKKmSQ\">所谓本格就是欧美黄金时代的解谜推理，唯一的重点就是“公平竞争”，后世你看到的再怪力乱神、胡说八道的东西其实在那个时代都能找到源头。（比如你能在泡坂妻夫小说里看到陨石砸人的“凶杀”，这甚至还不是诡计，然而黄金时代甚至黄金时代之前的推理小说就已经有至少三个作者把陨石砸人作为不可能犯罪诡计使用。）</p>\n<p data-pid=\"1wHi8ctU\">所谓新本格其实是时代划分而不是风格或者内容的界定概念。但是如果从风格和内容的界定去解释也可以，新本格其实是日本当时回溯欧美黄金时代解谜推理的一场运动，本质还是解谜推理。所以风格和内容的界定也就没有了必要，我用新本格这个词都是指时代划分，1987年开始的日本推理回溯解谜推理的时期罢了。</p>\n<p data-pid=\"f1HIf4KJ\">即：新本格=本格=解谜推理（与读者进行公平竞争的解谜推理的游戏）（关于为什么称之为游戏可参考约翰·狄克森·卡尔的文章《世界上最伟大的游戏》）</p>\n<p><br></p>\n<p data-pid=\"kE8VS_UN\">那么，废话说完了，就以上述观点和具体的游玩感受，来看看本作是否在公平竞争？是否是有趣的解谜推理？是否是一款好游戏？</p>\n<p><br></p>\n<p data-pid=\"3lXz6_-p\">《春逝百年抄》所有案件都是较为正常的谋杀案，没有涉及密室和不可能犯罪的部分，其实从游戏年表就能略窥一二，年表中欧美推理的部分，三大家只提了阿加莎·克里斯蒂和埃勒里·奎因两位的作品，对擅长不可能犯罪的约翰·狄克森·卡尔未曾提到过。</p>\n<p data-pid=\"CLHT1WQ2\">不过，游戏里一直在渲染某种怪力乱神的元素是真实存在的氛围，但最后的做法不同于设定系推理（在科幻、奇幻或其他幻想世界观下事先告知读者世界的规则并利用这些规则的推理作品）的一般形式，可能正是由于本作对这个元素模棱两可、不置可否的态度。</p>\n<p data-pid=\"fo7fv7-U\">在说到案件前，有必要批评本作的游戏系统，真要说的话，制作组是有设计一个好的推理游戏系统的想法的，这种努力尝试你可以从这里的<a href=\"http://link.zhihu.com/?target=https%3A//bbs.saraba1st.com/2b/thread-2069698-1-1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">34楼</a>得到详细的解析，但是字小、操作繁琐、假设过多让人烦躁等一系列缺陷让这种努力付诸东流，更有甚者，简单的案子用不着这堆假设的部分，能提供线索的案子又始终不提最重要的假设，让人迷惑的案子假设部分完成依然迷惑。用Switch右摇杆作为鼠标拖拽上百次（没具体数），真的有趣么，我是睡过去两次。</p>\n<p data-pid=\"ODZowf5V\">再说剧情结构，这点还不错，把现实案件、杂志文章、未发表手稿结合到一起，如果没有烦躁的假设部分，想必是一场愉快的剧情切换过程。而玩到后面时会发现这个剧情切换的过程还真的隐藏着诡计。</p>\n<p data-pid=\"Bp_9hPPD\">从第一章到第五章每章都有谋杀案件出现，第五章还有密室逃脱的部分，虽然我是不太感冒...但要说真正让玩家参与进来的解谜，比起对照花纹拖拽拼图的机械操作，这个密室逃脱部分可能还好得多。</p>\n<p data-pid=\"MaSYm1g-\">烂不是最大的敌人，平庸才是，烂出特点反而也会有趣。五章里三章的案子平庸到无聊也是很难得了。</p>\n<p data-pid=\"QYHIBcYb\">第一章，简单至极的案件，没什么可说的。</p>\n<p data-pid=\"jEEbowh5\">第二章，只看第二章的话，诡计过于用力过猛，让人不禁头上打问号，就算第六章的解释，所谓为了看起来不是XX犯罪这个点也是应该在第二章就拿出来的东西，根本不是能解释得了谋杀现场的说法，不够分量。还好第七章，虽然剧情过于狗血，但总算让这里的解释说的过去了。</p>\n<p data-pid=\"_MPqkpfj\">玩到这，会发现一点，就是排除其他人的理由只有在你选错的时候才会告诉你，如果你一路选对，一马平川，那么你反而会觉得有其他的可能性，而那些可能性根本就否定不了。这就是线索的后置，在解答部分给新线索，基本上100年前的推理小说大多都不会这么干了。</p>\n<p data-pid=\"VpN8zudB\">第三章，我以为会对两个MKF进行一番短小的“逻辑流”类的推理过程，然而...不过从单个案件的角度看的话，本案已经是几章中最好的了。而且本案和其他章节的案件联系不是那么紧密，营造的情感却最突出。侦探如水最后的话语是我在本作看到的第一个亮点。虽然也是伪解答。但比起终章的真解答我更喜欢这里的解释。</p>\n<p data-pid=\"QWhOL-Ic\">第四章，只看案件也没什么可说的。</p>\n<p data-pid=\"Q7Tm8iua\">第五章，对接下来的解答进行伏线埋设的工具章。</p>\n<p data-pid=\"0W2fQ88P\">第六章，涉及谜底的部分就不说了，想看泄底讨论可以点进上面提到的原贴。伏线的埋设还是不错的，作为WHO的反转而不是诡计的反转，其实那种东西本身也没法在作案诡计上做文章吧。但是会有种凶手总是在说错话、总是在露怯的感觉。不过重点是以切换剧情为基础的诡计，但是这个设计，应该大家都不会去注意，或者说根本不在意，在想法上是好的，但是实施起来很弱，我现在有点怀疑开发组真的想在那上面做文章么，毕竟和终章的那个同类诡计相比，都是后者的更清晰更详尽，大概是我自作多情了。不过我愿意相信这是种尝试，干的漂亮。</p>\n<p data-pid=\"ErVGOnA8\">终章，有几个很有趣的点。第二章用力过猛的诡计也得到了很好的解释，诡计本身作为伏线是我没有预料到的，非常有趣。而且其他伏线埋设的也很不错，虽然剧情过于狗血，但是除了最后那部分，我是接受了。重点的是另一个核心诡计在此揭露，相比前一章，这个反而是推理小说中常用的诡计，有诸多伏线支撑。</p>\n<p><br></p>\n<p data-pid=\"ngdaXHNq\">最后回答三个问题：本作是否在公平竞争？是否是有趣的解谜推理？是否是一款好游戏？</p>\n<p data-pid=\"B3uDVMDQ\">在单个案件部分确实是公平竞争，扩大来说，在作案诡计HOW上也是趋近于公平的，在整体的凶手设置上和推理规则的理解上掉下了钢丝，但是也没摔伤。不过考虑到线索的后置，在完备性上是十分欠缺的。</p>\n<p data-pid=\"G_7DWqHJ\">有几个很有趣的点。伏线量大管饱，虽然有时非常明显。剧情上的逆转多于也好于案件上的逆转。核心诡计在伏线的支撑下都表现不错，只不过一个是老梗。</p>\n<p data-pid=\"WVakVr6w\">游戏系统大部分时间让人烦躁，虽然案件部分让我满意，但很难说得上是一款好游戏。</p>\n<p><br></p>\n<p data-pid=\"nlK2L1sV\">我推荐你们购买支持，但是务必等打折，打骨折。</p>\n<p><br></p>\n<p data-pid=\"rQkPn4Lr\">最后鼓励一下吧，单个案件不评分了，实在...</p>\n<p data-pid=\"hL2jS2qB\">整体案件★★★★</p>\n<p data-pid=\"PD4MRdA-\">整体游戏★★★</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/hai-an-xian-happy?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">海岸线</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/515973950/answer/2489593379?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">27 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/530606427?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">悬疑冒险游戏《春逝百年抄》中文售前宣传片公开，你都有哪些期待？</a><br><a href=\"http://www.zhihu.com/question/532626986?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《春逝百年抄》公开游玩感想宣传片，游戏现已登陆 PS/NS/Steam 平台，对此你有哪些期待？</a><br>\n","link":"http://www.zhihu.com/question/515973950/answer/2489593379?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012 年的、由 Node.j......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。M1 芯片的性能如何？本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/138186/40/23101/50775/622032b3Efa9053d7/df3a819d044a9455.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote>\n<p>题图来自 USTC Hackergame 2019「Happy LUG」</p>\n</blockquote>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/90743/25/22680/55545/622032abE6ef31d51/cfc4cb389c994c17.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote>\n<p>周六不放假休息，还在这加班搞 CTF？</p>\n</blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/86535/11/24318/75037/622032a8E4f94d4ae/89703ccc122cf4e0.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「天下武功，唯快不破 —— 我是这样优化博客的」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 &lt;script async&gt;」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 &lt;script&gt; 的 async 和 defer 属性、以及它们背后的故事。拆开 Google Analytic 的统计代码现在 Google 推出了 Google Tag Manager，通过......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/80291/2/16552/19311/622032b3Eb300c2aa/66748fc8124a01c5.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]