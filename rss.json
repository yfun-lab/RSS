[{"title":"兜兜转转，我还是想要一台无人机","date":"2023-01-04 06:19:12","description":"尽管山河壮丽、美轮美奂有更专业的人在操持，它们也离我很远，但即便如此我依然是一个需要无人机的普通人。<a href=\"https://sspai.com/post/77584\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/77584"},{"title":"一款充满矛盾与无奈的好产品：Kindle Scribe 上手体验","date":"2023-01-04 03:30:00","description":"因为功能的不完善，产生了使用边界不清晰，也就导致了很多矛盾和误解。<a href=\"https://sspai.com/post/77539\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/77539"},{"title":"risc-v 前景如何？会形成与 x86、arm 三分天下的局面吗？","date":"2023-01-04 03:09:07","description":"\n<p data-pid=\"bZcEoPCb\">关于这个问题，和大家分享2022年12月28日在北京微电子国际研讨会暨IC WORLD大会上的报告。以下为视频与文字实录：</p>\n<a href=\"https://www.zhihu.com/zvideo/1591586718976774144\">RISC-V发展态势与趋势</a><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>一、RISC-V的定位\n1）RISC-V是一种指令集，不是处理器实现\n2）什么是处理器芯片设计的核心能力？\n3）指令集重要，还是不重要？\n4）关于RISC-V的五个谬误\n5）高铁模式/北斗模式/5G模式\n\n二、RISC-V发展态势\n6）RISC-V国际基金会情况\n7）态势一：高性能RISC-V\n8）态势二：软件生态\n9）态势三：企业投入\n10）态势四：各国投入\n11）中国发展情况\n\n三、开源芯片实践\n12）香山近况\n13）开芯院与香山\n\n四、未来展望\n14）开源硬件成功案例：IBM PC\n15）透过处理器发展历史看未来\n</code></pre></div>\n<h2> 一、RISC-V的定位</h2>\n<p data-pid=\"8SWFWyrz\">RISC-V是一种指令集，并不是一种处理器的实现。指令集是一种标准规范，就相当于是大家的一个约定。遵循同一个标准规范，不同厂商生产的软件和硬件就能在一起工作，就跟螺钉螺母的尺寸规范一样。</p>\n<p><img src=\"https://picx.zhimg.com/v2-73524d9e17c9b29f98657f7b04d03f29_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1832\" data-rawheight=\"1036\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-73524d9e17c9b29f98657f7b04d03f29\" data-watermark-src=\"v2-00a0c434555755c0696f2af2f67d634f\" data-private-watermark-src=\"v2-ecf65acee23a4e95b899b9d37eaf9ff9\"></p>\n<p data-pid=\"qD4ELN9u\">有了指令集标准规范，最重要的就是芯片设计。根据指令集来去完成微架构的设计，形成文档，然后通过工程开发形成源代码，之后再用EDA软件形成芯片版图，交给台积电或中芯国际这些代工厂去流片。在这个过程中，<b>微架构的设计和实现非常重要，是芯片设计的核心能力</b>。当我们具备微架构设计和实现能力后，将不再受限于指令集。换句话讲，当我们具备了这样的能力，那么更换一种指令集也是一件很容易的事情。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-96c49cfa07cad027ead60e46c36142f7_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1040\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-96c49cfa07cad027ead60e46c36142f7\" data-watermark-src=\"v2-f284d85570130435ed290d1bbb646513\" data-private-watermark-src=\"v2-1a64e9aac7f58d121cd40f019c4fc4e0\"></p>\n<p data-pid=\"hqUM-BCA\">以英特尔为例，在过去几十年，英特尔处理器的微架构不断演进，处理器的性能也在不断地提升。那么，性能提升的原因到底是什么呢？有人说是因为指令集的增加，实际上这并不是全部原因，虽然指令集的增加对性能提升有一定帮助，但更重要的是，英特尔处理器微架构和工艺的不断演进。我们可以看到，95年的P6架构在微架构上面的一些演进，到2000年及2006年，大概每五年一代架构演进中，<b>不断地在微架构层面上进行优化，这正是英特尔核心的设计能力</b>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ae5f3dcfc4a4d89f644510c52b0abe22_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1834\" data-rawheight=\"1034\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ae5f3dcfc4a4d89f644510c52b0abe22\" data-watermark-src=\"v2-1d2caa4ccbbe5cf92b2e519d2501678b\" data-private-watermark-src=\"v2-1026b1a98a6add5d56b88e868eb4b741\"></p>\n<p data-pid=\"6IMF8IUM\">所以从这个角度来看，<b>指令集在某种程度上并不是那么重要，因为它只是一种标准规范</b>，更关键的还是微架构的设计和实现能力，因为它决定了一颗芯片的性能、功耗和面积。例如，苹果公司在过去几十年更换了多个指令集，从摩托罗拉到英特尔、到PowerPC、再到今天的Arm。但由于苹果自身的垂直协同设计能力很强，所以更换指令集对他们而言并不是一件太难的事情。国内的龙芯公司，也因为具备很强的芯片设计能力，所以当从MIPS指令集更换到longArch指令集时，底层的微架构设计也几乎不用做太多改变。国内还有一些企业，他们同时支持Arm和RISC-V，也是因为底层的微架构设计并不需要大的变化就可以支持不同的指令集。</p>\n<p data-pid=\"IHNBUAqz\">但是从另一个角度来看，<b>指令集对于软件生态却是非常重要的，它会决定软件生态开发的效率</b>。以IBM为例，早年的IBM计算机，每一台计算机的指令集都是独立的，导致计算机的软件投入特别大。1964年IBM推出的System/360计算机改变了这个格局，形成了统一的指令集，从而计算机软件和硬件可以分离开，甚至逐渐发展出一个独立的软件产业。从这个角度来看，统一的指令集对软件生态具有非常重大的影响。</p>\n<p><img src=\"https://picx.zhimg.com/v2-776e58366aafb7c885d9c0ce4c9c11bb_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1038\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-776e58366aafb7c885d9c0ce4c9c11bb\" data-watermark-src=\"v2-69191ea5a6481859bbbbc9a0dc6c1ffb\" data-private-watermark-src=\"v2-39a18c6a51bef9e6b1c444e714a76272\"></p>\n<p data-pid=\"CruhRjtf\">但是，在过去的几十年时间里，指令集均属于公司私有。2010年加州大学伯克利分校David Patterson教授团队提出一个口号——“<b>指令集应该免费</b>”，立刻得到全世界的认可，这也是今天RISC-V能够蓬勃发展的一个核心理念。也正因为指令集不再属于某一个公司，那么全世界可以共同去建设，于是形成了一种<b>新的处理器生态构建模式——开源、开放、共享</b>。</p>\n<p><img src=\"https://pica.zhimg.com/v2-35eea39182d56a5dc889957d9e5f94ee_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1036\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-35eea39182d56a5dc889957d9e5f94ee\" data-watermark-src=\"v2-2e0728cabdccf67bb384cddd5f88f115\" data-private-watermark-src=\"v2-0a86d3a1b052f6b5219a90c61ef810a2\"></p>\n<p data-pid=\"cPcluP9A\"><b>共建模式的核心就在于把标准规范和产品实现进行分离</b>。这类似于通信领域，例如5G标准规范由3GPP组织负责制定，并不是由一个公司私有，而各个企业可以根据5G标准去做自己的产品，在开放的模式下去竞争。类似地，RISC-V也带来了这样的新机会，指令集的标准由RISC-V国际基金会来制定，基于这个标准，不同国家的不同企业都可以来研制不同的RISC-V产品，例如，美国的Sifive公司的RISC-V产品、国内阿里平头哥的玄铁RISC-V处理器、以及中科院在开发的香山处理器。</p>\n<p><img src=\"https://pica.zhimg.com/v2-4b91149ba7b33722d3d488d9921bc976_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1034\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4b91149ba7b33722d3d488d9921bc976\" data-watermark-src=\"v2-04b3f7cf0684464ce292a940558778b0\" data-private-watermark-src=\"v2-fee157ac01ebad8efad9ab6d882cc20f\"></p>\n<p data-pid=\"HqqQRLg6\">这为我们国家的处理器发展带来了一种新模式，即“5G模式”。在过去20多年，我们国内的处理器发展模式，主要有“<b>高铁模式”和“北斗模式”</b>。高铁模式就是引进-消化-吸收-再创新，代表企业有海光、海思和飞腾；北斗模式以龙芯、申威为代表，独立构建技术体系和生态。而“5G模式”则是在开放的框架下去竞争和合作，面向国际市场和生态建设。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d89b1c55f68d19980f4dfbe6b3e006cd_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1036\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d89b1c55f68d19980f4dfbe6b3e006cd\" data-watermark-src=\"v2-7c8fee3d47d3199380998fe562931550\" data-private-watermark-src=\"v2-4bbe38653e9674fb50a2fd264d88fad9\"></p>\n<p data-pid=\"bRaIrMrL\">关于RISC-V，实际上一直存在很多的争议，或者说是误解。所以最近David Patterson教授写了一篇文章来纠正关于RISC-V的一些谬误。第一个谬误，<b>RISC-V是一个开源处理器,就像linux是一个开源操系统</b>。其实，这确实是很多人的认识，但实际上RISC-V不是一个开源处理器，它是一种标准规范,本质上是一本手册,就像我们经常听到的以太网标准、USB标准等，而linux操作系统实际上是一种源代码实现。所以这两个是不一样的。相应地，RISC-V国际基金会就像是一个制定标准规范的工作组。</p>\n<p><img src=\"https://picx.zhimg.com/v2-63e660fde5bee8e589797e5db2040eac_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1832\" data-rawheight=\"1040\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-63e660fde5bee8e589797e5db2040eac\" data-watermark-src=\"v2-5bfba6f5456d140e7d3e65fb078ba6df\" data-private-watermark-src=\"v2-3fedc8fcbdd2d99854d4429f18f8232b\"></p>\n<p data-pid=\"3wyDfNI6\">第二个谬误是说，有人认为<b>选择成熟封闭的指令集要比选择开放的指令集更安全可靠</b>。David Patterson教授认为这也是一个谬误，因为封闭指令集属于公司，那么就会和公司的命运紧密绑定。如果公司不景气，该公司的指令集就会消失。历史上消失的指令已经很多了，包括像曾经一度流行的DEC VAX和DEC Alpha指令集。此外，封闭指令集也未必稳定，MIPS曾经卖给了六个企业，ARM也有三个东家，而更换一个东家就意味着商业模式可能会发生变化。</p>\n<p data-pid=\"8unvRpVU\">第三个谬误说，<b>封闭的指令集是没有碎片化软件生态</b>的，这一点其实也是一个误解。实际上，我们可以看到，封闭指令集会在其生命周期中遭受过无法预见的不兼容问题。例如，即使在ARM的一个体系下，也出现过不兼容的情况：ARMv1到ARMv7使用32位地址空间，但它们与同时提供32位和64位地址版本的ARMv8-a，而ARMv8-a和ARMv8-m也存在不兼容。所以，碎片化在某种程度上其实是一种常态。</p>\n<p data-pid=\"VHIop86m\">第四个谬误说，<b>相对于封闭指令集，RISC-V的模块化导致了更加碎片化的软件生态。</b>在这一点上，RISC-V技术工作组已经在提供一些新的机制，比如Profile配置机制，来规范软件生态，从而使软件不会像想象得那么碎片化。</p>\n<p data-pid=\"RIIktVOO\">最后一个谬误其实是一个观点结论，即很多人认为<b>RISC-V不可能成为主流指令集</b>。但在技术上，RISC-V是可以去支持从嵌入式到超级计算机领域的；在商业上，像这种更加开放的标准，会更有生命力。</p>\n<p data-pid=\"2S24cBHQ\">上述的一些说法，就是对RISC-V的普遍定位和认识。</p>\n<h2> 二、RISC-V发展态势</h2>\n<p data-pid=\"su5DTHbY\">下面，我们来看一看RISC-V发展的趋势。实际上,刚刚提到的RISC-V国际基金会，主要负责RISC-V标准的制定。目前，在全球已经有70多国家、3000多个会员加入到RISC-V国际基金会，而且前几年每年都以超过100%的速度在增长。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d31abfae8abf71aa486efef1d5d9c731_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1036\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d31abfae8abf71aa486efef1d5d9c731\" data-watermark-src=\"v2-42acd234a66ed76489a143be14cd1de4\" data-private-watermark-src=\"v2-d1fa72d02acc4b33cc99b82f992bca1e\"></p>\n<p data-pid=\"v91lRrk3\">在RISC-V国际基金会里，从国家分布情况来看，<b>中美欧并驾齐驱</b>。我们国内企业的参与度非常高，在RISC-V国际基金会高级会员中，有14个国内企业是高级会员；在全球25个理事中，其中有9个成员是来自中国；还有一些技术发展伙伴，中国的机构和企业也在积极参与。</p>\n<p><img src=\"https://picx.zhimg.com/v2-374e38c367fda945d505794f25baee6a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1036\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-374e38c367fda945d505794f25baee6a\" data-watermark-src=\"v2-b1aadd21ed7d373186396e0cbfefc613\" data-private-watermark-src=\"v2-bcdcb251bed999572db446a2f1a192d1\"></p>\n<p data-pid=\"eDzTmuSv\">我们可以看到RISC-V发展的一些新态势。第一个是RISC-V已经开始往高性能领域发展了。我们以前都觉得RISC-V主要是在嵌入式领域，但实际上在最近这几年，已经出现了一批RISC-V高性能处理器实现,代表企业有硅谷的Sifive、Ventana，在技术上有一定优势，国内还有香山处理器，以及上海赛昉。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-cc3ba1ce89c118a7399cf3e0716ec344_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1038\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-cc3ba1ce89c118a7399cf3e0716ec344\" data-watermark-src=\"v2-d62ccb4f66c87ae6a46dc3b1c63ce62c\" data-private-watermark-src=\"v2-36725e55138416c41692fda9540771a6\"></p>\n<p data-pid=\"ZHnEca62\">例如，SiFive近期推出高达3.4GHz的RISC-V处理器，性能可以对标ARM A78，是一个相当高性能的处理器。对比国内来看，在研发进度上，这款设计领先国内的香山大概一年左右。但是香山也有它的优势，因为香山通过开源开放的模式联合多个企业一起来研发，可以更快地迭代，同时通过分摊降低成本。</p>\n<p><img src=\"https://picx.zhimg.com/v2-3c93abfa22f4a882bb4e9ddd21124ea8_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1032\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3c93abfa22f4a882bb4e9ddd21124ea8\" data-watermark-src=\"v2-dc650773a380313b8ba695cfb4e0ccb6\" data-private-watermark-src=\"v2-720e06441d48ce6d4fe05701ca5babc8\"></p>\n<p data-pid=\"dQQwi008\">第二个趋势，RISC-V关键软件生态的发展也是非常迅速。一方面，RISC-V国际基金会在积极推动基础软件的适配工作；另一方面，很多开源软件社区也在主动的适配。这就使得全世界的软件力量也都在支持RISC-V生态的发展。</p>\n<p><img src=\"https://picx.zhimg.com/v2-be7417f84fe211f1d7afab4993d3bb4d_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1832\" data-rawheight=\"1038\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-be7417f84fe211f1d7afab4993d3bb4d\" data-watermark-src=\"v2-9a88217f3a103403d710a5f56d16b743\" data-private-watermark-src=\"v2-43f5d40c2cc6ddc12c8294292518e49a\"></p>\n<p data-pid=\"Rsh8dpfD\">以Linux发行版Debian为例，开源社区于2019年开始支持RISC-V，在全世界开源社区的努力下，仅用3年时间就完成了2万多个软件包中93%的移植，使RISC-V成为Debian支持的Tier-1架构。</p>\n<p><img src=\"https://picx.zhimg.com/v2-b98cb4e6abb3002799ed13cc3db4451b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1036\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b98cb4e6abb3002799ed13cc3db4451b\" data-watermark-src=\"v2-467b8d0c6f6b019aef109d84b3afdf74\" data-private-watermark-src=\"v2-43e4aa1cd430f7320d272f5464668828\"></p>\n<p data-pid=\"8GuwdF7l\">第三个趋势，RISC-V得到了越来越多企业的支持，除了刚才讲到的Sifive和Ventana这样的初创公司外，包括像英特尔这样的巨头也积极投入到RISC-V的生态建设当中。这里没有列举中国的企业，但实际上我们国内的企业参与度是更高的。</p>\n<p><img src=\"https://picx.zhimg.com/v2-8b42216f35694bae39bb23d972ba9d6b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1036\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8b42216f35694bae39bb23d972ba9d6b\" data-watermark-src=\"v2-a799f77107d26eca8c13af9860366f2a\" data-private-watermark-src=\"v2-69fb4b6142bffabbf18be28daf5fa315\"></p>\n<p data-pid=\"tpg_cXkJ\">第四个趋势，我们可以看到一些国家在国家层面上在积极地推动或支持RISC-V。例如今年6月份，俄罗斯数字发展部宣布将大力扶持RISC-V处理器的发展。印度也在今年4月份启动了“数字印度RISC-V处理器”(DIR-V)发展规划，同时，印度的电子信息部（相当于我们国内的工信部）以部的名义加入了RISC-V国际基金会，并成为了高级会员。</p>\n<p><img src=\"https://pica.zhimg.com/v2-a1057b799e2393249a3c4298dd4e313a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1834\" data-rawheight=\"1034\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a1057b799e2393249a3c4298dd4e313a\" data-watermark-src=\"v2-12be7390b3641917066286e10e8d14e2\" data-private-watermark-src=\"v2-70b7efe3a85fbf81d8562d8b5eac5939\"></p>\n<p data-pid=\"iZxFZjAz\">此外，欧盟在今年的9月8号发布了《关于建立欧洲开源硬件、软件和RISC-V技术主权的建议和路线图》报告，支持RISC-V与开源硬件，尤其给出了九大优先发展关键方向，并给出了实施路径，包括建立非盈利机构来支持研发、实施教育政策和措施等等。由此可见，全世界都在积极投入RISC-V生态建设。</p>\n<p><img src=\"https://pica.zhimg.com/v2-078a7ad6804264d3c1e94bb0afb651de_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1832\" data-rawheight=\"1038\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-078a7ad6804264d3c1e94bb0afb651de\" data-watermark-src=\"v2-e01a2839dc8d57c894287dc7b51fb673\" data-private-watermark-src=\"v2-eddf1b96523963080acf392d5b3562fa\"></p>\n<p data-pid=\"eKArmW79\">当然，在RISC-V生态建设上，中国处于第一梯队。尤其是2018年以来，我可以看到很多企业都在推出各种各样基于RISC-V的芯片产品。同时，地方政府也出台一系列政策。特别是北京政府，在RISC-V方面有很大的投入。</p>\n<p><img src=\"https://picx.zhimg.com/v2-cac288f225458a99a7290f12cfdabb43_720w.jpg?source=b1748391?rss\" data-rawwidth=\"920\" data-rawheight=\"1556\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-cac288f225458a99a7290f12cfdabb43\" data-watermark-src=\"v2-8f18a93cb1e781ed724e0dc0afeb829c\" data-private-watermark-src=\"v2-613cf1dfea4f199d540aae80e7fc7659\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"afawVEA8\">对RISC-V的发展态势做一个小结，那就是RISC-V应用正在全球快速地增长。今年上半年，RISC-V国际基金会做过一个统计，数据显示现在RISC-V的出货量已经超过一百亿颗，预计到2025年有望突破800亿颗。但是总体来讲，还是缺少一些里程碑的、标杆式的RISC-V应用。不过最近也看到一些新计划，比如欧盟计划投入2.7亿欧元来研制超级计算机。我们也可以看到RISC-V软件生态也在加速，多家美国企业在高性能处理器领域的投入比较大，总体处于领先地位。在国内，初创公司非常活跃，数量上也远大于美国，但目前还主要还集中在MCU级别。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-76d4b82b2e937370074d7e04fcd29f07_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1828\" data-rawheight=\"1038\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-76d4b82b2e937370074d7e04fcd29f07\" data-watermark-src=\"v2-1048813605115472f0e2c751cc62df5e\" data-private-watermark-src=\"v2-68c385ecfad894a78c111dc18177379b\"></p>\n<h2>三、开源芯片实践</h2>\n<p data-pid=\"e1w7gi9j\">下面简要介绍一下我们在开源芯片方面的一些实践，这也是得到中科院和北京市的大力支持。我们的目标是希望像构建开源软件一样去构建开源芯片生态。在这样的一个开源芯片生态下，有很多开源的硬件组件可以被充分复用，从而大幅降低构建一颗芯片的成本，进一步让更多的中小企业去释放他们的创新活力。</p>\n<p><img src=\"https://pica.zhimg.com/v2-a9cf799f1003cec95182b581673ec1b1_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1036\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a9cf799f1003cec95182b581673ec1b1\" data-watermark-src=\"v2-4c4a6f77bd1dc2fbcd3c51f9b186861d\" data-private-watermark-src=\"v2-02dec6aa1635d5cf9bc1d55257a22a47\"></p>\n<p data-pid=\"ULUTryOv\">在这样的理念下，我们启动了香山开源高性能处理器核的研发，它的目标就是像Linux一样。所以，从这一点来看，香山和RISC-V并不在一个层次，RISC-V是一个标准规范，而香山是一个具体的实现。也就是说，RISC-V本身并不像Linux，但香山像Linux。我们希望把它变成一个像Linux那样的开源处理器主线，能够被工业界广泛应用，同时又可以支持学术界去做创新。</p>\n<p><img src=\"https://picx.zhimg.com/v2-7287eef9ae1490fcd6841ac84948493d_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1036\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7287eef9ae1490fcd6841ac84948493d\" data-watermark-src=\"v2-bb48e9fcc315ae620307255b9e3b5827\" data-private-watermark-src=\"v2-dcae6834c6b51056f0d761960d404c29\"></p>\n<p data-pid=\"_QKy1oG2\">香山的特点在于它的源代码是开源的，同时开发香山的整个平台和工具也是开放的。用冰山做类比，芯片设计可看做是冰山水上面的部分，那冰山水下面的部分就是如何设计芯片所需要一系列的基础设施、测试及验证工具等。香山，就是要把所有的这些内容都开源开放，这样可以联合更多的企业来共同研发。</p>\n<p><img src=\"https://picx.zhimg.com/v2-84c5273f8790e6f71ebc0196f17a5fac_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1036\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-84c5273f8790e6f71ebc0196f17a5fac\" data-watermark-src=\"v2-f2819985051cf11b9c47562c60e2cd09\" data-private-watermark-src=\"v2-f998f723432bbaaeedb13f8e4c20fb24\"></p>\n<p data-pid=\"Jbunkxs9\">目前，我们已经完成了两代香山架构的设计，第一代叫“雁栖湖”，在今年年初已经流片回来，并达到了预期性能。第二代叫“南湖”，目前已经实现了对第一个客户的交付。南湖的性能是对标ARM A76的水平，我们还会继续迭代新的几个版本，并进行交付。</p>\n<p><img src=\"https://pica.zhimg.com/v2-5c49b491cbc41c7ebc8c91b873398c34_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1036\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5c49b491cbc41c7ebc8c91b873398c34\" data-watermark-src=\"v2-96dd0acc0eafa161ec95a58a31630719\" data-private-watermark-src=\"v2-fd7be92b301926aec37c44111f7c6ef9\"></p>\n<p data-pid=\"bFZ78B5e\">香山是一个通过开源模式来构建的芯片设计，得到了全世界开源社区的大力支持，从去年公开以来，香山在GitHub上非常活跃，是国际上最活跃的开源芯片项目之一。</p>\n<p><img src=\"https://picx.zhimg.com/v2-e52980eb6d925427c63e79ca0294d4fa_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1036\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e52980eb6d925427c63e79ca0294d4fa\" data-watermark-src=\"v2-1e867ac6f4511730ab9af35b15ebe242\" data-private-watermark-src=\"v2-3e3c8125ce6d7a0238fd22eb4070dae5\"></p>\n<p data-pid=\"J8LqFcQN\">现在，香山也得到了北京市的大力支持。在北京市和中科院支持下，有18家企业联合发起了北京开源芯片研究院（开芯院），主要对香山进行产品化改造和后续架构的探索。如今，香山不再是中科院的一个科研项目，它已经通过开芯院来进行产品级、工业级改造，具备交付能力。</p>\n<p><img src=\"https://picx.zhimg.com/v2-aea7d6ceca9c1f13100c1bfd7db2e12e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1832\" data-rawheight=\"1040\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-aea7d6ceca9c1f13100c1bfd7db2e12e\" data-watermark-src=\"v2-7873c2301f57ac2f98408093b5c07020\" data-private-watermark-src=\"v2-5640954d22a921346547b6778fd743d9\"></p>\n<p data-pid=\"ljDUnOtq\">从性能对比图来看，目前香山在全世界的开源芯片中性能最高，在这个基础上，开芯院进一步确定了“两核”发展目标：第一个是经典核，能够适用于中高端工业、泛工业技术平台的处理器核，对标ARM A76；第二个核是高性能核，主要应用在高性能场景，比如数据中心、算力基础设施等，对标ARM N2。</p>\n<p><img src=\"https://picx.zhimg.com/v2-208ce0a3be24383f6e020f567bb577df_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1834\" data-rawheight=\"1038\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-208ce0a3be24383f6e020f567bb577df\" data-watermark-src=\"v2-6a6c096921076b1beac3a6984a96f30e\" data-private-watermark-src=\"v2-79ae8b5f12be5d1ecef25d9483ca82fe\"></p>\n<p data-pid=\"NWna1jI1\">目前，开芯院已经联合八家企业形成合作，并于今年8月24日启动第三代香山“昆明湖架构”的联合研发，形成了将约100人的研发团队，并分成了不同的工作组，形成了例会机制，针对每个技术点去不断地共同研发和迭代。</p>\n<p><img src=\"https://pica.zhimg.com/v2-c6de3271710a4859475ab5a786685040_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1038\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c6de3271710a4859475ab5a786685040\" data-watermark-src=\"v2-237d96cbba95a2a1de268bcfb64c2ec4\" data-private-watermark-src=\"v2-b2789f0fd18aa54d3e6f511df7948d6b\"></p>\n<p data-pid=\"Prt-RTs6\">目前，经典核“南湖”（性能对标ARM A76），也在今年的11月30日实现了顺利交付,即按期交付了100%的RTL代码给第一个用户。在合作过程中，得到了这个用户的高度评价。说实话，他们一开始觉得这个项目是从中科院出来的，会不会仅仅是一个科研项目？而在紧密沟通的合作过程中，这个用户极大地增强了对香山项目的信心，并给予了高度的评价。接下来，开芯院在明年的2月份还会将南湖交付给第二个用户。</p>\n<p><img src=\"https://picx.zhimg.com/v2-1b62de03bf1a1f29b5ad6955f8348be7_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1832\" data-rawheight=\"1038\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1b62de03bf1a1f29b5ad6955f8348be7\" data-watermark-src=\"v2-5db88f1e2fca9465e155fe363fd07fe1\" data-private-watermark-src=\"v2-7cbe5c23927677df7568957965f8f73f\"></p>\n<h2>四、未来展望</h2>\n<p data-pid=\"tlolJgTN\">最后看一下关于未来的一些展望。提到开源芯片，有人曾问开源芯片的未来有前景吗？对于这个问题，其实有一个很好的参考案例：IBM PC，即个人电脑。IBM在1981年推出了个人电脑，并且把所有的文档都进行了公开。今天我们还可以到网上找到IBM当年公开的这个文档，一共是396页。这个文档包含了所有的源代码、电路图以及各种寄存器的配置等。</p>\n<p data-pid=\"_2UeLkS9\">由此，带来了两个深远的影响：第一个影响是诞生了一批新兴的企业，像戴尔、康柏，以及国内的联想和长城等，因为它降低了个人电脑设计的门槛，使得很多企业都可以进入个人电脑领域找到企业发展的新空间。第二个影响是PC的价格和成本大幅降低，原来一台PC要将近一万美元,因为IBM的开源开放，PC售价降低到了1500美元，使得PC真正能进入到每家每户，并成就了一个新兴的PC市场。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bcc880a297fb9429f19d33793a6f1d7a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1832\" data-rawheight=\"1038\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bcc880a297fb9429f19d33793a6f1d7a\" data-watermark-src=\"v2-d9212c720954187c9c4879408270504a\" data-private-watermark-src=\"v2-dd16fcab167e2a76b13dca0ceaec4c80\"></p>\n<p data-pid=\"Q4Tdk17c\">开源芯片，有机会赋能一个更大的产业，即“人-机-物”融合的新兴IoT产业，而这产业规模更大。在过去几十年，面对不同的产业，不同的芯片企业是怎么去支撑的？我们发现一个有趣的现象，企业的模式越开放，所需要的资源越少，但撬动的产业却越来越大。</p>\n<p data-pid=\"6SAlYuzO\">比如，英特尔的模式是“<b>IDM+销售芯片</b>”，企业只能拿Intel的芯片做整机。这种模式可以看作是重资产模式，因此Intel需要有超过五百亿美元的营业额、上百亿美元的利润才能支撑PC产业。英伟达的模式比英特尔模式更加轻一些，采用的是“<b>Fabless+销售芯片</b>”，这种模式只要超过一百五十亿美元的营业额以及三十亿美元的利润就能去支撑AI产业。ARM采用的模式更轻，“<b>Fabless+IP授权</b>”，让其他企业去做芯片，于是ARM只需要二十亿美元左右的营业额、三亿美元的利润就能够撬动智能手机产业。</p>\n<p data-pid=\"ZByx3yb3\">我们研判，未来通过开源芯片，把IP、开发工具都进行实现开源开放，通过开芯院这样不追求利润的非盈利机构，通过众筹形成大约两亿美元左右研发经费，让技术持续迭代发展，那就有可能赋能一个更大的产业，让更多的企业具备根据场景需求快速定制芯片的能力。因此我们判断，开源芯片会有一个非常好的前景。</p>\n<p><img src=\"https://picx.zhimg.com/v2-ffe2689887bbbe3fa15d72830dce0ed8_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1832\" data-rawheight=\"1036\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ffe2689887bbbe3fa15d72830dce0ed8\" data-watermark-src=\"v2-8b8c8fc1f43e2b66743c4d30b2e7da0d\" data-private-watermark-src=\"v2-81d32c0d9858d42dee3884355c9404e6\"></p>\n<p data-pid=\"ObQsDyOS\">总结来看，开源芯片能够赋能新兴产业，同时开源芯片也是帮助我们去应对目前全球供应链安全问题的一个有效途径，是实现科技普惠世界的一种途径。</p>\n<p><img src=\"https://pica.zhimg.com/v2-3db995d773e0f94511f8560ed2fac5a0_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1830\" data-rawheight=\"1038\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3db995d773e0f94511f8560ed2fac5a0\" data-watermark-src=\"v2-7a4717bdaa1809828e9bd99de51a2072\" data-private-watermark-src=\"v2-1c540407f432027dfc2ff4db62777322\"></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bao-yun-gang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">包云岗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/357557401/answer/2828629042?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">13 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/349248127?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">与ARM相比，RISC-V有什么优势？</a><br><a href=\"http://www.zhihu.com/question/450092365?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么RISC-V将超越ARM？</a><br>\n","link":"http://www.zhihu.com/question/357557401/answer/2828629042?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报：英伟达发布 RTX 4070 Ti、英特尔推出 13 代酷睿移动版处理器等","date":"2023-01-04 01:05:40","description":"戴尔推出 UltraSharp 32 显示器，Windows 7/8.1 的相关更新支持即将终止等。<a href=\"https://sspai.com/post/77608\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/77608"},{"title":"好照片也能「好便宜」，收下这份普通家庭也能游刃有余的相机推荐","date":"2023-01-03 09:03:08","description":"关于低成本摄影的心态问题，其实最重要的一点就是「不被裹挟」，摄影器材毕竟是创作的工具，硬件本身的加持远远没有创作者个人的眼光与创作力重要。<a href=\"https://sspai.com/post/77560\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/77560"},{"title":"一日一技 | 两种方法让 Windows 10 也能运行 Android 应用","date":"2023-01-03 06:30:00","description":"我就是要在 Windows 10 上用 Windows Subsystem for Android。<a href=\"https://sspai.com/post/77582\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/77582"},{"title":"动画《中国奇谭》开播，第 1 - 2 集有哪些关注点？","date":"2023-01-03 03:30:40","description":"\n<p data-pid=\"tBhcI79H\">《中国奇谭》第2集《鹅鹅鹅》有哪些看点？</p>\n<p data-pid=\"8HcAHwoA\">看点一，这些年《天书奇谭》里的阿拐去哪了？《鹅鹅鹅》有答案。</p>\n<p><img src=\"https://pica.zhimg.com/v2-c617a89b20ffe2ea0a49c1894da89329_720w.jpg?source=b1748391?rss\" data-caption=\"《天书奇谭》阿拐与《鹅鹅鹅》狐狸公子\" data-size=\"normal\" data-rawwidth=\"1589\" data-rawheight=\"925\" data-watermark=\"watermark\" data-original-src=\"v2-c617a89b20ffe2ea0a49c1894da89329\" data-watermark-src=\"v2-ac2ef3e4aa39b021003b502b407588d5\" data-private-watermark-src=\"v2-e1f4cfe123da4942bd87a1b89d74544e\"></p>\n<p data-pid=\"Rq4c3tbD\">《天书奇谭》是给无数观众带来快乐的经典动画作品，里面的人物也深入人心，作为《鹅鹅鹅》的导演，我也是看着《天书奇谭》成长的，尤其对爱吃烧鸡的瘸腿狐狸阿拐，记忆犹新，阿拐几乎承担了我在物质不丰富时期对美食的所有想像，因此，在《鹅鹅鹅》中我们特意加了一个小细节，就是狐狸公子吃掉了货郎的两只鹅，原著里面是没有吃鹅这个动作的，算是一种跨越时空的致敬吧，太爱《天书奇谭》了，太喜欢阿拐了。</p>\n<p><br></p>\n<p data-pid=\"ZUYh7oUL\">看点二，一个中国古代快递小哥的奇遇。</p>\n<p><img src=\"https://picx.zhimg.com/v2-104e3870428937654adfdf4401c2cf72_720w.jpg?source=b1748391?rss\" data-caption=\"《鹅鹅鹅》中的古代快递员---货郎\" data-size=\"normal\" data-rawwidth=\"4096\" data-rawheight=\"1704\" data-watermark=\"watermark\" data-original-src=\"v2-104e3870428937654adfdf4401c2cf72\" data-watermark-src=\"v2-3425fa76de15ae4e21a6d89bd1a89ca8\" data-private-watermark-src=\"v2-10438fea7c0998113a365ef9d2f604ed\"></p>\n<p data-pid=\"nYuhj0HC\">《鹅鹅鹅》故事主人公是个货郎，这在原著中是没有这个设定的，我们在创作之初就在思考，如果就是个没有背景的古代年轻人，实在也太单薄了，于是翻看各类明清时期的话本，发现出现多的身份就是书生，但我们又觉的书生大家太熟悉了，于是想到一个很现实的问题，这些书生，如果没有富有的家庭做支撑，靠什么养活自己，于是想到了古代的货郎这个职业，除了贩售各种生活用品，还会兼职在多地之间转递物品、书信甚至是口信，这让我们眼前一亮，一个古代的快递员，会经历怎样的一天呢？《鹅鹅鹅》中寻找答案。</p>\n<p><br></p>\n<p data-pid=\"yZnJCu1F\">看点三，有一点点小恐怖的志怪之美。</p>\n<p data-pid=\"bIwZqmub\">志怪小说是中国古典文学宝库中一颗璀璨的明珠。短小精干的体量，天马行空的想象力，乖张荒诞的情节，极具个性有不失含蓄的美感。这些志怪小说的特点都是《鹅鹅鹅》这个作品想要给大家呈现的，《鹅鹅鹅》不是一个简单的二元对立的故事，而是一个志怪故事。根据原著《阳羡书生》里的描写，这个世界里的角色都是把自己的心上人，放在自己的口腹之中的，想念了就直接从口中请出，这当然是一种戏剧性的荒诞笔法，但也足见古人的比喻事件大开大合的惊人笔法；再说说志怪小说的含蓄之美，当主人公货郎阅览人心的深不见底、背有凉意的时候，狐狸公子收拾起身，长衣作别，没有一丝的拖泥带水，在大片的留白之中我们才体会那瞬间失去即是永远的人生感。这些都是志怪小说所特有的艺术魅力。也是一直启发着《鹅鹅鹅》创作的动力与追求。</p>\n<p><br></p>\n<p data-pid=\"ohOKhBTS\">看点四，中国山水之美——米氏云山。</p>\n<p><img src=\"https://picx.zhimg.com/v2-0371393ab20bda43df795267858b1cd5_720w.jpg?source=b1748391?rss\" data-caption=\"米友仁《潇湘奇观图》\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"735\" data-watermark=\"watermark\" data-original-src=\"v2-0371393ab20bda43df795267858b1cd5\" data-watermark-src=\"v2-8f3a3e64ef545635eca9c620f9a58f13\" data-private-watermark-src=\"v2-b364c2a3352719809cf5a7e98d3d27a7\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-5d1334acbc90d97e3e1a01bacd9e49d7_720w.jpg?source=b1748391?rss\" data-caption=\"《鹅鹅鹅》仿米氏云山\" data-size=\"normal\" data-rawwidth=\"5023\" data-rawheight=\"1714\" data-watermark=\"watermark\" data-original-src=\"v2-5d1334acbc90d97e3e1a01bacd9e49d7\" data-watermark-src=\"v2-671ccbf4d890ff2c34cc51bca4869127\" data-private-watermark-src=\"v2-ae3e25bfece016523305d49295f3e760\"></p>\n<p data-pid=\"SS4i4J5d\">《鹅鹅鹅》这个作品的视觉呈现，是相当风格化的，虽然是用素描的方法进行绘制，但素描之法最多算作“用”，其内在的核心，也就是“体”，是中国水墨山水画，可谓“山水为体，素描为用”。这种画风并非临时起意，而是源自于我少年时期学习国画的经历，在众多画派当中，独爱米氏云山那大气、神秘、且含蓄细腻的美，米氏云山中，又独爱米友仁的笔墨，实在是情有独钟，为此做了很多的尝试，终于用一种比较质朴的方式将米氏云山之美呈现在了画面中，虽然比较笨拙，但也算是向中国水墨发起了一次小小的致敬，这么美的中国水墨，谁又能不爱呢。</p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/hu-rui-21-38?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">胡睿</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/576059467/answer/2827032927?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">151 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/576059459?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">动画《中国奇谭》开播，其中都有哪些看点值得分享？</a><br><a href=\"http://www.zhihu.com/question/576098703?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">动画《中国奇谭》开播，你对该动画有哪些评价？</a><br>\n","link":"http://www.zhihu.com/question/576059467/answer/2827032927?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"搭在乐高积木上的机械键盘：MelGeek Pixel 开箱体验","date":"2023-01-03 03:04:50","description":"Pixel 积木键盘的整个包装，都给人一种「这是一份好玩的礼物」的感觉，这符合这把键盘创意、好玩的产品定位，也符合它作为一把售价 1699 的昂贵机械键盘的「礼物属性」。<a href=\"https://sspai.com/post/77589\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/77589"},{"title":"派早报：Dark Sky 停止运营、海信 Hi Reader Pro 发布等","date":"2023-01-03 00:38:08","description":"iPhone 14 系列之前机型保外电池服务费用将增加，多亲 Qin3 系列手机开启预购等。<a href=\"https://sspai.com/post/77585\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/77585"},{"title":"无垠 2022 年度总结","date":"2023-01-02 17:14:32","description":"\n<p>依然是忙碌的一年，晚了几天，2022 的年度总结终于还是写完了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2022 年 12 月 31 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,399 (<span>-9.2%</span>)，年 PV 55,460 (<span>-18.07%</span>)，日均 UV 72.33，平均停留时间 3分31秒 (<span>-1.4%</span>)，平均跳出率 60% (<span>-9.1%</span>)。一年有效文章数 1，新增评论 33 条 (<span>-69.72%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/blog.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/blog.jpg\" alt=\"\" width=\"800\" height=\"773\" class=\"aligncenter size-full wp-image-2677\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/blog.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/blog-300x290.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/blog-768x742.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>在八月 MDx 被 wpjam 推荐了，访问量有两天大幅上涨；在九月底十月初的几天似乎我的统计域名在大陆被临时屏蔽了，几乎没有获取到统计数据。</p>\n<p>2022 忙碌于进一步求学等事情，并没有更新太多文章，评论区也没有怎么维护，导致数据全部下滑。算上去年欠下的文章，实际上现在有五篇写了一半的文章在我的草稿箱里，希望可以尽快完成吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 1,734 (<span>-50.67%</span>)，总 PV 2,195 (<span>-44.13%</span>)，日均 UV 4.75，平均停留时间 49秒 (<span>-10.91%</span>)。访问的主要来源是知乎，WordPress.org 和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/axton.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/axton.jpg\" alt=\"\" width=\"800\" height=\"765\" class=\"aligncenter size-full wp-image-2678\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/axton.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/axton-300x287.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/axton-768x734.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据发生了大幅下滑。</p>\n<h2>MDx</h2>\n<p>很遗憾，尽管 MDx 得到了 wpjam 的推荐，2022 年 MDx 并没有得到我足够的关注。在这一年中，MDx 更新了 0 次，新增 3 commits。还是希望等这阵子忙完，明年可以把更多的时间花在维护 MDx 上，尽快更新新的版本。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<h1>2022 大事记</h1>\n<p>2022 真的做了很多事。不过由于年中手机损坏，丢失了半年的照片，下面的列表大概确实遗漏了几件事。2022 主要是把停滞了一阵子的摄影爱好重新捡了起来，但遗憾并没有在开源领域投入太多时间。希望 2023 年我可以进一步平衡不同事情上花的时间。</p>\n<ul>\n<li>三月：MDx 喜提 800 Stars</li>\n<li>四月：第二次前往爱丁堡，不经意拍下了我今年最喜欢的照片之一</li>\n<li>六月：在考试周期间用了三年的 OnePlus 7 Pro 突然暴毙，丢了一堆照片，滚去 iOS 了</li>\n<li>六月：第一次申请申根签证，贵（</li>\n<li>六月：第一次前往西班牙，热成傻逼（没写游记，懒）</li>\n<li>六月：第一次跳伞！（当然有教练带）</li>\n<li>六月：一个暑假同时做了一个实习和一个 Research，累成傻逼</li>\n<li>七月：第一次求到英国邮戳</li>\n<li>七月：迫于开发需求，狂暴购入 Pixel 6 一台，这下双持了</li>\n<li>七月：第一次跨国寄信</li>\n<li>八月：第一次前往法国，只在巴黎呆了两天</li>\n<li>八月：第一次前往瑞士，在少女峰下休息了三天，并第一次摔坏了镜头（详情见<a href=\"https://flyhigher.top/diary/2639.html\">这篇文章</a>）</li>\n<li>八月：然后阳了（</li>\n<li>八月：MDx 被 wpjam 推荐</li>\n<li>九月：卖了全部的摄影装备，然后第一次升级到全画幅（在 ebay 上捡漏的二手尼康 Z 6）</li>\n<li>九月：在威尔士拍到了我目前拍的最好的星空和银河</li>\n<li>十月：尽管胶片大涨价，但想拍反转胶片的心突然死灰复燃；胶片机不在身边，于是在 ebay 上从日本狂暴购入尼康 F80S 全自动胶片机，重新拍起了胶片</li>\n<li>十二月：MDx 喜提 900 Stars</li>\n<li>十二月：第二次前往瑞士，在马特洪峰下住了五天，拍了一堆照片，还在雪里打了滚（参阅上面的游记）</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-9-12-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-9-12-wm.jpg\" alt=\"威尔士滕比的星空，我目前拍得最好的银河\" width=\"1523\" height=\"2500\" class=\"aligncenter size-full wp-image-2673\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-9-12-wm.jpg 1523w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-9-12-wm-183x300.jpg 183w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-9-12-wm-624x1024.jpg 624w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-9-12-wm-768x1261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-9-12-wm-936x1536.jpg 936w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-9-12-wm-1248x2048.jpg 1248w\" sizes=\"(max-width: 1523px) 100vw, 1523px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-6-5-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-6-5-wm.jpg\" alt=\"西班牙圣家堂\" width=\"1667\" height=\"2500\" class=\"aligncenter size-full wp-image-2670\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-12-5-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-12-5-wm.jpg\" alt=\"去看了飞机，胶片拍摄\" width=\"1707\" height=\"2500\" class=\"aligncenter size-full wp-image-2674\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-12-5-wm.jpg 1707w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-12-5-wm-205x300.jpg 205w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-12-5-wm-699x1024.jpg 699w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-12-5-wm-768x1125.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-12-5-wm-1049x1536.jpg 1049w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-12-5-wm-1398x2048.jpg 1398w\" sizes=\"(max-width: 1707px) 100vw, 1707px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-9-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-9-wm.jpg\" alt=\"采尔马特的日落\" width=\"1584\" height=\"2500\" class=\"aligncenter size-full wp-image-2591\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-9-wm.jpg 1584w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-9-wm-190x300.jpg 190w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-9-wm-649x1024.jpg 649w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-9-wm-768x1212.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-9-wm-973x1536.jpg 973w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-9-wm-1298x2048.jpg 1298w\" sizes=\"(max-width: 1584px) 100vw, 1584px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1705.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1705.jpg\" alt=\"徒步最后变成在雪里打滚\" width=\"2400\" height=\"1554\" class=\"aligncenter size-full wp-image-2609\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1705.jpg 2400w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1705-300x194.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1705-1024x663.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1705-768x497.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1705-1536x995.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1705-2048x1326.jpg 2048w\" sizes=\"(max-width: 2400px) 100vw, 2400px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-4-11-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-4-11-wm.jpg\" alt=\"目前我最喜欢的照片，爱丁堡\" width=\"1633\" height=\"2500\" class=\"aligncenter size-full wp-image-2669\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-4-11-wm.jpg 1633w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-4-11-wm-196x300.jpg 196w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-4-11-wm-669x1024.jpg 669w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-4-11-wm-768x1176.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-4-11-wm-1003x1536.jpg 1003w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-4-11-wm-1338x2048.jpg 1338w\" sizes=\"(max-width: 1633px) 100vw, 1633px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2403-scaled.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2403-scaled.jpg\" alt=\"2022 我最喜欢的照片之一，瑞士格林德瓦\" width=\"1648\" height=\"2560\" class=\"aligncenter size-full wp-image-2628\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2403-scaled.jpg 1648w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2403-193x300.jpg 193w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2403-659x1024.jpg 659w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2403-768x1193.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2403-989x1536.jpg 989w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2403-1319x2048.jpg 1319w\" sizes=\"(max-width: 1648px) 100vw, 1648px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-9-5-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-9-5-wm.jpg\" alt=\"2022 我最喜欢的星空照片，威尔士滕比\" width=\"1750\" height=\"2500\" class=\"aligncenter size-full wp-image-2672\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-9-5-wm.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-9-5-wm-210x300.jpg 210w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-9-5-wm-717x1024.jpg 717w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-9-5-wm-768x1097.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-9-5-wm-1075x1536.jpg 1075w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/2022-9-5-wm-1434x2048.jpg 1434w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<h1>跨年红包</h1>\n<p>最近实在太忙，请容许我摸一摸。我知道去年的题解甚至都还没有发布，我会尽量赶在春节前发布去年题解并更新今年的谜题。</p>\n<h1>跨年海报</h1>\n<p>还是传统艺能，今年的海报只用到了 PS，胡乱整了点。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/26.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/26.jpg\" alt=\"\" width=\"2500\" height=\"1768\" class=\"aligncenter size-full wp-image-2664\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2023/01/26.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/26-300x212.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/26-1024x724.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/26-768x543.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/26-1536x1086.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2023/01/26-2048x1448.jpg 2048w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>那么祝各位（迟到的）2023 年快乐！</p>\n","link":"https://flyhigher.top/diary/2662.html"},{"title":"幕后 | 一款热门三消游戏的背后：对话 3 Tiles 开发团队","date":"2023-01-02 07:00:39","description":"少数派联系到了热门 3 消游戏作品 3 Tiles 的开发团队 Appsulove，和他们一起探讨了对于如何做好一款游戏的诸多经验与见解，以及对于众多模仿者的相关看法。<a href=\"https://sspai.com/post/77575\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/77575"},{"title":"如何评价动画《大理寺日志》第二季第八集？","date":"2023-01-01 09:07:11","description":"\n<p data-pid=\"srJwS0Px\">大家好，我是大理寺日志的导演槐佳佳，很高兴在2022年的最后一天可以在知乎这个平台继续跟大家分享制作时的心路历程。</p>\n<p><img src=\"https://pica.zhimg.com/v2-3a6ddf6283523bec05660b56c33da66b_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2388\" data-rawheight=\"1668\" data-watermark=\"watermark\" data-original-src=\"v2-3a6ddf6283523bec05660b56c33da66b\" data-watermark-src=\"v2-cc784e10f2314ffdded42edb54d5ec54\" data-private-watermark-src=\"v2-e9b8a3e1fd883dff45d02c16bdfd8aef\"></p>\n<p data-pid=\"uFBDnrPJ\">相信看了第八集的观众朋友们应该对少卿的再度猫化以及孙豹脑内的恋爱剧情是有很深刻印象的。这些表达一部分是为了继续给予第二季一些轻快活泼的元素，一部分可以理解为暴风雨前的宁静祥和。</p>\n<p><img src=\"https://picx.zhimg.com/v2-b896008df6061067b424aa89e910f4c7_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2388\" data-rawheight=\"1668\" data-watermark=\"watermark\" data-original-src=\"v2-b896008df6061067b424aa89e910f4c7\" data-watermark-src=\"v2-0c5d4ecfb170ad9c1799f2d436ae8c6f\" data-private-watermark-src=\"v2-9b2c4677e56a02a144e383b868b46b0c\"></p>\n<p data-pid=\"DK3IajRj\">在入地牢之前，陈拾的一段对白是可以串联第三集中二人去博州路上的艰辛，陈拾作为少卿的随身书吏，他对于少卿的关心和照顾，经历了很多困难亲眼看到了博州的惨状后，以为回洛阳可以严惩丘神纪，但是却又要去地牢的那种为少卿不平的心理。而卢大人说凡事做大事的人，就不能太计较得失。有时候，甚至连个人的荣辱也得放下。你穿着这身官府就得明白这个道理。这句话也不仅仅是在对陈拾进行说教。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bbf19124316841a7b66d882de11a23e0_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2388\" data-rawheight=\"1668\" data-watermark=\"watermark\" data-original-src=\"v2-bbf19124316841a7b66d882de11a23e0\" data-watermark-src=\"v2-2430335c7cb0818d2d3b47dcf8fce32d\" data-private-watermark-src=\"v2-472c32083743397c3a364b7501f306cb\"></p>\n<p data-pid=\"dzyCENcB\">众所周知，大理寺如果不画一些少卿没吃药的环节，就会觉得少了一点什么。所以我们制作这段戏的时候，想的是如何超越第一季的“闹猫”画面，希望大家可以喜欢吧。同样，比较中性的太平公主在这一集里与孙豹的交集，会让大家看到太平心中比较少女比较柔软的一面。然后孙豹脑内的伊甸园画面以及去询问姻缘是我们想着重强调孙豹这种男生对于喜欢的女生的反应，用这种反应做出反差视觉，让观众看完可以留下更多印象。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b24045f9caee6e238b1528ed228c2ca9_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2388\" data-rawheight=\"1668\" data-watermark=\"watermark\" data-original-src=\"v2-b24045f9caee6e238b1528ed228c2ca9\" data-watermark-src=\"v2-0ff91cbe6dac4e0aa925560f20e3c217\" data-private-watermark-src=\"v2-b0888f99c1451347a53dc987fafb5f39\"></p>\n<p data-pid=\"tS52kMuD\">借用微博用户给我们的一句留言，“杀我别用小包刀”。对于回忆里，丘神纪与小李包的过往在第八集里是铺垫，是交代一些过去的事情，给大家明晰出一条情感线。后续会给出一个属于这段情感的答案。</p>\n<p><img src=\"https://picx.zhimg.com/v2-5a32ac9814acbf112bd2172a25b2bdfa_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2388\" data-rawheight=\"1668\" data-watermark=\"watermark\" data-original-src=\"v2-5a32ac9814acbf112bd2172a25b2bdfa\" data-watermark-src=\"v2-a394644b8d1bb9f74fc7daaf858014a0\" data-private-watermark-src=\"v2-0aca8b95a50dd5c7cac5d0481b0fb906\"></p>\n<p data-pid=\"OhYCLHzI\">希望大家可以继续支持好传支持大理寺日志，2022年要过去了，我们2023年第9集再见吧。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/hadj-46?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">槐佳佳</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/575907778/answer/2823953519?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/571607535?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价动画《大理寺日志》第二季第五集？</a><br><a href=\"http://www.zhihu.com/question/574344418?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价动画《大理寺日志》第二季第七集？</a><br>\n","link":"http://www.zhihu.com/question/575907778/answer/2823953519?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"设计实战分析：用两天完成一次线下活动的物料设计","date":"2023-01-01 09:06:28","description":"我们在直播回放视频的基础上，为各位整理了内容梗概和知识点，配合时间戳可在视频中直接找到相应内容。<p>[......]</p>\n<a href=\"https://sspai.com/post/77572\" target=\"_blank\">查看全文</a><p>本文为付费栏目文章，出自<a href=\"https://sspai.com/series/269\" target=\"_blank\">《100 小时后请叫我设计师》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/post/77572"},{"title":"少数派 2022 年度征文：高分创作，年度悬赏","date":"2022-12-31 16:00:00","description":"最高 10 倍稿酬相送，悬赏好文章。<a href=\"https://sspai.com/post/77562\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/77562"},{"title":"2023: 新年快乐 &amp; 博客总结","date":"2022-12-29 16:00:00","description":"\n<p>这一年对于我来说过的非常快，同时，也是很不平凡的一年。同样，今年也是 Blog 的第三年了。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8F%8B%E9%93%BE\" class=\"headerlink\" title=\"友链\"></a>友链</h2>\n<p>在这一年中，YFun's Blog 友链数量（不包括本站站点）为 9 个，其中很多都是大佬 (\\=!!</p>\n<p>其中，<a href=\"https://dusays.com/\">杜老师说</a> 最活跃力！</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0\" class=\"headerlink\" title=\"文章\"></a>文章</h2>\n<p>在 2022 年中，YFun's Blog 发布 6 篇文章。</p>\n<p>其中，在 1 月 14 日到 8 月 4 日之间<strong>整整咕了七个月</strong>（</p>\n<p>今年水了两篇文章，其余的自认为质量还行。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>与去年相同，YFun's Blog 依然在使用自己开发的 <a href=\"https://github.com/oCoke/hexo-theme-miracle\">Theme Miracle</a>.</p>\n<p>今年 Miracle 已经迭代到 <code>v2.2.1</code> 版本，主要在修 Bug 和提升体验<del>（比如高斯模糊又加回来了</del></p>\n<p>目前，我正在使用 ESHexoN 编辑，如果想了解更多信息，可以看这篇文章：<a href=\"https://blog.yfun.top/posts/2022/eshexon/\">抛弃静态博客的缺点，用 ESHexoN 在线编辑！</a></p>\n<p>此外，还有一个项目可能会在 2023 年初加入到 YFun's Blog 上，那就是 <a href=\"https://detalk.js.org/\">Detalk.js</a>。我尝试用它实现自定义性更强的评论系统。</p>\n<p>现在，Detalk 已具备基础功能，感兴趣的同学可以试用一下（（</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E7%BB%9F%E8%AE%A1\" class=\"headerlink\" title=\"统计\"></a>统计</h2>\n<p>与去年一样，今年的数据是：<code>N/A</code>。</p>\n<p>虽然 Cloudflare Web Analytics 在 2021 年 4 月份启用，但后来又将统计代码去除。所以关于本站的统计信息一直是个谜。</p>\n<p>关于这一点，我有计划加入开源统计系统。</p>\n<blockquote><p>我希望是一款<strong>不会侵犯用户隐私</strong>、<strong>不收集用户指纹信息</strong>的统计系统，目前考虑 <a href=\"https://umami.is/\">umami</a>.</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%AA%E6%9D%A5\" class=\"headerlink\" title=\"未来\"></a>未来</h2>\n<p>我希望有时间可以重构这个 Blog，计划使用 <code>Vue 3 + Nuxt.js + TypeScript</code>。当然，这只是个计划。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<p>这个世界变化太快，我们生活中的每一秒都是在见证历史。</p>\n<p>2022 已经过去，欢迎 2023 的到来，希望新的一年中，一切会变得更好。</p>\n","link":"https://blog.yfun.top/posts/2023/"},{"title":"《回来的女儿》第二集中播放的《魔方大厦》是第几集，说的什么内容？","date":"2022-12-29 06:34:44","description":"\n<p data-pid=\"jvCJj9O8\">做一下小列文虎克。</p>\n<p data-pid=\"olM8t_be\">前面播出的画面都是《魔方大厦》的OP，分辨不出来到底是哪一集。</p>\n<p><img src=\"https://picx.zhimg.com/v2-0f52bc7cfa250a2efa65f01fa4d088cb_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2560\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-0f52bc7cfa250a2efa65f01fa4d088cb\" data-watermark-src=\"v2-208720891c91d8cbff7299df085fcd2f\" data-private-watermark-src=\"v2-234fdad343ca2e1ad776b453cb75417d\"></p>\n<p data-pid=\"3Q7WCCyf\">但是在陈佑希去接电话的时候，我们看到了这样的画面。</p>\n<p><img src=\"https://picx.zhimg.com/v2-f593bb0bd46b8218d887120239b060af_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"271\" data-watermark=\"original\" data-original-src=\"v2-f593bb0bd46b8218d887120239b060af\" data-watermark-src=\"v2-12b59e8aa8b921d7920541f9aab0de8f\" data-private-watermark-src=\"v2-b095ce23235baf4d6f76792c6f85a65a\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-526431500c347301cd4729137e16f1dc_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"144\" data-rawheight=\"169\" data-watermark=\"original\" data-original-src=\"v2-526431500c347301cd4729137e16f1dc\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"9HKgytsY\">很明显就是第一集《玻璃城》的开头。</p>\n<p><img src=\"https://pica.zhimg.com/v2-0e04910b2fa5bebfef8661c2a4b0fa01_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"559\" data-watermark=\"original\" data-original-src=\"v2-0e04910b2fa5bebfef8661c2a4b0fa01\" data-watermark-src=\"v2-4bb3507f8287b38752c98c9adcbbd8e7\" data-private-watermark-src=\"v2-12dfc3a20c84cccedb565bd05c4d7c57\"></p>\n<p data-pid=\"jLjTbAr-\">如果只到这里就结束了，也太简单了。我们在第一集中还能发现几个更加细节的部分：</p>\n<p data-pid=\"hxNrC2_Y\">1、魔方大厦的方国里，每过去1天，外面地球才过去1秒。也就是说，只要莱克愿意，他可以在魔方大厦过一辈子，出魔方大厦之后依然是小时候的模样。</p>\n<p data-pid=\"RSlVcqOl\">这个细节很快就在第三集《神奇的日历》中被回应了，这里需要注意的是，该集的小说和动画版差异很大。</p>\n<p data-pid=\"QCqilq2k\">2、在莱克进入魔方大厦之前，他出现了严重的声画不同步，也就是说我们认知里莱克的自言自语其实并没有出现口型，进而可以推断他在那一部分中是自呓状态。</p>\n<p data-pid=\"5Vy8aWIV\">这在《回来的女儿》里正好对应了李文卓的特质，由于他是傻子，同时需要保有很多“不能告诉别人的秘密”，所以也会尽可能少的与其他人对话。</p>\n<p data-pid=\"FoPFYGHK\">3.动画里的玻璃城剧情与小说也有差别，动画里的玻璃城里的人并不是透明人，而只是玻璃人。也就是说动画版本的特质并不是“真实”而是“易碎”。</p>\n<p data-pid=\"-Knlh0rN\">《回来的女儿》里所构筑的看似温馨的家庭，以及家庭里的众人各自为了自己目标貌合神离生活的模样，正是易碎的生活状态。</p>\n<hr>\n<p data-pid=\"rdoVLeGd\">顺便提一句，这集的《魔方大厦》还有出现了一个插曲，我没找到曲名，歌词大概是这样的（后面半句听不太清楚）：</p>\n<blockquote data-pid=\"YfNUZvTK\">怨你也容易 怨我也容易 太阳照亮了我们 温暖所有的心灵<br>献出你的友谊 换取我的神奇 用内心的温暖 指尖传递为荣</blockquote>\n<p data-pid=\"9L5YvtqT\">如果有心的朋友会发现，《回来的女儿》里只有李承天家的地板长下图这样，是由复数个马赛克拼贴而成的。虽然这也是上个世纪末期中国家庭地砖装修的常见风格，但是依然与《魔方大厦》形成相似的拼贴感，也就是彭罗斯镶嵌。</p>\n<p><img src=\"https://pica.zhimg.com/v2-7a36e5fad32ce8f0b69d900ae6000884_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1294\" data-rawheight=\"413\" data-watermark=\"original\" data-original-src=\"v2-7a36e5fad32ce8f0b69d900ae6000884\" data-watermark-src=\"v2-890fd1aea209af1bdff0a545b8e8a4aa\" data-private-watermark-src=\"v2-44e1bd1bc275a97b7b7402f8b8994970\"></p>\n<p data-pid=\"81lDPymJ\">彭罗斯镶嵌本质上就是无限延展的周期画面，在《魔方大厦》每集的开头播放的动画里，转动的魔方也是另一种程度的彭罗斯镶嵌。所以可以从另一个角度看，魔方大厦的中心就是李家，而以他们家为视角可以看到20世纪末期的当时社会的其他怪状：既有港风的涌入，也有下岗与下海的变迁，有被拐卖的走失的孩子，也有针灸与气功热。我们能在很多现代中式恐怖游戏里看到端倪。</p>\n<p data-pid=\"yJedMQDv\">在故事的第2-3集里，伪装的家庭关系沉浸在一派温情脉脉的画风中，走失又回来的假女儿，名为李文卓其实是王重江的儿子，扑朔迷离的小秀真相。而在故事的第10话，经历过被关进精神病院、与程威、李承天一起误杀王重江的陈佑希，与这些人又形成了别样的微妙关系。</p>\n<p data-pid=\"cTXB1Ko0\">为了加强这种迷幻感，房屋的布景也在有意无意地营造拼贴意识，下图是第10话听到王重江去世消息的廖穗芳的视角，我们看到从窗格到门屏再到远处的建筑，都有密密麻麻的格子。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a87435e82938d6fd802cde079a40925c_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"391\" data-watermark=\"original\" data-original-src=\"v2-a87435e82938d6fd802cde079a40925c\" data-watermark-src=\"v2-6467645721f3a2c1989a64b4ca952d2f\" data-private-watermark-src=\"v2-7e87c0e75bf92bd21ff64ecea0998157\"></p>\n<p data-pid=\"24wjOOCy\">看过《回来的女儿》的朋友还会发现剧集里有大量的窥视镜头，它不属于任何角色的主观视野，而是处在一种旁观视角，仿佛观众时刻处于一种魔方外的冷眼旁观的感觉中。更多的原因是该剧里有大量的相互偷听的场景。</p>\n<hr>\n<p data-pid=\"xXNUktGy\">回到《魔方大厦》里的玻璃城故事。</p>\n<p data-pid=\"cKlG0QF1\">动画里很简单，玻璃城一片狼藉是因为莱克摔的魔方所致。18分钟的动画里，前三分之一是铺垫魔方大厦的设定，后面三分之一是莱克治好了众人，那么中间三分之一是什么呢？是警察在冰面上和莱克的追逐戏。</p>\n<p data-pid=\"WxECAWGD\">小说里用高温修复玻璃人的办法是医院提出来的，而动画里则是由被关进玻璃棺材里的莱克所提出来的，于是就形成了该片的一个经典童年阴影。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8d9d3f3b72f955ca5a7220d6a1c2ea27_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"664\" data-watermark=\"original\" data-original-src=\"v2-8d9d3f3b72f955ca5a7220d6a1c2ea27\" data-watermark-src=\"v2-5e399c503ba81586d41f74f102670c1a\" data-private-watermark-src=\"v2-29021bf141149aa97edc22c40540a97d\"></p>\n<p data-pid=\"f-RFd9PA\">在这一段里，莱克还说出一句经典的话：<b>别瞎说，我妈可爱我了</b>。——这也是李文卓的性格特质。</p>\n<p data-pid=\"kqA7zP5a\">在《玻璃城》里还有很多剧情与《回来的女儿》形成了很多的呼应，不过也就与《魔方大厦》后续的故事没有关系了。</p>\n<p data-pid=\"8STjZBGR\">顺便提一句，该动画的造型设计师是速泰熙，同时也是《大耳朵图图》的原创造型，我们也能看到图图与乐乐乐的相似之处。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/dandoliya?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">乌合之子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>延伸阅读：<br><a href=\"http://www.zhihu.com/question/574846363?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《回来的女儿》有没有能理清剧情的具体时间线？</a><br><a href=\"http://www.zhihu.com/question/576299522?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《回来的女儿》剧情最大的硬伤是什么？</a><br>\n","link":"http://www.zhihu.com/question/574824753/answer/2820936216?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"《回来的女儿》中频繁提起的《魔方大厦》究竟是怎样的动画，为什么会成为大家的童年阴影？","date":"2022-12-28 10:10:37","description":"\n<p data-pid=\"EP1eYPmJ\">我觉得首先要说一下《回来的女儿》里为什么会提到《魔方大厦》，然后再展开说这部作品到底是怎么回事——熬夜看完26个小说故事的我是屑——看完才发现原来李文卓他们根本看的就是动画嘛。</p>\n<p data-pid=\"4hrcG_NW\">《回来的女儿》中涉及到《魔方大厦》的部分其实只有第一话《玻璃城》。</p>\n<p data-pid=\"r3si0aDi\">李文卓明确说是玻璃城的医生把李文文带走了，所以从中推理，一定是某种相似的情节被互文了。</p>\n<p data-pid=\"jG8QHlQt\">故事的第八集基本已经对上号了。</p>\n<p data-pid=\"cLshDaA5\">李文卓反复看他的童年动画《魔方大厦》，也特别喜欢，经常和好朋友一起扮演其中的角色，他经常说的话是魔方大厦的秘密不能与其他人说，只能和魔方大厦里的人说，也就是只能和能对得上电波的人交流，那就是李文文和小秀。</p>\n<p data-pid=\"UtGmzgBC\">自此与魔方大厦有关的所有隐喻都清楚了。</p>\n<p data-pid=\"eoFAVBzr\">被关着无法出门的莱克就是李文卓，但他知道妈妈是爱他的。<br>当然玻璃城里的人也是李文卓，因为只有他是绝对透明的真诚的人。<br>魔方的中心就是洗衣机——当一切都“旋转”起来的时候，谜团也就解开了——李文文被肢解为碎块了。<br>玻璃城的医生带走的话，就是将已经被肢解的玻璃人重新组装起来。这段内容不一定是真实发生的，而是廖穗芳借动画剧情给李文卓圆谎用的。</p>\n<p data-pid=\"eBo-N7Le\">也可能是被王重江用针灸的方式重新拼贴起来了，毕竟他住的别墅里二楼就是四面大大的玻璃窗，也就是玻璃城。</p>\n<p data-pid=\"13-ECEIN\">我们回到故事的最开始，李文卓遇到假扮妹妹的陈佑希，下意识把她当做自己真正的妹妹，说出的话是“妹妹，你怎么才回来”，意思是你怎么在魔方大厦里呆了太久。</p>\n<p data-pid=\"5yc8TXKr\">不过上面都是剧情衔接，下面才是我想展开的具体象征的部分。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a50e295fe5646f1e8b95a3dbc838c1ad_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"447\" data-watermark=\"original\" data-original-src=\"v2-a50e295fe5646f1e8b95a3dbc838c1ad\" data-watermark-src=\"v2-c962ffc8eff131e06b2ddce80f66070b\" data-private-watermark-src=\"v2-012a4b7d91bffda0114733137cac75df\"></p>\n<hr>\n<p><img src=\"https://picx.zhimg.com/v2-bfc1932156d88e973669eadec1070ff0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"463\" data-watermark=\"original\" data-original-src=\"v2-bfc1932156d88e973669eadec1070ff0\" data-watermark-src=\"v2-675db7afe5bb56897ecdc916d28f50d3\" data-private-watermark-src=\"v2-ec9fe095d2dbf37825c90e4d3120b284\"></p>\n<p data-pid=\"70XnR2pf\">X博士曾经写过一篇文章《魔方大厦是怎样成为你的童年噩梦》，这个文章有心的朋友自然会搜到，从这篇文章展开之后，我们会发现一个被集体记忆重写之后的事实：</p>\n<h2>那就是<b>魔方大厦其实根本不是童年噩梦</b>，而是一种失忆的时代表征，真正的童年噩梦是所处的那个年代。</h2>\n<hr>\n<p data-pid=\"CdayAdnu\">任何文艺作品都会在一定程度上反应当时当地的社会思潮，尽管看似是天马行空的想象力，但也依然构筑出一个看似不同实则紧密相关的可能世界，或者按照多列泽尔的说法，叫做<b>Heterocosmica</b>，也就是异世界。和福柯的异托邦，<b>Heterotopia</b>是同一组词。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9f92241bde9027708d88a66a427c64ea_720w.jpg?source=b1748391?rss\" data-caption=\"2019年，多列泽尔出版了《异世界三》\" data-size=\"normal\" data-rawwidth=\"354\" data-rawheight=\"504\" data-watermark=\"original\" data-original-src=\"v2-9f92241bde9027708d88a66a427c64ea\" data-watermark-src=\"v2-daed61f285af60f71632415883625df9\" data-private-watermark-src=\"v2-e766111345d20c1decde466f24acfc7a\"></p>\n<p data-pid=\"zmRwNVI7\">我们可以简单的将异世界理解为是现世界的一种扭曲变形，或者按照弗洛伊德的说法，那就是梦境的移置。也就是说，我们总能在两个看似完全不同的世界看到一些关联的蛛丝马迹，但这些关联早就被层层叠加的密码所一次次重写过了，我们很难找到现世界的某种蓦仿。</p>\n<p data-pid=\"5iXZI1CO\">但是这句话反过来说就是：如果靠直觉而不是靠规律获得了密码的人，就能很快发现而这之间的联系，就像李文卓和吕萌萌的交谈一样，<b>一句“那颗真诚透明的心”</b>。</p>\n<p><img src=\"https://picx.zhimg.com/v2-8b6a7b35fb0778c2a45c39efd70663f4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"521\" data-watermark=\"original\" data-original-src=\"v2-8b6a7b35fb0778c2a45c39efd70663f4\" data-watermark-src=\"v2-7a5a16515fb714209f51a1ba3a799f55\" data-private-watermark-src=\"v2-e3516e4a8cf21fd2098b7dc807bde777\"></p>\n<p data-pid=\"DNH9EnvE\">而《魔方大厦》的特别性就在于，借用了重重密码，构筑了一些奇特的想象世界，但无一不是在影射现实的生活。</p>\n<p data-pid=\"gZUBIHvz\">看过《镜花缘》的朋友都知道，《魔方大厦》的本质其实就是异世界大冒险，这些异世界之间毫无关系，显得非常光怪陆离，它体现出一种<b>结构化的大叙事与具象的小叙事之间的张力关系</b>。</p>\n<p data-pid=\"DuJDhVSu\">《镜花缘》有一条不能称其为主线的主线，与《格列佛游记》如出一辙，都是<b>游历</b>。早期的乌托邦世界的寻找，也都是依靠不停的游历的方式，在根系主体上牵连出一个又一个的块茎（rhizome）。</p>\n<p data-pid=\"sxTRo5uq\">这里推荐两个作品，一个是与此很相似的小说《机器人大师》，另一个是《超级工作室》中塑造的12座理想之城。</p>\n<p><img src=\"https://picx.zhimg.com/v2-1701d5ccadc6d2ffe22d3c55798ecf0f_720w.jpg?source=b1748391?rss\" data-caption=\"《机器人大师》\" data-size=\"small\" data-rawwidth=\"720\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-1701d5ccadc6d2ffe22d3c55798ecf0f\" data-watermark-src=\"v2-520c73cd95df147d276d097521722d2b\" data-private-watermark-src=\"v2-138c370e8f4d0402c7d35bc39cbcb038\"></p>\n<p data-pid=\"ofCU-n9o\">如果说《机器人大师》依然还有冒险游历的元素，那么《12座理想之城》纯粹就是借助所谓现代都市生活中常见的测验题让我们回答来掀起想象了：在你看完对这十二座城市的描述后，你希望真实存在的城市有几座？你认为这些城市对人类有任何益处吗？</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b6a9745d0e3ab5492a4f59226032737e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1808\" data-rawheight=\"2816\" data-watermark=\"original\" data-original-src=\"v2-b6a9745d0e3ab5492a4f59226032737e\" data-watermark-src=\"v2-96e6d5d1fdd7816849f996adb615d048\" data-private-watermark-src=\"v2-d6403a44a22d65553319c4c8e4c57eec\"></p>\n<p data-pid=\"8AwP_U3y\">其中正好有一段评价，非常适配《回来的女儿》与《魔方大厦》的故事。</p>\n<p><img src=\"https://picx.zhimg.com/v2-424f1483673645bdd97adf21c8e1ee24_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"764\" data-rawheight=\"325\" data-watermark=\"original\" data-original-src=\"v2-424f1483673645bdd97adf21c8e1ee24\" data-watermark-src=\"v2-8f54fabccba18ad4acb2a4c722dad856\" data-private-watermark-src=\"v2-f7f235702dbf9828c6f95c5f4a8facc8\"></p>\n<p data-pid=\"ZthWMlZs\">不断去异世界冒险这件事本身就是大冢英志所说的神魔大战（物语消费）的一种游戏式的延展，意味着地图可以无限扩大。但冒险又是具有目的性的，也就是说地图的完成本身就是冒险的完成。</p>\n<p data-pid=\"uBBiuDuY\"><a href=\"http://link.zhihu.com/?target=https%3A//www.yystv.cn/p/1693\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《魔神英雄传》：神龙斗士诞生记</a> </p>\n<p data-pid=\"Om-nfXKh\">大家耳熟能详的《魔神英雄传》就是如此，掺杂了大量的RPG元素。在游研社的文章里，也谈到了大量的互文、致敬和玩梗——这在《魔方大厦》中也大量存在，也是异世界穿越作品的鼻祖之一。</p>\n<p data-pid=\"o6XLXyis\"><b>于是无限的地图在剧情的连带之下成为了有限的空间。</b></p>\n<p data-pid=\"S-9Lovpw\"><b>我们就此把整个叙事方式翻转过来，先做出了地图的构筑，然后在展开故事，当地图内的空间完成之后，故事也就结束——重新回到现世界里。</b></p>\n<p data-pid=\"iwIgMR-A\">而在看似不同空间的冒险里，总是将现世界的某种侧面进行极端放大，成为具有强烈魔幻现实主义的叙事风格。</p>\n<p data-pid=\"1Ft0258j\">不过，如果异世界被不断游戏化之后，那么那些看似奇怪的元素最后也成为了某种不需要追问缘由的设定贴图，成为被消费的视觉奇观。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-84a1a5df1dc0d8d8cf3ecbcab04cc748_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"300\" data-watermark=\"original\" data-original-src=\"v2-84a1a5df1dc0d8d8cf3ecbcab04cc748\" data-watermark-src=\"v2-c63f13360a4a72bb4a0447d4998c3c66\" data-private-watermark-src=\"v2-5312638d31c07469b8d26cf6573f7382\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"72WJztvW\">现在，魔方大厦的故事已经被郑渊洁改成了纯粹的奇观异世界大冒险，我说的当然是歌舞剧和预备再拍的大电影，还有上面这个书的封面，简直就是光明克系拉满。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-43a72f397b9f8f231b2aa73815a3718d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"689\" data-rawheight=\"992\" data-watermark=\"original\" data-original-src=\"v2-43a72f397b9f8f231b2aa73815a3718d\" data-watermark-src=\"v2-2e5ef9e82d44eadd396caa4a4fca2655\" data-private-watermark-src=\"v2-0e497e48f083df331e53888ae7d5b6ca\"></p>\n<p data-pid=\"Nfo5yoxq\">感觉要拍成《无敌破坏王》或《失控玩家》。</p>\n<p data-pid=\"RLnbRVFr\"><b>不过彼时，《魔方大厦》还没有被RPG化，郑渊洁也拒绝用游戏写实主义的方式来写他的幻想作品（不能称其为童话，更应该被称其为幻想小说），于是魔方大厦还是保留了它强烈的时代特质。</b></p>\n<p data-pid=\"aROINcmg\">需要说明的是，《魔方大厦》也曾经被认为是中国最早的无限流小说，这个观点就见仁见智了。</p>\n<p data-pid=\"6UtxouxN\"><b>这里推荐看《魔方大厦》的连环画版，基本上按照小说原著走了一遍剧情，而且比动画版更恐怖。</b></p>\n<p data-pid=\"U0iDnvOg\"><b>漫画点击这个豆瓣链接就可以看：</b><a href=\"http://link.zhihu.com/?target=https%3A//www.douban.com/doulist/2644387/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">魔方大厦连环画全集</a> </p>\n<p data-pid=\"suK19KRL\">戴锦华在谈及魔方的时候，为魔方赋予一种全新的认知，那就是空间与阶级的折叠与区隔。</p>\n<p data-pid=\"c1FRNz5a\"><a href=\"http://link.zhihu.com/?target=http%3A//www.wyzxwk.com/Article/wenyi/2016/10/372806.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">戴锦华：空间与阶级的魔方 - 乌有之乡</a> </p>\n<blockquote data-pid=\"IJtsD1ts\">我最早给出“空间与阶级的魔方”这一命题的时候，主要的寓意是在“魔方”的意象上。我大概是中国最早接触到这一玩具的一代人。它曾经极度流行，男女老幼人手一个。<br>魔方的基本原理和绝大多数单机游戏、桌面游戏一样，是一个变混沌为秩序的过程。它是一个归纳、筛选，最终达到某种纯净，形成某种由纯净造成的美感的过程。它是不同侧面的同色、同质的组合，以及不同侧面的不同色、不同质的区隔。<br>都市，尤其是现代都市，实际上始终在尝试完成这样一个过程：区隔异质性的人群，区隔异质性的空间，区隔异质性的场域，由严格的区隔而建立起一种秩序。同时，现代都市文化尝试赋予这样一种区隔、秩序以某种诗意和美感。但是，这种赋予经过区隔的异质性空间以美感诗意的文化自身又被区隔。</blockquote>\n<p data-pid=\"233KxUbN\">在戴锦华的比喻中，她的期盼是“我们的都市是一个经过努力、经过暴力所形成的看似纯正整一的魔方，从一个角度望去，我们只能看到魔方的一种色彩和一个面向。只有当我们转动它的时候，我们才看到它的多个面向。”</p>\n<p data-pid=\"EE-1LSQh\">我自己则认为，魔方还有两个其他的特质，通过<b>单面色调</b>遮蔽<b>其他杂色</b>。</p>\n<p data-pid=\"scvgXxXS\">戴锦华把物质性的生产者当做一个已经被纯化的面来想象，但实际上生存于城市里形成的魔方并不一定是“所有面都以成为纯洁的色彩”而成为“不同侧面的同色、同质的组合，以及不同侧面的不同色、不同质的区隔”，更多的可能是只有正面是纯洁的同色，它的背面是混杂的无法被功能分区的空间。</p>\n<p data-pid=\"UhAcFrWH\">详细解析可以看萌娘百科的文章解析，<a href=\"http://link.zhihu.com/?target=https%3A//zh.moegirl.org.cn/zh-hans/%25E9%25AD%2594%25E6%2596%25B9%25E5%25A4%25A7%25E5%258E%25A6\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">魔方大厦 - 萌娘百科 万物皆可萌的百科全书</a> <br>这个解析非常重要，和X博士的解析一样重要。</p>\n<p data-pid=\"Y1R8i9Hu\">然后，我再推荐一个新的解析：</p>\n<a href=\"https://zhuanlan.zhihu.com/p/22143759\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/9045c7403de722fa9587e58c78aa7ba8_l.jpg?source=b1748391\" data-image-width=\"1200\" data-image-height=\"1080\" class=\"internal\">一颗脑洞豆：一部被遗忘的科幻佳品——《魔方大厦》</a><p data-pid=\"Hxbb9vyD\">知乎的这篇文章说的很好，归根结底就是一句话：<b>郑渊洁写的是历史，而导演导的是未来</b>。</p>\n<blockquote data-pid=\"9v0ma_tb\">《玩具树》表明了人工智能仍需要激活并且能够被关闭的开关时代（动物玩具从树上摘下了就活了，放到树上就又变成玩具）。<br>《来克一世皇帝》表明了人工智能是中央控制的非自主时代（整个国家的人民都是木偶，都由一根线连接着，由皇帝直接控制）。<br>《火车上的国家》看过雪国列车的自然懂，也是残余的人类（火车一直不停地运行着，穿过各种灾难异景）。<br>《锁国密室》中的人类更是直接表明处在原始社会，对于科技一窍不通。</blockquote>\n<p data-pid=\"iiyxdOuG\">郑渊洁的《魔方大厦》虽然再翻拍可能不容易，但他的另一部作品已经上线了，那就是《驯兔记》，从《驯兔记》中我们能看到与《魔方大厦》连贯一致的魔幻现实主义色彩。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-703e61e2fb7c1af99a0ba119ffc852b7_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1080\" data-rawheight=\"1512\" data-watermark=\"original\" data-original-src=\"v2-703e61e2fb7c1af99a0ba119ffc852b7\" data-watermark-src=\"v2-2050a68a34ff32f3cd3c17cc5c676dff\" data-private-watermark-src=\"v2-723bc932a3be40ba7cdabe771ea57880\"></p>\n<p data-pid=\"MwyUzjop\">再重提一下，一定要去看X博士、萌娘百科和一颗脑洞豆的解析文章。</p>\n<blockquote data-pid=\"hIUR9o0J\">我们得到了三个不同且连贯的《魔方大厦》，分别是<br>创作于1982-1984年的小说《魔方大厦》<br>创作于1990-1994年的动画《魔方大厦》<br>以及在2022年被《回来的女儿》提及的《魔方大厦》（1997年）。<br>而每个作品，都有对应提及的时代思潮影响</blockquote>\n<p data-pid=\"eWuoBY9j\">于是我们就理解了，小说《魔方大厦》是一个类似《葫芦小金刚》那样的<b>套层加象征结构</b>。</p>\n<p data-pid=\"TmftFpri\">套层是来克去往26个不同方格游历异世界的故事——和其他异世界游历一模一样。<br>但最大的不同是，莱克不想回家，即便莱克有金子般的心，真诚善良，但他就是不想回家。小说的结尾莱克虽然说了“每个暑假都会来魔方大厦一个月”，但他也说了，父母不会相信他的经历，而且在小说里，莱克几乎每集都会拿这个方格世界和自己的家作比对——就和格列佛一样。</p>\n<p data-pid=\"zsRNfTiM\">这种断绝亲缘关系，投身异世界的意识，我在另一个作品里也看到过，那就是《游戏人生》里的【  】（空白兄妹）。</p>\n<p data-pid=\"QN4TuOyn\"><b>而象征结构，则是借用一个看似人畜无害的外壳，隐喻时代洪流下人的被异化的过程。</b></p>\n<p data-pid=\"1GF6Ueb-\">《葫芦小金刚》里青蛇对抗葫芦娃的法宝和三妖四怪的名称就是如此，小孩子看了之后会为奇幻的想象力所好奇，而熟悉那个时代的大人知道这些法宝到底隐喻的是什么——像是通神钱、穿小鞋、大锅饭、黑吃黑、伸手大王、两面怪都具备类似的象征性。</p>\n<p data-pid=\"ziDo4QFE\">就如本回答一开始说的那样，<b>一个看似充满想象力的异世界，其实是对现实世界的讽刺</b>。这个评价适用于《格列佛游记》，当然也适用于《魔方大厦》。</p>\n<p><img src=\"https://picx.zhimg.com/v2-9322aeec9462caa6da1cf8d5aac74732_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"723\" data-rawheight=\"219\" data-watermark=\"original\" data-original-src=\"v2-9322aeec9462caa6da1cf8d5aac74732\" data-watermark-src=\"v2-3c83e59998b6d26ad70fda7a0e3c2a3e\" data-private-watermark-src=\"v2-cd334619f83f8627836dcbda26f51f45\"></p>\n<p data-pid=\"M6JPXLo8\">表面上是莱克探险的故事，但内里的26个故事没有一个故事是正常的，即便是看起来特别和谐的《吹气马戏团》也是如此，讽刺的是各种大鸣大放以及盛世欢歌。郑渊洁创作这个“童话”的时候所参考的时代思考已经说明了一切。</p>\n<p data-pid=\"9D3Nptm_\">动画版则通过画面加重了这种荒诞感，对应的是另一个同时代的反思。最后一集《黑蝉乐队》，现在看来更加具有荒诞性——你不选在这集结尾还好一点。</p>\n<p data-pid=\"qvc49MFA\">当然还有更多，那就是科幻的对未来的想象。动画改编的故事里，有一半多都牵涉到未来科幻对人的异化，有千篇一律的现代生活（头盔城的故事），有生化人的种族对抗（蓝蜻蜓飞行团），有被分离的情绪（夏河银行），有科技便捷之后的过肥胖化问题（科洛城）。</p>\n<p data-pid=\"Hce4fFsN\">其实这些故事我们在之后的作品里也看过类似的：</p>\n<blockquote data-pid=\"ejRxOWvo\">头盔城——《大护法》 《我在伊朗长大》《我们》（扎米亚金）<br>生化人对抗——《黑镜》<br>夏河银行——《500年后》《人生切割术》——里面还有一个标语：努力工作，天天快乐<br>科洛城——《机器人总动员》 《美丽新世界》<br>神奇的日历——《盛世》<br>三探樱桃塔——<b>说假话和说重复的话，不能算说话</b><br>蚂蚁王国——雅各比的书《杀戮欲》 还有亚伯该隐故事<br>锁国密事——柯特·冯内古特的《哈里森•伯格朗》<br>莱克一世皇帝——《1984》</blockquote>\n<p data-pid=\"8IIjJVOr\">仔细一看的话，《魔方大厦》内蕴着强烈的反乌托邦主题，已经不是能用童年阴影四个字可以形容的了。</p>\n<p data-pid=\"tpQmfuBy\">这与《回来的女儿》别无二致。</p>\n<p data-pid=\"yNqSH_L9\">除了悬疑推理走失故事以外，我们还能从《回来的女儿》里看到什么呢？</p>\n<p data-pid=\"IJOh_CUl\">看到那个时代的乱象。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/dandoliya?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">乌合之子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/574816671/answer/2819556196?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">46 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/574824753?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《回来的女儿》第二集中播放的《魔方大厦》是第几集，说的什么内容？</a><br><a href=\"http://www.zhihu.com/question/64533481?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">一部欧美电影，讲述的是儿子继承父亲魔法？</a><br>\n","link":"http://www.zhihu.com/question/574816671/answer/2819556196?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"阿尔卑斯的夏与冬：瑞士双游记","date":"2022-12-28 03:05:20","description":"\n<p>在种种机缘巧合之下，今年我有幸在夏天和冬天两次前往瑞士，并分别在在阿尔卑斯山的少女峰和马特洪峰的脚下度过了三天和五天的假期。由于整个旅程实在过于迷幻和难忘，便有了这篇文章，记录下我的旅程和拍下的照片背后的故事。文章中标记了拍摄参数的照片均为相机拍摄，其他为手机拍摄。</p>\n<h1>夏天的少女峰</h1>\n<h2>第零天 出发前的准备</h2>\n<p>夏天的第一次旅行，我的目的地是少女峰脚下的小镇格林德瓦。由于少女峰是知名观光景点，我此行最主要的目的便是拍照。尽管我几乎没有在博客中发表过摄影相关的文章，但实际上摄影是一项我多年来一直严肃对待的爱好。少女峰这样的景色，我肯定不能错过。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1805.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1805.jpg\" alt=\"我的所有摄影装备\" width=\"2200\" height=\"1633\" class=\"aligncenter size-full wp-image-2633\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1805.jpg 2200w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1805-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1805-1024x760.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1805-768x570.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1805-1536x1140.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1805-2048x1520.jpg 2048w\" sizes=\"(max-width: 2200px) 100vw, 2200px\"></a>\n<p>对于摄影装备，我多年来一直秉承穷玩的理念（其实就是因为没钱），手头只有一台 APS-C 相机和三个将将够用的镜头（事实上截至出发，接触摄影八年来我没有摸到过全画幅相机）。对于这样难得的机会，我没有犹豫就带上了全部设备：</p>\n<ul>\n<li>佳能 M6 Mark II：我能承受价格范围内最好的相机，拥有 APS-C 画幅中算是不错的参数，可惜可用镜头不多（不过咱也不需要）</li>\n<li>佳能 EOS-M 18-150mm f/3.5-6.3：标准旅行狗头，覆盖广角到长焦焦段，可以拍的题材多，套机头</li>\n<li>佳能 EOS-M 11-22mm f/4-5.6：ebay 上收的二手镜头，补充超广角焦段</li>\n<li>适马 16mm f/1.4：ebay 上 200 英镑捡漏的全新镜头，完美星空头，我看到目的地暗空等级处在 2-3 之间，没有犹豫就带上了这颗镜头，可惜它在这次旅行中阵亡了（光轴摔偏了，不过这是后话了）</li>\n</ul>\n<p>此外我还带了一个思睿的 Traveler 5CX 三脚架，这是我在欧洲能买到的最便宜且靠谱的碳纤维三脚架，1kg 的重量在各种旅行中基本不会给我带来额外负担，这次我也没有犹豫就带上了它。摄影装备除这些外还有一块 10 档中灰镜和相机充电器等必备小配件。</p>\n<blockquote><p>从少女峰回来后我用暑假实习的一部分工资更新了我的几乎全部摄影设备，不过这也是后话了。</p></blockquote>\n<p>光有设备还不够。一般的摄影可以随走随拍，但星空摄影不行。我的目的地格林德瓦是个不大的小镇，为了拍星星半夜爬山肯定是不可取的，我需要寻找一个视野开阔、离我酒店足够近且安全的地方。这一点出乎意料地顺利：我预订的酒店确认提供观景露台。随后我用 Google Earth Studio 确认了露台的位置和可用的拍摄视角，并用巧摄确定了当晚银河的位置。天时地利人和！从酒店露台看出去，当晚银河银心会从阿尔卑斯山的正上方经过。唯一需要担心的就只有天气了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1800.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1800.jpg\" alt=\"出发前的摄影计划\" width=\"2200\" height=\"1043\" class=\"aligncenter size-full wp-image-2632\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1800.jpg 2200w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1800-300x142.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1800-1024x485.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1800-768x364.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1800-1536x728.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1800-2048x971.jpg 2048w\" sizes=\"(max-width: 2200px) 100vw, 2200px\"></a>\n<p><span>Google Earth Studio 给出的实景预览和巧摄计算的当晚银河位置。眼前的是艾格峰，少女峰地区的第三高峰。最后的成品和预计画面非常接近。</span></p>\n<p>交通方面其实没有太多好说的：大部分人会选择坐飞机抵达巴塞尔、日内瓦或者苏黎世，然后通过铁路进入阿尔卑斯山区。少女峰地区的公共交通严重依赖于铁路（实际上整个瑞士都非常依赖铁路），多日旅行的话需要提前购买 Swiss Travel Pass，在有 Swiss Travel Pass 的情况下瑞士境内大部分铁路旅行都是免费的（部分游览线路仍然收费，但凭 Swiss Travel Pass 可以打折）。</p>\n<p>要进入少女峰地区，首先得通过瑞士联邦铁路（SBB）抵达阿尔卑斯山旁一个较大的<del>韭菜</del>游客集散地因特拉肯，然后在 Interlaken Ost 换乘伯尔尼高地铁路（BOB）进入格林德瓦（或劳特布伦嫩）。格林德瓦和劳特布伦嫩之间由温根阿尔卑斯铁路（WAB）连接，可以通过 WAB 线上的 Kleine Scheidegg 站换乘到少女峰铁路（JB）以登上少女峰，也可以在 BOB 线上的 Grindelwald Terminal 站换乘新的 Eiger Express 登上少女峰。总之，在少女峰地区游玩，避不开这三条铁路。</p>\n<p>此外，瑞士通行的语言一般是德语或法语（而且和德国德语和法国法语也有不同），很多地方的标识或者餐厅的菜单里没有英语，可能需要翻译软件辅助。好在瑞士旅游地区的人基本都会英语，英语交流是没有压力的。</p>\n<h2>第一日 初到便有惊喜</h2>\n<p>由于我预定的酒店真的在山里，纵使瑞士有发达的全国铁路网，前往酒店仍然是一件非常麻烦的事——甚至比从法国入境瑞士还要麻烦。</p>\n<p>由于申根区内部的开放性，我从法国巴黎抵达瑞士巴塞尔就和国内跨省一样简单：高铁直达，没有海关。不过麻烦在后头：到达巴塞尔后，我先转了两次火车抵达因特拉肯，然后再转上山火车通过 BOB 线进入阿尔卑斯山脚下的小镇格林德瓦。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1799.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1799.jpg\" alt=\"伯尔尼高地铁路列车\" width=\"2500\" height=\"1950\" class=\"aligncenter size-full wp-image-2631\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1799.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1799-300x234.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1799-1024x799.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1799-768x599.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1799-1536x1198.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1799-2048x1597.jpg 2048w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>出入格林德瓦需要乘坐的火车，可以看到轨道中间有一条齿轨。为了适应山地地形当地大部分铁路都配有齿轨。</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1604.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1604.jpg\" alt=\"车厢内部\" width=\"942\" height=\"1024\" class=\"aligncenter size-large wp-image-2620\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1604.jpg 2299w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1604-276x300.jpg 276w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1604-942x1024.jpg 942w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1604-768x835.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1604-1413x1536.jpg 1413w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1604-1883x2048.jpg 1883w\" sizes=\"(max-width: 942px) 100vw, 942px\"></a>\n<p><span>当地不少线路的列车都为观景做了特别设计，如增加观景天窗。</span></p>\n<p>出发前我检查过天气预报，但结果让我对这次旅行信心不大：我待在山里的三天里不是下雨就是多云，这种情况下很难看到好的风景。在我抵达因特拉肯时，天气确实是阴天，这让我心里一沉，不过想到山区天气变化很快，我还是对好天气抱有一丝希望。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1475.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1475.jpg\" alt=\"因特拉肯旁碧蓝色的湖泊\" width=\"2500\" height=\"1758\" class=\"aligncenter size-full wp-image-2613\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1475.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1475-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1475-1024x720.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1475-768x540.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1475-1536x1080.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1475-2048x1440.jpg 2048w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>因特拉肯旁碧蓝色的湖泊。</span></p>\n<p>幸运的是，在路上倒腾了半天，当我终于接近目的地格林德瓦时，我的期盼开始变成现实：阴沉的云开始慢慢散开，为阳光让出一个个小口。彼时正接近日落，随着阳光变得梦幻，还在前往格林德瓦的火车上的我在摇晃中快速拍下几张照片。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2145.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2145.jpg\" alt=\"前往格林德瓦的火车上拍下的照片\" width=\"2500\" height=\"1839\" class=\"aligncenter size-full wp-image-2635\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2145.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2145-300x221.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2145-1024x753.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2145-768x565.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2145-1536x1130.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2145-2048x1507.jpg 2048w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>左：1/400s, 18mm, f/9.0, ISO 100；右：1/640s, 18mm, f/11, ISO 100</span></p>\n<p>这两张随手拍下的照片，最后成为了这趟旅程中我最喜欢的照片之二。格林德瓦，刚刚见面就给了我一个惊喜。</p>\n<p>好运气没有就此结束，尽管我抵达格林德瓦时云层又一次遮蔽了天空，但即将落下的太阳从天边努力地穿透了云层照了出来，给阴云下的阿尔卑斯山坡点燃了一抹暖色。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2173.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2173.jpg\" alt=\"阴云下暖黄色的阳光\" width=\"740\" height=\"1024\" class=\"aligncenter size-large wp-image-2636\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2173.jpg 1806w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2173-217x300.jpg 217w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2173-740x1024.jpg 740w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2173-768x1063.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2173-1110x1536.jpg 1110w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2173-1479x2048.jpg 1479w\" sizes=\"(max-width: 740px) 100vw, 740px\"></a>\n<p><span>1/125s, 24mm, f/5.6, ISO 100。这也是我最喜欢的照片之一。</span></p>\n<p>太阳很快落下了。在酒店安顿下来以后，我重新查看天气预报，惊喜地发现第二天上午的预报变为了晴天——这意味着今晚云层可能会散开，我将有机会拍摄到阿尔卑斯山上的星空。</p>\n<p>吃完晚饭，我就在酒店露台等待天空暗下去。好运气在继续生效：我的期待没有落空，随着夜渐深，云层慢慢散去，露出深邃的夜空和——</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2199.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2199.jpg\" alt=\"阿尔卑斯山上空震撼的星空\" width=\"683\" height=\"1024\" class=\"aligncenter size-large wp-image-2638\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2199.jpg 1667w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2199-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2199-683x1024.jpg 683w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2199-768x1152.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2199-1024x1536.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2199-1366x2048.jpg 1366w\" sizes=\"(max-width: 683px) 100vw, 683px\"></a>\n<p><span>20s, 16mm, f/1.4, ISO 1000</span></p>\n<p>震撼到难以用言语形容的、难以计数的星星！我在浙江长大，从我记事起夜空就是被城市灯光照亮的，自然也看不见多少星星。夏季大三角是我仅有的用肉眼看见过的太阳系外的星星。而在梦幻般的阿尔卑斯山脚下，我人生中第一次见到如此之多的明亮星星，甚至能用肉眼看见银河的轮廓。这样的景象太过震撼，以至于我甚至忘记了第一时间拿出我的相机。</p>\n<p>不过时间不等人，我需要在银河银心离开阿尔卑斯山上空之前拍摄照片。于是快速我架好了三脚架，开始拍摄。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2184.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2184.jpg\" alt=\"第一张试拍\" width=\"2500\" height=\"1529\" class=\"aligncenter size-full wp-image-2637\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2184.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2184-300x183.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2184-1024x626.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2184-768x470.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2184-1536x939.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2184-2048x1253.jpg 2048w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>20s, 16mm, f/1.4, ISO 800。第一张试拍，背向银河，云层被其他房屋的灯光微微照亮。照片中心偏左有一颗流星，偏右清晰可见北斗七星。</span></p>\n<p>大概是因为人品守恒，顺利的拍摄让我过于兴奋，也过于紧张，以至于我在移动相机时没有注意三脚架的状态——于是它倒了，重重倒在酒店露台的水泥地上，只是因为有一条腿没有正确锁定。</p>\n<p>如冷水浇头，我第一时间冷静了下来，开始检查设备损坏情况。情况要比我想得好一些：当时机上安装的是适马的 16mm f/1.4，它较宽的塑料遮光罩帮相机挡下了最重的一击，加上当时我正好取下了电子取景器，相机最终仅有转盘被磕了一个小口，后续检查也没有发现有其他损坏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1806.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1806.jpg\" alt=\"相机的战损痕迹\" width=\"2200\" height=\"1172\" class=\"aligncenter size-full wp-image-2634\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1806.jpg 2200w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1806-300x160.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1806-1024x546.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1806-768x409.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1806-1536x818.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1806-2048x1091.jpg 2048w\" sizes=\"(max-width: 2200px) 100vw, 2200px\"></a>\n<p>可惜镜头就没有那么幸运了，一开始从外观看没有划痕，没有镜片破碎，我还松了一口气，但后续尝试拍摄时才发现焦平面歪了——光轴摔歪了。但是作为一个低价捡漏来的镜头，在欧洲进行光轴校准维修非常的不划算，何那时我正在瑞士的山中小镇，没有修理镜头的可能性，也没有租赁设备的可能性。没有办法，我唯一能做的就是继续拍摄。</p>\n<p>好在除了光轴歪了以外镜头没有其他问题，相机也没有损伤，通过移动对焦点多张合成还是勉强可以拯救焦平面歪了的照片的。我收拾好心情，继续进行拍摄，直到零点过后山谷中的雾气开始朝我所在的方向弥漫，挡住了山峰，我才收拾设备回了房间。尽管损失了一个镜头，但今天的成果已经令我非常兴奋了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2226.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2226.jpg\" alt=\"镜头损坏后的唯一成片\" width=\"674\" height=\"1024\" class=\"aligncenter size-large wp-image-2622\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2226.jpg 1645w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2226-197x300.jpg 197w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2226-674x1024.jpg 674w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2226-768x1167.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2226-1011x1536.jpg 1011w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2226-1348x2048.jpg 1348w\" sizes=\"(max-width: 674px) 100vw, 674px\"></a>\n<p><span>15s, 16mm, f/1.4, ISO 1250。镜头损坏后的唯一成片，三张焦点合成，但很难算得上好看。</span></p>\n<h2>第二天 梦中的景色就在眼前</h2>\n<p>真的很难描述第二天起床时我的心情。睁眼，明媚的阳光已经透过窗帘照进了房间。我拿起手机，惊喜地发现最新的预报是一整天都是晴天。我顾不上洗漱，穿好衣服就来到酒店露台，迎面而来的是绿树、清澈蓝天和雪山，阿尔卑斯山的壮美全貌终于展现在面前。我无数次在各种宣传片和风光照中见到过这样的景色，但这一次我终于亲身进入了这样的场景。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2260.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2260.jpg\" alt=\"当天的第一张照片\" width=\"761\" height=\"1024\" class=\"aligncenter size-large wp-image-2623\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2260.jpg 1857w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2260-223x300.jpg 223w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2260-761x1024.jpg 761w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2260-768x1034.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2260-1141x1536.jpg 1141w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2260-1521x2048.jpg 1521w\" sizes=\"(max-width: 761px) 100vw, 761px\"></a>\n<p><span>1/250s, 18mm, f/7.2, ISO 100。景色太好看以至于我忘记了拍照，当天的第一张照片是我在前往 First 峰的缆车上随手拍摄的。</span></p>\n<p>当天的计划是前往 First 峰游玩。First 峰是少女峰地区一个不算高的山峰，且正好在少女峰地区的三大峰（少女峰、僧侣峰和艾格峰）的对面，非常适合观景。First 峰的游览也以观景为主（当然也有很多徒步线路可以选择）：坐缆车上山，然后通过不同的项目慢慢下山，最后回到起点。整个游玩项目需要大半天，可以走走停停，当然我也拍了个爽。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1552.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1552.jpg\" alt=\"登上 Frist 峰的缆车\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-2614\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1552.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1552-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1552-1024x768.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1552-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1552-1536x1152.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1552-2048x1536.jpg 2048w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>登上 Frist 峰的缆车。</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2265.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2265.jpg\" alt=\"First 峰上的徒步者\" width=\"691\" height=\"1024\" class=\"aligncenter size-large wp-image-2625\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2265.jpg 1686w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2265-202x300.jpg 202w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2265-691x1024.jpg 691w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2265-768x1139.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2265-1036x1536.jpg 1036w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2265-1381x2048.jpg 1381w\" sizes=\"(max-width: 691px) 100vw, 691px\"></a>\n<p><span>1/160s, 62mm, f/8.0, ISO 100。First 峰上的徒步者。</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2261.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2261.jpg\" alt=\"远处断裂的背斜（应该是）\" width=\"2500\" height=\"1372\" class=\"aligncenter size-full wp-image-2624\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2261.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2261-300x165.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2261-1024x562.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2261-768x421.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2261-1536x843.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2261-2048x1124.jpg 2048w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>1/100s, 41mm, f/5.6, ISO 100。远处断裂的背斜（应该是）。</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2287.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2287.jpg\" alt=\"在 First 峰上远眺\" width=\"683\" height=\"1024\" class=\"aligncenter size-large wp-image-2626\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2287.jpg 1667w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2287-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2287-683x1024.jpg 683w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2287-768x1152.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2287-1024x1536.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2287-1366x2048.jpg 1366w\" sizes=\"(max-width: 683px) 100vw, 683px\"></a>\n<p><span>1/250s, 68mm, f/8.0, ISO 100</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2320.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2320.jpg\" alt=\"有人在施雷克峰方向玩滑翔伞\" width=\"750\" height=\"1024\" class=\"aligncenter size-large wp-image-2627\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2320.jpg 1831w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2320-220x300.jpg 220w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2320-750x1024.jpg 750w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2320-768x1049.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2320-1125x1536.jpg 1125w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2320-1500x2048.jpg 1500w\" sizes=\"(max-width: 750px) 100vw, 750px\"></a>\n<p><span>1/250s, 31mm, f/8.0, ISO 100。有人在玩滑翔伞，看起来飞得比远处的施雷克峰更高。<br></span></p>\n<p>First 峰的最后一个项目是无动力的站立式自行车，需要单脚站在自行车上，依靠山地坡度自然下滑，有点危险，我数次差点摔倒，但这也是全程中风景最好的一段。我走走停停，拍了不少照片。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1558.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1558.jpg\" alt=\"“危险交通工具”和走走停停的整活现场\" width=\"2200\" height=\"1329\" class=\"aligncenter size-full wp-image-2615\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1558.jpg 2200w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1558-300x181.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1558-1024x619.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1558-768x464.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1558-1536x928.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1558-2048x1237.jpg 2048w\" sizes=\"(max-width: 2200px) 100vw, 2200px\"></a>\n<p><span>“危险交通工具”和走走停停的整活现场。</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2403.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2403.jpg\" alt=\"我最喜欢的照片之一\" width=\"659\" height=\"1024\" class=\"aligncenter size-large wp-image-2628\"></a>\n<p><span>30s, 18mm, f/18, ISO 100，三张堆栈。整活的成品，我最喜欢的照片之一，也是我之前一段时间的手机壁纸。</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2413.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2413.jpg\" alt=\"蓝天，绿树和阿尔卑斯山\" width=\"683\" height=\"1024\" class=\"aligncenter size-large wp-image-2566\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2413.jpg 1667w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2413-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2413-683x1024.jpg 683w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2413-768x1152.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2413-1024x1536.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2413-1366x2048.jpg 1366w\" sizes=\"(max-width: 683px) 100vw, 683px\"></a>\n<p><span>1/320s, 18mm, f/8.0, ISO 100</span></p>\n<p>回到了山下，天色还早。我早早地吃完晚饭，坐在酒店露台上等日落。随着太阳慢慢落下，光线由橙转红，山头也慢慢笼罩起一层云雾，在阳光下将山峰染成暖色。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2421.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2421.jpg\" alt=\"落日余晖下的阿尔卑斯山\" width=\"872\" height=\"1024\" class=\"aligncenter size-large wp-image-2568\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2421.jpg 2128w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2421-255x300.jpg 255w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2421-872x1024.jpg 872w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2421-768x902.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2421-1307x1536.jpg 1307w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2421-1743x2048.jpg 1743w\" sizes=\"(max-width: 872px) 100vw, 872px\"></a>\n<p><span>150s, 24mm, f/20, ISO 100，两张堆栈</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2418.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2418.jpg\" alt=\"落日余晖下的阿尔卑斯山\" width=\"716\" height=\"1024\" class=\"aligncenter size-large wp-image-2567\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2418.jpg 1749w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2418-210x300.jpg 210w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2418-716x1024.jpg 716w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2418-768x1098.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2418-1075x1536.jpg 1075w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2418-1433x2048.jpg 1433w\" sizes=\"(max-width: 716px) 100vw, 716px\"></a>\n<p><span>105s, 24mm, f/8.0, ISO 100，两张堆栈</span></p>\n<p>我尝试了几张慢门流云，可惜由于日落时分光线变化较快，我也不熟悉十档中灰镜的减光量，我错误计算了曝光参数，连着几张都欠曝。强行拉起来一堆噪点，小图看着还行，放大就惨不忍睹了，只好拿来发朋友圈。</p>\n<p>不过没有拍到好照片的坏心情很快随着太阳落山而好起来了。今晚的云层覆盖率比前一天还低，随着夜渐深，晴朗的夜空慢慢浮现，繁星闪烁，银河用肉眼也清晰可见，以至于用手机都能拍到不少星星。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1568.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1568.jpg\" alt=\"整活现场\" width=\"818\" height=\"1024\" class=\"aligncenter size-large wp-image-2616\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1568.jpg 1996w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1568-240x300.jpg 240w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1568-818x1024.jpg 818w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1568-768x962.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1568-1226x1536.jpg 1226w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1568-1635x2048.jpg 1635w\" sizes=\"(max-width: 818px) 100vw, 818px\"></a>\n<p><span>手机拍摄的整活现场。可以看到背景夜空中明亮的星星。</span></p>\n<p>我思考再三，还是拿出了摔坏的镜头。今晚万事俱备，即使镜头损坏，我也要尝试拍出一张更好的星空。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2467.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2467.jpg\" alt=\"用损坏镜头能拍出的最好的星空\" width=\"624\" height=\"1024\" class=\"aligncenter size-large wp-image-2569\"></a>\n<p><span>20s, 16mm, f/1.4, ISO 1000，星空六张焦点合成，地景两张焦点合成。可以看到还是有虚焦的地方，但这已经是我用损坏镜头能做到的最好的结果了。</span></p>\n<p>和前一天一样，零点过后，山谷里的雾气逐渐开始朝我弥漫过来。我不死心，换上 f/4 的 11-22mm 镜头试图挣扎一下星轨，但雾气很快笼罩了我的头顶，我只好作罢，回屋睡觉。</p>\n<h2>第三天 出来混都是要还的</h2>\n<p>第三天原本的计划是坐新开通的 Eiger Express 线登上少女峰（准确来说是少女峰旁的一个观光站），但第三天早上起床的时候，我的心凉了半截：头顶云层和蓝天对半开，而少女峰网站上的实时相机显示少女峰现上完全被雾气笼罩啥都看不见。我纠结了很久，终于下定决心：上山！朋友因为前一天的“危险交通工具”擦破了腿，决定不再上山，而是前往附近的其他小镇休息。于是我给自己买了张 Eiger Express 车票，独自出发了。</p>\n<p>在不久之前，登上少女峰的唯一路线还只有一条少女峰铁路。靠着割游客韭菜，新的 Eiger Express 线耗费巨资终于在去年底开通了（然后用 160 瑞法来回的票价更狠地割韭菜）。新的线路前半段是缆车，后半段是穿山的少女峰铁路，全程不用爬一步山路。崭新的缆车宽大而高级，一个车厢可乘坐十数人；后半程的小火车虽然已经开通超过百年了但也维护得干净整洁，然而 20 分钟的火车路程仅有大概 15 秒是露天的。一百年前的瑞士人在把铁路修到这里的时候硬生生在少女峰山体里打出一条 7 公里、坡度 20%+ 的隧道，以至于坐火车时啥也看不见。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2500.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2500.jpg\" alt=\"从 Eiger Express 缆车上看向施雷克峰\" width=\"657\" height=\"1024\" class=\"aligncenter size-large wp-image-2573\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2500.jpg 1604w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2500-192x300.jpg 192w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2500-657x1024.jpg 657w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2500-768x1197.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2500-985x1536.jpg 985w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2500-1314x2048.jpg 1314w\" sizes=\"(max-width: 657px) 100vw, 657px\"></a>\n<p><span>1/125s, 47mm, f/6.3, ISO 100。从 Eiger Express 缆车上看向施雷克峰。</span></p>\n<p>在我刚刚上山时，云层还没有很密集，艾格峰、僧侣峰和少女峰都可以清晰地看到，甚至看起来比我刚起床时的天气更好。此时的我还很乐观，希望不久天气就可以放晴。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2506.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2506.jpg\" alt=\"从艾格峰看向少女峰\" width=\"827\" height=\"1024\" class=\"aligncenter size-large wp-image-2574\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2506.jpg 2019w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2506-242x300.jpg 242w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2506-827x1024.jpg 827w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2506-768x951.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2506-1240x1536.jpg 1240w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2506-1654x2048.jpg 1654w\" sizes=\"(max-width: 827px) 100vw, 827px\"></a>\n<p><span>1/200s, 31mm, f/7.1, ISO 100。从艾格峰看向少女峰。</span></p>\n<p>从缆车下来，就是一段 20 分钟的隧道火车，全程什么都看不见，只有中间有一站会停留五分钟以便观景。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2528.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2528.jpg\" alt=\"施雷克峰和 Ischmeer 冰川\" width=\"2500\" height=\"1667\" class=\"aligncenter size-full wp-image-2565\"></a>\n<p><span>1/250s, 18mm, f/7.1, ISO 100。从艾格峰山体内部的观景火车站看向施雷克峰，面前是 Ischmeer 冰川。</span></p>\n<p>火车的终点站就是少女峰车站，号称是欧洲最高的火车站（实际上在少女峰和僧侣峰之间的山坳上）。刚刚下车，观景台周围的云雾还没有聚拢，但似乎我的好运气正好在这一刻用尽了，在我赶到最高的斯芬克斯观景台，走出室外的时候，观景台周围的云雾很快就围了过来，十几秒内周围就什么都看不清了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1592.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1592.jpg\" alt=\"在斯芬克斯观景台里乱入的黄山\" width=\"2500\" height=\"2076\" class=\"aligncenter size-full wp-image-2617\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1592.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1592-300x249.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1592-1024x850.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1592-768x638.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1592-1536x1275.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1592-2048x1701.jpg 2048w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>在斯芬克斯观景台里乱入的黄山。</span></p>\n<p>看起来晴空的几率不大了，但我还是想再挣扎一下（毕竟上山车票 160 瑞法）。在零下的寒风中呆了二十分钟以后，我意识到了周围的雾气实际上在以非常快的速度移动。尽管少女峰和僧侣峰的山头都完全被雾气笼罩了，但不时会有一块云雾突然变薄，露出背后的景象，随后又马上被其他雾气笼罩。</p>\n<p>由于大雾，少女峰的徒步路线被暂时关闭，我的活动范围仅限于两个户外观景台。在意识到云雾的流速后，我开始了漫长的游击战，在不同观景台的不同位置跑来跑去，就为了等到一瞬值得记录的景色。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1595.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1595.jpg\" alt=\"在雪地上的观景台\" width=\"2500\" height=\"2346\" class=\"aligncenter size-full wp-image-2618\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1595.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1595-300x282.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1595-1024x961.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1595-768x721.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1595-1536x1441.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1595-2048x1922.jpg 2048w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>山上有两个观景台，其中一个观景台直接设置在雪地上。</span></p>\n<p>甚至有那么一瞬间，少女峰和僧侣峰同时从雾气中探出了头来。然而此时我正在往山下拍摄，等我意识到我错过了什么的时候已经晚了：什么都没有拍到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_26192.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_26192.jpg\" alt=\"从少女峰山坳向下看向劳特布伦嫩方向\" width=\"2500\" height=\"1848\" class=\"aligncenter size-full wp-image-2651\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_26192.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_26192-300x222.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_26192-1024x757.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_26192-768x568.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_26192-1536x1135.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_26192-2048x1514.jpg 2048w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>1/250s, 24mm, f/7.1, ISO 100。从少女峰山坳向下看向劳特布伦嫩方向，雾气露出一个小口，但很快又被遮了起来。</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2593.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2593.jpg\" alt=\"少女峰旁的阿莱奇冰川\" width=\"2500\" height=\"1370\" class=\"aligncenter size-full wp-image-2580\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2593.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2593-300x164.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2593-1024x561.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2593-768x421.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2593-1536x842.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2593-2048x1122.jpg 2048w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>1/400s, 18mm, f/9, ISO 100。少女峰旁的阿莱奇冰川，阿尔卑斯山中最大的冰川，因为雾气而难以窥见全貌。</span></p>\n<p>直到我在少女峰的寒风中呆了将近一个小时后，我终于死了再次拍到少女峰顶的心思，回到少女峰车站，吃了一顿 20 瑞法的简陋午餐，坐车下山。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1600.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1600.jpg\" alt=\"买少女峰票送的巧克力\" width=\"2400\" height=\"2006\" class=\"aligncenter size-full wp-image-2619\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1600.jpg 2400w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1600-300x251.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1600-1024x856.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1600-768x642.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1600-1536x1284.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1600-2048x1712.jpg 2048w\" sizes=\"(max-width: 2400px) 100vw, 2400px\"></a>\n<p><span>上少女峰的最大收获：买票送的巧克力。少女峰地区所有景区（包括少女峰自己）都使用橙色飘带的 Logo 配以 Top of XXX 的标语，非常好辩认。</span></p>\n<p>当天晚上回到格林德瓦发现热闹非凡，大家都围在酒吧附近唱歌喝酒，不少餐厅甚至都把吧台搬到了街上。查了下才知道，当天是格林德瓦夏季一系列节日的最后一天，下一次就要到明年了。我和朋友也被这气氛感染，买了根热狗看了会儿表演才回酒店休息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1617.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1617.jpg\" alt=\"热闹非凡的酒吧\" width=\"2400\" height=\"2273\" class=\"aligncenter size-full wp-image-2621\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1617.jpg 2400w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1617-300x284.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1617-1024x970.jpg 1024w\" sizes=\"(max-width: 2400px) 100vw, 2400px\"></a>\n<p><span>主路上的酒吧把东西全部搬了出来。</span></p>\n<h2>第四天 最后的惊喜和遗憾</h2>\n<p>这一天是我计划离开格林德瓦的日子。大早上醒来，我就要快速收拾行李，赶回到因特拉肯的火车。我打包完行李吃完早饭，正准备坐公交前往格林德瓦火车站，突然发现早晨的阳光看起来非常温暖，倾斜着照射在酒店对面的山峰上，于是我赶忙架起三脚架准备拍几张。然而半小时一班的公交车在我刚刚架好三脚架的时候抵达了。现在上车，意味着我就此要与这样的景色告别了。我匆忙估计了一下，决定让朋友先上车，我留在原地拍完照后自己跑向火车站赶火车。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2673.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2673.jpg\" alt=\"朝阳中的阿尔卑斯山\" width=\"2500\" height=\"1724\" class=\"aligncenter size-full wp-image-2629\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2673.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2673-300x207.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2673-1024x706.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2673-768x530.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2673-1536x1059.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2673-2048x1412.jpg 2048w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>20s, 18mm, f/22, ISO 100，四张堆栈。可惜山谷里的雾气有些重，照片重心看起来不太稳。</span></p>\n<p>然而山谷中的雾气在此时再次弥漫开来。待我四张曝光完毕，山谷的大半已经被雾气所笼罩，我只好放弃曝光第五张的打算，最后堆栈的照片也由于雾气而显得中心不稳。但无论如何，这张照片作为我在格林德瓦最后的记录，我仍然非常喜欢。</p>\n<p>拍完照，我匆匆收拾好设备，赶往火车站，不过万幸的是我赶上了。格林德瓦，再见。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1793.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1793.jpg\" alt=\"最后发现这一张真的很适合挂起来\" width=\"1004\" height=\"1024\" class=\"aligncenter size-large wp-image-2630\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1793.jpg 2352w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1793-294x300.jpg 294w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1793-1004x1024.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1793-768x784.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1793-1505x1536.jpg 1505w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_1793-2007x2048.jpg 2007w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a>\n<p><span>最后发现这一张真的很适合挂起来。</span></p>\n<h1>冬天的马特洪峰</h1>\n<h2>第零天 再出发</h2>\n<p>从少女峰回来后，我一直对瑞士阿尔卑斯的景色念念不忘。马特洪峰是瑞士境内的另一座著名山峰，也号称是阿尔卑斯山脉中最美的山峰，我一直都在犹豫要不要去看看。从少女峰回来后，我更加犹豫了：一方面，少女峰的美让我开始更加期待马特洪峰的美；另一方面，刚刚去过瑞士的我好像没有理由马上再去一趟，更何况瑞士旅行非常昂贵。此时朋友非常巧合地说起来冬天想去马特洪峰滑雪，问我要不要一起去——虽然我不会滑雪，但看看风景徒徒步我还是非常乐意的。于是我犹豫再三最终还是下定决心，出发！</p>\n<p>这次的目的地是马特洪峰山脚下的小镇采尔马特。有了上次的经验，这次我准备得更加充分了。交通还是一样，买 Swiss Travel Pass 就行，只是进入采尔马特需要在 Visp 从 SBB 换乘马特宏峰圣哥达铁路（MGB）的列车；酒店也没差，不过冬天没有太多拍摄星空的必要，我就没有刻意寻找带露台的酒店，阳台能看到马特洪峰就行。</p>\n<p>同样地，由于冬天没有太多拍摄星空的必要，这次我没有做详细的夜间拍摄计划（不过当时几晚也确实没有月亮，能拍），只是在采尔马特的网站上提前找了几条冬天能走的徒步线。不过后来发现冬季徒步线路况变化很快，还是得提前一天查。</p>\n<p>冬天去看雪山，还有很重要的一点是保暖：夜间小镇稍微外围一些就能达到零下十几度，白天也在零度上下。由于我的主要目的是徒步和拍照，面对积雪我特意购买了全套防水的冲锋衣、防风裤和徒步鞋（事后证明这非常有用），另加滑雪头套、秋裤和手套。此外，我还给电池们准备了发热贴（但最后并没有用上），并带上了雪地徒步必备的墨镜。没想到还没出发，这就大几千人民币花出去了。</p>\n<p>由于这次旅行我朋友的主要目的是滑雪（而我不是），因此在五天里我将有大把的时间可以自由挥霍，摄影也就成了重中之重。由于自上次少女峰回来后我慢慢更新了几乎全部摄影设备（这是另一个故事了），这次我带的装备是：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2642.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2642.jpg\" alt=\"更新后的全部设备\" width=\"799\" height=\"1024\" class=\"aligncenter size-large wp-image-2583\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2642.jpg 1717w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2642-234x300.jpg 234w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2642-799x1024.jpg 799w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2642-768x984.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2642-1199x1536.jpg 1199w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2642-1598x2048.jpg 1598w\" sizes=\"(max-width: 799px) 100vw, 799px\"></a>\n<ul>\n<li>尼康 Z 6：二手价格非常合适的全画幅相机（我终于升级了）。作为尼康推出的第一款全幅无反相机，四年过去它的性能仍然不弱——对我来说唯一的缺点就是 24MP 的像素还是稍低了些（但也不是不能用）</li>\n<li>尼康 F80S：外观很普通的胶片机，但是便宜、轻，而且全自动，在 ebay 上从日本购买。这次装上 Kodak Ektachrome 100 打算拍一些反转片留念</li>\n<li>尼康 Nikkor Z 24-200mm f/4-6.3 VR：大变焦旅行狗头，我的日常挂机头。光圈小了点，但能覆盖到 200mm，而且画质并不弱</li>\n<li>尼康 Nikkor Z 24-120mm f/4 S：尼康目前顶级的大变焦镜头，光圈比上一颗大一圈但焦段略短，冲动购买，想和 24-200 比较一下然后留一颗，出于比较目的这次也带上了（剧透：已经准备卖了）</li>\n<li>尼康 Nikkor Z 14-30mm f/4 S：Z 系统里相对便宜的超广角，没钱又要拍风光的话没啥可选的</li>\n<li>尼康 Nikkor AF-S 20mm f/1.8G ED：单反头，二手便宜，配上 FTZ 转接环拿来拍星空，拆下 FTZ 也能装胶片机上</li>\n<li>尼康 Nikkor AF-S 50mm f/1.8G：没啥好说的，二手便宜的单反头，拿来给胶片机当挂机头</li>\n<li>艾顿 SkyTracker Pro 赤道仪：1kg 的小型赤道仪，ebay 上二手购买后还没有用过，这次带上玩一玩</li>\n<li>优篮子 &amp; 科曼联名零感 Y F38 三脚架：轻、部署方便、快装、便宜的三脚架，从国内购买。本来对这类网红品牌不太感冒，但被我折腾一通后意外发现还不错</li>\n</ul>\n<p>…这次终于基本把包塞满了。此外由于要坐很多火车，还准备了防止玻璃反光的镜头硅胶罩。当然还有备用电池、滤镜等装备不一一说明了。</p>\n<h2>第一天 再次开门红</h2>\n<p>由于出发日临近圣诞，欧洲的一切都着实有些混沌。路途艰辛不再一一描述，当我终于在 MGB 的列车上远远看见雪山时，整个人还是兴奋了起来：这次旅行终于是真正开始了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-7-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-7-wm.jpg\" alt=\"这次旅行中拍下的第一张照片\" width=\"761\" height=\"1024\" class=\"aligncenter size-large wp-image-2590\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-7-wm.jpg 1857w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-7-wm-223x300.jpg 223w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-7-wm-761x1024.jpg 761w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-7-wm-768x1034.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-7-wm-1141x1536.jpg 1141w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-7-wm-1521x2048.jpg 1521w\" sizes=\"(max-width: 761px) 100vw, 761px\"></a>\n<p><span>1/125s, 200mm, f/6.3, ISO 100。这次旅行中拍下的第一张照片。</span></p>\n<p>由于马特洪峰在一个狭长山谷的尽头，在顺着山谷进入采尔马特的火车上一路是看不见马特洪峰的。在我抵达采尔马特，入住酒店，拉开阳台的窗帘后，马特洪峰的全貌才终于展现在我眼前。运气非常好，抵达当天马特洪峰就露出了全貌，完全没有云层遮挡。真的难以用语言形容我第一次亲眼看到马特洪峰的震撼感。三角形的山脊干净利落地汇集到一起，然后以远高出周边山体的姿态插入天空，美丽又震撼。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2490.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2490.jpg\" alt=\"酒店阳台\" width=\"907\" height=\"1024\" class=\"aligncenter size-large wp-image-2570\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2490.jpg 1948w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2490-266x300.jpg 266w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2490-907x1024.jpg 907w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2490-768x867.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2490-1360x1536.jpg 1360w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2490-1813x2048.jpg 1813w\" sizes=\"(max-width: 907px) 100vw, 907px\"></a>\n<p><span>不开玩笑，我可以在这个阳台啥也不干坐一天。</span></p>\n<p>由于抵达采尔马特已是下午，当天我没有徒步计划。不过正临近傍晚，天气也还不错，我就想去采尔马特的一个能同时看到小镇全貌和马特洪峰的网红拍照点去看看。与朋友说起这件事，没想他早已查好位置，说也想去看看。于是趁天色还没完全暗淡下来，我们就出发前往观景点。</p>\n<p>由于观景点在半山腰，从镇里快速前往观景点还是需要费点力气的。不过好在我们还是赶在天空完全暗下来之前抵达了。到达这个网红观景点的时候，已经有一群人站在那里了，大大小小的的三脚架都树了十几个。虽然很多人都拍过，但这个角度的采尔马特和马特洪峰真的美到难以形容——或者说，随便摁一下快门都是值得作为桌面壁纸的照片。尽管懒得掏三脚架，但当天的天空难得地晴朗，我最终还是拍了两张。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-9-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-9-wm.jpg\" alt=\"采尔马特的日落\" width=\"649\" height=\"1024\" class=\"aligncenter size-large wp-image-2591\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-9-wm.jpg 1584w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-9-wm-190x300.jpg 190w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-9-wm-649x1024.jpg 649w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-9-wm-768x1212.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-9-wm-973x1536.jpg 973w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-9-wm-1298x2048.jpg 1298w\" sizes=\"(max-width: 649px) 100vw, 649px\"></a>\n<p><span>1/25s, 44mm, f/4, ISO 3200。网红标准视角，但无论看多少次都不会腻。</span></p>\n<p>吃晚饭的时候，我还在对观景点的景象反复回味。虽然半山腰的观景点在夜里会跌到零下十五六度，但想着今天天空难得晴朗，还是咬牙准备当晚回观景点拍夜景。</p>\n<p>很难说这个决定是不是正确的。我穿上了我带来的最厚的衣服，戴了手套和滑雪头套，准备了发热贴，但在半山腰站了一个小时后，我还是被冻得难以按下快门。相机和手机倒是都没事，电池消耗也完全正常（白准备发热贴了），倒是我自己不太顶得住这般低温，就算戴着手套，在操作相机的时候仍然会觉得手冷。不过，我最终还是拍到了还算满意的照片：清冷的星空和马特洪峰前，采尔马特正发出温暖的灯光。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-10-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-10-wm.jpg\" alt=\"星空、马特洪峰和采尔马特\" width=\"732\" height=\"1024\" class=\"aligncenter size-large wp-image-2592\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-10-wm.jpg 1787w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-10-wm-214x300.jpg 214w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-10-wm-732x1024.jpg 732w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-10-wm-768x1074.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-10-wm-1098x1536.jpg 1098w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-10-wm-1464x2048.jpg 1464w\" sizes=\"(max-width: 732px) 100vw, 732px\"></a>\n<p><span>13s, 44mm, f/4, ISO 800，两张包围曝光</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2492.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2492.jpg\" alt=\"寒风中的我和相机站在网红机位上\" width=\"768\" height=\"1024\" class=\"aligncenter size-large wp-image-2571\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2492.jpg 1725w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2492-225x300.jpg 225w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2492-768x1024.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2492-1152x1536.jpg 1152w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2492-1536x2048.jpg 1536w\" sizes=\"(max-width: 768px) 100vw, 768px\"></a>\n<p><span>寒风中的我和相机站在网红机位上，地上是厚实的积雪。瑞士人甚至特地在这里加了路灯，我哭死。</span></p>\n<p>当然，也没忘了玩玩赤道仪。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1394.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1394.jpg\" alt=\"马特洪峰上空的冬季星野\" width=\"2300\" height=\"1530\" class=\"aligncenter size-full wp-image-2607\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1394.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1394-300x200.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1394-1024x681.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1394-768x511.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1394-1536x1022.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1394-2048x1362.jpg 2048w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p><span>187s, 39mm, f/4, ISO 400，赤道仪跟踪。马特洪峰上空的冬季星野。</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1390.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1390.jpg\" alt=\"\" width=\"800\" height=\"1024\" class=\"aligncenter size-large wp-image-2606\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1390.jpg 1796w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1390-234x300.jpg 234w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1390-800x1024.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1390-768x984.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1390-1199x1536.jpg 1199w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1390-1599x2048.jpg 1599w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p><span>83s, 96mm, f/4, ISO 400，赤道仪跟踪，星空和地景分别合成。马特洪峰上的星空。由于采尔马特的灯光，小镇上方的大气被轻微照亮，画面对比度也因此偏低。</span></p>\n<p>在半夜的观景点呆了一个多小时后，我终于冷到绷不住了。毕竟也已经拍到了满意的照片，我选择了离开。半夜的观景点没有什么人，不过在我离开的时候，还有一对泰国来的母子还在坚守拍摄（太卷了……）。收工睡觉！</p>\n<blockquote><p>后来才发现，对电子设备最大的考验不是低温（手机捂怀里就行，尼康我放心（doge），而是酒店充足的暖气导致设备从室外带入室内时表面凝结的雾气。最后我的解决方案是把设备全部塞在背包里，带进室内后过几个小时再打开背包，让内部设备缓慢升温，避免凝结雾气。</p></blockquote>\n<h2>第二天 第一次雪中徒步</h2>\n<p>采尔马特冬季的日出时间在八点左右，而我七点就早早起了床，确认了天气晴朗，就趁还没日出早早奔赴观景点拍摄日照金山。我甚至没有辨别方向，昨天傍晚夕阳照在马特洪峰的背面，我就确定在清晨阳光一定会洒在马特洪峰朝向采尔马特的一面。我的判断是正确的。当晚气喘吁吁地抵达观景点的时候，日照金山正刚刚开始。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2498.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2498.jpg\" alt=\"还是这个机位\" width=\"768\" height=\"1024\" class=\"aligncenter size-large wp-image-2572\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2498.jpg 1725w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2498-225x300.jpg 225w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2498-768x1024.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2498-1152x1536.jpg 1152w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2498-1536x2048.jpg 1536w\" sizes=\"(max-width: 768px) 100vw, 768px\"></a>\n<p><span>还是这个机位。</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-11-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-11-wm.jpg\" alt=\"采尔马特的日出\" width=\"681\" height=\"1024\" class=\"aligncenter size-large wp-image-2593\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-11-wm.jpg 1663w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-11-wm-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-11-wm-681x1024.jpg 681w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-11-wm-768x1155.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-11-wm-1022x1536.jpg 1022w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-11-wm-1362x2048.jpg 1362w\" sizes=\"(max-width: 681px) 100vw, 681px\"></a>\n<p><span>1/10s, 63mm, f/10, ISO 100。还是标准机位标准视角，还是那么好看。</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-12-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-12-wm.jpg\" alt=\"一架客机飞过被朝阳染成金色的马特洪峰\" width=\"880\" height=\"1024\" class=\"aligncenter size-large wp-image-2594\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-12-wm.jpg 2149w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-12-wm-258x300.jpg 258w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-12-wm-880x1024.jpg 880w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-12-wm-768x893.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-12-wm-1320x1536.jpg 1320w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-12-wm-1760x2048.jpg 1760w\" sizes=\"(max-width: 880px) 100vw, 880px\"></a>\n<p><span>1/200s, 120mm, f/4, ISO 100。一架（看涂装应该是 easyjet 的）客机飞过被朝阳染成金色的马特洪峰。</span></p>\n<p>拍完朝阳，朋友已经去滑雪了，我吃过早饭就开始准备找一条简单的徒步线线试试水。这时我才发现采尔马特网站上之前看好的几条徒步线都被标记为 Closed 了，不过倒是有几条简单的重新开放了。由于是第一天，我对雪地路况不甚熟悉，我挑了一条看起来比较简单风景又不错的就出发了。</p>\n<p>这条线路是从 Blauherd 缆车站走到 Fluhalp 小屋再原路返回，往返大概三公里不到，采尔马特网站上有详细地图和路径信息可以下载。从采尔马特到 Blauherd 缆车站的缆车需付费，不过凭 Swiss Travel Pass 半价。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/s1.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/s1.jpg\" alt=\"导出的路径详情\" width=\"1780\" height=\"1273\" class=\"aligncenter size-full wp-image-2588\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/s1.jpg 1780w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/s1-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/s1-1024x732.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/s1-768x549.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/s1-1536x1098.jpg 1536w\" sizes=\"(max-width: 1780px) 100vw, 1780px\"></a>\n<p><span>采尔马特网站可以免登录导出 outdooractive 生成的路径详情，也可以直接看交互式地图。</span></p>\n<p>等我到了 Blauherd 缆车站才明白为什么朋友说冬天来采尔马特不滑雪太奇怪了。可以说，冬季采尔马特的游客 90% 以上都是来滑雪的。上山缆车里，所有人都穿着全套滑雪装备，扛着滑雪板，甚至所有缆车也都有专门固定滑雪板的装置，拿着相机的我在人群中格格不入。</p>\n<p>出了缆车站，绕过一家小餐厅便是徒步道的入口。也多亏了大部分人都是来滑雪的，徒步道上几乎没有人，我可以独享沿途的风景。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2644.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2644.jpg\" alt=\"马特洪峰和没有人的徒步道\" width=\"843\" height=\"1024\" class=\"aligncenter size-large wp-image-2562\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2644.jpg 1170w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2644-247x300.jpg 247w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2644-843x1024.jpg 843w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2644-768x933.jpg 768w\" sizes=\"(max-width: 843px) 100vw, 843px\"></a>\n<p><span>没有人的徒步道，路是由车压实的，走起来完全没有难度。但是路旁的野雪还是需要防水的鞋裤才能走。</span></p>\n<p>这条徒步线会路过一个湖 Stellisee，夏天可以拍到马特洪峰在这个湖上的倒影。不过现在是冬季，湖面完全结冰，还覆盖了一层雪，甚至不太看得出湖面和周边地形的区别。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-14-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-14-wm.jpg\" alt=\"在湖边远眺马特洪峰\" width=\"2560\" height=\"1923\" class=\"aligncenter size-full wp-image-2596\"></a>\n<p><span>1/500s, 28mm, f/11, ISO 100。在湖边远眺西南方向的马特洪峰，完全没有湖的痕迹。</span></p>\n<p>这条徒步线只有两公里出头，纵使我在湖边浪费了一些时间，还是很快就走到了 Fluhalp 小屋。正值中午，餐厅的香气还是让我停下了脚步坐了下来。餐厅是露天的，眼前是蛋糕和冰茶，身边是冷冽的雪地，远处是晴朗天空下完全露出真容的马特洪峰，这样的午餐，一生又能吃上几回呢。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2516.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2516.jpg\" alt=\"马特洪峰前的露天午餐\" width=\"768\" height=\"1024\" class=\"aligncenter size-large wp-image-2575\"></a>\n<p><span>虽然露天，但大中午的雪山上完全不冷，甚至有些温暖。一杯冰茶，一份意面加一份布朗尼蛋糕，一共 50 瑞法，还是有点贵的。</span></p>\n<p>吃完就决定打道回府。回时的景象与来时别无二致。远处的白牙峰方向，有人在飞滑翔伞。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-13-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-13-wm.jpg\" alt=\"白牙峰方向有人在飞滑翔伞\" width=\"965\" height=\"1024\" class=\"aligncenter size-large wp-image-2595\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-13-wm.jpg 2356w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-13-wm-283x300.jpg 283w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-13-wm-965x1024.jpg 965w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-13-wm-768x815.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-13-wm-1448x1536.jpg 1448w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-13-wm-1930x2048.jpg 1930w\" sizes=\"(max-width: 965px) 100vw, 965px\"></a>\n<p><span>1/1250s, 200mm, f/6.3, ISO 100</span></p>\n<p>冬季的瑞士天黑得早。下午四点左右我慢慢悠悠回到酒店时，天已经开始黑下来了。懒得再跑一次网红观景点拍日落了，晚上按天气预报也会有云飘来，不适合拍星空了——那今天就拍到这里吧。</p>\n<h2>第三天 冰川特慢，但是阴天</h2>\n<p>第三天醒来，天上只有隐隐约约几朵云，比想象的要更加晴朗。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1564.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1564.jpg\" alt=\"朝阳下的马特洪峰\" width=\"2300\" height=\"1609\" class=\"aligncenter size-full wp-image-2608\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1564.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1564-300x210.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1564-1024x716.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1564-768x537.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1564-1536x1075.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1564-2048x1433.jpg 2048w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p><span>1/60s, 57mm, f/5.6, ISO 720。朝阳把云和山尖都染成了粉色。</span></p>\n<p>今天的计划是搭乘号称是“世界上最慢的特快列车”冰川特快观景，从采尔马特出发前往库尔，然后再乘坐普通火车回到采尔马特，绕着半个瑞士转一圈。火车八点左右出发，我只在酒店阳台快速拍了一张朝霞，就去吃早饭了。没想到吃完早饭走出酒店，天空已变成了阴天，马特洪峰也藏进了云里。天气预报这次倒还蛮准。</p>\n<p>不过没关系，今天要跑大半个瑞士，采尔马特是阴天也问题不大，我这么想着就上了车。冰川特快是专门的观景车，车窗巨大但不能打开，还好我提前准备了防止玻璃反光的遮光罩。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2652.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2652.jpg\" alt=\"特地准备的遮光罩\" width=\"949\" height=\"1200\" class=\"aligncenter size-large wp-image-2587\"></a>\n<p><span>就这玩意儿。</span></p>\n<p>冰川特快完整路线实际上是从采尔马特到圣莫里茨（但我只到库尔，全程五小时左右，不然来不及回采尔马特），由 MGB 和雷蒂亚铁路（RhB）共同运营，全程八小时，线路高差近 2000 米，所以不得以借助齿轨慢慢开。这条线路很慢，不过会经过瑞士雪山与冰川最精华的一部分，因此通常都会坐满游客。也正是因为这是一条特殊的观光线，凭 Swiss Travel Pass 乘坐冰川特快并不能免费，但依旧可以打折。</p>\n<p>很快火车就出发了。冰川特快需要提前选座，官网上说因为车厢方向不固定，因此左右观景没有区别——但实际上如果是从采尔马特出发，线路 99% 的景色都位于火车前进方向的右侧。官网选座确实看不出行驶方向，因此我不巧选到了左侧，全程基本没啥好拍的。但好在我选到了火车的最后一个车厢，可以向后看，我最后选择一个人跑到列车尾部，站着看完了大半程风景。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-16-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-16-wm.jpg\" alt=\"从冰川特快列车尾部向后看去\" width=\"2500\" height=\"1987\" class=\"aligncenter size-full wp-image-2598\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-16-wm.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-16-wm-300x238.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-16-wm-1024x814.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-16-wm-768x610.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-16-wm-1536x1221.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-16-wm-2048x1628.jpg 2048w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>1/500s, 60mm, f/6, ISO 100。从列车尾部向后看去。</span></p>\n<p>让整件事情变得更加遗憾的是，当天冰川特快几乎全线都是阴天，偶尔才有一丝阳光洒下天空。壮观的景色被阴雾笼罩，似乎也不那么好看了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-15-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-15-wm.jpg\" alt=\"阴天下的不知名雪山\" width=\"2500\" height=\"1529\" class=\"aligncenter size-full wp-image-2597\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-15-wm.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-15-wm-300x183.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-15-wm-1024x626.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-15-wm-768x470.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-15-wm-1536x939.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-15-wm-2048x1253.jpg 2048w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>1/320s, 200mm, f/6.3, ISO 100。阴天下的不知名雪山，全程最喜欢的照片之一。</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-17-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-17-wm.jpg\" alt=\"多云天空下的雷阿尔卑小镇\" width=\"711\" height=\"1024\" class=\"aligncenter size-large wp-image-2599\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-17-wm.jpg 1736w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-17-wm-208x300.jpg 208w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-17-wm-711x1024.jpg 711w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-17-wm-768x1106.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-17-wm-1067x1536.jpg 1067w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-17-wm-1422x2048.jpg 1422w\" sizes=\"(max-width: 711px) 100vw, 711px\"></a>\n<p><span>1/320s, 36mm, f/9, ISO 100。多云天空下的雷阿尔卑小镇。</span></p>\n<p>在 Mörel 站列车停了蛮久，再次出发以后才发现车头已经被换成了“箱根登山电车”。日本箱根铁路和 RhB 有长期合作，但是在这里看到汉字还是觉得有一点点违和。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2648.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2648.jpg\" alt=\"和箱根合作的车头\" width=\"2200\" height=\"1779\" class=\"aligncenter size-full wp-image-2564\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2648.jpg 2200w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2648-300x243.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2648-1024x828.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2648-768x621.jpg 768w\" sizes=\"(max-width: 2200px) 100vw, 2200px\"></a>\n<p>由于全程都是阴天，风景也没有太多好看的，我也拍没什么照片，就这么平平无奇地坐到了库尔。然后就是坐火车回采尔马特了。彼时已是下午，天很快就黑了，晚上十点左右我回到了采尔马特，简单吃了点麦当劳就睡了（对的，采尔马特甚至有麦当劳）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2647.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2647.jpg\" alt=\"当天的路线\" width=\"1170\" height=\"978\" class=\"aligncenter size-full wp-image-2563\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2647.jpg 1170w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2647-300x251.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2647-1024x856.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2647-768x642.jpg 768w\" sizes=\"(max-width: 1170px) 100vw, 1170px\"></a>\n<p><span>当天的路线。冰川特快段由于 GPS 问题只记录了个大概。左下角的直线是 35 千米长的勒奇山基线隧道。</span></p>\n<h2>第四天 雪里打滚</h2>\n<p>早早起床看天气，还是多云，但马特洪峰只有一小个角被云遮住了。还是有希望放晴的，我估摸了一下，决定换一条稍难的徒步线走走。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2544.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2544.jpg\" alt=\"本来想在酒店阳台拍个日出的延时，但是云并没有散开\" width=\"817\" height=\"1024\" class=\"aligncenter size-large wp-image-2576\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2544.jpg 1834w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2544-239x300.jpg 239w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2544-817x1024.jpg 817w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2544-768x963.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2544-1225x1536.jpg 1225w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2544-1633x2048.jpg 1633w\" sizes=\"(max-width: 817px) 100vw, 817px\"></a>\n<p><span>本来想在酒店阳台拍个日出的延时，但是云并没有散开。</span></p>\n<p>翻了一遍采尔马特网站，开放的线路里并没有难度和长度都合适的，倒是有几条标记为 Closed 的线路看起来很合适。“Closed”底下写着，徒步线始终开放，这里的状态只是当局对线路状况的评估。心一横，关闭的线路又怎样，本身是 easy 的线路应该难不到哪里去吧。于是在马特洪峰旁的另一个山头 Gornergrat 上找了两条徒步线，打算择机行动。</p>\n<p>Gornergrat 铁路是一小条非常著名的观景铁路，可以从采尔马特镇内只花半小时一路坐到 Gornergrat 山顶的观景台。Gornergrat 铁路的车票允许在任意一个站点下车或者上车，不超出购买乘坐的区间即可。另外有一条缆车线，也从采尔马特出发，抵达 Gornergrat 铁路中半山腰的一个站 Riffelberg。我找的两条徒步线都是从山上出发，往山下走然后抵达 Riffelberg，我便计划坐缆车往返 Riffelberg，然后择机购买火车票上山或下山。Gornergrat 铁路和缆车都是凭 Swiss Travel Pass 不免费但有折扣。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/s2.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/s2.jpg\" alt=\"计划的两条徒步线\" width=\"1747\" height=\"1273\" class=\"aligncenter size-full wp-image-2589\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/s2.jpg 1747w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/s2-300x219.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/s2-1024x746.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/s2-768x560.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/s2-1536x1119.jpg 1536w\" sizes=\"(max-width: 1747px) 100vw, 1747px\"></a>\n<p><span>实际上这两条线的后半程是一样的。</span></p>\n<p>出发！</p>\n<p>前往 Riffelberg 的缆车需要在 Furi 缆车站换乘。我依然是夹在一群滑雪者中格格不入地上山了。不得不感叹瑞士人对旅游业的执着。马特洪峰及周边小小一片山头瑞士人大大小小造了几十条缆车线，通往各个山峰，以至于我在 Furi 换乘缆车时坐错了线，只好多花半小时坐到错误线路的尽头再绕回来。</p>\n<p>折腾半天终于是抵达 Gornergrat 观景台了。云散开了不少，能见到蓝天了，只是马特洪峰半截依然插在云里。第一条徒步线路入口不难找，从观景台出发，看着采尔马特网站上的交互式地图就能找到，但是我只走了五分钟就识趣地调头了：脚下是高过脚踝的松软不一的积雪，右手边半米远就是陡峭的山崖，没有合适的鞋子真的没法走。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2548.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2548.jpg\" alt=\"一生只有一脚可以滑\" width=\"768\" height=\"1024\" class=\"aligncenter size-large wp-image-2577\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2548.jpg 1725w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2548-225x300.jpg 225w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2548-768x1024.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2548-1152x1536.jpg 1152w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2548-1536x2048.jpg 1536w\" sizes=\"(max-width: 768px) 100vw, 768px\"></a>\n<p><span>对于我这种没有太多登山经验和装备的人来说，一生只有一脚可以滑。</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-19-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-19-wm.jpg\" alt=\"这位大哥好心提醒我没有好鞋子就别走了\" width=\"2500\" height=\"2061\" class=\"aligncenter size-full wp-image-2600\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-19-wm.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-19-wm-300x247.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-19-wm-1024x844.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-19-wm-768x633.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-19-wm-1536x1266.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-19-wm-2048x1688.jpg 2048w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>1/500s, 24mm, f/11, ISO 100。右边这位大哥好心提醒我没有好鞋子就别走了，然后自己调头回去了。</span></p>\n<p>没有办法，只能先下山，去半路另一个火车站 Rotenboden 开始的徒步线看看。到站下车一看，嘛，这就平坦多了嘛，走！今天终于开张了。</p>\n<p>徒步线不长，我一开始也没怎么把路况放在心上。一开始的一百米很好走，甚至跟第一天被车压实的徒步线差不多，就是滑了点，好在新买的徒步鞋防滑很不错，走起来没问题。但没走两步，我就碰到一个大斜坡，此时的积雪也突然变厚，一脚下去没到了膝盖。我探了探积雪深度和坡度，心一横直接屁滑到了坡底，搞得胸前挂的相机都糊了一层雪。但也是在这里，我碰到了这条徒步线除了我以外的全程唯一一个活人，来自伦敦的中国女生 D。D 说她也是被采尔马特的网站忽悠来这条徒步线的，但和我不同，她做的准备稍足一些，还租了雪鞋，这可以防止她在厚积雪里走的时候陷进雪里——而我只能走一步拔一次脚了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1705.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1705.jpg\" alt=\"马特洪峰前正在徒步的 D\" width=\"2400\" height=\"1554\" class=\"aligncenter size-full wp-image-2609\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1705.jpg 2400w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1705-300x194.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1705-1024x663.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1705-768x497.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1705-1536x995.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1705-2048x1326.jpg 2048w\" sizes=\"(max-width: 2400px) 100vw, 2400px\"></a>\n<p><span>1/320s, 30mm, f/9, ISO 100。马特洪峰前正在徒步的 D。</span></p>\n<p>一起出发。积雪越走越厚，很快变得有半人高。白茫茫的雪地里没有任何徒步线相关的指示，我们只能靠着隐约的脚印往前走。我开始越来越频繁地陷进雪里，只能靠打滚把自己从雪里拔出来。一个人确实不应该走这条徒步道，还好暂时有个伴。</p>\n<p>不同地方的雪软硬不一，更多的积雪硬度巧妙地卡在了我的体重附近：一脚试探踩上去好像是实的，但当我把身体的重量压上去时，积雪又会迅速塌陷：走起来无比艰难。只好掏出三脚架来冒充一下登山杖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2551.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2551.jpg\" alt=\"跟着我在雪里打滚的三脚架沾满了雪\" width=\"843\" height=\"1024\" class=\"aligncenter size-large wp-image-2578\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2551.jpg 1976w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2551-247x300.jpg 247w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2551-843x1024.jpg 843w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2551-768x933.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2551-1265x1536.jpg 1265w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2551-1686x2048.jpg 1686w\" sizes=\"(max-width: 843px) 100vw, 843px\"></a>\n<p><span>跟着我在雪里打滚的三脚架，回酒店擦干净后完全没有任何问题。</span></p>\n<p>随着我们往前走，太阳开始变得低斜，温暖的金色阳光透过云层破碎地洒在山峰之间，像是燃烧的雪。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-21-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-21-wm.jpg\" alt=\"难得的一张照片\" width=\"2500\" height=\"2245\" class=\"aligncenter size-full wp-image-2601\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-21-wm.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-21-wm-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-21-wm-1024x920.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-21-wm-768x690.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-21-wm-1536x1379.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-21-wm-2048x1839.jpg 2048w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>1/320s, 24mm, f/9, ISO 100。这张照片是我以一种有点危险的姿势半个人插在积雪里拍的，因为难得，尽管不太好看，但我还是很喜欢。</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1709.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1709.jpg\" alt=\"马特洪峰，日落阳光和 D\" width=\"2400\" height=\"2053\" class=\"aligncenter size-full wp-image-2610\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1709.jpg 2400w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1709-300x257.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1709-1024x876.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1709-768x657.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1709-1536x1314.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1709-2048x1752.jpg 2048w\" sizes=\"(max-width: 2400px) 100vw, 2400px\"></a>\n<p><span>1/320s, 27mm, f/9, ISO 100。马特洪峰，日落阳光和 D。</span></p>\n<p>短短三公里不到的路，在雪里打滚了一个半小时以后，我们终于在下午四点出头抵达了 Riffelberg 车站。相比 D，没有准备雪鞋的我稍显狼狈一些，但好在我的所有衣服裤子鞋子都是防水的，还在正常保温；尼康相机跟着我在雪里翻滚了半天，除了因为太冷液晶屏响应有所延迟以外，也完全没有任何问题。算是安全结束徒步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2649.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2649.jpg\" alt=\"实际徒步路线\" width=\"584\" height=\"1024\" class=\"aligncenter size-large wp-image-2584\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2649.jpg 1170w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2649-171x300.jpg 171w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2649-584x1024.jpg 584w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2649-768x1347.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2649-876x1536.jpg 876w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2649-1168x2048.jpg 1168w\" sizes=\"(max-width: 584px) 100vw, 584px\"></a>\n<p><span>徒步路线，实际路线从最右边的一个车站开始，由于路况不好没有严格按照路线图走。看得出来如果是夏天没有积雪还是很好走的。</span></p>\n<p>我买的下山缆车最后一班在四点，我正好错过。好在下山火车还没有关门，买票上车，便累到完全不想动了。回到山下，和 D 交换了微信，我便早早回酒店休息了。</p>\n<h2>第五天 冰川天堂</h2>\n<p>第五天起床，仍然是阴天，不过马特洪峰还是露出了半截。朋友已经坐火车去瑞士首都伯恩玩了，但我对逛大城市不太感冒，还是留在了采尔马特。心里盘算着今天应该稍微休息下，而我徒步已经走过了马特洪峰旁的两个山头，今天不如去离马特洪峰最近的另一个山头 Klein Matterhorn 看看。和少女峰一样，瑞士人在 Klein Matterhorn 山体里挖了一个比较大的观景中心，叫 Glacier Paradise 冰川天堂，提供观景吃饭滑雪一条龙服务，而前往冰川天堂的缆车正是我前一天坐错的那一条——前一天坐错时已经在感叹景色不错，今天直接上到峰顶应该会更好看。</p>\n<p>既然已经决定了，那就买票出发。因为前一天坐错过，今天已经熟门熟路了。去冰川天堂的缆车也是凭 Swiss Travel Pass 打折，我买了票，没有查太多信息便上山了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1732.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1732.jpg\" alt=\"前往冰川天堂的巨大缆车和隐约的彩虹\" width=\"2400\" height=\"1544\" class=\"aligncenter size-full wp-image-2611\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1732.jpg 2400w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1732-300x193.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1732-1024x659.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1732-768x494.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1732-1536x988.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1732-2048x1318.jpg 2048w\" sizes=\"(max-width: 2400px) 100vw, 2400px\"></a>\n<p><span>1/640s, 150mm, f/6.3, ISO 100。前往冰川天堂的巨大缆车和隐约的彩虹。</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1735.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1735.jpg\" alt=\"阳光照在缆车旁冰川中突出的岩石上\" width=\"2400\" height=\"1699\" class=\"aligncenter size-full wp-image-2612\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1735.jpg 2400w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1735-300x212.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1735-1024x725.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1735-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1735-1536x1087.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/DSC_1735-2048x1450.jpg 2048w\" sizes=\"(max-width: 2400px) 100vw, 2400px\"></a>\n<p><span>1/100s, 92mm, f/6.3, ISO 220。阳光照在缆车旁冰川中突出的岩石上。</span></p>\n<p>马特洪峰坐落在瑞士和意大利的边境线上，所以靠近马特洪峰的 Klein Matterhorn 实际上非常接近意大利，甚至可以直接滑雪从瑞士滑到意大利。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2565.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2565.jpg\" alt=\"前往意大利的缆车\" width=\"1024\" height=\"995\" class=\"aligncenter size-large wp-image-2579\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2565.jpg 2400w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2565-300x292.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2565-1024x995.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2565-768x747.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2565-1536x1493.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2565-2048x1991.jpg 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"></a>\n<p><span>条条大路通罗马，甚至坐缆车也可以。</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2650.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2650.jpg\" alt=\"运营商也觉得我到了意大利\" width=\"918\" height=\"336\" class=\"aligncenter size-full wp-image-2585\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2650.jpg 918w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2650-300x110.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2650-768x281.jpg 768w\" sizes=\"(max-width: 918px) 100vw, 918px\"></a>\n<p><span>甚至运营商也觉得我到了意大利。</span></p>\n<p>到了冰川天堂，我就直奔观景台。运气很好，我在采尔马特看到的阴云实际上只是盖在采尔马特所在的山谷上，山谷上方还是有阳光的，甚至可以看到意大利的山。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-23-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-23-wm.jpg\" alt=\"意大利的山\" width=\"898\" height=\"1024\" class=\"aligncenter size-large wp-image-2603\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-23-wm.jpg 2192w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-23-wm-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-23-wm-898x1024.jpg 898w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-23-wm-768x876.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-23-wm-1347x1536.jpg 1347w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-23-wm-1796x2048.jpg 1796w\" sizes=\"(max-width: 898px) 100vw, 898px\"></a>\n<p><span>1/1000s, 98mm, f/8, ISO 100。意大利的山。</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-22-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-22-wm.jpg\" alt=\"意大利的山\" width=\"2500\" height=\"1663\" class=\"aligncenter size-full wp-image-2602\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-22-wm.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-22-wm-300x200.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-22-wm-1024x681.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-22-wm-768x511.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-22-wm-1536x1022.jpg 1536w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-22-wm-2048x1362.jpg 2048w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>1/1250s, 200mm, f/6.3, ISO 100</span></p>\n<p>在观景台，我非常巧合地再次遇见了 D 和她的老公，还遇见了一个在英国上学的富士用户。我们在山顶零下的寒风中聊得很开心。D 说到她想等到最后一班缆车前快日落的时候再下山，等一等说不定能等到不一样视角的日落，我们深以为然。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-24-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-24-wm.jpg\" alt=\"从观景台看向布来特峰\" width=\"651\" height=\"1024\" class=\"aligncenter size-large wp-image-2604\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-24-wm.jpg 1589w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-24-wm-191x300.jpg 191w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-24-wm-651x1024.jpg 651w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-24-wm-768x1208.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-24-wm-976x1536.jpg 976w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-24-wm-1302x2048.jpg 1302w\" sizes=\"(max-width: 651px) 100vw, 651px\"></a>\n<p><span>1/400s, 24mm, f/10, ISO 100。从观景台看向布来特峰。</span></p>\n<p>可惜天公不作美，在离最后一班缆车还有半小时的时候，厚重的云雾从意大利方向涌了过来，很快就啥也看不见了。我们继续坚守了十分钟，云雾还是没有要散开的迹象，此时我们已经冷得快绷不住了，只好打道回府。等下山已经完全是阴天了，直到晚上云也没有散开，我只好洗漱睡觉了。</p>\n<h2>第六天 最后的惊鸿一睹</h2>\n<p>很不幸，我此次旅行在瑞士的最后一天仍然是多云。马特洪峰仍然不可见，不过总体情况比前一天好一点：天空中还是有破碎的蓝天的。下午两点我们就要坐火车返回巴塞尔了，朋友想要休息一下，出门找咖啡馆了；而我还想最后再整个活，又从采尔马特网站上找了一条低海拔的简单徒步道，出发徒步了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2651.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2651.jpg\" alt=\"徒步路线\" width=\"716\" height=\"1024\" class=\"aligncenter size-large wp-image-2586\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2651.jpg 1170w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2651-210x300.jpg 210w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2651-716x1024.jpg 716w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2651-768x1099.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/IMG_2651-1074x1536.jpg 1074w\" sizes=\"(max-width: 716px) 100vw, 716px\"></a>\n<p><span>徒步路线，从采尔马特上山经过 Furi 缆车站回到采尔马特。</span></p>\n<p>原本计划的徒步线其实只有从绿色点上山走到蓝色点（也就是前两天换乘错的 Furi 缆车站）。但是一路走一路拍，天色始终是阴沉沉的，没有拍到什么喜欢的照片。等走到 Furi，一看才十一点半，还早，犹豫要不要再往前走一截。看了下地图，前面是一个山谷，不过应该有路可以横穿山谷，不过万一没法走就得调头回 Furi。纠结半天，还是决定往前走走，实在不行就回 Furi 坐缆车下山嘛。</p>\n<p>往前走了半小时，果然看到了一条可以过山谷的桥。走过山谷，是一个中世纪小村庄 Zmutt。走过 Zmutt，小路就会转到背向马特洪峰的方向。此时山上有点开始下雪，为了按时回到采尔马特，我开始加快脚步。但是走着走着，我随意往后一看，突然发现马特洪峰从雾气中隐隐约约探了出来，巨大的山体和凌厉的线条给人以巨大的压迫感，云雾中不甚清晰的身影又给马特洪峰蒙上了一层神秘感。没有什么犹豫，我抬手就拍下了这个瞬间。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-25-wm.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-25-wm.jpg\" alt=\"云雾中隐约的马特洪峰\" width=\"693\" height=\"1024\" class=\"aligncenter size-large wp-image-2605\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-25-wm.jpg 1691w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-25-wm-203x300.jpg 203w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-25-wm-693x1024.jpg 693w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-25-wm-768x1135.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-25-wm-1039x1536.jpg 1039w, https://acdn.flyhigher.top/wp-content/uploads/2022/12/2022-12-25-wm-1385x2048.jpg 1385w\" sizes=\"(max-width: 693px) 100vw, 693px\"></a>\n<p><span>1/640s, 76mm, f/7.1, ISO 100。看到马特洪峰的最后一眼。</span></p>\n<p>在我拍下这张照片之后没多久，马特洪峰又迅速隐入了云雾中，再也不见，就好像刚刚它是特意出现与我告别一般。到这里，我的采尔马特之行也算是圆满结束了，我对瑞士和阿尔卑斯的念想也差不多满足了。带着一存储卡的照片和一肚子的心情，我回到采尔马特，拿上行李就踏上了回家的路。再见，采尔马特和马特洪峰；再见，瑞士。</p>\n","link":"https://flyhigher.top/diary/2639.html"},{"title":"为什么反映社会现实题材的电影这么受欢迎？","date":"2022-12-27 17:25:13","description":"\n<a href=\"https://www.zhihu.com/zvideo/1591227800568156160\">文牧野：为什么反映社会现实题材的电影这么受欢迎？</a><p data-pid=\"2HPKsOrN\">知乎的朋友们大家好，我是导演文牧野，很高兴能通过知乎电影与知友们进行交流，也很感谢获得 2022 知乎年度影人荣誉称号，感谢知友的认可。</p>\n<p data-pid=\"xvx0FPuV\">我理解的是现实题材的片子跟观众的距离会比较近一些，而且现实题材的片子无论是影片的质感，还是影片中表达出来的现实意义和情绪，大部分都做到了跟观众息息相关，减少了观众的理解成本，也能够很好的引起大众的一个群体共鸣。</p>\n<p data-pid=\"-jM1GrY1\">具体分析的话我觉得大致可以分为三个层面，首先第一层是现实题材的影片所表达的内核，一定要是能贴近大众情绪的；其次是影片的表达手法，不能过于艺术化，得把故事讲清楚；最后就是影片外部的一种材质感，在整个影片的制作中，不能有任何一个环节脱离现实；这三个东西是我认为能够构成让观众所熟悉的一种现实质感；比如《我不是药神》在题材上来讲，它描绘的是我们普通人人生中的“生老病死”中的“生”“病”“死”这三个元素，这样它所展示的影片故事，就会离观众很近，能让观众更好地去代入情绪；在拍摄《我不是药神》的时候，我有去使用一些手持的摄影手法，也请了很多的非专业演员，让影片的呈现能够“接地气”，能够“很现实”；包括我们整个的前期准备上面，为了强化现实感，给观众打造距离自己生现实活更近的“体感”，我们的美术部分，也是做了大量的调查采访，让演员的服装造型等能够完全营造出观众“身边人”的感觉；在摄影方面，一些取景地勘察和一些细节的拍摄角度，也都是希望能够从材质上最大化的逼近现实，这样就可以在跟现实尽量接近的同时，再去对影片做艺术化的加工处理。</p>\n<p data-pid=\"txResEjm\">我觉得以上这三个层面的融合，所构成的质感能够让观众更容易地进入到影片的故事中，也能更容易地感受到故事内核所要表达的主体思想，就是为什么反映现实题材的电影受欢迎的原因。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhi-hu-dian-ying-72?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">知乎电影</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/569968451/answer/2818822359?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">144 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/575340979?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么反映社会现实题材的电影特别受欢迎？</a><br><a href=\"http://www.zhihu.com/question/399448292?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么多数反应社会现实题材的电影这么受欢迎？</a><br>\n","link":"http://www.zhihu.com/question/569968451/answer/2818822359?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"演员如何通过表演给不讨喜的角色加分？","date":"2022-12-27 15:51:08","description":"\n<p data-pid=\"8rfZB-PF\">去除杂念，专业演员干专业的事儿，其他交给观众。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/song-jia-1-70?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">宋佳</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/569968778/answer/2818786453?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">79 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/20413553?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何判断一个角色演得好不好？</a><br><a href=\"http://www.zhihu.com/question/61481018?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价一个人的演技好不好，就像有些人只适合演一种类型的剧，尝试其他角色后就被人说演技不好？</a><br>\n","link":"http://www.zhihu.com/question/569968778/answer/2818786453?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"《人生大事》带来了哪些中国式生死价值观的呈现？","date":"2022-12-27 14:06:54","description":"\n<p data-pid=\"vC1YZoRx\">知乎的朋友们大家好，我是演员朱一龙。<span class=\"nolink\">我在电影《人生大事》中饰演的“莫三妹”是名殡葬师。这是一个相对特殊、大众了解较少的职业，正如影片中所展现的那样，不少人对这类职业存在偏见，包括我自己，在接触这个题材之前提起死亡也会觉得是件需要避讳的事。</span></p>\n<p data-pid=\"9B1aQoaq\">开拍前，我去实地采风体验生活，发现殡葬行业并不像大家认知里那样冷冰冰的，反而是一个很温暖的职业。他们是服务于告别的职业，给予逝者离开时的体面，更是给活着的人带来慰藉和力量，这是我理解的殡葬师的职业底色。</p>\n<p data-pid=\"jn1WZEMc\">《人生大事》里，三哥对这份职业的理解也经历了一段成长。从一开始对殡葬行业的轻视、不理解，满脑子都是生意经，到后面真正理解并开始敬畏这份职业，与“上天堂四人组”并肩作战，给更多人带去体面和慰藉。</p>\n<p data-pid=\"iKJQHlVJ\">在我看来，《人生大事》这部电影讲的不仅是如何面对死亡，更是想告诉大家要好好活着。在电影中，“种星星的人”虽然是三哥给小文造的一场梦，但他所做的一切，也是为了让活着的人更珍惜当下，过好以后的生活，如果可以，希望这场梦能温暖到每个人。</p>\n<p data-pid=\"4gB6caxQ\">电影里有句台词是这样的：“人生除死无大事。”</p>\n<p data-pid=\"IjK-oO8r\">影片中所呈现的故事也是现实中普通人日常的缩影，市井的烟火气，生活的酸甜苦辣。希望大家可以从电影中收获一点温暖，你爱的人从未真正离开，他们会化作星星，一直守护你。</p>\n<p data-pid=\"UcBPvXTX\">最后，致敬种星星的人。<br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhu-yi-long-gong-zuo-shi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">朱一龙工作室</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/569967802/answer/2818670056?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">117 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/540230541?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《人生大事》想要表达什么样的生死观？</a><br><a href=\"http://www.zhihu.com/question/553172683?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价阎连科的《人生不过四季》？</a><br>\n","link":"http://www.zhihu.com/question/569967802/answer/2818670056?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"演员和角色的关系是什么？","date":"2022-12-27 13:05:51","description":"\n<p data-pid=\"ifnQTIsv\">知乎的朋友们大家好，我是演员白敬亭。非常感谢知乎的邀请，让我有机会和大家分享一些表演上的感受。</p>\n<p data-pid=\"QM8ld8vc\">首先关于演员和角色的关系这个问题，目前这个阶段我个人的感受可能更多的是双方在各自促进彼此成长。当我要为一个角色服务时，大多要开拓出我并不常在生活中展现出的性格，并要去学习新的技能和塑造一些状态、体型、表达方式，这也是作为演员非常享受的一个过程。在这个过程中我也会发现自己的多样性和思维方式的转变，自己逐渐与角色融为一体。而将文字转化为表演，最终变成一个完整的角色，这其中也少不了将自己生活的阅历和人物性格加入其中，让表演变得更加生动。每次接到新的角色，就像是新认识了一位打篮球的队友，我们要彼此了解、适应、磨合，把双方彼此特色相融合，适当地改变，最终才会打出理想的配合效果。</p>\n<p data-pid=\"MfknZyS_\">关于适配度问题，我自己在选择剧本的过程中，首先要看角色自己是否喜欢并有创作激情，而且在阅读过程中我一般也会代入表演，看自己是否可以驾驭和塑造。相对于原创剧本，很多小说改编的IP在影视化之前，已经有了很好的读者基础，在塑造有小说基础的角色时，我也会选择先深入讨论区多看看大家对角色的理解、经典片段的分析和讨论，因为在影视化的过程中难免会对剧情和人物有改动和删减，但只有自己深入地了解故事和人物，代入读者的心态，了解人物的魅力之处，让自己发自内心地爱上这个人物，才能确保在表演的过程中，不会让原本饱满的情节失去光彩，并且也要和其他各部门的老师及时沟通自己的想法，就像服化道对于一个角色塑造能不能达到所谓的适配度，也起着至关重要的作用。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bai-jing-ting-gong-zuo-shi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">白敬亭工作室</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/573580653/answer/2818600132?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">46 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/24827720?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">谈谈演员与角色的关系？</a><br><a href=\"http://www.zhihu.com/question/284075628?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">演员对角色的认同？</a><br>\n","link":"http://www.zhihu.com/question/573580653/answer/2818600132?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"电影中的方言台词对电影主旨表达有什么影响？","date":"2022-12-27 11:27:22","description":"\n<p data-pid=\"eH4KOvN8\">我作为一个石家庄人却拍了一部几乎全是武汉话的电影，首先我因为个人对方言就非常感兴趣，我对曲艺、戏曲、中国的各地的方言天然有兴趣。我们确定了在武汉拍之后，我就去看了那些武汉本地的大量的曲艺资料，语言节目的资料也去找到了一些。<br>为什么我们能呈现的这么自如，是因为我们用了大量的武汉本地的演员：朱一龙、吴倩、郑卫莉这些人他们都是有过在武汉生活经历的。比较辛苦的是罗京民老师，他是陕西人，我最早写剧本的时候想象的老莫的形象就是他。我很喜欢他的形象，他就是那种又严肃，严肃起来又挡不住可爱的感觉。他也是对自己要求非常苛刻的老艺术家，在表演的同时还要兼顾武汉话标不标准，挺不容易，而且他说的很标准了。但我学不太好，我觉得是因为我有一段在重庆的时光。在重庆上大学，一点重庆方言跟四川方言的底子，但是要在这个基础上再学武汉话，我觉得这个难度就很大，但是我能get到武汉话里边那些有意思的点，但是我说不好。<br>那为什么要用方言？在《人生大事》里，我们是为了让角色生动感更强，例如朱一龙用家乡话去演这个角色，演出来就是这片土地下长大的孩子。我们试过让他用普通话去演，感觉还是武汉话更能从台词表演中解放出来，能把精力顾及到表演的其他方面。另外，片子里烟火气的真实感，一部分也是靠方言建立起来的。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/liu-jiang-jiang-86?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">刘江江</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/569967650/answer/2818481759?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">47 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/473623517?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">当作家为一个说外语的角色写台词时，他们知道那个角色实际上在说什么吗？</a><br><a href=\"http://www.zhihu.com/question/280996254?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何在小说中使用白话写出很有逼格的台词?</a><br>\n","link":"http://www.zhihu.com/question/569967650/answer/2818481759?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"什么年代还在用传统 Pjax? —— 自定义 Pjax 提升页面加载速度","date":"2022-12-15 04:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>Hexo 属于静态博客，很多同学给自己的博客加上 Pjax 是为了音乐播放器等功能不中断。</p>\n<p>之前我也想过对博客和主题加入 Pjax 支持，但经过一番分析后觉得，这不仅引入了一个巨大的 <code>jquery.pjax.js</code>，反而优化效果不明显。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8E%9F%E7%90%86\" class=\"headerlink\" title=\"原理\"></a>原理</h2>\n<p>其实，Pjax 的原理并不复杂。或许说，README 一开始就告诉你了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pjax = pushState + ajax</span><br></pre></td></tr></table></figure><p>其中 <code>ajax</code> 用于页面的新内容，<code>pushState</code> 改变浏览器状态。</p>\n<p>很简单吧。</p>\n<p>事实上，<code>pjax</code> 并不应该应用于整个页面当中。而应该只是局部更改。</p>\n<p>这样，Blog 当中的导航栏、样式文件等就不需要重复下载与预览。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%86%E6%9E%90\" class=\"headerlink\" title=\"分析\"></a>分析</h2>\n<p>以我使用 Miracle 为主题的博客为例，进入首页，按 <code>F12</code> 查看页面 Elements.</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.18/rawimg/2022-12-15_12-32-37.png\"></p>\n<p>可以发现，页面主要更改的也就是 <code>#page-main</code> 部分，只需要实现动态刷新这部分的内容就可以了。</p>\n<p>那怎么实现呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%B0%8F%E5%8C%96%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8E%A5%E5%8F%A3\" class=\"headerlink\" title=\"最小化的数据接口\"></a>最小化的数据接口</h2>\n<p>现在生成的页面当中，有 <code>&lt;head&gt;</code> 部分声明大量样式与元信息，<code>&lt;body&gt;</code> 之下重复的页脚、导航栏，还有每个页面下方都有的一些 <code>&lt;script&gt;</code>。</p>\n<p>很明显，我们不需要这些。我们只要 <code>#page-main</code> 中的主要内容。</p>\n<p>最重要的是，Hexo 是静态博客，这一点只能在生成文件时进行。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%BD%BD%E5%85%A5-HTML\" class=\"headerlink\" title=\"载入 HTML\"></a>载入 HTML</h3>\n<p>我是用 Cheerio 模块帮我完成这一工作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'cheerio'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> filePath = path.resolve(<span class=\"string\">'public/'</span>);</span><br></pre></td></tr></table></figure><p>定义一个 <code>parse function</code>，打开文件并解析相关信息，顺便把不是 HTML 的文件排除掉。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parse = <span class=\"function\">(<span class=\"params\">filename, fullpath</span>) =&gt;</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不是 .html 我不要</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!filename.endsWith(<span class=\"string\">\".html\"</span>)) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>然后通过 Cheerio 解析 HTML:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">{...</span><br><span class=\"line\">  <span class=\"comment\">// 组合新文件名</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> filepath = fullpath+<span class=\"string\">\".page.json\"</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 读取文件内容</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> pageContent = fs.readFileSync(fullpath).toString();</span><br><span class=\"line\">  <span class=\"comment\">// 解析页面内容</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> $pg = cheerio.load(pageContent);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rtData = {};</span><br><span class=\"line\">...}</span><br></pre></td></tr></table></figure><p>然后获取页面的标题和 <code>#page-main</code> 下的 HTML.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">{...</span><br><span class=\"line\"><span class=\"comment\">// 页面标题</span></span><br><span class=\"line\">    rtData.title = $pg(<span class=\"string\">\"title\"</span>).text();</span><br><span class=\"line\">    <span class=\"comment\">// OR $pg(\"#page-main\").html()</span></span><br><span class=\"line\">    <span class=\"comment\">// 我这么写是因为主题 #page-main 下还有 script 无法执行</span></span><br><span class=\"line\">    rtData.page = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=\"mg-top\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        <span class=\"subst\">${$pg(<span class=\"string\">\".mg-top\"</span>).html() || <span class=\"string\">\"\"</span>}</span></span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;footer class=\"text-center\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        <span class=\"subst\">${$pg(<span class=\"string\">\"footer\"</span>).html() || <span class=\"string\">\"\"</span>}</span></span></span><br><span class=\"line\"><span class=\"string\">    &lt;/footer&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=\"p-btn\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        <span class=\"subst\">${$pg(<span class=\"string\">\".p-btn\"</span>).html() || <span class=\"string\">\"\"</span>}</span></span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>;</span><br><span class=\"line\">    rtData.path = filename;</span><br><span class=\"line\">...}</span><br></pre></td></tr></table></figure><p>页面中还有一些 <code>script</code>，比如阅读进度、懒加载等。所以需要一个 <code>extraJS</code> 放置额外的 Script.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">{...</span><br><span class=\"line\">    rtData.extraJS = []</span><br><span class=\"line\">    <span class=\"comment\">// 只解析 #page-main 下的 script</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> $pageMain = cheerio.load($pg(<span class=\"string\">\"#page-main\"</span>).html());</span><br><span class=\"line\">    $pageMain(<span class=\"string\">'script'</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, el</span>) </span>{</span><br><span class=\"line\">        <span class=\"comment\">// 尝试往 extraJS 中 push 相关代码</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> {rtData.extraJS.push($pageMain(<span class=\"built_in\">this</span>)[<span class=\"number\">0</span>].children[<span class=\"number\">0</span>].data);} <span class=\"keyword\">catch</span>(e) {}</span><br><span class=\"line\">        $pageMain(<span class=\"built_in\">this</span>).remove();</span><br><span class=\"line\">    });</span><br><span class=\"line\">...}</span><br></pre></td></tr></table></figure><p>最后，将 JSON 写入文件中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">{...</span><br><span class=\"line\">    fs.writeFileSync(filepath, <span class=\"built_in\">JSON</span>.stringify(rtData));</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E4%BB%B6%E9%80%92%E5%BD%92\" class=\"headerlink\" title=\"文件递归\"></a>文件递归</h3>\n<p>我们还需要一个函数递归 <code>public</code> 目录下的所有文件，这个不用多说。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fileDisplay</span>(<span class=\"params\">filePath</span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 根据文件路径读取文件，返回文件列表</span></span><br><span class=\"line\">    fs.readdir(filePath, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, files</span>) </span>{</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.warn(err, <span class=\"string\">\"读取文件夹错误！\"</span>)</span><br><span class=\"line\">        } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">            <span class=\"comment\">// 遍历读取到的文件列表</span></span><br><span class=\"line\">            files.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">filename</span>) </span>{</span><br><span class=\"line\">                <span class=\"comment\">// 获取当前文件的绝对路径</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> filedir = path.join(filePath, filename);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> fullname = filedir.split(<span class=\"string\">\"public\"</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">                fs.stat(filedir, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eror, stats</span>) </span>{</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (eror) {</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.warn(<span class=\"string\">'获取文件 Stats 失败!'</span>);</span><br><span class=\"line\">                    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> isFile = stats.isFile(); <span class=\"comment\">// 是文件</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> isDir = stats.isDirectory(); <span class=\"comment\">// 是文件夹</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (isFile) {</span><br><span class=\"line\">                            parse(fullname, filedir);</span><br><span class=\"line\">                        }</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (isDir) {</span><br><span class=\"line\">                            fileDisplay(filedir); <span class=\"comment\">// 递归，如果是文件夹，就继续遍历该文件夹下面的文件</span></span><br><span class=\"line\">                        }</span><br><span class=\"line\">                    }</span><br><span class=\"line\">                });</span><br><span class=\"line\">            });</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br><span class=\"line\">}</span><br><span class=\"line\">fileDisplay(filePath);</span><br></pre></td></tr></table></figure><p>最后运行这个 Node.js 文件，就可以看到 <code>public/</code> 目录下多出很多 <code>***.page.json</code> 文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h3>\n<p>这些文件内容也很简单，基本如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"comment\">// 页面的标题</span></span><br><span class=\"line\">    <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Hello World\"</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 内容</span></span><br><span class=\"line\">    <span class=\"attr\">\"page\"</span>: <span class=\"string\">\"...\"</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 路径</span></span><br><span class=\"line\">    <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"/foo/bar\"</span>,</span><br><span class=\"line\">    <span class=\"comment\">// JS</span></span><br><span class=\"line\">    <span class=\"attr\">\"extraJS\"</span>: ['alert(<span class=\"string\">\"Hello World\"</span>);']</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E7%AB%AF-pjax-js\" class=\"headerlink\" title=\"前端 pjax.js\"></a>前端 <code>pjax.js</code>\n</h2>\n<p>新建一个 <code>pjax.js</code>。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9B%BF%E6%8D%A2%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"替换链接\"></a>替换链接</h3>\n<p>我们需要先将页面当中所有本站链接转为 Pjax 的 Jump 函数。</p>\n<p>判断条件是：有链接，不带 hash，且为本站链接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转换页面中的链接为 Pjax 链接</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> $pjax_convertAllLinks = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\"><span class=\"comment\">// 所有的 a 标签</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> linkElements = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> linkElements) {</span><br><span class=\"line\">        <span class=\"comment\">// 有链接，不带 hash，且为本站链接</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i.href &amp;&amp; !i.href.includes(<span class=\"string\">\"/#\"</span>) &amp;&amp; (i.href.startsWith(<span class=\"string\">\"/\"</span>) || i.href.match(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"built_in\">window</span>.location.hostname)))) {</span><br><span class=\"line\">            <span class=\"keyword\">let</span> thisLink = <span class=\"keyword\">new</span> URL(i.href).pathname+<span class=\"keyword\">new</span> URL(i.href).hash;</span><br><span class=\"line\">            i.href = <span class=\"string\">`javascript:$pjax_jump('<span class=\"subst\">${thisLink}</span>');`</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>另外，要转化页面链接为全路径。</p>\n<p>这里参考了下 ChenYFan 的 Service Worker 函数，需要根据实际情况做出调整。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转换路径为全路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> $pjax_fullpath = <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> {</span><br><span class=\"line\">    path = path.split(<span class=\"string\">'?'</span>)[<span class=\"number\">0</span>].split(<span class=\"string\">'#'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.match(<span class=\"regexp\">/\\/$/</span>)) {</span><br><span class=\"line\">        path += <span class=\"string\">'index.html'</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!path.match(<span class=\"regexp\">/\\.[a-zA-Z]+$/</span>)) {</span><br><span class=\"line\">        path += <span class=\"string\">'/index.html'</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> path;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// $pjax_fullpath('/') =&gt; /index.html</span></span><br></pre></td></tr></table></figure><h3>\n<a href=\"https://blog.yfun.top/#%E8%B7%B3%E8%BD%AC\" class=\"headerlink\" title=\"跳转\"></a>跳转</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 跳转页面</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> $pjax_jump = <span class=\"keyword\">async</span> (path) =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">try</span> {</span><br><span class=\"line\">        <span class=\"comment\">// 是 # 就别跳转了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (path.startsWith(<span class=\"string\">\"#\"</span>)) {</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.hash = path;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"comment\">// 加载动画</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> loading = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">        loading.innerHTML = <span class=\"string\">`&lt;div style=\"position: fixed;top:0;left:0;z-index:99999;display: block;width: 100%;height: 4px;overflow: hidden;background-color: rgba(63,81,181,.2);border-radius: 2px;\"&gt;&lt;div class=\"progress-indeterminate\" style=\"background-color: #3f51b5;\"&gt;&lt;/div&gt;&lt;style&gt;#page-main{transition:0.2s;}.progress-indeterminate::before{position:absolute;top:0;bottom:0;left:0;background-color:inherit;-webkit-animation:mdui-progress-indeterminate 2s linear infinite;animation:mdui-progress-indeterminate 2s linear infinite;content:' ';will-change:left,width;}.progress-indeterminate::after{position:absolute;top:0;bottom:0;left:0;background-color:inherit;-webkit-animation:mdui-progress-indeterminate-short 2s linear infinite;animation:mdui-progress-indeterminate-short 2s linear infinite;content:' ';will-change:left,width;}@keyframes mdui-progress-indeterminate{0%{left:0;width:0;}50%{left:30%;width:70%;}75%{left:100%;width:0;}}@keyframes mdui-progress-indeterminate-short{0%{left:0;width:0;}50%{left:0;width:0;}75%{left:0;width:25%;}100%{left:100%;width:0;}}&lt;/style&gt;&lt;/div&gt;`</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 在 body 后加入 &lt;div&gt;</span></span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(loading);</span><br><span class=\"line\">        <span class=\"comment\">// 如果页面中没有 page.css 或 search.css，为防止样式错乱，需要在加载过程中隐藏页面内容</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"page_css\"</span>) || !<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"search_css\"</span>)) <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"page-main\"</span>).style.opacity = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 获取页面数据</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> pageData;</span><br><span class=\"line\">        <span class=\"comment\">// 看看 SessionStorage 里有没有缓存</span></span><br><span class=\"line\">        <span class=\"comment\">// 依赖后文的 prefetch</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sessionStorage.getItem(<span class=\"string\">`<span class=\"subst\">${location.protocol}</span>//<span class=\"subst\">${location.hostname}</span><span class=\"subst\">${location.port ? <span class=\"string\">\":\"</span>+location.port:location.port}</span><span class=\"subst\">${$pjax_fullpath(path)}</span>`</span>)) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"FROM SESSIONSTORAGE\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> {</span><br><span class=\"line\">                pageData = <span class=\"built_in\">JSON</span>.parse(sessionStorage.getItem(<span class=\"string\">`<span class=\"subst\">${location.protocol}</span>//<span class=\"subst\">${location.hostname}</span><span class=\"subst\">${location.port ? <span class=\"string\">\":\"</span>+location.port:location.port}</span><span class=\"subst\">${$pjax_fullpath(path)}</span>`</span>));</span><br><span class=\"line\">            } <span class=\"keyword\">catch</span>(e) {</span><br><span class=\"line\">                <span class=\"comment\">// 还是出错就从服务器获取</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"FROM SERVER\"</span>);</span><br><span class=\"line\">                pageData = <span class=\"keyword\">await</span> fetch($pjax_fullpath(path) + <span class=\"string\">\".page.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json());</span><br><span class=\"line\">                <span class=\"comment\">// 写到 SessionStorage 中</span></span><br><span class=\"line\">                sessionStorage.setItem(<span class=\"string\">`<span class=\"subst\">${location.protocol}</span>//<span class=\"subst\">${location.hostname}</span><span class=\"subst\">${location.port ? <span class=\"string\">\":\"</span>+location.port:location.port}</span><span class=\"subst\">${$pjax_fullpath(path)}</span>`</span>, <span class=\"built_in\">JSON</span>.stringify(pageData));</span><br><span class=\"line\">            }</span><br><span class=\"line\">        } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"FROM SERVER\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// fetch JSON</span></span><br><span class=\"line\">            pageData = <span class=\"keyword\">await</span> fetch($pjax_fullpath(path) + <span class=\"string\">\".page.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json());</span><br><span class=\"line\">            sessionStorage.setItem(<span class=\"string\">`<span class=\"subst\">${location.protocol}</span>//<span class=\"subst\">${location.hostname}</span><span class=\"subst\">${location.port ? <span class=\"string\">\":\"</span>+location.port:location.port}</span><span class=\"subst\">${$pjax_fullpath(path)}</span>`</span>, <span class=\"built_in\">JSON</span>.stringify(pageData));</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"comment\">// 补齐页面 CSS</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"search_css\"</span>)) {</span><br><span class=\"line\">            fetch(<span class=\"string\">\"/css/search.css\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.text()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">                <span class=\"keyword\">let</span> ele = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"style\"</span>);</span><br><span class=\"line\">                ele.innerHTML = res;</span><br><span class=\"line\">                ele.id = <span class=\"string\">\"search_css\"</span>;</span><br><span class=\"line\">                <span class=\"built_in\">document</span>.body.appendChild(ele);</span><br><span class=\"line\">            });</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"page_css\"</span>)) {</span><br><span class=\"line\">            fetch(<span class=\"string\">\"/css/page.css\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.text()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">                <span class=\"keyword\">let</span> ele = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"style\"</span>);</span><br><span class=\"line\">                ele.innerHTML = res;</span><br><span class=\"line\">                ele.id = <span class=\"string\">\"page_css\"</span>;</span><br><span class=\"line\">                <span class=\"built_in\">document</span>.body.appendChild(ele);</span><br><span class=\"line\">            });</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!pageData) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 组合 state</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> state = { <span class=\"attr\">title</span>: <span class=\"string\">''</span>, <span class=\"attr\">url</span>: <span class=\"built_in\">window</span>.location.href.split(<span class=\"string\">\"?\"</span>)[<span class=\"number\">0</span>] };</span><br><span class=\"line\">        <span class=\"comment\">// 利用 history.pushState() 修改地址栏而不跳转</span></span><br><span class=\"line\">        history.pushState(state, <span class=\"string\">''</span>, path);</span><br><span class=\"line\">        <span class=\"comment\">// 修改页面标题</span></span><br><span class=\"line\">        <span class=\"built_in\">document</span>.title = pageData.title;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">            <span class=\"comment\">// 滚动到页面顶部</span></span><br><span class=\"line\">            <span class=\"built_in\">window</span>.scrollTo({<span class=\"attr\">top</span>: <span class=\"number\">0</span>, <span class=\"attr\">behavior</span>: <span class=\"string\">\"smooth\"</span>});</span><br><span class=\"line\">            <span class=\"comment\">// 写入 HTML</span></span><br><span class=\"line\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"page-main\"</span>).innerHTML = pageData.page;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.onscroll = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> pageData.extraJS) {</span><br><span class=\"line\">                <span class=\"keyword\">try</span> {</span><br><span class=\"line\">                    <span class=\"comment\">// eval() 执行 JS</span></span><br><span class=\"line\">                    <span class=\"built_in\">eval</span>(pageData.extraJS[i]);</span><br><span class=\"line\">                } <span class=\"keyword\">catch</span>(e) {}</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">try</span>{$pjax_prefetch();}<span class=\"keyword\">catch</span>(e){}</span><br><span class=\"line\">            <span class=\"comment\">// 再次转换所有链接</span></span><br><span class=\"line\">            $pjax_convertAllLinks();</span><br><span class=\"line\">        }, <span class=\"number\">200</span>);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">            <span class=\"comment\">// 重新显示页面</span></span><br><span class=\"line\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"page-main\"</span>).style.opacity = <span class=\"number\">1</span>;</span><br><span class=\"line\">            loading.remove();</span><br><span class=\"line\">        }, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">catch</span>(e) {</span><br><span class=\"line\">        <span class=\"comment\">// 有报错 直接跳转</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.warn(e);</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.location.href = path;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>如果使用 <code>window.location.href</code> 修改，那么页面就会刷新。<br>为了实现无刷新跳转，必须要使用 <code>pushState()</code> 更改。</p>\n<p>执行 JavaScript 方面使用 <code>eval()</code> 函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组合 state</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> state = { <span class=\"attr\">title</span>: <span class=\"string\">''</span>, <span class=\"attr\">url</span>: <span class=\"built_in\">window</span>.location.href.split(<span class=\"string\">\"?\"</span>)[<span class=\"number\">0</span>] };</span><br><span class=\"line\"><span class=\"comment\">// 利用 history.pushState() 修改地址栏而不跳转</span></span><br><span class=\"line\">history.pushState(state, <span class=\"string\">''</span>, path);</span><br><span class=\"line\"><span class=\"comment\">// 修改页面标题</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.title = pageData.title;</span><br><span class=\"line\"><span class=\"comment\">// 滚动到页面顶部</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.scrollTo({<span class=\"attr\">top</span>: <span class=\"number\">0</span>, <span class=\"attr\">behavior</span>: <span class=\"string\">\"smooth\"</span>});</span><br><span class=\"line\"><span class=\"comment\">// 写入 HTML</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"page-main\"</span>).innerHTML = pageData.page;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> pageData.extraJS) {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"comment\">// eval() 执行 JS</span></span><br><span class=\"line\">    <span class=\"built_in\">eval</span>(pageData.extraJS[i]);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span>(e) {}</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h3>\n<a href=\"https://blog.yfun.top/#Prefetch-amp-Refetch\" class=\"headerlink\" title=\"Prefetch &amp; Refetch\"></a>Prefetch &amp; Refetch</h3>\n<p>此处借鉴乐特关于 Prefetch Page 的源码，当用户打开节流模式或为低速网络时就不要 Prefetch.</p>\n<p>Prefetch 可以提前缓存部分数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> $pjax_prefetch = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 节流和低速网络不要 Prefetch</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nav = navigator;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> { saveData, effectiveType } = nav.connection || nav.mozConnection || nav.webkitConnection || {};</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (saveData || <span class=\"regexp\">/2g/</span>.test(effectiveType)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// 此处是 Blog 的一些常见链接</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> posts_list = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\".index-header a\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> posts_list) {</span><br><span class=\"line\">        <span class=\"comment\">// 全路径</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> thisLink = $pjax_fullpath(posts_list[i].href);</span><br><span class=\"line\">        <span class=\"comment\">// Session Storage 没有才 Fetch</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!sessionStorage.getItem(thisLink)) {</span><br><span class=\"line\">            fetch(thisLink + <span class=\"string\">\".page.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.text()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">                sessionStorage.setItem(thisLink,res);</span><br><span class=\"line\">            });</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>Refetch 用于刷新已有的缓存（虽然 <code>SessionStorage</code> 关闭页面就没了）</p>\n<p>其原理也很简单，<code>SessionStorage</code> 中所有的 Pjax 缓存重新获取就完事了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> $pjax_refetch = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sst = sessionStorage;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> sst) {</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i.startsWith(<span class=\"string\">\"http://\"</span>) || i.startsWith(<span class=\"string\">\"https://\"</span>)) {</span><br><span class=\"line\">            fetch(i + <span class=\"string\">\".page.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.text()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">                sessionStorage.setItem(i, res);</span><br><span class=\"line\">            });</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%80%E4%BA%9B%E4%BC%98%E5%8C%96\" class=\"headerlink\" title=\"一些优化\"></a>一些优化</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#Prefetch-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"Prefetch CSS 文件\"></a>Prefetch CSS 文件</h4>\n<p>既然 CSS 文件需要补齐，那么打开页面 5s 后自动 Prefetch 可以提升速度。</p>\n<blockquote><p>5s 后再获取是为了防止阻塞页面。</p></blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"comment\">// Prefetch CSS 文件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"search_css\"</span>)) {</span><br><span class=\"line\">        fetch(<span class=\"string\">\"/css/search.css\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.text()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">            <span class=\"keyword\">let</span> ele = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"style\"</span>)</span><br><span class=\"line\">            ele.innerHTML = res;</span><br><span class=\"line\">            ele.id = <span class=\"string\">\"search_css\"</span>;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(ele);</span><br><span class=\"line\">        });</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"page_css\"</span>)) {</span><br><span class=\"line\">        fetch(<span class=\"string\">\"/css/page.css\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.text()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">            <span class=\"keyword\">let</span> ele = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"style\"</span>)</span><br><span class=\"line\">            ele.innerHTML = res;</span><br><span class=\"line\">            ele.id = <span class=\"string\">\"page_css\"</span>;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(ele);</span><br><span class=\"line\">        });</span><br><span class=\"line\">    }    </span><br><span class=\"line\">}, <span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure><h4>\n<a href=\"https://blog.yfun.top/#%E5%85%B3%E4%BA%8E-Robots\" class=\"headerlink\" title=\"关于 Robots\"></a>关于 Robots</h4>\n<p>当你运行 <code>$pjax_convertAllLinks();</code> 后，你肯定会发现所有的链接都变成了 <code>javascript:$pjax_jump('/xxx');</code>。这对机器人来说很不友好。</p>\n<p>所以，我们需要排除这些机器人。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> runningOnBrowser = <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">\"undefined\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> isBot = runningOnBrowser &amp;&amp; !(<span class=\"string\">\"onscroll\"</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>) || <span class=\"keyword\">typeof</span> navigator !== <span class=\"string\">\"undefined\"</span> &amp;&amp; <span class=\"regexp\">/(gle|ing|ro|msn)bot|crawl|spider|yand|duckgo/i</span>.test(navigator.userAgent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (runningOnBrowser &amp;&amp; !isBot) {</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">try</span>{$pjax_prefetch();}<span class=\"keyword\">catch</span>(e){}</span><br><span class=\"line\">        $pjax_convertAllLinks();</span><br><span class=\"line\">    }, <span class=\"number\">100</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%90%8E\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>在启用 Pjax 后，YFun's Blog 传输大小理论上最高缩小 3/4，性能速度均有提升。</p>\n<p>如果你也在使用 Pjax，不妨试试看。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%BF%98%E6%9C%89%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF\" class=\"headerlink\" title=\"还有一些错误\"></a>还有一些错误</h2>\n<p>如果你定义了 <code>onload</code> 等事件，页面没有刷新即代表没有变化，你需要在 <code>$pjax_jump()</code> 中简单清除一下这些信息。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%B9%BF%E5%91%8A%E6%97%B6%E9%97%B4\" class=\"headerlink\" title=\"广告时间\"></a>广告时间</h2>\n<p>我的博客即将同步至腾讯云开发者社区，邀请大家一同入驻：<a href=\"https://cloud.tencent.com/developer/support-plan?invite_code=16qkaef2qdvzm\">https://cloud.tencent.com/developer/support-plan?invite_code=16qkaef2qdvzm</a></p>\n","link":"https://blog.yfun.top/posts/2022/pjax/"},{"title":"抛弃静态博客的缺点，用 ESHexoN 在线编辑！","date":"2022-12-04 16:00:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF-ESHexoN\" class=\"headerlink\" title=\"什么是 ESHexoN?\"></a>什么是 ESHexoN?</h2>\n<blockquote><p>ESHexoN 是一款简洁、强大的 Hexo 在线编辑器。</p></blockquote>\n<p>其灵感来自于 <a href=\"https://github.com/HexoPlusPlus/HexoPlusPlus\">HexoPlusPlus/HexoPlusPlus</a> (基于 Cloudflare Workers 的无服务器 Hexo 后端)</p>\n<p>但是，遗憾的是 HPP 突然停止维护，只留下一个 <a href=\"https://github.com/Wexagonal/Wexagonal\">Wexagonal</a>。</p>\n<blockquote><p>However, 这更新速度也太慢了啊喂~</p></blockquote>\n<p><a href=\"https://github.com/Qexo/Qexo\">Qexo</a> 也是一个很不错的项目，但是它基于 Python + MongoDB，不属于我擅长的技术栈，有点劝退。</p>\n<p>于是，ESHexoN 诞生了。它致力于使用 JavaScript Edge Function 构建 Hexo「后端」，实现普通静态博客所不具备的功能，解决大部分静态博客的痛点。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-ESHexoN\" class=\"headerlink\" title=\"如何使用 ESHexoN?\"></a>如何使用 ESHexoN?</h2>\n<blockquote><p>ESHexoN 的使用说明可以参见文档 --&gt; <a href=\"https://eshexon-docs.netlify.app/\">文档链接</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#ESHexoN-%E4%BB%A3%E7%A0%81-amp-%E5%8E%9F%E7%90%86\" class=\"headerlink\" title=\"ESHexoN 代码 &amp; 原理\"></a>ESHexoN 代码 &amp; 原理</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"代码目录\"></a>代码目录</h3>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205115647.png\"></p>\n<p><code>dist</code> 目录存放构建的文件，<code>src</code> 目录为源码，<code>tools</code> 是一些工具，<code>index.js</code> 则为入口文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%90%8E%E7%AB%AF%E7%9A%84%E4%B8%BB%E8%A6%81%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"后端的主要文件\"></a>后端的主要文件</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#src-res-js\" class=\"headerlink\" title=\"src/res.js\"></a><code>src/res.js</code>\n</h4>\n<p><code>res.js</code> 主要负责 HTTP 响应输出，统一输出格式。</p>\n<p>故 ESHexoN API 主要返回格式为:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"statusCode\"</span>: <span class=\"string\">\"...\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"statusInfo\"</span>: <span class=\"string\">\"...\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p><a href=\"https://github.com/ESHexoN/ESHexoN/blob/master/src/res.js\">[Source Code]</a></p>\n<h4>\n<a href=\"https://blog.yfun.top/#src-check-token-js\" class=\"headerlink\" title=\"src/check_token.js\"></a><code>src/check_token.js</code>\n</h4>\n<p><code>check_token.js</code> 主要负责 API 请求的鉴权，所有的鉴权 API 都需要携带 <code>token</code> 发送。</p>\n<p>生成代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> token = md5(userdata[<span class=\"number\">0</span>].username + userdata[<span class=\"number\">0</span>].password + <span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.now()).getFullYear()}</span><span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.now()).getMonth()+<span class=\"number\">1</span>}</span>`</span>);</span><br></pre></td></tr></table></figure><p>故 ESHexoN Token 格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">md5(USERNAME+PASSWORD+YEAR+MONTH);</span><br></pre></td></tr></table></figure><p>过期时间为一个月。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#src-env-js\" class=\"headerlink\" title=\"src/env.js\"></a><code>src/env.js</code>\n</h4>\n<p>ESHexoN 除了依靠 <a href=\"https://github.com/yfun-lab/gh-worker-kv\">yfun-lab/gh-worker-kv</a> 存储主要数据库文件外，还使用环境变量存储基本的 Token、仓库等。</p>\n<p>ESHexoN 自设计之初就预备支持 Cloudflare Workers, Deno 等平台。</p>\n<p>事实上，这两个平台获取环境变量的方式根本不一样。为了在一个代码下同时支持两个平台，<code>env.js</code> 简单的写了个判断。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205120944.png\"></p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%98%AF%E4%B8%8D%E6%98%AF%E7%9B%AE%E5%BD%95%EF%BC%9F%E6%96%87%E4%BB%B6%E9%81%8D%E5%8E%86\" class=\"headerlink\" title=\"是不是目录？文件遍历\"></a>是不是目录？文件遍历</h4>\n<p>GitHub API 会返回当前目录下的文件和文件夹，但有人的 <code>source/_posts</code> 目录下还有文件夹。根据观察发现，文件夹的 <code>type</code> 为 <code>dir</code>，而普通文件为 <code>file</code>，那么只需要一个简单的判断，就可以返回单个目录下所有文件。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205121416.png\"></p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E5%86%99%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"写文件\"></a>写文件</h4>\n<p>在写文件之前，我们需要先获取该文件的 <code>sha</code> 值。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205121728.png\"></p>\n<blockquote><p>这是因为 GitHub 规定修改文件必须在 <code>body</code> 中携带源文件 <code>sha</code>.</p></blockquote>\n<p>同时，文件还必须接受 Base64 编码。这个问题很好解决，ESHexoN 的仓库依赖中已经包含。当然，我更倾向于在前端编码文本，在后端直接 PUT。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E9%82%A3%E5%89%8D%E7%AB%AF%E5%91%A2%EF%BC%9F\" class=\"headerlink\" title=\"那前端呢？\"></a>那前端呢？</h3>\n<p>以上是后端的主要代码。因为 ESHexoN 是前后端分离项目，并且开放跨域，所以我们构建了一个官方前端。只需要输入你的用户名、密码和后端地址就可以开始使用。</p>\n<p>前端的代码也是开源的，基于 Vue + Vuetify 构建，<a href=\"https://github.com/ESHexoN/eshexon-frontend\">在 GitHub 上查看它</a></p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%BB%86%E8%8A%82\" class=\"headerlink\" title=\"一些小细节\"></a>一些小细节</h4>\n<p>早在 HexoPlusPlus <code>dev</code> 阶段的时候，ChenYFan 就在群内讨论如何解决 Markdown 编辑器的问题。在当时，EditorMD 的兼容性很差。于是，HPP 上采取的解决方案是：<code>textarea</code> + <code>marked.js</code>。</p>\n<p>然后，HPP 编辑器就是这样的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205122539.png\"></p>\n<p>这并不是一个很好的主意。</p>\n<p>于是在 ESHexoN 上，我们为 Hexo 特性定制了一款简单的编辑器。</p>\n<p>首先，它是由 <a href=\"https://yfun.top/lab/markdown/\">https://yfun.top/lab/markdown/</a> 修改而来的，在部分特性上与其类似。</p>\n<p>但是受限于页面尺寸和小屏幕优化，ESHexoN 的编辑器在大屏上是这样显示的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205122828.png\"></p>\n<p>双栏布局，实时预览。</p>\n<p>为了保证在小屏幕的体验，在小屏幕上将自动收起预览，改为全屏模式。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205122955.png\"></p>\n<p>如果需要预览，可以点击「预览」按键。</p>\n<p>同时 ESHexoN 的编辑器有自动保存功能，即使写到一半刷新页面或是浏览器崩溃也不用怕，页面内容已经存储到 <code>localStorage</code> 内了。（我也不知道会不会撑炸</p>\n<p>一些基本的搜索功能都得以保留（与 HPP 是十分甚至九分的类似</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205123316.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205123356.png\"></p>\n<p>不仅仅局限于文章，配置文件、代码都可以修改：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205123427.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%9C%A8%E6%9C%AA%E6%9D%A5\" class=\"headerlink\" title=\"在未来\"></a>在未来</h2>\n<p>目前 ESHexoN 还处于 Beta 阶段，部分功能还没有开发完成。</p>\n<p>关于说说、评论等也都在等待开发（最近可能不会有）</p>\n<p>如果在使用中出现了任何的问题，欢迎提 Issue 反馈。</p>\n","link":"https://blog.yfun.top/posts/2022/eshexon/"},{"title":"让阅读无缝衔接 —— JS 获取用户阅读进度","date":"2022-11-11 16:40:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>很多博客中最常见的问题就是：文章很长，但是读者很忙。下次阅读的时候，可能要花一些时间才能恢复到先前的阅读位置。</p>\n<p>如果可以设备间，识别二维码或是一个链接就可以让阅读无缝衔接，直接跳转到相应位置，那么阅读体验就会变得更加优秀。</p>\n<p>那么，开始吧！</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%9E%E8%B7%B5\" class=\"headerlink\" title=\"实践\"></a>实践</h2>\n<p>要知道阅读位置，那么就要知道当前页面的坐标。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getScrollPosition = <span class=\"function\">(<span class=\"params\">el = <span class=\"built_in\">window</span></span>) =&gt;</span> ({</span><br><span class=\"line\">    x: el.pageXOffset !== <span class=\"literal\">undefined</span> ? el.pageXOffset : el.scrollLeft,</span><br><span class=\"line\">    y: el.pageYOffset !== <span class=\"literal\">undefined</span> ? el.pageYOffset : el.scrollTop</span><br><span class=\"line\">});</span><br><span class=\"line\"><span class=\"comment\">// getScollPosition().x =&gt; 页面横坐标; getScrollPosition().y =&gt; 页面纵坐标;</span></span><br></pre></td></tr></table></figure><p>大部分情况下，我们只用关注纵坐标。横坐标大概率为 <code>0</code>。</p>\n<p>我们还需要一个页面滚动的事件，用于记录当前坐标，并储存在临时存储中。</p>\n<p>至于为什么是 <code>sessionStorage</code> 而不是 <code>localStorage</code>，则是因为 <code>localStorage</code> 除手动清除外，不会自动过期。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此处的 750 是「页面元素的最大宽度」</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> wx = <span class=\"built_in\">window</span>.innerWidth &gt;= <span class=\"number\">750</span> ? <span class=\"number\">750</span> : <span class=\"built_in\">window</span>.innerWidth;</span><br><span class=\"line\"><span class=\"keyword\">var</span> wy = <span class=\"built_in\">window</span>.innerHeight;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">windowScroll</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 反复修改 确保页面尺寸不改变</span></span><br><span class=\"line\">    wx = <span class=\"built_in\">window</span>.innerWidth &gt;= <span class=\"number\">750</span> ? <span class=\"number\">750</span> : <span class=\"built_in\">window</span>.innerWidth;</span><br><span class=\"line\">    wy = <span class=\"built_in\">window</span>.innerHeight;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"built_in\">Math</span>.round(getScrollPosition().y);</span><br><span class=\"line\">    <span class=\"comment\">// 组合字符串，同时记录页面坐标，页面宽度和高度</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = <span class=\"string\">`<span class=\"subst\">${y}</span>:<span class=\"subst\">${wx}</span>:<span class=\"subst\">${wy}</span>`</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 写入到 sessionStorage 中</span></span><br><span class=\"line\">    sessionStorage.setItem(<span class=\"string\">\"read_y\"</span>, p);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = windowScroll;</span><br></pre></td></tr></table></figure><p>你可能发现了，此处的变量 <code>p</code>，并不仅仅是「页面纵坐标」，而是「页面高度」与「纵坐标」的组合字符串。</p>\n<p>事实上，如果单纯是纵坐标判断位置，那么在不同高度，不同宽度的设备上，就会出现错位的情况。而同时记录三个信息，就可以还原真实坐标。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// URL 中是否包含传递的坐标信息</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (location.hash.split(<span class=\"string\">\"#read=\"</span>).length &gt; <span class=\"number\">1</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// 分离字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> read_y = location.hash.split(<span class=\"string\">\"#read=\"</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    read_y = read_y.split(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 组合乘积，顺滑移动至坐标</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.scrollTo({<span class=\"attr\">top</span>: <span class=\"built_in\">Math</span>.round(<span class=\"built_in\">Number</span>(read_y[<span class=\"number\">0</span>]) * <span class=\"built_in\">Number</span>(read_y[<span class=\"number\">1</span>] * <span class=\"built_in\">Number</span>(read_y[<span class=\"number\">2</span>] / wx / wy))), <span class=\"attr\">behavior</span>: <span class=\"string\">\"smooth\"</span>});</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 从 sessionStorage 中获取</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> read_y = sessionStorage.getItem(<span class=\"string\">\"read_y\"</span>) || <span class=\"string\">\"0:0:0\"</span>;</span><br><span class=\"line\">    read_y = read_y.split(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.scrollTo({<span class=\"attr\">top</span>: <span class=\"built_in\">Math</span>.round(<span class=\"built_in\">Number</span>(read_y[<span class=\"number\">0</span>]) * <span class=\"built_in\">Number</span>(read_y[<span class=\"number\">1</span>] * <span class=\"built_in\">Number</span>(read_y[<span class=\"number\">2</span>] / wx / wy))), <span class=\"attr\">behavior</span>: <span class=\"string\">\"smooth\"</span>});</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>到现在，我们已经完成了 URL 的解析和基本生成。</p>\n<p>那么，URL 即为:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`<span class=\"subst\">${location.protocol}</span>//<span class=\"subst\">${location.hostname}</span><span class=\"subst\">${location.port ? <span class=\"string\">\":\"</span>+location.port:location.port}</span><span class=\"subst\">${location.pathname}</span>#read=<span class=\"subst\">${sessionStorage.getItem(<span class=\"string\">\"read_y\"</span>)}</span>`</span>;</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%90%8E\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>搭配生成二维码等插件效果更佳。</p>\n<blockquote><p>Miracle 主题将在下个版本中更新该功能。</p></blockquote>\n","link":"https://blog.yfun.top/posts/2022/js-get-users-reading-progress/"},{"title":"React 为什么重新渲染","date":"2022-09-06 08:29:00","description":"\n<p>更新（重新渲染）是 React 的重要特性 —— 当用户与应用交互的时候，React 需要重新渲染、更新 UI，以响应用户的输入。但是，React 为什么会重新渲染呢？如果不知道 React 为什么会重新渲染，我们如何才能避免额外的重新渲染呢？</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/186432/20/28325/37613/631725bbEf2ff226e/66b99021df66578b.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/react-re-renders-101/\">https://blog.skk.moe/post/react-re-renders-101/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/react-re-renders-101/"},{"title":"为什么你不应该在 React 中直接使用 useEffect 从 API 获取数据","date":"2022-08-19 08:53:00","description":"\n<p>React 是一个由 Facebook 开源的、可以在任意平台上构建 UI 的 JavaScript 库。在 React 中，一个常见的 Pattern 是使用 <code>useEffect</code> 搭配 <code>useState</code> 发送请求、将状态从 API（React 外部）同步到 React 内部、用于渲染 UI，这篇文章恰恰在向你介绍为什么你不应该直接这么做。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/180676/37/27394/27265/62ff57f2E600b3725/cff75c5fca39bbcc.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/\">https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/"},{"title":"NPM 自动更新版本号","date":"2022-08-04 05:00:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>ChenYFan 大佬的文章：<a href=\"https://blog.cyfan.top/p/d3c51290.html\">SpeedUp!使用黑科技为你的网站提速</a> 有提到过将 Hexo 博客的全部静态文件上传至 NPM 达到加速效果。</p>\n<p>但是 NPM 版本号不能重复，而且为了精准命中缓存和防止边缘 <code>@latest</code> 缓存过长，就必须指定版本号。</p>\n<p>本人在 <a href=\"https://blog.yfun.top/posts/2876015612/\">我的图床解决方案</a> 一文中使用的方法是 <code>npm version patch</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804133426.png\"></p>\n<p>但这个方法也有一些弊端，比如 <code>patch</code> 只会更新 <code>z</code> 位数的版本号，而且并不会上传至仓库，很可能会出现版本号冲突导致上传失败。这就是为什么最后还需要重新推送 Git 提交。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%95%E8%AF%95%E7%9C%8B\" class=\"headerlink\" title=\"试试看\"></a>试试看</h2>\n<p>NPM 版本号遵循 <code>semver</code> 规范，格式为 <code>major.minor.patch</code>。</p>\n<p>为了在获取最新版本号的时候不发生混乱，我选择先获取最新的版本号。</p>\n<blockquote><p>记得把 <code>cky-blog-static</code> 改成自己的项目名。</p></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>获取到最新版本号后，就可以对版本号进行分析。</p>\n<p>以 <code>1.4.7-b541af2ea284a39da0bbf63b88fdb65c</code> 为例，先按 <code>major.minor.patch</code> 分离。当然，也需要考虑版本号后还有 <code>build metadata</code> 的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\"><span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure><p><del>为了版本号好看些</del>，可以通过判断实现满十进一。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位小于 9，直接 +1</span></span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">} <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位大于等于 9，y 位小于 9，y+1, z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\"><span class=\"comment\">// z 大于等于 9，y 大于等于 9，x+1,y=0,z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>最后，重新拼接版本号。如果担心服务器缓存版本号导致冲突，还可以加上一些随机字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br></pre></td></tr></table></figure><p>将最新的版本号信息重新写入 <code>package.json</code> 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">packageJson.version = newVersion;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p><del>直接 CV 代码！</del></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新 package.json 版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fetch = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-fetch\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">\"js-md5\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> update = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">    verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newVersion);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">    packageJson.version = newVersion;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">    fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Complete!!\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">update();</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%90%8E\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>如果是 Hexo 文件部署，就可以直接把文件直接丢在项目根目录，Action 集成部署加上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node update.js</span><br></pre></td></tr></table></figure><p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804135818.png\"></p>\n<p><del>Blog 半年没更新，除除草 --(....</del></p>\n","link":"https://blog.yfun.top/posts/2022/auto-update-npm-version/"},{"title":"我有特别的 DNS 配置和使用技巧","date":"2022-07-28 15:31:00","description":"\n<p>众所周知，DNS 的作用与电话簿类似，将人类可读的域名映射到机器可读 IP 地址、使人更方便地访问互联网。DNS 是非常重要的互联网基础设施，对于改善上网冲浪的体验中的重要程度不容小觑。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/96381/31/31172/23930/62e2ab5bE554d388b/37027f4a03351b9e.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/i-have-my-unique-dns-setup/\">https://blog.skk.moe/post/i-have-my-unique-dns-setup/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/i-have-my-unique-dns-setup/"},{"title":"优化博客的累计布局偏移（CLS）问题","date":"2022-06-07 17:24:00","description":"\n<p>距离上一篇文章发布已有四个月了，是时候写几篇文章给博客除草了。上一次我介绍了我如何迁移、重构了我的博客的架构，这次我想来谈谈我在重构中优化和打磨访客体验时解决的一个问题。我的博客优化之旅 图片 lazyload 的学问和在 Hexo 上的最佳实践 我的博客有多快？ 天下武功，唯快不破 —— 我是这样优化博客的 ...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/206311/26/14625/38940/629f7f81Eb11312de/b1e67f07b1cc9bc7.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/fix-blog-cls/\">https://blog.skk.moe/post/fix-blog-cls/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/fix-blog-cls/"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img decoding=\"async\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img decoding=\"async\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img decoding=\"async\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img decoding=\"async\" loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"}]