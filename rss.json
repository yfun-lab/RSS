[{"title":"新玩意 125｜少数派的作者们最近买了啥？","date":"2022-10-27 09:30:00","description":"关于栏目为了满足读者们对于《新玩意》栏目加更的需求，机器人特地邀请了Matrix作者们也来聊聊自己近期购买的新奇产品。喜欢本栏目的话，欢迎充电或评论文章来表达自己的喜爱，你的每一次真心夸赞或建议，都是 ...<a href=\"https://sspai.com/post/76455\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76455"},{"title":"从零开始做好个人记账，和购物节血拼后遗症说拜拜","date":"2022-10-27 08:00:00","description":"多年财会经验，带你零基础入门个人记账，实现财富管理的第一步。<a href=\"https://sspai.com/post/76437\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76437"},{"title":"桌椅、键鼠、颈托……人体工学设备是智商税吗？","date":"2022-10-27 06:30:00","description":"同事总是腰疼，跑去按摩医院按摩，趴在按摩床上，医生问她，你每天坐多久？她说，7-8个小时吧，医生问：一般连续坐多久，她说3-4个小时，医生和我同时发出惊呼：「啊？」她说：「嗯，开会。」大部分长期坐在电 ...<a href=\"https://sspai.com/post/76452\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76452"},{"title":"全线涨价、种类繁多：冬季新 iPad 怎么选？","date":"2022-10-27 03:30:00","description":"只希望你在看完这篇文章之后，能够帮助你做出产品选择的同时，也能帮你找到当决定要买 iPad 的初心。<a href=\"https://sspai.com/post/76423\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76423"},{"title":"派早报：索尼推出 A7R V 相机、CDPR 确认《巫师》重制版开发中等","date":"2022-10-27 00:37:31","description":"Nothing 推出新款耳机 Ear (stick)、LINE 推出可商用字型等。<a href=\"https://sspai.com/post/76441\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76441"},{"title":"任意键｜让玩家苦等八年的《蔑视》，曲高和寡还是虚有其表？","date":"2022-10-26 09:25:21","description":"「任意键」正式上线啦！为了丰富各位派友的阅读体验，我们尝试为「任意键」增加了对应的音频内容，邀请了我派的两位带薪打游戏选手编辑@Kiririn和@一只索狗从玩家视角对当期的主要内容进行谈论和评述。您可 ...<a href=\"https://sspai.com/post/76430\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76430"},{"title":"对着白纸文思枯竭？LEX 想用 AI 帮你算出第一段","date":"2022-10-26 07:34:40","description":"Matrix首页推荐Matrix是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选Matrix最优质的文章，展示来自用户的最真实的体验和观点。文章代表作者个人观点 ...<a href=\"https://sspai.com/post/76362\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76362"},{"title":"小众与流行交织，乱象与发展并存——一个玩家兼创作者眼中的键盘圈","date":"2022-10-26 06:39:00","description":"2022 年，对我来说是不平凡的一年，键圈的兴亡成败在这一年格外明显。我来讲讲这一年的所思所想和所感，以及今后的一些打算。<a href=\"https://sspai.com/post/76367\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76367"},{"title":"macOS Ventura 正式版来了，升级之后试试这些新变化","date":"2022-10-26 03:30:00","description":"少数派为你整理了 macOS Ventura 中值得关注的系统新特性，希望能够帮助你快速熟悉新系统。<a href=\"https://sspai.com/post/76393\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76393"},{"title":"派早报：云米发布多款新品、微软发布 Windows Dev Kit 套件等","date":"2022-10-26 01:10:15","description":"Shutterstock 将与 OpenAI 合作售卖 AI 创作内容，App Store 更新 NFT 相关规则等。<a href=\"https://sspai.com/post/76426\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76426"},{"title":"当未来自动驾驶成为常态，汽车会出现哪些「意想不到」的功能、设计？","date":"2022-10-25 03:08:46","description":"\n<p data-pid=\"WwEyAHF-\">首先，车辆架构会有巨大的变化，将会取消人员驾驶功能，没有方向盘，没有刹车踏板，无论是转向系统，传动系统，行驶系统还是制动系统，一切都是线控方式。人们在车内，就像在一个移动的房间里。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3baa675243c7c31773384639586af601_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-watermark=\"watermark\" data-original-src=\"v2-3baa675243c7c31773384639586af601\" data-watermark-src=\"v2-7ed0223cb0f1a82280c0ed60e0cdc934\" data-private-watermark-src=\"v2-2c6db5f6e5052e923c5a3dbf0e50034d\"></p>\n<p data-pid=\"HYahEgQB\">自动驾驶将会先普及公共交通方式，因为公摊后的较低成本能更好的在公共交通设施上加比较昂贵的感知设备和优化后的算法，如公交车，的士等，会优先普及使用<a href=\"https://www.zhihu.com/search?q=%E6%97%A0%E4%BA%BA%E9%A9%BE%E9%A9%B6%E7%B3%BB%E7%BB%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2076177732%7D\" class=\"internal\">无人驾驶系统</a>。这类车型有个共同的特点，就是不再设置驾驶位，车厢内部全部由乘客的座位构成。</p>\n<p data-pid=\"qTW_J1SN\">当然早期的时候可能还会有安全冗余，方向盘可以隐藏在车体内，而冗余的刹车设置可能也为了节省空间，而弄成手动或者虚拟刹车的体感操控。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a148bf7ed1c1aea1bd75753a5864e733_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"382\" data-watermark=\"watermark\" data-original-src=\"v2-a148bf7ed1c1aea1bd75753a5864e733\" data-watermark-src=\"v2-8c3618783cd6ec1008b8e1a69fac79b0\" data-private-watermark-src=\"v2-d0ca4bdae2998c845441ad9abfe166f9\"></p>\n<p data-pid=\"hbyIB1cy\">然后到了自动驾驶成为常态，这些冗余的安全设施将会逐步淘汰，取消驾驶室，底盘变薄，车内的空间因为机械性的架构基本退出，即便是一个外观较小的A级车的车身，依旧会有B级车甚至C级车的空间，但重量却比现在的A级车还要轻。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c86270b575d26cdc5cf3211d9d0d27d6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"501\" data-rawheight=\"289\" data-watermark=\"watermark\" data-original-src=\"v2-c86270b575d26cdc5cf3211d9d0d27d6\" data-watermark-src=\"v2-75fc5c1e2b1a060e8f86b64883da33d8\" data-private-watermark-src=\"v2-8213fb44fa6aa9c7b93b01da49442ac1\"></p>\n<p data-pid=\"1Jx9wxYw\">就以刹车系统的优化举个简单的例子。</p>\n<p data-pid=\"gwmyKtF1\">乘用车上经常用的<a href=\"https://www.zhihu.com/search?q=%E6%B6%B2%E5%8E%8B%E5%88%B6%E5%8A%A8%E7%B3%BB%E7%BB%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2603161485%7D\" class=\"internal\">液压制动系统</a>，当驾驶员踩下制动踏板后，通过推杆（助力）推动主缸活塞，使得主缸内的油液进入<a href=\"https://www.zhihu.com/search?q=%E5%88%B6%E5%8A%A8%E8%BD%AE%E7%BC%B8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2603161485%7D\" class=\"internal\">制动轮缸</a>，制动液使得活塞推动制动蹄向外运动，将摩擦片压紧在制动鼓上面，产生阻碍车轮转动的制动力矩。放松制动踏板，在回位弹簧的作用下，制动取消。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fbce040083b5bd66f558acc9ea622a09_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"731\" data-rawheight=\"789\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Fca3HTMl\">而现在的<a href=\"https://www.zhihu.com/search?q=%E7%BA%BF%E6%8E%A7%E5%88%B6%E5%8A%A8%E7%B3%BB%E7%BB%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2603161485%7D\" class=\"internal\">线控制动系统</a>则是和线控传动系统一样，制动踏板和刹车功能不再是传统的物理连接，而是线控连接，原有的液压装置不再和踏板连接，原有的液压系统、助力系统、<a href=\"https://www.zhihu.com/search?q=%E5%88%B9%E8%BD%A6%E5%88%B6%E5%8A%A8%E5%99%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2603161485%7D\" class=\"internal\">刹车制动器</a>均由电子系统接管。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5859d19ac47d48f5e212f2417853c8c6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"957\" data-rawheight=\"375\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"K2Wb3vAN\">制动踏板的传感器对踏板的受力程度（大小、快慢）给出反馈电信号，ECU综合车速等车辆状态信息，驱动和控制执行电机来产生所需的制动力。</p>\n<p data-pid=\"5uXpaWCM\">而到了未来的纯线控，就会取消制动踏板，传感器这类机械构造，直接由感知设备传输数据给芯片，芯片给出处理意见，发给制动器进行执行，架构基本都是电线，会大幅减轻重量和节省空间。</p>\n<p data-pid=\"J8677awG\">其次，固态/半固态电池将会取代现在的能源方式，密度将会得到十倍往上的提升。</p>\n<p data-pid=\"9oJhGhYE\">（负极采用<a href=\"https://www.zhihu.com/search?q=%E9%87%91%E5%B1%9E%E9%94%82&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2190529979%7D\" class=\"internal\">金属锂</a>，正极采用硫化物或空气，对应<a href=\"https://www.zhihu.com/search?q=%E9%94%82%E7%A1%AB%E7%94%B5%E6%B1%A0&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2503044022%7D\" class=\"internal\">锂硫电池</a>和锂空电池，<b>理论能量密度达到当前锂电池理论值(387wh/kg)的7-10倍。</b>）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d9c2e2f26aac96f3648cc083bb25b18f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"605\" data-rawheight=\"362\" data-watermark=\"watermark\" data-original-src=\"v2-d9c2e2f26aac96f3648cc083bb25b18f\" data-watermark-src=\"v2-689ffa7e192bc7d8ceabe1cbffa777f5\" data-private-watermark-src=\"v2-6c08edfa8b0c2c828cc07791764f155b\"></p>\n<p data-pid=\"EqLRvaBs\">现在支持续航800公里，电池系统密度180wh/kg，电池得大几百公斤的重量，实际占据了车身重量的三分之一，即便是换电，也需要专门的换电站才能换这种超重的电池。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-766b2f34fdcb277ac32fa9bf82cb1368_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"330\" data-watermark=\"watermark\" data-original-src=\"v2-766b2f34fdcb277ac32fa9bf82cb1368\" data-watermark-src=\"v2-c09db9dacf65f37593d73092f03fd165\" data-private-watermark-src=\"v2-4586e63c6326ce7b85ca27a702ecdff9\"></p>\n<p data-pid=\"OPs-DXWP\">而未来电池的能量密度比现在装车的三元锂电池的180wh/kg高十倍，且因为车辆线控化变得大幅减重的车身+大幅瘦身的电池，变得一个成年人能手提的电池重量，插入汽车的电池仓，就能支持装载4-5人的小型汽车500公里的续航。更换过程就类似于之前阿波罗登月飞船换小型核电池一样。</p>\n<p><img src=\"https://picx1.zhimg.com/v2-725001ebc6289b03726999199e65c47f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"405\" data-watermark=\"watermark\" data-original-src=\"v2-725001ebc6289b03726999199e65c47f\" data-watermark-src=\"v2-31e91ac451257e3b669318a5679802ca\" data-private-watermark-src=\"v2-ebdfb6fb7ae97fe6138f683bebc9e3ee\"></p>\n<p data-pid=\"cWUsKYPz\">而除了能量密度大幅增加以外，未来的电池的安全性会增加，电解质难泄露不挥发不易燃，即便戳破外壳，丢进火堆里面烤，电池都不会出现剧烈燃烧或者爆炸，将会比传统燃油车更加安全。</p>\n<p data-pid=\"zZwUv-_x\">其次随着6G或者7G的普及，在遍布低轨卫星的数据联系下，全球各地将会无死角覆盖信号，无延迟的大数据传输，将会使得汽车不需要有思考，不需要装配高算力芯片和大数据存储芯片，而是只需要装配有感知设备，信号传输设备（发出，接收）即可。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-56e167c446957c75bff64de622bc0cf9_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"397\" data-watermark=\"watermark\" data-original-src=\"v2-56e167c446957c75bff64de622bc0cf9\" data-watermark-src=\"v2-4f9d75b05937ed2508c85e24b1160e95\" data-private-watermark-src=\"v2-a806c57b2b95e89cee620ee58343e876\"></p>\n<p data-pid=\"KeG50shK\">这个和车辆的电子电气架构相似，先是分布式电子电气架构，转成现在的域集中电子电气架构，最后变成车辆功能在云端，依靠云计算，云处理来达到汽车的各项功能。</p>\n<p><img src=\"https://pica.zhimg.com/v2-6d0f6224def17805d15b9de15c653324_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"263\" data-watermark=\"watermark\" data-original-src=\"v2-6d0f6224def17805d15b9de15c653324\" data-watermark-src=\"v2-0bc56e558495aad3ec1904c461d6ca04\" data-private-watermark-src=\"v2-77cca1fa0a7c18fdc1901f841af8c284\"></p>\n<p data-pid=\"M-iC_83C\">而这些云端功能将会大幅降低汽车的硬件支出设备，使得中低端汽车的售价能变得更平易近人，就如同现在的手机一样会迅速普及到各个阶层。拥有最好感知设备的汽车售价依旧不菲，但在大城市里面，拥有着完善的V2X设施的汽车，实际汽车并不需要那么高精尖的感知设备，所以大部分人使用的汽车都是普通版本的，只需要缴纳云端费用就可以开启自动驾驶模式。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d80a6a26b076bf9fc3a903af01b719e8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"542\" data-rawheight=\"300\" data-watermark=\"watermark\" data-original-src=\"v2-d80a6a26b076bf9fc3a903af01b719e8\" data-watermark-src=\"v2-b8169c879fc27ddf7e4732deeca32bd8\" data-private-watermark-src=\"v2-fd45a0b22f9ada91cbce796d3ab9d6d1\"></p>\n<p data-pid=\"VrzuxMKJ\">就如同现在的手机需要缴纳网费才让你上网一样，甚至有可能出现不同的月度缴纳费用，来保障自动驾驶的级别，比如月付200，可以开通L4-1，在大部分城市路段可以使用自动驾驶。月付500，可以开通L4-2，所有城市相关路段都可以使用自动驾驶，不需要中途转缓慢的公共交通（可容纳汽车的公共交通工具）。月付1000，可以保障多层冗余算力供给，开通L4-3,在国标的99.9%安全自动驾驶的前提下把安全保障提高到99.9999%，顺便还可以在车联网里标注尊贵身份，拥有道路优先通行权等。</p>\n<p data-pid=\"8jvDoNLg\">而如果要去特殊环境，比如V2X基建不够成熟的山区或者偏僻地带，要高端感知设备+卫星实时覆盖，那么就需要好一些的车辆，或者临时租赁（加装）高感知设备，另外还需要额外的云端付费来支持更大的算力。所以基础硬件（车辆）会便宜，而软件、网络付费的分级，成为自动驾驶分级的一种常态。另外智能座舱的豪华度和人性化程度也会是未来一个付费项了。</p>\n<p><br></p>\n<p data-pid=\"hvwfL8iu\">（图片来源网络，侵删！）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/50384514/answer/2721415432?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">43 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/546042309?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如果你是汽车设计师，你对自动驾驶有什么新的想法？</a><br><a href=\"http://www.zhihu.com/question/494977100?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么自动驾驶汽车在新闻中经常出现，但现实里却很难见到？</a><br>\n","link":"http://www.zhihu.com/question/50384514/answer/2721415432?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价游戏《大富翁 11》？","date":"2022-10-20 02:59:32","description":"\n<p data-pid=\"6sEkwnvS\">感谢@知乎游戏 邀请</p>\n<p data-pid=\"KmZdQf2r\">距离上一作《大富翁10》已经过去了3年，这次的《大富翁11》吸取了上一作的经验做出了改进，第一关键点是首发角色和地图数量一定要够多，这次我们将14位经典角色与12张新地图带给各位玩家，并且后续新角色和新地图也正在制作中了。我们为这14位角色设计的各自的交通工具，比如沙隆巴斯有了飞毯，约翰乔可以骑马，乌咪有老虎使得各位玩家更有代入感。前作中大地图玩热斗模式打不到人，小地图玩传统模式节奏太快的问题在本作从地图设计根源解决了——传统地图与热斗地图不再共用，而是依据不同模式专门设计。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-964c72dddca37603a48c7e7a1db05691_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1152\" data-rawheight=\"648\" data-watermark=\"watermark\" data-original-src=\"v2-964c72dddca37603a48c7e7a1db05691\" data-watermark-src=\"v2-919efe932a1032bd80ebe5f1d4331500\" data-private-watermark-src=\"v2-ff9c6c137c3b54b798b2fe993243b83e\"></p>\n<p data-pid=\"q1AJDrH9\">由于上一作是第一次加入联机模式，采用的联机底层不够好，所以这作从底层上进行了改造，采用protobuf通讯协议提高联机稳定性。关于游戏长短新老玩家截然相反的期待，我们也在设置中加入了多种游戏时间和胜利条件的设置，可以调整设置来找到志同道合的朋友，可以慢慢一局玩到地老天荒也可以到设定的天数结算资产，想怎么玩交给玩家自由选择。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e9b8bc0250b7658a434c830fa31bed81_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"713\" data-watermark=\"watermark\" data-original-src=\"v2-e9b8bc0250b7658a434c830fa31bed81\" data-watermark-src=\"v2-7d2b009aca1be67144efa445c013842b\" data-private-watermark-src=\"v2-b990ac1ec896311351d4880d928e355f\"></p>\n<p data-pid=\"keWmqhs3\">以及之前收到玩家的反馈，对地图的占地格子也做出了优化，将占地标志从角色配件换成Q版形象，让新玩家也能一目了然，盖上房子之后通过占地格前的编号来标识屋主，大幅减少识别的麻烦。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f0f8a76bdf57123601603d51c9bb0cc5_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1152\" data-rawheight=\"648\" data-watermark=\"watermark\" data-original-src=\"v2-f0f8a76bdf57123601603d51c9bb0cc5\" data-watermark-src=\"v2-757815b40c5d56d5e40b1bf30e49430d\" data-private-watermark-src=\"v2-485fb140def6dbf99f83727f89bc587f\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"9kUoe1fw\">大富翁是一个很成熟的绕圈游戏了，怎么让玩家对玩了几十年的绕圈地图有点新鲜感呢，我们这次设计了“机关”功能，有些地图可以改变地图路线，有些开关地图格子效果，这样就不再是单纯的绕圈，玩家还需要考虑怎么开关机关让对手走到自己的地盘，或者是避开对方的地盘，增加了博弈的趣味，当然我们也有没有机关的传统设计地图给大家自由选择，为游戏加入更多的计策影响还是更倾向于运气取胜。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-08e44127896fd42732aee3b4a45ded8a_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1152\" data-rawheight=\"648\" data-watermark=\"watermark\" data-original-src=\"v2-08e44127896fd42732aee3b4a45ded8a\" data-watermark-src=\"v2-b7123b0bdde8fdf19726e6bfc510e49a\" data-private-watermark-src=\"v2-ae3f99fcce98061e9b0b36d482e63ec0\"></p>\n<p data-pid=\"XpvWOXIT\">从单机转联机踩到的坑还有卡片平衡性，这里改动也值得一提，由于系列单机都是基于怎么虐电脑好玩，所以进攻类卡片效果太强了，导致10代玩家挫败感太强，11代中对进攻类卡片都做了平衡性调整。</p>\n<p data-pid=\"kURZlLqF\">另外11代创新了挑战模式，最基础的玩法是大家组队挑战BOSS，当然如果大家想提升难度甚至可以分成几队，那么除了BOSS也要小心黄雀在后的对手。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-110dbf75a283e6fdaee8951f2dad0db9_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"713\" data-watermark=\"watermark\" data-original-src=\"v2-110dbf75a283e6fdaee8951f2dad0db9\" data-watermark-src=\"v2-31062b000ed7339522f9bcd4ccd091a9\" data-private-watermark-src=\"v2-2bc63c3fd26cca7bc70426d9bd81eeb3\"></p>\n<p data-pid=\"bbBc8isW\">破关看故事在现在节奏下可能有点不适应现在的游戏节奏了，故事模式在前作中游玩的人比较少，但由于10代销量成绩可以，所以这次我们有经费可以给各位喜欢大富翁的玩家做动画短剧，我们用大富翁11的角色模型资产制作了《开心大富翁》短剧在各个平台免费播出。</p>\n<p><img src=\"https://pica.zhimg.com/v2-dea9ee1ad2047e860de055dd1fbd93c7_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1152\" data-rawheight=\"648\" data-watermark=\"watermark\" data-original-src=\"v2-dea9ee1ad2047e860de055dd1fbd93c7\" data-watermark-src=\"v2-22ca23380c556c91c8f80ad02d80bed0\" data-private-watermark-src=\"v2-acb1842610e385fa311656ef3f04e035\"></p>\n<p data-pid=\"opL0DhEy\">最后算彩蛋吧，我们找了一些当年4~8代配音老师们再次为11代献声，11代的音乐也是由4代音乐师创作。让大家再次听到熟悉的声音。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yao-xian-37-48?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">姚仙</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/560601178/answer/2722664197?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">40 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/543897169?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价游戏《大富翁 4》？</a><br><a href=\"http://www.zhihu.com/question/346939686?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价游戏《大富翁10》？</a><br>\n","link":"http://www.zhihu.com/question/560601178/answer/2722664197?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"为什么现在越来越多的人不爱发朋友圈了？","date":"2022-10-19 03:29:11","description":"\n<p data-pid=\"f72XI_mj\"><i>越来越不想发朋友圈，刷朋友圈让你心累；总被社交媒体轻易影响情绪，朋友圈里太多好友让你觉得“社交过载”——这种现象被称为<b>“社交媒体倦怠”。</b></i></p>\n<p data-pid=\"tMjWkepX\"><i>它在我们生活中，正变得越来越常见。</i></p>\n<p><br></p>\n<h2>什么是社交媒体倦怠？</h2>\n<p><br></p>\n<p data-pid=\"rfmkAjKw\">心理学上，对<b>社交媒体倦怠</b>的定义主要有以下3种视角[1]：</p>\n<p><br></p>\n<h3>1、情感视角——我体验到了负面情绪</h3>\n<p><br></p>\n<p data-pid=\"JJhZE2va\">基于情感视角的社交媒体倦怠被视为一种<b>负面情绪体验</b>。</p>\n<p><br></p>\n<p data-pid=\"1I_8QDdx\">Dhir等人在总结前人观点的基础上认为，社交媒体倦怠是社交媒体用户因参与和在不同在线社交媒体平台中的互动而体验到技术的、信息的和沟通的<b>过载后所遭受的精神枯竭 (Mental Exhaustion) 状态</b>[1-2]。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-72eea5a94cd2286cdc00a7f870b6e75b_720w.jpg?source=b1748391?rss\" data-caption=\"（图源网络，侵删）\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"565\" data-watermark=\"original\" data-original-src=\"v2-72eea5a94cd2286cdc00a7f870b6e75b\" data-watermark-src=\"v2-6e1ec1e2962b74a45439a90e14e01a3a\" data-private-watermark-src=\"v2-af2ade6c699ae1aaecea0cc8ae8c566a\"></p>\n<p><br></p>\n<p data-pid=\"g9IfTlYY\">情感视角关注用户在使用社交媒体时的体验，涉及一些消极情绪反应，这种体验由疲倦、烦恼、恼怒、失望、戒备、兴趣丧失，或者是对社交媒体使用和交互的需要/动机的减弱等情感构成[1,3-4]。</p>\n<p><br></p>\n<h3>2、行为视角——我想要逃避</h3>\n<p><br></p>\n<p data-pid=\"D-g7hvaC\">行为视角下，用户<b>从社交媒体中撤退的行为或行为倾向</b> (Tendency to Pull Back）便被认定为出现了社交媒体倦怠[5]。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-16e652627d956b6994bae96d95cf9854_720w.jpg?source=b1748391?rss\" data-caption=\"（图源网络，侵删）\" data-size=\"normal\" data-rawwidth=\"828\" data-rawheight=\"354\" data-watermark=\"original\" data-original-src=\"v2-16e652627d956b6994bae96d95cf9854\" data-watermark-src=\"v2-7bf6213a1ac57cc97ae9863bcdfd5fbb\" data-private-watermark-src=\"v2-27167dc4e45ca23e68c080c30b6d9e2e\"></p>\n<p data-pid=\"Lrlm6Amt\">当我们被社交媒体上铺天盖地的信息淹没时，我们便会想要逃离社交媒体，比如试图通过卸载微信而屏蔽掉999+的工作消息（但不能）。</p>\n<p><br></p>\n<p data-pid=\"iSP0AybR\">行为视角<b>关注用户在使用社交媒体时的体验</b>，比如用户会因为感觉到社交媒体中的社会比较，而导致对社交媒体出现回避的态度，有的用户甚至会出现逐渐减少、甚至放弃社交媒体的使用的现象[6-7]。</p>\n<p><br></p>\n<p data-pid=\"HoxkPkDc\">以学堂君本人为例，如果某段时间生活颓废消极，但朋友圈全是精致积极上进的po图时，我便会选择暂时关掉朋友圈，以减少同辈压力。</p>\n<p><br></p>\n<h3>3、心理和行为综合视角</h3>\n<p><br></p>\n<p data-pid=\"FTbTAu1i\">当然，也可以从心理体验和行为表现两方面来综合定义社交媒体倦怠。</p>\n<p><br></p>\n<p data-pid=\"oV3hVpeu\">综合视角关注用户与社交媒体有关的疲劳、烦恼和厌烦的感觉，它会导致使用社交媒体时更短的浏览时间、更少的使用频率和更低的热情，并会促使对社交媒体负面印象和态度的产生[8]。</p>\n<p><br></p>\n<p data-pid=\"pOZTBCwB\">或者如季忠洋等人的定义[9]：用户在使用社交媒体时心理层面出现疲倦感、放弃感，情感层面产生了忧虑、恐惧、郁闷、无聊、生气、烦扰、疲惫等负性情绪，行为层面呈现不持续、克制、限制甚至停止使用状态，具体表现为潜水、屏蔽、忽略、退出等。</p>\n<p><img src=\"https://pica.zhimg.com/v2-ca4fc60aa1cb3a0871803d39d15db56a_720w.gif?source=b1748391?rss\" data-caption=\"或许你上网会是这个样子的：（图源网络，侵删）\" data-size=\"normal\" data-rawwidth=\"448\" data-rawheight=\"289\" data-watermark=\"original\" data-original-src=\"v2-ca4fc60aa1cb3a0871803d39d15db56a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2>社交媒体倦怠的成因</h2>\n<p><br></p>\n<p data-pid=\"8pLklg9w\">社交媒体倦怠是用户在使用社交媒体过程中体验到的一种消极情感，影响社交媒体倦怠的因素主要来自<b>社交媒体</b>和<b>用户自身</b>两方面[1]。</p>\n<p><br></p>\n<p data-pid=\"av4-_wh_\">总的来说，社交媒体倦怠除了有<b>感知过载</b>“量”的原因外，还存在<b>感知价值</b>“质”的原因。</p>\n<p><br></p>\n<h3>1、“刷不动了”——感知过载<br>\n</h3>\n<p data-pid=\"iBziqe1s\">根据心理学研究中的定义，「过载」是指个体对于超过自身处理能力的事物的主观评价和感知[11-12]。<b>信息过载</b>、<b>社交过载</b>和<b>系统功能过载</b>这三个应激源被引入到社交媒体情景中并且分析它们对于用户社交媒体倦怠的影响。</p>\n<p><br></p>\n<p data-pid=\"GehoNwjD\"><b>1、信息过载</b></p>\n<p><br></p>\n<p data-pid=\"Ig3vb7eo\">信息过载（information overload）是指由于<b>所接受的信息的数量过大</b>，导致人们在一定时间内<b>不能有效处理和使用信息</b>的一种现象[12]。</p>\n<p><br></p>\n<p data-pid=\"dPiSx7Ul\">根据信息加工理论，一定时间内个体能够处理和加工的信息的数量是有限的。当信息数量超过了人的认知加工能力时，往往会导致个体无法有效分辨重要信息、正确理解信息内容或对信息进行更新[12]。</p>\n<p><br></p>\n<p data-pid=\"XV3DEm2P\">个体在信息过载的情况下，可能会采取<b>「心理旷工」</b>（psychological absenteeism）的方法，他们会处于“摸鱼”状态，尽量选择不处理信息或者试图规避[11]，比如放弃继续使用社交媒体。</p>\n<p><br></p>\n<p data-pid=\"w1TLfKGg\"><b>2、社交过载</b></p>\n<p><br></p>\n<p data-pid=\"H4qKk-tb\">社交过载（social overload）是指随着社交账号上的好友不断增多，个体需要努力维持好友间关系，从而体验到的过高的社会需要[11,13]。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-14a010784e2d9add37566086ee426fa0_720w.jpg?source=b1748391?rss\" data-caption=\"（图源网络，侵删）\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"738\" data-watermark=\"original\" data-original-src=\"v2-14a010784e2d9add37566086ee426fa0\" data-watermark-src=\"v2-567c6a753ffd4d05a777b21f0d85be45\" data-private-watermark-src=\"v2-d97a14e9f40876beeb93d7f1fc0ca617\"></p>\n<p data-pid=\"Zni6za4q\">比如，随着社交网络上各种关系的好友不断增多，为了获得好的个人印象，用户需要<b>耗费过多的精力和时间来维系各种关系</b>，比如评论、转发等人际互动，而这可能会引起用户的社交过载和压力[14]。</p>\n<p><br></p>\n<p data-pid=\"HUvrjHOB\">而这种社交压力背后或许存在一个规律：经历社交过载后，用户会逐渐远离社交媒体，最终，随着用户的增多、各种圈子的建立，社交媒体中不免出现蒸发冷却效应的现象[15]。</p>\n<p><br></p>\n<p data-pid=\"Wfj9CFOh\"><b>社交蒸发冷却效应（evaporative cooling）</b>是指由于新成员不断涌入，社交圈内具有“高价值”的成员会发现圈子的水平降低，他们感到继续留在这里已经变得没有意义。</p>\n<p><br></p>\n<p data-pid=\"ainXSmok\">而当社交圈内高价值的成员选择离开或者取消关注的时候(液体蒸发)，社交圈的价值就会进一步降低(冷却降温)。这也意味着当用户的社交关系链大到一定程度而无法维护时，用户便会选择放弃维护[11]。</p>\n<p><br></p>\n<p data-pid=\"CLIpuj66\"><b>3、系统功能过载</b></p>\n<p><br></p>\n<p data-pid=\"Xbs_ZBeT\">根据边际效用递减原则，虽然信息技术可以提高生产率，但当超过某个点之后，技术产生的收益不会增加反而会减少。也就是说，更好的技术不一定带来最大的产量或绩效，这种现象被称为信息技术过载[16-17]。</p>\n<p><br></p>\n<p data-pid=\"q-J1l-br\">系统功能过载就是信息技术过载的重要部分，表现为：<b>给定的信息技术操作过于复杂</b>，以至于超过了用户所能接受的操作水平，或<b>新功能应用所需的信息技术超过了人们对于达到该项功能的最高需求</b>，而导致功能过剩[17]。</p>\n<p><br></p>\n<p data-pid=\"AornMCrq\">在社交媒体中，用户设置界面和信息展现方式随着系统的更新而改变、不断增加的新功能等，都在不断重塑用户的使用习惯，这便给用户带来了系统功能过载的负担，因此产生倦怠情绪[17]。</p>\n<p><br></p>\n<h3><b>2、“刷太多也没什么用”——感知价值</b></h3>\n<p><br></p>\n<p data-pid=\"FWJEmm5k\">感知价值(perceived value)是用户基于感知利益与感知成本之间的权衡而做出的总体评估，这种评估会随用户需求的改变而发生变化[18]。对社交媒体而言，<b>用户感知到的价值越高，对社交媒体的满意度越高</b>，更愿意持续使用社交媒体。</p>\n<p><br></p>\n<p data-pid=\"NQ03g5ch\"><b>「感知利益」</b>是用户主观感知的获得价值，包括四个维度：社会价值、认知价值、信息质量和功能价值；而<b>「感知成本」</b>是用户主观感知的付出，包括三个维度：时间成本、认知成本和隐私关注。</p>\n<p><br></p>\n<p data-pid=\"_Eb7j__n\">其中，<b>信息质量</b>，即信息的真实性和准确性，应该是信息满足认知价值的基础，如果信息的真实性都无法保证，信息带给人新颖、好奇的体验将会大打折扣。</p>\n<p><br></p>\n<p data-pid=\"2snKAytA\">而<b>认知成本</b>是影响用户情绪倦怠的最大因素——解读信息的难度增加，人们便需要花费更多的时间精力去猜测他人的真实意、隐含意。</p>\n<p><br></p>\n<p data-pid=\"-eNX5IgX\">总而言之，在使用社交媒体时，如果感知利益降低或丧失、感知成本增加，用户便会因此产生倦怠[19]。</p>\n<p><img src=\"https://pica.zhimg.com/v2-ad0d53373aa3b6daa355f0ac3dfe0413_720w.jpg?source=b1748391?rss\" data-caption=\"（图源网络，侵删）\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"437\" data-watermark=\"original\" data-original-src=\"v2-ad0d53373aa3b6daa355f0ac3dfe0413\" data-watermark-src=\"v2-888c615e24ebd1f1c694a9f5a611b2d0\" data-private-watermark-src=\"v2-f2b013a7584c569e124eb9be97fcc7ec\"></p>\n<h2>应对社交媒体倦怠的权宜之策</h2>\n<p><br></p>\n<p data-pid=\"H99L2asA\">社交媒体诞生的最初目的是使人与人之间的沟通更加便捷。随着大众对社交媒体的过度使用，大众在驯化社交媒体的过程中，生活却被社交媒体绑定，信息交流、消费和交往方式均被社交媒体改变，这些就是<b>被社交媒体反驯化</b>的表现[20]。</p>\n<p><br></p>\n<p data-pid=\"SVF0WF6k\">面对感知过载和感知价值降低等问题，大众日渐对社交媒体产生倦怠情绪，并采取<b>“不使用行为”</b> 与之抗衡。很多用户使用社交媒体的频率逐渐减少，甚至成为不活跃用户。</p>\n<p><br></p>\n<p data-pid=\"OS5g9t1k\">这种“不使用行为”可以<b>在一定程度上缓解社交媒体倦怠</b>，用户可以暂时性治愈社交媒体倦怠，提高工作和学习效率，调整生活节奏。但这只是暂时性的应对方式，并不能真正解决社交媒体倦怠。</p>\n<p><br></p>\n<p data-pid=\"FXO1Y1WQ\">人始终是社会关系中的人，社会关系的强连接导致人无法彻底断开与社交媒体间的连接。<b>我们能做的，是尽力去找到个人生活与社交媒体间的平衡点，既减少社交媒体对个人生活的控制，又尽量不放弃正常的社会交往</b>[20]。</p>\n<p><img src=\"https://picx1.zhimg.com/v2-abc5fa662f1ac69d0c73622c6ae5985a_720w.jpg?source=b1748391?rss\" data-caption=\"（图源网络，侵删）\" data-size=\"normal\" data-rawwidth=\"548\" data-rawheight=\"365\" data-watermark=\"original\" data-original-src=\"v2-abc5fa662f1ac69d0c73622c6ae5985a\" data-watermark-src=\"v2-b3939b9c5219e5bef9535690451f8d63\" data-private-watermark-src=\"v2-9001f085ff04c9e9d763a18d2e9bcf35\"></p>\n<p data-pid=\"wuL9uj1q\"><b><i>我们在被社交媒体反驯化的过程中，不断探寻破解之道。</i></b></p>\n<p><br></p>\n<h2><b>总结</b></h2>\n<p><br></p>\n<p data-pid=\"pHQJcFMM\">今天，社交媒体等媒介不再只作为工具存在，而是以全面嵌入的方式让人对媒介的依赖程度越来越高，甚至将人与媒介的契合程度作为社会化的一种衡量指标，并最终成为支配人的手段。</p>\n<p><br></p>\n<p data-pid=\"lpUS5Fyv\">在媒介异化的过程中，人逐渐沦为媒介的工具，并与其自身疏离[20]。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e61a822d1b16198521199577899984cc_720w.jpg?source=b1748391?rss\" data-caption=\"电影《贩夫走卒》中主角将自己的皮肤卖给了艺术家，成为了被展览、买卖的艺术品本身(图源网络，侵删)\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"719\" data-watermark=\"original\" data-original-src=\"v2-e61a822d1b16198521199577899984cc\" data-watermark-src=\"v2-43109f002f21b0f867d72cf13de031c8\" data-private-watermark-src=\"v2-ba1e01ae34f1af051eb8a64f573065f5\"></p>\n<p data-pid=\"yHeGZ_9W\"><br>社交媒体倦怠或许也是我们反抗媒介异化的一部分。作为人与人之间信息交流的平台，使用还是退出社交媒体是我们自己的选择。</p>\n<p><br></p>\n<p data-pid=\"7z_hWQtI\">如果社交媒体让我们感觉到“过载”，卸载也是一种应对方式。</p>\n<p><br></p>\n<h2>互动：你会因为什么而产生社交媒体倦怠呢？</h2>\n<p data-pid=\"Opwgfbbo\"><br></p>\n<p data-pid=\"5ooOxs0C\">作者｜心是孤独的猎手</p>\n<p><br></p>\n<p data-pid=\"jLuik27K\">编辑｜ <a href=\"https://www.zhihu.com/people/b6af72343bdcb6210580dcfa35286aff\" class=\"internal\">@Giocandaa</a></p>\n<p><br></p>\n<p data-pid=\"9LvUNyNC\">欢迎关注心理学科普平台<a href=\"https://www.zhihu.com/people/f3260f05df264ee916da258e1384e247\" class=\"internal\">@京师心理大学堂</a>，<a href=\"https://www.zhihu.com/search?q=%E5%8C%97%E4%BA%AC%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2274087547%7D\" class=\"internal\">北京师范大学</a>心理学部出品，奉献百年积淀，带你脑洞大开。任何形式的转载请知乎私信联系。</p>\n<p><br></p>\n<h2>参考文献</h2>\n<blockquote data-pid=\"VOyJflOM\">[1] 代宝, 罗蕊, 续杨晓雪.(2019). 社交媒体倦怠:含义、前因及后果. 现代情报,39(9),142-150.<br>[2] Dhir, Yossatorn, Y., Kaur, P., &amp; Chen, S. (2018). Online social media fatigue and psychological wellbeing—A study of compulsive use, fear of missing out, fatigue, anxiety and depression. International Journal of Information Management, 40, 141-152.<br>[3] Ravindran, T. ,  Chua, A. , &amp;  Hoe-Lian, D. . (2013). Characteristics of social network fatigue. Tenth International Conference on Information Technology: New Generations (pp.431-438). IEEE.<br>[4] Zhang, Zhao, L., Lu, Y., &amp; Yang, J. (2016). Do you get tired of socializing? An empirical explanation of discontinuous usage behaviour in social network services. Information &amp; Management, 53(7), 904-914.<br>[5] Techopedia. What is Social Media Fatigue? -Definition from Techopedia［EB/OL].https: / /www. <a href=\"http://link.zhihu.com/?target=http%3A//techopedia.com/definition\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">techopedia.com/definiti</span><span class=\"invisible\">on</span><span class=\"ellipsis\"></span></a> / 27372 /social-media-fatigue，2019-01-10．<br>[6] Cramer, Song, H., &amp; Drent, A. M. (2016). Social comparison on Facebook: Motivation, affective consequences, self-esteem, and Facebook fatigue. Computers in Human Behavior, 64, 739-746.<br>[7] 张艳丰,李贺,彭丽徽.(2017).移动社交媒体倦怠行为的影响因素模型及实证研究.现代情报,37(10),36-41.<br>[8] Lee, C. C. ,  Chou, T. H. , &amp;  Huang, Y. R. . (2014). A study on personality traits and social media fatigue-example of facebook users. Lecture Notes on Information Theory, 2(3), 249-253.<br>[9] 季忠洋, 李北伟, 朱婧祎, 陈为东.(2019).情感体验和感知控制双重视角下社交媒体用户倦怠行为机理研究.情报理论与实践, 42(4),129-135.<br>[10] Saegert, S.  (1973). Crowding: Cognitive overload and behavioral constraint.Environmental Design Research, (2), 254-260.<br>[11] 徐春雨. (2018).感知过载对社交媒体倦怠的影响机制研究.浙江工商大学.<br>[12] 丁欣放.(2020).疫情背景下社交媒体信息过载的影响及应对研究综述.医学教育管理,6(3), 220-224.<br>[13] Maier, C. , Laumer, S. , Eckhardt, A. , &amp; Weitzel, T. (2012).When Social Networking Turns to Social Overload: Explaining the stress, Emotional Exhaustion, and Quitting Behavior from Social Network sites' Users. European Conference on Information Systems. AIS Electronic Library (AISeL).<br>[14] Lim, &amp; Yang, Y. (2015). Effects of users’ envy and shame on social comparison that occurs on social network services. Computers in Human Behavior, 51, 300-311.<br>[15] 张宏洁.(2014). 蒸发冷却: 社交网站扩张的困境.青年记者, (27), 71-72.<br>[16]甘春梅,黄玉莹,黄凯.过载对移动社交网络用户持续使用意愿的影响：基于fsQCA的分析. 情报科学,2021,39(11),69-75.<br>[17] 苏倩倩. (2020).信息技术过载与社会比较对社交媒体用户消极使用行为的影响机制研究.暨南大学.<br>[18] 李慧. 社交媒体倦怠的影响因素研究.厦门大学,2018.<br>[19] 李慧,周雨,李谨如.(2021).用户正在逃离社交媒体？——基于感知价值的社交媒体倦怠影响因素研究.国际新闻界,43(12),120-141.<br>[20] 毕伦恺,潘晓婷.(2022).社交媒体倦怠成因及应对研究.新闻研究导刊,13(3),24-26.</blockquote>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jing-shi-xin-li-da-xue-tang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">京师心理大学堂</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/310673334/answer/2720304685?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1021 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/301660661?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么越来越多的人不爱发朋友圈了？</a><br><a href=\"http://www.zhihu.com/question/449296114?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么越来越多的人不爱发朋友圈了呢？</a><br>\n","link":"http://www.zhihu.com/question/310673334/answer/2720304685?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"有哪些中国本土化的克苏鲁作品？","date":"2022-10-19 02:58:13","description":"\n<p>崇祯十七年，李自成攻陷北京，在皇宫内找到上千具糜烂的尸体，臭气滔天，蛆虫遍地。</p>\n<p>军队连搜两日，从尸堆中找到长平公主。</p>\n<p>此时，长平公主仅剩一臂，状若疯癫。</p>\n<p>据她所说，上千嫔妃、宫人皆是被崇祯皇帝下令处死，取上千颗心脏汇于巨鼎蒸熟。</p>\n<p>之后，崇祯皇帝带着千颗心脏去往煤山……</p>\n\n<p>1.</p>\n<p>李阳山似笑非笑地盯着我。</p>\n<p>我毛骨悚然地打断道：「正史记录，崇祯皇帝于煤山自缢而死，太监王承恩、大学士范景文等诸臣从死，明朝灭亡。」</p>\n<p>我叫杜乐，历史系大学生，准备考研。课余时间，我都会在这家书店复习。</p>\n<p>半个小时前，我才认识李阳山，他见我在翻阅明朝历史书，主动要给我讲一段历史。</p>\n<p>「那你打算继续听下去吗？」</p>\n<p>李阳山的眼里流露出残忍的光，我预感不妙，后面的故事肯定更加诡异。</p>\n<p>只是我这人生性胆小如鼠，却又好奇心重。</p>\n<p>「你接着说，但不准用讲鬼故事的语气。」</p>\n<p>我犹豫了下，还是合上书籍，把时间留给李阳山的「明朝史」。</p>\n<p>「崇祯皇帝将千颗心脏插在煤山，摆成硕大无比的山羊图案，然后他按照奇数的顺序，依次用刀剖开心脏……」</p>\n<p>讲到这里，李阳山突然卡壳。</p>\n<p>他思索片刻，满脸无奈地抓了抓乱糟糟的头发，歉意地望向我。</p>\n<p>「果然，下面还没想好怎么编。」</p>\n<p>我忍不住扑哧笑了出来。</p>\n<p>李阳山讲的时候一直在瞄电脑，我想他应该是一个小说家，这邪典意味十足的明朝历史，是他的小说。</p>\n<p>只是，不曾想竟还在创作中。</p>\n<p>李阳山尴尬地耸了耸肩，把电脑塞回书包，唤来服务员。</p>\n<p>我抢先拿起手机扫码，将两份茶饮一并付账。</p>\n<p>「当听故事的报酬，等你想好下面的剧情，一定要再讲给我听。」</p>\n<p>李阳山冲我感激地笑了笑，背起书包，挥手离去。</p>\n<p>外面的雨淅淅沥沥地下。</p>\n<p>我目送李阳山走到马路对面的车站，他坐在长凳上抽烟，低头摆弄手机。</p>\n<p>这时，我的手机疯狂振动。</p>\n<p>一个陌生来电。</p>\n<p>我按下接通，李阳山低沉的声音从雨声中钻出来：「崇祯皇帝站在千颗心脏的中间，不断重复一句话，山羊来了！」</p>\n<p>电话来也急，去也急，不等我开口，就已经挂断。</p>\n<p>只是，我分明没有把联系方式告诉李阳山，他如何得知我的电话号码？</p>\n<p>我疑惑地望向窗外。</p>\n<p>雨幕重重，李阳山的身影已经消失不见。</p>\n\n<p>2.</p>\n<p>山羊来了。</p>\n<p>这句话什么意思，咒语、口谕，还是诅咒？</p>\n<p>不等我弄清楚，依诺就出了问题。</p>\n<p>依诺是我的同学，家境富裕，典型的富二代。</p>\n<p>为了住得舒服，她在学校附近租了套高级公寓，床宽大而柔软，坐上去就像是被裹在云里。</p>\n<p>可就是这样，依诺最近却总顶着熊猫眼，无精打采。</p>\n<p>我作为班长，没办法推卸责任，只能去打听原因。</p>\n<p>被依诺阴阳怪气了一顿，我才得知，她最近睡觉，总感觉后颈顶有一根硬刺。</p>\n<p>无论怎么调换位置，换枕头被子，甚至换酒店，都没办法解决，夜不能寐。</p>\n<p>过了两天，依诺又说，情况恶化。</p>\n<p>不但感觉后颈被顶有硬刺，还总觉得有东西勒住她的脖子，好几次夜里她昏昏沉沉，差点莫名窒息。</p>\n<p>又过两天，依诺被送到医院。</p>\n<p>我和室友阿念作为学生代表前去看望，躺在病床上的依诺消瘦如同一具干尸，见到我，她畏畏缩缩地将眼神避开。</p>\n<p>依诺的左手消失了。</p>\n<p>据说是一觉醒来就不见了，伤口没有痛觉，没有流血，送到医院本来还有最佳的手术时机。</p>\n<p>但找遍整个屋子，也没能找到依诺断去的左手。</p>\n<p>我私下问医生。</p>\n<p>医生说，依诺左手的伤口，凹凸不平，像是被某种动物啃噬。</p>\n<p>我在脑海里将能啃掉人类手掌的野兽统统过了一遍，但无论如何也不敢相信，21 世纪真有野兽能闯进城市入室袭击吗？</p>\n<p>怀着疑问，我回到依诺的病房。</p>\n<p>阿念慌慌张张地和我撞了个满怀，我问发生了什么事，阿念神色紧张地大叫，依诺疯了！</p>\n<p>我让阿念去喊医生，自己走进病房。</p>\n<p>病床上的依诺身体不断痉挛，像是触电般，剩下的独手在虚空挥舞，双目圆瞪，嘴里念念有词。</p>\n<p>「山羊来了！山羊来了！」</p>\n<p>我连忙冲上去抱住依诺的手，想要压制住她的癫狂。</p>\n<p>仅剩一掌的依诺力气大得吓人，她将我狠狠甩开，独手勾曲成诡异的弧度，令人牙酸的骨裂声从她的手腕传出来。</p>\n<p>这时，医生推门跑进来。</p>\n<p>但已来不及，依诺就在众目睽睽之下，活生生地折断了自己的手。</p>\n<p>我吓得冷汗直冒。</p>\n<p>不等我平静，医生说：「你赶紧去急救，通知马尾辫同学的家人。」</p>\n<p>我问：「阿念怎么了？」</p>\n<p>医生满脸恐惧地说：「她瞎了，眼球突然炸开。」</p>\n<p>我迷茫地听完噩耗，冲出病房，配合医院通知阿念的家人。</p>\n<p>当我机械地做好一切，累倒在医院的走廊时才发觉，恐惧的冷汗已经浸透衣服。</p>\n<p>夜晚，我在医院守着阿念。</p>\n<p>她醒了过来，气若游丝地告诉我，她白天为了哄依诺开心，偷偷和依诺说我的坏话。</p>\n<p>我累得完全提不起怒气，牵住阿念的手劝慰，别放在心上，好好养伤。</p>\n<p>阿念空洞的眼眶流出两道血水。</p>\n<p>她哭道：「杜乐，我们看到一头山羊，它站在依诺的病房门口。就是看到那头山羊，依诺就疯了，我的眼睛也没了，那头山羊肯定是某种诅咒。」</p>\n<p>阿念的情绪逐渐激动，她胡乱撕扯我的手臂，抓得我倒抽凉气。</p>\n<p>「一定是山羊吃了依诺的手臂。」</p>\n<p>医生听见阿念的叫声，为她注射了镇静剂。</p>\n<p>夜半时分，阿念的家人跑完医院的流程，接替照看的任务，我才拖着疲惫的身躯离开。</p>\n<p>刚坐上计程车，我接到李阳山的电话。</p>\n<p>「崇祯帝扭过头，看见一头黑色的山羊死死盯着他。杜乐，接下来的故事我想好了，明天咱们在书店碰面。」</p>\n<p>李阳山没给我拒绝的机会，就匆匆挂断。</p>\n<p>我看着手机屏幕倒映的影子，恐惧后知后觉地涌了上来。</p>\n<p>我紧张地搓动冰凉的双手，总感觉有一双诡异的长方形眼瞳，在背后注视着我。</p>\n\n<p>3.</p>\n<p>第二天，我如约来到书店。</p>\n<p>李阳山从角落里站了起来，冲我挥手示意。他看起来没什么精神，脸色苍白，衣服糟乱，嘴唇脱皮，叼着半根烟头。</p>\n<p>等我坐下，李阳山的眼里射出兴奋的光芒。</p>\n<p>他把饮料推到我面前，狠狠嘬了口烟，才如同献宝般将一张纸递给了我。</p>\n<p>李阳山的字迹十分潦草，胜在还能看懂。</p>\n<p>「崇祯皇帝与黑山羊对视，那一双暗黄色，中间横着两条长方形的眼瞳，冰冷而诡异，如同不可望及的宇宙最深邃之处。</p>\n<p>『快去抓住山羊，带到朕的面前。』</p>\n<p>崇祯皇帝急促地喝令。</p>\n<p>臣子们从未见过崇祯皇帝这般失态，不敢怠慢，纷纷向山羊扑去。</p>\n<p>冲在最前面的是太监王承恩。</p>\n<p>他打算限制山羊行动，以饿虎扑食的姿态，死死抓住山羊的蹄子。</p>\n<p>山羊没有任何动作。</p>\n<p>太监王承恩却突然撕心裂肺地叫了起来，他的双手竟凭空消失，伤口处也不见血液外涌。</p>\n<p>臣子们见识到山羊的诡邪，不敢轻举妄动。</p>\n<p>大学士范景文趁此机会，悄悄绕到山羊的身后，从背后欺身而上，骑在山羊的背部。</p>\n<p>他本是想捂住山羊的眼睛，但山羊失去视线后，状若发狂，大学士范景文几次差点被甩下去。无奈之下，他伸出修长的双指，打算直接将山羊眼睛戳瞎。</p>\n<p>当他的手指插进山羊的眼睛，就像是插进豆腐里，触感润滑，有微微的温度。</p>\n<p>范景文兴奋大笑，正要报功。</p>\n<p>忽然，他从山羊背上摔了下来。</p>\n<p>人们围过去，发觉他的两颗眼球不知何时爆裂开来，暗黄的浓汁混着黑血从他空洞的眼眶里不断流淌。</p>\n<p>崇祯皇帝恼怒地割下范景文的头，甩开宝剑，小心翼翼地走向山羊。</p>\n<p>距离三步远时，崇祯皇帝猛然扑向山羊。</p>\n<p>巨大的冲力之下，崇祯皇帝抱着山羊在地上翻滚了几周。他顾不得身上的疼痛和灰尘，癫狂地大笑，张嘴咬向山羊的喉咙。</p>\n<p>血肉横飞。</p>\n<p>山羊发出笛子般的呜咽声，死了过去。</p>\n<p>崇祯皇帝在伤口上狠狠嘬出口浓血，心满意足地趴在山羊的肚子上，他野蛮地撕开山羊的肚皮，伸手在乱成一团的脏器里摸索。</p>\n<p>过会儿，他掏出一颗心脏，狼吞虎咽地塞进嘴里。</p>\n<p>臣子们忍着内心的恐惧，将宝剑呈给崇祯皇帝。</p>\n<p>崇祯皇帝用剑把山羊肢解。将肉、内脏、眼睛、舌头、骨、毛分为六份。</p>\n<p>他吃掉肉，一层光滑的鳞片从皮肤上生长出来。</p>\n<p>他又将内脏送到嘴里。肩胛骨便碎裂开来，一双黑色的肉翼从血口生长出来。</p>\n<p>他吃掉眼睛。裂纹顺着他的眼眶蔓延，原本是眼睛的位置，变成了两条撕裂的巨口，尖牙横生，深处滚动着百颗眼球，哗哗作响。</p>\n<p>他吞下舌头；便剧烈地咯出一摊黑血，再抬头时，他的嘴巴张开成夸张的弧度，一颗血淋淋的人头从中钻了出来。</p>\n<p>他咔嚓咔嚓地嚼碎骨头，身体内部也爆发出雷鸣般的响声，一条条黑色的触手，在他身上撞出血洞，挥舞着冲了出来。</p>\n<p>崇祯皇帝抹着嘴回过头，他又看到一头黑色的山羊。</p>\n<p>山羊也注视着他。</p>\n<p>如同先前那样，他杀死山羊，吃掉山羊的心、肉、内脏、眼睛、舌头和骨。</p>\n<p>当他再次回头，黑色的山羊又出现了。</p>\n<p>……</p>\n<p>直到日色渐落，崇祯皇帝的身体已经吃成千斤重的肉山，他生出数不清的头颅，一条条触手水蛇般向四周攀爬……」</p>\n<p>我厌恶地将草纸丢开，捂住嘴干呕不止。</p>\n<p>不知是怎么回事，分明只是粗劣的文字描述，我在看的时候，却产生出莫名其妙的代入感，想到了依诺和阿念的遭遇。</p>\n<p>「你没事吧？！」</p>\n<p>李阳山扶住我的手臂，我登时如芒在背，甩开他的手，身子向后躲了躲，强忍慌乱地赔笑。</p>\n<p>「没事。接下来呢？崇祯皇帝难道没死。他变成了肉山，再也没有什么树能支撑他上吊自杀。」</p>\n<p>我抽出纸巾，擦了擦嘴角。</p>\n<p>「你忘了，崇祯皇帝还收集了羊毛。傍晚，他把所有羊毛聚集，拧成一条粗壮的绳子。他将数不清的头颅一齐塞进羊毛绳子里，触手狠狠扯动绳子。」</p>\n<p>李阳山舔着干裂的嘴唇，露出诡笑。</p>\n<p>我吞下口水，在脑海里想象那幅画面，就似数不清的明朝人，不甘成为囚徒，齐齐上吊赴死，宣告一个朝代的灭亡。</p>\n<p>只是，更多的是惊悚，诡谲。</p>\n<p>想到这儿，我忍不住去揉发寒的大腿，伸手却触碰到一抹柔软。</p>\n<p>我诧异地低下头。</p>\n<p>一头黑山羊正蹲伏在我的腿边，仰面注视着我。</p>\n<p>长方形的眼瞳让我心里咯噔一下，我刚想张嘴惨叫，黑山羊就已经消失不见。</p>\n<p>我不可置信地揉了揉眼睛，什么也没有。</p>\n<p>「李阳山，你看到没？」</p>\n<p>我惊慌失措地抬头询问，桌子对面，空空如也。</p>\n<p>李阳山不知何时离开，而在他先前逗留的位置，散落着不少水渍。我走上前，发现这些水渍赫然是两行字。</p>\n<p>「凌晨两点，来景山。」</p>\n<p>「否则，你会死！」</p>\n\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wu-shi-san-58-70?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">李吃鱼</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/406328985/answer/2702516366?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">302 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/390250326?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎样的作品可以被称为正统的克苏鲁？</a><br><a href=\"http://www.zhihu.com/question/347873609?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">请问当代中国有没有什么优秀的克苏鲁作品？</a><br>\n","link":"http://www.zhihu.com/question/406328985/answer/2702516366?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"用 Taichi 实现 GPU 图像处理：从入门到入魔","date":"2022-10-18 08:52:01","description":"\n<p data-pid=\"heSssC_0\"><b>写在前面</b>：在不久前的一篇文章中，我们简单聊了聊如何使用 Taichi 加速 Python 程序。文章发布后，不少从事计算机视觉、图像处理工作同学都在好奇 Taichi 是否可以加速 Python 中<b>图像处理</b>相关的计算，并与 OpenCV (<code>import cv2</code>) 协同工作、甚至在 GPU 上并行运行。本文就尝试针对这些问题进行初步探讨。我会带领大家揭秘女生爱用的<b>美颜滤镜</b>和男生爱玩的主机游戏《<b>对马岛之魂</b>》中的 HDR 效果的原理，讲解它们背后使用的几个从简单到困难逐渐递进的图像处理算法，包括高斯滤波器、双边滤波器、双边网格 (Bilateral Grid) 等，并和大家一起手把手从零开始写代码体验效果。相信读完这篇教程，不论读者是否从事图像处理方面，都可以有所收获。欢迎大家按需食用、批评斧正！</p>\n<h2><b>前言</b></h2>\n<p data-pid=\"wmDPQGXI\">Python 是当前图像处理领域的主打语言之一。在计算机视觉（特别是深度学习图片预处理、模型训练）等复杂度较高，技术迭代速度快的领域，用 Python 快速开发出算法原型、验证效果是许多研发人员的首选方案。著名图像处理库 OpenCV 就提供了完整的 Python 封装，用户可以书写 Python 调用底层的 C++ 实现来获得不错的性能。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d52546e28070bf065898548f5bc57d94_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"649\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-d52546e28070bf065898548f5bc57d94_r.jpg\"></figure><p data-pid=\"6tRYxfQF\">理想很丰满，现实很骨感。在实际的研发任务中，仅仅使用 OpenCV 的 Python 接口往往是不够的：当某些处理算法 OpenCV 没有提供，需要用户亲自实现时，Python 的性能就比较尴尬了。图像通常是以 NumPy 数组的形式存储在内存中的，当需要逐个遍历像素处理时，Python 的 for 循环效率很低。在需要实时处理的场景（比如摄像头传回的画面）或者数据量较大的时候，Python 的解释器开销会是个很大的性能瓶颈。</p>\n<p data-pid=\"mtcT2rLZ\">Taichi 在这一点上恰好可以帮到大家：</p>\n<ol>\n<li data-pid=\"OLcJ7vML\">Taichi kernel 里的顶层 for 循环是自动并行的，用户无需分配和管理线程；</li>\n<li data-pid=\"ZC5VAzfz\">Taichi 的即时编译 (JIT) 机制可以把 Taichi 代码编译成高效的机器码，并通过指定后端跑在多核 CPU 或 GPU 等不同的后端上，用户无需担心编译和环境适配；</li>\n<li data-pid=\"fe3-zEMM\">Taichi 可以在 CPU、GPU 执行中无缝切换，对于计算量特别大的部分可以一键切换到 GPU 计算；</li>\n<li data-pid=\"MT9moWQB\">在同一份程序中用户可以在调用 OpenCV 和调用自己的 Taichi 实现中来回切换，所有工作都在同一份 Python 程序中完成。这和在 Python 外独立写一份 C++/CUDA 代码再用 ctypes/pybind11 等工具桥接比起来，使用和移植都方便很多。</li>\n</ol>\n<p data-pid=\"rTX5LYep\">以上几点可以让用户在享受 Python 便利的同时，获得媲美 C++/CUDA 的运行效率。</p>\n<p data-pid=\"KWgZ4Btq\">本文接下来将通过三个篇章具体介绍如何使用 Taichi 加速 Python 图像处理：</p>\n<ol>\n<li data-pid=\"YkUqkNIH\">\n<b>入门</b>篇：图像的转置与双线性插值；</li>\n<li data-pid=\"ddkEdgJF\">\n<b>进阶</b>篇：高斯滤波器与双边滤波器；</li>\n<li data-pid=\"CppOItHX\">\n<b>入魔</b>篇：双边网格与高动态范围色调映射 (Tone mapping)。</li>\n</ol>\n<p data-pid=\"nZ1YAFgt\">在这些内容中大家可以看到这些图像处理算法是如何一步步被改进的，以及它们的一些有趣应用。</p>\n<p data-pid=\"-C4-YK2J\">在文末我们会讨论使用 Taichi 进行图像处理的注意事项，以及 Taichi 目前还存在哪些局限、不足，可以在未来改进。</p>\n<p data-pid=\"cxavytMn\">在开始正文之前，请大家确保自己的机器上已经安装了最新版本的 Taichi 和 opencv-python 这个库：</p>\n<div class=\"highlight\"><pre><code class=\"language-bash\">pip3 install -U taichi opencv-python</code></pre></div>\n<p data-pid=\"hddtjeIc\">本文的所有代码都放在 GitHub 上：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/taichi-dev/image-processing-with-taichi\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Image processing with Taichi</a>.</p>\n<h2><b>入门：图像的转置与插值</b></h2>\n<h3><b>图像的转置</b></h3>\n<p data-pid=\"HdP4WIME\">我们从一个最简单的例子开始，帮助大家了解使用 Taichi 进行处理图像的基本步骤：图像的转置。</p>\n<p data-pid=\"QZnCckPX\">图像的转置与矩阵的转置类似，就是把图像 <img src=\"https://www.zhihu.com/equation?tex=%28i%2C+j%29\" alt=\"(i, j)\" eeimg=\"1\"> 和 <img src=\"https://www.zhihu.com/equation?tex=%28j%2C+i%29\" alt=\"(j, i)\" eeimg=\"1\"> 位置的像素交换位置 (transpose)：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-a2f1b5948f1e30c73f368154ec13596b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1374\" data-rawheight=\"502\" class=\"origin_image zh-lightbox-thumb\" width=\"1374\" data-original=\"https://pic4.zhimg.com/v2-a2f1b5948f1e30c73f368154ec13596b_r.jpg\"></figure><p data-pid=\"i57c2tXt\">我们首先导入所要使用的库，并调用 <code>ti.init()</code> 做一些初始化。这对每个 Taichi 程序来说都是必不可少的：</p>\n<div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">taichi</span> <span class=\"k\">as</span> <span class=\"nn\">ti</span>\n\n<span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span></code></pre></div>\n<p data-pid=\"CoODR-x2\">把小猫的图像读入内存：</p>\n<div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"s2\">\"./images/cat.jpg\"</span><span class=\"p\">)</span>\n<span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"n\">dst</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n\n<span class=\"n\">img2d</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">(</span><span class=\"n\">element_dim</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># Color image type</span></code></pre></div>\n<p data-pid=\"lRHkxdtk\">绝大多数 Python 图像处理库都假定图像具有 NumPy 的数组形式，OpenCV 也是如此。对灰度图像（单通道）对应的数组是二维的，形状是 (height, width)，彩色图像（多通道）对应的数组是三维的，形状是 (height, width, channels)。上面的代码中 OpenCV 读进来的图片 <code>src</code> 是一个三维 NumPy 数组，随后我们声明了一个数据类型与 <code>src</code> 相同，但长度和宽度与 <code>src</code> 交换的数组 <code>dst</code> 用于存放转置后的图片。</p>\n<p data-pid=\"JMIDyttW\">我们用下面这个函数 <code>transpose</code> 来处理图像的转置。从外表上看它和普通的 Python 函数没有什么两样，只不过开头加了一个装饰器 <code>ti.kernel</code>，所以是一个 Taichi kernel 函数：</p>\n<div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"nd\">@ti</span><span class=\"o\">.</span><span class=\"n\">kernel</span>\n<span class=\"k\">def</span> <span class=\"nf\">transpose</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"n\">img2d</span><span class=\"p\">,</span> <span class=\"n\">dst</span><span class=\"p\">:</span> <span class=\"n\">img2d</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">ndrange</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">):</span>\n        <span class=\"n\">dst</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">src</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span></code></pre></div>\n<p data-pid=\"j-jf7pR8\">这个 kernel 很短，不过有两点值得说道：</p>\n<ol>\n<li data-pid=\"RmSojfY2\">在上面第二行代码中 <code>src</code>, <code>dst</code> 分别表示传入和输出的图像，它们都使用了 <code>img2d = ti.types.ndarray(element=1)</code> 作为类型标注。Taichi 允许你通过 <code>ti.types.ndarray()</code> 将一个 NumPy 数组作为参数传入 kernel，参数 <code>element_dim</code> 的具体含义读者可以暂时不用关心，只要知道它的目的是让我们可以同时操作像素的 RGB 三个分量。这种传参方式传递的是数组的<b>指针</b>，不会有额外的拷贝（注：如果在 GPU 上运行则会有 CPU/GPU 之间的自动数据转移），kernel 内部对数组的修改同样也会在外部生效。</li>\n<li data-pid=\"wo6NeCHu\">\n<code>for i, j in ti.ndrange(h, w):</code> 这句是一个顶层的 for 循环，它会自动并行遍历处理数组的所有元素。其中 <code>i</code> 遍历图像的所有行，<code>j</code> 遍历图像的所有列。</li>\n</ol>\n<p data-pid=\"qYe2kjCg\">好了，我们只要调用这个 kernel 并将 <code>dst</code> 保存为图片：</p>\n<div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">dst</span><span class=\"p\">)</span>\n<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"s2\">\"cat_transpose.jpg\"</span><span class=\"p\">,</span> <span class=\"n\">dst</span><span class=\"p\">)</span></code></pre></div>\n<p data-pid=\"BaeYJCNc\">就可以看到输出的转置图片。</p>\n<p data-pid=\"jNbe04Tg\">本例子的代码地址：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/taichi-dev/image-processing-with-taichi/blob/main/image_transpose.py\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">image_transpose.py</a>.</p>\n<h3><b>双线性插值</b></h3>\n<p data-pid=\"jtjY84eF\">图像转置这个操作未免太过简单，我们再来看一个稍微复杂一点的例子：图像的<b>双线性插值</b>。</p>\n<p data-pid=\"fzKqbGK_\">双线性插值是图像<b>上采样</b> (upsampling) 中常用的手段。假设我们的小猫图片只有 96x64 像素，我们想把它放大 5 倍变成一张 480x320 的图像。直接粗暴地将每个像素变成一个 5x5 的 \"马赛克\" 可不是个好主意：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-513d3e269310d9cfc49c2c9ef685549f_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"96\" data-rawheight=\"64\" class=\"content_image\" width=\"96\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f093ea7ea09cfc9490d88cd97115f3e0_b.jpg\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"320\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic1.zhimg.com/v2-f093ea7ea09cfc9490d88cd97115f3e0_r.jpg\"><figcaption>将每个像素放大 5 倍的效果</figcaption></figure><p data-pid=\"HBIuHZHq\">这是因为对放大后的图像中的某个像素 <img src=\"https://www.zhihu.com/equation?tex=%28i%2C+j%29\" alt=\"(i, j)\" eeimg=\"1\">，它在原图像中对应的位置 <img src=\"https://www.zhihu.com/equation?tex=P%3D%28i%2F5%2C+j%2F5%29\" alt=\"P=(i/5, j/5)\" eeimg=\"1\"> 不见得正好落在原图像的某个像素上，直接取整或者四舍五入到最近的像素上，会导致图像看起来不太平滑。</p>\n<p data-pid=\"pdH647nH\">双线性插值则是考虑了 <img src=\"https://www.zhihu.com/equation?tex=P\" alt=\"P\" eeimg=\"1\"> 周围的四个像素，将它们的像素值加权平均作为 <img src=\"https://www.zhihu.com/equation?tex=P\" alt=\"P\" eeimg=\"1\"> 的像素值返回：（图片来自<a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Bilinear_interpolation\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">维基百科</a>）</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f4db1b1a7090efb60681abd5fe5a1775_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"313\" data-rawheight=\"438\" class=\"content_image\" width=\"313\"></figure><p data-pid=\"rQ1TmZtV\">在上图中，<img src=\"https://www.zhihu.com/equation?tex=P%3D%28x%2Cy%29\" alt=\"P=(x,y)\" eeimg=\"1\"> 周围的四个像素</p>\n<p data-pid=\"xIqGNafW\"><img src=\"https://www.zhihu.com/equation?tex=Q_%7B11%7D%3D%28x_1%2Cy_1%29%2C%5C+Q_%7B12%7D%3D%28x_1%2Cy_2%29%2C%5C+Q_%7B21%7D%3D%28x_2%2Cy_1%29%2C%5C+Q_%7B22%7D%3D%28x_2%2Cy_2%29+%5C%5C\" alt=\"Q_{11}=(x_1,y_1),\\ Q_{12}=(x_1,y_2),\\ Q_{21}=(x_2,y_1),\\ Q_{22}=(x_2,y_2) \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"om1VbZdl\">构成一个单位正方形，四个小矩形的面积之和是 1，每个像素对应的权重系数是与它颜色相同的矩形的面积。比如当 <img src=\"https://www.zhihu.com/equation?tex=P\" alt=\"P\" eeimg=\"1\"> 越靠近左上角黄色的点 <img src=\"https://www.zhihu.com/equation?tex=Q_%7B12%7D\" alt=\"Q_{12}\" eeimg=\"1\"> 时，右下方黄色矩形的面积就会越大，从而 <img src=\"https://www.zhihu.com/equation?tex=Q_%7B12%7D\" alt=\"Q_{12}\" eeimg=\"1\"> 像素获得的权重也就越大。</p>\n<p data-pid=\"zR33mgqg\">这个计算可以用三个一维的线性插值来得到：首先分别对 <img src=\"https://www.zhihu.com/equation?tex=%28Q_%7B11%7D%2CQ_%7B21%7D%29\" alt=\"(Q_{11},Q_{21})\" eeimg=\"1\"> 和 <img src=\"https://www.zhihu.com/equation?tex=%28Q_%7B12%7D%2CQ_%7B22%7D%29\" alt=\"(Q_{12},Q_{22})\" eeimg=\"1\"> 用权重 <img src=\"https://www.zhihu.com/equation?tex=x-x_1\" alt=\"x-x_1\" eeimg=\"1\"> 各作一次一维插值，然后把两个结果用权重 <img src=\"https://www.zhihu.com/equation?tex=y-y_1\" alt=\"y-y_1\" eeimg=\"1\"> 再作一次一维插值：</p>\n<div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"kn\">import</span> <span class=\"nn\">taichi.math</span> <span class=\"k\">as</span> <span class=\"nn\">tm</span>\n\n<span class=\"nd\">@ti</span><span class=\"o\">.</span><span class=\"n\">kernel</span>\n<span class=\"k\">def</span> <span class=\"nf\">bilinear_interp</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"n\">img2d</span><span class=\"p\">,</span> <span class=\"n\">dst</span><span class=\"p\">:</span> <span class=\"n\">img2d</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">I</span> <span class=\"ow\">in</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">grouped</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"p\">):</span>\n        <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">I</span> <span class=\"o\">/</span> <span class=\"n\">scale</span>\n        <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>  <span class=\"c1\"># Bottom-left corner</span>\n        <span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">x1</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">y1</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Top-right corner</span>\n        <span class=\"n\">Q11</span> <span class=\"o\">=</span> <span class=\"n\">src</span><span class=\"p\">[</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">]</span>\n        <span class=\"n\">Q21</span> <span class=\"o\">=</span> <span class=\"n\">src</span><span class=\"p\">[</span><span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">]</span>\n        <span class=\"n\">Q12</span> <span class=\"o\">=</span> <span class=\"n\">src</span><span class=\"p\">[</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y2</span><span class=\"p\">]</span>\n        <span class=\"n\">Q22</span> <span class=\"o\">=</span> <span class=\"n\">src</span><span class=\"p\">[</span><span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">y2</span><span class=\"p\">]</span>\n        <span class=\"n\">R1</span> <span class=\"o\">=</span> <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">mix</span><span class=\"p\">(</span><span class=\"n\">Q11</span><span class=\"p\">,</span> <span class=\"n\">Q21</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">x1</span><span class=\"p\">)</span>\n        <span class=\"n\">R2</span> <span class=\"o\">=</span> <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">mix</span><span class=\"p\">(</span><span class=\"n\">Q12</span><span class=\"p\">,</span> <span class=\"n\">Q22</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">x1</span><span class=\"p\">)</span>\n        <span class=\"n\">dst</span><span class=\"p\">[</span><span class=\"n\">I</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">mix</span><span class=\"p\">(</span><span class=\"n\">R1</span><span class=\"p\">,</span> <span class=\"n\">R2</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">y1</span><span class=\"p\">),</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">u8</span><span class=\"p\">)</span> <span class=\"c1\"># Round into uint8</span></code></pre></div>\n<p data-pid=\"Elnz_x0_\">在上面的代码中，我们用一个二维下标 <code>I</code> 遍历输出图像 <code>dst</code> 的所有像素，<code>I</code> 表示像素在 <code>dst</code> 中的行和列。<code>I/scale</code> 返回的是像素在原图 <code>src</code> 中的坐标 <img src=\"https://www.zhihu.com/equation?tex=%28x%2Cy%29\" alt=\"(x,y)\" eeimg=\"1\">。<img src=\"https://www.zhihu.com/equation?tex=R_1\" alt=\"R_1\" eeimg=\"1\"> 是像素 <img src=\"https://www.zhihu.com/equation?tex=Q_%7B11%7D%3D%28x_1%2Cy_1%29%2CQ_%7B21%7D%3D%28x_2%2C+y_1%29\" alt=\"Q_{11}=(x_1,y_1),Q_{21}=(x_2, y_1)\" eeimg=\"1\"> 在 <img src=\"https://www.zhihu.com/equation?tex=x\" alt=\"x\" eeimg=\"1\"> 方向上的插值，<img src=\"https://www.zhihu.com/equation?tex=R_2\" alt=\"R_2\" eeimg=\"1\"> 是像素 <img src=\"https://www.zhihu.com/equation?tex=Q_%7B12%7D%3D%28x_1%2Cy_2%29%2CQ_%7B22%7D%3D%28x_2%2C+y_2%29\" alt=\"Q_{12}=(x_1,y_2),Q_{22}=(x_2, y_2)\" eeimg=\"1\"> 在 <img src=\"https://www.zhihu.com/equation?tex=x\" alt=\"x\" eeimg=\"1\"> 方向上的插值，<img src=\"https://www.zhihu.com/equation?tex=R_1%2CR_2\" alt=\"R_1,R_2\" eeimg=\"1\"> 在 <img src=\"https://www.zhihu.com/equation?tex=y\" alt=\"y\" eeimg=\"1\"> 方向上再插值一次就得到了最终的像素值。</p>\n<p data-pid=\"_NpwuNXU\">其中一维插值我们使用的是来自 <code>taichi.math</code> 模块的 <code>mix</code> 函数，定义如下：</p>\n<div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"nd\">@ti</span><span class=\"o\">.</span><span class=\"n\">func</span>\n<span class=\"k\">def</span> <span class=\"nf\">mix</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">):</span> <span class=\"c1\"># also named \"lerp\" in other libraries</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"n\">a</span></code></pre></div>\n<p data-pid=\"fgXPE4tx\">最终的结果如下所示：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f093ea7ea09cfc9490d88cd97115f3e0_b.jpg\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"320\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic1.zhimg.com/v2-f093ea7ea09cfc9490d88cd97115f3e0_r.jpg\"><figcaption>每个像素放大 5 倍的效果</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4a9be8ae6d6fe3656541ab4cc993418e_b.jpg\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"320\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic3.zhimg.com/v2-4a9be8ae6d6fe3656541ab4cc993418e_r.jpg\"><figcaption>双线性插值的效果</figcaption></figure><p data-pid=\"jtnKqkZY\">对比可见双线性插值给出的效果更为平滑。</p>\n<p data-pid=\"UKzcIqDU\">本例子的代码地址：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/taichi-dev/image-processing-with-taichi/blob/main/image_bilinear_inpterpolation.py\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">image_bilinear_inpterpolation.py</a>.</p>\n<h2><b>进阶：高斯滤波器与双边滤波器</b></h2>\n<h3><b>高斯滤波 (Gaussian filter)</b></h3>\n<p data-pid=\"39tacyv-\">高斯滤波是图像处理中常用的滤波算法之一，其作用是去除图像中的高频信息，使得图像变得模糊、平滑。高斯滤波是用一个矩阵与 2D 图像做卷积，这个矩阵叫做高斯核，它的元素来自二维高斯分布的采样。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-7e28998cdd2f50ab758049701c48c370_b.jpg\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"478\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic1.zhimg.com/v2-7e28998cdd2f50ab758049701c48c370_r.jpg\"><figcaption>2D 高斯卷积核。图片来源：Durand and Dorsey, Fast Bilateral Filtering for the Display of High-Dynamic-Range Images, SIGGRAPH 2006</figcaption></figure><p data-pid=\"m_U4mM03\">二维高斯分布的概率密度函数为</p>\n<p data-pid=\"IwZ2g83J\"><img src=\"https://www.zhihu.com/equation?tex=G%28x%2Cy%29+%3D+%5Cfrac%7B1%7D%7B2%5Cpi%5Csigma%5E2%7D%5Cmathrm%7Be%7D%5E%7B-%5Cfrac%7Bx%5E2%2By%5E2%7D%7B2%5Csigma%5E2%7D%7D.+%5C%5C\" alt=\"G(x,y) = \\frac{1}{2\\pi\\sigma^2}\\mathrm{e}^{-\\frac{x^2+y^2}{2\\sigma^2}}. \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"fiEFhCex\">对一个 <img src=\"https://www.zhihu.com/equation?tex=%282k%2B1%29%5Ctimes+%282k%2B1%29\" alt=\"(2k+1)\\times (2k+1)\" eeimg=\"1\"> 的高斯核 <img src=\"https://www.zhihu.com/equation?tex=K\" alt=\"K\" eeimg=\"1\">，其元素来自 <img src=\"https://www.zhihu.com/equation?tex=G%28x%2Cy%29\" alt=\"G(x,y)\" eeimg=\"1\"> 在 <img src=\"https://www.zhihu.com/equation?tex=%5C%7B%28i%2Cj%29%5Cmid-k%5Cleq+i%2Cj%5Cleq+k%5C%7D\" alt=\"\\{(i,j)\\mid-k\\leq i,j\\leq k\\}\" eeimg=\"1\"> 这些点的采样，比如  3x3 的高斯核是这样的：</p>\n<p data-pid=\"UdZQpXVd\"><img src=\"https://www.zhihu.com/equation?tex=K+%3D+%5Cbegin%7Bbmatrix%7DG%28-1%2C-1+%29%26G%280%2C+-1%29+%26+G%281%2C-1%29%5C%5C+G%28-1%2C0%29%26+G%280%2C0%29+%26+G%281%2C+0%29%5C%5C+G%28-1%2C+1%29%26+G%280%2C1%29+%26+G%281%2C+1%29%5Cend%7Bbmatrix%7D%E3%80%82%5C%5C\" alt=\"K = \\begin{bmatrix}G(-1,-1 )&amp;G(0, -1) &amp; G(1,-1)\\\\ G(-1,0)&amp; G(0,0) &amp; G(1, 0)\\\\ G(-1, 1)&amp; G(0,1) &amp; G(1, 1)\\end{bmatrix}。\\\\\" eeimg=\"1\"></p>\n<p data-pid=\"lnrFoZir\">由于 <img src=\"https://www.zhihu.com/equation?tex=G%28x%2Cy%29+%3D+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%5Csigma%5E2%7D%7D%5Cmathrm%7Be%7D%5E%7B-%5Cfrac%7Bx%5E2%7D%7B2%5Csigma%5E2%7D%7D+%5Ccdot+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%5Csigma%5E2%7D%7D%5Cmathrm%7Be%7D%5E%7B-%5Cfrac%7By%5E2%7D%7B2%5Csigma%5E2%7D%7D+%3D+G_1%28x%29G_1%28y%29+%5C%5C\" alt=\"G(x,y) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}}\\mathrm{e}^{-\\frac{x^2}{2\\sigma^2}} \\cdot \\frac{1}{\\sqrt{2\\pi\\sigma^2}}\\mathrm{e}^{-\\frac{y^2}{2\\sigma^2}} = G_1(x)G_1(y) \\\\\" eeimg=\"1\"> 是两个一维密度函数的乘积，所以高斯核是可分的，<img src=\"https://www.zhihu.com/equation?tex=K\" alt=\"K\" eeimg=\"1\"> 可以写成一维向量</p>\n<p data-pid=\"Wf_q9Plk\"><img src=\"https://www.zhihu.com/equation?tex=v%3D%28G_1%28-k%29%2CG_1%28-k%2B1%29%2C%5Cldots%2CG_1%28k%29%29%5ET+%5C%5C\" alt=\"v=(G_1(-k),G_1(-k+1),\\ldots,G_1(k))^T \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"8W3668lb\">与自身转置的乘积：<img src=\"https://www.zhihu.com/equation?tex=K%3Dv%5Ccdot+v%5ET\" alt=\"K=v\\cdot v^T\" eeimg=\"1\">。这种情形图像与 <img src=\"https://www.zhihu.com/equation?tex=K\" alt=\"K\" eeimg=\"1\"> 的二维卷积可以分解为两个一维卷积：先对图像的每一列用 <img src=\"https://www.zhihu.com/equation?tex=v\" alt=\"v\" eeimg=\"1\"> 做一次一维卷积，然后对结果的每一行用 <img src=\"https://www.zhihu.com/equation?tex=v%5ET\" alt=\"v^T\" eeimg=\"1\"> 再做一次一维卷积（证明见<a href=\"https://link.zhihu.com/?target=http%3A//www.songho.ca/dsp/convolution/convolution.html%23convolution_2d\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这个网页</a>）。这样就把二维卷积的复杂度从 <img src=\"https://www.zhihu.com/equation?tex=O%28m%2An%2Ak%5E2%29\" alt=\"O(m*n*k^2)\" eeimg=\"1\"> 减少到了 <img src=\"https://www.zhihu.com/equation?tex=O%28m%2An%2Ak%29\" alt=\"O(m*n*k)\" eeimg=\"1\">。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b5b08766ef7078ef2e2f9204431691b9_b.jpg\" data-size=\"normal\" data-rawwidth=\"858\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb\" width=\"858\" data-original=\"https://pic2.zhimg.com/v2-b5b08766ef7078ef2e2f9204431691b9_r.jpg\"><figcaption>从左到右：原图、只对列滤波的中间结果、完整高斯滤波的结果，\\sigma=5.0</figcaption></figure><p data-pid=\"WlBC6a4w\">我们首先开辟一个 1D field （即一维数组）用于存放 1 维的高斯核：</p>\n<div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=-</span><span class=\"mi\">512</span><span class=\"p\">)</span></code></pre></div>\n<p data-pid=\"U4oM6OCW\">这个 field 的长度是 1024，在绝大多数场景下肯定够用了。注意到选项 <code>offset=-512</code> 表示这个 field 的下标是从 -512 开始的，到 511 为止。这是 Taichi 提供的 field 的 offset 功能，好处是下标范围关于原点是对称的，这样可以简化代码。我们用一个 <code>@ti.func</code> 来初始化这个 field:</p>\n<div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"nd\">@ti</span><span class=\"o\">.</span><span class=\"n\">func</span>\n<span class=\"k\">def</span> <span class=\"nf\">compute_weights</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">):</span>\n    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">loop_config</span><span class=\"p\">(</span><span class=\"n\">serialize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">radius</span><span class=\"p\">,</span> <span class=\"n\">radius</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"n\">sigma</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">weights</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">val</span>\n\n    <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">loop_config</span><span class=\"p\">(</span><span class=\"n\">serialize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">radius</span><span class=\"p\">,</span> <span class=\"n\">radius</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">weights</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">/=</span> <span class=\"n\">total</span></code></pre></div>\n<p data-pid=\"OFifQ_iw\">其中参数 <code>radius</code> 控制高斯核的大小：高斯核中实际使用的元素下标范围为 <code>[-radius, radius]</code>，<code>sigma</code> 是 Gauss 密度函数的方差。</p>\n<p data-pid=\"i426wUwe\">这里值得注意的是我们使用了 <code>ti.loop_config(serialize=True)</code> 关闭了紧随其后的 for 循环的并行。这是因为在计算量比较小的情形，在 CPU/GPU 上生成大量线程的开销可能反而占了大头，所以我们让 for 语句串行执行即可。计算高斯核每个元素时，可以不用关心系数 <img src=\"https://www.zhihu.com/equation?tex=1%2F%7B2%5Cpi%5Csigma%5E2%7D\" alt=\"1/{2\\pi\\sigma^2}\" eeimg=\"1\">，最后用 <code>total</code> 变量统一做归一化。</p>\n<p data-pid=\"ZU4plt_r\">接下来我们来计算两次实际的一维卷积。我们开辟一个尺寸为 1024x1024 的 Vector Field (其实就是元素是 RGB 的二维数组) 用于存储第一次滤波后的中间图像：</p>\n<div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"s1\">'./images/mountain.jpg'</span><span class=\"p\">)</span>\n<span class=\"n\">img_blurred</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">Vector</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">u8</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">))</span></code></pre></div>\n<p data-pid=\"64uCkEGA\">然后先对列、再对行分别做一维滤波：</p>\n<div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"nd\">@ti</span><span class=\"o\">.</span><span class=\"n\">kernel</span>\n<span class=\"k\">def</span> <span class=\"nf\">gaussian_blur</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">img2d</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">):</span>\n    <span class=\"n\">img_blurred</span><span class=\"o\">.</span><span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">blur_radius</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"n\">sigma</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span> \n    <span class=\"n\">compute_weights</span><span class=\"p\">(</span><span class=\"n\">blur_radius</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"p\">)</span>\n    \n    <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">ndrange</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">):</span>\n        <span class=\"n\">l_begin</span><span class=\"p\">,</span> <span class=\"n\">l_end</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">blur_radius</span><span class=\"p\">),</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">blur_radius</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">total_rgb</span> <span class=\"o\">=</span> <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">vec3</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">l_begin</span><span class=\"p\">,</span> <span class=\"n\">l_end</span><span class=\"p\">):</span>\n            <span class=\"n\">total_rgb</span> <span class=\"o\">+=</span> <span class=\"n\">img</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">weights</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">]</span>\n\n        <span class=\"n\">img_blurred</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">total_rgb</span><span class=\"o\">.</span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">u8</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">ndrange</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">):</span>\n        <span class=\"n\">l_begin</span><span class=\"p\">,</span> <span class=\"n\">l_end</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">blur_radius</span><span class=\"p\">),</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">blur_radius</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">total_rgb</span> <span class=\"o\">=</span> <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">vec3</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">l_begin</span><span class=\"p\">,</span> <span class=\"n\">l_end</span><span class=\"p\">):</span>\n            <span class=\"n\">total_rgb</span> <span class=\"o\">+=</span> <span class=\"n\">img_blurred</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">weights</span><span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">]</span>\n\n        <span class=\"n\">img</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">total_rgb</span><span class=\"o\">.</span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">u8</span><span class=\"p\">)</span></code></pre></div>\n<p data-pid=\"D6P8XvbS\">在代码 3-5 行处，我们先将滤波后的图像置为 0，并初始化了高斯滤波器。接下来 7-14 行和 16-22 行的两个 for 循环分别是对列、行的一维滤波，它们本质上是一样的，只不过第一个循环会将列滤波的结果存在 <code>img_blurred</code> 中，第二个循环将结果写回原图像 <code>img</code>。第一个 for 循环中 <code>img_blurred[i, j]</code> 的值就是将滤波器竖起来覆盖在 <code>img</code> 上，使得其中心位置与 <code>img[i, j]</code> 重叠，然后计算滤波器的所有元素与其下方 <code>img</code> 元素乘积之和。就是这么简单！</p>\n<p data-pid=\"I9ZSwUfm\">本例子的代码地址：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/taichi-dev/image-processing-with-taichi/blob/main/gaussian_filter_separate.py\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">gaussian_filter_separate.py</a>.</p>\n<h3><b>双边滤波器 (Bilateral Filter)</b></h3>\n<p data-pid=\"urtpmHZ-\">高斯滤波器总是用固定的权重计算，所以虽然它会让图像变得平滑，但同样也会丢失图像的一部分细节。比如某些边缘的部分会模糊掉。</p>\n<p data-pid=\"mJN7UbZU\">那有没有什么办法，可以在<b>保持图像边缘细节</b>的同时实现平滑呢？既然高斯滤波器的权重只与像素之间的距离有关，何不再加入一个依赖于像素值差的权重因子呢？这就是双边滤波的思路：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-899daeaaa8c94b9cb07a82c28233c583_b.jpg\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic4.zhimg.com/v2-899daeaaa8c94b9cb07a82c28233c583_r.jpg\"><figcaption>图片来源：Durand and Dorsey, Fast Bilateral Filtering for the Display of High-Dynamic-Range Images, SIGGRAPH 2006</figcaption></figure><p data-pid=\"luj2_8jA\">上图中，我们将一个 2D 灰度（单 channel）图像 plot 到 3D 空间，其中高度就是像素的值。可以看到，双边滤波器可以在保持“悬崖”（即图像中的边缘）的同时，光滑两边的“山坡”。</p>\n<p data-pid=\"Uc0wwdt1\"><img src=\"https://www.zhihu.com/equation?tex=I%5E%7B%5Ctext%7Bfiltered%7D%7D%28x%29+%3D+%5Cfrac%7B1%7D%7BW_p%7D%5Csum_%7Bx_i%5Cin%5COmega%7DI%28x_i%29G_%7B%5Csigma_r%7D%28%5C%7CI%28x_i%29-I%28x%29%5C%7C%29G_%7B%5Csigma_s%7D%28%5C%7Cx_i-x%5C%7C%29.+%5C%5C\" alt=\"I^{\\text{filtered}}(x) = \\frac{1}{W_p}\\sum_{x_i\\in\\Omega}I(x_i)G_{\\sigma_r}(\\|I(x_i)-I(x)\\|)G_{\\sigma_s}(\\|x_i-x\\|). \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"gV91XSqp\">其中 <img src=\"https://www.zhihu.com/equation?tex=G_%7B%5Csigma_s%7D\" alt=\"G_{\\sigma_s}\" eeimg=\"1\"> 是上一小节中基于像素距离的高斯核，<img src=\"https://www.zhihu.com/equation?tex=G_%7B%5Csigma_r%7D\" alt=\"G_{\\sigma_r}\" eeimg=\"1\"> 是新引入的基于<b>像素差距</b>的高斯核：</p>\n<p data-pid=\"GAM9YD9-\"><img src=\"https://www.zhihu.com/equation?tex=G_%7B%5Csigma_r%7D%28%5C%7CI%28x_i%29-I%28x%29%5C%7C%29%3D%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%5Csigma_r%5E2%7D%7D%5Cmathrm%7Be%7D%5E%7B-%5Cfrac%7B%5C%7CI%28x_i%29-I%28x%29%5C%7C%5E2%7D%7B2%5Csigma_r%5E2%7D%7D.+%5C%5C\" alt=\"G_{\\sigma_r}(\\|I(x_i)-I(x)\\|)=\\frac{1}{\\sqrt{2\\pi\\sigma_r^2}}\\mathrm{e}^{-\\frac{\\|I(x_i)-I(x)\\|^2}{2\\sigma_r^2}}. \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"TfgQMOiW\"><img src=\"https://www.zhihu.com/equation?tex=W_P\" alt=\"W_P\" eeimg=\"1\"> 是归一化系数。所以在计算 <img src=\"https://www.zhihu.com/equation?tex=%28i%2Cj%29\" alt=\"(i,j)\" eeimg=\"1\"> 位置像素的滤波时，来自像素 <img src=\"https://www.zhihu.com/equation?tex=%28k%2Cl%29\" alt=\"(k,l)\" eeimg=\"1\"> 的权重贡献为</p>\n<p data-pid=\"GkDfEdp-\"><img src=\"https://www.zhihu.com/equation?tex=w%28i%2C+j%2C+k%2C+l%29+%3D+%5Cmathrm%7Bexp%7D%5Cleft%28%7B-%5Cfrac%7B%28i-k%29%5E2%2B%28j-l%29%5E2%7D%7B2%5Csigma_s%5E2%7D+-%5Cfrac%7B%5C%7CI%28i%2C+j%29-I%28k%2C+l%29%5C%7C%5E2%7D%7B2%5Csigma_r%5E2%7D%7D%5Cright%29.+%5C%5C\" alt=\"w(i, j, k, l) = \\mathrm{exp}\\left({-\\frac{(i-k)^2+(j-l)^2}{2\\sigma_s^2} -\\frac{\\|I(i, j)-I(k, l)\\|^2}{2\\sigma_r^2}}\\right). \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"54yWfPjw\">从而两个像素的差 <img src=\"https://www.zhihu.com/equation?tex=%5C%7CI%28i%2Cj%29-I%28k%2Cl%29%5C%7C\" alt=\"\\|I(i,j)-I(k,l)\\|\" eeimg=\"1\">越大，在计算滤波时 <img src=\"https://www.zhihu.com/equation?tex=I%28k%2Cl%29\" alt=\"I(k,l)\" eeimg=\"1\"> 贡献的值就越小，从而起到了保持边缘的效果：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e06ec4cffd708eb35623c021076401f8_b.jpg\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"359\" class=\"origin_image zh-lightbox-thumb\" width=\"540\" data-original=\"https://pic1.zhimg.com/v2-e06ec4cffd708eb35623c021076401f8_r.jpg\"><figcaption>左图：原始图像。右图：双边滤波后的图像</figcaption></figure><p data-pid=\"PVsA_j-m\">双边滤波器不是可分的，它不能分解成两个一维卷积，所以我们只能老老实实写二维卷积了：</p>\n<div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">img_filtered</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">Vector</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">u8</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">))</span>\n\n<span class=\"nd\">@ti</span><span class=\"o\">.</span><span class=\"n\">kernel</span>\n<span class=\"k\">def</span> <span class=\"nf\">bilateral_filter</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">img2d</span><span class=\"p\">,</span> <span class=\"n\">sigma_s</span><span class=\"p\">:</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">f32</span><span class=\"p\">,</span> <span class=\"n\">sigma_r</span><span class=\"p\">:</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">f32</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n    <span class=\"n\">blur_radius_s</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"n\">sigma_s</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">ndrange</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">):</span>\n        <span class=\"n\">k_begin</span><span class=\"p\">,</span> <span class=\"n\">k_end</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">blur_radius_s</span><span class=\"p\">),</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">blur_radius_s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">l_begin</span><span class=\"p\">,</span> <span class=\"n\">l_end</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">blur_radius_s</span><span class=\"p\">),</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">blur_radius_s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">total_rgb</span> <span class=\"o\">=</span> <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">vec3</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n        <span class=\"n\">total_weight</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">ndrange</span><span class=\"p\">((</span><span class=\"n\">k_begin</span><span class=\"p\">,</span> <span class=\"n\">k_end</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">l_begin</span><span class=\"p\">,</span> <span class=\"n\">l_end</span><span class=\"p\">)):</span>\n            <span class=\"n\">dist</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">sigma_s</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">cast</span><span class=\"p\">(</span>\n                <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">f32</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">img</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">f32</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">norm_sqr</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"n\">sigma_r</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n            <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"n\">dist</span><span class=\"p\">)</span>\n            <span class=\"n\">total_rgb</span> <span class=\"o\">+=</span> <span class=\"n\">img</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">w</span>\n            <span class=\"n\">total_weight</span> <span class=\"o\">+=</span> <span class=\"n\">w</span>\n\n        <span class=\"n\">img_filtered</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">total_rgb</span> <span class=\"o\">/</span> <span class=\"n\">total_weight</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">u8</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">ndrange</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">):</span>\n        <span class=\"n\">img</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">img_filtered</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span></code></pre></div>\n<p data-pid=\"wWwDRL00\">这个过程和高斯滤波是一样的，区别在于我们只需要用一个 for 循环并行处理所有像素，用 <code>total_weights</code> 统计所有来自高斯核覆盖的像素权重，用 <code>total_rgb</code> 统计这些像素值的加权和，最后做归一化处理。</p>\n<h3><b>应用：用双边滤波器进行磨皮美颜</b></h3>\n<p data-pid=\"3Jh9qnmd\">双边滤波器有着广泛的应用，最典型的就是图像降噪 (denoising)、图像平滑 (image smoothing) 等，而后者是一种经典的<b>磨皮美颜</b>算法：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a4a194b9937c0d63a2829d74fcf8cd90_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1992\" data-rawheight=\"1022\" class=\"origin_image zh-lightbox-thumb\" width=\"1992\" data-original=\"https://pic1.zhimg.com/v2-a4a194b9937c0d63a2829d74fcf8cd90_r.jpg\"></figure><p data-pid=\"Gq4S8y0j\">可以看到，双边滤波器可以在保持图片中锐利边缘的同时，抹去局部细节，起到磨皮效果。我还放了一张相同半径的高斯滤波器对比，可以看到高斯模糊会模糊边缘，效果是无法接受的。（输入图片来源：Pixarbay）</p>\n<p data-pid=\"xpSQpEsg\">本例子的代码地址：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/taichi-dev/image-processing-with-taichi/blob/main/bilateral_filter.py\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bilateral_filter.py</a>.</p>\n<h2><b>入魔：双边网格（Bilateral Grid）</b></h2>\n<h3><b>双边滤波器的性能问题</b></h3>\n<p data-pid=\"0gerx9kq\">双边滤波虽然能够在保持边缘的同时实现平滑，但它的性能是个很大的问题。前面提到 2D 的高斯滤波器可以通过分解为两个 1D 的高斯滤波解决，甚至对于较大的卷积核更有快速傅里叶变换 (FFT) 进一步提升性能，但双边滤波器就没有这种福分了：它不是可分的，无法表示成两个独立的 1D 卷积；由于依赖图像内容，所以也不能使用 FFT。</p>\n<p data-pid=\"mTYvCzDT\">那么有没有什么办法可以改造双边滤波器，使得它是可分的呢？答案是有的，这就是下面要介绍的<b>双边网格</b> (Bilateral Grid) 滤波。</p>\n<p data-pid=\"b2NLuBbu\">双边网格 (Bilateral Grid) 出自论文 <a href=\"https://link.zhihu.com/?target=https%3A//people.csail.mit.edu/sparis/publi/2007/siggraph/Chen_07_Bilateral_Grid.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Chen et al., SIGGRAPH 2007</a>，是双边滤波器的加速版本。这个方法非常精彩，是一个通过提升维度来简化问题的范例。它包含一系列操作步骤，所以乍看起来会有点复杂，但我向你保证它背后的想法是很简单的。</p>\n<blockquote data-pid=\"2IEyLYO7\"> 八卦一下：这篇文章的 last author 是我的 Ph.D. 导师 Fredo Durand，第一作者 Jiawen Chen 在是大我十几届，没有照过面的 MIT 师兄，第二作者 Sylvain Paris 是 Adobe 著名研究员，当年是 Fredo 的 post-doc。Fredo 真是从真实感渲染、计算摄影到编译器啥都能搞，太能打了...<br>\n</blockquote>\n<p data-pid=\"H2nsp3hY\">双边网格的核心想法是通过维度提升使得双边滤波可分。双边滤波不可分的原因是卷积核里面带有图像的像素值，如果把这个像素值的部分作为第三个维度上的独立卷积，不就可以实现可分了吗？</p>\n<p data-pid=\"Oih2ZzfS\">比如以灰度图像为例，图像是一个二维网格 <img src=\"https://www.zhihu.com/equation?tex=I\" alt=\"I\" eeimg=\"1\">，每个元素存储的是像素的灰度值。我们把这个<b>二维网格提升为一个三维网格</b> <img src=\"https://www.zhihu.com/equation?tex=%5Cwidetilde%7BI%7D\" alt=\"\\widetilde{I}\" eeimg=\"1\">，第三个维度的长度是灰度的范围 [0, 255]，从而整个网格大小为 <img src=\"https://www.zhihu.com/equation?tex=w%5Ctimes+h%5Ctimes+255\" alt=\"w\\times h\\times 255\" eeimg=\"1\">。网格的 <img src=\"https://www.zhihu.com/equation?tex=%28i%2C+j%2C+k%29\" alt=\"(i, j, k)\" eeimg=\"1\"> 位置的元素存储的值如下：</p>\n<p data-pid=\"AcWik2Lz\"><img src=\"https://www.zhihu.com/equation?tex=%5Cwidetilde%7BI%7D%28i%2C+j%2C+k%29+%3D+%5Cbegin%7Bcases%7D%28I%28i%2Cj%29%2C1%29%2C+%26+%5Ctext%7Bif+%7D+k%3DI%28i%2Cj%29%5C%5C+%280%2C+0%29.+%26+%5Ctext%7Botherwise%7D%5Cend%7Bcases%7D+%5C%5C\" alt=\"\\widetilde{I}(i, j, k) = \\begin{cases}(I(i,j),1), &amp; \\text{if } k=I(i,j)\\\\ (0, 0). &amp; \\text{otherwise}\\end{cases} \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"JuagTABi\">对这个三维网格做三维的高斯滤波，假设得到的结果是三维网格 <img src=\"https://www.zhihu.com/equation?tex=%5Cwidetilde%7B%5CGamma%7D%3A%5Cwidetilde%7B%5CGamma%7D%28i%2Cj%2Ck%29+%3D+%28z%2C+w%29\" alt=\"\\widetilde{\\Gamma}:\\widetilde{\\Gamma}(i,j,k) = (z, w)\" eeimg=\"1\">，则 <img src=\"https://www.zhihu.com/equation?tex=%5CGamma%28i%2Cj%29%3Dz%2Fw\" alt=\"\\Gamma(i,j)=z/w\" eeimg=\"1\"> 就是所求的对 <img src=\"https://www.zhihu.com/equation?tex=I\" alt=\"I\" eeimg=\"1\"> 双边滤波后的结果。</p>\n<p data-pid=\"_gCmNUT3\">这里有个技巧值得注意：网格存储 <img src=\"https://www.zhihu.com/equation?tex=%28I%28i%2Cj%29%2C1%29\" alt=\"(I(i,j),1)\" eeimg=\"1\"> 这个二元组是为了在卷积时用第一个位置记录像素值的加权和 <img src=\"https://www.zhihu.com/equation?tex=%5Csum+w_iI%28x_i%29\" alt=\"\\sum w_iI(x_i)\" eeimg=\"1\">，用第二个位置记录权重的和 <img src=\"https://www.zhihu.com/equation?tex=%5Csum+w_i\" alt=\"\\sum w_i\" eeimg=\"1\">，最后相除就得到了归一化的结果。</p>\n<p data-pid=\"XvRem4g0\">下图是原论文中给出的一维提升到二维的例子，包含三个步骤：网格创建 (<b>create</b>)，网格处理（<b>process</b>）、网格切片（<b>slice</b>）。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b2dc8112592c86c2acadf7dde4416ea5_b.jpg\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"261\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-b2dc8112592c86c2acadf7dde4416ea5_r.jpg\"><figcaption>Bilateral Grid 三部曲 (Create, process &amp; slice)。图片来自 SIGGRAPH 2007 的 Bilateral Grid paper</figcaption></figure><p data-pid=\"xdc1tMnR\">上图中最左边输入的是一维的信号，它的两段之间有一个明显的间断（即边缘）。提升为二维网格（左边第二张图）后，它们变成图像中两个不连通的区域。如果对这个图像作二维的高斯滤波的话，由于两个区域间断处的像素距离比较远，所以它们在滤波时给对方贡献的权重很小，甚至没有，所以双边网格是可以保持边缘信息的。当然，上面这张图是为了画图简便，采用了一维信号作为输入，所以 Grid 是二维的；在我们的情况中，输入是二维的，Grid 就是三维的。</p>\n<p data-pid=\"SnLTyCwJ\">在具体实现中，由于对一张 1024x1024=1MB 的灰度图，升维后网格的大小是 1024x1024x256=256MB，占据的空间实在是有点大，而且我们要的本来就是滤波后的结果，维护一个精确的大网格没有必要，所以我们会按比例缩小创建的网格（降采样），然后在滤波后再超采样回去。</p>\n<p data-pid=\"TbV-V2N-\">具体步骤和代码介绍如下，我们采用<b>灰度</b>图像作为输入。</p>\n<h3><b>第一步：Create, 创建网格（降采样与升维）</b></h3>\n<p data-pid=\"dCJE1mSQ\">我们首先声明两个 VectorField 用于存储三维网格及其滤波的中间结果，大小固定为 512x512x128 (32MB)。再声明一个形状是 2x512 的 field 用于存储滤波器的系数，2 表示有两个滤波器，一个给图像的空域 (spatial space)，一个给像素的值域 (range space)。</p>\n<div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">Vector</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">f32</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">))</span>\n<span class=\"n\">grid_blurred</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">Vector</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">f32</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">))</span>\n<span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">f32</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">),</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">256</span><span class=\"p\">))</span></code></pre></div>\n<p data-pid=\"KOExyw0J\">我们省略初始化 <code>weights</code> 的代码部分，这个和之前高斯滤波器中的步骤是完全类似的。初始化 <code>grid</code> 的代码如下：（以下代码在 kernel 内执行）</p>\n<div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">grid</span><span class=\"o\">.</span><span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">ndrange</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n    <span class=\"n\">lum</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span>\n    <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"n\">s_s</span><span class=\"p\">,</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">i32</span><span class=\"p\">),</span>\n         <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">/</span> <span class=\"n\">s_s</span><span class=\"p\">,</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">i32</span><span class=\"p\">),</span>\n         <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">lum</span> <span class=\"o\">/</span> <span class=\"n\">s_r</span><span class=\"p\">,</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">i32</span><span class=\"p\">)]</span> <span class=\"o\">+=</span> <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">vec2</span><span class=\"p\">(</span><span class=\"n\">lum</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">grid_blurred</span><span class=\"o\">.</span><span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">grid_n</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">s_s</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"n\">s_s</span>\n<span class=\"n\">grid_m</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">s_s</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"n\">s_s</span>\n<span class=\"n\">grid_l</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">256</span> <span class=\"o\">+</span> <span class=\"n\">s_r</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"n\">s_r</span></code></pre></div>\n<p data-pid=\"lCXpHq93\">其中 <code>s_s</code> 是图像大小的缩放因子，<code>s_r</code> 是值域 [0, 255] 的缩放因子。<code>grid_blurred</code> 初始化为 0。</p>\n<p data-pid=\"ySAMD0-B\">顺便我们计算了缩放后的三维网格的实际大小 <code>grid_n</code>, <code>grid_m</code>, <code>grid_l</code>。</p>\n<h3><b>第二步：Process, 网格操作（高斯模糊等）</b></h3>\n<p data-pid=\"CIFtoD7_\">现在我们可以对三维网格 <code>grid</code> 做三维高斯滤波了。这一步代码看似很长，其实反而是最简单的部分，因为它不过是我们前面介绍过的高斯滤波部分的重复，只是多了一次滤波。</p>\n<p data-pid=\"o_-KsvtI\">注意经典的 Bilateral filter 算子在这一步变成了三个可分 filter：（以下代码均在 kernel 内执行）</p>\n<div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">blur_radius</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"n\">sigma_s</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">ndrange</span><span class=\"p\">(</span><span class=\"n\">grid_n</span><span class=\"p\">,</span> <span class=\"n\">grid_m</span><span class=\"p\">,</span> <span class=\"n\">grid_l</span><span class=\"p\">):</span>\n    <span class=\"n\">l_begin</span><span class=\"p\">,</span> <span class=\"n\">l_end</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">blur_radius</span><span class=\"p\">),</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">grid_n</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">blur_radius</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">vec2</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">l_begin</span><span class=\"p\">,</span> <span class=\"n\">l_end</span><span class=\"p\">):</span>\n        <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">weights</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">]</span>\n\n    <span class=\"n\">grid_blurred</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">total</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">ndrange</span><span class=\"p\">(</span><span class=\"n\">grid_n</span><span class=\"p\">,</span> <span class=\"n\">grid_m</span><span class=\"p\">,</span> <span class=\"n\">grid_l</span><span class=\"p\">):</span>\n    <span class=\"n\">l_begin</span><span class=\"p\">,</span> <span class=\"n\">l_end</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">blur_radius</span><span class=\"p\">),</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">grid_m</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">blur_radius</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">vec2</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">l_begin</span><span class=\"p\">,</span> <span class=\"n\">l_end</span><span class=\"p\">):</span>\n        <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">grid_blurred</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">weights</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">]</span>\n    <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">total</span>\n\n<span class=\"n\">blur_radius</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"n\">sigma_r</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">ndrange</span><span class=\"p\">(</span><span class=\"n\">grid_n</span><span class=\"p\">,</span> <span class=\"n\">grid_m</span><span class=\"p\">,</span> <span class=\"n\">grid_l</span><span class=\"p\">):</span>\n    <span class=\"n\">l_begin</span><span class=\"p\">,</span> <span class=\"n\">l_end</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">blur_radius</span><span class=\"p\">),</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">grid_l</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"n\">blur_radius</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">vec2</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">l_begin</span><span class=\"p\">,</span> <span class=\"n\">l_end</span><span class=\"p\">):</span>\n        <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">grid</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">weights</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"p\">]</span>\n\n    <span class=\"n\">grid_blurred</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">total</span></code></pre></div>\n<p data-pid=\"mHn7dExC\">这一段包含三个顶层的 for 循环，前两个是对空间滤波，使用的权重来自 <code>weights[0]</code>；第三个是对值域滤波，使用的权重来自 <code>weights[1]</code>。</p>\n<p data-pid=\"cgf8gRi7\">我们把每次滤波的结果轮流写入 <code>grid_blurred</code> 和 <code>grid</code>。三轮滤波后最终的结果存储在 <code>grid_blurred</code> 中。</p>\n<h3><b>第三步：Slice, 网格切片（三线性插值）</b></h3>\n<p data-pid=\"VLHdiTs1\">最后我们来从“缩水”的网格 <code>grid_blurred</code> 中超采样获得滤波后的图像。这一步同样非常简单：（以下代码同样需要在 kernel 内执行）</p>\n<div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">ndrange</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n    <span class=\"n\">lum</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span>\n    <span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">sample_grid</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"n\">s_s</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">/</span> <span class=\"n\">s_s</span><span class=\"p\">,</span> <span class=\"n\">lum</span> <span class=\"o\">/</span> <span class=\"n\">s_r</span><span class=\"p\">)</span>\n    <span class=\"n\">img</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">u8</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">sample</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span></code></pre></div>\n<p data-pid=\"hPTXvcdL\">首先我们定位到未缩水的完整三维网格的 <code>[i, j, img[i,j]]</code> 处，这里的网格值可以根据缩水后的网格在 <code>[i / s_s, j / s_s, lum / s_r]</code> 处的值用一个插值函数 <code>sample_grid</code> 得出来，得到的结果是一个二元组 <img src=\"https://www.zhihu.com/equation?tex=%28z%2Cw%29\" alt=\"(z,w)\" eeimg=\"1\"> ，<img src=\"https://www.zhihu.com/equation?tex=z\" alt=\"z\" eeimg=\"1\"> 是像素的加权和，<img src=\"https://www.zhihu.com/equation?tex=w\" alt=\"w\" eeimg=\"1\"> 是权重的和，二者相除即为滤波后的值。</p>\n<p data-pid=\"dW5fxs55\">插值函数 <code>sample_grid</code> 是个啥？读者不难想到，它正是我们之前介绍的双线性插值的升维版本：三线性插值。和双线性插值类似，三线性插值对应的是单位正方体八个顶点的加权和。它可以通过先在正方体上下两个表面分别做一次双线性插值，然后将两个结果再做一次线性插值得到。</p>\n<p data-pid=\"55hTRn5x\">本例子的代码地址：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/taichi-dev/image-processing-with-taichi/blob/main/bilateral_grid.py\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bilateral_grid.py</a>.</p>\n<p data-pid=\"BJJIoo-T\"><b>总结一下:</b> 通过把 2D 图像升级到 3D，我们用一个 3D 可分卷积代替了一个 2D 的不可分 “卷积”。这样做会有性能优势吗？我们来分析一下：</p>\n<ul>\n<li data-pid=\"FDITSyRx\">3D 网格的 x, y 分辨率其实比原图低很多，所以整个 3D 网格的 “体素” 数目其实不见得就比 2D 图像的像素多。</li>\n<li data-pid=\"fdfRMsaK\">另一方面，本来非常昂贵的不可分 2D 卷积被拆分成了可分的三次卷积，计算量大幅下降。</li>\n<li data-pid=\"7cM0SZ6o\">当然，整个系统的另一大亮点是非常 GPU 友好，特别是使用 Taichi 实现的时候 :-)</li>\n</ul>\n<h3><b>应用：实时 Local Tone Mapping（“HDR” 效果）</b></h3>\n<p data-pid=\"3foAHxU1\">人眼能够感知到的<b>动态范围</b>，即最亮和最暗光强的比值，能够达到 <img src=\"https://www.zhihu.com/equation?tex=1%3A10%5E9\" alt=\"1:10^9\" eeimg=\"1\"> ，但是普通显示设备上只能做到 <img src=\"https://www.zhihu.com/equation?tex=1%3A100+%5Csim+1%3A1000\" alt=\"1:100 \\sim 1:1000\" eeimg=\"1\">，而比较好的摄影器材的动态范围则在显示器和人眼之间。不经处理地将高动态范围（High dynamic range, HDR）的图片在低动态范围 (Low Dynamic Range, LDR) 的设备上显示就会造成很多尴尬，难以同时展示图片亮部和暗部的细节：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f0ac03a649af6067315594c7fc41c598_b.jpg\" data-size=\"normal\" data-rawwidth=\"1269\" data-rawheight=\"993\" class=\"origin_image zh-lightbox-thumb\" width=\"1269\" data-original=\"https://pic1.zhimg.com/v2-f0ac03a649af6067315594c7fc41c598_r.jpg\"><figcaption>大光比照片的尴尬：不增加亮度吧，暗的地方（比如树枝）一片死黑；增加亮度吧，树枝能看见了，天空又完全过曝了。</figcaption></figure><p data-pid=\"5hsvP_S4\">色调映射（Tone mapping）是解决这个问题的良药。Tone mapping 有两种，一种是对屏幕上所有的像素用同一个函数调整亮度，即 Global tone mapping；另一种则会根据每个像素周围的像素智能地根据上下文 (context) 进行调整亮度，即 Local tone mapping，往往更为有效。</p>\n<p data-pid=\"Q5WzRe6B\">而 Local tone mapping 和 Bilateral filter 有什么联系呢？不难想到 Bilateral filter 最大的优势就在于 “<b>保留边缘，抹去局部细节</b>”，而 Local tone mapping 的需求恰恰是 “<b>去掉边缘，保留局部细节</b>”。由于人眼对于局部细节更为敏感，<b>反向</b>的 Bilateral filter，如果用在图片的亮度上，就可以有效压缩 HDR 图片的动态范围，便于在 LDR 设备上显示。Bilateral filter 用于局部色调映射的具体步骤如下：</p>\n<ol>\n<li data-pid=\"u9dwP0bc\">对 RGB 的图片计算 log luminance（R、G、B 的加权求和后，取对数），称此图为 <img src=\"https://www.zhihu.com/equation?tex=L\" alt=\"L\" eeimg=\"1\">；</li>\n<li data-pid=\"2co_inWy\">对 log luminance 图片 <img src=\"https://www.zhihu.com/equation?tex=L\" alt=\"L\" eeimg=\"1\"> 进行 bilateral filtering，得到光滑后的 log luminance base 图片，即 <img src=\"https://www.zhihu.com/equation?tex=B+%3D\" alt=\"B =\" eeimg=\"1\"> bilateral_filter<img src=\"https://www.zhihu.com/equation?tex=%28L%29\" alt=\"(L)\" eeimg=\"1\">；</li>\n<li data-pid=\"m5XlBeFP\">计算亮度细节 (detail) 图层 <img src=\"https://www.zhihu.com/equation?tex=D+%3D+L+-+B\" alt=\"D = L - B\" eeimg=\"1\">，这一部分是我们希望保留的亮度细节；</li>\n<li data-pid=\"EB5mWfPy\">将 B 进行压缩，<img src=\"https://www.zhihu.com/equation?tex=B%27+%3D+%5Calpha+B\" alt=\"B' = \\alpha B\" eeimg=\"1\">，其中 <img src=\"https://www.zhihu.com/equation?tex=0+%3C+%5Calpha+%3C+1\" alt=\"0 &lt; \\alpha &lt; 1\" eeimg=\"1\">。（这部分是动态范围过大的罪魁祸首，且压缩这部分不影响人眼对内容的感知）；</li>\n<li data-pid=\"1SokBw0o\">重新计算调整后的 log luminance <img src=\"https://www.zhihu.com/equation?tex=L%27+%3D+B%27+%2B+D+%2B+%5Cbeta\" alt=\"L' = B' + D + \\beta\" eeimg=\"1\">，其中 <img src=\"https://www.zhihu.com/equation?tex=%5Cbeta\" alt=\"\\beta\" eeimg=\"1\"> 是曝光补偿常数；</li>\n<li data-pid=\"k9ux9-BR\">利用 <img src=\"https://www.zhihu.com/equation?tex=L%27\" alt=\"L'\" eeimg=\"1\"> 计算新的图片，确保每个像素的 RGB 和原来保持比例，而 luminance 符合 <img src=\"https://www.zhihu.com/equation?tex=L%27\" alt=\"L'\" eeimg=\"1\"> 的结果。</li>\n</ol>\n<p data-pid=\"Kfz0H_J-\">运行 Bilateral Grid tone mapping 以后，结果终于舒服了，能同时看到高光和阴影处的结果。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-80d9f5d611925dc796c12c21d967dde1_b.jpg\" data-size=\"normal\" data-rawwidth=\"916\" data-rawheight=\"1116\" class=\"origin_image zh-lightbox-thumb\" width=\"916\" data-original=\"https://pic2.zhimg.com/v2-80d9f5d611925dc796c12c21d967dde1_r.jpg\"><figcaption>运行 bilateral_grid_hdr.py 的结果。参数还蛮多的，可以自己调一下看看每个参数会有什么效果。调不好的话容易出现光晕 (haloing)... 调节 blend 可以开关 tone mapping。图片来源：我自己拿相机在 MIT 校园里拍的。（哪天退休了真想去当一个摄影师...）</figcaption></figure><p data-pid=\"AfKSs55U\">这部分的代码在 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/taichi-dev/image-processing-with-taichi/blob/main/bilateral_grid_hdr.py\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bilateral_grid_hdr.py</a>.</p>\n<p data-pid=\"n6MTAhgY\">著名游戏《对马岛之魂》中就用到了双边网格进行色调映射，实现了在 PS 4 上 1080 分辨率只需要 250 us 就能完成相关处理（等我有空了一定要去玩一下这个游戏，“实地调研”一下）：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-158ca266c38156e048958003365f1b6d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"705\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic2.zhimg.com/v2-158ca266c38156e048958003365f1b6d_r.jpg\"></figure><blockquote data-pid=\"Sn0VS_9H\">图片来源：SIGGRAPH 2021 Advances in Real-Time Rendering: Real-Time Samurai Cinema: Lighting, Atmosphere, and Tonemapping in Ghost of Tsushima（YouTube 有视频，这个老哥讲得特别好，非常完整地 cover 了对马岛之魂的后处理管线的各种细节，建议有兴趣的同学观看一下。听说知乎上贴 YouTube 链接不太好，我就不放了，不过很容易搜索到。）</blockquote>\n<h2><b>注意事项</b></h2>\n<ul>\n<li data-pid=\"NbbJY7VL\">\n<b>存储与可视化</b>：因为一些历史原因，OpenCV 中默认的 channel 存储顺序为 BGR，这一点尤其要注意。Taichi 的可视化系统中采用 RGB 顺序。另外，OpenCV 的可视化工具 <code>imshow</code> 等将图片的左上角作为 <code>(0, 0)</code>，纵向为 i，横向为 j；而 Taichi 的 <code>gui.set_image</code> 的坐标系会将左下角作为 <code>(0, 0)</code>，横向为 i，纵向为 j。当然，如果只是用 Taichi 进行计算而不是显示，i、j 的顺序并没有这么重要，本文中也没有仔细区分。</li>\n<li data-pid=\"E901ilJU\">\n<b>调试模式</b>：在 Taichi 中，在 <code>ti.init</code> 里面打开 <code>debug=True</code> 可以进入调试模式，这时程序性能会微微下降，但是会自动检查数组越界等常见错误，大大方便调试。这一点是 CUDA 等工具不具备的。</li>\n<li data-pid=\"Gf2VwSAX\">\n<b>数据类型</b>：图片常常被 <code>np.uint8</code> 等格式保存，对应的 Taichi 格式是 <code>ti.u8</code>。类似地，<code>np.float32</code>对应 Taichi 的 <code>ti.f32</code>，或者直接使用 <code>float</code> 也行。</li>\n<li data-pid=\"-9u64__F\">\n<b>关于性能</b>：如果对于特别分辨率小的图片，使用 Taichi 在 GPU 上运算时可能并没有加速，因为 GPU kernel 的启动、Taichi 的 JIT 编译时间、以及 pybind11 的开销会抵消加速。而对于规模比较大的图片、复杂的计算，往往加速会比较明显。</li>\n</ul>\n<h2><b>结语</b></h2>\n<p data-pid=\"uZh0oCKf\">Taichi 是否可以在加速图像处理上有独特优势？答案是肯定的，我想很多读者应该也会和我一样得到相同的结论：对于 Bilateral Grid 这样的经典算法，用别的工具在 Python 中用 GPU 高效实现，是相当困难的。当然，在写作本文的过程中，我也发现了 Taichi 的很多不足之处，好在其中的大部分是比较容易在未来修复的。比如：</p>\n<ul>\n<li data-pid=\"m-dCtpCB\">\n<code>ti.types.ndarray(element_dim=1)</code> 等 API 过长，对于用户来说需要记忆的 API 量还比较大；</li>\n<li data-pid=\"kMckwTiT\">在开发完原型后，用户常常有部署的需求，而这一块需要使用 Taichi 正在开发的 AOT 功能来支持；</li>\n<li data-pid=\"wjfSNTEg\">Pybind11 造成的调用开销对于小规模图像计算可能会导致性能下降；</li>\n<li data-pid=\"BZZnBNZw\">与 Matlab 等工具相比，Taichi 在一些简单而经典操作上其实并不能带来生产力的提升：高斯模糊在 Matlab、OpenCV 里也许一行代码就能实现。Taichi 的强项还是在可定制性。当然，也许这些常用操作未来也会以某种形式进入 Taichi 之中；</li>\n<li data-pid=\"wSw2U_ze\">还有一些报错不够响亮的问题，我直接在 GitHub 开 issue 了：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/taichi-dev/taichi/issues/6305\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/taichi-dev/t</span><span class=\"invisible\">aichi/issues/6305</span><span class=\"ellipsis\"></span></a>。</li>\n</ul>\n<p data-pid=\"4feSxFyP\">即使目前的 Taichi 版本在图像处理任务中还稍稍有一些不顺手的地方，我们已经能够看到 Taichi 为图像处理用户带来独特的价值。随着相关问题在开源社区得到修复，我们相信 Taichi 一定能够在这个领域大放异彩。</p>\n<p data-pid=\"nNQo0iZK\">本文所有代码均可以直接运行，输入图片也附在仓库内了。欢迎大家试玩：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/taichi-dev/image-processing-with-taichi\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/taichi-dev/i</span><span class=\"invisible\">mage-processing-with-taichi</span><span class=\"ellipsis\"></span></a></p>\n<p data-pid=\"vIEQD6UB\">由于篇幅限制，本文并未对实际程序运行性能进行严谨的讨论，程序并未精心优化，也没有提及这些程序应该如何应用 Taichi AOT 部署到移动设备上。如果大家有兴趣，欢迎留言，等下次有机会的时候 (???)，我再写长文介绍！</p>\n<p data-pid=\"pPt575Zx\">最后，对加速 Python、图像处理感兴趣的同学，欢迎在「太极图形」微信号回复 “加群“，与社区同学一起讨论呀！</p>\n<h2><b>参考文献与扩展阅读</b></h2>\n<ul>\n<li data-pid=\"e5E2bu9a\">MIT 的双边滤波教程：<a href=\"https://link.zhihu.com/?target=https%3A//people.csail.mit.edu/sparis/bf_course/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">people.csail.mit.edu/sp</span><span class=\"invisible\">aris/bf_course/</span><span class=\"ellipsis\"></span></a>\n</li>\n<li data-pid=\"NoEDm-7N\">Bilateral Grid 原始论文: <a href=\"https://link.zhihu.com/?target=https%3A//people.csail.mit.edu/sparis/publi/2007/siggraph/Chen_07_Bilateral_Grid.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">people.csail.mit.edu/sp</span><span class=\"invisible\">aris/publi/2007/siggraph/Chen_07_Bilateral_Grid.pdf</span><span class=\"ellipsis\"></span></a>\n</li>\n<li data-pid=\"tjDBiSjm\">《对马岛之魂的》实时后处理：SIGGRAPH 2021 Advances in Real-Time Rendering: Real-Time Samurai Cinema: Lighting, Atmosphere, and Tonemapping in Ghost of Tsushima</li>\n<li data-pid=\"nThENFl5\">知乎上的一篇很棒的双边滤波中文教程：<a href=\"https://zhuanlan.zhihu.com/p/365874538\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/36</span><span class=\"invisible\">5874538</span><span class=\"ellipsis\"></span></a>\n</li>\n<li data-pid=\"VP_lDCaX\">Taichi 语言中文官网：<a href=\"https://link.zhihu.com/?target=https%3A//taichi-lang.cn/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">taichi-lang.cn/</span><span class=\"invisible\"></span></a>\n</li>\n<li data-pid=\"ukcz0T3P\">Taichi 中文论坛：<a href=\"https://link.zhihu.com/?target=https%3A//forum.taichi.graphics/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">forum.taichi.graphics/</span><span class=\"invisible\"></span></a>\n</li>\n<li data-pid=\"cSFbXI6C\">Taichi 语言文档（部分有中文翻译）：<a href=\"https://link.zhihu.com/?target=https%3A//docs.taichi-lang.org/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">docs.taichi-lang.org/</span><span class=\"invisible\"></span></a>\n</li>\n<li data-pid=\"vX7THKjx\">本文中的部分图片来自 Wikipedia</li>\n</ul>\n<p data-pid=\"sefUU1qU\"><i>本文作者：Yuanming &amp; Liang</i></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://zhuanlan.zhihu.com/p/573894977?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/573894977?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"虚幻引擎30岁可以学吗？","date":"2022-10-17 07:16:13","description":"\n<p data-pid=\"OfAg-Py8\">因为工作关系（作为虚幻官方社区经理），也因为年纪大一点（奔四了），还因为我其实几年前也干过两三年的UE4培训讲师，采样过社会上招收的形形色色的各种人。在日常的工作中，也经常会有各种人私下跟我咨询，例如30多岁是否可以学UE，两个offer哪个比较好。</p>\n<p data-pid=\"yL9ZCPE1\">针对题主的问题，我的回答是：<b>有点难但并非不可行</b></p>\n<p data-pid=\"wYGi7RMi\"><b>有点难：</b>一是年龄确实劣势，二是学历吃亏，三是工作经验缺乏，四是发展潜力受限。对于现在来搞游戏开发几乎就是白手起家。在同样的就业市场上，是远远比不过年轻的专业对口应届生的，更遑论同龄的前辈了。还有第五点，作为一个面试官，我会在心里暗自揣测，你30多岁了才开始转行，在学习能力或者是心性上可能多多少少有点问题。多一事不如少一事，其他候选者又多的是，干嘛要招你呢？说这些是让题主清楚明白自身的劣势，当然也不要被各种培训机构忽悠的好像只要去学完就能行。</p>\n<p data-pid=\"ct_FOGkX\"><b>并非不可行：</b>当然也不是全无希望。我试想一下我在什么情况下会招你？只有你当面拿出一个UE的Demo，然后针对技术面试的问题对答良好，那我会愿意给你一个机会，从初级岗位开始做起。以后发展成什么样子就看你接下来自己的努力和造化了。虽然机会不大，但你要真能学以贯通技术服众发展成核心骨干或是leader，那也得送你一句牛逼。第二是，IT虽然也会看学历，但确实不像传统别的行业那么看，不会一个机会都不给你。所以也不像别的答主那样悲观，好像只有1%的机会，我觉得至少有5%吧。在IT，或者是游戏开发圈，我话说得糙一点，只要你能帮我干活，把我要的东西实现好，那就行了，其他的我管你干嘛的。你什么学历，什么背景，甚至连是否是在公司内入职我都不在乎，外包给你兼职干都行(有很多人就是这么要我介绍人干活的)。第三是UE的人才需求确实还远没有到饱和的阶段。国内的使用UE的公司，包括游戏和非游戏的，都还在增长中。这点对于大龄转行的人来说是利好，不像web或app那样已经非常成熟饱和了。</p>\n<p data-pid=\"9R6WFOb-\"><b>勤能补拙：</b>说了这么多，中心思想只有一个，外人怎么说你不行都没事，但你自己要能证明自己行。前路困难艰险那么多，过去失去的时光和机会已经无法撤销，当下如果有心，唯一能做的就是未来要花比普通人多的多的努力。别人看剧的时候你学习，别人玩游戏的时候你学习，别人出去玩谈恋爱的时候你学习。普通人已经学不下去的时候你还要继续学习。正常人已经心烦气躁想放弃的时候你依然要学习！否则你凭什么补齐那些差距坐在一起的岗位上？</p>\n<p data-pid=\"N1nTbYKM\"><b>目标低一点：</b>也别幻想自己只要努力从此就平步青云获得多大成就了。过高的心里预期达不到反而会打击自己继续前进的信心。我希望题主也要清醒的认识到自己的天花板瓶颈，游戏圈内不缺大佬。有太多的人背景比你好资源比你多又比你聪明还比你努力，你怎么比？这么天堑般的差距被你看到意识到了，心理脆弱的人就又要伤心了。所以我给题主的建议就是不要跟已在行业内的前辈们比，甚至也不要跟初出茅庐的年轻人比，就只自己跟自己比。今天的自己比昨天的会的多了一些，学会了一个功能，实现了一个效果，懂得了一个原理。时间已经是你的敌人，但你依然可以把它当做是朋友，相信时间的力量，每天如果都能保持学习持续进步，持续学习一年后我相信你怎么也能做一个UE demo了，找一个中小公司得到一份初级岗位我觉得是完全可行的。到那个阶段，你其实已经算是转行成功上岸了，你凭新的技能吃上饭了。如果能做到，这对于题主来说无疑是一个成就。以后就徐徐图之了。另一方面，题主现在30岁了想转行，那说明之前的行业没干出多少成就。既然之前已经如此糟糕了，那未来再差也不会差到哪里去了。因此心态好一点，只要自己有进步，达成自己的小目标，就已经是胜利了。</p>\n<p><br></p>\n<p data-pid=\"MHRL-BHD\"><b>你真的能做到吗？</b></p>\n<p data-pid=\"-pBD1v5g\">虽然前面说了勤能补拙，但这需要深厚的学习意志力和自律的能力，我深深的怀疑题主是否能做到。因此落实到实处执行阶段，我建议题主先不要去培训班，可以先去网络上自学一番。UE的网络学习资源已经很多了，这是我总结过的各种学习资源：<a href=\"https://zhuanlan.zhihu.com/p/245768949\" class=\"internal\">虚幻引擎学习资源汇总</a>。如果在学习过程中遇见问题，也欢迎去各大QQ群同大家交流，让别人给你打打气。先自学一个月验证一下自己的学习能力看看，如果能学得下去，那说明一切都还可商量。否则你也就是心血来潮说说而已，哪暖和哪里继续窝着去得了。</p>\n<p><br></p>\n<p data-pid=\"gIbloQRW\">我一直很坚信一句话：<b>如果想获得超过普通人普通的成绩，那就得付出超过普通人普通的努力，做到普通人做不到的事，否则你凭什么优秀。</b></p>\n<p data-pid=\"B8kFgHhc\">送给或许暂时有点迷茫的未来同路人。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/fjz13?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">大钊</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/549618917/answer/2718900483?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">60 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/299072614?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何有效学习虚幻引擎？</a><br><a href=\"http://www.zhihu.com/question/326205717?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">虚幻引擎应该怎么学?</a><br>\n","link":"http://www.zhihu.com/question/549618917/answer/2718900483?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何看待特斯拉即将取消超声波雷达，采用纯视觉方案？","date":"2022-10-14 07:10:22","description":"\n<p data-pid=\"rzdZfqKP\">两个核心观点：</p>\n<p data-pid=\"WejgNLx7\"><b>1. 特斯拉不是是目前唯一在坚持纯视觉方案的企业，纯视觉方案是被技术领域高度认可的未来技术趋势之一；</b></p>\n<p data-pid=\"HWZQLcNk\"><b>2. 特斯拉坚持纯视觉方案符合马斯克推崇的“第一性原则“，其核心是轻硬件，重算法；</b></p>\n<hr>\n<p data-pid=\"kvZFXver\">纯视觉方案是目前全球自动驾驶领域一个非常热门的研究方向，另一个非常成熟的参赛选手就是mobileye。Mobileye在2020年的CES上就已经展示了基于纯视觉的城市无干预自动驾驶。</p>\n<p data-pid=\"hK9VYuLt\">2021年北美和英国的华人汽车工程协会搞了一个自动驾驶方面的技术论坛，我也在里面听听。与会的在国内和美欧工作的自动驾驶研究人员的观点还是比较一致的，那就是从技术逻辑的角度来说纯视觉更可能是“正确的选择“，而激光雷达方案更多的是现有的技术能够拼凑出可用系统的现实选择。</p>\n<p data-pid=\"YDkog1SQ\">其实这有点像“三体”中章北海所在的时代面临的选择，到底是使用成熟的化学工质推进方案还是看起来连技术基础都有很多突破空间的无工质推进方案。</p>\n<p data-pid=\"iw0sL6rb\">那么，为什么会有这样的观点呢？</p>\n<p data-pid=\"EwyTsVtB\">因为这个观点的核心并不在于复杂的两者技术的解读，而在于这些技术背后的理论基础，那就是：</p>\n<p data-pid=\"z2xazRA-\"><b>视觉方案是轻单车硬件，重软件算法、云计算和大数据协作来实现识别的方案；</b></p>\n<p data-pid=\"ltGi1QOq\"><b>激光雷达方案则相反，重单车硬件系统，是靠硬件扫描出的海量高精度数据来实现识别的方案。</b></p>\n<p data-pid=\"wZSbhDnh\">这就是两者最大的区别，也是为什么特斯拉在一片反对声中必须坚持纯视觉方案的根本原因。我相信这也是马斯克所推崇的第一性原则相关：</p>\n<p data-pid=\"cVK6bDfi\"><b>“我在想存在一种好的思维框架。那是物理学的东西，你知道，有点儿像第一原理推理（first principles reasoning）。总体来讲，我认为存在将事情缩减至其根本实质……你必须能够把那些问题“煮沸”才能从里面找出那些最基本的东西。  - 马斯克“</b></p>\n<p data-pid=\"W__OsMBK\">马斯克使用这种方法实现了SpaceX火箭的成本降低到只有传统火箭公司十分之一甚至百分之一的费用。而自动驾驶领域坚持纯视觉在我看来也是如此。</p>\n<hr>\n<p data-pid=\"evvIwUjB\">新一代的智能自动驾驶如果未来需要普及，那么前提必然是低成本。因为在高端高价产品中应用然后逐渐降价，这是改良性创新技术的策略。而真正能够实现颠覆和技术壁垒的破坏性创新，其本质核心必然是低成本。</p>\n<p data-pid=\"s7J_meBx\">使用激光雷达和最大限度使用摄像头（甚至会减少传统雷达的维度）的本身逻辑是一致的，那就是传统的传感器的识别能力无法应对完整的自动驾驶。他们尝试解决的问题都是一个：识别。更直接的来说，就是要进行自动驾驶的策略响应，前提首先是要把真实的路况引入到数字世界之中。</p>\n<p data-pid=\"WVY2i3Sg\">传统雷达的识别过程本身就是一个依赖大量标定过程的概率论问题解析。一个最简单的例子是，一个人的雷达反射大小和一个可口可乐易拉罐是一样的。而且对高度方向上的解析极差，几乎可以认为是没有，也无法识别人的肢体尺寸位置。摄像头只是作为辅助识别。也就是说雷达告诉你前面有个东西，摄像头去识别这个东西可能是什么，然后确定车辆是否要做反应或者如何做反应。位置、距离等信息都来自于雷达，但是雷达的识别很差，可视化里面就是一些大小的点线，然后需要人工标定去识别这些可能是什么。摄像头当然也需要大量的人工标定。现在4D雷达对的这种情况有很大的改善，但是点的精细度还远远不够。</p>\n<p data-pid=\"qYgryupi\">激光雷达带来的识别能力是颠覆性的，以它超高精度的扫描能力将真实世界快速精确的复刻到数字世界里面，识别的难度也大大降低了，因为反射面基本就是物体真实的反射面。这听起来很完美，但是激光雷达高精度扫描的结果就是大量的数据，因为你首先要事无巨细的在数字世界真实重建显示，然后处理速度还要足够快以方便后续的识别与策略运用计算。那么最后其结果就是代价高昂的激光雷达+超级强大的处理芯片及匹配系统+本地化的策略运用。这套系统相对来说更加依赖本车的自身单车算力。所以使用这样系统的车辆必然需要巨额的硬件投入。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a497095486f3c3f12b82cb5e47575b86_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1143\" data-rawheight=\"646\" data-watermark=\"watermark\" data-original-src=\"v2-a497095486f3c3f12b82cb5e47575b86\" data-watermark-src=\"v2-84b6825829937c36514904c3a398233f\" data-private-watermark-src=\"v2-06ea6ef4ebcdb409ba2456c9a7bd2ae2\"></p>\n<p data-pid=\"_PvZFI7i\">有人认为视觉方案就是和现在一样，只是强化了一下摄像头的作用。但是这里面有３点本质上的不同：</p>\n<p data-pid=\"GI7ofRYW\">1－算法上贯彻的以视觉为主。</p>\n<p data-pid=\"wik_6kV-\">2－更加强大的摄像系统（但是成本依然远低于激光雷达方案）</p>\n<p data-pid=\"woGgusqM\">3－这才是最重要的一点：机器学习和云计算。简单的摄像头背后的云端算法才是核心。</p>\n<p data-pid=\"vmLrLasS\">前两者听起来比较好理解，而且大家直接看Mobileye的测试视频就能惊叹与视觉方案目前能够做到的精度和效果。但是云计算是这些企业在宣传中会隐藏的，但是这才是他们的杀手锏。</p>\n<p data-pid=\"1grwNu45\">在Mobileye的２０２０年CES的基于视觉无人驾驶视频中，测试效果就已经非常惊艳的，而且是从市区到高速公路再到市区的复杂路况纯视觉无干预。但是里面有一个拐弯，Mobileye的技术人员再后来介绍，事实上如果在那条道路上也有一辆搭载了Mobileye视觉无论驾驶系统车辆的存在，那么在当前道路上根本看不到十字路口右侧道路来车的测试车就会提前预知看不到的道路上的车辆情况。而且这个技术已经应用了。</p>\n<p data-pid=\"coE9KPaA\">这才是视觉方案真正可怕的地方，它的价值在云端，而不是单车算力。</p>\n<p data-pid=\"FfDGQ7mP\">Mobileye开发出来的算法，可以将视觉方案看到的情况的识别结果，纳入到一个函数之中，然后将这个函数实时的分享到云端，然后通过云端交互对同样区域的车辆提供充足的信息。也就是说，在这个路段跑过的车辆越多，当前和你一起在跑的车越多，你就可以提前甚至实时获取这个路段的所有最新信息。</p>\n<p data-pid=\"KQHvLznH\">单车摄像头的识别当然比不上激光雷达，但是视觉方案配合识别大幅压缩后的数据，通过机器学习和云计算辅助单车的识别效果，才是视觉方案认为在未来能够PK激光雷达方案的全部实力。</p>\n<hr>\n<p data-pid=\"FMMaZHVT\">我们简化一下描述：</p>\n<h2>激光雷达方案强单车硬件和算力，而视觉方案的单车硬件投入低，核心策略基于云端，这样就可以实现车辆的硬件购买成本低，而自动驾驶功能可以通过订阅等灵活方式购买，因为主要的消耗是在云端。破坏性创新，前提必然是便宜。</h2>\n<p data-pid=\"-N28CvUs\">激光雷达当然也可以通过云计算来提升，但是大部分是策略优化，依赖度不高，一方面的原因是处理激光雷达数据的投入已经很大了。</p>\n<p data-pid=\"vdJMcNgG\">这就是为什么马斯克会贬低激光雷达方案，并坚持纯视觉方案。</p>\n<p data-pid=\"eVH1cf_z\">所以在２０２１年中美日欧华人汽车工程协会全球联线座谈的无人驾驶专场，所有专家一致认为，无人驾驶的未来是视觉的。</p>\n<hr>\n<p data-pid=\"uaMe_cCC\"><b>但是，（转折来了），激光雷达方案依然有其生存空间，而且在中国，激光雷达更是可能在可预见的未来成为唯一可行的方案。</b></p>\n<p data-pid=\"g_7tUjyP\">WHY?</p>\n<p data-pid=\"2huidBzF\">因为基于视觉的方案的真正屠龙技是云端互联和大量的数据交互建模，而这种包含实际道路和真实人流视觉识别结果的数据通过企业的内部算法上传到私有企业管理的云端进行运算、存储、识别和分发，或许在美国和欧洲国家可以，但是在中国是万万不可能完全自由放开的。Mobileye以及所有视觉方案算法企业提出的所谓“函数”的目的，其本身也就是希望淡化系统需要将道路及其实时交通工具和人流信息上传的敏感度，将其弱化为“数学函数”。但是，这种话术或许在２０２０年之前还行得通，随着特斯拉地图信息问题、滴滴美国上市事件以及近期的俄罗斯－乌克兰冲突的大背景下，这种全国性质的方案基本上不可能通过监管部门的审查，而且还有一个数据出境监管的问题。</p>\n<p data-pid=\"gpgR5ZBx\">Mobileye目前也在尝试通过和很多中国本土主机厂合作来绕过这个限制，第一波交流的时候对于算法和服务器的策略很强势，所以基本上全崩了。然后现在和个别本土企业已经在做项目了，据说开放度还可以，但是毕竟是国外系统，未来会发生什么？谁也不知道。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/JackyQ?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">JackyQ</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/558212074/answer/2708994833?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">229 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/558708538?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎么看待特斯拉官宣移除超声波雷达？</a><br><a href=\"http://www.zhihu.com/question/559877302?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎么看待特斯拉推行纯视觉方案，放弃超声波雷达？</a><br>\n","link":"http://www.zhihu.com/question/558212074/answer/2708994833?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价新能源汽车的换电模式？以及如何看待其未来的发展前景？","date":"2022-10-14 07:07:36","description":"\n<p data-pid=\"PYGLDVgo\">       作为一名整车研发工程师，其实我在相当长一段时间内对于新能源汽车的换电模式是非常不理解，也非常不看好的。现在我能更客观的来看待新能源汽车换电模式，下面向大家分享一下我的理解。</p>\n<p data-pid=\"qRS4KyJ5\"> 目录：</p>\n<ol>\n<li data-pid=\"gWo9vdYo\">汽车的基本要求分析</li>\n<li data-pid=\"7qWPeNCv\">用户的生活习惯分析</li>\n<li data-pid=\"TAyEYKKc\">换电的应用场景分析</li>\n</ol>\n<h3><b>一、汽车的基本要求是什么？</b></h3>\n<p data-pid=\"Z3pqC6RF\">       为了能更好的说明这个问题，我先和大家一起把视角拉到圆点问题——“汽车是什么？”。这其实是一个简单到几乎被所有人忽略掉的一个问题，对于整车研发工程师来说更是如此。</p>\n<p data-pid=\"9NmxpYkU\">      那汽车到底是什么呢？我想大家心里都应该有了答案：“汽车是为了解决把人或物从A点运送到B点的这个需求的工具”。简单一点就是“<b>汽车是一种移动出行工具</b>”。</p>\n<p><img src=\"https://pica.zhimg.com/v2-f0ef6e3b57091d5e877b4e73ffc0e49e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"943\" data-rawheight=\"505\" data-watermark=\"watermark\" data-original-src=\"v2-f0ef6e3b57091d5e877b4e73ffc0e49e\" data-watermark-src=\"v2-a5e5115ad9eb232caa8d94946de834fa\" data-private-watermark-src=\"v2-44dffa9839fe5c3d5c7236f923693c61\"></p>\n<p data-pid=\"aZx5jPPq\">       如果汽车是一种移动出行工具，最基本的要求是什么呢？既然汽车是一种替代人的一种移动出行工具，那应该具备的基本素质，我理解为：<b>跑的快--&gt;跑的远--&gt;装的下--&gt;拉的动--&gt;... ...</b> ,不过在这几条之前还有一个更重要的要求：<b><i>买的起</i></b>。</p>\n<p><img src=\"https://pica.zhimg.com/v2-79abb33e1d182eb587e49eee5c5b0073_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"247\" data-watermark=\"watermark\" data-original-src=\"v2-79abb33e1d182eb587e49eee5c5b0073\" data-watermark-src=\"v2-84e808b6e177651218f942ce64a895bd\" data-private-watermark-src=\"v2-f965cd6a77f9c34f30bb1ebf0bb2cee0\"></p>\n<p data-pid=\"WD3p14Q4\">       相对于燃油车来说，因驱动能源形式的变化，让汽车特性（尤其是——<i><b>买的起&amp;跑的远</b></i>）也发生了变化，但是汽车作为移动出行的本质并没有变化。所以，只有解决了这些问题才能更好的满足用户的基本需求。</p>\n<p data-pid=\"ZckTjoYh\">      以60kWh磷酸铁锂电池+200kW RWD电机为基础，对比2.0T+6AT变速箱（55L油箱）的汽车（其他系统一样）：</p>\n<p data-pid=\"BrQkJt9k\">      成本对比分析：纯电动汽车成本至少高于燃油车约<b><i>2.5万</i></b>；</p>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody>\n<tr>\n<th></th>\n<th>BEV</th>\n<th>ICE</th>\n</tr>\n<tr>\n<td>动力系统成本预估</td>\n<td>5万</td>\n<td>2.5万</td>\n</tr>\n<tr>\n<td>其他系统预估</td>\n<td>5万</td>\n<td>5万</td>\n</tr>\n</tbody></table>\n<p data-pid=\"ru_cV-Uz\">续航里程对比分析，燃油车满油的<b><i>680公里</i></b>续航远高于纯电的<b><i>500公里</i></b>。</p>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody>\n<tr>\n<th></th>\n<th>BEV</th>\n<th>ICE</th>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>分析基础</td>\n<td>按照12kWh/百公里电耗，60kWh全部为可用；</td>\n<td>55L油全部可用，油耗为8L/百公里</td>\n</tr>\n</tbody></table>\n<p data-pid=\"BpkteA9S\">    从上面的分析我们可以看到除了成本以为，更让用户担心的还是续航里程不足的问题，而且上面的分析基础中百公里电耗在12kWh绝对是行业顶尖水平。那如何才能解决用户的“里程焦虑”呢？答案肯定是更好的补能体验。</p>\n<p data-pid=\"53CJU_5T\"><b>那怎么样才能为用户提供更好的补能体验呢？</b></p>\n<h3>二、用户的行为习惯分析</h3>\n<p data-pid=\"32g47AuY\">       我觉得最好的补能体验应该是不让补能成为用户的思想负担的一种类似于吃饭睡觉一样的最自然的补能方式。如何才能做到这一步，我们还是要来看看用户的日常行为习惯。</p>\n<a href=\"https://www.zhihu.com/question/268391745/answer/2628534576\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-28ac1eaa3db4b9ca7d1a44ac26ebdc1a_qhd.jpg?source=b1748391\" data-image-width=\"1940\" data-image-height=\"1125\" class=\"internal\">在纯电动车电能补充方式上，换电模式和充电模式哪种更合理？</a><p data-pid=\"CwmFtTYb\">        我们尝试回想一下驾车出行一般不会突破：日常通勤、短途出行、长途出行三类。其中一般情况下一天24小时中日常通勤和短途出行开车的时间会在4个小时以内，而有差不多20个小时的时间车子是停在停车场上，场景比较少的长途出行可能会出现一天行车时间超过10个小时甚至更多。另外，日常通勤和短途出行一般情况下是以家为圆点到公司、商场、公园、景点等目的地的这样一个过程。</p>\n<p data-pid=\"OvTQzUyU\"><b>1、 针对日常通勤以及短途出行的场景：</b>由于每天大多数时间车子是停在停车场上且时间较久，如果家和目的地的停车区域有非常方便的补能方式就算是7kW的交流慢充的体验也比加油要更好（停车≈补能，免去加油站的过程）。</p>\n<p data-pid=\"e8ovZ6Ls\"><b>2、针对高速长途出行的场景：</b>由于时间对于用户来说更加重要，这种情况下最好的补能体验就是快。</p>\n<p data-pid=\"4Rln1wtB\"><b> 3、另外，特殊场景</b>：由于我们没办法做到生活一直都是非常规律，所以偶尔会发生家充和目的地充（慢充）无法覆盖到的场景（可能有10%亦或是20%的概率），这种时候也需要快速应急补能来解决。</p>\n<h3>三、换电应用场景分析 </h3>\n<p data-pid=\"V_p4etw1\">        其实针对用户补能需求，有的公司（如特斯拉、小鹏等）开发大功率超充+交流慢充技术来解决用户快速补能体验，有的公司（蔚来等）开发大功率快充+换电+小直流慢充技术来解决用户补能问题，有的公司（如理想、塞力斯）开发增程技术+交流慢充技术来解决用户的补能问题。</p>\n<p data-pid=\"5zC2PW6-\">        根据用户开车行为习惯分析，慢充基本能够覆盖90%的补能需求。针对特殊场景和长途出行的补能场景，由于对补能速度要求是没有上限的，<b>所以5分钟换电的补能方式要比大功率快充更容易满足用户的心理需求。</b></p>\n<p data-pid=\"mSC5TqMs\">        但是由于各个地方的基建条件不同以及大功率超充和换电技术对国家电网都有一定的影响，如何为用户提供更好的补能体验也需要结合地方的基建情况因地制宜的制订策略以尽可能满足用户的补能需求。</p>\n<p data-pid=\"gSBzEWwo\"><b>写在最后</b></p>\n<p data-pid=\"qxWhJODa\">虽然续航和补能是眼下好像是电动车发展的一个瓶颈，但是实际上补能基础设施一旦能够及时的跟上用户的补能需求，会加速用户对于纯电动汽车的接收度。而且补能基础设施一点完善，纯电动汽车对于one charge 续航的要求也会降低，还能促进电动车成本的降低，毕竟每天能够在家楼下充电的体验还是远好于去加油站加油的，不仅仅是价格上方便性更加重要。</p>\n<p data-pid=\"3jT06Po5\">      另外，一般纯电动汽车的成本做到足够有竞争力，增程汽车的竞争力就会大大削弱，毕竟一周充一次电就能满足日常通勤需求和每天都充电比体验还是好太多了。那些还在开发增程汽车的的老板们，纯电车型排上日程了没。</p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jeff-89-20?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">杰夫戈</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/411769140/answer/2702210121?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">120 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/558347357?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新能源汽车若实行“换电为主，充电为辅”的方式，如何实施将更能普及？</a><br><a href=\"http://www.zhihu.com/question/525506347?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你对新能源车换电模式有何了解？其应用规模如何？</a><br>\n","link":"http://www.zhihu.com/question/411769140/answer/2702210121?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"为什么毫米波雷达无法识别静态物体？","date":"2022-10-14 07:07:18","description":"\n<p data-pid=\"EPd_AoBD\">一般来说，现在智能驾驶主要的中高速检测障碍物的手段就是<b>毫米波雷达+摄像头</b>的方案。</p>\n<p data-pid=\"-gxNSqiC\"><b>毫米波雷达的工作原理就是通过发射无线电信号（毫米波段，30-300GHZ）</b>，再将反射的零散信号收回，来探测感知周围物体，通过算法（阈值去掉噪声值留下信号能量峰值）得到反射点的信息，再得到汽车和其他物体之间的相对距离、相对速度、角度、运动方向等。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8f82d8d1d3d9e149ad07806c382470b9_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"712\" data-rawheight=\"382\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Vc8M3qyU\">由于毫米波雷达的穿透性较好，可以轻松穿透塑料，所以常安装在汽车的前保险杠处，塑料板的里面。</p>\n<p data-pid=\"D2T7eh16\"><b>毫米波的最大优点就是无视天气，穿透雾气、烟尘的能力强，受到环境因素影响较小，可以保障在日常情况下的使用。</b></p>\n<p data-pid=\"uCxcI8uG\">毫米波雷达早期为24GHZ，探测距离短，精度低，探测距离大概50米到100米，精度大概是40-70CM的分辨率。而最近两年推出的77GHZ的探测距离远，能达到200米以上，精度相对较高，大概是4-10CM分辨率。但因为成本较高，还是主要用在高端车型上，如果要达到更好的辅助驾驶级别，一般至少一个<a href=\"https://www.zhihu.com/search?q=77GHZ%E6%AF%AB%E7%B1%B3%E6%B3%A2%E9%9B%B7%E8%BE%BE&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2235733975%7D\" class=\"internal\">77GHZ毫米波雷达</a>（车头）搭配多个24GHZ毫米波雷达（车侧）来使用。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5a62029f99053f37c63a6678a0d0fc7a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"662\" data-rawheight=\"289\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"bEtlt_aI\">毫米波雷达虽然成本较激光雷达低，工艺也成熟，元器件也小，但是它也有着<b>致命的缺点，那就是分辨率低，无法清晰辨别较小的物体，且对金属极为敏感。（一个不规则小块金属可能识别成一个大表面积的大块金属。）</b></p>\n<p data-pid=\"iga45nSj\">假设10CM一个反射点，即便是77GHZ的毫米波雷达动态扫描到车前方的人体侧面，很有可能也就得到十几个点到二十几个点，如果行人对于毫米波雷达还是侧面的运动体态，那可能接受过来的信号就十来个点，关键这些点旁边还有干扰物，比如行人从一棵树旁边经过，行人拖着个大箱子，要从这一堆稀疏的点上分析出这是个人还是个其他什么玩意，要是人的肉眼，肯定是看不出来的。</p>\n<p data-pid=\"UXTgyZVX\">如果要更清楚辨别较小物体，雷达的探测阈值需要设低，但毫米波雷达又对金属敏感度太高，调低阈值噪点增多，这样的结果就是会有越来越多“鬼影”的出现，会出现众多的虚报物体。你可以理解为一个超级近视的人取下了眼镜，想要分辨一个远处的闪闪发光的小物体，他越努力看，就越会看到四周到处都是晃动的影子和物体，而且这些看上去的物体很有可能比实际体积要大上许多倍。那么哪怕前面啥障碍物都没有，他都不一定敢往前走。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e9b1834d87bdf402a4e7781ce832a75c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"667\" data-rawheight=\"588\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"awPw0Vte\">所以毫米波雷达分辨大型物体（前方车辆），抗天气干扰能力一流，但你指望这个精度几厘米级到几十厘米的雷达能够准确分清楚高速行驶车辆的前面是个啥玩意，肯定是不行的。因为它的一惊一乍，一路上动不动给你虚报，那么车都不用开了，就不停急刹着玩就好了。</p>\n<p data-pid=\"EARb8flY\">为了保障毫米波雷达的正常使用，<b>毫米波雷达就会对静态物体进行“杂波滤除”</b>（因为在马路上行驶，静态物体太多了，金属物也多，如交通标识，龙门架都会造成干扰）。如果不设定无视这些检测到的静态“干扰物”，那么在路上，车辆就会变得寸步难行，不停地报警和刹车将会变成常态。</p>\n<p data-pid=\"9Bta3ZWv\">鉴于毫米波雷达的特性，现在<b>AEB里面，越来越多的企业把毫米波雷达的权重给调低了</b>，要判断前方有没有障碍物，是个什么障碍物，还是得高清摄像头点头才行。</p>\n<p data-pid=\"61BVI1r-\"><b>汽车摄像头是最接近人类视觉的车辆感知外界的手段了。</b></p>\n<p data-pid=\"r402zFQ4\">车载摄像头一般都拥有较广的垂直视场角，较高的分辨率，还能提供颜色和图形的信息。这就可以达到驾驶辅助中的行人、自行车、机动车等的识别。也可以分辨出路标，如路上的地面标线，路侧的限速标识。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-09150238229cd1e4e2bd63f9747ee89c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"548\" data-rawheight=\"376\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"O9T7KjPN\">如果采用的车载立体摄像头（如双目摄像头），还能计算出汽车和其他物体的相对距离，相对角度。（所以说<a href=\"https://www.zhihu.com/search?q=%E9%A9%AC%E6%96%AF%E5%85%8B&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2235733975%7D\" class=\"internal\">马斯克</a>说可以自动驾驶不用毫米波雷达，可以全部用摄像头来代替。）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ea0df3941cade6a2446844d6cbb89d49_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"209\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"qZJk1FBd\">但如果要<a href=\"https://www.zhihu.com/search?q=%E7%9B%B2%E7%82%B9%E6%A3%80%E6%B5%8B&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2235733975%7D\" class=\"internal\">盲点检测</a>，全景泊车、泊车辅助，就需要在车身上布置多个摄像头，达到车周的覆盖空间无死角。</p>\n<p data-pid=\"CNkRIFFd\"><b>车载摄像头一般都是由CMOS镜头，芯片，内存，外壳组成。</b>原理就是将拍摄到的图像转为<a href=\"https://www.zhihu.com/search?q=%E4%BA%8C%E7%BB%B4%E6%95%B0%E6%8D%AE&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2235733975%7D\" class=\"internal\">二维数据</a>，进行图像匹配识别，分辨出拍到的物体是行人、汽车、自行车、电动车、交通标识等。</p>\n<p data-pid=\"Hr75542g\">现在的摄像头排布，基本上都会采用前视，侧视，后视，内视的排布，包括广角镜头，长焦镜头，数量从5个到10个不等。</p>\n<p data-pid=\"fDRMBtb2\"><b>车载摄像头的优点就是分辨率高，采集信息丰富，最符合人类视觉的<a href=\"https://www.zhihu.com/search?q=%E8%AF%AD%E4%B9%89%E4%BF%A1%E6%81%AF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2235733975%7D\" class=\"internal\">语义信息</a>，成本也低。</b></p>\n<p data-pid=\"FnBujJQ_\">但<b>缺点也很明显，因为是靠光的反射来进行拍摄，就会受光照影响较大</b>，黑夜里基本无法使用。且受环境天气影响较大，雨雪、大雾，灰尘、昆虫等都会影响到摄像头，导致它无法全天候全地形工作。另一个缺点，就是只能采集平面信息，无法采集深度信息，三维立体感不强，且拍照边缘容易有失真现象，即便后期进行算法修正，也有可能造成图形的误判。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a90280573aa3f894a598495dcd945de8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"535\" data-rawheight=\"469\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"NjbfnPHx\">所以，毫米波雷达的分辨率低，车载摄像头又受到光照影响和无法构建3D图形，当高清摄像头认为前方静态事故中的变形车辆不属于车辆，而毫米波雷达又过滤掉静态金属物体。最后导致开启了智能驾驶的车完全不顾前方的事故车，速度完全不减地撞上去，也真的纯属正常。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-75859518546fb05d63e8631a562082aa_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"655\" data-rawheight=\"438\" data-watermark=\"watermark\" data-original-src=\"v2-75859518546fb05d63e8631a562082aa\" data-watermark-src=\"v2-8dcc9be0da972b78a85f626ec9eb1ddf\" data-private-watermark-src=\"v2-b27f45839b22b420a10ab2593eb5e298\"></p>\n<p data-pid=\"KInzpN3f\">所以，这就引申出来了另一个感知设备，一个分辨率高，不受光照影响且能构造清晰3D图形的探测器，那就是现在比较热门的激光雷达。</p>\n<p data-pid=\"eFRf0I-h\">激光雷达鉴于篇幅，就后面再聊了。</p>\n<p data-pid=\"2YqJ0x1W\">（图片来源网络，侵删！）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/308426613/answer/2702035684?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">68 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/350399729?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">毫米波雷达怎么区分人和运动的物体，怎样过滤杂波？</a><br><a href=\"http://www.zhihu.com/question/418565651?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">毫米波雷达对于静止目标的检测效果很不好吗？</a><br>\n","link":"http://www.zhihu.com/question/308426613/answer/2702035684?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何加快汽车与互联网、通信、大数据、人工智能、可再生能源等技术的跨界融合？需要解决哪些阻碍？","date":"2022-10-14 07:07:00","description":"\n<p data-pid=\"OfJLETD2\">这个题目涉及到的内容太广袤了，随便哪一个下面都是一个繁杂的，需要大量资金和科研的重要领域，其中包括的难点不知凡几。</p>\n<p data-pid=\"q6WNkKyB\">抛砖引玉，浅聊下智能汽车和大数据/网络之间的一些关联吧。</p>\n<p data-pid=\"5VgiBkeT\">一架可以坐500-600人的双层<b>A380空中客车</b>以自动飞行模式从伦敦飞往纽约，全程只需要<b>2.5MB的数据</b>要处理。而一辆<b>L4级别</b>的自动驾驶车辆，仅处理每天的日常任务，可能就需要处理<b>45TB的数据，</b>是空客380的不知道多少倍。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ee9755296d022d0b43f83880fae3ee05_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1100\" data-rawheight=\"558\" data-watermark=\"watermark\" data-original-src=\"v2-ee9755296d022d0b43f83880fae3ee05\" data-watermark-src=\"v2-6bdf072e53fd9d0f6ddeca5cca4cf639\" data-private-watermark-src=\"v2-62915adc0466db89d7b98ffb37c2cfbc\"></p>\n<p data-pid=\"QmeB4Xxl\">人在驾驶车辆，一般做出决策是需要先<b>感知</b>，再<b>思考</b>，再<b>决定行动</b>的一个过程。</p>\n<p data-pid=\"w6pxWmG0\">而自动驾驶也是一样，一辆车通过多个摄像头（含红外线），毫米波雷达，激光雷达，超声波传感器，<a href=\"https://www.zhihu.com/search?q=%E5%A3%B0%E9%9F%B3%E4%BC%A0%E6%84%9F%E5%99%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2230352110%7D\" class=\"internal\">声音传感器</a>，GPS接受数据，进行<a href=\"https://www.zhihu.com/search?q=%E6%84%9F%E7%9F%A5%E6%8A%80%E6%9C%AF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2230352110%7D\" class=\"internal\">感知技术</a>的处理，全方位的传感器融合探测周围的环境，同时通过V2X（车辆对周围交通系统进行通讯）、<a href=\"https://www.zhihu.com/search?q=%E9%AB%98%E7%B2%BE%E5%9C%B0%E5%9B%BE&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2230352110%7D\" class=\"internal\">高精地图</a>了解到更广阔的外界环境，再感知之后进行一系列的思考，进行路径规划，交通标志、信号灯识别，紧急车辆识别等，最后决定行动，如等待，加速，转弯，避障，避撞，穿越众多移动物体等。</p>\n<p><img src=\"https://pica.zhimg.com/v2-5e5b0f8f630b6d6a99ecbd45b6fecfa6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"800\" data-watermark=\"watermark\" data-original-src=\"v2-5e5b0f8f630b6d6a99ecbd45b6fecfa6\" data-watermark-src=\"v2-f08c0b2a04d996069059a79ca125d0de\" data-private-watermark-src=\"v2-2a3f4af5c2cbec713c4e2c5683528a7b\"></p>\n<p data-pid=\"ImkNI9hk\">这整个过程中，从各个<b>感知</b>设备中接受的图像、视频、点云，整个数据量可谓是海量，即便经过感知技术的算法进行处理后，剩余的数据量依旧是巨大无比，而<b>思考并学习</b>所需要的计算量也是可想而知。</p>\n<p data-pid=\"BMMLOevc\"><b>如果存储和计算数据全部由车辆本身承担，就意味着必须要有巨大的成本投入。</b></p>\n<p data-pid=\"_PSdvA9N\"><b>比如<a href=\"https://www.zhihu.com/search?q=%E6%84%9F%E7%9F%A5%E6%95%B0%E6%8D%AE&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2230352110%7D\" class=\"internal\">感知数据</a>的存储</b>，即便是10TB级别的小型存储器也撑不了多久，总不能前一个小时的数据就被后面的感知数据给覆盖了，永远只顾当下吧。而现在驾驶车辆的<a href=\"https://www.zhihu.com/search?q=%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%B3%BB%E7%BB%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2230352110%7D\" class=\"internal\">人工智能系统</a>能够记住，并学习以前的经验，是需要这些丰富的数据留存下来的。只有在大量数据的培育下，才能让人工智能进行深度学习，有效提高AI智能驾驶的能力。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d8d27905182cfaf42185141c8456092f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1237\" data-rawheight=\"780\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"JUqiMFjX\"><b>比如感知数据的处理</b>，思考到做出判断，必须以毫秒来算。因为按照高速120公里/小时的速度，就是33米每秒。则10MS的时间，车辆移动距离就是33CM。如果单凭<a href=\"https://www.zhihu.com/search?q=%E8%BD%A6%E8%BD%BD%E5%A4%84%E7%90%86%E5%99%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2230352110%7D\" class=\"internal\">车载处理器</a>，毫秒级快速的反馈，从接受数据，到思考，再到做出决策操控车辆，必须要求该处理器的处理大数据的能力非常优异才行。</p>\n<p data-pid=\"LeJkF3UT\">我们现在用的人工智能的学习，基本是采用的自下而上的方法，使用<b>深度神经网络（DNN）或<a href=\"https://www.zhihu.com/search?q=%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2230352110%7D\" class=\"internal\">卷积神经网络</a>（CNN）</b>进行深度学习。（深度学习：一类机器学习算法，使用多层从原始输入中逐步提取更高层次的特征。）</p>\n<p data-pid=\"rRUwjccY\">神经网络是一种模拟大脑认知的机理，解决各种机器学习的应用任务，从海量的数据中进行深度学习，需要的<b>算力十分惊人</b>。所以这一技术一直到2006年之后GPU性能飞速提升，才有条件被推广和应用。</p>\n<p data-pid=\"9tFcch-f\"><b>比如芯片的升级迭代</b>，汽车的使用寿命长达数十年，而车载的处理芯片是不可能伴随车辆终身的，必须要定期更换速度更快，更稳定的芯片，才能保障车辆的自动驾驶功能完好。</p>\n<p data-pid=\"skEVaQJs\">除了涉及到人和外界交互的智能驾驶外，还有人和汽车交互的智能座舱，一样是会产生海量数据和需要高算力的存在。</p>\n<p data-pid=\"X28BJOdM\"><b>综合来看</b>，如果高存储和计算力惊人的芯片都装配在车辆上，且要按期更换更好的芯片（因为车辆的使用寿命一般都是10-15年），那么给车辆的成本压力是非常巨大的。而且对于车辆来说，装载一个数百瓦乃至上千瓦功率的“<b>小超算”</b>或者占据大体积的<b>“大硬盘”</b>，也会给车辆带来续航减低、空间减小的实际问题，更不要说一边思考做出决策，一边还要深度学习，需要的算力和存储就对汽车更苛刻了。</p>\n<p data-pid=\"iCwtuldA\">所以，基本智能汽车未来的路都是走的车云互联，只有高速的网络互联才能保障大数据、高算力充分发挥作用，并有力支撑起未来智能汽车的安全和高效。</p>\n<p data-pid=\"dsXx_HIc\">说到网络互联，就不得不说5G的出现和发展，其高带宽、低延时、强可靠性真正使得大数据处理和云计算能应用在汽车的自动驾驶上面来。</p>\n<p data-pid=\"usa6Fx_l\">而这方面，我国是有着极大优势的，目前国内5G的建设速度和覆盖率是全球第一位。我国现在是全球4G覆盖道路交通最全的国家，基本达到了100%，而英国 4G覆盖率，在A级、B级公路上的覆盖率也才54%，而这在欧美国家中，还算比例高的。</p>\n<p data-pid=\"xGp3cYvJ\"><b>为什么5G可以使用<a href=\"https://www.zhihu.com/search?q=%E4%BA%91%E7%AB%AF%E6%8A%80%E6%9C%AF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2230352110%7D\" class=\"internal\">云端技术</a>达到车辆自动驾驶。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b1a2eabde48ece53ee0ad12f01bc8f98_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"427\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"DorJRSha\"><b>一个是高速</b>，可以达到1000MB/S，一个小时传递的数据可以达到3.5TB。甚至在必要的时候，可以提升到这个数字的<a href=\"https://www.zhihu.com/search?q=%E5%8D%81%E5%80%8D%E4%BC%A0%E8%BE%93%E9%80%9F%E5%BA%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2230352110%7D\" class=\"internal\">十倍传输速度</a>（理论值）。</p>\n<p data-pid=\"_FQKD_Qu\"><b>一个是低延迟</b>，3G/4G的延迟是数十毫秒来计算的，4G延时是40ms-100ms，而120公里/小时的车速，100毫秒的都足够一辆高速上行驶的汽车开出三米多了。而5G则远远低于4G延时，甚至可以达到0.1毫秒延迟的级别。（低延迟也是远程手术得以开展的重要原因。）</p>\n<p data-pid=\"bX8Sb8_g\">上述两个特性，可以使得车辆的感知数据无缝链接到云端，并由云端的强大处理器来进行保存和运算（学习），并以超低延迟把思考而来的决策传递到车端，使得云端操控汽车进行自动驾驶成为了可能。</p>\n<p data-pid=\"vuH5ovJ1\">此外，<b>5G还拥有更多的频谱和更高的频率</b>，在30GHZ和300GHZ之间的频带，意味着5G网络可以同时处理许多高需求的应用，同时容纳更多的设备（车辆）。</p>\n<p data-pid=\"HnOmaBkM\">所以，利用大数据的云端传输和后台计算，再发送给行驶中的汽车，在5G进行覆盖后，是完全可行的一条道路，可以有效解决自动驾驶的硬件成本过高的问题。</p>\n<p data-pid=\"o15VGm_D\">目前，汽车的智能化发展越来越快，云计算也被纳入了智能驾驶的体系中，基本每家车企都会和云计算企业进行合作。</p>\n<p data-pid=\"y9xBkBX0\">比如通用、大众、丰田、本田、捷豹路虎和<a href=\"https://www.zhihu.com/search?q=%E5%BE%AE%E8%BD%AF%E4%BA%91&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2230352110%7D\" class=\"internal\">微软云</a>进行合作；国内的上汽乘用车和一汽，还有小鹏是和阿里云合作；广汽、长安、长城、蔚来和腾讯云合作，比亚迪、<a href=\"https://www.zhihu.com/search?q=%E5%A8%81%E9%A9%AC&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2230352110%7D\" class=\"internal\">威马</a>和百度云合作。东风本田、广汽三菱、江淮和<a href=\"https://www.zhihu.com/search?q=%E5%8D%8E%E4%B8%BA%E4%BA%91&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2230352110%7D\" class=\"internal\">华为云</a>合作。</p>\n<p data-pid=\"XqpzkgWc\"><b>国内的自动驾驶云平台，也基本是四分天下，“BATH”,百度云、阿里云、腾讯云、华为云。</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-de93b627f8c1c0c1bf239d44ea61ee0e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1071\" data-rawheight=\"495\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"QZSV8oZN\">以后自动驾驶的未来，随着网络的发展，5G的逐渐成熟，2030年的<b>6G</b>进入，<b>搭建的地面无线+卫星全连接覆盖网络，让世界每一处都能在高速信号的覆盖下</b>，彻底让车端只用来感知，不需要繁杂的软件运算和搭载昂贵的硬件，云计算成为主流，在降低智能驾驶车辆成本的同时，大幅提高智能驾驶的安全性和智能座舱的功能性。</p>\n<p data-pid=\"jgVARgXB\">（图片来源网络，侵删！）</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/435131276/answer/2699531032?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">11 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/490442974?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">技术跨界融合时代，人工智能、物联网、云计算等跨界技术企业如何与汽车企业技术融合，共建新型产业生态圈？</a><br><a href=\"http://www.zhihu.com/question/28868232?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">目前全球范围内，属于“汽车+互联网”这种交叉产业的研究方向和相关产品都是什么？</a><br>\n","link":"http://www.zhihu.com/question/435131276/answer/2699531032?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"React 为什么重新渲染","date":"2022-09-06 08:29:00","description":"\n<p>更新（重新渲染）是 React 的重要特性 —— 当用户与应用交互的时候，React 需要重新渲染、更新 UI，以响应用户的输入。但是，React 为什么会重新渲染呢？如果不知道 React 为什么会重新渲染，我们如何才能避免额外的重新渲染呢？</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/186432/20/28325/37613/631725bbEf2ff226e/66b99021df66578b.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/react-re-renders-101/\">https://blog.skk.moe/post/react-re-renders-101/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/react-re-renders-101/"},{"title":"为什么你不应该在 React 中直接使用 useEffect 从 API 获取数据","date":"2022-08-19 08:53:00","description":"\n<p>React 是一个由 Facebook 开源的、可以在任意平台上构建 UI 的 JavaScript 库。在 React 中，一个常见的 Pattern 是使用 <code>useEffect</code> 搭配 <code>useState</code> 发送请求、将状态从 API（React 外部）同步到 React 内部、用于渲染 UI，这篇文章恰恰在向你介绍为什么你不应该直接这么做。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/180676/37/27394/27265/62ff57f2E600b3725/cff75c5fca39bbcc.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/\">https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/"},{"title":"NPM 自动更新版本号","date":"2022-08-04 05:00:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>ChenYFan 大佬的文章：<a href=\"https://blog.cyfan.top/p/d3c51290.html\">SpeedUp!使用黑科技为你的网站提速</a> 有提到过将 Hexo 博客的全部静态文件上传至 NPM 达到加速效果。</p>\n<p>但是 NPM 版本号不能重复，而且为了精准命中缓存和防止边缘 <code>@latest</code> 缓存过长，就必须指定版本号。</p>\n<p>本人在 <a href=\"https://blog.yfun.top/posts/2876015612/\">我的图床解决方案</a> 一文中使用的方法是 <code>npm version patch</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804133426.png\"></p>\n<p>但这个方法也有一些弊端，比如 <code>patch</code> 只会更新 <code>z</code> 位数的版本号，而且并不会上传至仓库，很可能会出现版本号冲突导致上传失败。这就是为什么最后还需要重新推送 Git 提交。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%95%E8%AF%95%E7%9C%8B\" class=\"headerlink\" title=\"试试看\"></a>试试看</h2>\n<p>NPM 版本号遵循 <code>semver</code> 规范，格式为 <code>major.minor.patch</code>。</p>\n<p>为了在获取最新版本号的时候不发生混乱，我选择先获取最新的版本号。</p>\n<blockquote><p>记得把 <code>cky-blog-static</code> 改成自己的项目名。</p></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>获取到最新版本号后，就可以对版本号进行分析。</p>\n<p>以 <code>1.4.7-b541af2ea284a39da0bbf63b88fdb65c</code> 为例，先按 <code>major.minor.patch</code> 分离。当然，也需要考虑版本号后还有 <code>build metadata</code> 的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\"><span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure><p><del>为了版本号好看些</del>，可以通过判断实现满十进一。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位小于 9，直接 +1</span></span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">} <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位大于等于 9，y 位小于 9，y+1, z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\"><span class=\"comment\">// z 大于等于 9，y 大于等于 9，x+1,y=0,z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>最后，重新拼接版本号。如果担心服务器缓存版本号导致冲突，还可以加上一些随机字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br></pre></td></tr></table></figure><p>将最新的版本号信息重新写入 <code>package.json</code> 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">packageJson.version = newVersion;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p><del>直接 CV 代码！</del></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新 package.json 版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fetch = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-fetch\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">\"js-md5\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> update = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">    verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newVersion);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">    packageJson.version = newVersion;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">    fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Complete!!\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">update();</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%90%8E\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>如果是 Hexo 文件部署，就可以直接把文件直接丢在项目根目录，Action 集成部署加上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node update.js</span><br></pre></td></tr></table></figure><p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804135818.png\"></p>\n<p><del>Blog 半年没更新，除除草 --(....</del></p>\n","link":"https://blog.yfun.top/posts/2022/auto-update-npm-version/"},{"title":"我有特别的 DNS 配置和使用技巧","date":"2022-07-28 15:31:00","description":"\n<p>众所周知，DNS 的作用与电话簿类似，将人类可读的域名映射到机器可读 IP 地址、使人更方便地访问互联网。DNS 是非常重要的互联网基础设施，对于改善上网冲浪的体验中的重要程度不容小觑。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/96381/31/31172/23930/62e2ab5bE554d388b/37027f4a03351b9e.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/i-have-my-unique-dns-setup/\">https://blog.skk.moe/post/i-have-my-unique-dns-setup/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/i-have-my-unique-dns-setup/"},{"title":"优化博客的累计布局偏移（CLS）问题","date":"2022-06-07 17:24:00","description":"\n<p>距离上一篇文章发布已有四个月了，是时候写几篇文章给博客除草了。上一次我介绍了我如何迁移、重构了我的博客的架构，这次我想来谈谈我在重构中优化和打磨访客体验时解决的一个问题。我的博客优化之旅 图片 lazyload 的学问和在 Hexo 上的最佳实践 我的博客有多快？ 天下武功，唯快不破 —— 我是这样优化博客的 ...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/206311/26/14625/38940/629f7f81Eb11312de/b1e67f07b1cc9bc7.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/fix-blog-cls/\">https://blog.skk.moe/post/fix-blog-cls/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/fix-blog-cls/"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\n    return new Date(date.toLocaleString('en-US', { timeZone }))\n}\n\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false,\n        timeZone\n    })\n    return {\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\n        convert (date) {\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\n        }\n    }\n}\n\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\n\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\n    return converter.convert(new Date(secDate), tzName) - secDate\n}\n\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\ncmn-Hans-SG = 中文普通话-简体-新加坡\ncmn-Hant-TW = 中文普通话-繁体-台湾\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\ncmn = 中文普通话\n\nzh-Hans = 中文-简体\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\n}\n\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    weekday: 'long'\n}\nconst now = new Date()\n\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\n\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\n\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\n\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\n\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\n\nzhCNFormatter.format(now) // 2021年10月13日星期三\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\n\njaFormatter.format(now) // 2021年10月13日水曜日\njaAltFormatter.format(now) // 令和3年10月13日水曜日\n\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\n// {locale: 'zh-CN', calendar: 'gregory', …}\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\n     // 基于一个固定日期计算，这里选择 1970.1.1\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\n    const base = new Date(1970, 0, 1).getTime()\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\n    return Array.from({ length: 7 }, (_, day) =&gt; (\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\n    ))\n}\n\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    weekday: 'long',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n}).formatToParts(new Date())\n// [\n//     { type: 'year', value: '2021' },\n//     { type: 'literal', value: '年' },\n//     { type: 'month', value: '10' },\n//     { type: 'literal', value: '月' },\n//     { type: 'day', value: '13' },\n//     { type: 'literal', value: '日' },\n//     { type: 'weekday', value: '星期三' },\n//     { type: 'literal', value: ' ' },\n//     { type: 'dayPeriod', value: '上午' },\n//     { type: 'hour', value: '1' },\n//     { type: 'literal', value: ':' },\n//     { type: 'minute', value: '00' },\n//     { type: 'literal', value: ':' },\n//     { type: 'second', value: '00' }\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\n}\n\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\n  timeZone: 'America/Los_Angeles',\n  year: 1995,\n  month: 12,\n  day: 7,\n  hour: 3,\n  minute: 24,\n  second: 30,\n  millisecond: 0,\n  microsecond: 3,\n  nanosecond: 500,\n  calendar: 'iso8601'\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]