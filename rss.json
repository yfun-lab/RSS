[{"title":"Matrix Talk丨你的专业究竟是做什么的？","date":"2022-05-05 06:33:53","description":"关于MatrixTalk在少数派Matrix社区聚集着一批分享者，你可能经常看他们分享数字生活的心得体验，但你大概还不熟悉他们。为了拉近大家的距离，我们策划了MatrixTalk栏目，将不定期邀请Ma ...<a href=\"https://sspai.com/post/72892\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72892"},{"title":"颜值与性能兼得，开箱即用、易于同步的终端美化方案：Starship","date":"2022-05-05 03:32:40","description":"安装完 Starship 后，无需进行任何具体自定义的配置，默认就已经提供了非常完整和舒适的终端效果，因此我甚至不需要做什么调整，就可以拿来直接开始用。它非常易于同步。各自安装之后，同一份配置文件可以在不同的操作系统（Windows、Linux、macOS、Android 等）、不同的 Shell（Bash、Zsh、Fish、Powershell 等）中使用，而且展示效果完全一致。非常适合同时使用多个环境、又期望在不同环境中拥有相似体验的人们。<a href=\"https://sspai.com/post/72888\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72888"},{"title":"派早报：三星发布 UFS 4.0、AMD 公布锐龙 7000 系列产品路线图等","date":"2022-05-05 00:25:09","description":"雷蛇推出新款 Razer Blade 15 游戏本、Kindle 将支持 EPUB 电子书格式等。<a href=\"https://sspai.com/post/73029\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73029"},{"title":"你是如何被护肤成分「维生素 C」圈粉的？","date":"2022-05-04 06:54:43","description":"\n<p data-pid=\"gq7bcypA\"><b>成分党老司机告诉你怎么被圈粉的！！！！！！！！</b></p>\n<p data-pid=\"e_4_DABz\">VC（<i>维生素C</i>），作为护肤界另一个可以和A醇齐名，并称为“王炸”的成分，这两年在功效护肤大流行的趋势下，可谓是挣足了眼球。</p>\n<p data-pid=\"VR_wYEXZ\"><b>VC和A醇作为两个最经典的从医学上转化来的护肤成分</b>，<b>他们的功效数据得到了很多临床数据的验证，效果有保证</b>。加上这两年护肤圈突然兴起的一股“早C晚A”的风潮也彻底点燃了VC和A醇。</p>\n<p data-pid=\"AaGUavYT\"> A醇，之前我已经给大家介绍过了，今天我们就主要来聊聊VC。</p>\n<a href=\"https://www.zhihu.com/question/345095868/answer/2003460667\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-4ceea78e635561e304666f55dbab0c86_l.jpg?source=b1748391\" data-image-width=\"997\" data-image-height=\"1200\" class=\"internal\">A醇有哪些推荐？</a><h2><b>VC是如何被发现的？</b></h2>\n<p data-pid=\"epCM4z-X\"> 在15世纪到18世纪，一些远洋航行的水手们由于经常长时间得不到新鲜蔬菜、水果的补给，往往会出现牙齿松动、牙龈出血、肌肉酸痛无力甚至皮下出血的症状，有时候严重的话还会导致死亡，这种病症大家称之为：<b>“坏血症“</b>（<i>也称“败血症”</i>）。</p>\n<p data-pid=\"ZNXaPTFc\"> 坏血症在以前被成为“不治之症”，死亡率很高。所以几百年来，科学家们在和坏血症的不断对抗中，发现了VC（<i>因为蔬菜、水果里含有丰富的VC，因此可以预防并治疗败血症</i>）。VC的存在虽然早已被证明，但直到1928年，生化学家Albert Szent-Gyorgyi首次成功分离出VC【1】，并通过化学解析的方式证明了VC的结构和分子式【2】， 才正式揭开了VC之谜。</p>\n<p data-pid=\"NVzvuxVg\"> 因为VC是一种弱酸，而最初发现的意图是对抗“坏血病”，所以后来医学界重新命名维生素C为抗坏血酸。抗坏血酸天然有手性之分，主要是L-和D-型，也就是大家熟知的左旋VC（<i>L-型</i>）和右旋（<i>D-型</i>）VC，<b>左旋VC才有生物活性，右旋VC没有生物活性</b>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e87d05cd22d491e5b7a96789f69afdd8_720w.jpg?source=b1748391?rss\" data-caption=\"左旋VC（L）和右旋VC（D）的结构式\" data-size=\"normal\" data-rawwidth=\"608\" data-rawheight=\"234\" data-watermark=\"watermark\" data-original-src=\"v2-e87d05cd22d491e5b7a96789f69afdd8\" data-watermark-src=\"v2-c27a92b9289108a42877c72ad471c7c6\" data-private-watermark-src=\"v2-062dded03586f95d0bcc090f157bb3c4\"></p>\n<p data-pid=\"DHoZdDyY\"><b>虽然VC是人体必须的重要维生素之一，但很可惜，我们人类自身无法合成VC</b>。究其原因主要是因为我们人体合成VC的最后一步关键的酶—<b>古洛糖酸内酯氧化酶</b>缺失【3】。虽然我们人体不能合成VC，但幸运的是植物体内存在大量的天然维生素C，我们可以通过饮食的方式来弥补体内缺乏的VC（<i>所以一定要多吃蔬菜和水果，是有科学道理的</i>）。</p>\n<h2><b>VC是什么？</b></h2>\n<p data-pid=\"OQBr9Inm\"> VC的分子结构如下图所示，它是一个分子量只有176的一元弱酸。<b>VC非常不稳定，很容易被氧化失活，这也是很多VC类产品变黄变色的根本原因</b>。VC不稳定，是因为它的分子结构中存在烯二醇基，这个烯二醇基很活泼，很容易丢失电子甚至开环形成不同的VC还原产物。但也正是因为这个基团的存在，使得VC具有非常好的抗氧化能力。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-403033c6e5f75efabd965110347db87a_720w.jpg?source=b1748391?rss\" data-caption=\"维生素C的结构式\" data-size=\"normal\" data-rawwidth=\"518\" data-rawheight=\"391\" data-watermark=\"watermark\" data-original-src=\"v2-403033c6e5f75efabd965110347db87a\" data-watermark-src=\"v2-4c082fe14780ee5529423818d51e4543\" data-private-watermark-src=\"v2-4524f81caa1404c5b22b279585f55e14\"></p>\n<p data-pid=\"KIs0Ghk9\"> VC在人体的皮肤和组织里都大量存在，<b>除了肾上腺和脑垂体，皮肤的VC含量是最高的</b>，而在皮肤中，<b>角质层中VC的含量又比真皮层的含量更高</b>【4】。而过量的紫外线照射会导致老化皮肤中的VC含量急剧减少（<i>由于VC要中和紫外线引起的自由基消耗</i>），从而导致皮肤的生理功能受到影响。所以白天给皮肤补充VC对抗UV光损伤是非常科学的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-92ed4b924328fae94e03f50d6c32fec7_720w.jpg?source=b1748391?rss\" data-caption=\"VC在人体不同组织上的含量分布情况\" data-size=\"normal\" data-rawwidth=\"811\" data-rawheight=\"385\" data-watermark=\"watermark\" data-original-src=\"v2-92ed4b924328fae94e03f50d6c32fec7\" data-watermark-src=\"v2-900dc873f226b0f86dae1a9be9e128db\" data-private-watermark-src=\"v2-6669e6e39ec7b69d85a2d8300bb56315\"></p>\n<h2><b>VC在皮肤上的作用数据</b></h2>\n<p data-pid=\"b7d175Av\"> 关于VC在皮肤上的作用数据，很早的时候修丽可的创始人--皮内尔博士就展开了研究【5】。目前可以确定的是：</p>\n<p data-pid=\"NTsicnCU\">- VC的透皮受产品pH的影响，一般来说，VC产品的pH低于3.5才可以透皮被皮肤利用，pH越低，透皮效果越好，生物利用率也最高。<b>当pH为2.0时，VC的透皮数据最好</b>。这也是为什么目前大多数效果好的VC精华pH都很低的重要原因。当然产品的pH低于3.5时，是需要品牌自己做毒理，验证产品的安全性的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1f5f0fbf570d317688e5d1b74bc2c9f2_720w.jpg?source=b1748391?rss\" data-caption=\"VC在不同pH值下的透皮吸收数据\" data-size=\"normal\" data-rawwidth=\"549\" data-rawheight=\"400\" data-watermark=\"watermark\" data-original-src=\"v2-1f5f0fbf570d317688e5d1b74bc2c9f2\" data-watermark-src=\"v2-891567192dc725e78107de31bfdd4cc2\" data-private-watermark-src=\"v2-6b8304cb737f8cfb9a55a962d15266c3\"></p>\n<p data-pid=\"VZ_MqjIA\">- 关于<b>VC最佳透皮的浓度</b>，皮内尔博士也展开了研究，根据实验结果可知，左旋VC浓度达到5%时，才有比较好的吸收（<i>也就是产品有效果</i>）。<b>当左旋VC的含量达到20%时，VC的透皮效果最好</b>。浓度高了或是低了，透皮的效果都会大打折扣。这也是目前为什么绝大多数VC精华的浓度最高也就加20%的原因。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8e3a9817489f35fc49c02132a9ba6284_720w.jpg?source=b1748391?rss\" data-caption=\"VC在不同浓度下的透皮吸收数据\" data-size=\"normal\" data-rawwidth=\"625\" data-rawheight=\"421\" data-watermark=\"watermark\" data-original-src=\"v2-8e3a9817489f35fc49c02132a9ba6284\" data-watermark-src=\"v2-ab3d116bb8e8c291fcb43f2f3743eb7d\" data-private-watermark-src=\"v2-a29ad0fd50c6428a6265c7cdb83f9048\"></p>\n<p data-pid=\"rka-mqtU\">- 关于VC在皮肤的留存时间，这篇文章也做了详细研究，实验表明：<b>当连续使用VC三天后，VC在角质层的有效浓度就达到了饱和，后续即便再继续使用VC，VC的有效浓度也不会增加了</b>（<i>也就是VC皮肤饱和了，吸收不进去了</i>）。滞留在角质层的VC会让皮肤看上去比较黄，但会两三天之内慢慢被皮肤吸收利用，黄色消失。<b>这也是为什么VC类产品我建议大家一周只需要用三次的原因，天天用不吸收没必要，而且浪费！</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-cb4574f5fbeee427673f65520ba9feeb_720w.jpg?source=b1748391?rss\" data-caption=\"VC在皮肤的留存时间数据\" data-size=\"normal\" data-rawwidth=\"620\" data-rawheight=\"431\" data-watermark=\"watermark\" data-original-src=\"v2-cb4574f5fbeee427673f65520ba9feeb\" data-watermark-src=\"v2-2fad8157181a7e4f5aa895ad770dcdc2\" data-private-watermark-src=\"v2-141d27632693534c1f6b6895656182a1\"></p>\n<h2><b>VC都能解决哪些皮肤问题？</b></h2>\n<p data-pid=\"dOn4qvFl\"> VC有很多重要的生理功能，虽然我们只能通过饮食补充VC，但通过食物摄取的VC，对皮肤的改善是非常有限的，所以如果你想要通过VC改善皮肤的一些状况，涂抹含有VC的产品是非常有必要的。那涂抹到表皮的VC具体能解决哪些皮肤问题呢？我总结了以下几点：</p>\n<p data-pid=\"S93w5K1P\"><b>1.</b> <b>抗氧化，预防光损伤</b></p>\n<p data-pid=\"OvTQsgcB\"> 这个大家应该都知道，VC作为天然的强大抗氧化剂，其<b>最大的功能就是剿灭自由基，防止自由基对组织、器官的破坏</b>。因为自由基的产生原因有很大一部分是来源于皮肤受到紫外线的照射，所以在日常护肤的时候，大家一定要注意防晒，<b>防晒和VC产品的复配使用才能最大程度的预防光损伤，抗氧化抗衰。</b></p>\n<p data-pid=\"O8V5r0vG\"><b>2.</b> <b>美白，淡斑，提亮肤色</b></p>\n<p data-pid=\"fwq0AJHU\"> VC的美白功效，其实也不用多说，众人皆知。VC能美白，其实是因为<b>VC可以利用自身强还原能力，将黑色素的中间产物多巴以及多巴醌还原成酪氨酸，从而可以有效、减少抑制黑色素的生成</b>。</p>\n<p data-pid=\"WOh6NxMP\"> 与此同时，<b>VC还可以抑制5α-还原酶的合成，减少皮肤的出油</b>，有非常好的控油和抑制脂质过氧化的功效。整个一套组合拳下来，VC的美白功效也不容小觑。</p>\n<p data-pid=\"nn5gxg18\"><b>3.</b> <b>促进胶原蛋白的表达，抗老抗衰</b></p>\n<p data-pid=\"7qReYNTu\"> VC是脯氨酸羟化酶的辅助因子，它与胶原蛋白前体结合生成三螺旋结构，因此是胶原蛋白合成所必须的原料。另外VC它还可以增加胶原蛋白前体的基因翻译和mRNA转录，从而上调胶原蛋白的形成，增加成纤维细胞产生。</p>\n<p data-pid=\"wEMob7Ag\"> 说人话就是<b>VC可以激活胶原蛋白合成相关基因的表达，让真皮层的成纤维母细胞更多的产生胶原蛋白，来支撑皮肤的结构</b>。所以从这块来看，VC也有很好的抗皱抗衰的功效。</p>\n<h2><b>VC变黄真的失效、不能用了吗？</b></h2>\n<p data-pid=\"8NJlMVNq\">这个应该是所有使用过VC产品的消费者最关心的问题。的确！因为VC结构中存在烯二醇基团的缘故，导致VC非常的不稳定，很容易氧化变色而失活。但科学的说，<b>VC变色虽然是氧化的表现，但氧化不一定意味着活性就完全丧失了</b>。</p>\n<p data-pid=\"Kzfq8u88\">究其原因，主要是因为VC的氧化并不是一步，而是一个二步反应（<i>其实是多步反应，这里方便理解，简单划为两步</i>），当然了，它的还原产物也不止一个【6】。</p>\n<p data-pid=\"pg-yOVXf\">正常来说，VC被氧化后，第一步会失去两个电子，变成淡黄色的<b>脱氢抗坏血酸</b>（<i>DHA</i>）。虽然此时VC确实被氧化了，颜色也由无色变成了淡黄甚至黄色，但其实<b>此时DHA仍然有抗氧化的功效，只不过功效上相比精纯VC差一点罢了</b>。但要注意的是，<b>DHA一旦透皮吸收，它会在皮肤里还能重新被还原成VC起作用</b>，所以也就是说，如果一个VC产品，它只是变黄了，颜色没有很深（<i>指的是非常深的棕色或者茶色</i>），它其实仍然是有效果的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-78093356d080d62d14217ff2d07baab7_720w.jpg?source=b1748391?rss\" data-caption=\"VC失去两个电子变成DHA的结构变化\" data-size=\"normal\" data-rawwidth=\"566\" data-rawheight=\"232\" data-watermark=\"watermark\" data-original-src=\"v2-78093356d080d62d14217ff2d07baab7\" data-watermark-src=\"v2-1e4819ba39800aecf4264260e4472dec\" data-private-watermark-src=\"v2-01c8b54c1e5bf1e2bab9d389438e4355\"></p>\n<p data-pid=\"DBiN6Vsv\">VC氧化的第二步，这时候VC的五元内酯环会打开，生成新的产物<b>二酮古洛糖酸</b>，这时候的<b>VC基本就完全失去生理活性了</b>，此时VC的颜色也由原来的黄色变成了更深的棕色。脱氢抗坏血酸DHA转化成二酮古洛糖酸的反应是很慢的，但<b>一旦转化后，就再也不能变回去了</b>，所以我们就不要幻想它能像DHA一样，在皮肤里还能被还原成VC起作用了。</p>\n<p data-pid=\"_aUBouIO\">VC的还原产物二酮古洛糖酸后续还会继续被还原成其他产物（<i>很复杂，就不介绍了</i>），虽然此时功效没了，但涂抹在脸上对皮肤也没有什么太大的伤害，所以如果你之前不太懂，<b>涂了颜色很深的VC产品，也不用担心它的危害，无功无过罢了。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-5a070e3462b4dabebdaea9589d941f80_720w.jpg?source=b1748391?rss\" data-caption=\"DHA继续还原成二酮古洛糖酸的结构变化\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"286\" data-watermark=\"watermark\" data-original-src=\"v2-5a070e3462b4dabebdaea9589d941f80\" data-watermark-src=\"v2-1b6ad51b3648a0b4c702897c635adce0\" data-private-watermark-src=\"v2-ea43c0db10b04a416cb9ed1dc6286f18\"></p>\n<h2><b>产品推荐（我就知道你们都想看这里！！！！！！）</b></h2>\n<h3><b>1. 修丽可CEF</b></h3>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1452422232413184000\"></a><p data-pid=\"r4O6GvRp\">毋庸置疑，作为目前市面上名声最大、最好用当然也是最贵的VC精华，这里必须推荐一波。这支CEF精华主打<b>15%左旋VC + 1% VE + 0.5% 阿魏酸</b>，这个三叉戟组合也是修丽可创始人皮内尔博士赫赫有名的CEF专利。</p>\n<p data-pid=\"VLZ7ro9H\">因为VC很不稳定容易氧化失活影响其抗氧化功效，所以作为美国的抗氧化鼻祖，皮内尔博士很早就展开式了对VC稳定性的研究。后来老爷子发现，<b>如果把0.5%的阿魏酸掺入15%的VC和1%的生育酚溶液中，可以有效提高VC和VE的化学稳定性，同时还能提供双倍的光损伤防护</b>。也就是说，如果只有VC和VE的话，就只有抗氧能力和一点微弱的抗紫外线能力，但是如果引入了阿魏酸，不仅可以维持 VC和VE的抗氧化能力，而且还能大大提高整个配方的抗紫外线能力（<i>原因是阿魏酸作为替死鬼和自由基结合，挽救了VC和VE</i>）。</p>\n<p data-pid=\"07v48MtL\">与此同时，为了让VC更好的透皮被利用，<b>这款精华的pH值也是非常的低</b>，所以酸性很强，对于一些不耐受的肌肤来说，<b>可能初次使用会有一些刺激</b>。但说实话，<b>控油、提亮的效果真不是吹的</b>，我这种懒人，一年三五瓶也是轻飘飘的秒掉。虽然肉痛，但有效。</p>\n<p data-pid=\"Zw2QINaa\">所以这样的一款有技术含量的VC精华，又好用又实在，谁不喜欢。只是这价格，有点让人劝退，如果打个对折，我能给你卖断货，你信不？</p>\n<h3><b>2. OBGAI VC</b></h3>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1452422312260149248\"></a><p data-pid=\"MIIi8dyq\">和修丽可齐名的OBAGI，必须在这里也有一席之地。和修丽可一样，OBAGI最出名的也是VC系列，因为海外授权的缘故，目前OBAGI的VC有美版和日版之分。<b>美版有10%，15%和20%三个浓度</b>，<b>日本原来也有三个浓度，分别是5%，10%，20%，最近还出了一个猛到哭的25%浓度</b>，浓度越高，价格越贵，但总体价格还是比修丽可美丽。但是毕竟浓度高，刺激性的风险比较大，所以<b>如果你不是耐受肌或者资深成分党的话，建议你上来不要使用高浓度，老老实实从5%浓度干起</b>（<i>敏感肌5%也可以尝试</i>），等皮肤耐受了，再慢慢攀升浓度（要循序渐进攀升，不要急功近利）。</p>\n<p data-pid=\"s7ISSo5C\">因为VC配方容易变色失活，很大一部分原因是因为VC怕水中的氧气，除了给VC找一个替死鬼之外（<i>例如修丽可</i>），那还有一条路，就是配方不用水，或者极致少用水，在这方面，OBAGI那是把这份气质拿捏的死死的。所以这也就成了OBAGI VC的灵魂。<b>OBAGI的VC利用多元醇作为主要溶剂，用极少量水来极限溶解高浓度VC以此来最大程度控制VC的稳定性</b>，所以OBAGI的VC相对来说，稳定性相比水系有了很大的提升，功效有保证。</p>\n<p data-pid=\"s2ArtkQV\"> 因为多元醇作为主溶剂，肤感上会有一点点腻，对于干皮没问题，但是油皮可能就不那么讨喜了。但总体我觉得都还好。所以如果你不喜欢被变色的VC染色，OBAGI的VC可以说是一个非常好的选择。</p>\n<h3>3. 仙丽施VC</h3>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1452422423426019329\"></a><p data-pid=\"I64tOwDv\"> 虽然修丽可和OBAGI的VC名气很大，但要真论起辈分，在仙丽施的VC面前，这两都要自称小弟。大家可能都不知道吧， <b>OBAGI，修丽可以及下面要说的欧玛，这三个品牌的创始人最早的时候都曾在仙丽施的实验室打过工呢，</b>也就是这份经历，让他们三积累了很多VC方面的技术经验，为以后的发家致富（创业）打下了基础。</p>\n<p data-pid=\"DP0wilUa\"> 仙丽施是全球VC抗衰的开创者（<i>第一个提出VC可以促进胶原蛋白的合成</i>），是首次把精纯左旋VC用于护肤品中的品牌，他们家的VC精华是全球第一款量产的左旋VC产品。<b>仙丽施的VC精华有三个浓度：7.5%，10%以及17.5%</b>。</p>\n<p data-pid=\"mfed0i0K\">1990年的时候，仙丽施研究出了「 <b>10% VC + 2% 硫酸锌 + 0.5% 乙酰酪氨酸</b>」的维 C 专利配方，次年推出市场上第一款 VC 精华，并一直售卖至今。也正是因为它的这个配方专利， 导致了后来的修丽可、OBAGI在使用维 C 时不得不想招避开这个配方。</p>\n<p data-pid=\"CBHGRFfQ\">这个配方的功效肯定没得说，<b>抗氧化、提亮，淡纹紧致的效果都很好</b>。但是很可惜，稳定性不是很好，虽然配方里也有加一些麦角琉因和葡萄籽等天然抗氧化剂，但还是抵不住岁月的侵蚀。但就像我说的，如果你买到比较新鲜的批次，快速用完，那效果也绝对是很赞的。</p>\n<h3>4. 春日来信VC</h3>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1452422500383166464\"></a><p data-pid=\"Hez9Z58-\">春日来信的VC，大家应该都很熟悉，今年他们家的VC真的是卖的非常非常火，是各大中腰部甚至头部主播直播间的常客。春日来信的创始人卞工，是我的好朋友，也是技术出身，所以在产品打造方面，也是实力派。</p>\n<p data-pid=\"FiwvVA2u\">虽然他们家的VC经常被人说是Copy修丽可的CEF配方，但其实人家的配方也是做了很多升级和调整的。<b>他们家的VC有两个浓度，一个10%，一个20%</b>。</p>\n<p data-pid=\"VhJePhGd\">10%版本的VC主打<b>10%VC + 0.5%阿魏酸 + 0.5%VE衍生物</b>（<i>生育酚乙酸酯</i>），除此之外，卞工在整个配方里还添加了一些其他的抗氧化成分来做CEF做了一个升级，比如里面有<b>白藜芦醇</b>、<b>葡糖基芦丁</b>。同时为了提高VC的透皮利用，除了配方本身pH很低之外，卞工在配方中还<b>添加了乙氧基二甘醇作为促渗剂，帮助VC更好的吸收</b>。</p>\n<p data-pid=\"MfFaZ-Rk\"> 为了改善以往其他VC产品缺乏滋润的肤感，卞工在这款VC里还添加了 大量<b>泛醇、生物糖胶</b>这样的保湿剂，使得整个配方不仅功效十足，在肤感方面也非常不错。之前他给过寄过两瓶，不到一个月全干完。接下去自个又买了两瓶，没办法，修丽可的CEF太贵，天天用扛不住，偶尔混搭一下，非常不错。</p>\n<h3>5. 拾颜VC</h3>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1452422556058361856\"></a><p data-pid=\"rgzKuAO6\">拾颜，非常陌生是吗？如果我说公众号护肤大号《基础颜究》，大家是不是有点感觉了？不错，拾颜就是三亩大叔创业的品牌，三亩大叔，作为圈内技术流和科学传播流的代表，在产品打造上，怎么缺的了新意？</p>\n<p data-pid=\"tlSpIXKG\">既然VC怕水中的氧气，那就<b>用可乐灌装的工艺通过二氧化碳把水中的氧气赶走</b>，这个看似很简单，但实操很难的工艺竟然被大叔真的拿捏住了，人家自己在工厂真的搭了一个可乐灌装线，这股韧劲不得不说，真的很有技术范。</p>\n<p data-pid=\"i2ILnmUy\">除此之外，这款产品是喷雾设计，<b>料体出口是单向阀</b>，这样尽量避免空气进入瓶内影响VC的活性，所以即便这个产品你用上个半年，料体基本也没什么变化。<b>除了10%的VC之外，这款产品里还添加了4%的黑麦籽提取物和麦角硫因，来有效促进细胞的增殖，抗老抗氧化方面绝对是一把好手</b>。但是一定要记得，使用的时候一定要先喷到掌心然后再涂抹使用，切勿直接朝脸喷。</p>\n<h3>6. 优色林鲜活VC精华</h3>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1452422620582514688\"></a><p data-pid=\"oB0LMrYz\">优色林，德国BDF旗下的功效护肤品牌，虽然在国内名气不如修丽可、OBAGI，但是也不能算是小众，毕竟在成分党的圈子里，他还是颇有盛名的。BDF毕竟作为作为德国百年科研护肤品牌，不管是技术背景，还是供应链这块，都是非常有保障的。</p>\n<p data-pid=\"LXW_5AHy\"><b>这款VC精华主打的是一个冻干的概念</b>，将鲜活的10%VC首先储备在真空仓里，当使用的时候按压真空仓，鲜活的VC粉就被注入到精华液里面了，摇匀后就可以享用10%的VC大餐了。</p>\n<p data-pid=\"h5YnFUse\">除了10%的鲜活VC，这款产品里还添加了小分子量的玻尿酸，<b>小分子玻尿酸</b>可以直接触达肌底，在保湿的同时，也给VC起作用提供了一个良好的湿润微环境。与此同时里面还添加有<b>胀果甘草提取物</b>，这是一个VC booster，可以增强VC的抗氧效果，还可以修复紫外线带来的光损伤。</p>\n<p data-pid=\"o0oJrZFL\">因为是冻干的概念，再加上乳液的质地，所以无论是在VC功效稳定方面，还是保湿方面，都远超我的预期，使用下来体感非常不错，<b>如果你觉得皮肤负担很重，想精简护肤，这样的一只VC精华， 绝对是一个非常不错的选择</b>。</p>\n<h3>7. Phyto-c欧玛VC精华</h3>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1452422689139339265\"></a><p data-pid=\"OxRkLnJk\">欧玛，上面也说了，其创始人也曾在仙丽施搬砖过，而且还是修丽可创始人皮内尔博士的学生，所以他在VC方面的造诣也非常不简单。所以说，VC四大天王，欧玛也必须占一席。</p>\n<p data-pid=\"f1rTIv2Y\">欧玛博士本来也是修丽可品牌的创始元老，但因为经营理念的原因，后来出走修丽可，成立了自己的品牌Phyto-C欧玛，不得不说，大佬都是要创业致富的。</p>\n<p data-pid=\"e28cpke9\">欧玛博士一直以来都坚定的认为VC是护肤理念中不可或缺的一环，所以在他进军美妆行业时，一直研究VC，出走修丽可后，因为CEF专利的缘故，他就没再碰这个体系，反而自己独创了一个<b>VC+油橄榄+VE+VA视黄醇</b>的体系，这也就是后来欧玛家的AEC精华的核心。欧玛的VC精华主打<b>15%的左旋VC</b>，另外还添加了<b>硫酸锌</b>和<b>生物类黄铜</b>，成分也是非常的精简，典型的古老成分党。</p>\n<p data-pid=\"6lQknab-\">欧玛这个牌子其实在功效方面做的一点也不差，甚至比修丽可有过之而无不及，但为什么没火起来，究其原因大概就是技术控太不注意细节了，他们家产品的肤感实在不敢恭维。好在后面一系列产品有注意到这点，已经有所改善了。如果大家有兴趣，也仍然值得试一试。</p>\n<h2><b>参考文献</b></h2>\n<ul>\n<li data-pid=\"Xjr7cnJ6\">【1】 Szent-Gyorgyi A. Observations on the function of peroxidase systems and the chemistry of the adrenal cortex: Description of a new carbohydrate derivative. Biochem J, 1928, 22: 1387–1409</li>\n<li data-pid=\"-g08rIr-\">【2】 Szent-Gyorgyi A, Haworth W N. ‘Hexuronic acid’ (ascorbic acid) as the antiscorbutic factor. Nature, 1933, 131: 24</li>\n<li data-pid=\"BF1P4ggL\">【3】 Monfort A, Wutz A. Breathing-in epigenetic change with vitamin C. EMBO Rep, 2013, 14: 337–346</li>\n<li data-pid=\"DJ7ceelb\">【4】 Pullar J M , Carr A C , Vissers M . The Roles of Vitamin C in Skin Health[J]. Nutrients, 2017, 9(8):866-.</li>\n<li data-pid=\"tjreFxp1\">【5】 Pinnell S R , Yang H , Omar M , et al. Topical L‐Ascorbic Acid: Percutaneous Absorption Studies[J]. Dermatologic Surgery, 2010, 27(2):137-142.</li>\n<li data-pid=\"3VgJ2lFO\">【6】 Nemet I , Monnier V M . Vitamin C degradation products and pathways in the human lens.[J]. Journal of Biological Chemistry, 2011, 286(43):37128-37136.</li>\n</ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/kang-da-dao-de-kbo-shi-9?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">科学怪人-k博</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/446102132/answer/2264274182?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">19 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/526674059?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">护肤小白可以通过「成分护肤」，快速进阶成分党吗？「成分护肤」具体是个什么概念？</a><br><a href=\"http://www.zhihu.com/question/523591949?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">护肤成分是否也有季节性，新兴成分「依克多因」是更适合春天吗？</a><br>\n","link":"http://www.zhihu.com/question/446102132/answer/2264274182?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"作为学习型工具，文石 Note5+ 用起来怎么样？","date":"2022-05-04 06:30:00","description":"虽然有些小细节尚待优化，但我对它整体满意。<a href=\"https://sspai.com/post/71542\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71542"},{"title":"缩短命令、调整按键、自动补全，这些代码值得你放进 PowerShell 配置文件","date":"2022-05-04 03:30:00","description":"一般来说，PowerShell 中用户创建的变量、函数等只能在当前的窗口会话生效。但配置文件非常特殊，PowerShell 每次启动前都会加载该文件。如果将某些命令写入这个文件，修改就能全局生效。<a href=\"https://sspai.com/post/73019\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73019"},{"title":"App+1 | 在家里来一场说走就走的旅行：GeoGuessr","date":"2022-05-03 07:00:00","description":"GeoGuessr 发布于 2013 年，最初它是只有一种模式的网页游戏。游戏会给出一张谷歌地图街景，你可以在附近移动，通过地图中的各种细节判断自己身在何处——仅仅知道什么国家是不够的，你需要让选择的定位点和地图的真实地点尽可能接近。<a href=\"https://sspai.com/post/72968\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72968"},{"title":"核酸、抗原、抗体检测，三种新冠检测方式有何差别？","date":"2022-05-03 03:00:00","description":"自 2020 年新冠疫情爆发以来，「核酸检测」作为一项检测是否感染的重要指标，开始反复出现在我们的生活中。2022 年 3 月 10 日，国务院应对新型冠状病毒肺炎疫情联防联控机制综合组发布通知，决定推进「抗原筛查、核酸诊断」的检测模式，在核酸检测基础上增加抗原检测作为补充。\n\n抗原检测是什么？和其他的检测手段有什么不同？这篇文章，我们以新型冠状病毒为例，讲讲常见的快速筛查手段，聊聊相关的原理以及适用范围。<a href=\"https://sspai.com/post/72950\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72950"},{"title":"派评 | 近期值得关注的 App","date":"2022-05-02 08:38:26","description":"你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。<a href=\"https://sspai.com/post/73000\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73000"},{"title":"[送码] 影视爱好者不能错过的 App：用 Apollo 打造专属影视信息库","date":"2022-05-02 06:02:03","description":"你可以使用 Apollo 来给已看的电影 / 剧集添加评分、评论，记录自己的观影方式等，也可以用它来追踪目前在追的剧集的观看进度，或者创建自己的「待看清单」。<a href=\"https://sspai.com/post/72871\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72871"},{"title":"混合动力汽车为何只用电池储能，而不用飞轮、压缩空气、超级电容等方式储能？","date":"2022-05-02 01:36:27","description":"\n<p data-pid=\"NM7eVxHv\"> 2021年3月13日，国务院发布<b>《中华人民共和国国民经济和社会发展第十四个五年规划和2035年远景目标纲要》。</b></p>\n<p data-pid=\"2b7vlsPh\">其中就讲了2021年到2035年，一共15年需要发展的储能方式。</p>\n<blockquote data-pid=\"VYQ6BCiT\"> 按照技术原理划分，储能技术主要分为<b>物理储能</b>（如抽水储能、<b>压缩空气储能、飞轮储能</b>等）、<b>化学储能</b>（如铅蓄电池、液流电池、钠硫电池、锂离子电池）和<b>电磁储能</b>（如超导电磁储能、<b>超级电容器储能等</b>）三大类。其中：最成熟的是抽水蓄能、铅蓄电池；正处于示范推广阶段的是飞轮储能、压缩空气储能、锂电池；发展处于初期的技术有铝空气电池、液流电池、钠硫电池、固态电池、燃料电池、超导磁蓄能、超级电容等。</blockquote>\n<p><img src=\"https://pic2.zhimg.com/v2-12dab9f3f343e888473eea70c6c2b2da_720w.jpg?source=b1748391?rss\" data-rawwidth=\"655\" data-rawheight=\"521\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-12dab9f3f343e888473eea70c6c2b2da\" data-watermark-src=\"v2-a7ad509968bb570e41af1f8266ac1826\" data-private-watermark-src=\"v2-1544a312e013aeb851611df2358fd7ee\"></p>\n<p data-pid=\"JXGQJxVV\">下面简单介绍下<b>压缩空气、超级电容、飞轮储能</b>的应用及发展，以及为什么现在的混合动力汽车没有使用这些储能方式。</p>\n<p><br></p>\n<h2>压缩空气储能</h2>\n<p data-pid=\"iYJoGfmY\">1978年，德国建成了世界第一座示范性压缩空气蓄能电站--<b>德国汉特福（Huntorf）压缩空⽓储能电站。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-1ea83bff64db45dde0278f6ce22ed39a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"603\" data-rawheight=\"292\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1ea83bff64db45dde0278f6ce22ed39a\" data-watermark-src=\"v2-51599d1ccb9c88d6e8fb9ea4a6857673\" data-private-watermark-src=\"v2-68de19211d236edccf2d372f78ecf917\"></p>\n<p data-pid=\"Hz7O3HeA\">压缩空气储能的方法就是用电能将空气压缩成高压力的空气（英国的空气储能甚至压缩成了液态空气），将之注入到大型容器或加工密闭洞穴内。在需要电能输出的时候，将储气容器（洞穴）内的高压空气通过压力阀门释放出，经换热器与油或天然气混合燃烧，导入<b>燃气轮机</b>做功发电。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-720e06c9103e4033e3888db727ffd492_720w.jpg?source=b1748391?rss\" data-rawwidth=\"689\" data-rawheight=\"585\" data-size=\"normal\" data-caption=\"德国汉特福（Huntorf）压缩空⽓储能/发电流程\" data-watermark=\"watermark\" data-original-src=\"v2-720e06c9103e4033e3888db727ffd492\" data-watermark-src=\"v2-5ee81d38faa6177fdc0da6246345321e\" data-private-watermark-src=\"v2-3526a7442dedb394997fbf276617e839\"></p>\n<p data-pid=\"Yd1buPt_\">燃气轮机由<b>压缩机、燃烧室、膨胀机</b>构成，高压力空气和可燃气体进行混合燃烧，产生高压高温的气流，进入膨胀机做功。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ac82b9cd6c125fabcf4563a5d34d42b1_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"298\" data-size=\"normal\" data-caption=\"燃气轮机组成\" data-watermark=\"watermark\" data-original-src=\"v2-ac82b9cd6c125fabcf4563a5d34d42b1\" data-watermark-src=\"v2-81dee7d650059ae39947b2d663b7d5db\" data-private-watermark-src=\"v2-7a2c6c9ed53cbfa04f9a1ed809bd5c4a\"></p>\n<p data-pid=\"gS6Yh5fZ\">压缩空气储能方案的优点是建造、运行成本较低，可以利用地下洞穴、废弃矿井等密闭环境，经济性较好。因为空气不会燃烧、爆炸，所以环境污染小，也不像水电储能一样对地点（河流中下游）有着严苛的要求。可以有效储存电能，用于调峰（储存多余的电力）和电网应急。</p>\n<p data-pid=\"0heu8oB3\">德国、美国均有着大型规模的空气储能站，中国则是世界上第三个实现批量性用空气储能供电的国家。</p>\n<p data-pid=\"iPUes3RO\">2013年在河北廊坊建立的<b>1.5兆瓦</b>的压缩空气储能系统。</p>\n<p data-pid=\"ZXXjGsuK\">2015年在安徽芜湖建立的<b>0.5兆瓦</b>的压缩空气储能系统。</p>\n<p data-pid=\"roVoxvNr\">湖北应城一期投资40亿，预计2023年建成的<b>300兆瓦</b>级压缩空气储能项目。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-152636018ddcb703c0c54c75cf690654_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"427\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-152636018ddcb703c0c54c75cf690654\" data-watermark-src=\"v2-6b0a28d8e15f03a3e1f20537466ff20a\" data-private-watermark-src=\"v2-85f844110b44bd4bb96b5902d35e92a8\"></p>\n<blockquote data-pid=\"X4oHy9XZ\">该项目建成后，储能电站年发电量可达5亿度，不仅为湖北应城电网提供调峰等辅助服务，助推应城经济转型发展，还实现了对废弃盐穴资源的再次利用，有利于当地的环境保护和资源节约，具有显著的绿色能源经济效益。</blockquote>\n<p data-pid=\"PDhBBelU\"><b>但目前的“压缩空气储能”适用于响应慢的大规模储能，其额定功率下的放电时间为1-20h，所以</b>其漫长的响应时间，加上其规模化的基础硬件设备，是不可能应用在必须以秒为反馈的小型载具，如混合动力汽车上的。</p>\n<p><br></p>\n<h2>超级电容器存储</h2>\n<p data-pid=\"nXjuBMiw\">常用的超级电容器是<b>双电层电容</b>，通常被称为EDLC（机电双层电容器），其构造和锂动力电池类似，正极/隔膜/负极排列组织。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-661e9852f555f5f6d01548214b6f0906_720w.jpg?source=b1748391?rss\" data-rawwidth=\"493\" data-rawheight=\"294\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-661e9852f555f5f6d01548214b6f0906\" data-watermark-src=\"v2-47d7ca0ebada69a5c2898f7c1025558f\" data-private-watermark-src=\"v2-02eab3ff4ab5f03b5db167b78b6242d0\"></p>\n<p data-pid=\"8QtI7IDt\">但构造虽然类似锂动力电池，但和锂动力电池不一样，电能的存储并不需要化学反应，而是一种电荷的纯物理迁移。充电后，电能作为电荷存储在板之间的电场中。当放电时，电流从电场中快速流出。无论是充放电，理论上超级电容器都不会消耗或耗散能量。</p>\n<p data-pid=\"9wPAsEh5\">超级电容器储能方式实际已经用在了多种载具上，但大多都是超级电容器搭配锂动力电池使用。</p>\n<p data-pid=\"Yd81pVnX\">因为双电层电容超级电容的充放电不需要化学反应，而是直接就是电荷的迁移，所以拥有极快的充放电速度。而充电快是好事，但放电速度过快，实际并非一件好事。因为大部分载具都需要保证续航，需要储能装备源源不断地释放能量。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7c6215f466ef42e5ad778f4c6e8cb0df_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1008\" data-rawheight=\"504\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7c6215f466ef42e5ad778f4c6e8cb0df\" data-watermark-src=\"v2-6ae76b12a63b80518766775ffb043fc0\" data-private-watermark-src=\"v2-6645103a61d9cca1f7fb66f20416e7d8\"></p>\n<p data-pid=\"3VtIpqb0\">2017年11月，世界第一艘千吨级纯电池推动载重船舶在广州整体吊装下水，填补了世界同吨位内河双电驱动散货船的空白，船上安装有重达<b>26吨的超级电容+超大功率的锂电池</b>，整船电池容量约为2400千瓦时，相当于约30—50台电动汽车电池容量。船舶在满载条件下，航速最高可达12.8公里/小时，续航力可达80公里。</p>\n<p data-pid=\"Zv43Zp3J\"><b>锂动力电池</b>负责船舶的平稳行驶（缓慢放电），而<b>超级电容</b>负责紧急情况的行驶（快速放电），而船舶的减速，也可以很方便快速地给<b>超级电容充电，实现动能的回收。</b></p>\n<p data-pid=\"HdIJ8Wzr\">实际，混合动力汽车里面，早就使用了<b>超级电容器+锂动力电池</b>的储能方式。</p>\n<p data-pid=\"6fsI-Ror\">比如制动能量回收，就可以用超级电容器来进行大电流的瞬时回收，而在需要急加速和爬坡的时候，把超级电容器的电量快速释放，可以获得短时间的大功率、大动力。</p>\n<p data-pid=\"-2EAFzZ3\">美国的Maxwell<a href=\"http://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/te/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Te</a>chnologies是业界最知名的超级电容器生产研发的企业，截至2018年底全球有超过610万辆汽车在使用其超级电容器技术。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1f60428362c61145d6b972b62e089156_720w.jpg?source=b1748391?rss\" data-rawwidth=\"893\" data-rawheight=\"416\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1f60428362c61145d6b972b62e089156\" data-watermark-src=\"v2-b482d387adbe36d0d3b4b9406b401d21\" data-private-watermark-src=\"v2-008e827d3ebd8f3683107b53150fad28\"></p>\n<p data-pid=\"Sy-Agr2c\">在2018年5月，该公司就向吉利汽车提供“超级电容器”，帮助其混动车型提高“最大功率”。</p>\n<p data-pid=\"Yj_DLYUJ\">但超级电容器的超快放电的特性，在目前阶段，在新能源汽车上，依旧还只能是锂动力电池的辅助，还无法独自担任长续航的重任。</p>\n<p><br></p>\n<h2>飞轮储能</h2>\n<p data-pid=\"G3zAT7ME\">想起十多年前，自己在一家日本电子电器工厂，其中一个产品就是生产某国外的山地自行车的小型飞轮储能装置，靠制动回收来储存能量，可以供自行车照明，好处就是不受温度影响，寿命长，但容量很小，也基本存不了电。</p>\n<p data-pid=\"J3lkoxj-\">言归正传，飞轮储能是旋转绕定轴旋转的转动刚体在获得电能时加速获得动能，而减速过程则会减少动能而转为电能。而如果不充放电，则是浮充状态。</p>\n<p data-pid=\"IAk47Ihd\">飞轮储能装置由<b>飞轮、轴、轴承、电机、真空容器、电力电子变换器</b>组成。</p>\n<p><img src=\"https://pica.zhimg.com/v2-5addd8775165ded73647a09f61883b89_720w.jpg?source=b1748391?rss\" data-rawwidth=\"398\" data-rawheight=\"371\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5addd8775165ded73647a09f61883b89\" data-watermark-src=\"v2-09aa480a63462f1c77d1cfa31e652e7b\" data-private-watermark-src=\"v2-0693a1cf32ad3231a2f0466bcb7a8499\"></p>\n<p data-pid=\"mu40ZJXR\">储能时，电动机带动飞轮高速旋转，电能转换为飞轮的动能。放电时，飞轮带动发电机，自身减速。无论充放电，都没有化学反应参与，也就是不存在化学环境污染问题。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e05b564ee81814c51843845891e72f5a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"570\" data-rawheight=\"276\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e05b564ee81814c51843845891e72f5a\" data-watermark-src=\"v2-8737acb36567ac4c318568dbc890f235\" data-private-watermark-src=\"v2-9c0d95ef72c9c09df4f51ff41591da01\"></p>\n<p data-pid=\"tm8BoQZC\">自古以来，飞轮储能、释放能量，贯穿到历史的各个阶段，从古老的纺车到蒸汽机，一直都是靠着飞轮的惯性来运作。不断给飞轮一个动能，让其不断循环，这种飞轮因为和外界的摩擦（轴承摩擦，空气摩擦），即便有着较高速度的初始动能，也会短时间内消耗殆尽，必须要外界能量才能持续运转，根本就无法储能。</p>\n<p data-pid=\"eoHWCFFP\">而现在飞轮所以能够依靠内部的飞轮动力储能，一个是非接触式的电磁轴承，另一个则是飞轮运行的真空环境。加上高温超导技术、高强纤维复合材料的帮助，现在的飞轮已经在储能方面进入了实用阶段。</p>\n<p data-pid=\"PY5-Gpw-\">飞轮最早作为蓄能电池，是在20世纪的60--70年代，美国NASA首次运用在了卫星上。</p>\n<p><img src=\"https://pica.zhimg.com/v2-b7fb26a8ee1622be56036306c01c5dc5_720w.jpg?source=b1748391?rss\" data-rawwidth=\"593\" data-rawheight=\"458\" data-size=\"normal\" data-caption=\"NASA研制的飞轮\" data-watermark=\"watermark\" data-original-src=\"v2-b7fb26a8ee1622be56036306c01c5dc5\" data-watermark-src=\"v2-9faae19017d302fdd7cc80983edbf551\" data-private-watermark-src=\"v2-963c036027ce6c07b8f0db98638fc702\"></p>\n<p data-pid=\"mTwYFpiU\">其后飞轮储能也应用在了汽车上，在保时捷918RSR，采用的是混合动力，除开发动机外，副驾驶位置还有一个飞轮储能系统。</p>\n<p><img src=\"https://pica.zhimg.com/v2-41eea5745a9e65f7f009226e9b3fb128_720w.jpg?source=b1748391?rss\" data-rawwidth=\"497\" data-rawheight=\"244\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-41eea5745a9e65f7f009226e9b3fb128\" data-watermark-src=\"v2-0350d8311b00ac9c08cf2bba5ecaa83c\" data-private-watermark-src=\"v2-59388c9655edf29b1df35962a23c5198\"></p>\n<p data-pid=\"dkM5Zr5Z\">平心而论，如果光从技术上看，其实无论在性能指标，安全性，环保，寿命、储能密度，能量转换效率，加之体积小，重量轻，飞轮电池都很适合汽车使用。</p>\n<p data-pid=\"bJxDlF0X\">但飞轮如果要达到高效的储能效果，基本<b>飞轮的转速得在50，000转/分</b>往上。这样的飞轮储能装置无论是内部、外部所用的材料都非常昂贵，否则无法承受这样的高转速。这也意味着装载在车辆上的飞轮储能设备价格的高昂，现阶段无法普及到普通汽车上面，而只能在昂贵的跑车上面尝鲜。</p>\n<p data-pid=\"MZGfFXJw\">现阶段用的飞轮储能，主要应用场景还是用在了公共大型载具上，比如地铁，用于进站减速的能量回收。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6462ef69bc4fcf328ed06c3c5636408b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"553\" data-rawheight=\"94\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6462ef69bc4fcf328ed06c3c5636408b\" data-watermark-src=\"v2-0f32a713676a8e09ad2d766f8c8653ad\" data-private-watermark-src=\"v2-b9e54cf0333c08cdccd02d247127af4b\"></p>\n<p data-pid=\"0pxOGHtL\">相比电容储能和中压逆变储能，飞轮储能有更好的节能效果，在美国地铁站使用中，能够实现20-30%的节能效果。</p>\n<p data-pid=\"-seNOmdj\">综合来说，作为能装载在批量生产的混动汽车上的主要储能装置，必须要符合<b>能量反馈快，体积小，性能稳定支持长续航，成本还要低</b>的前提。而飞轮、压缩空气、超级电容都有着各自鲜明的特性，目前阶段来说，都无法作为混合动力汽车的主要储能装置。</p>\n<p data-pid=\"uVozaupe\">参考：</p>\n<p data-pid=\"-VeToRcc\">1、“<a href=\"http://link.zhihu.com/?target=https%3A//xueqiu.com/6702987851/178090157\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">xueqiu.com/6702987851/1</span><span class=\"invisible\">78090157</span><span class=\"ellipsis\"></span></a>”</p>\n<p data-pid=\"nyxZf5tm\">2、”<a href=\"http://link.zhihu.com/?target=https%3A//baijiahao.baidu.com/s%3Fid%3D1706522773049943181%26wfr%3Dspider%26for%3Dpc\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">baijiahao.baidu.com/s?</span><span class=\"invisible\">id=1706522773049943181&amp;wfr=spider&amp;for=pc</span><span class=\"ellipsis\"></span></a>”</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/319174675/answer/2464922188?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">22 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/513320709?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何用能量的角度解读电动汽车？</a><br><a href=\"http://www.zhihu.com/question/517474898?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">电动汽车动力电池的压差问题？</a><br>\n","link":"http://www.zhihu.com/question/319174675/answer/2464922188?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"电动车没有大幅提高续航里程的情况下，研发方向是不是应该转向快充技术？","date":"2022-05-02 01:33:36","description":"\n<p data-pid=\"QjrultVl\">题主的思路大体是正确的，但有那么一点点偏差。<b>电动汽车确实不应该一味追求续航里程的提高，而应该在充电上下功夫 —— 除了充电速度之外，更重要的是充电便利性</b>。</p>\n<h2>一、60-100kW的充电速度很慢吗？</h2>\n<p data-pid=\"865E5Fud\">以特斯拉为例，目前Model 3双电机版最大充电功率250kW、标续版170kW<sup data-text=\"\" data-url=\"https://zhuanlan.zhihu.com/p/90169945\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>；我自己开的小鹏P7最高在85kW左右。</p>\n<p data-pid=\"0QNzBjN2\">当然，最大充电功率并不等于实际充电功率，国外Model 3的实测充电曲线如下图的蓝线<sup data-text=\"\" data-url=\"https://www.youtube.com/watch?v=PPrVZtzAqX4\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\">[2]</sup>：40%SOC以下时可以实现195kW充电、50%/60%/70%/80%/90%SOC时分别降为154kW/107kW/89kW/57kW/32kW。</p>\n<p data-pid=\"u8GUvmkF\">同时测试的奥迪e-tron的最大功率虽然不如Model 3，但平均功率却强得多。80%SOC时还有125kW的充电功率、96%时还有63kW的充电功率。</p>\n<p><img src=\"https://pica.zhimg.com/v2-cb22a838687034d48bfaf6936ee87ac2_720w.png?source=b1748391?rss\" data-caption=\"图片来源[2]\" data-size=\"normal\" data-rawwidth=\"2656\" data-rawheight=\"995\" data-watermark=\"original\" data-original-src=\"v2-cb22a838687034d48bfaf6936ee87ac2\" data-watermark-src=\"v2-fb433a3a92b2c9d97f5a0e8da2b8cde6\" data-private-watermark-src=\"v2-8a4dc9b67f1fa1ea03e41f5d76e53288\"></p>\n<p data-pid=\"KkuXztM7\">Model 3与奥迪e-tron的充电功率画成曲线如下图所示：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9759832484ca2dc4bf0391918d4cbe2a_720w.png?source=b1748391?rss\" data-caption=\"图片来源[2]\" data-size=\"normal\" data-rawwidth=\"839\" data-rawheight=\"472\" data-watermark=\"original\" data-original-src=\"v2-9759832484ca2dc4bf0391918d4cbe2a\" data-watermark-src=\"v2-6cd3280c0d3f57a769bcc7811ef96d7b\" data-private-watermark-src=\"v2-74400032a71009e4e406c4a98c8420b1\"></p>\n<p data-pid=\"N2g6lru6\">题主说：「我国的充电桩功率只有60~100千瓦」。咱们就按平均80kW来算。</p>\n<p data-pid=\"mE7SyeXs\">不考虑保有量极低的奥迪e-tron，假设你开的是Model 3性能版，也只是有0%-70%的SOC范围内可以享受到80kW以上的充电功率。</p>\n<p data-pid=\"m3l2ABmx\">以78.4kWh的高性能版Model 3为例，20%-70%的平均充电功率是155kW。</p>\n<ul>\n<li data-pid=\"fX5DBvHW\">\n<b>使用200kW的超充桩</b>：20%-70%充电时间为15分钟。</li>\n<li data-pid=\"cyJeA6Gt\">\n<b>使用80kW  的普通桩</b>：20%-70%充电时间为29.4分钟。</li>\n</ul>\n<p data-pid=\"HaLxqeWJ\">也就是说，从20%SOC充到任何电量值，使用200kW的超充桩最多只比80kW充电桩快了15分钟而已。</p>\n<p data-pid=\"P_lzwnJU\">这还是Model 3高性能版的数据，如果是Model 3标续版、其它品牌电动车，这个差距会进一步缩小。<b>例如我自己开的小鹏P7，最大充电功率80kW+，70%SOC时降低为70kW、85%SOC时降低为40kW。</b>使用200kW充电桩与80kW充电桩，是完全没有区别的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9a4750f8f2a8ca2e2174cb66b59691fa_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"980\" data-watermark=\"original\" data-original-src=\"v2-9a4750f8f2a8ca2e2174cb66b59691fa\" data-watermark-src=\"v2-3dfabec4bc97847354ec6b4f5fc7154d\" data-private-watermark-src=\"v2-5acd7ce93a97ede9df3572796f7de0cd\"></p>\n<p data-pid=\"uIJKY8bM\">也就是说，针对市面上的主流电动车来说，60-100kW的充电功率真的不低了。问题在于：<b>服务区上的国网充电桩数量本来就少、损坏又频繁、节假日存在排队情况，且普遍存在降功率的问题</b>。</p>\n<p><img src=\"https://pica.zhimg.com/v2-09d21d03bd10e42326a3825619e1d878_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"987\" data-rawheight=\"727\" data-watermark=\"original\" data-original-src=\"v2-09d21d03bd10e42326a3825619e1d878\" data-watermark-src=\"v2-5ebd521d69d881452e5165612a549fc8\" data-private-watermark-src=\"v2-22bcab9f4b8e10a8c8484ac5c36d94c5\"></p>\n<p data-pid=\"M7FFZYTJ\">根据我开电动车走南闯北的经验，各省服务区的充电功率大概如下：<b>浙江与江苏普遍为30-45kW、安徽普遍为60kW、河南60-80kW、山东80kW</b>。</p>\n<p data-pid=\"kPhzqHFb\">电动车主的心理状态一般是这样的： <b>遇到30kW桩叫爹骂娘、45kW桩波澜不惊、60kW桩心情舒畅、80kW桩惊喜万分</b>。</p>\n<p data-pid=\"NjzNLRCc\">这并不是国网不靠谱，而是国网早在2015年就布第一批桩了。2015年是什么概念啊？ 电动汽车还是遥不可及的产品，特斯拉生死未卜，蔚小理才刚刚成立。<b>当我们看到国网老旧充电桩成批故障、降功率使用、操作不便时，先别着急骂，它们之所以残破不堪，只是因为英雄暮年</b>。</p>\n<p data-pid=\"4KzC_bhE\">不管怎么说，国网付出了高昂的成本，打破了充电模式下的「鸡生蛋、蛋生鸡」难题。为电动汽车企业和后续的第三方充电桩企业的发展提供了条件。</p>\n<h2>二、车企正在做快充</h2>\n<p data-pid=\"TOv1vekz\">Model 3与奥迪e-tron都属于当前的平台，下一代平台大家都在往超快充的方向去做，有一个关键技术就是800V平台。例如小鹏G9的800V平台，最大可支持480kW充电功率。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0474fbfbbfef4137ecb0c6d0dcf0bfa3_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"969\" data-rawheight=\"279\" data-watermark=\"original\" data-original-src=\"v2-0474fbfbbfef4137ecb0c6d0dcf0bfa3\" data-watermark-src=\"v2-e0e6583e844fcd97a5fa6010b52d0960\" data-private-watermark-src=\"v2-dde6398e09f21f3ced8be2fdbb14b0fa\"></p>\n<p data-pid=\"j080PShA\"><b>充电功率大上去了，找不到超充桩等于白干</b>。所以要自建超充桩，而超充桩对功率需求太大，电网不一定能满足企业的需求，所以还要自建储能……</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0b3e7b2c85e9a3f8c450c6d2151db081_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"969\" data-rawheight=\"302\" data-watermark=\"original\" data-original-src=\"v2-0b3e7b2c85e9a3f8c450c6d2151db081\" data-watermark-src=\"v2-eb692e377b08b15a1fceaf95d6fc17c7\" data-private-watermark-src=\"v2-4de784b4e47d10e3e3c6626bf1c07ffc\"></p>\n<h2>小结</h2>\n<p data-pid=\"MldKuOgG\">到这里，我们终于可以回答此题了：</p>\n<ul>\n<li data-pid=\"XRRFHc4O\">60-100kW的充电功率不低了，只是能真正稳定提供这个功率的充电桩并不普遍。特别是需求最迫切的高速服务区，数量不够、功率不足。</li>\n<li data-pid=\"KwyRbBWE\">60-100kW的充电功率不低了，再提高功率的边际收益变低。</li>\n<li data-pid=\"18fUdMXN\">车企正在研发超快充技术，迭代升级的契机是800V平台，马上就要来了。</li>\n</ul>\n<p data-pid=\"Hw__LaoQ\"><b>比充电速度更重要的是充电便利性。目前主要的充电场景均存在改进潜力</b>：</p>\n<ol>\n<li data-pid=\"2BB_dnOg\">\n<b>家用慢充</b>：无论充电换电，家用慢充都是最主要的补能方式。从古老的3.3kW到如今主流的7.7kW，将来可能还会有11kW-20kW的三相交流慢充甚至无线充电。从小区整体来看，未来需要有序充电、公共电桩等方式来解决配电额度问题。</li>\n<li data-pid=\"zIZ2WuxB\">\n<b>商场慢充</b>：大型商场停车场逐渐开始有充电桩，多为7.7kW慢充；品牌的超充桩也在这里建设，功率可达80-150kW。实际上，这种停车2-4小时的场景，慢充太慢，快充太快（建设成本高，需要提前挪车），最适合的应该是20kW的「中速充电」。</li>\n<li data-pid=\"D25uSYsl\">\n<b>目的地慢充</b>：度假酒店的慢充，现在普及的还比较少，实际上非常实用必要。不必快充，慢充即可。</li>\n<li data-pid=\"HN131eSA\">\n<b>城市快充</b>： 没有家用充电桩的话，城市快充就成了主要的补能方式。一般建于商场停车场或专用停车场，很多品牌专属桩也属于此形式。</li>\n<li data-pid=\"nrwKsTvG\">\n<b>高速快充</b>： 这是目前最薄弱的环节，高速上建桩比较困难（牵扯单位比较多）、旺季淡季的客流量差异也大，盈利困难。特斯拉、小鹏等头部新势力也在发力超快充。</li>\n</ol>\n<p data-pid=\"MmVNDK68\"><b>其中，题主最为关注的「超快充」，仅对场景4与5有用，对更为常见的场景1、2、3没啥用</b>。</p>\n<p></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhangkangkang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">张抗抗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/514658377/answer/2464031731?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">15 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/514890737?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么电动汽车没有“正负电池”，将一辆车的电池分成若干快同时充电提升充电效率？</a><br><a href=\"http://www.zhihu.com/question/518933711?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">电动车充电时长？</a><br>\n","link":"http://www.zhihu.com/question/514658377/answer/2464031731?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"身体健康百病不侵，ICU 医生助你抢鲜了解《中国居民膳食指南（2022）》","date":"2022-05-01 07:00:00","description":"最近需要我们关注的公共卫生事件，除了Omicron一浪接一浪的冲击我们的生活外，就是最新发布的《中国居民膳食指南（2022）》（下称《指南》）了。近期的疫情和国家防疫政策，在此不敢妄加评论，大家做好呼 ...<a href=\"https://sspai.com/post/72984\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72984"},{"title":"如何评价《明日方舟》三周年前瞻特别节目？","date":"2022-05-01 04:57:00","description":"\n<p data-pid=\"lOxgS3iz\">看完舟游长达两小时的三周年直播，这多到离谱的内容量啊……其他不说，光直播里播出的那一打宣传片时髦值就爆炸，配乐也是，审美这块鹰角真是 cool 到不行。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-bb76973685269b0badb32d67369dfa09_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-bb76973685269b0badb32d67369dfa09\" data-watermark-src=\"v2-e73ecf71b2df4838c8d208ac6e67adae\" data-private-watermark-src=\"v2-9aebc4dcb2a829c7b82a9dc8ccfa6fb8\"></p>\n<h3>边消化边简单梳理一下直播内容吧：</h3>\n<ul><li data-pid=\"fqVY5FkX\">周年活动是深海猎人续篇（很好，继续血源诅咒），这个之前好像已经有不少人猜到了，看 PV 还有标题「愚人号」应该是要发掘伊比利亚黄金舰队的遗产，「深海」与「伊比利亚大静谧」可以说是舟游世界观中个人最感兴趣的内容之一了，非常期待这次剧情！</li></ul>\n<p><img src=\"https://pic2.zhimg.com/v2-b012f04f972e5ae1d75499f4f3c5b2f9_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"840\" data-watermark=\"original\" data-original-src=\"v2-b012f04f972e5ae1d75499f4f3c5b2f9\" data-watermark-src=\"v2-6a573b66a057ec28a754d061c61f3c21\" data-private-watermark-src=\"v2-1ca1b86db08b9a12d6cff9501fac8688\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-8d21128948dfe23cadc086ecc01be6ac_720w.jpg?source=b1748391?rss\" data-caption=\"大审判官面具之下原来长这样，这可是连凯尔希都忌惮三分的人物啊（更新：图中老者并非担任艾丽妮师傅的那位大审判官，而是审判庭中最年长的「圣徒」卡门）\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"838\" data-watermark=\"original\" data-original-src=\"v2-8d21128948dfe23cadc086ecc01be6ac\" data-watermark-src=\"v2-bad89a859a24a8b844efd1668985da46\" data-private-watermark-src=\"v2-785253c813f2ba4384bca7c2ab10568e\"></p>\n<p data-pid=\"1-9bUAO1\">先导 PV 传送门。有一说一，自从二周年第一次出先导动画开始到现在， 鹰角这个 3D 动画的品质真是越来越牛了。</p>\n<a href=\"https://zhuanlan.zhihu.com/p/503703175\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-99f90421dfa5826d20c42a3513ba50a8_qhd.jpg?source=b1748391\" data-image-width=\"1146\" data-image-height=\"717\" class=\"internal\">明日方舟：《明日方舟》SideStory「愚人号」活动先导PV</a><ul><li data-pid=\"aNCcpZOY\">三周年限定是幽灵鲨异格不并让我感到意外（但是好看！），意外的是陪跑六星竟然是二周年就和我们见过面的审判官，还要送一个新六星医疗干员。另外浊心蒂会实装一个非常华丽的 Live2D 新皮肤，蓝蒂→红蒂→绿蒂，这下光的三原色了。</li></ul>\n<p><img src=\"https://pic3.zhimg.com/v2-8e54a90c92fa635eb5e8b80e5b3071d9_720w.jpg?source=b1748391?rss\" data-caption=\"归溟幽灵鲨，异格特种\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-8e54a90c92fa635eb5e8b80e5b3071d9\" data-watermark-src=\"v2-98c80188fb55ebf8bd7dc9094cc3c896\" data-private-watermark-src=\"v2-eb4722cfc2b5b1ffe21fecafc91eb058\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-99996dcf1c0ce9b7a903ede7840c84fb_720w.jpg?source=b1748391?rss\" data-caption=\"老熟人了，倔强的审判官小姐\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-99996dcf1c0ce9b7a903ede7840c84fb\" data-watermark-src=\"v2-7498ae090d611cf37f585c2093483e6a\" data-private-watermark-src=\"v2-baf54ac22faa4709b9dede01e6e915aa\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a0dcb001b7f0b7f7656b22f65c54ae83_720w.jpg?source=b1748391?rss\" data-caption=\"红蒂→绿蒂\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-a0dcb001b7f0b7f7656b22f65c54ae83\" data-watermark-src=\"v2-836d900976e2114e5ad0568b9290a2c5\" data-private-watermark-src=\"v2-a09ddad78764a3b2f061873c1cdf6fc1\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-2e666f9a4294f2971e0d67a2927b698f_720w.jpg?source=b1748391?rss\" data-caption=\"本次活动赠送六星，第一个六星男医疗，异常状态特化对策卡\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-2e666f9a4294f2971e0d67a2927b698f\" data-watermark-src=\"v2-6b078003664f6d72a17c69c6b0bfe90c\" data-private-watermark-src=\"v2-2aace3135a1b6de7049899fba6c8c7df\"></p>\n<ul><li data-pid=\"Oz6y_5s0\">然后是后续活动剧情的前瞻，信息量爆炸。按顺序是莱塔尼亚巫王篇（播了一个手抄本插画风格的历史记录片，配音那口德式英语真带感啊）、哥伦比亚莱茵生命篇（风格和莱塔尼亚那个 PV 形成极强烈的对比，简约而富有科技感，并且明确提及了关键的「炎魔事件」，终于要揭晓小火龙身世了吗！？）以及只给出非常有限信息（造访小矮人杜林一族家乡）的夏活。</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-78b2f05dca3c2124ee9d4f1495c9e412_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"3240\" data-watermark=\"original\" data-original-src=\"v2-78b2f05dca3c2124ee9d4f1495c9e412\" data-watermark-src=\"v2-3af045d52ba9ed4050003fd69d9e889e\" data-private-watermark-src=\"v2-5d0f9b64887a46b7a42b4a83e70c24f4\"></p>\n<ul><li data-pid=\"Xw3LAv0I\">一系列系统上的升级，主要有四点：</li></ul>\n<ol>\n<li data-pid=\"FWTeD2Zr\">一是为了照顾玩家缩短剿灭时间，将提供可以直接跳过作战领取奖励的剿灭券，而且这个券是通过完成每日任务就可以获得的，终于可以不用每周挂好长时间的剿灭来刷玉啦；</li>\n<li data-pid=\"Is5MI5GI\">二是将开放龙门币本与经验书本的第六关，方便玩家更快刷资源；</li>\n<li data-pid=\"613bx3wk\">三是增加了理智合剂的恢复量；</li>\n<li data-pid=\"OcmTold9\">四是升级了模组系统，部分干员将拥有第二模组。</li>\n</ol>\n<p data-pid=\"EZ5hYJQ_\">可以说全部都是优化游戏体验到点子上的改进了。</p>\n<ul><li data-pid=\"poZZt1rw\">放出了音乐会「音律联觉 · 灯下定影」的消息，当然因为上海疫情肯定是延期了。对应的主题皮肤非常棒，萨卡兹大姑娘的皮肤必买。</li></ul>\n<p><img src=\"https://pic2.zhimg.com/v2-d93ceb5f1f8b9daff2f02d884fbdf212_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-d93ceb5f1f8b9daff2f02d884fbdf212\" data-watermark-src=\"v2-49c8da8c336c64e6a2cbac7a5cc936e3\" data-private-watermark-src=\"v2-6978582027987fe1c8fb2ece2f9df3b4\"></p>\n<ul><li data-pid=\"gck6GZ-z\">给了全新模式「保全派驻」的消息。介绍听得有点云里雾里，具体还是等后续公开吧。</li></ul>\n<p><img src=\"https://pic3.zhimg.com/v2-70673c2ad43ac03c674b2f3380246b72_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-70673c2ad43ac03c674b2f3380246b72\" data-watermark-src=\"v2-5f1b7b0e9e0b54155b036cd72cb410db\" data-private-watermark-src=\"v2-3fac096657b2f7f4884967750b70c27a\"></p>\n<ul><li data-pid=\"rTwNdqkm\">公开了 2.5 周年庆典上公开的舟游主线动画化项目《黎明前奏》的新进展，展示了一段先导 PV，正式上线时会有中配与日配两个版本；还提及鹰角已经建立下属的动画工作室，名称叫「重力井」。</li></ul>\n<p><img src=\"https://pica.zhimg.com/v2-6d13671c84a0cbe6253902ff4ad85811_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"370\" data-rawheight=\"209\" data-watermark=\"original\" data-original-src=\"v2-6d13671c84a0cbe6253902ff4ad85811\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"w9-YvjRl\">为之前被喷得体无完肤的美术设定集 Vol.1 提供了补偿计划，所有在本月 20 号前购买了设定集的玩家都可以免费获得升级后的 Reset 版书籍。看直播里对新书的展示，鹰角确实好好吸取了教训和玩家建议，对原本被人吐槽「全是空白」的书页进行了重排版，插入了大量角色原画与设计草案内容。</li></ul>\n<p><img src=\"https://pic2.zhimg.com/v2-ad4f783156f9f4e2ca3a3a8306fc5bbd_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-ad4f783156f9f4e2ca3a3a8306fc5bbd\" data-watermark-src=\"v2-e9d0aa420b12a214d211ee46ea181426\" data-private-watermark-src=\"v2-a8fe163d14a7f85d76a64fc5e89da3e8\"></p>\n<p data-pid=\"jqzYhjbo\">对了，海猫还宣布因为发现大家对泰拉世界的架构与故事背景特别感兴趣，后续会专门推出舟游世界观设定集，将用详尽文字对很多剧情内难以描述的设定细节进行介绍（剧情党/考据党狂喜）。</p>\n<ul><li data-pid=\"MEw1jsd7\">三部衍生漫画的消息：《A1 行动预备组》《罗德厨房》《罗德岛源石记事》。因为之前推出的漫画内容已经累计到一定量了，所以会有推出单行本的计划。</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-130790441a82000f4522c125f9e309e1_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"3240\" data-watermark=\"original\" data-original-src=\"v2-130790441a82000f4522c125f9e309e1\" data-watermark-src=\"v2-ad4b849b3c5b859c81fff5805a80b545\" data-private-watermark-src=\"v2-7a48d651eb37b8da1849a16a1fb952fc\"></p>\n<ul><li data-pid=\"WcH_iuLw\">一系列周边物件消息（联名雪糕、联名邮票都有了，鹰角在经营 IP 这块真心厉害）。个人最惊奇的还是那个 1:3000 比例的罗德岛陆行舰模型，这得多贵啊……</li></ul>\n<p><img src=\"https://pic3.zhimg.com/v2-408f4787b824ac61a9be4a7e9b39efe6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1058\" data-watermark=\"original\" data-original-src=\"v2-408f4787b824ac61a9be4a7e9b39efe6\" data-watermark-src=\"v2-8b09f41df8b526afdf1a26cb370f3bc9\" data-private-watermark-src=\"v2-552c3fa482a2f36d98a0dbb2a53acb2d\"></p>\n<ul><li data-pid=\"ZC64yIF-\">继育碧之后，鹰角×卡普空联动，就是不知道会联动啥游戏。《生化危机》？还是《怪物猎人》呢？万分期待！</li></ul>\n<p><img src=\"https://pica.zhimg.com/v2-1f679abb86e95e236ce437826f5f871f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-1f679abb86e95e236ce437826f5f871f\" data-watermark-src=\"v2-a42029a2efe3e523e652c91174af9fb8\" data-private-watermark-src=\"v2-e10f1486d8e5eee0aeea6cffa4b446cc\"></p>\n<p data-pid=\"5aMdYk5C\">边看三周年生日派对节目边写的，可能有些内容疏漏了语言也有点乱，大家凑活着看下吧。专心看节目去啦，最后就琴柳感一下收尾吧：</p>\n<h3>「你有没有感觉到饼学大厦正从天而降！？」</h3>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ai-luo-38?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">呆罗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/529085857/answer/2454155094?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">101 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/529639915?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待《明日方舟》三周年前瞻直播中的剿灭代理卡？</a><br><a href=\"http://www.zhihu.com/question/520027377?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《明日方舟》制作组通讯 17 期，有哪些新内容值得期待？</a><br>\n","link":"http://www.zhihu.com/question/529085857/answer/2454155094?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"当我们进入下一个地图须弥前，各位觉得须弥会是怎样的国家？","date":"2022-05-01 04:56:44","description":"\n<p data-pid=\"fvPzsqdz\">本文基于前天我发布的一篇闲聊须弥的想法拓展而来，文字经过重新排版并补齐了配图，同时新增了大量新内容。文章涉及对以下话题的讨论：</p>\n<ol>\n<li data-pid=\"Zxhu03HM\">关于须弥文化原型的简单考据</li>\n<li data-pid=\"RuASLkxb\">草元素反应体系及由此引出的衍生讨论</li>\n<li data-pid=\"Z4qXmjPU\">有关须弥特殊种族「蕈兽」的信息</li>\n<li data-pid=\"7Mngo-X3\">草神与时间执政伊斯塔露的可能隐含联系</li>\n<li data-pid=\"OCRpuO_0\">须弥主线揭晓世界观重要真相的可能性</li>\n<li data-pid=\"H5Gp_0JV\">有关须弥卡牌游戏「七圣召唤」的信息</li>\n</ol>\n<p data-pid=\"wjncvXFQ\">本文包含部分未证实的泄露游戏情报，内容仅供参考，一切请以最终游戏实装内容为准（当然也不会等待很久了，预计须弥会在 7 月前后正式开放）。写这篇文章的主要目的还是希望能够抛砖引玉，引发各位原友对未来新地区的讨论，非常欢迎大家在评论区积极交流观点和看法。</p>\n<hr>\n<p data-pid=\"DgHXFUYY\">首先向大家推荐一个须弥势力前瞻分析视频<sup data-text=\"学阀垄断知识！？教令院与草神内斗？学者智者贤者晋升体系，前瞻须弥势力分布\" data-url=\"https://www.bilibili.com/video/BV1S44y1G77E\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>，篇幅不长，但应该是我看过的基于游戏内已出现的须弥线索统合讲解得最全面的视频了。这里也正好讲讲个人对须弥的一些简单看法和理解。</p>\n<p data-pid=\"GPCHzDT6\">虽然在很早以前就已经锁定须弥的原型是地处「西亚-南亚」这片宽泛地区的文明，但在须弥究竟是以哪个文明/国家/宗教共同体为主要原型这个问题上却始终有争议：</p>\n<p data-pid=\"yrQ4zyV5\">早先因受赛诺这一须弥代表角色形象的影响，让大部人认为须弥对应着古埃及；后来随着游戏中开始透露部分须弥地区专有名词，又将对主要原型考察的焦点转移至了古印度和中东地区；再后来「教令院」这一须弥核心机构的确立，令伊斯兰黄金时期的阿拉伯帝国成为须弥无可怀疑的重要原型之一，因教令院原型为「智慧宫」（Bayt al-Ḥikmah），为阿拉伯帝国第二王朝「阿拔斯王朝」时期由哈里发马蒙（Al-Ma'mun）在都城巴格达所设的综合学术机构<sup data-text=\"智慧之家 - 维基百科，自由的百科全书\" data-url=\"https://zh.wikipedia.org/wiki/%E6%99%BA%E6%85%A7%E4%B9%8B%E5%AE%B6\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\">[2]</sup>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6e84cca2104acdf71fcb03d806af2a53_720w.jpg?source=b1748391?rss\" data-caption=\"主线章节预告 PV 中登场的须弥使者赛诺形象带有非常显著的古埃及文明特征（胡狼造型头盔象征埃及神话中的死神阿努比斯），这构成了很多人对须弥的第一印象\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-6e84cca2104acdf71fcb03d806af2a53\" data-watermark-src=\"v2-508d75ffe5cc2d9a32c2757c59332ee4\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f2c49879c2f10c14b72b62f214560fd8_720w.jpg?source=b1748391?rss\" data-caption=\"智慧宫研习包括数学、天文学、医学、化学、动物学及地理学在内的人文科学及自然科学，学者们广泛收集波斯、印度及希腊文献，积累了世界上的各种知识再加以扩展，是当时当之无愧的世界学术中心。著名的「代数之父」花拉子米就是智慧宫的学者\" data-size=\"normal\" data-rawwidth=\"1300\" data-rawheight=\"725\" data-watermark=\"original\" data-original-src=\"v2-f2c49879c2f10c14b72b62f214560fd8\" data-watermark-src=\"v2-d014176e3c34739b4538eea73cb2c4ef\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"0Osi2feM\">到如今，结合各种有关须弥的细节基本可以确认：须弥是以「古波斯」与「琐罗亚斯德教」（Zoroastrianism，说「祆教」或者「拜火教」大家应该更熟悉一点）文化为主要原型，历史上的阿拉伯帝国为次，再杂揉了一系列古埃及、古印度文化要素诞生的「缝合」文明。这个选择当然是非常明智的，因为一些众所周知的原因，在一款面向国际发行的文化娱乐产品中如若过度涉及对伊斯兰教国家与穆斯林元素的化用与讨论，很容易会产生高度风险，而选择波斯这一历史上极度辉煌、如今却不占主流的文化，显然可以在制造中东异域风情的同时又可以最大程度地规避这一问题<sup data-text=\"阿契美尼德帝国 - 维基百科，自由的百科全书\" data-url=\"https://zh.wikipedia.org/wiki/%E9%98%BF%E5%A5%91%E7%BE%8E%E5%B0%BC%E5%BE%B7%E5%B8%9D%E5%9B%BD\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"3\">[3]</sup><sup data-text=\"琐罗亚斯德教 - 维基百科，自由的百科全书\" data-url=\"https://zh.wikipedia.org/wiki/%E7%A5%86%E6%95%99\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"4\">[4]</sup><sup data-text=\"Faravahar - Wikipedia\" data-url=\"https://en.wikipedia.org/wiki/Faravahar\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"5\">[5]</sup>。</p>\n<p><img src=\"https://pica.zhimg.com/v2-d99fb9a869c16038a9f1955ea30c69c2_720w.jpg?source=b1748391?rss\" data-caption=\"盛极一时的波斯帝国（Persian Empire），又称阿契美尼德帝国（Achaemenid Empire），琐罗亚斯德教为其国教\" data-size=\"normal\" data-rawwidth=\"725\" data-rawheight=\"400\" data-watermark=\"original\" data-original-src=\"v2-d99fb9a869c16038a9f1955ea30c69c2\" data-watermark-src=\"v2-fc4be143a42da9b15073b95e2bc8bd83\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-dddb7fcd4efc28a0a6bd52571a54482f_720w.jpg?source=b1748391?rss\" data-caption=\"上图为琐罗亚斯德教的主要象征符号「法拉瓦哈」（Faravahar），一般认为其描绘了守护天使弗拉瓦奇，也有学者认为该标志是拜火教中人类灵魂的样子，是人类灵魂进入末日审判后的新世界（Frashokereti）的状态。也许我们会在须弥地区看到以此为参考原型设计的符文\" data-size=\"small\" data-rawwidth=\"1920\" data-rawheight=\"1029\" data-watermark=\"original\" data-original-src=\"v2-dddb7fcd4efc28a0a6bd52571a54482f\" data-watermark-src=\"v2-c03d0808fac4d63f1fd6c5915427d31a\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"uZbJSYEh\">至于地理方面，目前完全确认须弥是由「蕈菌遍生幽邃的雨林」与「流金般炽热炫目的沙漠」这两种对比强烈的地貌共同组成的国度，甚至须弥主城都有可能是环绕巨树建立的「树上之城」。须弥的这种地貌特征完全区别于已实装的三个地区，对美术设计与画面技术实现都提出了全新要求，当然也让人对这一「雨林与沙漠之国」最终呈现的效果充满了很高的期待。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f25307a28192257a5ba17ae833946b82_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"675\" data-watermark=\"original\" data-original-src=\"v2-f25307a28192257a5ba17ae833946b82\" data-watermark-src=\"v2-c8fde2a826f23a4e417a86baec1d7cb6\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-bf2dbad69b05034946d55234850f449d_720w.jpg?source=b1748391?rss\" data-caption=\"这里就借用尼尔的图来表达一下意思了\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-bf2dbad69b05034946d55234850f449d\" data-watermark-src=\"v2-9a071ffe6b970919c1a6f892112e41c6\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"vqpNHXct\">另外随 2.6 版本实装层岩巨渊中就出现了不少须弥元素，像是位于主矿区隐藏地区的古树与神秘任务道具「干枯的种子」（对应成就「生命之谷的居民」；已泄露的草系突破材料翡翠宝石的描述信息中也提及了「生命」一词，当然这个宝石的信息真伪存疑）以及位于荧光狭道处的那朵有智慧且能通人言的大蘑菇「赞玛兰」都是重要铺垫。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ca08e0d458ea97d46523e04155f1dc59_720w.jpg?source=b1748391?rss\" data-caption=\"地底巨蕈「赞玛兰」（Xamaran），其名称意义不明，姑且只知道其取自某位须弥老友\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-ca08e0d458ea97d46523e04155f1dc59\" data-watermark-src=\"v2-24210cfc7e147ee8d4cb79ce1a7f626b\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-beb5a201f88bb1a976b86842a55fd854_720w.jpg?source=b1748391?rss\" data-caption=\"位于地下矿区隐藏区域中的须弥古树。点亮位于该地区的三座元素方碑后可取得特殊任务道具「干枯的种子」，三座方碑正好对应旅行者已走过的三国象征元素（风、岩、雷），不排除有更深的剧情隐喻意味；另外此地区拥有独特 BGM，风格与矿区大不相同，颇有尼尔配乐的感觉\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-beb5a201f88bb1a976b86842a55fd854\" data-watermark-src=\"v2-2c06c52eb61f178ba2ddf4f98eb6c79e\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-18c2eff1a299fd726dc13446b5a28364_720w.jpg?source=b1748391?rss\" data-caption=\"草系突破材料「生长碧翡」，各元素突破材料的描述都是针对对应神明核心人格属性的概括\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"654\" data-watermark=\"original\" data-original-src=\"v2-18c2eff1a299fd726dc13446b5a28364\" data-watermark-src=\"v2-2ae2f195a47de4bc80bb97c7d5a1ba1b\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"jJ1nQBwW\">甚至在极深地底判罚之钉处旅行者挑战的那只遗迹巨蛇都包含重要的文化背景暗示，因为它的名字「七嗣之虫」实际上源于波斯著名史诗《列王纪》中的典故「哈夫塔维德的蠕虫」（Haftvād the Worm；传说中一条可以无穷无尽的产出丝绸的蠕虫，城主哈夫塔维德与他的七个儿子凭借该虫富甲一方并威胁到有「万王之王」之称的波斯帝国萨珊王朝建立者阿达希尔一世（Ardashir i）的统治，最终被王皆数斩杀。这部分具体可参考齐漱溟老师的考据文章<sup data-text=\"【原神考据】实锤！“树的比喻”与坎瑞亚的覆灭之谜（下）\" data-url=\"https://www.bilibili.com/read/cv16266591\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"6\">[6]</sup><sup data-text=\"Haftvād - Wikipedia\" data-url=\"https://en.wikipedia.org/wiki/Haftv%C4%81d\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"7\">[7]</sup>）。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0eab36d3713376ae11ddb7899de383b0_720w.jpg?source=b1748391?rss\" data-caption=\"比起中文版让人感觉有点云里雾里的名称「七嗣之虫」，英文版中的 BOSS 名「Haftvād the Worm」更直接地反映了文化背景上的原型\" data-size=\"normal\" data-rawwidth=\"1067\" data-rawheight=\"540\" data-watermark=\"original\" data-original-src=\"v2-0eab36d3713376ae11ddb7899de383b0\" data-watermark-src=\"v2-3a69424a3ffb175994953156c7775471\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-3f33c4a41bb2596951120b292677670d_720w.jpg?source=b1748391?rss\" data-caption=\"15 世纪《列王纪》（Shahnameh）手抄本中描绘阿达希尔一世（Ardashir i）杀死哈夫塔维德（Hafvād）蠕虫的插图\" data-size=\"small\" data-rawwidth=\"1347\" data-rawheight=\"1947\" data-watermark=\"original\" data-original-src=\"v2-3f33c4a41bb2596951120b292677670d\" data-watermark-src=\"v2-0adf2af6894b6f33b787a7d68e732a81\" data-private-watermark-src=\"\" data-tags=\"porn\"></p>\n<p data-pid=\"vAWt_AIN\">对了，差点忘了讨论早已公开的须弥主线标题「虚空劫灰往世书」，这个标题与波斯文化的关联性就弱了不少，而是同须弥的国度名一样带有浓厚的古印度与印度教色彩。标题中出现的「往世书」其实是一个专有名词，为一类古印度文献的总称，梵语写作「purāṇa」，意为「古代的」或「古老的」。往世书通常为问答式诗歌体，表现为将不同人物联系起来的一系列故事，其覆盖的话题非常广泛，包含故事、哲学和宗教，大多讲述宇宙和人类的产生、帝王和仙人的世系等内容<sup data-text=\"往世书 - 维基百科，自由的百科全书\" data-url=\"https://zh.wikipedia.org/wiki/%E5%BE%80%E4%B8%96%E4%B9%A6\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"8\">[8]</sup>。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-30c89427b439303f0ed6c39023f71279_720w.jpg?source=b1748391?rss\" data-caption=\"克什米尔地区，18 世纪晚期纸本往世书样本\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1218\" data-watermark=\"original\" data-original-src=\"v2-30c89427b439303f0ed6c39023f71279\" data-watermark-src=\"v2-9cc3557f8d83aae14448ac83e3145a81\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"KCIxGr43\">这里想小小吐槽一下，个人感觉须弥实装后名词名称这块恐怕会造成剧情理解和讨论上的一些困难，毕竟就目前已出现的一些词语来看已经是相当的拗口了，在记忆难度上哪怕比起稻妻地区最长专有名词「御见鸣神主尊大御所大人」也是要高得多的（拿教令院职称举例：「帝力耶悉」「陀裟多」「珂般荼」，请问大家看完能记住吗2333）。</p>\n<p data-pid=\"257vQowf\">这种「困难」的感觉其实与文化上的隔阂关系比较大，毕竟对绝大部分国人玩家而言，对与我们本国文化相近的（以及作为二次元文化发源地的）日本文化的了解程度与「亲切感」肯定是会远远高于「不受关注的」西亚与南亚地区文化的，个人也是如此。相信等须弥正式实装，对其剧情的挖掘和考据会是一件富有挑战且充满趣味的事，正所谓以玩促学，不也挺好的嘛！</p>\n<hr>\n<p data-pid=\"Y-tqhTJ2\">随着须弥即将实装，七元素体系中让大家等待已久的最后一块拼图 —— 草系也将很快与我们见面。自开服以来对对草系反应的猜测就一直此起彼伏，因为草系角色一鸽再鸽，不少玩家开始怀疑制作组到底如何合理地将草系纳入到现有元素体系中。到目前的 2.6 游戏版本网上又开始流传所谓的内测草系反应，个人以为这个版本的说法可信度应该是很高的，毕竟作为信息源的那位「舅舅党」的确战绩斐然，像之前的 1.3 版本刻晴复刻、1.4 版本公子再度复刻还有雷神建模（当初一度被嗤笑为「村姑」）等，这位可是全部都押中了的。</p>\n<p data-pid=\"RXf2m9Wx\">按目前的网传说法，草元素反应仅与火系、雷系和水系反应，而不与冰系、风系和岩系反应。除了开服即有的与火元素产生的剧变反应「燃烧」（Burning）外，草元素与雷元素接触将触发「激化」（Intensified）反应，掉落元素微粒并同时增加雷与草元素易伤；与水元素接触时则将造成「蔓生」（Overgrown）反应，掉落特殊蘑菇孢子，孢子遇水造成 AOE 伤害。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ea68ecc7cf707c6a2cc002bdbfb299f1_720w.jpg?source=b1748391?rss\" data-caption=\"水元素是坐稳元素反应之王的宝座了\" data-size=\"normal\" data-rawwidth=\"1160\" data-rawheight=\"1110\" data-watermark=\"original\" data-original-src=\"v2-ea68ecc7cf707c6a2cc002bdbfb299f1\" data-watermark-src=\"v2-bfe8c8844e8168ba806b5dd837788b63\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"1sCGmXz3\">姑且不讨论反应细节（不过还是明显看出草元素体系有与元素精通高度关联的倾向）以及考虑对现有元素体系的影响，仅从「反应是否在逻辑上合理」这点发散来看，目前网传的草反应的确有着一定的道理：</p>\n<p data-pid=\"Rh1gpM2V\">草雷反应在灵感上应该是基于自然界「自然固氮」（Natural nitrogen fixation）作用中的「气电固氮」，即大气中游离态的氮单质（氮气）在主要表现为闪电的高能放电现象中转化为含氮化合物（如硝酸盐、氨、二氧化氮）的过程，而被固定的氮起到了天然「氮肥」的作用，有利于作物生长<sup data-text=\"Nitrogen fixation - Wikipedia\" data-url=\"https://en.wikipedia.org/wiki/Nitrogen_fixation\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"9\">[9]</sup>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-890ab2c2421b7d484a516156f8459331_720w.jpg?source=b1748391?rss\" data-caption=\"闪电造成的自然固氮效果有利于作物茁壮生长，带来更好的收成。古代日本观察到这一现象，将闪电喻为稻谷的「妻子」\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"900\" data-watermark=\"original\" data-original-src=\"v2-890ab2c2421b7d484a516156f8459331\" data-watermark-src=\"v2-31a9b4b64d2fcadde8654f78aafb9fca\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Xo55X2uG\">实际上，日语中的「稻妻」（いなずま，Inazuma）一词就与此有关，古代日本人发现每当雷雨交加后稻田的长势就会变好，不理解背后科学原理的人们以为这是闪电打到稻子上与稻子结婚了，才有了饱满的稻穗，久而久之便赋予了闪电「稻谷的妻子」这样的别称了<sup data-text=\"いなづま - Wikipedia\" data-url=\"https://ja.wikipedia.org/wiki/%E9%9B%B7#%E7%A8%B2%E5%A6%BB\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"10\">[10]</sup>。因此，草与雷元素接触发生「激化」是非常合理的设定。</p>\n<p data-pid=\"BxsBXAbU\">草水反应就非常容易理解了，因为「水乃生命之源」。反应产生蘑菇孢子这种衍生物则非常地具有须弥特色，毕竟蘑菇与须弥的相关频率实在是太高了：</p>\n<p data-pid=\"kFpkeS96\">好兄弟立本就曾告诉我们「须弥人除了蘑菇，其他什么都喜欢」（因为须弥蘑菇实在是随处可见、太过泛滥），稻妻离岛瓦希德经营的须弥特产店「葱茏之愿」中摆满了各式各样的不远万里从须弥进口的菌菇，作为须弥最重要的大宗出口商品，璃月和稻妻都已建立或正在建立专门的商贸通道（踏鞴物语结尾就提到了范卫兵管理稻妻与须弥之间蘑菇贸易的远国御用）。可以说，「蘑菇」就是须弥的一种标志或代名词。</p>\n<p data-pid=\"PunmtaFq\">须弥甚至还有着由蕈菌进化而来、被称为「蕈兽」的特殊生物，在巨渊中我们也终于实际见识到了这个族群的成员「浮游水蕈兽」，它们算得上是目前原魔角色可爱榜 No.1 了<sup data-text=\"Twitter 图源 @yolanda315732\" data-url=\"https://twitter.com/yolanda315732/status/1510997475745697794\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"11\">[11]</sup>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f3d891f3e801fbcfa9fd5ec38346c703_720w.jpg?source=b1748391?rss\" data-caption=\"浮游水蕈兽的拟人化同人图。几乎没有战力，但是非常可爱！\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"675\" data-watermark=\"original\" data-original-src=\"v2-f3d891f3e801fbcfa9fd5ec38346c703\" data-watermark-src=\"v2-0cbd362eaaec6f3986c6004a4c1ec5d1\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"oDGCMtwH\">但是切不可被这些小家伙的外表欺骗而对整个族群掉以轻心，在雷深渊法师的怪物描述中提到，过去须弥曾有一位名为阿尔瓦 · 尼古拉的学者依据对雷深渊法师使用的雷元素模型的研究提出了名为「尼古拉线圈」的理论武器，但还未来得及实践，其人就与武器研究资料一起被泛滥的蕈兽吃掉了。</p>\n<p data-pid=\"LJoTTMmF\">目前我们在巨渊下遭遇的蕈兽们应该只是这个族群中最低级、最无害的成员，蕈兽中恐怕也有着进化后诞生出的可怕猛兽，会在未来须弥的冒险中与我们遭遇并展开激战吧。</p>\n<hr>\n<p data-pid=\"C5RuqTYI\">既然提到了葱茏之愿，就不得不聊聊店老板瓦希德向旅行者大力推销的须弥特产肥料 ——「丰沃之惠」。</p>\n<p data-pid=\"54RcRlrY\">根据他的描述，「丰沃之惠」是小吉祥草王力量的恩惠，须弥人都用其耕种，哪怕是再贫瘠的土地，只要加了一点点这种肥料都会变得肥沃，堪称须弥「金坷垃」，作用原理大概是通过元素力让土地变得有活力。而「丰沃之惠」的英文名为「Anihitian Blessing」，其中「Anihitian」一词原型出自古波斯的生育、丰产与智慧女神「安娜塔希」（Anahita），这正好是对前文中「须弥主要原型为古波斯」看法的一种印证<sup data-text=\"Anahita - Wikipedia\" data-url=\"https://en.wikipedia.org/wiki/Anahita\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"12\">[12]</sup>。</p>\n<p data-pid=\"6wW_Chol\">值得注意的是，文化与宗教意义上，波斯人的女神「安娜塔希」（Anahita）与古代美索不达米亚人崇拜的女神「伊什塔尔」（Ishtar，苏美尔人称之为「伊南娜」）存在着说不清道不明的复杂联系，正如其他波斯神明一样，历史上安娜塔希对伊什塔尔有着一个吸收神性元素并最终合并的过程。</p>\n<p data-pid=\"DoWBXuDQ\"><b>PS：</b>学界有理论认为波斯王权起源于美索不达米亚平原，波斯诸神则是巴比伦神灵的自然延伸。一个典型例子是，琐罗亚斯德教中崇拜的「光明与智慧之主」阿胡拉 · 玛兹达（Ahura Mazda）被认为是苏美尔神话中巴比伦的守护神、主神和巴比伦尼亚的国神 ——「太阳牛犊」马尔杜克（Merodach）的另一种表现<sup data-text=\"  Ahura Mazda - Wikipedia\" data-url=\"https://en.wikipedia.org/wiki/Ahura_Mazda\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"13\">[13]</sup>。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-df307fa3f093742edb434ba959273f1c_720w.jpg?source=b1748391?rss\" data-caption=\"时间约在 4 世纪至 6 世纪的萨珊王朝银制镀金容器，其上描绘的女神形象推测是安娜希塔\" data-size=\"small\" data-rawwidth=\"800\" data-rawheight=\"1067\" data-watermark=\"original\" data-original-src=\"v2-df307fa3f093742edb434ba959273f1c\" data-watermark-src=\"v2-f6cd6b8f0ee0fc8ea0fbd5213d24b315\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"rNq5pgkh\">考虑到《原神》世界观中最重要的暗线角色「时间之执政」伊斯塔露原型就是伊什塔尔，并且前代草神与雷神（雷电真）是唯二在天理对坎瑞亚的讨伐战争中丧生的魔神，因此可以大胆预测，须弥草神剧情估计与游戏大主线联系极深，恐怕会揭晓不少与深层世界观相关的内容，甚至可能对之前的故事理解带来颠覆性的改变。</p>\n<p data-pid=\"n0MLxjIb\">草神之死是否有所隐情？是否是因为知晓了《日月前事》中有关王座大战的禁忌知识而遭天理借机灭口？草神与伊斯塔露有着何种关系？现任草神与前任草神又是什么关系？是否就和雷史莱姆暗示了雷神双生一样，草史莱姆的形态是在暗示：如今表面上统治须弥的小吉祥草王只是草史莱姆头顶的那朵起伪装作用的花苞，真正的草神正在某处蛰伏，等待着复苏的时刻呢？</p>\n<p data-pid=\"6otrliX7\">须弥作为象征「智慧」的国度，同时也是旅行者漫长旅程的中点，我想也是时候为这趟旅途的意义增添一些富有戏剧性的「变数」了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-dd0e529dd14d9018340f8de8d3b9cad9_720w.jpg?source=b1748391?rss\" data-caption=\"经常被玩家调侃成「扛着音箱」的草史莱姆，它的形态是否暗示了草神的秘密？\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"387\" data-watermark=\"original\" data-original-src=\"v2-dd0e529dd14d9018340f8de8d3b9cad9\" data-watermark-src=\"v2-846521a3a4c97dca0adb7da1363b5aa9\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"vYKDLH8v\"><b>PS2：</b>须弥剧情可能对世界真相作深度揭晓的这一猜想，一定程度上受到了须弥主线标题「虚空劫灰往世书」的支持。上文中已经对标题中出现的「往世书」一词具有的文化含义进行了介绍，而按照传统说法，往世书需要叙述五类主题，即所谓的「五相」<sup data-text=\"往世书 - 维基百科，自由的百科全书\" data-url=\"https://zh.wikipedia.org/wiki/%E5%BE%80%E4%B8%96%E4%B9%A6\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"8\">[8]</sup>：</p>\n<ol>\n<li data-pid=\"-2CLXvr1\">萨尔迦（Sarga），即宇宙的创造；</li>\n<li data-pid=\"o7SVD2cx\">泼罗提萨尔迦（Pratisarga），即宇宙毁灭后的再创造；</li>\n<li data-pid=\"NCXUYM1W\">瓦姆舍（Vamśa），即天神和仙人的系谱；</li>\n<li data-pid=\"ouO1mfiE\">曼宛陀罗（Manvañtara），即人类的产生和对各摩奴期的叙述；</li>\n<li data-pid=\"ZVGgov5-\">汪沙奴遮哩档（Vamśānucaritam），即日种王朝和月种王朝的世系。</li>\n</ol>\n<p data-pid=\"ktWt-rVN\">看完五相所指请问大家联想到了什么？没错，假若与游戏中目前已出现的记载提瓦特上古历史的禁书《日月前事》中描写的内容结合起来<sup data-text=\"白夜国蛇神记事注疏，见【注11】\" data-url=\"https://www.zhihu.com/question/509683549/answer/2317670654\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"14\">[14]</sup>，往世书的记述体裁无疑可以完美对应上古提瓦特历史的各阶段：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-890879d1e099d8484f4044a096008caf_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-890879d1e099d8484f4044a096008caf\" data-watermark-src=\"v2-57e549068c84276155be75aae1d0bc42\" data-private-watermark-src=\"\"></p>\n<ol>\n<li data-pid=\"qWgMECXw\">最初由七龙王统治的提瓦特洪荒时代 —— 萨尔迦；</li>\n<li data-pid=\"VowjkK2k\">「第一王座」法涅斯降临，击败七龙王，尔后创造新世界 —— 泼罗提萨尔迦；</li>\n<li data-pid=\"29MmcdaW\">描绘法涅斯分出「四影」，帮助管理世界 —— 瓦姆舍；</li>\n<li data-pid=\"iDtmAt0b\">法涅斯造人并赐予人类身处乐园的幸福，人类缔造出繁荣的提瓦特统一文明 —— 曼宛陀罗 &amp; 汪沙奴遮哩档。</li>\n</ol>\n<p data-pid=\"TQNj3fv7\">有理由相信，须弥篇故事将成为旅行者理解世界真相、寻找击败天理之法的旅途中一个至关重要的转折点。</p>\n<hr>\n<p data-pid=\"IH7Uo6eU\">最后简单聊一聊可能要随须弥开放实装的新小游戏「七圣召唤」。</p>\n<p data-pid=\"9GCfrsVI\">刚结束不久的光华容彩祭活动中其实就提到了这种须弥游戏。荒泷派任务中提到，一斗和他的小伙伴们搞来了一套叫做「七圣召唤」的卡牌对战游戏，一下就玩上了瘾，沉迷其中不可自拔。但大家知道，这套游戏其实是咱们的老朋友立本传播到稻妻的吗？</p>\n<p data-pid=\"wkhMmPxO\">上次「百货奇货」活动中立本在告诉旅行者自己近来的商旅经历时提到，他之前在须弥接受了须弥学者的委托，将卡牌游戏「七圣召唤」的原型带给稻妻的八重堂，而如今一斗他们玩的就是由获得授权的八重堂制作售卖的卡牌。</p>\n<p><img src=\"https://pica.zhimg.com/v2-cf9dd6d643f9868364bf65f31958d455_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"178\" data-watermark=\"original\" data-original-src=\"v2-cf9dd6d643f9868364bf65f31958d455\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"WDtMrSOt\">早前论坛其实已经透露了一些有关「七圣召唤」的信息，这种游戏起源于古代须弥庄重而严肃的决斗之仪（我懂了，古埃及黑暗游戏对吧？原来是游戏王），玩家使用丰富的卡牌组合与特殊的元素骰子进行游玩，游戏中的各种行动都需要花费骰子投出的不同元素属性点数，也可能提供能够当作任意元素的「万能元素点」。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-da61d65854dbadc0f67586e85edf49ae_720w.jpg?source=b1748391?rss\" data-caption=\"「元素骰子」大概率就是桌游中常使用的多面骰子\" data-size=\"small\" data-rawwidth=\"800\" data-rawheight=\"800\" data-watermark=\"original\" data-original-src=\"v2-da61d65854dbadc0f67586e85edf49ae\" data-watermark-src=\"v2-0dd8f56dd46d48e99e99f2e926edacf1\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"DYh16GxD\">不出意外的话，到须弥地区正式实装时，「七圣召唤」将作为继「风行迷踪」、「机关棋谭」后的新品种提瓦特桌面游戏与我们见面吧。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ai-luo-38?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">呆罗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/492460975/answer/2463415835?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">15 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/514414105?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">世界上到底有没有异世界或者类似异世界的空间？</a><br><a href=\"http://www.zhihu.com/question/510508912?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">既然神之心是权柄不是力量来源，那么为什么非要收集神之心来对抗天理呢？</a><br>\n","link":"http://www.zhihu.com/question/492460975/answer/2463415835?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"国产独立游戏《大洪水的故事》4 月 28 日上线 Steam，你的游戏体验如何？","date":"2022-05-01 03:53:05","description":"\n<p data-pid=\"GDRgRnPi\">经历了两年陆陆续续的制作和修改，《大洪水的故事》这款游戏的玩法和设定基本上成型，4月29日将开启为期三个月左右的EA阶段。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-98324f246955cbb58d18dd0020433039_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1204\" data-rawheight=\"802\" data-watermark=\"watermark\" data-original-src=\"v2-98324f246955cbb58d18dd0020433039\" data-watermark-src=\"v2-7983d4e2d80d3d6564085cfff58f8338\" data-private-watermark-src=\"v2-8f6c69d922ff600464d5e233045aa793\"></p>\n<p data-pid=\"aiJ2dcZJ\">这两年时间里，我一直在思考，《大洪水的故事》，到底是一款什么样的游戏？</p>\n<p data-pid=\"UYJ3jhr8\">之前开玩笑说，就做个”末世捡垃圾模拟器”吧</p>\n<p data-pid=\"Nni6uxBN\">也有朋友建议我，干脆做一个细节更完善的互动式人格测验</p>\n<p data-pid=\"TOucF8tm\">在不止一次的自我推翻和否定后，在现在的EA版本中，我想“于绝望处找寻希望”，是《大洪水的故事》想要传递给玩家的一种情感。</p>\n<p><img src=\"https://pica.zhimg.com/v2-df47c8fccfae83807d2e640edd76bf9a_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1204\" data-rawheight=\"802\" data-watermark=\"watermark\" data-original-src=\"v2-df47c8fccfae83807d2e640edd76bf9a\" data-watermark-src=\"v2-e2c443c789bb76791cb60a537f3c9c11\" data-private-watermark-src=\"v2-db8f83aac9caa13e633a811dc1c63625\"></p>\n<p data-pid=\"XQgaPgC7\">虽然这是一款单机游戏，我依然在游戏中设计了玩家与世界连接的信息机制，每个玩家的留言都有可能出现在其他玩家的游戏世界里。</p>\n<p data-pid=\"fAsyhSKi\">我希望通过这个机制，让末世中的玩家不再孤独前行。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-824cedd0a4e8168227585b860c9a6ad7_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1204\" data-rawheight=\"802\" data-watermark=\"watermark\" data-original-src=\"v2-824cedd0a4e8168227585b860c9a6ad7\" data-watermark-src=\"v2-9c3c7f48b5dae3720993fba95d170f1a\" data-private-watermark-src=\"v2-1c24d92b31b3c10c05debbeda7a9d2a7\"></p>\n<p data-pid=\"QEweVrF3\">在后续正式版的更新计划中，有以下工作已经被列入日程。</p>\n<p data-pid=\"-teH2cut\">1. 完善结局的人格心理学测试环节，关于心理学测试这部分，会采用更加简单易懂的语言描述，心理学参数构成将会基于游戏中的行为而非结局——简单来讲，让心理测试变得更准，也更有实验意义。</p>\n<p data-pid=\"CaTrKYI_\">2. 增加一部分与世界环境的互动，漫长旅程中的枯燥与不满，虽然这是试验的一部分，但我会想想优化的方式——大家可以多给我提一些旅程中的互动建议，如果采纳，你的ID将会出现在正式版的感谢名单中</p>\n<p data-pid=\"f107Io_D\">3. 为多周目创造更多的随机事件，让玩家每一次体验，都能感受到更多的不同，甚至这些随机事件，会影响到你的选择，从而继续提升内容的丰富度。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-30851fddad2684ed4419cc02c833519d_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1204\" data-rawheight=\"802\" data-watermark=\"watermark\" data-original-src=\"v2-30851fddad2684ed4419cc02c833519d\" data-watermark-src=\"v2-7d2d3108f44eac5e5c4c463aba39a2f3\" data-private-watermark-src=\"v2-aee4821310cfc03179f47dc08ba2640f\"></p>\n<p data-pid=\"nJOB0lOU\">我坚信一款有意义的作品，需要不断打磨和反复修改的，他的完成，离不开所有玩家的支持，建议，共创，和帮助。所以如果你觉得EA版本体验已足，欢迎随时退款，很感谢各位对一款艺术试验产品的包容与支持。</p>\n<p data-pid=\"Jc-RPLmu\">作为一款基于开放性故事构架的互动冒险小说，我非常希望你能在社交媒体，或者在游戏社区里分享你的故事，体验，旅程，心路。这会是我更新游戏的动力，也会是帮助《大洪水的故事》不断变好的必要过程</p>\n<p data-pid=\"JPUjYCC9\">谢谢你们，玩我的游戏</p>\n<p><img src=\"https://pic1.zhimg.com/v2-dac28830b0b47fbf1db2d8ec0daae1a5_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1204\" data-rawheight=\"802\" data-watermark=\"watermark\" data-original-src=\"v2-dac28830b0b47fbf1db2d8ec0daae1a5\" data-watermark-src=\"v2-a2b0139a1b17a971f48c84535c6e67de\" data-private-watermark-src=\"v2-1e8500ab46644b9097ee40f5eb990b28\"></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/luke-60-85?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Luke</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/530616488/answer/2463090738?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">12 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/504335269?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">国产独立游戏《大多数》上架 Steam，对此你有哪些期待？</a><br><a href=\"http://www.zhihu.com/question/505097147?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">Steam 十月最热门的单机游戏有哪些？</a><br>\n","link":"http://www.zhihu.com/question/530616488/answer/2463090738?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价国产模拟经营类游戏《建筑吧公司》？","date":"2022-05-01 02:56:22","description":"\n<p data-pid=\"gxHA9Wo3\">我是《建司》的制作人&lt;北村群童&gt;。说是群童，其实开发过程都是由我一个人完成的。SOLO制作的主因是我的个人能力非常强，一个人挑大梁完全没问题，事实确实如此??? </p>\n<p data-pid=\"cbS8b91C\">我自己是建筑师出身，2020年正式辞职，开始全职做游戏开发。我构思的核心项目是一部以《边城浪子》为蓝本的开放世界RPG游戏。《建司》不过是个试牛刀的小品。（后附一老项目）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-799a7d2f7bc0b175ca4131983a363063_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"641\" data-watermark=\"watermark\" data-original-src=\"v2-799a7d2f7bc0b175ca4131983a363063\" data-watermark-src=\"v2-d32c38b88c2a7e2def47e9541bb7fd26\" data-private-watermark-src=\"v2-88fa506c1e8a3e2f7a055023651ba390\"></p>\n<p data-pid=\"0eySv0ZQ\"><b>又是建筑师转行？</b></p>\n<p data-pid=\"nUoOrAzp\">为什么又是建筑师转行做游戏呢？我想第一是从“肝”到“肝”可以无缝对接，第二是技能树有重叠的地方。第三、《太吾绘卷》的营销故事太出名了吧。但凡有一个逆袭成功的例子出现，每一个建筑师都会在内心深处多埋下一颗懵懂的后悔药丸。是的，建筑师或者说&lt;土木&gt;这个群体，夹杂在市场和计划之间、立身于理想与现实之中，太憋闷了、太需要呐喊了。基于种种种种便形成了《建司》的策划灵感。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0a98ea40581a7797ae127b2e8d5f680c_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"672\" data-watermark=\"watermark\" data-original-src=\"v2-0a98ea40581a7797ae127b2e8d5f680c\" data-watermark-src=\"v2-8f0c6c40a3e77d625f336e9cba3a35c8\" data-private-watermark-src=\"v2-80c06f53db997cb041dde61d4a2fba88\"></p>\n<p data-pid=\"_z51XTIE\"><b>绕不开的开罗：</b></p>\n<p data-pid=\"FjdIVSs2\">开罗游戏对我有很深的影响，我原本就是打算山寨开罗，做个换皮的建筑公司（doge），但是那太难了，而且很牵强，很没意思，于是我有了很多自己的理解和实践。比如更丰富的职员状态，更有趣的职员操作和经营操作，甚至换了一种经营理念&lt;铁打的经营流水的员工&gt;等等。后来策划案越来越鲜明，游戏特点也越来越明确，进而走出了一条与开罗截然不同的味道。这味道有点内卷，有点讽刺，它并不是生趣盎然朝气蓬勃，反而充斥着职场里面各式各样的小鬼脸、小把戏。</p>\n<p><img src=\"https://pica.zhimg.com/v2-95dfa617d9168d328314c2b3f2863953_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"270\" data-watermark=\"watermark\" data-original-src=\"v2-95dfa617d9168d328314c2b3f2863953\" data-watermark-src=\"v2-1b1e2b9a2d71189f6f6f326b6439c90a\" data-private-watermark-src=\"v2-fdfa1a4abbb0da14096f9251da45eca3\"></p>\n<p data-pid=\"ITzkIbEf\"><b>回合制与静游戏</b></p>\n<p data-pid=\"osrQnVhC\">我一般把游戏分为两种，动游戏和静游戏。我本人是个超级手残党，大部分动游戏也就是云一云，玩得比较多的都是一些偏向思考型的静游戏。工作室的初衷也是打造一些有趣且值得回味的静游戏。那问题就来了，玩家得静下心思考才能体会到游戏的乐趣。因此我觉得对这类游戏而言策划的担子更重，一系列引导设计、数值设计、系统设计等等都非常繁琐，而且需要多次调试，很多隐蔽的工程打磨与时间消耗是不容易被人发觉的。《建司》就是这样一款回合制的静游戏，在一回合内，没有时间限制，玩家需要思考、判断、操作，然后再前往下一回合。游戏鼓励玩家安静思考，并能展现出耐人寻味的一面。 </p>\n<p><img src=\"https://pic2.zhimg.com/v2-ccd7b62568eafa21d6ded81df60bbe27_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1115\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-ccd7b62568eafa21d6ded81df60bbe27\" data-watermark-src=\"v2-9388f301b4dbe7f1a6de45eede1adc89\" data-private-watermark-src=\"v2-c97f957675ea451ba9b8c3a63d8efd4f\"></p>\n<p data-pid=\"H_IMyapt\"><b>极简的美术风格</b></p>\n<p data-pid=\"56o_MbHr\">单色像素风，可以追述到改革开放之初了。它是综合很多因素后确定的风格，起初只有蓝白组合后来又增添了更多可选的配色。这种复古的形式也许不能讨人喜欢，但只要你看一眼就一定能记住它，一定会问一句：这是什么游戏啊？看着像小时候玩的那种…..抛开画面的朴素不谈，我真的是美术能力很强人，这一点竟然连发行商都不相信？</p>\n<p><img src=\"https://pica.zhimg.com/v2-8e3ac31c47ceab099a5b6273ed9a1ff4_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1070\" data-rawheight=\"675\" data-watermark=\"watermark\" data-original-src=\"v2-8e3ac31c47ceab099a5b6273ed9a1ff4\" data-watermark-src=\"v2-6197885f7fff32b1b45ee2a2c14d823a\" data-private-watermark-src=\"v2-90d9c6455ad64aecfe303752632cd6eb\" data-tags=\"porn\"></p>\n<p data-pid=\"aKFpvD84\"><b>信达雅</b></p>\n<p data-pid=\"eC3MyHLq\">游戏并没有将建筑设计公司的日常全盘托出，只是在其背景下用更平衡的系统去表达。内容和细节上也做了很多很多圆角修改，目的是让非从业者也能理解建筑公司。到了游戏后期还做了很多联网和放置玩法，比如地产开发与城市规划，严格来说这些并不是设计院的业务。但是太多太多的老同行在体验过游戏之后都表达出了对游戏的喜爱。我想《建司》还未达到完美，但一定戳中了一些点，一些游戏之余可以调侃、引用、诙谐、思考的小回忆。那大概就是内在的表达吧。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-78acbdb4c051f134eec6d646d08efc96_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"343\" data-watermark=\"watermark\" data-original-src=\"v2-78acbdb4c051f134eec6d646d08efc96\" data-watermark-src=\"v2-22219b51bb57267abdb32297c573d0f4\" data-private-watermark-src=\"v2-ef55aa1810bad90e3e19f416a685636b\"></p>\n<p data-pid=\"tnwL9E81\"><b>从资本家视角观察社畜：</b></p>\n<p data-pid=\"xzmFvCgR\">经营公司就是经营一个大的系统。谁没加过班？谁没被逼着加过班？谁没被逼着让手下加过班？整个系统在大蛋糕不断缩水的情况下就是一个活灵活现的&lt;生存型模拟经营游戏&gt;。无论是经营者还是劳动者其实都不容易。我作为经营者要平衡成本、考虑市场、亲吻渠道、给版号下跪而且长跪也不起。作为创作者又想着尽量健康生活、设计要有特色、工作要有趣味、设计师要有高逼格。但这一切清醒以后，我把文件保存一下，洗了一把脸，把键盘立起来给餐桌腾出地方，并给家人们准备好早餐。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3993fa95fcd22fa164c37b77aa5b9445_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"343\" data-watermark=\"watermark\" data-original-src=\"v2-3993fa95fcd22fa164c37b77aa5b9445\" data-watermark-src=\"v2-322abd789eb8791a6ff5a4ed16be6edf\" data-private-watermark-src=\"v2-4a02267ca19e7ea75647489057a694bd\"></p>\n<p data-pid=\"fwJ85s-u\"><b>最后希望大家能从游戏中获得快乐的体验。我也会不断升级继续优化。</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/hohohoddd?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">hohohoddd</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/530617962/answer/2464352022?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">5 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/515247240?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么我国没有做和解放军有关的大型射击游戏？</a><br><a href=\"http://www.zhihu.com/question/525512004?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有什么好玩的模拟建设类游戏值得推荐？</a><br>\n","link":"http://www.zhihu.com/question/530617962/answer/2464352022?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"在纯电动车电能补充方式上，换电模式和充电模式哪种更合理？","date":"2022-04-29 07:03:25","description":"\n<p data-pid=\"cdOxWwFJ\">换电与充电哪个更合理？ 我们需要从用户、车企、行业三个角度来看。</p>\n<h2>一、用户角度：可充可换更合理</h2>\n<p data-pid=\"-2RjmkcU\">首先要指出的是，用户面临的并不是「充电」与「换电」的抉择，而是「只能充电」与「可充可换」之间的抉择。</p>\n<p data-pid=\"nZtus7sN\">如果用户对购买的产品本来就很满意的话，那从「只能充电」进化为「可充可换」多了一种选择，肯定是更好的选项。</p>\n<p data-pid=\"yrCq-FKm\"><b>早期换电站数量有限时还不明显，后来蔚来的换电站数量起来之后，家里慢充+外出换电就成了一种特别合理的选择</b>。截止2022年4月18日，蔚来建成换电站900座，车站比大幅降低。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-41e2caf8bec762dc4f588d2c38e2d358_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"699\" data-rawheight=\"562\" data-watermark=\"original\" data-original-src=\"v2-41e2caf8bec762dc4f588d2c38e2d358\" data-watermark-src=\"v2-a843e182ca3c6af39194efb100a0e7bd\" data-private-watermark-src=\"v2-e3152efc27b093fdf0318c7dc5f9c40a\"></p>\n<p data-pid=\"7gszzZAI\">注意一个前提是「如果用户对购买的产品本来就很满意」，这是指<b>增加换电功能，可能会牺牲一定的车辆属性</b>。例如，为了兼容换电模式，蔚来ES8创始版的电池较小，「小马拉大车」的70kWh电池仅支撑355公里的NEDC续航。</p>\n<p data-pid=\"WnuDJ_nT\">蔚来ES8、ES6这种大SUV兼容换电模式的代价还不明显，那么ET7、ET5这种轿车兼容同尺寸的电池包，会不会带来<b>底台重心高影响外观设计与操控调校、小车车体宽影响日常易用性</b>的问题，就有待观察了！</p>\n<p data-pid=\"ww5uf6xz\">兼容换电模式还有一个长期代价，就是<b>无法支持特斯拉称之为「Structure Battery」、宁德时代称之为「CTC」、Rivian称之为「滑板底盘」的「底盘电池一体化」技术路线了。</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-1371eaa4b00fae3fd61d17dc15588af2_720w.png?source=b1748391?rss\" data-caption=\"特斯拉 Structure Battery\" data-size=\"normal\" data-rawwidth=\"956\" data-rawheight=\"679\" data-watermark=\"original\" data-original-src=\"v2-1371eaa4b00fae3fd61d17dc15588af2\" data-watermark-src=\"v2-0bb3f0fe4b07fcfe95508c4fccd082fe\" data-private-watermark-src=\"v2-8ec33b3ef690e71d2404204b5f2371d5\"></p>\n<p data-pid=\"OjxuFLxX\">这个代价有多大，现在还难以评估。毕竟目前量产车上已用上这个技术的，只有零跑C01一个；应用水平如何，我们不能只看单项技术，还要看它的整体集成能力。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8184c626793603d787d44ee5ff3119f3_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"343\" data-watermark=\"original\" data-original-src=\"v2-8184c626793603d787d44ee5ff3119f3\" data-watermark-src=\"v2-cfdf7fe0d3175fc02592f7fa447ec676\" data-private-watermark-src=\"v2-45f93b04b5efea320bfdedfeb70b169a\"></p>\n<p data-pid=\"xw_lRkZV\"><b>虽然兼容「可充可换」需要付出一定的代价，但目前来说蔚来用户的满意度还是非常高的。</b>这是因为「换电模式」还有两个隐藏的优点：</p>\n<h3><b>1. 「可充可换」+「可升级」</b></h3>\n<p data-pid=\"nlIbcpA3\">随电池技术进步，蔚来车型从仅有ES8发展到ES8、ES6、EC6、ET7电池通用，蔚来换电从<b>「可充可换」</b>变为<b>「可充可换可升级」</b>。</p>\n<p data-pid=\"lvAjD5Hc\">下图是第一次升级，从70kWh到84kWh。现在已升级到100kWh，2022年第四季度可选择升级150kWh电池 —— <b>电池技术的快速进步会让电动车淘汰太快的烦恼，不会发生在蔚来用户身上。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a2001b4a5d832555436195818002577b_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"448\" data-watermark=\"original\" data-original-src=\"v2-a2001b4a5d832555436195818002577b\" data-watermark-src=\"v2-ca59e4b186d9cd75a51d184199d058ee\" data-private-watermark-src=\"v2-49f467931c5c845aa1e19902a023a8ae\"></p>\n<p data-pid=\"PV0J0vu4\">当然，升级电池并不是免费的，相反还很贵。大部分蔚来用户都不会考虑150kWh的超大电池包，但可以考虑通过「灵活租用」实现：<b>日常通勤用70kWh小电池包，长假自驾换成150kWh电池包，这听起来还是非常合理的！</b></p>\n<h3>2.  不必考虑电池衰减问题</h3>\n<p data-pid=\"-_zZEcgD\">电池衰减是客观存在的，但蔚来用户并不必在意这个问题，因为迟早要去换电站弄一块新的。如果所有电池包平均衰减到一个无法忍受的地步，那也是蔚来的问题，不是用户考虑的问题。</p>\n<p data-pid=\"dOfY-K2G\">某种意义上来说，这也是一个「公地问题」，但特别适合我这种用得比较猛、里程比较长的用户。</p>\n<h2>二、车企角度：极端的选择</h2>\n<p data-pid=\"GxE79UZE\">根据换电站与电池包的提供者不同，换电模式分为两种：</p>\n<ul>\n<li data-pid=\"QT9MsOwV\">\n<b>蔚来主导</b>：换电站、电池包都归车企所有，由车企运营。乘用车领域，目前唯一一家就是蔚来。</li>\n<li data-pid=\"rmx7r5CH\">\n<b>宁德主导</b>：换电站、电池包都第三方所有，由第三方运营。主要是指宁德时代的EVOGO「巧克力换电块」。</li>\n</ul>\n<p data-pid=\"a98w3UZz\"><b>蔚来主导的这种路线，是剑走偏锋</b>。建站需要大量投入、换电需要额外设计（创始版ES8的续航危机直接让李斌成为2019最惨的人）、长期成本难以分摊（必须做高溢价豪华车），这对自主品牌来说都是让人忘而却步的事情，只有李斌这样的理想主义者敢去做。</p>\n<p data-pid=\"TbKp4AYl\">也不是做了就成功的，2019年他的日子有多难熬大家应该还没忘吧？</p>\n<p data-pid=\"UX5_oywh\"><b>蔚来主导的剑走偏锋路线，应该不太可能跟随者了，原因如下</b>：</p>\n<ul>\n<li data-pid=\"WBOv9MFG\">\n<b>一是固定投资太大，形不成规模难以玩得转</b>。强如蔚来，如果不是依靠上市融到的大量资金，也很难将汽车销量和换电站数量发展到商业闭环的阶段。蔚来换电业务单独盈利的难度很大，目前主要作为吸引大家购车的一项服务。</li>\n<li data-pid=\"fhHou9ze\">\n<b>二是换电站占用城市资源，具有互斥性</b>。蔚来占据了最佳的换电位置，市场也许可以容纳第二家、第三家，但绝对容纳不了第五家、第十家。</li>\n</ul>\n<p data-pid=\"XiFh3ShM\"><b>宁德主导的「巧克力换电块」增加了「可掰开可组合」的属性，可以适用于更多车企的不同车型</b>：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-494af21ab3669a91529ef4607dd8854a_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"821\" data-rawheight=\"461\" data-watermark=\"original\" data-original-src=\"v2-494af21ab3669a91529ef4607dd8854a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"KQxK3To3\">像特斯拉、蔚小理这种已经做起来的造车新势力，不会考虑与宁德的「巧克力换电块」合作。<b>但是，其它规模较小、新能源方面起步较晚的车企呢？ 对他们来说，与宁德合作的吸引力很大：</b></p>\n<ul>\n<li data-pid=\"CuEd-CVk\">\n<b>提升产品竞争力</b>：动力电池是电动车的核心零部件，在整车成本中占比可达40%。跟EVOGO 合作，可以刨去电池成本，售价大大减低，吸引更多人来买车。听说现在一汽奔腾NAT换电版的售价只有充电版的一半。</li>\n<li data-pid=\"0TxzIZ9B\">\n<b>降低研发成本</b>： 电池包的技术含量不低，既要高性能，还要高安全；由于技术迭代速度快，每年都要投入大量的研发。若选择EVOGO合作，车企则可以专注于自己本来就擅长的领域(外观、内饰、车身、驾驶体验等)以及未来的高价值领域(智能座舱、智能驾驶)。</li>\n<li data-pid=\"bTwktmqf\">\n<b>降低安全风险</b>：电动车安全问题是一个高压线，若出现风险可能会打断车企原有的发展节奏。若与EVOGO合作，则可以将这样的风险转移出去 —— 自身只需要做好车身安全和接口电安全，要轻松很多。</li>\n<li data-pid=\"bKxu-JGI\">\n<b>规避产能问题</b>：产能问题依然会是制约新能源车产销量的主要原因，2021年车企还是一电难求。如果和EVOGO合作，就可以避免这个问题。</li>\n</ul>\n<p data-pid=\"ggoEOCcd\">同时，我们也要看到增加「可掰开可组合」属性的代价： <b>无法采用液冷、整包能量密度较低、无法采用底盘电池一体化技术</b>。</p>\n<p data-pid=\"wDy5P2ix\"><b>总体来说，就是采用「巧克力电池包」不利于打造极致的产品，因而不适用于头部车企。</b>必须指出的是，所谓的极致是相对而言的，「巧克力电池包」的技术本身并不差：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5c27302a98d05240d0e786451756428d_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"640\" data-watermark=\"original\" data-original-src=\"v2-5c27302a98d05240d0e786451756428d\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<ul>\n<li data-pid=\"CmlY0esx\">\n<b>能量密度高</b>：在可掰开、可灵活组合的前提下，能量密度高达160Wh/kg、体积能量密度高达325Wh/L，性能表现非常优秀！—— 可以查一下，2022年的一些电动车能量密度还不到160Wh/kg。</li>\n<li data-pid=\"LWL7X8gP\">\n<b>CTP技术</b>：能实现这么高的能量密度，离不开宁德时代的CTP(Cell to Pack)技术 —— 电芯直接组成电池包，省去了模组(Module)这一步。</li>\n<li data-pid=\"LfyLHd_b\">\n<b>无线BMS技术</b>：这项前沿技术使换电块外部只有高压正负接口，提高插拔部件的可靠性。另外一家用上无线BMS技术的就是凯迪拉克Lyriq，但不像「巧克力换电块」可以把这项技术的优势发挥得这么彻底。</li>\n</ul>\n<h2>三、行业角度：充电的补充</h2>\n<p data-pid=\"BqmGt6W_\"><b>从行业角度评价换电的意义，要分蔚来换电、宁德换电、重卡换电三个角度来看</b>。</p>\n<h3>1. 蔚来换电</h3>\n<p data-pid=\"5PU_Q-wm\">蔚来采用换电，从头到尾都是企业基于自身利益的行为，但客观上也推动了行业进步。</p>\n<ul>\n<li data-pid=\"VGPEkkl_\">\n<b>第一次验证换电可行</b>：之前Betterplace做过换电，失败了；特斯拉也尝试过换电，没继续。如果不是蔚来第一次做成功了，后续的宁德换电、重卡换电不一定有勇气去做。</li>\n<li data-pid=\"1h9eC6yT\">\n<b>打破莫须有的长途焦虑</b>：目前阻碍油车车主换电车的一个主要原因是担心长途充电慢、充电麻烦。若服务区上建满换电站，那蔚来车主真的可以自信地说：<b>无论是市内还是长途，加电都比加油更方便了</b>！</li>\n</ul>\n<p data-pid=\"zF3ZU1L9\">当大家意识到蔚来可以做到「加电比加油更方便」时，当看到中石化都在建充电站时，这种符号意义的冲击是很大的，会打破另外一种非理性观点「电车不能跑长途」，<b>这对推动行业发展也是有意义的。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-59ffd6fdd8f4a81e74b90defc998f280_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"687\" data-watermark=\"original\" data-original-src=\"v2-59ffd6fdd8f4a81e74b90defc998f280\" data-watermark-src=\"v2-037a38d8bda7cb352a173aafc6f6b99a\" data-private-watermark-src=\"v2-14e883953760a6d0966c17e9a8602cf8\"></p>\n<p data-pid=\"5c8cR2j2\"><b>果然，打破魔法的只有魔法。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-69b702e2c33d171a958c8b57598663a6_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"758\" data-rawheight=\"400\" data-watermark=\"original\" data-original-src=\"v2-69b702e2c33d171a958c8b57598663a6\" data-watermark-src=\"v2-6692ffc46c2fae7e26b330e9068174e3\" data-private-watermark-src=\"v2-36d6774e1739613c93c1167109e6fe32\"></p>\n<h3>2. 宁德换电</h3>\n<p data-pid=\"lP2ZLab9\">宁德换电的主要意义在于「可掰开可组合」。</p>\n<p data-pid=\"ThzW-SZf\">为什么说「可掰开可组合」非常重要，因为它指出了电动汽车的一个根本问题：<b>一个80度电的长续航电动车，其中前26度是高频使用的电，中间26度是低频使用的电，后26度是应急使用的电</b>。</p>\n<p data-pid=\"8a_UN4rG\">从消费者的角度来讲，前26度最值钱，但后52度又不得不买。从产品角度来讲，虽然大部分情况下使用的是前26/52度电，但26度电池的重量每时每刻都在承担着。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1a31e2ddb07c60b0ca3ec61f58d19dc4_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"821\" data-rawheight=\"273\" data-watermark=\"original\" data-original-src=\"v2-1a31e2ddb07c60b0ca3ec61f58d19dc4\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<ul>\n<li data-pid=\"1RvfHq9e\">从用户角度来说，它可以实现更加灵活的配置（当然也有代价，上文已述），在此就不赘述了。有兴趣可以看<sup data-text=\"\" data-url=\"https://www.zhihu.com/question/512171172/answer/2453064567\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>\n</li>\n<li data-pid=\"-gHftbnS\">从车企角度来说，它可以降低进入新能源的成本与发展（上文已述）。</li>\n<li data-pid=\"u9YtK5v3\">从行业角度来说：第二名、第三名、第十名，最关注的问题是如何追赶第一名。行业第一名，则需要考虑整个行业怎么发展了。巧克力换电块其实与钠离子电池一样，都是<b>宁德时代在考虑如何降低对锂资源的需求 —— 钠是锂的替代，巧克力换电块则是降低每辆车的电池容量需求</b>。</li>\n</ul>\n<p><img src=\"https://pic3.zhimg.com/v2-88840b7291d7d1ae3c4cc51952de0fe3_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"759\" data-watermark=\"original\" data-original-src=\"v2-88840b7291d7d1ae3c4cc51952de0fe3\" data-watermark-src=\"v2-b3cf587a0cdc7f4bda585774334f35fe\" data-private-watermark-src=\"v2-be7da05e61eba678173ca28916aca724\"></p>\n<h3>3. 重卡换电：充电走不通的必然之选</h3>\n<p data-pid=\"NK25VKOL\">咱们消费者平时不会关注重卡的，但它却对节能减排非常重要。看下面交通部规划研究院副院长<a href=\"https://www.zhihu.com/search?q=%E5%BE%90%E6%B4%AA%E7%A3%8A&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2461165486%7D\" class=\"internal\">徐洪磊</a>的这张图<sup data-text=\"\" data-url=\"https://auto.gasgoo.com/news/202203/29I70295739C1206.shtml\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\">[2]</sup>：<b>商用车碳排放占所有车的64.6%，而重卡占商用车83.5%。</b></p>\n<p data-pid=\"w8Efr-M6\"><b>也就是说，咱们常说的汽车碳排放或燃油消耗，有大约50%是由1000多万辆重卡排放的。</b>降低重卡碳排放，极其重要！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-759dab167b68fd391e7aa3d2b7881dc7_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"801\" data-watermark=\"original\" data-original-src=\"v2-759dab167b68fd391e7aa3d2b7881dc7\" data-watermark-src=\"v2-140f98fe1bbf6b917232c90664c99f83\" data-private-watermark-src=\"v2-1e6efbaf3feabe8654641898b39f9cab\"></p>\n<p data-pid=\"Xt-RLZzZ\">重卡的充电模式，有几个难题：</p>\n<ul>\n<li data-pid=\"oPzpu0fH\">\n<b>充电时间</b>：乘用车90%的时间都是闲置的，大部分情况下搁家里慢慢充就行；重卡不行，一般是两班倒不停地开，要是充个10小时的电，相当于运力减一半，划不来啊！麦肯锡出过一个报告，说德国纯电重卡充电比换电好，主要是国情不一样，他们国土面积小，重卡不是两班倒。</li>\n<li data-pid=\"xj9PGpD1\">\n<b>大电池占用运力、成本高</b>：电动乘用车2吨重，坐人载货最多400公斤；重卡不一样，装个几十吨货拉走，这就需要超级大的电池。但电池本身也重，占用运气，赚钱效率又低了；电池也贵，初期成本高，也更难赚钱。</li>\n</ul>\n<p data-pid=\"HlOzaFuH\">所以，基本上来说，<b>咱们国家的长途重卡就是要走氢燃料电池+换电重卡的技术路线了</b>。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c2278fbe7ce05931fc91c640896245dd_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1332\" data-rawheight=\"866\" data-watermark=\"original\" data-original-src=\"v2-c2278fbe7ce05931fc91c640896245dd\" data-watermark-src=\"v2-a89cbfe44fb9d2ea6067593237b15e56\" data-private-watermark-src=\"v2-3588e9fde210b6d10b558813a324638a\"></p>\n<p data-pid=\"28nPbxiB\">有人说特斯拉Semitruck满载36吨的续航800公里，充电30分钟可以600公里。这听起来也很不错，为啥咱们不走这个路线呢？关于这个问题，我还没仔细研究，大体估摸着应该是成本、安全性、充电电网冲击待方面存在困难。有空再研究吧！本文就不展开了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6cce60d06ab60e58e40ce35a2aac9420_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1029\" data-rawheight=\"542\" data-watermark=\"original\" data-original-src=\"v2-6cce60d06ab60e58e40ce35a2aac9420\" data-watermark-src=\"v2-0fcd9f06d531890987a2152429deddb0\" data-private-watermark-src=\"v2-ad948366049160b82ef657fd056f574b\"></p>\n<h2>小结</h2>\n<p data-pid=\"DRNWUuuP\">本文内容很丰富，概括一下重点吧！ 换电与充电哪个更合理？从三个角度来看：</p>\n<ul>\n<li data-pid=\"9DfmKKtw\">\n<b>用户角度</b>：可充可换+可升级+免衰减肯定更好，但可选车型有限。未来，随着底盘电池一体化技术发展，可充可换的车型可能要面临单车性能上的损失。</li>\n<li data-pid=\"R135Rx1P\">\n<b>车企角度</b>：蔚来换电无人可以跟进。跟进宁德换电可以帮助车企降低切入新能源的成本与风险。</li>\n<li data-pid=\"BN-pym-p\">\n<b>行业角度</b>：蔚来换电对行业有推动意义，但更多的是企业意义。宁德换电对行业意义重大，可降低全行业对锂电池的需求，但能否搞得成要观察。重卡换电是必由之路，与氢能重卡在竞争。</li>\n</ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhangkangkang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">张抗抗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/268391745/answer/2462740438?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">36 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/520712052?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新能源汽车的发展方向，是换电还是油电混合来增加续航？</a><br><a href=\"http://www.zhihu.com/question/29442229?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么电动汽车不采用更换电池组模式？</a><br>\n","link":"http://www.zhihu.com/question/268391745/answer/2462740438?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"《龙珠》鸟山明的哪些细节处理让人咋舌？","date":"2022-04-29 03:23:12","description":"\n<p data-pid=\"645Hk70v\"><b>这是一本有声音的漫画。</b></p>\n<hr>\n<p data-pid=\"GhtZ4s0w\">各位知道这个东西是啥吗？</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a2a16395c5f6eda13b96243e859f90a0_720w.jpg?source=b1748391?rss\" data-rawwidth=\"479\" data-rawheight=\"442\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a2a16395c5f6eda13b96243e859f90a0\" data-watermark-src=\"v2-b9099ef8379b79c5ca4711d05040f5a3\" data-private-watermark-src=\"v2-e71c42662ca71bfdf9764fee1af93c54\"></p>\n<p data-pid=\"yv9vQyF6\">没错，确实是有人不知道的，这个早期被某些媒体描述为“日本漫画根本看不懂，对话只在人物嘴边注明几句”的东西就是<b>气球泡，也叫对话框</b>，专门用来表述人物讲话的台词。</p>\n<p data-pid=\"5Dgk8ydo\">当然点进这个问题的诸位肯定是知道的啦。</p>\n<p><br></p>\n<p data-pid=\"IkFqlbWa\">那么大家当然也知道吧？气球泡这个东西也是需要在很大程度上参与漫画语言的，就以《龙珠》42卷原著为例：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1a653a656909fa7b560ab8d6f1529ced_720w.jpg?source=b1748391?rss\" data-rawwidth=\"311\" data-rawheight=\"282\" data-size=\"normal\" data-caption=\"普通圆泡\" data-watermark=\"watermark\" data-original-src=\"v2-1a653a656909fa7b560ab8d6f1529ced\" data-watermark-src=\"v2-321dca89b346c57a56b64ba2738b7d58\" data-private-watermark-src=\"v2-18385ad49314230270f4a6e1c60ee017\" data-tags=\"porn\"></p>\n<p data-pid=\"Mo52Hv3N\">普通圆泡：正常情绪的对话。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5c11e7bd2fdb511399703edcbd04002c_720w.jpg?source=b1748391?rss\" data-rawwidth=\"608\" data-rawheight=\"228\" data-size=\"normal\" data-caption=\"双尾巴圆泡\" data-watermark=\"watermark\" data-original-src=\"v2-5c11e7bd2fdb511399703edcbd04002c\" data-watermark-src=\"v2-27dbff277280f59377ab061d37981ef3\" data-private-watermark-src=\"v2-b9382c6595c7b0c068ecc98d13e83319\"></p>\n<p data-pid=\"DgHU8ggp\">双尾巴圆泡：音量略微提高。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2a3d31690619b7dd29f6e247d4d867ea_720w.jpg?source=b1748391?rss\" data-rawwidth=\"345\" data-rawheight=\"371\" data-size=\"normal\" data-caption=\"尖刺泡\" data-watermark=\"watermark\" data-original-src=\"v2-2a3d31690619b7dd29f6e247d4d867ea\" data-watermark-src=\"v2-14901a8e34232630084773a1c4825e42\" data-private-watermark-src=\"v2-16d19eac35b529eb839e23daf44108e1\" data-tags=\"porn\"></p>\n<p data-pid=\"q7jobYe5\">尖刺泡：大喊，音量很高，情绪高涨。</p>\n<p><img src=\"https://pica.zhimg.com/v2-df8c7998b2a71616a1a83d64c80ec7bf_720w.jpg?source=b1748391?rss\" data-rawwidth=\"209\" data-rawheight=\"352\" data-size=\"normal\" data-caption=\"内心泡\" data-watermark=\"watermark\" data-original-src=\"v2-df8c7998b2a71616a1a83d64c80ec7bf\" data-watermark-src=\"v2-4306be6400ca018e44977a0bef36975d\" data-private-watermark-src=\"v2-b2bb2567a10bf0d17b0e7c8d63e22bf6\" data-tags=\"porn\"></p>\n<p data-pid=\"_87jpBsC\">一串圆泡尾巴：角色内心的想法。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7fede5942f6ba1a0679ab28fbfe42801_720w.jpg?source=b1748391?rss\" data-rawwidth=\"283\" data-rawheight=\"314\" data-size=\"normal\" data-caption=\"不规则圆泡\" data-watermark=\"watermark\" data-original-src=\"v2-7fede5942f6ba1a0679ab28fbfe42801\" data-watermark-src=\"v2-ad40c30ccf0111726918ad84cf42908e\" data-private-watermark-src=\"v2-ec45c6c4462bf8cbaf92962571f7cd83\" data-tags=\"porn\"></p>\n<p data-pid=\"6rSpCbOb\">不规则形状圆泡：表示声音不稳定，或紧张，或害怕，或受伤颤抖，或别的什么。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-739fa583d3c8b624603696a7618de69e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"341\" data-rawheight=\"297\" data-size=\"normal\" data-caption=\"电声泡\" data-watermark=\"watermark\" data-original-src=\"v2-739fa583d3c8b624603696a7618de69e\" data-watermark-src=\"v2-1fd884dc1127bacd36924d3bfc50e4f7\" data-private-watermark-src=\"v2-3f3a3de612d5ee773f9e17710fe6f5dd\"></p>\n<p data-pid=\"gsKCXeEc\">多边形方泡带刺角：通话器发出的人声。</p>\n<p data-pid=\"dExVpM9z\">其实还有一个平头尾巴圆泡，表示小声嘟囔，实在太不常用了，我居然没找到图orz。</p>\n<hr>\n<p data-pid=\"q7aLBQXv\">会玩气球泡是漫画作者的基本功之一，每个作者也都有自己的一些小习惯，下面就来说一个《龙珠》中特有的细节。</p>\n<p data-pid=\"n01zrqGv\"><b>普通多边形方泡。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-eff170263345a066738f9e3fa8c8271e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"623\" data-rawheight=\"403\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-eff170263345a066738f9e3fa8c8271e\" data-watermark-src=\"v2-3a5dd285bffab1a6475ab69afeb565ad\" data-private-watermark-src=\"v2-2bf2b495a31c54f91b702251f4c30b3d\"></p>\n<p data-pid=\"XeBM58Ah\">小时候我就发现了，贝吉塔、短笛、人造人、沙鲁等角色，他们说话的气球泡是多边形的，而悟空克林乐平等人是圆泡。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e788116a0f739b95d9fc1124b49bd14a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"644\" data-rawheight=\"433\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e788116a0f739b95d9fc1124b49bd14a\" data-watermark-src=\"v2-9e1690614e79ce39d7419131803752ff\" data-private-watermark-src=\"v2-360ee2841a4133f8254469afbebe61ea\" data-tags=\"porn\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f1bf068f06d9e7c9364dc3d6f1ebec56_720w.jpg?source=b1748391?rss\" data-rawwidth=\"635\" data-rawheight=\"685\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f1bf068f06d9e7c9364dc3d6f1ebec56\" data-watermark-src=\"v2-ba1a793afc406e84c359030ce2a46416\" data-private-watermark-src=\"v2-cf45053c91da4a2d4f9eb0b37def4993\"></p>\n<p data-pid=\"i2b6CMcV\">当时我并没有多想，只是瞬间就领会了：<b>贝吉塔等人是坏人，说话的声音冷峻、尖利、凶狠，总之是坏人的声音；相反悟空他们的声音柔和、纯真、善良，是好人的声音。</b></p>\n<p data-pid=\"rmAsT56F\">即使短笛和贝吉塔后期加入了主角团，他们的声音也未曾改变。</p>\n<hr>\n<p data-pid=\"-uvJdLbM\">知道了这个原则，再重读《龙珠》就会发现很多辅助表达漫画语言的新的细节。</p>\n<p data-pid=\"36rQqjZd\">比如悟空作为一个大好人，肯定是圆泡啊，但是变成超级赛亚人之后就是方泡了。</p>\n<p><img src=\"https://pica.zhimg.com/v2-bf72350a0e46f7b93137653568aff466_720w.jpg?source=b1748391?rss\" data-rawwidth=\"620\" data-rawheight=\"584\" data-size=\"normal\" data-caption=\"普通状态的悟空\" data-watermark=\"watermark\" data-original-src=\"v2-bf72350a0e46f7b93137653568aff466\" data-watermark-src=\"v2-9ee920dc301653ecdfeb34f90310532f\" data-private-watermark-src=\"v2-31f8d18b26452c8d8a1e54fb5c75450a\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-29f31c09d0c6283264aca2e6a807d44f_720w.jpg?source=b1748391?rss\" data-rawwidth=\"665\" data-rawheight=\"638\" data-size=\"normal\" data-caption=\"刚刚觉醒超级赛亚人的悟空\" data-watermark=\"watermark\" data-original-src=\"v2-29f31c09d0c6283264aca2e6a807d44f\" data-watermark-src=\"v2-a8b391dd86f8ca2bda9520d1c3e8ca2a\" data-private-watermark-src=\"v2-2bf4145c996865f6d9cf051f49223f2f\" data-tags=\"porn\"></p>\n<p data-pid=\"JD22sehJ\">大特也是。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c87e172af28e35a0704ed086cb1d7bf6_720w.jpg?source=b1748391?rss\" data-rawwidth=\"639\" data-rawheight=\"530\" data-size=\"normal\" data-caption=\"普通状态的特兰克斯\" data-watermark=\"watermark\" data-original-src=\"v2-c87e172af28e35a0704ed086cb1d7bf6\" data-watermark-src=\"v2-7f107edf526f71698e86daa0d0397acd\" data-private-watermark-src=\"v2-e7191ddbca3f7ccca8f843a3c08c0a85\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-efcad57da40a9b6a949a63794748cbca_720w.jpg?source=b1748391?rss\" data-rawwidth=\"644\" data-rawheight=\"441\" data-size=\"normal\" data-caption=\"超级赛亚人特兰克斯\" data-watermark=\"watermark\" data-original-src=\"v2-efcad57da40a9b6a949a63794748cbca\" data-watermark-src=\"v2-77bd953f41ba5431003b18920fe86a53\" data-private-watermark-src=\"v2-6d949cf29abc3eb54a5d708a490fce29\"></p>\n<p data-pid=\"Zsn5Knp9\">然而超级赛亚人1最高境界的悟空和悟饭又变回了圆泡，即使是超级赛亚人1“全功率状态”的悟空也是圆泡。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b429b49fd9eae8d012cafa089f190ad9_720w.jpg?source=b1748391?rss\" data-rawwidth=\"651\" data-rawheight=\"1011\" data-size=\"normal\" data-caption=\"超赛1最高境界的悟空和悟饭\" data-watermark=\"watermark\" data-original-src=\"v2-b429b49fd9eae8d012cafa089f190ad9\" data-watermark-src=\"v2-b74cb6d19a34d5b4c3254e0922a5762e\" data-private-watermark-src=\"v2-4ef3218b248465870717f8a6bc3637c6\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9ef199fcabc0fd89bba06f0fc2a4e3c9_720w.jpg?source=b1748391?rss\" data-rawwidth=\"629\" data-rawheight=\"503\" data-size=\"normal\" data-caption=\"超赛1全功率的悟空\" data-watermark=\"watermark\" data-original-src=\"v2-9ef199fcabc0fd89bba06f0fc2a4e3c9\" data-watermark-src=\"v2-d9dcb3428c97f8d97c46492cee1480a1\" data-private-watermark-src=\"v2-faee87a78efef4ac43096318ed70a73e\"></p>\n<p data-pid=\"zQgym5Yz\"><b>这正是悟空在故事中的理论：以极低功率维持超赛状态，保持平静的心情，这样在关键时刻就可以承受进一步变身的压力，爆发出超越超级赛亚人的力量。</b></p>\n<p data-pid=\"U_BX7W5y\"><b>不愧是武学宗师，武天老师真的教出了一个好徒弟。</b></p>\n<p data-pid=\"f2wL-dJw\">隔壁速趴悲剧塔就不是这样（哦对，他本来就是坏人声）。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b41e3481d5ec753f21089cff45031833_720w.jpg?source=b1748391?rss\" data-rawwidth=\"641\" data-rawheight=\"626\" data-size=\"normal\" data-caption=\"无泪娃速趴悲剧塔\" data-watermark=\"watermark\" data-original-src=\"v2-b41e3481d5ec753f21089cff45031833\" data-watermark-src=\"v2-7380c04039b73f51908d25e3c7ffee3a\" data-private-watermark-src=\"v2-b2da01f48451cc7f7030c9052630f32f\"></p>\n<p data-pid=\"A-9irPVW\">同样，悟饭的超赛1全功率也是圆泡，但是真正变成超级赛亚人2时，他情绪失控了，再次变成方泡。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-41f6de041002f3ee034d12cf35b7da6e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"649\" data-rawheight=\"445\" data-size=\"normal\" data-caption=\"超赛1全功率的悟饭\" data-watermark=\"watermark\" data-original-src=\"v2-41f6de041002f3ee034d12cf35b7da6e\" data-watermark-src=\"v2-237ca9e4f16a45961abc7f4efb449346\" data-private-watermark-src=\"v2-3bf1e4b8f52f7e3a2f9f4db5339237bd\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-573d12e3e4548cfe1f43609e3d3a9659_720w.jpg?source=b1748391?rss\" data-rawwidth=\"617\" data-rawheight=\"474\" data-size=\"normal\" data-caption=\"超级赛亚人2的悟饭\" data-watermark=\"watermark\" data-original-src=\"v2-573d12e3e4548cfe1f43609e3d3a9659\" data-watermark-src=\"v2-f9102860cdb171e4e68c6d20e5aa9098\" data-private-watermark-src=\"v2-64ec709609dabb78a20c911a7d3468fb\" data-tags=\"porn\"></p>\n<p data-pid=\"CdzGcJtB\">人造人全部都是规规整整的方泡，不论是19号20号，还是17号18，还是心地善良的16号，自始至终没改变过。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f9350152070a577eee424c41956b407e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"573\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f9350152070a577eee424c41956b407e\" data-watermark-src=\"v2-6519960629d42f75c558e762f6102e11\" data-private-watermark-src=\"v2-18b0a04cd11c3ab400fa6db2f74e752a\"></p>\n<p data-pid=\"rvL01PCq\">顺便说，不知道大家注意到没有，人造人是放不出聚气火焰的，也没有发过波（大特未来的17、18号发过），飞行时也没有气焰。他们一般都是肉体搏斗，空裂眼刺惊或者手掌放气炮，还有16号的双臂闪光炮，这是要表现他们是生化人，没有气息的感觉。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-03d3e33dd48ac6fb1c05524e946af3cb_720w.jpg?source=b1748391?rss\" data-rawwidth=\"643\" data-rawheight=\"945\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-03d3e33dd48ac6fb1c05524e946af3cb\" data-watermark-src=\"v2-eb527c7082bc4a97f440e2d8175758b9\" data-private-watermark-src=\"v2-e9fe0a3e7d4ee17310d1f749651290b0\"></p>\n<p data-pid=\"-mVKDsgH\">倒是18号后来和小林学会了气元斩。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ef8525eefc6450431ca23bd1133260bc_720w.jpg?source=b1748391?rss\" data-rawwidth=\"667\" data-rawheight=\"766\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ef8525eefc6450431ca23bd1133260bc\" data-watermark-src=\"v2-876778f4a8a26e136fc71737fd90c70b\" data-private-watermark-src=\"v2-815983cb1e9d3aea2d689ca4c3ef4bc9\"></p>\n<p data-pid=\"-I0bzdhL\">回到主题，胖布欧是方泡，大布欧小布欧都是，即使是被小布欧吐出来的胖布欧也是方泡，但后来成为布欧先生的胖布欧就是圆泡了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-edee50c3e5e1dd323eb56594f897bd4b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"659\" data-rawheight=\"495\" data-size=\"normal\" data-caption=\"刚被小布欧吐出来的胖布欧\" data-watermark=\"watermark\" data-original-src=\"v2-edee50c3e5e1dd323eb56594f897bd4b\" data-watermark-src=\"v2-3ca6b837c40e4c7514546fb05c697abb\" data-private-watermark-src=\"v2-2f9a5b36ad755bb637b8f5e011b4dc83\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ece9bf595a2bb48749b41144ceed5d76_720w.jpg?source=b1748391?rss\" data-rawwidth=\"654\" data-rawheight=\"563\" data-size=\"normal\" data-caption=\"十年后的布欧先生\" data-watermark=\"watermark\" data-original-src=\"v2-ece9bf595a2bb48749b41144ceed5d76\" data-watermark-src=\"v2-acca87afcb1c3aaeb0ee3922957117b3\" data-private-watermark-src=\"v2-76eb33f04484372d9c6249580df79a6d\"></p>\n<hr>\n<p data-pid=\"WtS7jCzc\">当然这个气球泡的应用规则也是在连载中逐步摸索出来的，如果你认为所有的坏人或BOSS肯定都是方泡呗，那么翻回去看《龙珠》早期你会发现，红绸军、桃白白、木乃伊、恶魔人，甚至老短笛、拉蒂兹、首次登陆地球的贝吉塔都是圆泡。</p>\n<p data-pid=\"QTnCLB0Y\">历史上第一个方泡的角色是谁呢？</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b96bae7035473c62d761687fdd7a226b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"604\" data-rawheight=\"544\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b96bae7035473c62d761687fdd7a226b\" data-watermark-src=\"v2-da200e44893e00dfdd541e574ff1428d\" data-private-watermark-src=\"v2-0610c8e5513003ca7f67460983171a13\"></p>\n<p data-pid=\"T99HOl9L\">就是这位，和</p>\n<p><img src=\"https://pica.zhimg.com/v2-6d18e506d8811840df3e69cabac3c35b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"613\" data-rawheight=\"732\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6d18e506d8811840df3e69cabac3c35b\" data-watermark-src=\"v2-fc417cf612d42dd28f36e6cfc072fc67\" data-private-watermark-src=\"v2-3835656dd9adbe3238d4af29ad60600b\"></p>\n<p data-pid=\"b-ECU_47\">这位。</p>\n<p data-pid=\"KWmJIEat\">玛斯尔塔的人造人1号与人造人8号，再有就是海盗基地的骷髅守卫机器人了，虽然它只会说“叽叽”。</p>\n<p><br></p>\n<p data-pid=\"QpwVe0yI\">所以说一开始鸟山明应该只是想表现“机械声”，不同于电话和广播里的人声，是机器人自主发声的声音。除此之外一些明显应该是方泡的角色，比如皮拉夫、红元帅、白兰琪、桃白白、天津饭、铃鼓、老短笛、拉蒂兹等等，都是圆的。</p>\n<p data-pid=\"ylVR4XIt\">一直到贝吉塔降临地球。</p>\n<p><img src=\"https://pica.zhimg.com/v2-fea0ac802d9b80019d944eec01981dbd_720w.jpg?source=b1748391?rss\" data-rawwidth=\"635\" data-rawheight=\"605\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-fea0ac802d9b80019d944eec01981dbd\" data-watermark-src=\"v2-3daa4de0e7ad55e83149115a927c7722\" data-private-watermark-src=\"v2-e6d3c43b262748de25aea0e7c29dce82\" data-tags=\"porn\"></p>\n<p data-pid=\"xLibax5C\">那巴和贝吉塔都是好人声音，这里是个转折点，当贝吉塔残血逃回弗利萨基地时，来迎接他的两个外星人小兵是方泡。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a87fb17b91397fe397bf08275624cde0_720w.jpg?source=b1748391?rss\" data-rawwidth=\"613\" data-rawheight=\"312\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a87fb17b91397fe397bf08275624cde0\" data-watermark-src=\"v2-02edc4d1830608dfa82c24e8a85bc7f0\" data-private-watermark-src=\"v2-913827e67c064785f320d63b91f9578e\"></p>\n<p data-pid=\"5egXNp9d\">等到贝吉塔痊愈出来，他就是方泡了。</p>\n<p><img src=\"https://pica.zhimg.com/v2-3a763947bcf47b51a9e5dc3a804cc447_720w.jpg?source=b1748391?rss\" data-rawwidth=\"620\" data-rawheight=\"585\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3a763947bcf47b51a9e5dc3a804cc447\" data-watermark-src=\"v2-0af93ac1e06443ba031f99b56f58623d\" data-private-watermark-src=\"v2-95eba3957645aa037d22667df8c047ea\" data-tags=\"porn\"></p>\n<p data-pid=\"T9RDjrt4\">我想鸟山明可能是想表达外星人说话的声音比较特殊吧？</p>\n<p data-pid=\"df1KxcC2\">这个时期有点混乱，包括弗利萨大王登场的第一个画面，都是圆泡，后来就全是多边形方泡了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ace64c7342c54d8cd2d3113b1e280835_720w.jpg?source=b1748391?rss\" data-rawwidth=\"634\" data-rawheight=\"668\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ace64c7342c54d8cd2d3113b1e280835\" data-watermark-src=\"v2-2c1d6dba27a27d9f0c94c99da6509b8d\" data-private-watermark-src=\"v2-de691c90a88c7926eb522fdfcc628347\"></p>\n<p data-pid=\"n4etF--6\">一段时间后，鸟山明彻底落实了这个规则，开始严格地应用（偶尔有bug）。</p>\n<p data-pid=\"9Bjt8mTE\">比如短笛在上了界王星之后就变成了方泡，因为同期在那美克星上，他的同胞都是方的。</p>\n<p data-pid=\"uIJHTzp-\">只是在临去那美克星前的一格圆了一下（应该是bug），后来就永远方了下去。</p>\n<p><br></p>\n<p data-pid=\"YHFZzz1D\">基纽特战队，那必须都是方的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4fc66ea406ca457998cb8427e65bf7c4_720w.jpg?source=b1748391?rss\" data-rawwidth=\"649\" data-rawheight=\"354\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4fc66ea406ca457998cb8427e65bf7c4\" data-watermark-src=\"v2-688c492871245ffa3d03b731df4b6fd0\" data-private-watermark-src=\"v2-a473dbba283acd22087b4a3f282ad711\"></p>\n<p data-pid=\"PDQjJ4-1\">而且基纽队长和悟空换过身体后，方圆气球泡也调转了过来，小时候我看到这里时感觉思路非常顺滑，甚至隔着纸面都能感觉到，明明是悟空的外形却发出基纽的声音，这就叫细节。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a2ae3c4c7550c6666d4f6c8b9fca7751_720w.jpg?source=b1748391?rss\" data-rawwidth=\"629\" data-rawheight=\"536\" data-size=\"normal\" data-caption=\"换身之前悟空与基纽的对话\" data-watermark=\"watermark\" data-original-src=\"v2-a2ae3c4c7550c6666d4f6c8b9fca7751\" data-watermark-src=\"v2-3b48a5fd841ffc64f531b4f84ed6e803\" data-private-watermark-src=\"v2-075adc239a2ae02158bc0c48ffde5339\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-01df0a5768016bad4616b16fa7afdcc6_720w.jpg?source=b1748391?rss\" data-rawwidth=\"635\" data-rawheight=\"583\" data-size=\"normal\" data-caption=\"换身后的基纽\" data-watermark=\"watermark\" data-original-src=\"v2-01df0a5768016bad4616b16fa7afdcc6\" data-watermark-src=\"v2-5462b562490080ca0fdb97b236fcc084\" data-private-watermark-src=\"v2-423861eb3795db12da668538a0267054\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a497af3251d7bef1cac9eff59d877ff5_720w.jpg?source=b1748391?rss\" data-rawwidth=\"637\" data-rawheight=\"1002\" data-size=\"normal\" data-caption=\"换身后的悟空\" data-watermark=\"watermark\" data-original-src=\"v2-a497af3251d7bef1cac9eff59d877ff5\" data-watermark-src=\"v2-e301a41752a2df1a935614020225b7b8\" data-private-watermark-src=\"v2-9b489e01e5ef6c3bd5068e73f46d784d\" data-tags=\"porn\"></p>\n<p data-pid=\"01nIq8n1\">往后的人造人篇和布欧篇一直都在使用这套规则，就不多说了，感兴趣的借这个机会把《龙珠》重看一遍吧，看看那些熟悉的人物的声音都是什么感觉。</p>\n<p data-pid=\"7fQEelPb\">小提问：你们猜初登场的撒旦先生是方是圆？</p>\n<hr>\n<p data-pid=\"tzj63mho\">正如前边所说，对于漫画作者而言，会玩气球泡是个很基本的技能，只要有一套自己的规则就好。</p>\n<p data-pid=\"PnmZz7i2\">比如我，方泡单尾巴在我这就是机器声音，扩音器和机器人不分的。</p>\n<p data-pid=\"_E_nS8xu\">不规则圆泡是略微提高音量。</p>\n<p data-pid=\"MxPmZVyO\">泡尾巴弯曲代表讲话艰难、害怕、颤抖等。</p>\n<p data-pid=\"kCsDspjy\">规则比鸟山明大师简单得多，要不怎么说人家是大师呢。</p>\n<p><br></p>\n<p data-pid=\"23a2xD3I\">所以说，现在满大街的那种一股子塑料味的工作室漫画，不仅线条生硬、上色死板、分镜套路、人物扁平、剧情无聊，就连这小小的气球泡都是软件生成的标准椭圆，难怪不好看啊。</p>\n<p data-pid=\"rov_CyFW\">但是人家更新快，有市场（一招默秒全（我死了））。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/iccccccc?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">乌贼ichabod</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/50831512/answer/2462048376?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">273 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/527176940?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《龙珠》当中的超级赛亚人最明显的特征是什么？</a><br><a href=\"http://www.zhihu.com/question/520098389?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《龙珠》动画里贝吉塔的人物剧情是怎样的？</a><br>\n","link":"http://www.zhihu.com/question/50831512/answer/2462048376?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价香草社游戏《十三机兵防卫圈》登录 Nintendo Switch？这意味着什么？","date":"2022-04-28 10:16:22","description":"\n<p data-pid=\"OigM7pHE\">我们曾花了很多笔墨介绍「为何你该体验《<b><i>十三机兵防卫圈</i></b>》」，这款大胆的游戏为科幻主题融入了全新的惊喜。故事中的细节会随着时间不断被赋予新的定义，而且游戏结构也成功地模糊了视觉小说和研究大众文学论文之间的界线。即便如此，我还是能理解为什么依然有很多人没去体验这款作品。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ae7f829b5972ffa02b454a62d3b8348e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"675\" data-watermark=\"original\" data-original-src=\"v2-ae7f829b5972ffa02b454a62d3b8348e\" data-watermark-src=\"v2-8bd2179104007cd80020d75bf2d5e269\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"MzeNl2Iq\">正如游戏的少年主角们总是比决定摧毁世界的怪兽落后一步那样，《十三机兵防卫圈》同样未能赶上好时机。在 PS5 发售的前几周，这款游戏就在 PS4 上发售了，对于一款完全可以在 PS3 运行的 2D 游戏来说可谓是生不逢时。近期，这款游戏终于登陆 Switch 平台。考虑到接下来的一个月里，Switch 平台应该没有太多重磅大作亮相，但愿这款出色的游戏最终能吸引到它应得的受众人数。</p>\n<p data-pid=\"6SdWgAW4\">好吧，刚才说到这是款很不错的游戏，那么大家有什么理由去玩它呢？理由是，你大概玩不到比它打磨得更细致的游戏了，官方以最棒的形式呈现出了这个疯狂的世界。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6920e363386cbc9cfcfd12c219cca787_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"675\" data-watermark=\"original\" data-original-src=\"v2-6920e363386cbc9cfcfd12c219cca787\" data-watermark-src=\"v2-12e535e1af20f71388e39bd8c608b1eb\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"eq3ZOJmf\">故事发生在 1984 年，同时还涉及到过去和未来的时间线，最晚到 1945 年，最早到 …… 好吧，我就不剧透了。你可以按自己选择的顺序，以章节形式体验 13 个角色的冒险故事。渐渐的，你会了解到他们的青少年生活，包括他们的恋情、对手、动机和幻想。你会搞明白为什么在某个遥远的神秘未来，他们必须要驾驶机甲与怪兽战斗。</p>\n<p data-pid=\"IWyGxo2G\">这款游戏并没有参考或借鉴具体哪一部科幻小说，只是从各种科幻作品的设定中汲取了粗略的整体概念，嫁接到一个长篇小说里。你是否曾经好奇《E.T. 外星人》、《哥斯拉》、《终结者》、《黑客帝国》、《世界之战》和其他经典科幻作品整合到一起后会变成一本什么样的小说？尽管这听上去困难重重，但还是具有自己的意义，而这款游戏大概就是你所期待的混合成品了！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5541b0903a1985160ea1793914ff2dbb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-5541b0903a1985160ea1793914ff2dbb\" data-watermark-src=\"v2-5a409385683b5c220230669baeeee4b2\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"P6sdpg6A\">《十三机兵防卫圈》玩起来有点像点击冒险游戏，有很多对话分支选项，而这是其中一半的内容。这款游戏还有实时策略机制和自己的百科，两者都扩展了游戏的设定。这些内容错综复杂，你可以亲自游玩了解相关情况。但 Switch 版本有个值得注意的细节：策略元素在 4K 电视上看起来有点奇怪，但完美适配 Switch 的屏幕。</p>\n<p data-pid=\"HTolldlo\">评价一款游戏能够「完美适配 Switch」，我知道这种话大家都听厌了，但这款游戏真的特别适合在 Switch 上体验，而且原因也比较特别。我很开心自己能随时随地阅览这款海量文字的游戏，但最棒的地方还是在于，Switch 版提供了掌机和 TV 模式。在刷怪或刷对话线索的时候，掌机模式特别好用。不过，在开始新故事时，我更喜欢用 TV 模式，将惊艳的手绘美术投射到更大的屏幕上。我并不推荐大家全程用 TV 模式（毕竟我玩 PS4 版就是这么过来的），但偶尔体验一下，好好欣赏这款游戏的美丽画风，还是没有问题的。</p>\n<p><img src=\"https://pica.zhimg.com/v2-de66f0e6e6f2aea7ccbfff035eea50f4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1460\" data-rawheight=\"672\" data-watermark=\"original\" data-original-src=\"v2-de66f0e6e6f2aea7ccbfff035eea50f4\" data-watermark-src=\"v2-c58317464eb48ff845792d1331491cfd\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"bqjuSwaW\">关于这款游戏，我还有很多想要安利的地方，比如它如何做到在庞大的叙事中层层递进、相关互联。尽管庞大的文本量有时候会破坏游戏体验，但相信我，一旦你开始玩这款游戏，会被其叙事深深吸引住的。</p>\n<blockquote data-pid=\"DQMuPBaB\">文/ Chris Plante<br>译/ 王艺  校/ Zoe<br>Polygon 中华地区独家授权，转载请征得同意</blockquote>\n<p><br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/you-xi-gou-huo-ying-di?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">篝火营地</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/502270782/answer/2461886665?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">116 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/526528528?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《十三机兵防卫圈》已登录 Switch，你的体验如何？</a><br><a href=\"http://www.zhihu.com/question/527907307?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">Switch 版《十三机兵防卫圈》发售，该游戏有哪些亮点？</a><br>\n","link":"http://www.zhihu.com/question/502270782/answer/2461886665?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012 年的、由 Node.j......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。M1 芯片的性能如何？本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/138186/40/23101/50775/622032b3Efa9053d7/df3a819d044a9455.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote>\n<p>题图来自 USTC Hackergame 2019「Happy LUG」</p>\n</blockquote>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/90743/25/22680/55545/622032abE6ef31d51/cfc4cb389c994c17.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote>\n<p>周六不放假休息，还在这加班搞 CTF？</p>\n</blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/86535/11/24318/75037/622032a8E4f94d4ae/89703ccc122cf4e0.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「天下武功，唯快不破 —— 我是这样优化博客的」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 &lt;script async&gt;」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 &lt;script&gt; 的 async 和 defer 属性、以及它们背后的故事。拆开 Google Analytic 的统计代码现在 Google 推出了 Google Tag Manager，通过......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/80291/2/16552/19311/622032b3Eb300c2aa/66748fc8124a01c5.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]