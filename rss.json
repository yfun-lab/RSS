[{"title":"WWDC22 前瞻：即将到来的 Apple 发布会可能有这 10+ 个重要看点","date":"2022-06-01 09:31:15","description":"M2 芯片、新款 MacBook、首款 VR 头戴设备…… 结合近期国内外关于即将到来的 Apple 发布会的最新情报，我们为大家带来了这篇 WWDC22 前瞻报道。<a href=\"https://sspai.com/post/73572\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73572"},{"title":"[有奖] 动手吧！《100 小时后请叫我设计师》课程设计等你挑战","date":"2022-06-01 08:08:52","description":"\n<p>[......]</p>\n<a href=\"https://sspai.com/post/73574\" target=\"_blank\">查看全文</a><p>本文为付费栏目文章，出自<a href=\"https://sspai.com/series/269\" target=\"_blank\">《100 小时后请叫我设计师》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/post/73574"},{"title":"把清单变「简单」，让工作更高效地完成","date":"2022-06-01 06:32:51","description":"清单的本质是提醒请不起秘书，但我用的起清单。关于清单的话题在我派已是老生常谈。但是真正的长期GTD践行者都明白，想要完美落实，其实不在于APP的选择，而在于对任务的理解。能不能执行下去，很大程度上取决 ...<a href=\"https://sspai.com/post/73323\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73323"},{"title":"儿童安全座椅知识大讲堂 ：告别小白，一篇文章让你做儿童安全座椅达人！","date":"2022-06-01 06:05:05","description":"\n<p data-pid=\"0Q_OWI2R\">这一次主要是想讲一讲<b>不同儿童安全座椅类型的故事</b>，作为以后细讲产品的铺垫，文章分为四个部分：</p>\n<p data-pid=\"sOORORjc\">1. 儿童安全座椅的作用</p>\n<p data-pid=\"pT4t_LkZ\">2. 在真实事故中，儿童约束系统有效性的数据验证</p>\n<p data-pid=\"duwMTsR0\">3. 各类CRS（儿童约束系统）在事故中的安全保护效果</p>\n<p data-pid=\"LN4AYwxW\">4. 现行欧盟安全座椅法规ECE R44/04的不足</p>\n<p data-pid=\"v1l4Ec8H\"><b>儿童安全座椅的作用</b></p>\n<h2>\n<b>一</b> <b>、首先是事故中保护儿童</b>\n</h2>\n<p data-pid=\"I22Ffpx1\"><b>误区1：发生事故时，我的车皮厚，也能保护我的孩子。</b></p>\n<p data-pid=\"DB4276KV\"><b>知识点：车能挡住来自外部的伤害，却不能阻止儿童乘员在车内被甩出。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-935391a1e781f161666435de5b8d707e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1037\" data-rawheight=\"665\" class=\"origin_image zh-lightbox-thumb\" width=\"1037\" data-original=\"https://pic3.zhimg.com/v2-935391a1e781f161666435de5b8d707e_r.jpg\"></figure><p data-pid=\"2kxCQ1DI\">当发生碰撞或者紧急刹车时，车内的物体和乘员都会在惯性作用下产生碰撞冲击力。这个冲击力的大小能达到物体及乘员自身重量的几十倍。可想而知，如果此时儿童乘员没有任何约束，碰撞时产生就会在惯性作用下，撞击到车内其他物品或者直接飞出，此过程中会对其造成严重的伤害，甚至失去生命。</p>\n<p data-pid=\"dNYELYM9\">碎碎念：前段时间有人和楼主说，我的车是7座大MVP，车的大梁粗，结实耐撞，孩子在里面绝对安全。把我也弄得一时语塞啊。</p>\n<p data-pid=\"_7SkVBt1\"><b>误区2：抱着孩子就能不让孩子被甩出了</b></p>\n<p data-pid=\"HmZUSEDa\"><b>知识点：你真的以为自己是铁臂阿童木吗？如果不是，就不要抱有侥幸心理。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-0dd68d87d8ca038322d293ee8f3c2a86_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"545\" data-rawheight=\"1165\" class=\"origin_image zh-lightbox-thumb\" width=\"545\" data-original=\"https://pic3.zhimg.com/v2-0dd68d87d8ca038322d293ee8f3c2a86_r.jpg\"></figure><p data-pid=\"elNsFgv8\">在20km/h的瞬时速度差情况下，如果成人怀抱的儿童乘员中10kg，那么在汽车碰撞中儿童乘员产生的冲击力会超过3000N=300kg，成人双臂并不能承受如此大的冲击力，孩子终究会被甩出乘车空间，受到严重的伤害。因此，就算有成人将儿童怀抱，也不能避免。</p>\n<p data-pid=\"Q-coTLoB\"><b>误区3：用安全带固定儿童就好啦~</b></p>\n<p data-pid=\"HKc1UfNh\"><b>知识点：不要当键盘侠凭空想象，你固定着试试，这是给娃上绞刑啊！</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-31d9f8b79af8a11583e3dcef0bcced0e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1384\" data-rawheight=\"526\" class=\"origin_image zh-lightbox-thumb\" width=\"1384\" data-original=\"https://pic3.zhimg.com/v2-31d9f8b79af8a11583e3dcef0bcced0e_r.jpg\"></figure><p data-pid=\"fFctnwBv\">有的家长认为，儿童在乘坐汽车时，只要系好车载安全就可以保证其安全。而现实恰好相反。因为汽车上备有的安全带是针对成人身高设计的，不适用儿童乘员。由于身高的原因，车载安全带往往会绕过儿童的颈部。在碰撞冲击力下，汽车安全带会对儿童乘员的颈部造成严重损伤，甚至造成致命伤害。</p>\n<h2>\n<b>二</b> <b>、在频繁的刹车中保护儿童</b>\n</h2>\n<p data-pid=\"_C9tvPCq\">好，也许有父母被我成功说服了，但问题又来啦。</p>\n<p data-pid=\"0wiXOLN_\"><b>误区4：安全座椅只有在交通事故中才起到作用，买了好贵一个东西不划算哦。</b></p>\n<p data-pid=\"aT0qznNS\">在孩子乘坐儿童约束系统后，就基本避免了被直接甩出去的风险，但其受到伤害的原理已经改变了。但无论如何，儿童被约束后的风险是远远小于无任何约束的风险的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8044b6a7a7d5d51f37707af4e88a0670_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"824\" data-rawheight=\"557\" class=\"origin_image zh-lightbox-thumb\" width=\"824\" data-original=\"https://pic1.zhimg.com/v2-8044b6a7a7d5d51f37707af4e88a0670_r.jpg\"></figure><p data-pid=\"Z0fwLsZe\">在20-30公里的行驶速度中，一旦有急刹车，被孩子就会向前倾，五点式安全带就会受力，通过座椅的吸能性，阻止儿童头部、胸部发生位移，减小这些部位收到的冲击力。也许有人能够保证不发生事故，但是没有人能保证自己不会有急刹车。儿童安全座椅并不是在事故中保护儿童的一次性用品，而是在碰撞或频繁的刹车中，一直能起到保护作用的“消耗品”！</p>\n<h2>\n<b>三</b> <b>、解放爸妈双手，让孩子的旅途更舒服</b>\n</h2>\n<p data-pid=\"uqA7PklW\"><b>误区5：选安全座椅三大要素：1.安全 2.安全 3.安全</b></p>\n<p data-pid=\"1Y4mRXQN\"><b>知识点：选安全座椅三大要素：1.安全性 2.舒适性 3.易操作性</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c8c9a777b03992d7e8bb8f8b12f213f6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1035\" data-rawheight=\"692\" class=\"origin_image zh-lightbox-thumb\" width=\"1035\" data-original=\"https://pic3.zhimg.com/v2-c8c9a777b03992d7e8bb8f8b12f213f6_r.jpg\"></figure><p data-pid=\"3jnNaeMc\">虽然安全性对于安全座椅来说是第一位，但是重要的事情，不一定真的要这样强调三遍的。如果让我非要排出个顺序，我认为是：1.安全性 2.舒适性 3.易操作性 </p>\n<p data-pid=\"c5O3KZVz\">前面两点是针对孩子的，毋庸置疑，也无需解释安全性是第一位。</p>\n<p data-pid=\"iojNIbpc\">但不代表安全产品也不需要舒适，宝宝觉得不舒适，哭闹，会产生N多问题，使用过安全座椅的父母应该有切身体会。</p>\n<p data-pid=\"cbXPZvm8\">第三点其实非常重要，其重要性甚至高于安全性，这一点是针对父母的。如果儿童安全座椅不能被正确安装，安全性 = 0。那为什么只将其排在第三位呢，因为父母有责任，有义务花更多时间去正确使用座椅，哪怕其安装方式复杂。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e9daf35630365c4ae09f362aae122c71_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"368\" data-rawheight=\"444\" class=\"content_image\" width=\"368\"></figure><p data-pid=\"w85-_KOX\"><b>这里就着重啰嗦一下舒适性：</b></p>\n<p data-pid=\"LcaWxaeQ\">儿童安全座椅的躺角一般都会考虑各个年龄段儿童的身体特征和乘坐需求。在使用年龄段上越是有针对性的安全座椅，其舒适度越高。比如提篮通常会设计成160°左右的躺角，可以提供舒适的睡眠环境，同时其空间设计既有包裹性，又会比较宽大。是新生儿的不二选择。</p>\n<h2><b>在真实事故中，儿童约束系统有效性的数据验证</b></h2>\n<p data-pid=\"G3hOD_mV\">前几年安全座椅刚刚进入国内时，不少人觉得这产品都是商家骗人的把戏，是花钱买个心理安慰，矫情。现在随着汽车文化的普及，这样想的人应该不会多了。但仍然需要数据来说话。</p>\n<p data-pid=\"0IoXW88Y\">据德国联邦统计局的数据，1995年-2007年间，儿童安全座椅使用率从87%提升到了97%，而事故中儿童死亡数，从174减少到41名，重伤从2929减少到1274名，轻伤从13705减少到10057名。2016年，德国有4000多万辆汽车，8000万人口，儿童交通事故中死亡已不超过20例。同时儿童安全座椅正确使用率从几十年前不到一半，到目前已经达到80%以上。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-cc8688536b547de8f874267b61bb8406_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"639\" data-rawheight=\"496\" class=\"origin_image zh-lightbox-thumb\" width=\"639\" data-original=\"https://pic3.zhimg.com/v2-cc8688536b547de8f874267b61bb8406_r.jpg\"></figure><p data-pid=\"0k9uQv9j\">在德国，儿童安全座椅儿童安全座椅的普及，以及对儿童安全座椅正确使用的推广，对车辆中儿童乘员起到了明显的保护作用。</p>\n<p data-pid=\"Nbzmn-WB\"><b>接下来，各位最关心的产品部分来了，这一章节为了保持公正性，全文都是直接从EEVC报告翻译出来，满满全是干货。</b></p>\n<h2><b>各类CRS（儿童约束系统）在事故中的安全保护效果</b></h2>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b7a31669a657ef38933b9e8bd41a710e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"920\" data-rawheight=\"691\" class=\"origin_image zh-lightbox-thumb\" width=\"920\" data-original=\"https://pic3.zhimg.com/v2-b7a31669a657ef38933b9e8bd41a710e_r.jpg\"></figure><p data-pid=\"PZGX3P_D\">欧洲委员会（ECE）意识到，只有通过进一步累积基础科学的研究，才能提高行业标准，并实现更高效的儿童安全座椅设计。于是，ECE委托EEVC启动了WG12(假人研究组)和WG18（儿童安全小组）两个项目组进行合作研发，项目中有四个主要任务：</p>\n<p data-pid=\"q5o-UfqU\"><b>1. 对欧洲真实交通事故中正面碰撞（请一定注意是正面碰撞！没有涉及侧面碰撞）的数据进行整理，确认引起儿童损伤的原因。</b></p>\n<p data-pid=\"qZl5mWgM\"><b>2. 设定Q系列假人的规格。</b></p>\n<p data-pid=\"9XKqJMMu\"><b>3. 制定新的伤害评价标准以及法规要求。</b></p>\n<p data-pid=\"oVDeM42c\"><b>4. 然后根据ECE R44的实验条件，总共进行了320次碰撞测试，比较P系列假人和Q系列假人正面碰撞的响应。</b></p>\n<p data-pid=\"AkpPYk_B\">(注：EECV——欧洲汽车安全委员会(European Enhanced Vehicle-safety Committe)，成立于1970年，是一个关于汽车安全实验的国际合作项目，由多个欧洲国家的代表组成。)</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b4ed1b08b9beb226c23794d7f609b644_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"725\" data-rawheight=\"517\" class=\"origin_image zh-lightbox-thumb\" width=\"725\" data-original=\"https://pic1.zhimg.com/v2-b4ed1b08b9beb226c23794d7f609b644_r.jpg\"></figure><p data-pid=\"8Qa986Rd\">以下为来自欧洲各国的真实正面碰撞交通事故中，在使用相应符合ECE R44-03/04儿童安全座椅时，儿童乘员受到伤害形式和程度的统计数据。</p>\n<p data-pid=\"1CfROSoa\"><b>绿色部位 = “满意”</b></p>\n<p data-pid=\"7qMbcQNa\"><b>黄色部位= “需要提高”</b></p>\n<p data-pid=\"KAIKDyBH\"><b>红色部位 = “不满意”</b></p>\n<h3><b>反向安装的提篮（0+组）</b></h3>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9416d7749a20f79935d199b6c532e8eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"417\" data-rawheight=\"221\" class=\"content_image\" width=\"417\"></figure><p data-pid=\"gA_ZzrIG\">- 正面碰撞时，婴儿仅有极小的受伤风险，可以被完好的保护。</p>\n<p data-pid=\"uyVHzXI6\">- 头部的最常见的受伤部位，增加有效的吸能材料有可能会在未来降低这一风险</p>\n<p data-pid=\"23H6fgCB\">- 有三种潜在的受伤形式</p>\n<p data-pid=\"e1VndLh-\"> 1. 在碰撞时，提篮接触到了车辆仪表盘（当提篮被安装在前排时）</p>\n<p data-pid=\"Zf_Lz_lx\"> 2. 婴儿头部碰撞到座椅内部</p>\n<p data-pid=\"N_R4bgiX\"> 3. 提篮回弹后造成的伤害</p>\n<p data-pid=\"_044wY4V\">- 婴儿受伤部位分析：</p>\n<p data-pid=\"7nA5ECez\">60%属于颅骨骨折+脑损伤，30%属于颅骨骨折，10%属于仅脑损伤</p>\n<p data-pid=\"dzwx1dT5\">四肢的受伤也有被观测到，但对四肢的保护远不如比对头部的保护重要，所以对四肢的保护在现阶段并不是提篮设计首要考虑的问题。</p>\n<h3><b>反向安装的五点式安全带座椅（I组）</b></h3>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7dbbbf8502acd67a9ee0bea8510fb887_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"336\" class=\"origin_image zh-lightbox-thumb\" width=\"546\" data-original=\"https://pic4.zhimg.com/v2-7dbbbf8502acd67a9ee0bea8510fb887_r.jpg\"></figure><p data-pid=\"gooZCpxM\">- 在正向碰撞中，儿童乘员在反向乘坐座椅时比正向乘坐时，头部明显会受到更少的伤害。</p>\n<p data-pid=\"4U8FM3h8\">- 反向安装的安全座椅比正向安装的安全座椅能提供更有效的保护。</p>\n<p data-pid=\"bybUE8n6\">- 四肢受伤的风险很小。</p>\n<h3><b>正向安装的五点式儿童安全座椅（I组）</b></h3>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-cd40d5b8086b5e3ba89457a5bece6769_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"405\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic2.zhimg.com/v2-cd40d5b8086b5e3ba89457a5bece6769_r.jpg\"></figure><p data-pid=\"xpVrOo_P\">- 头部的损伤最为明显</p>\n<p data-pid=\"lT29JtX3\">- 头部伤害的原因包括</p>\n<p data-pid=\"pwz76djF\">1. 与车内直接接触</p>\n<p data-pid=\"aQdnu7If\">2. 即使没有发生碰撞接触，产生的角加速度仍然会造成脑震荡</p>\n<p data-pid=\"Av8h-Kru\">- 尽管很少会出现颈部的伤害，但对颈部的保护非常重要，颈部的损伤会造成死亡或者永久性的残疾。</p>\n<p data-pid=\"lkzoLGMa\">- 儿童胸部和腹部的伤害很少发生。</p>\n<h3><b>正向安装的前置护体系统安全座椅</b></h3>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5227a0800c0d89be5d14fb38551ce047_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"176\" data-rawheight=\"191\" class=\"content_image\" width=\"176\"></figure><p data-pid=\"rGm9tQ1c\">- 这部分的数据大部分来源于英国和法国，但即使是这些国家，前置护体式的儿童安全座椅也并不流行。目前并没有真实的事故数据可以证明这种安全座椅是否有效。</p>\n<p data-pid=\"soJHdZ4z\">- 在碰撞中，儿童头部接触与前置护体接触，或者整体/部分从座椅中滑出，都可能是对儿童造成伤害的原因。</p>\n<h3><b>正向安装的安全座椅/使用安全带。（组别I/II/III）</b></h3>\n<p data-pid=\"gEeP0ZZO\">- 当作为I组被使用时，其受伤风险和类型都和正向安装的五点式儿童安全座椅一致。</p>\n<p data-pid=\"yDGQliZP\">- 大多数的研究结果显示，当作为II/III组被使用时，其受伤风险和类型和下面的增高型儿童安全座椅一致。</p>\n<h3><b>增高型安全座椅。（组别II/III）</b></h3>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6d237fff7e25fae3080dd331faefde36_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"270\" class=\"content_image\" width=\"402\"></figure><p data-pid=\"e_kCoLnj\">- 头部始终是最应该被关注的关键部位，其受伤的几率也比较高。</p>\n<p data-pid=\"N3hv_AIQ\">- 腹部的损伤在这一类型的约束系统上有升高。安全带会向腹部内部的器官——肝、脾、肾渗透。当儿童使用此类安全座椅时，应最优先考虑腹部的保护。</p>\n<p data-pid=\"SrPm4Bt6\">- 胸部的损伤并没有经常被检测到，因为儿童的胸部的骨骼比较柔软，所以往往并不会发生骨折，胸部被压缩往往是受伤的原因。然而，胸腔内有重要的人体器官，该部位也应该被重视。</p>\n<p data-pid=\"_mV40gq5\">- 盆骨不是主要的受伤部位。</p>\n<p data-pid=\"Mn2QtcBM\">- 四肢有被检测到骨折，这里主要原因是事故中车辆变形、被外部物体侵入，所以对四肢的保护并不是儿童安全座椅当前阶段重点关注的项目，而是和车辆有关。</p>\n<h3><b>增高垫（II/III组）</b></h3>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-196342f30533e375b2f77e12ee26a2bd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"744\" data-rawheight=\"457\" class=\"origin_image zh-lightbox-thumb\" width=\"744\" data-original=\"https://pic2.zhimg.com/v2-196342f30533e375b2f77e12ee26a2bd_r.jpg\"></figure><p data-pid=\"55mTdTK_\">- 伤害产生的原因和增高型安全座椅一样</p>\n<p data-pid=\"zm0kPxlO\">- 当和增高型安全座椅相比较时，胸部受到损伤的案例会多一些。该结果和座椅的类型并无关系，原因主要是因为使用增高垫的儿童年龄会稍微大一些，其胸部的骨骼更加坚硬，更容易骨折。</p>\n<h2><b>结论：</b></h2>\n<p data-pid=\"AiVxG2Qw\">在速度差为40km/h的正面碰撞中，如果正确使用儿童安全座椅，严重受伤的可能性会非常小。<b>当回顾正面碰撞的这些案例和数据时，会发现幼儿乘员（0+/I组）受伤风险部位主要为头部和颈部，随着儿童年龄的增长，受伤风险部位转移为头部、胸部、腹部。</b></p>\n<p data-pid=\"gq0gfTsU\">新的假人和标准应该反映这一部分的损伤情况。因此，EECV建议在下一代安全座椅标准中，将<b>头部、颈部、胸部和腹部</b>在碰撞中的表现作为检测的项目。</p>\n<p data-pid=\"CllMs6w5\"><b>好了，翻译部分到此结束，现在可以放飞自我了。</b></p>\n<p data-pid=\"ZPK8LUWE\"><b>误区6：提篮聊胜于无</b></p>\n<p data-pid=\"vEv3rfyA\">在这个论坛上第一次看到一个很火的帖子表达这个观点时，真心是震惊了。提篮绝对是对于新生儿完美的保护装置，舒适、安全、便利。个人也觉得用起来比较酷酷的。其优点我TM就不再强调了，上面讲的很清楚。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b6f161bb8c3562392ed18a1308338173_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1036\" data-rawheight=\"695\" class=\"origin_image zh-lightbox-thumb\" width=\"1036\" data-original=\"https://pic4.zhimg.com/v2-b6f161bb8c3562392ed18a1308338173_r.jpg\"></figure><h2><b>自己的小结：</b></h2>\n<p data-pid=\"5JidTPCL\"><b>提篮：</b>最好能配一个，预算高就买好一点的，预算低就买稍便宜一些的，宝宝出生前就开始多看看，当孩子都6个月了，您当然会觉得不划算啦。</p>\n<p data-pid=\"18XHk5Kp\"><b>0-4岁产品：</b>不想买提篮，这个组别产品也是很合适啦，舒适和安全兼顾，一般来说，性价比也很高的。尽量多反向安装。墙裂推荐。</p>\n<p data-pid=\"qH9F5bmH\"><b>9月-12岁产品：</b>这种产品有两种偏向性，一种是偏向于I组的产品，对I组的孩子舒适度和安全性都会好一些，但很多人会发现，孩子6岁以后就用不了了，因为太小了。 另一种是偏向II/III组的产品，空间会较大，那么对I组的包裹性就没那么好啦。有没有均衡的产品呢，可能有吧，但是我还木有发现。所以买这种产品，就是一种妥协。还要说一点，购买这个产品的父母的孩子一般一岁左右，孩子约4岁以上时，要自己拆除安全座椅的五点式安全带，这是很多家长选购时没有考虑到的，五点式的拆除，真的是需要一定动手能力的。</p>\n<p data-pid=\"6whYgI86\"><b>4-12岁产品：</b></p>\n<p data-pid=\"S9Jal9PL\">可以作为0-4岁座椅的后续选择方案。</p>\n<p data-pid=\"VNlbuld5\"><b>增高型安全座椅：</b>这个是首选，有侧面保护。这个组别，就基本告别了五点式安全带和前置护体这种装备，直接使用车在安全带即可。</p>\n<p data-pid=\"KLmC5ft-\"><b>增高垫：</b>这也是一个选择，无侧面保护。胜在轻巧灵活。</p>\n<p data-pid=\"-sH6vl30\"><b>ok，明明一些奇葩的座椅通过了CCC测试，甚至通过的ECE测试，还有ADAC测试，为什么我还在这里强行说他不好呢？</b></p>\n<h2><b>我连欧盟儿童安全座椅法规ECE R44都要喷了</b></h2>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-77fa1e3439d9e042c38937ed2d1b0d5c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"894\" data-rawheight=\"370\" class=\"origin_image zh-lightbox-thumb\" width=\"894\" data-original=\"https://pic1.zhimg.com/v2-77fa1e3439d9e042c38937ed2d1b0d5c_r.jpg\"></figure><p data-pid=\"BIMPJkyz\">开个玩笑，是ECE自己都觉得自己定的法规不够完善，不然也不会有上面提到的一系列的研发工作了。以下是EEVC对现行儿童安全座椅法规的评价原文：</p>\n<p data-pid=\"Cp2K5Jfe\">虽然ECE在不断推广，儿童乘员需要使用经ECE认可的儿童安全座椅，同时也在极大的促进对儿童出行安全进一步的研究。但每一年，在欧洲的道路上有700名儿童死亡，80000名儿童受伤，这样的伤亡是欧洲的社会和经济难以承受的负担。虽然很难判断，到底有多少伤亡是和在符合ECE法规的儿童约束系统相关，但是可以肯定的是，对儿童约束系统进行提升是仍然非常有意义的。</p>\n<p data-pid=\"BgnE5Rt0\">不管在欧洲或者其他地区采取了多少行动，很遗憾在过去十多年中，<b>车辆中对儿童乘员的保护没有取得较大的进展</b>，尤其是与同期的对车辆中成人乘员保护进行比较时更是如此。造成这种情况的重要原因是缺乏基于针对儿童的生物的损伤力学知识和相关的物理参数。</p>\n<p data-pid=\"LDzytnlV\"> 基于广泛的实验和评价，<b>建议ECE R44 用Q系列假人代替P系列假人。同时，建议使用4个新的伤害评价指标，HIC（头部伤害指标），颈椎张力（FX），颈椎力矩还有胸部压缩量。同时将损伤评估参考值提高——意味着各项测试指标限定值更严格。采用新的伤害标准会使儿童约束系统的性能改进成为一个重大的挑战，尤其是对于I组和第II组的儿童约束系统而言。</b></p>\n<p data-pid=\"vssZ2cDz\">现行的ECE R44-04法规确实已经不再适应当今的需求了，我们简单看一下，ECE法规内容大致要求：</p>\n<h3><b>ECE依据儿童的体重，将儿童约束系统分为以下几个组别：</b></h3>\n<p data-pid=\"OXraLcPw\">0+组  13kg以下</p>\n<p data-pid=\"GbR_eK2Q\">I组   9-18kg</p>\n<p data-pid=\"3GFxzBHX\">II组   15-25kg</p>\n<p data-pid=\"oSdhBhPO\">III组  22-36kg </p>\n<h3><b>同时，在碰撞测试中，考核的指标主要为：</b></h3>\n<p data-pid=\"WeZYsmL-\">胸部的合成加速度＜55g</p>\n<p data-pid=\"azHQHVkJ\">胸部向头部方向的加速度＜30g</p>\n<p data-pid=\"3-qqtPrd\">正向安装时：I/II/III组的水平方向头部位移＜550mm</p>\n<p data-pid=\"v0B2P-je\">反向安装时：0+和I组的水平方向头部位移＜650mm</p>\n<p data-pid=\"WwqxVsSR\">可以看出，ECE对动态测试的考核项目并不多，要求也并不算非常严格。以体重来区分产品组别也并不是科学合理的方法。在现在看来ECE标准有诸多不合理，主要是因为在制定标准时缺乏相当多的数据：</p>\n<h3><b>1.缺乏儿童在人体测量学上的物理数据。</b></h3>\n<p data-pid=\"v21omMJ3\">每个阶段的儿童的身体各部位的尺寸，质量的分布等等都不容易测量，因为0-12岁的儿童处于生长发育阶，给这一数据的测量带来了相当大的难度。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b57e1df375184ba889fcc4e2bd5aab61_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1264\" data-rawheight=\"688\" class=\"origin_image zh-lightbox-thumb\" width=\"1264\" data-original=\"https://pic2.zhimg.com/v2-b57e1df375184ba889fcc4e2bd5aab61_r.jpg\"></figure><h3><b>2. 碰撞实验假人的仿真性不高</b></h3>\n<p data-pid=\"jf7xflfS\">在缺乏准确的人体测量学的数据的情况下，假人的仿真性已经会打折扣。在制造假人时，一方面要考虑到如何模拟人体各个关节的生物运动特性，另一方面还需要考虑如何在各个部位加入传感器，来获得碰撞过程中假人各部位的受力、加速度和位移等数据，以此来推断人体在碰撞过程中收到的损伤状况和损伤程度。</p>\n<p data-pid=\"1bBkF5AP\"><b>下图为：Q3假人躯干部分零部件的装配图。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-6c3414db68c8beb41f06c1b1153c1447_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"737\" data-rawheight=\"580\" class=\"origin_image zh-lightbox-thumb\" width=\"737\" data-original=\"https://pic4.zhimg.com/v2-6c3414db68c8beb41f06c1b1153c1447_r.jpg\"></figure><p data-pid=\"mSp0shxI\">现在的儿童约束系统是通过1970年代研发的“P系列”假人进行测试的。这些假人主要被设计为适当的尺寸以及质量分布的装载装置，其测试能力有限。新一代的儿童假人被称为“Q系列”假人，其在CRS碰撞试验中的表现——尺寸、动力响应、生物力学更加像真人，促进了其在关键部位损伤风险评估中的应用。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-386a788706a7a05f2ce77f47e1074f7b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"479\" class=\"origin_image zh-lightbox-thumb\" width=\"732\" data-original=\"https://pic4.zhimg.com/v2-386a788706a7a05f2ce77f47e1074f7b_r.jpg\"></figure><h3><b>3. 缺乏生物力学分析方法。</b></h3>\n<p data-pid=\"AnVJOW88\">生物力学的分析，即是对人体的损伤情况和程度进行研究，分析损伤机理，采取相应的措施，以减少或消除人体伤害。通俗的讲，就是<b>为什么ECE认为胸部加速度55g不会对儿童造成伤害？为什么不设定为45g或者65g？</b>但是现在对于儿童的相关研究非常少，现在的相关数据的确定，<b>主要是在成人的数据上进行一定比例的缩放，</b>即相较成人的要求而言，针对儿童的要求更加严格。但可想而知，缩放得到的数值和真实情况仍然是不准确的。</p>\n<p data-pid=\"8kmO4geV\"><b>另外一种方法是采集真实事故中的儿童受到伤害的数据来进行评估，但目前仅有40起事故可供参考。</b></p>\n<p data-pid=\"aQZtzAQh\">简单的讲一下下面的图是什么，不感兴趣的可以自动忽略。</p>\n<p data-pid=\"Nk9EC-rf\">HIC：头部伤害指数，单位s</p>\n<p data-pid=\"G4bsLmrb\">Upper Neck FZ：上颈椎Z方向的受力，单位N</p>\n<p data-pid=\"6xRWwoCG\">Chest defiection：胸部压缩量，单位mm</p>\n<p data-pid=\"BIH0W5jb\">Head ACC 3ms：头部3ms的加速度，单位g</p>\n<p data-pid=\"0kv5_HH-\">Upper Neck My：颈椎Y方向的扭矩，单位Nm</p>\n<p data-pid=\"wjaTPiYI\">表格横坐标的0-6代表的是假人的年龄。能取到数据的为0岁，1岁，1.5岁，3岁，6岁。</p>\n<p data-pid=\"nVf6gyBv\">AIS代表伤害指数，AIS3=严重伤害</p>\n<p data-pid=\"PWCaUAbt\">CM=Certainty Method，确定性方法</p>\n<p data-pid=\"WIv9iNA7\">LR=Logistic Regression，逻辑回归法</p>\n<p data-pid=\"lltK5th7\">AIS3+20%CM意味着，在确定性测量方法下，20%的风险会导致严重伤害</p>\n<p data-pid=\"OoIdDEHz\">拿一个图来举例，在头部加速度这一栏这一栏，如果取20%作为风险，<b>则判定，0岁的孩子大约在g=90的时候，有20%的风险受到严重伤害，而3岁的孩子，在g=80的时候，有20%的风险受到严重伤害。</b>那么标准怎样制定呢？当然是尽量取到0风险，不会发生严重伤害的值。可能是50g，也可能是40g。这个就取决于标准的制定者了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3a8e910685c3d5020c20e7b7b319a3a5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"904\" data-rawheight=\"753\" class=\"origin_image zh-lightbox-thumb\" width=\"904\" data-original=\"https://pic2.zhimg.com/v2-3a8e910685c3d5020c20e7b7b319a3a5_r.jpg\"></figure><h3><b>不要迷信碰撞速度！</b></h3>\n<p data-pid=\"2PNwfw9B\">虽然国内对更高的“碰撞速度”有迷一样的狂热，但通过以上分析可以看到，<b>对碰撞试验结果评估影响的关键因素并不只是速度，碰撞速度只在一定范围内有足够的参考意义，如今在ADAC进行的77km/h的正面碰撞已经是一个非常高的数值。并且在这里仍然需要强调的是，77km/h意味着，在一个规定的减速时间段内，碰撞前后的速度差值，而不是时速。</b></p>\n<p data-pid=\"BKpOh_ff\">近期看到一篇值友的文章，虽然讲的是汽车碰撞速度，但是对儿童安全座椅也是有借鉴意义的——50km/h的测试速度是合理的。</p>\n<p data-pid=\"DWP5RmGQ\">测试中使用的假人，在当前阶段无论如何仿真，都无法完全模拟出真实交通事故下的情况。因为儿童是有血有肉的，<b>在更高速的真实事故碰撞下，儿童的血管会因无法承受如此高的压力而破裂</b>。这些都是在试验中无法体现的。</p>\n<p data-pid=\"ObtNAK7m\">很多小的品牌在设计儿童安全座椅时，一方面是模仿大品牌的儿童安全座椅，用“皮尺”设计出外观一模一样的产品，而在碰撞测试中，实际成绩会差很多，往往只能达到及格线。一方面，有的品牌没有考虑实际交通事故中对儿童的保护，而专门针对ECE R44法规中检测的项目设计安全座椅。前置护体的安全座椅就是此种类型。</p>\n<h3><b>终于可以说到前置护体了！</b></h3>\n<p data-pid=\"TSNOntZj\">关于前置护体的争论相当多，大部分的论点都是基于风险推测和现阶段法规的要求来做的评价。在这一框架下，是吵不出什么结果的。然而，前置护体致命的缺点确实没有任何人提及过——胸部压缩量。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-181671d587a28407b2fb9bd28e101657_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"451\" data-rawheight=\"566\" class=\"origin_image zh-lightbox-thumb\" width=\"451\" data-original=\"https://pic4.zhimg.com/v2-181671d587a28407b2fb9bd28e101657_r.jpg\"></figure><p data-pid=\"Q7iZx44b\">前置护体在所有的正向碰撞测试中，都会取得很好的成绩。哪个前置护体座椅在“ADAC”中，如果没有取得一个“好”的成绩，估计都不好意思出来见人了。这种类型座椅的前置护体，其内侧是相当大的一块EPS泡沫，当发生碰撞时，儿童身体和前置护体发生全面的接触，<b>前置护体装置能非常简单粗暴的吸收大部分碰撞中的能量，将假人胸部的加速度直接降下来</b>。听起来没有什么问题，但是目前在常规的测试中，有一个致命的关键的指标并没有被体现——胸部压缩量。<b>过去P系列假人并不具备测量胸部压缩量的能力，如今用Q系列假人对前置护体安全座椅进行碰撞测试时，前置护体安全座椅的对儿童的胸部压缩量大约在4cm左右，比五点式安全带儿童安全座椅多出一倍多，而如此高的胸部压缩量对幼儿是有致命危险的</b>。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-eb73e7099bdfe03ecce25ea1a8f2ec9a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1059\" data-rawheight=\"693\" class=\"origin_image zh-lightbox-thumb\" width=\"1059\" data-original=\"https://pic3.zhimg.com/v2-eb73e7099bdfe03ecce25ea1a8f2ec9a_r.jpg\"></figure><p data-pid=\"dD5nNpP0\">自Q系列假人完全被开发并投入测试以后，胸部压缩量已经明确被提出，是在未来碰撞测试中需要被检测的项目。</p>\n<p data-pid=\"AmtDUYxx\">说了这么多，安全座椅怎么选呢？我估计大家心里还是蒙的，伸手党看了这篇文章可能要失望了，同时大家也会发现。但我相信，授人以鱼不如授人以渔。我很难告诉你，哪个品牌哪个产品是最好的。安全座椅这个特殊产品，应该说只有最合适你家宝宝的，而没有最好的。太多的父母，宁愿花几千元购买昂贵的儿童安全座椅，而不愿意多花几分钟学习儿童安全座椅正确的使用方法，不能正确使用——安全性 = 0。在孩子身上，需要投入的不仅仅是金钱，更重要的是时间和真正的关注。</p>\n<p data-pid=\"CCoI0PfE\">无论何时，我都想再次强调，<b>正确使用儿童约束系统比选择“更安全”的儿童约束系统更重要</b>。从80年代初，欧洲儿童约束系统法规实施后，统计结果表明，儿童伤亡率并没有显著降低，报告显示，其原因在于儿童安全座椅误用率超过70%。儿童安全座椅在这些年以来，被不断的改进，除了安全性以外，很重要的一点就是易用性。先使用了儿童安全座椅的外国人，也用了相当长的一段时间，普及安全座椅正确的使用方法和必要性。</p>\n<hr>\n<a href=\"https://zhuanlan.zhihu.com/p/75763194\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-71fb30a3013b6e817fa757e381e505fc_180x120.jpg\" data-image-width=\"1023\" data-image-height=\"500\" class=\"internal\">龙鸣天澜：儿童安全座椅知识大讲堂：德国儿童安全座椅主流品牌“爱恨情仇史”</a><a href=\"https://zhuanlan.zhihu.com/p/76740809\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-0aea431ac8d45bc07913e08ffce9fbf9_180x120.jpg\" data-image-width=\"5760\" data-image-height=\"2490\" class=\"internal\">龙鸣天澜：儿童安全座椅知识大讲堂：0-4岁组安全座椅选购建议</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/pei-gong-yin-jiu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">龙鸣天澜</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/78107766?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"三元锂离子动力电池和磷酸铁锂电池哪个要更适合电动汽车？","date":"2022-06-01 03:21:28","description":"\n<h2>其实这个题目下面的问题描述很具体，但是题目却很宽泛。看了一下这似乎也是一个老问题，估计题主当时的具体个人问题早已经解决了，而回答列表中大多数也是就着这个题目本身在回答，那我也简单谈谈我的看法：</h2>\n<hr>\n<h2>首先我说说我的观点：从更加经济的角度，标准续航和经济型电动汽车更适合磷酸铁锂电池，而长续航和豪华车系，更加适合三元锂电池。但是从产业发展的角度来说，我认为继续坚持高能三元锂电池路线，并适时转向包括固态锂电在内的高能电池路线依然是首选。而我的理由，其实和三体中章北海坚持认为化学工质方向不应该成为太空军方向的理由是一样的。</h2>\n<hr>\n<p data-pid=\"F2IkXKQi\">关于新能源汽车的技术路线一直以来有两条：</p>\n<p data-pid=\"ctMmKXDM\"><b>第一条技术路线，我称为高能电池路线：</b> 是以不断提升能量密度的三元锂电池的插电式混合动力与纯电动的路线，认为随着电池的能量密度的提升，对于从低速电动车到大型车，都应当采用高能三元锂电池，均可以采用纯电动技术，结合插电式混合动力的补充，以高能锂离子电池为突破方向。一方面单体电池的能量密度向350wh/kg，系统260wh/kg冲击，另一方面电池系统的成本下降到0.8元/wh甚至0.6元/wh以下。</p>\n<p data-pid=\"2C8Tymie\"><b>第二条技术路线，我称为安全电池路线</b>：是认为应当采用安全成熟的电池，结合技术实际发展实际节能减排的汽车。其中，低速电动车可以采用铅酸电池（目前铅酸电池的可回收率为100%，由于回收门槛低，企业获利模式成熟，污染很少，而三元锂电池的回收目前几乎为0，基本依赖政府补贴进行元素回收），也可以用锂离子电池，由市场决定。纯电动汽车主要应用在微小型车，中大型车以发展超经济内燃机为增程器的纯电驱电动车为主。其中，在电池方面，可以采用新一代的高能磷酸铁锂电池，单体比能量大概在180wh/kg，系统能量密度可以达到150wh/kg。</p>\n<p data-pid=\"hBNQ8Kox\">2016年之前，中国以比亚迪为代表的企业自主掌握并有能力大量生产的只有磷酸铁锂电池，三元锂电池国内从2015年开始准备出货，但是当时包括韩国LG，日本松下等企业提前布局了生产线并大规模的倾销三元锂电池，计划在高能电池路线的开始迅速抢占中国的三元锂电池市场。2016年1月，工信部以三元锂电池安全审查的名义，中止了三元锂电池进入国家补贴目录的资格，这导致了中国当时上千亿规模的三元锂电池投资项目搁置，引发了汽车行业极大的讨论。<b>安全电池路线赢了第一局。</b></p>\n<p data-pid=\"DvZtBLIo\">我本人在2015-2016年期间也参与了技术路线的讨论，尽管当时有很多学者依然坚持磷酸铁锂电池路线并提出了很多看法（主要还有比亚迪等磷酸铁锂企业的背后支持与公开发声），但是磷酸铁锂电池确实是太糟糕了当时，系统能量密度低于80wh/kg，低温特性一塌糊涂。2016年工信部对于三元锂电池的拦截终究还是抵挡不住技术趋势对于高能电池的渴求，最终三元锂电池的发展还是发展起来了。<b>高能电池路线扳回一局。</b></p>\n<p data-pid=\"wiOhTyon\">2017年2月，韩国萨德事件，引发了国内以LG电池为代表的三元锂电池系统的重新考量，稍微延缓了三元锂电池的替代速度。<b>安全电池路线的喘了一口气。</b></p>\n<p data-pid=\"tPfRLVtB\"><b>2017年后，随着国内以CATL等自主企业在高能三元锂电池产能与技术方面的快速崛起和大量铺货，高能电池路线堂堂正正赢了。高能电池路线左右了大量的规划与法律，例如：</b></p>\n<ol>\n<li data-pid=\"t5Edws2C\"><b>低速电动车合法化难产，要求低速电动车企业尽快提升为以乘用车标准审核的高技术企业，同时电池必须提升为三元锂电池；</b></li>\n<li data-pid=\"P9LwSd8S\"><b>电池能量密度的补贴门槛与系数门槛连年提升，引导企业飞速冲向811高镍。</b></li>\n</ol>\n<p data-pid=\"N1sjs0p1\">2018年下半年，随着高能电池路线遇到瓶颈，高能磷酸铁锂电池技术的新发展，安全电池路线自8月份开始，受到了从政府到学界人员的频频背书，而当年高能电池路线的倡导者们，也开始为未来的变调做准备，开始鼓吹以2030年为目标的固态锂电和锂硫电池，还有氢能燃料电池为目标。</p>\n<p data-pid=\"IyhDGwrf\"><b>从2018年下半年开始至今，开始出现转向安全电池路线的风向。</b></p>\n<p data-pid=\"82ge7qpJ\">导致高能电池路线 + 插电式混合动力/纯电动整车路线波折，从短期来说的原因主要是：</p>\n<ol>\n<li data-pid=\"T4DFz9jv\">高能电池安全问题恐难以收拾；</li>\n<li data-pid=\"Fzkaoqu7\">锂离子电池回收难；</li>\n<li data-pid=\"fr8qTwk1\">锂离子电池梯度回用安全性风险；</li>\n<li data-pid=\"i17Cx6Kn\">充电设施状态改进缓慢而且代价高昂，快充技术无法解决，并带来安全和电池寿命的风险。</li>\n<li data-pid=\"oZ6rHeso\"><b>若电池技术无重大变革，且电动汽车飞速发展，钴现有储量将在2035年耗尽，锂的现有储量在2045年耗尽，但是地球总资源量足以支持到2050年后（但开采难度上升）。多种电池相关金属价格飞速上涨，而且开采难度加大，开采能耗庞大。</b></li>\n</ol>\n<p><img src=\"https://pic2.zhimg.com/v2-da03a068690243057d6a55e9af7f7a1d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1475\" data-rawheight=\"837\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<hr>\n<h2>看到这里，2022年的你是不是也觉得很应景，我要告诉你的是，上述所有内容其实这是我2018年的专栏文章的内容，时隔3年半，情况还是如此，而且愈演愈烈。</h2>\n<p data-pid=\"TBJ3LbL8\">（由于技术发展和锂元素的价格快速爬升，关于回收不挣钱导致几乎0%回收、个别能量密度描述等与当前最新情况略有偏差，不过无伤大局）</p>\n<p data-pid=\"LRlvxjLW\"><a href=\"https://zhuanlan.zhihu.com/p/52882768\" class=\"internal\">JackyQ：插电/增程之变与万钢文章解读：不了解WTW，就不了解驱动系统的未来</a></p>\n<p data-pid=\"GN4NSDzG\">近年来如下几个方面更加恶化：</p>\n<ol>\n<li data-pid=\"HtSBA3HH\">锂、钴、镍、铜价格的暴涨或者持续高位，令三元锂电池的价格基本上已经回到了2019年之前。而支撑高能三元锂电池的一个重要原因，是随着电芯能量密度上升之后，能量密度的上升速度远高于单个电芯本身的价格上升速度，那么每kwh的平均价格就会进一步下降。而目前在锂价上涨的背后，镍、钴甚至石墨的价格都在涨价或者维持高位，俄乌战争让欧洲直接断了镍。这些都在影响高镍高能三元锂的应用；</li>\n<li data-pid=\"XAuIWVdV\">有很多的会说安全性的担心，其实站在2022年，三元锂电池的问题不是车企担心会有多少起火的案例，而是为了应对起火案例目前需要投入的成本非常高，同样也在抵消原来的三元锂电池随着能量密度上升之后的相对低成本的效应。</li>\n</ol>\n<p><img src=\"https://pic1.zhimg.com/v2-78359f14f59a161ca01d452ca609f19c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1986\" data-rawheight=\"1107\" data-watermark=\"watermark\" data-original-src=\"v2-78359f14f59a161ca01d452ca609f19c\" data-watermark-src=\"v2-7748b252c544b70995923ed1025653de\" data-private-watermark-src=\"v2-a678686966e5e6df9b933a2a751acd44\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-9fd458a251bc6766b2ce8c78847e05e3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"802\" data-rawheight=\"537\" data-watermark=\"watermark\" data-original-src=\"v2-9fd458a251bc6766b2ce8c78847e05e3\" data-watermark-src=\"v2-42c1451b42fada3286f0e7ccbc8746d2\" data-private-watermark-src=\"v2-2ce0f4f2e991dafd34f77fb3fc074d9d\"></p>\n<p data-pid=\"6a7ehfDE\">上图是我之前做通用汽车搭载在凯迪拉克Lyriq（刚刚发布中文名叫锐歌）奥特能电池的解析文章中的一部分：</p>\n<a href=\"https://zhuanlan.zhihu.com/p/425572424\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-791225f83a92089de830b2044f3dcf81_qhd.jpg?source=b1748391\" data-image-width=\"3992\" data-image-height=\"2992\" class=\"internal\">JackyQ：超深度：109年前终结电动车的通用，在上海投产了面向下一个百年的纯电平台：奥特能 Ultium</a><p data-pid=\"fPrmbOim\">在过去的四年中，三元锂电池和磷酸铁锂电池已经走出了两条完全不同的道路。</p>\n<h2>三元锂电池的安全策略已经不再坚持单体肯定没问题，而是在尽力减低三元锂化学体系下的热失控概率的情况下，进一步通过多重安全策略试图绝对的确保单体热失控不会扩散到其他单体，或者至少极大的迟缓热扩散速度，从而实现电池极高的安全性，并提供超长的预警时间。</h2>\n<p data-pid=\"gysvNunI\">所以你从上面的表格可以看到，从化学体系改进、模组安全、电池包安全策略（包括排气、防爆阀、冷却策略等等）、电池包结构强度（全面回归高强度钢和以最高的美标碰撞作为电池包碰撞安全参考）、线束安全、BMS优化等等一系列方面的措施在遏制电池包的失控风险。</p>\n<h2><b>但是这带来的影响是三元锂电池方案现在更加昂贵了。</b></h2>\n<h2>而相比之下，磷酸铁锂电池由于单体的能量密度依然还是非常有限，因此即便是刀片电池，事实上也是在依靠磷酸铁锂的化学铁行和又薄又长的刀片结构来优化在单针穿刺情况下的短路风险（由于回路更长，产生的热更小）和散热能力。而为了弥补能量密度不足，只能采用了包括CTP才能的更加激进电池包结构，这些事实上是在牺牲安全性。</h2>\n<h2>或者我们简单的总结：磷酸铁锂的解决方案在安全策略方面几乎可以说完全在依赖磷酸铁锂自身的相对稳定的化学体系。</h2>\n<p data-pid=\"yFP4yYoZ\">具体请参考我的文章：</p>\n<a href=\"https://www.zhihu.com/question/383714595/answer/1216076269\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-308e87e0bd8e361c845c5475fd4627fb_qhd.jpg?source=b1748391\" data-image-width=\"1502\" data-image-height=\"845\" class=\"internal\">如何理解欧阳明高院士提出的动力电池发展的三个方向？</a><hr>\n<p data-pid=\"pzFZL9Uo\">那么这样下去带来的趋势是什么呢：</p>\n<ol>\n<li data-pid=\"vsG43xvW\">经济型电动车和标准续航在目前使用磷酸铁锂电池的性价比更好。因为目前的成本优势确实非常明显。</li>\n<li data-pid=\"2r5pZZRh\">长续航电动车和豪华车电池包高能三元锂电池更好。磷酸铁锂，包括刀片电池，其实并没有解决锂离子电池 “燃料”与“氧气”并存的情况。磷酸铁锂的化学体系并不能免疫单体热失控，而碰撞问题会导致目前的磷酸铁锂的电池包甚至可能更加危险，包括刀片电池（单体体积更大，相同碰撞条件下的受损和击穿区域更多，单体能量更大，电池包采用的安全策略极少甚至是负面的，由于试图提高能量密度的原因电池包的结构强度也普遍不足）。所以去年到今年我们看到了很多磷酸铁锂电池电动车的起火，其中尤其是碰撞起火的案例更加触目惊心。而更大的电池包，更加强劲的性能，也带来更大安全挑战，理应有更加全面的安全策略投资，仅靠化学体系是远远不够的。</li>\n</ol>\n<h2>或者我们反过来说，磷酸铁锂的所谓安全性事实上远远比不上高能三元锂电池路线给车辆在布置、续航、极端天气的性能稳定性、电芯的一致性方面的巨大优势。</h2>\n<p data-pid=\"11wEN4RW\">在这样的基础考虑之下，我们就要看车企的技术路线如何选择了，因为现在越来越强调的是平台化，系统开发的一致性也会影响电池的选择。磷酸铁锂优势的企业会扩大磷酸铁锂路线的上限，而三元锂优势的企业会不断下探三元锂平台的下限。</p>\n<hr>\n<p data-pid=\"h-09R_je\">我个人更倾向于高能三元锂电池的路线。因为我认为磷酸铁锂电池的回潮很大程度上是一种妥协，而且由于其非常实际的成本优势，令中国本土车企在更高能量密度电池领域的投入产生了犹豫，其最典型的现象就是基本上所有的国内本土电动车企业，即便其产品线全部都是三元锂电池，现在在技术上也几乎都做了磷酸铁锂方案。</p>\n<p data-pid=\"MU-kl1oJ\">磷酸铁锂电池在能量密度方面有天生的短板、低温性能不足、应对快充性能的发展、电芯一致性等方面同样有限，我理解这几年大家会从各大电池企业看到各种补丁，但是磷酸铁锂的瓶颈已经到了它的极限了，现在很多做的都是系统优化和结构优化。</p>\n<p data-pid=\"luqu_ZTY\">而高能三元锂电池的发展空间还很大，过去几年在电解液、电极、循环性能、制造甚至回收方面的进展也很多。回归到本源，纯电动车的优势领域主要是豪华和小型车两个极端，然后向中间延申，而主要痛点依然是充电和续航，前者比后者还要重要。而在快充和续航领域，三元锂电池的优势依然明显，在这些核心优势的基础上，三元锂电池化学体系和电池包策略上开展优化减低安全担忧的技术路线我认为更加可靠和稳健。</p>\n<h2>电池产业和别的汽车相关产业最大的不同，就是必须需要巨大的产业体量才能平抑成本。电池化学体系具体路径上，因为产业化速度过慢而死掉不计其数。正如在三体中，章北海担忧若太空军投资在当时看起来更具有性价比的化学工质推进策略，会导致辐射推进方案的研究被搁置和拖延，从而射杀了工质派一样。随着电动汽车市场竞争日渐刀剑见红，相关技术体系愈加复杂和投入巨大，企业和市场化开始承担主要的资金来源，更加聚焦或许更适合这个产业发展。</h2>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/JackyQ?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">JackyQ</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/28128456/answer/2505894471?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">90 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/505421736?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">电动汽车的三元锂离子电池有哪些使用注意事项？</a><br><a href=\"http://www.zhihu.com/question/517474898?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">电动汽车动力电池的压差问题？</a><br>\n","link":"http://www.zhihu.com/question/28128456/answer/2505894471?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"永磁同步电机目前发展现状如何？面临哪些技术挑战？","date":"2022-06-01 03:05:50","description":"\n<p data-pid=\"K2USJoMO\">先上个自己做的思维导图，大概说下现在的电机分类。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7228e03f636af6aa67d1b9ca3f3bfb1c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1015\" data-rawheight=\"552\" data-watermark=\"watermark\" data-original-src=\"v2-7228e03f636af6aa67d1b9ca3f3bfb1c\" data-watermark-src=\"v2-c274eceb923d2803acaf6ff20c7cd483\" data-private-watermark-src=\"v2-6a69bac253fae029ae86e24e31420a25\"></p>\n<p data-pid=\"yLjgHEzh\">同步电机根据产生磁场方式可以分为<b>电励磁同步电机</b>（转子绕组在外接电流下产生磁场）和<b><a href=\"https://www.zhihu.com/search?q=%E6%B0%B8%E7%A3%81%E5%90%8C%E6%AD%A5%E7%94%B5%E6%9C%BA&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2500508875%7D\" class=\"internal\">永磁同步电机</a></b>（转子直接加上永磁体）。</p>\n<p data-pid=\"IIBhdFhv\">而永磁电机实际早在几百年前就已经出现，是世界上的首款电机。但是当时永磁材料性能不良，磁性较差、容易退磁等特性无法被市场接受，后来被电磁式的电机所取代。一直到20世纪60年代的稀土钐钴永磁体的研制成功，80年代的钕铁硼永磁体的出现，使得永磁同步电机重新出现在了电机舞台上。</p>\n<p data-pid=\"cXLsJoTF\">随后在汽车领域，永磁同步电机也开始了商业化之旅。早在1996年，丰田RAV4就搭载了东京电机公司的插入式永磁同步电机作为驱动电机，最大功率50kW，最大转速1300r/min。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-55a1fd6bc665ddd06e0ea960abf102a9_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"429\" data-watermark=\"watermark\" data-original-src=\"v2-55a1fd6bc665ddd06e0ea960abf102a9\" data-watermark-src=\"v2-bbe35fc34073022cb16923fad463cb14\" data-private-watermark-src=\"v2-4b99f2b76fc3cd9f51b97200dd3c3614\"></p>\n<p data-pid=\"JlvVa3H8\">而随着近十年来的高耐热性、高磁性能的钕铁硼永磁体的成功产业化，集成电路/计算机技术和电力电子元件技术的快速发展，永磁电机迎来了一个黄金时代，凭借其高效率、比功率大、节能显著等特性，无论是军工领域、航天领域、农用领域、民用领域都在迅速的开花结果。</p>\n<p data-pid=\"RxeT-j51\">在2017年，我国永磁电机产量就达到了1107.1万千瓦，是全球永磁电机的主要生产国。而相关的技术研发，国内虽然起步较晚（2000年初开始），但经过二十多年的发展，现在已经成为了国际第一批队的水准。</p>\n<p data-pid=\"rgQSd0Bs\"><br>回到汽车领域，国内的电动车之王比亚迪旗下多款新能源，都搭载了永磁同步电机。新老电动车势力，如吉利、奇瑞、小鹏、理想也都搭载的永磁同步电机。</p>\n<p><img src=\"https://pica.zhimg.com/v2-afe17bb5dd02b2a3bd747f92d410716a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1092\" data-rawheight=\"822\" data-watermark=\"watermark\" data-original-src=\"v2-afe17bb5dd02b2a3bd747f92d410716a\" data-watermark-src=\"v2-368b3122b2e233af5686ccb8fd21f7fa\" data-private-watermark-src=\"v2-25badfd80cc4747412d2492b45c1b287\"></p>\n<p data-pid=\"Y1x1xKBQ\">什么是永磁，顾名思义，<b>永磁</b>指的是电机的转子上安装了永磁体，采用<b>稀土材料（钕铁硼等）</b>制造，在非高温环境下能够永久保持磁力。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5b40fb26a272a2a942a814201f43c0c4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"630\" data-rawheight=\"393\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"fqGPaXNZ\">而<b>同步</b>则表示转子的转速和定子绕组产生的旋转磁场始终保持同步，意味着只要控制输入的电流频率就能控制电动机转子的转速。</p>\n<p data-pid=\"LgiqKUPe\">具体原理为定子的三相绕组中通过三相对称电流，将会产生<b>定子旋转磁场</b>。定子旋转磁场对于转子旋转在笼型绕组内产生电流，产生<b>转子旋转磁场</b>。定子旋转磁场和转子旋转磁场相互作用产生的<b>异步转矩</b>使得转子由静止到转动。启动完成后，转子绕组不在起作用，由<b>永磁体和定子绕组产生的磁场相互作用产生驱动转矩。</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-28d2bae89abedd4f801a50fde6f2a4de_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"677\" data-rawheight=\"337\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"yJ0DYRi-\">永磁同步电机根据永磁体在转子上的位置不同，分为<b>表面式转子结构（表面式永磁电机）和内置式转子结构（内置式永磁电机）。</b></p>\n<p data-pid=\"eI1OxdSx\"><b>表面式转子结构</b>又分为表面凸出式转子结构和表面嵌入式转子结构。</p>\n<p><img src=\"https://pica.zhimg.com/v2-ef7e556ee086789cdb7384ed3ca856c4_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"436\" data-watermark=\"watermark\" data-original-src=\"v2-ef7e556ee086789cdb7384ed3ca856c4\" data-watermark-src=\"v2-6b6d5a5ee5d0939db71cd84ac69275aa\" data-private-watermark-src=\"v2-42f8899f566c3181ff958ebe8e6b350f\"></p>\n<p data-pid=\"yOJ6iQLD\"><b>内置式转子结构</b>又分为径向式、切向式和混合式。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0ce5de837a8dcf8c50893dd06a3c8673_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"273\" data-watermark=\"watermark\" data-original-src=\"v2-0ce5de837a8dcf8c50893dd06a3c8673\" data-watermark-src=\"v2-8aa98d607c6b4b2469b654df9d4455e3\" data-private-watermark-src=\"v2-e339d71e7165fbf5e2f22876dd706cad\"></p>\n<p data-pid=\"W8dVQP5f\">永磁同步电动机对比同功率的异步电机来说，体积小，质量轻，输出转矩大，相应速度快，极限转速和制动性能比较好，而且永磁体替代了激磁线圈后也省了电能，所以现阶段国内大部分电动车型和国外部分车型都采用的永磁同步电机。</p>\n<p data-pid=\"2k3xBWek\">以宝马i3为例，其驱动的永磁同步电机只有49公斤，峰值功率为125KW(可持续30秒），最大转矩为250NM。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6f7609ad61c22e19807cfe5bfc3a67d6_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"824\" data-watermark=\"watermark\" data-original-src=\"v2-6f7609ad61c22e19807cfe5bfc3a67d6\" data-watermark-src=\"v2-b2c5f4c791860dd31fc3a24106747563\" data-private-watermark-src=\"v2-5d51ee201378fdc040bcf98ee346d602\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a882cd615ed6e5ae9893326bb64ac6c8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"379\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"q61hoEGg\">这里说一个比较有意思的地方，就是欧美主流电动车型都是采用或者准备采用异步感应电机，而拒绝了永磁同步电机的方案，比如特斯拉。</p>\n<p data-pid=\"deGe3tqi\">因为永磁同步电机的一个明显缺点就是永磁材料的昂贵，经常占据到整体材料的50%成本以上。永磁材料需要稀土资源，而在国外稀土属于极为稀缺的资源，价高难得。但中国拥有全球70%以上的易开采稀土资源，号称<b>“稀土王国”</b>，全世界的稀土材料大部分都靠我国出口，所以这一个缺点在国内也不存在了。但是欧美电动车型因为成本原因和某些不能说的原因，宁愿上大体积，大重量，综合能效也不高的异步电机，也不愿意上永磁同步电机的主要原因了。</p>\n<p data-pid=\"qQJ1wJso\">再简单说下永磁同步电机的技术难点:<b>退磁现象</b>。</p>\n<p data-pid=\"GZgUcZuu\">就是在高温，频繁震动等恶劣环境下容易出现不可逆的退磁，如电机高温，环境高温，热量集聚的状况下退磁。而一旦退磁，则电机性能下降到甚至无法使用。如何在使用中避免磁性衰退，一种是在源头解决问题，开发新的高耐热性、高磁性的钕铁硼永磁体。另一种就是提升抗磁化的技术来应对。比如增设负载检测，调低最高负载，增加散热措施，避免频繁启动等。</p>\n<p><img src=\"https://pica.zhimg.com/v2-87fbbb3b5c13c341f562e83cad9d1292_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"523\" data-rawheight=\"415\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"fPGQI64A\">宝马i3为避免电机内部温度过高，在运行模式下，温度上限为200℃，在定子绕组内设置了两个温度传感器（NTC型热敏电阻，通过测量电压、电流来计算温度）来监控，对于转子的温度则是通过热量模型进行预估。在高于180℃的时候，宝马就会降低电动机功率。</p>\n<p data-pid=\"FS0Og8Kh\">永磁同步电机的另一个技术难点:<b>控制技术。</b></p>\n<p data-pid=\"Mjm_w0pn\">因为永磁同步电机的“永磁”现象，所以使得外部调节其磁场极为困难。现阶段的永磁同步电机，思路是不进行磁场控制，只进行电枢控制。利用电子器件、微机控制结合来进行永磁同步电机的控制。在位置、速度、力矩控制上做到精细化管理。</p>\n<p data-pid=\"0Sdt9rRG\">永磁同步电机的其他的技术难点还有抗黑能力差，高转速受限制，启动困难，后面有机会再详述了。</p>\n<p><br></p>\n<p data-pid=\"cG_Wn-Pq\">（图片来源网络，侵删。）</p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/532638906/answer/2508423041?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/519894727?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">目前宁德时代在新能源行业发展有哪些进展？</a><br><a href=\"http://www.zhihu.com/question/517732354?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">目前锂电产业的发展势头怎么样？</a><br>\n","link":"http://www.zhihu.com/question/532638906/answer/2508423041?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"新能源电动汽车「小三电」指的是什么？涉及到哪些关键技术？发挥着哪些作用？","date":"2022-06-01 03:02:59","description":"\n<p data-pid=\"zFFB0pEZ\">其实刚看到这个问题的时候我是比较疑惑的，网上对新能源电动汽车的“小三电”描述有很多吗？甚至还产生分歧了？</p>\n<p data-pid=\"74v8X2jP\">毛主席曾经说过，没有调查就没有发言权。本着求真务实的态度，我随手搜索了一下……还真是</p>\n<h3><b><i>离了个大谱，关键是，离的还是同一个错误的谱……</i></b></h3>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c1b12ac85c35b6a5b7abf367aa5c2c5f_720w.jpg?source=b1748391?rss\" data-caption=\"网络搜索“小三电”的部分错误结果截图\" data-size=\"normal\" data-rawwidth=\"776\" data-rawheight=\"558\" data-watermark=\"watermark\" data-original-src=\"v2-c1b12ac85c35b6a5b7abf367aa5c2c5f\" data-watermark-src=\"v2-1427c49adde9a662aa5664bdbd193e0e\" data-private-watermark-src=\"v2-52d767fb97c325667c6f18a2525e4dbd\"></p>\n<p data-pid=\"2_lxRKFX\">但是回过头来一想，好像也还说的过去。毕竟电动汽车的“小三电”相比“大三电”而言，存在感确实是挺低的。并且这些年随着技术发展，系统集成度不断提升，拥有独立功能的“小三电”逐渐式微，取而代之的是各种“二合一”、“三合一”甚至“八合一”集成模块，“小三电”的功能被深度融合，这种称呼也变得少见了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c4ab4c03868bd78f8e5adfeced0f24ea_720w.png?source=b1748391?rss\" data-caption=\"图片来源：https://xueqiu.com/5436386345/197182984\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"501\" data-watermark=\"watermark\" data-original-src=\"v2-c4ab4c03868bd78f8e5adfeced0f24ea\" data-watermark-src=\"v2-347e6422b79d0386205fd35d1a71bd35\" data-private-watermark-src=\"v2-18fd64340457e9e509bd4a18e4a0519d\"></p>\n<p data-pid=\"tKMEpFQc\"><sup data-text=\"比亚迪E平台3.0的系列解析：从8合1电驱动力总成说起\" data-url=\"https://xueqiu.com/5436386345/197182984\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>就连我们许多新能源汽车研发从业者都不一定清楚，更何况普通大众（或电车小白）呢？再加上现在网络“搬运工”横行，根本不会去求证，以讹传讹就这么来了。</p>\n<p data-pid=\"4wlXHDsH\">我就厚着脸皮在这里科普一下吧。</p>\n<p data-pid=\"e3IDFwOP\"><b>“三电”</b>（不论大、小）这个提法，其实并不是什么精准的学名，只是行业里为了交流、沟通方便而约定俗成的一种称呼，大家都觉得这名字简洁、好记，就这么用下来了。</p>\n<p data-pid=\"KNAWzjNk\">世上本没有“三电”，叫的人多了，也就成了半个行业术语。</p>\n<p data-pid=\"kO0a6E41\">本质是为了快速指代电动汽车<b>核心三大件——驱动电机、电机控制器和动力电池</b>（所谓“大三电”），这也是电动汽车和传统燃油车最大的区别。毕竟，燃油车是绝对没有这三类零件的。</p>\n<p data-pid=\"zxFoEDvM\">后来发现，其实还有些区别，电动汽车上不可或缺的“DC/DC”、“OBC”、“PDU”也是传统燃油车上没有的。考虑到它们的重要性比“大三电”弱一些，于是“小三电”的叫法就逐渐传开了。</p>\n<h3>关于DC/DC，这里截取我比较熟悉的一家国内供应商官网上的介绍：</h3>\n<blockquote data-pid=\"l-dy9fjR\">燃油汽车中均配置有一个低电压发电机总成，其功能是给车载12V或24V低压电池充电，并为整车提供全部的低压供电。<br>新能源汽车中，由于传统的低电压发电机总成无法正常工作，均需配置一个DC/DC变换器（DC/DC Converter），<br>从车载动力电池取电，给车载12V或24V低压电池充电，并为整车提供全部的低压供电。<br>DC/DC变换器是任何一辆新能源汽车必须配置的功能。<sup data-text=\"欣锐科技官网 DCDC\" data-url=\"http://www.shinry.com/show_list.php?id=15#newScroll\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\">[2]</sup>\n</blockquote>\n<p><img src=\"https://pica.zhimg.com/v2-b9b01402427e444fee10c6e3dc8ced96_720w.png?source=b1748391?rss\" data-caption=\"图片来源：欣锐科技官网\" data-size=\"normal\" data-rawwidth=\"1056\" data-rawheight=\"341\" data-watermark=\"watermark\" data-original-src=\"v2-b9b01402427e444fee10c6e3dc8ced96\" data-watermark-src=\"v2-46daae4acf8e1ea9f385959178a69a41\" data-private-watermark-src=\"v2-6998dd4e9056972aab550dddf7f5d554\"></p>\n<p data-pid=\"jFfATatm\">这家伙通过内部的Buck降压电路，可以将300~500V的整车直流高压转换成12V或24V直流低压供给整车所有低压电路（包括小蓄电瓶、雨刮、大灯、车机娱乐系统、雷达等等……）。</p>\n<h3>关于OBC，继续借用供应商介绍：</h3>\n<blockquote data-pid=\"997Y89el\">车载充电机是任何一辆新能源汽车必须配置的功能。车载充电机（On-Board Charger，简称为OBC）的基本功能是：<br>电网电压经由地面交流充电桩、交流充电口，连接至车载充电机，给车载动力电池进行慢速充电。<sup data-text=\"欣瑞科技官网 车载充电机\" data-url=\"http://www.shinry.com/show_list.php?id=16#main\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"3\">[3]</sup>\n</blockquote>\n<p><img src=\"https://pic2.zhimg.com/v2-bf78658d82e7910addcb5c2324e0ff6c_720w.png?source=b1748391?rss\" data-caption=\"图片来源：欣锐科技官网\" data-size=\"normal\" data-rawwidth=\"945\" data-rawheight=\"345\" data-watermark=\"watermark\" data-original-src=\"v2-bf78658d82e7910addcb5c2324e0ff6c\" data-watermark-src=\"v2-e5f57545bba51b21b9b1b4ba8dba0c2f\" data-private-watermark-src=\"v2-77767111a86a48f70b4773ae7545d41f\"></p>\n<p data-pid=\"vL510Ryy\">这家伙通过内部的桥式整流、滤波及升降压电路，可以将220V~380V的市电交流高压转换成车辆电池系统所需要的300~500V直流电，说白了就是车辆慢充的核心——电力转换器。</p>\n<h3>关于PDU(Power Distribution Unit)：</h3>\n<p data-pid=\"K0vRB2N7\">这家伙的本质就是一个配电盒（分线箱），可以视作“中转站”——将动力电池的输出正负极母线在这里分成多个支路（通常配有相应规格的电流保险丝），供各个高压零部件使用（空调压缩机、PTC、DC/DC、OBC等等）。现在也不可避免地被逐渐弱化、融合到多合一集成模块里面去了。</p>\n<h3>关键技术：</h3>\n<p data-pid=\"6UR8sfxW\">小三电，尤其是DC/DC和OBC涉及的关键技术主要就是传统工业界较为常见的电力电源系统，本质是RLC电路以及功率半导体器件的组合。技术本身是比较成熟的，但应用于车载的历史并不算长，并且随着整车端需求功率的提升，器件自身相关的散热、EMC问题也随之而来。</p>\n<p data-pid=\"ZVGcjI9n\">显而易见的，由于当今世界风云变幻，涉及电力电子系统中的各类半导体器件的国产化进程也是近几年重点推进的方向。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/feng-ge-22-11?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">峰哥儿</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/534559577/answer/2504547713?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">3 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/522446981?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新能源电动汽车要过多少年才能解决续航问和电池问题？你怎么看待？</a><br><a href=\"http://www.zhihu.com/question/277214625?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价比亚迪的新能源车？</a><br>\n","link":"http://www.zhihu.com/question/534559577/answer/2504547713?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"车企扎堆押注固态电池，这条技术路线胜算有多大？","date":"2022-06-01 03:00:31","description":"\n<p data-pid=\"0fgg_Pnf\">首先说结论，全面超过现有锂电池的锂固态电池在最近5-10年内不大可能批量生产。至于有哪些问题，这个后面再说，先稍微说下固态电池的原理和特点。</p>\n<p data-pid=\"GUPWyM2T\">现有动力锂电池的构造：</p>\n<p data-pid=\"6kXQ0yhY\"><b>正极</b>（含锂化合物）、<b>负极</b>（碳素材料）、<a href=\"https://www.zhihu.com/search?q=%E7%94%B5%E8%A7%A3%E6%B6%B2&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2184302595%7D\" class=\"internal\">电解液</a>（非水液态电解质）构成。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b719c65048e0fce1fa2164828ca4f7ef_720w.jpg?source=b1748391?rss\" data-rawwidth=\"720\" data-rawheight=\"398\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b719c65048e0fce1fa2164828ca4f7ef\" data-watermark-src=\"v2-a74d9c592cfd4abc9f98ebb96e604a59\" data-private-watermark-src=\"v2-aa26fd4610d29cab2513dc8aec8ca9a0\"></p>\n<p data-pid=\"-g3x-Mvv\">充电时，正极上的锂原子失去电子，被氧化成了<a href=\"https://www.zhihu.com/search?q=%E9%94%82%E7%A6%BB%E5%AD%90&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2184302595%7D\" class=\"internal\">锂离子</a><b>（脱嵌）</b>，然后在<b>电解液中</b>运动，跑到了负极，与流经外部电源的电子互相结合，又还原成了锂原子，嵌入到了负极碳层的微孔中。</p>\n<p data-pid=\"0f1EvtQm\">放电时，就是相反的一个过程，镶嵌在负极碳层中的锂原子，失去了电子，被氧化成了锂离子，回到电解液中，运动到了正极，与流经负载的电子结合，再度还原成了锂原子<b>（嵌入）</b>。</p>\n<p data-pid=\"EY2eXrUO\">所以，充放电过程中，锂离子在正负极材料之间往返脱嵌，这种电池又被形象地称为<b>“摇椅电池。”</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-d0024443bc29d710d33b4c00f4745e23_720w.jpg?source=b1748391?rss\" data-rawwidth=\"432\" data-rawheight=\"324\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d0024443bc29d710d33b4c00f4745e23\" data-watermark-src=\"v2-4263f10590c8eaf3ff3ef2e62044468e\" data-private-watermark-src=\"v2-58fadc75097a0020cfb02363567dc413\"></p>\n<p data-pid=\"PbAhyjYX\">而固态锂离子电池，最明显的改变就是把里面的<b>电解液给换成了固态的电解质了。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-5132260718b65978d502bdafe7ea2127_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"323\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5132260718b65978d502bdafe7ea2127\" data-watermark-src=\"v2-05d509a99415fb9e4e7215ef3e53ff2b\" data-private-watermark-src=\"v2-0968005c673d7b5a3d610286a6031360\"></p>\n<p data-pid=\"8IZJ_G-P\"><b>优点一</b>，<b>能量密度大幅提升</b></p>\n<p data-pid=\"qBm9lquC\">因为高电压的正负极材料怕和电解液溶解发生反应而不敢用。目前针对<a href=\"https://www.zhihu.com/search?q=%E9%92%B4%E9%85%B8%E9%94%82&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2190529979%7D\" class=\"internal\">钴酸锂</a>的电解质溶液可以充电到4.45V。如果继续充到更高的电压， 液态电解液就会承受不住而被氧化，正极表面也会发生不可逆的相变。如果是固态电解质，那么就能用提高电池能量密度的高电压正负极材料，比如可以提高到5V，这样在现有正负极下就能使得整体能量密度显著提升。</p>\n<p data-pid=\"o6ctot-S\">另一个好处则可以改变现在的正负极材料体系来提升能量密度，比如负极可以采用<a href=\"https://www.zhihu.com/search?q=%E9%87%91%E5%B1%9E%E9%94%82&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2190529979%7D\" class=\"internal\">金属锂</a>，正极采用硫化物或空气，对应锂硫电池和锂空电池，<b>理论能量密度达到当前锂电池理论值(387wh/kg)的7-10倍。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0e18bd562839864f493f8d84493ee7b8_720w.jpg?source=b1748391?rss\" data-rawwidth=\"605\" data-rawheight=\"362\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"StNBEa7m\">另外因为固态电池内部不含液体，可实现电芯内部的多层设计，减少了电阻组装壳体等用料，有效减少电池其它配件的配重。这也相当于提升了整体电池包的系统能量密度。</p>\n<p data-pid=\"wAY_FTqi\"><b>优点二，安全性高。</b></p>\n<p data-pid=\"eKmsj2-R\">固体电解质因为不挥发、不燃烧，能够有效避免有机液态电解质漏液、着火、爆炸等安全隐患。无论是聚合物固体电解质还是无机固体电解质，在实验室的相关实验中，针刺、挤压、加热、短路、过充均不起火、不爆炸。安全性比现阶段的锂动力电池要高上许多。</p>\n<p data-pid=\"QgG-maQh\">综合起来，固态电池的优点：</p>\n<ul>\n<li data-pid=\"y7epZ_6S\"><b>内芯安全性高，不泄露不挥发不易燃</b></li>\n<li data-pid=\"2CszoaKA\"><b>自放电大幅降低</b></li>\n<li data-pid=\"C3Ux9124\"><b>极高的能量密度，理论值接近当前液态电解质锂电池理论值的10倍</b></li>\n<li data-pid=\"NLCVwsRJ\"><b>更易设计电池的大小和形状，更能实现动力电池的定制化</b></li>\n</ul>\n<p data-pid=\"BhwOlvGA\">所以，为什么固态电池号称是锂电池的终极形态，就是因为真正的固态电池对比现在的锂电池来说，优势太大了。</p>\n<p data-pid=\"7hKK-YBz\">而按照动力电池的国家发展目标，2020年，单体电芯能量密度达到350Wh/Kg,2025年单体电芯能量密度达到400Wh/Kg,2030年达到500Wh/Kg。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3b95713c524e22cb4439fdb5c6a44803_720w.jpg?source=b1748391?rss\" data-rawwidth=\"720\" data-rawheight=\"332\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"O5Cy6BO9\">而国家动力电池规划发展的目标，本身就是冲着固态电池、锂硫电池这些新体系去的，以现在的锂动力电池，理论限制死了，是不可能达到2025年的要求的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-463d7c1e35ad4b848ee51c8bb221e648_720w.jpg?source=b1748391?rss\" data-rawwidth=\"720\" data-rawheight=\"429\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"lTUfY2wv\">目前固态电池的难点：</p>\n<p data-pid=\"X8Kv7oMY\"><b>固态电解质的离子电导率还低于液态电解质，固态电解质的高界面阻抗也会影响到锂离子在界面之间的传输。另外固态电解质与正负极贴合不好导致的界面相容性较差，同时充放电过程中，电极活性物质体积会随着循环产生4%左右的体积膨胀和收缩，容易导致界面分离。</b></p>\n<p data-pid=\"ZhZq1mOg\">就像之前回答说的锂动力电池工艺的涂布和辊压一样，能量密度高反而会影响锂离子的传输。</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/question/328656372/answer/2501891811\" data-image=\"https://pic1.zhimg.com/v2-d76d2becc3c0c317dc430880468281dc_qhd.jpg?source=b1748391\" data-image-width=\"1279\" data-image-height=\"717\" class=\"internal\">叠片工艺和卷绕工艺，哪个做出来的动力电池的电芯会更好一些？</a><p data-pid=\"Ae1nBq2E\">下图是现有固态电池主要体系类别和优缺点，要么是技术成熟的室温离子电导率低，要么就是离子电导率的问题解决了，但成本高开发难度大，对生产环节要求过于苛刻。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0762f7a9d66bbf8fb94a039c806da736_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1105\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0762f7a9d66bbf8fb94a039c806da736\" data-watermark-src=\"v2-8a3b890ee9439facb561fc38cc2c1b9e\" data-private-watermark-src=\"v2-cb1c4847446f5c9afa4d94c1b0a22e9f\"></p>\n<p data-pid=\"_sgRUcry\">比如硫化物的方案虽然离子电导率高，但在应用中也存在很多问题，如硫化物的正负极界面不稳定，电化学稳定性差，硫化物需要在惰性气体环境下处理，导致了基本无法大型工业化量产。</p>\n<p><img src=\"https://pica.zhimg.com/v2-911ef18227fb1c9c5c904c33ca849959_720w.jpg?source=b1748391?rss\" data-rawwidth=\"866\" data-rawheight=\"654\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-911ef18227fb1c9c5c904c33ca849959\" data-watermark-src=\"v2-8e16aa98cc445e51230ed03003706426\" data-private-watermark-src=\"v2-bb4017cd66e0bf4ce43f83d3634d975f\"></p>\n<p data-pid=\"RIB9lB6B\">所以现阶段，三大方向，聚合物，氧化物，琉化物都有各自优缺点，最终还是要实验室里能够拿出来一个综合化考量，各方面都能达到要求的样品，然后通过样品小批量实验室测试，中等批量产线试产来逐渐完善其工艺，使其成熟到方方面面可控，才能最后投放到市场，这中间的环节预计都是以5-10年起的。</p>\n<p data-pid=\"XEm_BSj4\">但虽然有种种困难，但固态电池也是基本所有车企及动力电池厂商看好的主流发展方向。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c8e5ab1b0db7b40fda530d0efd9e0ebc_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1095\" data-rawheight=\"672\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c8e5ab1b0db7b40fda530d0efd9e0ebc\" data-watermark-src=\"v2-e6fa1c38c5caa61b35d637cc22e4b9b2\" data-private-watermark-src=\"v2-ed1fc179c8df20c3325976d9b87ae6f4\"></p>\n<p data-pid=\"Iuy8j4Pm\">Bloomberg数据预计，2028-2035年，采用固态电池的电动车将增长37倍，而固态电池的成本将下降至40美元/KWh，甚至低于液态电池。</p>\n<p data-pid=\"7IeMwQ0u\">位于<a href=\"https://www.zhihu.com/search?q=%E5%9C%A3%E4%BD%95%E5%A1%9E&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2190529979%7D\" class=\"internal\">圣何塞</a>的QuantumScape电池初创公司，已收到汽车制造商和金融投资约十亿美元的投资，用于研究电动汽车的固态锂金属电池。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d9964faa957d1d7501192b4753e6e720_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1025\" data-rawheight=\"492\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"8yFpqkSb\">大众汽车几度增持QuantumScape的股份，投资总金额达3亿美元，目的是推进固态电池的联合开发，并为其大规模生产做好准备，目前QuantumScape 的市值已超过百亿美元。</p>\n<p data-pid=\"6ZZIf7cJ\">国外其他车企品牌，如日产、现代、通用、福特、戴姆勒都给出了固态电池搭配车型的大概上市时间，从2025年到2030年之间，对固态电池的车型进行量产。但说老实话，这个目标估计很难达成。</p>\n<p data-pid=\"FJeDf09e\">尤其是丰田，目前看来是投资固态电池力度最大，最有可能率先成功攻克量产化难题的车企。早在2020年6月，丰田搭载全固态锂电池的车辆，已经开始了在道路上的试车。在今年9月份，丰田给出了到2030年，将投资<b>人民币约880亿元的高额预算</b>，用于开发新型动力电池和电池供应链，以保证未来10年的汽车动力电池技术的领先。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0a468d795fcf9dcd4603aa09e7cfca4b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1610\" data-rawheight=\"836\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"fFHNBFeU\">下图是丰田给出的固态电池的相关蓝图。</p>\n<p><img src=\"https://pica.zhimg.com/v2-71be381b0416c8a4832bcbba379b218f_720w.jpg?source=b1748391?rss\" data-rawwidth=\"860\" data-rawheight=\"535\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-71be381b0416c8a4832bcbba379b218f\" data-watermark-src=\"v2-f575e3257cb97dbc20d90bd30eaba4c5\" data-private-watermark-src=\"v2-3c9788fee7439094c74120c6cbfd298d\"></p>\n<p data-pid=\"7Pm-R4ro\">但不管是需要5年，还是需要10年，还是需要15年，才能真正迎来完美固态电池的量产。但这个风口是继汽车全球电动化的第二大风口。很多传统车企，如丰田等日本车企、大众等德国车企已经错过了第一时间进入电动汽车的风口而吞下了苦果。</p>\n<p data-pid=\"stYld8u_\">而接下来的固态电池量产是有可能真正颠覆汽车行业，这种使得电动车续航/安全远远超过现有汽车、成本又低于现在汽车的技术。一旦成功，将会彻底宣告新时代的到来，摧枯拉朽地打败原有的燃油汽车和锂动力（液态电解质）汽车，造成相关供应链体系的翻天覆地，是不可能有车企敢错过的，无论国内还是国外。</p>\n<p><br></p>\n<p data-pid=\"2q6eHdzv\">（图片来源网络，侵删！）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/504141889/answer/2503044022?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">11 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/511007634?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">性价比左右动力电池路线之争，LG 新能源生产磷酸铁锂电池，这意味着什么？</a><br><a href=\"http://www.zhihu.com/question/533531919?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">磷酸铁锂电池全面反超三元锂电池，该电池都有哪些优势？</a><br>\n","link":"http://www.zhihu.com/question/504141889/answer/2503044022?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"送给大孩子的儿童节礼物：返老还童指南","date":"2022-06-01 03:00:00","description":"对于现在的我们来说，童年已经变成了「最熟悉的陌生人」。尽管我们已经长大，但童年的记忆似乎并未淡去。你或许还记得躲在被窝里打着小灯玩GameBoy的日子；或许还曾梦见在电视机前等待动画更新的午后；或许恍 ...<a href=\"https://sspai.com/post/73537\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73537"},{"title":"派早报：OPPO Enco 系列耳机多项功能更新、松下与徕卡签署全面战略合作协议","date":"2022-06-01 00:48:13","description":"Apple 未能规避 Cydia 的反垄断诉讼，《网络剧片发行许可证》6 月 1 日起全面发放等。<a href=\"https://sspai.com/post/73569\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73569"},{"title":"从 CD 到你的「一分钟回忆」：流媒体音乐服务发展史","date":"2022-05-31 08:00:00","description":"从买碟、下载到在线听，流媒体音乐服务是这样重新塑造我们的收听方式。<a href=\"https://sspai.com/post/73473\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73473"},{"title":"脑洞大开，给自行车装上倒车雷达和行车记录仪","date":"2022-05-31 06:25:21","description":"Matrix首页推荐Matrix是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选Matrix最优质的文章，展示来自用户的最真实的体验和观点。文章代表作者个人观点 ...<a href=\"https://sspai.com/post/73521\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73521"},{"title":"别被默认绊住脚：老 MacBook 的 Linux 新体验","date":"2022-05-31 03:31:06","description":"我的 MacBook Air 11\" 已经服役将近十年了。这样一台老电脑还能做什么？或者说，它还能干得动什么？LinusTechTips 给了我启发，或许我也可以放弃 macOS，看看它能不能在 Linux 上重获新生。<a href=\"https://sspai.com/post/73539\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73539"},{"title":"如何评价 galgame《forest》？","date":"2022-05-31 02:51:28","description":"\n<p data-pid=\"G7I1T8Ab\">  提到forest个人首先要感谢tex大佬给出的注释，考据和汉化组的翻译。不然此作啃起来着实是有些困难。作为2004发售的forest， 这部作品作为典型的日语白学作品之一，用典之多之广之偏在galgame 界属实少数（文学，民俗，历史，哲学，地理，科技，再加上和现在时代以及文化上的代沟）。甚至于在本人推时感觉自己不是在推galgame 而是在看一场跌宕起伏的精彩话剧。(不过星空的目的可能就是如此），这让我不禁想起了康德关于崇高感和优美感的观点。心灵的深处被他物的超越性刺痛产生了崇高感。心中情感被他物而吸引化为优美感。而星空所创作的forest 在个人认知中将这两者都做到了。本作旁征博引，词藻华美。这导致本作在没有相关资料下阅读的快乐会大减（当然星空在本作的故事neta其实并没有那么重要，星空传达的是文本 ）。而想通过玩galgame 放松的玩家本作极有可能直接弃坑。因为本作阅读还是有一定的难度。在此再次感谢tex 大佬所做的考据和思路整理。不过可惜在如今业界不景气，以及生活节奏加快，压力山大，信息碎片化的时代中这类作品恐怕再难有登堂的机会了。</p>\n<p><img src=\"https://pica.zhimg.com/v2-bc1d7e66cb2c3c5b7d94816897c9cdca_720w.jpg?source=b1748391?rss\" data-rawwidth=\"852\" data-rawheight=\"1200\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bc1d7e66cb2c3c5b7d94816897c9cdca\" data-watermark-src=\"v2-3c340bf9006f0e1fbe28516ec1400661\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"KT5Aq5QV\">  那么言归正传，下面进入个人分析环节，以下为本人纯主观的分析判断和理解。 </p>\n<p data-pid=\"9JOhiJ1r\"><b>标题</b></p>\n<p data-pid=\"Z2thWb8e\">当看到forest这个游戏标题，再联系上本作的文学属性，个人首先想到的是森林这个词在童话中的含义-危险，隐避，未知。这是为什么童话故事中会存在大量的森林（小红帽，白雪公主等等）。而本作也是星空带领我们在这片森林的奇幻冒险之旅。的森林实际上就是一个个故事组成。这大概也是剧情中提到森林中的树如今越来越少的直接原因。</p>\n<p data-pid=\"BN1KAmAf\"><b>剧情</b></p>\n<p data-pid=\"q98ZYyCF\">个人认为Forest这个童话 可以分出3个世界，故事中的故事即森林，故事本身即forest ，以及故事之外的世界即第四面墙外的玩家的世界。</p>\n<p><img src=\"https://pica.zhimg.com/v2-1de5be9da7f3ab3cc9b7d72ca3432112_720w.jpg?source=b1748391?rss\" data-rawwidth=\"5065\" data-rawheight=\"2172\" data-size=\"normal\" data-caption=\"三层结构\" data-watermark=\"watermark\" data-original-src=\"v2-1de5be9da7f3ab3cc9b7d72ca3432112\" data-watermark-src=\"v2-d38660b48e8a897b8aa3c9221b06f6c6\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"0drfi_5v\">而forest 的时间线上来说，剧情最早开始于灰流和雨森通过长辈相识并创造了最早的森林，所以两位被尊称为森林的original。灰流和雨森创造了故事，名为帕多瓦（即象征着故事达到完满，未发芽暗示故事尚未完满，取材来自世界上最早的植物园的名字），之后两人为这个故事补充了特仑伽，佩葛利亚，赫耳麦，小天狼星等角色，以及讲述了世界树和终结之村的设定。在创作故事的过程中雨森为追求美好的故事试图逃避现实。于是灰流则试图用说理，刺激以及安抚的方法。希望雨森能去接受终结和现实，但这遭到了雨森的反抗。但最终灰流还是让雨森慢慢相信了人与人之间的关系，这一点让雨森迈出了对外的一步。这一点可以在剧情一开始雨森在外打工体现。之后两人创作了寻找魔女真名的故事，而在故事中塑造了一个魔女的形象反映的都是雨森本人的个性，比如仿皮皮的名字，孤独，不想事物改变。而forest 故事的主线也就是寻找魔女真名的故事。但这两位original的思路并不一致，灰流追求故事的现实性和合理性，而森追求的是故事的美好和永恒性。于是两者产生了不可必免的冲突，冲突导致森林有了缝隙，于是森林开始不断的从现实中涉取新故事，而整个森林也就此分成了两块即庭院(gardens)和新宿。这就是作品中新宿会和森林融合以及故事来源于雨森的书橱的原因。雨森作为故事的创作者经常会选择逃避，所以她无法独自生产故事。就比如在序章中如果没有灰流的帮助，雨森只能在永不停止的派对中无限循环。所以为了完成魔女的故事森林也将其他几个角色牵涉了进来。在介绍完登场的人物信息后冒险就开始了，随风而来的邀请，新宿漂流，仲夏夜的孩盗，The Game，雨伞踏浪航海记，宝藏，爱丽丝漫游终境这些riddle 。而这些riddle 现在想来就是将故事引向终点的存在，而与之相对印的gift 也是起这样的作用，这也大概是为什么剧情中gift 既是帮助也是诅咒的原因。而be 则应该是故事讲述到了雨森无法接受情况所以灰流选择了修改故事。所以这一路上的冒险中我们见识了大量典故的冒险和星空巧妙设计设定。就比说第二章中所说日本经济危机失败的赌徒在第四章化身成了天堂岛中的孩子。当然本作还有一个重点就是关于黑之爱丽丝的问题，个人跟据爱丽丝和灰流在一起时出现雨森的声音，以及之后里伽子喊魔女霖妈妈再加上雨森和里伽子并没见过面（里伽子曾提到想和雨森见面），猜测爱丽丝应该是雨森和灰流所创造的一个故事 。而灰流跟里伽子接触直到里伽子去世这段时间应该是发生在雨森幻想生育，灰流被逐出之后。同时在灰流有牛郎经历，认识九月，刈谷，黛之前。在游戏中不难发现森林中的角色与forest 世界的人物有对印关系，比如里伽子对应爱丽丝。（而现实中爱丽丝里德尔和刘易斯卡罗尔在现实中也是学生和老师的关系），以及在初始be中和爱丽丝见面时有雨森的声音。所以爱丽丝这个角色是对于雨森创作意识的投射，而第八章的里伽子则是灰流创造的投射。而借由里伽子的去世，两者发现了第四面墙的存在。雨森使用gift 打破了第四面墙让自己  内部种子释放。 森林的一位original离开了。这应该是后期刈谷说森林不会再 出现的原因。但是知道第四面墙的灰流的选择了用尽终生收集帕多瓦的碎片来使故事到达完满的结局。最终收集齐碎片的他在着弥留之际进入终结之村，最终让帕多瓦发芽了，森林再次出现。爱丽丝也如其所想的出现了，而灰流通过帕多瓦将魔女的故事讲完复活了魔女并给予其真名雨森，爱丽丝这个被创造的人物于是和魔女融合。童话达成了完满。最终创造了一个美好的新世界（这也是北欧神话诸神黄昏的结局，连同性都一样）而玩家也迎来forest的最终的结局。最后灰流和雨森的相见釆用了先前故事里里伽子所提到的结局。而这场奇幻冒险也就此结束。forest就此迎来了一个光明的结尾。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d09deba499894ce55226444b9fb0edcc_720w.jpg?source=b1748391?rss\" data-rawwidth=\"5832\" data-rawheight=\"1968\" data-size=\"normal\" data-caption=\"个人的理解\" data-watermark=\"watermark\" data-original-src=\"v2-d09deba499894ce55226444b9fb0edcc\" data-watermark-src=\"v2-594e9977688f326ec58d5e05bb0b49bb\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-595602208659c0f6d7a1da4ef46a90d6_720w.jpg?source=b1748391?rss\" data-rawwidth=\"2000\" data-rawheight=\"1488\" data-size=\"normal\" data-caption=\"最后的结尾\" data-watermark=\"watermark\" data-original-src=\"v2-595602208659c0f6d7a1da4ef46a90d6\" data-watermark-src=\"v2-3c6a196cbc90f061039a9d5000245060\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"zQQN9H6o\">总的来说forest的设定、无疑是比较恶意，在剧中的角色们都要改变自己价值选择选择才能让故事继续下去。这毫无疑问是痛苦的。在某种推动力下黛解决了自己依靠教授的问题，刈谷战胜了对于店长的盲从。里伽子在最后接受了死亡。而雨森见证了里伽子的死后也接受了现实。灰流为了最后的结局也失去了很多。而付出代价也和森林一样是一个常见的故事原型这里就不赘述了，本人猜测森林的意志就是完成魔女的故事，那么又是谁在推动着这个故事进行。没错正是屏幕前的各位玩家。在大部分galgame 中作者一般会采取消解男主形象的方式增加玩家的代入感。使玩家能沉浸体验故事，而这种方法的代表人物就不得不提中演员的演技自我修养的作者斯坦尼斯拉夫斯基，顺便一提在赫炎里他也作为角色出场，斯坦尼斯拉夫斯基的这种方法对于制作方而言无疑相当不错，所以这也被大部分作品所采用，但同时这种加强代入感的行为也会造成了观众的自我判断能力受到了抑制。所以之后布莱希特才会提出打破第四面墙的理论，让观众重新恢复思考能力，而forest这部作品明显就是第二类，在forest 的故事里被故意错开的剧情，光怪陆离破坏玩家代入的场景和文字，根本跟不上的描述，这全为了让玩家自身思考这个游戏本身。而这一方法换个更流行的词就是meta ，当然在galgame 里使用meta 也并不是一个新鲜的事，比如比较有名君彼和DDLC（ever17,臭作），但个人认为这种打破第四面墙却加强了游戏的代入感，从而达成一种精神满足和陌生感的刺激。当然forest明显就是在想法设法的阻止这一点，所以我们看到了大量的用典，碎片化的剧情，文艺的词句，后面大量的选项这些都是为了强行让玩家思考。而或许这就是forest 被有人玩家吐槽，同时也有人玩家将其捧为神坛上原因。公主走进黑森林一书中提到过童话故事通常从某个困境开始，之后出现解决问题的方法，接下来是解决问题的过程，过程中必然有跨越，跨越代表进入不同的世界，然后有遭遇，遭遇带来搏斗，最后的胜利则带出结尾的欢庆。Forest本身就是一个童话，这也是前面说forest中有三个世界的原因。</p>\n<p><img src=\"https://pica.zhimg.com/v2-e882ad929f863fc2d2ad7291e3e8585f_720w.jpg?source=b1748391?rss\" data-rawwidth=\"493\" data-rawheight=\"650\" data-size=\"normal\" data-caption=\"相信莫妮卡和曾根美雪大家都不陌生吧\" data-watermark=\"watermark\" data-original-src=\"v2-e882ad929f863fc2d2ad7291e3e8585f\" data-watermark-src=\"v2-28140f5cefde7649da71d6f1225cc66b\" data-private-watermark-src=\"\" data-tags=\"porn\"></p>\n<p data-pid=\"cfmH8YFP\">个人认为forest的阅读难度之所以高，抛开复杂繁多的用典之外。主要还是叙述上的碎片化和反理性，星空在forest中提到了尼采的观点。而个人认为尼采的哲学认为分成两块，一个是对生命的意义一个是对于文化的批判。在剧情中雨森和灰流的冲突和尼采的酒神精神和日神精神相对应。灰流代表日神精神（工具理性），从古希腊人文思想开始向理性发展，而沿着这一条脉络发展，人们一开始相信沿着理性的道路能让人们走向幸福，但现实中的情况我们都清楚，甚至于部分理性主义走向了精致利己主义甚至于社达这无疑令人失望的（钱理群事件）。雨森则代表着酒神精神（价值理性）。人是目的不是手段。在全心投入作品时我们不会有利益上的判断而重新回到现实世界当我们重回理性时就会发生冲突，这也是为什么我们看完一部好的作品时有时会有一种迷茫失落感。以及作为创造者的艺术家们有的会出现精神问题有的会选择放弃生命的原因。而这应该是雨森选择跳楼的原因（可以对印尼采最后疯了）。当然酒神和日神是不可能完全分离的。这也是灰流一定要复活雨森的原因。在现代社会追求高效率低成本，导致对于周遭所有模糊的、不精准的、无关理性的容忍度越来越低，而forest很多地方都故意没有交代清楚，正如森林一般让人迷茫，越是想组织一个完满的体系将其概括却总是有不合理之处，个人认为星空在本作表现出对于当时日本工具理性文化的一种批判。（当然forest这形式就不是正常GAlGAME）</p>\n<p><img src=\"https://pica.zhimg.com/v2-d7035a4a772efd12db28803a7890a189_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1020\" data-rawheight=\"1560\" data-size=\"normal\" data-caption=\"法兰克福学派代表人物马尔库塞的著作\" data-watermark=\"watermark\" data-original-src=\"v2-d7035a4a772efd12db28803a7890a189\" data-watermark-src=\"v2-f8219f87f65b0972e5aa3cece0617b39\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"fCD-TCdB\"><b>总结 </b></p>\n<p data-pid=\"ED449olb\">世界的定义在世界之外，世界之中并不存在价值。一个事物要靠他者才能存在。而故事也是如此。在forest 里面提到了故事是否会遗忘这个问题，上面提到旧时的英雄会被遗忘，帕多瓦（故事本身）也会被忘记，但小天狼星却不会被忘却。个人对比的理解是旧时代的英雄们代指部分历史，经过一段时间后消失于人们记忆中，而帕多瓦代表着单一的故事，它们或许曾被人记住，但最终会被遗忘。而小天狼星则代表被人们赋予意义和改造的故事，就比如星座的故事通过不段改造流传至今。从个人来看就是有生命力的故事才能被人们所牢记。这让我联想到以前我也曾读过的一些故事，但现在大部分都忘记了。明明曾经阅读过的故事。现在想来有生命力的故事其是一种被创造出来再重新建构的过程。就比方说小红帽的故事在不同的时代就有不同的版本，而爱丽丝也广泛出现在文化创作领域而且形象不断更迭一直到今天。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-495bfed0eb29ae1e45ff8b5f637d634e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"2320\" data-rawheight=\"1932\" data-size=\"normal\" data-caption=\"其实影视圈更明显，但我还是要吹blacksouls\" data-watermark=\"watermark\" data-original-src=\"v2-495bfed0eb29ae1e45ff8b5f637d634e\" data-watermark-src=\"v2-9255a1a36fe405e0c08d9a06a7f4b866\" data-private-watermark-src=\"\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p><br></p>\n<p data-pid=\"N2pcHO_C\">以上是本人对于forest这部作品一些不成熟的思考，维特根斯坦曾说过对于不能说的，必须保持沉默。可以说的都可以表达出来，最困难的往往是那些不可言说的部分，就比如克苏鲁神话中的不可名状。所以维特根斯坦才写到他的命题只是一把登上去就可以抛弃的梯子。当超越这些命题后，就能够正确看待这个世界。本作还有很多值得探讨的地方，比如语言的界限，名字的意义（所以有大佬会用分析哲学来分析）。这些因为个人能力不足以及表达不出来就搁置了。最后用一个词来表述本人对推完Forest的印象Supercalifragilisticexpialidocious。</p>\n<p data-pid=\"-YLZ4YO8\">以上内容为本人对Forest粗浅的分析和观点，还请各位轻喷。</p>\n<p data-pid=\"cdNOCQjq\">个人所作的视频内容 BV1ma411J7WW</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jia-zhu-feng-44?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">家宁丰</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/455707897/answer/2506929425?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">3 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/530182149?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">galgame「こいらぼ」的剧情是什么？</a><br><a href=\"http://www.zhihu.com/question/514193474?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何系统性地游玩galgame?</a><br>\n","link":"http://www.zhihu.com/question/455707897/answer/2506929425?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报：荣耀发布 70 系列手机，长虹佳华成为国行 Switch 总代理等","date":"2022-05-31 01:01:45","description":"B&amp;N 推出 Nook GlowLight 4e 电子阅读器，6 月 1 日铁路客票预售期调整为 15 天等。<a href=\"https://sspai.com/post/73550\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73550"},{"title":"派评 | 近期值得关注的 App","date":"2022-05-30 09:50:22","description":"你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。<a href=\"https://sspai.com/post/73533\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73533"},{"title":"Missing Financial Data","date":"2022-05-30 04:12:50","description":"\n<p data-pid=\"2bnsBMJq\"><b>摘要：</b>在因子投资中，当协变量存在缺数问题时，除了填充截面或行业均值/中位数，是否还有更好的方法？</p>\n<h2><b>01</b></h2>\n<p data-pid=\"Rau3Xpu-\">协变量缺数是因子投资中绕不过的坎儿，而这个问题在另类数据中尤甚。缺数，顾名思义，就是在特定的历史时刻、对特定的股票来说、某个协变量的取值是缺失的。这个问题广泛存在于因子投资和实证资产定价研究之中。</p>\n<p data-pid=\"CZYb6pcD\">在面对缺数问题时，常见的做法是填充截面均值/中位数，或者行业均值/中位数，或者上一期的值（假设上一期没有缺数）。这些似乎是人们约定俗成的做法，从来也没有人去质疑上述处理方式的合理性。（另外一种更加粗暴的方式是，把缺数的资产排除在分析之外，但这会造成 sample selection bias。）</p>\n<p data-pid=\"Pz5r8mps\">然而，它们真的合理吗？</p>\n<p data-pid=\"XpR3EOJ6\">要想搞清楚这个问题，就必须回答一系列具体的问题：数据缺失在时序和截面上是随机的吗？还是有何种相关性（比如小市值的股票更容易缺失某些变量）？不同公司的协变量之间是否存在截面上和时序上相关性，能否利用它们更好的填充缺失的数据？无脑排除缺数的股票，对实证资产定价有怎样的影响（比如在因子溢价估计方面）？对现实世界中的投资机会又有怎样的影响（比如是否会损害可能构造的最大夏普比率）？</p>\n<p data-pid=\"3a1FydPc\">当意识到存在如此之多尚待回答的问题时，就很难再对“约定俗成”做法可能存在的潜在危害无动于衷。好消息是，学界在这方面的一些最新研究成果，有助于帮助人们回答上述问题（虽然是针对美股）。在应对实证资产定价的缺数问题方面，近期两篇颇有代表性的 working papers 是 Freyberger et al. (2021) 以及 Bryzgalov et al. (2022)。</p>\n<p data-pid=\"JAG07aFq\">由于 Svetlana Bryzgalova 和 Markus Pelger 两位都是我非常欣赏的新生代学者，今天就来简要介绍 Bryzgalov et al. (2022) 一文。本文的题目也照搬了该文的标题，特此说明。</p>\n<h2><b>02</b></h2>\n<p data-pid=\"63vs6kDz\">Bryzgalov et al. (2022) 考察了美股中最常用的 45 个公司特征（下表），缺数存在 4 点 stylized facts。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-923e8668a5939ee8561f738200172dfd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"930\" data-rawheight=\"654\" class=\"origin_image zh-lightbox-thumb\" width=\"930\" data-original=\"https://pic2.zhimg.com/v2-923e8668a5939ee8561f738200172dfd_r.jpg\"></figure><p data-pid=\"F9sTWttx\"><b>Fact 1：</b>缺数问题广泛存在于上市公司之中，受影响的公司占据了一半的市场总市值。无论公司市值是高是低，无论公司的历史是长是短，又无论公司的经营情况是好是坏，都有可能出现缺数的问题。</p>\n<p data-pid=\"sAdhbkQd\">以美股中重要的 5 个变量为例——账面市值比（B2M）、operating profitability（OP）、investment（INV）、leverage（LEV）以及real investment to book value（DPI2A）——下图展示了它们在时序上的缺数变化情况。从（a）和（b）中不难看出，随着时间的推移，缺数的比例在下降，不过仍然存在于所有变量。而（c）和（d）表明，无论是考察季度数据还是月度数据变量，以及无论考察大市值公司还是小市值公司，缺数问题都是存在的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-a2bc64e3bcd73d05ceda0099f99dd97f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"878\" data-rawheight=\"686\" class=\"origin_image zh-lightbox-thumb\" width=\"878\" data-original=\"https://pic4.zhimg.com/v2-a2bc64e3bcd73d05ceda0099f99dd97f_r.jpg\"></figure><p data-pid=\"r8jkrOjw\"><b>Fact 2：</b>当分析中需要用到众多协变量时（比如利用机器学习算法），缺数问题的影响更加严重。</p>\n<p data-pid=\"hGGI31se\">同样是上述 45 个变量，下图展示了不同允许缺数变量个数下，公司占比随时间的变化。比如，图中蓝色曲线代表 = 0 的情况，即要求不存在任何变量的缺失。在这个约束下，满足条件的公司仅占不到 30%。换句话说，如果研究中同时使用上述 45 个协变量且要求仅使用没有任何缺数的公司，那么 70% 的公司都会被排除在外。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-bc43301f96313cea9624a84ab7d49540_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"626\" data-rawheight=\"418\" class=\"origin_image zh-lightbox-thumb\" width=\"626\" data-original=\"https://pic1.zhimg.com/v2-bc43301f96313cea9624a84ab7d49540_r.jpg\"></figure><p data-pid=\"1P7BzDu3\"><b>Fact 3：</b>公司特征的缺失并非随机的。比如，很多基本面变量可能用到了同样的会计学条目来计算，那么一旦该条目缺数，就会影响基本面变量的计算；又比如，对于历史时间较短的公司，一些长周期的量价变量（比如中期动量和长期反转）自然也就无法计算。</p>\n<p data-pid=\"-8dMuVKS\">下图（a）展示了 1981 年 4 月实际的缺书情况，其中横轴为 45 个公司特征，纵轴为公司 index。图（b）展示了假想的随机缺失的情况。如果缺数是随机的，那么我们在不同的变量上应该观察到无序的随机性，如图（b）所示。而真实情况下（图（a））则显示了截然不同的情况，很多公司在不同的变量上均存在缺数的情况。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-89974ddfd86fe3cd374a10b4411084dd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb\" width=\"830\" data-original=\"https://pic2.zhimg.com/v2-89974ddfd86fe3cd374a10b4411084dd_r.jpg\"></figure><p data-pid=\"xdndNNGQ\">仍以前述 5 个公司特征为例，下图（a）考察了不同市值分组下的缺失比例，可见小市值（第 1 组）相对大市值组（第 5 组）的缺数问题更加严重；图（b）则以变量本身进行分组，考察了每组的缺数程度。看到这里有的小伙伴也许会问：如果变量都缺数了还怎么分组？这里的处理方法是利用股票在该变量上取值的均值作为分组的依据。结果显示，当按照变量排序时，最小的组（第 1 组）和最大的组（第 5 组）往往缺数问题最为严重。由于因子或异象通常是通过这两组多空对冲构造的，因此这两组缺失严重无疑是进行实证资产定价或因子投资的梦魇。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-377a19829abe43d44e68e79ef59a057d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"992\" data-rawheight=\"645\" class=\"origin_image zh-lightbox-thumb\" width=\"992\" data-original=\"https://pic2.zhimg.com/v2-377a19829abe43d44e68e79ef59a057d_r.jpg\"></figure><p data-pid=\"GBw3bh3W\">另一方面，由于变量本身的构造机制以及使用的数据的差异，不同变量的缺数存在异质性。这些问题均使得“约定俗成”的中位数或均值填充不再合理（因为均值或中位数是有偏的）。</p>\n<p data-pid=\"qbaJ37Wa\">下面两图分别展示了每个变量自身的时序自相关性以及不同变量的截面相关性。从中不难发现，一些变量在时序上的自相关性非常高（比如市值），有些则为零（比如特质波动率 iVol）；此外，很多变量的截面相关性很高。这些结果表明，不同变量的缺数问题存在特质性，而为了找到比“约定俗成”更好的填数方法，需要充分利用变量在时序和截面上的信息。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4a3102232d538260058300cf34783021_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"947\" data-rawheight=\"610\" class=\"origin_image zh-lightbox-thumb\" width=\"947\" data-original=\"https://pic2.zhimg.com/v2-4a3102232d538260058300cf34783021_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a87f778ed60bc1acf1e540389d9e8e98_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"727\" data-rawheight=\"691\" class=\"origin_image zh-lightbox-thumb\" width=\"727\" data-original=\"https://pic1.zhimg.com/v2-a87f778ed60bc1acf1e540389d9e8e98_r.jpg\"></figure><p data-pid=\"muxrYaoP\"><b>Fact 4：</b>股票的收益率与公司是否缺数有关，对实证资产定价的研究结果（比如简单如 portfolio sort）造成了复杂的影响。</p>\n<h2><b>03</b></h2>\n<p data-pid=\"sTiuUhnM\">为了利用变量的截面和时序信息，Bryzgalov et al. (2022) 针对公司特征协变量构造了一个隐性多因子模型。</p>\n<p data-pid=\"z6wvr52C\">以截面信息为基础，该模型的重要因素如下面这张 slide 所示（其中 <img src=\"https://www.zhihu.com/equation?tex=C_%7Bi%2Cl%7D%5Et\" alt=\"C_{i,l}^t\" eeimg=\"1\"> 表示公司特征，上标 <img src=\"https://www.zhihu.com/equation?tex=t\" alt=\"t\" eeimg=\"1\"> 表示时间，<img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"i\" eeimg=\"1\">表示股票，<img src=\"https://www.zhihu.com/equation?tex=l\" alt=\"l\" eeimg=\"1\">表示变量）。该文利用 PCA 估计隐性多因子模型，并使用 Xiong and Pelger (2019) 的方法应对估计中的缺数问题。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-a433b2007ab8e65b4ecd35e89ff51c8b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"814\" data-rawheight=\"572\" class=\"origin_image zh-lightbox-thumb\" width=\"814\" data-original=\"https://pic4.zhimg.com/v2-a433b2007ab8e65b4ecd35e89ff51c8b_r.jpg\"></figure><p data-pid=\"SfZ5Tc9c\">PCA 结果显示，公司特征之间表现出了很强的因子结构；使用 6 个因子就可以捕捉绝大部分截面上的变化。此外，这些因子也有很强的经济学解释。图（b）展示了样本外填充的公司特征的 RMSE 随隐性因子个数的变化。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-11ca89cbfb8be04d08a444d773e761bd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1077\" data-rawheight=\"632\" class=\"origin_image zh-lightbox-thumb\" width=\"1077\" data-original=\"https://pic2.zhimg.com/v2-11ca89cbfb8be04d08a444d773e761bd_r.jpg\"></figure><p data-pid=\"XnBwcWmT\">有了基础的截面模型，Bryzgalov et al. (2022) 进一步添加了时序的公司特征，构造了同时包括截面和时序信息的隐性因子模型。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-969a04aabf3dc768cb31e2b81e5ebf61_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"789\" data-rawheight=\"598\" class=\"origin_image zh-lightbox-thumb\" width=\"789\" data-original=\"https://pic2.zhimg.com/v2-969a04aabf3dc768cb31e2b81e5ebf61_r.jpg\"></figure><p data-pid=\"Lm-NHgHk\">最后我们来看看不同模型和“约定俗成”模型在样本外的表现。不过这里先插一句，在前述的介绍中，就提到了样本外 RMSE 的计算。有小伙伴可能会问：既然是缺数，怎么算是“样本外”？这里的处理方法是，刻意隐去（masking）一部分观测到的公司特征（随机选择，记为 OOS MAR 或者在选择上保留时序连续性，记为 OOS Block），用剩余观测数据进行建模，然后用这部分隐去的数据进行样本外评估。评估结果如下表。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d18492d1f39b86729abcae91af88d68d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"968\" data-rawheight=\"690\" class=\"origin_image zh-lightbox-thumb\" width=\"968\" data-original=\"https://pic2.zhimg.com/v2-d18492d1f39b86729abcae91af88d68d_r.jpg\"></figure><p data-pid=\"619BpAKx\">以我标出的 local B-XS 和 local XS 两个模型为例，它们都是单期条件模型，其中 B-XS 用到了截面信息和历史时序信息，XS 仅用到了截面信息。另外两个“约定俗成”模型是 XS-median，即截面中位数填充和 ind-median，即行业中位数填充。结果显示，无论是在样本内还是在样本外（OOS MAR 或 OOS Block），通过主成分分析得到的预测均优于“约定俗成”模型，即它们的预测误差更低，且改进非常明显。</p>\n<p data-pid=\"vHwyJASR\">另一方面，从 local B-XS 和 local XS 两个模型结果的差异可知，补充了时序信息后能够进一步提高预测准确性，说明时序和截面信息对于填充缺数来说同样重要。对于一些时序上自相关性很强的变量，上述隐性因子模型能够更多地利用时序信息；而对于那些截面上信息更重要的变量，该模型则更多地利用截面信息。换句话说，该模型并不依赖于人们对于 missing patterns 的假设，而是能够从数据中发现并加以利用。</p>\n<p data-pid=\"63SWqrot\">最后来看两个具体的例子。考虑 Microsoft 和 Hasbro 两个公司，考虑 operating profitability 和 iVol 两个变量。图中灰色的区间是留出的 OOS 区间，图中 0.0 的水平线表示“约定俗成”做法的填充。从这两个例子中可以看到，无论是对于 OP 这种比较稳定的变量，还是对于 iVol 这种上蹿下跳的变量，模型都能给出不错的填充结果，远远优于填充 0.0。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-97ddc2bb35aab6fa3f2d905ec87d2dfe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"751\" data-rawheight=\"705\" class=\"origin_image zh-lightbox-thumb\" width=\"751\" data-original=\"https://pic3.zhimg.com/v2-97ddc2bb35aab6fa3f2d905ec87d2dfe_r.jpg\"></figure><h2><b>04</b></h2>\n<p data-pid=\"DlqjAJLI\">以上和各位一起简要浏览了 Bryzgalov et al. (2022) 一文的核心内容和结果。在近日的一个 talk 中，Bryzgalov 提到她们后续会把填充好的数据挂出来，供学界和业界使用。当有了更合理填充后的公司特征后，一些传统的异象或因子的表现是否会发生颠覆性的改变？答案令人期待。</p>\n<p data-pid=\"5wp89M6f\">另一方面，Bryzgalov et al. (2022) 对于缺数的研究还给了我另外的一个强烈的感受。近年来，机器学习算法已经被广泛应用于实证资产定价和因子投资之中。然而，越来越多的研究表明，在如此低信噪比的金融领域，指望“数据发声”的粗暴做法是不切实际的。反而是小到数据如何标准化、不同的协变量如何进行缩放，如何选择正则化的方式等每一个具体的细节决定着应用机器学习算法的成败。</p>\n<p data-pid=\"Uoj4RCE2\">Bryzgalov et al. (2022) 关于缺数的研究毫无疑问再次说明了这一点。一个看似不起眼的填充决定，也许就会改变应用机器学习的结果。而到底应该使用哪种数据处理方式（例如“约定俗成” vs. 该文同时利用时序和截面信息构造的隐性模型）背后显然也应该有足够的经济学推导作为指引。这些看似很小的差异，也许在其他高信噪比的机器学习应用领域难以产生太大的影响，但对于实证资产定价的成功来说，可能正是必不可少的一环。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"FctkECJT\">More to come …</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"j7X0CEVX\"><b>参考文献</b></p>\n<ul>\n<li data-pid=\"GxzQwhUc\">Bryzgalov, S., S. Lerner, M. Lettau, and M. Pelger (2022). Missing financial data. Working paper.</li>\n<li data-pid=\"GSE-8Rak\">Freyberger, J., B. Hoppner, A. Neuhierl, and M. Weber (2021). Missing data in asset pricing panels. Working paper.</li>\n<li data-pid=\"8HdgGDAn\">Xiong, R. and M. Pelger (2019). Large dimensional latent factor modeling with missing observations and applications to causal inference. <b><i>Journal of Econometrics</i></b> forthcoming.</li>\n</ul>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"gAqfjRHD\"><b>免责声明：</b>入市有风险，投资需谨慎。在任何情况下，本文的内容、信息及数据或所表述的意见并不构成对任何人的投资建议。在任何情况下，本文作者及所属机构不对任何人因使用本文的任何内容所引致的任何损失负任何责任。除特别说明外，文中图表均直接或间接来自于相应论文，仅为介绍之用，版权归原作者和期刊所有。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"82SoeHUd\">原创不易，请保护版权。如需转载，请联系获得授权，并注明出处。已委托“维权骑士”(<a href=\"https://link.zhihu.com/?target=http%3A//rightknights.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">维权骑士-版权保护 版权知识 原创检测 识别字体 著作权登记</a>) 为进行维权行动。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/mitcshi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">石川</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/517848480?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"有没有那种男女主暧昧不清的心动小鹿乱撞的感觉的现言小说？","date":"2022-05-30 03:52:42","description":"\n<h1>舔狗太撩</h1>\n<p data-pid=\"TA2oLAcm\">救命！ </p>\n<p data-pid=\"eaAXGob3\">如果我有罪请让法律制裁我，而不是让我备受煎熬，男色当前，只能嘶哈嘶哈。 </p>\n<p data-pid=\"T3Newr9v\">眼前的江知行，身上只围着一条浴巾，好身材一览无余。 </p>\n<p data-pid=\"Ca5l0Nq-\">我明显看到化妆师给他抹油的时候，吞咽了一下口水。 </p>\n<p data-pid=\"SYwgng9v\">不怪她。 </p>\n<p data-pid=\"vIw0RSUi\">确实色气满满，秀色可餐。 </p>\n<p data-pid=\"akz1fgeD\">连我的脑海里都开始自动播放一些付费画面，还有一句话：「从此君王不早朝。」 </p>\n<p data-pid=\"4B40MriR\">打住打住打住！ </p>\n<p data-pid=\"OSa-qSqt\">作为一个临时被拉来凑数当演员的社畜，我要有职业精神，不能在工作的时候心生邪念，毕竟我也是“老演员”了，不能怂啊。 </p>\n<p data-pid=\"S70wTJ7v\">下一秒，江知行的声音飘过来：「徐未晚，你干什么呢？」 </p>\n<p data-pid=\"sHiMRghc\">我猛然回神，强装镇定：「嗯 ，怎么了？」 </p>\n<p data-pid=\"AVVg1W9w\">江知行突然俯身向前，安全距离瞬间打破。 </p>\n<p data-pid=\"7ExJm0h5\">我反应极快，战术后仰，手却被江知行攥住。 </p>\n<p data-pid=\"DEcLHlbq\">他把我的手举到面前：「徐未晚 ，你掐什么呢？」 </p>\n<p data-pid=\"ylZeH_Oh\">我心跳入鼓，却面不改色：「哦，我有点困，掐掐自己好清醒一点。」 </p>\n<p data-pid=\"K0v9tug_\">江知行有点好笑的样子，声音里透着三分无奈五分大度：「但你掐的是我。」 </p>\n<p data-pid=\"VGJRT6td\">？！ </p>\n<p data-pid=\"vImzmO8-\">「不好意思啊，我昨晚睡得晚，今天困成狗了......」我做出一副无比真诚且自责的样子，「没，没掐疼你吧。」 </p>\n<p data-pid=\"tMTrfa_b\">手再次被抓住。 </p>\n<p data-pid=\"bjImpV_t\">啊，无地自容了朋友们。 </p>\n<p data-pid=\"hPAqaQAr\">江知行放开我的手，眼睛凝视着我，一开口就是致命一击：「别碰，怕痒。」 </p>\n<p data-pid=\"qVW4HVB9\">该死。 </p>\n<p data-pid=\"z2k8QN_-\">我忘记他的副业是配音了。 </p>\n<p data-pid=\"_4fukrDW\">这声音真是要命。 </p>\n<p data-pid=\"Hf7h7ipp\">但我也不是吃素的，作为一名专业打工人，我决定扭转局势，速战速决，用公事公办的语气对还在调机器的任强说：「任强，我们好了，拍吧。」 </p>\n<p data-pid=\"c9RSpq1x\">任强是我招进来的导演，刚毕业没多久，性子直。 </p>\n<p data-pid=\"dPEwSU2C\">他听到我的招呼，看过来的时候顿住了，一脸委屈地开口：「好什么好啊未晚姐，这位帅哥是好了，可是你这满头大汗满脸通红的样子一点也不符合拍摄情境，咱们拍的是情侣间嬉闹，不是完成时，懂?」 </p>\n<p data-pid=\"Qi33e0ce\">现在的年轻人真是什么虎狼之词都敢说！ </p>\n<p data-pid=\"LxcdP0ng\">吃了熊心豹子胆了！ </p>\n<p data-pid=\"MKO8LP1b\">我顿时感觉无地自容，万箭穿心，只盼着原地去世。 </p>\n<p data-pid=\"Bb0YxhXF\">去世前还想跟任强掰头一番以证清白，江知行却扯过旁边的纸巾，坐上前，纸巾带着他手掌的温度掠过我的脸颊，我往后挪了一寸，被他轻轻按住：「别动，帮你擦擦。」 </p>\n<p data-pid=\"JWB2KZCi\">擦什么擦。 </p>\n<p data-pid=\"KeL2hONk\">越擦越热。 </p>\n<p data-pid=\"F0-n9hl7\">江知行好像看出了我的心思，嘴角弯起，顺手拿起桌上的冰水，贴在我脸上，我扶着冰水，他抽开手，玩味地看着我，一副看戏的样子。 </p>\n<p data-pid=\"X8b2MO9r\">我压低声音，没好气的说：「你怎么也来拍这种东西了？」 </p>\n<p data-pid=\"CMtNxoeg\">江知行看着我，一脸无辜的模样：「什么东西，哪种东西？」。 </p>\n<p data-pid=\"6pBHoR1v\">顿了顿，又反问我：「你不也在拍这种东西？」 </p>\n<p data-pid=\"vP8gdjty\">我想说就是这种为了博取点击量，有意无意让人浮想联翩的小广告，但又觉得没有必要说这么多。 </p>\n<p data-pid=\"uTKs1CRQ\">「那不一样，我是为了工作，而且我是临时被拉来的，没办法，这是我自己带的项目。」我一股脑说完，觉得自己义正言辞。 </p>\n<p data-pid=\"lClGTmvM\">江知行一脸坦荡：「我也是为了工作」。 </p>\n<p data-pid=\"yvVaKw1u\">他紧了紧腰间的浴巾，又抬头看我，用肆无忌惮的眼神，转瞬又笑得明朗：「所以，敬业点，徐策划。」 </p>\n<p data-pid=\"P2PO_w0c\">我气结，刚要反驳，又听到他在耳边大放厥词。 </p>\n<p data-pid=\"3GMynDvx\">「不该想的不要想。」 </p>\n<p data-pid=\"294oxVvA\">我徐未晚出了名的敬业，你是在教我做事？ </p>\n<p data-pid=\"fGHwrynx\">不气不气我不气，气出病来无人替，我缓缓吐了一口气，非常peace and love地说：「放心，我会，非常，敬业的。」 </p>\n<p data-pid=\"FJfSfXBm\">2.</p>\n<p data-pid=\"t3KBOzyd\">正式开拍。 </p>\n<p data-pid=\"F0XOvNNn\">任强一边说戏，我和江知行一边当着工具人。 </p>\n<p data-pid=\"H0UJpvpG\">「男生把手放女生脖子上，侧头，来，女生靠近男生一点，往他左脸靠。」 </p>\n<p data-pid=\"Tc5yhsEr\">江知行的气息如薄雾轻抚而过，好痒。 </p>\n<p data-pid=\"Wl39-zTZ\">我将肩膀几缕散乱的头发撩到后边，不经意间却瞥见将知行目光闪躲。 </p>\n<p data-pid=\"RyE1bCV0\">任强还在说戏，他是完全不管我的死活。 </p>\n<p data-pid=\"0J6uQtHe\">「我们再来一遍。男生揽着女生的肩，两人对视，露出幸福的笑容，找一找坠入爱河的感觉，感情要真，多给我一点，不要害羞嘛。」 </p>\n<p data-pid=\"Q-VfWuXT\">江知行龟速靠近，我感觉到他的手掌贴着我肩膀的皮肤，热热的，一双清亮的眸子多了几分雾气，少了几分平日的霸道。 </p>\n<p data-pid=\"KtPUsnmU\">如果不是在工作我就要举旗投降了。 </p>\n<p data-pid=\"I8Y4Ju63\">反正看不清脸，我把心一横，摆出职业假笑，就像临场发挥一样自然地勾住他的脖子，用轻不可闻的声音在他耳畔说：「江知行，敬业一点，不该想的不要想。」 </p>\n<p data-pid=\"c22h3kt0\">江知行的眼神霎时变得充满侵略性，像草原上发现猎物的小狮子。 </p>\n<p data-pid=\"vsgIByBE\">完蛋，这个人好像激不得，我暗自懊悔。 </p>\n<p data-pid=\"RZMQGJv2\">突然，他用手抵住我的后颈，把我往他身边送，然后，在众目睽睽之下，当着我所有同事的面，亲了我一口！ </p>\n<p data-pid=\"XSOXHx2J\">这个突如其来的吻，大概持续了......五秒！ </p>\n<p data-pid=\"8_rd7SyN\">空气稍稍一滞。 </p>\n<p data-pid=\"49pak3_G\">我的大脑好像当机了，发出嗡嗡的声音。 </p>\n<p data-pid=\"vsk5Q_LJ\">好像还有旁人低低的惊呼声。 </p>\n<p data-pid=\"gDJScHJm\">任强咳嗽了一声，秉持只要他不尴尬尴尬的就是别人的原则继续说戏：「很好，最后一个镜头，男生扶着女生的头，两人贴近。好，咔！」 </p>\n<p data-pid=\"U8HovHL8\">光线瞬间暗了下来，江知行的脸还是清晰可见，我的头枕在他的手上，他的人在距离我不到20厘米的位置，眼睛如同夜空里的星子 。 </p>\n<p data-pid=\"0ZU6iWn-\">一如既往的耀眼。 </p>\n<p data-pid=\"gLxa42Ub\">可是这么耀眼的人拒绝过我。 </p>\n<p data-pid=\"3BYGZrA_\">想想，就忿忿不平。 </p>\n<p data-pid=\"ePCi5Iz6\">任强的声音再度响起： 「很好，但是脚本里好像没有吻戏……不过效果挺好的，大家收工吧！」 </p>\n<p data-pid=\"nGYOCUkD\">拍摄的同事一个跑的比一个快，很快，房间里就剩下我和江知行。 </p>\n<p data-pid=\"lal_80sK\">我的大脑终于重启成功，想起刚才江知行亲我的事，脸上顿时烧得慌。 </p>\n<p data-pid=\"wRElhUxe\">我挣扎着想起来，江知行却把我圈得更紧，我用力瞪他：「你刚才干嘛！」 </p>\n<p data-pid=\"vuwKKrT_\">江知行声音蛊惑，贴在我耳边：「不是你叫我敬业一点吗，我入戏了。」 </p>\n<p data-pid=\"4N5o-_TA\">我稳住心绪，尽量不被美色冲昏头脑，「江知行，你知不知道这样很不尊重人？」 </p>\n<p data-pid=\"TK3P0dxq\">江知行：「知道。」 </p>\n<p data-pid=\"wGpbAZ4m\">「知道你还......」 </p>\n<p data-pid=\"OWqCatww\">「对不起」 </p>\n<p data-pid=\"P2JgYiTx\">...... </p>\n<p data-pid=\"bEdZy9RJ\">「可是你刚才，张嘴了。」 </p>\n<p data-pid=\"akrQ5pyk\">江知行勾唇，笑得肆意。 </p>\n<p data-pid=\"s5KAe0Oj\">我错愕！ </p>\n<p data-pid=\"tB7MEy8j\">我哪有张嘴？ </p>\n<p data-pid=\"fQMdN05D\">我......应该...... </p>\n<p data-pid=\"tU4afq0u\">没有张嘴.....吧...... </p>\n<p data-pid=\"W1ltVuxm\">「再说，这是你该还我的......」 </p>\n<p data-pid=\"n5KCDkSR\">我尖叫一声，用手捂住他的嘴不让他继续说。 </p>\n<p data-pid=\"sFwyPkvk\">我知道他要说什么。 </p>\n<p data-pid=\"qQSzjNr8\">他要说那年大学毕业晚会我趁他不备偷亲他的事！ </p>\n<p data-pid=\"2mSrMExV\">他要说我跟他告白被拒的事！ </p>\n<p data-pid=\"Q4FC9K7_\">全是黑历史，我徐未晚从小认真学习，尊敬师长，助人为乐，积极向上，团结同事，努力工作，唯一的污点就是跟模特队队长江知行告白被拒，奇耻大辱啊。 </p>\n<p data-pid=\"o1jLN5X7\">从那以后我每次看到好看的小哥，脑海里就会冒出江知行拒绝我的那张脸，叫人好不泄气！ </p>\n<p data-pid=\"pZjvhTH_\">当年我色令智昏，借着酒意就敢对模特队队长江知行无脑告白，还狗胆包天地亲了人家一口，江知行十分震动，然后拒绝了我。 </p>\n<p data-pid=\"HKnamcb2\">据围观群众说，我当时的告白堪称舔狗模范，什么哥哥，你是我见过最好看的男人。想和哥哥谈恋爱，想在哥哥的鼻梁上滑滑梯。 </p>\n<p data-pid=\"1acQ4kbT\">呕，想吐。 </p>\n<p data-pid=\"V_IjMZQF\">当时的徐未晚已经死了。 </p>\n<p data-pid=\"PwWdNEhR\">现在回来的是钮祜禄氏·徐未晚。</p>\n<p data-pid=\"MktDvN0F\">没看完的点击下方图片继续看哈！</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/question/355515763/answer/2350967774\" class=\"internal\">有哪些甜文值得推荐？</a><p></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/li-zhi-tang-gong-zi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">荔枝傥公子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/515356903/answer/2352326613?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/472465867?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么《我喜欢你的信息素》在晋江榜单前面，感觉一般般啊？</a><br><a href=\"http://www.zhihu.com/question/513705278?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有没有贴近生活的现言甜甜的小说！?</a><br>\n","link":"http://www.zhihu.com/question/515356903/answer/2352326613?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"游戏技术策划（Technical Designer）核心竞争力是什么？在团队中能够起到怎样的关键作用？","date":"2022-05-30 03:18:56","description":"\n<p data-pid=\"GvtR9Oev\">[感谢我的同事 Epic Games 资深游戏设计师 何骞 撰写此文，希望能帮助到各位开发者]</p>\n<p data-pid=\"78YMwTtU\">与技术美术（Technical Artist）类似，技术策划（Technical Designer）并非一个全新的职位概念，作为游戏设计职业发展的一个重要分支，技术策划这一职业定位在欧美的大型游戏开发商中已存在十数年之久。随着项目规模的进一步扩张以及游戏系统复杂度的进一步提升，技术策划团队在项目的开发中往往也会起到更为关键的作用。近几年，随着国内游戏行业的蓬勃发展以及项目规模的扩张，对游戏开发各个部门的专业能力以及沟通要求也提出了新的挑战，作为沟通游戏设计以及其他开发部门之间的桥梁，技术策划一职也自然而然地进入了更多人的视野。<br></p>\n<p data-pid=\"bJQ_qF5y\">回到问题自身，笔者首先尝试明确如下的定义：</p>\n<p data-pid=\"_eGDnrT9\"><br>【<u><b>什么是技术策划？技术策划是干什么的？】</b></u></p>\n<p data-pid=\"T-MS0Zvd\"><br>若干年前，笔者曾听到过对技术策划的简短定义：”<u>a designer who can code</u>”，意即拥有编程能力的策划。这定义当然不能算错，不过和现实项目中技术策划的工作重心相比，显然就不够精确。</p>\n<p data-pid=\"eyXTFDeE\">如果以笔者此前的工作经验来下一个定义，技术策划是<u>游戏开发中遇到具体设计问题时引导并提供具体（跨团队）解决方案的设计负责人</u>。技术策划的存在，可以填补设计团队和程序以及其他团队之间空缺的联系，以确保设计和开发方向的统一并高效助力设计团队完成开发任务。针对这点，Cedric Hauteville在GDC 2019上有一场名为Technical Designers: The Master Link Between Engineering and Design的分享可以作为参考。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-2ce8aaa3f5c7685464c86117656dfc1c_720w.png?source=b1748391?rss\" data-caption=\"互联网梗图：设计与开发方向南辕北辙\" data-size=\"normal\" data-rawwidth=\"458\" data-rawheight=\"570\" data-watermark=\"original\" data-original-src=\"v2-2ce8aaa3f5c7685464c86117656dfc1c\" data-watermark-src=\"v2-5082fa1f9a1c990eecdc2c8b0b793e2f\" data-private-watermark-src=\"v2-006353cb1d6a5899cba777383b76d7b1\"></p>\n<p data-pid=\"rQFLwlFD\"><br>在解决项目开发问题的过程中，技术策划的职责是需要帮助界定设计问题的本质、基于现有的引擎和工具资源快速创作原型以验证解决方案可行性和拓展性、协同其他开发部门（特别是程序开发部门）的同事完成整套设计方案的实现以及确保最终成品的产品质量。考虑到大型项目的分工，技术策划往往也会将工作重心分配在游戏核心玩法验证、任务系统支持、开放世界内容创作工具、用户体验支持等不同方面的内容。某些大型开放世界项目的技术策划团队可能会有十来人分别负责支持不同的游戏子系统和内容开发，以保证团队可以无障碍地并行工作。</p>\n<p data-pid=\"oUz6HUCn\">一个好的技术策划，他的背景可能是一个好的游戏玩法策划、关卡策划、游戏程序员抑或是一个好的技术美术，而他们的共同点往往是游戏开发中的通才，对于游戏设计理念和架构各方面都有基础的理解并且在某些方面有特别深入的了解和研发能力，从而可以为设计团队扫清开发中的各种障碍，让其他人可以更专注地进行设计、执行工作。</p>\n<p data-pid=\"Ccputbs8\">需要注意的是，不同游戏公司对于技术策划的定位和实际职责或多或少都会有一些差异，比如Call of Duty项目组对技术策划的岗位定位会更偏向于脚本能力（特别考虑到这个职位需要使用到GSC这一门类C的脚本语言，可参考<u><a href=\"http://link.zhihu.com/?target=https%3A//careers.activision.com/job/R012465/Technical-Designer-Treyarch\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Treyarch</a><a href=\"http://link.zhihu.com/?target=https%3A//careers.activision.com/job/R012465/Technical-Designer-Treyarch\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">的招聘需求</a></u>），而Rockstar的岗位需求则除了脚本能力之外，对开放世界的内容创作和工具管线都有一定的需求（可参考）。不过总体说来，哪怕技术策划的工作并不要求实际进行C++或者C#的编程工作，对编程或是脚本语言的了解和应用能力，都是能够让技术策划能够更好立足及服务于设计团队的关键技能之一。<br></p>\n<p data-pid=\"m5t5bT7M\">在下面的部分，笔者会尝试更进一步的介绍技术策划的关键技能和核心竞争力。<br><br>【<u><b>技术策划的核心竞争力是什么？】</b></u></p>\n<p data-pid=\"UNFT-dTw\">在上面的部分，我们已经提到过技术策划包括从界定设计问题到确保最终成品质量在内的工作职责。笔者根据之前的工作经验和心得，则简略地将技术策划的核心竞争力划分为如下的几点以供参考：</p>\n<p data-pid=\"MfrLdwjF\"><br>一.<b>硬技能</b></p>\n<p data-pid=\"eI8e2HI2\"><br>这一部分会介绍技术策划的一些关键的硬技能，特别是完成特定设计任务的能力，同时也可以很好地在游戏项目开发中来具体地衡量和评估技术策划的工作成果。</p>\n<p data-pid=\"sZPYFh5q\"><br>①<u>Full-Fledged Game Designer with Technical Capabilities / 拥有技术能力的成熟游戏策划</u></p>\n<p data-pid=\"FvFm7heV\"><br>说到底，技术策划依然需要立足于游戏策划的工作基础之上（换句话说，一个设计能力不合格的游戏策划是很难成为一个合格的技术策划的），技术策划除了关注具体的设计实施方案之外，更需要了解这个方案给玩家带来的体验（user experience），可用性（usability）或是重复可玩性（replayability）等方面的内容。</p>\n<p data-pid=\"loUgMEmF\">技术策划最重要的技能和职责之一，是与其他部门的人（程序开发、美术、动画、音频、叙事设计等等）进行沟通，并且能够真正理解不同部门的人考虑的重点，理解他们的语言体系以及工作方式并且报以相应的同理心。</p>\n<p data-pid=\"l2nGIvFa\">需要注意的是，技术策划往往不是为了自己在工作，在像引擎或者工具团队提出需求时，他们也需要考虑到其他非技术人员的可用性问题，比如在设计和实现一套近战攻击系统时，如何让美术和动画团队更方便地参与进来快速地迭代以及尝试新的想法，而不是每一个需求都需要经过程序或者技术策划之手才能实现。</p>\n<p data-pid=\"OFObUOHH\"><br>②<u>In-depth Game Engine Knowledge / 深入了解游戏引擎知识</u></p>\n<p data-pid=\"70KEyZEw\"><br>不管项目中使用的是自研引擎还是如虚幻引擎或者Unity在内的商业引擎，技术策划都应当对引擎的基础知识有比较扎实的理解。这里并不是要让技术策划成为面面俱到，事无巨细的百科全书（事实上，很多细节问题查询官方文档恐怕要比靠死记硬背更为有效），而是希望技术策划能够快速地定位到引擎的具体功能和限制所在，从而更好地提出具体的设计解决方案。以虚幻引擎为例，了解<u><a href=\"http://link.zhihu.com/?target=https%3A//docs.unrealengine.com/5.0/en-US/unreal-engine-actor-lifecycle/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Actor Lifecycle</a></u>和<u><a href=\"http://link.zhihu.com/?target=https%3A//docs.unrealengine.com/5.0/en-US/networking-and-multiplayer-in-unreal-engine/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">网络机制</a></u>，对于开发联机游戏和处理优化问题都有很好的助益。<br>之前在和一位技术策划朋友聊天的时候曾提到过一个概念<u>Constraints Generate Creativity</u> ，意即“限制催生创造力”。这里的限制往往就来自于引擎限制以及游戏项目相关的规范，而明晰这些限制和规范，则可以更好地提供有创造性的解决方案。</p>\n<p data-pid=\"3bxlr7_B\"><br>③<u>Solid Prototype Skills / 扎实的游戏原型制作技能</u></p>\n<p data-pid=\"v0gucBQH\"><br>技术策划产常见的工作职责是为项目中某一功能模块或者流程体验提供游戏原型开发的支持，这一原型往往会做为Vertical Slice / 垂直切片（亦有称之为Minimal Playable Product，即最小可玩版本）用以验证游戏玩法设计，以及保证可以在此基础上验证设计可行性，以及未来可以拓展成为更丰富玩法和内容产出模式。</p>\n<p data-pid=\"XoFcF4bq\">在这个原型的构建过程中，技术策划往往起到了比较核心的开发骨干作用，利用现有的引擎脚本工具和基础系统，在不需要程序团队大规模参与进来的前提下就可以实现游戏原型的制作和针对相应基础的探索。这点在项目早期的概念设计（Conception）和预制作（Preproduction）阶段尤其重要，可以省下许多不必要的成本以及更早地验证项目和相关系统的开发方向。</p>\n<p data-pid=\"36xJ3Tlm\">需要注意的是，制作游戏原型的过程中，技术策划亦需要考虑到该系统和玩法的拓展性，以及尽量减少使用比较偏门而无法使用到最终产品中的方案（no hack solution），制作原型的目标并不仅仅是为了展示特定效果，更重要的是保证产品能够最终按照此标准落地。<br></p>\n<p data-pid=\"8ZFTel86\"><b>二.软技能</b></p>\n<p data-pid=\"SlPhyRa3\">这部分则是技术策划一些比较不那么容易用具体产出来衡量的能力，但往往也都是一些优秀的技术策划所拥有的共性。</p>\n<p data-pid=\"y2Bb0WBz\"><br>①<u>Be A Modernized Designer / 努力做一个</u> <u>“现代化”</u> <u>的设计人员</u></p>\n<p data-pid=\"wF1qoVPp\"><br>技术策划需要有好的技术能力，也需要有好的技术嗅觉，在很多方案的设计和实现上，不能简单地被既有的项目经验所禁锢，而是需要因地适宜，根据人员配置和实际项目需求来制作合理的实现方案，切忌生搬硬套，粗暴套用以往的成功经验和方案到新的项目中来。</p>\n<p data-pid=\"YWw9pVRP\">除此之外，技术策划也需要对市场上新兴的技术方案有一定的了解所在，在合适的时机将新的方案验证、引入到开发管线中，很有可能能够收获到不错的效果，又或者是作为未来项目开发中的备选技术方案使用。</p>\n<p data-pid=\"-XDOkHQ0\"><br>②<u>Make Rational Trade-offs / 合理权衡方案利弊</u></p>\n<p data-pid=\"ZdrSAZh6\"><br>针对具体的设计难题，往往没有一个最优解可以解决所有问题，而是在有若干个次优解的情况下需要选取其中某些方向进行验证并坚持下去。在权衡这些方案的过程中，技术策划的决断力会受到很大的考验，而且往往也会受限于各种因素而难以做出理性的判断。越是这样的情况下，就越需要减少个人情感和临时冲动的影响来做出相关决定，而是要梳理清楚不同方案的利弊，以及如何验证及衡量接下来的开发工作。</p>\n<p data-pid=\"9dCEoq8X\">而权衡这些方案的过程中，技术策划一定要保持和不同技术团队的紧密沟通，保证大家都确实了解到问题所在以及实现这些方案的利弊（Pros and Cons）甚至于某些情况下不得不做出的牺牲，从而找到相对比较好的平衡方案确保可以顺利执行下去。</p>\n<p data-pid=\"J_78IIrk\"><u>③Help The Design Team Grow / 帮助设计团队成长</u></p>\n<p data-pid=\"PLvTcHmL\"><br>一个好的技术策划，必然不是一个藏私的技术策划，除了为设计团队提供技术支持之外，技术策划也可以主动为给团队分享自己的经验和学习到的知识中，在这个过程中不光可以帮助团队一起成长，也可以很好地温习、巩固自己的知识体系。</p>\n<p data-pid=\"FJ1H_rqs\">此外，技术策划可以根据项目此前的积累，以及项目开发中遇到的各种问题，为设计团队（以及其他包括美术、音效在内的跨部门合作）制作各种最佳实践的规范，以帮助团队完成更好的协作和表现效果。这些最佳实践可以包含游戏场景中的具体制作和物件摆放规则，游戏任务从开始到执行以及最终结束的流程优化以及游戏脚本的写作规范等等，最终的目的都是保证游戏更好的成品质量，以及减少不同团队以及不同策划之间的沟通成本。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-58b5cb91245cb0e36242cff3d62e1fce_720w.jpg?source=b1748391?rss\" data-caption=\"引自Ayesha Siddiqi，“做你年轻时需要的人”\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"750\" data-watermark=\"original\" data-original-src=\"v2-58b5cb91245cb0e36242cff3d62e1fce\" data-watermark-src=\"v2-26bebd642024a0ac7c6eaa6623d618a8\" data-private-watermark-src=\"v2-b1ea4968c059be98d68540b3dc14eb7b\"></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/epicyou-xi-shang-cheng?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Epic游戏商城</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/534544209/answer/2507277531?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">7 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/534524335?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">什么特质会让你立刻觉得一个游戏技术策划（Technical Designer）很靠谱？</a><br><a href=\"http://www.zhihu.com/question/503354364?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏策划的从业门槛是否正变得越来越高？</a><br>\n","link":"http://www.zhihu.com/question/534544209/answer/2507277531?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价动画电影《哆啦A梦：大雄的宇宙小战争2021》？","date":"2022-05-29 05:38:30","description":"\n<blockquote data-pid=\"n5FW5ROK\">剧透预警，长文预警</blockquote>\n<p data-pid=\"Fjo9TJn1\">我仍然记得小时候初次翻开《大雄的宇宙小战争》时的情景。那是我第一次了解到《哆啦A梦》居然还有200页的超长篇章，也是我第一次知道，<b>《哆啦A梦》描绘的不仅是日常点点滴滴的趣事，还有那些惊心动魄的异世界大冒险。</b>小夫的模型摄影、静香的牛奶浴、十岁的天才总统、鲸鱼型的航空母舰、无敌的地球坦克、最终的绝地逆转……这些元素，早已深深镌刻在我的脑海里。</p>\n<p data-pid=\"AmY-bLXo\">正因如此，两年以来我一直迫切地期待着《宇宙小战争2021》的上映，却又担忧这部作品能否完美展现原作的魅力。而当我走出电影院时，我发现自己对原作的喜爱，与欣喜、失望、兴奋、困惑种种情感杂揉在一起，让我的感受变得微妙了起来。总体来说，<b>诸多令人失望的改编与氛围渲染上的不足导致其终究无法达到新魔界、新铁人那样的高度，但优秀的原作保证了本作的下限，仍然给予了这部电影不错的观感。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a117e474195043e371626933fa9c91a7_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-a117e474195043e371626933fa9c91a7\" data-watermark-src=\"v2-8be1f362d57120961c17f994e96389e3\" data-private-watermark-src=\"v2-6b112cb119dd652ec4763155d8532836\"></p>\n<h2>人物形象</h2>\n<p data-pid=\"qC5NXYMI\">这部电影相比原作最大的改动，当属对主角巴比的形象更加细致立体的刻画。在原作中，巴比尽管只有10岁，却显得远远比大雄他们成熟。面对陌生的“巨型生物”，他不卑不亢地介绍自己；意识到自己给他人添了麻烦，他彬彬有礼地想要告别；与PCIA长官德拉哥鲁鲁为解救静香而对峙时，他一身正气地让对方妥协；即使被送上法庭接受了不公正的审判，他依然大义凛然地说出了掷地有声的话语。</p>\n<p data-pid=\"VPM-6kev\">而本作中的巴比虽然也具备了这些特质，但却显得更加“孩子气”一些。他会因为把静香错认为姐姐而慌张，会因为一行人不听自己劝阻鲁莽行事而生气，会因为看到物是人非的景色而感伤。在公众面前，他必须表现得有责任心、坚韧不拔、一丝不苟，因为他是要为整个国家的未来负责的总统。但在私下，他也只不过是个十岁的孩子，一直绷紧的神经总是要放松的，一直压抑的情感也总有喷薄而出的一天。于是，我们在故事的结尾看到，在与姐姐两个人独处的时候，他终于完全卸下了自己的心防，将内心的情感全部转化为了响彻天空的哭喊。<b>如果说一般的人物成长意味着变得更加成熟，那么巴比的成长反而体现为对原始自我的释放。</b>想必，国民们也会喜欢这个有人情味的总统的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-be3dad090cd5c7eeff8ed511004985c9_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-be3dad090cd5c7eeff8ed511004985c9\" data-watermark-src=\"v2-2410ea2e90133a3101696548020015e6\" data-private-watermark-src=\"v2-4b16ab15e766b1c927d31d5f0cac4de8\"></p>\n<p data-pid=\"LB9NWx83\">将原本较为扁平的人物进行立体化的塑造，自然值得赞扬。但这也就意味着作品中需要花费更多笔墨来描写这一人物，比如增加他与五人组之间的互动。简单的对话还不够，双方必须要爆发激烈的冲突才能让人印象深刻。于是，当五人组好不容易从PCIA手中救下巴比时，他的第一反应不是感谢，不是惭愧，而是为朋友们的鲁莽感到生气。他执拗地认为，比利卡星的事不能给地球人添麻烦，自己被抓走才是最好的结果。<b>巴比这里体现出的固执性格与原作中的表现截然不同，让这个人物不再完美，而是有了自己的些许小缺点。</b>至于这种塑造是好是坏，就完全由各位观众自行判断了。</p>\n<p data-pid=\"RS6e2A5R\">为了突出巴比的孩子气，本作还加入了一位新人物——巴比的姐姐皮娜。可是，皮娜的人物塑造就显得乏善可陈了，整部电影没有给人留下任何深刻的印象。我们不难从巴比的回忆中看出姐弟两人亲情的羁绊，可是由于正面的描写实在太少，在整个故事中的作用显得可有可无。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-efed5d91e00fc12f0a93d936c73606eb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-efed5d91e00fc12f0a93d936c73606eb\" data-watermark-src=\"v2-7c581e4b1fba3640a5761c901800b1a0\" data-private-watermark-src=\"v2-59e83a42a9b4410f6f91518eb2676c2e\"></p>\n<p data-pid=\"DJ97JnTR\">而且，作为严肃的战争题材，原作的情感抒发极为内敛。我在这部电影上映之前曾分析过《宇宙小战争》的主题：</p>\n<a href=\"https://www.zhihu.com/question/428401464/answer/2504871845\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-888adf4a5b2f2ed7d1bba30848c1d4d4_qhd.jpg?source=b1748391\" data-image-width=\"968\" data-image-height=\"714\" class=\"internal\">哆啦A梦哪个超长篇最值得细品？</a><p data-pid=\"wRwU2GnS\">其中就提到“人心”，即人类意志在作品中所占的核心地位。相比整部作品一直强调的人物意志，情感则全靠自然流露，没有过多的着墨。但这部电影却添加了不少煽情戏份，尤其是大雄与巴比的经典“夜谈”有些用力过猛。而由于对皮娜塑造的缺失，姐弟情的渲染也仅仅是点到为止，没有能够成为《新魔界大冒险》中母女情这样的点睛之笔，着实有些遗憾。</p>\n<h2>剧情</h2>\n<p data-pid=\"FEAv_xhn\">在大刀阔斧改动人物形象的同时，剧情结构也不可避免地会发生变化。然而，这部电影改编部分多少都值得斟酌。<b>原作的剧情脉络是，在绝望之中燃起一线希望，却又再次落入绝望的深渊，最后奇迹般地大逆转。</b>这种先抑后扬的结构无疑能让观众在屏住呼吸保持许久的紧张感后爆发出无与伦比的爽快感。然而，这部电影却完全抛弃了原作的剧情推动方式，无论是紧张感还是爽快感都无法与原作比拟。</p>\n<p data-pid=\"Um7XSZLX\">最典型的一段当属巴比只身前往公园营救静香的情节：在原作中，静香只能眼睁睁地看着载着巴比的宇宙飞船飞向远方，而追随主人来到地球的洛克洛克也只能对着寂静的夜空仰天长嚎。要保护的人被敌人带走，关键道具缩小灯也落入敌方之手，五人组由此陷入了整个故事中最绝望的境地。然而，为了拯救自己的朋友，也为了让比利卡星重获和平与自由，五人组还是毅然踏上了抗争的征途。在宇宙飞船里，每个人都心情凝重，正如静香所说，<b>“现在不是享受的时候”</b>，他们的肩上承担着整个星球的未来。</p>\n<p><img src=\"https://pica.zhimg.com/v2-843ac26f005fcbe78b91a555777331f5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1291\" data-rawheight=\"939\" data-watermark=\"original\" data-original-src=\"v2-843ac26f005fcbe78b91a555777331f5\" data-watermark-src=\"v2-ca4b047ba24567f8aaea9d5ac6bcfc91\" data-private-watermark-src=\"v2-80ae618bd52c93e1788283f607158e6a\"></p>\n<p data-pid=\"rnwiTCu0\">然而，改编的情节却破坏了这种绝望感和悲壮感。在巴比即将被带走时，男孩子们驾驶着模型坦克帅气地赶到，在一番华丽的战斗后顺利把静香和巴比都带回了基地。<b>巴比的悲壮之举成了无用功，而五人组也马上沉浸在了计划成功的喜悦中，紧张感瞬间化为乌有。</b>尽管一行人为了拯救皮娜和比利卡星还是乘上了宇宙飞船，但毕竟皮娜不同于与五人组早已建立了友情的巴比，观众无法移情，自然也就无法体会到那种同伴落入敌方手中的危机感。更何况，在宇宙飞船上一行人还享受起了美食，愈发将氛围推离了大战之前的凝重。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e0e80e59785a8ee41fb2d017104a4cae_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-e0e80e59785a8ee41fb2d017104a4cae\" data-watermark-src=\"v2-c942dfa85b35c9227f0bef3c93aa83a4\" data-private-watermark-src=\"v2-425e42650d16bdbc62896601b88eeaed\"></p>\n<p data-pid=\"Y-TOQ8KZ\">当然，这段情节或许是为了让巴比留在五人组身边，方便深入塑造而作出的妥协。但还有很多剧情上的细节也作出同样的修改，实在让人无法解释。</p>\n<p data-pid=\"TldmvW0q\">让我意难平的一点是，<b>PCIA这个反派组织相比原作压迫力大大减弱。</b>原作中PCIA碾压五人组的情节，在本作中都给后者留下了一线生机。比如PCIA包围自由同盟基地时，原作中瞬间就将所有人一网打尽，本作却给了自由同盟通风报信、从地下通道逃走的机会。还有原作中没有任何刻画，单纯服从命令的PCIA士兵，本作中却成了毫无用处的谐星，专门拖长官的后腿，不听指挥放跑大雄，面对示威群众落荒而逃，丝毫没有身为反派的“自觉”。而且，五人组获得生机之后并没有改变原先的剧情走向，绕了一圈弯路之后还是陷入了原来的危机，那么改动这些剧情的意义何在呢？</p>\n<p><img src=\"https://pica.zhimg.com/v2-3f1fbc876c6820168a9b8bc1f83da4c0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-3f1fbc876c6820168a9b8bc1f83da4c0\" data-watermark-src=\"v2-f76a0a2748b3428028e750b5e993a734\" data-private-watermark-src=\"v2-be6a45c10250fef73f8238f19dede7bf\"></p>\n<p data-pid=\"_DelTBXZ\">除了紧张感之外，最终决战的爽快感同样有所减弱。原作中胖虎骑上“鲸鱼”，用毛衣蒙住其头部的名场面，我至今记忆犹新，不知为何电影中却没有复现出来。德拉哥鲁鲁被捉到后的表现过于冷静，甚至还跟五人组谈起了条件，完全没有战败的感觉。所谓的“保障部下安全”的承诺也十分突兀。当然还有罪魁祸首吉尔莫亚，被群众包围后瘫坐在了地上便戛然而止，可是应该有很多人像我一样想看他被打得鼻青脸肿、落荒而逃的吧。</p>\n<p data-pid=\"haEvvPg5\">好在本作并没有颠覆原作的大体框架，大部分的精彩情节都得到了不错的再现。看到小夫用精心制作的模型和机械拍出华丽的战争场面时，我仍会心潮澎湃；看到静香为巴比准备的城堡一般的梦幻宅邸时，我也仍会怦然心动。在于反派的斗智斗勇中，虽然PCIA的压迫力减弱了，但长官德拉哥鲁鲁算无遗策的形象反而愈加突出，突袭秘密基地、识破流星伪装、包围地下组织……他那标志性的阴冷狞笑在大银幕上显得更加令人胆寒。而五人组的表现也是如此，尤其是静香孤独地向战场出发，小夫随之赶来并肩作战的情节，即使我已经读过无数遍依然为两人人性的光辉所感动。</p>\n<h2>主题</h2>\n<p data-pid=\"gZhbvGgq\">虽然剧情氛围的渲染逊于原作，但在主旨的表达方面这部作品还是与原作保持了一致——“人心”的力量。</p>\n<p data-pid=\"CcX-w0H0\">从设定之初，总统巴比和独裁者吉尔莫亚的形象就形成了鲜明的对立：巴比是民选总统，他能成为一国领导，靠的正是民众的“人心”；而作为独裁者的吉尔莫亚，为了权力不惜与千万国民为敌，尽失“人心”。巴比最大的特点就是照顾他人，不愿给他人添麻烦。正是因为他这种温柔体贴、富有责任感的性格，才让如此多的民众自发组建了自由同盟与强权对抗；而吉尔莫亚深知自己不得人心，害怕遭到背叛而无法信任任何人，只愿派遣无人战斗机参与战争，到头来还是孤单一人。看起来，这场战斗是八十万大军对自由同盟的数百人，<b>但有了成千上万的国民“人心”的支持，数百人的星星之火终会呈燎原之势，烧毁这摇摇欲坠的独裁军政府。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4b74cdaa54b552ce45a04dded6663e7a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-4b74cdaa54b552ce45a04dded6663e7a\" data-watermark-src=\"v2-d7313b3e343131bfd4a32403017edbf1\" data-private-watermark-src=\"v2-28aaf8952f12962079283682f0b7b3fa\"></p>\n<p data-pid=\"JhUqObsD\">这种“人心”的力量同样体现在五人组身上，尤其是静香和小夫的一段情节将“人心”的意义诠释得淋漓尽致。</p>\n<p data-pid=\"ZH3B0kT_\">当听闻数千架无人战斗机来势汹汹的时候，小夫害怕得缩在角落躲了起来。的确，敌我力量差距悬殊，既然明知道此行凶多吉少，明知道自己的牺牲也难以改变绝望的现实，那为什么还要去送死呢？面对小夫的哭喊，静香没有说话，而是用行动作出了回应：为了不愧对自己的心。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-819e0fd72bd8fb1d4b5154ec519e84e2_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"973\" data-rawheight=\"359\" data-watermark=\"original\" data-original-src=\"v2-819e0fd72bd8fb1d4b5154ec519e84e2\" data-watermark-src=\"v2-8201d39de45872a44208510ee6134099\" data-private-watermark-src=\"v2-8d3f6b4c7ecbc84e7cb5a18e8d90b2d3\"></p>\n<p data-pid=\"Wk6jQ8DA\">生命固然宝贵，宝贵到对死亡的恐惧深入我们每个人内心的最深处。然而人类的内心就是这么神奇，那种不屈于独裁者的意志，那种对自由与和平的追求，真的能够推动人的精神超脱对死亡的恐惧，爆发出意想不到的力量。是的，<b>“人心”的力量，正是这样的伟大理想赋予人类的克服人性弱点、保持坚定意志的强大精神力量。</b>正因有了这种力量，人类才不会拘束于个人的安危，而是放下个人利益，为人类共同的未来而奋斗。我们之所以有今天，不也是因为前人们团结一致的“人心”推动了历史的进程吗？</p>\n<p data-pid=\"SOea-0wg\">正因如此，吓得浑身发抖的小夫仍然开动坦克走上了前线；正因如此，眼看静香陷入危险的他没有丝毫犹豫，立刻用自己的车身挡下了敌人的攻击——这一刻，是小夫在《哆啦A梦》这部作品中最帅气的一个瞬间。</p>\n<p><img src=\"https://pica.zhimg.com/v2-4f31266046c4b9be4216f740fc17c42e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-4f31266046c4b9be4216f740fc17c42e\" data-watermark-src=\"v2-81f1b049d5f0ddecf2353780385442b8\" data-private-watermark-src=\"v2-0a0ae8243657ff2b7d82f8b6f9efceae\"></p>\n<h2>其他</h2>\n<p data-pid=\"Tv6So_sp\">本作的作画与演出都相当不错，全程保持了高水准，大雄和哆啦A梦初次变小时的镜头流畅的视角转换体现了制作组的用心。<b>尤其是静香画得实在太棒，在细致的动作和神态加持下可爱之极，牛奶浴和在海洋中变大的名场面也都还原得相当出色。</b>单凭这一点我也要给这部作品稍稍加点分。漂亮的空战镜头和动感的“马戏”也看得人直呼过瘾，宇宙战争的科幻感铺面而来。然而，服部隆之的音乐这次又犯了老毛病，大半部电影都完全游离于剧情之外，而且没有让人记得住的旋律。插入曲虽然还不错，但因为缺少相应的气氛渲染，效果无法与《月球探险记》相比。</p>\n<p><img src=\"https://pica.zhimg.com/v2-5763f41ab82734c2539b3f0a76f82e98_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-5763f41ab82734c2539b3f0a76f82e98\" data-watermark-src=\"v2-c39597d08cc7efac342ed2fdec907005\" data-private-watermark-src=\"v2-48cb82fcfbfb8533148ed2474fdb95d0\"></p>\n<p data-pid=\"zReLyPii\">另外，作品结尾大家一起拍摄的《宇宙大战争》无疑填补了原作的模型摄影不了了之的遗憾，最后还迫害了一次出木杉，真是喜闻乐见。</p>\n<h2>结语</h2>\n<p data-pid=\"XR7u5MMK\">站在巨人的肩膀上，《宇宙小战争2021》并没有给我们交出一份满意的答卷。不过，当我看到大雄变小后大快朵颐哈密瓜的时候，还是会感觉由衷地艳羡；当我看到静香放下小夫的鞋子，跑向模型坦克的时候，我还是会从心底感到一丝感动。这部作品，包含了<b>藤子·F·不二雄老师太多的奇思妙想，也融入了他对和平的向往，对人类意志的力量终将战胜违背人心的强权的愿望</b>。无论如何，能将藤子老师的这些思想用新时代的方式展现在大众，特别是孩子们的眼前，就是这部作品无可比拟的价值。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f015f5a8e1e1a630f1d3bcd11a6e07a9_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-f015f5a8e1e1a630f1d3bcd11a6e07a9\" data-watermark-src=\"v2-df9c3232fe76225f38a7f8f984ce1e19\" data-private-watermark-src=\"v2-720ef49255d7896b6983f80060075675\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/shi_mmer?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Shimmer</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/519952582/answer/2505693635?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">33 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/532135555?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">剧场版动画 《哆啦A梦：大雄的宇宙小战争 2021》确认引进内地，这部动画有哪些看点？</a><br><a href=\"http://www.zhihu.com/question/532135089?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《大雄的宇宙小战争 2021》确定引进国内，你有哪些期待？</a><br>\n","link":"http://www.zhihu.com/question/519952582/answer/2505693635?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012 年的、由 Node.j......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。M1 芯片的性能如何？本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/138186/40/23101/50775/622032b3Efa9053d7/df3a819d044a9455.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote>\n<p>题图来自 USTC Hackergame 2019「Happy LUG」</p>\n</blockquote>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/90743/25/22680/55545/622032abE6ef31d51/cfc4cb389c994c17.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote>\n<p>周六不放假休息，还在这加班搞 CTF？</p>\n</blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/86535/11/24318/75037/622032a8E4f94d4ae/89703ccc122cf4e0.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「天下武功，唯快不破 —— 我是这样优化博客的」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 &lt;script async&gt;」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 &lt;script&gt; 的 async 和 defer 属性、以及它们背后的故事。拆开 Google Analytic 的统计代码现在 Google 推出了 Google Tag Manager，通过......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/80291/2/16552/19311/622032b3Eb300c2aa/66748fc8124a01c5.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]