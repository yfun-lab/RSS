[{"title":"新玩意 120｜少数派的编辑们最近买了啥？","date":"2022-09-22 09:18:09","description":"这一期，都是「小」玩意。<a href=\"https://sspai.com/post/75867\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75867"},{"title":"App+1 | 用三个单词定位世界的任一角落：what3words","date":"2022-09-22 08:05:10","description":"what3words 就是一个简易版的地理坐标系。what3words 选择给一个位置赋予三个单词，这些单词又组合成一个独一无二的单词组合，这个位置的地理信息就藏在这个词组里。<a href=\"https://sspai.com/post/75865\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75865"},{"title":"软件打造的工作流，也是我的「外部个性」","date":"2022-09-22 06:29:15","description":"Matrix首页推荐Matrix是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选Matrix最优质的文章，展示来自用户的最真实的体验和观点。文章代表作者个人观点 ...<a href=\"https://sspai.com/post/75169\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75169"},{"title":"汽车轮胎品牌那么多，该怎样选？","date":"2022-09-22 06:15:55","description":"\n<p data-pid=\"DNILM-OM\">首先说一下可能被人忽略的一点，现在相当多的电动汽车或者混动汽车（电机+发动机共同驱动）和普通燃油车已经相差很大，导致了它们所用的轮胎和普通燃油车的轮胎是不一样的，也可以说是两者并不通用的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c076f8445aa216d07822b4c888399f3f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1581\" data-rawheight=\"944\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"mFPoNDDX\"><b>自重更大，对轮胎的抗压能力要求更高。</b></p>\n<p data-pid=\"1dO-lgzu\">和普通的燃油车相比，电动汽车因为配置了电池组的原因，整车质量更大。</p>\n<p data-pid=\"mfTSyfjy\">一般家用SUV的自重大多在1.5-1.8吨左右，而新能源SUV的自重一般是2吨起步，甚至一些长续航的SUV重量达到了2.6吨。</p>\n<p data-pid=\"PdyakQd7\">比如新能源中型SUV<a href=\"https://www.zhihu.com/search?q=%E6%AF%94%E4%BA%9A%E8%BF%AA%E5%94%90&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2632625075%7D\" class=\"internal\">比亚迪唐</a> 2022款 纯电版本的自重则高达2.3-2.6吨。</p>\n<p><img src=\"https://pica.zhimg.com/v2-1cd928c0cda115d9fdd9269b3e43c4e4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"735\" data-rawheight=\"226\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-89d0f5da97da6d765d14311763cf1e3a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1354\" data-rawheight=\"674\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"o_PJ_Amm\">而且现在随着续航的增加，动力电池的能量密度没有明显的增加的前提下，即便是长续航轿车，自重也达到了2.3-2.5吨之间。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8347d58ca78ba800d6131e2c076d91c8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1234\" data-rawheight=\"664\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-89a001f4d70b0bd56de5e9a437840488_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"535\" data-rawheight=\"156\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"u9zeFK0F\">想一想，如果遇到节假日，全家一起开车自驾游，坐满5个成年人（三四百公斤），再加上后备厢装满行李的情况下，整车的质量有可能往3吨去了（参考<a href=\"https://www.zhihu.com/search?q=%E5%94%90%E6%96%B0%E8%83%BD%E6%BA%90&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2632625075%7D\" class=\"internal\">唐新能源</a>旗舰版）。在这种情况下，需要轮胎有着更高的抗压能力和耐磨耗性能，普通轮胎上去，别说磨损过度了，就是那大压力都抗不住。</p>\n<p><br></p>\n<p data-pid=\"kM39glnv\"><b>电机启动扭矩更大，对轮胎响应要求更高。</b></p>\n<p data-pid=\"XBPOx97p\">电动汽车的启动扭矩比燃油车大是电动汽车的电机决定的。</p>\n<p data-pid=\"010SbEjt\">电动汽车的电机比燃油车的<a href=\"https://www.zhihu.com/search?q=%E5%86%85%E7%87%83%E5%8F%91%E5%8A%A8%E6%9C%BA&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2632625075%7D\" class=\"internal\">内燃发动机</a>效率更高。在中低速行驶时候，电机效率甚至能达到95%以上。而传统燃油车的发动机因为<a href=\"https://www.zhihu.com/search?q=%E7%83%AD%E6%95%88%E7%8E%87&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2632625075%7D\" class=\"internal\">热效率</a>低，再加上排气、冷却、泵气、机械、不完全燃烧等损失，尤其内燃发动机在中低速行驶时候，效率往往不到电机的四分之一。</p>\n<p data-pid=\"sp_VnDnR\">电机本身的低扭充沛的特点，如果再配合上双电机的加持，即便是拥有电池的笨重车身，电动汽车依旧可以支持极快的零百加速。即使纯电SUV重量达到2.4吨以上，依旧可以实现零百加速达到4秒，轻松超越同级别的纯燃油车。</p>\n<p><img src=\"https://picx.zhimg.com/v2-376b76a71404a55924fbda4347ed90f1_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"744\" data-rawheight=\"216\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"tNNlBwWw\">但在如此之快的百公里加速下，电动汽车的轮胎必须要具备更快的加速响应才行。如果车的动力过足，但轮胎的响应速度不足，就及其容易抓地力不够造成打滑。如果碰到雨水天气，动力太强，而轮胎不匹配的话，反而会造成车身加速不稳，方向偏移，产生严重的安全隐患。</p>\n<p><br></p>\n<p data-pid=\"Mn2ktJfy\"><b>三电体系，没有发动机的轰鸣和震动，对胎噪静音要求更高</b></p>\n<p data-pid=\"xrEOaADZ\">电动汽车使用的是电机，噪音比燃油车要小的多，在车厢内听不到发动机的轰鸣和<a href=\"https://www.zhihu.com/search?q=%E6%8E%92%E6%B0%94%E7%B3%BB%E7%BB%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2632625075%7D\" class=\"internal\">排气系统</a>的震动，所以轮胎的噪音能更清晰的传到车里，这时候就对轮胎的静音性能就提出了更高的要求，而很多传统轮胎是没有考虑静音功能的，只有专用的静音轮胎才能满足这个要求。</p>\n<p data-pid=\"BwmU201N\">比如封闭式胎肩可以阻挡花纹泵气噪声向周围环境传递；多节距设计则可降低花纹块对路面拍打的噪音，使噪音能量的峰值分布更加分散，不易出现噪声共振；而降噪波纹则能扰乱噪音的传播路径，降低噪声量。</p>\n<p><img src=\"https://picx.zhimg.com/v2-a3f92f66b67427a76869f69e89ad1722_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"972\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"DM8KQVhZ\"><b>电动车续航更需要低滚阻+轻量化的轮胎</b></p>\n<p data-pid=\"xVuq8-CK\">根据慕尼黑工业大学（TUM）在对两台电池容量都是55千瓦时的特斯拉Model3和大众ID.3，在外部温度为15℃的环城路段条件下，进行续航测试发现，因为轮下阻力较小的原因，大众ID.3取得了更好的续航成绩。</p>\n<p data-pid=\"tYtWtVjp\">轮胎的低滚阻和<a href=\"https://www.zhihu.com/search?q=%E8%BD%BB%E9%87%8F%E5%8C%96&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2632625075%7D\" class=\"internal\">轻量化</a>能有效的提高电动汽车的续航能力。</p>\n<p data-pid=\"zoMEkUoY\">其实想想也不难理解，在总能量固定不变，相同速度和其他条件的情况下，肯定轮胎受到的阻力越小、重量越轻的汽车跑的更远。</p>\n<p data-pid=\"CRNE4x3L\">由于以上几个原因，电动汽车的轮胎必须要选择特殊专配的，要<b>抗压/抓地力强/静音/低滚阻/轻量化</b>，而普通燃油轮胎是无法兼顾这么多的，不能充分发挥新能源汽车的优势甚至会带来安全隐患。</p>\n<p data-pid=\"SuOuUBA2\">如果强行在大重量，大动力，低噪音的电动汽车上安装普通轮胎，虽说不是不可以。但装上去了，也会导致普通轮胎寿命的大幅缩短，甚至正常使用无法超过一年，同时还会带来巨大的安全隐患，如抗压能力不达标发生爆胎，湿地加速/转向因扭矩过大导致的危险滑行等等。</p>\n<p data-pid=\"qOnlCYJR\">即使是使用了国际品牌的，某些方面十分出色的传统燃油轮胎也是不能适配电动汽车的。</p>\n<p data-pid=\"BgNYMmNk\"><b>米其林</b>在轮胎内部加入葵花籽油等油性添加剂保证低温性能和柔软度。但时间久了这种添加剂会流失，轮胎会变硬，舒适性变差。于是米其林就又在轮胎中加入隐形沟槽，增加耐磨能力，减缓抓地力的衰减；但即便米其林生产的燃油汽车用轮胎，也是更多的专注燃油汽车的行车特点，无法驾驭电动车的特殊性，即便是米其林的Total performance系列产品，也只能大致达到电动车轮胎的需求。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4157af9e9359bce77f6d42b3c089fe85_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"400\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"WK_s0CA1\">\n<b><a href=\"https://www.zhihu.com/search?q=%E6%99%AE%E5%88%A9%E6%96%AF%E9%80%9A&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2632625075%7D\" class=\"internal\">普利斯通</a></b>在冬季轮胎冰锐客系列采用发泡橡胶技术，在橡胶中打入<a href=\"https://www.zhihu.com/search?q=%E5%B0%8F%E6%B0%94%E6%B3%A1&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2632625075%7D\" class=\"internal\">小气泡</a>增加弹性，使轮胎变得更柔软，舒适性更高；</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-704ecf06c20be0f560ef40a7569b20d6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"443\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"-vQuN0mr\">\n<b><a href=\"https://www.zhihu.com/search?q=%E5%9B%BA%E7%89%B9%E5%BC%82&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2632625075%7D\" class=\"internal\">固特异</a></b>则使用高碳分子链取代炭黑添加剂，使轮胎更耐磨，并且提出了不对称花纹的设计，增加弯道抓地力和刹车性能；</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-d4c1e0991722734428b1718fa9d29472_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"435\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"SIlT0o1V\">主打安全和降噪的<b>马牌</b>则采用改变花纹排列，设置消音腔等技术，把声音变为震动，使胎噪更小，行车过程更安静。</li></ul>\n<p><img src=\"https://pica.zhimg.com/v2-6c361cd4d01cadc459481f1246154057_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"548\" data-rawheight=\"471\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"SzLjnRH1\">以运动性能著称的<b>倍耐力</b>轮胎则使用了人造丝结构、高强度双层聚酰胺带束层增加运动性能，而橡胶则采用中等硬度获得良好的支撑性能。很多跑车，包括兰博基尼、保时捷、<a href=\"https://www.zhihu.com/search?q=%E9%A9%AC%E8%8E%8E%E6%8B%89%E8%92%82&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2632625075%7D\" class=\"internal\">马莎拉蒂</a>用的都是这个品牌的轮胎。</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-2ee45839ca46ac87dc16a9de0d666a4e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"593\" data-rawheight=\"395\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"9gjHsCcJ\">终归到底，各国际品牌厂商都绕不开三大性能——<b>滚动阻力、抗湿滑性能和耐磨性能</b>。而在电动车轮胎上面，还要加上<b>轻量化、静音、抗压</b>等要求，就对轮胎的适配性更为苛刻了。</p>\n<p data-pid=\"MimECQFL\">各大品牌为了改善这些性能也做了很多研发努力。但即使是各大品牌在技术创新方面付出了很多努力，但如想要提高耐湿滑性能，增加轮胎在雨水路面的抓地力，则需要增加和地面接触的面积，摩擦力也就相应的增大了，滚动阻力也就随之增加了。</p>\n<p data-pid=\"ppFlIVqR\">后来很多国际合资品牌都着重研发破解这一矛盾，通过技术创新实现提升抗湿滑性能的同时降低滚阻，加强轮胎的耐磨能力，改善电动车续航等问题。</p>\n<p data-pid=\"qaJ67SHL\">近两年，如果了解一些轮胎的，可以看到国内、国外的品牌都推出自己的专用电动汽车轮胎。</p>\n<p data-pid=\"GQADlV9T\">如<b>米其林的PS EV系列，普利司通T005 EV系列，固特异的ElectricDrive GT系列，马牌的eContact系列，国内品牌也有玲珑新能源轮胎，浦林RPINX系列等电动车专用轮胎</b>等。</p>\n<p data-pid=\"UmXokJ5A\">所以，如果电动汽车要换轮胎，尤其是那种大重量，百公里加速三四秒的，还是得注意轮胎一定要选适配电动汽车的，不能随意更换成传统燃油车的轮胎。</p>\n<p data-pid=\"E9dM4-MS\">（某些图片来源网络，侵删！）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/338882903/answer/2684497936?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">37 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/436749222?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">汽车轮胎品牌那么多我们改如何选择。?</a><br><a href=\"http://www.zhihu.com/question/545909571?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">汽车轮胎该如何选购？有哪些品牌推荐？</a><br>\n","link":"http://www.zhihu.com/question/338882903/answer/2684497936?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"今年仅此一次大更新，Windows 11「正式版」亮点速览","date":"2022-09-22 03:30:00","description":"16 项更新内容盘点 &amp; 升级提示。<a href=\"https://sspai.com/post/75861\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75861"},{"title":"派早报：小鹏发布 G9 SUV、Spotify 推出有声书服务等","date":"2022-09-22 00:22:06","description":"微软确认 Windows 系统将按年进行大版本更新、戴森发布新款无绳手持吸尘器 G5 Detect 等。<a href=\"https://sspai.com/post/75859\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75859"},{"title":"【机器学习】逻辑回归（非常详细）","date":"2022-09-21 11:57:22","description":"\n<p data-pid=\"HU_wiiaj\">逻辑回归是一个非常经典的算法，其中也包含了非常多的细节，曾看到一句话：如果面试官问你熟悉哪个机器学习模型，可以说 SVM，但千万别说 LR，因为细节真的太多了。</p>\n<p data-pid=\"u8RurW59\">秉持着精益求精的工匠精神不断对笔记进行修改和改进，本着开源精神帮助大家一起学习。欢迎大家在阅读的过程中提出修改建议，我会非常感激。如果文章有帮助的话，希望能点个赞。</p>\n<h2>1. 模型介绍</h2>\n<p data-pid=\"iAH76d1W\">Logistic Regression 虽然被称为回归，但其实际上是分类模型，并常用于二分类。Logistic Regression 因其简单、可并行化、可解释强深受工业界喜爱。</p>\n<p data-pid=\"vCN_EHFt\">Logistic 回归的本质是：假设数据服从这个分布，然后使用极大似然估计做参数的估计。</p>\n<h3>1.1 Logistic 分布</h3>\n<p data-pid=\"ZFIuPZFT\">Logistic 分布是一种连续型的概率分布，其<b>分布函数</b>和<b>密度函数</b>分别为：   </p>\n<p data-pid=\"aTCU2ppu\"><img src=\"https://www.zhihu.com/equation?tex=F%28x%29+%3D+P%28X+%5Cleq+x%29%3D%5Cfrac%7B1%7D%7B1%2Be%5E%7B-%28x-%5Cmu%29%2F%5Cgamma%7D%7D+%5C%5C+f%28x%29+%3D+F%5E%7B%27%7D%28X+%5Cleq+x%29%3D%5Cfrac%7Be%5E%7B-%28x-%5Cmu%29%2F%5Cgamma%7D%7D%7B%5Cgamma%281%2Be%5E%7B-%28x-%5Cmu%29%2F%5Cgamma%7D%29%5E%7B2%7D%7D+%5C%5C\" alt=\"F(x) = P(X \\leq x)=\\frac{1}{1+e^{-(x-\\mu)/\\gamma}} \\\\ f(x) = F^{'}(X \\leq x)=\\frac{e^{-(x-\\mu)/\\gamma}}{\\gamma(1+e^{-(x-\\mu)/\\gamma})^{2}} \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"Imww-iZ3\">其中， <img src=\"https://www.zhihu.com/equation?tex=%5Cmu\" alt=\"\\mu\" eeimg=\"1\"> 表示<b>位置参数</b>， <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma%3E0\" alt=\"\\gamma&gt;0\" eeimg=\"1\"> 为<b>形状参数</b>。我们可以看下其图像特征：</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b15289fd1162a807e11949e5396c7989_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"385\" data-rawheight=\"131\" class=\"content_image\" width=\"385\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"PKmMox3k\">Logistic 分布是由其位置和尺度参数定义的连续分布。Logistic 分布的形状与正态分布的形状相似，但是 Logistic 分布的尾部更长，所以我们可以使用 Logistic 分布来建模比正态分布具有更长尾部和更高波峰的数据分布。在深度学习中常用到的 Sigmoid 函数就是 Logistic 的分布函数在 <img src=\"https://www.zhihu.com/equation?tex=%5Cmu%3D0%2C+%5Cgamma%3D1\" alt=\"\\mu=0, \\gamma=1\" eeimg=\"1\"> 的特殊形式。</p>\n<h3>1.2 Logistic 回归</h3>\n<p data-pid=\"rYCnFF2h\">之前说到 Logistic 回归主要用于分类问题，我们以二分类为例，对于所给数据集假设存在这样的一条直线可以将数据完成线性可分。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-34f3997ae1975cd620a8514e3954fa9e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"682\" data-rawheight=\"370\" class=\"origin_image zh-lightbox-thumb\" width=\"682\" data-original=\"https://pic3.zhimg.com/v2-34f3997ae1975cd620a8514e3954fa9e_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"mqpt1HIJ\">决策边界可以表示为​ <img src=\"https://www.zhihu.com/equation?tex=w_1x_1%2Bw_2x_2%2Bb%3D0\" alt=\"w_1x_1+w_2x_2+b=0\" eeimg=\"1\"> ，假设某个样本点 <img src=\"https://www.zhihu.com/equation?tex=h_w%28x%29+%3D+w_1x_1%2Bw_2x_2%2Bb+%3E+0\" alt=\"h_w(x) = w_1x_1+w_2x_2+b &gt; 0\" eeimg=\"1\"> 那么可以判断它的类别为 1，这个过程其实是感知机。</p>\n<p data-pid=\"dOq6zX9A\">Logistic 回归还需要加一层，它要找到分类概率 P(Y=1) 与输入向量 x 的直接关系，然后通过比较概率值来判断类别。</p>\n<p data-pid=\"5CE6IFeJ\">考虑二分类问题，给定数据集</p>\n<p data-pid=\"Zer0ixH-\"><img src=\"https://www.zhihu.com/equation?tex=+D%3D%7B%28x_%7B1%7D%2C+y_%7B1%7D%29%2C%28x_%7B2%7D%2Cy_%7B2%7D%29%2C%5Ccdots%2C%28x_%7BN%7D%2C+y_%7BN%7D%29%7D%2C+x_%7Bi%7D+%5Csubseteq+R%5E%7Bn%7D%2C+y_%7Bi%7D+%5Cin+%7B0%2C1%7D%2Ci%3D1%2C2%2C%5Ccdots%2CN+++%5C%5C\" alt=\" D={(x_{1}, y_{1}),(x_{2},y_{2}),\\cdots,(x_{N}, y_{N})}, x_{i} \\subseteq R^{n}, y_{i} \\in {0,1},i=1,2,\\cdots,N   \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"3_ktAhMX\">考虑到 <img src=\"https://www.zhihu.com/equation?tex=w%5E%7BT%7Dx%2Bb\" alt=\"w^{T}x+b\" eeimg=\"1\"> 取值是连续的，因此它不能拟合离散变量。可以考虑用它来拟合条件概率 <img src=\"https://www.zhihu.com/equation?tex=p%28Y%3D1%7Cx%29\" alt=\"p(Y=1|x)\" eeimg=\"1\"> ，因为概率的取值也是连续的。</p>\n<p data-pid=\"r0ZYflQ5\">但是对于 <img src=\"https://www.zhihu.com/equation?tex=w+%5Cne+0\" alt=\"w \\ne 0\" eeimg=\"1\"> （若等于零向量则没有什么求解的价值）， <img src=\"https://www.zhihu.com/equation?tex=w%5E%7BT%7Dx%2Bb\" alt=\"w^{T}x+b\" eeimg=\"1\"> 取值为 <img src=\"https://www.zhihu.com/equation?tex=R\" alt=\"R\" eeimg=\"1\"> ，不符合概率取值为 0 到 1，因此考虑采用广义线性模型。</p>\n<p data-pid=\"kqQyC3_2\">最理想的是单位阶跃函数： </p>\n<p data-pid=\"pxecnPQE\"><img src=\"https://www.zhihu.com/equation?tex=p%28y%3D1+%7C+x%29%3D%5Cbegin%7Bcases%7D+0%2C%26+z%5Clt+0+%5C%5C+0.5%2C%26+z+%3D+0%5C%5C+1%2C%26+z%5Cgt+0%5C+%5Cend%7Bcases%7D+%2C%5Cquad+z%3Dw%5ET+x%2Bb++%5C%5C\" alt=\"p(y=1 | x)=\\begin{cases} 0,&amp; z\\lt 0 \\\\ 0.5,&amp; z = 0\\\\ 1,&amp; z\\gt 0\\ \\end{cases} ,\\quad z=w^T x+b  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"tcBZ3kUq\">但是这个阶跃函数不可微，对数几率函数是一个常用的替代函数： </p>\n<p data-pid=\"2GA0-hPK\"><img src=\"https://www.zhihu.com/equation?tex=+y+%3D+%5Cfrac%7B1%7D%7B1%2Be%5E%7B-%28w%5E%7BT%7D+x+%2B+b%29%7D%7D++%5C%5C\" alt=\" y = \\frac{1}{1+e^{-(w^{T} x + b)}}  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"0exVOVo6\">于是有： </p>\n<p data-pid=\"C4yGxpFQ\"><img src=\"https://www.zhihu.com/equation?tex=+ln+%5Cfrac%7By%7D%7B1%E2%88%92y%7D+%3D+w%5E%7BT%7Dx+%2B+b+%5C%5C\" alt=\" ln \\frac{y}{1−y} = w^{T}x + b \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"teejxPWj\">我们将 y 视为 x 为正例的概率，则 1-y 为 x 为其反例的概率。两者的比值称为<b>几率（odds）</b>，指该事件发生与不发生的概率比值，若事件发生的<b>概率</b>为 p。则对数几率：</p>\n<p data-pid=\"VN7OO19p\"><img src=\"https://www.zhihu.com/equation?tex=+ln%28odds%29+%3D+ln+%5Cfrac%7By%7D%7B1%E2%88%92y%7D++%5C%5C\" alt=\" ln(odds) = ln \\frac{y}{1−y}  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"BGmy4ifk\">将 y 视为类后验概率估计，重写公式有： </p>\n<p data-pid=\"oC6XBRfr\"><img src=\"https://www.zhihu.com/equation?tex=w%5E%7BT%7D+x+%2B+b+%3D+ln%5Cfrac%7BP%28Y%3D1%7Cx%29%7D%7B1-P%28Y%3D1%7Cx%29%7D+%5C%5C+P%28Y%3D1%7Cx%29+%3D+%5Cfrac%7B1%7D%7B1%2Be%5E%7B-%28w%5E%7BT%7D+x+%2B+b%29%7D%7D+%5C%5C\" alt=\"w^{T} x + b = ln\\frac{P(Y=1|x)}{1-P(Y=1|x)} \\\\ P(Y=1|x) = \\frac{1}{1+e^{-(w^{T} x + b)}} \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"Kn1zmFtN\">也就是说，输出 Y=1 的对数几率是由输入 x 的<b>线性函数</b>表示的模型，这就是<b>逻辑回归模型</b>。当 <img src=\"https://www.zhihu.com/equation?tex=w%5E%7BT%7Dx%2Bb\" alt=\"w^{T}x+b\" eeimg=\"1\"> 的值越接近正无穷， <img src=\"https://www.zhihu.com/equation?tex=P%28Y%3D1%7Cx%29+\" alt=\"P(Y=1|x) \" eeimg=\"1\"> 概率值也就越接近 1。因此<b>逻辑回归的思路</b>是，先拟合决策边界(不局限于线性，还可以是多项式)，再建立这个边界与分类的概率联系，从而得到了二分类情况下的概率。</p>\n<p data-pid=\"7EjRRftD\">在这我们思考个问题，我们使用对数几率的意义在哪？通过上述推导我们可以看到 Logistic 回归实际上是使用线性回归模型的预测值逼近分类任务真实标记的对数几率，其优点有：</p>\n<ol>\n<li data-pid=\"dxSNLvLs\">直接对<b>分类的概率</b>建模，无需实现假设数据分布，从而避免了假设分布不准确带来的问题（区别于生成式模型）；</li>\n<li data-pid=\"5oDP4CYw\">不仅可预测出类别，还能得到该<b>预测的概率</b>，这对一些利用概率辅助决策的任务很有用；</li>\n<li data-pid=\"516iLZKr\">对数几率函数是<b>任意阶可导的凸函数</b>，有许多数值优化算法都可以求出最优解。</li>\n</ol>\n<h3>1.3 代价函数</h3>\n<p data-pid=\"ONqLF-7x\">逻辑回归模型的数学形式确定后，剩下就是如何去求解模型中的参数。在统计学中，常常使用极大似然估计法来求解，即找到一组参数，使得在这组参数下，我们的数据的似然度（概率）最大。</p>\n<p data-pid=\"b1KWqsDS\">设： </p>\n<p data-pid=\"IGCP-MpR\"><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Baligned%7D+P%28Y%3D1%7Cx%29+%26%3D+p%28x%29+%5C%5C++P%28Y%3D0%7Cx%29+%26%3D+1-+p%28x%29+%5Cend%7Baligned%7D%5C%5C\" alt=\"\\begin{aligned} P(Y=1|x) &amp;= p(x) \\\\  P(Y=0|x) &amp;= 1- p(x) \\end{aligned}\\\\\" eeimg=\"1\"></p>\n<p data-pid=\"R_d4y_rL\">似然函数： </p>\n<p data-pid=\"WlckSfnR\"><img src=\"https://www.zhihu.com/equation?tex=L%28w%29%3D%5Cprod%5Bp%28x_%7Bi%7D%29%5D%5E%7By_%7Bi%7D%7D%5B1-p%28x_%7Bi%7D%29%5D%5E%7B1-y_%7Bi%7D%7D++%5C%5C\" alt=\"L(w)=\\prod[p(x_{i})]^{y_{i}}[1-p(x_{i})]^{1-y_{i}}  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"QXaw6g03\">为了更方便求解，我们对等式两边同取对数，写成对数似然函数： </p>\n<p data-pid=\"0tFiZAck\"><img src=\"https://www.zhihu.com/equation?tex=+%5Cbegin%7Baligned%7D+L%28w%29%26%3D%5Csum%5By_%7Bi%7Dlnp%28x_%7Bi%7D%29%2B%281-y_%7Bi%7D%29ln%281-p%28x_%7Bi%7D%29%29%5D+%5C%5C+%26%3D%5Csum%5By_%7Bi%7Dln%5Cfrac%7Bp%28x_%7Bi%7D%29%7D%7B1-p%28x_%7Bi%7D%29%7D%2Bln%281-p%28x_%7Bi%7D%29%29%5D++%5C%5C+%26%3D%5Csum%5By_%7Bi%7D%28w+%5Ccdot+x_%7Bi%7D%29+-+ln%281%2Be%5E%7Bw+%5Ccdot+x_%7Bi%7D%7D%29%5D+%5Cend%7Baligned%7D+%5C%5C\" alt=\" \\begin{aligned} L(w)&amp;=\\sum[y_{i}lnp(x_{i})+(1-y_{i})ln(1-p(x_{i}))] \\\\ &amp;=\\sum[y_{i}ln\\frac{p(x_{i})}{1-p(x_{i})}+ln(1-p(x_{i}))]  \\\\ &amp;=\\sum[y_{i}(w \\cdot x_{i}) - ln(1+e^{w \\cdot x_{i}})] \\end{aligned} \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"t0woD_SP\">在机器学习中我们有损失函数的概念，其衡量的是模型预测错误的程度。如果取整个数据集上的平均对数似然损失，我们可以得到:  </p>\n<p data-pid=\"nYdE44lQ\"><img src=\"https://www.zhihu.com/equation?tex=J%28w%29%3D-%5Cfrac%7B1%7D%7BN%7DlnL%28w%29+%5C%5C\" alt=\"J(w)=-\\frac{1}{N}lnL(w) \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"uHXENLg_\">即在逻辑回归模型中，我们<b>最大化似然函数</b>和<b>最小化损失函数</b>实际上是等价的。</p>\n<h3>1.4 求解</h3>\n<p data-pid=\"DBcKSxbI\">求解逻辑回归的方法有非常多，我们这里主要聊下梯度下降和牛顿法。优化的主要目标是找到一个方向，参数朝这个方向移动之后使得损失函数的值能够减小，这个方向往往由一阶偏导或者二阶偏导各种组合求得。逻辑回归的损失函数是：</p>\n<p data-pid=\"UUgxUCOU\"><img src=\"https://www.zhihu.com/equation?tex=J%28w%29+%3D++-%5Cfrac%7B1%7D%7Bn%7D%28%5Csum_%7Bi%3D1%7D%5En%28y_ilnp%28x_i%29%2B%281-y_i%29ln%281-p%28x_i%29%29%29+%5C%5C\" alt=\"J(w) =  -\\frac{1}{n}(\\sum_{i=1}^n(y_ilnp(x_i)+(1-y_i)ln(1-p(x_i))) \\\\\" eeimg=\"1\"></p>\n<ol><li data-pid=\"nD1_Sjmy\">随机梯度下降</li></ol>\n<p data-pid=\"-8RusKfz\">梯度下降是通过 J(w) 对 w 的一阶导数来找下降方向，并且以迭代的方式来更新参数，更新方式为 : </p>\n<p data-pid=\"VYnuulvL\"><img src=\"https://www.zhihu.com/equation?tex=+g_i+%3D+%5Cfrac%7B%5Cpartial+J%28w%29%7D+%7B%5Cpartial+w_i%7D+%3D%28p%28x_i%29-y_i%29x_i+%5C%5C+w%5E%7Bk%2B1%7D_i%3Dw%5Ek_i-%5Calpha+g_i\" alt=\" g_i = \\frac{\\partial J(w)} {\\partial w_i} =(p(x_i)-y_i)x_i \\\\ w^{k+1}_i=w^k_i-\\alpha g_i\" eeimg=\"1\"></p>\n<p data-pid=\"NI0c8SwQ\">其中 k  为迭代次数。每次更新参数后，可以通过比较 <img src=\"https://www.zhihu.com/equation?tex=+%7C%7CJ%28w%5E%7Bk%2B1%7D%29%E2%88%92J%28w%5Ek%29%7C%7C+\" alt=\" ||J(w^{k+1})−J(w^k)|| \" eeimg=\"1\"> 小于阈值或者到达最大迭代次数来停止迭代。</p>\n<p data-pid=\"Zn51dwSJ\">2. 牛顿法</p>\n<p data-pid=\"vXTCrTKD\">牛顿法的基本思路是，<b>在现有极小点估计值的附近对 f(x) 做二阶泰勒展开，进而找到极小点的下一个估计值</b>。假设 <img src=\"https://www.zhihu.com/equation?tex=w%5Ek\" alt=\"w^k\" eeimg=\"1\"> 为当前的极小值估计值，那么有： </p>\n<p data-pid=\"4kjGsV-r\"><img src=\"https://www.zhihu.com/equation?tex=+%5Cvarphi+%28w%29+%3D+J%28w%5Ek%29+%2B+J%5E%7B%27%7D%28w%5Ek%29%28w-w%5Ek%29%2B%5Cfrac%7B1%7D%7B2%7DJ%5E%7B%22%7D%28w%5Ek%29%28w-w%5Ek%29%5E2++%5C%5C\" alt=\" \\varphi (w) = J(w^k) + J^{'}(w^k)(w-w^k)+\\frac{1}{2}J^{&quot;}(w^k)(w-w^k)^2  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"mW317a2d\">然后令 <img src=\"https://www.zhihu.com/equation?tex=%CF%86%5E%7B%27%7D%28w%29%3D0\" alt=\"φ^{'}(w)=0\" eeimg=\"1\"> ，得到了 <img src=\"https://www.zhihu.com/equation?tex=+w%5E%7Bk%2B1%7D%3Dw%5E%7Bk%7D%E2%88%92%5Cfrac%7BJ%5E%7B%27%7D%28w%5Ek%29%7D%7BJ%5E%7B%22%7D%28w%5Ek%29%7D\" alt=\" w^{k+1}=w^{k}−\\frac{J^{'}(w^k)}{J^{&quot;}(w^k)}\" eeimg=\"1\"> 。因此有迭代更新式： </p>\n<p data-pid=\"qNfb6t_f\"><img src=\"https://www.zhihu.com/equation?tex=w%5E%7Bk%2B1%7D+%3D+w%5E%7Bk%7D+-+%5Cfrac%7BJ%5E%7B%27%7D%28w%5E%7Bk%7D%29%7D%7BJ%5E%7B%22%7D%28w%5E%7Bk%7D%29%7D+%3D+w%5E%7Bk%7D+-+H_%7Bk%7D%5E%7B-1%7D%5Ccdot+g_%7Bk%7D+%5C%5C\" alt=\"w^{k+1} = w^{k} - \\frac{J^{'}(w^{k})}{J^{&quot;}(w^{k})} = w^{k} - H_{k}^{-1}\\cdot g_{k} \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"ITGuriJ7\">其中 <img src=\"https://www.zhihu.com/equation?tex=H_%7Bk%7D%5E%7B-1%7D\" alt=\"H_{k}^{-1}\" eeimg=\"1\"> 为海森矩阵： </p>\n<p data-pid=\"ANqa3Jds\"><img src=\"https://www.zhihu.com/equation?tex=H_%7Bmn%7D+%3D+%5Cfrac+%7B%5Cpartial%5E2+J%28w%29%7D+%7B%5Cpartial+w_%7Bm%7D+%5Cpartial+w_%7Bn%7D%7D+%3Dh_%7Bw%7D%28x%5E%7B%28i%29%7D%29%281-p_%7Bw%7D%28x%5E%7B%28i%29%7D%29%29x%5E%7B%28i%29%7D_mx%5E%7B%28i%29%7D_n++%5C%5C\" alt=\"H_{mn} = \\frac {\\partial^2 J(w)} {\\partial w_{m} \\partial w_{n}} =h_{w}(x^{(i)})(1-p_{w}(x^{(i)}))x^{(i)}_mx^{(i)}_n  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"2Gnv3TiF\">此外，这个方法需要目标函数是二阶连续可微的，本文中的 J(w) 是符合要求的。</p>\n<h3>1.5 正则化</h3>\n<p data-pid=\"ZYCWad6s\">正则化是一个通用的算法和思想，所以会产生过拟合现象的算法都可以使用正则化来避免过拟合。</p>\n<p data-pid=\"pvRikqmo\">在经验风险最小化的基础上（也就是训练误差最小化），尽可能采用简单的模型，可以有效提高泛化预测精度。如果模型过于复杂，变量值稍微有点变动，就会引起预测精度问题。正则化之所以有效，就是因为其降低了特征的权重，使得模型更为简单。</p>\n<p data-pid=\"ddeVckpS\">正则化一般会采用 L1 范式或者 L2 范式，其形式分别为 <img src=\"https://www.zhihu.com/equation?tex=%CE%A6%28w%29%3D%7C%7Cx%7C%7C_1\" alt=\"Φ(w)=||x||_1\" eeimg=\"1\"> 和 <img src=\"https://www.zhihu.com/equation?tex=%CE%A6%28w%29%3D%7C%7Cx%7C%7C_2+\" alt=\"Φ(w)=||x||_2 \" eeimg=\"1\"> 。</p>\n<ol><li data-pid=\"HqaryVp0\">L1 正则化</li></ol>\n<p data-pid=\"dFZkxqe3\">LASSO 回归，相当于为模型添加了这样一个先验知识：w 服从零均值拉普拉斯分布。  首先看看拉普拉斯分布长什么样子： </p>\n<p data-pid=\"6Jg8lC8V\"><img src=\"https://www.zhihu.com/equation?tex=f%28w%7C%5Cmu%2Cb%29%3D%5Cfrac%7B1%7D%7B2b%7D%5Cexp+%5Cleft+%28+-%5Cfrac%7B%7Cw-%5Cmu%7C%7D%7Bb%7D%5Cright+%29%5C%5C\" alt=\"f(w|\\mu,b)=\\frac{1}{2b}\\exp \\left ( -\\frac{|w-\\mu|}{b}\\right )\\\\\" eeimg=\"1\"></p>\n<p data-pid=\"DoVxZGr-\">由于引入了先验知识，所以似然函数这样写：  </p>\n<p data-pid=\"Hsiha621\"><img src=\"https://www.zhihu.com/equation?tex=+%5Cbegin%7Baligned%7D+L%28w%29%26%3DP%28y%7Cw%2Cx%29P%28w%29%5C%5C+%26%3D%5Cprod_%7Bi%3D1%7D%5ENp%28x_i%29%5E%7By_i%7D%281-p%28x_i%29%29%5E%7B1-y_i%7D%5Cprod_%7Bj%3D1%7D%5Ed+%5Cfrac%7B1%7D%7B2b%7D%5Cexp+%5Cleft+%28%7B-%5Cfrac%7B%7Cw_j%7C%7D%7Bb%7D%7D+%5Cright+%29+%5Cend%7Baligned%7D++%5C%5C\" alt=\" \\begin{aligned} L(w)&amp;=P(y|w,x)P(w)\\\\ &amp;=\\prod_{i=1}^Np(x_i)^{y_i}(1-p(x_i))^{1-y_i}\\prod_{j=1}^d \\frac{1}{2b}\\exp \\left ({-\\frac{|w_j|}{b}} \\right ) \\end{aligned}  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"3UEh1gtk\"> 取 log 再取负，得到目标函数：</p>\n<p data-pid=\"yxB1TpzC\"><img src=\"https://www.zhihu.com/equation?tex=-%5Cln+L%28w%29%3D-%5Csum_i+%5By_i%5Cln+p%28x_i%29%2B%281-y_i%29ln%281-p%28x_i%29%29%5D%2B%5Cfrac%7B1%7D%7B2b%5E2%7D%5Csum_j%7Cw_j%7C++%5C%5C\" alt=\"-\\ln L(w)=-\\sum_i [y_i\\ln p(x_i)+(1-y_i)ln(1-p(x_i))]+\\frac{1}{2b^2}\\sum_j|w_j|  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"bAn_2Gqq\">等价于原始损失函数的后面加上了 L1 正则，因此 L1 正则的本质其实是为模型增加了“<b>模型参数服从零均值拉普拉斯分布</b>”这一先验知识。</p>\n<p data-pid=\"9f7z5zRG\">2. L2 正则化</p>\n<p data-pid=\"d2j1vx37\">Ridge 回归，相当于为模型添加了这样一个先验知识：w 服从零均值正态分布。 </p>\n<p data-pid=\"E52CLV8U\">首先看看正态分布长什么样子： </p>\n<p data-pid=\"2sEnKzZI\"><img src=\"https://www.zhihu.com/equation?tex=f%28w%7C%5Cmu%2C%5Csigma%29%3D%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%5Csigma%7D%5Cexp+%5Cleft+%28+-%5Cfrac%7B%28w-%5Cmu%29%5E2%7D%7B2%5Csigma%5E2%7D%5Cright+%29++%5C%5C\" alt=\"f(w|\\mu,\\sigma)=\\frac{1}{\\sqrt{2\\pi}\\sigma}\\exp \\left ( -\\frac{(w-\\mu)^2}{2\\sigma^2}\\right )  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"gCDJBmJ_\">由于引入了先验知识，所以似然函数这样写：</p>\n<p data-pid=\"6UQE9x5n\"><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Baligned%7D+L%28w%29%26%3DP%28y%7Cw%2Cx%29P%28w%29%5C%5C+%26%3D%5Cprod_%7Bi%3D1%7D%5ENp%28x_i%29%5E%7By_i%7D%281-p%28x_i%29%29%5E%7B1-y_i%7D%5Cprod_%7Bj%3D1%7D%5Ed+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%5Csigma%7D%5Cexp+%5Cleft+%28%7B-%5Cfrac%7Bw_j%5E2%7D%7B2%5Csigma%5E2%7D%7D+%5Cright+%29%5C%5C+%26%3D%5Cprod_%7Bi%3D1%7D%5ENp%28x_i%29%5E%7By_i%7D%281-p%28x_i%29%29%5E%7B1-y_i%7D+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%5Csigma%7D%5Cexp+%5Cleft+%28%7B-%5Cfrac%7Bw%5ETw%7D%7B2%5Csigma%5E2%7D%7D+%5Cright+%29+%5Cend%7Baligned%7D+%5C%5C\" alt=\"\\begin{aligned} L(w)&amp;=P(y|w,x)P(w)\\\\ &amp;=\\prod_{i=1}^Np(x_i)^{y_i}(1-p(x_i))^{1-y_i}\\prod_{j=1}^d \\frac{1}{\\sqrt{2\\pi}\\sigma}\\exp \\left ({-\\frac{w_j^2}{2\\sigma^2}} \\right )\\\\ &amp;=\\prod_{i=1}^Np(x_i)^{y_i}(1-p(x_i))^{1-y_i} \\frac{1}{\\sqrt{2\\pi}\\sigma}\\exp \\left ({-\\frac{w^Tw}{2\\sigma^2}} \\right ) \\end{aligned} \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"RbTEomTb\">取 ln 再取负，得到目标函数：</p>\n<p data-pid=\"3fj8RR0r\"><img src=\"https://www.zhihu.com/equation?tex=-%5Cln+L%28w%29%3D-%5Csum_i+%5By_i%5Cln+p%28x_i%29%2B%281-y_i%29ln%281-p%28x_i%29%29%5D%2B%5Cfrac%7B1%7D%7B2%5Csigma%5E2%7Dw%5ETw+%5C%5C\" alt=\"-\\ln L(w)=-\\sum_i [y_i\\ln p(x_i)+(1-y_i)ln(1-p(x_i))]+\\frac{1}{2\\sigma^2}w^Tw \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"JCruFCU5\">等价于原始的损失函数后面加上了 L2 正则，因此 L2 正则的本质其实是为模型增加了“<b>模型参数服从零均值正态分布</b>”这一先验知识。</p>\n<p data-pid=\"upIgJhBp\">3. L1 和 L2 的区别</p>\n<p data-pid=\"6eYacNO4\">从上面的分析中我们可以看到，L1 正则化增加了所有权重 w 参数的绝对值之和逼迫更多 w 为零，也就是变稀疏（ L2 因为其导数也趋 0, 奔向零的速度不如 L1 给力了）。我们对稀疏规则趋之若鹜的一个关键原因在于它能<b>实现特征的自动选择</b>。一般来说，大部分特征 x_i 都是和最终的输出 y_i 没有关系或者不提供任何信息的。在最小化目标函数的时候考虑 x_i 这些额外的特征，虽然可以获得更小的训练误差，但在预测新的样本时，这些没用的特征权重反而会被考虑，从而干扰了对正确 y_i 的预测。L1 正则化的引入就是为了完成特征自动选择的光荣使命，它会学习地去掉这些无用的特征，也就是把这些特征对应的权重置为 0。</p>\n<p data-pid=\"X7-hmAd8\">L2 正则化中增加所有权重 w 参数的平方之和，逼迫所有 w 尽可能趋向零但不为零（L2 的导数趋于零）。因为在未加入 L2 正则化发生过拟合时，拟合函数需要顾忌每一个点，最终形成的拟合函数波动很大，在某些很小的区间里，函数值的变化很剧烈，也就是某些 w 值非常大。为此，L2 正则化的加入就惩罚了权重变大的趋势。</p>\n<p data-pid=\"OJk8Yk-a\">我们以二维样本为例，图解阐述加入 L1 正则化和 L2 正则化之后目标函数求解时发生的变化。</p>\n<ul><li data-pid=\"aL9Y_Hb3\">原函数曲线等高线（同颜色曲线上，每一组 <img src=\"https://www.zhihu.com/equation?tex=w_1%2Cw_2\" alt=\"w_1,w_2\" eeimg=\"1\"> 带入后值都相同)</li></ul>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-896a01ead6aee864250941a64e7931e4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"498\" data-rawheight=\"456\" class=\"origin_image zh-lightbox-thumb\" width=\"498\" data-original=\"https://pic1.zhimg.com/v2-896a01ead6aee864250941a64e7931e4_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"G2QZ1SI4\">那现在我们看下加了 L1 正则化和 L2 正则化之后，目标函数求解的时候，最终解会有什么变化。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-91986c70dab4d152339ea085321c6f3f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"365\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-91986c70dab4d152339ea085321c6f3f_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"nn2VCjJl\">从上边两幅图中我们可以看出：</p>\n<ul>\n<li data-pid=\"pA9LAkyF\">如果不加 L1 和 L2 正则化的时候，对于线性回归这种目标函数凸函数的话，我们最终的结果就是最里边的紫色的小圈圈等高线上的点。</li>\n<li data-pid=\"6ou3rZm8\">当加入 L1 正则化的时候，我们先画出 <img src=\"https://www.zhihu.com/equation?tex=%7Cw_1%7C%2B%7Cw_2%7C%3DF+\" alt=\"|w_1|+|w_2|=F \" eeimg=\"1\"> 的图像，也就是一个菱形，代表这些曲线上的点算出来的 <img src=\"https://www.zhihu.com/equation?tex=L_1\" alt=\"L_1\" eeimg=\"1\"> 范数 <img src=\"https://www.zhihu.com/equation?tex=%7Cw_1%7C%2B%7Cw_2%7C+\" alt=\"|w_1|+|w_2| \" eeimg=\"1\"> 都为 F。那我们现在的目标是不仅是原曲线算的值要小（越来越接近中心的紫色圈圈），还要使得这个菱形越小越好（F 越小越好）。那么还和原来一样的话，过中心紫色圈圈的那个菱形明显很大，因此我们要取到一个恰好的值。那么如何求值呢？</li>\n</ul>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-efc752bd6d1ce09dbf2e18b9766570eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"443\" data-rawheight=\"421\" class=\"origin_image zh-lightbox-thumb\" width=\"443\" data-original=\"https://pic4.zhimg.com/v2-efc752bd6d1ce09dbf2e18b9766570eb_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<ol>\n<li data-pid=\"gjJCab4j\">以同一条原曲线目标等高线来说，现在以最外圈的红色等高线为例，我们看到，对于红色曲线上的每个点都可做一个菱形，根据上图可知，当这个菱形与某条等高线相切（仅有一个交点）的时候，这个菱形最小，上图相割对比较大的两个菱形对应的 L1 范数更大。用公式说这个时候能使得在相同的 <img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B1%7D%7BN%7D++%5Csum_%7Bi+%3D+1%7D%5EN%7B%28y_i+-w%5ET+x_i%29%5E2+%7D\" alt=\"\\frac{1}{N}  \\sum_{i = 1}^N{(y_i -w^T x_i)^2 }\" eeimg=\"1\"> ，由于相切的时候的  <img src=\"https://www.zhihu.com/equation?tex=C%7C%7Cw%7C%7C_%7B1%7D+\" alt=\"C||w||_{1} \" eeimg=\"1\"> 小，即 <img src=\"https://www.zhihu.com/equation?tex=%7Cw_1%7C%2B%7Cw_2%7C\" alt=\"|w_1|+|w_2|\" eeimg=\"1\">所以能够使得<img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B1%7D%7BN%7D++%5Csum%7Bi+%3D+1%7D%5EN%7B%28y_i+-w%5ET+x_i%29%5E2+%7D%2B+C%7C%7Cw%7C%7C_%7B1%7D\" alt=\"\\frac{1}{N}  \\sum{i = 1}^N{(y_i -w^T x_i)^2 }+ C||w||_{1}\" eeimg=\"1\"> 更小；</li>\n<li data-pid=\"9fFXzBXU\">有了第一条的说明我们可以看出，最终加入 L1 范数得到的解一定是某个菱形和某条原函数等高线的切点。现在有个比较重要的结论来了，<b>我们经过观察可以看到，几乎对于很多原函数等高曲线，和某个菱形相交的时候及其容易相交在坐标轴（比如上图），也就是说最终的结果，解的某些维度及其容易是 0，比如上图最终解是</b> <img src=\"https://www.zhihu.com/equation?tex=w%3D%280%2Cx%29\" alt=\"w=(0,x)\" eeimg=\"1\"><b>，这也就是我们所说的 L1 更容易得到稀疏解（解向量中 0 比较多）的原因；</b>\n</li>\n<li data-pid=\"BC7wflFB\">当然光看着图说，L1 的菱形更容易和等高线相交在坐标轴一点都没说服力，只是个感性的认识，我们接下来从更严谨的方式来证明，简而言之就是假设现在我们是一维的情况下 <img src=\"https://www.zhihu.com/equation?tex=h%28w%29+%3D+f%28w%29+%2B+C%7Cw%7C\" alt=\"h(w) = f(w) + C|w|\" eeimg=\"1\"> ，其中 h(w) 是目标函数， <img src=\"https://www.zhihu.com/equation?tex=f%28w%29+\" alt=\"f(w) \" eeimg=\"1\">  是没加 L1 正则化项前的目标函数， <img src=\"https://www.zhihu.com/equation?tex=C%7Cw%7C\" alt=\"C|w|\" eeimg=\"1\"> 是 L1 正则项，要使得 0 点成为最值可能的点，虽然在 0 点不可导，但是我们只需要让 0 点左右的导数异号，即 <img src=\"https://www.zhihu.com/equation?tex=h_%7Bl%7D%5E%7B%27%7D%280%29++h_%7Br%7D%5E%7B%27%7D%280%29+%3D+%28f%5E%7B%27%7D%280%29+%2B+C%29%28f%5E%7B%27%7D%280%29+-+C%29+%3C+0+\" alt=\"h_{l}^{'}(0)  h_{r}^{'}(0) = (f^{'}(0) + C)(f^{'}(0) - C) &lt; 0 \" eeimg=\"1\">  即可也就是 <img src=\"https://www.zhihu.com/equation?tex=+C+%3E%7Cf%5E%7B%27%7D%280%29%7C\" alt=\" C &gt;|f^{'}(0)|\" eeimg=\"1\"> 的情况下，0 点都是可能的最值点。</li>\n</ol>\n<p data-pid=\"FwSdEIto\">当加入 L2 正则化的时候，分析和 L1 正则化是类似的，也就是说我们仅仅是从菱形变成了圆形而已，同样还是求原曲线和圆形的切点作为最终解。当然与 L1 范数比，我们这样求的 L2 范数的<b>从图上来看，不容易交在坐标轴上，但是仍然比较靠近坐标轴。因此这也就是我们老说的，L2 范数能让解比较小（靠近 0），但是比较平滑（不等于 0）。</b></p>\n<p data-pid=\"ng8PU40R\">综上所述，我们可以看见，加入正则化项，在最小化经验误差的情况下，可以让我们选择解更简单（趋向于 0）的解。</p>\n<p data-pid=\"yvxKkrGH\">结构风险最小化：在经验风险最小化的基础上（也就是训练误差最小化），尽可能采用简单的模型，以此提高泛化预测精度。</p>\n<p data-pid=\"0eidtdka\"><b>因此，加正则化项就是结构风险最小化的一种实现。</b></p>\n<p data-pid=\"EAHbpwNn\"><b>正则化之所以能够降低过拟合的原因在于，正则化是结构风险最小化的一种策略实现。</b></p>\n<p data-pid=\"SIy8995z\"><b>简单总结下</b>：</p>\n<p data-pid=\"azj38piO\">给 loss function 加上正则化项，能使新得到的优化目标函数 <img src=\"https://www.zhihu.com/equation?tex=h+%3D+f%2B%7C%7Cw%7C%7C+\" alt=\"h = f+||w|| \" eeimg=\"1\"> ，需要在 f 和 ||w|| 中做一个权衡，如果还像原来只优化 f 的情况下，那可能得到一组解比较复杂，使得正则项 ||w|| 比较大，那么 h 就不是最优的，因此可以看出加正则项能让解更加简单，符合奥卡姆剃刀理论，同时也比较符合在偏差和方差（方差表示模型的复杂度）分析中，通过降低模型复杂度，得到更小的泛化误差，降低过拟合程度。</p>\n<p data-pid=\"ienxl4SH\">L1 正则化就是在 loss function 后边所加正则项为 L1 范数，加上 L1 范数容易得到稀疏解（0 比较多）。L2 正则化就是 loss function 后边所加正则项为 L2 范数的平方，加上 L2 正则相比于 L1 正则来说，得到的解比较平滑（不是稀疏），但是同样能够保证解中接近于 0（但不是等于 0，所以相对平滑）的维度比较多，降低模型的复杂度。</p>\n<h3>1.6 并行化</h3>\n<p data-pid=\"YGEsutNQ\">从逻辑回归的求解方法中我们可以看到，无论是随机梯度下降还是牛顿法，或者是没有提到的拟牛顿法，都是需要计算梯度的，因此逻辑回归的并行化最主要的就是对目标函数梯度计算的并行化。</p>\n<p data-pid=\"_1mmw_fn\">我们看到目标函数的梯度向量计算中只需要进行向量间的点乘和相加，可以很容易将每个迭代过程拆分成相互独立的计算步骤，由不同的节点进行独立计算，然后归并计算结果。</p>\n<p data-pid=\"PvjZ-UqK\">下图是一个标签和样本矩阵，行为特征向量，列为特征维度。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9c5aea83687172eb7d4756397bc2669e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"231\" data-rawheight=\"165\" class=\"content_image\" width=\"231\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"TG3878aT\">样本矩阵按行划分，将样本特征向量分布到不同的计算节点，由各计算节点完成自己所负责样本的点乘与求和计算，然后将计算结果进行归并，则实现了按行并行的 LR。按行并行的 LR 解决了样本数量的问题，但是实际情况中会存在针对高维特征向量进行逻辑回归的场景，仅仅按行进行并行处理，无法满足这类场景的需求，因此还需要按列将高维的特征向量拆分成若干小的向量进行求解。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-649613856d724587cfe627ef1870a826_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1041\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb\" width=\"1041\" data-original=\"https://pic3.zhimg.com/v2-649613856d724587cfe627ef1870a826_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"XLOrIVae\">并行计算总共会被分为两个并行化计算步骤和两个结果归并步骤：</p>\n<p data-pid=\"WVAZ9GXp\"><b>步骤一：</b>各节点并行计算点乘，计算 <img src=\"https://www.zhihu.com/equation?tex=d_%7B%28r%2Cc%29%2Ck%2Ct%7D+%3D+W%5ET_%7Bc%2Ct%7DX_%7B%28r%2Cc%29%2Ck%7D+\" alt=\"d_{(r,c),k,t} = W^T_{c,t}X_{(r,c),k} \" eeimg=\"1\"> ，其中 <img src=\"https://www.zhihu.com/equation?tex=+k%3D1%2C2%E2%80%A6M%2Fm\" alt=\" k=1,2…M/m\" eeimg=\"1\"> ， <img src=\"https://www.zhihu.com/equation?tex=d_%7B%28r%2Cc%29%2Ck%2Ct%7D\" alt=\"d_{(r,c),k,t}\" eeimg=\"1\"> 表示第 t 次迭代中节点 <img src=\"https://www.zhihu.com/equation?tex=%28r%2Cc%29\" alt=\"(r,c)\" eeimg=\"1\"> 上的第 k 个特征向量与特征权重分量的点乘， <img src=\"https://www.zhihu.com/equation?tex=W_%7Bc%2Ct%7D\" alt=\"W_{c,t}\" eeimg=\"1\"> 为第 t 次迭代中特征权重向量在第 c 列节点上的分量； <b>步骤二：</b>对行号相同的节点归并点乘结果： </p>\n<p data-pid=\"lY4chqsC\"><img src=\"https://www.zhihu.com/equation?tex=d_%7Br%2Ck%2Ct%7D%3DW%5ET_t+X_%7Br%2Ck%7D%3D%5Csum_%7Bc%3D1%7D%5En+d_%7B%28r%2Cc%29%2Ck%2Ct%7D%3D%5Csum_%7Bc%3D1%7D%5En+W_%7Bc%2Ct%7D%5ETX_%7B%28r%2Cc%29%2Ck%7D++%5C%5C\" alt=\"d_{r,k,t}=W^T_t X_{r,k}=\\sum_{c=1}^n d_{(r,c),k,t}=\\sum_{c=1}^n W_{c,t}^TX_{(r,c),k}  \\\\\" eeimg=\"1\"></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6b5f725a2893d4fa28a2ddb17db4c756_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"531\" data-rawheight=\"195\" class=\"origin_image zh-lightbox-thumb\" width=\"531\" data-original=\"https://pic3.zhimg.com/v2-6b5f725a2893d4fa28a2ddb17db4c756_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"BCMzPlVh\"><b>步骤三：</b>各节点独立算标量与特征向量相乘： </p>\n<p data-pid=\"UdQJKs6G\"><img src=\"https://www.zhihu.com/equation?tex=G_%7B%28r%2Cc%29%2Ct%7D%3D%5Csum_%7Bk%3D1%7D%5E%7BM%2Fm%7D%5B%5Csigma%28y_%7Br%2Ck%7Dd_%7Br%2Ck%2Ct%7D%29-1%5Dy_%7Br%2Ck%7DX_%7B%28r%2Cc%29%2Ck%7D++%5C%5C\" alt=\"G_{(r,c),t}=\\sum_{k=1}^{M/m}[\\sigma(y_{r,k}d_{r,k,t})-1]y_{r,k}X_{(r,c),k}  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"dpXui3JZ\"><img src=\"https://www.zhihu.com/equation?tex=+G_%7B%28r%2Cc%29%2Ct%7D\" alt=\" G_{(r,c),t}\" eeimg=\"1\"> 可以理解为由第 r 行节点上部分样本计算出的目标函数梯度向量在第 c 列节点上的分量。</p>\n<p data-pid=\"jF7-IMMW\"><b>步骤四：</b>对列号相同的节点进行归并： </p>\n<p data-pid=\"CuZJBb54\"><img src=\"https://www.zhihu.com/equation?tex=G_%7Bc%2Ct%7D%3D%5Csum_%7Br%3D1%7D%5Em+G_%7B%28r%2Cc%29%2Ct%7D++%5C%5C\" alt=\"G_{c,t}=\\sum_{r=1}^m G_{(r,c),t}  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"oVy3rpR2\"><img src=\"https://www.zhihu.com/equation?tex=G_%7Bc%2Ct%7D\" alt=\"G_{c,t}\" eeimg=\"1\"> 就是目标函数的梯度向量 <img src=\"https://www.zhihu.com/equation?tex=G_t+\" alt=\"G_t \" eeimg=\"1\"> 在第 c 列节点上的分量，对其进行归并得到目标函数的梯度向量： </p>\n<p data-pid=\"tdN6APHg\"><img src=\"https://www.zhihu.com/equation?tex=G_t%3D%3CG_%7B1%2Ct%7D%2C...%2CG_%7Bc%2Ct%7D...G_%7Bn%2Ct%7D%3E+%5C%5C\" alt=\"G_t=&lt;G_{1,t},...,G_{c,t}...G_{n,t}&gt; \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"HBJ6RWuz\">这个过程如下图所示：</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a7cc0b79e62018e1a62dfcab5435e8f4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"384\" data-rawheight=\"273\" class=\"content_image\" width=\"384\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"s6MxycUE\">所以并行计算 LR 的流程如下所示。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d93c4826068dbca6030cb7ca895102a0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"691\" data-rawheight=\"538\" class=\"origin_image zh-lightbox-thumb\" width=\"691\" data-original=\"https://pic1.zhimg.com/v2-d93c4826068dbca6030cb7ca895102a0_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"5qP9p0fm\">所以并行 LR 实际上就是在求解损失函数最优解的过程中，针对寻找损失函数下降方向中的梯度方向计算作了并行化处理，而在利用梯度确定下降方向的过程中也可以采用并行化。</p>\n<h2>2. 与其他模型的对比</h2>\n<h3>2.1 与线性回归</h3>\n<p data-pid=\"FT4LEyp8\">逻辑回归是在线性回归的基础上加了一个 Sigmoid 函数（非线形）映射，使得逻辑回归称为了一个优秀的分类算法。本质上来说，两者都属于广义线性模型，但他们两个要解决的问题不一样，逻辑回归解决的是分类问题，输出的是离散值，线性回归解决的是回归问题，输出的连续值。</p>\n<p data-pid=\"2K3c-xIT\">我们需要明确 Sigmoid 函数到底起了什么作用：</p>\n<ul>\n<li data-pid=\"pDLCxqi5\">线性回归是在实数域范围内进行预测，而分类范围则需要在 [0,1]，逻辑回归减少了预测范围；</li>\n<li data-pid=\"wQ3qc9BN\">线性回归在实数域上敏感度一致，而逻辑回归在 0 附近敏感，在远离 0 点位置不敏感，这个的好处就是模型更加关注分类边界，可以增加模型的鲁棒性。</li>\n</ul>\n<h3>2.2 与最大熵模型</h3>\n<p data-pid=\"YEEEYz4O\">逻辑回归和最大熵模型本质上没有区别，最大熵在解决二分类问题时就是逻辑回归，在解决多分类问题时就是多项逻辑回归。</p>\n<p data-pid=\"Lwdd6-3U\">首先进行符号定义：</p>\n<ol>\n<li data-pid=\"ZmXTh7S-\">\n<img src=\"https://www.zhihu.com/equation?tex=%5Cpi+%28x%29_u\" alt=\"\\pi (x)_u\" eeimg=\"1\"> 表示，输入时 x，输出的 y=u 的概率；</li>\n<li data-pid=\"VBL2nP2r\">A(u,v) 是一个指示函数，若 u=v，则 A(u,v)=1，否则 A(u,v)=0；</li>\n<li data-pid=\"p3XOSIQ0\">我们的目标就是从训练数据中，学习得到一个模型，使得 <img src=\"https://www.zhihu.com/equation?tex=+%5Cpi%28x%29_u\" alt=\" \\pi(x)_u\" eeimg=\"1\"> 最大化，也就是输入 x，预测结果是 y 的概率最大，也就是使得 <img src=\"https://www.zhihu.com/equation?tex=+%5Cpi%28x%29_y\" alt=\" \\pi(x)_y\" eeimg=\"1\"> 最大。</li>\n</ol>\n<p data-pid=\"8Mheb_iv\">对于逻辑回归而言： </p>\n<p data-pid=\"3aZLmh8h\"><img src=\"https://www.zhihu.com/equation?tex=P%28Y%3D1%7Cx%29+%3D+%5Cpi%28x%29_1+%3D%5Cdfrac%7Be%5E%7Bw+%5Ccdot+x%7D%7D%7B1%2Be%5E%7Bw+%5Ccdot+x%7D%7D+%5C%5C+++P%28Y%3D0%7Cx%29+%3D+%5Cpi%28x%29_0+%3D+1-%5Cpi%28x%29_1+%5C%5C\" alt=\"P(Y=1|x) = \\pi(x)_1 =\\dfrac{e^{w \\cdot x}}{1+e^{w \\cdot x}} \\\\   P(Y=0|x) = \\pi(x)_0 = 1-\\pi(x)_1 \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"_s5qIkOM\">我们这里可以用更泛化的形式来表示 π()： </p>\n<p data-pid=\"c8bCYcqQ\"><img src=\"https://www.zhihu.com/equation?tex=+%5Cpi%28x%29_v%3D%5Cdfrac%7Be%5E%7Bw_v+%5Ccdot+x%7D%7D%7B%5Csum_%7Bu%3D1%7D%5Ek+e%5E%7Bw_u+%5Ccdot+x%7D%7D++%5C%5C\" alt=\" \\pi(x)_v=\\dfrac{e^{w_v \\cdot x}}{\\sum_{u=1}^k e^{w_u \\cdot x}}  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"2LHqHpNW\"> 回到我们的目标：令 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi%28x_i%29y_i\" alt=\"\\pi(x_i)y_i\" eeimg=\"1\"> 最大，可以用极大似然估计的方法来求解。</p>\n<p data-pid=\"cVJ-42rF\"><img src=\"https://www.zhihu.com/equation?tex=L%28w%29%3D%5Cprod_%7Bi%3D1%7D%5En+%5Cpi%28x_i%29%7By_i%7D+%5C%5C+lnL%28w%29%3D%5Csum_%7Bi%3D1%7D%5En+ln%28%5Cpi%28x_i%29%7By_i%7D%29++%5C%5C\" alt=\"L(w)=\\prod_{i=1}^n \\pi(x_i){y_i} \\\\ lnL(w)=\\sum_{i=1}^n ln(\\pi(x_i){y_i})  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"GFJBmEhf\">然后我们求偏导：</p>\n<p data-pid=\"Dt--JNak\"><img src=\"https://www.zhihu.com/equation?tex=+%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial+w_%7Bu%2Cj%7D%7DlnL%28w%29%3D...%3D%5Csum_%7Bi%3D1%2C%5C%3By_i%3Du%7D%5Enx_%7Bij%7D-%5Csum_%7Bi%3D1%7D%5Enx_%7Bij%7D%5Cpi%28x_i%29_u++%5C%5C\" alt=\" \\frac{\\partial}{\\partial w_{u,j}}lnL(w)=...=\\sum_{i=1,\\;y_i=u}^nx_{ij}-\\sum_{i=1}^nx_{ij}\\pi(x_i)_u  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"wAgaxzpl\">另偏导数为 0： </p>\n<p data-pid=\"WbqLlaxW\"><img src=\"https://www.zhihu.com/equation?tex=%5Csum_%7Bi%3D1%7D%5Enx_%7Bij%7D%5Cpi%28x_i%29_u%3D%5Csum_%7Bi%3D1%2C%5C%3By_i%3Du%7D%5Enx_%7Bij%7D%2C+%28for%5C%3Ball%5C%3B+u%2Cj%29++%5C%5C+\" alt=\"\\sum_{i=1}^nx_{ij}\\pi(x_i)_u=\\sum_{i=1,\\;y_i=u}^nx_{ij}, (for\\;all\\; u,j)  \\\\ \" eeimg=\"1\"></p>\n<p data-pid=\"YpCUbF1W\">使用 <img src=\"https://www.zhihu.com/equation?tex=A%28u%2Cy_i%29+\" alt=\"A(u,y_i) \" eeimg=\"1\"> 这个函数，我们可以重写等式： </p>\n<p data-pid=\"0tvrcBOQ\"><img src=\"https://www.zhihu.com/equation?tex=%5Csum_%7Bi%3D1%7D%5Enx_%7Bij%7D%5Cpi%28x_i%29_u%3D%5Csum_%7Bi%3D1%7D%5En+A%28u%2Cy_i%29x_%7Bij%7D%2C+%28for%5C%3Ball%5C%3B+u%2Cj%29++%5C%5C\" alt=\"\\sum_{i=1}^nx_{ij}\\pi(x_i)_u=\\sum_{i=1}^n A(u,y_i)x_{ij}, (for\\;all\\; u,j)  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"t4qWO1S8\">想要证明逻辑回归跟最大熵模型是等价的，那么，只要能够证明它们的 <img src=\"https://www.zhihu.com/equation?tex=+%5Cpi+%28%29+\" alt=\" \\pi () \" eeimg=\"1\"> 是相同，结论自然就出来了。现在，我们不知道最大熵模型的 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi+%28%29\" alt=\"\\pi ()\" eeimg=\"1\"> ，但是我们知道下面的一些性质： </p>\n<p data-pid=\"QtlhJz-E\"><img src=\"https://www.zhihu.com/equation?tex=+%5Cpi%28x%29_v%5Cgeq0+%5Cquad+always++%5C%5C+%5Csum_%7Bv%3D1%7D%5Ek%5Cpi%28x%29_v+%3D+1+%5Cquad+always+%5C%5C+%5Csum_%7Bi%3D1%7D%5Enx_%7Bij%7D%5Cpi%28x_i%29_u%3D%5Csum_%7Bi%3D1%7D%5En+A%28u%2Cy_i%29x_%7Bij%7D%2C+%5Cquad%28for%5C%3Ball%5C%3B+u%2Cj%29+%5C%5C\" alt=\" \\pi(x)_v\\geq0 \\quad always  \\\\ \\sum_{v=1}^k\\pi(x)_v = 1 \\quad always \\\\ \\sum_{i=1}^nx_{ij}\\pi(x_i)_u=\\sum_{i=1}^n A(u,y_i)x_{ij}, \\quad(for\\;all\\; u,j) \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"EeV57KCl\">利用信息论，我们可以得到 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi+%28%29\" alt=\"\\pi ()\" eeimg=\"1\"> 的<b>熵</b>，定义如下： </p>\n<p data-pid=\"sDeEafy6\"><img src=\"https://www.zhihu.com/equation?tex=-%5Csum_%7Bv%3D1%7D%5Ek%5Csum_%7Bi%3D1%7D%5En%5Cpi%28x_i%29vlog%5B%5Cpi%28x_i%29_v%5D++%5C%5C\" alt=\"-\\sum_{v=1}^k\\sum_{i=1}^n\\pi(x_i)vlog[\\pi(x_i)_v]  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"S5prhlsv\">现在，我们有了<b>目标</b>： <img src=\"https://www.zhihu.com/equation?tex=%5Csum+%5Cpi%28%29\" alt=\"\\sum \\pi()\" eeimg=\"1\"> 最大，也有了上面的4个<b>约束条件</b>。求解约束最优化问题，可以通过拉格朗日乘子，将约束最优化问题转换为<b>无约束最优化</b>的对偶问题。我们的拉格朗日式子可以写成如下：</p>\n<p data-pid=\"Zfynkdbi\"><img src=\"https://www.zhihu.com/equation?tex=L%3D%5Csum_%7Bj%3D1%7D%5Em%5Csum_%7Bv%3D1%7D%5Ekw_%7Bv%2Cj%7D%28%5Csum_%7Bi%3D1%7D%5En%5Cpi%28x_i%29_vx_%7Bij%7D-A%28v%2Cy_i%29x_%7Bij%7D%29+%5C%5C+%2B%5Csum_%7Bv%3D1%7D%5Ek%5Csum_%7Bi%3D1%7D%5En%5Cbeta_i%28%5Cpi%28x_i%29_v-1%29++%5C%5C+-%5Csum_%7Bv%3D1%7D%5Ek%5Csum_%7Bi%3D1%7D%5En+%5Cpi%28x_i%29_vlog%5B%5Cpi%28x_i%29_v%5D\" alt=\"L=\\sum_{j=1}^m\\sum_{v=1}^kw_{v,j}(\\sum_{i=1}^n\\pi(x_i)_vx_{ij}-A(v,y_i)x_{ij}) \\\\ +\\sum_{v=1}^k\\sum_{i=1}^n\\beta_i(\\pi(x_i)_v-1)  \\\\ -\\sum_{v=1}^k\\sum_{i=1}^n \\pi(x_i)_vlog[\\pi(x_i)_v]\" eeimg=\"1\"></p>\n<p data-pid=\"M62Up_Cz\">对 L 求偏导，得到： </p>\n<p data-pid=\"9hvunN2B\"><img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial+%5Cpi%28x_i%29_u%7DL%3Dw_u+%5Ccdot+x_i%2B%5Cbeta_i-log%5B%5Cpi%28x_i%29_u%5D-1+%5C%5C\" alt=\"\\frac{\\partial}{\\partial \\pi(x_i)_u}L=w_u \\cdot x_i+\\beta_i-log[\\pi(x_i)_u]-1 \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"ucEi16Am\">令偏导 = 0，得到：</p>\n<p data-pid=\"u4HLqXzi\"><img src=\"https://www.zhihu.com/equation?tex=w_u+%5Ccdot+x_i%2B%5Cbeta_i-log%5B%5Cpi%28x_i%29_u%5D-1%3D0+%5C%5C\" alt=\"w_u \\cdot x_i+\\beta_i-log[\\pi(x_i)_u]-1=0 \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"ifq39QFk\">从而得到： </p>\n<p data-pid=\"jXMHsE8l\"><img src=\"https://www.zhihu.com/equation?tex=%5Cpi%28x_i%29_u%3De%5E%7Bw_u+%5Ccdot+x_i%2B%5Cbeta_i-1%7D++%5C%5C\" alt=\"\\pi(x_i)_u=e^{w_u \\cdot x_i+\\beta_i-1}  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"D4iyWgbS\">因为有约束条件：</p>\n<p data-pid=\"oLRyezIT\"><img src=\"https://www.zhihu.com/equation?tex=%5Csum_%7Bv%3D1%7D%5Ek+%5Cpi%28x%29_v+%3D+1++%5C%5C\" alt=\"\\sum_{v=1}^k \\pi(x)_v = 1  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"i_7kV1Rh\">所以：</p>\n<p data-pid=\"Zyi_yVNb\"><img src=\"https://www.zhihu.com/equation?tex=%5Csum_%7Bv%3D1%7D%5Eke%5E%7Bw_v+%5Ccdot+x_i%2B%5Cbeta_i-1%7D%3D1+%5C%5C\" alt=\"\\sum_{v=1}^ke^{w_v \\cdot x_i+\\beta_i-1}=1 \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"eXvGfH0O\">因此，可以得到：</p>\n<p data-pid=\"Bf0Onb4X\"><img src=\"https://www.zhihu.com/equation?tex=e%5E%5Cbeta%3D%5Cfrac%7B1%7D%7B%5Csum_%7Bv%3D1%7D%5Eke%5E%7Bw_v+%5Ccdot+x_i-1%7D%7D+%5C%5C\" alt=\"e^\\beta=\\frac{1}{\\sum_{v=1}^ke^{w_v \\cdot x_i-1}} \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"SXoF_jfz\">把 <img src=\"https://www.zhihu.com/equation?tex=e%5E%5Cbeta\" alt=\"e^\\beta\" eeimg=\"1\"> 代入  <img src=\"https://www.zhihu.com/equation?tex=%5Cpi+%28%29\" alt=\"\\pi ()\" eeimg=\"1\"> ，并且简化一下式子：  </p>\n<p data-pid=\"AH4w4STB\"><img src=\"https://www.zhihu.com/equation?tex=%5Cpi%28x%29_u%3D%5Cfrac%7Be%5E%7Bw_u%5Ccdot+x%7D%7D%7B%5Csum_%7Bv%3D1%7D%5Ek+e%5E%7Bw_v+%5Ccdot+x%7D%7D+%5C%5C\" alt=\"\\pi(x)_u=\\frac{e^{w_u\\cdot x}}{\\sum_{v=1}^k e^{w_v \\cdot x}} \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"8sCWlxY1\">这就是逻辑回归中提到的那个泛化的式子，这就证明了逻辑回归是最大熵模型的一个特殊例子。到此，逻辑回归与最大熵模型的关系就解释完毕了。</p>\n<h3>2.3 与 SVM</h3>\n<p data-pid=\"yA85lvoS\">相同点：</p>\n<ul>\n<li data-pid=\"ICZLzRiT\">都是分类算法，本质上都是在找最佳分类超平面；</li>\n<li data-pid=\"vYw6SLEf\">都是监督学习算法；</li>\n<li data-pid=\"xeTf3WFG\">都是判别式模型，判别模型不关心数据是怎么生成的，它只关心数据之间的差别，然后用差别来简单对给定的一个数据进行分类；</li>\n<li data-pid=\"r-t0xFTn\">都可以增加不同的正则项。</li>\n</ul>\n<p data-pid=\"h9XR5lMi\">不同点：</p>\n<ul>\n<li data-pid=\"BNYiotz5\">LR 是一个统计的方法，SVM 是一个几何的方法；</li>\n<li data-pid=\"6tpjFIDK\">SVM 的处理方法是只考虑 Support Vectors，也就是和分类最相关的少数点去学习分类器。而逻辑回归通过非线性映射减小了离分类平面较远的点的权重，相对提升了与分类最相关的数据点的权重；</li>\n<li data-pid=\"yMFUr0mZ\">损失函数不同：LR 的损失函数是交叉熵，SVM 的损失函数是 HingeLoss，这两个损失函数的目的都是增加对分类影响较大的数据点的权重，减少与分类关系较小的数据点的权重。对 HingeLoss 来说，其零区域对应的正是非支持向量的普通样本，从而所有的普通样本都不参与最终超平面的决定，这是支持向量机最大的优势所在，对训练样本数目的依赖大减少，而且提高了训练效率；</li>\n<li data-pid=\"WU_c6Gs6\">LR 是参数模型，SVM 是非参数模型，参数模型的前提是假设数据服从某一分布，该分布由一些参数确定（比如正太分布由均值和方差确定），在此基础上构建的模型称为参数模型；非参数模型对于总体的分布不做任何假设，只是知道总体是一个随机变量，其分布是存在的（分布中也可能存在参数），但是无法知道其分布的形式，更不知道分布的相关参数，只有在给定一些样本的条件下，能够依据非参数统计的方法进行推断。所以 LR 受数据分布影响，尤其是样本不均衡时影响很大，需要先做平衡，而 SVM 不直接依赖于分布；</li>\n<li data-pid=\"IBD5JMyL\">LR 可以产生概率，SVM 不能；</li>\n<li data-pid=\"QHwiAzAu\">LR 不依赖样本之间的距离，SVM 是基于距离的；</li>\n<li data-pid=\"5_ZiLzRS\">LR 相对来说模型更简单好理解，特别是大规模线性分类时并行计算比较方便。而 SVM 的理解和优化相对来说复杂一些，SVM 转化为对偶问题后，分类只需要计算与少数几个支持向量的距离，这个在进行复杂核函数计算时优势很明显，能够大大简化模型和计算。</li>\n</ul>\n<h3>2.4 与朴素贝叶斯</h3>\n<p data-pid=\"at-s0veq\">朴素贝叶斯和逻辑回归都属于分类模型，当朴素贝叶斯的条件概率 <img src=\"https://www.zhihu.com/equation?tex=P%28X%7CY%3Dc_k%29\" alt=\"P(X|Y=c_k)\" eeimg=\"1\"> 服从高斯分布时，它计算出来的 P(Y=1|X) 形式跟逻辑回归是一样的。</p>\n<p data-pid=\"hKcRN0mm\">两个模型不同的地方在于：</p>\n<ul>\n<li data-pid=\"OOWtK4uc\">逻辑回归是判别式模型 p(y|x)，朴素贝叶斯是生成式模型 p(x,y)：判别式模型估计的是条件概率分布，给定观测变量 x 和目标变量 y 的条件模型，由数据直接学习决策函数 y=f(x) 或者条件概率分布 P(y|x) 作为预测的模型。判别方法关心的是对于给定的输入 x，应该预测什么样的输出 y；而生成式模型估计的是联合概率分布，基本思想是首先建立样本的联合概率概率密度模型 P(x,y)，然后再得到后验概率 P(y|x)，再利用它进行分类，生成式更关心的是对于给定输入 x 和输出 y 的生成关系；</li>\n<li data-pid=\"F13fxYR4\">朴素贝叶斯的前提是条件独立，每个特征权重独立，所以如果数据不符合这个情况，朴素贝叶斯的分类表现就没逻辑会好了。</li>\n</ul>\n<h2>3. 模型细节</h2>\n<h3>3.1 为什么适合离散特征</h3>\n<p data-pid=\"-AAfjDzm\">我们在使用逻辑回归的时候很少会把数据直接丢给 LR 来训练，我们一般会对特征进行离散化处理，这样做的优势大致有以下几点：</p>\n<ol>\n<li data-pid=\"cLR82V6u\">离散后稀疏向量内积乘法运算速度更快，计算结果也方便存储，容易扩展；</li>\n<li data-pid=\"osDHuH8E\">离散后的特征对异常值更具鲁棒性，如 age&gt;30 为 1 否则为 0，对于年龄为 200 的也不会对模型造成很大的干扰；</li>\n<li data-pid=\"P-zfo1ob\">LR 属于广义线性模型，表达能力有限，经过离散化后，每个变量有单独的权重，这相当于引入了非线性，能够提升模型的表达能力，加大拟合；</li>\n<li data-pid=\"_9lStYG5\">离散后特征可以进行特征交叉，提升表达能力，由 M+N 个变量编程 M*N 个变量，进一步引入非线形，提升了表达能力；</li>\n<li data-pid=\"76JDrj9G\">特征离散后模型更稳定，如用户年龄区间，不会因为用户年龄长了一岁就变化；</li>\n</ol>\n<p data-pid=\"J0bUjkdL\">总的来说，特征离散化以后起到了加快计算，简化模型和增加泛化能力的作用。</p>\n<h3>3.2 为什么不用平方误差</h3>\n<p data-pid=\"dVgAnHxG\">假设目标函数是 MSE，即：</p>\n<p data-pid=\"98jau_Oi\"><img src=\"https://www.zhihu.com/equation?tex=L%3D%5Cfrac%7B%28y-%5Chat%7By%7D%29%5E2%7D%7B2%7D+%5C%5C+%5Cfrac%7B%5Cpartial+L%7D%7B%5Cpartial+w%7D%3D%28%5Chat%7By%7D-y%29%5Csigma%27%28w%5Ccdot+x%29x+%5C%5C\" alt=\"L=\\frac{(y-\\hat{y})^2}{2} \\\\ \\frac{\\partial L}{\\partial w}=(\\hat{y}-y)\\sigma'(w\\cdot x)x \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"tKF7kMQC\">这里 Sigmoid 的导数项为： </p>\n<p data-pid=\"G4GAm4AX\"><img src=\"https://www.zhihu.com/equation?tex=%5Csigma%5E%7B%27%7D%28w+%5Ccdot+x%29%3Dw%5Ccdot+x%281-w+%5Ccdot+x%29++%5C%5C\" alt=\"\\sigma^{'}(w \\cdot x)=w\\cdot x(1-w \\cdot x)  \\\\\" eeimg=\"1\"></p>\n<p data-pid=\"CbVF2LtB\">根据 w 的初始化，导数值可能很小（想象一下 Sigmoid 函数在输入较大时的梯度）而导致收敛变慢，而训练途中也可能因为该值过小而提早终止训练（梯度消失）。</p>\n<p data-pid=\"Obw29rRq\">另一方面，交叉熵的梯度如下，当模型输出概率偏离于真实概率时，梯度较大，加快训练速度，当拟合值接近于真实概率时训练速度变缓慢，没有 MSE 的问题。 </p>\n<p data-pid=\"zqi0Vjl8\"><img src=\"https://www.zhihu.com/equation?tex=g%5E%7B%27%7D%3D%5Csum_%7Bi%3D1%7D%5E%7BN%7D+x_%7Bi%7D%28y_%7Bi%7D-p%28x_%7Bi%7D%29%29++%5C%5C\" alt=\"g^{'}=\\sum_{i=1}^{N} x_{i}(y_{i}-p(x_{i}))  \\\\\" eeimg=\"1\"></p>\n<h2>4 引用</h2>\n<ol>\n<li data-pid=\"l4ZTOSou\"><a href=\"https://zhuanlan.zhihu.com/p/35356992\" class=\"internal\">L1 正则化与 L2 正则化</a></li>\n<li data-pid=\"OrXluvR_\"><a href=\"https://www.zhihu.com/question/37096933/answer/70426653\" class=\"internal\">L1 相比于 L2 为什么容易获得稀疏解？</a></li>\n<li data-pid=\"Oyn7TeUh\"><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/sinat_27652257/article/details/80543604\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">参数模型和非参数模型</a></li>\n<li data-pid=\"IHuRcEUP\"><a href=\"https://www.zhihu.com/question/21704547\" class=\"internal\">SVM 和 Logistic 回归分别在什么情况下使用？</a></li>\n<li data-pid=\"dwDXIARc\"><a href=\"https://www.zhihu.com/question/26768865\" class=\"internal\">Linear SVM 和 LR 有什么异同？</a></li>\n<li data-pid=\"1RRq6Yff\"><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/songbinxu/article/details/79633790%23%25E5%259B%259Blr-%25E6%25AD%25A3%25E5%2588%2599%25E5%258C%2596\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Logistic Regression (LR) 详解</a></li>\n<li data-pid=\"Fn6I4k7E\"><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/yang090510118/article/details/39478033\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">逻辑回归 LR 的特征为什么要先离散化</a></li>\n<li data-pid=\"h2FtQNXP\"><a href=\"https://link.zhihu.com/?target=http%3A//blog.sina.com.cn/s/blog_6cb8e53d0101oetv.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">并行逻辑回归</a></li>\n<li data-pid=\"3r3Tzt3F\">\n<a href=\"https://www.zhihu.com/question/31989952/answer/54184582\" class=\"internal\">连续特征的离散化</a> </li>\n</ol>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/is-aze?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">阿泽</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/74874291?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"早鸟特惠 | 按下录音键，以播客的名义记录你的世界","date":"2022-09-21 09:31:45","description":"少数派与知名播客的制作人婉莹和甜食一道，为每一个想要用声音表达的创作者，准备了这款《100 小时后请叫我播客主理人》栏目。<a href=\"https://sspai.com/post/75849\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75849"},{"title":"看什么 Café | 从《教父》的剧本改编，看如何渐进式阅读、思考和沉淀","date":"2022-09-21 08:06:09","description":"编者按：1895年12月28日，在巴黎卡普辛路14号的大咖啡馆，历史上最著名的一场电影放映出现了——卢米埃尔兄弟的一系列短片和其他演出一起成为了咖啡馆的助兴节目，而咖啡馆也正是那时人们谈论电影和艺术的 ...<a href=\"https://sspai.com/post/75646\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75646"},{"title":"译文 | 把听播客当成维基百科：完美的非正式学习资源库","date":"2022-09-21 06:30:00","description":"在这篇文章中，我会聊聊为什么在我非正式学习时，播客很大程度上替代了我对维基百科的使用。同时也会聊聊我是怎么一天听五个小时以上播客的。:)<a href=\"https://sspai.com/post/75756\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75756"},{"title":"信息爆炸的时代，我这样搭建自己的全链路知识系统","date":"2022-09-21 03:29:04","description":"Matrix首页推荐Matrix是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选Matrix最优质的文章，展示来自用户的最真实的体验和观点。文章代表作者个人观点 ...<a href=\"https://sspai.com/post/74992\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74992"},{"title":"融资到底谁说了算","date":"2022-09-21 02:59:31","description":"\n<p data-pid=\"838Ph82f\">「曾经有一份真挚的TS摆在我面前，但我没有珍惜，等到失去了我才后悔莫及，尘世间最痛苦的事莫过于此。如果上天可以给我再来一次的机会，我会对那个投资人说三个字：'Let's do it!' 如果非要在这份TS加一个期限的话，我希望是一万年。」</p>\n<p data-pid=\"n_o34DHJ\">最近很多创始人和我表达了类似的想法。</p>\n<p data-pid=\"m-YoNfdP\">也难怪。这一波创始人都是2015年左右开始下海的。那时候是O2O大行其道、全球美元重砸中国、硅谷就是北京七环那个年代，很难想象七年后就「痒」得不行，一定要分居了。经过了社会主义初级阶段投资人热情如火很多年的创始人们，现在忽然被冷落了，「好久没有陌生投资人给我打电话请客吃饭了」一位咖位不小的创始人这么和我讲。</p>\n<p data-pid=\"t4fqXRlS\">牛市中的创始人是时代的宠儿。但现在是黑得不见五指的熊市开端。很多更糟心的事情还没发生。至少中期选举还有俩月。很多工具山巅之国的白老爷子还没用。市场永远可以更差。</p>\n<p data-pid=\"pfjAxNRI\">其实无论是创业公司还是基金都是一样。说穿了大家都不是机构化平台，不是FANNG / MT. SAAS 或者 KKR 这样投资人尽管有时候也骂骂咧咧，但基本上都是不用做尽调就可以打钱的大平台。当然，红杉、IDG、深创投这些已经机构化的单位在募资上的苦恼略少一些，也不是本文讨论的对象。</p>\n<p data-pid=\"lmyJZjX9\">创始人有个错觉：自己是市场的佼佼者，于是大家都会埋单。其实未必。就算你确实是佼佼者。我经常和创业者们开玩笑，资本市场就像你的第一个女朋友（或者说「pre-女朋友」更准确），你永远搞不明白她到底怎么想的，一会儿冷，一会儿热，没有一刻你能猜到她的下一步。如果是牛市，那么创业者就是清华工物系的唯一女生，众星捧月，任皇上翻牌子；如果是熊市，那么就惨了，创业者就是「披2」里面的温兆伦和杜德伟，因为你的地位和经验，大家肯定过来打招呼，但是票不会投给你。</p>\n<p data-pid=\"5rQFD5vs\">融资时候创始人经常纠结稀释。这真是一个幸福的痛苦啊！「唉，虽然嫁妆很多，但是我要和他过一辈子啊！有点不甘心。」这种小女生情节会萦绕在每个创业者心里。只有傻乎乎的创业者或者真正经历过周期的创始人会毫不犹豫的拿下眼前的这份TS。事实证明，只有经历了熊市的干涸，每个创业者才会真正成熟起来，在能拿钱的时候融资，而不是一味的等待自己的下一个里程碑（于是可以涨涨价）或者条件更好的TS（还是要涨涨价）。只有能活下去的时候才有资格讲价。今天，很多公司的弹夹都空了。</p>\n<p data-pid=\"w-ASNEV_\">我是很保守的投资人，但却偏好「重新定义世界」类型的公司。我平衡自己风险的方式就是：一旦投了，那么公司一定要不停的融资，保证账上有3 - 4年的自由现金流，如果不是更多的话。无论是十年前的互联网（大家要烧钱验证模式，OPEX 极高）还是现在的硬科技（大家要烧钱做科研，CAPEX / 流片 / 临床花钱简直类似小黄车），钱是一切的前提。我甚至不在乎你下一轮的估值，但你的现金储备一定要多！碰上不爱融资的创始人我就特纠结：喜欢人家扎实的基本功，羡慕创始人面对资本心静如水，但是担心TA到最后就是一个固定收益项目，我可能还得想法儿技术变现回款及催收。</p>\n<p data-pid=\"6PQkpyn5\">资本化价值和商业化价值是两个层次上的事情，和时机高度相关。比如 2020 和 2021 挣得盆满钵满的IVD公司们现在的市盈率已经跌得稀里哗啦了。创始人既要搞好收入，又要做好IR，一个都不能少。因为 VC 只能通过资本化退出获利，很多创业者觉得委屈：我业务明明这么好，每年增长这么好，为什么投资人不买账？给我的估值这么低？因为，你的业务已经过时了，你已经不代表未来了。所以上市、资本化是一个与时俱进的功课，大家一定要做好。如果你不愿意做 IR 工作，那么我估计我们到最后也不会有什么收益，因为资本化的观众不会把票投给你。董秘不是秘书。你不要总想着省钱。TA 是美股的 CFO。CFO 也不是财务总监。TA 是你公司资本化价值的布道者。如果你不在时代的列车上，比如你现在做电商，而不是氢能，那么你就需要一个比你还厉害的 CFO 或者董秘，或者就多忍受一下投资人的抱怨甚至辱骂（庆幸我不在公募行业，那得折寿多少年），除非你是TikTok。</p>\n<p data-pid=\"IE6Nm4-g\">Call back: 融资到底谁说了算？市场。</p>\n<p data-pid=\"yBiLongh\">如果有无数的投资人不停的给你打电话，那么无论你现在处在什么状态，你都应该捞一把鱼。因为他们真的会离场，甚至资本市场也会下线。那时候，无论你的产品多么惊艳、你的团队多么完整、你的管线多么齐备……场内无人下单。聪明的创业者也许只是运气好，但像我这么笨的人，也一定会分清楚我的能力和市场 beta 的边界，利用市场 beta（参考我上一篇关于「披2」的文章，里面有关于市场 beta 的讨论），而不是孤注一掷搞产品搞技术，才能保证自己的企业基业长青，不会半路夭折，拍卖 IP 还 CB 或者 acquhire 给团队找出路。「失败是成功之母」听着耐受，其实创始人比谁都难受。不要失败！早做打算！学会和市场妥协。两亿颗精虫，只有一颗能够着床，但我们没有两亿次机会试错。「成功（才）是成功亲生的妈」。</p>\n<p data-pid=\"EAWxG5OI\">作为创始人，更需要考虑的是基业长青，也许会错过几个高点，但是一定要有足够的子弹活到那天。这个信条适用于所有行业。但经常发生的是，我们想着基业长青，但实操往往逢坑必入，不采纳我们的建议，牛市的胸有成竹如果没交付，那么熊市只能慌得一批。这和创始人的年纪也没太大关系，不意味着人生经历多的创始人遇到资本市场就不慌张。资本市场永远是你的女神，不听我们闺蜜的话，你绝对搞不定。我经常比喻VC更像女朋友，因为迟早会退出，不会陪团队一辈子，只要我们不劈腿（赌赛道），那么我们所有的心思都是为了你好。除了偶尔我们也想要一条新裙子或者名牌包（阶段性分红或者资产出售），我们愿意赔上耐心，赌你会成为这条街上最靓的仔。</p>\n<p data-pid=\"XcFi4eXo\">今天有个文章（<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/smlxKON3tphNr1Yi5UTUAQ\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">技术封锁，生物科技内循环</a>）对比美国 biotech 市场的估值分布和 18A 公司，一个简单的统计是：纳斯达克有 800 多家创新药企业，其中 2014 - 2018 年上市的 424 家，其中 84 家市值小于一亿美元，只有9 家市值超过 50 亿美元；2004 - 2016年上市的 316 家生物科技公司，只有 36 家存活超过 10 年。</p>\n<p data-pid=\"AA2SQu0y\">反观 18A 的 36 家和科创板 30+ 家生物科技公司，样本量是纳斯达克的 1/10 不到，正态分布也许根本就不会发生。像 Arbutus 这样的全球卡脖子专利公司，Moderna / BioNTech 都绕不过去，要是放在科创板，一定能上天啊，但是在美股也就三亿多美元。很多创新药创始人哭穷「你们投资人给的估值太低了啊，比上一轮没涨啊！」但是在今天全球 Biotech 2000 这样一个市场里面，投资人为什么要投钱给一个 fully priced 的创业团队呢？为什么不把资源放到二级市场，或者直接从那些 micro cap 的公司里面买管线和技术，重新做一家又快又没负担的新公司呢？第一天就有IND级别的管线，第一天就不只是一家创业公司了。</p>\n<p data-pid=\"9G3Utqwa\">Call back 2: 其实不止是融资需要市场拍板。所有重大的事情都是市场拍板。一切都是「时势造英雄」。各位好汉，听人劝，吃饱饭。在这个无比难熬的漆黑熊市里，大家多屯粮、高筑墙、缓称王，哪怕条件不好，也胜过功亏一篑、倒在黎明前。想想 2019 年的李斌和 2021 年的俞敏洪，值得我们所有人敬佩的两条汉子！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wayneshiong?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">熊伟铭</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/566481472?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价鹤戾申创作的国产漫画《画漫画太难了》？","date":"2022-09-21 02:32:55","description":"\n<p data-pid=\"cRk2x4V3\">很幸运也很可惜看到这部作品，这不是《爆漫王》，也不是《暴走邻家》而是一部真正意义上反映了当下中国漫画家生存现状的漫画。</p>\n<p data-pid=\"e0ByxTOQ\">这是一部让中国漫画家感同身受的作品、也是一部让读者更了解中国漫画产业的作品。同时，也是每一个爱好中国漫画读者的一份礼物</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3bd80935afa26f3ff3eed3b23a7e48cb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2989\" data-watermark=\"watermark\" data-original-src=\"v2-3bd80935afa26f3ff3eed3b23a7e48cb\" data-watermark-src=\"v2-8674a8719d6143560470a8be28a16aa8\" data-private-watermark-src=\"v2-496ca24d66c348999df3dc39f5628d10\"></p>\n<p data-pid=\"n3i7Pxf9\">《画漫画太难了！》围绕着<b>主人公画手高压锅、原作搭档荷兰猪以及新来的漫画编辑Wednesday，</b>讲述了一部名为《霸道废妻》的小说改编漫画在Didi漫画app上线后的创作过程和面临的各方压力。读者们跟随着新手编辑Wednesday的视线，以一个漫画新人的角度，逐渐了解漫画的创作、背后复杂的运作机制、以及一部漫画上线所引发的各方势力的矛盾和创作者的妥协。</p>\n<p><br></p>\n<p data-pid=\"3ivRuQhY\">从主题层面来讲，作品的野心很大。作者以新人画手出道作为起点，展现了<b>创作者、工作室、平台方三方的需求和顾虑</b>。不单单是从某一立场批判任何一方，《画漫画太难了！》展现了创作者创作商业漫画时，面对<b>实时变化的点击率、观众催更、平台数据</b>等，内心对梦想的坚持和对资本的需求的矛盾和纠结。是一部不可多得的现实主义漫画作品。</p>\n<p data-pid=\"c07DQZol\"><b>整部作品分为5卷，总共30话＋1话番外</b></p>\n<p data-pid=\"7fFhFG-i\">故事的一开头是采用剧中漫画的形式，一个简单粗暴的开场，清新的色彩，有点随意的线条描绘，加之霸气侧漏的台词，奠定了这部作品有点跳脱却不失严肃的基调。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-51991b94b262437ddef2b0d20bb6071b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1384\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-51991b94b262437ddef2b0d20bb6071b\" data-watermark-src=\"v2-08602eb29939d35b8cc54f1169dc6437\" data-private-watermark-src=\"v2-73cd6c11ddba2605c63d3d21d4e67817\"></p>\n<p data-pid=\"dEN54U-9\">故事最开端就讲述了主人公高压锅画手不愿意随波逐流，追求流量似地去改编时下最热门的霸道总裁小说为漫画，但是搭档的一句，下个月房租该交了，直接让其破防。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3f22eda5ec321459c9c538726d33a18c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1376\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-3f22eda5ec321459c9c538726d33a18c\" data-watermark-src=\"v2-6633dea7b5757a823365c06c26dbdd44\" data-private-watermark-src=\"v2-694efadb0f3e0a2f45869940b05bfdec\"></p>\n<p data-pid=\"3DmGhhos\">尤其是我们第一次知道画一话漫画的明码标价，原来有连载有正常收入的漫画家原来收入是这个水平（月薪过万）</p>\n<p data-pid=\"U42np5sG\">但是很快我们就能发现这万把来块钱赚的有多么不容易，而且这还是整个工作室的收入，所以顿时给读者泼了一把冷水：原来成功连载的漫画家也不怎么赚钱</p>\n<p><img src=\"https://picx.zhimg.com/v2-bb0513efc0102b29891ff4a26689022c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1317\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-bb0513efc0102b29891ff4a26689022c\" data-watermark-src=\"v2-c0b265f01cd51f37b713b0b055a106bc\" data-private-watermark-src=\"v2-484c846d66a15e3c96b1caf5860d9d67\"></p>\n<p data-pid=\"1xeIQRKT\">而接下来许多关于漫画的创作过程，作者选取了一个很好的视角</p>\n<p data-pid=\"AuDpCI09\">新手漫画编辑Wednesday，带领着读者了解一部漫画是怎么诞生的</p>\n<p><img src=\"https://pica.zhimg.com/v2-a750d5432f1663a91e55042931721843_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2551\" data-watermark=\"watermark\" data-original-src=\"v2-a750d5432f1663a91e55042931721843\" data-watermark-src=\"v2-d3504a00401ea85006573eb1912159ed\" data-private-watermark-src=\"v2-2e10228c5fe37a2c72db028ee5c27290\"></p>\n<p data-pid=\"DijfrRKc\">第一件事，就是要认识自己负责的漫画家，每个漫画家都有自己的小脾气，有自己擅长与不擅长的部分，这些部分，都是需要编辑去挖掘的。</p>\n<p data-pid=\"5dC-gbgP\">而我们的主人公就是看似凶神恶煞实则对漫画无比热爱的高压锅主笔</p>\n<p><img src=\"https://pica.zhimg.com/v2-de0ce62f7ea685134c156c8702681bb3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2563\" data-watermark=\"watermark\" data-original-src=\"v2-de0ce62f7ea685134c156c8702681bb3\" data-watermark-src=\"v2-bdaa8422448224379641186dd0a430ee\" data-private-watermark-src=\"v2-cc7fb1f2b9a7223a7d96c742f1ec3bd5\"></p>\n<p data-pid=\"ILEe-_-t\">即便作为一个新手编辑，陪在漫画家身边，见证一部漫画的诞生，人物、场景、道具以及每次讨论剧情走向之时，都会让新编辑明白，一部漫画从创作到面世，这其中经历了怎样的曲折，可能只有亲身经历的工作室小伙伴们知道了，但是读者只看结果：<b>这部漫画是否有趣，是否吸引自己</b></p>\n<p><img src=\"https://picx.zhimg.com/v2-52e07554a7192ff4842a26e689b36013_720w.jpg?source=b1748391?rss\" data-caption=\"这句话说出了多少人的心声\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2303\" data-watermark=\"watermark\" data-original-src=\"v2-52e07554a7192ff4842a26e689b36013\" data-watermark-src=\"v2-c5eb99f0ac3e4fc174ac6d4c849f172d\" data-private-watermark-src=\"v2-85e28467eb88d4122fe62c26157a62ba\"></p>\n<p data-pid=\"h6nTt5uL\">而在跟随漫画家创作的过程中，我们也学习到了一小部分漫画相关的知识，诸如漫画的叙事方式、分镜、构图等等</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c452fe1756091d5c207e98fd369d0ab0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2131\" data-watermark=\"watermark\" data-original-src=\"v2-c452fe1756091d5c207e98fd369d0ab0\" data-watermark-src=\"v2-9395398b7951b17cf3b4e042a1a41f3a\" data-private-watermark-src=\"v2-efa377fe6a5af24f618bb64485a3513e\" data-tags=\"porn\"></p>\n<p data-pid=\"d8C-71Wu\">更重要的是传递出一个问题让读者思考</p>\n<p data-pid=\"jAZ2JMy1\"><b>作为一个创作者，应该以创作者/读者意愿为重？</b></p>\n<p data-pid=\"eMffZUdH\">这是一个亘古不变的难题，作者要是自己画的爽，可能读者不买单，然后就没人气，作品可能无法继续连载。</p>\n<p data-pid=\"N4HhZ494\">作者如果以读者为主，就会被流量、被热点带着跑，创作的内容可能就不再是自己想表达的，作品失去灵魂。</p>\n<p data-pid=\"9b3Y-7rs\">那究竟怎样才算对的，才是好的，没有人知道答案</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5f62092d9286cb9f0792615d0a90dda9_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2544\" data-watermark=\"watermark\" data-original-src=\"v2-5f62092d9286cb9f0792615d0a90dda9\" data-watermark-src=\"v2-c28ba0f51ab48baf1566a91a7c1373fa\" data-private-watermark-src=\"v2-e878df25a12fe2656e8f91ddf5f50faf\"></p>\n<p data-pid=\"VY4YgKNF\">但是在创作过程中，相互配合的伙伴就很重要，诸如高压锅主笔虽然脾气暴躁，在和搭档荷兰猪因为创作分歧吵架以后一气之下出走工作室，但是在买宵夜回去之时，即便支付宝的钱不够，也要给搭档带回一杯咖啡，因为那是她的最爱。</p>\n<p data-pid=\"gakjuqHo\">试问这样的搭档在哪找？</p>\n<p><img src=\"https://picx.zhimg.com/v2-6d4cf2450eabc2fa97ee63aa49d22d25_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2050\" data-watermark=\"watermark\" data-original-src=\"v2-6d4cf2450eabc2fa97ee63aa49d22d25\" data-watermark-src=\"v2-faa9d170683a416ba2f267a52e0e9d29\" data-private-watermark-src=\"v2-13a1d5c693b00d5e1a6390b791ee1773\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-2f464e35bb3c5d417da5f853aa4608b3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1756\" data-watermark=\"watermark\" data-original-src=\"v2-2f464e35bb3c5d417da5f853aa4608b3\" data-watermark-src=\"v2-a3bf3708aa71748ff47be3f30067c6d5\" data-private-watermark-src=\"v2-142963b5c5adf11511fdbd7d2223bd05\"></p>\n<p data-pid=\"ifQtBl0L\">而我们的新人编辑wednesday，之所以做这份工作，是源于一份热爱，源于自己对漫画的爱</p>\n<p data-pid=\"ymI_1iHR\">有多少读者心中也有同样的想法：<b>虽然自己不会画画，但是漫画改变了自己很多，所以希望自己能为漫画做点什么</b></p>\n<p data-pid=\"kYIlkPnC\">而wednesday，希望可以和漫画家们创作出令读者觉得有趣的作品</p>\n<p><img src=\"https://picx.zhimg.com/v2-720ab9a14f10f8068e7e35c69c4f9a07_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2656\" data-watermark=\"watermark\" data-original-src=\"v2-720ab9a14f10f8068e7e35c69c4f9a07\" data-watermark-src=\"v2-6dee1c99e9e5dee7936b9dc6d616cb01\" data-private-watermark-src=\"v2-4055bea41ccf4d62924f4d29891ea7f2\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-92564c35d9252cb56892efd8442a885c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1435\" data-rawheight=\"1992\" data-watermark=\"watermark\" data-original-src=\"v2-92564c35d9252cb56892efd8442a885c\" data-watermark-src=\"v2-62eeeba0d18700fc5ca9c7df17637ad4\" data-private-watermark-src=\"v2-5c44fc1d3b62234d78132f6d53f5f716\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-1f489d90bba22480cca4763ef6d8916d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2564\" data-watermark=\"watermark\" data-original-src=\"v2-1f489d90bba22480cca4763ef6d8916d\" data-watermark-src=\"v2-bdd29037fffe27ca09eb65808791aa84\" data-private-watermark-src=\"v2-bc9b479cabb28e5a5ea6473b7bc8503f\"></p>\n<p data-pid=\"3DF3THdo\">这部作品最不真实也最现实的地方就在于，wednesday是一个非常有能力的年轻人</p>\n<p data-pid=\"r0WU5Yjd\">在两位新人漫画家第一次连载，遇到了不靠谱的责任编辑，在新手保护期一过之后，一次都没有上过平台的推荐位，导致漫画面临腰斩的局面。</p>\n<p><br></p>\n<p><img src=\"https://picx.zhimg.com/v2-102c1c7ed8b1c0b6b1bb88b7713fb468_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2816\" data-watermark=\"watermark\" data-original-src=\"v2-102c1c7ed8b1c0b6b1bb88b7713fb468\" data-watermark-src=\"v2-e091d1361c14e3aa2cabc08eb1041dd4\" data-private-watermark-src=\"v2-84b3d23768446023dc0860276dedfa35\"></p>\n<p data-pid=\"Bd0YUP8V\">这时的wednesday，详细地分析过自己负责的作品，用数据来说明作品的受欢迎程度，还有曾经做过的改编测评，用尽一切证明，自己一方绝对是付出了百分之百努力的</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9106d7cea223844484cb9cc3ba6ff65b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2428\" data-watermark=\"watermark\" data-original-src=\"v2-9106d7cea223844484cb9cc3ba6ff65b\" data-watermark-src=\"v2-94d11e78b79d4b3fc06dc25f96f342d2\" data-private-watermark-src=\"v2-bbc8af6f763874efbef53fbd6027e993\"></p>\n<p data-pid=\"DYmvlJbj\">但是最终这么用心的作品依旧没有取得很好的成绩，平台方有责任，但是读者的选择也说明了一些问题，这段故事也借黎姐这位平台负责人之口道出这个道理：<b>平台会将资源投给受益更大的作品，即便这部作品或许并没那么优秀</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-a69ab02f83705595f0a34f2a197e6457_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1357\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-a69ab02f83705595f0a34f2a197e6457\" data-watermark-src=\"v2-a72c1f23faa1093e34de5720c9767d63\" data-private-watermark-src=\"v2-61c34c5b65403733d113f63406f52a9b\"></p>\n<p data-pid=\"jTI1O3uB\">同时也是这次事件，令这位负责《霸道废妻》的编辑回想起自己做漫画编辑的初心：<b>帮助创作者一起创造和改进作品</b></p>\n<p><img src=\"https://picx.zhimg.com/v2-a089402365b9dc3b4f08ff3968d3bf91_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1328\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-a089402365b9dc3b4f08ff3968d3bf91\" data-watermark-src=\"v2-fb94b8f258c84f2346a1346c94488edc\" data-private-watermark-src=\"v2-afbcab5cad53ff24bd39321e158f14c7\"></p>\n<p data-pid=\"31IxeKn4\">而黎姐更是一语道破：<b>漫画编辑不仅仅是帮助作者“完成”漫画，更要为这些作品增加展示的机会</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-74ed679dceef4e170b4840762db6e20f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2364\" data-watermark=\"watermark\" data-original-src=\"v2-74ed679dceef4e170b4840762db6e20f\" data-watermark-src=\"v2-8062532f651d20d1a286480fb8588431\" data-private-watermark-src=\"v2-d1861efd302291d756358bcd422edadc\"></p>\n<p data-pid=\"v0G-F3EG\">流量是一门玄学，所以不论是编辑还是漫画家，在这个流量时代也在想方设法增加曝光度</p>\n<p data-pid=\"SueBR6zN\">例如荷兰猪和高压锅就打算在wednesday的建议下采用直播方式推广作品</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4ec7d325b39eb3bd85e58ffc18b9651a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2491\" data-watermark=\"watermark\" data-original-src=\"v2-4ec7d325b39eb3bd85e58ffc18b9651a\" data-watermark-src=\"v2-1280e2b4b397c5852bd452133708e416\" data-private-watermark-src=\"v2-07e2e55b29dd6d7f029d2e7752c80023\"></p>\n<p data-pid=\"_xS-bx96\">但是并不是每一个人都适合用这种方式，尤其是不善于交际的高压锅老师</p>\n<p data-pid=\"F7dwRfOT\">一个人画画没问题，和伙伴一起边讨论边画画，也没问题，在一群网友围观下画画，不是每个人都能做到了，所以，我们不能勉强每一位创作者</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8e07ee060c0137a122febe5d35bae3c3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2380\" data-watermark=\"watermark\" data-original-src=\"v2-8e07ee060c0137a122febe5d35bae3c3\" data-watermark-src=\"v2-2123b3b888b8a4049a7814930d804cc0\" data-private-watermark-src=\"v2-3d2d5faa49691c96db425e9116a57211\"></p>\n<p data-pid=\"9Wa6QAad\">于是乎，我们曾经整天上班摸鱼打游戏，浑浑噩噩上班的汪洋编辑，在wednesday的抽奖活动发生失误后，发挥出了他身为资深编辑的作用，亲手为每一位新的获奖者手写了一封感谢信</p>\n<p data-pid=\"hhh0NEL7\">真情流露，所以效果也显著</p>\n<p><img src=\"https://pic2.zhimg.com/v2-164a89a594ec26b5498dfd1a0157a88b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2657\" data-watermark=\"watermark\" data-original-src=\"v2-164a89a594ec26b5498dfd1a0157a88b\" data-watermark-src=\"v2-890344af8f3ba67ba464be748a040178\" data-private-watermark-src=\"v2-e7398201ec9d0ddba4da72c684f8e45e\"></p>\n<p data-pid=\"KYvAqMsF\">除了编辑和漫画家外，这里面还刻画了一位优秀的父亲，他是专门负责作品上色的李拜天老师</p>\n<p data-pid=\"ltpDzzDS\"><b>曾经他还是拥有着漫画梦想的少年，在他得知女友怀孕之时，毅然决然掐灭烟头，说了一句我们结婚吧，投身赚钱养家行列，将自己漫画家的梦想深埋于心</b></p>\n<p data-pid=\"_VPCibHj\">这是多少拥有漫画梦少年的缩影，梦想可以有，但是现实依旧残酷，每个人有权利选择自己过怎样的人生，但是，也有责任过好这一生</p>\n<p><img src=\"https://pica.zhimg.com/v2-1a6d765c46821511cf6de188f5b76c10_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1931\" data-watermark=\"watermark\" data-original-src=\"v2-1a6d765c46821511cf6de188f5b76c10\" data-watermark-src=\"v2-98c92a082c077d069981d99d0b8f8e5b\" data-private-watermark-src=\"v2-8543bffed95ecdedccbcbe56963e5661\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-e21f8cab986f9d4d987513ee94bbc764_720w.jpg?source=b1748391?rss\" data-caption=\"超级喜欢这段\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2651\" data-watermark=\"watermark\" data-original-src=\"v2-e21f8cab986f9d4d987513ee94bbc764\" data-watermark-src=\"v2-de6e3fad9862f647c80af3d007124406\" data-private-watermark-src=\"v2-c990c5f20fa972a3cd8a8246a9e4cead\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-16399857cfccd738e334ea94fe8a5de5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2585\" data-watermark=\"watermark\" data-original-src=\"v2-16399857cfccd738e334ea94fe8a5de5\" data-watermark-src=\"v2-2359409c2414924cffb181214fe1b5b6\" data-private-watermark-src=\"v2-42fe282a21ea93cb9312e7dea05b76fe\" data-tags=\"politic\"></p>\n<p data-pid=\"ghMYwR0K\">为什么说这部漫画对于漫迷来说是一份礼物，因为这是一部对所有爱好漫画的人有着精准刻画的作品</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4f8f19130fb07e99ef9f0062ca04819a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2561\" data-watermark=\"watermark\" data-original-src=\"v2-4f8f19130fb07e99ef9f0062ca04819a\" data-watermark-src=\"v2-91b0e97f6686c12383483cdf6911503f\" data-private-watermark-src=\"v2-7cc4c508d51b626fbe3e5da0fbf65b24\"></p>\n<p data-pid=\"lijyzOGZ\">非常简单的例子，在高压锅老师在漫展上看到一本有趣的漫画之时，背后衍生出故事情节那种飞一般的感觉，简直就想跳起来的感觉，描绘地惟妙惟肖，这种精神上的满足，是其他文娱作品无法带来的美妙体验。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4f2e96f9fb7096bc8ff3d7529857fbde_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2644\" data-watermark=\"watermark\" data-original-src=\"v2-4f2e96f9fb7096bc8ff3d7529857fbde\" data-watermark-src=\"v2-aa8014351c9a9c1f1b0d7022ece6c14d\" data-private-watermark-src=\"v2-91a94ff70f7cfce6d489b0bd87cf7917\" data-tags=\"porn\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c06b5b81ab118f28340d29af2a13f159_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2680\" data-watermark=\"watermark\" data-original-src=\"v2-c06b5b81ab118f28340d29af2a13f159\" data-watermark-src=\"v2-1e5a6a39852609d3ef62c73c97a210d9\" data-private-watermark-src=\"v2-f25adcf6b6e238480e2f615cbed74b71\"></p>\n<p data-pid=\"H0f30C8o\">这部作品不仅仅是年轻人的梦，还有着中年人的漫画梦</p>\n<p data-pid=\"2Hh7SiCr\">比如这位工作室的大佬，曾经一手创办少年卡通，但是遇上纸媒衰落不得不放弃</p>\n<p data-pid=\"VBkVvvwU\">现在即便拥有工作室，依旧每天奔波于投资人之间，只为自己底下的伙伴可以专心创作</p>\n<p><img src=\"https://picx.zhimg.com/v2-81b3457e8f951fc3e74da9dc1878712f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2380\" data-watermark=\"watermark\" data-original-src=\"v2-81b3457e8f951fc3e74da9dc1878712f\" data-watermark-src=\"v2-bd02ea13fbcc7eee9b6228e96c5abbb1\" data-private-watermark-src=\"v2-abe503846b9b3a0294ea0f7c0e3465a6\"></p>\n<p data-pid=\"S_eSlTw4\">比如这位资深编辑霍启，每天兢兢业业，因为被作品打动而拼命推进项目，在自己岗位上为漫画事业做贡献</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4a49b1200743395230a990806ea06aaa_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2370\" data-watermark=\"watermark\" data-original-src=\"v2-4a49b1200743395230a990806ea06aaa\" data-watermark-src=\"v2-2044fb00570af0303712c4f29cecbe1c\" data-private-watermark-src=\"v2-0cabf8973dee474e0e9fc17687a15668\" data-tags=\"porn\"></p>\n<p data-pid=\"qDQOPDQw\">但是个人的力量始终无法战胜资本，一句一代朝臣一代纲就让自己之前所有的努力化为灰烬</p>\n<p><img src=\"https://pic1.zhimg.com/v2-20a7edfd6ffee210fcaad2f480ab5a88_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2660\" data-watermark=\"watermark\" data-original-src=\"v2-20a7edfd6ffee210fcaad2f480ab5a88\" data-watermark-src=\"v2-eb9ec4ae1926475f04f3429838f96d5a\" data-private-watermark-src=\"v2-3935bdffdbde8265468fe7a37d777787\"></p>\n<p data-pid=\"clx800C7\">以至于汪洋都问出这句，<b>我们一直以来所做的事情，到底算什么？</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-32cf011ed2f00d026e267f8907063921_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1522\" data-watermark=\"watermark\" data-original-src=\"v2-32cf011ed2f00d026e267f8907063921\" data-watermark-src=\"v2-e7b9f3d6bad7855b19a1c8556c2bfc6f\" data-private-watermark-src=\"v2-f040f3d694a8d3676a00356eb97e920e\"></p>\n<p data-pid=\"UzLDenHx\">而霍启的这个满分回答我至今不能释怀</p>\n<h3><b>我们所做的一切源于我们对漫画的热爱，和对漫画编辑这个岗位的尊重！</b></h3>\n<p data-pid=\"caFoPocp\">但是对于资本来说</p>\n<h3><b>屁都不是！</b></h3>\n<p><img src=\"https://picx.zhimg.com/v2-ac7b578db300623caed8af5a20636cfa_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2647\" data-watermark=\"watermark\" data-original-src=\"v2-ac7b578db300623caed8af5a20636cfa\" data-watermark-src=\"v2-08555a941a840b603caf7c4d9a86f9ca\" data-private-watermark-src=\"v2-72112027527999aecd8b6874d03d85a4\"></p>\n<p data-pid=\"R11WKn97\">因此这一段我有必要先介绍一下《画漫画太难了》这部作品的连载平台，一个由<b>彩条屋影业</b>牵头的漫画app<b>《一本漫画》，（这真不是打广告哈）</b>起初在这个平台上各个题材百花齐放，虽然说爆款不多，但是作者用心，作品也质量不错，是一众漫迷心中国漫的新希望。</p>\n<p data-pid=\"x6Fqw1bu\">但是在2020年的12月寒冬之际，《一本漫画》忽然腰斩大量非神话题材作品，《单向荷尔蒙》、《十文起送》和《温柔的夹竹桃》等漫画被迫完结，原因如同《画漫画太难了》中说道，总裁换人，方针改变，因为它的平台虽然精品不少，但流量迟迟不能做大，养不起那么多作品。而且彩条屋也是《魔童降世》和《姜子牙》的制作公司，它培育《一本漫画》的初衷，就是为了给“封神宇宙”添砖加瓦。</p>\n<p><img src=\"https://picx.zhimg.com/v2-a3e6903fab28b8e6c7125bdfe8dc1463_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"304\" data-watermark=\"watermark\" data-original-src=\"v2-a3e6903fab28b8e6c7125bdfe8dc1463\" data-watermark-src=\"v2-fd7af471cb29ce8f5efa10ed159e60bf\" data-private-watermark-src=\"v2-c8bf7cad74a8e96841fee47138548173\"></p>\n<p data-pid=\"jIBXRXXt\">所以《一本漫画》放弃非神话题材作品是事实，DM、百合以及古风等题材的漫画，都相继收到完结通知，有些是马上完结，有些则是半年后完结</p>\n<p><img src=\"https://picx.zhimg.com/v2-a6ba21187a76e5b9ba5606798eb60ef8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"366\" data-watermark=\"watermark\" data-original-src=\"v2-a6ba21187a76e5b9ba5606798eb60ef8\" data-watermark-src=\"v2-0bf0e8faf1c7ee4b9610f564a209ce92\" data-private-watermark-src=\"v2-b15b1936182fce377ee49302c72882af\"></p>\n<p data-pid=\"RqmcvKpJ\">现在国产漫画的版权主要在平台手中，除了一些著名作者，其他九成的普通作者都不会有版权。《十文起送》的作者凄凉地说：“因为版权不在手里，连漫画本体都不能在微博上发”。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a8db0f8d6befaf069b46e3c4c10214aa_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"278\" data-watermark=\"watermark\" data-original-src=\"v2-a8db0f8d6befaf069b46e3c4c10214aa\" data-watermark-src=\"v2-2774e2e60e545439fe391aa46b580b35\" data-private-watermark-src=\"v2-bdcefaef4210e167bafb762c507bbd2f\"></p>\n<p data-pid=\"luPsZeLI\">所以这部作品也算是在这个特定的时间段内记录了一件在中国漫画发展上意义重大且毫无影响的事件了吧。即便最终这部漫画同样因此被迫提前完结。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-53dc970e0bad7fdaa4b7fc2b870e3517_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2657\" data-watermark=\"watermark\" data-original-src=\"v2-53dc970e0bad7fdaa4b7fc2b870e3517\" data-watermark-src=\"v2-717c93f163094b868ed25f20ff7e5dd2\" data-private-watermark-src=\"v2-08bb6d444859bac3a36dbb3818205075\"></p>\n<p data-pid=\"s08sOWQe\">所以看完这部作品的经历，我们也会像小女孩一般有这个疑问，既然画漫画这么难，为什么还有那么多人在坚持画漫画呢？</p>\n<p><br></p>\n<p data-pid=\"_K2abIpC\">因为最后的最后，作品依旧想向观众传递出一个正能量的，积极的信号：<b>画漫画实在太有趣了</b>。</p>\n<p data-pid=\"HvXiGa_U\">包括最后小女孩也因此想继续学习漫画，未来想成为漫画家，这也是一种国产漫画的传承与希望</p>\n<p><img src=\"https://picx.zhimg.com/v2-c4693171c679432eb8e1eaf31fe27e7a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2657\" data-watermark=\"watermark\" data-original-src=\"v2-c4693171c679432eb8e1eaf31fe27e7a\" data-watermark-src=\"v2-4cef44131016229d0d24f4c884e9c2cc\" data-private-watermark-src=\"v2-1adbb62497087e0d3b814e33f002a5f8\"></p>\n<h3>希望国漫越来越好，国漫加油！</h3>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bin-di-47-74?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">彬帝</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/514831350/answer/2608048228?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/393241149?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何一句话惹怒漫画《非人哉》铁粉？</a><br><a href=\"http://www.zhihu.com/question/496198901?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">网易漫画里有哪些古风双男主漫画？</a><br>\n","link":"http://www.zhihu.com/question/514831350/answer/2608048228?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报：英伟达发布 RTX 40 系列显卡、AMD 发布 7020 系列处理器等","date":"2022-09-21 01:13:03","description":"微软推出 Windows 11 2022 更新，Apple 对部分地区 App Store 进行价格上调。<a href=\"https://sspai.com/post/75843\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75843"},{"title":"电动汽车的生命周期比燃油车的要更长吗？","date":"2022-09-20 02:36:59","description":"\n<p data-pid=\"UAMGBYkb\">硬件上面，光看底盘、车身、电子电气架构、现在市面上的新能源车和传统油车之间还没拉出大的差别。所以寿命来看基本是一致的。（这里不考虑某些新能源车本身的底盘、车身质量隐患导致的寿命缩短。）</p>\n<p><img src=\"https://pica.zhimg.com/v2-98484a7450ab10ed43e1b1989f373831_720w.jpg?source=b1748391?rss\" data-rawwidth=\"658\" data-rawheight=\"494\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-98484a7450ab10ed43e1b1989f373831\" data-watermark-src=\"v2-95df77d8a3208ed2ef285769ab5e3bb7\" data-private-watermark-src=\"v2-b5a2217c1268af3392f8f36e2d676c9c\"></p>\n<p data-pid=\"HZsFX-Pz\">但动力系统就是天差地别了。</p>\n<p data-pid=\"oHwBZpRK\">燃油车的动力系统由发动机、变速箱、管路（油、水、气）组成，下图是传统燃油车的系统结构图。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-78a52d4befc71f978a9cad4b7a86b472_720w.jpg?source=b1748391?rss\" data-rawwidth=\"550\" data-rawheight=\"310\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"QZO_3PiA\">而纯电车的动力系统是三电系统（动力电池、电机、<a href=\"https://www.zhihu.com/search?q=%E7%94%B5%E6%8E%A7%E7%B3%BB%E7%BB%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2229562420%7D\" class=\"internal\">电控系统</a>），下图是纯电车的动力系统结构图。</p>\n<p><img src=\"https://pica.zhimg.com/v2-6386a5d9adb70953259d518e0fd558f6_720w.jpg?source=b1748391?rss\" data-rawwidth=\"554\" data-rawheight=\"323\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"daGd4yzd\">两种结构根本就截然不同。</p>\n<p data-pid=\"5LcjReEN\">所以看传统燃油车和电动汽车的生命周期，还是得看动力系统的生命周期。</p>\n<p data-pid=\"_IDHf9p4\">先看下燃油车的发动机、变速箱质保期。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-05d8dbb6b202952b6f1865ddc4db2da5_720w.jpg?source=b1748391?rss\" data-rawwidth=\"916\" data-rawheight=\"133\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-05d8dbb6b202952b6f1865ddc4db2da5\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-12b6593e27b45ca23325930338f0c2d7_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1085\" data-rawheight=\"146\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-12b6593e27b45ca23325930338f0c2d7\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-6352005aef463da8060b8a04d8401e29_720w.jpg?source=b1748391?rss\" data-rawwidth=\"932\" data-rawheight=\"146\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6352005aef463da8060b8a04d8401e29\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"4L7TosL-\">好吧，清一色的整车质保三年或10万公里。</p>\n<p data-pid=\"CBkrKSUy\">这里说的整车质保一般都是指的整车零部件在在正常保养的前提下，可以保这么久。</p>\n<p data-pid=\"jfO_zppm\">比如跑两年、五万公里轮胎不行了要换了，即便在整车质保期内，损耗件的更换是要自己掏钱的，这属于保养费，不属于免费质保的范围。属于这个整车免费质保的是动力系统、车身、底盘相关的。很多4S店会推出专门的针对动力系统，如发动机、变速箱、底盘传动系统的延长质保的服务，比如交两三千块钱，给你动力系统延长到8年或20万公里的质保。或者有的4S店还承诺终身对动力系统质保，但是需要你签约，所有保养和事故均到本4S店来。</p>\n<p data-pid=\"thmJqfUm\">但实际上，4S店做的基本是无本买卖，因为保养得当，发动机、变速箱的寿命是超乎想象的长。（这里不考虑某些燃油车本身的动力系统的质量隐患导致的寿命缩短。）</p>\n<p data-pid=\"bC8nimZ2\">现在好一些的发动机，保养得当，不乱来的话，即便是寿命比较短的涡轮增压发动机，寿命也可以达到约40-50万公里，10年往上。而传统发动机，寿命达到80-100万公里，20年都是正常的。以前运营车辆跑百万公里发动机无大修的比比皆是。</p>\n<p data-pid=\"6Qdy5hu8\">变速箱比发动机的极限寿命要少一些，正常保养下，跑50万公里往上，20年也没啥问题。</p>\n<p data-pid=\"fW2v77vN\">反过来再看下纯电汽车的动力电池的寿命。下面是2021年纯电热销车型的电池质保期。</p>\n<ul>\n<li data-pid=\"xuV8Sg8k\">特斯拉model 3： 高压电池与驱动总成质保8年或16万（19.6万）公里，电池容量不低于70%。</li>\n<li data-pid=\"KdJgKjEx\">\n<a href=\"https://www.zhihu.com/search?q=%E6%AF%94%E4%BA%9A%E8%BF%AA%E6%B1%89&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2301936765%7D\" class=\"internal\">比亚迪汉</a>EV ： 整车质保六年或15万公里，电芯终身质保，电池容量不低于70%。</li>\n<li data-pid=\"jDKIBMVP\">宏光MiniEV ： 8年12万公里的三电质保</li>\n<li data-pid=\"Z9hKwB7e\">小鹏P7 ： 整车质保5年或12万公里，电池组质保8年或16万公里</li>\n<li data-pid=\"LMA4YHgu\">\n<a href=\"https://www.zhihu.com/search?q=%E5%93%AA%E5%90%92&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2655219052%7D\" class=\"internal\">哪吒</a>V ： 整车质保3年或12万公里，三电系统质保终身，电池容量不低于70%。</li>\n<li data-pid=\"B89Mc7Ym\">欧拉好猫 ： 整车质保3年或12万公里，电池组质保8年或15万公里</li>\n<li data-pid=\"PkBqr6Hq\">广汽AION Y ： 整车质保4年或15万公里，电池质保终身</li>\n<li data-pid=\"tiE8UAGN\">蔚来ES6 ： 整车质保3年或12万公里，电池组质保终身</li>\n</ul>\n<p data-pid=\"OttlMdrA\">以上是大概总结了下，但是每个车企对于自家旗下的不同车型的电池组质保实际还有更细的要求，比如有的要首任车主才享受电池长期质保的政策，有的要每年里程数不超过3万公里，有的则是不允许跑<a href=\"https://www.zhihu.com/search?q=%E7%BD%91%E7%BA%A6%E8%BD%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2655219052%7D\" class=\"internal\">网约车</a>，具体的还得看每个车型的具体细则。</p>\n<p data-pid=\"Y6IK4OXk\"><b>咋一看，对于动力电池组的寿命来说，这些新能源车企给出的质保期还比传统燃油车的动力系统还要长……</b></p>\n<p data-pid=\"z1pQaBZ4\">此外，有些车企还宣称自己的电池组可以跑几十万公里，轻轻松松超越传统燃油车的动力系统的寿命。</p>\n<p data-pid=\"u5aaJ1wQ\">比如比亚迪的CLTC续航600公里的纯电车，用得<a href=\"https://www.zhihu.com/search?q=%E7%A3%B7%E9%85%B8%E9%93%81%E9%94%82%E7%94%B5%E6%B1%A0&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2655219052%7D\" class=\"internal\">磷酸铁锂电池</a>，以理论循环2000次来算，就是120万公里，这也是为什么比亚迪号称自己的<a href=\"https://www.zhihu.com/search?q=%E5%88%80%E7%89%87%E7%94%B5%E6%B1%A0&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2655219052%7D\" class=\"internal\">刀片电池</a>理论上可以跑120万公里的原因了。</p>\n<p data-pid=\"eEqkYFJn\">说到这里，动力电池寿命真的等同发动机寿命吗？其实新能源车企在这里玩了一个小小的文字游戏，就是车企公布的电池寿命默认叫做<b>循环寿命。</b></p>\n<p data-pid=\"YSRdZRh_\">而循环寿命来看的话，实际现阶段动力电池的寿命和发动机的百万公里寿命真的相差无几。但循环寿命是受到日历寿命的限制的。</p>\n<p data-pid=\"6rSyUIZi\"><b>啥叫循环寿命？</b></p>\n<p data-pid=\"2NVt9JhU\">电池容量有50%，充电到100%，不叫一个循环。</p>\n<p data-pid=\"_DUGVguo\">我现在有30%电量，我去充到80%，也是不叫一个循环。</p>\n<p data-pid=\"L1RXfz-Z\">或者我现在10%电量，去充到40%，然后停一段时间，又充到70%，再见停下充到100%，这当然是也不能说三个循环。</p>\n<p data-pid=\"t94XvFSm\">从原理上说，循环寿命的一个完整循环是指正常能运动的锂离子在正负极之间做了一次往返。</p>\n<p data-pid=\"pd3VUUih\">通俗点说，<b>一个完整循环就是电池满充+满放一次</b>。（这是循环定义，并不是说电池要满充满放，浅充浅放才会使得锂电池更耐用。）</p>\n<p data-pid=\"mmHmphTa\">三元锂电芯的<b>理论寿命</b>为800-1200次循环，<a href=\"https://www.zhihu.com/search?q=%E7%A3%B7%E9%85%B8%E9%93%81%E9%94%82&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2306921474%7D\" class=\"internal\">磷酸铁锂</a>约为2000-2500次循环，到达70%的容量。</p>\n<p data-pid=\"cKOocGwB\">别看循环次数不多，但是电芯数量多啊，电芯数量多且一致性强，众电芯合力就意味着单趟循环的里程数多，再算总行驶里程，得到的数就会比较大了。</p>\n<p data-pid=\"syLlFSlM\"><b>啥叫日历寿命？</b></p>\n<p data-pid=\"TDo65u7m\">是指从厂家生产出来的锂电池到电池寿命结束的时间，这个寿命结束按国家的电池下限规定70%来算，并不是按电量耗完来算，一般以年为单位。</p>\n<p data-pid=\"yx2DZ6uG\">但这个和电池本身使用情况，外界环境都有关系，太长时间不用，或者回回快充到充满电，温度太高太低，湿度太高都会影响日历寿命。一般来说，汽车用的锂电池的日历寿命为6-10年。就是你不频繁用它，一年开三千公里，到了十来年的时候，只开了两三万公里，电池容量一样有可能严重衰减。</p>\n<p data-pid=\"nCFLLDkr\"><b>你就把它想象成一种食品一样，到了保质期，不管你吃不吃，吃了多少，时间一过，大概率就是不能吃了。</b></p>\n<p data-pid=\"I7caEb4z\">这个日历寿命，车企都是默认不公布的，因为这个公布会有不利影响。</p>\n<p data-pid=\"_0igxOR7\">但是我们看电池组的质保期，都还看得出来日历寿命，因为车企给出的一般都是5年或十几万公里。也有的车企给的3年或十几万公里。这都是保守估计，一般来说，6年到10年是个正常的电池寿命。如果所处环境良好，使用状态良好，注意浅充浅放，本身就好的<a href=\"https://www.zhihu.com/search?q=%E5%8A%A8%E5%8A%9B%E7%94%B5%E6%B1%A0%E7%BB%84&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2655219052%7D\" class=\"internal\">动力电池组</a>也有可能达到10年的使用寿命，和一辆汽车的基础使用寿命相当。</p>\n<p data-pid=\"tDsBd7m4\">有些消费者可能就会觉得不划算，都是一样的钱。别人一年开三万公里，我一年开三千公里，短的六七年，长的十多年，别人开了二三十万公里，我开了两三万公里，大家电池都得换。</p>\n<p data-pid=\"r1qcXhWk\">（现阶段我们如果买电动车，在有条件的情况下尽量浅充浅放，不要长期处于满电量或者报警电量的状况，平时能注意保护，不要让车长期处于高湿度，超高低温等恶劣的天气环境下，衰减到70%还是需要很长一段时间的。）</p>\n<p data-pid=\"unI4EMpM\">所以，新能源车不用或者用得少，动力电池寿命还是在那里摆着，随着时间流逝而消逝，这个和发动机的寿命还是不一样的，即便娇贵的涡轮增压发动机每年开一两万公里，也可以横跨二十年不出故障。因为发动机主要是磨损的物理故障或者零部件的老化，而不是动力电池的<a href=\"https://www.zhihu.com/search?q=%E7%94%B5%E5%8C%96%E5%AD%A6%E5%8F%8D%E5%BA%94&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2655219052%7D\" class=\"internal\">电化学反应</a>出了问题。</p>\n<p data-pid=\"Mfn9ZT0H\">所以，<b>光看里程寿命，电动车的动力系统真的不一定比传统燃油车差。</b></p>\n<p data-pid=\"oYCgPvwi\">电动车五年跑50万公里，八年跑80万公里，动力电池组不出故障，没有大的衰减都是可能的。</p>\n<p data-pid=\"zv5L14Cb\">但是如果看日历寿命，电动车现阶段还比不上传统燃油车，因为动力电池组的寿命肯定没有发动机十几二十年那么长。</p>\n<p data-pid=\"V4M-AxYW\">所以，如果是那种一年开几千公里，希望开10年往上，开个15-20年，中间大件不坏的朋友，现在的电动汽车可能还达不到你们的要求。过个八年换个电池组，省的那点油钱真的还不够换个新电池组的。</p>\n<p data-pid=\"Nh6f2ulw\">但如果是一年开三五万公里的朋友，纯电车就很适合了。因为八年到十年，电池组充放电三五十万公里开始大衰减，整车其他零部件也差不多到了寿命了，也该换车了。但这三五十万公里省下的油钱和保养的钱怕是真的不菲了。</p>\n<p data-pid=\"gOCHu2hs\">下图是五菱的入门纯电车的单月里程数榜单，这些单次续航一百多公里的也能开这么长的里程数，这么开纯电车才是真的省钱了。榜一的老哥估计十年下来，能省一辆奔驰E300L的顶配出来了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-045009568e89e83aaae70fc1fd219dd3_720w.jpg?source=b1748391?rss\" data-rawwidth=\"574\" data-rawheight=\"900\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-045009568e89e83aaae70fc1fd219dd3\" data-watermark-src=\"v2-eeb695fa05ca35861790758466a1f517\" data-private-watermark-src=\"v2-8e38708a0d1ad3f567abeba21ba43fe0\"></p>\n<p><br></p>\n<p data-pid=\"8KBNNaP9\">（图片来源网络，侵删！）</p>\n<p data-pid=\"4OB_iQXe\"><br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/552123306/answer/2677356072?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">36 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/522865200?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">电动汽车是否会比油车的使用寿命更长？</a><br><a href=\"http://www.zhihu.com/question/372105179?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">三到五年时间电动汽车的使用率会高于燃油车吗？</a><br>\n","link":"http://www.zhihu.com/question/552123306/answer/2677356072?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"巴西的很多汽车是烧酒精的，为什么国内不可以效仿他们去造酒精汽车呢？","date":"2022-09-20 02:35:00","description":"\n<p data-pid=\"TplGQZ41\">其实现在国内也有地区一直都在用E10的汽油，E10代表着含10%的改性乙醇+90%的汽油。</p>\n<p><img src=\"https://picx.zhimg.com/v2-d300d49063d8bad0e2b7cb722abb05d6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"354\" data-watermark=\"watermark\" data-original-src=\"v2-d300d49063d8bad0e2b7cb722abb05d6\" data-watermark-src=\"v2-13aef687d09df441d6831ba25abfb48d\" data-private-watermark-src=\"v2-7c689790780048d9170a57edd7f708b4\"></p>\n<p data-pid=\"5ohbtA9r\">2017年由国家发展改革委、国家能源局、财政部等十五部委联合印发<b>《关于扩大生物燃料乙醇生产和推广使用车用乙醇汽油的实施方案》</b>，根据方案要求，从2020年开始，我国全国范围将推广使用车用乙醇汽油。当时这就是国策，要求全国推广。</p>\n<blockquote data-pid=\"A6DL_3Pj\">国家发改委在《可再生能源中长期发展规划》明确提出，不再增加以粮食为原料的燃料乙醇生产能力，合理利用非粮生物质原料生产燃料乙醇，并提出2020年实现生物燃料乙醇年利用量1000万吨的目标。</blockquote>\n<p data-pid=\"ZxOXq9uQ\">比如山东省、天津市是全国最早使用乙醇汽油的地区，它们在2018年之前就开始推广使用乙醇汽油方案，并且要求全面实行，统一在所有加油站提供乙醇汽油。其中，辽宁、吉林、黑龙江、河南、安徽和广西6个省也同步进行中，基本加油站里都有乙醇汽油提供。</p>\n<p data-pid=\"OpKJWjT5\">但2018年到2022年，因为技术原因、市场反馈和国内外的政策变化，国内改性乙醇的价格居高不下，甚至一度和汽油价格差不多，所以导致了这项推广计划迟滞了，没有做全国性的铺开。（具体原因可以看本问题下的高赞。）</p>\n<p data-pid=\"WcWdkhru\"><b>为什么国家这么想推广乙醇汽油。</b></p>\n<p data-pid=\"iHKAU9zk\">比如E10汽油比纯汽油少10%汽油的含量，看起来不多，但放大到上亿辆汽车上，那么就意味着国内汽油的需求量会可观的减少。</p>\n<p data-pid=\"RPTDmSvX\">另一个原因乙醇燃烧能减排，原来100%的汽油燃烧，生成了100%的<a href=\"https://www.zhihu.com/search?q=%E6%B0%AE%E6%B0%A7&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2575828137%7D\" class=\"internal\">氮氧</a>、碳氢污染物。而含了10%的乙醇燃料，就能立竿见影减少10%的污染，而且对动力的影响还微乎其微，发动机也不用经过特殊的改造就可以直接使用。</p>\n<p data-pid=\"TrwkVyKT\">乙醇的热值26.75MJ/KG，汽油的46MJ/KG，乙醇的热值约为汽油的60%。发动机的<a href=\"https://www.zhihu.com/search?q=%E7%83%AD%E6%95%88%E7%8E%87&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2575828137%7D\" class=\"internal\">热效率</a>本来综合就只30%左右，所以用了10%的乙醇，对于发动机的输出动力影响大概就弱了2%左右，如果其他地方没问题，仅是热值的差距造成的动力衰减，司机是基本察觉不出来的。没有某些人说得加10%乙醇就是降低10%动力，油耗上升10%。用20%乙醇汽油就是降低20%动力，油耗上升20%那么离谱了。  很多老司机觉得加了乙醇汽油，动力明显下降，往往不是热值差异的原因，而是我下面说的原因了。</p>\n<p data-pid=\"dBfStuNF\">长期加改性乙醇（不含水）+汽油（含水小于0.8%），对于发动机还是有些弊端的。</p>\n<p data-pid=\"xn-WHdLP\">因为醇类这种<a href=\"https://www.zhihu.com/search?q=%E6%9C%89%E6%9C%BA%E6%BA%B6%E5%89%82&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2547100112%7D\" class=\"internal\">有机溶剂</a>，吸水性好，意味着醇类汽油必须要抓紧用，因为放着不用，吸收水分，燃料里面水分过多，则会对燃油发动机造成伤害。一般我们现在加醇类汽油，如10%浓度醇类的汽油，用的普通发动机，一般都要在30天内用完。如果当地湿度大，则要在两周到三周内用完。（具体为什么燃料里面有水会伤害发动机，可以看我之前写发动机的系列回答。）</p>\n<p data-pid=\"C3W6LePy\">如果燃料里面有一丁点水，发动机持续高温（发动机正常运作，<a href=\"https://www.zhihu.com/search?q=%E7%87%83%E7%83%A7%E5%AE%A4&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2575828137%7D\" class=\"internal\">燃烧室</a>温度则是两千摄氏度往上，从发动机排废气温度也是五六百度），是可以蒸发细微水气的，水气是不会在发动机里面凝结的，不至于对发动机产生太大影响。</p>\n<p data-pid=\"dR_g5JIT\">但如果燃油带的水份多了，这就是普通燃油发动机无法承受之重了，轻则动力下降油耗上升（因为机油润滑变差，导致发动机热效率下降），重则机油乳化都会出来，时间久了，发动机基本就是要废了。有些司机说长期加乙醇汽油动力下降厉害，建议去看下机油，保养下发动机，尤其是经常下雨的季节。至于有的人说乙醇燃烧生成水会不会影响发动机呢，实际汽油也是碳氢化合物燃料，烧出来也是二氧化碳、水和一些污染物……</p>\n<p data-pid=\"3TbIfKVb\">另外醇类的沸点低，不到80摄氏度，在汽油还未转成气态的时候，醇类可能就会转成气态，抢占发动机的汽油输送管道，容易造成汽车动力不足，甚至夏天打不着火的情况。这个也是有些炎热地区觉得加乙醇汽油，觉得踩油门没以前那么给力，动力下降厉害的原因之一了。</p>\n<p data-pid=\"3tNjeiuv\">另醇类对橡胶的溶胀性较强，对密封垫等合成橡胶破坏性大、对树脂滤芯破坏性大。对金属的腐蚀性较强，比汽油的导电性强，容易形成电位差的金属腐蚀。产生的氧化物，如甲酸对铝、铅、铸铁合金等金属表面有侵蚀。以上弊端虽然不明显，但长期使用乙醇汽油，还是会对发动机造成一定的伤害。</p>\n<p data-pid=\"fhEvaKRX\">种种原因，导致了乙醇汽油没有推广开来，但几年后随着新能源汽车的发展，混动系列却是有了醇电混动的路线。</p>\n<p data-pid=\"4TF0Ppjw\">比如2022年8月20日，吉利推出来第四代帝豪醇电混动车型，这里的“醇”指的是<b>甲醇（CH3OH），</b>专用发动机加甲醇燃料用作动力来源。该车型搭载了1.8L醇电混动发动机和混动电驱变速器，百公里醇耗9.2升，每公里出行成本低于0.3元。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-48dad05802a272e4ef217cfe05602202_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"646\" data-rawheight=\"306\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"ii5DbBVC\">国家工信部把甲醇汽车定义为“<b>符合GB/T3730.1中汽车定义，装用专门设计开发的适用车用甲醇（M85或M100）燃料或甲醇-柴（汽）油双燃料的发动机。</b>”</p>\n<p data-pid=\"M6OBIhcZ\">现在一般用M15,M30,M85,M100来代表甲醇的纯度，M85表示85%的燃料是甲醇（15%是汽油），而M100就表示纯甲醇100%作为燃料。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4012e251cbdad80e02694fdeb984c77c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"421\" data-watermark=\"watermark\" data-original-src=\"v2-4012e251cbdad80e02694fdeb984c77c\" data-watermark-src=\"v2-9b499ee3715f1f2c0024f83797a0c0a0\" data-private-watermark-src=\"v2-254cf3e8c1f5fd5b24ec8e5d289af699\"></p>\n<p data-pid=\"CUxl-LKb\">与改性乙醇的5000元-7000元每吨的高价不同，改性甲醇只需要2000-3000元每吨，远低于汽油的7000-9000元每吨。</p>\n<p data-pid=\"5bWnHvvx\">而且甲醇的数据也不错，研究法辛烷值（RON）达112，马达法辛烷值（MON）为106。甲醇和汽油调和后的辛烷值也比较高。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1a429f21948b5667123a832bc5d64119_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"920\" data-rawheight=\"329\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"zHPFnknp\">排放尾气更清洁（含氧量高，燃烧充分，少排放碳），比如可以溶解汽油的一些副产物胶质和杂质（但如果是老车，开始使用醇类汽油，则容易造成<a href=\"https://www.zhihu.com/search?q=%E6%BA%B6%E8%A7%A3%E7%89%A9&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2547100112%7D\" class=\"internal\">溶解物</a>过于粘稠而堵塞油路管道）。</p>\n<p data-pid=\"WuEDlW8V\">虽然甲醇的热值比较低，只有19.60MJ/kg,汽油大概为43.50MJ/kg,甲醇的热值大概只有汽油的一小半左右。单独用来做传统汽车的动力会明显不足，但是在混动体系里面，甲醇发动机的热效率可以维系在高位的区间，这样就可以扬长避短，有效提高了甲醇动力的性价比。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-917fb2bf700e7b205c01af1716022545_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"651\" data-rawheight=\"202\" data-watermark=\"watermark\" data-original-src=\"v2-917fb2bf700e7b205c01af1716022545\" data-watermark-src=\"v2-aeb2e51baba9f762d4bdd0f452cbdc35\" data-private-watermark-src=\"v2-7da88fb18f14f8a33e31f0b0515e5732\"></p>\n<p data-pid=\"Ekjm8qDH\">国内的甲醇发动机已经达到了国际的一流水准，定制的甲醇发动机解决了<b>燃料系统材料的耐腐蚀溶胀，提高了油泵、油管、油滤、油箱的耐醇性，关键零部件及特殊润滑油的搭配，整车启动和燃烧控制，开发专用醇类发动机ECU，解决冷启动困难，添加油路增压管等等。</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-621c0831cbeddfef7de5cb6771ee1b28_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"GposjI6w\">最后说到<b>巴西汽车烧酒精，实际和巴西本地的甘蔗盛产有关系</b>。巴西地域的光照、雨量极为适合种植甘蔗。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3a78d4f12a5339a1c84fac25fabb06a6_720w.jpg?source=b1748391?rss\" data-caption=\"一望无际的甘蔗田\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" data-watermark=\"watermark\" data-original-src=\"v2-3a78d4f12a5339a1c84fac25fabb06a6\" data-watermark-src=\"v2-e0fc7b438417d4d4061e915628fde42f\" data-private-watermark-src=\"v2-a982c7389541c9209986ed79f7d20ec8\"></p>\n<p data-pid=\"LAlj1l1D\">巴西是世界第一大甘蔗种植国，2019年，全世界甘蔗总产量为19亿吨左右，而巴西甘蔗总产量大概为7.5亿吨左右，全国甘蔗种植面积为1000万公顷。巴西是全球最大的甘蔗生产国，占到全球甘蔗交易量的约50%，占据全球第一。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8a355a1d207c67c61c87b8b3f92f5e8b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"427\" data-watermark=\"watermark\" data-original-src=\"v2-8a355a1d207c67c61c87b8b3f92f5e8b\" data-watermark-src=\"v2-255953fbf91f692955a06e2f3c75e158\" data-private-watermark-src=\"v2-6fb1aa2e8dd8e7181266fa623ffda665\"></p>\n<blockquote data-pid=\"mBNDhxsB\">同时，巴西是世界上最大的以甘蔗为原料生产生物燃料乙醇的国家，2020年生物乙醇的产量达到3亿升，占全球产能的30%，是全球仅次于美国的第二大乙醇生产国，也是全球第三大燃料乙醇消费国。从工艺上来看，巴西以甘蔗制醇的第一代工艺为主，在2020年全国的365个炼厂中，甘蔗制醇的工厂占94%，占市场主流地位。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-8f371ed196df1e5e80acca2e9f4899db_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-watermark=\"watermark\" data-original-src=\"v2-8f371ed196df1e5e80acca2e9f4899db\" data-watermark-src=\"v2-e16b846dcc5b63b3d16ea11dfe227931\" data-private-watermark-src=\"v2-f027b88fe8fa997d208b2a5f7cbcddba\"></p>\n<p data-pid=\"GxKRvqiA\">巴西以甘蔗生产的酒精的成本极低，只有美国玉米制作酒精的一半，欧盟制作酒精的三分之一。加上巴西政府的政策推广和补贴，使得巴西成为世界上唯一的大批量使用酒精作为汽车燃料的国家。</p>\n<p data-pid=\"TNgVnTzk\">而国内的农作物说实话，无法走巴西甘蔗制造乙醇的路线，也无法走美国玉米制造乙醇的路线，即便现在改性乙醇的价格依旧是居高不下。如果强行推广全国乙醇汽油，意味着就不是因地制宜而是硬上了，那就需要大量的补贴来制造乙醇，然后以低价给油企，否则加油站亏本是不可能接受推广的。但这么巨大的补贴换来的节油减排的利益却未必值当……</p>\n<p data-pid=\"bEaALU4s\">但是回看甲醇，甲醇的制备中国却是全球第一，产量是全世界总量的一半。无论是工艺成熟度还是产能都意味着甲醇的性价比极高。所以对比乙醇汽油的路线，我觉得甲醇的混动路线倒是一条利用醇类的新路径。</p>\n<p data-pid=\"8tQ3rjce\">（图片来源网络。）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/294651406/answer/2675285214?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">169 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/461142980?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">现如今有自动检测酒精的汽车吗？</a><br><a href=\"http://www.zhihu.com/question/468771388?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">酒精可以放在汽车上吗？需要注意什么？</a><br>\n","link":"http://www.zhihu.com/question/294651406/answer/2675285214?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"无人驾驶汽车真的适合城市道路吗？","date":"2022-09-20 02:34:48","description":"\n<p data-pid=\"tArvheeo\">前两天玩游戏，发现在某部大型开放式游戏中，整个城市的交通秩序井井有条。</p>\n<p data-pid=\"dA0Q9A-z\">如果不是玩家去“挑事儿”，由AI控制的NPC车辆完全不会造成拥堵、事故等问题。</p>\n<p data-pid=\"eXJdtxb0\">这部来自2013年的3A巨作，似乎已经在游戏的细节中，为我们打造出了未来无拥堵、无事故自动驾驶技术的蓝本——用AI取代人。</p>\n<p><img src=\"https://pica.zhimg.com/v2-8a68ebf0cd7754778fa5fbc80c793c59_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1601\" data-rawheight=\"870\" data-watermark=\"watermark\" data-original-src=\"v2-8a68ebf0cd7754778fa5fbc80c793c59\" data-watermark-src=\"v2-116a2b992ccce5d028bad9c4ff6b05f5\" data-private-watermark-src=\"v2-a304be88a4283c11856df3dce6826df2\"></p>\n<p data-pid=\"uiWyHzNk\">那么，如果我们从游戏引申出来，在现实世界中，高度自动化的无人驾驶技术，真的可以打造出真正理想化的城市交通模式、真正的去适配城市道路吗？</p>\n<p data-pid=\"2OKJ-X9e\">对此，许多人肯定会表示质疑，不过我想说，质疑的背后，或许还是在当下，许多人对“无人驾驶汽车”的想象。</p>\n<h2>实际上，当下的智能辅助驾驶技术，离真正的无人驾驶还很远很远</h2>\n<p data-pid=\"iEumipjD\">在目前，不少车企都推出了所谓的“高阶智能驾驶技术”。</p>\n<p data-pid=\"Y360MV0_\">拥堵辅助、高速领航等一应俱全。</p>\n<p data-pid=\"gbeA357-\">其实说到底，现在这些L2级、L2+级或者说是L3级智驾技术，它们核心目的在于降低本车驾驶者的工作强度而非提升道路状况的健康程度。</p>\n<p><br></p>\n<p data-pid=\"I3Be06ZQ\">举个例子：在上下班的时候，我最讨厌跟在一些智能电动车的后方。</p>\n<p data-pid=\"P2F7J6lL\">为啥？</p>\n<p data-pid=\"siX-465B\">因为他们很喜欢打开智能辅助驾驶功能，自动停车、自动跟车起步……</p>\n<p data-pid=\"5MAa6Jzy\">在红绿灯跟车起步的时候，这些车往往会在前车起步很久之后才缓缓蠕动，大幅降低了整个红绿灯路口的通信效率。</p>\n<p data-pid=\"Ge2vQ3r4\">打个比方，按照正常的人工驾驶效率，一分钟的时间可以通过20辆车，那么，在这些自动跟车系统的“帮助下”，智能车的驾驶员的操作的确是方便了，但是一分钟内的通行效率却降低到了15辆左右。</p>\n<p data-pid=\"NY9nCVSN\">除了拥堵之外，当下的智能辅助驾驶系统还有可能造成事故。</p>\n<p data-pid=\"cFT9CTsw\">相信大家都看过智能车型因为智能辅助驾驶系统造成事故的新闻，有的车因为没有识别到锥形桶，一股脑地扎进了施工区域；有的车因为识别不到异型车或者停在路中间的车，也是一股脑扎上去……</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9d12d64bae66331962f54158388e6506_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-9d12d64bae66331962f54158388e6506\" data-watermark-src=\"v2-fdad0707fc9d3a08a01781a876ebe913\" data-private-watermark-src=\"v2-398f06aaeebe2f98b63a00e76932e4ac\"></p>\n<p data-pid=\"C525GibX\">从这个角度来看，由于技术成熟度还不够，所以目前的有些智能驾驶辅助技术，甚至还有可能还会帮倒忙。</p>\n<p data-pid=\"fE_Wtyqg\">换句话说，想要真正解决这些问题，想要达成真正意义上的“无人驾驶”，车企们还有很长的路要走。</p>\n<p data-pid=\"lyMugHtN\">接下来，我们不妨一起“走向未来”，畅想一下，看看未来城市中的自动驾驶和智能交通有可能是什么样的？真正的L5级无接管自动驾驶和真正的零拥堵、零事故道路交通到底有没有可能实现？</p>\n<p data-pid=\"hFwKAErt\">在当下，很多车企都先一步推出了V2X、V2L等车路协同技术。</p>\n<p data-pid=\"4AH0SGwJ\">那么，车路协同技术应用在未来的自动驾驶环境中，有何意义呢？</p>\n<p data-pid=\"pu2Vga23\">其实我们可以这样来说，车路协同就是“集中-分散”式的自动驾驶模式。</p>\n<p data-pid=\"bD0IRVdx\">在一个城市或者一条道路上，有无数个道路环境感知系统和无数辆车，也有一个“大脑”即车路协同的信息管理中心。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8f8731feb824861121a81ab7f78cfccb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1269\" data-rawheight=\"651\" data-watermark=\"watermark\" data-original-src=\"v2-8f8731feb824861121a81ab7f78cfccb\" data-watermark-src=\"v2-83169a618a4013681ffbd6551d870ff5\" data-private-watermark-src=\"v2-70b593e313f8d6cfa36ad2843747f4eb\"></p>\n<p data-pid=\"VM4JFzje\">道路上的环境感知系统，可以查看当前的交通环境信息、道路抓地力系数、环境温度、是否有事故等信息，在收集信息后，道路上的环境感知系统将这些信息传递给信息处理中心。</p>\n<p data-pid=\"oSlyxm5c\">信息处理中心在收到输入后，可以迅速计算出车辆最高效、最安全的行驶方案，并且把这些信息分发给道路上的每一辆车，从而让这些车辆在合适的时候变道、在合适的时候转向、以合适的速度行驶。</p>\n<p data-pid=\"n3YbfRLr\">举个例子，当环境感知系统检测到全程路况良好的时候，车辆能够以最高速度限速行驶，而在遇到一些意外状况的时候，车辆能够即时规避。</p>\n<p data-pid=\"mYKgf3yu\">甚至，在极端天气状况下，车辆自身传感部件无法使用之时，车辆还可以通过无线电连接道路的基建系统，通过道路上的“外设”为车型进行导航。</p>\n<p><img src=\"https://picx.zhimg.com/v2-1730835a180f51d6a1a38ad279195aa3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1429\" data-rawheight=\"890\" data-watermark=\"watermark\" data-original-src=\"v2-1730835a180f51d6a1a38ad279195aa3\" data-watermark-src=\"v2-38b98c48e9fae09b4304a0bfa0e23150\" data-private-watermark-src=\"v2-6babf91fa4ddb037d2f4c695ed8ed701\"></p>\n<p data-pid=\"qO5XD1BV\">另外，由于信息处理中心对每一辆车的统一调度，这样还可以避免驾驶者的问题。</p>\n<p data-pid=\"U5sPfIKt\">例如，在自动驾驶行为中，驾驶者是无权干预车辆操作的，只能紧急停车等，此时，我们就可以避免加塞、超速、低速等行为，让道路交通安全又畅快。</p>\n<p data-pid=\"Pb_M39Gh\">当然更重要的是，每一个区域内的道路信息处理中心，可以和周边的信息处理中心联动。</p>\n<p data-pid=\"l2rco2K1\">比如，北京市区的信息处理中心就需要和周边高速上的信息处理中心联动。两者之间互通有无，把上下高速、进出城的车辆信息、车流规模传递给对方，从而方便对方进行处理，确保各个区域之间的顺畅。</p>\n<p data-pid=\"-b4cwH1z\">简而言之，未来零拥堵、零事故的自动驾驶技术，必然是让各个车辆的自由权限更小，而是让信息处理系统或者调度系统进行统一且完善的资源分配和处理。</p>\n<p data-pid=\"adNdgp-v\">这样一来，倒是能够让我们看到一些零拥堵、零事故的曙光。</p>\n<h2>\n<b>更大胆一些的去想象的话，我觉得，要想实现对自动驾驶汽车集中管理、统一调度，需要的不仅仅是打造出车路协同系统，还</b>需要高度统一的设计，就像是“车同轨”一样。</h2>\n<p data-pid=\"h2-6nhgW\">大胆猜测一下，或许，我们未来的自动驾驶汽车，除了需要高度精准的感知系统和车路协同系统之外，在性能方面也需要高度相似。</p>\n<p data-pid=\"nxyJAZDx\">例如，在指挥系统统一调度车路进行加减速的时候，此时车辆的加速性能和刹车性能必须要在一个水平线上，才能满足同步加减速的需求来确保步调的统一。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f19b1a244f588c35919e79f35b6b43fe_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1400\" data-rawheight=\"788\" data-watermark=\"watermark\" data-original-src=\"v2-f19b1a244f588c35919e79f35b6b43fe\" data-watermark-src=\"v2-b6279f5c9453e4f227eee1fdecec945e\" data-private-watermark-src=\"v2-d0453330e8981b1af79f5e38bd95795f\"></p>\n<p data-pid=\"Pbjhoex4\">另外，在未来，为了便于管理，车辆的尺寸或许也会相对比较统一。</p>\n<p data-pid=\"MO8Z5BYQ\">A、B、C等不同级别的车型，其尺寸需要有一个限定值，在这一数值内，可以让调度系统精确地对每一辆车转弯半径做出判断，在车辆掉头、小半径转向时提前确定“一把过”的位置，从而使得道路交通更加精确、高效。</p>\n<p data-pid=\"pYwBcQjn\">而在道路的建设中，真正的完全自动驾驶，需要完全的“闭环运行”。</p>\n<p data-pid=\"8Fg9ayzr\">也就是说，需要在城市或者高速道路上，我们还需要为自动驾驶汽车开辟一条专用的道路。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a1cbc6dcff75de105fc96c57c05dff52_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-a1cbc6dcff75de105fc96c57c05dff52\" data-watermark-src=\"v2-fdfd19cf12ad562a281910b2c416670e\" data-private-watermark-src=\"v2-da7beaed40c81124b44945fe6d1ec896\"></p>\n<p data-pid=\"5rgD9WGq\">举个例子，在未来的我，想要开着自动驾驶汽车出门，自己玩着游戏看着电影就能到目的地的那种。</p>\n<p data-pid=\"F7H5Z_qi\">此时，我只需要手动把车辆开出小区地库，当车辆来到主路的时候，有一个自动驾驶汽车的“预通行区域”，这个区域类似于高速的收费站，在内部可以完成自动驾驶身份的识别认证以及对车辆车况安全性的一个快速验证，并在完成后启动完全的自动驾驶功能。</p>\n<p data-pid=\"49ZaUMsN\">于是，咱们就可以直接脱手让车辆自动加速、并入主要车道了。</p>\n<p data-pid=\"0oV3XyQA\">在快要达到目的地，车辆驶出自动驾驶道路的时候，还是通过一个识别区域，在这个区域中驾驶者接管车辆……</p>\n<p data-pid=\"uWFaAaWK\">当然，如果想要体验手动驾驶乐趣的话，我们也可以走旁边的普通车道，全程手动控制车辆，享受车辆的驾驶乐趣。</p>\n<p><br></p>\n<p data-pid=\"S-EwGVQZ\">在“自动驾驶道路”上，车辆们井然有序、高效安全地通行。</p>\n<p data-pid=\"cfC7JAI9\">其实，除了这些之外，真正的高阶自动化无人驾驶技术，还能带来更多的好处。</p>\n<p data-pid=\"0t-aoN6X\">比如当前提到的“汽车共享化”，就是未来发展的一个很好思路。</p>\n<p data-pid=\"_gufTzBj\">在未来，自动驾驶汽车可能会类似于当前的“轨道式交通”。只不过，自动驾驶汽车的轨道是虚拟的、由调度中心设定并分发的线路，与民航系统中的航路相近。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-60c338d4573a5ff3870d0005c6987e4e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"914\" data-rawheight=\"609\" data-watermark=\"watermark\" data-original-src=\"v2-60c338d4573a5ff3870d0005c6987e4e\" data-watermark-src=\"v2-13f169bed95607e4adec529cd9f2ab4f\" data-private-watermark-src=\"v2-eaf568febc786228796459829f31ec74\"></p>\n<p data-pid=\"8ko9ZMLq\">当我们想要出远门的时候，完全可以不用自己开车，走到家附近的“自动道路预同行区域”，可以通过智能设备呼叫“共享自动驾驶汽车”，在上车后，车辆就能根据预设线路，安全高效地到达目的地。</p>\n<p data-pid=\"8-ncWGcp\">其实，从“轨道交通”的设想出发，未来电动车的续航问题也可能会得到很大程度的改善。</p>\n<p data-pid=\"bQdaYv3f\">例如在“自动驾驶道路”上，会有一条“充电车道”，在车辆还有电的情况下，调度系统不会让你驶向这条车道。</p>\n<p data-pid=\"f395OAK_\">当车辆没电的时候，系统会自动让你在这条道路上行驶。</p>\n<p data-pid=\"l3UmeMha\">此时，通过道路预埋的无线充电系统或者说是移动充电缆，就能实现车辆行驶过程中的对接补能，打消纯电动汽车的续航焦虑问题。</p>\n<p><br></p>\n<p data-pid=\"MOqrm1xp\">其实在上述的畅想之中，未来城市中的无拥堵、无事故的道路交通并非是无法实现的，只不过，这需要投入巨大的人力、物力和财力，从车辆的规范化、标准化再到自动驾驶技术的普及甚至是城市智能道路基础建设的完善，每一环都需要做好。</p>\n<p data-pid=\"rF1A3nUx\">但是我相信，随着技术的发展和进步，咱们今天所畅想的城市交通模式，也总有能够实现的那一天。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ershixiongcar?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">二师兄玩车</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/384519954/answer/2675291404?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">39 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/546551524?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">无人驾驶汽车要想彻底落地，需要解决哪些难题？</a><br><a href=\"http://www.zhihu.com/question/266697951?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021年，无人驾驶车队会到来吗？</a><br>\n","link":"http://www.zhihu.com/question/384519954/answer/2675291404?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"国家大力发展电动车，但是电池使用五年之后效率大幅降低，而更换电池费用又过高，到时候又该怎么处理呢？","date":"2022-09-20 02:33:52","description":"\n<p data-pid=\"GXOZhSRb\">其实我看到有些答主列出了特斯拉的百万公里级别超长里程不衰减案例。但是这毕竟是少数，当然同样有很多大量的衰减案例，甚至因为BMS设计缺陷导致3年内过度衰减在北美引发召回的案例。所以关于电池衰减以及替换成本的问题是很多车主切实关切的问题，使用一段时间之后可用续航里程衰减，充放电性能下降也是切实在发生的案例。</p>\n<p data-pid=\"H5cfRVjt\">其实回答这个问题可以分为三个方面：</p>\n<h2>1.选择更好的电动汽车平台和更好的电动车使用习惯。</h2>\n<p data-pid=\"Up1uc_P1\">总体来说，能量密度更高、热管理做的更好、BMS系统（SOC和SOH管理）做的更出色以及电池容量余量更多的电动汽车的电池衰减控制的表现会更好。其中尤其是热管理和BMS，锂电池需要在一个合适的温度范围工作以及避免过充过放，在一般意义上，过度使用快充理论上也会带来更快的衰减（尽管现在有很多企业在承诺全生命周期快充无衰减）。用户使用也是如此，现在很多电动汽车可以提供在寒冷天气提前打开车辆热管理系统将电池包加热，这样用户就可以避免在电池温度较低的情况下进行性能输出需求，这些都会对电池的衰减带来不利的影响。此外你还可以通过在日常规划性通勤的时候将充电上限进行主动控制（例如直冲到80-85%），从而有效提高电池的寿命和减少衰减。</p>\n<p data-pid=\"kgfx8-nD\">很多中小型经济型电动车的衰减表现不好，和一些主机厂为了尽可能充分利用预算并提高续航里程以提高竞争力过度压榨电池性能也有关系，具体就是表现在保留的电池余量不足，对于电池的soc管理过于激进。其实在早期车型中，特斯拉的客户实际续航衰减表现异常好，有一部分原因是在于特斯拉的”藏电“比例是所有竞品中几乎最高的。</p>\n<p data-pid=\"eYD0Z2Mq\">所以说，认为当前电动车的衰减已经不是问题的，往往是看到的是大容量、高能量密度、液冷主动热管理或者智能热管理系统、还有比较健全的电池健康度管控的电动车。而认为目前电动车此类问题严重的，往往是看到的自然风冷靠天吃饭、经济型、低能量密度、电池管理系统和健康管理水平较差的电动车平台。所以如果你真的对于这个问题这么在意，那么选择好的电动车平台是打消你顾虑的第一步；</p>\n<h2>2. 电池的健康度评估或这残值评估是个大工程，但是短期内没有比较成熟的算法，未来主要围绕车企自己的二手车平台开展。</h2>\n<p data-pid=\"GWHsIt3V\">其实所谓电池健康度管理，就是所有电动汽车都装有芯片，会将你的电池信息上传到云端系统中，这个本身就是国家的强制要求。车企基于这个系统会增加更多的电池方面的监控维度，比如说观察充放电量、电压和温度等参数的长期趋势，或者增加传感器获得更多的检测维度。目前有些成熟的模型大概会长期监控电芯的7-10个维度的参数，然后通过大数据和机器学习的办法进行电池健康度的评价。</p>\n<p data-pid=\"UH9Agxs5\">不过，由于电池内部从化学的角度来讲是一个黑盒，我们所有的健康度评价模型都是从输入和输出的信号角度进行推测。只有在实验室中，我们能通过CT等极端手段看到电池中发生的一部分的真相，但是在车上，这就是个黑盒。与此同时，健康度模型是一个大数据体系，模型也并没有一些答主说的那么成熟，所以基本上其成果主要是自己企业使用，无法作为一个正式可信的数据来广泛使用。</p>\n<p data-pid=\"oClydXUE\">所以从未来纯电二手车的电池残值来说，应该会出现两种极端：1. 品牌效应的拍脑袋式信任，比如说特斯拉大家都觉得衰减做的特别好，那么可能二手车市场渐渐的会对性能残值有一个比较通用的算法。 2. 由于自由二手车市场过度低估，而拥有较为充分数据的官方二手车平台回购或以旧换新成为主流。</p>\n<p data-pid=\"5C6ZfrbY\">所以如果你想规避折旧风险，了解你所购买的电动车品牌是否有一个良好成熟的二手车市场服务也是一个很好的手段。</p>\n<h2>3. 电池回收可能会成为一条解决途径，但是一方面它的前提是原材料价格持续高涨，另一方面CTC等技术会阻碍电池回收。</h2>\n<p data-pid=\"2SM4j_BX\">很多人提到电池回收，和大家简单介绍一下目前电池回收的一个基本情况。我国目前废旧锂电池回收主要分为3个工艺：</p>\n<ol>\n<li data-pid=\"RbFRykFe\">机械法，就是粉碎处理；</li>\n<li data-pid=\"GebWvuMy\">火法冶金，就是靠热处理分离；</li>\n<li data-pid=\"K_4WNBOA\">湿法冶金，就是通过化学试剂湿法浸出；</li>\n</ol>\n<p data-pid=\"fzG1yi_k\">机械法目前提及的比较多，优点是简单，环境污染小，缺点是利用率不高，难以获得高纯度金属和化合物。后两者尤其是湿法，处理量大而且产物纯度高，但是问题就是二次污染比较严重，需要更多的环保设备。</p>\n<p data-pid=\"lUby2pTa\">所以有人说锂电池处理无害，有的说有害，可能大家说的就不是一个玩意儿。</p>\n<p data-pid=\"Oqg33lIQ\">废旧动力电池处理的基本工艺流程：</p>\n<p data-pid=\"Xw2yWzuF\">电池分级-》放电预处理-》破碎分选-》金属物理提取-》杂质金属净化-》有价金属分离-》前驱材料制备-》正极材料制备-》功能材料制备</p>\n<p data-pid=\"kZ6w9G_p\">大概就是这么个模式。</p>\n<p data-pid=\"C7ZZaesy\">上面这些工艺我估计应该百度不出来吧，算是目前实战的比较常见的工艺，在下一步的细节工艺就比较复杂了，我就不分享了，而且其实在下一步我也很难具体到设备来讲解了，我估计普通读者看到这里大概也够了。</p>\n<p data-pid=\"b5qxFS2r\">回收这个事情呢，在2年前其实是个政策生意，这个我在2019年前的一些回答中说过，真不挣钱，就是靠政府补贴和主机厂下单机器开动一下，没有主动回收的。这几年就反过来了，是真的挣钱但是收不到电池包，主要原因还是以碳酸锂为代表的电池价格的保障。从4万一吨到45万一吨才是环保主义回归的基础。</p>\n<p data-pid=\"zmxyEmUX\">正如马斯克所说：锂正在成为新的石油。（尽管他的原话是锂电池，但是实际上指的是以锂为代表的元素危机前提下的电池供应危机价格问题）。按照目前电池的发展速度，即便是所有可回收的电池都回收，也远远远远无法满足世界对锂电池的需求。所以在我看来，锂电池原材料的高价将会维持非常长的时间，而这也会有助于电池的回收技术的发展。因为自由市场有利可图向来是创新爆发的基础。</p>\n<p><img src=\"https://picx.zhimg.com/v2-72aaf9edffe94c9fe1ef20f989734486_720w.jpg?source=b1748391?rss\" data-rawwidth=\"927\" data-rawheight=\"571\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-72aaf9edffe94c9fe1ef20f989734486\" data-watermark-src=\"v2-fdf07d07bf3a52a70fcb9521eb60e328\" data-private-watermark-src=\"v2-16d638076a095087ffbc25a600232d6b\"></p>\n<p data-pid=\"zfj7FOH8\">不过，同样是Musk目前在干的很多事情又反过来在阻止电池组的维护、维修和回收工作，其中最典型的技术就是CTC。</p>\n<p><img src=\"https://picx.zhimg.com/v2-ffe9b3211289ae097cf1cd0cf75930c7_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1274\" data-rawheight=\"752\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ffe9b3211289ae097cf1cd0cf75930c7\" data-watermark-src=\"v2-4789ad11e03da2be7985a3e76e5cdfc2\" data-private-watermark-src=\"v2-eccda668fb372b80c99a1386941f1150\"></p>\n<p data-pid=\"qOziAko3\">可以想见，回收业者得花费巨大的精力来切开和清理电池包，然后在避免破坏电芯引发电解液泄露甚至更加恶性事件发生的条件下清理出4860电芯并尽可能去掉这些胶质，然后才能开展后续的工作。这将会是回收业者的噩梦，按时只能希望这样的电池能够在很好的电池管理算法的条件下坚持的更久，让用户觉得折算到折旧已经回本了地步。</p>\n<p><br></p>\n<h2>4. 最后谈谈我不太想谈的梯次回收。我认为短期内铺开的可能性不大，因为风险和收益完全不成正比。</h2>\n<p data-pid=\"P9Vo-kfS\">梯次回收是很早之前提出的概念，大致就是车子的电池衰减到80%左右车用不好了，还可以改为做集中储能和家庭储能云云。</p>\n<p data-pid=\"MCDmbme6\">听起来很美好，现实很骨感。三元锂电池用全新的，全球炸了至少45个储能站。磷酸铁锂电池储能站全球有报道的炸了3个站，其中中国炸的成为了储能站全球死伤最为严重的案例 - 北京大红门光储充一体站。我有一个内部报告专门写这个事情，这里面发生的神奇故事完全可以开一场直播说2个小时的那种，教训太惨烈了。</p>\n<p><img src=\"https://pica.zhimg.com/v2-f58fc12423addbeab9c18ee89efa67b0_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1085\" data-rawheight=\"695\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f58fc12423addbeab9c18ee89efa67b0\" data-watermark-src=\"v2-e4c04f5924f3bc9b06f8d72f4580fb70\" data-private-watermark-src=\"v2-d337c637c0ddc89b6884353581a6268f\"></p>\n<p data-pid=\"7gc2rD4E\">目前储能站不许用三元锂，关于梯次利用这块没有说禁止，但是大红门后加了一个前提，是对于电池健康管理要有成熟评估模型的要求，这个说实话和“原则上不鼓励”没啥区别。目前梯次利用国内还是有示范项目的，但是短期来说，储能电池需求未来的要求会和动力电池区分开来，而且电池类型都有可能会分开来，所以不要对这个寄予太大的希望。</p>\n<p><br></p>\n<hr>\n<p data-pid=\"Bp1uJdma\">关于前面特斯拉百万公里的事情，有人给我回了私信，介绍那个车的特殊情况。特斯拉很多车主做过衰退实测，表现确实还可以，不过百万公里的事情我也是看了人家信息，没有细就发生了什么。我就直接贴上吧。</p>\n<p><img src=\"https://picx.zhimg.com/v2-dd151664fccd29bde98cd8f25dc82a24_720w.jpeg?source=b1748391?rss\" data-rawwidth=\"1228\" data-rawheight=\"2700\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-dd151664fccd29bde98cd8f25dc82a24\" data-watermark-src=\"v2-7c1b3460bc7ed2b25d3b826e0be9aa08\" data-private-watermark-src=\"v2-abe00c2053e57840b76aa34188a53b3a\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/JackyQ?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">JackyQ</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/300419422/answer/2670950233?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">290 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/515360245?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">电动车电池寿命是多久？新电池如何选购？废旧电池换下来是如何处理的？如何才能不造成污染？</a><br><a href=\"http://www.zhihu.com/question/315413364?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">国家为何不统一纯电动车换电池的规格？</a><br>\n","link":"http://www.zhihu.com/question/300419422/answer/2670950233?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"巴西的很多汽车是烧酒精的，为什么国内不可以效仿他们去造酒精汽车呢？","date":"2022-09-20 02:32:41","description":"\n<p data-pid=\"Vi-RghWV\">这个问题里面有几个高赞答案我简单看了一下，有些说的是认为这是一个骗补的虚假技术，有些是从美国乙醇汽油发展谈的。和我的个人介绍一样，我在汽车相关企业工作（包含可研阶段直接到企业做横向课题）已经14年了，其中在2013年的时候直接负责过研究南美市场，因为一方面我们有现有发动机出口到南美地区（直到现在也是如此，但是都是M15以内的），另一方面，当时南美地区计划委托我们团队设计一款1.0L的发动机，并希望能够支持柔性燃料。我甚至一度已经被计划安排到巴西地区常驻2年以支持当地的国产化与产品应用。所以我算是从汽车企业一线对于南美地区以乙醇为主的柔性燃料答主中算是最熟悉的一个人吧。我适当从行业发展的角度谈一谈乙醇汽油的问题。</p>\n<hr>\n<h2>首先，因地制宜应当是所有替代燃料的基础。南美地区丰富的含糖类农作物是乙醇汽油风靡的基础。美国和我国的乙醇历史也各有资源背景。</h2>\n<p data-pid=\"9kkzWYXb\">巴西的乙醇汽油的历史可以追溯到1930s，甚至早于南美地区发现大量石油之前。巴西的基础是大量的甘蔗园地。因为甘蔗是经济作物，所以制糖出口和制乙醇换钱本身也没啥区别。而且尽管巴西后期也发现了大量的石油，但是由于巴西本国却长期依赖石油进口和从外国资本控制的石油公司购买石油，在很长一段时间并没有充分享受到石油资源的红利。其后果就是巴西本国政府对于乙醇汽油的发展一直非常支持。后面我们会提到FFV（ Flex Fuel Vehicle - 柔性燃料汽车），就是在巴西被列为政府政策推广的车型。</p>\n<p data-pid=\"oicHzCwR\">美国的乙醇汽油主要依赖的是本国的工业化农产品-玉米。玉米的价格是如此便宜，以至于在美国装船送到中国，到岸价格比中国本地玉米的采购价格还要低，而且品质稳定，颗粒一致性好。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c02528c63155b4797b0a73a27d02f428_720w.jpg?source=b1748391?rss\" data-rawwidth=\"650\" data-rawheight=\"415\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c02528c63155b4797b0a73a27d02f428\" data-watermark-src=\"v2-5d9eb88059b31c0406ab5499d9345572\" data-private-watermark-src=\"v2-3f7f3df4f400158c40d09c890f1b8b82\"></p>\n<p data-pid=\"Mqh4gg9r\">美国玉米的主要优势是：地理优势、大规模机械化和长期杂交育种。2017年，美国玉米全国平均产量为1.1万公斤/公顷（1466公斤/亩），而中国为6090公斤/亩（812公斤/亩），约为美国平均产量的55%，整体差距较大。这里要补充一下，根据统计，在2018年美国98%的玉米是转基因玉米，不过主要是为了大规模生产所需的抗病虫害目的。我个人由于我个人选择的原因，在有预算的条件下更倾向于购买非转基因玉米油食用。但是我也要强调的是，不能将美国玉米的高产量简单归结于转基因，其实核心还是农业机械化程度。如下表可见，中国的均摊的人力成本是美国的15.8倍。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a9a8ee6843274665a4dd55ed89aac7e3_720w.jpg?source=b1748391?rss\" data-rawwidth=\"641\" data-rawheight=\"195\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a9a8ee6843274665a4dd55ed89aac7e3\" data-watermark-src=\"v2-0be42aec01e3c8d068493a8352ef4f11\" data-private-watermark-src=\"v2-23b086100e23395980672b4cafdedd9e\"></p>\n<p data-pid=\"nVRQAE_l\">由于大平原，大规模机械化以及品种优势，美国大量的玉米除了满足本国的口粮之外，大量用在畜牧业是出口领域。但是价格自然就非常低廉。所以反过来，当发现玉米是糖类作物中可以高产乙醇的时候，自然就会有很多企业开始搞乙醇燃料提升附加值的事情。根据一些不完全统计，专门给乙醇企业提供玉米长期合同的农产主的收入在面对玉米价格波动的时候，可以因此增收40%左右。</p>\n<p data-pid=\"E8RtU2cr\">我国在2000年之后一段时间一度对关于乙醇汽油比较关注，一方面是随着国家的发展，对于汽柴油的需求越来越高，作为一个农业大国是否可以通过醇类燃料减少对外部燃油类资源的依赖是一个永恒的课题，另一方面，是当时由于国内连年粮食丰收，又加上历史上的多年粮食积累，每年中国都在抛弃报废大量的临库陈化粮。这些粮食不能给人吃，作为畜牧业消耗也不是很合适，有人就提出可以用来做乙醇，然后通过乙醇汽油来长期消耗。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2f87d4b5787accd1b22078ec98f3a096_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1080\" data-rawheight=\"877\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2f87d4b5787accd1b22078ec98f3a096\" data-watermark-src=\"v2-f018cea5a94a7474d1932b2e0f12cd5e\" data-private-watermark-src=\"v2-3cb3eaf39b5a3a3776db15638d0ed8d0\"></p>\n<p data-pid=\"lTsKiazP\">那个时候我还在学校，各类代用燃料也是我们研究的课题之一。其实在那个时候这个话题还和土地流转问题挂钩了。因为在那个时代突然有很多中国的所谓”自由经济学家“认为，耕地问题和粮食问题都是可以通过自由贸易和技术进步来取代的，所以需要解绑中国的18亿亩耕地红线，把更多的耕地转为建筑用地或其他灵活用地，从而实现经济可持续发展。</p>\n<p><img src=\"https://picx.zhimg.com/v2-c69a9d58bc4ff870e630db3553aa6179_720w.jpg?source=b1748391?rss\" data-rawwidth=\"985\" data-rawheight=\"778\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c69a9d58bc4ff870e630db3553aa6179\" data-watermark-src=\"v2-096c199e15ff8dc7cb6aaf7e066695a6\" data-private-watermark-src=\"v2-3bfa81e37de8bade354ba2caf167aab5\"></p>\n<p data-pid=\"YSwS5X1O\">然而，事实上从2005年-2011年，世界主要粮食生产国灾害频发，并直接导致了2006-2008年，2010-2011年两次世界粮食危机。恰恰是中国的粮食政策和耕地政策保障了中国平稳度过了这两个时期。目前我们正处在2020年之后的第三轮世界粮食危机的轮次中。</p>\n<p data-pid=\"gw8ZnD52\">所以2006年之后，关于陈化粮转乙醇的研究课题就渐渐消失了。在这过程中，美国的玉米转乙醇汽油技术同样被很多世界组织攻击，因为乙醇汽油消耗了本该廉价出口的大量玉米，而很多粮食自给率低的国家就是严重依赖美国的廉价玉米出口才能喂饱自己的国家国民。而美国在当时认为这就是自由市场自由买卖。</p>\n<h2>当粮食缺少5%的时候，不是粮食价格增长5%，而是当粮食价格上涨到5%的人口就算饿死也买不起的时候，价格增长才会停止。</h2>\n<p data-pid=\"EyI7o2nc\">所以从2006年以后，包括生物乙醇在内的所有生物质燃料研究的核心，是非粮化以及不与粮食作物争地。在靠植物转化方面，尽可能的使用非粮食作物和非畜牧业能用的生物质来制造。然后其问题就是成本太高，效率太低。</p>\n<p data-pid=\"dRt62OER\">所以国内的乙醇燃料产业一直发展的并不好。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c792383c276f79e28e2689e29954cc93_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1061\" data-rawheight=\"491\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c792383c276f79e28e2689e29954cc93\" data-watermark-src=\"v2-fe5b268be19126b2bd0ad701262aaa59\" data-private-watermark-src=\"v2-b9625d7fb454c801b3b075d487060387\"></p>\n<p data-pid=\"clSFfnCm\">目前国内四种制醇方案的参考价格（2017年媒体公布价格，仅作参考），煤制乙醇成本最低，这个后面讲，问题还是继续消耗煤炭这类石化燃料，算是灰醇或者棕醇，然后合成路径比较长，未来还是甲醇比较靠谱。粮食甘蔗就是遇到了使用粮食相关作物的问题。木薯的问题是国内种就要挤占耕地，进口的话那还是依赖进口。秸秆木屑制醇高赞回答说过几句，目前的问题就是成本高。所以想要补贴我也可以理解，因为算是碳补贴嘛。这个未来看中国的全生命周期碳排放和碳市场的筹建情况可能才会有比较市场化的优势条件。</p>\n<hr>\n<h2>说完了资源背景，我们说说技术和政策层面。</h2>\n<p data-pid=\"cYcNP2V-\">美国乙醇汽油在早期有两个很重要的推动因素。第一是石油危机带来的燃料自给的问题，这个大家比较好理解。第二是由于内燃机的尾气排放问题带来的，而且一直影响到现在。</p>\n<p data-pid=\"39mVYFdM\">普通的汽油的燃烧排放物中包含了各种污染物，其中一个很大的原因来自于汽油是一个多组分的石油提取物，主要成分是长链的碳氢化合物，含氧量较低。所以配合早期的发动机技术和后处理设备，燃烧产物复杂，排气可以看到黑烟和颗粒物粉末。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-70604e8f43cf3bf21c3059a4f1ede5b2_720w.jpg?source=b1748391?rss\" data-rawwidth=\"800\" data-rawheight=\"496\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-70604e8f43cf3bf21c3059a4f1ede5b2\" data-watermark-src=\"v2-516233886dbd40357ccc1e49781f2a33\" data-private-watermark-src=\"v2-6c386120884c4aab5a61801d0113f95c\"></p>\n<p data-pid=\"qqeMuqdc\">乙醇是一个含氧量比较高的短链碳氢化物，简单的来说燃烧的时候产物更简单，而且不会有黑烟存在。所以天生其排放产物就更加有利于清洁空气。所以无论是混合到汽油里面还是纯乙醇，都被认为是一种更加清洁的燃料。</p>\n<p data-pid=\"pKCreiJS\">不过到了1980s，尤其是到了1990s，由于一种划时代的伟大发明：三元催化器的出现，彻底解放了汽油机。只要当发动机的燃烧空燃比控制在一个合理的范围内，这个神奇的尾气处理机构可以实现将99%的有害尾气物质完全消除，而且还不需要定期添加耗材。与此同时，发动机的燃烧技术也在不断发展，燃料的脱硫以及提炼净化技术也在不断提升，与此同时还有各类的燃油添加剂技术的发展。所以1990s之后，替代燃料技术的环保优势不在，而且通过几个轮次的中东战争，中东几个强硬国家被打得服服帖帖的，石油限产问题基本被美国武力解决了，甚至美国自己也逐渐成为了石油出口国。对于石油的观念也在发展，最典型的例子是1970年就有人说石油会在未来50年内耗尽，但是实际的情况是过去五十年每年发布的石油储量越来越多，也就是说，石油越挖越多。</p>\n<p data-pid=\"dIKGVaVl\">与此同时，新能源汽车技术的发展成为了化石燃料未来发展替代的一个新的重要方向，那么替代燃料技术的关注度就更低了。</p>\n<p data-pid=\"EUGJWC28\">不过，这几年来，乙醇的关注度又起来了一些，主要是由于如下几个方面：</p>\n<ol>\n<li data-pid=\"93D7ptal\">化学汽油添加剂被禁用，乙醇作为汽油的添加剂被重视。由于很多短视频和科普文章的传播，很多人都知道含铅汽油添加剂被无铅汽油添加剂取代的事情。但是很多人不知道的是，目前一些无铅汽油添加剂由于可能对自然生态带来的其他影响而被一些发达国家禁用了。其中尤其是一种叫做MTBE-甲基叔丁醚，这是一种辛烷值改进剂，在历史上是取代含铅汽油添加剂的一种革命性的产物。但是这种组分在1999年被美国政府立法正式禁用了，原因是会污染地下水和深层土壤且在厌氧条件下无法短期降解，目前在国内还在被广泛使用。尽管工业界已经开发出了其他类型的替代物，不过价格偏高，那么乙醇作为一个很好的替代品，目前在美国MTBE被禁用后成为了唯一的高性价比添加剂。所以MTBE的被禁止又被人叫做“玉米商人的胜利”</li>\n<li data-pid=\"DAboHoDT\">碳排放问题的持续关注。很多人认为纯电动为代表的新能源汽车是减少碳排放的途径，然而事实上锂电池的碳排放和电力碳排放的问题依然非常严重。除了北欧等极少数国家之外，世界上绝大部分国家的电动汽车的实际碳排放在头10-15万公里是超过纯燃油车的。与此同时，基础设施的巨大投入以及将整个交通系统依靠在电网安全上也是非常危险的事情。低碳代用燃料的主要两个方向：1是以绿氢为基础的合成染料技术，2就是新一代的生物燃料技术。其中生物乙醇作为技术最成熟的技术之一，依然被很多地方所关注到。</li>\n</ol>\n<p data-pid=\"amE65C-W\">目前南美等国的主要降低国家碳排放的策略就是进一步提升生物醇类燃料的比例，一方面来说这是因为他们的资源特点，另一方面来说也和他们的国家在电力基础设施升级与三电技术的发展局限性有一定的关系。</p>\n<p data-pid=\"HnL0RlHq\">中国目前的未来技术趋势有很多讨论和争论。与此同时，国际绿党也在不断的影响中国的政府决策机构和舆论，一些国际ngo组织每年在中国为了系统性推动中国向绿色政策转型的政策游说投入就高达1000万美元以上。</p>\n<p data-pid=\"1G6YOVGY\">其实在我看来，一个大国的未来，交通运输业必然是多样化的，总体来说，宜电则电、宜油则油、宜醇则醇，宜氢则氢，国家主管部门应当以全生命周期的碳排放为基础，管好大处，然后把剩下的交给技术的自然发展和市场竞争。</p>\n<p data-pid=\"NPF9AuGf\">此外，更重要的，是始终重视产业的正常发展规律，关注就业和基础设施建设，特别是国家税金，一定要避免因为个别行业领军人物被影响了，就把数千亿级别的国家税金砸的跟玩一样砸给特定的企业。要有监控和追责的体系，更重要的是公开辩论和信息透明。一定要避免中国的汽车相关产业出现发电业和煤炭业一样的问题后，才想起来“先立后破”的道理。因为发生了一次，那叫经验不足，发生2次，那就纯粹是蠢和坏了。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/JackyQ?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">JackyQ</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/294651406/answer/2669237809?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">169 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/461142980?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">现如今有自动检测酒精的汽车吗？</a><br><a href=\"http://www.zhihu.com/question/468771388?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">酒精可以放在汽车上吗？需要注意什么？</a><br>\n","link":"http://www.zhihu.com/question/294651406/answer/2669237809?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"无人驾驶汽车真的适合城市道路吗？","date":"2022-09-20 02:29:57","description":"\n<p data-pid=\"6L7PZOzR\"><b>下图为SAE(汽车工程师协会）给出的自动驾驶级别的较为专业的一个版本。</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-0ec71e36976445f2347f92ebc7bd6a30_720w.jpg?source=b1748391?rss\" data-caption=\"（ODD：运行设计域 ；OEDR：对象和事件监测和相应；ADS：自动驾驶系统；DDT：动态驾驶任务；DDT回退：动态驾驶任务回退）\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"490\" data-watermark=\"watermark\" data-original-src=\"v2-0ec71e36976445f2347f92ebc7bd6a30\" data-watermark-src=\"v2-7efff65705e55e8639edf3a5145dc0eb\" data-private-watermark-src=\"v2-129355adeb7ee24b2241bae6cd1c2a9a\"></p>\n<p data-pid=\"QNt_Zbdp\">其中L3级别叫做有条件的自动驾驶，在路况不复杂的路段可以交由汽车进行自动驾驶，并允许驾驶员在开启L3级别的路段上脱离驾驶行为，可以短时间不用注意路况，只需要在紧急情况下的系统提醒报警，花几秒时间接收驾驶。打个比方，L3级别的自动驾驶就是个刚考驾照不久的新手，还需要老司机在旁边照顾，遇到复杂些的情景，很有可能就有些懵，需要老司机帮忙驾驶。</p>\n<p data-pid=\"FmkgbjTI\">L4级别则是高度自动驾驶，在绝大多数路况下和复杂环境下，都不期望用户能够立刻响应，在很多描述开启了L4级别的自动驾驶中，驾驶员是可以在车上睡觉，放心交给汽车自动驾驶的。这个L4基本就是老司机模式，甚至在某些方面比真人驾驶要强。你可以想象成大巴车由一个十来年安全驾龄的老师傅开着，你在车上安心睡觉的场景。</p>\n<p data-pid=\"zkdsfHPE\">L5级别就是终极自动驾驶模式了，这个模式下已经取消了原本的驾驶舱模式，任何路况下都不需要人员参与驾驶，甚至连方向盘、油门、制动踏板都不会备份。</p>\n<p data-pid=\"kgdzMliH\">自动驾驶的完成，类似人的驾驶行为，可以分为：</p>\n<p data-pid=\"ZpHIgtjG\"><b>感知———思考———行动</b></p>\n<p><img src=\"https://picx.zhimg.com/v2-5a899771651f7873ede4cd20fd7048cb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"463\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-9e51448d6ef477fc94ab425fc9f2ad03_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"836\" data-rawheight=\"611\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3><b>感知：</b></h3>\n<p data-pid=\"PprAfilU\">利用各类传感器，如摄像头、雷达、<a href=\"https://www.zhihu.com/search?q=%E8%B6%85%E5%A3%B0%E6%B3%A2&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2219920613%7D\" class=\"internal\">超声波</a>来感知和认识周围的环境。通常需要360°的全环境视图和高精地图配合GPS等来进行精准的定位，并能够检测驾驶员能否有能力控制车辆。</p>\n<h3><b>思考:</b></h3>\n<p data-pid=\"V_90XRwR\">通过车辆计算机的软件和智能算法执行，处理和解释感知得到的数据。整个过程必须要在非常短的时间内完成，因为如果时速120公里/小时，一秒的时间就足够车辆窜三十几米远了。所以，得要求车辆电脑在毫秒级别就要思考完毕，并得出可靠的预测，规划下一步合适的驾驶策略。</p>\n<h3><b>行动：</b></h3>\n<p data-pid=\"dTNcIRi2\">考虑到周围环境的所有感知数据和定位，能独立、快速、安全、精确地使用动力系统、转向系统和制动系统来移动车辆，使得思考的驾驶策略付诸实践。</p>\n<p data-pid=\"k-s9HUQm\">综合来说，一辆车通过多个摄像头（含<a href=\"https://www.zhihu.com/search?q=%E7%BA%A2%E5%A4%96%E7%BA%BF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2230352110%7D\" class=\"internal\">红外线</a>），毫米波雷达，激光雷达，<a href=\"https://www.zhihu.com/search?q=%E8%B6%85%E5%A3%B0%E6%B3%A2%E4%BC%A0%E6%84%9F%E5%99%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2230352110%7D\" class=\"internal\">超声波传感器</a>，声音传感器，GPS接受数据，<b>进行感知技术的处理</b>，全方位的传感器融合探测周围的环境，同时通过V2X（车辆对周围交通系统进行通讯）、高精地图了解到更广阔的外界环境，再感知之后进行一系列的思考，<b>进行路径规划</b>，交通标志、信号灯识别，紧急车辆识别等，<b>最后决定行动</b>，如等待，加速，转弯，避障，避撞，穿越众多移动物体等。</p>\n<p><br></p>\n<p data-pid=\"Xr03aaBV\">上面简单介绍了下自动驾驶的一些内容，再说下自动驾驶，比如L3级别的智能驾驶能否在城市道路上开启。</p>\n<p data-pid=\"ydHJEo4P\">答案是很难，非常难，现阶段虽然在我所住的武汉的某个特定区域开通了无人自动驾驶出租车。但并不能说这就已经是成熟的L3或者L4级别的自动驾驶了。</p>\n<p data-pid=\"jnpr9d3b\">2022年8月9号，武汉经开区已经可以叫真正的无人驾驶出租车了，用手机叫单后，无人驾驶汽车驶进了站点。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5f0d9e76aa1d8fc7d78e0ef7e31e1608_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"300\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"oDc5TTNt\">这是没有驾驶员和安全员在车上的<b>真*无人驾驶，全程没有司机。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7c8785b96b27e1b97f09a15c9a1ce607_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"289\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"2A952jlR\">但是这些自动驾驶路段，我所知道的，关于辅助硬件的感知设备和网络铺设已经进行了数年。</p>\n<p><img src=\"https://picx.zhimg.com/v2-a1c7c3813ece27c29aff8d040bf90078_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"644\" data-rawheight=\"301\" data-watermark=\"watermark\" data-original-src=\"v2-a1c7c3813ece27c29aff8d040bf90078\" data-watermark-src=\"v2-db188136a12486633dd60036cfb3067d\" data-private-watermark-src=\"v2-54897d3613cfc93ad7d4fdd05031a231\"></p>\n<p data-pid=\"rY86sePD\">看见了这些复杂的各种摄像头没有，看不到的还有5G的各类信号塔来保障高速网络的通畅和前期的无数遍的扫描测试。2021年10月20日，模拟密集通信场景 2021 C-V2X“四跨”（跨芯片模组、跨终端、跨整车、跨安全平台）车路协同测试在武汉启动，超过70家企业参与其中。</p>\n<p><img src=\"https://pica.zhimg.com/v2-11ea0ca126241bfa785053fd31cd9ddb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"qNeLSfOY\">可以说，这些道路已经被激光雷达和各类辅助设备扫描精确到了厘米级别，<b>高精地图+汽车高感知设备+基建的V2X设备+云端超高算力芯片+5G网络</b>，才能推出这种超高成本的固定路线的无人驾驶。</p>\n<p data-pid=\"D1Qa4eD8\">且这种无人驾驶并非是完全无人，而是在安全运营上进行了远程监控方面进行了一对一的服务。也就是一个跑了这些路很多次的老司机在远程监控着你所在无人驾驶汽车的驾驶，利用5G的高速和低延迟准备随时远程接管驾驶来确保乘客的安全。</p>\n<p data-pid=\"olyTVncq\">个人觉得，真正的要适合城市复杂路况的无人驾驶还需有走很远的路。</p>\n<p data-pid=\"wLsUEYPJ\">真正的无人驾驶只能在低速状态下的货物运输，在人流量稀少的远城区通行，或者路况简单、标志线清晰的高速公路上进行足够的安全测试，才能谈进入到城市的复杂路况中。</p>\n<p data-pid=\"wmmkMbzd\">因为车辆作为载人的工具，而人的生命安全是无价的，意味着车辆一旦进入自动驾驶状态，是不能有一点纰漏的。否则哪怕百万分之一的出事故的可能，如果普及到了数量到了亿级别的汽车上，都会成为百分百的大批量伤亡事故。</p>\n<p data-pid=\"BGujDi-2\">比如路上出现这种车，现在的汽车自动驾驶能识别出来前方是啥物体，能自动刹车吗？</p>\n<p><img src=\"https://pica.zhimg.com/v2-edb0f8bd77d41e61d1c108477c56c0ca_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"329\" data-watermark=\"watermark\" data-original-src=\"v2-edb0f8bd77d41e61d1c108477c56c0ca\" data-watermark-src=\"v2-fbd262f87ac3757c94b4b5c12a41ab76\" data-private-watermark-src=\"v2-b25296ba2981d7ef1c84d229f95aae8a\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d4c8de0c5e5818aedb76a774a40aa965_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"647\" data-rawheight=\"463\" data-watermark=\"watermark\" data-original-src=\"v2-d4c8de0c5e5818aedb76a774a40aa965\" data-watermark-src=\"v2-ad5a133ddaae168d26d0c4c9c9f59244\" data-private-watermark-src=\"v2-57e3965d39383fc9d0d3a0f41b1757b6\"></p>\n<p data-pid=\"DEdVS-_F\">对智能驾驶的主动刹车原理迷惑的，以为遇到障碍物就能刹停的，可以看我这篇回答。</p>\n<a href=\"https://www.zhihu.com/question/20498808/answer/2238356312\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pica.zhimg.com/v2-202a210f63d35dbb2727ab2e2c616abd_qhd.jpg?source=b1748391\" data-image-width=\"720\" data-image-height=\"405\" class=\"internal\">为什么汽车不能设计成快撞车就自动刹车？</a><p data-pid=\"czLAP96Z\">最后说个题外话，我之前去试驾某国产品牌的新车型，销售小哥非常硬气，对我“科普”了很多自动驾驶的知识，鄙视其他品牌的智能驾驶，说智能驾驶和自动驾驶不一样。说自己品牌实际想上L3/L4级别的自动驾驶就可以上，就是限于国家法规不能上市而已，要不然早就可以自动驾驶了。现在他们公司也即将推出一个月收费大几百的自动驾驶包，实现真正的自动驾驶。</p>\n<p data-pid=\"P01KFzY2\">我问他感知设备都不全，实时的全方位探测茧都没有，连激光雷达就顶部一个，连底盘图像也是延时拼接的，怎么能说上自动驾驶就上了，那不是到处都是安全隐患。他依旧提高了音调说自家的技术先进，几次指出我用词不对，为什么不相信他，我这个小白咋啥都不懂。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-127221a0c2299b6fc7d06a1c4593b148_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"402\" data-watermark=\"watermark\" data-original-src=\"v2-127221a0c2299b6fc7d06a1c4593b148\" data-watermark-src=\"v2-010a47a9d574b51b8a9eaa1c3bbe5530\" data-private-watermark-src=\"v2-daf08bfb0f1c869238f57277d7e65a01\"></p>\n<p data-pid=\"UzktKaJ3\">关于自动驾驶的感知设备要求，可以看下我之前写的这篇回答，就知道仅仅感知设备的调试和融合，难度就有多大了。</p>\n<a href=\"https://www.zhihu.com/question/269217888/answer/2235733975\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-a94d2f0cc3e785c2d3526c3472203eb0_qhd.jpg?source=b1748391\" data-image-width=\"1275\" data-image-height=\"712\" class=\"internal\">汽车的自动驾驶技术为什么要采用那么多传感器？</a><p data-pid=\"bZnKwbez\">我后来没有和销售小哥继续“探讨”自动驾驶，只是感叹某国产品牌的强悍力量，连销售小哥都对此深信不疑，自然会和消费者宣扬自家智能/自动驾驶技术的强悍，所以怎么能怪消费者盲目相信智能驾驶是可以百分百保障驾乘人员安全的了。</p>\n<p><br></p>\n<p data-pid=\"yPcG7HMb\">（图片来源网络，侵删！）</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/384519954/answer/2663706879?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">39 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/546551524?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">无人驾驶汽车要想彻底落地，需要解决哪些难题？</a><br><a href=\"http://www.zhihu.com/question/266697951?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021年，无人驾驶车队会到来吗？</a><br>\n","link":"http://www.zhihu.com/question/384519954/answer/2663706879?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"React 为什么重新渲染","date":"2022-09-06 08:29:00","description":"\n<p>更新（重新渲染）是 React 的重要特性 —— 当用户与应用交互的时候，React 需要重新渲染、更新 UI，以响应用户的输入。但是，React 为什么会重新渲染呢？如果不知道 React 为什么会重新渲染，我们如何才能避免额外的重新渲染呢？</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/186432/20/28325/37613/631725bbEf2ff226e/66b99021df66578b.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/react-re-renders-101/\">https://blog.skk.moe/post/react-re-renders-101/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/react-re-renders-101/"},{"title":"为什么你不应该在 React 中直接使用 useEffect 从 API 获取数据","date":"2022-08-19 08:53:00","description":"\n<p>React 是一个由 Facebook 开源的、可以在任意平台上构建 UI 的 JavaScript 库。在 React 中，一个常见的 Pattern 是使用 <code>useEffect</code> 搭配 <code>useState</code> 发送请求、将状态从 API（React 外部）同步到 React 内部、用于渲染 UI，这篇文章恰恰在向你介绍为什么你不应该直接这么做。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/180676/37/27394/27265/62ff57f2E600b3725/cff75c5fca39bbcc.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/\">https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/"},{"title":"NPM 自动更新版本号","date":"2022-08-04 05:00:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>ChenYFan 大佬的文章：<a href=\"https://blog.cyfan.top/p/d3c51290.html\">SpeedUp!使用黑科技为你的网站提速</a> 有提到过将 Hexo 博客的全部静态文件上传至 NPM 达到加速效果。</p>\n<p>但是 NPM 版本号不能重复，而且为了精准命中缓存和防止边缘 <code>@latest</code> 缓存过长，就必须指定版本号。</p>\n<p>本人在 <a href=\"https://blog.yfun.top/posts/2876015612/\">我的图床解决方案</a> 一文中使用的方法是 <code>npm version patch</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804133426.png\"></p>\n<p>但这个方法也有一些弊端，比如 <code>patch</code> 只会更新 <code>z</code> 位数的版本号，而且并不会上传至仓库，很可能会出现版本号冲突导致上传失败。这就是为什么最后还需要重新推送 Git 提交。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%95%E8%AF%95%E7%9C%8B\" class=\"headerlink\" title=\"试试看\"></a>试试看</h2>\n<p>NPM 版本号遵循 <code>semver</code> 规范，格式为 <code>major.minor.patch</code>。</p>\n<p>为了在获取最新版本号的时候不发生混乱，我选择先获取最新的版本号。</p>\n<blockquote><p>记得把 <code>cky-blog-static</code> 改成自己的项目名。</p></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>获取到最新版本号后，就可以对版本号进行分析。</p>\n<p>以 <code>1.4.7-b541af2ea284a39da0bbf63b88fdb65c</code> 为例，先按 <code>major.minor.patch</code> 分离。当然，也需要考虑版本号后还有 <code>build metadata</code> 的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\"><span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure><p><del>为了版本号好看些</del>，可以通过判断实现满十进一。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位小于 9，直接 +1</span></span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">} <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位大于等于 9，y 位小于 9，y+1, z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\"><span class=\"comment\">// z 大于等于 9，y 大于等于 9，x+1,y=0,z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>最后，重新拼接版本号。如果担心服务器缓存版本号导致冲突，还可以加上一些随机字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br></pre></td></tr></table></figure><p>将最新的版本号信息重新写入 <code>package.json</code> 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">packageJson.version = newVersion;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p><del>直接 CV 代码！</del></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新 package.json 版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fetch = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-fetch\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">\"js-md5\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> update = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">    verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newVersion);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">    packageJson.version = newVersion;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">    fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Complete!!\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">update();</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%90%8E\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>如果是 Hexo 文件部署，就可以直接把文件直接丢在项目根目录，Action 集成部署加上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node update.js</span><br></pre></td></tr></table></figure><p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804135818.png\"></p>\n<p><del>Blog 半年没更新，除除草 --(....</del></p>\n","link":"https://blog.yfun.top/posts/2022/auto-update-npm-version/"},{"title":"我有特别的 DNS 配置和使用技巧","date":"2022-07-28 15:31:00","description":"\n<p>众所周知，DNS 的作用与电话簿类似，将人类可读的域名映射到机器可读 IP 地址、使人更方便地访问互联网。DNS 是非常重要的互联网基础设施，对于改善上网冲浪的体验中的重要程度不容小觑。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/96381/31/31172/23930/62e2ab5bE554d388b/37027f4a03351b9e.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/i-have-my-unique-dns-setup/\">https://blog.skk.moe/post/i-have-my-unique-dns-setup/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/i-have-my-unique-dns-setup/"},{"title":"优化博客的累计布局偏移（CLS）问题","date":"2022-06-07 17:24:00","description":"\n<p>距离上一篇文章发布已有四个月了，是时候写几篇文章给博客除草了。上一次我介绍了我如何迁移、重构了我的博客的架构，这次我想来谈谈我在重构中优化和打磨访客体验时解决的一个问题。我的博客优化之旅 图片 lazyload 的学问和在 Hexo 上的最佳实践 我的博客有多快？ 天下武功，唯快不破 —— 我是这样优化博客的 ...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/206311/26/14625/38940/629f7f81Eb11312de/b1e67f07b1cc9bc7.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/fix-blog-cls/\">https://blog.skk.moe/post/fix-blog-cls/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/fix-blog-cls/"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]