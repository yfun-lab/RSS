[{"title":"密室逃脱是如何保持重复可玩性的?","date":"2022-09-05 13:51:16","description":"\n<p data-pid=\"FVB-PvYM\">简单来讲，早期大型密室的复购靠的是超高的难度来强行限制玩家单次通关的可能性，你必须来个两到三次才能体验到完整的内容，因为实在太难。</p>\n<p data-pid=\"sMvFvAG3\">现在的大型密室就友好很多了，复购可以靠多结局的设计，玩家对不同角色、不同阵营的选择，最适合复刷的是多npc的沉浸式演绎剧场，有认识的老板跟我说有复刷过一百来次就为了跟不同的npc聊天的（有钱）玩家。</p>\n<p data-pid=\"3GWbyp5M\">之前做过比较详细的科普视频，有兴趣的朋友戳开视频看一下详细回答思路。</p>\n<a href=\"https://www.zhihu.com/zvideo/1550231440972787712\">密室复购率是怎么回事</a>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/pu-wu-66?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">蒲熠星</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/23898381/answer/2661192984?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/319264919?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">密室逃脱真的好玩吗？</a><br><a href=\"http://www.zhihu.com/question/427295175?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">可不可以讲一下玩密室逃脱的经历啊？</a><br>\n","link":"http://www.zhihu.com/question/23898381/answer/2661192984?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"超长篇哆啦A梦漫画哪一部水平最高？","date":"2022-09-05 10:40:50","description":"\n<p data-pid=\"SolqULT_\">如果把《哆啦A梦大长篇》比作闪耀的群星，那《大雄与铁人兵团》一定是其中最璀璨的一颗。这部仿佛浑然天成的作品，凝聚了藤子·F·不二雄精巧的构思、磅礴的展开以及发人深省的思想。从宏观来说，这是一部展现宇宙战争的史诗，讲述了来自外星的机器人王国企图征服地球最终失败的经历；而从微观来看，这是一段关于成长与救赎的故事，描绘了机器人莉露露在与五人组的接触中对人类从蔑视到尊重的转变历程。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5b01983183d56e6504aba703b95afb49_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"717\" data-rawheight=\"657\" data-watermark=\"original\" data-original-src=\"v2-5b01983183d56e6504aba703b95afb49\" data-watermark-src=\"v2-bf645da598b2d88aee2f79e91e955981\" data-private-watermark-src=\"v2-f249255f4aec8615a36e1f3770d535b7\"></p>\n<p data-pid=\"0PBAMUAv\">我一直认为，解读莉露露这个角色，就是解读《铁人兵团》这部作品。而在解读莉露露时，我必须提出一条被许多人忽视，却贯穿整部作品的重要线索——<b>莉露露手指的光线</b>。这束光线一共出现了四次，也标志着莉露露人物形象的四个阶段。</p>\n<hr>\n<p data-pid=\"jf4lYI6i\">光线第一次出现，是在莉露露出场的时候。在北极萧瑟的寒风之中，从茫茫的冰原远处缓缓走来一位衣着单薄的少女。她面无表情地举着一样装置，即使是面对凶残的北极熊也只是面不改色地灵巧躲过，从手指中发出光线将它击晕。<b>冷酷、强大而神秘——这是莉露露给读者留下的第一印象。</b>这个时候的莉露露，完全以麦加托比亚间谍的身份行动。她的眼中只有祖国交给她的任务，一直只是为了建设军事基地而勤恳工作。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-715dd9e458f74f705a2e86393f2afbb0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"655\" data-watermark=\"original\" data-original-src=\"v2-715dd9e458f74f705a2e86393f2afbb0\" data-watermark-src=\"v2-caf51be4e8add7f176636d1177d4b62b\" data-private-watermark-src=\"v2-95e84afd986ae8e00da552e7975372fa\" data-tags=\"porn\"></p>\n<hr>\n<p data-pid=\"c2M4vpah\">来到大雄所在的小镇后，莉露露的衣着已与普通女孩无异。她开始在人类生活的地方活动，也开始接触人类与之对话。有意思的是，在面对胖虎和小夫的时候，她面无表情，一言不发就扭头离开；而在与大雄交谈的时候，她却时常面露微笑，最后还说了声“谢谢”。更令人惊讶的是，当大雄和哆啦A梦发现她的真实身份时，她并没有慌张、也没有恼怒，而是表示自己非常“<b>喜欢</b>”大雄，正想要他来协助自己。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-03fbbe008d0f13afac0895911831bc32_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"731\" data-rawheight=\"572\" data-watermark=\"original\" data-original-src=\"v2-03fbbe008d0f13afac0895911831bc32\" data-watermark-src=\"v2-c5baf756c3e974c667481014784c791b\" data-private-watermark-src=\"v2-eea9e1b02a7e809f0bd8cd7916f92465\"></p>\n<p data-pid=\"HWXToW9S\">莉露露为什么对大雄如此特别？简单对比胖虎小夫和大雄对待莉露露的态度，答案显而易见。小夫炫耀自己的机器人未果后恼羞成怒，气急败坏；而大雄从一开始就对她亲切有加，笑容以待。然而这就足以让她“喜欢”大雄吗？其实不然。且让我们记住一件事：莉露露并不是人类。虽然外型被设计得和人类几乎一模一样，但<b>她并不能完全理解人类的想法，尤其是关于人类的情感联结</b>。这一点从她对“外国人”、“朋友”、“妈妈”等词语表示不解可以得以印证。既然如此，那她又怎会明白“喜欢”这个词深层的含义呢？</p>\n<p><img src=\"https://pic2.zhimg.com/v2-599022a43e979f619fca3c9020034105_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"399\" data-rawheight=\"271\" data-watermark=\"original\" data-original-src=\"v2-599022a43e979f619fca3c9020034105\" data-watermark-src=\"v2-8b57b9e9cf954b6884e9ed51045429b7\" data-private-watermark-src=\"v2-7143c8b22267dd3f5b4116033f0050d5\"></p>\n<p data-pid=\"RctRyPfD\">或许，<b>莉露露只是因为大雄对她亲切而误把他当成了自己的伙伴罢了</b>。她不会理解，大雄身为地球人决不会容许奴役计划的实行；她也不会理解，大雄对她温柔只是因为他对任何人都很温柔。在她的眼中，敌人就应该像胖虎和小夫一样，没有对她温柔的理由，而大雄安慰了她、帮助了她，便一定不是她的敌人，或许还可以在入侵地球的宏伟蓝图中助她一臂之力。</p>\n<p data-pid=\"6AeDM660\">在这错误的认知中，莉露露急切地想要抓住大雄，用手指发射出第二道光线。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-054d5231da4e291ec29596e5bf43759d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"706\" data-watermark=\"original\" data-original-src=\"v2-054d5231da4e291ec29596e5bf43759d\" data-watermark-src=\"v2-787c7b3b1784389550f8583705eb2fe2\" data-private-watermark-src=\"v2-f3d6845157dc70a42baa5f8656383d11\"></p>\n<hr>\n<p data-pid=\"_NxpCSaw\">这道光线并没有瞄准大雄的身体，而是打落了他和哆啦A梦的竹蜻蜓。可为时已晚，两人还是得以逃离镜中世界，而莉露露企图用蛮力将连接处撕开大口却引发次元震，入口被完全封闭，她自己也身受重伤被埋在了废墟之中。后来，静香误打误撞地发现了她，一个崭新阶段的序幕就此拉开。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d5f005ae6d693d84612d23152c0ff22b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"275\" data-watermark=\"original\" data-original-src=\"v2-d5f005ae6d693d84612d23152c0ff22b\" data-watermark-src=\"v2-ef0e55d69b14468b4f87d765a9cb7046\" data-private-watermark-src=\"v2-364b4e33d8dd70ef0e8ce7a7e42769b0\"></p>\n<p data-pid=\"2Xa9daeU\">此前莉露露与人类的交流仅限于任务所需，内容浅尝辄止。然而在和静香的相处中，两人<b>思想与价值观的碰撞</b>在略显紧张的气氛中缓缓展现在读者的眼前。</p>\n<p data-pid=\"HO546Ke6\">初遇之时，莉露露便做出了惊人而恐怖的举动：被静香发现机器人的身份后，她用手掐住了静香的脖子，恐怕真的动了杀心。毕竟如果奴役人类是理所应当，那残杀他们又有何不可呢？然而静香并没有因此而害怕她、讨厌她。她不想用恶意去揣测这位身负“重伤”的“女孩”，宁愿相信是故障才让她伤害人类，甚至将她接到家中治疗。</p>\n<p><img src=\"https://pica.zhimg.com/v2-e961eb3f08d66ff485a97eae75d6ca31_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"730\" data-rawheight=\"588\" data-watermark=\"original\" data-original-src=\"v2-e961eb3f08d66ff485a97eae75d6ca31\" data-watermark-src=\"v2-961e6ae451c004d6620b39d97a3f4d23\" data-private-watermark-src=\"v2-fa4c68262d961094f572a1e45a1108a7\" data-tags=\"porn\"></p>\n<p data-pid=\"UMzlM5s7\">对于莉露露而言，这种行为简直不可理喻。在她利益至上的视角里，帮助自己这个敌人对静香没有任何好处。她没有想到的是，静香并没有站在敌人的立场上去思考问题，而是仅仅把她当作需要救助的伤员，当作与人类平等的存在。<b>她也并不需要任何利益作为理由，所做的一切完全出自最本真的善意。</b></p>\n<p data-pid=\"hIO2hkp3\">困惑的莉露露向静香表明了麦加托比亚侵略地球的目的：一向实行奴隶制的麦加托比亚，在“机器人平等”的新思想指引下终于解放了饱受压迫的奴隶机器人。可是，解放奴隶所空出的劳动力该如何填补？机器人们想起了那个代代相传的神话：麦加托比亚历史的开端，正是神明抛弃了自私自利、相互残杀的人类，创造了这个由机器人主导的社会。<b>既然人类是被神所抛弃的种族，那将他们奴役作为劳动力造福机器人又有何不可呢？</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-e2ec847ac1822c808646436dbac4532c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"730\" data-rawheight=\"268\" data-watermark=\"original\" data-original-src=\"v2-e2ec847ac1822c808646436dbac4532c\" data-watermark-src=\"v2-20b1b0825f8a68a94338c5c6325b9fb5\" data-private-watermark-src=\"v2-0f3845be66219413a6c3abbc572f68f9\"></p>\n<p data-pid=\"jUC_7H-v\">静香静静地听着她讲述机器人社会的故事，“社会阶级”、“奴隶制”、“废奴运动”……这些熟悉的词语在她的耳边回响，把她的思绪带到了并不遥远的过去。于是，她淡淡地说了一句：</p>\n<blockquote data-pid=\"3Z7pRX1b\"> 简直像在重演人类的历史一样。</blockquote>\n<p data-pid=\"f1H_14nd\">她说得没错。早在12世纪英格兰就曾宣布过奴隶制非法，本土的农奴逐渐消失。<b>然而在大英帝国的急速扩张中，奴隶贸易却成为了英国人的一项“财富密码”。</b>漂洋过海的黑奴为英国各个殖民地提供了大量廉价劳动力，其种植的甘蔗、烟草、棉花等经济作物让帝国赚的盆满钵满。截止1807年，约有350万名黑奴由英国的船只跨越大西洋运往世界各地接受惨无人道的虐待，而英国王室对此不但不明令禁止，反而与贩奴者同流合污，为奴隶贸易的开展提供了大量便利。即使到了18世纪，启蒙运动中人人平等的思想已然广泛传播的时代，仍有休谟这样的另类说出了“黑人们自然比白人低下”这样傲慢的言语。这又与“宇宙是为机器人存在的”这样的想法何其类似呢？</p>\n<p><img src=\"https://picx.zhimg.com/v2-7479074dcf279dffa54f96dab071f408_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"482\" data-watermark=\"original\" data-original-src=\"v2-7479074dcf279dffa54f96dab071f408\" data-watermark-src=\"v2-cdedbfb9c74c87b98617537003dfc221\" data-private-watermark-src=\"v2-ebe9e424cdc6e39dd6d8356d1d4b51c0\"></p>\n<p data-pid=\"2WOxXer6\">况且，在奴隶贸易停止之后，剥削就真的消失了吗？还是说，这种剥削又被偷偷转移到其他群体了呢？想必大家都知道答案。英国工业革命开始后，<b>工人阶级开始走上历史舞台，随之而来的还有靠压榨其剩余价值为生的资产阶级</b>。那时有的棉纺纱工厂的孩子们，要在6岁起就从早上5点到晚上9点学做工，换来的只是刚刚能够果腹的食物、闷热恶劣的工作环境以及肮脏简陋的贫民窟住所。这样的待遇，相比奴隶而言又有何区别呢？</p>\n<p data-pid=\"YTqq8oK5\">但就是这样一句简单的陈述，却直接跨越了莉露露心中的红线。支撑着她一路走来的，正是为麦加托比亚创造“天国般的社会”的理想。而这一理想的基石，正是“机器人是宇宙的主宰，而人类是被抛弃的垃圾”这样的信念。也难怪莉露露会把那番话语当作对机器人的侮辱：<b>承认静香的话语，就是在否认自己存在的意义。</b></p>\n<p data-pid=\"wmLRKwUY\">被激怒的莉露露抬起尚未痊愈的手臂，带着对人类的轻蔑与憎恶发射出第三道光线。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-80b65320e2e5fe94927e4ead25b9fb55_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"734\" data-rawheight=\"626\" data-watermark=\"original\" data-original-src=\"v2-80b65320e2e5fe94927e4ead25b9fb55\" data-watermark-src=\"v2-fc943ff925da7304e43536e77b02e3de\" data-private-watermark-src=\"v2-51590bd4785771bd936836fd4321bfa3\" data-tags=\"porn\"></p>\n<hr>\n<p data-pid=\"rzfhfW9s\">静香应声倒地，所幸莉露露还没有完全恢复，看似猛烈的光线只对她造成一点擦伤，莉露露自己却再次陷入昏迷。当莉露露再次醒来的时候，静香仍然带着笑脸照顾着她。她所不知道的是，这个坚强的女孩在昨晚也曾一时间产生了放弃的念头，但或许是宁静的夜空安抚了她受伤的心，静香最终还是回到了莉露露的身边。</p>\n<p><img src=\"https://picx.zhimg.com/v2-0468a390c72f88d7a3b34742feae487b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"333\" data-rawheight=\"269\" data-watermark=\"original\" data-original-src=\"v2-0468a390c72f88d7a3b34742feae487b\" data-watermark-src=\"v2-640783acfafb9917ed4c0492cc51efbd\" data-private-watermark-src=\"v2-47e3b7a415cff2846519046dbe3924e5\"></p>\n<p data-pid=\"6QQXITt-\">莉露露愈发困惑了，这个女孩明明一直在被自己伤害，明明知道铁人兵团的恐怖之处，为什么还要对自己如此温柔？难道她也是站在麦加托比亚这一边的吗？不！昨晚她一直痛斥着把人类当作奴隶的荒谬，显然并不接受麦加托比亚的统治。<b>如此明显的矛盾让她开始质疑自己对人类的看法</b>，并再次向静香抛出了那个问题：“为什么要救助敌人？”</p>\n<p data-pid=\"1gT-e2tN\">这一次静香没有回避这个问题，微笑着告诉她：</p>\n<blockquote data-pid=\"g0zEw8a9\">\n<b>人类就是会做出不合情理的事。</b><br>\n</blockquote>\n<p><img src=\"https://pica.zhimg.com/v2-a4f65bb774986aa06a6b04cb0a9e0fe3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"272\" data-watermark=\"original\" data-original-src=\"v2-a4f65bb774986aa06a6b04cb0a9e0fe3\" data-watermark-src=\"v2-98af268f217881a2b00000abd7d671f9\" data-private-watermark-src=\"v2-9b2ca3d6af6daf4570886e289423dabe\"></p>\n<p data-pid=\"aQ4bWXM7\">莉露露是否理解了这句话，我们不得而知。不过至少她明白了，<b>人类有自己的思想，自己的信念，自己的情感</b>，支撑着他们费劲心思做一些毫无利益可言的怪事。他们不是没有智慧的野兽，不是她想象中那样低浅的生物。难道是自己错了吗？是自己一直以来坚信的、在麦加托比亚被当作理所当然的思想错了吗？是希望机器人建立天国的神明错了吗？……</p>\n<p data-pid=\"GVoE-l9f\">两种想法在她的脑内激烈的碰撞，她还不愿相信，整个铁人兵团就是个错误；她还需要验证，人类是否真的能在巨大的利益面前选择虚无缥缈的所谓的“善良”。于是，她悄悄吐出静香喂给她的安眠药，溜出了房间。她要用自己的双眼见证，大军压境之时，人类究竟会作出怎样的抉择。</p>\n<p><img src=\"https://pica.zhimg.com/v2-a2a034651ac2077467c57bc407db1238_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"267\" data-watermark=\"original\" data-original-src=\"v2-a2a034651ac2077467c57bc407db1238\" data-watermark-src=\"v2-0fabf09985acf284f1206c533f71d593\" data-private-watermark-src=\"v2-d49eca9834e3d616e2de47ac259c3fc5\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"hgftKVYn\">当大雄找到逃走的莉露露时，她正坐在因遭受炮火而破败不堪的地下通道的台阶上若有所思。为什么是这里，难道铁人兵团犯下的暴行她都看到了吗？若是如此，她目睹着高楼大厦刹那间变为断壁残垣时又作何感想呢？她是否还坚信，这场战争是正义的呢？我们不得而知。但很显然，在被大雄找到之前，她有充足的时间回到铁人兵团执行自己的职责，但她没有这么做，她的内心仍然在挣扎，而这种挣扎也体现在这一格的分镜上——<b>阳光与阴影将画面分割成了明暗两色，大雄站在光明的一侧，而莉露露恰巧坐在两者的交汇处，低头面对着黑暗。</b></p>\n<p><img src=\"https://picx.zhimg.com/v2-416b1c1a224c72e38f4f163905c350d1_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"539\" data-watermark=\"original\" data-original-src=\"v2-416b1c1a224c72e38f4f163905c350d1\" data-watermark-src=\"v2-14c0b631e9898c304727149f0bbacb26\" data-private-watermark-src=\"v2-62bf7d1ecebb4cd2a39cca9a4c6bd8cb\"></p>\n<p data-pid=\"uQFM13kH\">看到了大雄的莉露露久违地露出了笑容，她终于能从胡思乱想之中解脱了。她直截了当地告诉大雄自己要向铁人兵团报告他们的计划，看到大雄举起休克枪的那一刻，她明白，机会终于来了。</p>\n<p data-pid=\"LO1KAsF5\">她退回了黑暗。<b>只要大雄一扣动扳机，就说明静香“善良”到怜悯敌人的行为要么只是千万人类中的一个特例，要么就是做个样子，是为了麻痹自己而撒下的弥天大谎。</b>到了危急时刻，他们终究还是会暴露自己的本性，为了自己的利益、为了人类的利益作出最正确、也最冷血的选择。那样的话，自己就可以放下顾虑，继续坚守一直以来的信念，跟随铁人兵团创造更美好的机器人世界。</p>\n<p><img src=\"https://pica.zhimg.com/v2-0ba2fd0af7cb9c0812ce5ea67f6f14e9_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"463\" data-rawheight=\"319\" data-watermark=\"original\" data-original-src=\"v2-0ba2fd0af7cb9c0812ce5ea67f6f14e9\" data-watermark-src=\"v2-a57eb9d3705af7f108e05641ff3c8438\" data-private-watermark-src=\"v2-6dacb6c92a4719e09984898ada317212\"></p>\n<p data-pid=\"e23_cBxP\">然而，眼前的这个男孩却浑身颤抖，无力地举着枪，丝毫没有要开枪的意思。急不可耐的莉露露向他喊道：“开枪吧！只有这样你才能阻止我！”</p>\n<p data-pid=\"pYcRiYRw\">而此时她的内心也在呐喊道：“<b>开枪吧！只有这样我才能从迷惘中解脱！</b>”</p>\n<p data-pid=\"MEITLTmw\">“开枪吧！”</p>\n<p data-pid=\"dcP1UzOJ\">“开枪吧！！！”</p>\n<p data-pid=\"Pa6ew__I\">“你这个窝囊废！”</p>\n<p data-pid=\"_l-mLfIm\">面对迟迟没有扣动扳机的大雄，莉露露终于艰难地作出了决断，带着觉悟发射出最后一道光线。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a073bcbde1c432d2ca6c6230e77ae26e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"196\" data-watermark=\"original\" data-original-src=\"v2-a073bcbde1c432d2ca6c6230e77ae26e\" data-watermark-src=\"v2-b6038b645b905c0ae4ca00b1c76a5c20\" data-private-watermark-src=\"v2-829af4638966c601a8c90e50b0293322\"></p>\n<p data-pid=\"pNA8a7Dl\"><b>然后，她走向了光明。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-a676af36796abc0e359148949f84b965_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"731\" data-rawheight=\"358\" data-watermark=\"original\" data-original-src=\"v2-a676af36796abc0e359148949f84b965\" data-watermark-src=\"v2-27792f2b81ad537c5a3b6507be23ebf9\" data-private-watermark-src=\"v2-7f13fe18598d23cf0dbc7fe7f3ab0153\" data-tags=\"politic porn\"></p>\n<hr>\n<p data-pid=\"_iON7dhe\">当铁人兵团司令质问起五人组的动向时，莉露露没有回答，而是以一句振聋发聩的话语回应了他：</p>\n<blockquote data-pid=\"a6NY4Hyp\"> 我们应该创造的，不是属于机器人的天国，而是属于宇宙所有生物的天国。</blockquote>\n<p data-pid=\"xjyZunhQ\">她终于理解了，麦加托比亚所谓的“平等”只是在转嫁矛盾，铁人兵团的计划并不能带来真正的平等，只能让更多人加入剥削者的行列罢了。机器人认为人类是垃圾，只是内心里的那股优越感在作祟，什么神话什么历史，都是在为自己的傲慢找借口。他们从来没有真正接触过人类，从来没有在意过人类内心的想法，<b>甚至从来没有意识到，或者不愿去意识到人类也有自己的内心。</b>而莉露露不一样，她在与大雄与静香两人的交流中逐渐了解了人类。明知没有希望，她也仍然要在司令面前据理力争，为地球的和平贡献一份渺小但不可忽视的力量。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-dc2ad13cdc3e47007ddc1ac4f9a2c381_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"731\" data-rawheight=\"412\" data-watermark=\"original\" data-original-src=\"v2-dc2ad13cdc3e47007ddc1ac4f9a2c381\" data-watermark-src=\"v2-4e81e83810d384fec2d792e8bfe98e35\" data-private-watermark-src=\"v2-9f9c032e2b2a28eaf985a961bcb7333f\"></p>\n<p data-pid=\"T8aD3ey2\">经过四道光束后，莉露露逐渐由冷酷的间谍转变为愿意倾听他人声音的朋友，人物形象已经臻于圆满。不过，要想完成对她的刻画还差最后一块拼图：她仍然在迷茫，自己身为麦加托比亚人无法背叛祖国，可她又不愿参与这从一开始就荒谬无比的战争。那么，她该何去何从呢？</p>\n<p data-pid=\"8DipFLbF\">帮助莉露露解答这一疑问的角色，是此前并不起眼的米克罗斯。纵观他在作品中的表现，几乎都是在用滑稽的行为来缓解严肃的战争气氛。然而正是这样一个谐星，却在最后关头起到了不可或缺的作用。当莉露露对自己的信仰产生动摇之时，米克罗斯没有给她纠结的机会，他单纯的大脑意外迅速地得出了一个精准的结论——<b>神，就是应该被质疑的。</b>这个被哆啦A梦赋予生命，一直追随着人类步伐的机器人知道，所谓的神不过是被漫长的时间雕刻而成的精美塑像，其背后只是再普通不过的人格。他不像莉露露那样带着名为“信仰”的包袱在理想与现实的夹缝中寻求生存空间，而是直面理想与现实的差距，大声控诉造成这个不合理世界的“罪魁祸首”。</p>\n<p><img src=\"https://picx.zhimg.com/v2-fae9ac2ca399d019fa1eb8c726734723_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"994\" data-rawheight=\"367\" data-watermark=\"original\" data-original-src=\"v2-fae9ac2ca399d019fa1eb8c726734723\" data-watermark-src=\"v2-f93492348aa2999cb7abf29b69d50599\" data-private-watermark-src=\"v2-f7d2b7e59d41b43ea4c6685021abf5a0\"></p>\n<p data-pid=\"M1RuaE4U\">米克罗斯的控诉启发了静香，或许也震撼了莉露露。为了改变历史、拯救地球，一行人踏上了三万年前麦加托比亚的土地，那里有一位对人类失去希望的博士正在开发能够创造出天国一般社会的机器人。借博士之口，藤子·F·不二雄精准地指出了铁人兵团形成的根本原因——竞争本能。竞争推动了社会的进步，没有竞争就没有我们现在的生活。然而，<b>竞争中“比他人优秀”的想法一旦变质为“比他人优越”，每个人就只会考虑自己的利益，为此甚至会伤害他人、剥削他人。</b>无论是奴隶主阶级还是资产阶级，大抵都是如此。甚至可以说，所谓的“阶级”，不正是既得利益者为巩固自己的地位而分化出的概念吗？</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1a1c667bd3d774ad26e2d65df3b94d60_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"731\" data-rawheight=\"538\" data-watermark=\"original\" data-original-src=\"v2-1a1c667bd3d774ad26e2d65df3b94d60\" data-watermark-src=\"v2-412ebf94980d8e3ea3c0b64ed44f050e\" data-private-watermark-src=\"v2-a03fe4c19d984ad46a707f8dc0e687e0\"></p>\n<p data-pid=\"EQU4UGjm\">这并不是说我们不需要竞争，但在竞争之外，或许还有一样东西是人类社会发展的必需品——<b>为他人着想的心</b>。正是这颗宝贵的心，让静香一次次被伤害后仍然温柔地照顾莉露露，让大雄在最后的危急关头仍然没有扣动扳机，让看似冷血的莉露露能不顾自己的命运在司令面前挺身而出。正是这颗宝贵的心，让奴隶贸易从这个世界上消失，让共产主义的旋风一度席卷全球，让世界没有变成弱肉强食的野蛮丛林。</p>\n<p data-pid=\"KtyVJ9Pw\">正因如此，博士希望为两位机器人改造出为他人着想的心，从根本上杜绝铁人兵团的出现。可是，作为铁人兵团成员的莉露露，恐怕也会随之被抹除存在的痕迹。但此时，莉露露或许会震惊，或许会恐惧，但决不会再迷惘，她已经找到了自己新的存在意义。当她坐上操作台的那一刻，<b>她彻底摆脱了个人利益的束缚，摆脱了身份与种族的捆绑，一切的一切，只为一个让宇宙上的生命都能安心生活的“天国”。</b>她终于解放了自己的内心，成为了一个“人”应有的样子。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-95d575a6483c8bc1e4558b7f77cfe630_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"734\" data-rawheight=\"323\" data-watermark=\"original\" data-original-src=\"v2-95d575a6483c8bc1e4558b7f77cfe630\" data-watermark-src=\"v2-63162064b22a97d7596a639810d184c7\" data-private-watermark-src=\"v2-6de6c9cc5e950c1ccfd34b6bb14bde71\"></p>\n<p data-pid=\"GO0CzvJ-\">当莉露露渐渐如烟雾般消散之时，她面带微笑地对静香说道：“下次转生的话，我想成为天使般的机器人”。</p>\n<p data-pid=\"_6qf3wx5\"><b>可是莉露露，你已经是“天使般的机器人”了。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-aee3ba9e2fb77fb8db13819e477b5529_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"730\" data-rawheight=\"579\" data-watermark=\"original\" data-original-src=\"v2-aee3ba9e2fb77fb8db13819e477b5529\" data-watermark-src=\"v2-3bff44f2f203c00d23091b160668b66e\" data-private-watermark-src=\"v2-81085f3ce83d3b52448ff4615dffeeb0\"></p>\n<p data-pid=\"JUjosPqR\">在静香和莉露露令人动容的故事之外，男孩子们与山大克罗斯同铁人兵团的斗智斗勇也是本作的一大看点。不过，男孩子们的战斗最终以失败告终，尽管他们在这个过程中展现出了面对强敌永不屈服的坚韧意志，但似乎从一开始就沦为了静香和莉露露的陪衬。</p>\n<p data-pid=\"04k5ktlx\">显而易见的一点是，在小夫的提议下，哆啦A梦强行改造了山大克罗斯的头脑，用一种违背其意愿且极为粗暴的方式使它成为了我方的伙伴。这种做法实在与静香对待莉露露的态度大相径庭，也让不少读者开始质疑，这部作品传达的价值观是否自相矛盾。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4ffc0046ba415092974531eaf7b1f36c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"731\" data-rawheight=\"271\" data-watermark=\"original\" data-original-src=\"v2-4ffc0046ba415092974531eaf7b1f36c\" data-watermark-src=\"v2-6961e6f9cecaf9838e2f25260a2bb4dc\" data-private-watermark-src=\"v2-2369d31eef592bf9ef46c50513887c68\"></p>\n<p data-pid=\"-YA_gON1\">但或许，这就是藤子·F·不二雄的巧妙构思。从这里开始，<b>五人组就被隐性地分成了两组路线</b>：男孩子们完全将铁人兵团视为敌人，用武力与之抗争；而静香则没有在意莉露露的立场，用真诚的态度和本真的爱感化了她。诚然，男孩子们做的并不是无用功。他们的奋勇抗争为静香的计划提供了充足的时间，守住了地球的最后一道防线。但最后从根本上解决问题的终究还是静香——这是爱的胜利，是人心的胜利，<b>相互的理解最终战胜了冲突与对抗</b>，而这也正是藤子老师想要突出的主题。</p>\n<hr>\n<p data-pid=\"5JlotHW0\">故事的最后，大雄独自坐在空荡荡的教室里发呆，麦加托比亚与莉露露的现状仍然牵动着他的心。这时，一位粉红色头发的少女悄悄从窗前飘过，当两人四目相对之时，少女的脸上浮现出天使般的微笑。</p>\n<p><img src=\"https://pica.zhimg.com/v2-7e5833ee0a3a8ba64232e72469b5255c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"472\" data-watermark=\"original\" data-original-src=\"v2-7e5833ee0a3a8ba64232e72469b5255c\" data-watermark-src=\"v2-aaf793c6dc79693321bf5320122ded39\" data-private-watermark-src=\"v2-e2ee1b2f6d46fd33eb3ec49e4fec31d3\"></p>\n<p data-pid=\"ZJLKpuAS\">或许，麦加托比亚真的成为了天国般的社会；或许，莉露露真的转生来到地球观光旅游了。我们如此相信着，因为我们希望，<b>温柔对待他人的人，也能被这个世界温柔相待。</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/shi_mmer?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Shimmer</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/37527964/answer/2658274638?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">43 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/499022907?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">漫画《哆啦A梦》中哪段你觉得最高能？</a><br><a href=\"http://www.zhihu.com/question/541417867?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">漫画《哆啦A梦》中有哪些你觉得很扯淡的剧情？</a><br>\n","link":"http://www.zhihu.com/question/37527964/answer/2658274638?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派评 | 近期值得关注的 App","date":"2022-09-05 10:22:45","description":"你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。<a href=\"https://sspai.com/post/75553\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75553"},{"title":"把 AI 作画引擎搬进家用电脑：Stable Diffusion 配置与使用指南","date":"2022-09-05 08:04:14","description":"Stable Diffusion 还不能作为生产力工具，但它让设计变得简单，也让更多普通人打开了 AI 绘画的可能性。<a href=\"https://sspai.com/post/75544\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75544"},{"title":"一日一技 | 如何给自制电子书添加脚注","date":"2022-09-05 06:30:00","description":"因为有在 Kindle 里看网络小说的习惯，但是通过脚本下载的文档通常都是将其放在章节末尾，阅读时需要反复查阅，配合上墨水屏缓慢的反应速度，阅读体验实在称不上好。于是就萌生了「把注释加进正文」的想法。既然 Kindle 商店里的正规出版物都有这样的功能，那用电子书编辑器是不是也能做到？<a href=\"https://sspai.com/post/75170\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75170"},{"title":"俄乌战争还在打，查了下俄罗斯能源出口对欧洲和中国的依赖程度","date":"2022-09-05 05:52:05","description":"\n<p data-pid=\"1_DN4Hqo\">这两天查了下俄罗斯的能源出口依赖度。</p>\n<p data-pid=\"J2byHujd\">我们都知道俄罗斯目前是一个高度依赖能源出口获取外汇收入的国家，而且也不只是近些年，在几十年前的苏联时代就是这样，八十年代美国的里根政府就是通过说服盟友沙特压低国际市场油价从而大大的打击了苏联的出口，加速了苏联的经济崩溃。</p>\n<p data-pid=\"AJ0fb4VP\">这里要说下沙特这个国家当年在打击苏联的过程中发挥了重要的作用，主要是两个地方，</p>\n<p data-pid=\"5Qx9Je3h\">其一是增加产能压低油价重创了苏联的出口收入，</p>\n<p data-pid=\"c-JgjH4R\">其二是沙特出钱，从埃及购买苏式武器，从美国购买美式武器，然后通过巴基斯坦运入到阿富汗境内，支持阿富汗游击队和苏军作战，大大的增加了苏军的伤亡，也把苏联拖入了战争的泥淖。</p>\n<p data-pid=\"4043tuj4\">总之我觉得我国是吸取了其他国家历史上的经验教训的，现在总体上和中东国家保持着不错的关系。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"mUyTcnyj\">俄罗斯现在和乌克兰打仗，油气为中心的资源出口成为了支撑俄罗斯经济的支柱，这就让我想了解俄罗斯的能源出口对中国市场的依赖程度，我们假设万一欧洲真的实现了减少对俄罗斯天然气的依赖，那么俄罗斯该怎么办。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"ZW_WDu4P\">查了下数据，在天然气方面，</p>\n<p data-pid=\"rQzuHjM6\">2021年俄罗斯出口天然气中只有6.32%卖到了中国，而中国2021年进口天然气中只有9.9%来自俄罗斯，因此很显然中俄天然气贸易是有很大潜力可以挖掘的。</p>\n<p data-pid=\"K2hSMNCN\">中国对进口俄罗斯天然气是很积极的，原因如下：</p>\n<p data-pid=\"YvvhqOmj\">1：天然气作为清洁能源，符合我国长期碳中和的目标，我国的天然气消耗量在迅速增长。</p>\n<p data-pid=\"kiEh3Mh3\">2：我国天然气不能自给，目前四分之一的天然气进口来自澳大利亚，再加上从美国的进口就占了三分之一，而目前的政治局势下，提升进口多元化是中国的诉求。</p>\n<p data-pid=\"NHiYqDPW\">3：中国从俄罗斯进口天然气主要通过东北地区，可以刺激在东北的管道基建投资，同时由于都是从东北地区入境，可以增加东北地区海关的进口税收，另外目前东北三省70%的煤炭和50%的天然气需要从区域外调入，俄气的使用不仅可满足东北地区天然气的消费，而且可帮助减少煤炭的消耗。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-65c2f37af7a1a86eaa919ec3c6ee4eb0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"533\" class=\"origin_image zh-lightbox-thumb\" width=\"865\" data-original=\"https://pic1.zhimg.com/v2-65c2f37af7a1a86eaa919ec3c6ee4eb0_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"OJ_L3BYo\">而对于俄罗斯来说，如上图所示，2021年其天然气的最大出口目的地是德国，占比为19.19%，出口土耳其占比10.72%，出口意大利占比10.38%，出口白俄罗斯占比7.9%，出口法国占比7%，出口中国占比6.32%，出口波兰占比4.18%。</p>\n<p data-pid=\"HISDuzfd\">显然俄罗斯的出口目的地总体来说是“不太安全”的，<b>不算白俄罗斯和土耳其的话，出口到欧洲发达国家占比高达63.21%</b>，这些国家总体而言不仅对俄罗斯抱有戒心，而且事实上处于美国的领导之下，在美国的势力范围内。</p>\n<p data-pid=\"4U_iAOem\">因此我国抓住这个机会，扩建已经开通的中俄天然气管道，扩大输送产能，是可以更好的保证我国的能源安全的，因为一旦砸钱投资建了天然气管道，那显然从经济上考虑是不能随便断供的，不然投资回报时间就会更长，而且在已有的管线上工作的员工收入和工作机会也会受到损害。</p>\n<p data-pid=\"T0OGxWAH\">就如同俄罗斯和欧洲在天然气供应上是互相依赖的关系一样，我国和俄罗斯的天然气管道一旦建好并且送气，那么也是互相依赖的关系。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"5GFtd0NM\">2019年12月中俄“西伯利亚力量”天然气管道开通，初期每年为中国供应50亿立方米天然气，到2023年全部完工时每年供应量增加到380亿立方米。</p>\n<p data-pid=\"y6qIvQMV\">2022年2月，中俄又签署天然气协议，决定计划再通过“西伯利亚力量”管道每年向中国供应100亿立方米天然气，将把每年天然气供应量提高到480亿立方米。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-df26cbc6fd4d59a7acacb5b71c15d8f9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"781\" data-rawheight=\"814\" class=\"origin_image zh-lightbox-thumb\" width=\"781\" data-original=\"https://pic2.zhimg.com/v2-df26cbc6fd4d59a7acacb5b71c15d8f9_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"ZWBkfdRf\">中俄筹建的西伯利亚2号管道，将会通过蒙古，预计2024年开工，年最大输气量预计为500亿立方米。</p>\n<p data-pid=\"rqxUDsh6\">未来这两条管道都开通之后，给中国的每年输气量将达到980亿立方米，这是非常高的数字，根据数据统计机构Statista的数据显示，2021年著名的“北溪1号”天然气输送量达到了592亿立方米，比该管道设计的年输送量还高出42亿立方米。据国际能源署（IEA）统计，2021年欧盟从俄罗斯进口天然气的总量为1550亿立方米。也就是说，“北溪1号”当年的输送量占欧盟进口俄天然气的近40%。</p>\n<p data-pid=\"z6lTXLYf\">实际上中国除了管道天然气之外，也通过铁路从俄罗斯进口LNG天然气。</p>\n<p data-pid=\"_mshq2Zm\">因此在天然气这部分，中国从俄罗斯的进口在未来预计会迅速增长。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"WgeefOUa\">而除了天然气之外，我也查询了俄罗斯出口石油和煤炭到中国的占比，有点出乎意料的是占比已经非常高了。2021年俄罗斯出口的石油中竟然有29.62%是出口到中国的，这个比例真的比我想的还要高一些，而与此同时，欧洲国家仍然是俄罗斯的最大的石油出口地，荷兰占比13.45%，德国10.29%，欧洲OECD发达国家占比合计为48.95%。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-88f885387433b606e719ed2ba9174964_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"543\" class=\"origin_image zh-lightbox-thumb\" width=\"865\" data-original=\"https://pic1.zhimg.com/v2-88f885387433b606e719ed2ba9174964_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"zXn2M0E_\">这里面石油管道是我国进口俄罗斯石油的主力，下图是中俄石油管道一期，中国境内的漠河到大庆年输油1500万吨，</p>\n<p data-pid=\"VPoJ544B\">2018年漠河到大庆的管道建成了二期，又增加了1500万吨产能，使得年输送石油产能达到了3000万吨。</p>\n<p data-pid=\"jCjAMfjH\">根据央广网的报道，2011年1月1日投产运营以来，截至2021年1月1日，哈尔滨海关所属漠河海关监管服务进境原油近2亿吨。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-880982a34fcb50e770c6f69b72d75039_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"866\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"https://pic2.zhimg.com/v2-880982a34fcb50e770c6f69b72d75039_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"TiJnHiqU\">下图是中俄石油管道二期建设的现场图。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-92e8b2cd8afc7cbf7ba3dc2962a6750b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1368\" data-rawheight=\"724\" class=\"origin_image zh-lightbox-thumb\" width=\"1368\" data-original=\"https://pic4.zhimg.com/v2-92e8b2cd8afc7cbf7ba3dc2962a6750b_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"rih2odhs\">中俄石油管道建成之前是有很多波折的，</p>\n<p data-pid=\"6ORS3GcJ\">我们可以看到这条线之前并不是这个走向，以前的设计是安大线（安加尔斯克到大庆），当然最后没有用这个，原因之一是可以远离贝加尔湖保护环境，当时日本跳出来和中国争夺这条石油管道，结果是2021年俄罗斯出口到日本的石油占比非常少，甚至不如出口到韩国的比例3.36%。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-905f938579a85e86af32605f000e9f68_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb\" width=\"865\" data-original=\"https://pic1.zhimg.com/v2-905f938579a85e86af32605f000e9f68_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"qk58TpjS\">最后是煤炭，2021年俄罗斯出口的煤炭中23.98%是到中国的，相对于油气，俄罗斯的煤炭出口要均衡的多，出口到日本和韩国的煤炭占比也有17.49%，合计到中日韩的煤炭超过40%，而出口到欧洲发达国家的煤炭占比为32.28%。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-7f4d63503f2123b982c9fedafd07a7d9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"713\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb\" width=\"713\" data-original=\"https://pic2.zhimg.com/v2-7f4d63503f2123b982c9fedafd07a7d9_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"1ONeEYFZ\">因此相比之下俄罗斯的煤炭出口要均衡不少。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"OWwSPYTW\">最后简单的总结下，</p>\n<p data-pid=\"Ph66h63r\">1：对于俄罗斯来说，石油，天然气，煤炭的第一大市场都是欧洲国家，其实俄罗斯重视欧洲不仅仅是因为文化，种族等原因，经济原因无疑也是核心因素之一。</p>\n<p data-pid=\"iq-ps46v\">但即使这样，在煤炭和石油领域中国已经成为俄罗斯的第二大买家（仅次于欧洲发达国家），而在天然气领域中国从俄罗斯的进口也在迅速增长，预计很快会超过白俄罗斯和土耳其，也会是仅次于欧洲发达国家的第二大买家。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"Z0Q7QIVQ\">2：俄乌战争无疑是一个关键的因素，欧洲国家如果执意的在油气进口方面去俄罗斯化，我们这里先不讨论能不能取得完全的成功，但是总体进口俄罗斯油气趋向下降是可能的。</p>\n<p data-pid=\"wYSDh66L\">我觉得我们在分析问题的时候还是要用数字的方法，而不能说“欧洲离不开俄罗斯天然气”，或者“俄罗斯天然气离不开欧洲市场”这样模糊的描述。</p>\n<p data-pid=\"iReeXADh\">比如你今年进口100美元的俄罗斯产品，但是出于抵制的原因，明年只进口了80美元的俄罗斯产品，其实这也是去俄罗斯化，并不是一定要下降到零才叫去俄化。</p>\n<p data-pid=\"yPcmtSXI\">就跟我们说去美化其实不是说就完全不买美国任何东西了，而是要去除对美国核心技术的依赖避免被卡脖子，那些先进的高水平的美国货该买的还是要买，怎么利益最大化怎么来。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"G0e78JzF\">战争持续下去，那么欧洲和俄罗斯会继续走在脱钩的道路上，相应的对中国来说则是扩大和俄罗斯合作的机会。</p>\n<p data-pid=\"aBrew0Gb\">这里要说一下，从俄罗斯进口的天然气价格其实很便宜，因为是以管道天然气为主，管道天然气比从海上用船只进口LNG液化天然气价格便宜一半，要不然欧洲人用俄罗斯的管道天然气这么多年爱不释手呢。</p>\n<p data-pid=\"6sVbZYaL\">2021年全年中国天然气累计进口量达到了12136万吨，共计558.1亿美元，均价460美元一吨。</p>\n<p data-pid=\"g92A_zbA\">其中LNG液化天然气7893万吨，占比为65%，进口金额441.79亿美元，占比79%，均价560美元一吨。</p>\n<p data-pid=\"EiOw1uhf\">这样算管道天然气的价格只有大约274美元一吨。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"bln_l6Vy\">2022年1-6月中国天然气累计进口量达到5357万吨，进口金额316.67亿美元，均价591美元。</p>\n<p data-pid=\"SOE54YK3\">2022年1-6月中国液化天然气累计进口量达到3126万吨，占比58.4%，金额239.39亿美元，占比75.6%，均价766美元一吨。</p>\n<p data-pid=\"Y8ZjM1Q7\">这样算下来管道天然气价格为346美元一吨。</p>\n<p data-pid=\"zdqQOc7e\">目前澳大利亚是我国第一大天然进口来源国，而且全部是LNG液化天然气，价格是比来自俄罗斯的管道天然气贵的。</p>\n<p data-pid=\"WOnDnZgl\">我们也看到，今年的天然气进口价格明显是涨了不少，因此俄乌战争打下来，我国进口天然气也多花了不少钱，当然作为进口大户的欧洲就更不用说了，我在欧洲的朋友就说他们电费都涨了。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"x_vvb5Dq\">3：对于俄罗斯来说，未来如果煤炭，石油，天然气的第一大客户都变成了中国而不是欧洲，这在心理上是很大的冲击，毕竟俄罗斯几百年都是欧洲中心主义，但是总是不被欧洲接纳，被视为边缘寒冷地区的野蛮人，不被视为自己人，然后最大的经济依赖逐渐变成中国了。</p>\n<p data-pid=\"7kpfGODj\">从目前的情况看，由于欧洲在制裁俄罗斯搞去俄化，短期内中国，以及正在发展中的印度占俄罗斯出口油气比例上升是一个较为确定的趋势。</p>\n<p data-pid=\"f6U6qF93\">当然如果欧洲在能源依赖去俄罗斯化上步伐比较慢，又或者未来欧美出于遏制真正的强大对手中国的目的，对俄罗斯抛出橄榄枝，那么这个过程会出现一些波折，这个就看俄罗斯的战略定力了。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"-aCXl0Z4\">总之在我看来，西方人内心深处根深蒂固的种族主义，是永远不可能把俄罗斯人，中国人为中心的东亚人视为真正的自己人的，一定是拉拢其中一个打击另外一个。</p>\n<p data-pid=\"p8MyXxiR\">从这个角度讲，我们现在加大和俄罗斯在能源领域的合作，</p>\n<p data-pid=\"ls-B_8Em\">一则可以加大两国利益的捆绑，</p>\n<p data-pid=\"nZMGtLyN\">二则是在俄罗斯目前高度依赖油气的情况下给予其经济支撑，使其在西方联合经济制裁下得以继续维持生存，</p>\n<p data-pid=\"o4Kl7zxN\">这样可以降低俄罗斯未来在西方抛出的联合反华橄榄枝下动摇的概率，避免在我国迈向民族复兴的道路上节外生枝。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ningnanshan?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">宁南山</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/560809315?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"为什么《三国志11》在我国被奉为神作？","date":"2022-09-05 03:53:10","description":"\n<p data-pid=\"AvZo82nM\">销量不佳是一个问题，在我国地位高又是另一个问题，这两者之间并没有太大关联。如果只是问为何在我国地位高，原因其实还挺简单的，那就是311在我国具备了天时地利人和，并且自身素质也不错，自然而然地成为了一代经典。</p>\n<h2>天时</h2>\n<p data-pid=\"IkuAYqkI\">07年到09年是一个比较特殊的时期，许多电脑游戏系列在中国玩家心目中最经典的一代就是在这几年或者稍前出的，例如06年的真三国无双4，07年的仙剑4和空之轨迹，08年的战国无双2和无双大蛇。其原因是FC时代之后由于缺乏代理商外加政策限制，国内并没有一款普及率很高的游戏机，10年之后主机游戏市场又被智能机降维打击，因而PC就是这期间中国玩家最普及的游戏机。</p>\n<p data-pid=\"Naj1nHKy\">根据国家统计局所提供的数据显示，我国的互联网服务商在04年的时候只有每百万人0.2个，09年的时候就把这个数字提升到了1.2。宽带用户在00年的时候只有两万多，05年就有三千七百多万，其提升不可谓不迅猛，但因为基数太低，此时的宽带仍然称不上普及，而等到09年的时候中国的宽带用户达到一亿多，基本覆盖了三四线城市，互联网用户也从06年的占总国民十分之一变成09年的超过四分之一。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-73524874e40f0d956a506b98da46fcaa_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1065\" data-rawheight=\"428\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-73524874e40f0d956a506b98da46fcaa\" data-watermark-src=\"v2-016cf90139048476961fe335ae901ab5\" data-private-watermark-src=\"v2-c670589f5ed9ff66eb55696603cafbc6\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-193f2ac745ea2c8501620bb1d4b2d5fc_720w.jpg?source=b1748391?rss\" data-rawwidth=\"954\" data-rawheight=\"330\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-193f2ac745ea2c8501620bb1d4b2d5fc\" data-watermark-src=\"v2-d8e6fe3fbb44ae73f904f24411e9684c\" data-private-watermark-src=\"v2-0fe0f9f5031ed3e9aa5bcb6e8ce4d895\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-35dad8484ea838b2112fc8e1b6105fd1_720w.jpg?source=b1748391?rss\" data-rawwidth=\"844\" data-rawheight=\"420\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-35dad8484ea838b2112fc8e1b6105fd1\" data-watermark-src=\"v2-e0596def52b19808161096cc287367bf\" data-private-watermark-src=\"v2-4deb62c3e0c78f5e5e4b1b0deb914f0b\"></p>\n<p data-pid=\"jfaGD_d1\">这是最多新人PC玩家入坑的时期，他们所接触的首部作品自然就会在中国互联网上拥有特殊的地位。</p>\n<p data-pid=\"Y9haCkGC\">三国志11原版发售于06年3月，威力加强版则是06年9月，这令该游戏吃到的另一个好处是多数中国玩家一开始所接触到的就是完成形态的威力加强版，而在日本饱受批评的原版11代在中国并没有多少人玩过。实际上11代之前的作品都吃到了这个好处，后面几部三国志大都是原版口碑低下，最终版本褒贬不一，而9、10、11这三代则几乎没有人评价原版，因而口碑也要高得多。</p>\n<p data-pid=\"5v3KTkqU\">同时，11代的另一个优势是由于该作在日本销量不好且口碑差劲，导致系列处于岌岌可危的形势，随时都可能消失。结果正统续作直到12年才做出来，中间创造了长达六年的真空期，这六年间玩家除了11代就只能找更早的作品来玩。同时，12代的糟糕表现又让对续作期待已久的玩家们再度寒心，变相抬高了11代的地位。以同社的信野系列为例，发售时间和311差不多的信野革新的续作天道在09年推出，并且质量也还算凑合，很大程度上分走了革新的人气。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c1b1c94356393a54e6df666056ed78b1_720w.jpg?source=b1748391?rss\" data-rawwidth=\"117\" data-rawheight=\"285\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c1b1c94356393a54e6df666056ed78b1\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2>地利</h2>\n<p data-pid=\"XcqOFhgu\">除在发售时间和续作方面占尽优势外，三国志11在题材上的优势也很大。在光荣玩家内部，早几个月发售的信野革新在游戏素质方面的评价明显要胜过311，但日本战国的题材就决定了这款游戏的受众面远不及311。同时，由于经常做中国历史的缘故，光荣公司对中国玩家的重视要远远大于其他外国厂商，早在上世纪90年代就开始推出各种官方汉化游戏，这种重视在311身上达到了极致。</p>\n<p data-pid=\"hriXZEUg\">从93年开始，光荣公司先后在国内设立了三个分公司（北京、天津、台湾），其游戏的汉化品质一项都是很高的，甚至经常会带有汉语语音。放到现在大家可能不觉得什么，在当时几乎独此一家，同一时期的GTA：SA甚至连汉化版都找不到，需要玩家自己去猜对话。更为夸张的是，初版311甚至是没有日语语音的，只能听中配，这一点在当时还引起了许多日本玩家的不满。</p>\n<p data-pid=\"QUBURgFP\">此外，游戏中独特的水墨画风以及用中国传统乐器所演奏的背景音乐都能让玩家产生一种亲切感，仿佛这是一款中国人自己制作的三国游戏（三个中国分公司确实都参与了制作）。相信不少玩家后来玩到312时，面对廉价的UI和武将们的满口日语都会产生强烈落差感。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-67cfe6d8e36f8bf83f16bae264934541_720w.jpg?source=b1748391?rss\" data-rawwidth=\"227\" data-rawheight=\"96\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-67cfe6d8e36f8bf83f16bae264934541\" data-watermark-src=\"v2-bf014bc45cbdd6cfcb0df17a5c6de276\" data-private-watermark-src=\"v2-c92738fac46c0984936f5e0509ec4f75\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-0511ea4f6a25e6a5d2a2c2f5f3c497f5_720w.jpg?source=b1748391?rss\" data-rawwidth=\"243\" data-rawheight=\"225\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-0511ea4f6a25e6a5d2a2c2f5f3c497f5\" data-watermark-src=\"v2-48a8de1ba36b4af5325dab5028757ffb\" data-private-watermark-src=\"v2-59526c89aedb1e03a3abcf1e4a432636\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-6193fca8a8dbaa7a4f850b25ece126e5_720w.jpg?source=b1748391?rss\" data-rawwidth=\"465\" data-rawheight=\"94\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-6193fca8a8dbaa7a4f850b25ece126e5\" data-watermark-src=\"v2-98a3b95b7ad39c31b19a29f9bff16114\" data-private-watermark-src=\"v2-c12838d07341abcb22e22cbf94a53d6f\"></p>\n<p data-pid=\"uS3yRxZV\">而三国题材明明关注度如此之高，当时却没有能够与之匹敌的同类竞争对手。霸王大陆和英杰传系列断档多年，三国战纪、傲世三国还有赵云传早已没什么人气，幻想三国志和三国基本没有关系，类型最为接近的三国群英传7素质差强人意还改成了仙魔大战（就这样居然人气还凑合），剩下的更是不值一提，唯一的劲敌是同门出身的真三国无双。也就是在这个热门题材当中，三国志系列基本在吃独食。</p>\n<h2>人和</h2>\n<p data-pid=\"HTFhmm2M\">311确实是系列里最适合拿来推广的一部，如果一点基础都没有，那我很推荐先玩这部。首先这款游戏的卖相非常好，制作组在这一代里清理了所有7代的旧头像，更换后的头像精度达到了12代替换半身像之前的最高水平，足以把10代甩出一个身位。同时这一代首次使用了3D模型，其中不少甚至是直接从无双系列搬过来的（例如周泰），因而这一代的单挑和舌战虽然在系统设计上不如10代，但在演出效果上可以疯狂吊打10代以及之前的任何一部作品。</p>\n<p><img src=\"https://pica.zhimg.com/v2-bb4bd344e0b1d031cb48146b956f25f2_720w.jpg?source=b1748391?rss\" data-rawwidth=\"548\" data-rawheight=\"225\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-bb4bd344e0b1d031cb48146b956f25f2\" data-watermark-src=\"v2-27f49119812f4a6a6aefb6a6bb0ead05\" data-private-watermark-src=\"v2-aa9d1398253dbff2318f775baced7f1b\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6d754712f5a9e1d848c324fba45444dd_720w.jpg?source=b1748391?rss\" data-rawwidth=\"548\" data-rawheight=\"223\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-6d754712f5a9e1d848c324fba45444dd\" data-watermark-src=\"v2-d4402111a47d79f87c231822f1ffa7c0\" data-private-watermark-src=\"v2-f179ea5331c25427ac710cf2848f4d00\"></p>\n<p data-pid=\"6ODbIeyN\">11代的教学模式也是系列中的典范，不但设计细致，面面俱到，在难度方面也循序渐进，甚至连充当示范的刘备等角色也在性格台词上设计得生动有趣，其剧情表演不禁让玩家捧腹。最后的应用关卡成都攻略战难度适中，虽然我方占尽优势，但因为时间限制，对新手而言又有一定挑战，而且只要能通过这关，基本就不会在正式游戏开始后感到手忙脚乱不知道该做什么了，这是之后历代教学模式所欠缺的。此外，这一代的教学模式还附赠32个古代武将，可谓奖励丰厚，因而多数人都不会将其直接跳过。</p>\n<p data-pid=\"OWWe6vkI\">光荣游戏里能在教学方面给我留下如此深刻印象的除了311就只有信野天道。相比之下，其他几代要么在教学内容上设计得太过简略（例如信野创造教你加减乘除，然后让你去解微积分），要么把教学提示直接嵌套在游戏内部，让玩家自己去摸索，还有313这种一开始还是教学，打着打着就变成挑战关卡的设计，完全不为玩家做考虑，直接当作老手来操练了。</p>\n<p data-pid=\"o3FRr9Q-\">玩法上311也很容易上手，这是光荣最后一次做纯战旗游戏，虽然这种玩法已经远远落后于时代，但好处也是显而易见的。相对于RTS，战棋游戏不考验玩家的反应能力，不用频繁按暂停，可以静下来好好思考自己的每一步甚至是直接存读档，这就降低了入门门槛。同时战棋类游戏易于理解，效果直观，虽然对抗性低，但是策略性强，而且光荣当时已经做了十几年战旗，系统也相对成熟，311的战斗玩起来很有乐趣。</p>\n<p data-pid=\"ghhzp84U\">内政系统虽然设计得比较无聊，但也同样好上手。每座城的设施最多22个，最少10个，而且位置固定，相比起信野革新里动辄八九个城下町，几十个设施，位置还要自选的设定，虽然变化性少了不很多个数量级，但学起来简单方便。</p>\n<p data-pid=\"XJEKE1Gu\">同时311的这套机制发散性很强，非常适合拿来修改，战旗模式带来的抽象化战斗和各技能强弱的极端化差异反而使得它套上任何朝代的名字都不违和，外加各城市之间相对平衡的设计，因此311成了mod爱好者的天堂。而作为后继者的12和13代，原本在国内评价就不高，半身像的立绘制作也相对困难，游戏机制换皮不如11代方便，一不小心还可能收到光荣的律师函，因而即使是十多年后的现在，网上最火的依然是11代的mod。</p>\n<p data-pid=\"VI_zLPer\">实际上挖坑不填，公司不肯投钱把游戏做完是三国志系列目前面临的最大困境，这一点我专门写过相关答案。</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/question/369305656/answer/1825063111\" data-image=\"https://pic1.zhimg.com/v2-541caec7ec9f5a253d643a24ceb7baed_qhd.jpg?source=b1748391\" data-image-width=\"1024\" data-image-height=\"768\" class=\"internal\">光荣的三国志系列，为什么每代都要放弃前作的优点呢？</a><p data-pid=\"WLLsrjVI\">然而11代在玩家们自主用爱发电的情况下，居然完成了这一官方没能完成的壮举，有像血色衣冠、韩版311这种持续数年甚至是建立团队来进行开发的mod，其不光是改换了游戏的势力及武将，对于原版的游戏机制也进行了大幅改良。</p>\n<p><img src=\"https://pica.zhimg.com/v2-b41b5cf5f6b05b2bd4a8d5fb65b24742_720w.jpg?source=b1748391?rss\" data-rawwidth=\"676\" data-rawheight=\"539\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-b41b5cf5f6b05b2bd4a8d5fb65b24742\" data-watermark-src=\"v2-8b86a27a32ed7b0949d4db9776f60e29\" data-private-watermark-src=\"v2-6bbfc5cbeae9e1f078f9a24edc79bbf9\"></p>\n<p data-pid=\"hJIashd5\">这出现了一种奇怪的现象就是许多三国志11的粉丝其实很少甚至是没玩过三国志11的本体，而是将三国志11的mod与三国志11混在一起来称赞。</p>\n<p data-pid=\"01SY5xol\">总的来说，11代占的优势实在太多：<b>传播节点赶上互联网用户的高速发展期，以完成形态出现，智能机尚未普及，缺乏后续力作，是为天时；题材热门，公司扎根中国，文化底蕴深厚，市场上找不到竞争对手，是为地利；作品卖相好，适合新人上手，民间mod生命力极强，是为人和。</b></p>\n<p data-pid=\"MI7idE5F\">纵观整个系列，找不出第二部像11代这样拥有各种有利条件的作品，加上11代本身素质也还不错，因而最后被奉为神作的是三国志11而不是其他作品。</p>\n<p data-pid=\"QK5wHrV7\">有关11代为何在日本会受到冷遇，可以看这个回答：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/answer/1834016959\" data-image=\"https://pic2.zhimg.com/v2-43fe7d18ed7b109a17812c162731c24b_720w.jpg?source=b1748391\" data-image-width=\"870\" data-image-height=\"654\" class=\"internal\">如何评价游戏《三国志11》？</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhang-ting-61-50?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">FFF团长</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/65299573/answer/1832322292?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">196 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/38857195?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">想看《三国志》，哪个版本的会比较好？</a><br><a href=\"http://www.zhihu.com/question/394776444?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">买《三国志》求推荐，哪个版本最好?</a><br>\n","link":"http://www.zhihu.com/question/65299573/answer/1832322292?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"拿什么装你的一机 N 镜？谈谈我的摄影包折腾经历和推荐","date":"2022-09-05 03:48:33","description":"希望大家能一次就找到自己心仪的器材，摄影背包也一样。<a href=\"https://sspai.com/post/75524\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75524"},{"title":"从转系生到终身教授：十二年图形学物理模拟的自我回顾","date":"2022-09-05 02:50:41","description":"\n<p data-pid=\"R8qSBSrt\">最近评上tenure，有人来祝贺：”Now you can freely decline review requests!”。我想了想，似乎对心态上的改变确实如此而已。又想到也许可以写个什么纪念一下。那这19岁到31岁，有什么拿来回味的没有？好像有很多，但不整理一下的话，又不知从何说起。那还是直接写一点吧。从物理本科，到CS PhD，CS教职，又在数学tenure，这看似曲折的十二年竟是在做同样的研究，一年都没有浪费。一路走来，有很多东西值得缅怀和总结，也许能帮助思考未来。顺便把这一路干过的牛逼的事，和遇到过的牛逼的人都写下来，看着应该很舒爽。</p>\n<ul>\n<li data-pid=\"HMgcTgq5\">第〇章：我的三叉戟</li>\n<li data-pid=\"-wxEN7so\">第一章：缘起</li>\n<li data-pid=\"g8YiiZ9B\">第二章：一炮炸出来两个坑</li>\n<li data-pid=\"Uvv--n47\">第三章：雪与海的浪漫</li>\n<li data-pid=\"-cHlIhBZ\">第四章：摩擦摩擦，在光滑的路上，摩擦</li>\n<li data-pid=\"QO7bfwAB\">第五章：少年英雄胡渊鸣</li>\n<li data-pid=\"4OKGMN1S\">第六章：与timestep结缘</li>\n<li data-pid=\"XsEPFhqt\">第七章：摩擦碰撞的第三次战役，IPC魔童降世</li>\n<li data-pid=\"k3RfLq3N\">第八章：下一个“Timestep”</li>\n</ul>\n<h2>第〇章：我的三叉戟</h2>\n<p data-pid=\"PXz9rBKX\">十二年来摸爬滚打地给计算机图形学做了些物理模拟相关的科研。拿的出手的代表方向有三：物质点法（Material Point Method: MPM），仿射粒子元胞法（Affine Particle In Cell: APIC），和增量势能接触法（Incremental Potential Contact: IPC）。每个方法的人和事下面的章节再去回忆，这一章，先笼统概括一下。</p>\n<p data-pid=\"wPAoYrzG\">第一个方向：MPM。说到物质点法，按照惯例，或许得提一下自己多多少少参与了的冰雪奇缘。2012年发掘MPM后我去做了些别的事情，组里其他同学拿MPM验证了雪；我在早期没有去参与最初的SIGGRAPH工作。迪士尼工作室的代码很臃肿，远远不止99行，而且迪士尼的律师可不是吃素的，向来有荒岛求生画米奇一说。既然不能描绘太多代码的事情，那就只放好看的剧照：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-342167145b3ccae5874347c6f9f06ac0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1252\" data-rawheight=\"335\" class=\"origin_image zh-lightbox-thumb\" width=\"1252\" data-original=\"https://pic1.zhimg.com/v2-342167145b3ccae5874347c6f9f06ac0_r.jpg\"></figure><p data-pid=\"nANp74c3\">MPM擅长做雪在短期内成为了一个刻板印象。于是我决定花一些功夫来重塑一下MPM的形象。从技术层面上来说，MPM只是一个基本的Galerkin空间架构，物理过程数值模拟的真正技术点在于时间和空间的离散算法、本构模型的设计、性能的加速、以及巧妙求解偏微分方程数值解的不同手段。MPM是一块高品质的画布，这些技术点的创新才是真正的笔法（stroke）。但是技术点是里子，MPM是面子。于是从面子上看到的，便是我与一干志趣相投之士用MPM去平A物理的世界的各种固体和流体：巧克力，果冻，面包，牙膏，冰淇淋，泡沫，泥土，岩浆，牛排，东坡肉，橘子，西瓜，肌肉，骨骼，内脏，布料，毛衣，头发，雪山，沙海，冰川，河流，无人机，炸药，等等。这里有固体，有牛顿流体，有非牛顿流体，有粒状体，有固液混合体，还有人体。大到山川河流，小到雨露甘霖，MPM从一个铁头功，逐渐被扩写成了一本七十二绝技。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2e57476b54898ea998146bc57ee9ae81_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1714\" data-rawheight=\"984\" class=\"origin_image zh-lightbox-thumb\" width=\"1714\" data-original=\"https://pic2.zhimg.com/v2-2e57476b54898ea998146bc57ee9ae81_r.jpg\"></figure><p data-pid=\"8Wm7AwWc\">后来跟人合开了公司，写了一个实用的MPM特效解算器。最近Autodesk买下并放进了Maya，相信未来的几年，更多的电影里会看到MPM的应用场景。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-588c6272591360dec8abd70fbf6b0407_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1072\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb\" width=\"1072\" data-original=\"https://pic4.zhimg.com/v2-588c6272591360dec8abd70fbf6b0407_r.jpg\"></figure><p data-pid=\"aD1aby8Q\">第二个方向：仿射粒子元胞法（APIC）。这是我2015年得意的文章，是2014年的圣诞节独自一人在迪士尼的大帽子studio里加班完工的。迪士尼所在的Burbank是大洛杉矶地区一个荒漠城市，我却在荒漠和大海结了缘。于是那一年，APIC给海洋奇缘里的水提升了许多丰富的细节。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a3f2f084e9f44bf02a1f980f9886d97e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1220\" data-rawheight=\"294\" class=\"origin_image zh-lightbox-thumb\" width=\"1220\" data-original=\"https://pic3.zhimg.com/v2-a3f2f084e9f44bf02a1f980f9886d97e_r.jpg\"></figure><p data-pid=\"NbXb8lfn\">时间快进到2017年，有一位气血翻腾的胡姓少年来访问我，一起把APIC和MPM系列工作推到了高潮：Moving Least Squares MPM（MLS-MPM）。那之中与后来 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/458c690a3722fd38ffd3d3dcadcf8b13\" data-hash=\"458c690a3722fd38ffd3d3dcadcf8b13\" data-hovercard=\"p$b$458c690a3722fd38ffd3d3dcadcf8b13\">@太极图形</a> 的渊源和MPM在可微分模拟领域的拓展，已有<a href=\"https://zhuanlan.zhihu.com/p/97700605\" class=\"internal\">好文</a>记录。</p>\n<p data-pid=\"57DUE7H5\">第三个方向：IPC。2020年12月31日，宾夕法尼亚大学计算机图形学中心，23点59分，手里的咖啡还烫。有一块补天的石头，它吸满了天地灵气日月精华，突然炸裂开了。增量势能接触法IPC横空出世。王婆卖瓜自卖自夸：我窃以为，IPC改良了固体模拟，启动了“工业革命”，把连续固体的仿真科学（不只在图形学）带入了“蒸汽机时代”。2022年，它的衍生故事还在不断上演：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-24b435c893fd91277ad50d5680921f74_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1135\" data-rawheight=\"816\" class=\"origin_image zh-lightbox-thumb\" width=\"1135\" data-original=\"https://pic1.zhimg.com/v2-24b435c893fd91277ad50d5680921f74_r.jpg\"></figure><h2>第一章：缘起</h2>\n<p data-pid=\"bJJGyp74\">2010年，我遇到了改变了我一生的三个人。第一个人是我的妻子；这十二年，我们相恋五年，结婚七年，她挽着我踩下了每一个有深有浅的脚印。十二年来做过的每一个回头来看无比正确的决定，大到职业道路，小到咬文嚼字，我的许多影响深远的选择背后都有她默默的付出不休不眠的时间陪我去抽丝剥茧和理性分析。我在中科大少年班选的专业是等离子体物理，2010年在UCLA入学后想转到计算机，如果没有她绝对理性地安抚我的急躁和帮我规划合理的步骤，我可能连第一学期都没读完就自暴自弃、不知所向。她还会陪我走很远很远。</p>\n<p data-pid=\"g4Aa4QZN\">2010年改变我命运的另两个人，就是我读PhD的联合导师Demetri Terzopoulos和Joseph Teran。他们的成就是我一生奋斗的目标。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-238deba8138b9fbe7ee76b86850a06e6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1111\" data-rawheight=\"370\" class=\"origin_image zh-lightbox-thumb\" width=\"1111\" data-original=\"https://pic3.zhimg.com/v2-238deba8138b9fbe7ee76b86850a06e6_r.jpg\"></figure><p data-pid=\"gugvxGNa\">我在UCLA CS系的导师Demetri是英国皇家学会的院士（并列于牛顿、本杰明富兰克林、霍金等人），奥斯卡技术奖得主，他是1980年代计算机图形学里第一个做物理仿真的人，可谓元宇宙物理引擎之父。他同时也是计算机视觉泰斗，发明了snake算法。他其实还跟Hinton一起在二十多年前就发表了世界上第一篇用神经网络做物理仿真的图形学文章，似乎常常被人漏cite。我在数学系的共同导师是Joseph，他是陶哲轩的同事（我现在也是了），level set发明人Stan Osher的徒孙和同事，曾被discover评为40岁以下最聪明的20个大脑之一(<a href=\"https://link.zhihu.com/?target=https%3A//www.discovermagazine.com/the-sciences/20-best-brains-under-40\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">20 Best Brains Under 40</a>)，他是图形学里最有名的做有限元固体仿真的人。</p>\n<p data-pid=\"8cjAsf4J\">2010年秋天，我跟一个朋友一起联系了Demetri，以及Joseph和朱松纯老师。朱老师给出了很理性的不赞成我转系的答复。（后来朱老师对我改观，跟Osher一起加入了我的博士委员会，再后来通过挚友，如今北大智能学院的朱毅鑫教授，形成密切的学术合作关系，这是后话。）Demetri和Joseph冒着很大的实验室财务浪费的风险，看着我一段蹩脚的弹簧模拟代码（MATLAB写的），但是考虑到我以前发表过相对论相关的论文应该脑子不笨，给了我一个机会。我赶紧红牛下肚，花了几个通宵强行通读了一本教材，并复现出了一篇有限元肌肉仿真的siggraph文章。诸如此行为，是impress图形学教授最简洁有效的手段。从此一发不可收拾。</p>\n<p data-pid=\"NQJ2XQ80\">写代码和图形学，我入门都很迟。 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/19787805e0d1f80fe5501ec60be84d6a\" data-hash=\"19787805e0d1f80fe5501ec60be84d6a\" data-hovercard=\"p$b$19787805e0d1f80fe5501ec60be84d6a\">@胡渊鸣</a> 初中就写刚体引擎小游戏了，我博一还在自学C++模板。跟许多有理想的图形学或游戏爱好者一样，从头搭建一个自己的引擎是一个抑制不住的冲动。2012年初，补完所有计算机和应用数学课程的我结合自己的物理背景，摸索出了一个长期目标：用物理仿真去重建这个世界。Demetri也鼓励我：你比谁都适合去close the gap between virtual reality and physical reality， 把虚拟世界跟物理世界给打通。那时候没有元宇宙这个说法，但是我的两个导师都是digital double虚拟人体的深度发烧友，这对我的科研兴趣的影响不可谓不大。回到物理引擎这个构想上，心动不如行动，这世界五颜六色千变万化，那这引擎就叫魔方大，哦不，百变怪吧！于是 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/cffjiang/ditto\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ditto</a> 诞生了：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5df3bb876e273873cf2b6618fa97ca31_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1714\" data-rawheight=\"712\" class=\"origin_image zh-lightbox-thumb\" width=\"1714\" data-original=\"https://pic2.zhimg.com/v2-5df3bb876e273873cf2b6618fa97ca31_r.jpg\"></figure><p data-pid=\"B7Nd-WL8\">ditto里包含了几个固体仿真和碰撞处理的练手项目，特别是隐式有限元的3D布料仿真。当时有<a href=\"https://link.zhihu.com/?target=https%3A//taichi.graphics/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">taichi</a>语言的话，应该写出来能当一次<a href=\"https://link.zhihu.com/?target=https%3A//games-cn.org/games201/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GAMES201</a>大作业拿个A+。可惜Ditto维持了半年后，我投入一篇siggraph文章的具体工作中，便没有再更新了。后来2018年<a href=\"https://link.zhihu.com/?target=https%3A//www.z-emotion.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">z-emotion</a>/ZelusFX公司的CEO突然联系我，说他2012年跟我要的ditto代码帮助他弄出来一个布料设计软件的公司，现在有很多用户。我开心了很久。</p>\n<h2>第二章：一炮炸出来两个坑</h2>\n<p data-pid=\"oFV-5iWw\">我博士期间花了两年时间合作的第一个项目，是物体破碎。网上有人说，计算机图形学是程序员的三大浪漫之一（另两个是操作系统和编译原理），但那时的我还没有看到浪漫，只看到了狂拽炫酷，只想在siggraph上播最帅的demo，做最靓的仔。</p>\n<p data-pid=\"9PM9S8f2\">那时我学完了计算固体力学。跟许多做仿真的初学者一样，一切都是从模拟果冻开始，毕竟果冻是最典型的弹性体，并且往往很软，不会给ODE（常微分方程）的时间步离散格式带来过分stiff从而要么dt小，要么系统难解的这个数值问题。于是在弹塑性固体里面，我找到一个想要模拟的案例：子弹射穿果冻。那时乃至今日看来，都没有多少比这更炫酷的实拍视频：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b83b888f52f42c9b975df6a453bb2516_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"374\" data-rawheight=\"187\" data-thumbnail=\"https://pic3.zhimg.com/v2-b83b888f52f42c9b975df6a453bb2516_b.jpg\" class=\"content_image\" width=\"374\"></figure><p data-pid=\"MlJL0mfx\">现在教职期间，我常告诉自己的学生，想做什么科研，在大致调研相关工作并确定学术品位和潜在影响力之后，可以直接开始撸代码，不要太担心techinical contribution不够。因为你开始做之后，很快就会遇到你之前多半没预料到的问题，解决它们将成为你文章的最主要contribution。我们用有限元去写果冻破碎，不到半个月，就碰到了两个重大的难题：（1）如何自然破裂，即不能在裂面看到三角形丑陋的样子，和（2）如何稳健地处理复杂碎片之间的摩擦碰撞。</p>\n<p data-pid=\"YdwRAAKQ\">拓扑变化哪家强，levelset敢称王。要实现自然破裂，结合有限元和level set方法是一个非常巧妙的思路。Level set有非常强的灵活性，可以从各种自然的角度去分裂四面体，而且可以完全避免重新划分网格（remesh）。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3506d865fdc6a208e3168b5daba8df9b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1321\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb\" width=\"1321\" data-original=\"https://pic4.zhimg.com/v2-3506d865fdc6a208e3168b5daba8df9b_r.jpg\"></figure><p data-pid=\"T0iOnaEn\">Levelset方法的发明人Stan Osher在UCLA，给了我们一些宝贵的建议，很快，破裂的问题便迎刃而解了。</p>\n<p data-pid=\"nMINNFxp\">这篇文章，我更主要负责的是做摩擦碰撞。建模破裂之后，这顺其次成为最头疼的事情。levelset的marching tetrahedra切割法带来了无数形状“恶心”的果冻碎片：在裂面上，有的三角形瘦如一道闪电，有的扁如一张大饼。计算几何上，这些奇特的三角形被称作是“ill conditioning”，想要用普通几何方法去搞定它们的碰撞，不说碰撞算法本身的case难以穷举，光是浮点数精度带来的千变万化的误判就足以让人望洋兴叹。我花一年时间试了很多算法，皆以宣告失败。</p>\n<p data-pid=\"z_W5LEFt\">最值得讲的一个算法，是一个非常大胆的idea。我把解算完的固体投射到一个规则的网格上，然后让网格假装看到的是不可压流体，求解一个泊松方程，把速度场变成无散的，再插值回到固体上。这竟给出了非常漂亮的不穿透解！但是缺点在于，物体的运动被变的太像流体一般轻盈灵动了，缺少了那份固体特有的执拗。我便去问我的导师Joseph，有没有类似于这个解流体方法的解固体的方法，我想拿来在碰撞上试一试。他回忆良久，说出了我一个我随后持续专注十年的名称：MPM。</p>\n<p data-pid=\"noJINPyj\">MPM是1995年在美国的国家实验室发明的。它是一个混合拉格朗日粒子和欧拉网格的固体解算方法。往前追溯到1960年代的Particle-In-Cell（PIC法，最初用于求解等离子体物理的麦克斯韦方程）和1980年代的Fluid-Implicit-Particle-Method (FLIP法，用于流体结算， <a class=\"member_mention\" href=\"https://www.zhihu.com/people/9d0cd62f9071c2b003b2ef7b017fb7f5\" data-hash=\"9d0cd62f9071c2b003b2ef7b017fb7f5\" data-hovercard=\"p$b$9d0cd62f9071c2b003b2ef7b017fb7f5\">@张心欣</a> 的导师Robert Bridson，我的师叔，于2005年引入图形学）。它像流体一样，自动防止了材料间的穿透，又可以漂亮地求解固体的方程。把MPM拿过来做碰撞处理，在当时的我看来，再合适不过了：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-fe72dd6fa5e1f54be680d8b67493d879_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1298\" data-rawheight=\"365\" class=\"origin_image zh-lightbox-thumb\" width=\"1298\" data-original=\"https://pic2.zhimg.com/v2-fe72dd6fa5e1f54be680d8b67493d879_r.jpg\"></figure><p data-pid=\"0fsLBwgV\">终于，我交了一份目前回头看来远远不够完美的答卷：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2dd4973846c53400f1b9d8e3494bebc5_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"450\" data-thumbnail=\"https://pic2.zhimg.com/v2-2dd4973846c53400f1b9d8e3494bebc5_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-2dd4973846c53400f1b9d8e3494bebc5_r.jpg\"></figure><p data-pid=\"Iy4NNjsl\">这颗子弹大的有点夸张，更像一枚炮弹。它被评为了SCA 2013的Best Paper Award。它也炸开来两个MPM带来的学术大坑：拓扑变化的多材料，和自动处理的摩擦碰撞。我和MPM被凑到了一起，从暧昧到沉迷。</p>\n<p data-pid=\"pB3flz32\">彩蛋：文章里还首次用刑了一只犰狳，引起了许多论文读者的不适。但后来这个场景，竟多次被别的研究者作为benchmark来follow，那可不怪我咯。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-589ffa9b1f957f308280f820659b6cd2_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"450\" data-thumbnail=\"https://pic3.zhimg.com/v2-589ffa9b1f957f308280f820659b6cd2_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-589ffa9b1f957f308280f820659b6cd2_r.jpg\"></figure><h2>第三章：雪与海的浪漫</h2>\n<p data-pid=\"-ITbKn0c\">学习MPM的那几个月，同组的俄国师兄Alexey也加入到粉丝小分队中来，并主导了广为流传的“MPM snow”的那篇文章。一时间，我们组和迪士尼的联姻传为佳话。有我在内的好几个学生去迪士尼实习和参与写作Production软件代码。在冰雪奇缘的庆功宴上，我第一次尝到技术产业化的喜悦。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-990de8e73c88e6fe3cd11891158ca9af_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"606\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic4.zhimg.com/v2-990de8e73c88e6fe3cd11891158ca9af_r.jpg\"></figure><p data-pid=\"-blVHMn4\">冰雪奇缘之后，迪士尼做了一个Big Hero 6超能陆战队。在那里，MPM被用在模拟一些奇怪的材料上，这是个未怎么宣传过的信息。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-aaeebfd99143f0bca8db5525c2c87c7e_b.gif\" data-size=\"normal\" data-rawwidth=\"375\" data-rawheight=\"398\" data-thumbnail=\"https://pic3.zhimg.com/v2-aaeebfd99143f0bca8db5525c2c87c7e_b.jpg\" class=\"content_image\" width=\"375\"><figcaption>Disney&amp;#39;s Big Hero 6</figcaption></figure><p data-pid=\"0qnp2mb8\">时间随之转移到2014年。我打算博士毕业了，想做一些在MPM和PIC里面更数学更基础的东西，又同时希望能在现有的FLIP流体和MPM固体上做出有应用价值的变革。那么回顾一下，用FLIP做流体，和用MPM做固体，流程中的数学上有什么不合理的hack呢？内行人一定会指出：是FLIP-PIC blending ratio。FLIP和PIC其实可以指代混合粒子网格法中，网格向粒子插值的那个步骤。PIC直接做速度场的插值，但是会引入巨大的数值粘性，FLIP插值速度增量，但是会引入巨大的不稳定性。于是图形学的流体泰斗Robert Bridson教授在2005年就提出，把FLIP的结果乘以0.97，再把PIC的结果乘以0.03，然后把它们加起来。这个数字是一个用户可调的参数，但可调而不可控！不同的场景下，不同数字会给出非常不同的结果。它是艺术家的噩梦，是强迫症的地狱。于是我决定干一票大的，把这个东西除掉，因为我有一个信念：需要设置heuristic参数的仿真算法绝不可能是一个好算法的最终形态。</p>\n<p data-pid=\"ikJW2ZLj\">再结合对于角动量守恒方程的理论分析，跳过一些技术细节，Affine Particle In Cell （APIC）被误打误撞推导了出来。FLIP流体和MPM固体进入了一个新的篇章，艺术家们可以更轻松的得到它们需要的仿真结果粘稠度，无论是山川大河，还是岩浆滚滚。它们在我心中，是可以媲美冰雪的浪漫。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7ea0a7e40e6e0a559b67da86423f1326_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1291\" data-rawheight=\"432\" class=\"origin_image zh-lightbox-thumb\" width=\"1291\" data-original=\"https://pic3.zhimg.com/v2-7ea0a7e40e6e0a559b67da86423f1326_r.jpg\"></figure><p data-pid=\"jjORgQzk\">迪士尼非常高兴，迫不及待地把APIC用进了海洋奇缘：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-218278e9a5807afb79c40e9fe5da4e02_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1337\" data-rawheight=\"398\" class=\"origin_image zh-lightbox-thumb\" width=\"1337\" data-original=\"https://pic3.zhimg.com/v2-218278e9a5807afb79c40e9fe5da4e02_r.jpg\"></figure><p data-pid=\"TG8xcioL\">2015年夏天，我毕业和结婚。婚礼在洛杉矶南边的玻璃大教堂，有山有海有树林。那年暑假的SIGGRAPH，我认识了很多很多志同道合的朋友。印象最深的是在流体的session上，我看到一位风流倜傥的银发少年。他跑来问我，“今年的好文章众多，能长久流传的是哪几个？”我随便应付了几句。他说道：“今年的文章，有两篇最diao，一篇是我的<a href=\"https://link.zhihu.com/?target=https%3A//zhxx1987.github.io/IVOCK.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">IVOCK</a>，另一篇是你的APIC。”我吃了一惊，连忙互换姓名。原来这位霸气的少年，叫 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/9d0cd62f9071c2b003b2ef7b017fb7f5\" data-hash=\"9d0cd62f9071c2b003b2ef7b017fb7f5\" data-hovercard=\"p$b$9d0cd62f9071c2b003b2ef7b017fb7f5\">@张心欣</a> ，他现在带领“泽森科工”在为中国特效打天下。那时纯粹的我们，在对方双眸反光里，都看到了一个勇者，持各自打造的巨剑，浴血挑战着一头叫做数值耗散的恶龙。自那天起，我们也开始了迄今长达七年的并肩合作。</p>\n<p data-pid=\"0ds1TlVX\">毕业之后，我继续深耕MPM固体和流体。学术界的人其实蛮喜欢立flag。我就一直尽量坚持去贯彻一个基本原则：即使我的仿真文章是投在图形学会议和期刊上，我也绝不为了视觉效果去做任何不符合物理和数学原理的hack；我需要每个算法都普适到整个计算物理学。这个原则给后来教授期间的我带来了很多的好处：包括了（1）自然科学研究基金的青睐，（2) 在Nature子刊发表的MPM自然灾害预测技术（雪崩，山体滑坡，泥石流，冰川碎裂，海啸），</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-067442acd35d6f42fd18f0c0ff9f8d1b_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"338\" data-thumbnail=\"https://pic4.zhimg.com/v2-067442acd35d6f42fd18f0c0ff9f8d1b_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-067442acd35d6f42fd18f0c0ff9f8d1b_r.jpg\"></figure><p data-pid=\"7u_PP1au\">以及（3）医院十分喜爱的虚拟创伤和手术的仿真平台：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f874a6199ada6cbfc4f02f4a6379e0f0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1072\" data-rawheight=\"528\" class=\"origin_image zh-lightbox-thumb\" width=\"1072\" data-original=\"https://pic1.zhimg.com/v2-f874a6199ada6cbfc4f02f4a6379e0f0_r.jpg\"></figure><p data-pid=\"F_fgGdd9\">它们也许没有雪与海一样浪漫，但却更加真实和直接地影响到了这个世界，甚至帮忙拯救生命。这些工作也给图形学里做物理仿真的同行在自然科学和医学领域赢得了更多的尊重，纠正这些别的领域的人关于图形学就是不断引入他们做的东西的误解。毕竟很多图形学论文喜欢把这个叫作contribution：“We introduce the XXX method to computer graphics.” 我想做的，是要物理学和数学的人发论文说同样的这句话，但是把“to”改成“from”。最近遇到的一位做经典力学的同事发出感叹：“好一波反向输出！”</p>\n<p data-pid=\"H2lxcFH9\">既然想到固体仿真在医学上的应用，一缕额外的回忆又涌上心头。2016年，我特别想把虚拟人体给产业化，也探索了很多不同的方向。其中比较有意思的，便是与lab师弟，也是好哥们的如今体素科技CEO丁晓伟讨论的整形手术预测。当时我跑了个隆胸动力学预测的demo（包含了对胸部软组织、皮肤、和硅胶假体全方位的模拟），也在洛杉矶聊了一些整形医生，但感觉市场需求度不够大，所以没有继续下去。也不知道元宇宙跨领域越来越火热的今天，这个方向现在怎么样了。</p>\n<p data-pid=\"PzI2jStU\">【这里本有个视频，但不能放】</p>\n<h2>第四章：摩擦摩擦，在光滑的路上，摩擦</h2>\n<p data-pid=\"GIXCKH86\">前面说到，2012年我便用MPM的思路去尝试处理了破碎仿真里的物体碰撞。但是那个算法只能对付不同碎片之间的碰撞，对自碰撞self collision无可奈何。MPM作为一个用粒子来描述物体的离散格式，毕竟天然最适合如冰雪沙土般像粒子一样的物体。</p>\n<p data-pid=\"9z6mHyaG\">布料和毛发则是每一个做固体仿真的人都想攻克的东西。科学研究应当尽量以人为本，而布料和毛发跟人的关系真的太大了。处理摩擦碰撞的算法很多，它们做的好的地方都一样优秀，做的不好的地方却五花八门。于是2017年，我重新回到摩擦碰撞这个战场。跟MPM处在105度热恋中的我，选择了一个所有人都没有想过的思路：用MPM塑性去挑战这个课题。</p>\n<p data-pid=\"SdoOYtLo\">那时我已经学会了Druker-Prager塑性屈服面，并成功用它做出了MPM沙子。沙子的本构模型有两个要素：第一，它支持分开，不支持挤压；第二，它往边上滑的时候，切向力和法向力要满足库伦摩擦定律。仔细回味一番，这两个特性，明明不只是沙子所特有的啊！布料、毛发、橡皮、刚体等等，哪个常见固体的碰撞不是要遵循这两个定律呢？</p>\n<p data-pid=\"davdSEGJ\">于是我决定抛弃传统的基于点和三角形，边和边几何相交特性的摩擦碰撞理念（ditto里实现过的那一套），而是采用MPM“连续介质力学”的观点。管他是布料还是毛发，都是一些连续的空间占用而已。在这个观点下，它们跟沙子唯一的区别便是，沙子是三维的“体”，而它们分别是三维空间中二维和一维的曲面。想到这一点，一切便豁然开朗：如果Drucker-Prager塑性可以让三维的MPM沙子满足摩擦碰撞的性质，那么我只需要推导出二维和一维子空间上所对应的类似的塑性，便可以让MPM布料和毛发满足同样自动摩擦碰撞的性质！</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4185c9d6d8c27fd1f0a108533b9df7b3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1314\" data-rawheight=\"744\" class=\"origin_image zh-lightbox-thumb\" width=\"1314\" data-original=\"https://pic4.zhimg.com/v2-4185c9d6d8c27fd1f0a108533b9df7b3_r.jpg\"></figure><p data-pid=\"DWlT7MpD\">以布料为例，通过对形变梯度的QR分解，我们可以设计一个精巧的弹性能量和塑性屈服面来“管理”布料在法向上摩擦碰撞力所需要满足的应力条件。直观上来讲，在曲面方向，布料仿佛一束束被交织的沙砾，沿着布料的切向望去，满布上都写着两个字“库伦\"。</p>\n<p data-pid=\"-6UkK1sQ\">意识到了这一点，处理一维二维曲面的摩擦碰撞便与处理三维沙子的摩擦碰撞别无二致。只需要将这新的本构模型写入曲面上的顶点，MPM便全自动地默默处理了剩下的一切。从布料到毛发，从地毯到毛衣，一切传统的碰撞检测和碰撞处理都被抛弃，一把粒子，一架网格，便能生成一段美妙的动画。这种颠覆式的建模方式，如今我回头看，仍觉得是走出了魔鬼的步伐，是自己学术生涯最满意的MPM论文。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bf080d15c4cee438e3b2245cc12d6889_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1598\" data-rawheight=\"962\" class=\"origin_image zh-lightbox-thumb\" width=\"1598\" data-original=\"https://pic2.zhimg.com/v2-bf080d15c4cee438e3b2245cc12d6889_r.jpg\"></figure><p data-pid=\"QlMb0E8F\">那一年去siggraph 2017宣讲物质点法，抒发的情感只能用已故的李兆基老师的经典台词来形容，“比我的初恋更加诗情画意。”</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5aa6a916aedaebea105666495399faef_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"251\" data-rawheight=\"171\" data-thumbnail=\"https://pic4.zhimg.com/v2-5aa6a916aedaebea105666495399faef_b.jpg\" class=\"content_image\" width=\"251\"></figure><p data-pid=\"ar4_bMQT\">这篇文章的2D版还在太极语言中被实现了出来（<a href=\"https://zhuanlan.zhihu.com/p/414356129\" class=\"internal\">橘子猫：Taichi实现2D Anisotropic Elastoplasticity Cloth</a>），代码十分简洁，妙不可言。</p>\n<p data-pid=\"KxNsmjcV\">后来第二年的SIGGRAPH2018，哥伦比亚大学杀出来一员猛将 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/ecf74d1b95762c56eebfe55935655e26\" data-hash=\"ecf74d1b95762c56eebfe55935655e26\" data-hovercard=\"p$b$ecf74d1b95762c56eebfe55935655e26\">@Raymond Fei</a>，把这套步法跟APIC结合起来，做了一份令人叹为观止的布料与水相互作用的工作（<a href=\"https://link.zhihu.com/?target=https%3A//github.com/nepluno/libwetcloth\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">libwetcloth</a>），一百分的赏心悦目。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e936274713756ef62e6c7d2f8ab60f15_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1999\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb\" width=\"1999\" data-original=\"https://pic2.zhimg.com/v2-e936274713756ef62e6c7d2f8ab60f15_r.jpg\"></figure><p data-pid=\"bB2-2tu1\">参会SIGGRAPH 2017，我还有一个额外的目的：招纳自己的第一个学生。开会时，我在宾夕法尼亚大学的助理教授生涯刚开始不久，孤苦伶仃。一场场灯红酒绿的派对，一间间熙攘喧嚣的酒吧，我在会场外面的夜搜寻着那个可以一起谈笑风生个几年的小伙伴。高级的猎人都会伪装成猎物。在一个昏暗的角落，我看到一个熟悉的身影在月下独酌，对我目送秋波。那不是一年前张心欣在烤肉店介绍给我的 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/9f3ee58deeb19551bd92d9591e4503d7\" data-hash=\"9f3ee58deeb19551bd92d9591e4503d7\" data-hovercard=\"p$b$9f3ee58deeb19551bd92d9591e4503d7\">@李旻辰</a> 吗？我记得他！UBC的一个精壮帅小伙儿，跟张心欣做过一篇流体的文章。我点了两杯火辣的苹果马提尼，摇摇晃晃地走了过去。“还记得我吗？”“记得记得，来，搞一杯！”那一杯，给下一个不醉不归的五年学术夜宴，拉开了序幕。</p>\n<h2>第五章：少年英雄胡渊鸣</h2>\n<p data-pid=\"tHzUyEZo\">2017年的夏季注定要遇到更多不平凡的人。话分两头，在酒吧初遇李旻辰之前的那一年早些时候，图形学领域广泛流传着这么一个都市传说。有一位策马扬鞭的少年武士，他没有发表过一篇SIGGRAPH论文，但他实现了一百篇；他没有开源过一套代码，但他有一百万行张弓待发；他接手的图形学仿真实现，可以在一夜之间效率提高十倍；他三天没有睡觉，便重现了四年来的所有MPM论文，并且提出了一百种改进的方法。他究竟是神仙的化身？还是地狱的使者？一时间流言四起，有人甚至说他要建立新的计算机图形学秩序。还在默默想着MPM问题的我更是夜不能寐。这小子，是何方神圣？</p>\n<p data-pid=\"zkojv9uk\">他果不出所料地杀上门来了。如想象般翩若惊鸿的 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/19787805e0d1f80fe5501ec60be84d6a\" data-hash=\"19787805e0d1f80fe5501ec60be84d6a\" data-hovercard=\"p$b$19787805e0d1f80fe5501ec60be84d6a\">@胡渊鸣</a> ，带着一位比他更加神秘且腼腆的小伙伴，从清华杀到了我UPenn实验室的门口。“我们来跟你一起做MPM。”他的话简短有力。“好，开始吧。”那时的我们，不会寒暄客套，只需要看到一个共同的研究目标便一切尽在不言中。那时他带来的小帮手，叫方火奥，我去google，哦，方燠 yù。现实绝非一帆风顺，我们高速迭代经历了一些失败的科研项目，才最后有了MLS-MPM的发明和后续，简洁而又精彩。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c98735f7192a2005e1f7f4b121126f32_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1412\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb\" width=\"1412\" data-original=\"https://pic3.zhimg.com/v2-c98735f7192a2005e1f7f4b121126f32_r.jpg\"></figure><p data-pid=\"ChXQyX58\">那时，我有一套自己的C++库，远超当年的ditto。我的库叫做“jixie”（机械)。胡渊鸣带来了他的库，叫做“taichi”（太极）。那时太极还是一个C++库。两个库各有千秋，碰撞出许多热烈的火花。胡渊鸣对我助理教授生涯的研究重心，尤其在对榨干计算机性能的追求上，起到了很大的启发性作用。</p>\n<p data-pid=\"9csAkYFd\">英雄相惜，终须一别，胡渊鸣要远赴MIT去做别的项目，我在披萨店饯别。“MPM的发展将缓慢下来！”我怅然若失。他笑了笑，告诉我，仍有一个人跟我去打MPM多物理仿真的江山。我目光一瞥，才猛然惊醒，这段时间在刀光剑影里一起谈笑风生的，还有另一位比他更年轻的英雄少年！言辞不多的他，在科研的战场上，虽不像胡渊鸣一样耀眼的艳丽，却散发出一股更加刚猛的炽热。</p>\n<p data-pid=\"fzoi2z_T\">方燠成为了我第二个学生。如果旻辰是一杯浓厚的酒，底蕴日渐成熟，方燠就是一把嗜血的刀，愈加锋利凶残。他在随后的5年里，把旧论文的实现和新想法的尝试这两件事的速度都做到了像居合斩一般，一刀断骨刀刀落命。</p>\n<p data-pid=\"OEycTUBo\">在那段日子里，在方燠、旻辰、和一干猛将的拼搏下，我们一直推进高性能的MPM多物理仿真，直到亿万粒子级别的仿真也变得轻松写意。我们通过跟超算中心的合作，把MPM发展到了能进行Exascale computing的超算机上，每秒算10的18次方个浮点运算。这样看来，对于高分辨率的追求，我们是认真的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-5b93ca9c5c95c1edc083dbadb9ddc4e4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1194\" data-rawheight=\"474\" class=\"origin_image zh-lightbox-thumb\" width=\"1194\" data-original=\"https://pic1.zhimg.com/v2-5b93ca9c5c95c1edc083dbadb9ddc4e4_r.jpg\"></figure><p data-pid=\"TrpJDCTN\">后来，我的实验室汇集了更大一批意气风发的孩子们，屈子吟 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/94c60141d359d88b9e2f99ef5e453b74\" data-hash=\"94c60141d359d88b9e2f99ef5e453b74\" data-hovercard=\"p$b$94c60141d359d88b9e2f99ef5e453b74\">@ziyin</a> (<a href=\"https://zhuanlan.zhihu.com/p/72916159\" class=\"internal\">ziyin：北京电影学院发了一篇满是数学公式的计算机顶会论文，并开源了其代码</a>) ，仇宇星， <a class=\"member_mention\" href=\"https://www.zhihu.com/people/6df88704875b9adbef7231ac365bba95\" data-hash=\"6df88704875b9adbef7231ac365bba95\" data-hovercard=\"p$b$6df88704875b9adbef7231ac365bba95\">@王鑫磊</a> ，李轩，陈宇诺， <a class=\"member_mention\" href=\"https://www.zhihu.com/people/7808e2f478cbb347bfb86ac1c44e43c4\" data-hash=\"7808e2f478cbb347bfb86ac1c44e43c4\" data-hovercard=\"p$b$7808e2f478cbb347bfb86ac1c44e43c4\">@曹亚帝</a> ，等等，他们围绕着方燠主导架构的c++仿真引擎ziran（自然），在物理模拟的海洋里尽情嬉戏。他们飘逸的学术舞曲还在不断被谱写，有他们在身边，我感觉自己永远抓住了青春，每天都是学术上的“掰饼聚会”：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9b5c05793c7d6c8aadeabb657e6a2fd2_b.gif\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"338\" data-thumbnail=\"https://pic3.zhimg.com/v2-9b5c05793c7d6c8aadeabb657e6a2fd2_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-9b5c05793c7d6c8aadeabb657e6a2fd2_r.jpg\"><figcaption>To break bread is to affirm trust, confidence, and comfort with an individual or group of people.</figcaption></figure><p data-pid=\"12lO3_hC\">在帮助人类打通虚拟世界和现实世界的历史使命上，我们致力于仿真这一个点，用硬核的根基散发千万的枝叶。下面的这些都是我的实验室这些年研究过的方向。这些成果中也充满了极其珍贵的如北京大学朱松纯教授、陈宝权教授、以及浙江大学唐敏教授等前辈传授的经验和给予的帮助。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-bc93bb48ea9dbb6215589277b6ce4a5e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1141\" data-rawheight=\"636\" class=\"origin_image zh-lightbox-thumb\" width=\"1141\" data-original=\"https://pic3.zhimg.com/v2-bc93bb48ea9dbb6215589277b6ce4a5e_r.jpg\"></figure><h2>第六章：与timestep结缘</h2>\n<p data-pid=\"DW97ZLr-\"><i>步者乃一身之根基，运动之枢纽也。——《太极拳十大要论》</i></p>\n<p data-pid=\"efRyUvdZ\">在元宇宙的“基础架构”之中，如果建模是内功，渲染是招式，那么物理仿真就是步法或身法。步法与时间和运动紧密绑定在一起，在时间上做微分和积分，从过去预测未来，用未来指引过去。（指引过去，靠的是可微分模拟。）不管是逍遥派的凌波微步，泰森的蝴蝶步法，还是奥拉朱旺的梦幻脚步，它们都反映了一个道理：有一套成熟的步法是一位集大成者立于不败之地的一个可靠的保证。</p>\n<p data-pid=\"6B75lf_4\">在动力学物理仿真中，大家最常说的一个词，就是timestep：时间步长，Delta t。正向物理仿真的过程，本质上往往就是微分方程在时间轴上积分的过程，这个过程，又被称为timestepping method；我愿译其为“时间步法”。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-21a783f60cff407c35bdc251db65f846_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1682\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb\" width=\"1682\" data-original=\"https://pic3.zhimg.com/v2-21a783f60cff407c35bdc251db65f846_r.jpg\"></figure><p data-pid=\"Qsvw8jmC\">现实中的时间是连续的，但仿真中的时间是离散的。对于一段24 FPS的动画来说，每秒钟的理想情况，是让仿真算法从一个过去的时刻往前走24步，每步走1/24秒，生成24个几何形态。除非希望对现实的逼近追求更加极致的准确性，一个通用图形学算法最好具备只需要走24步的能力。如果往前预测1秒需要走48步，或者240步、2400步，那就往往是成倍的效率降低。</p>\n<p data-pid=\"Adx1V-EZ\">可惜的是，直到2015年左右，甚至今日，仍然有无数的图形学仿真算法需要走子步（substeps）。更令人痛苦的是，即使走了子步，它们中的绝大多数仍然不能保证数值的稳定性，俗称“爆了”:</p>\n<figure data-size=\"small\"><img src=\"https://pic2.zhimg.com/v2-1685221c5f74f89f7f38a70ec9ec977d_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"798\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"798\" data-original=\"https://pic2.zhimg.com/v2-1685221c5f74f89f7f38a70ec9ec977d_r.jpg\"></figure><p data-pid=\"Nk7DsyTT\">放错图了。爆了的仿真其实长这样：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d15a2e0fd42348fdc8e34ead5a5e741d_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"338\" data-thumbnail=\"https://pic2.zhimg.com/v2-d15a2e0fd42348fdc8e34ead5a5e741d_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-d15a2e0fd42348fdc8e34ead5a5e741d_r.jpg\"></figure><p data-pid=\"YxJgm6tY\">仿真爆了就意味着得调节参数把程序重跑。我2011年在工业光魔ILM实习，我那时的实习导师告诉我，ILM里在帮复仇者联盟的绿巨人设计肌肉仿真算法，浩克一发力，程序就爆炸，重跑停不下来，delta t 小的不能再小了，机房空调费都要烧个上百万。</p>\n<p data-pid=\"706T5Tzb\">为了能够迈出1/24秒或更大的步子，我开始致力于研究基于优化的时间步法。非线性非凸数值优化是一个非常厉害的领域，如今整个神经网络和深度学习都靠它。这个宇宙最基本的物理规律：热力学第二定律（熵增原理）本身也定义了一个优化问题。因此，越来越多的应用数学家开始用优化和变分法的思路去重新思考动力学偏微分方程的数值解。</p>\n<p data-pid=\"STvqkpvR\">弹性体模拟的方程便是一个可以重新定义为寻求最小值的优化问题！在此框架之下，时间步长可以迈的任意大，不会扯到蛋。</p>\n<p data-pid=\"fzSaziTN\">此间工作很多，图形学里早期工作比较有代表性的，包括刘天添 2014年的巧妙投影动力学“Projective Dynamics: Fusing Constraint Projections for Fast Simulation” 及其2017年的拟牛顿法“Quasi-Newton Methods for Real-time Simulation of Hyperelastic Materials”（<a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1hM4y1L7VY%3Fp%3D5\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年（第八届）中国科学技术大学《计算机图形学前沿》暑期课程_哔哩哔哩_bilibili</a>）（<a href=\"https://zhuanlan.zhihu.com/p/480006669\" class=\"internal\">冰点蓝：计算机图形学前沿(2019) Towards Real-time Simulation of Deformable Objects</a>），和我2015年参与的比较中规中矩的牛顿法“Optimization Integrator for Large Time Steps”。我的实验室后来则在下面四个地方分点发力：</p>\n<p data-pid=\"daii9Y1b\">李旻辰在2019年把拟牛顿法跟domain decomposition结合了起来，打败了一系列竞争对手，得到了一个非常高速度的有限元弹性体解决方案Decomposed Optimization Time Integrator “DOT”（点点有限元法）：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-fb42e74a49e0bb8b9258268a65b09533_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"146\" data-thumbnail=\"https://pic4.zhimg.com/v2-fb42e74a49e0bb8b9258268a65b09533_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-fb42e74a49e0bb8b9258268a65b09533_r.jpg\"></figure><p data-pid=\"r8XX935p\">王鑫磊则另辟蹊径，考虑多尺度网格multigrid，让MPM也走到了超大的时间步长上面，发明Hierarchical Optimization Time Integrator “HOT”（热辣物质点法），可以高效处理超级“硬”的弹塑性体，帮助工程力学设计的仿真：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b44554f58993714d73304b31dfef5dbc_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"338\" data-thumbnail=\"https://pic1.zhimg.com/v2-b44554f58993714d73304b31dfef5dbc_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-b44554f58993714d73304b31dfef5dbc_r.jpg\"></figure><p data-pid=\"5Ct8oerl\">方燠则跳出牛顿和拟牛顿的思路，以“快”为目的，把MPM的加速结合上了交替方向乘子法（Alternating Direction Method of Multipliers，ADMM）上。这个方法被称为“Silly Rubber”（愚人橡皮法），可以快速模拟各种MPM适合的材料，比如奶油：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-80a608d09f2004696198a8ab723a20c9_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"295\" data-rawheight=\"215\" data-thumbnail=\"https://pic2.zhimg.com/v2-80a608d09f2004696198a8ab723a20c9_b.jpg\" class=\"content_image\" width=\"295\"></figure><p data-pid=\"0du2tZm0\">我们最为得意的，也是最新搞出来的，便是李轩、李旻辰和我一起用几支烂笔头推导出来的SIGGRAPH 2022论文Energetically Consistent Inelasticity （ECI）。这个工作在数值计算理论上，我认为有很可观的意义：它首次让塑性力可以迈着同样大的步伐，被真正隐式求解了！也就是说之前的方法，包括上面提到的，都不准，都对塑性力做了一个强相关于 delta t 的其实很不准确的近似。那算的准有什么好处呢？当然是去跟现实对照了。跟现实连定性的视觉效果都对不上的虚拟物体，步法不够稳健，不能叫数字孪生，永远都只是游戏（没错， 这里说的的正是PhysX/PBD）。我们的坚持，是第一性原理，是我们希望一直尽力朝着真正的数字孪生方向前行的一些固执的原则。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d1144078722cb6dd6e5b0741ff085949_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"925\" data-rawheight=\"522\" class=\"origin_image zh-lightbox-thumb\" width=\"925\" data-original=\"https://pic2.zhimg.com/v2-d1144078722cb6dd6e5b0741ff085949_r.jpg\"></figure><h2>第七章：摩擦碰撞的第三次战役，IPC魔童降世</h2>\n<p data-pid=\"lNghaYil\">开始的那些年，从最初level set fracture中的一炮双响，到MPM布料，我一直在跟“摩擦碰撞”这个难题对干。每一场仗都打的很漂亮，但都还是存在很多Limitation。以2017年的MPM布料为例，作为它的缔造者，我比任何人都能更清晰的看到它光芒下令我不堪面对的缺憾。作为一个MPM方法，它在隐式积分条件下性能非常差。它对粒子和网格的依赖给几何体强加了许多苛刻的要求：比如两者的分辨率需要尽量吻合。同时，它又像一台看似美好的特斯拉自动驾驶汽车，一不小心甩给你一个不大也不小的错误（数值粘性和偶尔的数值穿透），让你在使用时总是心怀忌惮。比如正如下图所示，MPM布料做毛衣虽然厉害，但是仔细看去，还是出现了许多穿透：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-56bda1fc22da162eee017ba6abcb58c2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"350\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-56bda1fc22da162eee017ba6abcb58c2_r.jpg\"></figure><p data-pid=\"7o_2CEDH\">穿透会非常严重的影响仿真的精度和可信度。它不只是模型视觉上的错误，随之而来的弹性力和摩擦力也会因穿透而变得离谱和虚幻。因此，长久以来，至少在布料这一个小方向上，我并没有能够把MPM从特效和游戏的应用中打出去。换而言之，因我坚信元宇宙和游戏的最重要区别是对“准”的把握上（这也是我不认为NVIDIA的omniverse拿着一个基于不物理方法推导出来的PhysX引擎可以做成真正元宇宙物理引擎的根本原因），MPM在布料这个方向上要走的路还很长，还需要后来者的努力。</p>\n<p data-pid=\"JYHXxG7q\">时钟拨到2020年前夕，没有征兆又似蛰伏许久的一件事情发生了。之前我把旻辰比作美酒，他便真的是这样一个学生，在陈酿的千锤百炼中一不小心就饱满丰厚，醇香持久。没几年，他便从一个学生潇潇洒洒地蜕变为一个成熟的合作伙伴。那晚，我郑重的告诉旻辰，“你刚完成的这个叫做IPC的项目，把一个困扰了计算机图形学和工程力学无数研究者几十年的一个领域给终结掉了，完美本无法触及，但IPC是我入行以来见过的，最接近完美的仿真技术。”在这一年后，旻辰以IPC斩获SIGGRAPH年度最佳博士论文奖，毫无悬念。</p>\n<p data-pid=\"d5Cjb9uR\">IPC的全称是Incremental Potential Contact，中文作增量势能接触，很拗口，还是就叫IPC吧。它的算法冗长而又毫不晦涩，刚猛而又不失优雅。在数值优化的框架下，IPC把所有基于mesh的物理仿真中“不许穿透”这个令学术界和产业界都为之痴迷的难题，从仿真问题的数学形态上就直接通过一个灵巧的定义给彻底毙掉了，其后的算法自然是如出入无人之境。“从此穿模是路人。”</p>\n<p data-pid=\"_AZll81k\">技术上，IPC提出了一个崭新而又巧妙的关于“碰撞”的数学描述方法：所谓碰撞，便是在动力学过程的最小作用量原理下，要求任何非邻接几何表面之间的欧氏距离在连续的时间轴上恒大于零。它正是又一个timestepping的时间步法！如此一来，我们得到了一个可以用数学完美描述的约束优化问题。再配以些许精巧而不诡野的算法设计，最终的IPC技术在数学、算法和实现上都令人信服。毫不夸张的说，IPC是数值仿真自发明以来，唯一的把精确碰撞和摩擦这两个要求完美解决掉的办法。它唯一的缺点是计算效率不够快；被我们后来攻克，按下不表。</p>\n<p data-pid=\"UeVRyIWC\">IPC及其2021年后续工作赋能了无数之前计算机仿真界根本做不了的事情，以绝对的稳定性、精确性、和数值收敛性涵盖了三维柔性体（“百万四面体的毛球”和“是绳子就坚持一百秒”）：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-94725c8351a4706751802f4a46d32802_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"338\" data-thumbnail=\"https://pic3.zhimg.com/v2-94725c8351a4706751802f4a46d32802_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-94725c8351a4706751802f4a46d32802_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7a13d7efe307c485f174d10e15bb00fb_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"588\" data-rawheight=\"250\" data-thumbnail=\"https://pic4.zhimg.com/v2-7a13d7efe307c485f174d10e15bb00fb_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"588\" data-original=\"https://pic4.zhimg.com/v2-7a13d7efe307c485f174d10e15bb00fb_r.jpg\"></figure><p data-pid=\"9YiNj5C7\">二维布料（轻松处理打结，和*任意多层*布料上身，这里只展示了四层，毕竟我们的建模制版技能点加的比较少）：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3b58ab0a3a80fbc6de7d64880aec1e43_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"596\" data-rawheight=\"266\" data-thumbnail=\"https://pic4.zhimg.com/v2-3b58ab0a3a80fbc6de7d64880aec1e43_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"596\" data-original=\"https://pic4.zhimg.com/v2-3b58ab0a3a80fbc6de7d64880aec1e43_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a20d86c7750fe7a9c0441d715a8f7182_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"482\" data-thumbnail=\"https://pic3.zhimg.com/v2-a20d86c7750fe7a9c0441d715a8f7182_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"597\" data-original=\"https://pic3.zhimg.com/v2-a20d86c7750fe7a9c0441d715a8f7182_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b5dd7a1f1c90d0d6855caf3c23773f88_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"621\" data-thumbnail=\"https://pic1.zhimg.com/v2-b5dd7a1f1c90d0d6855caf3c23773f88_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-b5dd7a1f1c90d0d6855caf3c23773f88_r.jpg\"></figure><p data-pid=\"0wqCAAck\">二维薄壳（跟真实的一叠扑克牌的厚度完全吻合，没有任何别的方法可以做到）（这是不是可以拿去开元宇宙赌场？）：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-300f122cefe92adc51e530dae0a3bca5_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"293\" data-thumbnail=\"https://pic2.zhimg.com/v2-300f122cefe92adc51e530dae0a3bca5_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-300f122cefe92adc51e530dae0a3bca5_r.jpg\"></figure><p data-pid=\"-L8HswDe\">以及首次有“不穿透保证”与“精准摩擦力”两个性质的的一维细杆（面条、毛发）：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-cf9f75609788e0d96c9713396d30be4e_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"300\" data-thumbnail=\"https://pic3.zhimg.com/v2-cf9f75609788e0d96c9713396d30be4e_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"597\" data-original=\"https://pic3.zhimg.com/v2-cf9f75609788e0d96c9713396d30be4e_r.jpg\"></figure><p data-pid=\"knnpEC50\">旻辰向来沉稳低调，他宣传IPC的文章（<a href=\"https://zhuanlan.zhihu.com/p/154542103\" class=\"internal\">李旻辰：IPC: SIGGRAPH 2020开源有限元碰撞独家处理方案</a>）也跟他的人一样靠谱实在。2020年1月，我在IPC的第一篇论文里，写下过这么一段总结（中文意译略有改写）：</p>\n<p data-pid=\"bAeQ6tav\"><i>“IPC技术适用于所有基于网格的固体模拟。无论是自碰撞、外碰撞、甚至是来自于低维曲面的碰撞，IPC都是一个绝顶灵活、有效、和无条件保证成功的解决方案。IPC对图形学和工程力学基于或不基于有限元的全部应用都提供了有史以来第一个几何不穿透，体积不反转的可证明的直接保证。从此以后，跑固体仿真只需要输入真实世界可以测量的物理参数和几何参数，而再不需要去调节所谓的数值参数。在此之上，IPC承诺必定能够对任意复杂的状态给出求解，并且这个解就是这个世界上现存所有算法能给出的，最接近真实世界摩擦碰撞结果的解。”</i></p>\n<p data-pid=\"l_w2nrtw\">几年过去了，这个总结被图形学、机械工程、以及机器人领域的同行不断的引述和验证。作为一个学者，我从未如此夸过一个工作，毕竟有吹牛皮之嫌。但是IPC不一样，我不担心，因为这个牛皮是钢铁铸成，永远也吹不破。</p>\n<p data-pid=\"r0bBUWCo\">IPC这么完美，还有什么可以改善的呢？正如上文所说，它的计算效率存在一定的问题。在我们一筹莫展之计，一位老友突然与我们取得了联系。此人名作阴阳（ <a class=\"member_mention\" href=\"https://www.zhihu.com/people/da965a10cfcc7dd65a171f9c00e860f7\" data-hash=\"da965a10cfcc7dd65a171f9c00e860f7\" data-hovercard=\"p$b$da965a10cfcc7dd65a171f9c00e860f7\">@Yin Yang</a> ），继胡渊鸣之后成为第二个让我瞧见八卦图头像便能开怀之人。克莱姆森大学的杨垠教授（现在迁去了犹他大学）姗姗来迟，他是降维仿真和GPU加速仿真的代表人物。我们一拍即合，开始建立深厚的革命友谊。自那天起，杨垠、旻辰和我开始了围绕IPC技术的一系列深度合作项目。在我们的思维火花碰撞之下，浩如烟海的脑洞和研发项目扑面而来。以2022年为例，我们便让IPC生态系统在刚体仿真和实时仿真两个方向取得了不亚于原始IPC的崭新成果。</p>\n<p data-pid=\"hwTZQgwi\">第一个成果，是我们在刚体仿真上取得的重大成就。刚体与柔性体自古以来便被分开处理，求解它们的方法不能说是关系不大，只能说是几乎毫无关系。在IPC的加持下，我们提出了崭新的“Affine Body Dynamics (ABD)” 仿射体动力学，在淘汰传统刚体模拟的路上直接飙到终点，让刚体重新回归成它们在真实世界中的样子：即使最硬的物体，也会微小的形变，硬度是振金还是木头，该是多少就是多少，不需要被假设成绝对刚体。在ABD技术的加持下，我们在拥有所有IPC优点的同时，达到了媲美现有刚体引擎的速度和全方位碾压的精度。高速而又精准的机械体仿真首次成为可能。</p>\n<p data-pid=\"BY2bZq4t\">真实碰撞驱动的齿轮：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-2080e26a6d69dbad5f06b5d66ef99e24_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"384\" data-rawheight=\"338\" data-thumbnail=\"https://pic1.zhimg.com/v2-2080e26a6d69dbad5f06b5d66ef99e24_b.jpg\" class=\"content_image\" width=\"384\"></figure><p data-pid=\"4Kl8gyqo\">及其受力分析：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-44fd9d26ff6cd404792922d10f5ee0a2_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"325\" data-rawheight=\"281\" data-thumbnail=\"https://pic3.zhimg.com/v2-44fd9d26ff6cd404792922d10f5ee0a2_b.jpg\" class=\"content_image\" width=\"325\"></figure><p data-pid=\"c7YJnNPL\">带传动结构的小车（含简易气缸）：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-5b1e7466743d1578aff01dc433c677a0_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"253\" data-thumbnail=\"https://pic1.zhimg.com/v2-5b1e7466743d1578aff01dc433c677a0_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-5b1e7466743d1578aff01dc433c677a0_r.jpg\"></figure><p data-pid=\"T_lAuXCO\">及其传动引擎的简易气缸运动的可视化（活塞运动带动旋转）</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-721fdb098bee9e025773f7b61760daa7_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"490\" data-rawheight=\"252\" data-thumbnail=\"https://pic4.zhimg.com/v2-721fdb098bee9e025773f7b61760daa7_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"490\" data-original=\"https://pic4.zhimg.com/v2-721fdb098bee9e025773f7b61760daa7_r.jpg\"></figure><p data-pid=\"N4M-VcUs\">铁链弹性波的传播：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-598060008be937f707d68d99442328c8_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"281\" data-thumbnail=\"https://pic1.zhimg.com/v2-598060008be937f707d68d99442328c8_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-598060008be937f707d68d99442328c8_r.jpg\"></figure><p data-pid=\"WLvfM0Cx\">比较传统的场景当然也不在话下：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-64c07abf89df12b15e1299a7231c24a8_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"338\" data-thumbnail=\"https://pic1.zhimg.com/v2-64c07abf89df12b15e1299a7231c24a8_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-64c07abf89df12b15e1299a7231c24a8_r.jpg\"></figure><p data-pid=\"jayw-xPF\">值得一提的是，ABD在机器人抓取的任务上，已经被机器人领域的学界和工业界同行验证，其成功率和对接触力/摩擦力的准确性上，已经远远超过了PBD、Bullet、Mujoco等一众现有刚体引擎；强化学习在我们的solver上，轻松训练出了真正可以转化到物理世界的控制算法，误差之小，模拟过程之惬意，非机器人业内人士不可言喻：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-915bee497ed47f7202184fa4451cf2c4_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"640\" data-thumbnail=\"https://pic1.zhimg.com/v2-915bee497ed47f7202184fa4451cf2c4_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-915bee497ed47f7202184fa4451cf2c4_r.jpg\"></figure><p data-pid=\"eWM2QxXa\">英伟达Omniverse也宣传了很多工业机器人的场景，它的技术仍然基于PhysX（PBD），那套简单易学但毫无真实物理原则的手段。剩下的一切，还何须多言呢？也许在有些人心中，元宇宙只需要以假乱真，”看上去差不多就行了。”那么，就等时间给出“自然”选择的答案。</p>\n<p data-pid=\"IcDPSdpR\">我从方法论上表述我自己的观点。我认为，像PBD一类的技术，以快为出发点，在当年的低下算力和就是面向游戏的两个前提下，无可厚非。但是由于对数学和物理原理的修改与简化，使其在元宇宙的未来想要从快到准，路途难如蜀道。与它们截然不同的是，IPC直接先把“准”这一步做到了几乎完美，那么在这个前提下，再做快有多难呢？在算数、算法、算力的三重加持下，IPC加速之路顺畅无阻。举例而言，我们2022年的第二个成果，便轻松地实现了多层布料的实时交互仿真，并且，没有牺牲任何IPC在碰撞上所承诺的美好保证：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b93eb28a2a9dd2aaa57980cd234c7650_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"299\" data-rawheight=\"224\" data-thumbnail=\"https://pic1.zhimg.com/v2-b93eb28a2a9dd2aaa57980cd234c7650_b.jpg\" class=\"content_image\" width=\"299\"></figure><h2>第八章：下一个“Timestep”</h2>\n<p data-pid=\"6aFBYGe1\">十二年，我从C++都不会写的等离子体物理专业的学生，到拿到CS PhD，去常青藤做CS教授，再到UCLA应用数学拿tenure，回想一下，这其中竟没有一年被浪费，纯粹跟着喜爱的研究走，顺其自然。记得网上常有人讨论@计算机图形学的交叉学科本质。我想我本人应该就是一个不错的活标本吧。十二年的职业道路上，我也是无比幸运（毕竟射手座），遇到了太多牛逼的师长、同学、挚友、和学生，每个人都让我学到了很多。</p>\n<p data-pid=\"pss9jTAH\">那下一个十二年，我应该主要做些什么呢？思考了许久，不为立志，但求有一个计划。我想， “closing the gap between virtual reality and physical reality”，这个目标绝没有变，围绕物理仿真这一指引运动规律的轴心的原则也依旧在我心上打着思想钢印。在此之外，我与携有同样想法的三个人（ <a class=\"member_mention\" href=\"https://www.zhihu.com/people/9f3ee58deeb19551bd92d9591e4503d7\" data-hash=\"9f3ee58deeb19551bd92d9591e4503d7\" data-hovercard=\"p$b$9f3ee58deeb19551bd92d9591e4503d7\">@李旻辰</a> ，方燠，杨垠 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/da965a10cfcc7dd65a171f9c00e860f7\" data-hash=\"da965a10cfcc7dd65a171f9c00e860f7\" data-hovercard=\"p$b$da965a10cfcc7dd65a171f9c00e860f7\">@Yin Yang</a> ）一起成立了Timestep，致力于稳健、精准、高效、普适的物理仿真“步法”及它们在不同产业中的应用，并在国内以及世界多地积极打造和布局一个可持续发展的体系。万水千山不停步，希望在下一个十二年，我们跟更多同道中人一起，通过有趣和有用的技术和想法把虚拟世界和现实世界真正打通。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/fu-fan-29-23?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">蒋陈凡夫</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/560415998?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"孩子秋季进补怎么吃，猪肉鲜虾蛋饺，营养均衡又补钙，健康吃出来","date":"2022-09-05 02:12:00","description":"\n<p></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-c2c5a94dd9b7e5b42a79da86c1dcc285_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"200\" data-thumbnail=\"https://pic2.zhimg.com/v2-c2c5a94dd9b7e5b42a79da86c1dcc285_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"660\" data-original=\"https://pic2.zhimg.com/v2-c2c5a94dd9b7e5b42a79da86c1dcc285_r.jpg\"></figure><p data-pid=\"p3Jt4ymd\">秋高气爽，人的胃口都变得好起来了，最近明显感觉到食欲大开了，小宝宝也一样。</p>\n<p data-pid=\"WdYygWAL\">小宝宝添加辅食后对钙的需求量变大，除了日常的奶以外，鸡蛋也是必不可少的。一周岁以上的宝宝其实就可以适当添加成人类的饮食，不过需要做成宝宝好入口的样子。笋笋之前给我们家宝宝做了黄金蛋饺，营养健康，小巧可爱，真是宝宝吃了开心妈妈看了舒心呀。</p>\n<p data-pid=\"eVm9vs0w\">那就一起来做蛋饺吧！</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-64fa7a3760daa9ebc92c1069fbb64e5b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"811\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-64fa7a3760daa9ebc92c1069fbb64e5b_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-fd4dc3422ff550945d0d0684e522caca_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"113\" data-thumbnail=\"https://pic3.zhimg.com/v2-fd4dc3422ff550945d0d0684e522caca_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-fd4dc3422ff550945d0d0684e522caca_r.jpg\"></figure><h2><b>食材</b></h2>\n<p data-pid=\"j4TfaEMy\">鸡蛋、猪肉末、虾肉</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9beb24f48cf1607352f4688aa72da186_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"811\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-9beb24f48cf1607352f4688aa72da186_r.jpg\"></figure><h2><b>步骤</b></h2>\n<p data-pid=\"d8AQb_c8\">猪肉和虾肉剁成肉馅，大一些的宝宝吃可以再添加些蔬菜，营养更均衡。一周岁以上的宝宝适量加盐，一周岁以下宝宝不用加调味品。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-788be3c7075513698003bca7a82b4a9d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"811\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-788be3c7075513698003bca7a82b4a9d_r.jpg\"></figure><p data-pid=\"bhcZ4hdq\">鸡蛋打散，蛋清过敏宝宝只用蛋黄即可。鸡蛋的柔嫩性更强，想要蛋皮蛋皮更有韧劲不容易破，可以加一个鸭蛋液增加蛋皮的黏度。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9c31ec070c68d84e5040ce1c862fe902_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"811\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-9c31ec070c68d84e5040ce1c862fe902_r.jpg\"></figure><p data-pid=\"0t458koA\">锅烧热，刷一点点油，不用太多，保证不沾就行，也可以选择直接在蛋液里加少许油也不会粘锅。找个小勺子盛蛋液，倒进锅里，旋转成圆形，尽量均匀，薄厚根据喜好就行。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-137ef909eb866fdb21ab630e8a017aac_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"815\" data-rawheight=\"614\" data-thumbnail=\"https://pic1.zhimg.com/v2-137ef909eb866fdb21ab630e8a017aac_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"815\" data-original=\"https://pic1.zhimg.com/v2-137ef909eb866fdb21ab630e8a017aac_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-38ed66ef2055a796d01a71c14331dfde_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"811\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-38ed66ef2055a796d01a71c14331dfde_r.jpg\"></figure><p data-pid=\"RBWaKMDz\">蛋液差不多凝固还没干透的时候就可以放入馅，馅料不用放在中间，可以稍稍侧一点。因为给小宝宝吃所以不要做太大个，小一点好入口，年龄大一些的宝宝吃就可以做的大一些。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-41c0f363b18b3e3f33176bc2172cee64_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"811\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-41c0f363b18b3e3f33176bc2172cee64_r.jpg\"></figure><p data-pid=\"bvG8-ILx\">小心地用筷子将蛋皮折叠，差不多完全盖住肉馅就行，不用纠结是不是完全重叠。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-de020edd7733deeddebb0e0da9461ab7_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"815\" data-rawheight=\"614\" data-thumbnail=\"https://pic4.zhimg.com/v2-de020edd7733deeddebb0e0da9461ab7_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"815\" data-original=\"https://pic4.zhimg.com/v2-de020edd7733deeddebb0e0da9461ab7_r.jpg\"></figure><p data-pid=\"rp6y3lgt\">用筷子压一压定个型。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d7103cad0a28bca788a6a407b711670e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-d7103cad0a28bca788a6a407b711670e_r.jpg\"></figure><p data-pid=\"aQZOyAqy\">然后用筷子夹住两边，筷子先不要拿走，夹一会，定型了夹出来就好了。</p>\n<p data-pid=\"FW_p5qai\">如果不好操作，可以如图这样拿另一双筷子辅助，做多了就熟练了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c1b99c27a7b7878f7972cff7d45e6b30_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"815\" data-rawheight=\"614\" data-thumbnail=\"https://pic1.zhimg.com/v2-c1b99c27a7b7878f7972cff7d45e6b30_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"815\" data-original=\"https://pic1.zhimg.com/v2-c1b99c27a7b7878f7972cff7d45e6b30_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-fd67a1ab717a8f3bb511614b938ecd92_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"815\" data-rawheight=\"614\" data-thumbnail=\"https://pic3.zhimg.com/v2-fd67a1ab717a8f3bb511614b938ecd92_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"815\" data-original=\"https://pic3.zhimg.com/v2-fd67a1ab717a8f3bb511614b938ecd92_r.jpg\"></figure><p data-pid=\"VgJW6pDD\">定型一会就好了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-221906c50491e1c16f8abe2e077e0f5c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"811\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-221906c50491e1c16f8abe2e077e0f5c_r.jpg\"></figure><p data-pid=\"IsDSQpOW\">金鱼蛋饺完成。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-704a868b9395f3ca4640532ef4bae735_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-704a868b9395f3ca4640532ef4bae735_r.jpg\"></figure><p data-pid=\"Xnnrabrd\">做好的蛋饺只是半成品，需要再加工才能吃，现吃的话可以上锅蒸5分钟将其做熟，也可以放入汤里或煎或炸。如果要保存起来可以直接放入冰箱，也可以蒸熟再冰冻保存，冰冻可以放一个月。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d0fdf7bb769bc759b8e1a6c1c4cde6e0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"811\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-d0fdf7bb769bc759b8e1a6c1c4cde6e0_r.jpg\"></figure><p data-pid=\"y8ra9Y9t\">做好的蛋饺蛋皮金黄，个头饱满，小金鱼的造型特别可爱，小朋友看了一定喜欢，适合10月龄以上对食材不过敏的宝宝，对鸡蛋白过敏的宝宝只用蛋黄就好，不管拿来做汤或煎着吃都很讨巧哦。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5399c4791bc36c5f0ef514b13d74087b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"811\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-5399c4791bc36c5f0ef514b13d74087b_r.jpg\"></figure><p data-pid=\"zUca9EKe\"><b>图文：</b>呵呵笋</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7608da836b3446321469393fe445daaa_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"27\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-7608da836b3446321469393fe445daaa_r.jpg\"></figure><p data-pid=\"ekvqqJ38\">喜欢笋笋的菜，记得给笋笋点赞或留言哦。</p>\n<p data-pid=\"6UpOCKJq\">点击关注，笋笋在这里期待你的故事。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b712c756a6f1d0b3c10cd8dbec81abb4_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"660\" data-thumbnail=\"https://pic1.zhimg.com/v2-b712c756a6f1d0b3c10cd8dbec81abb4_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"660\" data-original=\"https://pic1.zhimg.com/v2-b712c756a6f1d0b3c10cd8dbec81abb4_r.jpg\"></figure><p data-pid=\"oqkuFHIQ\">简单又幸福</p>\n<p data-pid=\"hXDris1O\">一个吃货的小世界</p>\n<p data-pid=\"VJ2mfUyQ\">温暖你的心</p>\n<p data-pid=\"-VI0JHfA\">感动你的胃</p>\n<p data-pid=\"hgqup9XV\">(＾－＾)V</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/happylovel?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">呵呵笋的小煮艺</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/560994995?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报：Cloudflare 封锁 Kiwifarms；拼多多在美低调上线 Temu 等","date":"2022-09-05 00:42:50","description":"你可能错过的新鲜事Cloudflare封锁Kiwifarms9月4日，大型网络服务提供商Cloudflare在愈发高涨的公众压力下，宣布将停止为受争议的美国论坛Kiwifarms提供DDoS防御服务。 ...<a href=\"https://sspai.com/post/75526\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75526"},{"title":"如何评价西幻背景文字 ADV 游戏《赠予神家与谎言》？","date":"2022-09-04 09:34:34","description":"\n<p data-pid=\"rtjAyq7o\">~关于我想描写时代变迁的断片，结果却变成女主和反派基佬一起对男主说骚话的故事~</p>\n<p data-pid=\"K8toV2Z-\">各位好，我是《赠予神家与谎言》的制作人季森。本游戏是我个人（外加大量美术素材外包）历时一年制作。</p>\n<p data-pid=\"DSKX1zrG\">在8月26日，本作正式在steam上进行发售，于是打算和大家分享一下关于制作本作的一些心路历程。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5fafec7d365f310b8596e98864c1faaf_720w.png?source=b1748391?rss\" data-caption=\"主视觉图欺诈\" data-size=\"normal\" data-rawwidth=\"3456\" data-rawheight=\"1944\" data-watermark=\"watermark\" data-original-src=\"v2-5fafec7d365f310b8596e98864c1faaf\" data-watermark-src=\"v2-0138fca56c74ed879a00323b88aa4c62\" data-private-watermark-src=\"v2-135bab06539511324508077630e2d563\"></p>\n<p data-pid=\"QACGWBsb\"><b><i>“欢迎来到塔林，这里是法师之都。请记住，你所处的是100米以上的高空，而你手边的石墙后可能正有一位伟大的法师正在进行改变世界的实验。请小心强风和爆炸，以及你可能遇到的一切魔法‘小事故’。如果需要，请在开始你的旅途前至3号窗口购买人身保险。”</i></b></p>\n<p data-pid=\"frGci5wQ\">这段话是我为这作的主舞台塔林这座城市旅行导览设计的开篇。作为一个西方奇幻爱好者，拥有一部自己撰写的西方奇幻作品一直是我的梦想。作为剑与魔法世界的老祖宗，DND以及他的变种西方奇幻背景在现在这个时代依然有着为数众多的拥趸，于是寻找我没见过的DND式剑与魔法的风景便成了我制作本作的初衷。</p>\n<p data-pid=\"q-5iYgs0\">按照大众对传统DND式作品的印象，第一时间浮现出的一般都会是中世纪欧洲的风景。那么如果把时代往后推呢？不用推进太多，战锤40K式的太空科幻还太遥远，只要稍稍把历史快进，快进到那个煤烟与齿轮开始展现力量的工业革命时代初期，在地球的这个时代如果映照到DND的世界会变成怎样的风景，按照这个思路，我开始构造这个世界。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2280b85e6eaf75cb4302ffd72a745f9b_720w.png?source=b1748391?rss\" data-caption=\"塔林全景\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-2280b85e6eaf75cb4302ffd72a745f9b\" data-watermark-src=\"v2-9f286685e401cb537889880695ad9569\" data-private-watermark-src=\"v2-38e24a11cc5b40b7cc85b92dfdcef95f\"></p>\n<p data-pid=\"FZt532uL\">为了强迫DND世界的这群法师们重新思考自己的存在方式，着迷于流水线生产，我采取了颇为强硬的方式——让神离开这个世界，顺便带走了法师赖以施法的魔网。这也是我最早的标题《离神之日》的用意（当然这标题槽点太多，在写下来的时候便确定只能是个暂定标题）。</p>\n<p data-pid=\"tz9S0Z-W\">法师们花了50年的时间，以一群年轻天才法师的毕生来重新破解了众神为魔网留下的封印——正如17世纪后期蒸汽机的发明——魔法被重新带回了这个世界。而在这50年的变乱中，法师们早就已经失去了自己的立身之所。重新依照旧时代的方式建立自己的势力过于缓慢而不确定，于是这群法师们团结起来，开始以商人的角度思考问题。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f92ad81df2cb84048c9b6b5cc0aa0264_720w.png?source=b1748391?rss\" data-caption=\"塔林上层区——也就是富人区\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-f92ad81df2cb84048c9b6b5cc0aa0264\" data-watermark-src=\"v2-29402d876c968364fcae2c31ddc1bc76\" data-private-watermark-src=\"v2-248296db0afd1f0b4a037b19d6bd077b\"></p>\n<p data-pid=\"xSWTeYgq\">这便是这故事的开端。</p>\n<p data-pid=\"D-Gqodac\">然而，这个故事的标题还是从《离神之日》变成了现在的《赠予神的家与谎言》。正如标题变化所表达的，这个故事从时代的变迁聚焦到了一个家。我在全文第一句话也表示了，喜欢看大世界观，目标《冰与火之歌》、《魔戒》的观众可能会失望，但既然你已经被骗进来，那就看到最后吧。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9077b1fe17f2cfe14cbbffabe5266cbf_720w.png?source=b1748391?rss\" data-caption=\"女主集体照\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-9077b1fe17f2cfe14cbbffabe5266cbf\" data-watermark-src=\"v2-c1842a08f14ca1815d9256b4bb4aed30\" data-private-watermark-src=\"v2-2077c7bd870e99a68ac69efd8a29feb5\"></p>\n<p data-pid=\"qUEChDTr\">作为本作的四大女主，这群女人个个身怀绝技，把我们的男主玩得团团转。</p>\n<p data-pid=\"5wCmjZz4\">左起第一位，一身黑的这位柯希尼娅，一看便不是善茬。作为男主的第一任女儿，其闷骚在闷了八年之后，直接在游戏正篇开场就对男主处于捆绑之刑玩起病娇play，差一点就把本作拉入了R18的深渊，让男主的身体记住了自己是个不定时炸弹的恐怖卑女。</p>\n<p data-pid=\"aizkbGF9\">第二位，看起来就像某知名手游角色2P色的提莫，然而比起那位更能领会猫猫叫春的她，在全篇持续对所有遇到的人进行身体与语言上的性骚扰攻击，可谓消音自走炮。耗尽了作者30年的黄段子功力，我勉强跟上了她的思路，希望她不会嫌弃我的品味。</p>\n<p data-pid=\"sWgIDcyj\">第三位，经典款小修女布兰卡，作为四人中看起来最乖宝宝的一人，却深谙捧杀之法，无时无刻不在迸发出崇拜的小星星射向男主莫里。同时作为开局只能当个外人的她时刻垂涎着真女主的宝座，找到机会就把自己和男主关进密室里。</p>\n<p data-pid=\"KamybB30\">第四位，男主莫里的青梅竹马特妮拉，作为四人中的最年长者（而且是直接十位数不一样那种年长），在当社畜养着整个家的同时，战战兢兢地过着不要被其他三位女主打成“明明是我先来“败犬的恐怖生活中。</p>\n<p data-pid=\"Pk2Pwutq\">以上，就是作者基于彻底OOC再创作之后满怀恶意的女主介绍，与本作实际角色无关。之后作者预定会被她们关进小黑屋里进行调整，请不要担心。</p>\n<p data-pid=\"Pz_z7Gip\">至于她们实际上是什么样子，请亲自前往本作的世界用自己的眼睛确定。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-935b42d9faf8cf2c742c7b723c9be6d6_720w.png?source=b1748391?rss\" data-caption=\"反派西索证件照\" data-size=\"normal\" data-rawwidth=\"4710\" data-rawheight=\"3170\" data-watermark=\"watermark\" data-original-src=\"v2-935b42d9faf8cf2c742c7b723c9be6d6\" data-watermark-src=\"v2-0b0666d8d2db5b44c64a9fa7438c57db\" data-private-watermark-src=\"v2-0887bde0495b69542421c01b164bc2cf\"></p>\n<p data-pid=\"41LauMAs\">外加一名明明是反派boss却和其他女主拥有差不多台词字数，PUA、权力骚扰、无限加班，无所不用其极，并以主角这些下属加班的模样为乐，除了工资给得真的很多的上司西索。在这个反派角色上，我倾注了不少鲜血，也是直到剧本完成之后才意识到自己多少受了《电锯人》的影响。这个角色有一点像玛奇玛——但更傲慢、更不介意表现出自己的恶意。他比起玛奇玛更愿意使用自己的全知全能来向人群施以恐惧，当然这也是因为在这个世界中，并没有一个能与他对等的“电锯人”值得他去崇拜。</p>\n<p data-pid=\"d_U2dke0\">感谢闲踏梧桐等人的配音为角色赋予了生命，将所有角色都以远超我想象演绎了出来。也感谢为本作提供了精美作画的画师们，可以说本作的价值主要就在这两方面了（卑微）。</p>\n<p data-pid=\"EV5sAPOj\">作为制作人，本作是在我临近30岁生日的时候突发奇想，决定”I wanna build something that's gonna outlive me”而制作的作品。如果能有更多人喜欢这部作品，以及作品中在塔林生活的人们，那就是对我最大的鼓励了。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/kimori193929?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">kimori193929</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/550194627/answer/2658222056?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">4 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/546871158?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">ADV 游戏《赠予神家与谎言》有什么惊艳到你的配角？</a><br><a href=\"http://www.zhihu.com/question/481206961?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">请问有关于和恶魔契约的小说吗？</a><br>\n","link":"http://www.zhihu.com/question/550194627/answer/2658222056?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"2022 年夏天密室逃脱行业怎么样了？","date":"2022-09-04 09:26:59","description":"\n<p data-pid=\"j47z4zLp\"><b>一位投资人+密室深度玩家对密室行业的深度自白</b></p>\n<p data-pid=\"Gnu3w9bx\">去年，就有人在某平台私信我，说打算开一家密室，有没有投资意向...</p>\n<p data-pid=\"I44OvLxM\">......</p>\n<p data-pid=\"FQvjHt4y\">嗯...如果这是爱好那无可厚非，但这是商业，只论对错，只看盈亏。当然格局比较大的，可以看的更远些。</p>\n<p data-pid=\"zxXJxMln\">不过我相信大多数人，自己不是韭菜就是把我当韭菜。密室（沉浸式剧场），是一个相对很小的品类，圈子也很小，在北京圈层文化也比较严重。而且投入也不是很高，何必以个人的身份，找圈外人士要投资；如果是以品牌的角度，我兴许还有点兴趣。</p>\n<p data-pid=\"zUr9cM-A\">当然，我至今还没有任何意向，除了我不是圈内人，更重要的原因是，从投资角度看，密室行业的商业模式可以说是非常差了，类似于投资框架中的影视传媒行业。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e601fddef91cd143cabd88b231b6d337_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-e601fddef91cd143cabd88b231b6d337\" data-watermark-src=\"v2-c5b9f67f2effba5c94226dd5c260291c\" data-private-watermark-src=\"v2-237757dcf2cd32dc4fe4150f2eb0f566\"></p>\n<p data-pid=\"LmJna_1W\">记得之前一个圈内大佬跟我说，不是密室的商业模式差，而是还找到合适的产品逻辑...</p>\n<p data-pid=\"vA145CFM\">未来这个产品衍生出新的生态不算，就目前已经形成阶段性的成熟产品来看，绝不是产品逻辑的问题，而是产品自身商业模式的欠缺。</p>\n<p data-pid=\"xU65fAV6\">说个极端点的，什么是优秀的商业模式。</p>\n<p data-pid=\"49P8q657\">像白酒、调味品、高端医疗这种，竞争对手少、需求量稳定增长、品牌粘性高..导致拥有自主定价权的，才是优秀的商业模式。竞争对手少意旨“竞争格局优秀”，恰恰是一行业发展至成熟期后所展现出的优秀特质。</p>\n<p data-pid=\"WmdTiUfT\">竞争格局优秀的企业，往往因为对手稀缺，导致自身尤其是TOC类企业容易成为驰名品牌，这样他就成为了特定人群的刚需，从而产品的复购率、定价权、甚至到客户的叛逃成本都牢牢地掌握在商家手里。</p>\n<p data-pid=\"J4l_IN40\">你可能不知道，你家很多调味品都源自一家叫海天味业的企业，你可能更不知道人家产品年年涨价，几块钱的调味品短短几年年涨价50%你可能无感，但对企业来说利润直接翻倍。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-adf48e541c542d234414c717897985e4_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-adf48e541c542d234414c717897985e4\" data-watermark-src=\"v2-7f18fdb26d3c3e4e9bd4ca6622137477\" data-private-watermark-src=\"v2-ba3e3eb479b60674933c73cdac9bb3b6\"></p>\n<p data-pid=\"D4YzYO0W\">有人会问，调味品这种客单价很低产品，即便每年调价大多数人也无感，密室三五百的客单价怎么能随意提价？</p>\n<p data-pid=\"8p3VOCb8\">这...难道不就是行业的差距吗？茅台听说过吗，上调过几十次价格，依旧供不应求。</p>\n<p data-pid=\"2vI73yeZ\">这就是竞争格局和品牌塑造，带来产品用途出现不断衍生的优势。而白酒的成本又极低（粮食+水），每年还控制产量，造成供不应求的局面，从而不断提高产品价格，以至于经销商疯狂屯货，甚至先打钱给酒厂以确保自己未来能拿到货。</p>\n<p data-pid=\"rH8BHHhx\">在很多“圈子”里，茅台就是硬通货，具有等价货币功能。说个你不知道的事，打老虎时期，很多苍蝇老虎开始向马桶里倒茅台，北京的某个苍蝇，天天下班后回家倒，整整四个月都没倒完，被抄家后清算时，茅台更是毫无悬念的直接换算成等价货币了。</p>\n<p data-pid=\"ipHEOtni\">所以，茅台这种东西，一定程度上不存在需求问题，只存在供应的把控，毕竟能划算成现金等价物，所以屯现金的时候，当然是越多越好。</p>\n<p data-pid=\"7lKB9vIX\">此外，几乎所有行业的库存都是随着时间而贬值的，唯独高端白酒库存还能增值（酒越放越值钱），除了一些特定行业，这几乎前所未见。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-68a372adc2ff8f65e248acc81e6ba17c_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-68a372adc2ff8f65e248acc81e6ba17c\" data-watermark-src=\"v2-626a1412bd9636ae484df3e2dee32cd1\" data-private-watermark-src=\"v2-4645f68013e1b7ed7ffb36a40bd4a773\"></p>\n<p data-pid=\"VXseXPG8\">但是好玩的密室也就那几家啊，竞争格局不也是非常好吗？</p>\n<p data-pid=\"nqX9iJep\">顶级主题的竞争格局确实好一些，你从很多平台的开场率就能看到，所以这又引出了，产品体验的性质和受众基数。</p>\n<p data-pid=\"2w_cwhrK\">产品体验过程的可拆分性越强，其的价值就越可以进行适当延长，而密室是不一样的，体验是完全无法拆分，这种线下模式甚至无法和宋城演绎、迪士尼相提并论。</p>\n<p data-pid=\"_zLYsqfU\">互联网产品体验的可拆分性就很强，甚至几乎是0成本且可无限拆分的，软件app就是如此，当年微软对中国盗版windows系统的猖獗不采取任何措施，如今再来看，到底是谁赢了呢？</p>\n<p data-pid=\"NTj0EsiI\">上面这个东西换种角度看，也类似巴菲特所说的网络效应。</p>\n<p><img src=\"https://pica.zhimg.com/v2-b98ca352c69b80450bb18d6454c8b92f_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-b98ca352c69b80450bb18d6454c8b92f\" data-watermark-src=\"v2-d0a56fc047376a08a4ee7ec653b540e1\" data-private-watermark-src=\"v2-6cbd7c29e2ebe84c66724783c0f32adb\"></p>\n<p data-pid=\"RzizjY96\">我们再说第二点，用户基数。</p>\n<p data-pid=\"w93gKAvn\">在投资框架里，密室的商业模式类似于于影视传媒行业，大头利润来自于爆款，爆款产品的复制难度又高，怕砸招牌就开始授权加盟是一个比较不错的策略。</p>\n<p data-pid=\"okm7D8kl\">而密室行业比影视传媒行业，还有一个更大的劣势，那就是用户基数的严重受限，2019年全国影院观影人次达到了17.3亿，平均每天500万人次，这种规模决定了以迪士尼为首的一些影视企业，做出了打通线上+线下+破圈的产品。</p>\n<p data-pid=\"HHOFTtXS\">反观密室，因为产品商业的逻辑，导致单场玩家上限极低，全国密室全年的人次，还赶不上前几年《某狼2》午夜场的观影人次...</p>\n<p data-pid=\"cKVTTW0n\">此外这种产品的复制程度也不太存在规模经济，更是远高于很多行业的右键“复制+粘贴”模式。</p>\n<p data-pid=\"I5SusKzr\">所以根据以上几点，我们知道密室这个产品注定是难以破圈的，更不会像某位大佬说的，出现打通线上线下的破圈产品，线下体验是核心，但基数限制了其效能。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-77e7850a9fc84ee48e887303fed9993c_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1702\" data-rawheight=\"1276\" data-watermark=\"watermark\" data-original-src=\"v2-77e7850a9fc84ee48e887303fed9993c\" data-watermark-src=\"v2-8554f623b7ba27a012e217a444134302\" data-private-watermark-src=\"v2-2dbb5d17520d646ae8972bea55e44328\"></p>\n<p data-pid=\"0jyfmQeT\">产品上线后，你的受众才决定了你产品的逻辑，而不是你的产品逻辑改变了受众，很多产品用户基数大了之后，产品的设计是跟着用户在走的。而密室从1.0到4.0的受众就从来没变过，产品逻辑也是只在原有基础上进行补充，还不存在颠覆。</p>\n<p data-pid=\"VpAp0sPd\">优秀的商业模式能罗列出一大堆：品牌强大、对手稀缺、行业门槛高、复购率高、复制难度低、成本优势、自主定价权、用户基数大、叛逃成本高、占上游提前拿下游钱、库存增值...</p>\n<p data-pid=\"Ht4M7XO_\">上面这一堆指标中，某家企业只要有其中两项优势，那资本就会闭着眼往里扔钱，甚至会求着你拿钱。</p>\n<p data-pid=\"ZHduoDPx\">有人会说密室行业市场增速非常快，这个你要具体问题具体分析，比如每年玩家人次增速50%，但密室门店增速200%，那你得出的结论是行业增长非常快还是企业的平均利润被大幅稀释？造成这种情况的原因是不是行业门槛太低了？</p>\n<p data-pid=\"4YgAaDjU\">在医疗行业里有一种说法“金牙银眼铜骨头”，对应的分别是牙科、眼科和骨科产品，按照上面的指标进行对照，相信你不难得发现为什么牙是金，眼是银，骨是铜。（当然，因为国家层面的干预，集采政策导致很多医药医疗赛道的逻辑破了）</p>\n<p><img src=\"https://picx.zhimg.com/v2-c1aaf44e07370b344dce08149be18b23_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1706\" data-rawheight=\"1280\" data-watermark=\"watermark\" data-original-src=\"v2-c1aaf44e07370b344dce08149be18b23\" data-watermark-src=\"v2-b0d94c0932da979259bf904f05cb6fb2\" data-private-watermark-src=\"v2-ec058eaad0b1e1d2b795623dd391f0a3\"></p>\n<p data-pid=\"IvLLaaD3\">一个行业赚不赚钱，说个比较模糊的通用指标，直接看主力从业人员薪资。这就不透露了，招聘广告上打个六七折就差不多了。</p>\n<p data-pid=\"a6ARqTW-\">所以密室这个行业的上限是很容易看到的（客单价*场次*平均人数），流水上一般也不会有什么惊喜，如果有那八成是惊吓，所以早鸟票是一个相对无奈的手段。而重要的是日常运营，及成本的控制。</p>\n<p data-pid=\"_vfME_Cs\">那这么来，密室行业的投资价值好像一无是处了？</p>\n<p data-pid=\"FBmtdJ-J\">当然不是，首先头部密室是赚钱的，尤其前两年店面增速没那么快，玩家却不断涌入的时候，无脑黑追电都会有大把盈余。</p>\n<p data-pid=\"_7B0RE_9\">但从另一个角度看，真正的好项目也不是留给普通人的啊，财富流动的底层逻辑本质上是信息的不对称，一切能勾引你欲望的东西，远不止看到的那么简单。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0fc45ed3f446a70ee2db05d906e32b2d_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-0fc45ed3f446a70ee2db05d906e32b2d\" data-watermark-src=\"v2-0030731ba9997f5878f260dce19b6af7\" data-private-watermark-src=\"v2-beecbec41cc8bd9a137ce02ff4c1564a\"></p>\n<p data-pid=\"n_iG-EJV\">总结一下：</p>\n<p data-pid=\"sa7Vo8SC\">1、由于自身的商业模式，密室行业有三个矛盾点：盈利天花板较低、创新成本过高、复制难度较大；</p>\n<p data-pid=\"N8uY7-OF\">2、密室行业属于创意密集型产业，商家无法通过快速复制门店来实现急速扩张。这也意味着，每一次扩张都将带来高昂的人力、物力以及创新成本，这也导致密室行业边际成本过高、门店扩张速度受到严重限制；</p>\n<p data-pid=\"0tAyoTbz\">3、所以密室行业也相对缺少资本的助力，如今发展迅猛更多是爱好者的自发性行为，以及行业本身规模较小所以增速容易上来；</p>\n<p data-pid=\"PNiFNM6k\">4、密室行业仍是新兴行业，整体还处于野蛮生长阶段，和过去的KTV、网吧、游戏厅这些较早兴起的线下娱乐场所一样，也终将经历从0到1、1到10、10到2的阶段；</p>\n<p data-pid=\"d9RvAoqI\">5、密室这个行业在终局来临之前绝不会消亡，因为他力图营造的，无与伦比的沉浸式体验，终归是一部分人无法脱离的“温柔乡”（特定人群的刚需），也是那个某种程度上，比较接近终局（脑机接口）的梦。</p>\n<p data-pid=\"0GgM2Qu4\">愿君入梦，与梦同行。</p>\n<p><img src=\"https://pica.zhimg.com/v2-a4b83a789e8e780d97a24d9a70b53a80_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1702\" data-rawheight=\"1276\" data-watermark=\"watermark\" data-original-src=\"v2-a4b83a789e8e780d97a24d9a70b53a80\" data-watermark-src=\"v2-3fdece47d726f2e55bb0cf4d7357d856\" data-private-watermark-src=\"v2-0c3738680be5253f3d12ef94e895022e\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-hao-20-66-77?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">本号无效</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/551029831/answer/2658581905?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">6 个回答，查看全部。</a><br>\n","link":"http://www.zhihu.com/question/551029831/answer/2658581905?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"App+1 | 此处插入评价：微信输入法测试版上手体验","date":"2022-09-04 07:47:58","description":"它基本功能完备，联网后更是微信的好伙伴——但你最好还是断网体验。<a href=\"https://sspai.com/post/75527\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75527"},{"title":"任意键｜最后生还者回归；高达站立于大地；索尼独占喜减一及其他","date":"2022-09-04 02:57:10","description":"周末愉快！「任意键」是少数派新试点的游戏周报栏目，我派编辑部的整活担当Kiririn将在此为各位读者盘点和锐评本周值得关注的游戏新闻。🎮玩游戏顽皮狗｜《最后生还者重制版》已发售《最后生还者》是由顽皮狗 ...<a href=\"https://sspai.com/post/75523\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75523"},{"title":"无缝播放：被数字音乐「弄丢」的专辑之美","date":"2022-09-03 07:00:00","description":"无缝播放不是不被需要，而是在这样完整听过一张专辑之前，你都没有意识到你需要。<a href=\"https://sspai.com/post/75517\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75517"},{"title":"清新画风硬核解谜 《落叶城》现已上架 Steam，如何评价？","date":"2022-09-03 04:47:22","description":"\n<p data-pid=\"whLOrYap\">Hi，我是陈虹曲。是《落叶城》《雨纪》《万物生长》的制作人</p>\n<p data-pid=\"PAkC9sBP\">很高兴在知乎上跟大家聊聊游戏。跟大家分享一些开发想法。</p>\n<p><img src=\"https://pica.zhimg.com/v2-6d213b890680028c6aed7564f8982786_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-6d213b890680028c6aed7564f8982786\" data-watermark-src=\"v2-abab2aea149c16a40b4d4d02c6f121cf\" data-private-watermark-src=\"v2-51675530dbe11810dd8ece7d7d5b0b45\"></p>\n<p data-pid=\"zWsdwYw7\">《落叶城》是在已有的基础玩法上扩充的延展设计。</p>\n<p data-pid=\"yllCV54n\">我这次分享一下：<b>关卡设计</b></p>\n<p data-pid=\"SM4JOmpZ\">一个好的关卡是如何设计出来的？如何实现？</p>\n<p data-pid=\"ShbwdbEz\">我发现可以几乎在所有游戏中有携带，获取，移动，给予这样的移动循环，它们是让游戏进行下去，且有魅力的？</p>\n<p data-pid=\"cuA82wg1\">我尝试使用了一些方法，比如：任天堂4步法。概念抽象。聊聊看，相互启发吧。</p>\n<p data-pid=\"IJDSjG8V\">首先利用抽象规则。把所有用到的内容变为A或B这样的抽象内容带入。</p>\n<p data-pid=\"Jmxe6sZh\">抽象出来的规则大致如下：解密方面，通过收集和引导光的基本操作，让光达到指定位置从而完成关卡，是一个从A到B的游戏。</p>\n<p data-pid=\"SPsh1JWJ\">把抽象的A等元素，改变为游戏中涉及到的所有元素，如：人物/灯座/机器人。</p>\n<p data-pid=\"HFDn5Klm\">有了基本操作和基本元素。是不是足够可以再游戏中随意的摆放生成一个关卡了。</p>\n<p data-pid=\"pstEPTlE\">是也不是。</p>\n<p data-pid=\"ITZplshD\">足够做了一个关卡没错，但是很混乱，偶尔能做出有意思的内容，却不稳定。</p>\n<p data-pid=\"6kQIaLbq\">简单介绍一下，其中我参考了一些【搜索《超级马里奥：3D》中的4步关卡设计法】，设计了某一个关卡的思路分享。</p>\n<p><img src=\"https://pica.zhimg.com/v2-ae62a1ca6b40aaf746858e8ebf55e86b_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1624\" data-rawheight=\"620\" data-watermark=\"watermark\" data-original-src=\"v2-ae62a1ca6b40aaf746858e8ebf55e86b\" data-watermark-src=\"v2-0f70fb9ffdfc0da95c4a2becddadb012\" data-private-watermark-src=\"v2-82989ea4dd35e90bdf0fec53475b243c\"></p>\n<p data-pid=\"xmu6shSK\">在这个关卡中设置了4重的阻隔，</p>\n<ol>\n<li data-pid=\"45AmeWdY\">第一道门，打开是尝试同步功能延续</li>\n<li data-pid=\"FuH50IBt\">第二道门，再次开门是方便玩家熟悉操作</li>\n<li data-pid=\"eu0b3i0b\">第三道门，是之前内容的光传递的复习和提出相互帮助的一个假设。</li>\n<li data-pid=\"n-w0-6xC\">升降机，完成假设。谜题已经脱离之前的内容，变为了全新的元素，目的就是让玩家自己进行组合尝试。</li>\n</ol>\n<p data-pid=\"CtdxYAN2\"><b>更深层的硬核设计</b></p>\n<p data-pid=\"yFhSxFYZ\">有些灯座的位置是精心挑选的位置，在更深层的逻辑中，玩家可以通过与灯座之前的距离完全一致达成<b>同时吸收2个光</b>来完成1一个步骤这样的挑战。此时在整体的评价中步数将减少。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-77f3670fc5b2b31cfeee9d3ee8cfa992_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2040\" data-rawheight=\"655\" data-watermark=\"watermark\" data-original-src=\"v2-77f3670fc5b2b31cfeee9d3ee8cfa992\" data-watermark-src=\"v2-4bc4f8a7d544c01253e46033619849c5\" data-private-watermark-src=\"v2-381406b94c44fc7cae38730f9f3e57ac\"></p>\n<p data-pid=\"meXwFsKq\">还有更烧脑的挑战。除了刚刚利用的同时吸收的潜藏规则，其实还利用了人的思维，<b>反直觉</b>，在没有更多额外游戏的机制了。在Pack2风雨连廊中，最终可以全金色下达成27的最小步数。欢迎大家去Demo中试试看。</p>\n<p><br></p>\n<p data-pid=\"KvW_ygEo\">解开谜题，达到最优解。有挑战，有全收集。也欢迎来试试自己可以达到的极限。约着烧个脑</p>\n<p><img src=\"https://pic2.zhimg.com/v2-519862650b65721ed69457dfbfe84a1c_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"574\" data-rawheight=\"346\" data-watermark=\"watermark\" data-original-src=\"v2-519862650b65721ed69457dfbfe84a1c\" data-watermark-src=\"v2-ef29d3564e40fedc2caf7b50996a4297\" data-private-watermark-src=\"v2-62f1d1c249aac505a19c3c79c5da9280\"></p>\n<p data-pid=\"FvawC6vJ\">这依然并不是极限。有突破的请来完成挑战。</p>\n<p data-pid=\"zWWEFSpr\">对于游戏中的关卡设计，获得其中的一个经验之谈是：当关卡完成时候，需要给自己做一个设计指南方便。来记录自己的设计，慢慢的形成一个科学的设计体系，形成一套不会跑偏的标尺。而且发现倒计时的本质，他不属于任何机制的，但当倒计时激活的时候将压缩所有关卡中涉及到的元素的难度变化。因为有限的时间放大了思虑的操作的难度。是一种全局的变化要非常慎重。</p>\n<p data-pid=\"taLzPxiP\">国内做关卡设计研究的能找到的资料还是太少了，希望有更多人可以去研究看看关卡设计，当游戏不断进步完善，玩家不再时时刻刻关注数据强度的时候，需要回到内容在关卡中呈现的研究。</p>\n<p data-pid=\"8L2mOz18\">如果大家觉得关卡设计有更多值得分享的也留言我。</p>\n<p><br></p>\n<p data-pid=\"cfVGy7E_\">感谢大家喜欢《落叶城》。喜欢《雨纪》。落叶城和雨纪踏踏实实的从基础玩法的创新做起，连线传递，全光传递，分光，到现在的不同类型的机器人，不同颜色性能的光色。坚持着做一些探索，尝试，全新方式的。不抄来的。利用这些新的东西做内容，做好关卡设计的体验基层。优化传递的体验。面对自己的动画的不足，也尽量去调整。</p>\n<p data-pid=\"LU4Hq5oU\">最后，感谢那些看到和认可创造的新玩法有所价值的人。</p>\n<p data-pid=\"1sFnscq7\">那么，再见了。</p>\n<p><br></p>\n<p data-pid=\"ZI8g025b\">CH</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/hongquc?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">陈虹曲</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/546437497/answer/2657365519?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">15 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/551226596?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">手绘风独立解谜游戏《落叶城》现已登陆 Steam，该款游戏有哪些亮点？</a><br><a href=\"http://www.zhihu.com/question/546006826?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《落叶城》试玩版现已在 Steam 推出，该游戏有哪些玩点？</a><br>\n","link":"http://www.zhihu.com/question/546437497/answer/2657365519?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"皮蛋漫游播客 | Tesla vs 问界，和少数派老麦换车开一周","date":"2022-09-03 02:31:47","description":"好好聊聊新手司机从选车、用车到换车的全方位感受。<a href=\"https://sspai.com/post/75508\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75508"},{"title":"本周看什么 | 最近值得一看的 6 部作品","date":"2022-09-02 10:15:03","description":"☕️TL;DR近期佳作推荐：[美剧]指环王：力量之戒第一季、[动画]JOJO的奇妙冒险石之海第二部分、[电影]DC萌宠特遣队、[英剧]真相捕捉第二季、[印度]德里罪案第二季、[电影]阿尔卡拉斯几则精彩 ...<a href=\"https://sspai.com/post/75511\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75511"},{"title":"台风「轩岚诺」升级为 2022 年首个超强台风，其路径走势如何？会对我国带来影响吗？","date":"2022-09-02 07:17:04","description":"\n<p data-pid=\"sL16e-l8\">5日上午更新：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-01d6d1ac7f789e0c129790f9fff502f4_720w.jpeg?source=b1748391?rss\" data-rawwidth=\"1025\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-01d6d1ac7f789e0c129790f9fff502f4\" data-watermark-src=\"v2-4e4640a9229ba1642ec64a7a43def491\" data-private-watermark-src=\"v2-f780afbb5ecda367a2f5bf4b9a0c76b1\"></p>\n<p data-pid=\"yYgtg8ke\">台风轩岚诺较昨天形态略有减弱，但是海上油田平台实测中心附近仍有930hpa左右的气压，以及16级以上阵风出现，说明轩岚诺至少还是强台风上限的水平，中央气象台仍然维持55m/s，16级超强台风评价。目前台风轩岚诺已经到达距离华东地区的最近点，外围螺旋雨带扫到了宁波、舟山、上海等地。</p>\n<p data-pid=\"Cr3YGovc\">而接下来，它将去往韩国，韩国济州岛到釜山等地需要注意防范了，这个台风将对韩国造成巨大影响。</p>\n<p><img src=\"https://picx.zhimg.com/v2-cfd8b677410a55dec0eafc7292fc012b_720w.png?source=b1748391?rss\" data-rawwidth=\"1060\" data-rawheight=\"1030\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-cfd8b677410a55dec0eafc7292fc012b\" data-watermark-src=\"v2-5b55db5fdc6bcb4746aced4b2f9f7e8f\" data-private-watermark-src=\"v2-44afa5d76fcfc98c5b02d19a03a80569\"></p>\n<p data-pid=\"rax_C5cS\">4日上午更新：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a47685ad577ef623cfee560deae367d4_720w.jpg?source=b1748391?rss\" data-rawwidth=\"3600\" data-rawheight=\"4000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-a47685ad577ef623cfee560deae367d4\" data-watermark-src=\"v2-e72cfbc7b7af1544ad0ec4456e607df8\" data-private-watermark-src=\"v2-ebaf0b646a4d6cf2a3d883cf446bd67b\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-430c61dd1ee132f7fef8af8a1f71cd9b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1060\" data-rawheight=\"1092\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-430c61dd1ee132f7fef8af8a1f71cd9b\" data-watermark-src=\"v2-f4ba5d8a16119fb0beefd6f627e300e4\" data-private-watermark-src=\"v2-172981f6b127afdb056f42dd8f308735\"></p>\n<p data-pid=\"f0EQsnlc\">进入黑潮暖流区后，台风轩岚诺得到了充分的热力支持，形态比昨日还要更好了，实测中心附近气压已经低于945hpa，已经是超强台风下限水平，说明台风轩岚诺即将以超强台风姿态靠近华东沿海并且掠过，路径参考去年灿都，目前台风轩岚诺也是一个核心小，但是环流大的台风，其外围环流目前已经开始接触到华东沿海，而东部甩出的悬臂也有到日本吐噶喇列岛到鹿儿岛南部了。但是其cdo在bd云图上看就会发现其实就占据四个经纬度格子大小。预计台风轩岚诺将继续北上，并略有加强。</p>\n<p><img src=\"https://pica.zhimg.com/v2-23f404b8be2c3e822f534df16c1d95a8_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1060\" data-rawheight=\"1030\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-23f404b8be2c3e822f534df16c1d95a8\" data-watermark-src=\"v2-31641c80b0a842233475c5edc21014f4\" data-private-watermark-src=\"v2-2a9b5f8fd352c4b4eb80ec3eb91e2ad8\"></p>\n<p><br></p>\n<p data-pid=\"Ll4iJfJ6\">3日上午更新：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8c07c2eea6c2184705c39299fc8be1db_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1057\" data-rawheight=\"1092\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-8c07c2eea6c2184705c39299fc8be1db\" data-watermark-src=\"v2-c5d29e31c9a27c005995ec714f610200\" data-private-watermark-src=\"v2-2228574fc88886fb71540f80ceefe6f6\"></p>\n<p data-pid=\"1B-VdbrU\">轩岚诺开始北上，摆脱了大风切影响以后，形态逐渐开始好转，LLCC（底层中心）不再裸露，螺旋云系也开始重新发展，目前很像一盘蚊香结构，现在应该是处于强台风下限的水平。</p>\n<p><img src=\"https://picx.zhimg.com/v2-2e26386a0bda541e5668efbb8a918dbf_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1067\" data-rawheight=\"837\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-2e26386a0bda541e5668efbb8a918dbf\" data-watermark-src=\"v2-e8c8169a3d3647cd395d208bf0f2a5ec\" data-private-watermark-src=\"v2-b7515317a1dfeeced9ad5b0131778c3a\"></p>\n<p data-pid=\"MNUZMNhj\">各机构也基本上确定其路线为浙江到上海东部海域近海北上，但是也不排除擦过华东沿海可能性，目前可能模仿灿氏台风的路线（去年灿都和15年台风灿鸿）在4日晚～5日白天通过华东近海，华东沿海的风雨影响还是会比较大。</p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"1rtXnAUQ\">2日上午更新：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-07b30822549b9030159148b47d74ec2e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1060\" data-rawheight=\"1030\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-07b30822549b9030159148b47d74ec2e\" data-watermark-src=\"v2-c720c4512b24daee5c172b23200619ca\" data-private-watermark-src=\"v2-33b14a42670426e786ec58d5b0d91fd6\"></p>\n<p data-pid=\"a3URNhAS\">目前，受到两个高压夹击缺乏引导气流的台风轩岚诺在台湾以东洋面滞留，因为强的风切变和自己挖出的冷水坑还有干空气入侵的影响，台风轩岚诺目前形态远不如前两天，强度大大减弱，仅维持一个台风下限水平。</p>\n<p><img src=\"https://pica.zhimg.com/v2-54ff6ac016f73768714cc5464a1cb173_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1060\" data-rawheight=\"1030\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-54ff6ac016f73768714cc5464a1cb173\" data-watermark-src=\"v2-97956a94104b9e8cd1b8de4ea927c789\" data-private-watermark-src=\"v2-b570278158c0395d955ca8ce511a0a55\"></p>\n<p data-pid=\"FxvHX18g\">不过在滞留两天以后，3日晚些受到东副热带高压加强影响，它将受引导开始北上，目前东海的条件对于台风发展还算良好，台风轩岚诺极有可能在北上以后再度发展为强台风甚至超强台风。</p>\n<p><img src=\"https://picx.zhimg.com/v2-01e4a73beb016b14d4bb6623a2e670bc_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1067\" data-rawheight=\"837\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-01e4a73beb016b14d4bb6623a2e670bc\" data-watermark-src=\"v2-b937191f02a19b7c652fd68c6dda7e76\" data-private-watermark-src=\"v2-767f76cd09bab1323798b3541d5ccd98\"></p>\n<p data-pid=\"g_WicqSV\">而且因为轩岚诺出意料的在台湾以东南移，加上东海上的副热带高压断裂时间偏晚，机构西调了台风轩岚诺的北上路径，它很有可能在华东近海掠过，也有可能登陆华东沿海，别看它现在形态一般，但是它在东海还是可能发展为超强台风，华东沿海一定要注意起来了。</p>\n<p><br></p>\n<p data-pid=\"Rcb2j900\">1日中午更新：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-da7492a68d346d7b0a45ed546bc5f48a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"2048\" data-rawheight=\"1638\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-da7492a68d346d7b0a45ed546bc5f48a\" data-watermark-src=\"v2-214bcd762bbf397abc3318bf0d32a0ff\" data-private-watermark-src=\"v2-5193f2afbf9db4be52b9d265f94a9148\"></p>\n<p data-pid=\"EWNJf5FT\">目前超强台风轩岚诺已经完成了第二次眼壁置换，逐渐走向第三次巅峰。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-764b8fda28e7cd637892f727815035a4_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1060\" data-rawheight=\"1030\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-764b8fda28e7cd637892f727815035a4\" data-watermark-src=\"v2-6aaca6f4378c01764085b0763de308bd\" data-private-watermark-src=\"v2-6ed91c1b565abaf48cd1ba5e21780f68\"></p>\n<p data-pid=\"2bWxrC60\">目前的BD云图可以看到轩岚诺出现了WMG+CMG环，依然是一个五级台风水平，中央气象台给了65m/s，17级以上的评价。在未来两天内，它受到西副高和东副高夹击影响，会在琉球群岛附近滞留，等到3号西副高减弱以后即再北上。</p>\n<p><img src=\"https://picx.zhimg.com/v2-4fa33f4b8c11940fb7ac7c57f988b55b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1295\" data-rawheight=\"1136\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-4fa33f4b8c11940fb7ac7c57f988b55b\" data-watermark-src=\"v2-f33a138ab359bc15b9c4406251f9805c\" data-private-watermark-src=\"v2-95c7615ef71e378997624f233f1c5345\"></p>\n<p data-pid=\"yQYT3UrR\">目前路径误差圈已经只包括舟山了，虽然还是无法排除轩岚诺登陆浙江的可能性，但是可能性已经大大降低，最大可能性还是袭击韩国或日本。</p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"JvGy1_xW\">31日中午更新：</p>\n<p><img src=\"https://pica.zhimg.com/v2-df368692c9d4f362d073207daf850679_720w.jpg?source=b1748391?rss\" data-rawwidth=\"897\" data-rawheight=\"926\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-df368692c9d4f362d073207daf850679\" data-watermark-src=\"v2-bcf67b520c444b4d033a191eebe5913f\" data-private-watermark-src=\"v2-752e7691a67035b73c7e86d9937e6e9d\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4f8221ae9b0d5601726ed20d7e9037ef_720w.jpg?source=b1748391?rss\" data-rawwidth=\"926\" data-rawheight=\"901\" data-size=\"normal\" data-caption=\"31日上午的BD云图\" data-watermark=\"watermark\" data-original-src=\"v2-4f8221ae9b0d5601726ed20d7e9037ef\" data-watermark-src=\"v2-423e7db2e1471f1f87abe447f97bbe38\" data-private-watermark-src=\"v2-af89b9a09b0cef9e7801db81dd7e60e4\"></p>\n<p data-pid=\"2e2Xlk-9\">轩岚诺经过结构调整，目前强度不如昨天，但是仍然维持了一个五级台风的水准。JTWC已经给予了其140KT的评价，它已经成为今年首个五级台风，而中央气象台依然维持62m/s（17级以上）915hpa的评价。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6a3aeed94cf4063974a19a6673b3ecba_720w.jpg?source=b1748391?rss\" data-rawwidth=\"897\" data-rawheight=\"926\" data-size=\"normal\" data-caption=\"98w云图\" data-watermark=\"watermark\" data-original-src=\"v2-6a3aeed94cf4063974a19a6673b3ecba\" data-watermark-src=\"v2-0f090aec7745abe481f123950dc66f85\" data-private-watermark-src=\"v2-c119c1286888fc25c80d49845f930fd4\"></p>\n<p data-pid=\"nQHYUvth\">而它南方的98w最终还是不敌强大的轩岚诺，被风切切成了LLCC裸露，即将被吸入轩岚诺中。</p>\n<p><img src=\"https://picx.zhimg.com/v2-aecc3177d21664c4ec9ea278e94cb23e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"828\" data-rawheight=\"735\" data-size=\"normal\" data-caption=\"31日日本冲绳的雷达扫描\" data-watermark=\"watermark\" data-original-src=\"v2-aecc3177d21664c4ec9ea278e94cb23e\" data-watermark-src=\"v2-2d087a7a5160e91f9ad81e840096f1bb\" data-private-watermark-src=\"v2-20b1a4b66f433e969bfe30aa2a2d67b8\"></p>\n<p data-pid=\"6S4DMIuP\">日本冲绳的雷达图像显示，轩岚诺的眼墙又出现了双眼壁，这意味着它可能又要开启新一轮眼壁置换。</p>\n<p><img src=\"https://pica.zhimg.com/v2-5684b8753e10303a766b643b593e4c05_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1067\" data-rawheight=\"837\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-5684b8753e10303a766b643b593e4c05\" data-watermark-src=\"v2-92f43ca46c96caf208277db1d2c91473\" data-private-watermark-src=\"v2-db36ca38a6bbef841211a37a91fa95b8\"></p>\n<p data-pid=\"PXOO2yba\">超级计算机模拟显示，它仍然有登台入闽，直插华东，北上韩国，转头袭日几种选择，不过登台入闽和北上韩国的概率变大了。</p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"W7rKz_gG\">30日下午更新：</p>\n<p data-pid=\"4CZT6-jX\">轩岚诺还在爆发，底层非常强大。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9741e55a95ee07e5aafc07feed693cba_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1057\" data-rawheight=\"1092\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-9741e55a95ee07e5aafc07feed693cba\" data-watermark-src=\"v2-48e9d191eb5d8729ab4f17c8be817fbc\" data-private-watermark-src=\"v2-903357195df90479db279198261ef2ad\"></p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-061f615581b91197f6af7b2549d1b268_720w.jpg?source=b1748391?rss\" data-rawwidth=\"800\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"底层扫描显示其底层179K成环\" data-watermark=\"watermark\" data-original-src=\"v2-061f615581b91197f6af7b2549d1b268\" data-watermark-src=\"v2-c2043e2767dea2eaa2e744107dc9a90d\" data-private-watermark-src=\"v2-2c8f787a4c1a67ffac225a3d23d8fc0a\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"u_edZWib\">30日下午已经可以自评一分钟平均风速150-155kt，顶级台风水平。中央气象台给了62m/s，17级超强台风。</p>\n<hr>\n<p data-pid=\"6gOtu3wO\">以下为30日上午的原回答：</p>\n<p data-pid=\"73qoJ2pf\">超强台风轩岚诺（英文：Super Typhoon Hinnamnor；国际编号：2211；联合台风警报中心：12W），为2022年西太平洋台风季第11个被命名的风暴。“轩岚诺”一名来源于老挝，由台风洛坦更替而来，意思是老挝的一个国家保护区的名称。</p>\n<p data-pid=\"PaPjPBI4\">颜值非常高的一个台风。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1527ac1bfbd48305434cb8a5a2f8eb85_720w.jpg?source=b1748391?rss\" data-rawwidth=\"580\" data-rawheight=\"648\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-1527ac1bfbd48305434cb8a5a2f8eb85\" data-watermark-src=\"v2-606c62b779c7d2d2bb726e79d992a353\" data-private-watermark-src=\"v2-1cf22c0664700fbd3e2fc962871e2a34\"></p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-20e87528ca72e5849355035d5e77a3ca_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1600\" data-rawheight=\"1542\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-20e87528ca72e5849355035d5e77a3ca\" data-watermark-src=\"v2-1767ec0072d85bcefe606b5ee730da95\" data-private-watermark-src=\"v2-4377b1af0fdd83256f26872293b1c407\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-572776ec4b4213aa11f541dc51291048_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1060\" data-rawheight=\"1030\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-572776ec4b4213aa11f541dc51291048\" data-watermark-src=\"v2-0fbc7c02217b0f061d1490384da69e24\" data-private-watermark-src=\"v2-bfd988441024feeaa41d834f5e617d8a\"></p>\n<p data-pid=\"rm9s-1lA\">台风轩岚诺没有季风的尾巴也没有西风槽的头发，整个台风都是自身的云系，非常的漂亮非常的规整。中心密集云区出现螺纹状，周围辐散云十分明显，这说明它能量十分集中，是个小巧而强大的台风。</p>\n<p><img src=\"https://picx.zhimg.com/v2-92f32c1173aac7eae4089147ed962ab3_720w.jpg?source=b1748391?rss\" data-rawwidth=\"926\" data-rawheight=\"901\" data-size=\"normal\" data-caption=\"30日中午，轩岚诺眼温19℃，CDO对流云顶亮温-77.8℃，标准的WMG+W环，JTWC稍早前评115KT，自评135～140kt，顶级四级台风或入门五级台风\" data-watermark=\"watermark\" data-original-src=\"v2-92f32c1173aac7eae4089147ed962ab3\" data-watermark-src=\"v2-02d109b9d94c8c649d0da5ff74c5a3a9\" data-private-watermark-src=\"v2-e19e2a9587320453d595f258ba33221f\"></p>\n<p data-pid=\"Wznss4pD\">轩岚诺不仅仅是今年西太平洋首个超强台风，还是即将的首个五级台风。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a13e21d0d86e8a2f017b0f54ce6b45f2_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1992\" data-rawheight=\"1902\" data-size=\"normal\" data-caption=\"30日中午西太平洋云图，日本以南的轩岚诺和轩岚诺西南方的98W\" data-watermark=\"watermark\" data-original-src=\"v2-a13e21d0d86e8a2f017b0f54ce6b45f2\" data-watermark-src=\"v2-73ecd92d38cf87601882176e38833295\" data-private-watermark-src=\"v2-c5993ac535bf1e1039158c1decd65b24\"></p>\n<p data-pid=\"i7VVchkI\">但是它的路径却是比较难预报的，因为它周围的系统非常多，影响非常大。</p>\n<p><img src=\"https://pica.zhimg.com/v2-d94b18cb6420814e7296ed26228abbbb_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1344\" data-rawheight=\"911\" data-size=\"normal\" data-caption=\"8月30日晚形势图（ECMWF预测）\" data-watermark=\"watermark\" data-original-src=\"v2-d94b18cb6420814e7296ed26228abbbb\" data-watermark-src=\"v2-063e727153ff5ce68ecf879d988cf3d6\" data-private-watermark-src=\"v2-87583d7ef85292c0fa14b868732ae320\"></p>\n<p data-pid=\"0Gc4tHh3\">台风轩岚诺的东南方有台风胚胎98W，而且目前在上面的卫星云图我们可以发现98W的发展还算比较快，目前云系比娇小的轩岚诺还要大，并且日本气象厅已经把98W升格为了热带低压，不排除今夜或明天98W成为台风梅花的可能性。</p>\n<p data-pid=\"G7-7gZQj\">如果98W超预期发展，轩岚诺将和它发生台风藤原效应，路径更难预测，而如果98W发展一般，或者被轩岚诺吃掉，那么轩岚诺的强度预测又会出现比较大困难，进而影响其路径预测。无论如何98w的出现对于轩岚诺都是一个障碍，因为它会带给轩岚诺比较强的风切变，风切变对台风的影响是致命的。如果它们靠太近，势必会是两败俱伤的结果。</p>\n<p data-pid=\"CfjmvGi0\">本身台风路径一般是按照副热带高压和西风槽的引导，据超级计算机的数值预报表明，目前轩岚诺应该受到东副高的影响往西南方向移动，逐步靠近琉球群岛。但是在琉球群岛部分路径就开始难预报起来，首先是西边副高要参与进来，不知道西副高到时候强弱如何，是否会引导其继续西行，然后西风槽也到位开始吸引轩岚诺北上，而98w则在吸引它南下或西移，而且还要和轩岚诺的发展强弱有关，如果到时候偏弱，那么它可能继续被副高引导，如果强度偏强可能直接顶开副高直接冲向西风槽。</p>\n<p><img src=\"https://picx.zhimg.com/v2-98eea708d96587928283c555ed060804_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1067\" data-rawheight=\"837\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-98eea708d96587928283c555ed060804\" data-watermark-src=\"v2-0a5deedf07fa1d5fe2cc6b4b0e03ab3a\" data-private-watermark-src=\"v2-cab6c07a40f2a09528c9ed7f41f14421\"></p>\n<p data-pid=\"IGbLSd0k\">超级计算机模拟了多条路线，包括登台入闽，直插华东，转向入韩，扭头袭日等等。</p>\n<p data-pid=\"S1L4B68u\">说明该台风路径在琉球群岛附近开始变得飘忽不定起来。</p>\n<p data-pid=\"ZL--YSrm\">不过超级计算机认为概率比较大还是扭头袭日或者从对马海峡入日本海。</p>\n<p data-pid=\"yuETKZ00\">在副热带高压长期控制下暴晒的西太平洋拥有强大的能量。台风轩岚诺至少目前能够坐稳今年全球风王的位置，而且琉球群岛避免不了一场直接袭击，强度可能会很强。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-58821ca444159055e43b133740e6cfa7_720w.jpg?source=b1748391?rss\" data-rawwidth=\"720\" data-rawheight=\"504\" data-size=\"normal\" data-caption=\"西太平洋海温情况，经过长期暴晒的海温条件已经非常高\" data-watermark=\"watermark\" data-original-src=\"v2-58821ca444159055e43b133740e6cfa7\" data-watermark-src=\"v2-5841b9fa9d74ef65e4b1d66fb1c4aecf\" data-private-watermark-src=\"v2-0b8bceae17cf336dea76284415b82955\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1a181c051944d0262a0f4d6c96f26024_720w.jpg?source=b1748391?rss\" data-rawwidth=\"929\" data-rawheight=\"770\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-1a181c051944d0262a0f4d6c96f26024\" data-watermark-src=\"v2-eeb12844c9fd8078b51bc579640ad195\" data-private-watermark-src=\"v2-0a12c9fe542654af0c658592ea570f16\"></p>\n<p data-pid=\"ijktZvfs\">GFS认为轩岚诺进入东海以后会成为一个环流较大的台风，首先我国华东地区会受到其下沉气流影响，可能出现晴热天气，等轩岚诺进一步靠近，华东又会受到其外围大风影响，出现大风天气，并且会配合北边西风槽的冷空气南下带来降温。</p>\n<p data-pid=\"oDuZ54xw\">之后会持续关注。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/kobe-3-59?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">等风</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/550480211/answer/2652033786?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">78 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/294979237?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么今年的台风如此频繁，而且都是一些强台风，这又有什么警示？</a><br><a href=\"http://www.zhihu.com/question/290416379?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">是否有人感觉今年的双台风、三台风比较多？是不是有什么不好的预兆？</a><br>\n","link":"http://www.zhihu.com/question/550480211/answer/2652033786?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"为什么你不应该在 React 中直接使用 useEffect 从 API 获取数据","date":"2022-08-19 08:53:00","description":"\n<p>React 是一个由 Facebook 开源的、可以在任意平台上构建 UI 的 JavaScript 库。在 React 中，一个常见的 Pattern 是使用 <code>useEffect</code> 搭配 <code>useState</code> 发送请求、将状态从 API（React 外部）同步到 React 内部、用于渲染 UI，这篇文章恰恰在向你介绍为什么你不应该直接这么做。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/180676/37/27394/27265/62ff57f2E600b3725/cff75c5fca39bbcc.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/\">https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/"},{"title":"NPM 自动更新版本号","date":"2022-08-04 05:00:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>ChenYFan 大佬的文章：<a href=\"https://blog.cyfan.top/p/d3c51290.html\">SpeedUp!使用黑科技为你的网站提速</a> 有提到过将 Hexo 博客的全部静态文件上传至 NPM 达到加速效果。</p>\n<p>但是 NPM 版本号不能重复，而且为了精准命中缓存和防止边缘 <code>@latest</code> 缓存过长，就必须指定版本号。</p>\n<p>本人在 <a href=\"https://blog.yfun.top/posts/2876015612/\">我的图床解决方案</a> 一文中使用的方法是 <code>npm version patch</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804133426.png\"></p>\n<p>但这个方法也有一些弊端，比如 <code>patch</code> 只会更新 <code>z</code> 位数的版本号，而且并不会上传至仓库，很可能会出现版本号冲突导致上传失败。这就是为什么最后还需要重新推送 Git 提交。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%95%E8%AF%95%E7%9C%8B\" class=\"headerlink\" title=\"试试看\"></a>试试看</h2>\n<p>NPM 版本号遵循 <code>semver</code> 规范，格式为 <code>major.minor.patch</code>。</p>\n<p>为了在获取最新版本号的时候不发生混乱，我选择先获取最新的版本号。</p>\n<blockquote><p>记得把 <code>cky-blog-static</code> 改成自己的项目名。</p></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>获取到最新版本号后，就可以对版本号进行分析。</p>\n<p>以 <code>1.4.7-b541af2ea284a39da0bbf63b88fdb65c</code> 为例，先按 <code>major.minor.patch</code> 分离。当然，也需要考虑版本号后还有 <code>build metadata</code> 的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\"><span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure><p><del>为了版本号好看些</del>，可以通过判断实现满十进一。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位小于 9，直接 +1</span></span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">} <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位大于等于 9，y 位小于 9，y+1, z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\"><span class=\"comment\">// z 大于等于 9，y 大于等于 9，x+1,y=0,z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>最后，重新拼接版本号。如果担心服务器缓存版本号导致冲突，还可以加上一些随机字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br></pre></td></tr></table></figure><p>将最新的版本号信息重新写入 <code>package.json</code> 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">packageJson.version = newVersion;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p><del>直接 CV 代码！</del></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新 package.json 版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fetch = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-fetch\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">\"js-md5\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> update = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">    verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newVersion);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">    packageJson.version = newVersion;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">    fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Complete!!\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">update();</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%90%8E\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>如果是 Hexo 文件部署，就可以直接把文件直接丢在项目根目录，Action 集成部署加上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node update.js</span><br></pre></td></tr></table></figure><p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804135818.png\"></p>\n<p><del>Blog 半年没更新，除除草 --(....</del></p>\n","link":"https://blog.yfun.top/posts/2022/auto-update-npm-version/"},{"title":"我有特别的 DNS 配置和使用技巧","date":"2022-07-28 15:31:00","description":"\n<p>众所周知，DNS 的作用与电话簿类似，将人类可读的域名映射到机器可读 IP 地址、使人更方便地访问互联网。DNS 是非常重要的互联网基础设施，对于改善上网冲浪的体验中的重要程度不容小觑。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/96381/31/31172/23930/62e2ab5bE554d388b/37027f4a03351b9e.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/i-have-my-unique-dns-setup/\">https://blog.skk.moe/post/i-have-my-unique-dns-setup/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/i-have-my-unique-dns-setup/"},{"title":"优化博客的累计布局偏移（CLS）问题","date":"2022-06-07 17:24:00","description":"\n<p>距离上一篇文章发布已有四个月了，是时候写几篇文章给博客除草了。上一次我介绍了我如何迁移、重构了我的博客的架构，这次我想来谈谈我在重构中优化和打磨访客体验时解决的一个问题。我的博客优化之旅 图片 lazyload 的学问和在 Hexo 上的最佳实践 我的博客有多快？ 天下武功，唯快不破 —— 我是这样优化博客的 ...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/206311/26/14625/38940/629f7f81Eb11312de/b1e67f07b1cc9bc7.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/fix-blog-cls/\">https://blog.skk.moe/post/fix-blog-cls/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/fix-blog-cls/"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。M1 芯片的性能如何？本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/138186/40/23101/50775/622032b3Efa9053d7/df3a819d044a9455.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]