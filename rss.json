[{"title":"藤本树的分镜能力怎么样，有哪些分镜能力和藤本差不多或者在他之上的漫画家？","date":"2022-09-19 12:15:27","description":"\n<p data-pid=\"V27vrD_8\">这个问题可以分两大部分，第一个部分是评价藤本树在分镜上的能力，第二个部分是讲一些其他的分镜比较优秀的例子。<b>这种比较争议的话题肯定是要我们上对吧</b>，毕竟大家都打太极有什么意思，我给大家抛块砖，以后大家批判我的内容写的讨论肯定能写的更好。</p>\n<p data-pid=\"Skurs5Yg\">因为我写的比较直接，然后是比较难的话题，写得难免有错误，大家就别点赞了，千万别给专业认证之类的，<b>因为我们是业余的读者所以我们才敢这么直球讲观点</b>，这个事情我还是有数的。</p>\n<hr>\n<h2>藤本树的影像力</h2>\n<p data-pid=\"G7e5L6R6\">“分镜力”是一个比较狭隘的词，所以我使用“<b>影像力</b>”这个词汇。对于漫画家来讲，他们的工作可以分为下面两个大的部分：</p>\n<ul>\n<li data-pid=\"5u9ERgso\"><b>构思影像</b></li>\n<li data-pid=\"iS3YVfoX\"><b>绘制影像</b></li>\n</ul>\n<p data-pid=\"JpNxP4d8\">那么这里的评价自然就分为了两部分：</p>\n<ul>\n<li data-pid=\"Tv1KkGWe\">能够构思出多好的影像</li>\n<li data-pid=\"FC9GSfjb\">绘制影像的完成度如何</li>\n</ul>\n<p data-pid=\"a_eytLi7\">所谓的“分镜力”是“绘制影像”的一个部分，评价分镜力、评价绘制影像的能力，说到底你得搞明白漫画家到底在想象什么样的影像。而这里很显然的，如果漫画家本来想象的就很简单，绘制上自然就不容易出彩，那么到底是“构思影像力”不行，还是“绘制影像力”不行，<b>是不太能区分的</b>。毕竟不仅存在“想不出画面”的情况，更有“画不出来所以想的简单点”的情况。要说我们的鉴赏的局限和不可逾越之处在哪里，那就是这里。</p>\n<p data-pid=\"3Y6So6WM\">先说一个总体性的结论，藤本树属于<b>构思影像力一流、绘制影像力二流的漫画家</b>。这个结论是目前（2022.8）观察的结果，也是针对当下的藤本树（而不是过去某个时期的藤本树）的看法。</p>\n<p data-pid=\"P6vsrgOr\">基本上来讲，华语读者近几年比较认可、喜爱的新冒头的漫画家，都是构思力比绘制力好的。大家喜欢讲得“画的不好但是内容好就可以”，实际上是不准确的，真正绘制上不行的热门作是很少的，大家举得各种例子，比方说谏山创、one、鱼丰...<b>他们都是影像构思力很好的漫画家</b>，都不是“好”而是“很好”。近年评价比较好的作品在绘制上相对普通的，真说起来我感觉也就是《辉夜大小姐想让我告白》。</p>\n<p data-pid=\"dbzttk5E\">归根结底大家的认识不要极化，对于漫画来讲“<b>画和内容</b>”是水乳交融的，除去非常特殊的作品，不然根本是分不开的。大家的欣赏也应该脱离最基础以及前几年华语讨论中常见的“<b>截一张图说分镜/画工好</b>”的欣赏论，如果有条件的话，我们要做的欣赏其实是：<b>阅读一段/话漫画，把握作者想画的影像内容，通过影像内容反推出其绘制的水准</b>。</p>\n<p data-pid=\"meGysrtJ\">那么，我就用几个具体的例子，来为大家说明这个话题。<b>讲三个批评点，和三个赞赏点吧</b>。阿树在《炎拳》之前的作品我就不涉及了。</p>\n<p data-pid=\"UReWnhP-\">写夸人的问题就先从缺点开始讲起，大家慢慢看吧。</p>\n<h3>批评点1：空间位置的构造</h3>\n<p data-pid=\"CWKpb3d4\">欣赏出处：《电锯人》第15话</p>\n<p><img src=\"https://picx.zhimg.com/v2-7c1a737c2a35625b514b65da684a007d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"828\" data-rawheight=\"632\" data-watermark=\"watermark\" data-original-src=\"v2-7c1a737c2a35625b514b65da684a007d\" data-watermark-src=\"v2-5479ffa74c8e8d26a449c0d0fbde24b0\" data-private-watermark-src=\"v2-cc0f3e2c8f389b2c4c1687360be468ac\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-994ad857a4b3d881ad6011b69bde27e1_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"878\" data-rawheight=\"636\" data-watermark=\"watermark\" data-original-src=\"v2-994ad857a4b3d881ad6011b69bde27e1\" data-watermark-src=\"v2-c33a9471e93fb81a58664bfd33e2b9bd\" data-private-watermark-src=\"v2-2c4d01351db260bb60c26b574349313e\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-777d8ef0e746f41d5967f47db888b029_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"867\" data-rawheight=\"637\" data-watermark=\"watermark\" data-original-src=\"v2-777d8ef0e746f41d5967f47db888b029\" data-watermark-src=\"v2-716d219d0696903f9fbb334c82096cae\" data-private-watermark-src=\"v2-78f2df3db55f5aa8a2a5b1d2862d2f76\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7e8103c27e164af6c8c3e9fc071ed76a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"878\" data-rawheight=\"636\" data-watermark=\"watermark\" data-original-src=\"v2-7e8103c27e164af6c8c3e9fc071ed76a\" data-watermark-src=\"v2-f24c77e012ec033c49cd0827bf013922\" data-private-watermark-src=\"v2-8dd41cc015dd6292c2cc3b4c87890a46\"></p>\n<p data-pid=\"u7ZRCERd\">这部分要画两个主要事件，其一，<b>循环楼梯</b>；其二，<b>循环房间</b>。</p>\n<p data-pid=\"Q4X2dQW2\">对于循环楼梯，藤本树的思路是以人群为参照物，不断让角色去爬楼梯然后再相遇。思路没什么问题，<b>但是画得相当一般</b>。特别是第一位路人男士下楼梯的绘制，特别的随便，<b>你能看出中间那一格实际上在画“角色转身”吗</b>？一些细节上的问题，比方说角色身体与肢体方向的错误（可以比较姬野和路人角色的头部方向的不同），姑且放在一边。这种“<b>奇遇</b>”的桥段，作品中一点气氛都没有画出来。为什么，很多细节可以讲，<b>但最大的原因还是“平面图”式的分镜设计</b>。这种奇遇，你不来个主观视角或者越肩视角然后带点透视和光影画也就算了，你画这个平面图是啥个意思？</p>\n<p data-pid=\"8Ena30M6\">第二段“循环房间”的设计，更是显出设计上的拙劣，空间位置上的<b>完全错误</b>就不说了（你能看出来小小红是站在楼梯口吗），<b>能做得毫无气氛也真的是本事了</b>。把视角扭到小小红主观视角，一页分三格，第一格是小小红看秋冲进房间，第二格是关门，第三格视角正对小小红、秋从小小红身后的门走出来，<b>大家觉得这样画不开吗</b>？</p>\n<p data-pid=\"LGX5shrQ\">内容设计的挺好，想的影像还算不错，但是画得一泡污。关于这种在房间、楼梯内的精巧设计，<b>还是请大家多看JOJO</b>，特别推荐《JOJOLION》的“软又湿”替身战，看看是怎么在一个房间的方圆内设计和绘制复杂、焦灼、精彩的奇遇。</p>\n<p data-pid=\"SJjVuwu2\">这个时期的藤本树算是生涯最迷茫、发挥最差的时期，<b>很快他就不画这种情节了</b>。</p>\n<p><br></p>\n<h3>批评点2：没什么办法的动作绘制</h3>\n<p data-pid=\"goQfr66D\">这个之前讲了太多了，你只要稍微熟悉阿树的作品，你就知道这个基本事实。<b>是真的没什么好思路</b>，在jump漫画家中肯定是算整体水准中下的。</p>\n<p data-pid=\"4kXnSKxv\">藤本树作为鞋子都画不好的漫画家，<b>我觉得他自己也是很苦恼的</b>，最菜的时期就是《电锯人》前期。各位阿树粉丝啥时候意识到《电锯人》前期基本上是阿树黑历史，啥时候真的算有进步了。</p>\n<p data-pid=\"0bD3Tm32\">到《电锯人》后期，藤本树算是渐渐摸索到了<b>pose打戏</b>的路子，好在他画pose、大单张的感觉很好，所以也产出了不少受到好评的内容。</p>\n<p data-pid=\"iLulDvRu\">请大家注意的是，“动作绘制”是一个极其广阔的概念，一个人动作绘制不行，<b>可能会牵扯很多连带问题</b>，比方说我之前和大家聊过的《炎拳》中一处特别糙的分镜设计：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b5a884c9c01dfddf80085b55a0b317f9_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"443\" data-rawheight=\"749\" data-watermark=\"watermark\" data-original-src=\"v2-b5a884c9c01dfddf80085b55a0b317f9\" data-watermark-src=\"v2-247f8c682d74c3364ca0a1fd2afc9eeb\" data-private-watermark-src=\"v2-24e7596adf74ea8a77ddaf1f73ae7252\"></p>\n<p data-pid=\"a6mwJ7dX\">这是典型的漫画基本影像理解都不成熟，<b>连角色和画面运动方向都没法第一时间搞清楚</b>，只是在纸上努力画出自己脑中的横向PAN镜而已，<b>哪有这么画漫画的</b>。《炎拳》和《电锯人》前期出现的这种乱七八糟的分镜，<b>你们在《电锯人》后期、《蓦然回首》、《再见绘梨》、《电锯人》第二部会看到吗</b>？</p>\n<p data-pid=\"iqSgQLp8\">但是必须得和大家讲啊，<b>拍成影像还是好看的</b>。</p>\n<p><br></p>\n<h3>批评点3：作品中的“空气感”不强</h3>\n<p data-pid=\"ScHS3gCP\">这个说起来有些玄乎，关于“空气感”这个词不同人有不同的理解，在我的话语体系下，它的意思是——<b>空气中无声的情绪不够强</b>。</p>\n<p data-pid=\"fkuIw_bi\">我在这里为大家带来一组对比，对比的双方是：</p>\n<ul>\n<li data-pid=\"OjV20UXH\">电锯人 80话《狗的心情》</li>\n<li data-pid=\"u81AYk-D\">\n<b>火影忍者</b> 405话 《剩下的人们》</li>\n</ul>\n<p data-pid=\"WWTSEcLl\">在这两话中的剧情分别是：秋死亡、自来也死亡，<b>刻画电次、鸣人的心情</b>。巧合的是，<b>这两话有非常近似的故事情节——吃雪糕</b>。让我们先来看看《电锯人》的发挥：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c4ea549efd7fda01f0bf1847698f75e2_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"919\" data-rawheight=\"646\" data-watermark=\"watermark\" data-original-src=\"v2-c4ea549efd7fda01f0bf1847698f75e2\" data-watermark-src=\"v2-82257b10671d7019f3cea20b2b75521c\" data-private-watermark-src=\"v2-9fc4d9f893326cc08a7571ccb7b52af3\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-aeb163e8c52426add96c91de68b10b6f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"872\" data-rawheight=\"636\" data-watermark=\"watermark\" data-original-src=\"v2-aeb163e8c52426add96c91de68b10b6f\" data-watermark-src=\"v2-485aeefc53e5163947deb774b2840f94\" data-private-watermark-src=\"v2-bffbc5d455f9faf2eea850f6dc463063\"></p>\n<p data-pid=\"PC6W_X_Q\">大家是不是觉得画得挺好的？<b>来，看看被大家嫌弃的《火影忍者》</b>：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0bedc70a54a047f3c1bcfbbe06105514_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"822\" data-watermark=\"watermark\" data-original-src=\"v2-0bedc70a54a047f3c1bcfbbe06105514\" data-watermark-src=\"v2-3fd2562c2bb27cd7e6eaee1a4c23fd7b\" data-private-watermark-src=\"v2-f047fc133f25dc03ae56f8a05cdaead8\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-d6b31dafd5727e1a06b464dcadd41c9b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1070\" data-rawheight=\"831\" data-watermark=\"watermark\" data-original-src=\"v2-d6b31dafd5727e1a06b464dcadd41c9b\" data-watermark-src=\"v2-81fb559f989ad8f5c6702fd417604a2b\" data-private-watermark-src=\"v2-c790a8ca3c406347fd2a550a9bde742d\"></p>\n<p data-pid=\"t_Om7gj2\">从<b>台词的配置、画格的绘制、穿插的景物画格的内容</b>来讲，<b>那个是上位的设计我觉得完全没有悬念</b>。这是被大家说是“嘴炮忍者”、“打斗好之外啥都不行”的《火影忍者》，相较之下<b>《电锯人》根本就是啰嗦+依赖台词+不会分格</b>。</p>\n<p data-pid=\"R0DOWQFh\">我来带大家看一个更强的，来自《<b>愚者之夜</b>》第26话《<b>在这里</b>》。这一话讲述的是<b>主角的好友胃部受伤而病危，主角担心好友身体状况做噩梦</b>的内容。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f9bc01da4cc1f80ab22bddc96195b9ca_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"901\" data-rawheight=\"638\" data-watermark=\"watermark\" data-original-src=\"v2-f9bc01da4cc1f80ab22bddc96195b9ca\" data-watermark-src=\"v2-c6311deeb06b0ac36335305a6bdb5532\" data-private-watermark-src=\"v2-bd6505d76cef62d9b164f1e27412630c\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-be839cb7eef30764346712535a37ff72_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"873\" data-rawheight=\"635\" data-watermark=\"watermark\" data-original-src=\"v2-be839cb7eef30764346712535a37ff72\" data-watermark-src=\"v2-647a434d7217502a703a748ea2067a39\" data-private-watermark-src=\"v2-5b2d07f4a43761c445dbf48268b1d026\" data-tags=\"porn\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-b853e36c84b3041bfd87028090af10e4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1289\" data-rawheight=\"852\" data-watermark=\"watermark\" data-original-src=\"v2-b853e36c84b3041bfd87028090af10e4\" data-watermark-src=\"v2-df6ab45d820cf2f8b4db01731931cb1e\" data-private-watermark-src=\"v2-3724252f80b9d53390c64bd25359d86b\" data-tags=\"porn\"></p>\n<p data-pid=\"YEy4kxnH\"><b>什么叫喷薄而出的情感啊</b>！在连续数页的内容中，男主角几乎没有一句台词，甚至连明显的表情变化都没有。而男主角的复杂而浓厚、磅礴的情绪变化，<b>难道体会的不深吗</b>？</p>\n<p data-pid=\"2J-0TBTr\">被很多读者认为有无比纤细情绪表达力的藤本树，<b>他的情绪表达反而并不细腻</b>。在我看来，藤本树作品的情绪的<b>庞大、粗粝但是复杂、准确的</b>，藤本树能够在作品中演绎出非常不错的角色情绪，<b>但是往往需要一串、一长串情节</b>。举一些藤本树特别强的例子，比方说《电锯人》超经典的“蕾塞篇”，第52话《失恋 花 电锯》，<b>这一个篇章整体看很强，但是这一话并没有特别厉害或者说特别浓烈的情绪</b>。</p>\n<p data-pid=\"TEowmhPX\">这一点的成因是<b>非常复杂</b>的，主要是下面三点：</p>\n<ul>\n<li data-pid=\"ayy7S4Fi\">藤本树不是特别擅长借助景物和环境抒情</li>\n<li data-pid=\"NTjuP8UH\">藤本树作品的情节、角色设计有特殊需要</li>\n<li data-pid=\"MFhm72_e\">藤本树会更倾向于设计连串、大段的抒情</li>\n</ul>\n<p data-pid=\"KFX2nUtT\">对于第一点，<b>这是一个相对而言的评价</b>。相对于藤本树一流的情绪表达能力来讲，他对景物、环境的综合利用，确实是相对落后一点。我认为这<b>主要是因为藤本树不是特别擅长画背景、环境和场景，造成综合的sense没有那么得好</b>。在后面我会向大家介绍特别擅长<b>借物抒情</b>的新锐漫画家<b>二阶堂幸</b>，大家看她的作品就知道，对背景、环境sense好而且擅长绘制的漫画家是怎么抒情的了。</p>\n<p data-pid=\"F6BOdJz8\">阿树擅长的环境整体来讲<b>相对有限</b>，在一些比较特殊的场景里，比方说<b>电影院、窗边、门口</b>，藤本树能够有很不错发挥，没有问题。但是除此之外呢？相对来讲没有那么突出。</p>\n<p data-pid=\"jpIf0ger\">对于第二点，我之前写过专门的讨论阿树“疏离感”、“角色表演”的文，理由大致如此。</p>\n<p data-pid=\"BrBm-lVn\">对于第三点，我觉得这个大家比较好理解，<b>而且这也是藤本树相对突出的能力</b>。</p>\n<p data-pid=\"ov24JImV\">总的来讲，<b>大家阅读阿树的作品会觉得有些“干瘪”和“生硬”，空气中的情绪不充盈，角色的行为、思考会带一点“毛刺感”</b>。</p>\n<p data-pid=\"XGKeZxs1\">当然，<b>这些问题在《蓦然回首》里，是几乎不存在的</b>。藤本树那两部短篇证明太多东西了，真的厉害好吧。</p>\n<p><br></p>\n<h3>赞赏点1：叙事行进感特别的好</h3>\n<p data-pid=\"jsMIOMV2\">藤本树在绘制上的最大优点，其实是这个看上去和绘制没有半毛钱的点上。</p>\n<p data-pid=\"FoENxFyb\"><b>和大家大部分阅读的周刊连载作品相比，藤本树推进故事的速度和能力是相当突出的</b>。你可以觉得他画得菜，你可以觉得他画得糙，但是故事整体的推进和说明是绝对有保障的。</p>\n<p data-pid=\"3357Vqm9\">一些朋友可能会说，哎呀如果情绪表达简略点、情节转折硬一点、故事剧情设计的精简点，这叙事的行进感当然好了！</p>\n<p data-pid=\"Wu8i-q5N\">是这样的，这一点的感受是整话、整段、整部作品进行感受的。我说一个特别简单、突出的阅读感受就是——<b>你读藤本树的作品不会觉得“挤”和“赶”</b>。藤本树三部长篇连载第一话的叙事都<b>稳得吓人</b>，和那些第一话开足马力、填充得满满当当的作品，形成了特别鲜明的对比。当然，<b>两部在100话内稳妥完成的长篇连载，更能说明这个问题</b>。</p>\n<p data-pid=\"5vN3_82f\"><b>这些内容怎么割成20/50页，每一部分应该多大篇幅，该怎么画格子</b>，这才是漫画叙事的基础，也是在欣赏上特别细节的问题，而且是要分进“影像”之中的。我解释一下大家就知道了，<b>你觉得对话框的绘制不能算进“影像设计”吗</b>？</p>\n<p data-pid=\"eQ-kfXnA\">在读完一话之后，综合整一话的内容，各方面的配置是否恰当。这个“恰当”没有一个固定的答案，每个漫画家在每个故事里有一个恰当的所谓“节奏”，而<b>藤本树在自己非常“鲜明”的节奏之中，往往都非常规律和条理</b>。</p>\n<p data-pid=\"0WYwBy8P\">当然，《蓦然回首》这样的既有鲜明节奏，又不生硬的作品，我是认为回击了不少对藤本树方法论的质疑的。</p>\n<p data-pid=\"WvfrQvYF\">阿树的这个很好的叙事力，和他“一串情节抒情”的特点结合，<b>往往就让情节表达非常有保障</b>。就算是在自己很青涩、不成熟的时期，阿树一段一段下来的表达还是相当稳的。</p>\n<p data-pid=\"k1vKgciJ\">关于这一部分，我想不出太好的能让大家一下子明白的例子，<b>每话赏析是比较好的聊这个话题的方式</b>，可惜我之前每话赏析写的比较随便所以贴不上链接，之后有精力的话在每周阿树时间里带着大家做每周欣赏吧。</p>\n<p><br></p>\n<h3>赞赏点2：影像构思特别的好</h3>\n<p data-pid=\"i5tSFaCs\">这个是大家相对常聊的点，阿树影像构思的好，<b>不是因为他致敬了多少名作，而是因为他能够借助名作设计出好的影像</b>。</p>\n<p data-pid=\"g9CtSGfw\">这一点从《炎拳》<b>连载开始</b>就能够看出来，脑子里面影像感相当好。到后面慢慢成熟了，各种片段强的大家一眼就能看到了。暗之恶魔啊，我也没上学啊，万圣节啊，帕瓦撞车啊，你看我一讲出来你都能想到具体的画面吧？</p>\n<p data-pid=\"R-Wk5IIC\">藤本树在漫画上虽然是最近1-2年才成熟的，但是藤本树在时间上的感受，很早就是准的。<b>时间感准，画格割的就准，割的就舒服</b>。<b>画格割的准，叙事就平稳</b>。我想和大家讲得是，<b>漫画画格分格很像原画的关键张</b>，漫画的时间感不是将运动图像按照脑海中的时间进行等分然后切割的，而是根据内容元素、读者阅读速度进行的合理划分，是<b>把不等面积、不等时间的影像留存在纸张上的魔法</b>。</p>\n<p data-pid=\"rt7nBJ9B\">藤本树在时间感上早早就没有问题，那<b>他就算一时半会在技法细节上菜了，最终成品也差不到哪里去</b>。这个道理对于好多漫画家都是适用的，比方说ONE。</p>\n<p data-pid=\"N2vO4sIm\">哎呀...在这部分真的是感觉语言的局限，我是觉得做<b>画格显现视频</b>来让大家感受阅读的时间感会更准确，比截个跨页图画画线或者啥动态漫画准确多了。当然需要向大家指出的是，<b>动态漫画在让大家感受作品时间感上有其独特的价值</b>，并不是说我们看漫画的就看不起动态漫画。</p>\n<p data-pid=\"-rNMD9wE\">我写《电锯人》第二部的每话赏析的时候都会和大家聊一下每话的影像构思情况，大家有兴趣可以看一看。当然，还是写的有点随意。</p>\n<p><br></p>\n<h3>赞赏点3：大单张的感觉很好</h3>\n<p><img src=\"https://pic3.zhimg.com/v2-dbd37fc507b45193003d9a5e48ff6289_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"951\" data-rawheight=\"738\" data-watermark=\"watermark\" data-original-src=\"v2-dbd37fc507b45193003d9a5e48ff6289\" data-watermark-src=\"v2-d670b31b4d7610d40ad3772561b820a9\" data-private-watermark-src=\"v2-0f8932249f7b2bb9ea820eb69e74b7d2\"></p>\n<p data-pid=\"uDYtW5GD\">藤本树整体来讲，<b>不是很依赖或者说侧重大单张、大跨页的类型</b>。就我个人的感受来讲，<b>藤本树随着绘制能力的上升，在渐渐增加大单张、大跨页的比例</b>。基本上画大单张和不画大单张，藤本树都能画得比较出彩。但是，就算单论大单张的表现，<b>藤本树也是很不错的</b>。</p>\n<p data-pid=\"btkI4s9D\">在绘制时间相对充足、有选择的情况下，<b>目前的藤本树会倾向于多画大单张</b>。请大家看看《电锯人》第一部第一话，之后的两部短篇以及目前的第二话，没有问题的。</p>\n<p><br></p>\n<p data-pid=\"Dk20eEE2\">总的来讲，阿树的综合的影像能力，大的不多说，<b>至少是当下jump、jump+最好的</b>。</p>\n<p data-pid=\"vixRov1-\">在新一代的漫画家里（2010年前后出道），挑毛病归挑毛病，真觉得藤本树不行，<b>你可以举几个你觉得比藤本树综合影像素质更好的</b>。先给大家做点排除，<b>谏山创、鱼丰、安田佳澄、タイザン5、ONE 综合是不如的，二阶堂幸没画过长篇连载</b>。具体为什么，下一部分聊。</p>\n<p data-pid=\"sEfNTTos\">你问我年轻漫画家谁比藤本树强，我是真不知道，你知道的话可以给我推荐或者留言。</p>\n<p data-pid=\"6ah3dO9_\"><b>藤本树当下影像上的问题，主要还是笔头不够硬</b>。周刊连载进行的时间长，比方说后期的玛奇玛，一话一种脸，<b>怎么能保障发挥水平呢</b>。</p>\n<hr>\n<h2>其他的优秀漫画家</h2>\n<p><br></p>\n<h3>二阶堂幸</h3>\n<p data-pid=\"2dG2c55r\">在综合影像上压阿树的年轻漫画家，目前比较确定的大概就是二阶堂幸。</p>\n<p data-pid=\"s6rXPJF1\">关于二阶堂幸，我们推荐她的《<b>说声谢谢你</b>》短篇集（特别推荐第五话《RUN!》）、《<b>雨中邂逅貉</b>》（特别推荐第21、24、50话）。不仅仅是分镜上的能力好、角色画的漂亮，二阶堂幸绘制衣物、风景、动植物等综合内容的水准，以及使用景物表现作品气氛的手腕，都是非常成熟而且恰当的，<b>特别的“贵气”</b>。作为对比，今年“NEXT漫画大赏”里有一部作品叫做《河畔街上的希琳》，里面的女主角在作品中被形容为“<i>像是从月亮上来得人</i>”。我只能说，这种内容表现真的是怕对比，和二阶堂幸绘制的女角色比，《河畔街上的希琳》里的女主角真的特别的又俗气又平庸，呃，请允许我举这个相对冷门点的例子。</p>\n<p data-pid=\"PiVY6-Dz\">另外，请大家好好欣赏二阶堂幸绘制的春、夏、秋、冬四季的各种景色，感受她用景物抒发的各种细腻情感。</p>\n<p data-pid=\"g432Eqh6\">对二阶堂幸的能力上的一些疑问，主要是她没画过周刊连载以及长篇故事。<b>而如果仅比较短篇作品的综合影像素质的话，能压《蓦然回首》、《再见绘梨》的作品，这几年的新连载几乎是没有的</b>。《蓦然回首》是能竞争2021年年冠，《再见绘梨》是竞争2022年年冠的作品，你要是看到了更好的请赶快向大家推荐。阿树在连载、长篇作品中的综合表现，目前来看也是变化比较大的，毕竟《炎拳》-《电锯人》早期-《电锯人》中后期-《电锯人》第二部，它们的水准都是不太一样的。</p>\n<p><br></p>\n<h3>鱼丰</h3>\n<p data-pid=\"6HfbFX_B\">鱼丰在我看来是所谓“<b>才能的化身</b>”（笑），真正的天生的漫画家。即使阿树也身背“鬼才”的称号（在日本也是一样的），我还是更愿意讲“鱼丰是最有才能的年轻漫画家”这种判断。</p>\n<p data-pid=\"t8o8bJEn\">鱼丰突出的点主要是两个，第一个是<b>真他妈的是讲故事的天才，真的会选题材，作品讨论是真的实在</b>，这个话题和本回答的“影像力”关联不大，就不讲了。</p>\n<p data-pid=\"YqxwbKO5\">鱼丰在影像力上的突出点，就是<b>天才级的大单张sense</b>。我专门写过文章聊过：<a href=\"https://zhuanlan.zhihu.com/p/502978663\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/50</span><span class=\"invisible\">2978663</span><span class=\"ellipsis\"></span></a> ，大家有兴趣可以看一看。</p>\n<p data-pid=\"9ug0O3su\">但是我必须向大家指出的是，我们聊鱼丰是讲“才能”，而<b>藤本树是已经兑现了才能的漫画家</b>。鱼丰的成熟程度，远远不如当下的藤本树，甚至不如《炎拳》早期的藤本树。这不只是画力上的差距，<b>除去大单张之外所有的底力都有差距</b>。藤本树够不会画动作了吧，鱼丰更不会！</p>\n<p data-pid=\"4pRre1u5\">鱼丰能5年之后综合素养达到《电锯人》早期的阿树，那他绝对能把日本各大漫画奖项全刷一遍。不过毕竟5年之后鱼丰也才不到30岁，大家都懂啊，<b>华语读者之后30年的好朋友啊</b>。</p>\n<p><br></p>\n<h3><b>谏山创</b></h3>\n<p data-pid=\"fErKyUre\">谏山创作品是拉了，但是综合能力在新一代里真的还是蛮厉害的。</p>\n<p data-pid=\"8YwzwxWU\">在巨人巅峰期，很多人说谏山创的分镜好、表情细腻之类的，这纯粹是读者滤镜开大发了。谏山创值得称赞的点，主要还是内容上的，在绘制上的表现在中后期可以说“<b>不错/优秀</b>”，综合起来是肯定不能去争前几位的。巨人比较突出的，就是我们讲的“叙事行进感”，和阿树是两个风格，<b>是真的有值得赞赏的点的</b>。但是除此之外，就真是没有太值得夸的了。</p>\n<p data-pid=\"sna41wWv\">谏山创的绘制和故事内容的高低潮是紧密相关的，特别容易出现<b>内容编排的不顺利、绘制也跟着开摆</b>的情况，巨人最后十几话就太典型了，本来抛开故事，谏山创在影像上也能拿到更好的评价的，比方说大单张的感觉。但是，最终还是拉了。我是觉得之后谏山创突破《进击的巨人》的桎梏都难，他离“某一代最佳”的距离都还很远</p>\n<p><br></p>\n<h3>安田佳澄</h3>\n<p data-pid=\"ZIHcYdWA\">综合影像上最有实力整体把藤本树斩于马下的年轻漫画家，相比二阶堂幸他画过长期连载，而且题材也更相近。他唯一的问题纯粹是——<b>创造力不如藤本树</b>。</p>\n<p data-pid=\"deeug434\">只要看过《愚者之夜》，都清楚这部作品和这位创作者的底力有多牛逼，上面我们也举了这部作品的一小段让大家感受。<b>各方面几乎无可挑剔啊</b>，就这水平你再往上我只能和你聊area 51和松本大洋了，朋友这不吓人么。但是，<b>故事内容和影像的构思力拖了后腿</b>。就算我们抛开作品内容和题材上的问题，安田佳澄的叙事大家看得也没有那么舒服。和形成了自己一套叙事、节奏、时间感的阿树相比，我还是认为安田佳澄综合是比不上的。</p>\n<p data-pid=\"FSg_8htq\">当然，很重要的还有所谓的“作品完成度”，《愚者之夜》的遗憾点在于它无论是画还是故事上，都有机会到一个特别高的高度，但是目前已经完成出来的<b>还差点火候</b>。总的来讲，这是一位非常值得大家期待的漫画家和作品，<b>期待他比期待小畑健、村田雄介之类的漫画家有盼头多了</b>。</p>\n<p><br></p>\n<h3>タイザン5</h3>\n<p data-pid=\"c1ulRvGL\">タイザン5在《章鱼噼的原罪》之前还比较一般，《章鱼噼的原罪》简直就是超进化了，<b>相当出色的短期连载</b>。</p>\n<p data-pid=\"gfRD8dba\">我对这部作品不是很喜欢，但是对这部作品的绘制的整体的感受来讲，我认为值得大家欣赏和品鉴的点是非常多的，<b>可惜就是最后几话还是画得有些乱</b>，不然在技法上真的挺不错的，算不错的小品。这部作品是以噱头、反转为主的作品，而绘制出力和关键情节的高度统一，给出的观感非常地好。</p>\n<p data-pid=\"rjKX1AN6\">但是，就200-300页的内容的话，抬抬眼《再见绘梨》、《蓦然回首》都差得不多，不说《再见绘梨》，<b>是真的拼不过《蓦然回首》</b>。</p>\n<p><br></p>\n<p data-pid=\"DqYDX__t\"><b>ONE</b></p>\n<p data-pid=\"Owud9YpO\">曾经的标杆ONE老师现在看起来已经不是那么得典型了，整体来讲我会觉得ONE和鱼丰比较像。画力都和外行差不多（当然现在ONE进步了很多），然后在画上都有自己的一套东西。ONE对打斗的绘制有非常特殊的理解与表现，而鱼丰就是大跨页的整体叙事设计，然后两个人都在叙事安排上有自己的一套。但是他们综合起来，<b>影像上还是比不过的</b>。</p>\n<hr>\n<h2>总结</h2>\n<p data-pid=\"Idk5g03I\">总的来讲，我是认为：</p>\n<ol>\n<li data-pid=\"wKrV1kn9\">藤本树有不少缺点，但是整体真的挺厉害的</li>\n<li data-pid=\"tFxu0gw9\">你可以不认同藤本树，但是真说比藤本树厉害的同一代漫画家，真不好找</li>\n</ol>\n<p data-pid=\"DJEnZ-Bh\">这算是初步的意见吧，大致如此，写的不太好，写完是感觉自己需要更好的一套话术体系（笑） 后面看到好的内容再说罢</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/aottoo?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">TOTOLO</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/384099531/answer/2612213110?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">8 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/552274699?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">藤本树的漫画作品中有什么令人感触颇深的剧情？</a><br><a href=\"http://www.zhihu.com/question/532618581?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">「藤本树」这位漫画家有哪些很值很值得安利的动画作品？</a><br>\n","link":"http://www.zhihu.com/question/384099531/answer/2612213110?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派评 | 近期值得关注的 App","date":"2022-09-19 09:53:56","description":"你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。<a href=\"https://sspai.com/post/75818\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75818"},{"title":"9 月 19 日「英女王葬礼」在伦敦威斯敏斯特大教堂举行，具体流程如何？有哪些文化习俗？","date":"2022-09-19 08:09:10","description":"\n<p data-pid=\"rrimBfAl\">【英国伊丽莎白二世女王葬礼9月19日举行】英国伊丽莎白二世女王的葬礼将于当地时间19日在伦敦威斯敏斯特大教堂举行。英国外交部消息人士此前表示，包括国家元首、王室成员和外国政要在内，有约500名宾客将出席英女王的葬礼。大量民众也将在伦敦街头悼念女王。伦敦警方表示，女王葬礼将成为英国有史以来最大规模的安保行动，警方正在为恐怖主义威胁、抗议和人群踩踏等事件做准备。葬礼举行时，警方将在伦敦街头部署有史以来数量最多的警察，英国全国各地的警力都将支援伦敦。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xiao-yang-shi-pin?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">小央视频</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/554342210/answer/2680313149?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">205 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/552535641?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么我对英国女王去世无感？</a><br><a href=\"http://www.zhihu.com/question/552567879?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">英国女王去世，我们见证了历史，有生之年你最想见证的历史是什么?</a><br>\n","link":"http://www.zhihu.com/question/554342210/answer/2680313149?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"奔放的优雅：国标舞入坑指南","date":"2022-09-19 08:06:33","description":"无论是现在小学阶段的素质教育还是大学阶段的体育课，总能看见「国标舞」的出现。可是这个「国标舞」究竟是什么？<a href=\"https://sspai.com/post/75746\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75746"},{"title":"Stream Deck 太贵了？触屏音箱也能成为你的直播助手","date":"2022-09-19 06:31:44","description":"前几天看到时间线上latter21有晒Elgato的StreamDeck，感觉很炫酷自定义程度也很高就想买一个。我一查价格居然要一千多一个，太贵了买不起。然后我又看到「爱运动的数码君」有将小爱触屏音箱 ...<a href=\"https://sspai.com/post/75789\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75789"},{"title":"本月玩什么 | 斯普拉遁 3、最后生还者 第一部、NBA 2K23、FIFA 23","date":"2022-09-19 03:30:00","description":"什么游戏五年不开张、开张吃五年？<a href=\"https://sspai.com/post/75766\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75766"},{"title":"如何看待 Adobe 以 200 亿美元收购 Figma？","date":"2022-09-19 02:37:29","description":"\n<p data-pid=\"qbJaifZ-\">先讲故事：Sketch 在 2012 年 5 月的第二个大版本在设计界掀起波澜的时候，刚刚通过 KPCB Engineering Fellow 项目加入 Flipboard 的 Dylan Field 正忙着和 Flipboard 的设计师们打造 Flipboard 2.0 版本，于此同时，他在布朗大学的 TA（教学助教）Evan Wallace 一直在说服他应该在浏览器里做一个 Photoshop，但这个想法对于一个正常人而言第一反应都是「你别闹了，这怎么可能」，对于当时刚刚 20 岁的 Dylan Field 也不例外，毕竟 Web 和浏览器就象征着不可靠，更别提当时还在让无数前端工程师投入大量精力的 IE 6 上了，于是这个想法就被搁置了下来。但随着 Dylan Field 在 Flipboard 工作过程中他发现：设计师和工程师们的共享文件和协作的流程太糟糕了，Evan 之前的想法又重新被拿了起来，他们开始研究一个课题：在浏览器里做一个 Photoshop 是不是真的不可能？</p>\n<p data-pid=\"4lMoTcGa\">在这个过程中他们发现 Photoshop 的用例实在太多了，想要都完成会把整个事情搞的无比复杂，于是他们决定简化整个想法，不做一个完整的 Photoshop 而是做一个浏览器中的 Fireworks，当时在他们的工作流中 Fireworks 和 Photoshop 一样，性能极差，各种崩溃。在简化想法写了一个 WebGL Demo 验证后，发现这件事似乎变的可行了起来。</p>\n<p data-pid=\"yccc6YZD\">于是他们决定从 Flipboard 离开，一起打造自己的事业。那年 Dylan 不到 20 岁，他们申请了 Thiel Fellowship 项目，希望能够获得 10W 美金的资金，虽然代价是 2 年内不能重返学校。任何一个正常的父母都不会支持这件事，他们也不例外，Dylan 的家人带他出去玩、吃东西等等希望他能忘掉这个事早点回去上学，但当 Dylan 从 500 名申请中晋级到 40 人需要去旧金山当面演讲的时候，原本反对的父母也变得兴奋起来，最终 Thiel Fellowship 项目副主席 Gibson 被他们打动，成为获胜者并获得了 10W 美金的启动资金，并在 Sketch 2.0 发布 3 个月后全身心的投入到了自己的项目中。</p>\n<p data-pid=\"LzqYiNJ5\">可以想象，在浏览器里做一个这东西显然有着浩大的工作量，并且有多如牛毛的细节需要处理，用 Evan Wallace 的话来说就是「我们要在浏览器里做一个浏览器」，也正式因为如此，他们从 2012 年 8 月开始全职写码，直到 2014 年春天才开放测试，足足搞了 2 年多，幸好中间有一轮来自 Index Ventures $380W 的种子轮融资续命。</p>\n<p data-pid=\"jQztsaj3\">Dylan 对 Index Ventures 描述的故事也非常简单和清晰，他希望 Figma 是一个通用工具，不论是业余爱好者还是专业人士都可以使用，同时 Figma 应该：</p>\n<ul>\n<li data-pid=\"ouwgXimM\">Accessible：Free if working in public、Intuitive</li>\n<li data-pid=\"VkKyy0iO\">Connected：Github for a creatives、Collaboration\\feedback、Community</li>\n<li data-pid=\"zZ8EoYKJ\">Education：Recipes、Mentorship</li>\n</ul>\n<p><img src=\"https://picx.zhimg.com/v2-50f7538023f3cb26bece7de1194032e6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"460\" data-watermark=\"original\" data-original-src=\"v2-50f7538023f3cb26bece7de1194032e6\" data-watermark-src=\"v2-d58d68014ae63d3389417956f4299f2d\" data-private-watermark-src=\"v2-953fb680ab5358f69df22cf6515fd8f8\"></p>\n<p data-pid=\"cHJLCKk8\">故事讲完，在我的理解里，一个产品想要更快的成功，最好能满足几个条件：</p>\n<ol>\n<li data-pid=\"MPYauIaX\">\n<b>老产品在某个细分领域不太行</b>。从 Figma 的例子来看，UI 设计师的背景促使了他们发现了 Photoshop 在用户界面设计领域下的问题以及性能问题。</li>\n<li data-pid=\"Qk3KqxH4\">\n<b>有新技术正在快速发展</b>。过去设计工作只能是原生应用才能做，但浏览器以及相关技术的发展使的「开箱即用」不再是不可能的事情。</li>\n<li data-pid=\"aX5-ohGX\">\n<b>用户群体在发生变化</b>。产品开发是一个团队协作过程，几乎所有人的产出物都有上下游，但他们的工具流几乎都是割裂的。</li>\n</ol>\n<p data-pid=\"yDqUWF_n\">Sketch 的诞生命中了第一点，解决了所有用户界面设计师的问题，走的是「专用工具」路线。在这里可以看出 Figma 和 Sketch 的分歧：设计是设计师自己的事么？协作是否重要？以及到底是「和所有利益相关方协作」还是「和其他设计者协作」，Sketch 选择的是仅和设计者协作，他把其他「利益相关方」交给了其他产品解决；而 Figma 第一天就认为协作非常重要且应该针对所有利益相关方，这导致了基本产品思路的变化，同时没有什么是比浏览器更好的协作平台：每个人的电脑上都有。这样就可以理解为什么在有 Sketch 的情况下 Figma 还可以在设计工具领域分一杯羹：<b>产品设计是一个团队作业，需要大量的工具互相配合才能高质量完成，这个配合过程带来的摩擦和管理成本逐渐升高；设计工具产出物的用户并非设计师，他们在设计过程中的体验欠佳；随着浏览器技术的发展和网络质量的提升，让跨平台低成本协作成为可能</b>。上述三个原因互相影响，导致 Sketch 的竞争力下降，Figma 的机会到来。</p>\n<p data-pid=\"UPJLynDG\">Benedict Evans 提出一个有趣的想法：「Web 不如原生」可能成为下一个「GUI 不如命令行」。过去这些说法确实是铁律，Facebook 也用实际行动证明了原生应用就是好，但现在这些铁律似乎都在被打破，尤其在不同的领域中，对于需求和要解决问题的差异会导致选择不同的基础设施，而这又会带来完全不同的使用体验，进而带来差异化的竞争优势。未来会有什么类似 GUI &amp; 命令行、Web &amp; 原生之争或者选择？服务器 &amp; 区块链？</p>\n<h2>关于收购</h2>\n<p data-pid=\"by-PN1C4\">这次收购似乎是历史上<b>第一高的私人公司收购</b>（第二是 Facebook 190 亿美元收购 WhatsApp）和<b>第三高的订阅产品公司</b>收购（前两个分别是 Salesforce  277 亿美元收购 Slack、微软 262 亿美元收购 LinkedIn）。Figma 的 ARR 为 4 亿美金，Adobe 付出了 50 倍的收入倍数，作为对比，Salesforce 收购 Slack 时只付出了 26 倍。Adobe 的现金储备不到 60 亿美元，为了完成这项交易 Adobe 还得借钱，虽然 Figma 在一个细分市场里抢走了 Adobe 不少份额，但投资者还是觉得这个价格太高了（Zoom 才 230 亿美元），因此在宣布收购之后 Adobe 股价跌了 20%。如果 Figma 和 Adobe XD、Photoshop 类比值 200 亿，那么 Airtable 和 Excel 比是不是便宜了（现在 110 亿美元）？Google Docs 相比 Word 应该估值多少？Notion 呢？</p>\n<p data-pid=\"MLOCtiIj\">对于 Figma 的投资者来说赢麻了，种子轮投资者 Index Ventures 十年内获得了 30~90 倍的回报、A 轮投资者 Greylock 拥有 13% 的股份（价值 26 亿美元）、B 轮投资者 Kleiner Perkins 拥有 10.5% 的股份（价值 21 亿美元）、C 轮投资者红杉拥有 6% 的股份（价值 12 亿美元，3 年 12 倍）、D 轮投资者 A16Z 拥有 1%~2% 的股份（价值数亿美元），有人统计了这几轮投资者的回报情况。</p>\n<p><img src=\"https://picx.zhimg.com/v2-ca80e2806a92c8afb5c85df04ae59633_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"705\" data-rawheight=\"508\" data-watermark=\"original\" data-original-src=\"v2-ca80e2806a92c8afb5c85df04ae59633\" data-watermark-src=\"v2-dc3ca3864c1d746040512bd7d1f10fb1\" data-private-watermark-src=\"v2-c526d85ecf47dd846e51c75aa3a4b96f\"></p>\n<p data-pid=\"-KAnWzPO\">不过对于这次收购，用户们（设计领域）几乎一致表示反对这门亲事，主要原因有二：</p>\n<ol>\n<li data-pid=\"XYyCc3vA\">Figma 作为屠龙者，怎么可以和龙一起过日子？</li>\n<li data-pid=\"kj7-JHzS\">Adobe 作为收购杀手，历史上买了很多好产品最终都被搞死了（Dreamweaver、Fireworks），Figma 也不会例外。</li>\n</ol>\n<p data-pid=\"mTz8vy_A\">同时早年间 CEO 的发言也被拿出来鞭打。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-04f74fdecb2980c5a3cef596e8aae268_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"701\" data-rawheight=\"324\" data-watermark=\"original\" data-original-src=\"v2-04f74fdecb2980c5a3cef596e8aae268\" data-watermark-src=\"v2-ea0e67c78da443e583f0ea7e1e2a9b4f\" data-private-watermark-src=\"v2-2a3e3bb761ad13e122d532b3f878a0df\"></p>\n<p data-pid=\"xhpCUPKJ\">情感上确实也可以理解，毕竟大家希望看到的总是挑战者击败大哥荣登王座，而不是最终被大哥招安的戏码，这里可以讲两个故事：</p>\n<p data-pid=\"YEY4IN6P\">Slack 在 2015 年收购了一家叫做 Screenhero 的视频协作产品，它可以让会议方对彼此的屏幕进行交互，后来 Screenhero 产品被终止，原老板开始负责将 Screenhero 的功能迁移进 Slack 的会议功能中，但性能非常糟糕远不如 Screenhero，并且怎么优化都搞不定，后来这个功能被 Slack 移除。创始人 Jahanzeb Sherwani 表示：将一个产品嵌入到另一个产品里远比想象中复杂的多，而且会有更高的开发成本和更差的性能，这样的产品最好独立运作。后来 Jahanzeb Sherwani 离开了 Slack，重新做了一个产品叫做 <a href=\"http://link.zhihu.com/?target=https%3A//pop.com/home\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Screen（现在叫 POP）</a>，和 Screenhero 原有的能力差不多。</p>\n<p data-pid=\"JLaLlHMc\">另一个故事来自 LiveLoop，他们是帮助 Office 系列套件实现实时协作的产品，在 2015 年被微软收购并且让团队将这个能力带到 Office 产品中，说起来很容易，但实际做起来有若干大坑：文件格式以及生态系统、遗留客户端以及向后兼容、多人协作的纯技术挑战、技术债等。这些问题会让整件事非常难以实现，事实上微软投入了巨额的资源和人力，到了今天 Office 的实时体验相比 2015 年的 Office 好了很多，但依然远不如 Google 套件。</p>\n<p data-pid=\"yZYsWpos\">Adobe 收购 Figma 后保持独立运行是几乎唯一正确的选择，一旦试图做任何过分的融合会带来非常复杂的问题乃至于将整个公司拖入泥潭，把市场空间让给其他竞争者，花了这么多钱总不是为了搞死人家吧。Figma 干了差不多十年了，各路利益相关人士有退出的需求也很合理，在很多人看来真正的成功只能是独立 IPO 退出才能算，被收购都是「怂了」。我肯定不这么看，一个健康的生态应该是有多种退出通道，而不是非得独立做大做强，被收购可以更早的实现退出获得更多资源和 credit，如果愿意的话还可以开启下一段创业或者反哺其他更小的创业者，而不是只有 IPO 一条路，所以对于我而言，Figma 能独立上市最好，但能被收购也不坏，况且创始人也没跑路，看他接下来除了好好做业务之外是会继续沉迷 Web3 还是关心关心设计界的其他小团队。</p>\n<p data-pid=\"0ncUSaNu\">当然 FTC 还没说话，也就意味着这事还没结，需要让子弹再飞一会。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/553789736/answer/2676053072?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/553789736/answer/2676053072?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">78 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/553794499?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待 Adobe  以 200 亿美金收购  Figma？</a><br><a href=\"http://www.zhihu.com/question/553792317?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">Adobe 宣布约 200 亿美元收购 Figma ，从商业角度如何解读此举？</a><br>\n","link":"http://www.zhihu.com/question/553789736/answer/2676053072?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报：EVGA 终止与英伟达合作，英特尔将弃用奔腾和赛扬品牌等","date":"2022-09-19 00:47:04","description":"你可能错过的新鲜事EVGA终止与英伟达的合作并退出显卡市场9月17日，知名显卡厂商EVGA的CEOAndrewHan露面YouTube频道GamersNexus，宣布正式终止与英伟达的合作关系，不会生 ...<a href=\"https://sspai.com/post/75782\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75782"},{"title":"AI 绘图可以辅助游戏创作么，未来对游戏行业有哪些影响？","date":"2022-09-18 08:24:58","description":"\n<p data-pid=\"-x6ApuhP\">谢邀~最近关于AI绘图的讨论有许多，可能是由于美国科罗拉多州博览会艺术比赛中，AI创作的《太空歌剧院》获得了大奖，以及戛纳电影短片节最佳短片由AI创作的《乌鸦》获得。<br><br>激进的人认为AI必将取代人类艺术家，这意味着人类最神圣不可冒犯的领域已经接近陷落，另一部分人认为AI只不过是另一个工具，其跨时代意义不会超过照相机的发明，而照相机显然没有消解艺术家存在的价值，反而提升了艺术家的创造力。<br><br>不过，这些关于艺术存在意义的话题过于宏大和遥远，以至于对现实生活和工作没有什么指导意义。实践中，我看到一些美术已经使用AI来进行譬如气氛，纹理之类的生成，节省了繁冗的细化工作量——这是从基础的工具角度进行的应用。<br><br>在目前的国内业界，AI鲜有能够走入项目决策者（或有最终话语权的创作者）的视野中——譬如电影导演，游戏制作人，时装主理人等。我猜想，“老板”们很可能接收新事物的兴趣和能力已经大不如前，他们也许交代手下的助理大致看看，但总体来说“老板”往往是傲慢的。<br><br>但是，一个项目的美术风格和品质，很大程度上要取决于项目决策者，而非项目的美术执行者。我们见过许多出色的艺术家，个人作品令人叫绝，但工作中服务于平庸的项目，这些艺术家无法突破上层决策者的局限性，只能贡献自己熟练的基础技能（这可能是他们能力的30%不到）。以游戏行业为例，除非美术自己成为项目的高层合伙人，否则这一现状在目前的中国游戏行业中很难改变——而这个先决条件并不容易。<br><br>那么现阶段的AI美术真正的价值在哪里呢？我认为，它很可能对美术需求发起方的意义，超过了对美术执行方的意义。<br><br>——AI能帮助决策者（或甲方）成为更好的决策者（甲方），至少对游戏来说是如此。<br><br>在尚未立项前，AI能够帮助决策者明确自己的愿景和创作意图，譬如题材，风格，品类等。制作人完全可以把自己“一拍脑袋”想出来的主意交给AI，想加什么关键词就加什么，然后看看生成的结果是不是自己真的想要的。在浮现出最终完全成熟的方向之前，制作人可以反复测试，因为此时他需要的并不是精确，而是“感觉”——这个词说出来时，往往是他手下美术创作者们的噩梦，但是AI显然可以不知疲倦地满足任何无理的要求。<br><br>从另一个角度来说，AI也许还可以带给那些保守主义的制作人们在立项时拥有更多的冒险精神。绝大多数国内商业项目的制作人会直接放弃前期对项目风格的把控（这是创作者们最珍视的权力，但往往直接就被他们放弃了），而直接选定一个已经成功的产品进行“参考”。<br><br>在项目中，AI可以让制作人在与美术对接时尽可能清晰地表达自己的需求。在工作过程中，最大的成本和时间损耗往往并不来源于美术自身（美术加班毫无意义），而来源于制作人无法明确地表达自己的需求，以至于留下了大量留待美术自行猜测，捉摸的空白，而这些部分提交的时候，制作人又感觉“不对味儿”，导致了美术大量的反复乃至返工，同时制作人还往往会自我感动于自己严苛要求的“工匠精神”。<br><br>传统的需求文档，草图，照片，或者照片p图，能够提供一些大致参考方向。但是远比不上详细了描述了气氛，光照，风格和质感的AI作图，再加上一层自我筛选，如果还能在在此基础上加上p图和文档描述，则可以把沟通的误解降低到最低。<br><br>如果在前面两步中，需求方用AI进行了很好的铺垫，提出了明确的愿景，统一了“我们究竟要做什么”的认知。那么我相信在项目进行时，美术的创作热情同样也会被激发。AI此时会体现出其优势的一面——揭示尽可能多的可能性，而这些可能性背后又具有完整的统一性。AI的缺陷同样也会放大——细节繁复但缺乏合理的取舍，气氛如实再现但缺乏人类能够共情的感染力——而这，正是人类艺术家擅长处理的方面。<br><br>在与公司美术同事讨论时，我们提出了“AI更像是水墨画中的水“的说法。中国传统山水画中，画家往往用大幅的泼墨方式快速地填充画面，山水的大致形态会在水墨的流动，与宣纸的晕染，笔触之间的渗透中浮现。此时，画面事实上是由艺术家的引导（“prompt”）与水的物理特性（“AI”）共同构成的。接下来，艺术家会用较干的笔触顺着已经由水塑造而成的大形态上继续发挥细化——这里面的关键在于，艺术家事先并不知道水会如何具体流动，他无法像油画一样精确地控制画面，只能大体控制，但水形成的趋势反过来会给艺术家以灵感，使得他抓住那种偶然性，并用相对明确的笔触将其确定下来。<br><br>甲方理清项目方向，提出明确需求，同时也给美术启发，像水墨画的水一样。这种“在明确边界内的丰富可能性”，应该是一种良性的创作方式。<br><br>为了测试这种工作方式，我跟两位美术同事花了很短的时间，创作了一系列的某个想象中的新IP的插画，其中许多图面都并不是我们本来就想制作的，而是AI随机生成后带来了某种启发，然后用更明确的p图把那个形象和气氛确定下来而成。<br><br>这组图并不是纯粹由AI生成，许多图结合了多张AI生成的结果，也有一些结构进行了手工补绘。我编写了一个完整的背景故事，并生成，筛选了所有图片，两位同事把它们处理，拼贴成了具有叙事意义和有趣设定的图。<br><br>这些图跟我们实际在研的《影之刃：断罪者》和《影之刃零》并没有什么关系，但是它蕴含的审美，风格却是一脉相承的，有时甚至更加奔放激进一些，正因如此，未来AI辅助一定会进入我们的正式项目流程中。<br><br>希望AI能够带来更多的可能性！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6425fb57ffdbe3214fe0e78cb2b99c49_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-6425fb57ffdbe3214fe0e78cb2b99c49\" data-watermark-src=\"v2-17bcde05b1bbdcefb0f70c244ce35f84\" data-private-watermark-src=\"v2-a19124aea9a0823ec667d862aa8dfd9a\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-b752e59e63f6508edd6df55d0fe4d43c_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-b752e59e63f6508edd6df55d0fe4d43c\" data-watermark-src=\"v2-07f9131bd27c51972ebdc0db1c31b513\" data-private-watermark-src=\"v2-20eee2fcb00dc934ea7eed7310ca56d3\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-7996bf157d799311d42fa6cfb8a33f43_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-7996bf157d799311d42fa6cfb8a33f43\" data-watermark-src=\"v2-da80c179bfd00db2c716da78c901c68b\" data-private-watermark-src=\"v2-65daec113091bc51bfa90ec1d4f14c36\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-aa0f8b976000aba95d0c0f7efcbc2ac4_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-aa0f8b976000aba95d0c0f7efcbc2ac4\" data-watermark-src=\"v2-79329d37463c648230a9b39e714aca85\" data-private-watermark-src=\"v2-fbc7c8c0e762577016824047183b390d\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-3147732e8fd2e7d4cb30bfa328c40106_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-3147732e8fd2e7d4cb30bfa328c40106\" data-watermark-src=\"v2-dd2bba6265027ef5c81ddbb3cfd10323\" data-private-watermark-src=\"v2-d02447b1e607db7754d9523a87bb3904\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-2adc1c2a144f40f90e977b3af052c05d_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-2adc1c2a144f40f90e977b3af052c05d\" data-watermark-src=\"v2-df8e66e327c3358ef2a082cf928e88ed\" data-private-watermark-src=\"v2-ae49fcc5129e2073531835f010a13adc\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c0cff062eed42ae00a72beacd65b690b_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-c0cff062eed42ae00a72beacd65b690b\" data-watermark-src=\"v2-b88f1be41ffb7f1c8e73539128fab377\" data-private-watermark-src=\"v2-5f2d92191dac28a9c86adc3a1acd23c4\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-888d4fc3ab3ff18d52edd799297e8fa3_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-888d4fc3ab3ff18d52edd799297e8fa3\" data-watermark-src=\"v2-788571fc2f68d75d6d8d0ae268627fe9\" data-private-watermark-src=\"v2-c79f7a048d694bf4a04c09886824f952\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-e525ec065e92d51d1493996591cc6648_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-e525ec065e92d51d1493996591cc6648\" data-watermark-src=\"v2-3baf99993bd598a1731a6905b6882625\" data-private-watermark-src=\"v2-dbfb5b429bf260f88abcdbe2f54c6faf\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-789be23911674b1eec238951b971cad3_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-789be23911674b1eec238951b971cad3\" data-watermark-src=\"v2-52a485418ecaeb2a66b82f78f7519ce7\" data-private-watermark-src=\"v2-a0062254b956edd50a9f3eee27938022\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-3498f8c23b593da6c58d2277feca78d7_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-3498f8c23b593da6c58d2277feca78d7\" data-watermark-src=\"v2-5dddd829c8f671d23b8e88bba83097c7\" data-private-watermark-src=\"v2-45d4e4153b02f0bee1d9066b7c159cd0\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-bb509b711d405407e83b0a1224c01766_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-bb509b711d405407e83b0a1224c01766\" data-watermark-src=\"v2-30e824d670325a87f33e019d28c90057\" data-private-watermark-src=\"v2-ea409f291649ccd3d52f28a18245f23f\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-6cc7428f5ab1471e71ca935caafb3c0c_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-6cc7428f5ab1471e71ca935caafb3c0c\" data-watermark-src=\"v2-a6e584bc2ccb1325ba1ea29a8593fca2\" data-private-watermark-src=\"v2-ee2ac6f189221e82119ac3113bc0d153\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-09198df62cd89448925c1d1b4b1a6258_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-09198df62cd89448925c1d1b4b1a6258\" data-watermark-src=\"v2-043bdd54f839f6ff1f2c16782b6a1558\" data-private-watermark-src=\"v2-b20795c799d3428718e3bc1367ec1b64\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-05662e821d47f5071da76934b93f2641_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-05662e821d47f5071da76934b93f2641\" data-watermark-src=\"v2-205c0fcd362c62f64ee28825d391a566\" data-private-watermark-src=\"v2-ba44638222ea37bfc1adb95801f7d845\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-873aea91cbf4bd65cf81b50e12ac8fd3_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-873aea91cbf4bd65cf81b50e12ac8fd3\" data-watermark-src=\"v2-6ade65bb6e2e895bf5a93e39f234c42c\" data-private-watermark-src=\"v2-2c050f1eb051d4a58c257103f88b2a53\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ec39397b15117b18003895d6999dba93_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-ec39397b15117b18003895d6999dba93\" data-watermark-src=\"v2-f2692fb765a0f59428247c6c6e8db409\" data-private-watermark-src=\"v2-326d3bee7b8537c0fa6c6e62c66bb944\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-95ff4d76d15ba66c264fa2e350aafee0_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1152\" data-watermark=\"watermark\" data-original-src=\"v2-95ff4d76d15ba66c264fa2e350aafee0\" data-watermark-src=\"v2-ee897aa95aee7fd6821ce5a200363df7\" data-private-watermark-src=\"v2-fe1a75ede9c39dbcfd85f798aed2b3d9\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/soulframe1985?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">SoulframEE</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/553504702/answer/2675777154?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">5 个回答，查看全部。</a><br>\n","link":"http://www.zhihu.com/question/553504702/answer/2675777154?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"iOS 16 锁屏小组件怎么玩？不妨试试这些 App","date":"2022-09-18 06:54:21","description":"越来越多 App 适配了锁定屏幕小组件，我为大家搜集并整理了一些实用或者有趣的 App，希望可以给已经升级到 iOS 16 的朋友们一些参考。<a href=\"https://sspai.com/post/75777\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75777"},{"title":"有哪些陪伴你度过漫长岁月的好物？丨「向美好生活提案」每周精选","date":"2022-09-18 03:28:49","description":"\n<p data-pid=\"_jsX6fDY\">「向美好生活提案」是 2022「知乎好物 100」的征集活动，我们用<a href=\"https://zhuanlan.zhihu.com/p/559587277\" class=\"internal\">上亿级流量、600000 元奖池</a>，向全体知友征集生活中，那些「好物」和「美好生活」的故事。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c405d46c8bb8da3b2af610ef2767d218_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1610\" data-rawheight=\"386\" class=\"origin_image zh-lightbox-thumb\" width=\"1610\" data-original=\"https://pic1.zhimg.com/v2-c405d46c8bb8da3b2af610ef2767d218_r.jpg\"></figure><p data-pid=\"kw3DHBr5\">在本周，我们征集到数千条「美好生活提案」，或硬核、或感性，字里行间都是对于美好生活的追求：</p>\n<p data-pid=\"MnjPOubW\"><a class=\"member_mention\" href=\"https://www.zhihu.com/people/c62ddddaf325374c1229de7fe4387de6\" data-hash=\"c62ddddaf325374c1229de7fe4387de6\" data-hovercard=\"p$b$c62ddddaf325374c1229de7fe4387de6\">@美式就好</a> 的<b>「拼图」</b>：当拼图成为习惯，生活就有了「实用主义以外的趣味儿」~</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4f984219ea4da665dde0184bc41a307f_b.jpg\" data-size=\"normal\" data-rawwidth=\"916\" data-rawheight=\"1072\" class=\"origin_image zh-lightbox-thumb\" width=\"916\" data-original=\"https://pic4.zhimg.com/v2-4f984219ea4da665dde0184bc41a307f_r.jpg\"><figcaption>▼ 点击查看全文</figcaption></figure><a href=\"https://www.zhihu.com/question/552402071/answer/2671869769\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-4e530ddcd5909660c2953452efdfeeba_qhd.jpg\" data-image-width=\"4032\" data-image-height=\"3024\" class=\"internal\">有哪些陪伴你度过漫长岁月的好物？</a><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"vCTjqbAD\"><a class=\"member_mention\" href=\"https://www.zhihu.com/people/5422cb0f2a1de89754be7301cded8444\" data-hash=\"5422cb0f2a1de89754be7301cded8444\" data-hovercard=\"p$b$5422cb0f2a1de89754be7301cded8444\">@大伟说</a> 的<b>「ThinkPad」</b>：陪伴我写下 30 万字，尤其在疫情期间，成为了我的精神食粮和生存依靠~</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0445ceeddd5f3ed3f83600d5323fd5cb_b.jpg\" data-size=\"normal\" data-rawwidth=\"1036\" data-rawheight=\"974\" class=\"origin_image zh-lightbox-thumb\" width=\"1036\" data-original=\"https://pic4.zhimg.com/v2-0445ceeddd5f3ed3f83600d5323fd5cb_r.jpg\"><figcaption>▼ 点击查看全文</figcaption></figure><a href=\"https://www.zhihu.com/question/552402482/answer/2672119721\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-deda4a30172a990fe3254b93c38f0925_qhd.jpg\" data-image-width=\"1706\" data-image-height=\"1280\" class=\"internal\">你认为哪件东西最能代表你的 2022 年？</a><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"aRv8z8sC\"><a class=\"member_mention\" href=\"https://www.zhihu.com/people/3b3511c643265fdf16c49055ce44565b\" data-hash=\"3b3511c643265fdf16c49055ce44565b\" data-hovercard=\"p$b$3b3511c643265fdf16c49055ce44565b\">@走饭</a> 的<b>「广西小吃」</b>等：作为广西人，分享了当地那些极具特色的食物：酸嘢、粉虫......每一道特色食物，都蕴含了深深的乡土情怀~</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ff39a09c4a598e917a2b2acdedef5be1_b.jpg\" data-size=\"normal\" data-rawwidth=\"1054\" data-rawheight=\"862\" class=\"origin_image zh-lightbox-thumb\" width=\"1054\" data-original=\"https://pic2.zhimg.com/v2-ff39a09c4a598e917a2b2acdedef5be1_r.jpg\"><figcaption>▼ 点击查看全文</figcaption></figure><a href=\"https://www.zhihu.com/question/553611224/answer/2674689094\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-29c2c843387e5ba08880e7883cdd588f_qhd.jpg\" data-image-width=\"4032\" data-image-height=\"3024\" class=\"internal\">你老家有哪些「在当地小有名气」的食物？</a><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"5IoZsive\"><a class=\"member_mention\" href=\"https://www.zhihu.com/people/859b655b78963d3ee13f1153d13ec78d\" data-hash=\"859b655b78963d3ee13f1153d13ec78d\" data-hovercard=\"p$b$859b655b78963d3ee13f1153d13ec78d\">@鱼头妈咪Zoe</a> 的「<b>孕期好物清单」：</b>作为二胎妈妈，回顾亲身经历，分享了一份从孕期到临产待产期再到宝宝出生后，所需好物的清单~</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4c225cdc904305d835ab8635bd6283c7_b.jpg\" data-size=\"normal\" data-rawwidth=\"1082\" data-rawheight=\"1288\" class=\"origin_image zh-lightbox-thumb\" width=\"1082\" data-original=\"https://pic4.zhimg.com/v2-4c225cdc904305d835ab8635bd6283c7_r.jpg\"><figcaption>▼ 点击查看全文</figcaption></figure><a href=\"https://www.zhihu.com/question/524575343/answer/2673972938\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-e3797f70d75ad803fa83f9765dcfe6fd_200x0.jpg\" data-image-width=\"720\" data-image-height=\"960\" class=\"internal\">新手爸妈待产期需要准备什么，大家都会囤哪些东西？</a><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"gTVdl_sv\"><a class=\"member_mention\" href=\"https://www.zhihu.com/people/69e3b5020b6ee508ceaa8446ac9ad5d4\" data-hash=\"69e3b5020b6ee508ceaa8446ac9ad5d4\" data-hovercard=\"p$b$69e3b5020b6ee508ceaa8446ac9ad5d4\">@leemoispace</a> 的<b>「公路车」</b>：分享了自己的「公路车小散文」，硬核解读公路车的背后，是自己对于理想生活方式的追求~</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b10be697779dd12cf15fbaf1cae88164_b.jpg\" data-size=\"normal\" data-rawwidth=\"1078\" data-rawheight=\"1042\" class=\"origin_image zh-lightbox-thumb\" width=\"1078\" data-original=\"https://pic1.zhimg.com/v2-b10be697779dd12cf15fbaf1cae88164_r.jpg\"><figcaption>▼ 点击查看全文</figcaption></figure><a href=\"https://www.zhihu.com/question/553492713/answer/2673086091\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f5ef37613b33af6c50626afec8492dab_qhd.jpg\" data-image-width=\"1702\" data-image-height=\"1276\" class=\"internal\">公路车车架、套件、轮组，这三个哪个更重要？</a><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"Zs-13P1C\"><a class=\"member_mention\" href=\"https://www.zhihu.com/people/1909b15355bd5951e92b5464c74bfc4c\" data-hash=\"1909b15355bd5951e92b5464c74bfc4c\" data-hovercard=\"p$b$1909b15355bd5951e92b5464c74bfc4c\">@陶叔淘世界</a> 的<b>「穿搭套装」</b>：谈了自己对于「时髦知识分子」穿搭风的理解，是一种穿搭，更是一种生活态度~</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-616fd951f8b1a0e6e36b73c6095072e3_b.jpg\" data-size=\"normal\" data-rawwidth=\"1074\" data-rawheight=\"1392\" class=\"origin_image zh-lightbox-thumb\" width=\"1074\" data-original=\"https://pic4.zhimg.com/v2-616fd951f8b1a0e6e36b73c6095072e3_r.jpg\"><figcaption>▼ 点击查看全文</figcaption></figure><a href=\"https://www.zhihu.com/question/536179535/answer/2669519597\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-8a91d9769ebb459347f8c11d2901f53b_200x0.jpg\" data-image-width=\"474\" data-image-height=\"734\" class=\"internal\">什么是「时髦知识分子」风穿搭？你将会如何诠释这种风格？</a><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"eG3bv9ZC\"><a class=\"member_mention\" href=\"https://www.zhihu.com/people/c66f0bfc3fb96a2b827e1ec21b538f04\" data-hash=\"c66f0bfc3fb96a2b827e1ec21b538f04\" data-hovercard=\"p$b$c66f0bfc3fb96a2b827e1ec21b538f04\">@你察妹呀</a> 的<b>「猫窝」</b>：用亲「猫」经历，教你挑选出小猫咪真正喜欢的舒适小窝。用心生活的人，对猫咪也同样用心~</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b00c2cc1fcc2b6b8d1bbe7fe622f6bf2_b.jpg\" data-size=\"normal\" data-rawwidth=\"1068\" data-rawheight=\"1282\" class=\"origin_image zh-lightbox-thumb\" width=\"1068\" data-original=\"https://pic3.zhimg.com/v2-b00c2cc1fcc2b6b8d1bbe7fe622f6bf2_r.jpg\"><figcaption>▼ 点击查看全文</figcaption></figure><a href=\"https://www.zhihu.com/question/68774577/answer/2673951123\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-6f78cb622b9c68f0cc400886e4a73245_l.jpg\" data-image-width=\"3024\" data-image-height=\"3024\" class=\"internal\">猫咪喜欢怎么样的猫窝？</a><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"vi58bcP0\"><a class=\"member_mention\" href=\"https://www.zhihu.com/people/8607489925ba66599b06578133263d91\" data-hash=\"8607489925ba66599b06578133263d91\" data-hovercard=\"p$b$8607489925ba66599b06578133263d91\">@林林金金</a> 的<b>「炸土豆」</b>：对于在海外，独处异乡的人来说，寻求「乡味」的方式，或许只是去寻找一碗和「妈妈味道」接近的炸土豆~</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4a64d459e07dedfe713d791425ec7211_b.jpg\" data-size=\"normal\" data-rawwidth=\"1082\" data-rawheight=\"1288\" class=\"origin_image zh-lightbox-thumb\" width=\"1082\" data-original=\"https://pic2.zhimg.com/v2-4a64d459e07dedfe713d791425ec7211_r.jpg\"><figcaption>▼ 点击查看全文</figcaption></figure><a href=\"https://www.zhihu.com/question/553402485/answer/2673321699\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-65581508ee81367be7a917a88d835528_200x0.jpg\" data-image-width=\"3456\" data-image-height=\"4608\" class=\"internal\">在异乡吃到的哪种美食，曾让你一瞬间想给妈妈打一通电话？</a><p data-pid=\"Z3eG77_8\">❤️除了上述创作者，还有 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/b024c781bd8ba0a317e9e347c1fab0fd\" data-hash=\"b024c781bd8ba0a317e9e347c1fab0fd\" data-hovercard=\"p$b$b024c781bd8ba0a317e9e347c1fab0fd\">@貓太年</a> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/b3c0f759cdc6321390c5e29de589a13d\" data-hash=\"b3c0f759cdc6321390c5e29de589a13d\" data-hovercard=\"p$b$b3c0f759cdc6321390c5e29de589a13d\">@塔拉大大</a> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/1eee20e30a1e90fab46539efc12851e7\" data-hash=\"1eee20e30a1e90fab46539efc12851e7\" data-hovercard=\"p$b$1eee20e30a1e90fab46539efc12851e7\">@冰寒</a> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/1909b15355bd5951e92b5464c74bfc4c\" data-hash=\"1909b15355bd5951e92b5464c74bfc4c\" data-hovercard=\"p$b$1909b15355bd5951e92b5464c74bfc4c\">@陶叔淘世界</a> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/248a7b7a51ccf2858aa08bc0b30797ed\" data-hash=\"248a7b7a51ccf2858aa08bc0b30797ed\" data-hovercard=\"p$b$248a7b7a51ccf2858aa08bc0b30797ed\">@冶一禾</a> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/84450a3c2b9d593b3425539325c50db5\" data-hash=\"84450a3c2b9d593b3425539325c50db5\" data-hovercard=\"p$b$84450a3c2b9d593b3425539325c50db5\">@时雨</a> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/29a0fee8c0858d042a2908be64a3be4d\" data-hash=\"29a0fee8c0858d042a2908be64a3be4d\" data-hovercard=\"p$b$29a0fee8c0858d042a2908be64a3be4d\">@机汤TV</a> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/8fa1fb8a53313903db8943cfb17fa905\" data-hash=\"8fa1fb8a53313903db8943cfb17fa905\" data-hovercard=\"p$b$8fa1fb8a53313903db8943cfb17fa905\">@顾拜蛋蛋</a> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/a4bdbd8b3baa772a8eb9e8a7c3dfe51e\" data-hash=\"a4bdbd8b3baa772a8eb9e8a7c3dfe51e\" data-hovercard=\"p$b$a4bdbd8b3baa772a8eb9e8a7c3dfe51e\">@一个山药蛋</a> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/71816c82b470008fc1e8099707763876\" data-hash=\"71816c82b470008fc1e8099707763876\" data-hovercard=\"p$b$71816c82b470008fc1e8099707763876\">@亦心</a> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/91bb0b0ada11947a98ace5b408efbd3c\" data-hash=\"91bb0b0ada11947a98ace5b408efbd3c\" data-hovercard=\"p$b$91bb0b0ada11947a98ace5b408efbd3c\">@陈怼怼</a> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/230fdff74dda41a31e4f19f0a9cd1ddc\" data-hash=\"230fdff74dda41a31e4f19f0a9cd1ddc\" data-hovercard=\"p$b$230fdff74dda41a31e4f19f0a9cd1ddc\">@江博士爱化妆</a> 等创作者同样分享了精彩的「美好生活提案」！</p>\n<p data-pid=\"yAnTvy5d\">另外，「向美好生活提案」活动还在持续进行中:</p>\n<p data-pid=\"CgOY2sIn\">活动传送门&gt;&gt;</p>\n<a href=\"https://www.zhihu.com/xen/market/ecom-page/1547295914120962048\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-735880ce57907322230acc1b69ad9b5d_l.jpg\" data-image-width=\"750\" data-image-height=\"700\" class=\"internal\">向美好生活提案 - 寻找美好生活提案人</a><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"tovfe0jJ\">详细规则&gt;&gt;</p>\n<a href=\"https://zhuanlan.zhihu.com/p/559587277\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-c405d46c8bb8da3b2af610ef2767d218_qhd.jpg\" data-image-width=\"1610\" data-image-height=\"386\" class=\"internal\">知乎好物 100：向美好生活提案丨邀你成为 2022「知乎好物 100」提案人</a><p data-pid=\"bIQOX2P2\">期待大家的加入，成为 2022「知乎好物 100」提案人，分享你的美好生活提案！</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"RLDups_s\"><i>*「每周精选」是活动中的优秀回答展示，但并不代表最终评选结果，活动最终解释权归知乎所有</i></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhi-hu-gao-zan-hao-wu-100?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">知乎好物 100</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/565129816?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"[送码]《白描》推出 Windows 版，朝「最佳中文 OCR 识别工具」更进一步","date":"2022-09-18 03:03:49","description":"白描是一款简单好用的 OCR 文字识别与扫描工具，主要功能有提取图片中的文字、图片表格转 Excel、公式识别、文件扫描、身份证扫描、合成 PDF 等。现在，白描除了可以在手机上和网页上用，Windows 版本也正式发布。<a href=\"https://sspai.com/post/75705\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75705"},{"title":"更新 watchOS 9 正式版后，这些功能值得一试","date":"2022-09-17 07:00:00","description":"经过多个版本的测试，watchOS9的正式版也于9月13日和AppleWatch用户正式见面。只要你的手表是AppleWatchSE、AppleWatchSeries4及更新的表款，那么就可以通过运行 ...<a href=\"https://sspai.com/post/75744\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75744"},{"title":"如何评价 7 月新番动画《契约之吻》第八集？","date":"2022-09-17 04:25:58","description":"\n<p data-pid=\"ot2jiWHD\">久等了，这里是本周的侦探已死（笑）</p>\n<p><img src=\"https://pica.zhimg.com/v2-c8a5e2181202ce2d5f0f8650e047decf_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"324\" data-watermark=\"original\" data-original-src=\"v2-c8a5e2181202ce2d5f0f8650e047decf\" data-watermark-src=\"v2-22ead0519407a7f3f443fb4056946037\" data-private-watermark-src=\"v2-bc5436f60a9f777226e783b5190a0c94\"></p>\n<p data-pid=\"_EeRtMsN\">上图为贝隆市地图.能一眼看出的港口位置在东部/南部</p>\n<blockquote data-pid=\"0WsqzwpM\">莎朗：那么我给你一点提示。纵火犯通常都在火灾现场附近。想烧光整座城市的人，不一定会出现在每个火灾现场。但是，一间一间纵火烧房子的人，本人肯定会在现场。因为对那个人来说，纵火的地点才是最重要的<br>修：地点？这是什么意思？</blockquote>\n<p data-pid=\"lUy8K-a4\">莎朗既然提到了地点，那么以防万一我们把现有涉及到地点的内容列出来：</p>\n<p><img src=\"https://picx.zhimg.com/v2-0d7239f56c6ebbcf4620be22c13f190e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4536\" data-rawheight=\"1011\" data-watermark=\"original\" data-original-src=\"v2-0d7239f56c6ebbcf4620be22c13f190e\" data-watermark-src=\"v2-be950fad9a695cc5ab93b0ed55b60714\" data-private-watermark-src=\"v2-b0a652aa8ffddad9e44c983022afb3bf\"></p>\n<p data-pid=\"hnSX2S40\">下面是涉及到地点的其他剧情</p>\n<blockquote data-pid=\"JbG-9MMk\">三上 花村纯也，根据两人的证词，再用脸部认证系统搜索，出来的结果就是他。<br>摩根 我刚才看过资料了，他主要在西区活动，是个不红的牛郎吧？这种人竟然跟恶魔联手？<br>三上 恶魔附身者仍然有很多谜团。总之先朝这条线索进行调查</blockquote>\n<p><br></p>\n<blockquote data-pid=\"8-NaAdaO\">三上 昨晚因恶魔灾害逮捕归案的嫌犯，嫌犯名叫托尼.罗西。是犯罪组织“奥迦斯”的一员<br>木更 我记得这个组织是盘踞在市中心，意大利裔住宅区的黑手党</blockquote>\n<p data-pid=\"IMzHnqS3\">补充：第一话的酒店在城市南边的小岛</p>\n<p><img src=\"https://pic1.zhimg.com/v2-02ff270543c851bbde215c9870e6a849_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1430\" data-rawheight=\"834\" data-watermark=\"original\" data-original-src=\"v2-02ff270543c851bbde215c9870e6a849\" data-watermark-src=\"v2-d2b3d896792cc3271dae7c6ebe40f779\" data-private-watermark-src=\"v2-514b0a572843c193046ae4b86178bb91\"></p>\n<hr>\n<p data-pid=\"cUIHdrbz\">那么接下来是剧情进度</p>\n<p data-pid=\"M8cZUM8P\">蓝字是前期内容，红字是更新部分</p>\n<h2>主线：</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-7b5ef1db3a1f59441cab112aaf0958c6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3402\" data-rawheight=\"3458\" data-watermark=\"original\" data-original-src=\"v2-7b5ef1db3a1f59441cab112aaf0958c6\" data-watermark-src=\"v2-276279672e80b89c93df4fa397fe7e51\" data-private-watermark-src=\"v2-830d8da77e6b3bbd5ce10827a8ad31b2\"></p>\n<p data-pid=\"VmmZ8dSN\">就像上话我们说的，故事主线在往摩根身上引。摩根这颗熟透的果子熟了</p>\n<p data-pid=\"3eIsG5n6\">之前关于警察厅长官的描写只有四五行内容。随着这一话的并线，这一条线瞬间也变得丰满起来了。</p>\n<p data-pid=\"J2N0ow1W\">欢迎一下米海尔同学加入主角组。按手游最新放出的设定，玩家位置在星天教会这一侧。此处还有道道。</p>\n<p data-pid=\"kn2hQRot\">进行调查的绫乃这条线明面上暂时跟主线稍稍拉开了一点距离。这几集几个关键剧情点绫乃都不在场。</p>\n<p data-pid=\"WntdsQRN\">副市长姐姐们被米海尔摘出去了，可是与修的矛盾冲突依然还在。同理夕桐母女被修和观众摘出去了，侦探的怀疑还在。</p>\n<p data-pid=\"eCbzczOS\">此处木更加私货的行为，如果不是私货而是真的，这段戏两处洗白都能翻转。那这戏剧张力拉满，我会非常嗨（笑）</p>\n<h2>真恶魔代理人：</h2>\n<p><img src=\"https://pic1.zhimg.com/v2-c0d0cef44b3317f44c8465e63a03069e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"1512\" data-watermark=\"original\" data-original-src=\"v2-c0d0cef44b3317f44c8465e63a03069e\" data-watermark-src=\"v2-946e23a535ffc4f33824828a78cc669b\" data-private-watermark-src=\"v2-87e9c0ff8c2307f9c0ebd0d5b9fe87f2\"></p>\n<h2>欧尔贡矿</h2>\n<p><img src=\"https://pic1.zhimg.com/v2-e00699b0ec173637ffe26e72834136b2_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2551\" data-rawheight=\"1876\" data-watermark=\"original\" data-original-src=\"v2-e00699b0ec173637ffe26e72834136b2\" data-watermark-src=\"v2-33b598db08e2b655a5374a2a17b71b1c\" data-private-watermark-src=\"v2-ce10e0a17cf1aef1beff85c36a4789c9\"></p>\n<h2>绫乃的探案</h2>\n<p><img src=\"https://pica.zhimg.com/v2-cfa09657b7e20f778928f6ad2e418f4a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3048\" data-rawheight=\"3780\" data-watermark=\"original\" data-original-src=\"v2-cfa09657b7e20f778928f6ad2e418f4a\" data-watermark-src=\"v2-17d3abdce450b5b3149741a42a3e4ee7\" data-private-watermark-src=\"v2-b72624302775999ef0514fd937ebc8b9\"></p>\n<h2>感情线：</h2>\n<h3>修的记忆</h3>\n<p><img src=\"https://pic2.zhimg.com/v2-b74c94c60c99ace4d51acaf25fc45b16_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1358\" data-rawheight=\"4217\" data-watermark=\"original\" data-original-src=\"v2-b74c94c60c99ace4d51acaf25fc45b16\" data-watermark-src=\"v2-6bafc43fb3316c4bd64f0702f3ef1d85\" data-private-watermark-src=\"v2-b162459f94b91c14cd675db1b721765a\"></p>\n<h2>不被理解的修</h2>\n<p><img src=\"https://pic3.zhimg.com/v2-0dc82145df80005b962519feb20378dd_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2092\" data-rawheight=\"2154\" data-watermark=\"original\" data-original-src=\"v2-0dc82145df80005b962519feb20378dd\" data-watermark-src=\"v2-159606f80117eef2e9ec53fc236e6e59\" data-private-watermark-src=\"v2-643a83698943bd5df208073f994c12a3\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<h2>木更的过去</h2>\n<p><img src=\"https://pica.zhimg.com/v2-e97f1441e8fa0845f0f95bb5373b6a73_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"592\" data-rawheight=\"2101\" data-watermark=\"original\" data-original-src=\"v2-e97f1441e8fa0845f0f95bb5373b6a73\" data-watermark-src=\"v2-8ea48f9fa38de9310c52266dd935870a\" data-private-watermark-src=\"v2-fc93f95c45573dca36c583f22284cdd7\"></p>\n<h2>想要被需要的木更</h2>\n<p><img src=\"https://picx.zhimg.com/v2-39eb51326c7851cac99172f24d9f1125_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2076\" data-rawheight=\"3793\" data-watermark=\"original\" data-original-src=\"v2-39eb51326c7851cac99172f24d9f1125\" data-watermark-src=\"v2-f952774ec576d0ec0d336a703f58e3fb\" data-private-watermark-src=\"v2-b4fafc5181a596b9f1de27915f5b795f\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"TwHlrAMT\">猫咪吊环的钥匙扣确认将会是个伏笔。</p>\n<p data-pid=\"gNwldf3-\">第二话木更开门时的钥匙上就已经没有钥匙扣了。</p>\n<h2>绫乃与修</h2>\n<p><img src=\"https://pica.zhimg.com/v2-cca5f9c44abb88f2ac59b59edfd5cff5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1458\" data-rawheight=\"1606\" data-watermark=\"original\" data-original-src=\"v2-cca5f9c44abb88f2ac59b59edfd5cff5\" data-watermark-src=\"v2-f130657927b72c721ea1a10ef659e2ce\" data-private-watermark-src=\"v2-1623c93fff14f536701eb4b10f8668c4\"></p>\n<h2>附：第八集剧本：</h2>\n<blockquote data-pid=\"nautXUON\">第八话01<br>修、三上、摩根<br>00:00（+28S） </blockquote>\n<p data-pid=\"zSiZrT1v\">（回忆）第一话，鹿岛义人与花村纯也签约</p>\n<p data-pid=\"FxKDzthP\">（回忆）第二话，健身房花村纯也的劝诱</p>\n<p data-pid=\"cGcWMTMu\">（回忆）第三话，托尼罗西与花村村也在公园慢跑</p>\n<p data-pid=\"UJHpTdC0\">（回忆）第四话，花村纯也死在家中</p>\n<p data-pid=\"ykHNgH7h\">（回忆）第一话：修收到短信</p>\n<p data-pid=\"gOQ5sFd0\">（回忆）第二话：修拿到信</p>\n<p data-pid=\"Fnq3sz8D\">（回忆）第四话：箭传书射中修旁边的垃圾桶</p>\n<p data-pid=\"CgWu-8jC\">（回忆）第六话：修与米海尔在地铁站接头</p>\n<p data-pid=\"D7gK7ZV3\">修：恶魔代理人？</p>\n<p data-pid=\"O8IIWhMi\">摩根：只要能找到跟他相关的线索，或许能在恶魔灾害发生前采取行动</p>\n<p data-pid=\"Y7Rm4mGd\">三上：他并非遭到恶魔附身者的报复，而是被一般人类给灭口了。提供情报给你的谜样情报贩子。很有可能受恶魔指使而行动。嫌犯的筛选范围已经大幅缩小了</p>\n<p data-pid=\"_xtsUO6k\">（回忆）第五集：三上与修在公园谈话</p>\n<blockquote data-pid=\"NmFNJQak\">第八话 02 地下矿场<br>摩根<br>00:28（+19S）</blockquote>\n<p data-pid=\"ocbz55YP\">风衣兜帽男走近岩石，岩石上插着当年杀死修全家的长枪，岩石后面一只手被锁链吊着，后面是另一个世界的入口。风衣兜帽男手臂上的纹身发出了光芒…</p>\n<p data-pid=\"PHS23Doc\">——还要、再一个牺牲者…</p>\n<blockquote data-pid=\"Gd9iu_4L\">第八话03 I&amp;S事务所<br>修、木更、三上、摩根<br>02：17（+159S）</blockquote>\n<p data-pid=\"BVENLPbP\">I&amp;S事务所变成了“恶魔代理人杀人事件搜查本部”。三上在白板上画出人物关系图。木更在后面做炸猪排饭。</p>\n<p data-pid=\"kJcFmGbP\">三上：因为遇到星天教会的事件，这中间过了一段时间。这是花村纯也遇害事件目前的搜查报告。</p>\n<p data-pid=\"O4dWkDE-\">三上：花村纯也，他会锁定内心怀有欲望和憎恨的人，巧妙地诱惑这些人，使其与恶魔签约。也就是代理人的身份</p>\n<p data-pid=\"BEdmk5jl\">摩根：但是，当他的身份被警察发现，在我们详侦讯他之前，他就遇害了</p>\n<p data-pid=\"8sQysGj_\">三上：肯定是这座城市的恶魔干的好事，值得一提是凶器和杀人手法。看起来像是普通人下的手</p>\n<p data-pid=\"Qps8Ry1I\">修：也就是，在纯也这家伙和恶魔之间，还有一个担任中介的人类吗？</p>\n<p data-pid=\"evfJA2Jc\">三上：没错。为了方便，我们称呼这个人为“真代理人”，这个“真代理人”据说不止花村纯也，他手里还握有其他下线代理人，为了达成恶魔的目的，在背后暗中操控一切。</p>\n<p data-pid=\"jVMuaK04\">摩根：简直就像直销公司的干部一样。</p>\n<p data-pid=\"j0mtpM3J\">三上：是的。而且以杀害花村纯也的速度来看，对方可能掌握了警察或政府的深度情报。</p>\n<p data-pid=\"CUjBfkQU\">修：也就是说，此人可能是警察高层或政府高层？</p>\n<p data-pid=\"Y5vCKSsT\">三上：可能跟提供恶魔灾害情报，给绪方先生的情报贩子一样</p>\n<p data-pid=\"cX7Ms_Gp\">摩根：真代理人和情报贩子X是同个人？</p>\n<p data-pid=\"b3-ah67T\">三上：很有可能是同一个人吧。我不愿设想这座城市的高层会出现两个叛徒</p>\n<p data-pid=\"MpJUXGxN\">摩根：也就是说，这家伙一边制造出恶魔附身者，一边叫修和木更去消灭他们吗？到底为何要这么做？</p>\n<p data-pid=\"0IprF4Sk\">三上：只要明白对方的目的，就能更接近真代理人一步吧。绪方先生</p>\n<p data-pid=\"FBY9AHnk\">修：嗯？</p>\n<p data-pid=\"2KPoI-ZX\">三上：你是怎么认识这个情报贩子，又是怎么跟他取得联络的呢？</p>\n<p data-pid=\"q30vNUIi\">修闻言绷直了身子</p>\n<p data-pid=\"s5x0Kk3o\">三上：关于他的真面目，你有什么头绪吗</p>\n<p data-pid=\"SDlZdBGs\">修：这个嘛…我是怎么认识的呢？</p>\n<p data-pid=\"6IWkk645\">修：啊</p>\n<p data-pid=\"LhRYcCJ5\">摩根（笑着重重的拍了拍修的背）喂、喂、修。你年纪轻轻就老年痴呆了吗，振作一点好吗</p>\n<p data-pid=\"F6AZI-LR\">摩根看着修的反应意识到了什么，停下笑容。举起了双手</p>\n<p data-pid=\"yhxbWcy-\">木更流下了泪来。</p>\n<p data-pid=\"9HZEcGAB\">原来她被洋葱辣到了眼睛。</p>\n<blockquote data-pid=\"FtICdDj0\">第八话 04-01 I&amp;S事务所<br>修、木更、三上、摩根<br>04：56（+27S）</blockquote>\n<p data-pid=\"quCVgVNE\">三上：这是我列出来的嫌犯名单。总之先锁定在4组以内</p>\n<p data-pid=\"mdIQuHvQ\">摩根：这名单还真令人害怕</p>\n<p data-pid=\"jwa1rg1z\">三上：但是只有这些人了。花村纯也被列为搜查名单时，和我同时间知道的人</p>\n<blockquote data-pid=\"tApFN3sH\">04-02 I&amp;S 事务所外<br>操作员</blockquote>\n<p data-pid=\"5_D0DDBK\">操作员在楼外车里监听着三上等人的讨论。这时绫乃的车开了过来，操作员嘁了一声，将车开走。</p>\n<p data-pid=\"ML5wJEN1\">绫乃下车后看了一眼开走的加长轿车</p>\n<blockquote data-pid=\"9aoSdeue\">04-01 I&amp;S事务所<br>修、木更、三上、摩根<br>05：24（+30S）</blockquote>\n<p><br></p>\n<blockquote data-pid=\"e6LVo8Kb\">白板：<br>容疑者候补：<br>·政府高官（市长、副市长）<br>·警察厅上层部（长官）<br>·退魔局（卢屋局长）<br>·AAA（夕桐明乃.夕桐绫乃）</blockquote>\n<p data-pid=\"FcD1Lnz_\">木更：我知道在这名单中谁是犯人</p>\n<p data-pid=\"t3QzrEzw\">盯着白板的众人闻言看向木更，木更握着刀走向白板，红笔在夕桐绫乃的名字上画上圈</p>\n<p data-pid=\"o-TLN-_s\">木更：就是她</p>\n<p data-pid=\"3R_HCdQD\">修：不…等一下，等一下</p>\n<p data-pid=\"pFHz3Yyq\">木更气鼓鼓地将脸转开。</p>\n<p data-pid=\"KAq-TdA_\">修：这个人最不可能是犯人吧</p>\n<p data-pid=\"yTH7bWe2\">三上（思索状）可是夕桐明乃，曾经在警察厅担任卢屋局长的上司。也是创立退魔局的重点关键人物。不可能在这个阶段，排除这对母女的嫌疑…</p>\n<p data-pid=\"wARGU_9J\">木更双手抱着胸赞同的点头。</p>\n<blockquote data-pid=\"eQvgVTqW\">04-03 I&amp;S事务所<br>修、木更、绫乃、三上、摩根<br>05：54（+9S）</blockquote>\n<p data-pid=\"X_Q99OZy\">绫乃拉开门进来</p>\n<p data-pid=\"X3uGOri1\">修：不不不…再怎么说</p>\n<p data-pid=\"kH90KiJ-\">绫乃：喂，修，刚才有台奇怪的车…</p>\n<p data-pid=\"vdfwD5LH\">修：绫乃小姐怎么可能是恶魔的手下</p>\n<p data-pid=\"_aBymhSC\">修回过神来，转头看向进来的绫乃</p>\n<p data-pid=\"Mf4zN0gk\">修：对吧？</p>\n<p data-pid=\"fkqHrray\">绫乃一脸不爽。</p>\n<blockquote data-pid=\"ZsdB83Jx\">第八集05 I&amp;S事务所<br>修、木更、绫乃、三上、摩根<br>06:04（+42S）</blockquote>\n<p data-pid=\"jQJ21kfR\">白板上夕桐明乃和夕桐绫乃被打上了×。</p>\n<p data-pid=\"v-QGiJLx\">绫乃翘着二郎腿抱胸坐下。</p>\n<p data-pid=\"nUvznF37\">绫乃：真是的，这张漏洞百出的嫌犯名单是什么啊</p>\n<p data-pid=\"26KYe7GA\">摩根（摸头）不是的，所以…对吧</p>\n<p data-pid=\"WN1FpvgE\">三上：这个名单只是，列出任何有一点嫌疑的人</p>\n<p data-pid=\"-tl0v8pJ\">修：我，我反而，提出质疑说“绫乃小姐怎么可能？”</p>\n<p data-pid=\"PX6mEymh\">绫乃以看渣子的眼神看向修</p>\n<p data-pid=\"Dvu4mWAb\">木更：不，我觉得很合理，对，接近修的人全部都是受到恶魔指使</p>\n<p data-pid=\"meQLWvfJ\">添饭的木更眯起黑化的双眼</p>\n<p data-pid=\"nBrobidU\">绫乃（拍案而起）那么你待在这里，也是受到恶魔的指使吗？</p>\n<p data-pid=\"hnlgrii6\">木更（端上来猪排饭）嘛，先吃吧，这顿饭是警察出的钱</p>\n<p data-pid=\"F9J2bZdz\">特写：猪排饭</p>\n<p data-pid=\"XafwX1LE\">绫乃生气看向笑着的木更，其他三人转过了脸。</p>\n<blockquote data-pid=\"iWDj2Zws\">第八集06 竞标中心<br>修、绫乃、三上、明乃、卢屋正昭<br>06:46(+72S）</blockquote>\n<p data-pid=\"_1GuQnya\">竞标中心，卢屋正昭和明乃在修面前看着白板</p>\n<p data-pid=\"9b4dAey4\">卢屋正昭：没想到突然被叫到这里来，竟然是因为你们认为我有嫌疑？</p>\n<p data-pid=\"-vYyVG03\">明乃：搜查陷入困境也不能这样吧</p>\n<p data-pid=\"pERHQYXr\">修松下劲来</p>\n<p data-pid=\"JaHR7GLZ\">绫乃（通话）：快骂他，快多骂他几句</p>\n<p data-pid=\"xXHwu8nH\">三上（通话）：不…我本来打算再进一步搜查，等证据收集齐全之后，再请有嫌疑的人协助调查。</p>\n<p data-pid=\"6n-7F10k\">卢屋正昭和明乃看向修</p>\n<p data-pid=\"NMaLfySm\">卢屋正昭：即使如此，你也不打算排除我们的嫌疑啊</p>\n<p data-pid=\"tRiAvxXf\">修：那，我就趁这个机会问了。至今为止提供恶魔情报给我，再诱导我参加投标的是你们吗？</p>\n<p data-pid=\"z9rC3lp2\">明乃（无奈）并不是</p>\n<p data-pid=\"A2AFpB0D\">卢屋正昭：怎么可能有这种事</p>\n<p data-pid=\"Mh92GVfK\">修（认真看了一眼，尴尬地摸头）是吗，抱歉怀疑你们了</p>\n<p data-pid=\"Kh7a34EW\">明乃：既然你这样就能打消怀疑，打从一开始直接就问不就好了，你这个胆小鬼</p>\n<p data-pid=\"aqsA09MT\">修：话虽然这么说，要是被社长发现我怀疑您，今后就不好私下串通了嘛，这样我很困扰的。</p>\n<p data-pid=\"q_FJ29jV\">明乃（闭上眼）：无论是以前还是以后，我们都没串通任何事</p>\n<p data-pid=\"KIFmUJm_\">明乃：懂吗？</p>\n<p data-pid=\"5hzUthQm\">修（瞠目结舌）：啊…</p>\n<p data-pid=\"4sGWduKw\">卢屋正昭（转头去）抱歉，我就当做什么都没听到吧</p>\n<blockquote data-pid=\"_xXWWXIO\">第八集07竞标中心<br>修、绫乃、三上、明乃、卢屋正昭<br>07:58（+85S）</blockquote>\n<p data-pid=\"75g51r-S\">三上（通话）：既然如此，最可疑的就变成我们的大老板了</p>\n<p data-pid=\"tPvTH2eT\">卢屋正昭：警察厅长啊，不过怀疑那个人也是无可厚非。毕竟他浑身都是谜团</p>\n<p data-pid=\"r8-BZnL_\">三上（通话）：他到底是何方神圣呢？从来没看过他在案发现场露过脸</p>\n<p data-pid=\"u6TRYrez\">卢屋正昭：放心吧，连我都只有收过书面指示</p>\n<p data-pid=\"8a9PmT5p\">卢屋正昭（低头）从来没拜见过他本人</p>\n<p data-pid=\"g0H-dQwS\">明乃（转过身来）自从厅长2年前就任以来，无论是副厅长，还是任何警察厅职员，都不知道他的名字，全靠远端设备下指令</p>\n<p data-pid=\"q_ah6Zm2\">修：这样也能当警察厅的首脑啊</p>\n<p data-pid=\"Tp9SF806\">明乃和卢屋正昭看向修</p>\n<p data-pid=\"ZnCu8ubH\">明乃：但是，只有这个我能保证，现在警察厅的厅长，大概是全贝隆市最憎恨恶魔的人</p>\n<p data-pid=\"vumVmePo\">修：嗯？</p>\n<p data-pid=\"R5NSE_Xj\">明乃：毕竟，两年前带着恶魔回来的你，能被认可为恶魔灾害业者，是当时才新上任的厅长，强行让申请通过</p>\n<p data-pid=\"hSkCMtwU\">修：是这样吗？</p>\n<p data-pid=\"dzEVNUMJ\">AAA战斗队员站在一位山羊型恶魔的周围</p>\n<p data-pid=\"m0cm87Pw\">卢屋正昭：据说当时，政府和警察之间发生不少冲突。总之，那位厅长对于消灭恶魔灾害的执着，稍微有点偏离常轨</p>\n<p data-pid=\"YNZi6dp9\">明乃（走上来）呐，修。嫌犯真的只有这些人吗？有没有漏掉什么重要的事情?</p>\n<p data-pid=\"ESgI3pDP\">修转身看向划掉卢屋正昭，只剩下正副市长与警察厅长的白板</p>\n<blockquote data-pid=\"laMyfSNg\">第八集08 监狱<br>修、莎朗<br>09:23（+120S）</blockquote>\n<p data-pid=\"uMH2vB5J\">修将钱包、烟、打火机、猫咪吊环的钥匙放到托盘上，走进了关押莎朗的监狱</p>\n<p data-pid=\"2_69xUJC\">莎朗（睁眼抬头）你瞒着恶魔来见我吗？</p>\n<p data-pid=\"SclvpoBs\">修：怎么可能瞒过她，她在外面。你发出一点呻吟试试看</p>\n<p data-pid=\"CsJ513XN\">木更抱膝坐在监狱放风区的长椅上，瞪大了眼睛</p>\n<p data-pid=\"SyZx6fJM\">修：她会冲进来把你砍成两半，连我一起砍</p>\n<p data-pid=\"_8QedKJZ\">莎朗被逗笑了</p>\n<p data-pid=\"HpikRw8T\">莎朗（挑衅地抬起下巴）：你看这个，这座城市还讲不讲人权啊。</p>\n<p data-pid=\"ev4gfg6D\">莎朗全身都被拘束带绑了起来</p>\n<p data-pid=\"IZh4iv2m\">修：糟蹋本市居民人权的人，好意思说这种话</p>\n<p data-pid=\"j6oF-gla\">修（黑着脸）：我看过你的侦讯影片了，恶魔即将降临这座城市，是什么意思？</p>\n<p data-pid=\"Owqtb42Z\">修（松下肩膀）那家伙，跟我们现在追查的恶魔有关系吗</p>\n<p data-pid=\"YbDPaWwV\">莎朗：哼、没想到你连这个都不记得了，看来你真的把记忆贡献出去了</p>\n<p data-pid=\"-UTvR2LT\">修：我贡献的只有我不需要的记忆，关于我的家人，还有12年前的事件都还在脑海里</p>\n<p data-pid=\"vERq4_S3\">莎朗：记忆是一连串的，不可能完全切割开来</p>\n<p data-pid=\"3MI762qe\">修：才没这回事，现在我还记得父母，也完全记得环奈</p>\n<p data-pid=\"e4sG1mAY\">莎朗（插嘴进来）阿斯摩太的事情，2年前，我在床上告诉过你</p>\n<p data-pid=\"oSLdz9bX\">修吃惊</p>\n<p data-pid=\"3vAl9T49\">莎朗：你看，这段记忆也被拿走了吧？我想也是，毕竟，是混着我肌肤的温暖，香味和触感，一起留下来的记忆嘛</p>\n<p data-pid=\"w99DvHJg\">修（扶额）你在说什么啊，那个叫阿斯摩太的家伙是…</p>\n<p data-pid=\"5qPtze4L\">莎朗：要是记忆的漏洞越来越多，对人事物的留恋也会越来越少，最后你会变得没有任何感情，仇敌也好，家人也好，一起共度春宵的女人们也好，你会完全不关心这些。平平淡淡地生活下去吧。跟那个恶魔一起…</p>\n<p data-pid=\"Q5sOh2UJ\">修被刺激到，抓上了莎朗的牢门</p>\n<p data-pid=\"yGnMWZgo\">修：我问你的不是这个问题</p>\n<p data-pid=\"eXpf98r0\">莎朗（轻笑一声）现在你们在追踪的，是阿斯摩太的傀儡</p>\n<p data-pid=\"KLNzoFps\">修：傀儡…</p>\n<p data-pid=\"t4_YMJ5D\">修（会过神来）：是代理人</p>\n<p data-pid=\"q0qfqhhZ\">莎朗：你们似乎是这么称呼的，那家伙混入人群中，在背后操纵贝隆市发生的恶魔灾害</p>\n<p data-pid=\"9WYJ2VLu\">修（捏紧拳头）我想找出代理人，教会有方法能分辨出代理人吗？</p>\n<p data-pid=\"sVHXmSjG\">莎朗看了一眼修，又翘了嘴角</p>\n<p data-pid=\"o6_W5a_3\">莎朗：那么我给你一点提示。纵火犯通常都在火灾现场附近。想烧光整座城市的人，不一定会出现在每个火灾现场。但是，一间一间纵火烧房子的人，本人肯定会在现场。因为对那个人来说，纵火的地点才是最重要的</p>\n<p data-pid=\"KOzjpJVy\">修：地点？这是什么意思？</p>\n<p data-pid=\"qTdQBwjG\">莎朗（闭着眼抬高下巴）：我不能免费提供你更多情报了</p>\n<p data-pid=\"kut46J7e\">修皱起眉，莎朗用唇语说了一段话。</p>\n<blockquote data-pid=\"V1rsU5FI\">第八集09 警务所<br>三上、摩根<br>12:21（+35S）</blockquote>\n<p data-pid=\"8bSvhHzx\">摩根叫醒了睡椅子上的三上</p>\n<p data-pid=\"yAYfNbvs\">摩根：三上刑警，三上先生。我要回家了，你还要继续工作吗？</p>\n<p data-pid=\"lKWgZh9A\">三上：总觉得哪里不对劲，仿佛我们忽略了什么重要的事情</p>\n<p data-pid=\"evY5PvCM\">摩根：你还是很在意明乃说的话吗</p>\n<p data-pid=\"r70yV5xp\">三上：就像一口气又回到原点的感觉</p>\n<p data-pid=\"l_Uoe8pu\">三上坐到椅子上，拿起手边的咖啡杯</p>\n<p data-pid=\"2CbeZ7dd\">摩根：请你别累坏身体了，那我走啦</p>\n<p data-pid=\"UKjEt06c\">三上：好，你辛苦了</p>\n<p data-pid=\"1PiXl6_c\">摩根走出了房间，三上转头看向白板。操作员看着摩根走过墙角，站了出来。</p>\n<blockquote data-pid=\"LvmjVx55\">09-02办公室<br>三上<br>12:57（+28S）</blockquote>\n<p data-pid=\"NV-HG6pq\">三上：那时候，能够早我一步行动的，应该只有高层的人了。还是说，只是杀人灭口的时机太刚好了？不，怎么可能会那么凑巧呢…</p>\n<p data-pid=\"IM4R-A_6\">三上将杯子放到桌上，他突然意识到了什么，看向真代理人的位置。</p>\n<p data-pid=\"-3ha8vfm\">三上在电脑上查询了一下</p>\n<p data-pid=\"MtxzZI9u\">三上:不会吧，怎么会有这种事…</p>\n<blockquote data-pid=\"FTYb6RmJ\">09-03 警务所<br>三上、操作员<br>13:26（+21S）</blockquote>\n<p data-pid=\"-tpSrc2H\">操作员在三上办公室旁躲着，突然三上推开门冲了出来。</p>\n<p data-pid=\"ujYunjZc\">三上冲到地下车库，上了车便拨通了修的电话</p>\n<p data-pid=\"4dWjisYK\">三上：喂，绪方先生，其实…</p>\n<p data-pid=\"WH1l-kGU\">语音信箱：您的电话将转接到语音信箱…</p>\n<p data-pid=\"ZuEKEGVR\">三上见此赶紧将车开了出去。</p>\n<blockquote data-pid=\"XbdYLlo0\">第八集 10-01 监狱<br>修、木更<br>13:47（+24S）</blockquote>\n<p data-pid=\"KsYbrHS1\">修看了一眼手机上的留言提示，木更在他身旁</p>\n<p data-pid=\"a8FFg6A_\">三上（留言）：我是三上。我有事情必须找你私下说，我立刻去找你。现在正要离开警察署的停车场，大概再5分钟…</p>\n<p data-pid=\"wmM6Reud\">三上车紧急制动的声音</p>\n<p data-pid=\"9Xo-mRMT\">三上（留言）：看来我晚了一步。</p>\n<p data-pid=\"sQxIUnQ4\">木更歪头。</p>\n<p data-pid=\"zl4BRudx\">枪声响起。</p>\n<p data-pid=\"edSJvBNu\">木更惊讶</p>\n<p data-pid=\"zx3DwF-r\">修的手机掉到了地上。</p>\n<blockquote data-pid=\"ixYODb1V\">10-02 警务所<br>修、木更、操作员<br>14:12（+20S）</blockquote>\n<p data-pid=\"XYFhUfW1\">修和木更来到了地下车库，三上已经被人用枪杀死在车上。</p>\n<p data-pid=\"Z8xguHHI\">修（无力跪下）怎么会…</p>\n<p data-pid=\"4eH296zH\">操作员在一旁奔跑引起了修和木更的注意力。修和木更分头追了上去。</p>\n<blockquote data-pid=\"jP24hz0e\">第八集11 警务所<br>修、木更、米海尔<br>14:33（+58S）</blockquote>\n<p data-pid=\"Lz6gQXpI\">操作员身手矫健地在车库中穿行，被修和木更堵到。</p>\n<p data-pid=\"t7MSP_HL\">米海尔（举起双手）：等一下，是我</p>\n<p data-pid=\"CFqb0HG8\">操作员丢掉伪装，是蜂须贺米海尔。木更和修吃了一惊。</p>\n<p data-pid=\"_TOA6DUV\">木更：米海尔学长？</p>\n<p data-pid=\"Rxsvzy0n\">修（举着枪靠近）你竟然杀了三上先生</p>\n<p data-pid=\"WRUTGgCi\">米海尔：不是的，我不可能杀他。</p>\n<p data-pid=\"2i8BO8wg\">米海尔（拿出名片）：因为我是…</p>\n<blockquote data-pid=\"zO2Eq0GG\">名片：<br>贝隆市警察厅厅长，蜂须贺米海尔</blockquote>\n<p data-pid=\"naPuXLCa\">修接过名片，木更凑到修身边</p>\n<p data-pid=\"L8r2PRm7\">米海尔：你懂了吧？我是维持贝隆市治安的最高权力者。好，放下你们的武器…</p>\n<p data-pid=\"Tx1AnQSD\">修一枪托砸晕了米海尔</p>\n<blockquote data-pid=\"tPfSPymH\">第八集 12 I&amp;S事务所<br>修、木更、米海尔<br>15:32（+66S）</blockquote>\n<p data-pid=\"hlgV8pUk\">I&amp;S事务所，修将米海尔绑在椅子上。用枪指着米海尔的脑袋</p>\n<p data-pid=\"ADeWkiHg\">修：原来你就是情报贩子</p>\n<p data-pid=\"VLx-MsIm\">（闪回）第一话：修收到短信</p>\n<p data-pid=\"i-y7yh4r\">（闪回）第二话：修拿到信</p>\n<p data-pid=\"OFCfo4Ob\">（闪回）第六话：修与米海尔在地铁站接头</p>\n<p data-pid=\"AcchxUWR\">米海尔：你以为我至今帮助你多少次了。没感谢我就算了。也不该这样盘问我吧</p>\n<p data-pid=\"DHUg8lYx\">修：我确实想过政府相关人士很可疑。</p>\n<p data-pid=\"_r0dyTu4\">修（放下枪）：没想到没出息的老么，才是真犯人</p>\n<p data-pid=\"CgNURiWg\">米海尔（骄傲地仰头）：你们所知道的“天真又受欢迎的米海尔学长”，只是用来欺骗大众的演技</p>\n<p data-pid=\"lk5EQbaj\">木更：原来你是在演一个受欢迎的人吗？</p>\n<p data-pid=\"VBP5jb0o\">米海尔：我们姐弟个别，接受过祖父严厉的精英教育，其实蜂须贺家最没出息的是…</p>\n<p data-pid=\"ERPg30U-\">修（枪抵上米海尔脑袋）：这种事情怎样都无所谓，你为什么要杀了三上先生？</p>\n<p data-pid=\"TC6VuNFg\">米海尔：要我讲几次你才明白？</p>\n<p data-pid=\"mD00WZ3G\">修听到这话忍不住了</p>\n<p data-pid=\"y0VQh8Db\">米海尔：我才没有杀…</p>\n<p data-pid=\"7u4ProvP\">修（将枪塞米海尔嘴里）诱惑众人，让恶魔附身于人。</p>\n<p data-pid=\"NPpcCd_e\">木更面无表情</p>\n<p data-pid=\"hqoQwElt\">修：让这座城市陷入混乱，你的目的到底是什么？</p>\n<p data-pid=\"mGUCIlly\">米海尔（嘴里塞着枪）不是的，不是的…把枪放下来</p>\n<blockquote data-pid=\"9wgOg0W5\">第八集13市政府 <br>修、木更、米海尔、监控员<br>16:38（+154S）</blockquote>\n<p data-pid=\"cYsc9Iwo\">米海尔将修和木更带回市政府，警卫向米海尔敬礼</p>\n<p data-pid=\"7eL4AdRC\">米海尔：这是我的女友和她的跟班，我答应带他们参观市政府</p>\n<p data-pid=\"yltnj1oQ\">警卫敬礼后面面相觑</p>\n<p data-pid=\"oTjoGF6P\">修：真的只要来这就能消除你的嫌疑吗</p>\n<p data-pid=\"4On54PQF\">米海尔：少啰嗦，跟我来就对了</p>\n<p data-pid=\"xVDmIXCV\">米海尔连续点了24楼，53楼后接着点着楼层，电梯楼层变成认证，随后下了楼</p>\n<p data-pid=\"bQyMpdJc\">米海尔：你们正在追查的幕后黑手，我们也还没掌握对方的真面目。</p>\n<p data-pid=\"zIiUFxtb\">修皱眉</p>\n<p data-pid=\"PY2V63Wp\">米海尔：不过关于你们列在嫌疑名单内的…我的家人、卢屋和夕桐明乃，早就已经撇清嫌疑了。也就是说搜查进度又回到原点了</p>\n<p data-pid=\"J1jzokEm\">修：你为什么能这么肯定？不，比起这个。你为什么会知道得这么详细？</p>\n<p data-pid=\"6upRJwse\">电梯从地下7楼继续往下，终于到了</p>\n<p data-pid=\"p_HTOffl\">米海尔：这个嘛…</p>\n<p data-pid=\"4l9tMcWn\">门开了，眼前的场景让修和木更大吃一惊</p>\n<p data-pid=\"Bla5UBA4\">米海尔：因为我一直在这里，监视所有人的言行举止</p>\n<p data-pid=\"KVAtAtbe\">背后是大量的监控显示屏</p>\n<p data-pid=\"r9vNSix5\">木更一副看垃圾的眼神</p>\n<p data-pid=\"3sr3HNGM\">修（大惊）你脑袋有问题啊？</p>\n<p data-pid=\"15yU2YIw\">米海尔（撩头发）这又没什么大不了。这座城市，本来就到处都设置了监视摄影机。基本上可以掌握所有人民的行动。</p>\n<blockquote data-pid=\"DzkJ-nGE\">屏幕：夕桐明乃、夕桐绫乃、卢屋正昭、关东煮摊、便利店</blockquote>\n<p data-pid=\"3WABF1Tr\">米海尔：现在把你们列举出的嫌疑人，作为加强监视的对象，时时刻刻即时监控而已</p>\n<blockquote data-pid=\"A5iuFpid\">屏幕：莎花洗完澡了在喝啤酒，凛花正在洗澡</blockquote>\n<p data-pid=\"UfQXUVEV\">修：所以你就光明正大偷看姐姐洗澡吗</p>\n<p data-pid=\"eKlS3y9O\">米海尔（一脸无辜地转身）我们是家人啊，有什么好顾虑的？</p>\n<p data-pid=\"X88DwMLD\">修（眼睛被木更捂着）被你姐知道的话，你会被宰掉的。</p>\n<p data-pid=\"TjcixjtC\">米海尔：不只是监视摄影机的影像，手机的GPS，网路的使用记录，通话内容等等情报也会被记录起来。所以我判断三上最接近真相，才会去那里想找他谈谈</p>\n<p data-pid=\"0noBGcGG\">修：什么自由的城市嘛，根本是被严密监控的社会</p>\n<p data-pid=\"DkA3c4rb\">米海尔：贝隆市保障个人的自由，但是个人行为必须自行负责，如果做错了什么事情，就必须要付出代价</p>\n<p data-pid=\"d8Z0MS8i\">监控员 播放三上刑警遇害时的影像</p>\n<blockquote data-pid=\"9GoB_5iE\">风衣男卡着监控死角对着三上举起了枪。蜂须贺正隆正在睡觉</blockquote>\n<p data-pid=\"_nwK38pb\">米海尔：对方一直背对监视摄影机，跟花村纯也遇害时一样</p>\n<p data-pid=\"EIcyaHx-\">修咬牙</p>\n<blockquote data-pid=\"C_yfuFw3\">第八集14 AAA公司<br>修、绫乃<br>19:03（+94S）</blockquote>\n<p data-pid=\"Psatzazh\">白天，绫乃在AAA公司里处理着监控录像。</p>\n<p data-pid=\"gjQpZCZb\">绫乃取下眼镜揉了揉人中，修递过来一杯热饮</p>\n<p data-pid=\"F94kX4IS\">修：辛苦了</p>\n<p data-pid=\"eiASN-Nx\">绫乃：真的累死我了，这种事情交给警察去做不就好了</p>\n<p data-pid=\"p4i2eIMm\">绫乃喝了一口热饮</p>\n<p data-pid=\"RiiEalb3\">修：都是为了继承三上先生的遗志…无法假手他人</p>\n<p data-pid=\"aYpEUR7p\">绫乃转过目光放下杯子</p>\n<p data-pid=\"MPeM4ipQ\">修：城市里设置的监视摄影机，包含隐藏摄影机在内约300万台，全部摄影机24小时365天全力运转中</p>\n<p data-pid=\"kK-MXnq8\">绫乃：我一点也不想知道这种讨厌的情报</p>\n<p data-pid=\"lYjUPvJk\">修：其实这样反而情报量太多，分析影像的速度完全赶不上。虽然用AI筛选过一部分的情报，但最后还是必须依靠人来检查和判断</p>\n<p data-pid=\"q876erdL\">绫乃：这样根本就是本末倒置</p>\n<p data-pid=\"LGI5FD3t\">绫乃又喝了一口热饮，戴上眼镜开始工作</p>\n<p data-pid=\"qDYDqWDw\">绫乃：然后，你还好吗？</p>\n<p data-pid=\"xzJWYm58\">修：什么意思？</p>\n<p data-pid=\"QH9VuwfI\">绫乃：就是三上先生的事情啊，你应该受到打击了吧，难得出现愿意协助你复仇的人</p>\n<p data-pid=\"F4CqSAV2\">修：现在与其悲叹，不如找出犯人。如果被杀害的人是我，三上先生肯定也会这么做</p>\n<p data-pid=\"G_aeyywA\">绫乃（正过脑袋）是啊…</p>\n<p data-pid=\"BkIF6Uy6\">监控录像中某辆警车在众人四散逃跑的酒店前停下。</p>\n<p data-pid=\"69XwZGt1\">修有点吃惊</p>\n<p data-pid=\"sNmv1Fx7\">修（俯身按下暂停）暂停一下</p>\n<p data-pid=\"SMkW84w4\">绫乃：欸！？</p>\n<p data-pid=\"93isq3_Y\">修握着鼠标点了几下，睁大了眼睛</p>\n<p data-pid=\"YJHLmhR_\">修：该不会…</p>\n<blockquote data-pid=\"m-8GWToD\">第八集 15 葬礼</blockquote>\n<p data-pid=\"BLbn-aah\">三上警部补的葬礼、夕桐母女、摩根、卢屋都出席了。</p>\n<p data-pid=\"W8KVZhrC\">修拿起一支菊花放在三上警官的棺材里。</p>\n<blockquote data-pid=\"UEHsPuYg\">15-02街边 <br>修、摩根<br>20:47（+14S）</blockquote>\n<p data-pid=\"2BfZTiL_\">修走出会场，摩根开着面包车停下来接他</p>\n<p data-pid=\"Ut-yxuAq\">摩根：我送你一程吧，顺便去吃个饭如何</p>\n<p data-pid=\"1IXsjkn_\">修笑了，夕桐母女与卢屋看着摩根把修接走</p>\n<blockquote data-pid=\"QK1GzjHG\">15-03 高速<br>修、摩根<br>21:07（+77S）</blockquote>\n<p data-pid=\"0FfCRAEE\">摩根：总觉得人的生命真是脆弱。修，你也要小心。既然三上先生会遇害，犯人肯定也会盯上你</p>\n<p data-pid=\"EwNkrj86\">修：大叔你也是啊</p>\n<p data-pid=\"RPBL9nmy\">摩根：话说回来，我心里还不怎么踏实。不久前我们3人还一起东奔西跑的</p>\n<p data-pid=\"lzWqnwWw\">修：甚至还怀疑市长有嫌疑</p>\n<p data-pid=\"zLkcObOo\">摩根：仔细想想，还真是大逆不道的行为。虽然不至于严重到被灭口，但这程度肯定会被降职的</p>\n<p data-pid=\"ioQp-ImL\">修：三上先生，真是个坚持自我，不易妥协的人呢</p>\n<p data-pid=\"3Zb9NKOo\">摩根：那种人才能称得上是真正的刑警吧</p>\n<p data-pid=\"aF80kFtg\">修：只是，他身为刑警还是有些迷糊的地方</p>\n<p data-pid=\"HaUtcql1\">摩根：是啊，他是个奇怪的人，正义感很强。明明脑袋很聪明却是个滥好人。马上就会相信别人</p>\n<p data-pid=\"WAdTegiz\">修看了一眼开车的摩根</p>\n<p data-pid=\"fhX3AHxn\">修：所以你才会杀了他吗，迈尔斯。因为他是个滥好人，又很好骗</p>\n<p data-pid=\"BYSVHnNm\">摩根手臂上的纹身发出了光</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/mo-li-lan-mao?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">魔力懒猫</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/547658854/answer/2638992010?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">6 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/547335723?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 7 月新番动画《契约之吻》第七集？</a><br><a href=\"http://www.zhihu.com/question/547335431?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 7 月新番动画《契约之吻》第六集？</a><br>\n","link":"http://www.zhihu.com/question/547658854/answer/2638992010?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"AOD、灵动岛、相机，这才是 Pro 的完全体？iPhone 14 Pro 首发体验","date":"2022-09-17 03:35:04","description":"4800W 的相机表现怎么样？灵动岛好不好用？AOD 都能显示什么？不管发布会讲没讲到的，我都尽可能为大家将一一解答。<a href=\"https://sspai.com/post/75762\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75762"},{"title":"漫画家鸟山明为什么没有培养出一些好弟子传承衣钵？","date":"2022-09-17 03:31:32","description":"\n<p data-pid=\"H_bXHRsH\">考虑到日本漫画家带徒弟的方式主要是依靠助手制度这一点，那“鸟山明为什么没有特别出名的弟子”这个问题就等于“鸟山明为什么没有特别出名的助手”。</p>\n<p data-pid=\"spqi-eQ2\">那答案可能意外地非常简单——<b>因为鸟山明，他不在东京。</b></p>\n<hr>\n<p data-pid=\"D9LlmuOJ\">因为日本漫画的几大龙头杂志的本部都在东京，所以漫画家为了工作方便也大多会在出道后搬到东京居住。在各个漫画家的生平履历中基本都能见到“xx年上京”的记述。</p>\n<p data-pid=\"Q9vzzwMP\">进而，有志成为漫画家的年轻人也会选择前往东京寻找在漫画家手底下锻炼的机会。题目里提到的井上雄彦就是在上京后才获得了给北条司当助手的机会<sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\" data-text=\"1987年大学を中退し上京。当時『シティーハンター』を連載中の北条司のアシスタントを10ヶ月ほど務め、ここで漫画制作の基本的な技術を身につけた。\" data-url=\"https://ja.wikipedia.org/wiki/%E4%BA%95%E4%B8%8A%E9%9B%84%E5%BD%A6\">[1]</sup>。</p>\n<p data-pid=\"WnLpsH6y\">换句话说，漫画是一个产业，而基于种种原因这个产业的资源和人才大都聚集在日本的东京都。</p>\n<p data-pid=\"I6fzGCqe\">但众所周知鸟山明作为一名乡巴佬漫画家，最不适应的就是大都市的生活。所以他和鸟岛和彦特别约定了留在老家创作，“除非没按时交稿”否则不去东京。</p>\n<p data-pid=\"9etofSK2\">不仅如此，自己没做过助手、直接出道的鸟山明<b>起初甚至都不知道漫画行业还有助手制度这件事</b>。</p>\n<p data-pid=\"6JwH6fKC\">根据鸟山明与井上雄彦的黄金对谈，鸟山明在得知自己要开始连载阿拉蕾的时候，第一反应不是开心，而是犯愁——“我画一话都要花这么多时间，那做连载可咋整？”</p>\n<p data-pid=\"_De76OMc\">不知道雇用助手为何物的鸟山明，在连载起初所有的作画都由自己一个人完成。后来是经鸟岛和彦的提醒，才招了“住在附近比较会画画的年轻人”当助手。</p>\n<p><img src=\"https://picx.zhimg.com/v2-5f5c7c1fc0be160868abf79ffa86f8e6_720w.jpg?source=b1748391?rss\" data-rawwidth=\"700\" data-rawheight=\"1024\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-5f5c7c1fc0be160868abf79ffa86f8e6\" data-watermark-src=\"v2-8b488ce6d518369d4d0cb6b17cc46aad\" data-private-watermark-src=\"v2-82d497c47ec79a5a28634ad31cf4834f\"></p>\n<p data-pid=\"CRUc29pX\">实际上鸟山明在创作《阿拉蕾》和《龙珠》的期间一共只有过两任助手——田中久志（负责到《阿拉蕾》前半段）和松山孝司（负责《阿拉蕾》后半段到《龙珠》中后期）。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-05096a95418064dd326d41056101d55d_720w.jpg?source=b1748391?rss\" data-rawwidth=\"763\" data-rawheight=\"791\" data-size=\"normal\" data-caption=\"在阿拉蕾中登场的忍者造型田中久治（ひすゎし）\" data-watermark=\"original\" data-original-src=\"v2-05096a95418064dd326d41056101d55d\" data-watermark-src=\"v2-92858dfe97632deae9ec4145cbd60324\" data-private-watermark-src=\"v2-d9f0e0b00bfa175412600f8f45b87f5c\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-b633193b554a75867843777f8fba7163_720w.jpg?source=b1748391?rss\" data-rawwidth=\"568\" data-rawheight=\"792\" data-size=\"normal\" data-caption=\"松山孝司\" data-watermark=\"original\" data-original-src=\"v2-b633193b554a75867843777f8fba7163\" data-watermark-src=\"v2-f3ab51adea676d58b942e87f1f48df3d\" data-private-watermark-src=\"v2-e9f1f750e983952e3702c32b0e218461\"></p>\n<p data-pid=\"43t7jw0X\">两部长篇作品，前后只换过两个助手，这个数量是非常之少的（访谈中井上雄彦对此表示不可思议）。</p>\n<p data-pid=\"vIKQ3C00\">由此可见，鸟山明招募助手的出发点真的就只是“尽量不影响自己生活的前提下给自己帮忙”，主观上就没有栽培新人的意思。客观上，留在爱知县的年轻人恐怕本来也没什么做漫画家的野心和才能，否则肯定还是会选择上京历练（田中久治后来在集英社旗下推出过一些连载但都不太成功，松山孝司则专注于插画事业）。</p>\n<p data-pid=\"SBvSb-TL\">退一步讲，就算编辑部有意让鸟山明带带新人，但工作地点远在名古屋估计也不太好安排。</p>\n<p data-pid=\"Hp6ByWDe\">在东京工作的漫画家千千万，但喜提梅泽春人和井上雄彦的也就北条司一个。</p>\n<p data-pid=\"l4XyY46N\">在高手成群的东京，助手混出名堂的概率尚且如此之低，远在名古屋“能用就行”的鸟山明助手没啥名气实在是非常正常的事情。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wo-you-xu-duo-de-xiao-bing-qi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">许多的小兵器</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/549035440/answer/2676256330?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">28 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/361304699?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">知乎龙珠迷为何说鸟山明抄袭超次元乱战？</a><br><a href=\"http://www.zhihu.com/question/40118444?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">想要了解山中鹿之助的生平，有哪些推荐的书籍？</a><br>\n","link":"http://www.zhihu.com/question/549035440/answer/2676256330?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"一派·Podcast | 毕业论文避坑指南","date":"2022-09-17 03:00:00","description":"毕业论文该如何顺利完成开题、写作和答辩环节？我们请到了有二十余年学术经验的 @玉树芝兰 开出这份避坑指南。<a href=\"https://sspai.com/post/75448\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75448"},{"title":"怎样当一个好的漫画编辑？","date":"2022-09-16 04:31:52","description":"\n<p data-pid=\"f92fTFXu\">看了大家形形色色的回答，请允许我先来做个总结。</p>\n<p data-pid=\"Of9QuXa0\"><i>所谓好编辑，必须符合以下全部或大部分“好”的标准：</i></p>\n<p data-pid=\"8eYrSZx-\">1<i>、甘于奉献（不计较个人得失）</i></p>\n<p data-pid=\"30-of6Sy\"><i>2、拥有很强的专业知识（能做策划、懂技术）</i></p>\n<p data-pid=\"X4pWSW4K\"><i>3、能够发掘有潜力的作品（能挖掘新人）</i></p>\n<p data-pid=\"d6X_azow\"><i>4、拥有足够多的成功案例（手里有几部优秀作品）</i></p>\n<p data-pid=\"mGD4SFNY\"><i>5、擅长沟通交流（作者听你的，同事听你的，领导听你的，能商务谈判）</i></p>\n<p data-pid=\"I_B6ODon\"><i>6、客观公正（不受自己喜恶影响，真正做到唯作品好坏论）</i></p>\n<p data-pid=\"4bOggplG\"><i>7、能发掘作品商业价值（能把作品卖出大价钱）</i></p>\n<p data-pid=\"ydT94MqG\"><i>8、能够熬夜等其他辅助要求（配合漫画家日夜颠倒的工作作息等）</i></p>\n<p data-pid=\"SXLLrSSz\"><i>9、具有解决一切问题的能力。</i></p>\n<p data-pid=\"tIr6vdMI\">在此，作为一个老编，我只能提醒诸位：</p>\n<p><br></p>\n<p data-pid=\"-pEM5GjV\"><b>“醒醒各位，请放弃幻想吧。大家口中的‘好编辑’就像‘理想中的好男友OR好女友‘’一样，是不存在的。”</b></p>\n<p><br></p>\n<p data-pid=\"RFfZQvEL\">好编辑是一种理想化的、有意或无意间被罩上了光环的身份，</p>\n<p data-pid=\"v3hNNQZ2\">是和独角兽、海德拉一样，无法在现实中存在的。</p>\n<p><br></p>\n<p data-pid=\"wqOEPXfh\">因此——</p>\n<p data-pid=\"WMcz_cCQ\"><b><u>“怎样当一个好编辑”，就是个伪命题！！！</u></b></p>\n<p data-pid=\"56qck34b\">别急着喷，咱们来举行业中的几个真实例子：</p>\n<p data-pid=\"Aiur4vuE\">1、某老编辑，从业十年，带出算得上好的作品有20来部。拿成绩来说，算是战功赫赫。但此人有个特点，不喜欢带新。像新人投稿什么的一律不接待，更喜欢找市面上成熟的作者。有一次和他聊天时，他说：“每个人精力都有限，与其浪费时间向新人解释怎么分镜，怎么画线条，我更想把精力放在值得投入的人和作品上。至于新人，如果都没法解决最初步的问题，那么自然也没有培养的价值。”</p>\n<p data-pid=\"UGBCAl0K\">2、与上述老编正相反，某平台编辑，从业也快十年了。专注带新，投入了大量的时间教授新人怎么去塑造人物，怎么去画分镜，怎么画线条。其专业程度在我看来，只要给她支笔，她就能成为顶尖漫画家。但是从业十年，几乎没带出什么知名作品。很多新人作者一旦成熟，就会果断抛弃她另谋高就。每次和她聊起这个留不住人的问题，她也很苦恼，总是自我安慰“这个行业总是要有人去培养新人的。”</p>\n<p data-pid=\"yWfSUuIa\">3、某编，从业十一年，业内人都知道他是大忽悠，但业外人不知道，但凡总有个上当受骗，他就捞钱走人。就这么一个活宝吧，有个漫画家特别喜欢他，逢人说他好。因为他骗来的钱都投给这个漫画家画他想画的作品，同时他也拿着这漫画家的作品在外忽悠，忽悠来的钱二人分。他自己本人说，他很看好这漫画家，作为长线投资他也不着急，就慢慢磨，看哪天能磨出一部好作品。</p>\n<p data-pid=\"B1Wz-4OO\">4、某平台新人编辑，入行三年。前几天找我吐槽，平台分配了一个作者给她，每次沟通非常痛苦，基本上她说一，作者就说二，一直抬杠。不管他的话又感觉对不起自己的职责。而且为了配合作者日夜颠倒的工作作息，每天都是熬到11点半下班，第二天一早9点上班，长久以往严重影响了身体。不过努力之下，作品总算是日渐有了起色，结果有一天，二人为了一个创作理念的问题闹翻了。作者不仅去平台处投诉了编辑，害编辑吃了批评，还在网上抹去了作品里一切和该编辑有关的内容，将一部明明是两个人一起努力产出结果的作品，全部功劳都算在了自己头上。</p>\n<p><br></p>\n<p data-pid=\"Pq38SYUI\">大家来评判一下，这几位算好编辑还是不算好编辑？</p>\n<p data-pid=\"fX3fJEHC\">案例一的编辑，有能力，同时也是精致的利己主义、务实主义者。</p>\n<p data-pid=\"kkEs2V9L\">案例二的编辑，虽然致力于培养新人，但奈何个人能力有限，无法为作者带来跟进一步的上升空间。</p>\n<p data-pid=\"tJo-fceH\">案例三的编辑，和该漫画家算是真爱了吧？但其“恩爱”的代价是以坑他人为代价。</p>\n<p data-pid=\"RK5GPjVG\">案例四的编辑，勤恳，辛劳，但其实专业技术能力有限，对于作品比较抠细节，导致作者感觉被过于拘束。</p>\n<p data-pid=\"0i_AUv9s\">是否觉得，他们很多部分和“好”沾边，但很多部分又与“好”不尽相符？</p>\n<p data-pid=\"vefo6ash\"><b>是的，这正是漫画编辑行业的真实现状。</b></p>\n<p data-pid=\"PHhssTSb\">我们对于“好编辑”最初的概念来自于隔壁岛国，无论是巴库曼还是零零种种的传闻（比方说发掘了青山冈仓的福田，比方说浦泽直树与长崎尚志等）。</p>\n<p data-pid=\"ngjU3X85\">但，撇去一切笼罩在头上的光环，剥去一切理想化的外衣后，我们会发现，作者是人，编辑也是人，是人就有各种主观的、客观的评判标准，而创作本就是两个人的事，自然就充满了各种无可避免的你看我不爽，我看你不顺眼的问题。</p>\n<p><br></p>\n<p data-pid=\"91k8MJoD\">再进一步，</p>\n<p data-pid=\"tFeDMqoN\">大家不妨先自我评判一下，觉得自己是不是做到了好编辑的标准。</p>\n<p data-pid=\"s6xzLUuf\">然后再问问自己的作者，自己是不是做到了好编辑的标准。</p>\n<p data-pid=\"dYy2pELi\">如果作者对你诚实的话，答案往往会和你的自我感觉出入很大。</p>\n<p data-pid=\"C1gh7DKO\">而且，对于“好编辑”的评判打分，往往来自与编辑合作的外围，而不是编辑本身，好与坏更是代表了这部分群体的直观感受，而不是客观情况。</p>\n<p data-pid=\"eVOZL3A8\">如果你为了得到“好”评，而放弃某些原则，那便背弃了“好”的标准。</p>\n<p data-pid=\"6pCCqBj6\">而你如果为了“好”的标准而坚持某些想法，有时候则会得到一个“差”评。</p>\n<p><br></p>\n<p data-pid=\"PeI1t94s\">就拿我自己来说。</p>\n<p data-pid=\"Mhr7pdaT\">我做编辑的时候，作者都希望我能放任自流。但我知道，如果不能把读者的反馈准确告诉作者（作者接受不接受是另一回事）是对作品最大的不负责、</p>\n<p data-pid=\"FHAvx99A\">但在我做公司、做乙方的时候，我反过来会要求平台编辑不要干涉创作。</p>\n<p data-pid=\"HozIzVNf\">当你处于不同的位置时，标准也就会随之改变。</p>\n<p data-pid=\"D4FfTt9H\">标准会改变，自然评判也不具有权威性。</p>\n<p><br></p>\n<p data-pid=\"VNrLdDSb\">我们只所以会去神话“好编辑”这个的概念，主要出自于创作者对于自身能力不足的恐惧症。</p>\n<p data-pid=\"DhbfG80c\">就算自己的分镜再烂，就算自己连线条都画不好，就算自己其实没看过几本书，只要遇到一个“好编辑”，一切问题都能迎刃而解。</p>\n<p data-pid=\"KWoDcijB\">“你看，某某作出了一部好作品，因为他/她遇到了个好编辑。同理，我之所以无法作出流芳百世的作品，因为我的编辑是坨‘屎’！”</p>\n<p data-pid=\"bZ_KDFom\">瞧，这么一来问题就简单了——全是编辑的错。</p>\n<p data-pid=\"FED21yrY\"><br></p>\n<p><br></p>\n<p data-pid=\"pTCp4Lqc\"><b><u>那么，真的没有好编辑吗？</u></b></p>\n<p data-pid=\"b1ulb_TS\">既然好编辑是一种幻想，那我们不妨来幻想一下。</p>\n<p data-pid=\"Vu216Zjr\">现在有这么一个编辑，他刚刚入职。</p>\n<p data-pid=\"skFbWQ75\">为了成为一名好编辑，他努力地为作者提出各种中肯的意见。</p>\n<p data-pid=\"yp3OxwhK\">但，他不知道的是，其中有三分之二的意见不是必须的，有些甚至会对作者起到相反的误导作用。而在他做这一切的时候，不会有人告诉他正确的方式。</p>\n<p data-pid=\"swOU3-Rj\">在坑了足够多的作者后，他终于有了心得，拥有了正确的专业知识。</p>\n<p data-pid=\"aaI1HZKf\">代价是一批新人作者永远无出头之日。</p>\n<p data-pid=\"rzQ3a9ED\">OK让我们无视这些炮灰新人，继续培养编辑。</p>\n<p data-pid=\"4p26Lx13\">接着，这名编辑需要寻找合适的，有潜力的作者，那些拿着涂鸦，搞不清分镜线条怎么画的人直接拉入黑名单。</p>\n<p data-pid=\"r7wfGj5T\">现在我们有了一分优秀的、成熟的白名单作者，然后一个一个谈策划。</p>\n<p data-pid=\"Izr2XQUX\">在做了十部失败的策划后，终于有一部作品爆红了。</p>\n<p data-pid=\"l_CZB1OQ\">红的人自然开心，黑的人虽然不怎么开心，但好在我们编辑这么多年来练就了不错的口才，不费吹灰之力就把这种不满给平息了下去。</p>\n<p data-pid=\"AGw45Z2g\">一部失败了再做一部就是了，总会有一部成功、</p>\n<p data-pid=\"WnSrTBbe\">接下来，我们的编辑开始拿着作品做商业变现。</p>\n<p data-pid=\"qi0ia5EN\">没经验的他先后被坑了几次，失去了版权，于是，有几名作者一怒之下将他拉黑。</p>\n<p data-pid=\"fDCLYC_7\">好在手里还有几部不错的，继续寻找合作。吸取上次的经验教训，编辑这次没被坑，但却不小心坑了商业伙伴。于是商业伙伴一怒之下，拉黑。</p>\n<p data-pid=\"RWitVa9_\">终于，我们的编辑吸取了过往所有的经验，将一部作品推上了成功的舞台。</p>\n<p data-pid=\"jbAcwmOa\">金钱荣誉接踵而来。</p>\n<p data-pid=\"xbdnGFFB\">故事到这里，是个圆满的结果。</p>\n<p data-pid=\"JjFCrEMz\">但大部分情况下，故事还会继续……</p>\n<p data-pid=\"skTXKwfS\">某天，作者突然找上编辑，说：</p>\n<p data-pid=\"zjw9YaOg\">“这部作品都是我画的，是我的孩子，为啥赚了钱你拿7，我才拿2？”</p>\n<p data-pid=\"cAWDLph5\">编辑回答到：</p>\n<p data-pid=\"Bj8sRZTw\">“为了你这一部的成功，这些年我失去了许多，得罪了许多人，自己也投入了很多资源，而你只是埋头画了一部作品而已，自然应该我拿的多。”</p>\n<p data-pid=\"eY63_xEs\">作者不干了，提出分家。</p>\n<p data-pid=\"cb7VssST\">编辑也不干了，这么大个作品香饽饽，你说分就分？</p>\n<p data-pid=\"2ygJb-F9\">蛋糕背后自然有分蛋糕的人。</p>\n<p data-pid=\"owR40tnD\">一番资本骚操作，作品成为了公司的作品，作者成为了公司的合伙人，如果作者不画下去，将面临巨额赔偿。</p>\n<p data-pid=\"vWCxqbtQ\">于是作品得以延续，成功与荣耀成为了编辑头上耀眼的光环。</p>\n<p data-pid=\"w96UL_yV\">自此，一名优秀的、成功的、好编辑，完美出世。</p>\n<p><br></p>\n<p data-pid=\"2U9EribS\">所以你看，大家不会告诉你，</p>\n<p data-pid=\"m8qlm02J\"><u>如要成为现实中的一名“好编辑”，很多时候你必须把“标准”反着执行。</u></p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"PEkiZAE5\">在知道了这样一个残酷真相后，</p>\n<p data-pid=\"dvRJE-4-\"><b><u>你还会坚持按照标准执行吗？</u></b></p>\n<p data-pid=\"00arfgD1\">如果你回答“YES”，那么恭喜你，你已经是个好编辑了。</p>\n<p data-pid=\"2MUIgaIX\">这个道理，我也是悟了很多年后才明白的。</p>\n<p data-pid=\"ow3JKKTq\">当我们了解到，所谓“好”的标准，其实是他人强加给我们的一种期望、理想时。</p>\n<p data-pid=\"sX7RCqOw\">那么，我们所要做的，首先就是学会无视他，回过头来问自己，</p>\n<p data-pid=\"t605N0fy\">你现在所做的一切，是否是你的本心？</p>\n<p data-pid=\"Ytf31VDW\">是否是你最初热爱的事？</p>\n<p data-pid=\"2BntPG2q\">如果是，就坚定地做下去吧。</p>\n<p data-pid=\"15_cIot_\">人与人是不一样的，编辑与编辑也是不一样的。</p>\n<p data-pid=\"vrZIfuoP\">有人擅长商务，可以做商务编辑——谈合作、谈变现的。</p>\n<p data-pid=\"eWFE01du\">有人专精与技术，可以做技术编辑——指导作者技术性问题的。</p>\n<p data-pid=\"-qJqFQd7\">有人热爱策划，可以做策划编辑——做各类作品企划的。</p>\n<p data-pid=\"6P55LGjD\">等等等等。</p>\n<p><br></p>\n<p data-pid=\"7FDzZ92X\"><u>你无法成为别人，你只能成为你自己而已。</u></p>\n<p data-pid=\"3VMKQTuq\">也许有人担心：</p>\n<p data-pid=\"KIlYhDy6\">如果我带作品坑了作者怎么办？</p>\n<p data-pid=\"-nOkvG23\">如果我无法给作者带来更多收益怎么办？</p>\n<p data-pid=\"98LYX42e\">如果我无法作出好作品怎么办？</p>\n<p data-pid=\"3ghWpZwH\">我会说：</p>\n<p data-pid=\"_yNK5TG8\">难道你不做，就不会有其他人坑作者吗？</p>\n<p data-pid=\"TEX-nD_m\">难道你不做，那些作者反而会有大把收入吗？</p>\n<p data-pid=\"qLiEURPS\">难道你不做，好作品会从天上掉下来吗？</p>\n<p data-pid=\"7oXgUHQr\">如果是这样，你只是一个害怕失败，只会逃避的坏编辑而已。</p>\n<p data-pid=\"cbLKziWc\">那遇到别人说自己坏话怎么办？</p>\n<p data-pid=\"qnqgKTcW\">那请问，你自己又是否有做到问心无愧呢？</p>\n<p data-pid=\"RzqV9UG8\"> 忘记成为好编辑的一切标准吧。</p>\n<p data-pid=\"3pY4uYAu\">这世界上标准已经够多了。</p>\n<p data-pid=\"yYCe4cbZ\">这不是建议大家摆烂，而是让大家明白。</p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"G4i3gD0-\">对旁观者来说，只有成功的人才能算“好”。</p>\n<p data-pid=\"O52LrnqX\">对我们自己来说，</p>\n<p data-pid=\"IbLXzw87\"><b><i>该学的技术、该学的专业、该学的沟通、该学的商务，一个都不能拉下，不仅要学，还要往死里去学。</i></b></p>\n<p data-pid=\"5DXMcjYi\"><b><i>什么合同啦、运营啦、读者维护啦，周边设计啦，所有和你工作有关的事，你都必须去做。</i></b></p>\n<p data-pid=\"E9yBmSX3\"><b><u>明知道标准是不可行之路，依旧能坚定内心去探寻可寻之路的人，才是正道。</u></b></p>\n<p data-pid=\"8Z6f1-q7\"><u>虽说没人是必须背负他人而活。</u></p>\n<p data-pid=\"brxN8E_L\"><u>但能做好自己的本分，才是最大的“好”！</u></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/feng-di-zhui-zhu-wang-chen?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">D男爵的漫画厅</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/22528311/answer/2674988456?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">15 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/38160273?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何成为好的漫画编辑?</a><br><a href=\"http://www.zhihu.com/question/320728268?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">漫画编辑到底是要做什么？</a><br>\n","link":"http://www.zhihu.com/question/22528311/answer/2674988456?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何看待 Adobe 以 200 亿美元收购 Figma？","date":"2022-09-16 03:22:22","description":"\n<h2>Adobe 收购 Figma 之后会怎样</h2>\n<p data-pid=\"KD3jLSK8\">今天（2022/9/15）设计圈有个大新闻，Adobe 公布了收购 Figma 的消息：</p>\n<ul>\n<li data-pid=\"QN7uiXbZ\">\n<b><a href=\"http://link.zhihu.com/?target=https%3A//news.adobe.com/news/news-details/2022/Adobe-to-Acquire-Figma/default.aspx\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Adobe 的官方公告</a></b><br>\n</li>\n<li data-pid=\"kWsQYwzL\">\n<b><a href=\"http://link.zhihu.com/?target=https%3A//www.figma.com/blog/a-new-collaboration-with-adobe/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Figma 的官方公告</a></b><br>\n</li>\n<li data-pid=\"i1Ii075K\">\n<b><a href=\"http://link.zhihu.com/?target=https%3A//twitter.com/zoink/status/1570385551517437952%3Fs%3D20%26t%3De19knEPOFus2veYOzl6UzQ\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Figma CEO 的推特</a></b><br>\n</li>\n</ul>\n<p data-pid=\"vXGxq-nD\">Adobe 决定用 200 亿美元（一半股票，一半现金）收购 Figma，交易还需要获得监管部⻔的批准，预计将在 2023 年完成。</p>\n<p data-pid=\"BdZ9BanE\">这对于设计界来说是一个爆炸性的新闻，虽然在此前也有征兆，早在去年（2021）Figma 的最早的两个联合创始人之一，与现任 Figma CEO 在大学时期一起创建 Figma 的前 CTO Evan Wallace 从 Figma 离职了，可能在那时就已经决定了 Figma 的命运。</p>\n<p data-pid=\"NWuFib0C\">对于这次收购，很多设计师对 Figma 非常的悲观，相比 Figma 而言 Adobe 更像是一个无情的资本机器，收购来的产品鲜有好下场的，上一个 Adobe 收购的界面设计工具 Macromedia Fireworks 已经死在 2013 年了。</p>\n<p><img src=\"https://picx.zhimg.com/v2-73a5e7b7c2df3b704ce907526ff04e70_720w.jpg?source=b1748391?rss\" data-caption=\"Macromedia Fireworks 1.0\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"572\" data-watermark=\"original\" data-original-src=\"v2-73a5e7b7c2df3b704ce907526ff04e70\" data-watermark-src=\"v2-6ccd9b21e467f32fd9bb2baaef50a635\" data-private-watermark-src=\"v2-1a3e7869d5b304c06a8cc91f661644e0\"></p>\n<p data-pid=\"GO22FrAz\">而 Adobe 的旧有产品缓慢又迟钝的更新，在设计师群体中形成了 Adobe 就是一头笨拙的大象的印象。在过去，设计师们既不满意又无法逃过 Adobe 的魔掌，Figma 的出现让设计师至少在 UI 设计领域上挣脱了 Adobe 的束缚，可惜即使 Figma 在 UI 设计领域战胜了 Adobe，又拓宽了设计与协作的领域，最终还是被 Adobe 花钱摆平了。</p>\n<p data-pid=\"9r1xYX8F\">很多设计师对 Adobe 收购最有印象的是 2005 年收购 Macromedia，曾经风靡一时的 Macromedia 产品 Dreamweaver、Fireworks、Flash、 Authorware 几乎都死在了 Adobe 手上，其实 Adobe 的买买买从更早就开始了，Adobe 的代表产品 Photoshop 就是 1995 年收购来的，After Effects 是 1994 年收购的，Premiere 是 1991 年收购的。Adobe 代表产品中只有 Illustrator 是自己创造的，可以说 Adobe 从来就是一家靠收购来巩固市场主导地位，但不擅长自己创新的公司。</p>\n<p data-pid=\"UmTm91k6\"><b><a href=\"http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/List_of_acquisitions_by_Adobe\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Adobe 收购公司列表</a></b></p>\n<p data-pid=\"jSJ6oubO\">不过那些例子时代有点远，我们看看 Adobe 最近收购的案例 ：</p>\n<ul>\n<li data-pid=\"5k-pSrVP\">\n<b><a href=\"http://link.zhihu.com/?target=https%3A//www.contentcal.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ContentCal</a></b> 收购后变成了 <b><a href=\"http://link.zhihu.com/?target=https%3A//www.adobe.com/express/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Adobe Express</a></b> 中的 Content Scheduler 功能<br>\n</li>\n<li data-pid=\"RTNzv7jW\">\n<b><a href=\"http://link.zhihu.com/?target=https%3A//frame.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">frame.io</a></b> 收购后保持独立运营，并加入了 Creative Cloud 套餐<br>\n</li>\n<li data-pid=\"IlpgY4Sf\">\n<b><a href=\"http://link.zhihu.com/?target=https%3A//www.abstract.com/2021-archive/notebooks\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Abstract Notebooks</a></b> 收购后变成了 <b><a href=\"http://link.zhihu.com/?target=https%3A//pages.adobe.com/creativecloud/en/collaboration/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Creative Cloud Spaces</a></b> 的一部分</li>\n</ul>\n<p><img src=\"https://picx.zhimg.com/v2-ab26e56716590635725f335c8cded4a0_720w.jpg?source=b1748391?rss\" data-caption=\"Abstract Notebooks\" data-size=\"normal\" data-rawwidth=\"3088\" data-rawheight=\"1672\" data-watermark=\"original\" data-original-src=\"v2-ab26e56716590635725f335c8cded4a0\" data-watermark-src=\"v2-f73f5da8e255c6f2eff5d15c52e899c5\" data-private-watermark-src=\"v2-c80965caefe1623640d182e94ed4686f\"></p>\n<p data-pid=\"miNceQRI\">其中既有收购后就成为产品一部分的，也有收购后能保持独立运营的，可见 Adobe 现在的收购策略灵活了一些。</p>\n<h2><b>预测收购带来的影响</b></h2>\n<p data-pid=\"9uk4PNM4\">不负责任的预测一下，过几年后来看看准确性如何。</p>\n<h2><b>Figma 的影响</b></h2>\n<p data-pid=\"u6Vwojck\">设计师们最关心的是收费情况，目前 Figma 的提供了基本可用的免费套餐还有教育版，而 Adobe 向来吝啬，目前 <b><a href=\"http://link.zhihu.com/?target=https%3A//www.figma.com/blog/a-new-collaboration-with-adobe/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Figma 的声明</a></b>中明确说了<b>目前没有改变价格的计划</b>，并且将<b>致力于保持 Figma 的自主运营</b>。参考 <b><a href=\"http://link.zhihu.com/?target=https%3A//frame.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">frame.io</a></b> 的例子，我觉得在 2 年内这个政策应该不会有变化。而在更远的未来，Adobe 收购 Figma 的目的就是得到市场主导地位，达到目的后难免会把价格调整到收益最大化的点。</p>\n<p data-pid=\"Kj4pvOED\">FigJam 很可能用某种形式可能从 Figma 剥离，取代 Adobe 自己做的（没掀起一点水花的） Creative Cloud Canvas ，看起来 Adobe 很看重协作白板的市场，毕竟 <b><a href=\"http://link.zhihu.com/?target=https%3A//miro.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Miro</a></b> 都有 175 亿美元估值。</p>\n<p data-pid=\"XWnI86Mw\">与 Creative Cloud 的结合，Adobe 一定会让 Figma 与 Creative Cloud 结合的更加紧密，或许之后会有一些与 Photoshop 、Illustrator、After Effects 通过 Creative Cloud 配合的功能，不过我不包太多期望，Creative Cloud 现在非常难用，Figma 的加入应该也不会改变这一点。</p>\n<h2><b>Adobe 的影响</b></h2>\n<p data-pid=\"gbq734hh\">收购 Figma 首先是标志着 Adobe XD 的彻底失败，又一次印证了 Adobe 自己出的软件就是不会成功，Adobe 不是好的土培。Adobe XD 从今年 3 月以来就没有实质上的功能更新了，不会有人觉得 Adobe 还会给 Adobe XD 继续投入吧。Adobe XD 的用户是时候去试试 Figma 了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-217eed481ca589afad96551b2077ed5f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1198\" data-rawheight=\"830\" data-watermark=\"original\" data-original-src=\"v2-217eed481ca589afad96551b2077ed5f\" data-watermark-src=\"v2-cef5e329850fcf76ac75119d092013bf\" data-private-watermark-src=\"v2-4f7f1aeff0e5f986a9a0c56ec5667a4e\"></p>\n<p data-pid=\"rcEENRSr\">从 Photoshop Design Space 到 Adobe Experience Design 再到 Adobe XD，一路看来还是唏嘘不已，从对抗 Sketch 到面对 Figma 崛起，Adobe XD 不乏一些亮点，但它行动的太慢了，太保守了，仿佛是蒸汽机车配上激光雷达，与时代的需求相去甚远。</p>\n<h2><b>中国用户的影响</b></h2>\n<p data-pid=\"wgHcm2Pj\">对中国用户最大的影响是 Figma 设计社区，由于 Adobe 在国内有运营主体，国内用户访问旗下产品的就得受到合规问题的影响。之前由于中国政府的合规要求，Adobe 就对国内用户关闭了 <b><a href=\"http://link.zhihu.com/?target=https%3A//www.behance.net/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Behance</a></b> 的访问。而 Figma 设计社区面临同样的问题，很可能因为某些人发了在国内不合时宜的设计图而导致设计社区必须屏蔽国内用户。</p>\n<p data-pid=\"KhyQWIC8\">而因为被 Adobe 收购，会有国内服务器或者官方中文版，我估计短时间不会发生，因为 Adobe 的云服务要入华是个非常复杂的事情，即时 Adobe 想要做，也不是一时半会儿能做成的。</p>\n<p data-pid=\"GKs27M1n\">可见的未来对国内用户有利的是，买 Figma 可以开发票了  。</p>\n<h2><b>对设计领域未来的看法</b></h2>\n<p data-pid=\"7_CzJ33C\">对于有些人来说，这可能不是一个好消息，因为 Figma 的故事到头了，一个有望超越 Adobe 的梦结束了，Figma 梦终结在 200 亿美元下。</p>\n<p data-pid=\"Itx5hv_f\">界面设计工具的战争结束了，原本不可一世的 Adobe 被 Figma 拿着 2 把新铸的圣剑 「Web」 与「协作」打得丢兵卸甲，而最后 Adobe 靠认输赢得了最后的胜利，有些戏剧性但又在情理之中。</p>\n<p data-pid=\"ZE3K0Ir-\">舆论中 Adobe 必然因为这次收购更加被骂，因为其过于自大而迟钝，也因为它收购了其直接竞对，有垄断市场之嫌。而 Figma 的用户非常的沮丧，因为很多 Figma 用户原本就是因为想逃离 Adobe 才使用的 Figma，这下尴尬了。</p>\n<p data-pid=\"gOApPXHH\">不过大部人的感受是很可能经过几个阶段：短期： Figma 药丸；中期：好像什么都没有变化；远期：果然是 Adobe；</p>\n<p data-pid=\"xuK4opzq\">对于界面设计工具而言，Figma 被 Adobe 收购，意味着全球市场很大概率被 Adobe 完全整合，参考 <b><a href=\"http://link.zhihu.com/?target=https%3A//frame.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">frame.io</a></b> 的策略，尤其是企业市场，很多公司原本就需要 Creative Cloud 套件，如果 Figma 也加入其中，Figma 对这些企业的吸引力就更大了。除非国内国外形成完全割裂的设计生态，国内做界面设计工具的不确定性又增加了不少。而且 Figma 也暴露出来一些自己的问题，这个故事没原来那么好讲了。</p>\n<p data-pid=\"v-KczTG4\">期待新的界面设计工具的诞生，我认为未来会有一个基于 Web 的界面设计工具，并且是经过 Figma 的历史，它将会是开源的，更开放的。而这正是因为 Figma 被 Adobe 收购导致的，因为它让出了人们心中的位置，人们会期待这样一款工具的诞生。生态位被让出来必然有新物种将去占据（不过不可能是 <b><a href=\"http://link.zhihu.com/?target=https%3A//github.com/penpot\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Penpot</a></b>）， 因为作为开源项目它用的是 Clojure 语言）。</p>\n<p data-pid=\"K59Alt9m\">没有下一个 Figma 了，Figma 就是最后一个 Figma</p>\n<p><br></p>\n<p data-pid=\"SSnxEwiq\">原文地址：<a href=\"http://link.zhihu.com/?target=https%3A//moonvy.com/blog/post/2022/adobe-to-acquire-figma/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">moonvy.com/blog/post/20</span><span class=\"invisible\">22/adobe-to-acquire-figma/</span><span class=\"ellipsis\"></span></a></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/si-xi-cha-cha?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">四喜茶茶</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/553789736/answer/2675600758?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">78 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/553794499?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待 Adobe  以 200 亿美金收购  Figma？</a><br><a href=\"http://www.zhihu.com/question/553792317?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">Adobe 宣布约 200 亿美元收购 Figma ，从商业角度如何解读此举？</a><br>\n","link":"http://www.zhihu.com/question/553789736/answer/2675600758?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"有没有什么科学的办法破解《jojo的奇妙冒险：石之海》缪缪只能记住三件新事情的能力？","date":"2022-09-16 03:18:49","description":"\n<p data-pid=\"-IU4sGQd\">恶魔枷锁（Jail House Lock）这场替身战是我最想吐槽的战斗没有之一。</p>\n<p data-pid=\"1RLl9EAO\">如果说其他的替身战大多是看完回想的时候隐约觉得哪里不太合理，那么这场战斗就是阅读过程中就明显感觉到了设计的不合理。</p>\n<p data-pid=\"yZYI1_ks\">这个替身的基础设定是“<b>受到攻击的人只能记住三件事，如果要记住第四件事则会忘掉最开始记住的第一件事，以此类推。</b>”</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d708d438324b5940d2c1fd58336572db_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1390\" data-rawheight=\"916\" data-watermark=\"original\" data-original-src=\"v2-d708d438324b5940d2c1fd58336572db\" data-watermark-src=\"v2-3c4f9a855d6d8c82e3087d2ab3eb0d52\" data-private-watermark-src=\"v2-6b146877705521251656646d035a5f86\"></p>\n<p data-pid=\"ORLFJ4aM\">这个设定问题可太大了。</p>\n<p data-pid=\"y6xXeM51\">如何定义“一件事”？“一件事”和“另一件事”之间的区别究竟在哪？</p>\n<p data-pid=\"oBRBk7uy\">“我今早8点起床”是一件事吗？</p>\n<p data-pid=\"8r7Lj7jF\">还是说“我<b>今早</b>起床”是一件事，“起床的<b>时间是8点</b>”是另一件事？</p>\n<p data-pid=\"TJ0gb8ZZ\">如果再胡搅蛮缠一点，“起床的人是<b>我</b>”能不能构成第三件事？</p>\n<p data-pid=\"gZQG1cYP\">在描述抽象的事件时，如何确定事件的所谓“颗粒度”，是这个设定最大的问题。</p>\n<p data-pid=\"Z9UjHrDw\">而荒木显然是没考虑这个问题，在这场替身战中徐伦记住事件的“颗粒度”一直是飘忽不定的。什么事情是“一件事”，什么事情是“两件事”，全靠荒木自己说了算。</p>\n<p data-pid=\"sv-jowzk\">举一些例子：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-76c8fe436700feba2e413dfd5ab83f1b_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1382\" data-rawheight=\"1183\" data-watermark=\"original\" data-original-src=\"v2-76c8fe436700feba2e413dfd5ab83f1b\" data-watermark-src=\"v2-e04d0a332ad26e725adb0ee374fd5809\" data-private-watermark-src=\"v2-446de65be31a286c2322e19ddd372346\" data-tags=\"porn\"></p>\n<p data-pid=\"d3cHn6Mp\">徐伦第一次中招以后荒木给我们展示的“三件事”的示例：</p>\n<p data-pid=\"8dbzC0Wb\">1 赶快拿起笔；</p>\n<p data-pid=\"YOgi58A3\">2 最多能新记住3件事；</p>\n<p data-pid=\"ueEhMeRw\">3 打倒本体，他的名字是缪缪；</p>\n<p data-pid=\"OewwZUGj\">显而易见，这里的第三件事的信息量更多，以前两件事的尺度来衡量的话，第三件事应该分拆成“打倒替身本体”和“替身本体的名字是缪缪”这两句话才行。</p>\n<p data-pid=\"ruSmVEXi\">如果更精确一些，直接记录“打倒缪缪”就可以了——因为这才是“一件事”，而不会因为信息过多变成“两件事”。</p>\n<p data-pid=\"ytDKseD-\">至于缪缪是谁，为什么要打倒她，这些都不在徐伦的考虑范围内。在可掌握信息极其有限的情况下，这场战斗的关键只在于<b>如何找到且识别出缪缪</b>。</p>\n<p><img src=\"https://picx.zhimg.com/v2-066a9af6d73bed96efacdb6cc46b8f02_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1485\" data-rawheight=\"2210\" data-watermark=\"original\" data-original-src=\"v2-066a9af6d73bed96efacdb6cc46b8f02\" data-watermark-src=\"v2-3ad373c4d7291013e3d7f4a40e06fd47\" data-private-watermark-src=\"v2-a3a37ed970f2224703a9afe0f9a6da38\" data-tags=\"porn\"></p>\n<p data-pid=\"lET8lLae\">当时徐伦已经记录了“只能记住3件事”和“去找安波里欧”两件事情了，只剩下一个事情的份额。</p>\n<p data-pid=\"yVGJ9d9g\">结果她记录下来的最后一件事是“<b>如果有人偷看你的左手，就毫不犹豫地打他</b>”。</p>\n<p data-pid=\"ZwBvEkyC\">这么长而且附带条件的表述为什么是一件事？</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1fc4b268a0bd5959eb68dabe8906dc48_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1668\" data-rawheight=\"2224\" data-watermark=\"original\" data-original-src=\"v2-1fc4b268a0bd5959eb68dabe8906dc48\" data-watermark-src=\"v2-415f15c41b6c88338f2dfaf8ba11a371\" data-private-watermark-src=\"v2-5fa87e44b0a3e1c5dede4036c1b9fa3d\" data-tags=\"porn\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-541664e73fc8ccf8f017e165f1461b1f_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1668\" data-rawheight=\"2224\" data-watermark=\"original\" data-original-src=\"v2-541664e73fc8ccf8f017e165f1461b1f\" data-watermark-src=\"v2-46314764fa313ab0f8511ff8d283103b\" data-private-watermark-src=\"v2-8d197608cc794aebde14bf99c59dd1fa\"></p>\n<p data-pid=\"-DeHHvo7\">本来已经抓到缪缪的徐伦，因为一下子看到了“3个看守”，所以记住了三件事，因此眼中看不到缪缪的踪迹了。</p>\n<p data-pid=\"pUiD8x-D\">这段更离谱。</p>\n<p data-pid=\"j7GzV7eo\">为什么看到了“3个看守”就是三件事？而不是“我看见了x个看守”从而构成一件事？</p>\n<p data-pid=\"T5V3qJms\">明明之前面对缪缪射出的四发子弹，徐伦还说“同时射出的子弹就可以一下记住”，这里同时出现的看守就必须分别记住吗？</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f34c5e2f59dcf56773b5160ecd8478eb_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1394\" data-rawheight=\"2224\" data-watermark=\"original\" data-original-src=\"v2-f34c5e2f59dcf56773b5160ecd8478eb\" data-watermark-src=\"v2-02c55a948e5778ceadd50c30b4f7fc75\" data-private-watermark-src=\"v2-12c740a30f4eecc09a02175e01d9c5cf\" data-tags=\"porn\"></p>\n<p data-pid=\"P8NYC74j\">此外，“记不住第四件事”什么时候变成“看不见第四件事”了？就算记不住要抓缪缪这回事，至少也应该能看见她才对。</p>\n<p data-pid=\"hA2b3j6x\">照这个逻辑，徐伦不应该只看不到缪缪，而应该是眼里除了三个看守之外一切新出现的东西都看不见了，包括没见过的楼梯、没见过的墙壁等等。</p>\n<p data-pid=\"D9viKMQO\">再者，如果任何一个看到的信息都构成一件事，那为什么徐伦偏偏要记住那三个看守？“新出现的楼梯”、“新出现的墙壁”为什么不构成一件事？</p>\n<p data-pid=\"Bsruec6z\">还有在整个战斗过程中，徐伦脑海里的“我要攻击她”这算不算需要单独记住的一件事呢？</p>\n<p data-pid=\"z2aCOa84\">从上面的情节来看，有的时候算，有的时候就不算，标准非常模糊。</p>\n<p><br></p>\n<p data-pid=\"Fkvt4T0l\">综上，对于“只能记忆三件事”这么一个抽象的能力，荒木对于“什么事情算一件事”的设定过于随意，后面更是直接吃书从“记不住第四件事”变成“看不见第四件事”，导致这场战斗的关键破局点——“找到并识别出缪缪”这个过程显得比较都合主义。</p>\n<p data-pid=\"Q8_Hok9_\">当荒木想让徐伦推进的时候，“见到偷看左手的人就揍她”也能算作一件事；</p>\n<p data-pid=\"djKyddN7\">当荒木想让缪缪逃走的时候，“看到三个看守”就必须得算三件事；</p>\n<p data-pid=\"RLVbQ3Lp\">当荒木想让徐伦决杀的时候，徐伦就可以瞬间记住“这是二进制图像、图像上有张人脸、眼前的人和图像长得一样、我要攻击她”这一连串的事情。</p>\n<p data-pid=\"mdx7uSqa\">“只能记忆三件事”本来就不是一个科学严谨的设定，这里头可以自由解释自由发挥的空间特别大，所以也谈不上什么有什么“科学的办法”来解决。</p>\n<p data-pid=\"KuZoMqeB\">更进一步，漫画里的“智斗”大抵如此。</p>\n<p data-pid=\"gfICM_Ri\">表面上是角色在斗智，实际上是制定规则时的漫画家和解释规则时的漫画家在不同时空中相互角力。</p>\n<p data-pid=\"IzL82T3K\">如果制定规则时的漫画家考虑比较周全，那么解释规则时的漫画家就可以给出看上去很合理的解释。</p>\n<p data-pid=\"LxLIlpG-\">如果制定规则时的漫画家思虑欠周，那么解释规则时的漫画家就不得不动用其身为作者的特权，强行把情节引导至他预设的结果。</p>\n<p data-pid=\"MAFg31EC\">这就是我们所说的机械降神或者都合主义。</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wo-you-xu-duo-de-xiao-bing-qi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">许多的小兵器</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/551831388/answer/2673015379?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">13 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/276916333?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">jojo的奇妙冒险刚开始看感觉要被劝退了，后面什么时候会精彩起来？</a><br><a href=\"http://www.zhihu.com/question/541123299?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">「JOJO 的奇妙冒险石之海」第 2 部分正式预告公开，其中都有哪些精彩看点？</a><br>\n","link":"http://www.zhihu.com/question/551831388/answer/2673015379?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"React 为什么重新渲染","date":"2022-09-06 08:29:00","description":"\n<p>更新（重新渲染）是 React 的重要特性 —— 当用户与应用交互的时候，React 需要重新渲染、更新 UI，以响应用户的输入。但是，React 为什么会重新渲染呢？如果不知道 React 为什么会重新渲染，我们如何才能避免额外的重新渲染呢？</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/186432/20/28325/37613/631725bbEf2ff226e/66b99021df66578b.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/react-re-renders-101/\">https://blog.skk.moe/post/react-re-renders-101/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/react-re-renders-101/"},{"title":"为什么你不应该在 React 中直接使用 useEffect 从 API 获取数据","date":"2022-08-19 08:53:00","description":"\n<p>React 是一个由 Facebook 开源的、可以在任意平台上构建 UI 的 JavaScript 库。在 React 中，一个常见的 Pattern 是使用 <code>useEffect</code> 搭配 <code>useState</code> 发送请求、将状态从 API（React 外部）同步到 React 内部、用于渲染 UI，这篇文章恰恰在向你介绍为什么你不应该直接这么做。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/180676/37/27394/27265/62ff57f2E600b3725/cff75c5fca39bbcc.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/\">https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/"},{"title":"NPM 自动更新版本号","date":"2022-08-04 05:00:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>ChenYFan 大佬的文章：<a href=\"https://blog.cyfan.top/p/d3c51290.html\">SpeedUp!使用黑科技为你的网站提速</a> 有提到过将 Hexo 博客的全部静态文件上传至 NPM 达到加速效果。</p>\n<p>但是 NPM 版本号不能重复，而且为了精准命中缓存和防止边缘 <code>@latest</code> 缓存过长，就必须指定版本号。</p>\n<p>本人在 <a href=\"https://blog.yfun.top/posts/2876015612/\">我的图床解决方案</a> 一文中使用的方法是 <code>npm version patch</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804133426.png\"></p>\n<p>但这个方法也有一些弊端，比如 <code>patch</code> 只会更新 <code>z</code> 位数的版本号，而且并不会上传至仓库，很可能会出现版本号冲突导致上传失败。这就是为什么最后还需要重新推送 Git 提交。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%95%E8%AF%95%E7%9C%8B\" class=\"headerlink\" title=\"试试看\"></a>试试看</h2>\n<p>NPM 版本号遵循 <code>semver</code> 规范，格式为 <code>major.minor.patch</code>。</p>\n<p>为了在获取最新版本号的时候不发生混乱，我选择先获取最新的版本号。</p>\n<blockquote><p>记得把 <code>cky-blog-static</code> 改成自己的项目名。</p></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>获取到最新版本号后，就可以对版本号进行分析。</p>\n<p>以 <code>1.4.7-b541af2ea284a39da0bbf63b88fdb65c</code> 为例，先按 <code>major.minor.patch</code> 分离。当然，也需要考虑版本号后还有 <code>build metadata</code> 的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\"><span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure><p><del>为了版本号好看些</del>，可以通过判断实现满十进一。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位小于 9，直接 +1</span></span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">} <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位大于等于 9，y 位小于 9，y+1, z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\"><span class=\"comment\">// z 大于等于 9，y 大于等于 9，x+1,y=0,z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>最后，重新拼接版本号。如果担心服务器缓存版本号导致冲突，还可以加上一些随机字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br></pre></td></tr></table></figure><p>将最新的版本号信息重新写入 <code>package.json</code> 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">packageJson.version = newVersion;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p><del>直接 CV 代码！</del></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新 package.json 版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fetch = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-fetch\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">\"js-md5\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> update = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">    verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newVersion);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">    packageJson.version = newVersion;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">    fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Complete!!\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">update();</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%90%8E\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>如果是 Hexo 文件部署，就可以直接把文件直接丢在项目根目录，Action 集成部署加上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node update.js</span><br></pre></td></tr></table></figure><p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804135818.png\"></p>\n<p><del>Blog 半年没更新，除除草 --(....</del></p>\n","link":"https://blog.yfun.top/posts/2022/auto-update-npm-version/"},{"title":"我有特别的 DNS 配置和使用技巧","date":"2022-07-28 15:31:00","description":"\n<p>众所周知，DNS 的作用与电话簿类似，将人类可读的域名映射到机器可读 IP 地址、使人更方便地访问互联网。DNS 是非常重要的互联网基础设施，对于改善上网冲浪的体验中的重要程度不容小觑。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/96381/31/31172/23930/62e2ab5bE554d388b/37027f4a03351b9e.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/i-have-my-unique-dns-setup/\">https://blog.skk.moe/post/i-have-my-unique-dns-setup/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/i-have-my-unique-dns-setup/"},{"title":"优化博客的累计布局偏移（CLS）问题","date":"2022-06-07 17:24:00","description":"\n<p>距离上一篇文章发布已有四个月了，是时候写几篇文章给博客除草了。上一次我介绍了我如何迁移、重构了我的博客的架构，这次我想来谈谈我在重构中优化和打磨访客体验时解决的一个问题。我的博客优化之旅 图片 lazyload 的学问和在 Hexo 上的最佳实践 我的博客有多快？ 天下武功，唯快不破 —— 我是这样优化博客的 ...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/206311/26/14625/38940/629f7f81Eb11312de/b1e67f07b1cc9bc7.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/fix-blog-cls/\">https://blog.skk.moe/post/fix-blog-cls/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/fix-blog-cls/"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]